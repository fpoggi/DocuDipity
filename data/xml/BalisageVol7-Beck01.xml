<?xml version="1.0" encoding="UTF-8"?><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0-subset Balisage-1.3"><title>The False Security of Closed XML Systems</title><info><confgroup><conftitle>Balisage: The Markup Conference 2011</conftitle><confdates>August 2 - 5, 2011</confdates></confgroup><abstract><para>Creating and using XML documents in a closes system gives a false sense of “All’s
                Well”. A Closed XML system is one where a single party creates and uses the XML
                documents. Certainly this happens all of the time. We all create little XML
                documents with one-off throw-away models for one task or another that only we use.
                These documents will not be the focus here. When documents are created in a closed
                XML workflow and sent to another entity - such as an archive - for reuse, publishers
                can quickly learn that the content they have been accumulating is not useful for
                anything outside of their system and may not be useful if their own systems are
                upgraded or changed. </para><para>The checks and procedures that must be put in place to support XML interchange
                between entities should be applied within closed XML systems to keep the content
                usable and useful.</para></abstract><author><personname><firstname>Jeff</firstname><surname>Beck</surname></personname><personblurb><para>Jeff has been involved in the PubMed Central project at NLM since 2000. He has
                    been working journal publishing since the early 1990.</para></personblurb><affiliation><jobtitle>Technical Information Specialist</jobtitle><orgname>National Center for Biotechnology Information (NCBI), National Library of
                    Medicine (NLM), National Institutes of Heath (NIH)</orgname></affiliation></author><legalnotice><para>Author's contribution to the Work was done as part of the Author's official duties as an NIH employee and is a Work of the United States Government. Therefore, copyright may not be established in the United States. 17 U.S.C. § 105. If Publisher intends to disseminate the Work outside the U.S., Publisher may secure copyright to the extent authorized under the domestic laws of the relevant country, subject to a paid-up, nonexclusive, irrevocable worldwide license to the United States in such copyrighted work to reproduce, prepare derivative works, distribute copies to the public and perform publicly and display publicly the work, and to permit others to do so. </para></legalnotice></info><para>I have been working on the PubMed Central <citation linkend="PMC01">[PMC01]</citation>repository at the National Library of Medicine for 11 years. My role
        there is to ingest XML from different publishers and transform it into the JATS format
            <citation linkend="JATS01">[JATS01]</citation> for inclusion in our database. In this
        role, I have seen a lot of article SGML and XML content and had to make decisions on whether
        it was of a consistent quality to be included in the PMC database or not. </para><para>Sometimes we have problems with content that is submitted to PMC. We see content that is
        not well-formed, not valid to the schema that is being used, tag abuse and other
        inconsistencies in how the elements and attributes of the XML model have been
        applied.</para><para>PMC accepts content in many different XML formats, but well over 50% of the content being
    supplied currently is in one of the JATS models. Both the Archving and Interchange and the Journal Publishing
    models use the XHTML table model; the CALS table model is supplied in the Tag Suite but not used 
    in these two models. A wonderful example of content no longer being valid outside of a closed system
    involved a modification of the DTD to call in the CALS table model. The DTD was expanded correctly, and 
    everything ran fine on the publisher's system. However the DTD files were not given a new name. Also, the 
    PUBLIC and SYSTEM IDs used in the DOCTYPE declaration in the instances were those that were defined 
    for the Journal Publishing Model. </para><para>When this content arrived in PMC, the PUBLIC ID was resolved the the standard Journal Publishing DTD 
    (without the extra table model), and all of the instances were invalid.</para><para>When we provide feedback on the sample XML supplied during the PMC evaluation process
            <citation linkend="Beck01">[Beck01]</citation>, the response we most often here from the
        publishers is "We paid a lot of money to get this XML. It works on our website, so we know
        it is good."</para><para>It is obvious that if inconsistent and invalid content works in their system that they are
        creating and using their content in a Closed XML System.</para><section><title>What Is a Closed XML System?</title><para>A closed XML system is a system where the XML files never leave the system or are
            never used by anyone other than the creator. We have all created little XML documents
            with one-off throw-away models for one task or another that only we use. </para><para>An  example would be if you were creating a To Do list application to run 
            in XML for your own use. First you would figure out what you want to track and probably 
            start with a sample document. </para><programlisting xml:space="preserve">
            &lt;todolist&gt;
                &lt;todo&gt;
                    &lt;due month="07" day="08" year="2011"/&gt;
                    &lt;reminder month="07" day="01" year="2011"/&gt;
                    &lt;task&gt;Finish Balisage Paper.&lt;/task&gt;
                &lt;/todo&gt;
            &lt;/todolist&gt;
        </programlisting><para>This works for a while, and then you decide to add a second reminder.</para><programlisting xml:space="preserve">
            &lt;todolist&gt;
                &lt;todo&gt;
                    &lt;due month="07" day="08" year="2011"/&gt;
                    &lt;first-reminder month="07" day="01" year="2011"/&gt;
                    &lt;second-reminder month="07" day="01" year="2011"/&gt;
                    &lt;task&gt;Finish Balisage Paper.&lt;/task&gt;
                &lt;/todo&gt;
            &lt;/todolist&gt;
        </programlisting><para>And maybe a way to add custom messages.</para><programlisting xml:space="preserve">
            &lt;todolist&gt;
                &lt;todo&gt;
                    &lt;due month="07" day="08" year="2011"/&gt;
                    &lt;first-reminder month="07" day="01" year="2011"&gt;
                        &lt;message&gt;Just one week left to finish the paper.&lt;/message&gt;
                        &lt;/first-reminder&gt;
                    &lt;second-reminder month="07" day="01" year="2011"&gt;
                         &lt;message&gt;Time to call Tommie to get an extension.&lt;/message&gt;
                        &lt;/second-reminder&gt;
                   &lt;task&gt;Finish Balisage Paper.&lt;/task&gt;
                &lt;/todo&gt;
            &lt;/todolist&gt;
        </programlisting><para>As this simple model has evolved, you've kept up with it with your XSLT or XQuery that you are 
            using to process the To Do list. You can handle a &lt;reminder&gt;, a &lt;first-reminder&gt;, and
            a &lt;second-reminder&gt;, both with and without &lt;message&gt;. The To Do list works fine because, 
            although you have inconsistent data, you were able to make allowances for it in your processor
            when you made the changes to the model. </para><para>This is not a problem, because you control both ends of the process and nothing is showing 
        up unexpectedly. Confusion could arise if you shared your data with someone else who had to figure
        out what the difference was between a &lt;reminder&gt; and a &lt;first-reminder&gt; and what to do 
        with those that have messages and those that don't.</para><para>But these little
            documents are not the focus of this paper. </para><para>Coming from the document publishing side of the XML world, I am going to concentrate
            on document content XML: journal articles, books, book chapters, reports. But these
            'rules' apply to any XML that is intended to be saved, used or reused. Certainly this
            would apply to both document and data XML applications. </para></section><section><title>XML Interchange</title><para>A not-closed XML system is one where there is some interchange of XML. This could be
            interchange between organizations, interchange between departments in an organization,
            or between individuals. Interchange can be an sharing of content between entities, but
            it could also be between steps in an XML workflow.</para><para>The submission of papers for this conference is an example of XML interchange. The
            author creates XML to be used by the conference committee for peer review and
            (hopefully) publication in the conference proceedings. </para></section><section><title>A Classic Communication Model</title><para>Wiener's modification of Shannon's classic communication model (see <xref linkend="F1"/>; <citation linkend="Wiener01">Wiener01, </citation>
            <citation linkend="Wiener02">Wiener02, </citation>
            <citation linkend="Foulger01">Foulger01</citation>) can be applied to XML interchange.
            In the communication model, there are two actors, the sender (information source) and
            the receiver (destination).</para><figure xml:id="F1" xreflabel="Fig. 1"><title>Interactive Communication Model</title><mediaobject><imageobject><imagedata format="png" fileref="../../../vol7/graphics/Beck01/Beck01-001.png"/></imageobject></mediaobject></figure><para>The communication in <xref linkend="F1"/> contains the following steps: <orderedlist><listitem><para>The Information Source creates a Message.</para></listitem><listitem><para>The Message is converted into a Signal and sent by the Transmitter.</para></listitem><listitem><para>The Signal may be acted upon or interfered with by Noise - some third
                        party or environmental activity. </para></listitem><listitem><para>The Received Signal is converted into a Message by the Receiver.</para></listitem><listitem><para>The Destination receives the Message.</para></listitem><listitem><para>The Destination provides feedback to the Information Source. </para></listitem></orderedlist></para><para>Of course, this feedback is another message, with the original Destination as the
            Information Source, but what is important here is that the Receiver acknowledges or
            confirms the Message. (At this point, the Balisage audience should all be nodding their
            heads in agreement.) The feedback is a critical element of communication. It allows the
            sender to know whether the message is getting through and to make adjustments necessary
            to make the communication successfull.</para><para>This model can be applied to any communication. For example a telephone conversation: <orderedlist><listitem><para>Person A (Information Source) says "XML is great!" (Message) into his
                        telephone.</para></listitem><listitem><para>Telephone (Transmitter) converts sound to electrical Signal</para></listitem><listitem><para>The cell drops out (Noise).</para></listitem><listitem><para>Person B's telephone (Receiver) converts the Received Signal into sound
                        (Message).</para></listitem><listitem><para>Person B hears, "XML is gray---".</para></listitem><listitem><para>Person B provides feedback: "Gray?"</para></listitem></orderedlist>
        </para></section><section><title>What can go wrong with XML - The four layers of "bad"</title><para>XML can go bad on several levels. These levels were beautifully and simply illustrated
            by <citation linkend="Bauman01">[Bauman01]</citation> in "The 4 'Levels' of XML
            Rectitude". The TEI examples in this section are his. </para><para>The first thing that can go wrong is that the XML is not well-formed. Simply the basic
            rules of XML are not followed.</para><figure xml:id="F2" xreflabel="Fig. 2"><title>Not Well-Formed XML</title><programlisting xml:space="preserve">&lt;titleStmt&gt;
  &lt;title&gt;Fun!&lt;/head
&lt;/titleDesc</programlisting></figure><para>If the document is well formed, the next potential problem is validity. Does the
            syntax of the XML match the schema?</para><figure xml:id="F3" xreflabel="Fig. 3"><title>Invalid TEI XML</title><programlisting xml:space="preserve">&lt;note href="#there" &gt;
  &lt;div&gt;
    What? In TEI, &lt;gi&gt;div&lt;/gi&gt; is
    not allowed in &lt;gi&gt;note&lt;/gi&gt;.
  &lt;/div&gt;&lt;/note&gt;</programlisting></figure><para>Assuming that the document is well-formed and valid, next you have to worry about
            Sensibility. XML constructions that do not make any sense are not good to anyone. </para><figure xml:id="F4" xreflabel="Fig. 4"><title>Nonsense XML construction</title><programlisting xml:space="preserve">&lt;caesura xml:space="preserve"/&gt;
&lt;respStmt&gt;
  &lt;name&gt;&lt;catchwords/&gt;&lt;/name&gt;
  &lt;resp&gt;&lt;height unit="cm"/&gt;&lt;/resp&gt;
&lt;/respStmt&gt;</programlisting></figure><para>Finally, if the XML is well-formed, valid, and is sensibly constructed, the content
            may just be wrong. </para><figure xml:id="F5" xreflabel="Fig. 5"><title>Just wrong content</title><programlisting xml:space="preserve">&lt;quote who="#Washington" &gt;
  &lt;time dur="PT4H7M"]] &gt; Four score and
  seven years&lt;/time&gt; ago our fathers
  brought forth on this continent a
  new nation …&lt;/quote&gt;</programlisting></figure></section><section><title>Applying the communication model to XML Interchange</title><para>We can apply the classic communication model to interchange of XML between
            entities.</para><figure xreflabel="Fig. 6" xml:id="F6"><title>XML Interchange in the Communication model</title><mediaobject><imageobject><imagedata fileref="../../../vol7/graphics/Beck01/Beck01-002.png" format="png"/></imageobject></mediaobject></figure><para><xref linkend="F6"/> shows how the communication model can be applied to XML
            interchange between parties. The steps in this communication are: <orderedlist><listitem><para>The Information Source creates some Content.</para></listitem><listitem><para>The Content is encoded into a file based on an XML Model and sent. </para></listitem><listitem><para>The file may be acted upon or interfered with by Noise. </para></listitem><listitem><para>The file is converted into Content with the XML Model.</para></listitem><listitem><para>The Destination receives the Content.</para></listitem><listitem><para>The Destination provides feedback to the Information Source. </para></listitem></orderedlist>
        </para><para>For our purposes, we can simplify this model somewhat by removing the Noise. Certainly
            there can be noise in XML interchange, but I see noise that occurs in the transfer of
            files as a Systems problem and outside the scope of this discussion. </para><para>There is another change we need to make, which is at the root of our discussion. Just
            as there may have been problems encoding and decoding the Message into and out of the
            Signal in the communication model because the Transmitter and Receiver are not the same
            entity, we need to note here that the XML is encoded with the Sender's XML model and
            decoded with the Receiver's XML model (see <xref linkend="F7"/>). </para><figure xreflabel="Fig. 7" xml:id="F7"><title>Modified XML Interchange model</title><mediaobject><imageobject><imagedata fileref="../../../vol7/graphics/Beck01/Beck01-003.png" format="png"/></imageobject></mediaobject></figure><para>So, if the Sender's XML Model is not exactly the same as the Receiver's XML model,
            there will be distortion of the Content, just as there is distortion of the Message if
            the Receiver is not decoding the signal as the Transmitter encoded it.</para><para>Because XML is intended to be machine-processed content, we can run some tests after
            the XML has been received. First, we can test Well-Formedness with any XML parser.
            Well-formedness is defined by the XML Specification.</para><para>The rest of the tests require some agreement between Sender and Receiver, either
            explicitly ("I am going to send you this article in DocBook 5 format.") or implicitly -
            where the XML file identifies itself. Either way, we can test for validity by processing
            the file with the agreed-upon schema. </para><para>Next, content Sensibility can be checked with a content-application-level tool such as
            a Schematron or other application-specific checking tool like the PMC Stylechecker. For
            example, it would be trivial to write a Schematron rule to check the schema-valid but
            Nonsense XML in Fig. 4. If the application thought that a &lt;height&gt; element with
            units but no value was not "correct", a test could be added for that; similarly if
            &lt;catchwords&gt; was not something you wanted to see in &lt;name&gt;, you could have a
            test for that. But, Sensibility checking at this level comes with a price, which is even
            greater communication between Sender and Receiver. </para><para>All of this Sender/Receiver communication is for one goal: to get the Sender's XML
            model and the Receiver's XML model to be as closely aligned as possible. This works
            pretty well in XML systems where content is transferred between entities, because the
            receiver is accustomed to running at least well-formedness and validity checks on
            incoming content. </para><figure xreflabel="Fig. 8" xml:id="F8"><title>XML Interchange model with checks</title><mediaobject><imageobject><imagedata fileref="../../../vol7/graphics/Beck01/Beck01-004.png" format="png"/></imageobject></mediaobject></figure></section><section><title>Closed Systems</title><para>In a closed XML system, the Sender and Receiver are the same entity. This greatly
            simplifies the XML interchange model (see Figs 9 and 10). </para><figure xreflabel="Fig. 9" xml:id="F9"><title>XML Interchange in a closed system. </title><mediaobject><imageobject><imagedata fileref="../../../vol7/graphics/Beck01/Beck01-005.png" format="png"/></imageobject></mediaobject></figure><figure xreflabel="Fig. 10" xml:id="F10"><title>Actually the Information Source and Destination are the same Entity.</title><mediaobject><imageobject><imagedata fileref="../../../vol7/graphics/Beck01/Beck01-006.png" format="png"/></imageobject></mediaobject></figure><para>In <xref linkend="F10"/>, things have gotten very simple with the Information Source
            and Destination collapsed. And in some cases things are quite simple here. The danger of
            a closed XML system is that it gives a false sense of "All's Well." There are several
            things that happen in closed systems. First, one entity controls both ends of the pipe. </para><para>For example, one person can be responsible for tagging articles for a magazine and
            building the rendering software that renders the articles on the web in HTML. When a new
            object appears in an article, the only requirement for the XML tagging is that it works
            in the renderer. </para><para>Generally in these systems, the only test that things are OK is that the XML is
            working in the system; that is, in a system that was created to fit each twist and turn
            in the evolving XML model. If XML tools are used, then well-formedness tests come along
            for the ride, but validation against a schema (if there is one) is deemed unnecessary
            and complicated. After all, "Our XML works".</para><para>In a closed system, "Garbage In" is OK, because you control both ends of the pipe,
            know the garbage is coming through, and build something to deal with it when it comes
            out the other end. Sometimes Garbage In is OK.</para><para>And if it works, that is great. The real price for this closed system won't come due
            until you either have to send your XML to someone for reuse or reuse it yourself.</para><para>Switching to an XML Interchange workflow from a closed system can be humbling and
            expensive. Any Destination that will be taking your content will expect it to pass all
            four levels of XML Rectitude, will actively check well-formedness and validity against a
            schema, and will seek information on tagging conventions (sensibility) expecting (or at
            least hoping for) some consistency in the tagging. </para><para>If the XML corpus has not been subjected to these checks throughout there will be big
            problems with reuse of the content by an outside entity. </para><para>Similarly, when everything about your XML system is in one geek's head, you will have
            trouble maintaining the system, let alone changing it or upgrading it when that geek
            moves on to greener pastures. </para></section><section><title>Standards are the answer?</title><para>Actually not really. Using a standard model like the TEI, DocBook, or the JATS will
            get you schemas and some information on best practices for tagging, but there is no
            forced validation. Also, in closed XML Systems, there is no penalty for Tag Abuse. That
            is, if the standard schema does not have an element for an object, you can just tag your
            content any way you like. Because you control both ends of the pipe, </para></section><section><title>Requirements for XML Interchange</title><para>There are two requirements for any XML Interchange, and they both come from an
            agreement between the Information Source and the Destination.</para><orderedlist><listitem><para>Validation - XML files must be well-formed and valid against an agreed-upon
                    schema.</para></listitem><listitem><para>Defined tagging practices - XML files will be tagged consistently in a manner
                    that makes sense.</para></listitem></orderedlist><para>These two requirements for interchange are the same ones you will need to run a
            consistent, sane system over time. </para><para> If xml interchange is like a conversation, than a closed system is like listening to
            the voices in your head. </para></section><bibliography><title>References</title><bibliomixed xml:id="PMC01">PubMed Central, <link xlink:href="http://www.ncbi.nlm.nih.gov/pmc/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://www.ncbi.nlm.nih.gov/pmc/</link>.</bibliomixed><bibliomixed xml:id="JATS01">NLM Archiving and Interchange DTD, <link xlink:href="http://dtd.nlm.nih.gov/archiving/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://dtd.nlm.nih.gov/archiving/</link>.</bibliomixed><bibliomixed xml:id="Wiener01">Wiener, N. (1948). Cybernetics: or Control and Communication
            in the Animal and the Machine. Wiley.</bibliomixed><bibliomixed xml:id="Wiener02">Wiener, N. (1986). Human Use of Human Beings: Cybernetics and
            Society. Avon.</bibliomixed><bibliomixed xml:id="Foulger01">Foulger, Davis. (2004) "Models of the Communication
            Process." <link xlink:href="http://davis.foulger.info/research/unifiedModelOfCommunication.htm" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://davis.foulger.info/research/unifiedModelOfCommunication.htm</link></bibliomixed><bibliomixed xml:id="Bauman01">Bauman, Syd. (2010) "The 4 Levels of XML Rectitude", Balisage
            2010, poster.</bibliomixed><bibliomixed xml:id="Beck01">Beck, Jeff. “Report from the Field: PubMed Central, an
            XML-based Archive of Life Sciences Journal Articles.” Presented at International
            Symposium on XML for the Long Haul: Issues in the Long-term Preservation of XML,
            Montréal, Canada, August 2, 2010. In Proceedings of the International Symposium on XML
            for the Long Haul: Issues in the Long-term Preservation of XML. Balisage Series on
            Markup Technologies, vol. 6 (2010). doi:10.4242/BalisageVol6.Beck01. <link xlink:href="http://www.balisage.net/Proceedings/vol6/html/Beck01/BalisageVol6-Beck01.html" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://www.balisage.net/Proceedings/vol6/html/Beck01/BalisageVol6-Beck01.html</link></bibliomixed></bibliography></article>