<?xml version="1.0" encoding="UTF-8"?><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0-subset Balisage-1.3"><title>One Href is not Enough</title><subtitle>We need n hrefs!</subtitle><info><confgroup><conftitle>Balisage: The Markup Conference 2011</conftitle><confdates>August 2 - 5, 2011</confdates></confgroup><abstract><para>The web is hyperlinks for the masses. </para><para>Hyperlinks are an old concept that has been invented before the web and to achieve this remarkable success, the web had to come out
                with a very simplified version of hyperlinks.</para><para>In the process a lot of features have been lost and some of them, such as the possibility to link to multiple targets have been
                lost.</para><para>This talk proposes to use modern techniques to regain this ability while remaining conform to existing standards and running in
                existing browsers. </para></abstract><author><personname><firstname>Eric</firstname><surname>van der Vlist</surname></personname><personblurb><para>Eric is an independent consultant and trainer. His domain of expertise include Web development and XML technologies.</para><para>He is the creator and main editor of <link xlink:href="http://xmlfr.org" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">XMLfr.org</link>, the main site dedicated to XML
                    technologies in French, the author of the O'Reilly animal books XML Schema and RELAX NG and a member or the ISO DSDL (<link xlink:href="http://dsdl.org" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://dsdl.org</link>) working group focused on XML schema languages.</para><para>He his based in Paris and you can reach him by mail (<link xlink:href="mailto:vdv@dyomedea.com" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">vdv@dyomedea.com</link>) or meet
                    him in one of the many conferences where he presents his projects.</para></personblurb><affiliation><orgname>Dyomedea</orgname></affiliation></author><legalnotice><para>Copyright Â© 2011 by the author. Used with permission.</para></legalnotice></info><section><title>Introduction</title><para>I am a <link xlink:href="http://www.urbandictionary.com/define.php?term=webaholic" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">webaholic</link>: the web has changed my life and it has
            changed the way I write: links are disruptive and my writing is no longer the same since I can use them.</para><para>Before the web (and before the links) you had to be very careful to be understood and introduce all the words that were not commonly
            known or disambiguate those that could be ambiguous.</para><para>Now that we have links, we can use them for these two purposes and concentrate on the message we express. This leads to a new
            conciseness that I love.</para><para>Unfortunately when you use links a lot you run rapidly into trouble...</para><para>The other day, I was writing a blog post to announce that my paper had been accepted at XPL Prague:</para><blockquote><para>Just got the confirmation that I'll be presenting a paper on XQuery injection at XML Prague March 26th or 27th.</para><attribution><link xlink:href="http://eric.van-der-vlist.com/blog/2011/01/26/see-you-in-prague/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">See you in Prague</link></attribution></blockquote><para>While typing the obvious question arose: where should I link "XQuery" to?</para><itemizedlist><listitem><para>To Wikipedia which is usually a good choice because it provides cool URIs (that don't change) and pages that introduce a
                    subject?</para></listitem><listitem><para>To the W3C recommendation which is another cool URI (that doesn't change) and is the normative reference but isn't an
                    introductory material?</para></listitem><listitem><para>Elsewhere (to the XQuery tag on my blog, to the W3C XML Query Working Group,...)?</para></listitem></itemizedlist><para>And, for versioned resources such as Wikipedia pages or W3C recommendations should I link to the current version at the date when I
            wrote the blog entry or to an updated, latest version?</para><para>All these choices make sense but (X)HTML imposes to chose one and only one target for a link!</para><para>The problem got worse when I was typing "XML Prague" because I had to choose between:</para><itemizedlist><listitem><para>Linking "XML" and "Prague" separately (and again, to which target? Wikipedia, the W3C recommendation, the XML category for
                    "XML"; Wikipedia, tourist office, ... for "Prague")</para></listitem><listitem><para>Linking "XML Prague" as a whole to the conference web site or the tag on my blog.</para></listitem></itemizedlist><para>This issue of embedded links seems really tough and I think I could live with it but wanted to mention it for completeness.</para><para>The problem can also get worse when I write in French because I often want to give the choice between targets in French and targets in
            English when they are higher quality...</para><para>In other words: one href is not enough, we need n hrefs!</para><para>Am I asking too much?</para><para>I don't think so, my requirements are legitimate and generic: I want to be able to write simple sentences using the words that are
            relevant in my domain(s) while using links to give to my readers the ability to discover the meaning of the words that they don't know,
            browse authoritative resources to deepen or extend their knowledge or find out relative pages that I have written.</para><para>Furthermore this is an old issue already addressed in SGML world by HyTime and acknowledged by the W3C back in 1997!</para><para>What happened then?</para><para>The topic has always been considered touchy and the first working draft published in April 97 as "Extensible Markup Language (XML): Part
            2. Linking" notes:</para><blockquote><para>Please be advised that the draft you are now reading is <emphasis>unusually volatile</emphasis>. The debating and balloting process
                which determines the material contents is far from complete, and is nonetheless substantially ahead of the editing process that turns
                the material contents into usable specification language.</para><attribution><link xlink:href="http://www.w3.org/TR/WD-xml-link-970406" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">Extensible Markup Language (XML): Part 2.
                Linking</link></attribution></blockquote><para>The content was indeed so volatile that the specification was taken out of the XML recommendation and eventually became a recommendation
            no less that four years after in June 2001. This recommendation, known as XLink, does address what I need:</para><blockquote><para>This specification defines the XML Linking Language (XLink), which allows elements to be inserted into XML documents in order to
                create and describe links between resources. It uses XML syntax to create structures that can describe links similar to the simple
                unidirectional hyperlinks of today's HTML, as well as more sophisticated links.</para><attribution><link xlink:href="http://www.w3.org/TR/2001/REC-xlink-20010627/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">XML Linking Language (XLink) Version 1.0</link></attribution></blockquote><para>Unfortunately, without wanting to start a flame war nor blame anyone, I think it is fair to say that the syntax of these sophisticated links mentioned in this introduction and known as
            "extended links" is so complex that they are considered unusable by most of us XML geeks and have no chance to be embedded in real world (X)HTML pages. If you're not convinced by this bold
            statement, please hold on: I'll come back on extended XLinks in a while... </para><para>Is this topic doomed then? How can we go through when previous attempts seem to have all failed?</para><para>Ten years have passed since 2001 and one of the things we've learned is to hijack existing technologies to do what we need! Some
            hijacking technologies have even become de facto standards... Why not call them to the rescue?</para><para>In other words, why not use microformats, RDFa or HTML5's microdata to specify these "sophisticated links" that are missing to
            XML?</para></section><section><title>Requirements</title><para>Please take the remaining of this paper as a demonstration of how this problem could be handled rather than a final proposition...</para><para>The requirements that are chosen here are arbitrary: they meet what I find important as I write these lines and are subject to discussion but I am confident that the same method can be
            used with different requirements sets as long as they remain "reasonably" simple!</para><para>The requirements for this exercise can be summarized as defining a (X)HTML jargon (microformat, RDFa, microdata, ...) that:</para><orderedlist><listitem><para>Expresses inline links with multiple arcs between (X)HTML fragments and several link ends.</para></listitem><listitem><para>Can be processed by a simple JavaScript library to be displayed in a fancy way.</para></listitem><listitem><para>Degrades nicely and remains readable when not processed by such a library.</para></listitem><listitem><para>Plays well with search engines.</para></listitem><listitem><para>Do not requires server storage.</para></listitem><listitem><para>If possible, provides a way to annotate the arcs (to provide arc roles, the language of link ends or other informations).</para></listitem><listitem><para>If possible, support embedded links.</para></listitem></orderedlist><para>The general idea is to keep the thing as simple as possible while maintaining good practices!</para><para>Requirement 3 excludes solutions such as <link xlink:href="http://www.webresourcesdepot.com/multiple-links-inside-one-pluralink/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">pluralink</link> that package multiple links into a single href attribute and is not "degradable" since the link doesn't work if it
            isn't processed by a script.</para><para>Requirements 3 and 4 can be contradictory. Taken alone, point 3 would lead to defining a jargon that would replace "XQuery" by
            "XQuery [Wikipedia, W3C]" with links between the words "Wikipedia" and "W3C" and (respectively) the article about XQuery on Wikipedia and
            the XQuery W3C recommendation but the practice may be considered as an almost as poor as the infamous <link xlink:href="http://www.w3.org/QA/Tips/noClickHere" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">"Click here" practice</link>!</para><para>Requirement 4 will thus lead to more verbose alternatives such as "XQuery [XQuery on Wikipedia, XQuery W3C Recommendation]" with links
            on "XQuery on Wikipedia" and "XQuery W3C Recommendation".</para><para>Requirement 5 excludes services such as <link xlink:href="http://www.multiurl.com/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://www.multiurl.com/</link> that are similar to URL
            shorteners with the additional possibility to define multiple targets.</para><note><para>This is a simplified set of requirements and that do not take into account chained links such as the relation between a page and its archive or translation. In this first version the
                arcs are between a document fragment and multiple resources that are all at the same level. In a next iteration, we'll have to see how this can be extended to introduce relations
                between linked resources.</para></note></section><section><title>First Step: Without Embedded Links</title><para>Let's first keep things simple and explore simple implementations for microformats, RDFa and microdata.</para><para>In each case, we will present the markup to express an nhrefs link and the corresponding JavaScript implementation.</para><para>This implementation will loop over nhrefs links and for each link it will hide the original markup but keep it intact so that other
            scripts could access the information for other purposes if that was necessary. For each link, a dialog will be created and a simple link
            will be added to open this dialog.</para><section><title>Kissing with Microformat</title><para>The good thing with microformats is that their "balisage" is flexible and they often can be kept as simple as possible...</para><para>In our case, the following seems to be good enough (indentation has been added to make the code more readable):</para><programlisting xml:space="preserve">&lt;span class="nhrefs"&gt;
    &lt;span class="source"&gt;XQuery&lt;/span&gt; 
    [
        &lt;a href="http://en.wikipedia.org/wiki/XQuery" class="arc" rel="wikipedia"&gt;XQuery on Wikipedia&lt;/a&gt;, 
        &lt;a href="http://www.w3.org/TR/xquery/" class="arc" rel="authoritative"&gt;XQuery W3C Recommendation&lt;/a&gt;
    ]
&lt;/span&gt;</programlisting><para>Where:</para><variablelist><varlistentry><term>span.nhrefs</term><listitem><para>Is the container for an extended link.</para></listitem></varlistentry><varlistentry><term>span.source</term><listitem><para>Is the source of the link (the link start if you prefer). This source is always local to the document.</para></listitem></varlistentry><varlistentry><term>a.arc</term><listitem><para>Is an arc.</para></listitem></varlistentry><varlistentry><term>a.arc/@rel</term><listitem><para>Is the arc role (using curies and/or a set of well known common roles).</para></listitem></varlistentry><varlistentry><term>a.arc/@href</term><listitem><para>Is the URL of the arc destination.</para></listitem></varlistentry><varlistentry><term>a.arc/node()</term><listitem><para>Is the label of the arc end.</para></listitem></varlistentry></variablelist><para>This format degrades reasonably well when it is not processed by any kind of script:</para><figure><title>Microformat not processed by a script</title><mediaobject><imageobject><imagedata format="png" fileref="../../../vol7/graphics/Vlist01/Vlist01-001.png"/></imageobject></mediaobject><caption><para>Snapshot of my blog using this microformat to link the word "XQuery" to its Wikipedia definition and its W3C recommendation when
                    the page is not processed by a script.</para></caption></figure><para>With a simple JavaScript function, this text can be streamlined into:</para><figure><title>Microformat processed by a script</title><mediaobject><imageobject><imagedata format="png" fileref="../../../vol7/graphics/Vlist01/Vlist01-002.png"/></imageobject></mediaobject><caption><para>Snapshot of my blog using this microformat to link the word "XQuery" to its Wikipedia definition and its W3C recommendation and
                    streamlined by a script.</para></caption></figure><para>This script opens a dialog when you click on link that has been generated around the word "XQuery":</para><figure><title>Microformat processed by a script after a click</title><mediaobject><imageobject><imagedata format="png" fileref="../../../vol7/graphics/Vlist01/Vlist01-003.png"/></imageobject></mediaobject><caption><para>Snapshot of my blog using this microformat to link the word "XQuery" to its Wikipedia definition and its W3C recommendation,
                    streamlined by a script and after a click.</para></caption></figure><para>If you wonder the level of complexity of such a script, here is a version that uses jQuery (the code could probably be further
            simplified: I am not a jQuery expert):</para><programlisting xml:space="preserve">jQuery(document).ready(function() {
 
    jQuery('.nhrefs')
        .each(function() {
    
            var span = jQuery(this);
            span.hide();
            var source = jQuery('.source', this).text();
            var link = jQuery(span.before('&lt;a href=""&gt;'+ source +'&lt;/a&gt;')[0].previousSibling);
            var dialog = jQuery(span.before('&lt;div title="Links for &amp;quot;'+ source + '&amp;quot;"&gt;&lt;ul /&gt; &lt;/div&gt;')[0].previousSibling);
            var list = jQuery('ul', dialog);
            jQuery('a.arc', this)
                .each(function(){
                    list.append('&lt;li&gt;&lt;a href="' + this.href + '"&gt;' + this.text + '&lt;/a&gt;');
                });
            dialog.dialog({ autoOpen: false });
            link.click(function() {
                dialog.dialog("open");
                return false;
            }); 
        });

 });</programlisting></section><section><title>Tripling with RDFa</title><para>The good thing with RDFa is that assertions can be extracted using any tool of a generic toolbox.</para><para>The price to pay is that your markup needs to follow a set of rules that are much more rigid than those of microformats...</para><para>In our case, here is the simplest markup I have been able to produce (enhancements welcome, especially if they simplify the
            source!):</para><programlisting xml:space="preserve">&lt;span typeof="nhrefs:link"&gt;
    &lt;span property="nhrefs:source"&gt;XQuery&lt;/span&gt; 
    &lt;span rel="nhrefs:hasarc"&gt;
        [&lt;span typeof="nhrefs:arc"&gt;
            &lt;a href="http://en.wikipedia.org/wiki/XQuery" rel="nhrefs:dest" property="nhrefs:title"&gt;XQuery on Wikipedia&lt;/a&gt; 
            &lt;span rel="nhrefs:role" resource="nhrefs:wikipedia"&gt;&lt;span&gt;
        &lt;/span&gt;, 
        &lt;span typeof="typeof:arc"&gt;
            &lt;a href="http://www.w3.org/TR/xquery/" rel="nhrefs:dest" property="nhrefs:title"&gt;XQuery W3C Recommendation&lt;/a&gt;
            &lt;span rel="nhrefs:role" resource="nhrefs:authoritative"&gt;&lt;/span&gt;
        &lt;/span&gt;]
    &lt;/span&gt;
&lt;/span&gt;</programlisting><para>This code get displayed exactly like its microformat counterpart when it is not processed by a script.</para><para>Although this snippet is more verbose than its microformat equivalent, it is arguably more "auto documented" and any reader (human or
            not) familiar with RDFa can understand that we have here a "nhrefs:link" with a source and a couple of arcs... </para><para>Here is how Raptor RDF sees it (with some help from Graphviz):</para><figure><title>An Nhrefs Link expressed in RDFa</title><mediaobject><imageobject><imagedata format="png" fileref="../../../vol7/graphics/Vlist01/Vlist01-004.png"/></imageobject></mediaobject><caption><para>The example previous example parsed by Raptor RDF and visualized by Graphviz.</para></caption></figure><para>More concisely, it can be represented in turtle as:</para><programlisting xml:space="preserve">@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
@prefix : &lt;http://www.w3.org/1999/xhtml&gt; .
@prefix nhrefs: &lt;http://nhrefs.org/&gt; .

[]
    nhrefs:hasarc [
        nhrefs:dest &lt;http://www.w3.org/TR/xquery/&gt; ;
        nhrefs:role &lt;nhrefs:authoritative&gt; ;
        nhrefs:title "XQuery W3C Recommendation"
    ], [
        nhrefs:dest &lt;http://en.wikipedia.org/wiki/XQuery&gt; ;
        nhrefs:role &lt;nhrefs:wikipedia&gt; ;
        nhrefs:title "XQuery on Wikipedia" ;
        a nhrefs:arc
    ] ;
    nhrefs:source "XQuery" ;
    a nhrefs:link .
</programlisting><para>Nice, don't you think so? </para><para>To be honest, there is a flaw in this model: the arcs are embedded in a blank node without using any container and in that case RDF
                specifies that the triples are unordered. In other words, there is no guarantee that the relative order of the arcs will be
                kept.</para><para>Neither the current recommendation (RDFa1.0) nor the latest RDFa 1.1 Working Draft support containers but a <link xlink:href="http://www.w3.org/2010/02/rdfa/wiki/ContainersAndCollections" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">proposal</link> has been made on the RDFa wiki and I do hope that this most needed feature will be added to RDFa at some
                point.</para><para>This is only a problem as far as authors expect this order to be preserved (which is probably the case) and if we use a RDF library
                that may change this order (which is not the case of the library that we'll be using) but this is still a flaw. </para><para>A RDF library... Yep, let's see how you parse that kind of thing in JavaScript!</para><para>It could be tempting to use a library such as jQuery and just adapt what we've done for microformats to query the RDFa attributes in
            stead of the class attributes that drive microformats...</para><para>This would work on this example but unless you are ready to reimplement a RDFa parser that wouldn't work with models that would express
            the same set of triples using different RDFa syntaxes: even supporting a different namespace prefix than "nhrefs" would require extra
            work.</para><para>The best way to avoid these issues is to use a RDFa parser and, if you enjoy jQuery, <link xlink:href="http://code.google.com/p/rdfquery/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">Jeni Tennison's rdfQuery</link> is definitely for you since it comes as a kind of
                jQuery add-on and shares its syntax.</para><para>RdfQuery also borrows a lot from SPARQL and to get the nhrefs links with their sources, you can write:</para><programlisting xml:space="preserve">    var rdf = jQuery(document)
        .rdf()
        .prefix('nhrefs', 'http://nhrefs.org/')
        .where('?link a nhrefs:link')
        .where('?link nhrefs:source ?source');
</programlisting><para>In RdfQuery like in SPARQL, query results are sets of resources and literals rather than triples. These resources and literals cannot be
            mapped back to DOM nodes in the (X)HTML document and you need to go back to the triples for that.</para><para>In our case, the outer span element for the link is the element that carries the type information:</para><programlisting xml:space="preserve">&lt;span typeof="nhrefs:link"&gt;
...
&lt;/span&gt;</programlisting><para>A triple directly generated by this element is:</para><programlisting xml:space="preserve">?link a nhrefs:link</programlisting><para>And to get the span element (to hide it and prepend the dialog and replacement link), you can query this triple and use its source
            attribute:</para><programlisting xml:space="preserve">    rdf
        .each(function(){
            var span = jQuery(rdf.reset().where(this.link.value + ' a nhrefs:link').sources()[0][0].source);
            span.hide();
</programlisting><para>After that, you can perform a sub query to find the arcs and create the dialog with the query results. The remaining of the function is
            straightforward and the complete code is:</para><programlisting xml:space="preserve">jQuery(document).ready(function() {

    var rdf = jQuery(document)
        .rdf()
        .prefix('nhrefs', 'http://nhrefs.org/')
        .where('?link a nhrefs:link')
        .where('?link nhrefs:source ?source');
    rdf
        .each(function(){
            var span = jQuery(rdf.reset().where(this.link.value + ' a nhrefs:link').sources()[0][0].source);
            span.hide();
            var link = jQuery(span.before('&lt;a href=""&gt;'+this.source.value+'&lt;/a&gt;')[0].previousSibling);
            var dialog = jQuery(span.before('&lt;div title="Links for &amp;quot;'+ this.source.value + '&amp;quot;"&gt;&lt;ul /&gt; &lt;/div&gt;')[0].previousSibling);
            var list = jQuery('ul', dialog);
            rdf
                .reset()
                .where(this.link.value + ' nhrefs:hasarc ?arc')
                .where('?arc nhrefs:title ?title')
                .where('?arc nhrefs:dest ?dest')
                .each(function(){
                    list.append('&lt;li&gt;&lt;a href="' + this.dest.value + '"&gt;' + this.title.value + '&lt;/a&gt;');
                });
            dialog.dialog({ autoOpen: false });
            link.click(function() {
                dialog.dialog("open");
                return false;
            }); 

            var x = this;
        });
});</programlisting><para>Again, this code is more verbose than its microformat counterpart, but the links properties are accessed using proper queries over
            formal properties and that seems more robust than just relying on (X)HTML classes.</para></section><section><title>Bleeding with microdata</title><para>HTML5's microdata is arguably the most bleeding edge of these somewhat competing technologies. Although HTML5 isn't there yet, microdata
                can be used with libraries such as <link xlink:href="http://gitorious.org/microdatajs" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">HTML5 Microdata JavaScript</link>.</para><para>Some HTML5 specific features such as using meta elements within page bodies can't be used (because these elements are considered bogus
            and are stripped down by browsers) and need to be workaround. However, the result is still reasonably simple:</para><programlisting xml:space="preserve">&lt;span itemscope="itemscope" itemtype="http://nhrefs.org/link"&gt;
    &lt;span itemprop="source"&gt;XQuery&lt;/span&gt; 
    [&lt;span itemscope="itemscope" itemprop="arc"&gt;
        &lt;a href="http://en.wikipedia.org/wiki/XQuery" itemprop="dest"&gt;
            &lt;span itemprop="title"&gt;XQuery on Wikipedia&lt;/span&gt;
        &lt;/a&gt; 
        &lt;a href="http://nhrefs.org/wikipedia" itemprop="role" &gt;&lt;/a&gt;
    &lt;/span&gt;, 
    &lt;span itemscope="itemscope" itemprop="arc"&gt;
        &lt;a href="http://www.w3.org/TR/xquery/" itemprop="dest"&gt;
            &lt;span itemprop="title"&gt;XQuery W3C Recommendation&lt;/span&gt;
        &lt;/a&gt;
        &lt;a href="http://nhrefs.org/authoritative" itemprop="role" &gt;&lt;/a&gt;
        &lt;!--&lt;meta itemprop="role" content="authoritative"/&gt;--&gt;
    &lt;/span&gt;]
&lt;/span&gt;</programlisting><para>This code get displayed exactly like its microformat and RDFa counterparts when it is not processed by a script.</para><para>The microdata jQuery library is fairly simple to use and the code to process these links is very similar to what we've seen so
            far:</para><programlisting xml:space="preserve">jQuery(document).ready(function() {

    jQuery(document)
        .items('http://nhrefs.org/link')
        .each(function(){
            var span = jQuery(this);
            span.hide();
            var source = span.properties('source').itemValue();
            var link = jQuery(span.before('&lt;a href=""&gt;'+ source +'&lt;/a&gt;')[0].previousSibling);
            var dialog = jQuery(span.before('&lt;div title="Links for &amp;quot;'+ source + '&amp;quot;"&gt;&lt;ul /&gt; &lt;/div&gt;')[0].previousSibling);
            var list = jQuery('ul', dialog);
            span
                .properties('arc')
                .each(function(){
                    var arc = jQuery(this);
                    list.append('&lt;li&gt;&lt;a href="' + arc.properties('dest').itemValue() + '"&gt;' + arc.properties('title').itemValue() + '&lt;/a&gt;');
                });
            dialog.dialog({ autoOpen: false });
            link.click(function() {
                dialog.dialog("open");
                return false;
            }); 
        });


});</programlisting></section><section><title>Why not extended XLinks after all?</title><para>Now that we've seen the level of simplicity (or complexity) of three different approaches, let's go back and revisit extended XLinks.</para><para>To express an extended link, you need to define :<itemizedlist><listitem><para>The extended link itself that will serve as a container.</para></listitem><listitem><para>Link ends that can be either local to the link or external. In our case, the source (i.e. the span containing the text "XQuery") can be defined as a local resource and
                            the targets will necessarily be defined as external resources (aka XLink "locators").</para></listitem><listitem><para>The arcs between the link ends.</para></listitem></itemizedlist></para><para>As far as XLink is concerned, a simple way to define these links in a XHTML document could be:</para><programlisting xml:space="preserve">&lt;!-- An extended link --&gt;
&lt;span xlink:type="extended" 
      xlink:role="http://nhrefs.org/link/"&gt;
   &lt;!-- Source (local resource) --&gt;
   &lt;span xlink:type="resource" 
         xlink:role="http://nhrefs.org/source/" 
         xlink:label="source"&gt;XQuery&lt;/span&gt;
   &lt;!-- Targets (remote resources aka locators) --&gt;
   &lt;span xlink:href="http://en.wikipedia.org/wiki/XQuery" 
         xlink:type="locator" 
         xlink:role="http://nhrefs.org/target/wikipedia/" 
         xlink:label="target" 
         xlink:title="XQuery on Wikipedia" &gt; &lt;/span&gt; 
   &lt;span xlink:href="http://www.w3.org/TR/xquery/" 
         xlink:type="locator" 
         xlink:role="http://nhrefs.org/target/authoritative/" 
         xlink:label="target" 
         xlink:title="XQuery W3C Recommendation"&gt; &lt;/span&gt;
   &lt;!-- Arcs --&gt;
   &lt;span xlink:type="arc" 
         xlink:from="source" 
         xlink:to="target"&gt; &lt;/span&gt;
&lt;/span&gt; </programlisting><para>As far as I understand the XLink recommendation, this is enough to express what we want. That's not so bad and we could argue that the level of complexity is similar to what we've
                seen so far.</para><para>Unfortunately, I am not aware of any existing implementation that can process this markup and display what we want to display. Browsers just ignore extended links and won't display
                anything more than the word "XQuery" from this markup.</para><para>To get a degraded display similar to what we had with microformats, RDFa or microdata, we need to repeat the target titles and href attributes :<programlisting xml:space="preserve">&lt;!-- An extended link --&gt;
&lt;span xlink:type="extended" 
       xlink:role="http://nhrefs.org/link/"&gt;
  &lt;!-- The source --&gt;
  &lt;span xlink:type="resource" 
        xlink:role="http://nhrefs.org/source/" 
        xlink:label="source"&gt;XQuery&lt;/span&gt; [
  &lt;!-- The targets --&gt;
  &lt;a href="http://en.wikipedia.org/wiki/XQuery" 
     title="XQuery on Wikipedia"
     xlink:href="http://en.wikipedia.org/wiki/XQuery" 
     xlink:type="locator" 
     xlink:role="http://nhrefs.org/target/wikipedia/" 
     xlink:label="target" 
     xlink:title="XQuery on Wikipedia" &gt;XQuery on Wikipedia&lt;/a&gt;, 
  &lt;a href="http://www.w3.org/TR/xquery/" 
     title="XQuery W3C Recommendation"
     xlink:href="http://www.w3.org/TR/xquery/" 
     xlink:type="locator" 
     xlink:role="http://nhrefs.org/target/authoritative/" 
     xlink:label="target" 
     xlink:title="XQuery W3C Recommendation"&gt;XQuery W3C Recommendation&lt;/a&gt;]
  &lt;!-- The arcs --&gt;
  &lt;span xlink:type="arc" 
        xlink:from="source" 
        xlink:to="target"&gt; &lt;/span&gt;
&lt;/span&gt;</programlisting>
            </para><para>Here we have a XHTML fragment that will get displayed with the degraded display than we have requested in our requirements and has the meaning that we want to convey for XLink
                implementations.</para><para>The price to pay in term of complexity is clearly visible when we compare this fragment to what we've seen before. </para><para>In addition to the markup complexity, I am not aware of any JavaScript implementation of extended XLinks on which we can rely to process this fragment like we did for the other
                technologies and we might have to develop our own JavaScript implementation</para><para>If the downsides are clearly visible, the benefit is not that obvious!</para><para>Except for being proud to be conform to a W3C recommendation and hoping to convince more people to use it, what's the benefit of using a recommendation that has almost no traction? </para></section></section><section><title>Next Step: Embedding</title><para>A simple way to represent embedded links is to embed nhrefs links with the source property of another nhrefs link.</para><para>OK, but how should we present such embedded links to the user?</para><para>Taking back the example of "XML Prague", we could differentiate the link on "XML" that would present resources about XML and resources
            about XML Prague and the link on "Prague" that would present resources about Prague and resources about XML Prague. However, this would be
            displayed by the browser as one link (or at best two links separated by a space) and users would very likely miss the difference between
            these two links.</para><para>To avoid this issue, I suggest that we display the same dialog on all the terms of embedded links. That dialog will display all the
            links for all the terms but can group the links per term.</para><section><title>Microformat</title><para>Following these principles, the markup would be:</para><programlisting xml:space="preserve">&lt;span class="nhrefs"&gt;
    &lt;span class="source"&gt;
        &lt;span class="nhrefs"&gt;
            &lt;span class="source"&gt;XML&lt;/span&gt; 
            [
                &lt;a href="http://en.wikipedia.org/wiki/XML" class="arc" rel="wikipedia"&gt;XML on Wikipedia&lt;/a&gt;, 
                &lt;a href="http://www.w3.org/XML/" class="arc" rel="informative"&gt;W3C XML Home Page&lt;/a&gt;
                &lt;a href="http://www.w3.org/TR/REC-xml/" class="arc" rel="authoritative"&gt;XML 1.0 recommendation&lt;/a&gt;
            ]
        &lt;/span&gt;
        &lt;span class="nhrefs"&gt;
            &lt;span class="source"&gt;Prague&lt;/span&gt; 
            [
                &lt;a href="http://en.wikipedia.org/wiki/Prague" class="arc" rel="wikipedia"&gt;Prague on Wikipedia&lt;/a&gt;, 
                &lt;a href="http://wikitravel.org/en/Prague" class="arc" rel="informative"&gt;Prague travel guide on Wikitravel&lt;/a&gt;
            ]
        &lt;/span&gt;
    &lt;/span&gt; 
    [
        &lt;a href="http://www.xmlprague.cz/" class="arc" rel="authoritative"&gt;XML Prague&lt;/a&gt;, 
        &lt;a href="http://www.xmlprague.cz/2011/index.html" class="arc" rel="authoritative"&gt;XML Prague 2011&lt;/a&gt;
    ]
&lt;/span&gt;</programlisting><para>I must admit that the result becomes much less readable when it not processed by a script and that some CSS might be used to improve
                that:</para><figure><title>Embedded nhrefs links not processed by a script</title><mediaobject><imageobject><imagedata format="png" fileref="../../../vol7/graphics/Vlist01/Vlist01-005.png"/></imageobject></mediaobject><caption><para>Snapshot of my blog using embedded links on XML, Prague end XML Prague.</para></caption></figure><para>Of course things get better after being processed by an updated version of the script: </para><figure><title>Embedded nhrefs links processed by a script</title><mediaobject><imageobject><imagedata format="png" fileref="../../../vol7/graphics/Vlist01/Vlist01-006.png"/></imageobject></mediaobject><caption><para>Snapshot of my blog using embedded links on XML, Prague end XML Prague after the links have been processed in
                        JavaScript.</para><para>The script itself is now 68 lines long. Compared to the 24 lines it took previously we can say that supporting embedded
                        links has added a lot of complexity. Most of this complexity is due to the support of the grouping of the links. </para><para>68 lines is too much code to copy into this paper,  however the size of the script is still very reasonable!</para></caption></figure></section><section><title>RDFa</title><para>This can be ported to RDFa by creating bnodes as nhrefs:source that will themselves be nhrefs:links:</para><programlisting xml:space="preserve">&lt;span typeof="nhrefs:link"&gt;
    &lt;span rel="nhrefs:source"&gt;
        &lt;span typeof="nhrefs:link"&gt;
          &lt;span property="nhrefs:source"&gt;XML&lt;/span&gt; 
          &lt;span rel="nhrefs:hasarc"&gt;
              [&lt;span typeof="nhrefs:arc"&gt;
                  &lt;a href="http://en.wikipedia.org/wiki/XML" rel="nhrefs:dest" property="nhrefs:title"&gt;XML on Wikipedia&lt;/a&gt; 
                  &lt;span rel="nhrefs:role" resource="nhrefs:wikipedia" &gt;&lt;/span&gt;
              &lt;/span&gt;, 
              &lt;span typeof="nhrefs:arc"&gt;
                  &lt;a href="http://www.w3.org/XML/" rel="nhrefs:dest" property="nhrefs:title"&gt;W3C XML Home Page&lt;/a&gt;
                  &lt;span rel="nhrefs:role" resource="nhrefs:informative" &gt;&lt;/span&gt;
              &lt;/span&gt;,
              &lt;span typeof="nhrefs:arc"&gt;
                  &lt;a href="http://www.w3.org/TR/REC-xml/" rel="nhrefs:dest" property="nhrefs:title"&gt;XML 1.0 Recommendation&lt;/a&gt;
                  &lt;span rel="nhrefs:role" resource="nhrefs:authoritative" &gt;&lt;/span&gt;
              &lt;/span&gt;]
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;span typeof="nhrefs:link"&gt;
            &lt;span property="nhrefs:source"&gt;Prague&lt;/span&gt; 
            &lt;span rel="nhrefs:hasarc"&gt;
                [&lt;span typeof="nhrefs:arc"&gt;
                    &lt;a href="http://en.wikipedia.org/wiki/Prague" rel="nhrefs:dest" property="nhrefs:title"&gt;Prague on Wikipedia&lt;/a&gt; 
                    &lt;span rel="nhrefs:role" resource="nhrefs:wikipedia" &gt;&lt;/span&gt;
                &lt;/span&gt;, 
                &lt;span typeof="nhrefs:arc"&gt;
                    &lt;a href="http://wikitravel.org/en/Prague" rel="nhrefs:dest" property="nhrefs:title"&gt;Prague travel guide on Wikitravel&lt;/a&gt;
                    &lt;span rel="nhrefs:role" resource="nhrefs:informative" &gt;&lt;/span&gt;
                &lt;/span&gt;]
            &lt;/span&gt;
        &lt;/span&gt;            
    &lt;/span&gt;
    &lt;span rel="nhrefs:hasarc"&gt;
        [&lt;span typeof="nhrefs:arc"&gt;
            &lt;a href="http://www.xmlprague.cz/" rel="nhrefs:dest" property="nhrefs:title"&gt;XML Prague&lt;/a&gt; 
            &lt;span rel="nhrefs:role" resource="nhrefs:authoritative" &gt;&lt;/span&gt;
        &lt;/span&gt;, 
        &lt;span typeof="typeof:arc"&gt;
            &lt;a href="http://www.xmlprague.cz/2011/index.html" rel="nhrefs:dest" property="nhrefs:title"&gt;XML Prague 2011&lt;/a&gt;
            &lt;span rel="nhrefs:role" resource="nhrefs:authoritative" &gt;&lt;/span&gt;
        &lt;/span&gt;]
    &lt;/span&gt;
&lt;/span&gt;</programlisting><para>The model has now 41 triples and its graphical representation is hardly readable but its turtle representation is still readable: </para><programlisting xml:space="preserve">@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
@prefix : &lt;http://www.w3.org/1999/xhtml&gt; .
@prefix nhrefs: &lt;http://nhrefs.org/&gt; .

[]
    nhrefs:hasarc [
        nhrefs:dest &lt;http://www.xmlprague.cz/2011/index.html&gt; ;
        nhrefs:role &lt;nhrefs:authoritative&gt; ;
        nhrefs:title "XML Prague 2011"
    ], [
        nhrefs:dest &lt;http://www.xmlprague.cz/&gt; ;
        nhrefs:role &lt;nhrefs:authoritative&gt; ;
        nhrefs:title "XML Prague" ;
        a nhrefs:arc
    ] ;
    nhrefs:source [
        nhrefs:hasarc [
            nhrefs:dest &lt;http://en.wikipedia.org/wiki/XML&gt; ;
            nhrefs:role &lt;nhrefs:wikipedia&gt; ;
            nhrefs:title "XML on Wikipedia" ;
            a nhrefs:arc
        ], [
            nhrefs:dest &lt;http://www.w3.org/XML/&gt; ;
            nhrefs:role &lt;nhrefs:informative&gt; ;
            nhrefs:title "W3C XML Home Page" ;
            a nhrefs:arc
        ], [
            nhrefs:dest &lt;http://www.w3.org/TR/REC-xml/&gt; ;
            nhrefs:role &lt;nhrefs:authoritative&gt; ;
            nhrefs:title "XML 1.0 Recommendation" ;
            a nhrefs:arc
        ] ;
        nhrefs:source "XML" ;
        a nhrefs:link
    ], [
        nhrefs:hasarc [
            nhrefs:dest &lt;http://wikitravel.org/en/Prague&gt; ;
            nhrefs:role &lt;nhrefs:informative&gt; ;
            nhrefs:title "Prague travel guide on Wikitravel" ;
            a nhrefs:arc
        ], [
            nhrefs:dest &lt;http://en.wikipedia.org/wiki/Prague&gt; ;
            nhrefs:role &lt;nhrefs:wikipedia&gt; ;
            nhrefs:title "Prague on Wikipedia" ;
            a nhrefs:arc
        ] ;
        nhrefs:source "Prague" ;
        a nhrefs:link
    ] ;
    a nhrefs:link .
</programlisting><para>Of course, we are bitten again by the same limitation: the links that compose sources are unordered and in theory there is no
                guarantee that when we generate the title for composed links we won't generate "Prague XML" instead of "XML Prague"!</para><para>The JavaScript is 80 lines long (compared to 30).</para></section><section><title>Microdata</title><para>This can be ported to microdata:</para><programlisting xml:space="preserve">&lt;html xmlns="http://www.w3.org/1999/xhtml" xmlns:nhrefs="http://nhrefs.org/"&gt;

&lt;span itemscope="itemscope" itemtype="http://nhrefs.org/link"&gt;
    &lt;span itemprop="source" itemscope="itemscope" itemtype="http://nhrefs.org/link"&gt;
        &lt;span itemprop="source"&gt;XML&lt;/span&gt; 
        [&lt;span itemscope="itemscope" itemprop="arc"&gt;
            &lt;a href="http://en.wikipedia.org/wiki/XML" itemprop="dest"&gt;
                &lt;span itemprop="title"&gt;XML on Wikipedia&lt;/span&gt;
            &lt;/a&gt; 
            &lt;a href="http://nhrefs.org/wikipedia" itemprop="role" &gt;&lt;/a&gt;
        &lt;/span&gt;, 
        &lt;span itemscope="itemscope" itemprop="arc"&gt;
            &lt;a href="http://www.w3.org/XML" itemprop="dest"&gt;
                &lt;span itemprop="title"&gt;W3C XML Home Page&lt;/span&gt;
            &lt;/a&gt;
            &lt;a href="http://nhrefs.org/informative" itemprop="role" &gt;&lt;/a&gt;
        &lt;/span&gt;,
        &lt;span itemscope="itemscope" itemprop="arc"&gt;
            &lt;a href="http://www.w3.org/TR/REC-xml/" itemprop="dest"&gt;
                &lt;span itemprop="title"&gt;XML W3C Recommendation&lt;/span&gt;
            &lt;/a&gt;
            &lt;a href="http://nhrefs.org/authoritative" itemprop="role" &gt;&lt;/a&gt;
        &lt;/span&gt;]
    &lt;/span&gt; 
    &lt;span itemprop="source" itemscope="itemscope" itemtype="http://nhrefs.org/link"&gt;
        &lt;span itemprop="source"&gt;Prague&lt;/span&gt; 
        [&lt;span itemscope="itemscope" itemprop="arc"&gt;
            &lt;a href="http://en.wikipedia.org/wiki/Prague" itemprop="dest"&gt;
                &lt;span itemprop="title"&gt;Prague on Wikipedia&lt;/span&gt;
            &lt;/a&gt; 
            &lt;a href="http://nhrefs.org/wikipedia" itemprop="role" &gt;&lt;/a&gt;
        &lt;/span&gt;, 
        &lt;span itemscope="itemscope" itemprop="arc"&gt;
            &lt;a href="hhttp://wikitravel.org/en/Prague" itemprop="dest"&gt;
                &lt;span itemprop="title"&gt;Prague travel guide on Wikitravel&lt;/span&gt;
            &lt;/a&gt;
            &lt;a href="http://nhrefs.org/informative" itemprop="role" &gt;&lt;/a&gt;
        &lt;/span&gt;]
    &lt;/span&gt; 
    [&lt;span itemscope="itemscope" itemprop="arc"&gt;
        &lt;a href="http://www.xmlprague.cz/" itemprop="dest"&gt;
            &lt;span itemprop="title"&gt;XML Prague&lt;/span&gt;
        &lt;/a&gt; 
        &lt;a href="http://nhrefs.org/authoritative" itemprop="role" &gt;&lt;/a&gt;
    &lt;/span&gt;, 
    &lt;span itemscope="itemscope" itemprop="arc"&gt;
        &lt;a href="http://www.xmlprague.cz/2011/index.html" itemprop="dest"&gt;
            &lt;span itemprop="title"&gt;XML Prague 2011&lt;/span&gt;
        &lt;/a&gt;
        &lt;a href="http://nhrefs.org/authoritative" itemprop="role" &gt;&lt;/a&gt;
    &lt;/span&gt;]
&lt;/span&gt;</programlisting><para>The JavaScript is now 77 lines long (compared to 24).</para></section></section><section><title>Next Steps</title><para>All three techniques provide a lightweight solution to express links with multiple arcs that are easy to parse in JavaScript. Now, what
            can we do with all these angle brackets?</para><para>The first conclusion is that for this application there is no clear winner between microformats, RDFa and microdata:</para><itemizedlist><listitem><para>Microformats are less verbose and more "free style". The price to pay is that you need to read the spec to understand the
                    structure of each of them and need to use DOM level methods to get your information.</para></listitem><listitem><para>Microdata and RDFa have roughly the same level of verbosity.</para></listitem><listitem><para>RDFa and microdata are more rigid and more verbose. The benefit is that if you use the right library you can parse their
                    structure with higher level methods.</para></listitem><listitem><para>In theory, RDFa doesn't preserve the relative order between arcs and multi part sources.</para></listitem><listitem><para>Microdata isn't at recommendation stage yet and may change.</para></listitem><listitem><para>With RDFa, it is straightforward to extract link information as triples and use semantic web tools to do all kind of funky
                    things with them.</para></listitem><listitem><para>In the future, microdata will probably be natively supported by browsers. </para></listitem></itemizedlist><para>The most sensible choice is probably to make no choice and support all three technologies!</para><para>OK, but what can we do with all these angle brackets?</para><para>The markup should be further documented and it can be seen as an open API between:</para><itemizedlist><listitem><para>Consumers (such as the scripts that have been presented here) that parse the markup to do all kind of interesting things.</para></listitem><listitem><para>Producers that write this markup which isn't really fun to write by hand.</para></listitem></itemizedlist><para>The consumers that we've seen should be documented and tested before they can be considered really usable.</para><para>Producers need to be implemented. Producers for popular web publishing platforms would be especially useful. For these platforms, two
            kind of publishers could be developed:</para><itemizedlist><listitem><para>Transformers that transform other markup into one of these three formats. In WordPress for instance nhrefs links could be
                    expressed using <link xlink:href="http://codex.wordpress.org/Shortcode" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">shortcodes</link> in the posts.</para></listitem><listitem><para>GUI that let user create nhrefs links is a friendly way.</para></listitem></itemizedlist><para>Producers and consumers could also be packaged as plug-ins for web publishing platforms. Such a plug-in would contain:</para><itemizedlist><listitem><para>A producer to facilitate the production of nhrefs markup by the platform.</para></listitem><listitem><para>The JavaScript to display the links on the browser.</para></listitem></itemizedlist><para>This is more or less my roadmap for this project. If you are interested, watch this space: <link xlink:href="http://nhrefs.org" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://nhrefs.org</link>!</para></section></article>