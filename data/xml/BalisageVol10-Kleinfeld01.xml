<?xml version="1.0" encoding="UTF-8"?><article xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" version="5.0-subset Balisage-1.3"><title>The Case for Authoring and Producing Books in (X)HTML5</title><info><confgroup><conftitle>Balisage: The Markup Conference 2013</conftitle><confdates>August 6 - 9, 2013</confdates></confgroup><abstract><para>In this paper, I argue that HTML5 offers unique advantages to
      authors and publishers in comparison to both traditional word processing
      and desktop publishing tools like Microsoft Word and Adobe InDesign, as
      well as other markup vocabularies like DocBook and AsciiDoc. I also
      consider the drawbacks currently inherent in the HTML5 standard with
      respect to representing long-form, structured text content, and the
      challenges faced in adopting HTML5 as the source format for book
      authoring and publishing workflows. Finally, I discuss the development
      of HTMLBook, a new open, HTML5-based XML standard expressly designed to
      surmount these challenges and facilitate the use of HTML5 for the
      authoring and production of both print and digital book content.</para></abstract><author><personname><firstname>Sanders</firstname><surname>Kleinfeld</surname></personname><personblurb><para>Sanders Kleinfeld has been employed at O’Reilly Media since 2004
        and has held a variety of positions, including roles on O’Reilly’s
        Production, Editorial, and Tools teams. Currently, he works as
        Publishing Technology Engineer, maintaining O’Reilly’s toolchain for
        generating digital formats of both frontlist and backlist titles. He
        also helps coordinate O’Reilly’s digital distribution efforts to
        electronic sales channels, and is currently assisting in R&amp;D
        efforts surrounding HTML5 and EPUB 3, helping to develop
        next-generation workflows and ebook content for O’Reilly and its
        publishing partners. Sanders is the author of <link xlink:href="http://shop.oreilly.com/product/0636920022473.do" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest"><emphasis>HTML5
        for Publishers</emphasis></link> (O’Reilly, 2011).</para></personblurb></author><legalnotice><para>Copyright © 2013 Sanders Kleinfeld.  All rights reserved.</para></legalnotice></info><section><title>Introduction</title><para>For the past seven years, DocBook XML has been the cornerstone of
    tech publisher O’Reilly Media’s book authoring and publishing toolchain.
    As a richly semantic markup language, DocBook provides a single
    maintainable source format for book content that can be readily
    transformed and output to a variety of formats, allowing the construction
    of a highly automated production infrastracture. However, as the digital
    book has continued to rise in importance, so has the need to architect
    faster, more efficient, and more lightweight workflows for book creation.
    O’Reilly found that there was another markup format even better suited to
    this paradigm: (X)HTML5.</para><para>In this paper, I argue that HTML5 offers unique advantages to
    authors and publishers in comparison to both traditional word processing
    and desktop publishing tools like Microsoft Word and Adobe InDesign, as
    well as other markup vocabularies like DocBook and AsciiDoc. I also
    consider the drawbacks currently inherent in the HTML5 standard with
    respect to representing long-form, structured text content, and the
    challenges O’Reilly has faced in adopting the standard as the new source
    format for its toolchain. Finally, I discuss how O’Reilly has surmounted
    these challenges by developing <link xlink:href="http://github.com/oreillymedia/HTMLBook" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">HTMLBook</link>, a
    new open, HTML5-based XML standard expressly designed for the authoring
    and production of both print and digital book content.</para></section><section><title>Why HTML?</title><para>As the primary markup language for both the Web and two ebook
    formats (EPUB and Mobi), HTML offers several key advantages over both
    standard book source document formats (e.g., Word
    <emphasis>.doc</emphasis> and InDesign <emphasis>.indd</emphasis>) as well
    as other XML vocabularies. Authoring and producing books in HTML5 offers
    the potential of standardized semantics, a streamlined workflow for
    generating print and digital outputs, the ability to think “digital-first”
    when developing content, and the opportunity for Web-based, WYSIWYG
    authoring. In the following sections, I discuss the advances afforded by
    HTML5 in greater depth.</para><section><title>New and Improved Semantics!</title><para>Prior to HTML5, structural semantics were largely absent from the
      HTML vocabulary, and rich tagging of content entailed liberal use of two
      all-purpose elements: the <code>&lt;div&gt;</code> and
      <code>&lt;span&gt;</code>. Compared to markup languages like DocBook,
      which standardized elements for both high-level book components
      (chapter, appendix, glossary) and lower-level blocks (section, sidebar,
      footnote), as shown below:</para><programlisting xml:space="preserve">&lt;article&gt;
  &lt;title&gt;Rich semantics in DocBook&lt;/title&gt;
  &lt;sect1&gt;
    &lt;title&gt;Mathematical elements&lt;/title&gt;
    &lt;para&gt;The "mathphrase" element&lt;footnote&gt;&lt;para&gt;Introduced in DocBook 4.5&lt;/para&gt;&lt;/footnote&gt; is used to tag mathematical expressions
    that are readily representable in plaintext.&lt;/para&gt;
  &lt;/sect1&gt;
&lt;/article&gt;</programlisting><para>HTML’s vocabulary was severely lacking, and forced reliance on
      nonstandardized <code>class</code> attributes to inject the missing
      semantic context:</para><programlisting xml:space="preserve">&lt;div class="article"&gt;
  &lt;h1&gt;Rich semantics in DocBook&lt;/h1&gt;
  &lt;div class="top_level_section"&gt;
    &lt;h1&gt;Mathematical elements&lt;/h1&gt;
    &lt;p&gt;The "mathphrase" element&lt;span class="footnote"&gt;Introduced in DocBook 4.5&lt;/span&gt; is used to tag mathematical expressions
    that are readily representable in plaintext.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</programlisting><para>HTML5 adds a whole new category of elements used for <link xlink:href="http://www.w3.org/html/wg/drafts/html/master/dom.html#sectioning-content" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">“sectioning
      content”</link><xref linkend="h13"/>, which can be used to
      mark divisions of books, journals, and other long-form content:
      <code>&lt;article&gt;</code> for complete, self-contained articles;
      <code>&lt;section&gt;</code> for subsections of a larger book or article
      (both chapters/appendices, and their subsections);
      <code>&lt;aside&gt;</code> for tangential remarks (e.g., sidebars or
      footnotes), and <code>&lt;nav&gt;</code> for navigational components
      (such as a table of contents or an index).</para><para>Also new to HTML5 are elements for representing formal (titled)
      images (<code>&lt;figure&gt;</code> and
      <code>&lt;figcaption&gt;</code>), as well as headers/footers (the aptly
      named <code>&lt;header&gt;</code> and
      <code>&lt;footer&gt;</code>)</para><para>With the addition of these elements, the previous example can now
      be written as:</para><programlisting xml:space="preserve">&lt;article&gt;
  &lt;h1&gt;Rich semantics in DocBook&lt;/h1&gt;
  &lt;section&gt;
    &lt;h1&gt;Mathematical elements&lt;/h1&gt;
    &lt;p&gt;The "mathphrase" element&lt;aside&gt;Introduced in DocBook 4.5&lt;/aside&gt; is used to tag mathematical expressions
    that are readily representable in plaintext.&lt;/p&gt;
  &lt;/section&gt;
&lt;/article&gt;</programlisting><para>These new structural elements greatly enhance the
      ability to semantically mark up an entire book manuscript in
      HTML5.</para></section><section><title>No Conversions Necessary!</title><para>Books don’t remain manuscripts forever. The goal—which hopefully
      is achieved—is to publish<footnote><para>Traditionally, “publishing” a manuscript has meant reifying
          its textual content through the act of printing its words in ink on
          reams of paper that are sliced and bound to create a physical book.
          In the digital age, the distintiction between a “manuscript” and
          “published book” is more nebulous, given that both typically refer
          to an electronic document. As such, I’m defining “publish” here to
          mean the act of packaging manuscript content (either physically or
          digitally) such that it is suitable for distribution to and
          consumption by readers.</para></footnote> them. Thus, the purpose of manuscript authoring tools is
      not only to facilitate writing and formatting of text, but to do so in a
      fashion in which it can be output as a final print and/or digital
      product.</para><para>Traditional word processing applications like Microsoft Word are
      actually far from ideally suited to this last output stage, the actual
      <emphasis>production</emphasis> of a manuscript. Because they are not
      primarily designed as compositing tools for generating printer-ready
      PDFs, word processors don’t offer as robust a suite of layout and
      prepress features as provided by desktop publishing applications like
      Adobe InDesign. So while it’s trivial to export a Word or Pages document
      to PDF, it’s not quite as trivial to export a PDF that would be
      considered “print-ready.” As a result, it’s common for workflows for
      producing manuscripts for print to entail first converting binary
      word-processor documents (e.g., Word <emphasis>.doc</emphasis> files) to
      binary desktop-publishing documents (InDesign <emphasis>.indd</emphasis>
      files), and then outputting the final print-ready PDF from the second
      set of files. In other words, the manuscript transitions through three
      distinct file formats: one for writing/editing, one for compositing, and
      one for distribution.<footnote><para>Historically, dividing the book lifecycle into distinct phases
          that employed specialized software applications made perfect sense,
          because there was just one desired output format (a print product)
          and two actors needed to bring it to fruition: the author who did
          the writing and the publisher who did the production. The rise of
          digital publishing and self-publishing has effectively detonated the
          assumptions undergirding ths model, as contemporary publishing
          rewards a much more lightweight, flexible workflow, which can
          produce multiple output formats quickly.</para></footnote> The paradigm is similar for digital production to output
      ebook formats of a manuscript. The two main digital formats in which
      ebooks are sold, <link xlink:href="http://idpf.org/epub" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">EPUB</link> and
      <link xlink:href="http://www.amazon.com/gp/feature.html?ie=UTF8&amp;docId=1000729511" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">Kindle
      Mobi KF8</link>,<footnote><para>The largest U.S. ebook sales channels (per O’Reilly’s “Global
          eBook Market” report<xref linkend="w13"/>, Amazon, Barnes
          &amp; Noble, and the Apple iBookstore) all sell ebook content in
          either EPUB or Mobi format. However, many other digital channels
          (such as <link xlink:href="http://www.scribd.com/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">Scribd</link>) sell ebook
          content in PDF format, either exclusively or in addition to other
          formats. Producing PDF for digital consumption entails generally the
          same process as preparing a PDF for print, with the exception that
          more effort can and should be paid to providing rich intradocument
          navigation (e.g., a hyperlinked Table of Contents and Index,
          bookmarks for key sections, and clickable cross-references between
          chapters).</para></footnote> are both <emphasis>reflowable</emphasis> formats, where
      content does not have fixed pagination like a print book but instead
      spreads to fill the dimensions of the ereader screen. Here, compositing
      is much less of a concern, but there’s still a conversion step that must
      be navigated to produce the ebook output. Exporting to EPUB/Mobi from a
      format like Word or InDesign is not typically a process that produces
      high-quality results out of the box without extensive configuration,
      troubleshooting, and possibly even post-conversion cleanup, as is
      evidenced by a burgeoning industry of <link xlink:href="https://kdp.amazon.com/self-publishing/help?topicId=A3RRQXI478DDG7" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">third-party
      firms</link> offering ebook conversion and consulting services.</para><para>An alternative to the Word-to-InDesign-to-(e)book shuffle is to
      design a <emphasis>single-source workflow</emphasis>, where there is
      just one set of document files used both for writing/editing the book
      manuscript and for completing the necessary production work for
      generating both print and electronic outputs. Here is where an XML
      format like DocBook shines, as its rich semantic vocabulary makes it
      highly transformable to a variety of output formats. The <link xlink:href="http://docbook.sourceforge.net/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">DocBook Project’s open
      source XSL stylesheets</link> were developed to facilitate this very
      task, and provide transformations from DocBook to a variety of key
      document formats, including PDF (via FO), HTML (both XHTML1.1 and
      XHTML5), and EPUB (versions 2 and 3). This is the workflow that <link xlink:href="http://oreilly.com/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">O’Reilly Media</link> has used for the
      past seven years, which Andrew Savikas describes in his essay
      “Distribution Everywhere”:</para><blockquote><para>That large ecosystem of tools and users meant that there was
        already a very mature and robust set of <link xlink:href="http://docbook.sourceforge.net/release/xsl/1.75.1/doc/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">open-source
        stylesheets</link> intended to do exactly what we wanted: to take a
        set of DocBook source files and create multiple outputs, each with its
        own formatting rules. We could even create multiple versions of the
        same output format; for example, a PDF intended for printing (with
        crop marks and high-resolution images) and a PDF designed for viewing
        digitally (with color images and hyperlinks). By customizing the
        stylesheets with our branding, we could deliver three different
        “final” outputs (print PDF, web PDF, and Safari) from the same source
        file at the same time, while retaining the flexibility to modify the
        presentation formatting independently of the content.</para><para>When <link xlink:href="http://www.idpf.org" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">EPUB</link> emerged
        as the standard for the growing ebook market, we partnered with Adobe
        to contribute changes to those open source <link xlink:href="http://oreil.ly/5B6Kc9" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">stylesheets</link> to support
        output as EPUB (and with some additional processing, in
        Kindle-compatible Mobi format as well). That meant that as long as our
        production workflow resulted in a high-quality DocBook XML version of
        a book, we could deliver multiple print and digital versions at the
        same time from the same source.<xref linkend="s11"/></para></blockquote><para>The conversions in this type of workflow are optimal: all operate
      on a single, highly and consistently structured source format, and are
      wholly automated—ensuring fast, accurate results. But no matter how
      efficient the production infrastructure, every conversion built into
      one’s processses still incurs a cost. If conversions are outsourced to
      another vendor, the cost is in both dollars and time. If conversions are
      automated in-house, the cost comes in the form of the human resources on
      staff required to maintain the codebase. As such, the ultimate goal in
      creating streamlined publishing workflows isn’t solely to lower the
      costs of conversions whenever possible; the aim should also be to
      <emphasis>eliminate the need for conversions</emphasis> whenever
      possible.</para><section xml:id="html5_source_and_output"><title>HTML5: Both Source Format and Output Format</title><para>A huge asset that HTML5 offers as a book authoring format is
        that unlike Microsoft Word or DocBook, it is not just an authoring
        format: it is a hugely popular output format. Aside from the fact that
        HTML is inarguably the dominant markup for content published on the
        Web, it is also at the core of both the EPUB and Mobi ebook
        formats.<footnote><para>The latest versions of EPUB (3.0) and Mobi (KF8) both
            support HTML5 as a core content-document format. The <link xlink:href="http://www.idpf.org/epub/30/spec/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">EPUB 3
            specification</link> largely supports the full <link xlink:href="http://www.idpf.org/epub/30/spec/epub30-contentdocs.html#refHTML5" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">HTML5</link>
            document model (provided XHTML syntax is used), with just a
            handful of <link xlink:href="http://www.idpf.org/epub/30/spec/epub30-contentdocs.html#sec-xhtml-deviations" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">minor
            exceptions</link>. KF8 currently supports only a <link xlink:href="http://www.amazon.com/gp/feature.html/ref=amb_link_357754562_1?ie=UTF8&amp;docId=1000729901&amp;pf_rd_m=ATVPDKIKX0DER&amp;pf_rd_s=center-10&amp;pf_rd_r=1DWZJVJ6VWJQDK7AJS0G&amp;pf_rd_t=1401&amp;pf_rd_p=1343223442&amp;pf_rd_i=1000729511" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">subset
            of elements</link> new to HTML5, but this subset encompasses the
            majority of new semantic elements, including
            <code>&lt;section&gt;</code>, <code>&lt;aside&gt;</code>, and
            <code>&lt;figure&gt;</code>.</para></footnote>As a result, if HTML5 is used as the source manuscript
        format, the task of producing ebook outputs is reduced to one of
        styling the content (with CSS) and packaging it as appropriate for
        distribution. In the case of EPUB, creating a valid file entails
        creating a ZIP archive of book assets (HTML, CSS, images, script
        documents) with an embedded mimetype, config settings (e.g., DRM),
        and <link xlink:href="http://www.idpf.org/epub/30/spec/epub30-publications.html#sec-package-def" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">Package
        Document</link> that contains a full manifest and metadata about the
        ebook. In the case of Mobi, packaging entails processing either an
        EPUB file or an HTML document with Amazon’s <link xlink:href="http://www.amazon.com/gp/feature.html?ie=UTF8&amp;docId=1000765211" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">KindleGen</link>
        tool.</para><para>And what about producing print books? It may be
        counterintuitive, but HTML5 is actually an excellent source format for
        producing paginated content, as the <link xlink:href="http://www.w3.org/TR/css3-page/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">CSS3 Paged Media Module
        </link>can be utilized to design the eqiuivalent of a standard book
        template for print. Features supported in CSS3 Paged Media include
        page headers, footers, folios, crop marks, font selection,
        distinct master pages for verso/recto/chapter-opener pages, and even a
        good deal of control over pagebreaking via both explicit instructions
        and widow/orphan controls. The process for writing the CSS for these
        elements is well documented in “Building Books with CSS3” by Nellie
        McKesson<xref linkend="m12"/>.</para><para>While the Paged Media Module is still in W3C Working Draft
        status, two major commercial tools already support its feature set for
        generating PDF documents: <link xlink:href="http://www.antennahouse.com/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">Antenna House
        Formatter</link> and <link xlink:href="http://www.princexml.com/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">Prince</link>. It’s now
        possible to take an HTML5 manuscript and a CSS3 stylesheet including
        paged-media rules, and run it through either tool to get a
        high-quality, print-ready PDF file. <xref linkend="paged_media_pdfs"/> shows a side-by-side comparison of a PDF
        page excerpted from the O’Reilly Media title <link xlink:href="http://shop.oreilly.com/product/0636920026938.do" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest"><emphasis>Interactive
        Data Visualization for the Web</emphasis></link> (2013), generated
        from a single HTML5 file using two different CSS3 stylesheets.</para><figure xml:id="paged_media_pdfs"><title>The same HTML5 file used to generate PDF content in two
          different templates using distinct CSS stylesheets; note the
          differences in styling of headers, footers, and figure images in the
          PDF at left versus the PDF at right.</title><mediaobject><imageobject><imagedata fileref="../../../vol10/graphics/Kleinfeld01/Kleinfeld01-001.png"/></imageobject></mediaobject></figure><para>It’s worth noting that while at first glance, a DocBook-source
        and HTML5-source production toolchain seem quite similar―a single
        input format from which multiple output formats are automatically
        generated―there’s a key difference between the two models. As
        previously stated, in an HTML5 workflow, the source format and the
        ready-to-package output format are identical, which means that
        both the toolchain and the people creating books with it only need to
        concern themselves with one markup language, not two. In a
        DocBook-based workflow, there are two problems to solve:</para><itemizedlist><listitem><para>How do we convert DocBook markup into a corresponding HTML
            representation that is faithful to the original semantics?</para></listitem><listitem><para>How do we style the HTML representation with CSS to achieve
            the desired formatting and aesthetics?</para></listitem></itemizedlist><para>Such a system thus has two points of failure<footnote><para>It’s certainly possible to have a single-source workflow
            that has more than two points of failure, if the toolchain permits
            intermediate formats used between source and output.
            For example, if authors write their manuscript in a lightweight
            markup language that exports to DocBook (e.g., <link xlink:href="http://www.methods.co.nz/asciidoc/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">AsciiDoc</link>),
            then there are two transformations built into the system—AsciiDoc
            to DocBook, and DocBook to HTML—which means two opportunities for
            problems to be introduced before the markup is even styled.</para></footnote> that can result in problems in the final EPUB, Mobi, or
        PDF output: there can be issues with the transformation engine
        (XSL-based or otherwise) that converts DocBook to HTML, or there can
        be a problem with the CSS stylesheets applied to the HTML.
        Troubleshooting problems in the former category requires a high level
        of expertise,<footnote><para>It’s true that the open source DocBook XSL stylesheets
            available in the <link xlink:href="http://docbook.sourceforge.net" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">DocBook project</link>
            are quite mature and robust, as they have been refined over the
            course of the past eleven years, but that does not eliminate the
            need for expert-level knowledge to both maintain the toolchain as
            additional requirements arise (e.g., add support for new EPUB 3
            features in HTML5 output) or customize the DocBook-to-HTML
            mappings to meet publisher-specific style conventions. Performing
            translations between two markup languages is not all that
            different from translating between two spoken languages: to do it
            well, you need to be fluent in both vocabularies and be able to
            effectively map and pattern words to meet the specific syntax
            demands of each. Even for the most knowledgeable and capable
            engineers, that level of complexity is likely to slow down the
            software development process.</para></footnote> as one needs to have extensive knowledge of both source
        and output markup languages just to determine how best to rectify the
        problem. This usually entails either modifying the transformation
        logic used to convert from source to output, or recommending
        alterations to the source format to achieve the desired output with
        the existing transformations.</para><para>When HTML5 is used as both source and output format, this first
        point of failure is completely removed from the production system. If
        you review the output and find that it contains an unordered list
        where you were expecting an ordered list, you simply crack open the
        HTML file and change the <code>&lt;ul&gt;</code> element to an
        <code>&lt;ol&gt;</code> element; you don’t need to audit the
        transformation logic used for conversion of DocBook
        <code>&lt;itemizedlist&gt;</code> and <code>&lt;orderedlist&gt;</code>
        elements. The only thing you have to worry about is the CSS. Such a
        system is much simpler and easier to maintain.</para></section></section><section><title>We Don’t Need Your Validator!</title><para>When you’re in the process of drafting your manuscript, you want
      to focus on expressing your thoughts in writing; you don’t want to worry
      about having to regularly validate your document to ensure that it
      conforms to a preset template or schema. There are few things more
      irritating than having the writing rhythm be interrupted to troubleshoot
      a template error (e.g., <xref linkend="word_error_screenshot"/>), or a
      DTD error like the following:</para><programlisting xml:space="preserve">ch01.xml:4: element chapter: validity error : Element chapter content does not follow the DTD, expecting (beginpage? , chapterinfo? , 
(title , subtitle? , titleabbrev?) , (toc | lot | index | glossary | bibliography)* , tocchap? , (((calloutlist | glosslist | bibliolist | 
itemizedlist | orderedlist | segmentedlist | simplelist | variablelist | caution | important | note | tip | warning | literallayout | 
programlisting | programlistingco | screen | screenco | screenshot | synopsis | cmdsynopsis | funcsynopsis | classsynopsis | fieldsynopsis | 
constructorsynopsis | destructorsynopsis | methodsynopsis | formalpara | para | simpara | address | blockquote | graphic | graphicco | 
mediaobject | mediaobjectco | informalequation | informalexample | informalfigure | informaltable | equation | example | figure | table | 
msgset | procedure | sidebar | qandaset | task | anchor | bridgehead | remark | highlights | abstract | authorblurb | epigraph | indexterm | beginpage)+ , 
(sect1* | refentry* | simplesect* | section*)) | sect1+ | refentry+ | simplesect+ | section+) , (toc | lot | index | glossary | bibliography)*), 
got (title para sect1 figure para sect1 sect1 sect1 )
Document book.xml does not validate
</programlisting><figure xml:id="word_error_screenshot"><title>Why does Word hate me?</title><mediaobject><imageobject><imagedata fileref="../../../vol10/graphics/Kleinfeld01/Kleinfeld01-002.png"/></imageobject></mediaobject></figure><para>Document validity should not be considered to be inherently
      valuable: validation is a means toward an end. We validate to confirm
      that necessary constraints are met to achieve a specific goal. In the
      case of book production, that goal is producing a PDF to be printed
      and/or an ebook to be distributed digitally.</para><para>When a book-production workflow is conversion-heavy, robust
      validation is crucial, as it’s a key mechanism to prevent formatting
      mistakes in source documents from propagating to output documents, or
      from causing the conversion process to fail entirely. If a Word
      manuscript document isn’t properly tagged with its template’s paragraph
      styles, it likely won’t convert to InDesign cleanly, which means extra
      QA and cleanup work for the compositor. Similarly, if a DocBook document
      doesn’t meet the requirements specified in the <link xlink:href="http://docbook.org/xml/4.5/docbookx.dtd" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">DocBook DTD</link>, the XSL transformations in the
      toolchain may not properly convert it to HTML or <link xlink:href="http://www.w3schools.com/xslfo/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">FO</link>, which again
      means more troubleshooting. When offered a choice between placing effort
      on validation or on ex post facto damage control, validation is rightly
      seen as the lesser of two evils.</para><para>But the balance of the tradeoff between validation and cleanup
      shifts dramatically when conversions are eliminated from the production
      workflow. As <link linkend="html5_source_and_output" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">discussed
      previously</link>, when HTML5 is used as both source and output format,
      there’s one less failure point in the process, which means fewer
      opportunities for something to go wrong. That doesn’t mean that all
      problems will disappear. Books are written by humans,<footnote><para>Still true in 2013, although artificial intelligence is
          clearly already making <link xlink:href="http://narrativescience.com/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">inroads into the field of
          journalism</link>.</para></footnote>and humans make mistakes. What changes when conversions are
      eliminated from the workflow is a decrease in the difficulty of
      troubleshooting and rectifying these mistakes. When the output format is
      identical to the source format, there’s no longer a need to retrace
      one’s steps to identify the source of a problem. If there’s a problem
      with the <code>&lt;ol&gt;</code> markup in your EPUB, you find the
      <code>&lt;ol&gt;</code> and fix it; you don’t need to backtrack to the
      corresponding numbered list in Word or <code>&lt;orderedlist&gt;</code>
      in DocBook and attempt to figure out why your numeration settings
      weren’t converted to the proper <link xlink:href="http://www.w3.org/TR/html-markup/ol.html#ol.attrs.start" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest"><code>start</code></link>
      attribute.</para><para>Even better, HTML5 rendering systems are generally reasonably
      fault-tolerant. As Liza Daly, VP of Engineering at <link xlink:href="http://www.safaribooksonline.com/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">Safari Books
      Online</link>, notes in her article “The unXMLing of digital books,”
      it’s not necessary to have perfect, XHTML-compliant syntax to get your
      HTML5 to render as expected in a Web browser:</para><blockquote><para>I can throw just about anything even resembling an EPUB book at
        our reading system — even if it’s completely invalid with HTML tag
        soup — and it’ll load. We have very little preprocessing necessary;
        XSLT, which is hard to learn and harder to master, is almost absent
        from our workflow.<xref linkend="d13"/></para></blockquote><para>As an example, if a book manuscript did contain poorly formed HTML
      with poor semantics like the following:</para><programlisting xml:space="preserve">&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
  &lt;body&gt;
    &lt;h1&gt;Basic formatting&lt;/h1&gt;
    &lt;p&gt;Here’s a paragraph with the last word in &lt;b&gt;bold.&lt;/b&gt;&lt;br&gt;&lt;br&gt;
    Here’s another paragraph with &lt;i&gt;some italics.&lt;/i&gt;
  &lt;/body&gt;
&lt;/html&gt;</programlisting><para>Instead of well-formed, more semantic XHTML syntax like
      this:</para><programlisting xml:space="preserve">&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
  &lt;body&gt;
    &lt;section class="chapter" title="Basic formatting"&gt;
      &lt;h1&gt;Basic formatting&lt;/h1&gt;
      &lt;p&gt;Here’s a paragraph with the last word in &lt;strong&gt;bold.&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;Here’s another paragraph with &lt;em&gt;some italics.&lt;/em&gt;&lt;/p&gt;
    &lt;/section&gt;
  &lt;/body&gt;
&lt;/html&gt;</programlisting><para>The HTML will still render largely the same in most modern Web
      browsers. AntennaHouse Formatter will also render identical PDF output
      from both syntaxes.<footnote><para>The EPUB format, however, requires that content be well-formed
          XHTML, and many EPUB ereaders (including iBooks, Adobe Digital
          Editions, and Kobo) will not be able to properly render HTML that is
          not well-formed XML (e.g., no <code>&lt;br&gt;</code> instead of
          <code>&lt;br/&gt;</code> or <code>&lt;br&gt;&lt;/br&gt;</code>).
          Additionally, even if these readers did render EPUBs with non-XHTML
          content properly, these files would still not conform to the EPUB
          specification and would fail <link xlink:href="http://code.google.com/p/epubcheck/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">epubcheck</link>,
          the official EPUB validation tool. However, given that non-XHTML
          HTML5 content is good enough for the Web, and modern browsers can
          handle “tag soup” just fine, I tend to agree with Daly’s argument in
          “The unXMLing of digital books”<link linkend="d13" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">[d13]</link> that
          it’s excessively restrictive to impose higher standards on EPUB
          content documents.</para></footnote></para><para>That’s not to say that every instance of sloppy HTML tagging will
      be so benign as to have no perceptible side effects on rendering. The
      point is that there is a fair amount of leeway, which can potentially be
      augmented by well-crafted CSS that accounts for potential variation in
      expected markup.</para><para>If your markup is relatively flexible, doesn’t need to be
      converted/transformed into another format, and problems are easy to
      correct, do you really need to focus on validation?</para></section><section><title>Digital-First Content Development!</title><para>When crafting a book that will be released in both print and ebook
      formats, there’s an opportunity to think “digital first,” and develop
      content that takes advantage of the features offered by a digital
      medium, such as audio/video, adaptive quizzes, games, etc.</para><para>If you opt to use traditional word-processing and
      desktop-publishing tools to author a book with special digital features,
      you’ll be faced with questions like, “How do I embed a Canvas in my Word
      doc?”, “How do I change all those image placeholders into video files
      for the ebook version?”, and so on. The answer: more scripting or manual
      markup rework, either as part of the conversion or as a postprocessing
      step.</para><para>Rich semantic markup languages like DocBook XML and AsciiDoc are a
      bit better suited to the goals of representing and converting multimedia
      content. DocBook in particular contains elements designated for
      representing audio and video media: <code>&lt;audiodata&gt;</code> and
      <code>&lt;videodata&gt;</code>, respectively. Similarly, the HTML5
      backend toolchain for AsciiDoc comes with a configuration file with
      <code>audio::</code> and <code>video::</code> macros you can use to
      embed audio/video references into your documents. But there’s still no
      out of the box analog to the <code>&lt;canvas&gt;</code> element, so
      some custom modeling and handling may still be in order for interactive
      features.</para><para>In contrast, HTML5 was expressly designed for the purpose of
      marking up digital media, and the ebooks you produce will use HTML5 to
      render it. Choosing to author the entire book in HTML5 just makes sense,
      because it will then be trivial to integrate these digital-first
      elements directly into the manuscript.</para></section><section><title>Web-Based, WYSIWYG Authoring</title><para>Two increasingly important features for authoring tools in the age
      of ebooks and self-publishing are having a Web-based platform and a
      WYSIWYG editing interface.</para><para>It’s not much of an overstatement to say that in recent years,
      cloud computing has revolutionized the whole realm of document
      production (not just books, but also articles, spreadsheets, and
      correspondence). The two key advances a platform like <link xlink:href="https://drive.google.com" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">Google Docs</link> offers over
      desktop word processors are “access everywhere” and live, versioned
      collaboration.<footnote><para>Google is really doubling down on its stake on the cloud being
          the future of business computing with <link xlink:href="http://www.chromium.org/chromium-os" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">Chrome OS</link>
          and its line of <link xlink:href="http://www.google.com/intl/en/chrome/devices/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">Chromebooks</link>,
          which effectively turn the computer’s entire OS into a web
          app.</para></footnote> Documents stored in the cloud can be retrieved from any
      Internet enabled device—desktop, laptop, tablet, smartphone—which
      completely obviates the need to traffic and sync files among machines
      via email or FTP. Cloud storage platforms like <link xlink:href="https://www.dropbox.com/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">Dropbox</link> also offer that
      functionality, but what they don’t provide is the ability to collaborate
      on documents in real-time and track the history of changes made by
      different users. If more than one person is going to be accessing the
      book manuscript as it’s being developed (co-authors, editors,
      copyeditors, reviewers), a Web-based platform with cloud storage is a
      huge boon in facilitating the logistics so that all parties can focus at
      the task at hand, instead of worrying about file management.<footnote><para>Whenever the virtues of a Web-based authoring tool are touted,
          there’s always one objection that is raised: online editing
          environments are no good because you can’t use them if you lack
          internet connectivity. Obviously that’s true, but you could equally
          well make the argument that computer-based authoring tools are also
          no good because they’re dependent on electricity or battery power.
          The utility of any given tool is context-dependent, and given that
          our modern infrastructure continues to come closer and closer to
          delivering on the promise of constant, ubiquitous internet access,
          it seems prudent to take full advantage of this connectivity when
          developing modern collaboration tools—with fallback offline functionality
          added as feasible.</para></footnote> A Web app also greatly reduces the risks of hiccups being
      introduced into the process when collaborators are working on machines
      running different operating systems and/or different versions of desktop
      apps—no more “Could you resave as <emphasis>.doc</emphasis> instead of
      <emphasis>.docx</emphasis>” or “Your template doesn’t work in Word 2008
      for Mac.”<footnote><para>Of course, there’s still the risk of “Your webapp won’t run in
          IE6,” but in general, these sorts of issues are much easier to deal
          with. It’s much easier to say “Download another free Web browser”
          than it is to say “Please buy the latest version of this expensive
          software suite” or “Please stop using Windows.”</para></footnote></para><para>Equally valuable to a lightweight authoring model (e.g.,
      self-publishing) is the ability to instantly get feedback while writing
      as to how the content renders. By WYSIWYG authoring, I not only mean
      that when content is tagged to be rendered in italics, the content
      onscreen actually appears <emphasis>in italics</emphasis> (as opposed to
      being displayed as <code>_in italics_</code> or <code>&lt;emphasis&gt;in
      italics&lt;/emphasis&gt;</code>). WYSIWYG should mean that the onscreen
      display mirrors as closely as possible what the final product will
      actually look like. In a model where a book manuscript is written in
      Microsoft Word and then composited in Adobe InDesign, this is rarely the
      case. At best, the onscreen display in Word is usually a rough
      <emphasis>approximation</emphasis> of how the content will end up
      looking when the <emphasis>real</emphasis> template is applied in
      InDesign. That’s not a great model when you’re looking to quickly
      iterate on both content development and typesetting.</para><para>HTML5 offers an elegant path forward toward constructing both a
      Web-based and WYSIWYG authoring environment. If you need to construct an
      authoring frontend in HTML5, CSS, and JavaScript to get it on the Web,
      why not just accept the manuscript files in HTML5, CSS, and JavaScript
      as well? That means no additional interpreters are needed to render the
      source content in the editor for WYSIWYG display.</para><para>The cornerstone of the WYSIWYG HTML5 editor is the <link xlink:href="http://www.w3.org/TR/2008/WD-html5-20080610/editing.html#contenteditable0" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest"><code>contenteditable</code>
      attribute</link>, which, when set on any element in a HTML5 document,
      allows the interior content of that element to be dynamically edited in
      real time by the end user who loads that document in her Web browser.
      With the help of some JavaScript to allow manipulation of
      <code>contenteditable</code> elements via a GUI interface (formatting
      buttons, etc.), and CSS to provide the appropriate styling of the added
      content, it is possible to create the analog of an InDesign template
      right in the Web browser, where the user can write and composite a
      manuscript without having to manually modify the HTML source or CSS
      stylesheets.</para><para>A plethora of <link xlink:href="http://www.aloha-editor.org/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">open
      source</link>, <link xlink:href="http://www.raptor-editor.com/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest"><code>contenteditable</code>-based</link>
      <link xlink:href="http://ckeditor.com/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">GUI HTML5 web editors</link>
      have been created in this fashion. <xref linkend="mercury_editor_screenshot"/> shows a screenshot of <link xlink:href="http://jejacks0n.github.io/mercury/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">Mercury Editor’s</link>
      <code>contenteditable</code> interface in action.</para><figure xml:id="mercury_editor_screenshot"><title>The open source Mercury Editor has a GUI <code>contenteditable</code>
        interface that can be used to dynamicallly update Web content</title><mediaobject><imageobject><imagedata fileref="../../../vol10/graphics/Kleinfeld01/Kleinfeld01-003.png"/></imageobject></mediaobject></figure><para>The fact that so many <code>contenteditable</code> editors are available right
      now is strong evidence that it is relatively easy to code this type of
      interface into an HTML5 app. But the fact that so many <code>contenteditable</code>
      editors are available right now is also strong evidence that no one’s
      really completely nailed the right feature set yet for this kind of app.
      The WYSIWYG part is there, but many of the features folks have grown
      accustomed to expect from suites like Google Docs aren’t baked in yet:
      collaborative editing, versioning, spellcheck, and so on. But it’s just
      a matter of time before that happens, as Web-based self-publishing
      platforms like <link xlink:href="http://pressbooks.com/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">PressBooks</link> and <link xlink:href="https://www.inkling.com/habitat/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">Inkling Habitat</link> have already embraced HTML as
      source format and have built their own Web editing interfaces.</para></section></section><section><title>Where HTML5 Falls Flat</title><para>Between the potential benefits available in terms of streamlining
    production workflows to eliminate costly conversions, mitigate the
    overhead of validation, and construct a truly WYSIWYG Web authoring
    platform, O’Reilly Media has aggressively been pursuing a switch from a
    single-source workflow based on DocBook XML to one based on HTML5. But
    effecting this shift has not been without its challenges, and ironically,
    some of the issues we’ve faced in attempting to implement authoring and
    production in HTML5 are directly related to the markup format’s key
    strengths.</para><section><title>New-and-Improved Semantics?</title><para>Yes, as discussed previously, HTML5 introduces a collection of
      semantic sectioning elements that greatly facilitate one’s ability to
      structure long-form textual content. However, HTML5’s sectioning
      vocabulary still pales in comparison to that of an XML vocabulary like
      DocBook, which was specificallly designed to support semantic tagging of
      book content. So, while HTML5 now offers <code>&lt;article&gt;</code>,
      <code>&lt;aside&gt;</code>, <code>&lt;nav&gt;</code>, and
      <code>&lt;section&gt;</code> for blocking off book subsections, some key
      omissions include analogs to the following DocBook elements:
      <code>&lt;appendix&gt;</code>, <code>&lt;bibliography&gt;</code>,
      <code>&lt;chapter&gt;</code>, <code>&lt;glossary&gt;</code>,
      <code>&lt;index&gt;</code>, and <code>&lt;part&gt;</code>. Without
      standardized semantics for these book components, it’s left to
      individuals to improvise their own custom semantics within the
      constraints of the HTML5 specification. But when the tagging for a book
      chapter can fairly accurately be represented as:</para><programlisting xml:space="preserve">&lt;div class="chapter"&gt;</programlisting><para>Or:</para><programlisting xml:space="preserve">&lt;section class="chapter"&gt;</programlisting><para>Or maybe:</para><programlisting xml:space="preserve">&lt;section data-book-division="chapter"&gt;</programlisting><para>Or if you’re not a native English speaker, perhaps:</para><programlisting xml:space="preserve">&lt;section class="chapitre"&gt;</programlisting><para>Then the vocabulary really isn’t precise enough to serve the
      intended purpose. Just as many HTML 4.01 Web developers felt that
      <code>&lt;div&gt;</code> was insufficient to meet their needs, many
      HTML5 book authors will likely feel the same way about the relatively
      small set of sectioning elements available.</para></section><section xml:id="no_conversions_necessary_question_mark"><title>No Conversions Necessary?</title><para>It’s true that when HTML5 is used as both source format and output
      format that no mappings are needed between markup types, but that
      doesn’t necessarily mean that no document transformations are needed. In
      a DocBook single-source workflow, the conversion of book files to the
      desired output format typically serves two functions. One purpose is
      indeed the markup translation, but the other is the autogeneration of
      book content that is implicit in the structure of the source files: the
      Table of Contents, the Index (if present), and intrabook
      cross-references. These elements are generally not hardcoded into the
      document because doing so is both tedious and redundant.</para><para>A standard Table of Contents simply lists chronologically the
      titles of each major division of the book (chapters, subsections, etc.)
      with hyperlinks and/or page numbers that reference the corresponding
      content in the body of the book. It makes little sense to manually mark
      up the Table of Contents by hand when the process can be automated,
      which is faster and less error-prone. The <link xlink:href="http://sourceforge.net/projects/docbook/files/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">DocBook XSL
      stylesheets</link> contain logic to handle TOC generation, as do
      Microsoft Word and Adobe InDesign.</para><para>Similarly, it’s desirable to have an Index that is autogenerated
      based on tags embedded in proper context in body text, rather than one
      hardcoded at the end of the book that is alphabetized by hand. A manual
      indexing process is typically so labor-intensive and not amenable to
      ongoing maintenance that it’s left to the very end of the production
      process to ensure that it won’t need to be repeated if text is added,
      deleted, or shuffled about). And for the same maintenance reasons,
      albeit on a smaller scale, “softcoded” cross references are preferable
      to their hardcoded counterparts. Hardcoding text in the manuscript like
      “See Chapter 7 for more details” opens the door to mistakes if at a
      later point in the writing/editing process, a decision is made to
      flip-flop Chapters 7 and 8 in the book. Much better to mark up the
      reference by linking to an anchor, as in the DocBook syntax “See
      <code>&lt;xref linkend="chapter_about_xml"/&gt;</code> for more
      details”, and leave the work of generating the proper chapter number in
      the output to a script.</para><para>Any robust, agile production workflow based on HTML5 is going to
      need to have the capability to autogenerate tables of contents, indices,
      and cross-reference text when appropriate<footnote><para>If you’re also aiming to produce ebook outputs like EPUB and
          Mobi, some additional transformations may be desirable for these
          output formats to account for the vagaries of HTML rendering on
          different ereader devices. O’Reilly maintains a set of XSL
          stylesheets that preprocess HTML targeted for the Kindle before
          generating Mobi output to achieve better rendering results on
          devices that are not compatible with the KF8 format.</para></footnote>—whether via XSL, JavaScript, or another set of tools. So
      while it’s a good thing that no formal <emphasis>conversions</emphasis>
      are needed in this model, HTML5-to-HTML5 document transformations are
      still very much on the table. Unfortunately, it’s not especially
      realistic to presume that it will be possible to just apply some CSS to
      the HTML manuscript and call it a day.</para></section><section xml:id="no_validator_question_mark"><title>We Don’t Need Your Validator?</title><para>Once transformations are back in the mix, the scale starts tilting
      back in favor of validation again. At minimum, most XML parsers are
      going to require well-formed markup, which means you don’t just need
      HTML5; you need XHTML5. Additionally, if automated Table of Contents,
      Index, or cross-reference generation are part of the toolchain, you may
      also want to validate against some additional requirements such as the
      following:</para><itemizedlist><listitem><para>All major book divisions must have titles (e.g., every chapter
          must have a corresponding nonempty <code>&lt;h1&gt;</code>)</para></listitem><listitem><para>Book-division nesting and headings must follow a sensible
          hierarchy (e.g., no <code>&lt;h1&gt;</code> elements lower in the
          hierarchy than <code>&lt;h2&gt;</code> elements)</para></listitem><listitem><para>All softcoded cross-references must reference ids that are
          present in the markup (e.g., an anchor like <code>&lt;a
          href="#chapter_2"&gt;</code> must point to a corresponding element
          with <code>id="chapter_2"</code>)</para></listitem></itemizedlist><para>The effort expended in catching these sorts of issues up front may
      pay dividends in terms of less cleanup required when producing the final
      product.</para></section></section><section><title>Bridging the Gap</title><para>To make HTML5 a truly viable markup format for authoring and
    producing long-form text content, it needs to be augmented with a semantic
    vocabulary for book-specific components. Once that’s in place, validation
    rules can be formulated to ensure conformance, and code can be written to
    script generation of navigation elements (table of contents, index, etc.).
    While it’s certainly possible for individual authors and publishers to
    create their own custom schemas and toolsets for HTML5 to fill this void,
    there are standard, universal semantics for book sectioning (e.g.,
    chapter, glossary, afterword), which means there’s a clear opportunity and
    need for an open HTML5-based standard geared toward book authoring so that
    there’s not a constant reinventing of the wheel by each entrant into the
    HTML5-based publishing space. When O’Reilly Media started exploring the
    options for HTML5-based book markup, the first standard we looked at was
    the EPUB ebook format, which added a new semantic vocabulary for book
    components in version 3.0 of the specification.</para><section><title>EPUB 3 and the Structural Semantics Vocabulary</title><para>The <link xlink:href="http://idpf.org/about-us" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">International
      Digital Publishing Forum (IDPF)</link>, the organization that developed
      and maintains the EPUB standard, recognized the need for richer
      semantics in HTML-based ebook content. In version 3.0 of the EPUB
      standard, they added a new EPUB-specific attribute to the format’s
      supported HTML5 markup called <link xlink:href="http://www.idpf.org/epub/30/spec/epub30-contentdocs.html#attrdef-epub-type" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest"><code>epub:type</code></link><xref linkend="e11"/>. The <code>epub:type</code> attribute can be
      applied to any element in any content document,<footnote><para>This includes any HTML5 element, but also any SVG or MathML
          elements embedded in the document, as these vocabularies are also
          supported in EPUB 3 content documents.</para></footnote>and its supported values include any terms defined in the
      “EPUB 3 Structural Semantics Vocabulary”<xref linkend="e11_2"/>. Also drafted by the IDPF, the Structural
      Semantics Vocabulary is a companion spec that standardarizes a set of
      semantics for book components. It encompasses a broad lexicon with which
      most in the publishing industry should be familiar, including terms such
      as “chapter”, “appendix”, “part”, “copyright-page”, “errata”,
      “pagebreak”, and “sidebar”.<footnote><para>If needed, the default value set offered by the Structural
          Semantics Vocabulary can be extended with terms from other
          vocabularies by using prefixes and the <code>prefix</code>
          attribute. See <link xlink:href="http://www.idpf.org/epub/30/spec/epub30-publications.html#sec-metadata-assoc" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://www.idpf.org/epub/30/spec/epub30-publications.html#sec-metadata-assoc</link>
          for more details.</para></footnote></para><para>Using <code>epub:type</code>, content creators can inflect
      existing HTML5 elements with the additional proper book semantics. For
      example, the following markup:</para><programlisting xml:space="preserve">&lt;section epub:type="chapter"&gt;</programlisting><para>Indicates a section of the document that corresponds to a book
      chapter.</para><para>While <code>epub:type</code> in conjunction with the Structural
      Semantics Vocabulary does provide a standard mechanism for tagging book
      components, it was not intended to serve the needs of content authoring
      and production; it was designed for consumption by ereader software. Per
      <link xlink:href="http://www.idpf.org/epub/30/spec/epub30-contentdocs.html#sec-xhtml-content-type-attribute" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">the
      EPUB 3 specification</link>, <code>epub:type</code> “provides a
      controlled way for Reading Systems and other User Agents to learn more
      about the structure and content of a document, providing them the
      opportunity to enhance the reading experience for Users.” As such, there
      are a couple key shortcomings that arise when using
      <code>epub:type</code> as a semantic authoring solutions:</para><variablelist><varlistentry><term>It’s EPUB-specific</term><listitem><para>The <code>epub:type</code> attribute is not a formal part of
            the HTML5 specification at this time; it’s an add-on that’s
            specific to the EPUB 3 specification and that is a part of the
            EPUB namespace (<code>http://www.idpf.org/2007/ops</code>). Using
            <code>epub:type</code> in your source documents implicitly
            associates them with a specific output format (EPUB) and may
            necessitate additional postprocessing for other formats. For
            example, if the same HTML source content is to be published on the
            Web, you’ll probably want to transform <code>epub:type</code> into
            an attribute supported by the HTML5 spec (e.g., <code>class</code>
            or a custom <code>data</code> attribute), which might also
            necessitate some corresponding CSS tweaks.</para><para>Having semantics that were valid against the HTML5 spec and
            thus output-format-agnostic would be a cleaner, more elegant
            solution for content creators.</para></listitem></varlistentry><varlistentry><term>It doesn’t specify any content model restrictions</term><listitem><para>Having proper semantics for HTML elements is likely not
            enough to support more robust validation of the type described in
            <xref linkend="no_validator_question_mark"/>. In EPUB 3, the
            following markup for a chapter and subsection:</para><programlisting xml:space="preserve">&lt;section epub:type="chapter"&gt;
  <emphasis role="bold">&lt;h2&gt;This is the chapter heading&lt;/h2&gt;</emphasis>
  &lt;p&gt;I am now going to include a subsection here:&lt;/p&gt;
  &lt;section&gt;
    <emphasis role="bold">&lt;p&gt;It would be odd to put a body-text paragraph before the main section heading&lt;/p&gt;
    &lt;h1&gt;Book Markup Best Practices&lt;/h1&gt;</emphasis>
  &lt;/section&gt;
&lt;/section&gt;</programlisting><para>Is as equally acceptable as this markup:</para><programlisting xml:space="preserve">&lt;section epub:type="chapter"&gt;
  <emphasis role="bold">&lt;h1&gt;This is the chapter heading&lt;/h1&gt;</emphasis>
  &lt;p&gt;I am now going to include a subsection here:&lt;/p&gt;
  &lt;section&gt;
<emphasis role="bold">    &lt;h2&gt;Book Markup Best Practices&lt;/h2&gt;
    &lt;p&gt;It would be odd to put a body-text paragraph before the main section heading&lt;/p&gt; </emphasis>   
  &lt;/section&gt;
&lt;/section&gt;</programlisting><para>However, it’s hard not to argue that the latter markup is
            far superior to the former markup in terms of clean, sensible
            representation of hierarchical book components, as it conforms to
            two rules: a formal section begins with a heading, and subheadings
            should be of lesser importance than their parent headings<footnote><para>THe HTML5 specification does <link xlink:href="http://www.w3.org/html/wg/drafts/html/master/sections.html#headings-and-sections" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">formally
                encourage this practice</link>: “Sections may contain headings
                of any <link xlink:href="http://www.w3.org/html/wg/drafts/html/master/sections.html#rank" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">rank</link>,
                and authors are strongly encouraged to use headings of the
                appropriate <link xlink:href="http://www.w3.org/html/wg/drafts/html/master/sections.html#rank" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">rank</link>
                for the section’s nesting level.” But it’s not a requirement,
                and the EPUB 3 <link xlink:href="http://code.google.com/p/epubcheck/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">epubcheck</link>
                validator doesn’t enforce it.</para></footnote> (i.e., it’s bad practice to nest a
            <code>&lt;h1&gt;</code> under an <code>&lt;h2&gt;</code>).</para><para>I’m not arguing that EPUB 3 should be enforcing these kinds
            of restrictions; as an output format meant for HTML rendering, I
            think it’s an asset that any valid XHTML is acceptable. But as an
            authoring format, these additional restrictions are valuable, as
            consistent, high-quality source markup ensures high-quality
            output.</para></listitem></varlistentry></variablelist><para>It’s not the EPUB specification’s mission to address either of
      these content-authoring concerns, and as such, I feel it’s misguided to
      consider EPUB 3 to be an appropriate HTML authoring format.</para></section><section><title>HTMLBook: A New HTML5 Authoring Standard</title><para>If EPUB 3 isn’t a good fit as an HTML5 authoring format, what
      should be used instead? Since we weren’t aware of another existing open
      standard for authoring in HTML5, my colleagues and I at O’Reilly
      developed our own: HTMLBook. The first Working Draft of the HTMLBook
      specification was <link xlink:href="https://github.com/oreillymedia/HTMLBook" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">released
      publicly</link> in April 2013, along with an XML Schema that can be used
      for validation.</para><para>Unlike EPUB 3, the HTMLBook specification does not include any
      custom add-on elements or attributes that cannot be found in standard
      HTML5. Instead, HTMLBook subsets the content model defined in the HTML5
      specification to add additional requirements and restrictions that apply
      specifically to book components such as chapters, figures, and sidebars.
      This means that documents that are valid HTMLBook documents are also
      valid against the standard HTML5 specification<footnote><para>However, the converse is not necessarily true. Just as not all
          rectangles are squares, not all HTML5 documents will meet the
          additional requirements of HTMLBook.</para></footnote> and can be used as is in all HTML5-based output
      formats.</para><para>The key supplemental requirements imposed by HTMLBook are semantic
      inflections on all structural book elements, as well as some additional
      restrictions in the content models of these elements.</para><para>Whenever possible, the values for semantic inflections were drawn
      from those available in the EPUB 3 Structural Semantics Vocabulary, but
      when appropriate terms did not exist in this corpus, values were drawn
      from the DocBook XML vocabulary. In contrast to EPUB 3, the
      <code>data-type</code> attribute is used for semantic inflection instead of <code>epub:type</code>, which
      serves to maintain conformity with the HTML5 spec.</para><para>In a standard HTMLBook document, the <code>&lt;body&gt;</code>
      element is the root element for book content, and requires a
      <code>data-type</code> value of <code>book</code> (any book-related
      metadata―such as ISBN or price—can be captured in
      <code>&lt;meta&gt;</code> elements in the document
      <code>&lt;head&gt;</code>). Nested in the <code>&lt;body&gt;</code> must
      be one or more <code>&lt;section&gt;</code>, <code>&lt;nav&gt;</code>,
      and/or <code>&lt;div&gt;</code> elements that represent standard book
      divisions and that must be inflected accordingly. Here is an example of
      a standard HTMLBook skeleton for a book that has a titlepage, table of
      contents, preface, several chapters, and an appendix:</para><programlisting xml:space="preserve">&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.w3.org/1999/xhtml ../htmlbook.xsd"
      xmlns="http://www.w3.org/1999/xhtml"&gt;
  &lt;head&gt;
    &lt;title&gt;This is the book title&lt;/title&gt;
  &lt;/head&gt;
  &lt;body data-type="book"&gt;
    &lt;section data-type="titlepage"&gt;
      &lt;!-- Titlepage content here --&gt;
    &lt;/section&gt;
    &lt;nav data-type="toc"&gt;
      &lt;!-- Table of Contents content here --&gt;
    &lt;/nav&gt;
    &lt;section data-type="preface"&gt;
      &lt;!-- Preface content here --&gt;
    &lt;/section&gt;
    &lt;section data-type="chapter"&gt;
      &lt;!-- Chapter 1 content here --&gt;
    &lt;/section&gt;
    &lt;section data-type="chapter"&gt;
      &lt;!-- Chapter 2 content here --&gt;
    &lt;/section&gt;
    &lt;section data-type="chapter"&gt;
      &lt;!-- Chapter 3 content here --&gt;
    &lt;/section&gt;
    &lt;section data-type="appendix"&gt;
      &lt;!-- Appendix content here --&gt;
    &lt;/section&gt;
  &lt;/body&gt;
&lt;/html&gt;</programlisting><para>Each of these main book divisions can have subdivisions of their
      own, which are <code>&lt;section&gt;</code> elements inflected with a
      data-type value of <code>sect1</code>, <code>sect2</code>,
      <code>sect3</code>, or <code>sect4</code><footnote><para>Borrowed from DocBook XML</para></footnote>, the appropriate value enforced based on position in the
      overall hierarchy. Additional requirements imposed on book divisions
      that are both direct children of <code>&lt;body&gt;</code> and
      lower-level descendants:</para><itemizedlist><listitem><para>Each division’s first child must be a heading using a heading
          element (<code>&lt;h1&gt;</code>–<code>&lt;h6&gt;</code>) that is
          appropriate to the hierarchy level.</para></listitem><listitem><para>Each division can only contain children that belong to a
          predefined set of Block elements (no raw text nodes). HTMLBook’s
          classification of Block elements is largely consistent with the
          HTML5 specification’s classification of <link xlink:href="http://www.w3.org/html/wg/drafts/html/master/dom.html#flow-content" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">Flow
          Content</link>, minus elements that can also be found in the HTML5
          categories of <link xlink:href="http://www.w3.org/html/wg/drafts/html/master/dom.html#heading-content" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">Heading
          Content</link>, <link xlink:href="http://www.w3.org/html/wg/drafts/html/master/dom.html#phrasing-content" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">Phrasing
          Content</link>, and <link xlink:href="http://www.w3.org/html/wg/drafts/html/master/dom.html#sectioning-content" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">Sectioning
          Content</link>.</para></listitem><listitem><para>The Table of Contents content in a <code>&lt;nav&gt;</code>
          element must contain <code>&lt;ol&gt;</code> markup that is
          consistent with the requirements for the <link xlink:href="http://www.idpf.org/epub/30/spec/epub30-contentdocs-20111011.html#sec-xhtml-nav" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">Navigation
          Document</link> specified in the EPUB 3 standard.</para></listitem></itemizedlist><para>The goal of HTMLBook is not to overlay a panoply of burdensome
      supplemental requirements on top of the HTML5 standard; rather, it’s to
      add the <emphasis>minimum requirements necessary </emphasis>to support
      consistant, semantic tagging of book content to facilitate templating
      and styling with CSS3—as well as <link linkend="no_conversions_necessary_question_mark" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">auto-generation of
      navigation content</link> and any requisite postprocessing via XSL or
      other scripting language—to produce high-quality outputs in multiple
      formats (both print and digital). Within this general framework, users
      of HTMLBook can employ whatever HTML5 markup they wish, including MathML
      and SVG content.</para><para>Along with the formal specification and Schema document, the
      HTMLBook project contains some sample CSS stylesheets, which authors can
      either use wholesale as design templates for their ebook outputs, or
      adapt to create their own custom styling. It also contains a set of XSL
      stylesheets that can be used to autogenerate Table of Contents, Indices,
      and cross-references for HTMLBook content, as well as assist in
      packaging it as PDF, EPUB, and Mobi.<footnote><para>These stylesheets are modeled after the <link xlink:href="http://sourceforge.net/projects/docbook/files/docbook-xsl/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">docbook-xsl
          stylesheets</link>, but with a focus placed solely on postprocessing
          and packaging HTML5 content, not on translating it.</para></footnote> We are currently in the early phases of developing this
      toolchain, but we hope over the coming months to continue to extend and
      refine this open source software to support the growing community of
      authors and publishers who are looking toward HTML5 and Web technologies
      for developing and producing book content.</para></section></section><section><title>Conclusion</title><para>HTML5 is better suited than any other document format to the unique
    demands of next-generation book authoring workflows, where creating both
    print and digital products is the aim, and the value lies in having a
    lightweight, low-cost, efficient toolset. While we’re still in the early
    stages of book authoring platforms and ebook tooling for HTML5-as-source,
    I expect that in a few years, drafting a book manuscript in HTML5 will be
    as commonplace as drafting a manuscript in Microsoft Word is today, and
    that the tools available for both editing and producing books in HTML5
    will continue to grow and evolve.</para></section><bibliography><title>Bibliography/References</title><bibliomixed xml:id="d13">Daly, Liza. “The unXMLing of digital
    books,” February 1, 2013, <link xlink:href="http://techblog.safaribooksonline.com/2013/02/01/the-unxmling-of-digital-books/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://techblog.safaribooksonline.com/2013/02/01/the-unxmling-of-digital-books/</link></bibliomixed><bibliomixed xml:id="e11">“EPUB Content Documents 3.0,” IDPF, <link xlink:href="http://www.idpf.org/epub/30/spec/epub30-contentdocs.html" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://www.idpf.org/epub/30/spec/epub30-contentdocs.html</link></bibliomixed><bibliomixed xml:id="e11_2">“EPUB 3 Structural Semantics
    Vocabulary,” IDPF, <link xlink:href="http://www.idpf.org/epub/vocab/structure/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://www.idpf.org/epub/vocab/structure/
    </link></bibliomixed><bibliomixed xml:id="m12">McKesson, Nellie. “Building Books with
    CSS3,” June 12, 2012, <link xlink:href="http://alistapart.com/article/building-books-with-css3" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://alistapart.com/article/building-books-with-css3</link></bibliomixed><bibliomixed xml:id="s11">Savikas, Andrew. “Distribution
    Everywhere,” <emphasis>Book: A Futurist’s Manifesto</emphasis>: O’Reilly
    Media, Inc, pp 21-34</bibliomixed><bibliomixed xml:id="h13">“Sectioning content,” HTML 5.1 Nightly, A
    vocabulary and associated APIs for HTML and XHTML, Editor’s Draft 8 April
    2013, <link xlink:href="http://www.w3.org/html/wg/drafts/html/master/dom.html#sectioning-content-0" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://www.w3.org/html/wg/drafts/html/master/dom.html#sectioning-content-0</link></bibliomixed><bibliomixed xml:id="w13">Wischenbart, Rüdiger, Carlo Carrerho,
    Veronika Licher, and Vinutha Mallya. “The Global eBook Market: Current
    Conditions &amp; Future Projections”: O’Reilly Media, Inc.,
    2013.</bibliomixed></bibliography></article>