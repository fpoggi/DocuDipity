<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#EasyXMLSerializationofCandJavaObjectsANCHOR" name="EasyXMLSerializationofCandJavaObjectsTOC">Easy XML Serialization of C# and Java Objects</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ExistingXMLSerializersANCHOR" name="ExistingXMLSerializersTOC">Existing XML Serializers</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#WOXFeaturesandUsesANCHOR" name="WOXFeaturesandUsesTOC">WOX Features and Uses</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#WOXImplementationANCHOR" name="WOXImplementationTOC">WOX Implementation</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#WOXXMLRepresentationANCHOR" name="WOXXMLRepresentationTOC">WOX XML Representation</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#DataTypeMappingTableANCHOR" name="DataTypeMappingTableTOC">Data Type Mapping Table</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#SimpleobjectwithprimitivetypesANCHOR" name="SimpleobjectwithprimitivetypesTOC">Simple object with primitive types</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#UnidimensionalprimitivearraysANCHOR" name="UnidimensionalprimitivearraysTOC">Uni-dimensional primitive arrays</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#MultidimensionalprimitivearraysANCHOR" name="MultidimensionalprimitivearraysTOC">Multi-dimensional primitive arrays</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ObjectarraysANCHOR" name="ObjectarraysTOC">Object arrays</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ListsANCHOR" name="ListsTOC">Lists</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#MapsANCHOR" name="MapsTOC">Maps</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ObjectreferencesANCHOR" name="ObjectreferencesTOC">Object references</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConclusionsandFurtherWorkANCHOR" name="ConclusionsandFurtherWorkTOC">Conclusions and Further Work</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BibliographyANCHOR" name="BibliographyTOC">Bibliography</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">age</div>
         <div class="singletermTERMS">array</div>
         <div class="singletermTERMS">answers</div>
         <div class="singletermTERMS">Arrays</div>
         <div class="singletermTERMS">August 2 - 5, 2011</div>
         <div class="singletermTERMS">Associate Professor</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">Byte</div>
         <div class="singletermTERMS">Boolean</div>
         <div class="singletermTERMS">boolean</div>
         <div class="singletermTERMS">byte</div>
         <div class="singletermTERMS">Base-64</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2011</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">Character</div>
         <div class="singletermTERMS">Class</div>
         <div class="singletermTERMS">char</div>
         <div class="singletermTERMS">categ</div>
         <div class="singletermTERMS">codes</div>
         <div class="singletermTERMS">Course</div>
         <div class="singletermTERMS">code</div>
         <div class="singletermTERMS">course</div>
         <div class="singletermTERMS">Castor</div>
         <div class="singletermTERMS">Classes require no modifications</div>
         <div class="singletermTERMS">Collection classes</div>
         <div class="singletermTERMS">Class and Type</div>
         <div class="singletermTERMS">cjaimez@correo.cua.uam.mx</div>
         <div class="singletermTERMS">Carlos</div>
         <div class="singletermTERMS">C# objects</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">Double</div>
         <div class="singletermTERMS">double</div>
         <div class="singletermTERMS">Data type mapping</div>
         <div class="singletermTERMS">Duplicate an object</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">elementType</div>
         <div class="singletermTERMS">entry</div>
         <div class="singletermTERMS">Easy to use</div>
         <div class="singletermTERMS">elopez@correo.cua.uam.mx</div>
         <div class="singletermTERMS">Erick</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
         <div class="singletermTERMS">Float</div>
         <div class="singletermTERMS">float</div>
         <div class="singletermTERMS">field</div>
         <div class="singletermTERMS">Field visibility</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
         <div class="singletermTERMS">grams</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">https://jaxb.dev.java.net/</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">idref</div>
         <div class="singletermTERMS">id</div>
         <div class="singletermTERMS">Integer</div>
         <div class="singletermTERMS">int</div>
         <div class="singletermTERMS">int[]</div>
         <div class="singletermTERMS">id="1"</div>
         <div class="singletermTERMS">id="3"</div>
         <div class="singletermTERMS">Interoperability between Java and C#</div>
         <div class="singletermTERMS">Interoperability</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
         <div class="singletermTERMS">java.util.ArrayList</div>
         <div class="singletermTERMS">java.util.HashMap</div>
         <div class="singletermTERMS">JSX</div>
         <div class="singletermTERMS">JAXB</div>
         <div class="singletermTERMS">Java objects</div>
         <div class="singletermTERMS">Jaimez-Gonzalez</div>
         <div class="singletermTERMS">J.</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
         <div class="singletermTERMS">key</div>
         <div class="singletermTERMS">Koala</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">Long</div>
         <div class="singletermTERMS">long</div>
         <div class="singletermTERMS">length</div>
         <div class="singletermTERMS">lenght</div>
         <div class="singletermTERMS">Lists</div>
         <div class="singletermTERMS">List</div>
         <div class="singletermTERMS">Lucas</div>
         <div class="singletermTERMS">Lopez-Ornelas</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">Map</div>
         <div class="singletermTERMS">Messages</div>
         <div class="singletermTERMS">M.</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">name</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">object</div>
         <div class="singletermTERMS">Object representation</div>
         <div class="singletermTERMS">Object references</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">Product</div>
         <div class="singletermTERMS">price</div>
         <div class="singletermTERMS">product</div>
         <div class="singletermTERMS">p1</div>
         <div class="singletermTERMS">p3</div>
         <div class="singletermTERMS">Professor</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">reg</div>
         <div class="singletermTERMS">Robust to class changes</div>
         <div class="singletermTERMS">Represent an object in a standard format</div>
         <div class="singletermTERMS">R.</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">Short</div>
         <div class="singletermTERMS">String</div>
         <div class="singletermTERMS">short</div>
         <div class="singletermTERMS">ser.Person</div>
         <div class="singletermTERMS">string</div>
         <div class="singletermTERMS">System.Collections.ArrayList</div>
         <div class="singletermTERMS">System.Collections.Hashtable</div>
         <div class="singletermTERMS">Serialization and de-serialization</div>
         <div class="singletermTERMS">Stand-alone</div>
         <div class="singletermTERMS">Simple XML</div>
         <div class="singletermTERMS">Standard XML object representation</div>
         <div class="singletermTERMS">Small footprint</div>
         <div class="singletermTERMS">Store an object</div>
         <div class="singletermTERMS">sml@essex.ac.uk</div>
         <div class="singletermTERMS">Simon</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">type</div>
         <div class="singletermTERMS">TestArray</div>
         <div class="singletermTERMS">TestMultiArray</div>
         <div class="singletermTERMS">term</div>
         <div class="singletermTERMS">Transport an object</div>
         <div class="singletermTERMS">Testing</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
         <div class="singletermTERMS">value</div>
         <div class="singletermTERMS">values</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">XStream</div>
         <div class="singletermTERMS">XMOP</div>
         <div class="singletermTERMS">XML serializer</div>
         <div class="singletermTERMS">XML representation</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="EasyXMLSerializationofCandJavaObjectsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3" xml:id="HR-23632987-8973">
      <div class="title e1">Easy XML Serialization of C# and Java Objects</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2011</div>
            <div class="confdates e5">August 2 - 5, 2011</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">Object serialization is the process of rendering an object into a state that can be
               stored persistently. 
               Serializing objects to XML brings many advantages over binary encoding because XML
               is human and computer readable,
               and it also aims to have better interoperability between different programming languages.
               This paper presents
               Web Objects in XML (WOX), an efficient and easy to use XML serializer for C# and Java
               objects. It allows to serialize
               Java objects to XML, de-serialize them to C#, and viceversa. Our serialization approach
               does not need code annotations 
               or any other type of configuration from the user in order to serialize objects. The
               XML encoding used in our WOX serializer can 
               represent objects in other object-oriented programming languages. We describe the
               main features and uses of the WOX serializer,
               its implementation, and the XML representation generated along with some examples.
            </div>
         </div>
         <div class="author e8">
            <div class="personname e9">
               <div class="firstname e10">Carlos</div>
               <div class="othername e11">R.</div>
               <div class="surname e12">Jaimez-Gonzalez</div>
            </div>
            <div class="personblurb e13">
               <div class="para e14">Carlos is currently an Associate Professor at the Information Technology
                  Department of the Universidad Autonoma Metropolitana in Mexico City, where he is responsible
                  of the
                  Web Technologies and Systems Research Group. He holds a PhD from the School of Computer
                  
                  Science and Electronic Engineering of the University of Essex, UK. His research interests
                  include 
                  web services, distributed objects, XML and related technologies, interoperability,
                  systems integration, 
                  web application development, and technologies for enhancing education.
               </div>
               <div class="para e15">Carlos has also been involved in several software projects for the industry; working
                  as a Software 
                  Developer, Team Leader, and Database Officer. He is a Microsoft Certified Systems
                  Engineer (MCSE), 
                  Database Administrator (MCDBA), and Solution Developer (MCSD).
               </div>
            </div>
            <div class="affiliation e16">
               <div class="jobtitle e17">Associate Professor</div>
               <div class="orgname e18">Departamento de Tecnologias de la Informacion, Universidad Autonoma Metropolitana
                  - Unidad Cuajimalpa, Mexico
               </div>
            </div>
            <div class="email e19">cjaimez@correo.cua.uam.mx</div>
         </div>
         <div class="author e20">
            <div class="personname e21">
               <div class="firstname e22">Simon</div>
               <div class="othername e23">M.</div>
               <div class="surname e24">Lucas</div>
            </div>
            <div class="personblurb e25">
               <div class="para e26">Simon M. Lucas is a Professor of Computer Science at the University of Essex, UK.
                  His main research interests 
                  are in machine learning and games. He has published widely in these fields with over
                  130 peer-reviewed papers and 
                  is the Founding Editor-in-Chief of the IEEE Transactions on Computational Intelligence
                  and AI in Games.
               </div>
               <div class="para e27">Professor Lucas was chair of IAPR Technical Committee 5 on Benchmarking and Software
                  (2002–2006) and is the 
                  inventor of the scanning n-tuple classifier, a fast and accurate OCR method. He was
                  appointed inaugural chair of 
                  the IEEE CIS Games Technical Committee in July 2006, has chaired or co-chaired many
                  international conferences, 
                  including the First IEEE Symposium on Computational Intelligence and Games in 2005.
                  He is also an associate editor 
                  of the IEEE Transactions on Evolutionary Computation, and the Springer Journal of
                  Memetic Computing. He was an 
                  invited keynote speaker or tutorial speaker at IEEE CEC 2007, IEEE WCCI 2008, IEEE
                  CIG 2008, PPSN 2008,IEEE CEC 2009 
                  and IEEE CEC 2010. He leads the newly established Game Intelligence Group at the University
                  of Essex.
               </div>
            </div>
            <div class="affiliation e28">
               <div class="jobtitle e29">Professor</div>
               <div class="orgname e30">School of Computer Science and Electronic Engineering, University of Essex, UK</div>
            </div>
            <div class="email e31">sml@essex.ac.uk</div>
         </div>
         <div class="author e32">
            <div class="personname e33">
               <div class="firstname e34">Erick</div>
               <div class="othername e35">J.</div>
               <div class="surname e36">Lopez-Ornelas</div>
            </div>
            <div class="personblurb e37">
               <div class="para e38">Erick is currently an Associate Professor at the Information Technology
                  Department of the Universidad Autonoma Metropolitana in Mexico City. He holds a PhD
                  from the Universite
                  Paul Sabatier (France). He worked as researcher in the high resolution remote perception
                  laboratory
                  in Toulouse, France, in the areas of processing of high resolution satelital images,
                  and geographical
                  information systems. His research interests include the analysis of high resolution
                  images,
                  and the  processing, visualization, and extraction of knowledge from spatial information.
               </div>
            </div>
            <div class="affiliation e39">
               <div class="jobtitle e40">Associate Professor</div>
               <div class="orgname e41">Departamento de Tecnologias de la Informacion, Universidad Autonoma Metropolitana
                  - Unidad Cuajimalpa, Mexico
               </div>
            </div>
            <div class="email e42">elopez@correo.cua.uam.mx</div>
         </div>
         <div class="legalnotice e43">
            <div class="para e44">Copyright © 2011 by the authors. Used with permission.</div>
         </div>
         <div class="keywordset e45" role="author">
            <div class="keyword e46">XML serializer</div>
            <div class="keyword e47">Java objects</div>
            <div class="keyword e48">C# objects</div>
            <div class="keyword e49">Interoperability</div>
            <div class="keyword e50">XML representation</div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e51">
         <div class="title e52">Introduction</div>
         <div class="para e53">Object serialization is the process of rendering an object into a state that can be
            stored persistently. 
            Serializing objects to XML brings many advantages over binary encoding because XML
            is human and computer readable,
            and it also aims to have better interoperability between different programming languages.
            Interoperability is 
            an important issue in distributed object-based systems, because it allows the communication
            of 
            programs (clients and servers) written in different object-oriented programming languages.
            There are some fundamental 
            issues that have to be agreed by the different programming languages to be able to
            reach interoperability. Some of these 
            are related to the data type mapping, object representation, messages, serialization
            and de-serialization.
         </div>
         <div class="para e54">
            <div class="emphasis e55" role="ital">Data type mapping</div>. Data types are one of the main issues when it comes to interoperability between
            different 
            programming languages. There must be an agreed mapping between the data types in the
            programming language X and the data 
            types in the programming language Y. One way to solve this problem is a mapping table
            with the different data types 
            supported by the different programming languages.
         </div>
         <div class="para e56">
            <div class="emphasis e57" role="ital">Object representation</div>. There must be a standard way of representing objects, either the object is written
            in Java, 
            C#, or other object-oriented programming language. A standard format must be established
            to represent the supported 
            structures in the different programming languages: classes, primitive data types,
            arrays, and user-defined classes. 
            This must also include a standard way to represent remote object references.
         </div>
         <div class="para e58">
            <div class="emphasis e59" role="ital">Messages</div>. They represent the way clients and servers communicate. Messages are used to make
            requests or receive 
            responses, and they must also be written in a standard way to be understood by clients
            and servers.
         </div>
         <div class="para e60">
            <div class="emphasis e61" role="ital">Serialization and de-serialization</div>. In the context of data storage and transmission, serialization is the process 
            of rendering an object into a state that can be saved persistently into a storage
            medium, such as a file, database, or 
            a stream to be transmitted through the network. De-serialization is the opposite process,
            which puts the serialized 
            version of the object into a live object. Serialization and de-serialization are processes
            heavily used when dealing 
            with distributed object-based systems.
         </div>
         <div class="para e62">In this paper we present Web Objects in XML (WOX), an efficient and easy to use XML
            serializer for interoperability 
            between the C# and Java programming languages. The WOX serializer is a stand-alone
            library based on XML (woxSerializer.jar 
            for the Java programming language, and woxSerializer.dll for the C# programming language),
            which is able to serialize
            Java and C# objects to XML and back again. One of its main features is the generation
            of standard XML, which is language 
            independent. This means that if we serialize a Java object to XML, we could take the
            generated XML to reconstruct the 
            object back to C#; and viceversa. It is worth noticing that our serialization approach
            does not need code annotations 
            or any other type of configuration from the user in order to serialize objects. 
         </div>
         <div class="para e63">We have made our WOX serializer publicly available as an open-source project,
            which can be downloaded from 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e64" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://woxserializer.sourceforge.net/</div>. It must be noticed that the
            WOX serializer presented in this paper is an improved and interoperable version of
            the serializer that is part of
            the WOX framework reported in [Jaimez 2007], which has been used to develop distributed
            object-based applications.
            Many people have been using our WOX interoperable serializer since we made it available.
            As a consequence of this work, 
            the MSDN Magazine (a Microsoft Magazine) published an article, in its October 2010
            issue [Khan 2010], about interoperability between 
            Java and .NET, where they mention and recommend the use of our work for interoperability
            between applications. We consider this as a 
            valuable example that demonstrates that our work has had an impact on the MSDN community.
         </div>
         <div class="para e65">The rest of the paper is organized as follows. Existing XML serializers are discussed
            in the next section. 
            A following section describes the main features and uses of the WOX serializer. Then,
            we dedicate another section to the implementation 
            of the WOX serializer. The XML representation generated by the WOX serializer is presented
            in a subsequent section along with some examples. 
            Finally, conclusions and further work are discussed in the final section.
         </div>
      </div><a name="ExistingXMLSerializersANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e66">
         <div class="title e67">Existing XML Serializers</div>
         <div class="para e68">We have not found any out of the box XML serializer to interoperate 
            between different programming languages. In this section we present a series of frameworks
            and libraries to 
            serialize objects to XML. All of the libraries explored (except one of them) are not
            able to generate a standard 
            XML object representation to interoperate between different programming languages.
         </div>
         <div class="para e69">
            <div class="emphasis e70" role="ital">XStream</div>. This is a Java library [XStream 2010] to serialize objects to XML and back again.
            XStream is able 
            to serialize most objects without the need for custom mappings. The XML generated
            is easy to understand. One of 
            its features is the use of aliases, which offer a way to use different tags or attribute
            names in the XML produced. 
            Class types, package names, and field names can be mapped to XML tags. This library
            is a good option to have an 
            object serialized to XML, but the main limitation is that it is only implemented in
            Java.
         </div>
         <div class="para e71">
            <div class="emphasis e72" role="ital">Koala</div>. Koala XML serialization [Koala 1998] is a Java application that provides a way to
            serialize and 
            de-serialize any Java objects in an XML document. The serialization mechanism of Koala
            relies in the Java 
            Serializable interface. This application is called KOML for Koala Object Markup Language,
            which is also a 100% 
            pure Java solution. The website of this project has not been updated since 1998.
         </div>
         <div class="para e73">
            <div class="emphasis e74" role="ital">XMOP</div>. XML Metadata Object Persistence [XMOP 2000] allows some degree of interoperability
            between object 
            technologies such as Java, and Microsoft COM. In the case of Java, it provides automatic
            serialization capabilities 
            only for simple classes. For those classes that contain string and array members,
            developers have to hand code the 
            serialization methods. In the case of COM, it does not provide automatic serialization
            for simple nor complex objects. 
            Developers have to code COM serialization/persistence through some interfaces provided.
            XMOP employs the Simple 
            Object Definition Language (SODL) and its DTD. Using introspection an object is serialized
            in the XMOP document format, 
            which is a description of the interfaces, properties and methods of an object. Although
            the XML representation 
            generated by XMOP is interoperable between programming languages, the developer has
            to do considerable effort to hand 
            code the serialization methods for the objects to be serialized.
         </div>
         <div class="para e75">
            <div class="emphasis e76" role="ital">JSX</div>. Java Serialization to XML [JSX 2002] serializes only Java objects to XML. JSX can
            persist any Java object in 
            a human readable format, where the XML generated is nice and clean. Another of its
            benefits is that it provides the 
            evolution techniques of the Java Object Serialization. This library used to be free,
            but it now provides a trial period 
            of 30 days, after which the user must pay to use it.
         </div>
         <div class="para e77">
            <div class="emphasis e78" role="ital">Castor</div>. The Castor project [Castor 2010] is an open source data binding framework for Java.
            It provides Java-to-XML 
            binding and Java-to-SQL persistence. The Java-to-XML framework enables the user to
            deal with the data defined in an XML 
            document through an object model which represents that data. Castor can marshal almost
            any Java object to and from XML. 
            One restriction is that the Java classes of the objects to be serialized must follow
            the Java Bean conventions. Castor 
            uses a set of class descriptors and field descriptors to describe how an object should
            be serialized and de-serialized 
            from XML. Castor can work in two different modes: the introspection mode does not
            require any configuration from the 
            user; but in the mapping mode, the user provides a user-defined mapping file that
            allows the definition of a customized 
            mapping between Java classes and XML.
         </div>
         <div class="para e79">
            <div class="emphasis e80" role="ital">JAXB</div>. The Java Architecture for XML Binding [JAXB 2010] is a framework for processing
            XML documents. Unmarshalling 
            an XML document with JAXB results in a tree of objects, with the nodes in this tree
            corresponding to XML elements, which 
            contain attributes and the content as instance variables. In order to extract this
            information and convert it to objects 
            from the XML document it is needed an XML Schema (which defines the structural relationships
            and data types). The XML 
            Schema is compiled, and a set of Java classes is generated, which define the types
            required for accessing elements, 
            attributes and other content. In this approach the user is required to know the structure
            of the XML document, and 
            create an XML Schema in order to map it to Java objects.
         </div>
         <div class="para e81">Although there are other existing libraries to serialize objects or messages to XML
            and viceversa, they are not 
            stand-alone, but they are part of a framework for web services, such as XML-RPC [Winer
            1999], or those that implement 
            the SOAP standard [SOAP 2003]. Web service frameworks like those use XML serialization
            internally, and are out 
            of the scope of this paper.
         </div>
         <div class="para e82">The next section presents some of the main features of our WOX serializer, which can
            be used to generate standard 
            XML representations of objects, and is able to interoperate between C# and Java.
         </div>
      </div><a name="WOXFeaturesandUsesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e83">
         <div class="title e84">WOX Features and Uses</div>
         <div class="para e85">The main features of the WOX serializer are listed below. 
            
            <div class="itemizedlist e86">
               <div class="listitem e87">
                  <div class="para e88">
                     <div class="emphasis e89" role="ital">Stand-alone</div>. It runs as a stand-alone library to serialize and de-serialize Java or C# objects.
                  </div>
               </div>
               <div class="listitem e90">
                  <div class="para e91">
                     <div class="emphasis e92" role="ital">Easy to use</div>. There is an Easy class, in both programming languages, that provides serialization
                     and de-serialization methods.
                  </div>
               </div>
               <div class="listitem e93">
                  <div class="para e94">
                     <div class="emphasis e95" role="ital">Simple XML</div>. The XML generated by the WOX serializer is simple, easy to understand, and language
                     independent.
                  </div>
               </div>
               <div class="listitem e96">
                  <div class="para e97">
                     <div class="emphasis e98" role="ital">Classes require no modifications</div>. The classes of objects to be serialized do not require to be changed with default
                     
                     constructors, getters, setters, or any other modifications.
                  </div>
               </div>
               <div class="listitem e99">
                  <div class="para e100">
                     <div class="emphasis e101" role="ital">Field visibility</div>. Private fields in classes are serialized just as any other field. The WOX serializer
                     serializes 
                     fields regardless their visibility.
                  </div>
               </div>
               <div class="listitem e102">
                  <div class="para e103">
                     <div class="emphasis e104" role="ital">Interoperability between Java and C#</div>. WOX can serialize a Java object to XML, and reconstruct the XML back to a C# 
                     object; and viceversa.
                  </div>
               </div>
               <div class="listitem e105">
                  <div class="para e106">
                     <div class="emphasis e107" role="ital">Standard XML object representation</div>. This could potentially allow to have WOX serializers in different object-oriented
                     
                     programming languages. There are two WOX serializers already developed: one for Java,
                     and one for C#.
                  </div>
               </div>
               <div class="listitem e108">
                  <div class="para e109">
                     <div class="emphasis e110" role="ital">WOX data types mapping</div>. There is a WOX mapping table that specifies how data types in Java and C# are mapped
                     to WOX data types.
                  </div>
               </div>
               <div class="listitem e111">
                  <div class="para e112">
                     <div class="emphasis e113" role="ital">Robust to class changes</div>. If classes change, default values will be used for newly added fields.
                  </div>
               </div>
               <div class="listitem e114">
                  <div class="para e115">
                     <div class="emphasis e116" role="ital">Arrays</div>. Uni-dimensional and multi-dimensional arrays of primitive types and objects of any
                     class are handled by the serializer.
                  </div>
               </div>
               <div class="listitem e117">
                  <div class="para e118">
                     <div class="emphasis e119" role="ital">Base-64</div>. Byte arrays are base-64 encoded for efficiency.
                  </div>
               </div>
               <div class="listitem e120">
                  <div class="para e121">
                     <div class="emphasis e122" role="ital">Collection classes</div>. Lists and Maps are provided as WOX data types. They are mapped to the ArrayList
                     
                     and HashMap classes in Java; and the ArrayList and Hashtable classes in C#.
                  </div>
               </div>
               <div class="listitem e123">
                  <div class="para e124">
                     <div class="emphasis e125" role="ital">Object references</div>. TheWOX serializer is capable to handle duplicate and circular object references
                     with id and idref attributes.
                  </div>
               </div>
               <div class="listitem e126">
                  <div class="para e127">
                     <div class="emphasis e128" role="ital">Class and Type</div>. Objects of these classes are saved by their String name.
                  </div>
               </div>
               <div class="listitem e129">
                  <div class="para e130">
                     <div class="emphasis e131" role="ital">Small footprint</div>. The woxSerializer.jar file (which contains only .class files) is only 25KB.
                  </div>
               </div>
            </div>
            
         </div>
         <div class="para e132">The WOX serializer can be used by any program that needs to interoperate between C#
            or Java, or simply to serialize 
            objects to XML from any of those programming languages. Some of the purposes where
            the WOX serializer can be used are listed below. 
            
            <div class="itemizedlist e133">
               <div class="listitem e134">
                  <div class="para e135">
                     <div class="emphasis e136" role="ital">Transport an object</div>. Serializing an object allows you send it through a network. Then it can be reconstructed
                     at the other end.
                  </div>
               </div>
               <div class="listitem e137">
                  <div class="para e138">
                     <div class="emphasis e139" role="ital">Store an object</div>. Persisting objects with the WOX serializer is easy. You can use them later by reconstructing
                     them to the 
                     appropriate programming language.
                  </div>
               </div>
               <div class="listitem e140">
                  <div class="para e141">
                     <div class="emphasis e142" role="ital">Represent an object in a standard format</div>. The XML generated byWOX aims to be independent of the programming language in which
                     
                     the object was created.
                  </div>
               </div>
               <div class="listitem e143">
                  <div class="para e144">
                     <div class="emphasis e145" role="ital">Work with Java and C# objects</div>. Java and C# objects can be serialized and de-serialized to and from XML.
                  </div>
               </div>
               <div class="listitem e146">
                  <div class="para e147">
                     <div class="emphasis e148" role="ital">Testing</div>. An object can be serialized to inspect its current state (fields and nested objects).
                     This can help for debugging purposes.
                  </div>
               </div>
               <div class="listitem e149">
                  <div class="para e150">
                     <div class="emphasis e151" role="ital">Duplicate an object</div>. Serialization is an easy way to duplicate objects.
                  </div>
               </div>
            </div>
            
         </div>
      </div><a name="WOXImplementationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e152">
         <div class="title e153">WOX Implementation</div>
         <div class="para e154">The implementation of the WOX serializer is described in this section through three
            different flow charts, which 
            illustrate how the WOX serializer writes any object to XML. This section has also
            been presented in [Jaimez 2011].
            The flow chart in 
            <div class="xref e155" linkend="FigFlowChart01Basic"></div> shows 
            the base functionality. There are some notes indicated with numbers inside a dotted
            square (A1 to A7) which are explained 
            below.
         </div>
         <div class="figure e156" xml:id="FigFlowChart01Basic">
            <div class="title e157">Flow chart A</div>
            <div class="mediaobject e158">
               <div class="imageobject e159">
                  <div class="metaBox e160"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e277').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e277" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e160'
                           </span><span class="metaAttribute">fileref='../../../vol7/graphics/Jaimez01/Jaimez01-001.jpg'
                           </span><span class="metaAttribute">format='jpg'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
            <div class="caption e161">
               <div class="para e162">Flow chart A: Base of the WOX serializer.</div>
            </div>
         </div>
         <div class="para e163">A1. We represent a NULL object as an EMPTY object in XML.</div>
         <div class="para e164">A2. We use a Map to store object references. This avoids the duplication of objects
            in the XML representation, and 
            the unnecessary serialization processing of objects that were already serialized.
            This Map is also used to handle adequately 
            recursive object references, because the serializer puts an object in the Map as soon
            as it goes through it (it is the first 
            step in the serialization process). This means that if this object is nested inside
            another object, the serializer will not 
            serialize it again, because when it reaches this object, the serializer will find
            out that its reference is already in the Map, 
            which handles the problem of recursive references.
         </div>
         <div class="para e165">A3. If the object is already in the Map, it is not necessary to serialize it again
            (a reference to the object will be 
            stored instead). The Map is populated as the serializer finds new objects. The 
            <div class="code e166">idref</div> XML attribute specifies the 
            object 
            <div class="code e167">id</div> in the Map that corresponds to the object found. It is important to notice that the
            
            <div class="code e168">id</div> and 
            <div class="code e169">idref</div> attributes are not the same as those normally used in the XML sense; but they
            are used to identify uniquely objects that have already been serialized.
         </div>
         <div class="para e170">A4. We say that an object is stringable if it is of any of the following classes:
            
            <div class="code e171">Byte</div>, 
            <div class="code e172">Short</div>, 
            
            <div class="code e173">Integer</div>, 
            <div class="code e174">Long</div>, 
            <div class="code e175">Float</div>, 
            <div class="code e176">Double</div>, 
            <div class="code e177">Character</div>, 
            <div class="code e178">Boolean</div>, 
            
            <div class="code e179">Class</div>, 
            <div class="code e180">String</div>.
         </div>
         <div class="para e181">A5. Other objects in their stringable versions can be seen below.
            
            <div class="programlisting e182" xml:space="preserve">&lt;object type="boolean" value="true" id="11" /&gt;
               &lt;object type="char" value="\u0009" id="15" /&gt;
               &lt;object type="int" value"785" id="21" /&gt;
            </div>
            
         </div>
         <div class="para e183">A6. The serializer will process the array. The process to serialize an array is illustrated
            in the Flow chart B shown in Figure 2.
         </div>
         <div class="para e184">A7. At this point the serializer has found another type of object (not a stringable
            object, not an array). It is a 
            user-defined class or other type of object not covered in the previous cases. The
            serializer will write this object, 
            and go through each of its fields (attributes) to serialize them. The process to serialize
            each of the object fields 
            (attributes) is illustrated in Figure 3.
         </div>
         <div class="para e185">The flow chart in 
            <div class="xref e186" linkend="FigFlowChart02Arrays"></div> shows the functionality of the WOX serializer to deal with 
            arrays. The flow chart has some notes indicated with numbers inside a dotted square
            (B1 to B3), which are explained below.
         </div>
         <div class="figure e187" xml:id="FigFlowChart02Arrays">
            <div class="title e188">Flow chart B</div>
            <div class="mediaobject e189">
               <div class="imageobject e190">
                  <div class="metaBox e191"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e351').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e351" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e191'
                           </span><span class="metaAttribute">fileref='../../../vol7/graphics/Jaimez01/Jaimez01-002.jpg'
                           </span><span class="metaAttribute">format='jpg'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
            <div class="caption e192">
               <div class="para e193">Flow chart B: Arrays.</div>
            </div>
         </div>
         <div class="para e194">B1. The serializer checks the class of the object against an array that holds all
            the possible primitive uni-dimensional arrays.
         </div>
         <div class="para e195">B2. It is not a uni-dimensional array. It could be a n-dimensional array, or an array
            of objects of user-defined classes.
         </div>
         <div class="para e196">B3. The type of the primitive array found is any of the following: 
            <div class="code e197">int</div>, 
            <div class="code e198">boolean</div>, 
            <div class="code e199">short</div>, 
            
            <div class="code e200">long</div>, 
            <div class="code e201">char</div>, 
            <div class="code e202">float</div> or 
            <div class="code e203">double</div>. Some examples of primitive arrays serialized to XML 
            by the WOX serializer are shown below.
            
            <div class="programlisting e204" xml:space="preserve">&lt;array type="int" length="6" id="10"&gt;45 67 78 32 34 79&lt;/array&gt;
               &lt;array type="char" length="3" id="19"&gt;\u0065 \u0004 \u0067&lt;/array&gt;
            </div>
            
         </div>
         <div class="para e205">The flow chart in 
            <div class="xref e206" linkend="FigFlowChart03Fields"></div> shows the functionality of the WOX serializer to deal with fields of an object. The
            
            flow chart has some notes indicated with numbers inside a dotted square (C1 to C3),
            which are explained below.
         </div>
         <div class="figure e207" xml:id="FigFlowChart03Fields">
            <div class="title e208">Flow chart C</div>
            <div class="mediaobject e209">
               <div class="imageobject e210">
                  <div class="metaBox e211"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e395').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e395" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e211'
                           </span><span class="metaAttribute">fileref='../../../vol7/graphics/Jaimez01/Jaimez01-003.jpg'
                           </span><span class="metaAttribute">format='jpg'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
            <div class="caption e212">
               <div class="para e213">Flow chart C: Fields of an object.</div>
            </div>
         </div>
         <div class="para e214">C1. The WOX serializer considers the following as primitive data types: 
            <div class="code e215">byte</div>, 
            <div class="code e216">short</div>, 
            
            <div class="code e217">int</div>, 
            <div class="code e218">long</div>, 
            <div class="code e219">float</div>, 
            <div class="code e220">double</div>, 
            <div class="code e221">char</div>, 
            <div class="code e222">boolean</div>.
         </div>
         <div class="para e223">C2. In this case stringable objects are treated as fields of a parent object. A stringable
            object is not labeled 
            as object when it is the field of another object (observe that it also lacks of the
            id attribute). This aims to have 
            a more compact encoding.
         </div>
         <div class="para e224">C3. An example of the XML generated for a field of an object is shown below. The field
            is an object of type 
            
            <div class="code e225">ser.Person</div>, which also has two more fields: 
            <div class="code e226">name</div> of type 
            <div class="code e227">string</div>, and 
            
            <div class="code e228">age</div> of type 
            <div class="code e229">int</div>.
            
            <div class="programlisting e230" xml:space="preserve">&lt;field name="fieldName"&gt;
               &lt;object type="ser.Person" id="9"&gt;
               &lt;field name="name" type="string" value="Carlos" /&gt;
               &lt;field name="age" type="int" value="30" /&gt;
               &lt;/object&gt;
               &lt;/field&gt;
            </div>
            
         </div>
      </div><a name="WOXXMLRepresentationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e231">
         <div class="title e232">WOX XML Representation</div>
         <div class="para e233">In this section we will introduce the data type mapping 
            table used by WOX, and show the XML representation of different types of WOX objects:
            simple objects with primitive types, 
            uni-dimensional primitive arrays, multi-dimensional primitive arrays, object arrays,
            lists, maps, and user-defined 
            objects (which also have fields with different types of objects).
         </div><a name="DataTypeMappingTableANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e234">
            <div class="title e235">Data Type Mapping Table</div>
            <div class="para e236">Table 1 shows the data type mapping used in WOX with the Java and C# programming languages.
               The 
               first column shows the data types used in WOX, and the second and third columns represent
               the 
               corresponding data types in Java and C#, respectively.
            </div>
            <div class="table e237">
               <div class="caption e238">
                  <div class="para e239">Data type mapping between WOX, Java and C#</div>
               </div>
               <div class="metaBox e240"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e463').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e463" class="metaSource" style="display:none;">                
                     &lt;col<span class="metaAttribute">align='right'
                        </span><span class="metaAttribute">class='e240'
                        </span><span class="metaAttribute">span='1'
                        </span><span class="metaAttribute">valign='top'
                        </span>
                     &gt;
                     
                  </div>
               </div>
               <div class="metaBox e241"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e464').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e464" class="metaSource" style="display:none;">                
                     &lt;col<span class="metaAttribute">class='e241'
                        </span><span class="metaAttribute">span='1'
                        </span><span class="metaAttribute">valign='top'
                        </span>
                     &gt;
                     
                  </div>
               </div>
               <div class="metaBox e242"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e465').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e465" class="metaSource" style="display:none;">                
                     &lt;col<span class="metaAttribute">align='center'
                        </span><span class="metaAttribute">class='e242'
                        </span><span class="metaAttribute">span='1'
                        </span><span class="metaAttribute">valign='top'
                        </span>
                     &gt;
                     
                  </div>
               </div>
               <div class="thead e243">
                  <div class="tr e244" valign="top">
                     <div class="th e245">WOX</div>
                     <div class="th e246">Java</div>
                     <div class="th e247">C#</div>
                  </div>
               </div>
               <div class="tbody e248">
                  <div class="tr e249" valign="top">
                     <div class="td e250">byte</div>
                     <div class="td e251">byte/Byte</div>
                     <div class="td e252">sbyte (SByte)</div>
                  </div>
                  <div class="tr e253" valign="top">
                     <div class="td e254">short</div>
                     <div class="td e255">short/Short</div>
                     <div class="td e256">short (Int16)</div>
                  </div>
                  <div class="tr e257" valign="top">
                     <div class="td e258">int</div>
                     <div class="td e259">int/Int</div>
                     <div class="td e260">int (Int32)</div>
                  </div>
                  <div class="tr e261" valign="top">
                     <div class="td e262">long</div>
                     <div class="td e263">long/Long</div>
                     <div class="td e264">long (Int64)</div>
                  </div>
                  <div class="tr e265" valign="top">
                     <div class="td e266">float</div>
                     <div class="td e267">float/Float</div>
                     <div class="td e268">float (Single)</div>
                  </div>
                  <div class="tr e269" valign="top">
                     <div class="td e270">double</div>
                     <div class="td e271">double/Double</div>
                     <div class="td e272">double (Double)</div>
                  </div>
                  <div class="tr e273" valign="top">
                     <div class="td e274">char</div>
                     <div class="td e275">char/Character</div>
                     <div class="td e276">char (Char)</div>
                  </div>
                  <div class="tr e277" valign="top">
                     <div class="td e278">boolean</div>
                     <div class="td e279">boolean/Boolean</div>
                     <div class="td e280">bool (Bool)</div>
                  </div>
                  <div class="tr e281" valign="top">
                     <div class="td e282">string</div>
                     <div class="td e283">String</div>
                     <div class="td e284">string (String)</div>
                  </div>
                  <div class="tr e285" valign="top">
                     <div class="td e286">object</div>
                     <div class="td e287">Object</div>
                     <div class="td e288">object (Object)</div>
                  </div>
                  <div class="tr e289" valign="top">
                     <div class="td e290">array</div>
                     <div class="td e291">Any Array</div>
                     <div class="td e292">Any Array</div>
                  </div>
                  <div class="tr e293" valign="top">
                     <div class="td e294">list</div>
                     <div class="td e295">ArrayList</div>
                     <div class="td e296">ArrayList</div>
                  </div>
                  <div class="tr e297" valign="top">
                     <div class="td e298">map</div>
                     <div class="td e299">HashMap</div>
                     <div class="td e300">Hashtable</div>
                  </div>
                  <div class="tr e301" valign="top">
                     <div class="td e302">class</div>
                     <div class="td e303">Class</div>
                     <div class="td e304">Type</div>
                  </div>
               </div>
            </div>
            <div class="para e305">The WOX serializer produces the same XML representation for any object, provided that
               their fields
               are only the Java and C# data types listed in Table 1, or any nested objects of user-defined
               classes which 
               have fields of those data types. This also includes the list and map data types from
               the collection APIs 
               of both programming languages.
            </div>
         </div><a name="SimpleobjectwithprimitivetypesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e306">
            <div class="title e307">Simple object with primitive types</div>
            <div class="para e308">In this subsection we illustrate the XML representation of WOX primitive types, which
               include: 
               
               <div class="code e309">byte</div>, 
               <div class="code e310">short</div>, 
               <div class="code e311">int</div>, 
               <div class="code e312">long</div>, 
               <div class="code e313">float</div>, 
               
               <div class="code e314">double</div>, 
               <div class="code e315">char</div>, and 
               <div class="code e316">boolean</div>. The complete list of the data types 
               supported by WOX is shown in Table 1.
            </div>
            <div class="para e317">
               <div class="xref e318" linkend="FigProductClass"></div> shows the 
               <div class="code e319">Product</div> class, which has five fields of primitive types: 
               <div class="code e320">name</div> 
               of type 
               <div class="code e321">string</div>, 
               <div class="code e322">price</div> of type 
               <div class="code e323">double</div>, 
               <div class="code e324">grams</div> of type 
               
               <div class="code e325">int</div>, 
               <div class="code e326">reg</div> of type 
               <div class="code e327">boolean</div>, and 
               <div class="code e328">categ</div> of type 
               <div class="code e329">char</div>.
            </div>
            <div class="figure e330" xml:id="FigProductClass">
               <div class="title e331">Product class</div>
               <div class="mediaobject e332">
                  <div class="imageobject e333">
                     <div class="metaBox e334"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e648').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e648" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e334'
                              </span><span class="metaAttribute">fileref='../../../vol7/graphics/Jaimez01/Jaimez01-004.jpg'
                              </span><span class="metaAttribute">format='jpg'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="caption e335">
                  <div class="para e336">Product class with primitive fields.</div>
               </div>
            </div>
            <div class="para e337">The XML representation in WOX of a 
               <div class="code e338">Product</div> object is shown below. The XML is simple and clean.     
               
               <div class="programlisting e339" xml:space="preserve">&lt;object type="Product" id="0"&gt;
                  &lt;field name="name" type="string" value="Corn" /&gt;
                  &lt;field name="price" type="double" value="3.98" /&gt;
                  &lt;field name="grams" type="int" value="500" /&gt;
                  &lt;field name="reg" type="boolean" value="true" /&gt;
                  &lt;field name="categ" type="char" value="\u0041" /&gt;
                  &lt;/object&gt;
               </div>      
               
            </div>
            <div class="para e340">The root of the XML document is an 
               <div class="code e341">object</div> element, with its 
               <div class="code e342">type</div> attribute 
               equals 
               <div class="code e343">Product</div>, which is the class of the object. The 
               <div class="code e344">id</div> attribute is used to handle 
               object references (in this case we only have one object - the 
               <div class="code e345">product</div> object). Every field in the 
               
               <div class="code e346">product</div> object is represented by 
               <div class="code e347">field</div> elements, which have the following attributes: 
               
               <div class="code e348">name</div> (the name of the field in the class), 
               <div class="code e349">type</div> (the WOX data type of the field), 
               and 
               <div class="code e350">value</div> (the value of the field for that particular object). Primitive types are represented
               in 
               WOX as 
               <div class="code e351">field</div> elements.
            </div>
            <div class="para e352">Observe that the 
               <div class="code e353">categ</div> field is of type 
               <div class="code e354">char</div>. WOX data type 
               <div class="code e355">char</div> 
               is represented as a Unicode value.
            </div>
         </div><a name="UnidimensionalprimitivearraysANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e356">
            <div class="title e357">Uni-dimensional primitive arrays</div>
            <div class="para e358">Uni-dimensional primitive arrays contain primitives as their elements. Primitives
               include the following 
               data types: 
               <div class="code e359">byte</div>, 
               <div class="code e360">short</div>, 
               <div class="code e361">int</div>, 
               <div class="code e362">long</div>, 
               <div class="code e363">float</div>, 
               
               <div class="code e364">double</div>, 
               <div class="code e365">char</div>, and 
               <div class="code e366">boolean</div>. For a complete list of the data types supported 
               by WOX see the Data types mapping table.
            </div>
            <div class="para e367">Primitive arrays are treated differently from other arrays, because they are serialized
               in a very efficient way. 
               We will show two examples of the XML representation for primitive arrays. The first
               one is a stand-alone array, 
               in which the array itself is the root object. In the second example, the primitive
               array is part of an object (it 
               is declared as a field in a class).
            </div>
            <div class="para e368">The XML representation of a stand-alone primitive array is shown below. The XML is
               simple and efficient. The 
               root is an 
               <div class="code e369">object</div> element, with its 
               <div class="code e370">type</div> attribute equals 
               <div class="code e371">array</div>, which 
               indicates that the object represented in this case is an array. The 
               <div class="code e372">elementType</div> attribute provides the 
               data type of the primitive array, and the 
               <div class="code e373">length</div> attribute indicates the number of elements in the array. 
               The 
               <div class="code e374">id</div> attribute is used to handle object references (in this example we only have one object
               - the 
               array itself). The elements of the array are separated by spaces, and presented as
               only one string.
               
               <div class="programlisting e375" xml:space="preserve">&lt;object type="array" elementType="double" length="5" id="0"&gt;
                  12.45 878.98 987.98 435.87 537.87
                  &lt;/object&gt;
               </div>
               
            </div>
            <div class="para e376">The XML representation of an object that contains three uni-dimensional primitive
               arrays as fields is shown 
               below. The primitive arrays are declared as fields of the 
               <div class="code e377">TestArray</div> class, which is illustrated in 
               
               <div class="xref e378" linkend="FigTestArrayClass"></div>.
            </div>
            <div class="figure e379" xml:id="FigTestArrayClass">
               <div class="title e380">TestArray class</div>
               <div class="mediaobject e381">
                  <div class="imageobject e382">
                     <div class="metaBox e383"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e775').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e775" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e383'
                              </span><span class="metaAttribute">fileref='../../../vol7/graphics/Jaimez01/Jaimez01-005.jpg'
                              </span><span class="metaAttribute">format='jpg'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="caption e384">
                  <div class="para e385">TestArray class with three primitive array.</div>
               </div>
            </div>
            <div class="para e386">In this case, the arrays are not root objects, but they are now fields of the root
               object. The 
               <div class="code e387">codes</div> 
               field is a primitive array of 
               <div class="code e388">char</div> elements, the 
               <div class="code e389">values</div> field is a primitive array of 
               
               <div class="code e390">int</div> elements, and the 
               <div class="code e391">answers</div> field is a primitive array of 
               <div class="code e392">boolean</div> elements. 
               It should be noticed that arrays are also objects with their 
               <div class="code e393">type</div> attribute equals 
               <div class="code e394">array</div>.
               
               <div class="programlisting e395" xml:space="preserve">&lt;object type="TestArray" id="0"&gt;
                  &lt;field name="codes"&gt;
                  &lt;object type="array" elementType="char" length="5" id="1"&gt;
                  \u0065 \u0074 \u0072 \u0067 \u0077
                  &lt;/object&gt;
                  &lt;/field&gt;
                  &lt;field name="values"&gt;
                  &lt;object type="array" elementType="int" length="5" id="2"&gt;
                  23 56 78 33 69
                  &lt;/object&gt;
                  &lt;/field&gt;
                  &lt;field name="answers"&gt;
                  &lt;object type="array" elementType="bool" length="5" id="3"&gt;
                  true false true false false
                  &lt;/object&gt;
                  &lt;/field&gt;
                  &lt;/object&gt;
               </div>
               
            </div>
            <div class="para e396">The root is an 
               <div class="code e397">object</div> element, with the 
               <div class="code e398">type</div> attribute equals 
               <div class="code e399">TestArray</div>, 
               which is the class of the root object. The root element has three field elements as
               children, which correspond to 
               the three primitive arrays. Each array is a field of the root object, and they are
               treated as 
               <div class="code e400">object</div> 
               elements, with 
               <div class="code e401">type</div>, 
               <div class="code e402">elementType</div>, 
               <div class="code e403">lenght</div>, and 
               <div class="code e404">id</div> attributes. The 
               elements of each array are separated by spaces and written as one simple string.
            </div>
         </div><a name="MultidimensionalprimitivearraysANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e405">
            <div class="title e406">Multi-dimensional primitive arrays</div>
            <div class="para e407">Multi-dimensional primitive arrays can also be serialized as stand-alone arrays, or
               as part of an object. Below 
               we show the XML representation of an object of the 
               <div class="code e408">TestMultiArray</div> class. The 
               <div class="code e409">TestMultiArray</div>
               class, which is illustrated in 
               <div class="xref e410" linkend="FigTestMultiArrayClass"></div>, has one bi-dimensional array of 
               <div class="code e411">int</div> elements as its field.
               
               <div class="programlisting e412" xml:space="preserve">&lt;object type="TestMultiArray" id="0"&gt;
                  &lt;field name="matrix"&gt;
                  &lt;object type="array" elementType="int[]" length="3" id="1"&gt;
                  &lt;object type="array" elementType="int" length="5" id="2"&gt;23 56 89 36 68&lt;/object&gt;
                  &lt;object type="array" elementType="int" length="4" id="3"&gt;87 64 88 32&lt;/object&gt;
                  &lt;object type="array" elementType="int" length="6" id="4"&gt;78 80 21 29 34 67&lt;/object&gt;
                  &lt;/object&gt;
                  &lt;/field&gt;
                  &lt;/object&gt;
               </div>
               
            </div>
            <div class="figure e413" xml:id="FigTestMultiArrayClass">
               <div class="title e414">TestMultiArray class</div>
               <div class="mediaobject e415">
                  <div class="imageobject e416">
                     <div class="metaBox e417"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e860').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e860" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e417'
                              </span><span class="metaAttribute">fileref='../../../vol7/graphics/Jaimez01/Jaimez01-006.jpg'
                              </span><span class="metaAttribute">format='jpg'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="caption e418">
                  <div class="para e419">TestMultiArray class with one multi-dimensional primitive array as field.</div>
               </div>
            </div>
            <div class="para e420">We can observe that the root is an 
               <div class="code e421">object</div> element, with its 
               <div class="code e422">type</div> attribute equals 
               
               <div class="code e423">TestMultiArray</div>, which is the class of the root object. The root element has only one child: a 
               
               <div class="code e424">field</div> element, which is a bi-dimensional primitive array. Since this is a bi-dimensional
               array, it 
               is actually serialized as an array of arrays. It is an array of three elements of
               type 
               <div class="code e425">int[]</div>, where 
               every element is an array of type 
               <div class="code e426">int</div>. The first array has five elements, the second array has four 
               elements, and the last array has six elements. The elements of each array are separated
               by spaces and presented 
               as one simple string.
            </div>
            <div class="para e427">It should be noted that every 
               <div class="code e428">object</div> element has an 
               <div class="code e429">id</div> attribute, which is used to 
               handle object references. Arrays of more than two dimensions (multi-dimensional) are
               represented in XML following the 
               same idea shown in this subsection.
            </div>
         </div><a name="ObjectarraysANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e430">
            <div class="title e431">Object arrays</div>
            <div class="para e432">The main difference between primitive arrays and object arrays is that the elements
               in primitive arrays are 
               serialized to a simple string with spaces to separate each element; whereas in object
               arrays their elements are 
               treated as individual and separate objects.
            </div>
            <div class="para e433">Object arrays can also be uni-dimensional or multi-dimensional, just like primitive
               arrays. We will only illustrate 
               the XML representation of a uni-dimensional object array. We will use the 
               <div class="code e434">Product</div> class shown previously 
               in 
               <div class="xref e435" linkend="FigProductClass"></div>. The XML representation of an array with three 
               <div class="code e436">Product</div> objects is 
               shown below.
               
               <div class="programlisting e437" xml:space="preserve">&lt;object type="array" elementType="Product" length="3" id="0"&gt;
                  &lt;object type="Product" id="1"&gt;
                  &lt;field name="name" type="string" value="Beans" /&gt;
                  &lt;field name="price" type="double" value="1.75" /&gt;
                  &lt;field name="grams" type="int" value="250" /&gt;
                  &lt;field name="reg" type="boolean" value="true" /&gt;
                  &lt;field name="categ" type="char" value="\u0042" /&gt;
                  &lt;/object&gt;
                  &lt;object type="Product" id="2"&gt;
                  &lt;field name="name" type="string" value="Rice" /&gt;
                  &lt;field name="price" type="double" value="3.89" /&gt;
                  &lt;field name="grams" type="int" value="750" /&gt;
                  &lt;field name="reg" type="boolean" value="true" /&gt;
                  &lt;field name="categ" type="char" value="\u0052" /&gt;
                  &lt;/object&gt;
                  &lt;object type="Product" id="3"&gt;
                  &lt;field name="name" type="string" value="Bread" /&gt;
                  &lt;field name="price" type="double" value="1.06" /&gt;
                  &lt;field name="grams" type="int" value="300" /&gt;
                  &lt;field name="reg" type="boolean" value="false" /&gt;
                  &lt;field name="categ" type="char" value="\u0048" /&gt;
                  &lt;/object&gt;
                  &lt;/object&gt;
               </div>
               
            </div>
            <div class="para e438">The root is an 
               <div class="code e439">object</div> element, which is the array of three 
               <div class="code e440">Product</div> objects. 
               The 
               <div class="code e441">elementType</div> attribute specifies the date type of the array, and the 
               <div class="code e442">length</div> attribute 
               indicates the number of elements in the array.
            </div>
            <div class="para e443">Each 
               <div class="code e444">product</div> in the array has 
               <div class="code e445">type</div> and 
               <div class="code e446">id</div> attributes, and five 
               <div class="code e447">field</div> 
               elements (children) to represent the five fields in a 
               <div class="code e448">Product</div> object: 
               <div class="code e449">name</div>, 
               <div class="code e450">price</div>, 
               
               <div class="code e451">grams</div>, 
               <div class="code e452">reg</div>, and 
               <div class="code e453">categ</div>. Every 
               <div class="code e454">field</div> element specifies the 
               <div class="code e455">name</div>, 
               
               <div class="code e456">type</div>, and 
               <div class="code e457">value</div> attributes.
            </div>
         </div><a name="ListsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e458">
            <div class="title e459">Lists</div>
            <div class="para e460">
               <div class="code e461">Lists</div> are similar to arrays in WOX. A 
               <div class="code e462">List</div> in WOX is the equivalent to 
               
               <div class="code e463">java.util.ArrayList</div> in Java, and 
               <div class="code e464">System.Collections.ArrayList</div> in C#, as can be seen in Table 1 
               previously shown. A 
               <div class="code e465">List</div> in WOX is represented in a simple form, and can be de-serialized either to Java or
               C#.
            </div>
            <div class="para e466">The XML representation of a list of 
               <div class="code e467">Course</div> objects is shown below. The 
               <div class="code e468">Course</div> class, which is 
               illustrated in 
               <div class="xref e469" linkend="FigCourseClass"></div>, has three fields: 
               <div class="code e470">code</div> of type 
               <div class="code e471">int</div>, 
               <div class="code e472">name</div> of type 
               
               <div class="code e473">string</div>, and 
               <div class="code e474">term</div> of type 
               <div class="code e475">int</div>.
               
               <div class="programlisting e476" xml:space="preserve">&lt;object type="list" elementType="Object" length="3" id="0"&gt;
                  &lt;object type="Course" id="1"&gt;
                  &lt;field name="code" type="int" value="6756" /&gt;
                  &lt;field name="name" type="string" value="XML" /&gt;
                  &lt;field name="term" type="int" value="3" /&gt;
                  &lt;/object&gt;
                  &lt;object type="Course" id="2"&gt;
                  &lt;field name="code" type="int" value="9865" /&gt;
                  &lt;field name="name" type="string" value="DB" /&gt;
                  &lt;field name="term" type="int" value="2" /&gt;
                  &lt;/object&gt;
                  &lt;object type="Course" id="3"&gt;
                  &lt;field name="code" type="int" value="1134" /&gt;
                  &lt;field name="name" type="string" value="Java" /&gt;
                  &lt;field name="term" type="int" value="2" /&gt;
                  &lt;/object&gt;
                  &lt;/object&gt;
               </div>
               
            </div>
            <div class="figure e477" xml:id="FigCourseClass">
               <div class="title e478">Course class</div>
               <div class="mediaobject e479">
                  <div class="imageobject e480">
                     <div class="metaBox e481"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1027').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1027" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e481'
                              </span><span class="metaAttribute">fileref='../../../vol7/graphics/Jaimez01/Jaimez01-007.jpg'
                              </span><span class="metaAttribute">format='jpg'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="caption e482">
                  <div class="para e483">Course class with three fields.</div>
               </div>
            </div>
            <div class="para e484">The root is an 
               <div class="code e485">object</div> element, which represents the list of three 
               <div class="code e486">Course</div> objects. Each 
               
               <div class="code e487">course</div> has its 
               <div class="code e488">type</div>, and 
               <div class="code e489">id</div> attributes, and its three 
               <div class="code e490">field</div> elements 
               (children): 
               <div class="code e491">code</div>, 
               <div class="code e492">name</div>, and 
               <div class="code e493">term</div>. Every 
               <div class="code e494">field</div> element specifies its 
               
               <div class="code e495">name</div>, 
               <div class="code e496">type</div>, and 
               <div class="code e497">value</div> attributes.
            </div>
         </div><a name="MapsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e498">
            <div class="title e499">Maps</div>
            <div class="para e500">A 
               <div class="code e501">Map</div> is an object that maps keys to values. A map cannot contain duplicate keys, and each
               key can map 
               to at most one value. A 
               <div class="code e502">Map</div> in WOX is the equivalent to 
               <div class="code e503">java.util.HashMap</div> in Java, and 
               
               <div class="code e504">System.Collections.Hashtable</div> in C#, as can be seen in Table 1 previously shown. A 
               <div class="code e505">Map</div> in WOX 
               is represented in a simple form, and can be de-serialized either to Java or C#.
            </div>
            <div class="para e506">The XML representation of a map of 
               <div class="code e507">Course</div> objects is shown below. The 
               <div class="code e508">Course</div> class, 
               which is illustrated in 
               <div class="xref e509" linkend="FigCourseClass"></div>, has three fields: 
               <div class="code e510">code</div> of type 
               <div class="code e511">int</div>, 
               <div class="code e512">name</div> of type 
               
               <div class="code e513">string</div>, and 
               <div class="code e514">term</div> of type 
               <div class="code e515">int</div>.
               
               <div class="programlisting e516" xml:space="preserve">&lt;object type="map" id="0"&gt;
                  &lt;object type="entry"&gt;
                  &lt;object type="int" value="1134" id="1" /&gt;
                  &lt;object type="Course" id="2"&gt;
                  &lt;field name="code" type="int" value="1134" /&gt;
                  &lt;field name="name" type="string" value="Java"/&gt;
                  &lt;field name="term" type="int" value="2" /&gt;
                  &lt;/object&gt;
                  &lt;/object&gt;
                  &lt;object type="entry"&gt;
                  &lt;object type="int" value="6756" id="3" /&gt;
                  &lt;object type="Course" id="4"&gt;
                  &lt;field name="code" type="int" value="6756" /&gt;
                  &lt;field name="name" type="string" value="XML" /&gt;
                  &lt;field name="term" type="int" value="3" /&gt;
                  &lt;/object&gt;
                  &lt;/object&gt;
                  &lt;object type="entry"&gt;
                  &lt;object type="int" value="9865" id="5" /&gt;
                  &lt;object type="Course" id="8"&gt;
                  &lt;field name="code" type="int" value="9865" /&gt;
                  &lt;field name="name" type="string" value="DB" /&gt;
                  &lt;field name="term" type="int" value="2" /&gt;
                  &lt;/object&gt;
                  &lt;/object&gt;
                  &lt;/object&gt;
               </div>
               
            </div>
            <div class="para e517">The root is an 
               <div class="code e518">object</div> element, which is the map of four 
               <div class="code e519">entry</div> objects. Each 
               
               <div class="code e520">entry</div> object has two children: the first object represents the key, and the second object
               is the value 
               associated with that key. The 
               <div class="code e521">key</div> is an object of type 
               <div class="code e522">int</div>, and the 
               <div class="code e523">value</div> is an 
               object of type 
               <div class="code e524">Course</div>. The XML representation of a 
               <div class="code e525">Course</div> object was previously explained.
            </div>
         </div><a name="ObjectreferencesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e526">
            <div class="title e527">Object references</div>
            <div class="para e528">In order to avoid duplicate objects in the XML representation of an object, the WOX
               serializer uses object references, 
               which are handled by using id and idref attributes. 
               <div class="xref e529" linkend="FigReferences"></div> shows an array of 
               <div class="code e530">Product</div> 
               objects with duplicates.
            </div>
            <div class="figure e531" xml:id="FigReferences">
               <div class="title e532">Object references</div>
               <div class="mediaobject e533">
                  <div class="imageobject e534">
                     <div class="metaBox e535"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1168').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1168" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e535'
                              </span><span class="metaAttribute">fileref='../../../vol7/graphics/Jaimez01/Jaimez01-008.jpg'
                              </span><span class="metaAttribute">format='jpg'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="caption e536">
                  <div class="para e537">Array of Product objects with duplicates.</div>
               </div>
            </div>
            <div class="para e538">The use of object references in the XML representation of this array of 
               <div class="code e539">Product</div> objects is illustrated 
               below. The 
               <div class="code e540">Product</div> class was introduced previously, which has five attributes: 
               <div class="code e541">name</div> 
               of type 
               <div class="code e542">string</div>, 
               <div class="code e543">price</div> of type 
               <div class="code e544">double</div>, 
               <div class="code e545">grams</div> of type 
               <div class="code e546">int</div>, 
               
               <div class="code e547">reg</div> of type 
               <div class="code e548">boolean</div>, and 
               <div class="code e549">categ</div> of type 
               <div class="code e550">char</div>.
               
               <div class="programlisting e551" xml:space="preserve">&lt;object type="array" elementType="Product" length="6" id="0"&gt;
                  &lt;object type="Product" id="1"&gt;
                  &lt;field name="name" type="string" value="Beans" /&gt;
                  &lt;field name="price" type="double" value="1.75" /&gt;
                  &lt;field name="grams" type="int" value="250" /&gt;
                  &lt;field name="reg" type="bool" value="true" /&gt;
                  &lt;field name="categ" type="char" value="\u0042" /&gt;
                  &lt;/object&gt;
                  &lt;object type="Product" id="2"&gt;
                  &lt;field name="name" type="string" value="Rice" /&gt;
                  &lt;field name="price" type="double" value="3.89" /&gt;
                  &lt;field name="grams" type="int" value="750" /&gt;
                  &lt;field name="reg" type="bool" value="true" /&gt;
                  &lt;field name="categ" type="char" value="\u0052" /&gt;
                  &lt;/object&gt;
                  &lt;object idref="1" /&gt;
                  &lt;object type="Product" id="3"&gt;
                  &lt;field name="name" type="string" value="Bread" /&gt;
                  &lt;field name="price" type="double" value="1.06" /&gt;
                  &lt;field name="grams" type="int" value="300" /&gt;
                  &lt;field name="reg" type="bool" value="false" /&gt;
                  &lt;field name="categ" type="char" value="\u0048" /&gt;
                  &lt;/object&gt;
                  &lt;object idref="3" /&gt;
                  &lt;object idref="1" /&gt;
                  &lt;/object&gt;
               </div>
               
            </div>
            <div class="para e552">The duplicated 
               <div class="code e553">Product</div> objects in the array are not duplicated in the XML representation that WOX 
               generates. They are referenced by using the 
               <div class="code e554">idref</div> attribute, which actually refers to the unique 
               
               <div class="code e555">id</div> given to every object. It can be observed that the XML representation of the array
               has the three 
               object references for the duplicated objects (two for product 
               <div class="code e556">p1</div> identified by 
               <div class="code e557">id="1"</div>, 
               and one for product 
               <div class="code e558">p3</div>, identified by 
               <div class="code e559">id="3"</div>.
            </div>
         </div>
      </div><a name="ConclusionsandFurtherWorkANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e560">
         <div class="title e561">Conclusions and Further Work</div>
         <div class="para e562">In this paper we have presented Web Objects in XML (WOX), an efficient and easy to
            use XML serializer for 
            interoperability between the C# and Java programming languages. The WOX serializer
            is a stand-alone library based on XML 
            which is able to serialize Java and C# objects to XML and back again. One of its main
            features is the generation of standard 
            XML, which is language independent. This means that if we serialize a Java object
            to XML, we could take the generated XML 
            to reconstruct the object back to C#; and viceversa. Our serialization approach does
            not need code annotations or any other 
            type of configuration from the user in order to serialize objects.
         </div>
         <div class="para e563">We have made our WOX serializer publicly available as an open-source project, which
            can be downloaded from 
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e564" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://woxserializer.sourceforge.net/</div>. As a consequence of this work, 
            the MSDN Magazine (a Microsoft Magazine) published an article, in its October 2010
            issue [Khan 2010], about interoperability between 
            Java and .NET, where they mention and recommend the use of our work for interoperability
            between applications. We consider this as a 
            valuable example that demonstrates that our work has had an impact on the MSDN community.
         </div>
         <div class="para e565">In this paper we described the main features and uses of the WOX serializer, and we
            also dedicated a section to give its implementation
            details. We showed the XML representation for the most representative structures and
            objects in both Java and C#, along with 
            some examples. We believe that the XML object representation that WOX uses is efficient,
            clean, easy to understand, and can 
            represent objects in other object-oriented programming languages. Further work is
            needed to develop our XML serializer in other 
            object-oriented programming languages, and allow interoperability among them. We have
            already started our analysis to develop 
            a WOX serializer for the C++ object-oriented programming language.
         </div>
      </div><a name="BibliographyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e566">
         <div class="title e567">Bibliography</div>
         <div class="bibliomixed e568" xml:id="mul301" xreflabel="Castor 2010">Castor. The Castor Project, 2010, available at 
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e569" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.castor.org/</div>.
         </div>
         <div class="bibliomixed e570" xml:id="mul302" xreflabel="SOAP 2003">WWW Consortium. Latest SOAP Versions, 2003, available at 
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e571" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/tr/soap/</div>.
         </div>
         <div class="bibliomixed e572" xml:id="mul303" xreflabel="Jaimez 2007">Jaimez, C., Lucas, S., Implementing a State-based Application Using Web Objects in
            XML,
            In Proceedings of the 9th International Symposium on Distributed Objects, Middleware,
            and Applications (DOA 2007), 
            Lecture Notes in Computer Science, Volume 4803/2007, pp. 577-594, 
            Vilamoura, Algarve, Portugal, 25-30 November 2007, available at
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e573" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.springerlink.com/content/u842871w0l551002/</div>.
         </div>
         <div class="bibliomixed e574" xml:id="mul304" xreflabel="Jaimez 2011">Jaimez, C., Lucas, S., Interoperability of Java and C# with Web Objects in XML,
            In Proceedings of the IADIS International Conference e-Society (ES 2011), pp. 518-522,
            
            Avila, Spain, 10-13 March 2011, available at
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e575" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.iadisportal.org/e-society-2011-proceedings</div>.
         </div>
         <div class="bibliomixed e576" xml:id="mul305" xreflabel="JAXB 2010">JAXB: The Java Architecture for XML Binding, 2010, available at 
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e577" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">https://jaxb.dev.java.net/</div>.
         </div>
         <div class="bibliomixed e578" xml:id="mul306" xreflabel="JSX 2002">JSX: Java Serialization to XML, 2002, available at 
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e579" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://jsx.org/</div>.
         </div>
         <div class="bibliomixed e580" xml:id="mul307" xreflabel="Khan 2010">Khan, I., Interoperability: Runtime Data Sharing Through an Enterprise Distributed
            Cache, 
            MSDN Magazine, October 2010, available at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e581" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://msdn.microsoft.com/en-us/magazine/gg232763.aspx</div>.
         </div>
         <div class="bibliomixed e582" xml:id="mul308" xreflabel="Koala 1998">Koala XML serialization, 1998, available at 
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e583" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://old.koalateam.com/xml/serialization/</div>.
         </div>
         <div class="bibliomixed e584" xml:id="mul309" xreflabel="Winer 1999">Winer D. XML-RPC specification, 1999, available at 
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e585" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.xmlrpc.com/spec</div>.
         </div>
         <div class="bibliomixed e586" xml:id="mul310" xreflabel="XMOP 2000">XMOP: XML Metadata Object Persistence, 2000, available at 
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e587" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.openhealth.org/documents/xmop.htm/</div>.
         </div>
         <div class="bibliomixed e588" xml:id="mul311" xreflabel="XStream 2010">XStream: A Java Library to Serialize Objects to XML, 2010, available at 
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e589" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://xstream.codehaus.org/index.html/</div>.
         </div>
      </div>
   </div>
</div>