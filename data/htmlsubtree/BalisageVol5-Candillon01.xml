<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#XQueryDesignPatternsANCHOR" name="XQueryDesignPatternsTOC">XQuery Design Patterns</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#RunningExample:AnAtomPubApplicationANCHOR" name="RunningExample:AnAtomPubApplicationTOC">Running Example: An AtomPub Application</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ChainofResponsibilityANCHOR" name="ChainofResponsibilityTOC">Chain of Responsibility</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#DescriptionANCHOR" name="DescriptionTOC">Description</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ImplementationANCHOR" name="ImplementationTOC">Implementation</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ImplementationConsiderationsANCHOR" name="ImplementationConsiderationsTOC">Implementation Considerations</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ConclusionANCHOR" name="ConclusionTOC">Conclusion</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#TranslatorANCHOR" name="TranslatorTOC">Translator</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#DescriptionANCHOR" name="DescriptionTOC">Description</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ImplementationANCHOR" name="ImplementationTOC">Implementation</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ImplementationConsiderationsANCHOR" name="ImplementationConsiderationsTOC">Implementation Considerations</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ConclusionANCHOR" name="ConclusionTOC">Conclusion</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#StrategyANCHOR" name="StrategyTOC">Strategy</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#DescriptionANCHOR" name="DescriptionTOC">Description</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ImplementationANCHOR" name="ImplementationTOC">Implementation</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ImplementationConsiderationsANCHOR" name="ImplementationConsiderationsTOC">Implementation Considerations</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ConclusionANCHOR" name="ConclusionTOC">Conclusion</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ObserverANCHOR" name="ObserverTOC">Observer</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#DescriptionANCHOR" name="DescriptionTOC">Description</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ImplementationANCHOR" name="ImplementationTOC">Implementation</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ImplementationConsiderationsANCHOR" name="ImplementationConsiderationsTOC">Implementation Considerations</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ConclusionANCHOR" name="ConclusionTOC">Conclusion</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#Conclusion&amp;OutlookANCHOR" name="Conclusion&amp;OutlookTOC">Conclusion &amp; Outlook</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BibliographyANCHOR" name="BibliographyTOC">Bibliography</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">atompub-client:post</div>
         <div class="singletermTERMS">atompub-client:post()</div>
         <div class="singletermTERMS">apply</div>
         <div class="singletermTERMS">apply-feed</div>
         <div class="singletermTERMS">apply-entry</div>
         <div class="singletermTERMS">atompub:post</div>
         <div class="singletermTERMS">atom:link</div>
         <div class="singletermTERMS">AtomPub/chain_of_responsibility.xq</div>
         <div class="singletermTERMS">Added flexibility:</div>
         <div class="singletermTERMS">AtomPub/translator.xq</div>
         <div class="singletermTERMS">AtomPub/strategy.xq</div>
         <div class="singletermTERMS">AtomPub/observer.xq</div>
         <div class="singletermTERMS">An XML Query Language</div>
         <div class="singletermTERMS">August 3 - 6, 2010</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">basic</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2010</div>
         <div class="singletermTERMS">Brantner</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">create-strategy</div>
         <div class="singletermTERMS">create</div>
         <div class="singletermTERMS">Communication and Teaching</div>
         <div class="singletermTERMS">Client:</div>
         <div class="singletermTERMS">Consideration 1:</div>
         <div class="singletermTERMS">Consideration 2:</div>
         <div class="singletermTERMS">Consideration 3:</div>
         <div class="singletermTERMS">ConcreteStrategy:</div>
         <div class="singletermTERMS">ContextFunction:</div>
         <div class="singletermTERMS">Context:</div>
         <div class="singletermTERMS">Collection Store:</div>
         <div class="singletermTERMS">Consideration 4:</div>
         <div class="singletermTERMS">C# design patterns: a tutorial</div>
         <div class="singletermTERMS">Candillon</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">Documentation</div>
         <div class="singletermTERMS">dennis.knochenwefel@28msec.com</div>
         <div class="singletermTERMS">Dennis</div>
         <div class="singletermTERMS">Design Patterns</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">Examples of XML Query In Action</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
         <div class="singletermTERMS">function(xs:string, schema-element(atom:entry))</div>
         <div class="singletermTERMS">function(schema-element(atom:entry)) as item()*</div>
         <div class="singletermTERMS">File System Store:</div>
         <div class="singletermTERMS">Flexibility:</div>
         <div class="singletermTERMS">Functional logic design patterns</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
         <div class="singletermTERMS">get-feed</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">http-auth:basic</div>
         <div class="singletermTERMS">http-client:send-request()</div>
         <div class="singletermTERMS">http-auth:basic()</div>
         <div class="singletermTERMS">Handler:</div>
         <div class="singletermTERMS">HTTP Client Module</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">if..then..else</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
         <div class="singletermTERMS">Java design patterns: a tutorial</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
         <div class="singletermTERMS">Knochenwefel</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">local:post-entry</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">match</div>
         <div class="singletermTERMS">match-feed</div>
         <div class="singletermTERMS">match-entry</div>
         <div class="singletermTERMS">matthias.brantner@28msec.com</div>
         <div class="singletermTERMS">Matthias</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">Native xquery processing in oracle xmldb</div>
         <div class="singletermTERMS">Native XML Support in db2 Universal Database</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">on-post</div>
         <div class="singletermTERMS">Observer:</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">Reusable Software and Design</div>
         <div class="singletermTERMS">Request:</div>
         <div class="singletermTERMS">Reduced coupling:</div>
         <div class="singletermTERMS">REST Store:</div>
         <div class="singletermTERMS">Reusability:</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">send-request</div>
         <div class="singletermTERMS">store:create</div>
         <div class="singletermTERMS">schema-element(atom:entry)</div>
         <div class="singletermTERMS">Strategy:</div>
         <div class="singletermTERMS">Subject:</div>
         <div class="singletermTERMS">Sausalito Developer Guide</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">transform</div>
         <div class="singletermTERMS">tweet-entry</div>
         <div class="singletermTERMS">Template:</div>
         <div class="singletermTERMS">The Definitive Guide to Berkeley DB XML</div>
         <div class="singletermTERMS">The Atom Publishing Protocol</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
         <div class="singletermTERMS">Use Case 1:</div>
         <div class="singletermTERMS">Use Case 2:</div>
         <div class="singletermTERMS">Use Case 3:</div>
         <div class="singletermTERMS">Use Case 4:</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">xhtml-template</div>
         <div class="singletermTERMS">XQuery Update Facility 1.0</div>
         <div class="singletermTERMS">XQuery Scripting Extension 1.0</div>
         <div class="singletermTERMS">XQuery and XPath Full Text 1.0</div>
         <div class="singletermTERMS">XQuery Data Definition Facility</div>
         <div class="singletermTERMS">XQuery</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="XQueryDesignPatternsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.2">
      <div class="title e1">XQuery Design Patterns</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2010</div>
            <div class="confdates e5">August 3 - 6, 2010</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">Design patterns are widely used inside the object-oriented community.
               They are proven mature and reusable solutions that facilitate the development of modules
               with minimal coupling.
               Moreover, design patterns are also high-level constructs that contribute to improve
               the communication between developers.
               
            </div>
            <div class="para e8">Nowadays, XQuery and its family of specifications are used beyond just querying XML
               collections and documents.
               XQuery is more and more used as a multi-paradigm, fully-fledged programming language.
               The aim of this paper is (1) to motivate the need for XQuery design patterns using
               a real-world example application and
               (2) to explore the existence of general design solutions to solve recurring problems
               in large-scale XQuery applications.
               
            </div>
         </div>
         <div class="author e9">
            <div class="personname e10">
               <div class="firstname e11">William</div>
               <div class="surname e12">Candillon</div>
            </div>
            <div class="personblurb e13">
               <div class="para e14">William Candillon is a software engineer at 28msec. His focus is on the development
                  of large scale web applications in XQuery. William recently graduated from Telecom
                  Lille 1 in France. His final year project was about XQuery Design Patterns.
               </div>
            </div>
            <div class="email e15">william.candillon@28msec.com</div>
            <div class="affiliation e16">
               <div class="orgname e17">28msec Inc.</div>
            </div>
         </div>
         <div class="author e18">
            <div class="personname e19">
               <div class="firstname e20">Matthias</div>
               <div class="surname e21">Brantner</div>
            </div>
            <div class="personblurb e22">
               <div class="para e23">Matthias Brantner is the chief architect of 28msec, a US-based startup that delivers
                  an XQuery in the cloud implementation. He studied Information Systems at the University
                  of Mannheim in Germany from 1999 until 2004. In 2007, he acquired a PhD from the University
                  of Mannheim, based on his research on rewriting declarative query languages. Matthias
                  has published several papers on XML query processing and co-developed one of the first
                  research native XML databases.
               </div>
            </div>
            <div class="email e24">matthias.brantner@28msec.com</div>
            <div class="affiliation e25">
               <div class="orgname e26">28msec Inc.</div>
            </div>
         </div>
         <div class="author e27">
            <div class="personname e28">
               <div class="firstname e29">Dennis</div>
               <div class="surname e30">Knochenwefel</div>
            </div>
            <div class="personblurb e31">
               <div class="para e32">Dennis Knochenwefel is a Software Architect at 28msec Inc. Dennis joined 28msec in
                  2007 after finishing his combined degree in Business Administration and Computer Science
                  at the University of Mannheim, Germany. Already whilst studying, Dennis was eagerly
                  interested in XML-related technologies like XQuery, XSL, or XPath. He is an "IBM Certified
                  Solution Developer XML 1.1 and Related Technologies" and was awarded a grant from
                  the Karl-Steinbuch-Stipendium in 2006 for implementing an XQuery based XML messaging
                  prototype. Currently, he is a keen developer of 28msec's Sausalito development team
                  implementing the scalable XQuery Web Application server Sausalito.
               </div>
            </div>
            <div class="email e33">dennis.knochenwefel@28msec.com</div>
            <div class="affiliation e34">
               <div class="orgname e35">28msec Inc.</div>
            </div>
         </div>
         <div class="legalnotice e36">
            <div class="para e37">Copyright © 2006-2010 28msec Inc.</div>
         </div>
         <div class="keywordset e38" role="author">
            <div class="keyword e39">XQuery</div>
            <div class="keyword e40">Design Patterns</div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e41" xml:id="introduction" xreflabel="1">
         <div class="title e42">Introduction</div>
         <div class="para e43">During the last decade, design patterns have become increasingly popular as general
            and reusable solutions to commonly occurring software design problems in the object-oriented
            community. 
            Nowadays, almost every developed application, component, or API written in an object-oriented
            language is built using design patterns (e.g. [
            <div class="xref e44" linkend="bib01"></div>, 
            <div class="xref e45" linkend="bib02"></div>]).
            Such patterns improve software development in the following perspectives [
            <div class="xref e46" linkend="bib03"></div>]:
            
            <div class="itemizedlist e47">
               <div class="listitem e48">
                  <div class="para e49">
                     <div class="emphasis e50" role="bold">Reusable Software and Design</div>: Design Patterns are often key drivers to provide better encapsulation and reduce
                     coupling between software components.
                     As a consequence, software exhibiting design patterns is more reusable, flexible,
                     and extensible.
                  </div>
               </div>
               <div class="listitem e51">
                  <div class="para e52">
                     <div class="emphasis e53" role="bold">Documentation</div>: Using the name of a pattern in software documentation allows developers to recognize/remember
                     the structure and design of an API instantly.
                  </div>
               </div>
               <div class="listitem e54">
                  <div class="para e55">
                     <div class="emphasis e56" role="bold">Communication and Teaching</div>: Design patterns constitute a common language to improve the communication between
                     software designers and analysts. Additionally, an established vocabulary eases discussions
                     between developers with a different programming language background.
                  </div>
               </div>
            </div>
            
         </div>
         <div class="para e57">Although, being widely accepted and applied within the object-oriented community,
            design patterns have rarely been evaluated outside of this community. 
            For example, in the functional world they have never been evaluated on a complex application
            programming level.
            In "Functional Logic Design Patterns" [
            <div class="xref e58" linkend="bib05"></div>] design patterns have been evaluated within a functional language to solve specific
            problems on a very low level; whereas [
            <div class="xref e59" linkend="bib06"></div>] discusses on a meta level. 
            From this perspective, the fear of Tom DeMarco from 1996 has been proven reasonable:
            
            <div class="popupBox e60">
               <div class="popupLabel" onmouseover="$('#d1e101').show('1000');" onmouseout="$('#d1e101').hide('1000');">[ blockquote ]</div>
               <div id="d1e101" style="display: none;">
                  <div class="blockquote">
                     <div class="para e61">"Because Design Patterns bills itself as being concerned with object oriented software
                        alone, I fear that software developers outside the object community may ignore it.
                        This would be a shame. [...] All software designers use patterns; understanding better
                        the reusable abstractions of our work can only make us better at it." [
                        <div class="xref e62" linkend="bib04"></div>]
                     </div>
                  </div>
               </div>
            </div>
            
         </div>
         <div class="para e63">XQuery [
            <div class="xref e64" linkend="bib07"></div>] -- a functional and declarative language -- has been designed by the World Wide
            Web Consortium as a general purpose XML processing language, useful in a variety of
            architectures and environments.
            Although, in the beginning, XQuery was mainly used to query XML data within database
            systems (e.g. [
            <div class="xref e65" linkend="bib20"></div>]), it has more and more become a complete application programming language.
            One such scenario in which XQuery is used as a full-fledged programming language is
            called the end-to-end XML architecture.
            In such an architecture, XML is the primary form in which information is stored and
            processed.
            This information is persistent across successive invocations of programs, and XQuery
            is the primary language for accessing this information for search, filter, transform,
            update, and for writing more complex application workflows.
            Moreover, in such programs, XQuery has also become fluent with web entities such as
            web services, Atom, JSON, HTTP messages, and common authentication techniques such
            as OpenID or OAuth.
            Together with its extension specifications XQuery Update [
            <div class="xref e66" linkend="bib11"></div>], XQuery Scripting [
            <div class="xref e67" linkend="bib12"></div>], and XQuery Full Text [
            <div class="xref e68" linkend="bib13"></div>], XQuery nowadays plays in the same league as general purpose programming languages
            such as Java, Python, or Ruby while keeping its edge in terms of expressiveness and
            first-class support for dealing with web resources.
         </div>
         <div class="para e69">Overall, these recent changes are directly related to the growth of complex XQuery
            applications [
            <div class="xref e70" linkend="bib14"></div>].
            One example of such an application is developed by a customer of the company the authors
            work for.
            This application is an Enterprise Resource Planning (ERP) application entirely written
            in XQuery on top of the Sausalito Web Application Server [
            <div class="xref e71" linkend="bib15"></div>].
            This application consists of 28.000 lines of XQuery code implemented in 135 XQuery
            modules.
            
            By auditing this application, we found common symptoms in both the codebase and the
            development processes:
            
            <div class="itemizedlist e72">
               <div class="listitem e73">
                  <div class="para e74">Modules have strong coupling between each other. They are based on complex collaborations
                     that are reducing their reusability in other frameworks or applications. In most cases,
                     extending or composing a module would require intrusive code refactoring.
                  </div>
               </div>
               <div class="listitem e75">
                  <div class="para e76">Some recurring structural designs are referred to using a different vocabulary. Even
                     though they can be looked at as identical from an abstract point of view.
                     This increases the entry barrier into the codebase significantly.
                  </div>
               </div>
            </div>
            
         </div>
         <div class="para e77">
            As described at the beginning of this section, such problems have been solved in the
            object-oriented community by developing and applying design patterns.
            Encouraged by this observation, we decided to start using design patterns to overcome
            the misfits described above.
            Besides motivating the use of design patterns for XQuery, the contributions of this
            paper are 
            (1) to identify misfits in a real-world application and (2) to show how these misfits
            can be remedied by using design patterns.
            Specifically, we present four design patterns and describe how each of them solves
            one specific design problem in our (running) example application.
         </div>
         <div class="para e78">The remainder of this paper is structured as follows.
            In Section 
            <div class="xref e79" linkend="application"></div>, we describe the use cases for our running example.
            This example will be used to point out design problems that exist in real world applications.
            In each of the following four sections (i.e. Sections 
            <div class="xref e80" linkend="cor"></div>, 
            <div class="xref e81" linkend="pm"></div>, 
            <div class="xref e82" linkend="strategy"></div>, and 
            <div class="xref e83" linkend="observer"></div>), we present one design pattern to solve one of the identified design problems.
            Section 
            <div class="xref e84" linkend="conclusion"></div> concludes the paper and gives an outlook on future work.
         </div>
      </div><a name="RunningExample:AnAtomPubApplicationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e85" xml:id="application" xreflabel="2">
         <div class="title e86">Running Example: An AtomPub Application</div>
         <div class="para e87">The Atom Publishing Protocol (AtomPub; see 
            <div class="xref e88" linkend="bib16"></div>) is an HTTP-based protocol for creating and updating resources on the web.
            Lately, it became widely used to implement APIs for cloud services.
            The most prominent example is probably the Google Data Protocol
            <div class="popupBox e89">
               <div class="popupLabel" onmouseover="$('#d1e162').show('1000');" onmouseout="$('#d1e162').hide('1000');">[ footnote ]</div>
               <div id="d1e162" style="display: none;">
                  <div class="footnote">
                     <div class="para e90">Google Data Protocol: 
                        <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e91" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://code.google.com/apis/gdata/docs/developers-guide.html</div>.
                     </div>
                  </div>
               </div>
            </div>.
            AtomPub is built up on the Atom Syndication Format which is an XML representation
            of arbitrary collection of resources (e.g. web feeds).
            Hence, XQuery is a natural fit for implementing AtomPub-based (cloud) services.
         </div>
         <div class="para e92">We use an AtomPub application in order to present design patterns for XQuery.
            This application is particularly well-suited for many (common) patterns because most
            of it's components need to be reusable by other components of the application.
            Moreover, leveraging existing libraries (e.g. for HTTP communication and authentication)
            requires some careful design decisions to be made.
            
            Essentially, the AtomPub application consists of two major components: a client and
            a server.
            
            The client is an XQuery application which should implement the following two basic
            use cases: 
            
            <div class="itemizedlist e93">
               <div class="listitem e94">
                  <div class="para e95">
                     <div class="emphasis e96" role="bold">Use Case 1:</div> Send an HTTP request to create an Atom entry.
                  </div>
               </div>
               <div class="listitem e97">
                  <div class="para e98">
                     <div class="emphasis e99" role="bold">Use Case 2:</div> Send an HTTP request to retrieve a particular Atom entry. The resulting entry should
                     be transformed into HTML.
                  </div>
               </div>
            </div>
            
            The server is an application which is running within an XQuery-enabled application
            server.
            That is, its functions are triggered by HTTP requests.
            Those functions have access to the content of the HTTP request using a (HTTP) module
            provided by the application server.
            The server acts as a counterpart to the client requests. 
            Specifically, it should be able to accomplish the following two use cases:
            
            
            <div class="itemizedlist e100">
               <div class="listitem e101">
                  <div class="para e102">
                     <div class="emphasis e103" role="bold">Use Case 3:</div> Receive an AtomPub entry and store it. It should be possible to store entries in
                     arbitrary locations such as the file system or XQuery collections.
                  </div>
               </div>
               <div class="listitem e104">
                  <div class="para e105">
                     <div class="emphasis e106" role="bold">Use Case 4:</div> Post a message on Twitter for each entry created in Use Case 3.
                  </div>
               </div>
            </div>
            
         </div>
         <div class="para e107">In the next sections of the paper, we show how the design challenges of implementing
            the described use cases can be solved leveraging design patterns.
            We start with Use Cases 1 and 2 of the client in Sections 
            <div class="xref e108" linkend="cor"></div> and 
            <div class="xref e109" linkend="pm"></div>, respectively.
            After this, Sections 
            <div class="xref e110" linkend="strategy"></div> and 
            <div class="xref e111" linkend="observer"></div> describe the design and implementation of Use Cases 3 and 4.
            The following table depicts the mapping of use cases, sections, required XQuery features,
            and the names of the pattern that is used to implement the feature in question.
            
            <div class="table e112" border="1">
               <div class="caption e113">
                  <div class="para e114">Mapping between use cases, sections, patterns, and required XQuery features.</div>
               </div>
               <div class="metaBox e115"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e209').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e209" class="metaSource" style="display:none;">                
                     &lt;col<span class="metaAttribute">align='center'
                        </span><span class="metaAttribute">class='e115'
                        </span><span class="metaAttribute">span='1'
                        </span><span class="metaAttribute">valign='top'
                        </span><span class="metaAttribute">width='15%'
                        </span>
                     &gt;
                     
                  </div>
               </div>
               <div class="metaBox e116"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e210').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e210" class="metaSource" style="display:none;">                
                     &lt;col<span class="metaAttribute">align='center'
                        </span><span class="metaAttribute">class='e116'
                        </span><span class="metaAttribute">span='1'
                        </span><span class="metaAttribute">valign='top'
                        </span><span class="metaAttribute">width='10%'
                        </span>
                     &gt;
                     
                  </div>
               </div>
               <div class="metaBox e117"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e211').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e211" class="metaSource" style="display:none;">                
                     &lt;col<span class="metaAttribute">align='center'
                        </span><span class="metaAttribute">class='e117'
                        </span><span class="metaAttribute">span='1'
                        </span><span class="metaAttribute">valign='top'
                        </span>
                     &gt;
                     
                  </div>
               </div>
               <div class="metaBox e118"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e212').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e212" class="metaSource" style="display:none;">                
                     &lt;col<span class="metaAttribute">align='center'
                        </span><span class="metaAttribute">class='e118'
                        </span><span class="metaAttribute">span='1'
                        </span><span class="metaAttribute">valign='top'
                        </span>
                     &gt;
                     
                  </div>
               </div>
               <div class="metaBox e119"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e213').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e213" class="metaSource" style="display:none;">                
                     &lt;col<span class="metaAttribute">align='left'
                        </span><span class="metaAttribute">class='e119'
                        </span><span class="metaAttribute">span='1'
                        </span><span class="metaAttribute">valign='top'
                        </span>
                     &gt;
                     
                  </div>
               </div>
               <div class="thead e120">
                  <div class="tr e121" valign="top">
                     <div class="th e122"></div>
                     <div class="th e123">Section</div>
                     <div class="th e124">Pattern Name</div>
                     <div class="th e125">Language</div>
                     <div class="th e126">Description</div>
                  </div>
               </div>
               <div class="tbody e127">
                  <div class="tr e128">
                     <div class="td e129">Use Case 1</div>
                     <div class="td e130">
                        <div class="xref e131" linkend="cor"></div>
                     </div>
                     <div class="td e132">Chain of Responsibility</div>
                     <div class="td e133">XQuery 1.0</div>
                     <div class="td e134">Send an HTTP request to create an Atom entry.</div>
                  </div>
                  <div class="tr e135">
                     <div class="td e136">Use Case 2</div>
                     <div class="td e137">
                        <div class="xref e138" linkend="pm"></div>
                     </div>
                     <div class="td e139">Translator</div>
                     <div class="td e140">XQuery 1.1</div>
                     <div class="td e141">Transforms an Atom entry to XHTML.</div>
                  </div>
                  <div class="tr e142">
                     <div class="td e143">Use Case 3</div>
                     <div class="td e144">
                        <div class="xref e145" linkend="strategy"></div>
                     </div>
                     <div class="td e146">Strategy</div>
                     <div class="td e147">XQuery 1.1</div>
                     <div class="td e148">Store an Atom entry on the server.</div>
                  </div>
                  <div class="tr e149">
                     <div class="td e150">Use Case 4</div>
                     <div class="td e151">
                        <div class="xref e152" linkend="observer"></div>
                     </div>
                     <div class="td e153">Observer</div>
                     <div class="td e154">XQuery 1.1 + Scripting</div>
                     <div class="td e155">Advertise new Atom entries on Twitter.</div>
                  </div>
               </div>
            </div>
            
         </div>
         <div class="para e156">The XQuery application can be downloaded from 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e157" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://patterns.28msec.com</div>.
            Each use case is ready to be executed, i.e. the package contains one XQuery main module
            for each use case.
            
            <div class="popupBox e158">
               <div class="popupLabel" onmouseover="$('#d1e276').show('1000');" onmouseout="$('#d1e276').hide('1000');">[ footnote ]</div>
               <div id="d1e276" style="display: none;">
                  <div class="footnote">
                     <div class="para e159">Please note that the implementation requires features that might not be present in
                        every XQuery processor (i.e.\ XQuery Scripting, Function Items, and File module).
                        For example, the latest SVN revision (&gt; 8071) of the Zorba XQuery Processor (
                        <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e160" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.zorba-xquery.com</div>) is capable of running all examples.
                     </div>
                  </div>
               </div>
            </div>
            
         </div>
      </div><a name="ChainofResponsibilityANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e161" xml:id="cor" xreflabel="3">
         <div class="title e162">Chain of Responsibility</div>
         <div class="para e163">In this section, we discuss the implementation of Use Case 1.
            That is, we want to develop an XQuery program that publishes an Atom entry to an AtomPub
            enabled server.
            Since not everybody is allowed to publish an entry, the AtomPub server requires authentication
            using the basic HTTP authentication mechanism.  
            The AtomPub protocol specifies that an entry is published by sending an HTTP POST
            request to the server.
            The payload of this request contains the entry to be published.
            The basic HTTP authentication requires the username and password to be part of the
            HTTP-Header.
         </div>
         <div class="para e164">For making HTTP calls in an XQuery program, we decided to rely on the (de-facto standard)
            EXPath HTTP Client (see 
            <div class="xref e165" linkend="bib17"></div>).
            This HTTP Client works by passing an XDM element describing the request to a function
            called 
            <div class="code e166">send-request</div>.
            For example, a program that is sending a HTTP GET request to 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e167" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.example.com</div> could look as follows:
            
            <div class="programlisting e168" xml:space="preserve">
               http-client:send-request(
               &lt;http:request href="http://www.example.com/" method="GET" /&gt;
               )
               
            </div>
            
         </div>
         <div class="para e169">In order to implement our first use case, the AtomPub client could be implemented
            with a hard wired dependency between the module that is responsible for configuring
            and sending the HTTP request and the module responsible for the authentication.
            However, this would clearly make the AtomPub client less flexible and reusable in
            other scenarios.
            For example, changing the authentication mechanism to something like OAuth or OpenID
            would require intrusive changes to the AtomPub module or would result in another highly
            redundant codebase.
         </div>
         <div class="para e170">To improve the flexibility and reusability of our application, we specify the following
            two design requirements.
            The AtomPub client should be decoupled from 
            
            <div class="itemizedlist e171">
               <div class="listitem e172">
                  <div class="para e173">any authentication mechanism it may collaborate with at runtime.</div>
               </div>
               <div class="listitem e174">
                  <div class="para e175">a particular implementation of the transport layer, i.e. the HTTP client.</div>
               </div>
            </div>
            
         </div>
         <div class="para e176">In order to meet these requirements, we have designed the AtomPub client using the
            Chain of Responsibility pattern [
            <div class="xref e177" linkend="bib03"></div>].
            The intent of this pattern is as follows:
            
            <div class="popupBox e178">
               <div class="popupLabel" onmouseover="$('#d1e317').show('1000');" onmouseout="$('#d1e317').hide('1000');">[ blockquote ]</div>
               <div id="d1e317" style="display: none;">
                  <div class="blockquote">
                     <div class="para e179">Reduce coupling between different modules by moving nested dependencies outside of
                        a module and integrate dependent functions consecutively into a chain. Pass an item
                        along the chain and give each of these functions the chance to manipulate or process
                        the item.
                     </div>
                  </div>
               </div>
            </div>
            
         </div><a name="DescriptionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e180">
            <div class="title e181">Description</div>
            <div class="para e182">Applying the Chain of Responsibility to our use case results in making a separation
               between the code that is responsible for sending the request and each of the functions
               configuring the request (i.e. setup the request for AtomPub and putting authentication
               information in the request).
               In order to do so, we identify the following participants (also see Fig. 
               <div class="xref e183" linkend="cor-structure"></div>): 
               
               <div class="itemizedlist e184">
                  <div class="listitem e185">
                     <div class="para e186">
                        <div class="emphasis e187" role="bold">Request:</div> The XDM instance representation of an HTTP request.
                     </div>
                  </div>
                  <div class="listitem e188">
                     <div class="para e189">
                        <div class="emphasis e190" role="bold">Handler:</div> Function in the chain which is configuring or processing the request instance.
                     </div>
                  </div>
                  <div class="listitem e191">
                     <div class="para e192">
                        <div class="emphasis e193" role="bold">Client:</div>  Initiates the request, passes it to each function in the chain, and returns the
                        result.
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e194">Spreading the functionality among the three participants allows us to easily rewrite
               the client, for example to use a different authentication strategy.
               In particular, we avoid that different library modules "know about" each other, i.e.
               they are not imported into each other.
               
            </div>
            <div class="figure e195" floatstyle="1" xml:id="cor-structure" xreflabel="1">
               <div class="mediaobject e196">
                  <div class="imageobject e197">
                     <div class="metaBox e198"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e350').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e350" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e198'
                              </span><span class="metaAttribute">fileref='../../../vol5/graphics/Candillon01/Candillon01-001.png'
                              </span><span class="metaAttribute">format='png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
                  <div class="caption e199">
                     <div class="para e200">Structure of the Chain of Responsibility.</div>
                  </div>
               </div>
            </div>
         </div><a name="ImplementationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e201">
            <div class="title e202">Implementation</div>
            <div class="para e203">In this section, we describe one possible implementation of our use case by applying
               the Chain of Responsibility pattern.
               
               <div class="popupBox e204">
                  <div class="popupLabel" onmouseover="$('#d1e359').show('1000');" onmouseout="$('#d1e359').hide('1000');">[ footnote ]</div>
                  <div id="d1e359" style="display: none;">
                     <div class="footnote">
                        <div class="para e205">The code presented in this section can be found within 
                           <div class="emphasis e206" role="ital">AtomPub/chain_of_responsibility.xq</div>.
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e207">First, we start with a description of the implementation of the client which is implemented
               in a function called 
               <div class="code e208">local:post-entry</div>.
               After this, we describe the two functions 
               <div class="code e209">atompub-client:post</div> and 
               <div class="code e210">http-auth:basic</div>.
               Each of these functions takes as first parameter the request item which is prepared
               in the body of each function.
               
               <div class="programlisting e211" xml:space="preserve">
                  (:
                  : This function initializes the HTTP request, passes it to three
                  : chained functions (atompub-client:post, http-auth:basic, and 
                  : httpclient:send-request), and returns the result of the last 
                  : invoked function.
                  :)
                  declare sequential function local:post-entry() as item()*
                  {
                  (: Initialize the request :)
                  declare $request  := validate { 
                  &lt;http:request href="http://atompubtest.my28msec.com/blog/feed"
                  method="GET" /&gt;
                  };
                  (: Update the request according to the AtomPub protocol
                  : $local:entry is the Atom entry to be sent 
                  :)
                  atompub-client:post($request, $local:entry);
                  (: Basic HTTP Authentication. :)
                  http-auth:basic($request, "Username", "Password");
                  (: Finally, send the request to the AtomPub server :)
                  http-client:send-request($request);
                  };
                  
               </div>
               
            </div>
            <div class="para e212">In the code snippet above, the HTTP request element (
               <div class="code e213">$request</div>) is declared and initialized containing the URL of the AtomPub server.
               This element is passed along the chain of functions 
               <div class="code e214">atompub-client:post</div> and 
               <div class="code e215">http-auth:basic</div> ending up in a call to the 
               <div class="code e216">http-client:send-request()</div> function.
               The latter function takes over the responsibility of executing the request.
               
               <div class="programlisting e217" xml:space="preserve">
                  (:
                  : AtomPub POST handler.
                  : Update the HTTP request according to the
                  : AtomPub protocol specification.
                  :)
                  declare updating function atompub-client:post(
                  $request as schema-element(http:request),
                  $entry   as schema-element(atom:entry))
                  {
                  replace value of node $request/@method with "POST",
                  
                  insert node &lt;http:body media-type="application/xml"
                  method="xml"&gt;{$entry}&lt;/http:body&gt;
                  as last into $request
                  };          
                  
               </div>
               
            </div>
            <div class="para e218">The function 
               <div class="code e219">atompub-client:post()</div> "massages" the request item (using XQuery update) according to the AtomPub specification.
               Specifically, this function makes sure that the HTTP request method is set to POST.
               
               Moreover, it configures the body of the HTTP request to contain the entry to be published.
            </div>
            <div class="para e220">After that, the 
               <div class="code e221">http-auth:basic()</div> function adds username and password attributes to the request and sets the authentication
               method to 
               <div class="code e222">basic</div>.
               
               <div class="programlisting e223" xml:space="preserve">
                  (:
                  : Basic HTTP Auth handler.
                  : Update the HTTP request according to the
                  : basic HTTP authentication specification.
                  :)
                  declare updating function http-auth:basic(
                  $request  as schema-element(http:request),
                  $username as xs:string,
                  $password as xs:string)
                  {
                  insert node (attribute username    { $username },
                  attribute password    { $password },
                  attribute auth-method { "basic" })
                  into $request
                  };          
                  
               </div>
               
            </div>
         </div><a name="ImplementationConsiderationsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e224">
            <div class="title e225">Implementation Considerations</div>
            <div class="para e226">In the implementation presented in the last section, we made some decisions in order
               to make the essence of the paper easier to understand and improve the readability
               of the code.
               Neither are these decisions mandatory for implementing Chain of Responsibility nor
               might they be optimal.
               Therefore this pattern can be implemented in XQuery 1.0.
               In this section, we discuss some alternative implementation aspects.
               
               <div class="itemizedlist e227">
                  <div class="listitem e228">
                     <div class="para e229">
                        <div class="emphasis e230" role="bold">Consideration 1:</div> The implementation of the client, chains the participating functions using XQuery
                        Scripting.
                        However, there are many ways to implement the chaining.
                        For example, the chain could be implemented using Continuation Passing Style or by
                        using a sequence of function items which are executed consecutively.
                     </div>
                  </div>
                  <div class="listitem e231">
                     <div class="para e232">
                        <div class="emphasis e233" role="bold">Consideration 2:</div> Another decision that we took in order to make the code more crisp is to implement
                        the participating functions (i.e. 
                        <div class="code e234">atompub-client:post</div> and 
                        <div class="code e235">http-auth:basic</div>) using the XQuery Update Facility.
                        Alternative implementations could copy and transform the request element and return
                        it as a result of the function.
                        In this case, the client needs to make sure that the returned element is passed as
                        an argument to the next function.
                     </div>
                  </div>
               </div>
               
            </div>
         </div><a name="ConclusionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e236">
            <div class="title e237">Conclusion</div>
            <div class="para e238">The Chain of Responsibility helped us to improve the flexibility and reusability of
               the modules involved to implement Use Case 1.
               As a result, we gained the following:
               
               <div class="itemizedlist e239">
                  <div class="listitem e240">
                     <div class="para e241">
                        <div class="emphasis e242" role="bold">Reduced coupling:</div> The AtomPub client has been decoupled from the HTTP Client and other optional modules
                        such as HTTP authentication, OAuth Client, or OpenID.
                     </div>
                  </div>
                  <div class="listitem e243">
                     <div class="para e244">
                        <div class="emphasis e245" role="bold">Added flexibility:</div> Any function in the chain can configure the request or even take over the responsibility
                        to process the request.
                        More than that, the code can effortlessly be reused in a different setting.
                        For example, a different authentication method could be used by replacing the 
                        <div class="code e246">http-auth:basic()</div> function with an appropriate function from a different authentication module.
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e247">Use Chain of Responsibility if
               
               <div class="itemizedlist e248">
                  <div class="listitem e249">
                     <div class="para e250">an execution process can be abstracted in a configurable XDM item, e.g. a request.</div>
                  </div>
                  <div class="listitem e251">
                     <div class="para e252">an execution process can be divided into different responsibilities.</div>
                  </div>
                  <div class="listitem e253">
                     <div class="para e254">different configuration settings can be freely combined.</div>
                  </div>
                  <div class="listitem e255">
                     <div class="para e256">you want to issue a request to one of several functions without specifying the receiver
                        explicitly.
                     </div>
                  </div>
               </div>
               
            </div>
         </div>
      </div><a name="TranslatorANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e257" xml:id="pm" xreflabel="4">
         <div class="title e258">Translator</div>
         <div class="para e259">
            	  In this section, we present the accomplishment of Use Case 2 (see Sec. 
            <div class="xref e260" linkend="application"></div>): retrieving an Atom feed and rendering it as an HTML page.
            Thanks to XQuery's expressiveness to deal with XML data, transforming an Atom feed
            into an HTML page is a straightforward operation.
            For example, one could easily come up with a function as follows:
            
            <div class="programlisting e261" xml:space="preserve">
               declare function to-xhtml:get-feed(
               $feed as schema-element(atom:feed))
               as element(xhtml:html)
               {
               let $title := $feed/atom:title
               return
               &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
               &lt;head&gt;
               &lt;title&gt;{$title}&lt;/title&gt;
               &lt;/head&gt;
               &lt;body&gt;
               &lt;h1&gt;{$title}&lt;/h1&gt;
               {for $entry in $feed/atom:entry
               return to-xhtml:get-entry($entry)}
               &lt;/body&gt;
               &lt;/html&gt;  
               };        
               
            </div>
            
            However, on the web, most feeds contain heterogeneous data (i.e. they contain elements
            from multiple different namespaces).
            The most prominent examples are Google's or Twitter's extensions (see 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e262" xlink:actuate="onRequest" xlink:href="http://tinyurl.com/gdata-format" xlink:show="new" xlink:type="simple">http://tinyurl.com/gdata-format</div> and 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e263" xlink:actuate="onRequest" xlink:href="http://tinyurl.com/twitter-format" xlink:show="new" xlink:type="simple">http://tinyurl.com/twitter-format</div>).
            Another example is shown in the following feed that contains instances of the GeoRSS
            Application Schema.
            
            <div class="programlisting e264" xml:space="preserve">
               &lt;?xml version="1.0" encoding="utf-8"?&gt;
               &lt;feed xmlns="http://www.w3.org/2005/Atom" 
               xmlns:georss="http://www.georss.org/georss"&gt;
               &lt;title&gt;Where is Waldo?&lt;/title&gt;
               &lt;link href="http://example.org/"/&gt;
               &lt;entry&gt;
               &lt;title&gt;Caecilienstrasse 5, 8032 Zurich, Switzerland&lt;/title&gt;
               &lt;link href="http://example.org/2009/09/09/atom01"/&gt;
               &lt;updated&gt;2009-08-17T07:02:32Z&lt;/updated&gt;
               &lt;georss:point&gt;45.256 -71.92&lt;/georss:point&gt;
               &lt;/entry&gt;
               &lt;/feed&gt;        
               
            </div>
            
         </div>
         <div class="para e265">
            Usually, the information contained in such feeds should be converted into HTML as
            well.
            Obviously, one could extend the 
            <div class="code e266">get-feed</div> function above by incorporating nested loops over elements in different namespaces.
            However, this is not desirable for several reasons:
            
            
            <div class="itemizedlist e267">
               <div class="listitem e268">
                  <div class="para e269">Having to transform a large number of heterogeneous elements will usually lead to
                     ''spaghetti code''.
                  </div>
               </div>
               <div class="listitem e270">
                  <div class="para e271">Interweaved code lowers the reusability.</div>
               </div>
               <div class="listitem e272">
                  <div class="para e273">The structure of a feed (i.e. which namespaces are actually contained in a feed),
                     might not be known in advance.
                  </div>
               </div>
            </div>
            
            For those reasons, it's clearly favorable to have ''ravioli code'', i.e. code that
            consists of loosely coupled components.
            Therefore, we have used the design pattern named Translator to implement Use Case
            2 
            <div class="xref e274" linkend="bib19"></div>.
            This pattern describes a functional organization that keeps the transformation functions
            loosely coupled.
            The ultimate goal of Translator is to bring the modular XSLT stylesheet paradigm into
            XQuery.
            The intent of Translator is defined as follows:
            
            <div class="popupBox e275">
               <div class="popupLabel" onmouseover="$('#d1e509').show('1000');" onmouseout="$('#d1e509').hide('1000');">[ blockquote ]</div>
               <div id="d1e509" style="display: none;">
                  <div class="blockquote">
                     <div class="para e276">Separate interpretations of heterogeneous elements 
                        <div class="xref e277" linkend="bib19"></div>. Translator brings XSLT programming paradigm into XQuery.
                     </div>
                  </div>
               </div>
            </div>
            
         </div><a name="DescriptionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e278">
            <div class="title e279">Description</div>
            <div class="para e280">
               Since the goal of Translator is to bring the XSLT programming paradigm into XQuery,
               the participants involved in this pattern have the same names and also have a similar
               semantics as their complements in XSLT.
               The participants involved are the following: 
               
               <div class="itemizedlist e281">
                  <div class="listitem e282">
                     <div class="para e283">
                        <div class="emphasis e284" role="bold">
                           <div class="code e285">apply</div> function: 
                        </div> The 
                        <div class="code e286">apply</div> function contains the code that does the transformation of an XDM instance if the
                        
                        <div class="code e287">match</div> function returned true.
                        The parameters of the 
                        <div class="code e288">apply</div> function are: (1) The XDM instance to transform, (2) the 
                        <div class="code e289">transform</div> function itself, and (3) the templates involved in the process.
                     </div>
                  </div>
                  <div class="listitem e290">
                     <div class="para e291">
                        <div class="emphasis e292" role="bold">
                           <div class="code e293">match</div> function: 
                        </div>This function decides whether an according 
                        <div class="code e294">apply</div> function should be executed given a selected XDM instance.
                     </div>
                  </div>
                  <div class="listitem e295">
                     <div class="para e296">
                        <div class="emphasis e297" role="bold">
                           <div class="code e298">transform</div> function: 
                        </div>The 
                        <div class="code e299">transform</div> function is driving the transformation process (i.e. calling 
                        <div class="code e300">match</div> and 
                        <div class="code e301">apply</div>.
                        It is invoked by the client.
                     </div>
                  </div>
                  <div class="listitem e302">
                     <div class="para e303">
                        <div class="emphasis e304" role="bold">Template: </div> A template is a sequence of two function items.
                        The first item is representing the 
                        <div class="code e305">match</div> and the second 
                        <div class="code e306">apply</div> function, respectively.
                     </div>
                  </div>
                  <div class="listitem e307">
                     <div class="para e308">
                        <div class="emphasis e309" role="bold">Client: </div>The client invokes the 
                        <div class="code e310">transform</div> function by providing the XDM instance to be transformed and a sequence of templates.
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e311">
               
               Figure 
               <div class="xref e312" linkend="pm-structure"></div> shows the dependencies between the participants for Translator applied to the GeoRSS
               example describe in the previous section.
               The figure illustrates that
               (1) only the Atom templates (
               <div class="code e313">apply</div> and 
               <div class="code e314">match</div> for Atom feeds and entries) need to know the Atom schema,
               (2) the template responsible for transforming GeoRSS only knows the GeoRSS schema,
               and
               (3) the 
               <div class="code e315">transform</div> function orchestrates the transformation process by invoking the function items of
               the templates.
               
            </div>
            <div class="figure e316" floatstyle="1" xml:id="pm-structure" xreflabel="2">
               <div class="mediaobject e317">
                  <div class="imageobject e318">
                     <div class="metaBox e319"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e601').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e601" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e319'
                              </span><span class="metaAttribute">fileref='../../../vol5/graphics/Candillon01/Candillon01-002.png'
                              </span><span class="metaAttribute">format='png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
                  <div class="caption e320">
                     <div class="para e321">Structure of Translator.</div>
                  </div>
               </div>
            </div>
            <div class="para e322">
               Figure 
               <div class="xref e323" linkend="pm-collaborations"></div> depicts this orchestration of the translation process.
               The client invokes the 
               <div class="code e324">transform</div> function passing the XDM instance and the templates as parameters.
               For each template, the 
               <div class="code e325">transform</div> function first executes the 
               <div class="code e326">match</div> function passing the current XDM instance as parameter.
               If the result of the invocation of 
               <div class="code e327">match</div> is true, then the 
               <div class="code e328">apply</div> function is invoked on this instance.
               Please note that the 
               <div class="code e329">apply</div> function itself may repeatably invoke the 
               <div class="code e330">transform</div> function to further transform nested structures.
               
            </div>
            <div class="figure e331" floatstyle="1" xml:id="pm-collaborations" xreflabel="3">
               <div class="mediaobject e332">
                  <div class="imageobject e333">
                     <div class="metaBox e334"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e634').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e634" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e334'
                              </span><span class="metaAttribute">fileref='../../../vol5/graphics/Candillon01/Candillon01-003.png'
                              </span><span class="metaAttribute">format='png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
                  <div class="caption e335">
                     <div class="para e336">Collaborations in Translator.</div>
                  </div>
               </div>
            </div>
         </div><a name="ImplementationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e337">
            <div class="title e338">Implementation</div>
            <div class="para e339">In this section, we describe the implementation of Translator for the GeoRSS-to-HTML
               transformation (see above).
               <div class="popupBox e340">
                  <div class="popupLabel" onmouseover="$('#d1e643').show('1000');" onmouseout="$('#d1e643').hide('1000');">[ footnote ]</div>
                  <div id="d1e643" style="display: none;">
                     <div class="footnote">
                        <div class="para e341">You can find the code presented in this section in 
                           <div class="emphasis e342" role="ital">AtomPub/translator.xq</div>
                        </div>
                     </div>
                  </div>
               </div>.
               We start with a presentation of the 
               <div class="code e343">transform</div> function which receives the XDM instance to transform (i.e. the Atom feed) and the
               transformation templates as parameters.
               
               <div class="programlisting e344" xml:space="preserve">
                  declare function converter:transform(
                  $i as item()*,
                  $templates as function(*)+) as item()*
                  {
                  for $tpl in $templates
                  let $template := $tpl()
                  let $match    := $template[1]
                  let $apply    := $template[2]
                  return
                  if($match($i)) then
                  $apply($i, converter:transform#2, $templates)
                  else()
                  };        
                  
               </div>
               
            </div>
            <div class="para e345">This function invokes the 
               <div class="code e346">apply</div> and 
               <div class="code e347">match</div> functions for all templates.
               The example application contains templates for Atom feeds, Atom entries, and GeoRSS
               points.
               For instance, it contains an 
               <div class="code e348">xhtml-template</div> module which contains templates to transform Atom feeds and entries into XHTML.
               Moreover, it contains a module to match and apply GeoRSS points.
               <div class="popupBox e349">
                  <div class="popupLabel" onmouseover="$('#d1e666').show('1000');" onmouseout="$('#d1e666').hide('1000');">[ footnote ]</div>
                  <div id="d1e666" style="display: none;">
                     <div class="footnote">
                        <div class="para e350">However, the code is not shown in this  paper but contained in the example application</div>
                     </div>
                  </div>
               </div>
               For example, the Atom module contains two templates each consisting of a 
               <div class="code e351">match</div> and an 
               <div class="code e352">apply</div> function:
               
               <div class="itemizedlist e353">
                  <div class="listitem e354">
                     <div class="para e355">Atom feed template: 
                        <div class="code e356">match-feed</div> and 
                        <div class="code e357">apply-feed</div> functions.
                     </div>
                  </div>
                  <div class="listitem e358">
                     <div class="para e359">Atom entry template: 
                        <div class="code e360">match-entry</div> and 
                        <div class="code e361">apply-entry</div> functions.
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e362">
               The functions 
               <div class="code e363">match-feed</div> and 
               <div class="code e364">match-entry</div> are respectively checking if the XDM instance is an Atom feed or entry.
               
               <div class="programlisting e365" xml:space="preserve">
                  declare function html-templates:match-feed($item) as xs:boolean
                  {
                  $item instance of schema-element(atom:feed)
                  };       
                  
               </div>
               
               <div class="programlisting e366" xml:space="preserve">
                  declare function html-templates:match-entry($item) as xs:boolean
                  {
                  $item instance of schema-element(atom:entry)
                  };
                  
               </div>
               
            </div>
            <div class="para e367">
               Both of the 
               <div class="code e368">match</div> functions are associated to 
               <div class="code e369">apply</div> functions, namely 
               <div class="code e370">apply-feed</div> and 
               <div class="code e371">apply-entry</div>.
               Each of the 
               <div class="code e372">apply</div> functions shown below is invoking the 
               <div class="code e373">transform</div> function.
               More specifically, in 
               <div class="code e374">apply-feed</div>, the 
               <div class="code e375">transform</div> function is invoked for each Atom entry in the feed.
               In 
               <div class="code e376">apply-entry</div>, the 
               <div class="code e377">transform</div> function is invoked for all children of an entry.
               If one of the children is contained in the GeoRSS namespace, it will be transformed
               by a matching template.
               
               <div class="programlisting e378" xml:space="preserve">
                  declare function html-templates:apply-feed(
                  $feed as schema-element(atom:feed),
                  $transform as (function(item()*, function(*)+) as item()*),
                  $templates as function(*)+)
                  {
                  &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
                  &lt;h1&gt;{$feed/atom:title/text()}&lt;/h1&gt;
                  &lt;div id="entries"&gt;{
                  for $entry in $feed/atom:entry
                  return $transform($entry, $templates)
                  }&lt;/div&gt;
                  &lt;/html&gt;
                  };  
                  
               </div>
               
               <div class="programlisting e379" xml:space="preserve">
                  declare function html-templates:apply-entry(
                  $entry as schema-element(atom:entry),
                  $transform as (function(item()*, function(*)+) as item()*),
                  $templates as function(*)+)
                  {
                  &lt;div class="atom:content"
                  xmlns="http://www.w3.org/1999/xhtml"&gt;
                  &lt;h2&gt;{$entry/atom:title/text()}&lt;/h2&gt;
                  &lt;div class="atom:content"&gt;
                  {$entry/atom:content/text()}
                  &lt;/div&gt;
                  {for $child in $entry/*
                  return $transform($child, $templates)}
                  &lt;/div&gt;
                  };
                  
               </div>
               
            </div>
            <div class="para e380">Finally, the client invokes the 
               <div class="code e381">transform</div> function for the first time, passing as first argument an instance of an Atom feed
               to be converted and as second argument the templates as parameters.
               
               <div class="programlisting e382" xml:space="preserve">
                  (: Display the Atom feed :)
                  let $feed := local:get-feed()
                  return algo:transform($feed, tohtml:get-templates());      
                  
               </div>
               
            </div>
         </div><a name="ImplementationConsiderationsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e383">
            <div class="title e384">Implementation Considerations</div>
            <div class="para e385">In the previous section, we have introduce one possible implementation of Translator.
               In this section, we consider some alternative implementation aspects.
               
               <div class="itemizedlist e386">
                  <div class="listitem e387">
                     <div class="para e388">
                        <div class="emphasis e389">Consideration 1:</div> This pattern is based on functional parametrization therefore XQuery 1.1 is required
                        to implement Translator.
                     </div>
                  </div>
                  <div class="listitem e390">
                     <div class="para e391">
                        <div class="emphasis e392" role="bold">Consideration 2:</div> The 
                        <div class="code e393">transform</div> function can vary.
                        In our implementation, if the given input hasn't been matched by any template, it
                        stops the process. 
                        However, alternative implementation of the 
                        <div class="code e394">transform</div> function may look at the children of the XDM input.
                        
                     </div>
                  </div>
                  <div class="listitem e395">
                     <div class="para e396">
                        <div class="emphasis e397" role="bold">Consideration 3:</div> If an 
                        <div class="code e398">apply</div> function invokes the 
                        <div class="code e399">transform</div> function, it may invoke it with a different implementation of the 
                        <div class="code e400">transform</div> function than the one received as parameter.
                        The same variation can apply for the templates passed as parameter to the 
                        <div class="code e401">transform</div> function.
                     </div>
                  </div>
               </div>
               
            </div>
         </div><a name="ConclusionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e402">
            <div class="title e403">Conclusion</div>
            <div class="para e404">By implementing Use Case 2 (Sec. 
               <div class="xref e405" linkend="application"></div>) using Translator, we have improved the application on the following perspectives:
               
               <div class="itemizedlist e406">
                  <div class="listitem e407">
                     <div class="para e408">Independent modules can collaborate easily on the same XDM instance.</div>
                  </div>
                  <div class="listitem e409">
                     <div class="para e410">Extending transformations is easy. With Translator, templates are loosely coupled.
                        New templates can be introduced without affecting the others.
                     </div>
                  </div>
               </div>
               
               In conclusion, use Translator if you want to:
               
               <div class="itemizedlist e411">
                  <div class="listitem e412">
                     <div class="para e413">Bring the XSLT programing paradigm to XQuery.</div>
                  </div>
                  <div class="listitem e414">
                     <div class="para e415">Transform and/or interpret an heterogeneous XML document with a modular partitioning
                        of the function involved.
                     </div>
                  </div>
               </div>
               
            </div>
         </div>
      </div><a name="StrategyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e416" xml:id="strategy" xreflabel="5">
         <div class="title e417">Strategy</div>
         <div class="para e418">In this section, we present the design and implementation of parts of the AtomPub
            server (see Section 
            <div class="xref e419" linkend="application"></div>).
            Specifically, we discuss the module that is responsible for retrieving and storing
            and Atom entry posted to the server.
         </div>
         <div class="para e420">If an Atom entry is posted to the server, the server must store it and add it to the
            Atom feed.
            For example, Feeds can be stored in the file system or in a transaction-enabled XML
            database (i.e. in XQuery collections backed by the database).
            Coupling the AtomPub server module to a specific storage module is not desirable for
            the following reasons:
            
            <div class="itemizedlist e421">
               <div class="listitem e422">
                  <div class="para e423">If the AtomPub server is depending on many storage modules, the code base becomes
                     larger and harder to maintain.
                  </div>
               </div>
               <div class="listitem e424">
                  <div class="para e425">Storage modules often depend on the environment. For example, different databases
                     are available on different platforms.
                  </div>
               </div>
            </div>
            
         </div>
         <div class="para e426">This problem can be solved by encapsulating each available storage algorithm in a
            function item.
            Such a particular implementation of a functionality is called a Strategy.
            The intent of the Strategy Pattern is as follows:
            
            <div class="popupBox e427">
               <div class="popupLabel" onmouseover="$('#d1e841').show('1000');" onmouseout="$('#d1e841').hide('1000');">[ blockquote ]</div>
               <div id="d1e841" style="display: none;">
                  <div class="blockquote">
                     <div class="para e428">Define a family of algorithms, encapsulate each one, and make them interchangeable.
                        Strategy lets the algorithm implementations vary independently from clients that use
                        it. [
                        <div class="xref e429" linkend="bib03"></div>].
                     </div>
                  </div>
               </div>
            </div>
            
         </div><a name="DescriptionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e430">
            <div class="title e431">Description</div>
            <div class="para e432">In order to implement our use case with the Strategy Pattern, we have to decouple
               the AtomPub operations from the storage operations. 
               Therefore, we call the AtomPub operations passing a function item encapsulating the
               storage Strategy as parameter.
               
               Strategy defines the following participants (cf. 
               <div class="xref e433" linkend="bib03"></div>):
               
               <div class="itemizedlist e434">
                  <div class="listitem e435">
                     <div class="para e436">
                        <div class="emphasis e437" role="bold">Strategy: </div>Interface and functionality implicitly defined by the ContextFunction. This interface
                        applies to all ConcreteStrategy implementations.
                     </div>
                  </div>
                  <div class="listitem e438">
                     <div class="para e439">
                        <div class="emphasis e440" role="bold">ConcreteStrategy: </div>A specific implementation of a commonly defined Strategy.
                     </div>
                  </div>
                  <div class="listitem e441">
                     <div class="para e442">
                        <div class="emphasis e443" role="bold">ContextFunction: </div>Is called with a ConcreteStrategy and all required data as parameters. For example,
                        the ContextFunction 
                        <div class="code e444">atompub:post</div> is called with the concrete filesystem storage strategy as parameter.
                     </div>
                  </div>
                  <div class="listitem e445">
                     <div class="para e446">
                        <div class="emphasis e447" role="bold">Context: </div>Imports a ConcreteStrategy to use and passes it to the ContextFunction as parameter.
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e448">ContextFunction and ConcreteStrategy interact to implement the Strategy chosen by
               the server. 
               A ContextFunction may pass all data required to the ConcreteStrategy at runtime.
               The client creates and passes a ConcreteStrategy to a ContextFunction.
               
            </div>
            <div class="figure e449" floatstyle="1" xml:id="strategy-motivation" xreflabel="4">
               <div class="mediaobject e450">
                  <div class="imageobject e451">
                     <div class="metaBox e452"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e884').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e884" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e452'
                              </span><span class="metaAttribute">fileref='../../../vol5/graphics/Candillon01/Candillon01-004.png'
                              </span><span class="metaAttribute">format='png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
                  <div class="caption e453">
                     <div class="para e454">Structure of the Strategy Pattern.</div>
                  </div>
               </div>
            </div>
            <div class="para e455">In Figure 
               <div class="xref e456" linkend="strategy-motivation"></div>, the 
               <div class="code e457">atompub:post</div> function is responsible for creating a new Atom entry.
               The 
               <div class="code e458">create-strategy</div> argument is a function item that encapsulates the functionality to store an entry.
               Therefore, it represents a concrete Strategy that stores the entry, for example in
               a collection.
               Different concrete storage strategies are implemented within different modules that
               have no dependencies with the AtomPub server module.
               For instance, atompub:post could use one of these strategies:
               
               <div class="itemizedlist e459">
                  <div class="listitem e460">
                     <div class="para e461">
                        <div class="emphasis e462" role="bold">File System Store: </div>implements the storage of entries on the file system. I/O operations on the file system
                        are based on Zorba file API [
                        <div class="xref e463" linkend="bib18"></div>].
                     </div>
                  </div>
                  <div class="listitem e464">
                     <div class="para e465">
                        <div class="emphasis e466" role="bold">Collection Store: </div>implements the storage of entries within collections. This implementation is based
                        on the XQuery Data Definition Facility [
                        <div class="xref e467" linkend="bib11"></div>].
                     </div>
                  </div>
                  <div class="listitem e468">
                     <div class="para e469">
                        <div class="emphasis e470" role="bold">REST Store: </div>implements a remote storage of entries through a REST API. This store is based on
                        EXPath HTTP Client [
                        <div class="xref e471" linkend="bib17"></div>].
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e472">
               Whenever the AtomPub server has to retrieve or create data, it forwards the responsibility
               to the concrete Strategy which is passed as a function argument.
               
            </div>
         </div><a name="ImplementationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e473">
            <div class="title e474">Implementation</div>
            <div class="para e475">Within this section, we describe one possible implementation of the AtomPub server
               use case using the Strategy pattern 
               <div class="popupBox e476">
                  <div class="popupLabel" onmouseover="$('#d1e928').show('1000');" onmouseout="$('#d1e928').hide('1000');">[ footnote ]</div>
                  <div id="d1e928" style="display: none;">
                     <div class="footnote">
                        <div class="para e477">You can find the code presented in this section in 
                           <div class="emphasis e478" role="ital">AtomPub/strategy.xq</div>
                        </div>
                     </div>
                  </div>
               </div>.
            </div>
            <div class="para e479">First, we show how a ConcreteStrategy is chosen and used within the Context, i.e.
               the main module; in our example application we use the concrete file system storage
               Strategy. 
               After that, we present the usage of the ConcreteStrategy within the 
               <div class="code e480">atompub:post</div> ContextFunction.
               Finally, we will present the concrete implementation of the 
               <div class="code e481">create</div> algorithm, i.e. a chosen ConcreteStrategy implemented in the 
               <div class="code e482">store:create</div> function.
            </div>
            <div class="para e483">
               The code listing below shows the main server module which handles an Atom entry posting
               from a client.
               By importing the file system store (not shown in the code snippet below) the main
               module chooses the concrete store strategy. 
               It then calls 
               <div class="code e484">atompub:post</div> passing 
               <div class="code e485">store:create</div> as the chosen storage strategy.
               
               <div class="programlisting e486" xml:space="preserve">
                  (: 
                  : Post the entry, the result is the URI of the entry 
                  : using store:create#2 as the storage strategy
                  :)
                  let $feed-uri  := "http://www.example.org/blog"
                  let $entry-uri := atompub:post($feed-uri, $local:entry, store:create#2)
                  (: Get the newly created entry :)
                  return store:retrieve-entry($entry-uri)          
                  
               </div>
               
            </div>
            <div class="para e487">
               The ContextFunction 
               <div class="code e488">atompub:post</div> shown below is processing an Atom entry posted by a client.
               It takes three parameters: the feed uri, the entry to be aggregated, and the storage
               strategy.
               First, the entry is processed.
               Then it is passed as parameter to the invoked strategy function item.
               
               <div class="programlisting e489" xml:space="preserve">
                  (: Post an entry :)
                  declare sequential function atompub:post(
                  $feed-uri as xs:string,
                  $entry as schema-element(atom:entry),
                  $create-strategy 
                  as (function(xs:string, schema-element(atom:entry)) as item()*)
                  ) as xs:string
                  {
                  (: Prepare the entry :)
                  declare $id := util:uuid();
                  declare $entry-uri := concat($feed-uri, "/", $id);
                  insert nodes (&lt;atom:id&gt;{$id}&lt;/atom:id&gt;,
                  &lt;atom:link href="{$entry-uri}" rel="self" /&gt;)
                  into $entry;
                  (: Use strategy to store the entry :)
                  $create-strategy($feed-uri, $entry);
                  (: Return the entry URI :)
                  $entry-uri;
                  };          
                  
               </div>
               
            </div>
            <div class="para e490">
               The common interface of the 
               <div class="code e491">create-strategy</div> algorithm to create an entry is implicitly defined as 
               <div class="code e492">function(xs:string, schema-element(atom:entry))</div>.
               Within XQuery there is no explicit mechanism to define an interface in the manner
               of an object oriented language like Java.
               Therefore, one implicit way to define the common interface for the actual Strategy
               is by definition of the function item parameter within the signature of the ContextFunction.
               
               
               <div class="programlisting e493" xml:space="preserve">
                  declare sequential function store:create(
                  $feed-uri as xs:string,
                  $entry as schema-element(atom:entry))
                  {
                  declare $filename  := store:get-filename($feed-uri);
                  declare $meta-feed := validate { 
                  fs:read-xml($filename)/atom:feed
                  };
                  declare $entry-uri := 
                  $entry/atom:link[string(@rel) eq "self"]/@href;
                  (: Create the entry in the file system :)
                  fs:write(store:get-filename($entry-uri), $entry, ());
                  (: Update the feed metadata :)
                  insert node &lt;atom:link href="{$entry-uri}" rel="entry" /&gt;
                  as first into $meta-feed;
                  fs:write($filename, $meta-feed, ());
                  };          
                  
               </div>
               
               As an example of a concrete implementation of the entry creation strategy we present
               our sample implementation within the file system store above.
               The implementation stores the feed metadata in one file and each entry in a separate
               file.
               To preserve the order of all contained entries the 
               <div class="code e494">store:create</div> function has to insert an 
               <div class="code e495">atom:link</div> element into the feed metadata for each new entry which points to the according entry
               file.
               
            </div>
         </div><a name="ImplementationConsiderationsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e496">
            <div class="title e497">Implementation Considerations</div>
            <div class="para e498">When implementing the Strategy pattern, the Strategy may be optional [
               <div class="xref e499" linkend="bib03"></div>]. If no Strategy is provided, we execute the default behavior of the function.
            </div>
            <div class="para e500">The Strategy implemented in our use case has side effects: it stores data in the file
               system. Therefore the use of XQuery Scripting Extension depends on the algorithm implementation
               that needs to be achieved, not on the Strategy pattern itself.
            </div>
         </div><a name="ConclusionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e501">
            <div class="title e502">Conclusion</div>
            <div class="para e503">By adapting the Strategy pattern in our example application we gained the following
               benefits (cf. 
               <div class="xref e504" linkend="bib03"></div>):
               
               <div class="itemizedlist e505">
                  <div class="listitem e506">
                     <div class="para e507">
                        <div class="emphasis e508" role="bold">Reduced coupling: </div>Using Strategy enabled the AtomPub server module to be loosely coupled with any storage
                        module.
                     </div>
                  </div>
                  <div class="listitem e509">
                     <div class="para e510">
                        <div class="emphasis e511" role="bold">Reusability: </div>All storage modules are defining a family of algorithms for contexts to use and reuse.
                     </div>
                  </div>
                  <div class="listitem e512">
                     <div class="para e513">
                        <div class="emphasis e514" role="bold">Flexibility: </div>Switching code to a different desired behavior can be done by changing only one import
                        statement.
                     </div>
                  </div>
               </div>
               
               
            </div>
            <div class="para e515">  
               We encourage usage of the Strategy  pattern when
               
               <div class="itemizedlist e516">
                  <div class="listitem e517">
                     <div class="para e518">you need different implementations of a specific component having a uniform interface.
                        Using Strategies you can simply configure different behaviors.
                     </div>
                  </div>
                  <div class="listitem e519">
                     <div class="para e520">you want to hide specific implementation details from a module.</div>
                  </div>
                  <div class="listitem e521">
                     <div class="para e522">you are using several nested 
                        <div class="code e523">if..then..else</div> statements to emulate configurability for different behaviors within functions. Such
                        functions can be refactored using the Strategy pattern.
                     </div>
                  </div>
               </div>
               
            </div>
         </div>
      </div><a name="ObserverANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e524" xml:id="observer" xreflabel="6">
         <div class="title e525">Observer</div>
         <div class="para e526">In this section, we discuss the implementation of Use Case 4: sending a message on
            Twitter for each new Atom entry that is created on the server.
            In this use case, the AtomPub module automatically becomes dependent on the module
            that provides the functionality to send messages on Twitter.
            A requirement for the AtomPub server module is to enable cooperation with an arbitrary
            number of modules that exist outside the Atom library.
            Moreover, the AtomPub server should not depend on any of these extension modules.
            For example, one could easily think of modules that do logging, spam detection, or
            email notification.
            However, all such modules should not be tightly coupled because this prevents from
            using them in other scenarios.
            
         </div>
         <div class="para e527">The Observer pattern describes how to establish such loosely-coupled collaborations
            between functions:
            
            <div class="popupBox e528">
               <div class="popupLabel" onmouseover="$('#d1e1037').show('1000');" onmouseout="$('#d1e1037').hide('1000');">[ blockquote ]</div>
               <div id="d1e1037" style="display: none;">
                  <div class="blockquote">
                     <div class="para e529">Define a one-to-many dependency between functions so that when one is called, all
                        its dependents are notified automatically [
                        <div class="xref e530" linkend="bib03"></div>].
                     </div>
                  </div>
               </div>
            </div>
         </div><a name="DescriptionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e531">
            <div class="title e532">Description</div>
            <div class="para e533">When applying the Observer pattern to our use case, we have decoupled collaborative
               modules by introducing a subscription mechanism for functions to be invoked on particular
               events in the application.
            </div>
            <div class="para e534">The Observer pattern defines the following participants (cf. 
               <div class="xref e535" linkend="bib03"></div>):
               
               <div class="itemizedlist e536">
                  <div class="listitem e537">
                     <div class="para e538">
                        <div class="emphasis e539" role="bold">Subject: </div> keep track of its observers. Subject notifies its observers when an event occurred.
                     </div>
                  </div>
                  <div class="listitem e540">
                     <div class="para e541">
                        <div class="emphasis e542" role="bold">Observer: </div> function invoked to be notified about an event. Observer receives as parameter information
                        about the event that triggered its invocation.
                     </div>
                  </div>
                  <div class="listitem e543">
                     <div class="para e544">
                        <div class="emphasis e545" role="bold">Client: </div> attach Observers to the Subject.
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e546">
               Observers are attached to the Subject.
               If a particular event occurs, the subject invokes all its observers and provides each
               of them with data about the event that triggered the invocation.
               A Subject can have many Observers, each Observer implementing a different functionality.
               
            </div>
            <div class="para e547">
               Subjects and Observers are loosely coupled: they can vary independently [
               <div class="xref e548" linkend="bib03"></div>].
               Consider our use case, adding/removing Observers doesn't affect neither the AtomPub
               server module nor the Twitter Observer function.
               Both modules (AtomPub and Twitter) can operate without the other. The Observer pattern
               is enables collaborations between these two decoupled modules.
               
            </div>
         </div><a name="ImplementationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e549">
            <div class="title e550">Implementation</div>
            <div class="para e551">In this section, we discuss the implementation of the Observer pattern in our application
               
               <div class="popupBox e552">
                  <div class="popupLabel" onmouseover="$('#d1e1079').show('1000');" onmouseout="$('#d1e1079').hide('1000');">[ footnote ]</div>
                  <div id="d1e1079" style="display: none;">
                     <div class="footnote">
                        <div class="para e553">You can find the code presented in this section in 
                           <div class="emphasis e554" role="ital">AtomPub/observer.xq</div>
                        </div>
                     </div>
                  </div>
               </div>.
               Figure 
               <div class="xref e555" linkend="observer-structure"></div> describes the structure of our Observer implementation.
               The implementation of the Observer pattern in our application involves the AtomPub
               server module (the Subject) and the 
               <div class="code e556">tweet-entry</div> function (the Observer).
            </div>
            <div class="figure e557" floatstyle="1" xml:id="observer-structure" xreflabel="4">
               <div class="mediaobject e558">
                  <div class="imageobject e559">
                     <div class="metaBox e560"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1093').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1093" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e560'
                              </span><span class="metaAttribute">fileref='../../../vol5/graphics/Candillon01/Candillon01-005.png'
                              </span><span class="metaAttribute">format='png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
                  <div class="caption e561">
                     <div class="para e562">Structure of Observer.</div>
                  </div>
               </div>
            </div>
            <div class="para e563">The 
               <div class="code e564">on-post</div> function is responsible for attaching new observers to the AtomPub server module
               (the Subject).
               The AtomPub server is keeping track of all its observers with the 
               <div class="code e565">on-post</div> module variable.
               
               <div class="programlisting e566" xml:space="preserve">
                  (: Hold the observer references :)
                  declare variable $atompub:on-post
                  as (function(schema-element(atom:entry)) as item()*)* := ();
                  
                  (: Add an observer to the post request :)
                  declare sequential function atompub:on-post(
                  $o as (function(schema-element(atom:entry)) as item()*))
                  {
                  set $atompub:on-post := ($atompub:on-post, $o)
                  };            
                  
               </div>
               
            </div>
            <div class="para e567">In order for the subject to be able to invoke an Observer, all observers must have
               the same function signature. For instance, in the AtomPub server module, each observer
               must be a subtype of 
               <div class="code e568">function(schema-element(atom:entry)) as item()*</div>.
               The single parameter of the observer, (
               <div class="code e569">schema-element(atom:entry)</div>) is an instance of the Atom entry that has been created on the server.
               
            </div>
            <div class="para e570">
               The 
               <div class="code e571">tweet-entry</div> function is the Observer we will use in our use case: it will be executed for each
               new entry created on the server.
               It takes an Atom entry as parameter and sends a message on Twitter with the following
               format: entry title, tiny url of the entry.
               The function signature is compatible with the observer signature defined in the AtomPub
               server module (
               <div class="code e572">function(schema-element(atom:entry)) as item()*</div>).
               
               <div class="programlisting e573" xml:space="preserve">
                  (: The tweet will be formatted as following: Title + tiny url :)
                  declare function twitter:tweet-entry(
                  $entry as schema-element(atom:entry))
                  { 
                  (: Get the title :)
                  let $title := $entry/atom:title/text()
                  (: Create a tiny link :)
                  let $uri := twitter:get-tiny-url(
                  string($entry/atom:link[@rel = "self"]/@href)
                  )
                  (: Send the status on twitter :)
                  return twitter:tweet(concat($title, ": ", $uri))
                  };          
                  
               </div>
               
            </div>
            <div class="para e574">The Client registers the 
               <div class="code e575">tweet-entry</div> function as an Observer of the AtomPub server module.
               
               <div class="programlisting e576" xml:space="preserve">
                  (: Register the Twitter observer :)
                  atompub:on-post(twitter:tweet-entry#1);        
                  
               </div>
               
            </div>
            <div class="para e577">
               When a new Atom entry is added to the server, each Observer is notified and receives
               the entry as parameter.
               
               <div class="programlisting e578" xml:space="preserve">
                  (: Notify observers :)
                  for $o in $atompub:on-post
                  return $o($entry);         
                  
               </div>
               
            </div>
         </div><a name="ImplementationConsiderationsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e579">
            <div class="title e580">Implementation Considerations</div>
            <div class="para e581">In the previous section, we introduced an implementation of the observer pattern.
               In this section, we discuss how this implementation can vary:
               
               <div class="itemizedlist e582">
                  <div class="listitem e583">
                     <div class="para e584">
                        <div class="emphasis e585" role="bold">Consideration 1: </div>
                        In our implementation, the AtomPub server module is using the XQuery Scripting Extension
                        to keep track of its observers.
                        However, variants of the Observer pattern can be implemented using only the XQuery
                        1.1 core specification.
                        For instance, an alternative implementation could access Observers as function parameter:
                        
                        <div class="programlisting e586" xml:space="preserve">
                           let $observers := twitter:tweet-entry#1
                           return
                           atompub:post($feed-uri, $entry, $observers)          
                           
                        </div>
                        
                     </div>
                  </div>
                  <div class="listitem e587">
                     <div class="para e588">
                        <div class="emphasis e589" role="bold">Consideration 2: </div> Notifying observers has a performance cost in the application.
                        Therefore, when implementing Observer, the event granularity must be carefully designed
                        in order to avoid a large number of useless event notification.
                     </div>
                  </div>
                  <div class="listitem e590">
                     <div class="para e591">
                        <div class="emphasis e592" role="bold">Consideration 3: </div>
                        Observers producing side-effects may trigger an infinite amount of event notifications.
                        This can happen if the observer code is triggering the same event that triggered its
                        own invocation.
                        If an Observer implementor is writing side-effects, she must avoid this scenarios.
                        
                     </div>
                  </div>
                  <div class="listitem e593">
                     <div class="para e594">
                        <div class="emphasis e595" role="bold">Consideration 4: </div> 
                        Observers should be independent of each other.
                        For instance, consider a spam checker observer that removes a newly created Atom entry
                        because the author's e-mail address is blacklisted.
                        In such situation, all observers become dependent on the outcome of the spam checker
                        observer.
                        For example, they might process an entry that has already been removed by the spam
                        checker or they could have already sent a notification for a spam post.
                     </div>
                  </div>
               </div>
               
            </div>
         </div><a name="ConclusionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e596">
            <div class="title e597">Conclusion</div>
            <div class="para e598">
               By using Observer to implement Use Case 4, the application has improved in the following
               perspectives:
               
               <div class="itemizedlist e599">
                  <div class="listitem e600">
                     <div class="para e601">The behavior the AtomPub server has been extended, by sending messages to Twitter
                        without any changes to the code of the AtomPub server.
                     </div>
                  </div>
                  <div class="listitem e602">
                     <div class="para e603">The AtomPub server module can collaborate with an arbitrary number of functions in
                        the application but stays loosely coupled.
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e604">
               In conclusion, use the Observer pattern if you want to:
               
               <div class="itemizedlist e605">
                  <div class="listitem e606">
                     <div class="para e607">Use the Publish/Subscribe messaging paradigm within XQuery.</div>
                  </div>
                  <div class="listitem e608">
                     <div class="para e609">To keep state consistency between independent entities in the application.</div>
                  </div>
               </div>
               
            </div>
         </div>
      </div><a name="Conclusion&amp;OutlookANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e610" xml:id="conclusion" xreflabel="7">
         <div class="title e611">Conclusion &amp; Outlook</div>
         <div class="para e612">In this paper, we motivated the need for XQuery design patterns.
            The reason therefore is that there exist more and more large XQuery applications most
            of them showing symptoms which are well-known in the object-oriented world and have
            there been solved using design patterns.
            In more detail, we have presented four design problems along the lines of a running
            example.
            Moreover, we have shown how each of these problems can be solved by applying a particular
            design pattern.
            
         </div>
         <div class="para e613">We have chosen to use an AtomPub client and server implementation as a running example.
            For the AtomPub client, we used the Chain of Responsibility (see Sec. 
            <div class="xref e614" linkend="cor"></div>) which is using several loosely coupled modules to construct and send an HTTP request.
            Translator (see Sec. 
            <div class="xref e615" linkend="pm"></div>) helped us to provide a flexible and extensible HTML rendering engine of Atom entries.
            For the AtomPub server, the Strategy Pattern (Sec. 
            <div class="xref e616" linkend="strategy"></div>) allows for configurable storage algorithms by exhibiting higher-order functions.
            Last, the Observer Pattern (Sec. 
            <div class="xref e617" linkend="observer"></div>) provided a way to register services (e.g. Twitter notification) which are automatically
            notified if a state of an observed object changes.
         </div>
         <div class="para e618">
            Generally, the most important aspect of each of the patterns presented in this paper
            is to decouple XQuery functions and modules.
            For instance, in the Chain of Responsibility, we achieved this by removing dependencies
            between functions by agreeing on a common XML Schema element (i.e. the request item).
            The Strategy and Observer patterns both leverage higher-order functions as a decoupling
            mechanism.
            
         </div>
         <div class="para e619">
            However, the four patterns presented in this paper are only a starting point.
            In the future, we want to develop an extensive catalog of reusable design solutions
            for the most recurring XQuery design problems.
            Also, we want to classify these design patterns according to
            (1) language features (i.e. pure functional XQuery, XQuery Update, and XQuery Scripting)
            and
            (2) categories (i.e. creational, structural, and behavioral).  
            
         </div>
         <div class="para e620">
            Finally, we hope that XQuery design patterns help the XQuery community to capture
            recurring design problems and develop extensible XQuery applications.
            Therefore, we started to publish a pattern catalog online at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e621" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://patterns.28msec.com/</div>.
            We are open and very interested in comments, suggestions, and other contributions
            to our effort and this catalog.
            
         </div>
      </div><a name="BibliographyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e622">
         <div class="title e623">Bibliography</div>
         <div class="bibliomixed e624" xml:id="bib01" xreflabel="Cooper2000">J. W. Cooper. 
            <div class="emphasis e625" role="ital">Java design patterns: a tutorial</div>. Addison-Wesley Longman Publishing Co., Inc., Boston, MA, USA, 2000.
         </div>
         <div class="bibliomixed e626" xml:id="bib02" xreflabel="Cooper2002">J. W. Cooper. 
            <div class="emphasis e627" role="ital">C# design patterns: a tutorial</div>. Addison-Wesley Longman Publishing Co., Inc., Boston, MA, USA, 2002.
         </div>
         <div class="bibliomixed e628" xml:id="bib03" xreflabel="Gamma1994">E. Gamma, R. Helm, R. Johnson, and J. M. Vlissides. 
            <div class="emphasis e629" role="ital">Design Patterns: Elements of Reusable Object-Oriented Software</div>. Addison-Wesley Professional, illustrated edition edition, November 1994.
         </div>
         <div class="bibliomixed e630" xml:id="bib04" xreflabel="DeMarco96">T. DeMarco. 
            <div class="emphasis e631" role="ital">Book review: Design patterns: Elements of reusable object-oriented software</div>. IEEE Software Magazine, 1996. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e632" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.systemsguild.com/GuildSite/TDM/Gamma.html</div>.
         </div>
         <div class="bibliomixed e633" xml:id="bib05" xreflabel="AntoyHanus02FLOPS">S. Antoy and M. Hanus. 
            <div class="emphasis e634" role="ital">Functional logic design patterns</div>. In 6th Int'l Symp, on Functional and Logic Programming (FLOPS'02), pages 67-87,
            Aizu, Japan, 9 2002. Springer LNCS 2441. doi: 
            <div class="biblioid doi e635">10.1007/3-540-45788-7_4</div>.
         </div>
         <div class="bibliomixed e636" xml:id="bib06" xreflabel="Narbel2007">P. Narbel. 
            <div class="emphasis e637" role="ital">A Multiparadigmatic Study of the Object-Oriented Design Patterns</div>. 2007.
         </div>
         <div class="bibliomixed e638" xml:id="bib07" xreflabel="XQ11">W3C. XQuery 1.1: 
            <div class="emphasis e639" role="ital">An XML Query Language</div>. Website, 2009. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e640" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xquery-11/</div>.
         </div>
         <div class="bibliomixed e641" xml:id="bib08" xreflabel="Liu2005">Liu, Z. H., Krishnaprasad, M., and Arora, V. 
            <div class="emphasis e642" role="ital">Native xquery processing in oracle xmldb</div>. In SIGMOD '05: Proceedings of the 2005 ACM SIGMOD international conference on Management
            of data (New York, NY, USA, 2005), ACM, pp. 828-833. doi: 
            <div class="biblioid doi e643">10.1145/1066157.1066259</div>.
         </div>
         <div class="bibliomixed e644" xml:id="bib09" xreflabel="Nicola2005">Nicola, M., and van der Linden, B. 
            <div class="emphasis e645" role="ital">Native XML Support in db2 Universal Database</div>. In VLDB '05: Proceedings of the 31st international conference on Very large data
            bases (2005), VLDB Endowment, pp. 1164-1174.
         </div>
         <div class="bibliomixed e646" xml:id="bib10" xreflabel="Brian2006">Brian, D. 
            <div class="emphasis e647" role="ital">The Definitive Guide to Berkeley DB XML</div>. Apress, Berkely, CA, USA, 2006.
         </div>
         <div class="bibliomixed e648" xml:id="bib11" xreflabel="XQUF">W3C. 
            <div class="emphasis e649" role="ital">XQuery Update Facility 1.0</div>. Website, 2009. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e650" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xquery-update-10/</div>.
         </div>
         <div class="bibliomixed e651" xml:id="bib12" xreflabel="XQSE">W3C. 
            <div class="emphasis e652" role="ital">XQuery Scripting Extension 1.0</div>. Website, 2008. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e653" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xquery-sx-10/</div>.
         </div>
         <div class="bibliomixed e654" xml:id="bib13" xreflabel="XQFT">W3C. 
            <div class="emphasis e655" role="ital">XQuery and XPath Full Text 1.0</div>. Website, 2010. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e656" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xpath-full-text-10/</div>.
         </div>
         <div class="bibliomixed e657" xml:id="bib14" xreflabel="Kaufmann2009">Kaufmann, M., and Kossmann, D. 
            <div class="emphasis e658" role="ital">Developing an Enterprise Web Application in XQuery</div>. In ICWE (2009), vol. 5648 of Lecture Notes in Computer Science, Springer, pp. 465-468.
            doi: 
            <div class="biblioid doi e659">10.1007/978-3-642-02818-2_39</div>.
         </div>
         <div class="bibliomixed e660" xml:id="bib15" xreflabel="Sausalito2010">28msec Inc. 
            <div class="emphasis e661" role="ital">Sausalito Developer Guide</div>. Website, 2010. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e662" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://sausalito.28msec.com</div>.
         </div>
         <div class="bibliomixed e663" xml:id="bib16" xreflabel="RFC5023">Gregorio, J., and de hOra, B. 
            <div class="emphasis e664" role="ital">The Atom Publishing Protocol</div>. RFC 5023 (Proposed Standard), Oct. 2007. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e665" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.ietf.org/rfc/rfc5023.txt</div>.
         </div>
         <div class="bibliomixed e666" xml:id="bib17" xreflabel="HTTPClient">Georges, F. 
            <div class="emphasis e667" role="ital">HTTP Client Module</div>. Candidate, EXPath, January 2010. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e668" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.expath.org/modules/http-client.html</div>.
         </div>
         <div class="bibliomixed e669" xml:id="bib18" xreflabel="XQDDF">FLWOR Foundation 
            <div class="emphasis e670" role="ital">XQuery Data Definition Facility</div>. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e671" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.zorba-xquery.com/doc/zorba-latest/zorba/html/XQDDF.html</div>.
         </div>
         <div class="bibliomixed e672" xml:id="bib19" xreflabel="Translator">Kühne, T. 
            <div class="emphasis e673" role="ital">The Translator Pattern - External Functionality with Homomorphic Mappings</div>. TOOLS '97: Proceedings of the Tools-23: Technology of Object-Oriented Languages
            and Systems, 1997.
         </div>
         <div class="bibliomixed e674" xml:id="bib20" xreflabel="XQueryInAction">W3C. 
            <div class="emphasis e675" role="ital">Examples of XML Query In Action</div>. Website, 2010. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e676" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/XML/Query/#examples</div>
         </div>
      </div>
   </div>
</div>