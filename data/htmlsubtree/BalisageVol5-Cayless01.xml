<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#OnImplementingstringrange()forTEIANCHOR" name="OnImplementingstringrange()forTEITOC">On Implementing string-range() for TEI</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#TEIstandoffmarkupandstringrange()ANCHOR" name="TEIstandoffmarkupandstringrange()TOC">TEI, standoff markup, and string-range()</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BibliographyANCHOR" name="BibliographyTOC">Bibliography</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">August 3 - 6, 2010</div>
         <div class="singletermTERMS">ajs6f@virginia.edu</div>
         <div class="singletermTERMS">Adam</div>
         <div class="singletermTERMS">Analyst/Programmer</div>
         <div class="singletermTERMS">A.</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2010</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">Cayless</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">Engineer</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
         <div class="singletermTERMS">fragmentIdentifier</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">Hugh</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">inline</div>
         <div class="singletermTERMS">industrial</div>
         <div class="singletermTERMS">industrial tool</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">Literary and Linguistic Computing</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">philomousos@gmail.com</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">standoff markup</div>
         <div class="singletermTERMS">Soroka</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">the inadequacies of markup</div>
         <div class="singletermTERMS">The (in)adequacies of markup</div>
         <div class="singletermTERMS">Text Encoding Initiative: P5 Guidelines</div>
         <div class="singletermTERMS">TEI</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">XML Pointer Language (XPointer) Version 1.0</div>
         <div class="singletermTERMS">XSLT/XPath 2.0</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="OnImplementingstringrange()forTEIANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.2">
      <div class="title e1">On Implementing string-range() for TEI</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2010</div>
            <div class="confdates e5">August 3 - 6, 2010</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">The Text Encoding Initiative Guidelines specify a number of pointer schemes for use
               in
               implementing standoff markup. This paper reports on an implementation of one of these
               pointer schemes, string-range(), and discusses the issues surrounding standoff markup
               in the
               context of TEI.
            </div>
         </div>
         <div class="author e8">
            <div class="personname e9">
               <div class="firstname e10">Hugh</div>
               <div class="othername e11">A.</div>
               <div class="surname e12">Cayless</div>
            </div>
            <div class="personblurb e13">
               <div class="para e14">Hugh Cayless works on digital papyrology for the NYU Digital Library Technology
                  Services team. He holds a Ph.D. in Classics and an MS in Information Science and has
                  research interests in the application of digital technologies to problems in the study
                  of
                  the ancient world.
               </div>
            </div>
            <div class="affiliation e15">
               <div class="jobtitle e16">Analyst/Programmer</div>
               <div class="orgname e17">NYU</div>
            </div>
            <div class="email e18">philomousos@gmail.com</div>
         </div>
         <div class="author e19">
            <div class="personname e20">
               <div class="firstname e21">Adam</div>
               <div class="surname e22">Soroka</div>
            </div>
            <div class="personblurb e23">
               <div class="para e24">Adam Soroka is an engineer in the Research and Development section of the Department
                  of Digital Research and Scholarship of the University of Virginia Library. His XML-related
                  interests include the uses of tree automata and integrating geospatial data into textual
                  markup.
               </div>
            </div>
            <div class="affiliation e25">
               <div class="jobtitle e26">Engineer</div>
               <div class="orgname e27">UVA</div>
            </div>
            <div class="email e28">ajs6f@virginia.edu</div>
         </div>
         <div class="legalnotice e29">
            <div class="para e30">Copyright Â© 2010 Hugh A. Cayless and Adam Soroka</div>
         </div>
         <div class="keywordset e31" role="author">
            <div class="keyword e32">TEI</div>
            <div class="keyword e33">standoff markup</div>
            <div class="keyword e34">XSLT/XPath 2.0</div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e35">
         <div class="title e36">Introduction</div>
         <div class="para e37">The genesis of this paper lies in a discussion
            <div class="popupBox e38">
               <div class="popupLabel" onmouseover="$('#d1e62').show('1000');" onmouseout="$('#d1e62').hide('1000');">[ footnote ]</div>
               <div id="d1e62" style="display: none;">
                  <div class="footnote" xml:id="n1">
                     <div class="para e39">The discussion, in which most posts have the title 
                        <div class="quote e40">the inadequacies of
                           markup
                        </div>, began with
                        
                        <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e41" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.digitalhumanities.org/cgi-bin/humanist/archive/archive_msg.cgi?file=/Humanist.vol23.txt&amp;msgnum=762&amp;start=98202&amp;end=98321</div>
                        on April 25th and carried on for about three weeks. The postings may be found in
                        
                        <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e42" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.digitalhumanities.org/cgi-bin/humanist/archive/archive.cgi?list=/Humanist.vol23.txt</div>
                        and
                        
                        <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e43" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.digitalhumanities.org/cgi-bin/humanist/archive/archive.cgi?list=/Humanist.vol24.txt</div>
                     </div>
                  </div>
               </div>
            </div> on the Humanist mailing last that began with a request for comment from Desmond
            Schmidt on his recent article in LLC, 
            <div class="citation e44">
               <div class="quote e45">The inadequacy of embedded markup for
                  cultural heritage texts
               </div>
            </div>. [
            <div class="xref e46" linkend="Schmidt2010"></div>] The core of
            which is an argument (really a series of arguments) that the insertion of what I will
            call
            
            <div class="quote e47">inline</div> markup (the format of which is typically XML) into the midst of a text
            to be interpreted is in some sense a violation of that text. Schmidt comes at this
            from
            several angles, highlighting the overlap problem, the imposition of subjective interpretation
            on the text in the form of markup that could become obsolete before the text itself
            does, the
            ways in which inline markup may duplicate information that could be derived automatically,
            and
            the fact that markup technologies like XML are 
            <div class="quote e48">industrial</div> and inherit from
            textual command languages designed for print.
         </div>
         <div class="para e49">The authors arenât sure they completely agree with all of this, but Schmidtâs is a
            thoughtful article, and a useful contribution to the ongoing debate over how satisfactory
            XML
            is for representing text. The subsequent discussion on Humanist went on for an unusually
            long
            series of posts, and was at times quite contentious. It inspired Hugh Cayless to call
            a
            session on 
            <div class="quote e50">The (in)adequacies of markup</div>
            [
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e51" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://thatcamp.org/2010/the-inadequacies-of-markup/</div>] at the THATCamp meeting
            held shortly afterwards at George Mason University. The session participants quickly
            agreed on
            a ruthlessly practical approach. As programmers, we are quite pleased that XML is
            an
            
            <div class="quote e52">industrial tool</div> and while weâll happily acknowledge the shortcomings of the
            Text Encoding Initiative (TEI), the size of its install base and the number of texts
            already
            encoded using it led us to look for solutions to the problems inherent in inline markup
            that
            could be implemented within the context of XML and the TEI. The obvious alternative
            to inline
            markup is standoff markup, and the TEI Guidelines have at least some things to say
            about doing
            standoff markup in TEI.
         </div>
      </div><a name="TEIstandoffmarkupandstringrange()ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e53">
         <div class="title e54">TEI, standoff markup, and string-range()</div>
         <div class="para e55">Section 16.2.4 of the Text Encoding Initiative Guidelines outlines a number of pointer
            schemes that are related to functions defined in the XPointer specification [
            <div class="xref e56" linkend="XPtr"></div>]. These can (notionally at least) be used to produce standoff markup on a
            TEI document. There are a variety of problems with the pointer schemes defined by
            the
            guidelines, and also with the related XPointer functions, but the most basic is that
            most of
            them don't have any implementation. There is therefore, no good way to use them, and,
            because
            they are unused, no good reason to implement them either. It is a Catch-22. The TEI
            pointer
            schemes are clearly meant to be used in concert with XInclude, as functions that retrieve
            text
            or node sets (see the example in 16.9.3), but their effects are underspecified in
            the
            guidelines.
         </div>
         <div class="para e57">Recent developments in the TEI have opened up the possibility of creating an
            implementation of at least one of these schemes, namely string-range(). The string-range()
            pointer scheme is defined thus: 
            <div class="popupBox e58">
               <div class="popupLabel" onmouseover="$('#d1e109').show('1000');" onmouseout="$('#d1e109').hide('1000');">[ blockquote ]</div>
               <div id="d1e109" style="display: none;">
                  <div class="blockquote">
                     <div class="title e59">16.2.4.5 string-range(fragmentIdentifier, offset [, length])</div>
                     <div class="para e60">The string-range() scheme locates a range based on character positions. While
                        string-range endpoints are points adjacent to character positions, they must be designated
                        by the characters to which they are adjacent, in the same way that the nodes corresponding
                        to XML elements are. This avoids ambiguity about which point between two characters
                        is
                        indicated when characters are interrupted by markup.
                     </div>
                     <div class="para e61">The first argument to string-range() designates a node or a range within which a
                        string is to be located. No string range, even an empty one, can be defined by a
                        string-range() if the fragment identified has the empty string as its value. Every
                        string-range is defined based on an âorigin characterâ. The origin is numbered 0,
                        and
                        designates the first character of the string-value of pointer. The offset is a character
                        index relative to the origin; the start of the resulting range is the position designated
                        by the sum of the origin and offset."
                     </div>
                     <div class="para e62">If length is specified, the end of the range is at a point adjacent to the character
                        designated by the origin added to the offset and length. If the offset is negative,
                        or
                        length is sufficiently large, a string-range can designate characters outside the
                        string-value of the initial pointer. In this case, characters are located using the
                        string-value of the entire document. It is also legal for length plus the origin to
                        exceed
                        the length of the string-value of the document by one, in order to accommodate ranges
                        that
                        include the last character of a document.
                     </div>
                     <div class="para e63">If length is not specified, it defaults to the value 1, and the string range contains
                        one character. If it is specified as 0, the zero-length range is interpreted as the
                        point
                        immediately preceding the origin character or offset character if there is one.
                        [
                        <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e64" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.tei-c.org/release/doc/tei-p5-doc/en/html/SA.html#SATSSR</div>]
                        <div class="popupBox e65">
                           <div class="popupLabel" onmouseover="$('#d1e123').show('1000');" onmouseout="$('#d1e123').hide('1000');">[ footnote ]</div>
                           <div id="d1e123" style="display: none;">
                              <div class="footnote">
                                 <div class="para e66">We are so far being quite restrictive in our interpretation of the term
                                    
                                    <div class="quote e67">fragmentIdentifier</div>. In theory this could encompass any means of
                                    identifying a section of the document, including functions in the xpointer framework,
                                    for example. In practise, fragment identifiers are context-dependent, relying both
                                    on
                                    the MIME type of the document identified by the URI and on the functionality of the
                                    technology used to call them. For example, in the context of an XInclude element,
                                    some
                                    xpointer functions will work, whereas in the context of a browser-based hyperlink,
                                    only @id or @xml:id values work. Since we are working outside XInclude, we take the
                                    narrow view that a fragment identifier in a string-range can only be the value of
                                    an
                                    @xml:id attribute somewhere in the current document or in an external XML
                                    document.
                                 </div>
                              </div>
                           </div>
                        </div>
                        
                     </div>
                  </div>
               </div>
            </div> In theory, at least, string-range can be used to indicate an arbitrary section
            of text in a TEI document, without regard to the way that text is nested within the
            document's
            structure. A range could start inside one element, and end inside another. Put another
            way, it
            can span multiple text() nodes. This means that if string-range() can be implemented,
            it would
            present a solution to the overlapping hierarchies problem.
         </div>
         <div class="para e68">Since string-range depends on marking a starting point and length of text within a
            section
            of the document, it runs immediately into a problem with the way XML regards some
            whitespace
            as "ignorable". Space between elements, for example, is not necessarily preserved
            during
            operations on the document. Someone editing a document, for example, might pretty-print
            it in
            order to make it more readable. This would introduce extra newline and space characters
            into
            the document, and immediately break any string-range() pointers. In other words, the
            ignorable
            whitespace content of the document could be changed as a part of normal processing
            that
            doesnât involve any editing of the document. This year, for the first time, TEI has
            begun to
            allow the xml:space attribute.
            [
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e69" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.tei-c.org/release/doc/tei-p5-doc/en/html/ref-att.global.html</div>] This
            means that the ignorable whitespace issue can be accommodated in a standard way.
         </div>
         <div class="para e70">A second problem, and one that applies to several of the pointer schemes that the
            Guidelines specify, is that they extend the XML data model. The TEI pointer scheme
            conceives
            of Nodes and Node Sets (both of which correspond to objects in the XML Infoset/DOM),
            but also
            Points and Ranges. Points are theoretical objects that must lie between element nodes
            or
            between characters in text nodes. This is a useful concept for marking arbitrary ranges
            in a
            document, but since it does not correspond to anything conceived of by the XML specifications,
            there are are no hooks in XML processing tools on which to hang Points. They cannot
            be passed
            to or returned by any XPath function or XSLT instruction. This makes implementation
            a complex
            task. At best, they can be encapsulated in special-purpose markup for passing as messages
            or
            handled as uninterpreted XPath expressions. The former technique introduces a problem
            of
            standardization and the latter requires second-order processing, with the dangers
            and
            difficulties that implies. Since string-range focuses on text, however, it is possible
            to
            count, for each text node, the concatenated length of text nodes on the preceding
            axis, and
            thereby to locate the text nodes containing the start and end points indicated in
            a
            string-range() pointer.
         </div>
         <div class="para e71">A third problem with string-range() as defined by the TEI, and in fact with all of
            its
            XPointer schemes, is that the specification (the TEI Guidelines) doesn't properly
            address what
            implementation would mean. The example in 16.9.3 uses string-range in XInclude elements
            to
            import text from one XML document to another. Of course this example doesnât work,
            because
            TEIâs string-range has no XInclude implementation. But the (unstated) implication
            seems to be
            that the string-range() function returns plain text only. String-range could certainly
            be used
            to declaratively indicate arbitrary sections of a document, but without some mechanism
            for
            executing it, there is nothing concrete for an implementer to do. A further complication
            is
            that there is nothing stopping a string-range from indicating text that overlaps elements
            in a
            non-hierarchical fashion. Should an implementer ignore elements thus captured? Or
            return them
            somehow? A related issue is the fact that since string-range defines text-based locations,
            elements are effectively invisible to it. A standalone element (e.g. 
            <div class="code e72">&lt;lb/&gt;</div>)
            immediately before text that one wants to mark with a string-range() won't automatically
            be
            part of that range.
         </div>
         <div class="para e73">Given the underspecified functionality of string-range, the authors have made some
            assumptions about implementation details. We have decided not to extend any existing
            XInclude
            implementation. Instead, we have decided to use string-range only in a declarative
            fashion, as
            a pointing mechanism within TEI, and we are developing XPath 2.0 functions that complement
            and
            use string-range(). Where it declares a range, they will be able to retrieve that
            range. We
            propose three functions, with the following signatures: 
            <div class="popupBox e74">
               <div class="popupLabel" onmouseover="$('#d1e145').show('1000');" onmouseout="$('#d1e145').hide('1000');">[ blockquote ]</div>
               <div id="d1e145" style="display: none;">
                  <div class="blockquote">
                     <div class="title e75">get-string-range(parentElt, offset1, offset2 [offset3, offset4, etc.]) </div>
                     <div class="para e76">- takes as arguments an XPath indicating a parent element (e.g. a div on which
                        
                        <div class="code e77">@xml:space="preserve"</div> as been set) and a set of integer pairs of character
                        offsets
                     </div>
                     <div class="para e78">- returns a sequence of strings derived from text nodes or portions of text nodes
                        between the pairs of points passed in as parameters.
                     </div>
                  </div>
               </div>
            </div>
            
            <div class="popupBox e79">
               <div class="popupLabel" onmouseover="$('#d1e156').show('1000');" onmouseout="$('#d1e156').hide('1000');">[ blockquote ]</div>
               <div id="d1e156" style="display: none;">
                  <div class="blockquote">
                     <div class="title e80">get-milestone-range(parentElt,offset1, offset2 [offset3, offset4, etc.])</div>
                     <div class="para e81">- takes as arguments an XPath indicating a parent element (e.g. a div on which
                        
                        <div class="code e82">@xml:space="preserve"</div> as been set) and a set of integer pairs of character
                        offsets
                     </div>
                     <div class="para e83">- returns a sequence where elements have been converted to milestones (e.g.
                        
                        <div class="code e84">&lt;p-start&gt;</div> and 
                        <div class="code e85">&lt;p-end&gt;</div> instead of
                        
                        <div class="code e86">&lt;p&gt;</div>).
                     </div>
                  </div>
               </div>
            </div>
            
            <div class="popupBox e87">
               <div class="popupLabel" onmouseover="$('#d1e176').show('1000');" onmouseout="$('#d1e176').hide('1000');">[ blockquote ]</div>
               <div id="d1e176" style="display: none;">
                  <div class="blockquote">
                     <div class="title e88">get-fragment-range(parentElt,offset1, offset2 [offset3, offset4, etc.])</div>
                     <div class="para e89">- takes as arguments an XPath indicating a parent element (e.g. a div on which
                        
                        <div class="code e90">@xml:space="preserve"</div> as been set) and a set of integer pairs of character
                        offsets
                     </div>
                     <div class="para e91">- returns a well-formed document fragment, where elements split by the range have
                        been
                        automatically opened or closed.
                     </div>
                  </div>
               </div>
            </div> An XSLT 2.0 stylesheet that implements these functions is under development at
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e92" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://github.com/hcayless/tei-string-range</div>. 
         </div>
         <div class="para e93">A fourth problem lies in the ease-of-use of the string-range function. Determining
            the
            index location of a piece of arbitrary text in a TEI document is prohibitively difficult
            for a
            human editor. It would be relatively easy to programmatically generate a string-range
            based on
            a selected range in an XML editor, like oXygen, but without this kind of functionality,
            it
            will be quite hard for someone marking up a document to create the expression with
            facility.
            What is needed at a bare minimum is a means to mark range starts and ends, in an
            editor-independent fashion, which can then be converted to string-range expressions.
            We
            propose using processing instructions in the form 
            <div class="code e94">&lt;?range-start
               r="n"?&gt;
            </div>/
            <div class="code e95">&lt;?range-end r="n"?&gt;</div>, where "n" identifies a particular
            range. Pairs of these will mark range starts and ends, and can be processed by an
            XSLT
            stylesheet to create 
            <div class="code e96">&lt;linkGrp&gt;</div>s containing links that use string-range() to
            identify the marked ranges.
         </div>
         <div class="para e97">Our implementation then, consists of a simple way to create string-range() pointers
            using
            a XSLT 2.0 stylesheet transformation and a set of functions that can be used to process
            the
            data marked by a string-range() in the context of an XPath 2.0 processor. Using these
            stylesheets it is possible, for example, to mark up ranges of text in a non-hierarchical
            way
            and then generate a set of links denoting those ranges, to which additional standoff
            markup
            may be linked, or one can convert a document with inline markup to one where a division
            contains plain text and a second division contains markup and pointers to the text.
         </div>
         <div class="para e98">While the authors intend this effort to be a practical addition to the TEIâs arsenal
            of
            tools, this kind of implementation raises theoretical questions that bring us back
            to the
            question of the adequacy of inline markup. In the example below, taken from
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e99" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://github.com/hcayless/tei-string-range/blob/master/bgu.1.116.xml</div>, a
            transcription of a document written on papyrus from Arsinoite in Egypt, some of the
            text
            content in the edition 
            <div class="code e100">&lt;div&gt;</div> is readable in the original, and some has been
            supplied by the editor. 
            <div class="popupBox e101">
               <div class="popupLabel" onmouseover="$('#d1e211').show('1000');" onmouseout="$('#d1e211').hide('1000');">[ blockquote ]</div>
               <div id="d1e211" style="display: none;">
                  <div class="blockquote">
                     <div class="para e102">
                        <div class="programlisting e103" xml:space="preserve">
                           &lt;lb n="1"/&gt;&lt;handShift new="m3"/&gt; &lt;num value="62"&gt;Î¾Î²&lt;/num&gt; 
                           &lt;lb n="2"/&gt;&lt;handShift new="m1"/&gt; 
                           &lt;supplied reason="lost"&gt;á¼ÏÏÎ¿ÎºÏÎ±ÏÎ¯Ï&lt;/supplied&gt;Î½&lt;supplied reason="lost"&gt;Î¹&lt;/supplied&gt;
                           
                           Ï&lt;supplied reason="lost"&gt;á¿· Îº&lt;/supplied&gt;Î±á½¶ á¼¹Î­ÏÎ±ÎºÎ¹ 
                           &lt;expan&gt;Î²&lt;supplied reason="lost"&gt;Î±Ï&lt;ex&gt;Î¹Î»Î¹Îºá¿·&lt;/ex&gt;&lt;/supplied&gt;&lt;/expan&gt; 
                           &lt;lb n="3"/&gt;&lt;supplied reason="lost"&gt;&lt;expan&gt;Î³Ï&lt;ex&gt;Î±Î¼Î¼Î±ÏÎµá¿&lt;/ex&gt;&lt;/expan&gt; 
                           &lt;expan&gt;á¼ÏÏ&lt;ex&gt;Î¹Î½Î¿ÎÏÎ¿Ï&lt;/ex&gt;&lt;/expan&gt;&lt;/supplied&gt; 
                           &lt;expan&gt;á¼©Ï&lt;supplied reason="lost"&gt;Î±Îº&lt;ex&gt;Î»ÎµÎ¯Î´Î¿Ï&lt;/ex&gt;&lt;/supplied&gt;&lt;/expan&gt;
                           &lt;supplied reason="lost"&gt; Î¼Îµ&lt;/supplied&gt;ÏÎ¯Î´Î¿Ï 
                           &lt;lb n="4"/&gt;&lt;supplied reason="lost"&gt;ÏÎ±Ïá½°&lt;/supplied&gt; 
                           á½©&lt;supplied reason="lost"&gt;ÏÎ¹Î³Î­&lt;/supplied&gt;&lt;unclear&gt;Î½&lt;/unclear&gt;Î¿ÏÏ 
                           á¼¸ÏÎ¹Î´&lt;supplied reason="lost"&gt;Ï&lt;/supplied&gt;ÏÎ¿&lt;supplied reason="lost"&gt;Ï&lt;/supplied&gt; 
                           &lt;lb n="5"/&gt;&lt;supplied reason="lost"&gt;Ïá¿¶Î½ á¼Ïá½¸&lt;/supplied&gt; Ïá¿&lt;supplied reason="lost"&gt;Ï&lt;/supplied&gt;
                           
                           &lt;expan&gt;Î¼&lt;supplied reason="lost"&gt;Î·ÏÏ&lt;/supplied&gt;Î¿&lt;ex&gt;ÏÏÎ»ÎµÏÏ&lt;/ex&gt;&lt;/expan&gt; 
                           &lt;expan&gt;á¼ÏÎ¿Î³Îµ&lt;supplied reason="lost"&gt;Î³Ï&lt;/supplied&gt;Î±&lt;ex&gt;Î¼Î¼Î­Î½Î¿Ï&lt;/ex&gt;&lt;/expan&gt; 
                           &lt;lb n="6"/&gt;&lt;supplied reason="lost"&gt;á¼ÏÊ¼ &lt;expan&gt;á¼Î¼ÏÏ&lt;ex&gt;Î´Î¿Ï&lt;/ex&gt;&lt;/expan&gt; &lt;/supplied&gt;
                           &lt;gap reason="lost" quantity="1" unit="character"/&gt;&lt;abbr&gt;ÎµÏÏ&lt;/abbr&gt; 
                           ÎÎµ&lt;gap reason="lost" quantity="1" unit="character"/&gt;&lt;abbr&gt;&lt;unclear&gt;Î¼Î¹&lt;/unclear&gt;
                           &lt;gap reason="illegible" quantity="1" unit="character"/&gt;&lt;/abbr&gt;.
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            
         </div>
         <div class="para e104">A transcription of the first six lines following the Leiden convention reads thus:
            
            <div class="popupBox e105">
               <div class="popupLabel" onmouseover="$('#d1e218').show('1000');" onmouseout="$('#d1e218').hide('1000');">[ blockquote ]</div>
               <div id="d1e218" style="display: none;">
                  <div class="blockquote">
                     <div class="para e106"> 
                        <div class="programlisting e107" xml:space="preserve">
                           (hand 3) Î¾Î² 
                           (hand 1) [á¼ÏÏÎ¿ÎºÏÎ±ÏÎ¯Ï]Î½[Î¹] Ï[á¿· Îº]Î±á½¶ á¼¹Î­ÏÎ±ÎºÎ¹ Î²[Î±Ï(Î¹Î»Î¹Îºá¿·)] 
                           [Î³Ï(Î±Î¼Î¼Î±ÏÎµá¿) á¼ÏÏ(Î¹Î½Î¿ÎÏÎ¿Ï)] á¼©Ï[Î±Îº(Î»ÎµÎ¯Î´Î¿Ï) Î¼Îµ]ÏÎ¯Î´Î¿Ï 
                           [ÏÎ±Ïá½°] á½©[ÏÎ¹Î³Î­]Î½Ì£Î¿ÏÏ á¼¸ÏÎ¹Î´[Ï]ÏÎ¿[Ï] 
                           [Ïá¿¶Î½ á¼Ïá½¸] Ïá¿[Ï] Î¼[Î·ÏÏ]Î¿(ÏÏÎ»ÎµÏÏ) á¼ÏÎ¿Î³Îµ[Î³Ï]Î±(Î¼Î¼Î­Î½Î¿Ï) 
                           [á¼ÏÊ¼ á¼Î¼ÏÏ(Î´Î¿Ï) Ì£]ÎµÏÏ( ) ÎÎµ[ Ì£]Î¼Ì£Î¹Ì£[ Ì£]( ).
                        </div> 
                     </div>
                  </div>
               </div>
            </div> A âplain textâ version, obtained by extracting the markup from the text content
            of the TEI document looks like: 
            <div class="popupBox e108">
               <div class="popupLabel" onmouseover="$('#d1e225').show('1000');" onmouseout="$('#d1e225').hide('1000');">[ blockquote ]</div>
               <div id="d1e225" style="display: none;">
                  <div class="blockquote">
                     <div class="para e109">
                        
                        <div class="programlisting e110" xml:space="preserve">
                           Î¾Î² 
                           á¼ÏÏÎ¿ÎºÏÎ±ÏÎ¯ÏÎ½Î¹ Ïá¿· ÎºÎ±á½¶ á¼¹Î­ÏÎ±ÎºÎ¹ Î²Î±ÏÎ¹Î»Î¹Îºá¿· 
                           Î³ÏÎ±Î¼Î¼Î±ÏÎµá¿ á¼ÏÏÎ¹Î½Î¿ÎÏÎ¿Ï á¼©ÏÎ±ÎºÎ»ÎµÎ¯Î´Î¿Ï Î¼ÎµÏÎ¯Î´Î¿Ï 
                           ÏÎ±Ïá½° á½©ÏÎ¹Î³Î­Î½Î¿ÏÏ á¼¸ÏÎ¹Î´ÏÏÎ¿Ï 
                           Ïá¿¶Î½ á¼Ïá½¸ Ïá¿Ï Î¼Î·ÏÏÎ¿ÏÏÎ»ÎµÏÏ á¼ÏÎ¿Î³ÎµÎ³ÏÎ±Î¼Î¼Î­Î½Î¿Ï 
                           á¼ÏÊ¼ á¼Î¼ÏÏÎ´Î¿Ï ÎµÏÏ ÎÎµÎ¼Î¹.
                           
                        </div>
                        
                     </div>
                  </div>
               </div>
            </div> while the extracted markup, with 
            <div class="code e111">&lt;ptr&gt;</div> elements that refer
            back to the text div looks like: 
            <div class="popupBox e112">
               <div class="popupLabel" onmouseover="$('#d1e235').show('1000');" onmouseout="$('#d1e235').hide('1000');">[ blockquote ]</div>
               <div id="d1e235" style="display: none;">
                  <div class="blockquote">
                     <div class="programlisting e113" xml:space="preserve">
                        
                        &lt;lb n="1"/&gt;
                        &lt;handShift new="m3"/&gt;
                        &lt;ptr target="#string-range('d2e120', 6, 1)"/&gt;
                        &lt;num value="62"&gt;
                        &lt;ptr target="#string-range('d2e120', 7, 2)"/&gt;
                        &lt;/num&gt;
                        &lt;ptr target="#string-range('d2e120', 9, 7)"/&gt;
                        &lt;lb n="2"/&gt;
                        &lt;handShift new="m1"/&gt;
                        &lt;ptr target="#string-range('d2e120', 16, 1)"/&gt;
                        &lt;supplied reason="lost"&gt;
                        &lt;ptr target="#string-range('d2e120', 17, 10)"/&gt;
                        &lt;/supplied&gt;
                        &lt;ptr target="#string-range('d2e120', 27, 1)"/&gt;
                        &lt;supplied reason="lost"&gt;
                        &lt;ptr target="#string-range('d2e120', 28, 1)"/&gt;
                        &lt;/supplied&gt;
                        &lt;ptr target="#string-range('d2e120', 29, 2)"/&gt;
                        &lt;supplied reason="lost"&gt;
                        &lt;ptr target="#string-range('d2e120', 31, 3)"/&gt;
                        &lt;/supplied&gt;
                        &lt;ptr target="#string-range('d2e120', 34, 10)"/&gt;
                        &lt;expan&gt;
                        &lt;ptr target="#string-range('d2e120', 44, 1)"/&gt;
                        &lt;supplied reason="lost"&gt;
                        &lt;ptr target="#string-range('d2e120', 45, 2)"/&gt;
                        &lt;ex&gt;
                        &lt;ptr target="#string-range('d2e120', 47, 5)"/&gt;
                        &lt;/ex&gt;
                        &lt;/supplied&gt;
                        &lt;/expan&gt;
                        &lt;ptr target="#string-range('d2e120', 52, 7)"/&gt;
                        &lt;lb n="3"/&gt;
                        &lt;supplied reason="lost"&gt;
                        &lt;expan&gt;
                        &lt;ptr target="#string-range('d2e120', 59, 2)"/&gt;
                        &lt;ex&gt;
                        &lt;ptr target="#string-range('d2e120', 61, 7)"/&gt;
                        &lt;/ex&gt;
                        &lt;/expan&gt;
                        &lt;ptr target="#string-range('d2e120', 68, 1)"/&gt;
                        &lt;expan&gt;
                        &lt;ptr target="#string-range('d2e120', 69, 3)"/&gt;
                        &lt;ex&gt;
                        &lt;ptr target="#string-range('d2e120', 72, 7)"/&gt;
                        &lt;/ex&gt;
                        &lt;/expan&gt;
                        &lt;/supplied&gt;
                        &lt;ptr target="#string-range('d2e120', 79, 1)"/&gt;
                        &lt;expan&gt;
                        &lt;ptr target="#string-range('d2e120', 80, 2)"/&gt;
                        &lt;supplied reason="lost"&gt;
                        &lt;ptr target="#string-range('d2e120', 82, 2)"/&gt;
                        &lt;ex&gt;
                        &lt;ptr target="#string-range('d2e120', 84, 6)"/&gt;
                        &lt;/ex&gt;
                        &lt;/supplied&gt;
                        &lt;/expan&gt;
                        &lt;supplied reason="lost"&gt;
                        &lt;ptr target="#string-range('d2e120', 90, 3)"/&gt;
                        &lt;/supplied&gt;
                        &lt;ptr target="#string-range('d2e120', 93, 12)"/&gt;
                        &lt;lb n="4"/&gt;
                        &lt;supplied reason="lost"&gt;
                        &lt;ptr target="#string-range('d2e120', 105, 4)"/&gt;
                        &lt;/supplied&gt;
                        &lt;ptr target="#string-range('d2e120', 109, 2)"/&gt;
                        &lt;supplied reason="lost"&gt;
                        &lt;ptr target="#string-range('d2e120', 111, 4)"/&gt;
                        &lt;/supplied&gt;
                        &lt;unclear&gt;
                        &lt;ptr target="#string-range('d2e120', 115, 1)"/&gt;
                        &lt;/unclear&gt;
                        &lt;ptr target="#string-range('d2e120', 116, 8)"/&gt;
                        &lt;supplied reason="lost"&gt;
                        &lt;ptr target="#string-range('d2e120', 124, 1)"/&gt;
                        &lt;/supplied&gt;
                        &lt;ptr target="#string-range('d2e120', 125, 2)"/&gt;
                        &lt;supplied reason="lost"&gt;
                        &lt;ptr target="#string-range('d2e120', 127, 1)"/&gt;
                        &lt;/supplied&gt;
                        &lt;ptr target="#string-range('d2e120', 128, 7)"/&gt;
                        &lt;lb n="5"/&gt;
                        &lt;supplied reason="lost"&gt;
                        &lt;ptr target="#string-range('d2e120', 135, 7)"/&gt;
                        &lt;/supplied&gt;
                        &lt;ptr target="#string-range('d2e120', 142, 3)"/&gt;
                        &lt;supplied reason="lost"&gt;
                        &lt;ptr target="#string-range('d2e120', 145, 1)"/&gt;
                        &lt;/supplied&gt;
                        &lt;ptr target="#string-range('d2e120', 146, 1)"/&gt;
                        &lt;expan&gt;
                        &lt;ptr target="#string-range('d2e120', 147, 1)"/&gt;
                        &lt;supplied reason="lost"&gt;
                        &lt;ptr target="#string-range('d2e120', 148, 3)"/&gt;
                        &lt;/supplied&gt;
                        &lt;ptr target="#string-range('d2e120', 151, 1)"/&gt;
                        &lt;ex&gt;
                        &lt;ptr target="#string-range('d2e120', 152, 6)"/&gt;
                        &lt;/ex&gt;
                        &lt;/expan&gt;
                        &lt;ptr target="#string-range('d2e120', 158, 1)"/&gt;
                        &lt;expan&gt;
                        &lt;ptr target="#string-range('d2e120', 159, 5)"/&gt;
                        &lt;supplied reason="lost"&gt;
                        &lt;ptr target="#string-range('d2e120', 164, 2)"/&gt;
                        &lt;/supplied&gt;
                        &lt;ptr target="#string-range('d2e120', 166, 1)"/&gt;
                        &lt;ex&gt;
                        &lt;ptr target="#string-range('d2e120', 167, 6)"/&gt;
                        &lt;/ex&gt;
                        &lt;/expan&gt;
                        &lt;ptr target="#string-range('d2e120', 173, 7)"/&gt;
                        &lt;lb n="6"/&gt;
                        &lt;supplied reason="lost"&gt;
                        &lt;ptr target="#string-range('d2e120', 180, 4)"/&gt;
                        &lt;expan&gt;
                        &lt;ptr target="#string-range('d2e120', 184, 4)"/&gt;
                        &lt;ex&gt;
                        &lt;ptr target="#string-range('d2e120', 188, 3)"/&gt;
                        &lt;/ex&gt;
                        &lt;/expan&gt;
                        &lt;ptr target="#string-range('d2e120', 191, 1)"/&gt;
                        &lt;/supplied&gt;
                        &lt;gap reason="lost" quantity="1" unit="character"/&gt;
                        &lt;abbr&gt;
                        &lt;ptr target="#string-range('d2e120', 192, 3)"/&gt;
                        &lt;/abbr&gt;
                        &lt;ptr target="#string-range('d2e120', 195, 3)"/&gt;
                        &lt;gap reason="lost" quantity="1" unit="character"/&gt;
                        &lt;abbr&gt;
                        &lt;unclear&gt;
                        &lt;ptr target="#string-range('d2e120', 198, 2)"/&gt;
                        &lt;/unclear&gt;
                        &lt;gap reason="illegible" quantity="1" unit="character"/&gt;
                        &lt;/abbr&gt;
                        
                        
                     </div>
                  </div>
               </div>
            </div>
            
         </div>
         <div class="para e114">This example is actually a fairly unproblematic one, since it does not contain any
            alternate readings or editorial corrections or normalization. Yet even here there
            are
            difficulties: âÎÎµÎ¼Î¹â (as is clear in the Leiden version) contains two gaps and unclear
            text,
            but since these visual features of the document are indicated using 
            <div class="code e115">&lt;gap/&gt;</div>
            and 
            <div class="code e116">&lt;unclear/&gt;</div> tags, it looks like an undamaged word-fragment in the plain
            text version. It must be noted that the traditional way of publishing these documents
            in print
            employs inline markup. So, in this example at least, a plain text version would itself
            be a
            somewhat misleading version of the document. This is not a refutation of Schmidtâs
            points,
            because there are many other ways one could encode the document, using standoff markup,
            that
            would mitigate this problem. But perhaps it suggests that there are at least some
            uses of
            inline markup (when it encodes features of the text that cannot be expressed straightforwardly
            in Unicode) that may be hard to replace.
         </div>
         <div class="para e117">The ability to extract the markup from the text and still preserve the manipulability
            it
            previously enjoyed suggests some additional possibilities: one could now layer in
            name and
            place information, lexical and grammatical analysis, structural information, such
            as line
            containment, rather than just marking line beginnings, etc. Different views could
            be
            generated, using these individually or using combinations of them. Nothing stops us
            from
            layering these on top of inline markup either.
         </div>
         <div class="para e118">Since it relies on character offsets, any implementation of string-range() is inherently
            somewhat brittle. The adoption of 
            <div class="code e119">@xml:space</div> by the TEI closes off one means by which links
            using string-range could be broken, but can do nothing to mitigate the danger of someone
            editing the text directly. Projects that use this mechanism will have to prevent the
            breakage
            of string-range links either through workflow or editing environments that manage
            shifting
            offsets.
         </div>
         <div class="para e120">We have already learned a good deal from our implementation efforts to date. If this
            approach is something other users of TEI or even the TEI Consortium itself wishes
            to support,
            there are several changes we would suggest. First, that the guidelines be emended
            to contain a
            more thorough specification of the TEI pointer schemes. Second, that a working group
            be formed
            look at practical implementations of standoff markup and on appropriate usage patterns
            for
            these. We must note that the example stylesheet we provide to generate a text + standoff
            markup version of a valid TEI document results in invalid TEI when applied to the
            bgu.1.116
            example, because elements like 
            <div class="code e121">&lt;ex/&gt;</div> can only contain text, not pointers to
            text. Moreover, if one wants to extract a string-range with the inline markup converted
            to
            standalone elements, then again the result will not be valid TEI. We hope our efforts
            outlined
            above will prompt some useful examination and perhaps revision of the TEI guidelines
            perspective on standoff markup.
         </div>
      </div><a name="BibliographyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e122">
         <div class="title e123">Bibliography</div>
         <div class="bibliomixed e124" xml:id="TEIP5">Burnard, L. and S. Bauman (eds), 
            <div class="emphasis e125" role="ital">Text Encoding
               Initiative: P5 Guidelines
            </div>, 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e126" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.tei-c.org/Guidelines/P5/</div>
            (2007).
         </div>
         <div class="bibliomixed e127" xml:id="XPtr">DeRose, Steve, Eve Maler, and Ron Daniel Jr., 
            <div class="emphasis e128" role="ital">XML Pointer Language (XPointer) Version 1.0</div>,
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e129" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/WD-xptr</div> (2001).
         </div>
         <div class="bibliomixed e130" xml:id="Schmidt2010">Schmidt, Desmond, 
            <div class="quote e131">The inadequacy of embedded markup for
               cultural heritage texts
            </div>, 
            <div class="emphasis e132" role="ital">Literary and Linguistic
               Computing
            </div> 25.2 (2010).
         </div>
      </div>
   </div>
</div>