<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#ModelingoverlappingstructuresANCHOR" name="ModelingoverlappingstructuresTOC">Modeling overlapping structures</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#1MotivationandrelatedworkANCHOR" name="1MotivationandrelatedworkTOC">1. Motivation and related work</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#11GraphsanddocumentsANCHOR" name="11GraphsanddocumentsTOC">1.1. Graphs and documents</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#12TheproblemofserializationANCHOR" name="12TheproblemofserializationTOC">1.2. The problem of serialization</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#13TheapproachofthispaperANCHOR" name="13TheapproachofthispaperTOC">1.3 The approach of this paper</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#2ChildarcordereddirectedgraphsANCHOR" name="2ChildarcordereddirectedgraphsTOC">2. Child-arc-ordered directed graphs</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#3OverlaponlydocumentsANCHOR" name="3OverlaponlydocumentsTOC">3. Overlap-only documents</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#4CorrespondencebetweenagraphandadocumentANCHOR" name="4CorrespondencebetweenagraphandadocumentTOC">4. Correspondence between a graph and a document</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#5MainresultsANCHOR" name="5MainresultsTOC">5. Main results</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#6CheckingfullcompletionacyclicityANCHOR" name="6CheckingfullcompletionacyclicityTOC">6. Checking full-completion-acyclicity</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#7ConclusionandfutureworkANCHOR" name="7ConclusionandfutureworkTOC">7. Conclusion and future work</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#NotationandsymbolsANCHOR" name="NotationandsymbolsTOC">Notation and symbols</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ReferencesANCHOR" name="ReferencesTOC">References</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">anonymous</div>
         <div class="singletermTERMS">arcs</div>
         <div class="singletermTERMS">Auxiliary concepts</div>
         <div class="singletermTERMS">and</div>
         <div class="singletermTERMS">as well as distinct roots</div>
         <div class="singletermTERMS">all</div>
         <div class="singletermTERMS">ancestral precedence</div>
         <div class="singletermTERMS">at least</div>
         <div class="singletermTERMS">Algorithm:</div>
         <div class="singletermTERMS">August 6 - 9, 2013</div>
         <div class="singletermTERMS">Associate professor</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">bilocation tag</div>
         <div class="singletermTERMS">Balisage 2008</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2013</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">child-arc-ordered</div>
         <div class="singletermTERMS">child-arcs</div>
         <div class="singletermTERMS">ch(v)</div>
         <div class="singletermTERMS">ch(v)(n)</div>
         <div class="singletermTERMS">ch(v,n)</div>
         <div class="singletermTERMS">child-arc-ordered directed graphs</div>
         <div class="singletermTERMS">can</div>
         <div class="singletermTERMS">completion-acyclic</div>
         <div class="singletermTERMS">child-arc-ordered directed graph</div>
         <div class="singletermTERMS">children</div>
         <div class="singletermTERMS">contain</div>
         <div class="singletermTERMS">correspond</div>
         <div class="singletermTERMS">completion-acyclicity</div>
         <div class="singletermTERMS">cyclic</div>
         <div class="singletermTERMS">Computers and the Humanities</div>
         <div class="singletermTERMS">cmsmcq@blackmesatech.com</div>
         <div class="singletermTERMS">claus.huitfeldt@uib.no</div>
         <div class="singletermTERMS">Claus</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">def</div>
         <div class="singletermTERMS">disconnected</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">edges</div>
         <div class="singletermTERMS">Examples</div>
         <div class="singletermTERMS">end after</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
         <div class="singletermTERMS">fall</div>
         <div class="singletermTERMS">full-completion-acyclicity</div>
         <div class="singletermTERMS">fully-completion-acyclic</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
         <div class="singletermTERMS">going out of</div>
         <div class="singletermTERMS">globally ordered Goddag</div>
         <div class="singletermTERMS">green arrows</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">Huitfeldt</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">is</div>
         <div class="singletermTERMS">in any oo-serialization of the CODG</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">Literary and Linguistic Computing</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">must precede</div>
         <div class="singletermTERMS">Michael</div>
         <div class="singletermTERMS">Marcoux</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">natural</div>
         <div class="singletermTERMS">noDAG</div>
         <div class="singletermTERMS">nodes</div>
         <div class="singletermTERMS">Note:</div>
         <div class="singletermTERMS">not</div>
         <div class="singletermTERMS">node-ordered DAGs</div>
         <div class="singletermTERMS">node-ordered-DAGs</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">overlap-only (oo) TexMecs</div>
         <div class="singletermTERMS">order</div>
         <div class="singletermTERMS">orders its children</div>
         <div class="singletermTERMS">oo-document</div>
         <div class="singletermTERMS">oo-serializable</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">poem</div>
         <div class="singletermTERMS">precede</div>
         <div class="singletermTERMS">Proof sketch.</div>
         <div class="singletermTERMS">Proof sketch of termination:</div>
         <div class="singletermTERMS">Proof sketch that ROR orders all pairs of roots:</div>
         <div class="singletermTERMS">Proof sketch that ssb(G, ROR) is acyclic:</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
         <div class="singletermTERMS">quote</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">restricted</div>
         <div class="singletermTERMS">ranges</div>
         <div class="singletermTERMS">root</div>
         <div class="singletermTERMS">reduced</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">sibling-precedence</div>
         <div class="singletermTERMS">silly decision</div>
         <div class="singletermTERMS">silly decisions</div>
         <div class="singletermTERMS">sp</div>
         <div class="singletermTERMS">should-end-after</div>
         <div class="singletermTERMS">sea</div>
         <div class="singletermTERMS">should-end-after additions</div>
         <div class="singletermTERMS">seaa</div>
         <div class="singletermTERMS">should-start-before</div>
         <div class="singletermTERMS">ssb</div>
         <div class="singletermTERMS">should-start-before additions</div>
         <div class="singletermTERMS">ssba</div>
         <div class="singletermTERMS">some</div>
         <div class="singletermTERMS">Sibling precedence</div>
         <div class="singletermTERMS">serialization</div>
         <div class="singletermTERMS">something</div>
         <div class="singletermTERMS">sp-consistent</div>
         <div class="singletermTERMS">single-rooted extension</div>
         <div class="singletermTERMS">Senior consultant</div>
         <div class="singletermTERMS">Sperberg-McQueen</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">Trojan Horse</div>
         <div class="singletermTERMS">through</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
         <div class="singletermTERMS">verse</div>
         <div class="singletermTERMS">virtual element</div>
         <div class="singletermTERMS">vertices</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">xyz</div>
         <div class="singletermTERMS">x ∈ y</div>
         <div class="singletermTERMS">x ∪ y</div>
         <div class="singletermTERMS">x ∩ y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
         <div class="singletermTERMS">yves.marcoux@umontreal.ca</div>
         <div class="singletermTERMS">Yves</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="ModelingoverlappingstructuresANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3">
      <div class="title e1">Modeling overlapping structures</div>
      <div class="subtitle e2">Graphs and serializability</div>
      <div class="info e3">
         <div class="confgroup e4">
            <div class="conftitle e5">Balisage: The Markup Conference 2013</div>
            <div class="confdates e6">August 6 - 9, 2013</div>
         </div>
         <div class="abstract e7">
            <div class="para e8">The problem of overlapping structures has long been familiar to the
               structured document community. In a poem, for example, the verse and line
               structures overlap, and having them both available simultaneously is
               convenient, and sometimes necessary (for example for automatic analyses).
               However, only structures that embed nicely can be represented directly in
               XML. Proposals to address this problem include XML solutions (based
               essentially on a layer of semantics) and non-XML ones. Among the latter is
               TexMecs 
               <div class="xref e9" linkend="HS2003"></div>, a markup language that allows overlap
               (and many other features).
            </div>
            <div class="para e10">XML documents, when viewed as graphs, correspond to trees. Marcoux 
               <div class="xref e11" linkend="M2008"></div> characterized overlap-only TexMecs documents by
               showing that they correspond exactly to 
               <div class="emphasis e12" role="ital">completion-acyclic node-ordered directed acyclic graphs</div>.
               In this paper, we elaborate on that result in two ways.
            </div>
            <div class="para e13">First, we cast it in the setting of a strictly larger class of graphs,
               
               <div class="emphasis e14" role="ital">child-arc-ordered directed graphs</div>, that
               includes multi-graphs and non-acyclic graphs, and show that —
               somewhat surprisingly — it does not hold in general for graphs with
               multiple roots. Second, we formulate a stronger condition, 
               <div class="emphasis e15" role="ital">full-completion-acyclicity</div>, that guarantees
               correspondence with an overlap-only document, even for graphs that have
               multiple roots.
            </div>
            <div class="para e16">The definition of fully-completion-acyclic graph does not in itself
               suggest an efficient algorithm for checking the condition, nor for
               computing a corresponding overlap-only document when the condition is
               satisfied. We present basic polynomial-time upper bounds on the complexity
               of accomplishing those tasks.
            </div>
         </div>
         <div class="author e17">
            <div class="personname e18">
               <div class="firstname e19">Yves</div>
               <div class="surname e20">Marcoux</div>
            </div>
            <div class="personblurb e21">
               <div class="para e22"></div>
            </div>
            <div class="affiliation e23">
               <div class="jobtitle e24">Associate professor</div>
               <div class="orgname e25">Université de Montréal, Canada</div>
            </div>
            <div class="email e26">yves.marcoux@umontreal.ca</div>
         </div>
         <div class="author e27">
            <div class="personname e28">
               <div class="firstname e29">Michael</div>
               <div class="surname e30">Sperberg-McQueen</div>
            </div>
            <div class="personblurb e31">
               <div class="para e32"></div>
            </div>
            <div class="affiliation e33">
               <div class="jobtitle e34">Senior consultant</div>
               <div class="orgname e35">Black Mesa
                  Technologies
               </div>
            </div>
            <div class="email e36">cmsmcq@blackmesatech.com</div>
         </div>
         <div class="author e37">
            <div class="personname e38">
               <div class="firstname e39">Claus</div>
               <div class="surname e40">Huitfeldt</div>
            </div>
            <div class="personblurb e41">
               <div class="para e42"></div>
            </div>
            <div class="affiliation e43">
               <div class="jobtitle e44">Associate professor</div>
               <div class="orgname e45">University of Bergen, Norway</div>
            </div>
            <div class="email e46">claus.huitfeldt@uib.no</div>
         </div>
         <div class="legalnotice e47">
            <div class="para e48">Copyright © 2013 by the authors.  Used with permission.</div>
         </div>
      </div><a name="1MotivationandrelatedworkANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e49">
         <div class="title e50">1. Motivation and related work</div><a name="11GraphsanddocumentsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e51">
            <div class="title e52">1.1. Graphs and documents</div>
            <div class="para e53">Many operations are more conveniently performed on a graph
               	representation than on a linear representation of a marked up
               	document, and vice versa. One of the strengths of XML is that
               	XML documents in serial form are readily deserialized into
               	ordered trees, which form a convenient data structure for many
               	useful operations.
               <div class="popupBox e54">
                  <div class="popupLabel" onmouseover="$('#d1e94').show('1000');" onmouseout="$('#d1e94').hide('1000');">[ footnote ]</div>
                  <div id="d1e94" style="display: none;">
                     <div class="footnote">
                        <div class="para e55">The authors thank Deborah A. Lapeyre and several 
                           	    anonymous Balisage peer reviewers for their extensive
                           	    help in improving the presentation of this paper.
                           	  
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e56">So-called “XML trees” are directed acyclic
               	graphs with single parenthood and a total ordering on leaf
               	nodes. While this constitutes an intuitively natural and
               	generally suitable model for the representation of the
               	structure of most documents, and for most purposes, it also
               	poses a challenge for the representation of complex structures
               	such as overlapping, fragmented or disordered document
               	elements, and multiple co-existing alternative structures,
               	which allow for a more natural representation of complex
               	documents in a wide range of situations.
            </div>
            <div class="para e57">For such purposes, a different kind of graph
               	representation has been proposed, the so-called Goddag 
               <div class="xref e58" linkend="SH2004"></div>. Roughly, Goddags (
               <div class="emphasis e59" role="ital">General Ordered-Descendant Directed Acyclic
                  	  Graphs
               </div>) are like XML trees except that they allow
               	multiple parenthood and do not require a total ordering on
               	leaf nodes. (Thus, XML trees constitute a subset of
               	Goddags.)
            </div>
            <div class="para e60">Documents using different techniques for representing such
               	structures in XML form (e.g., milestones, fragmentation,
               	virtual elements, etc.  
               <div class="xref e61" linkend="B1995"></div> 
               <div class="xref e62" linkend="SH1999"></div> 
               <div class="xref e63" linkend="W2005"></div>) can be mapped onto
               	Goddags, though not without application-specific mechanisms
               	typically involving levels of indirection which may appear
               	cumbersome. The experimental markup system TexMecs 
               <div class="xref e64" linkend="HS2003"></div> offers mechanisms for the representation of
               	complex structures which can be mapped on to Goddags
               	independently of such knowledge.
            </div>
            <div class="para e65">Since its introduction, the Goddag data structure has
               	frequently been cited, and it is used as a reference in
               	various works on overlap. (For example, Moore 
               <div class="xref e66" linkend="M2012"></div>
               	studied Goddags in the context of access control, and
               	introduced the notion of 
               <div class="emphasis e67">globally ordered
                  	  Goddag
               </div>.) However, the original description of
               	Goddags is rather informal, and exhibits the kinds of gaps,
               	vaguenesses, and ambiguities that have, over time, given
               	informality a bad name among mathematicians and others
               	interested in firm results.
            </div>
            <div class="para e68">For example, it was  conjectured that a
               	linearized document which made use, in addition to the
               	mechanisms of XML, only of markup for overlapping elements,
               	could be represented by a Goddag with a total order on leaf
               	nodes (so-called 
               <div class="emphasis e69" role="ital">restricted</div>
               	Goddags), but no proofs were given of this fact. The paper was
               	silent and its authors agnostic about the serializability of
               	graphs with multiple roots, and the relationship between Goddags
               	and markup in terms of serializability was not systematically
               	investigated. In 
               <div class="xref e70" linkend="HS2003"></div>, it was assumed, but
               	no attempt was made to prove, that all TexMecs documents could
               	be represented as Goddags, or that all Goddags could be
               	serialized as TexMecs documents. The present paper is a modest
               	contribution towards straightening up the situation, by way of a
               	systematic study of the fine point of the complex relationship
               	between markup formalisms like TexMecs and graph structures like
               	Goddags.
            </div>
         </div><a name="12TheproblemofserializationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e71">
            <div class="title e72">1.2. The problem of serialization</div>
            <div class="para e73">The general problem is this: whenever a markup system (be it
               	XML, TexMecs, or another system) provides more than one way to
               	represent a given abstract structure,
               <div class="popupBox e74">
                  <div class="popupLabel" onmouseover="$('#d1e139').show('1000');" onmouseout="$('#d1e139').hide('1000');">[ footnote ]</div>
                  <div id="d1e139" style="display: none;">
                     <div class="footnote">
                        <div class="para e75">We focus here exclusively on graphs as the abstract
                           	    structures conveyed by marked up documents.
                        </div>
                     </div>
                  </div>
               </div> 
               	that same abstract structure can be written out again
               	(serialized) in more than one way.  Can we control the
               	serialization process to provide the marked-up forms we find
               	easiest to work with at a given moment?  Can we tell, by
               	inspection of a given graph, what serialization formats are
               	possible for the graph?  In many cases, a marked up form using
               	overlapping elements, seems to at least some observers to be the
               	most 
               <div class="quote e76">natural</div> representation of a given document;
               	when can a graph be serialized using overlap alone, and when
               	does it require use of the more powerful mechanisms of virtual
               	or discontinuous elements?
               
            </div>
            <div class="para e77">A concrete example may help illustrate the point.</div>
            <div class="para e78">
               
               	In the following fragment (adapted from 
               <div class="xref e79" linkend="D2004"></div>), the 
               <div class="code e80">verse</div> elements are
               	empty milestones marking the beginning and end of verses, in
               	
               <div class="quote e81">Trojan Horse</div> style markup.  A Goddag structure
               	representing this fragment would have nodes for the verses,
               	but those nodes do not correspond one to one with XML elements
               	in this serialization:
               <div class="popupBox e82">
                  <div class="popupLabel" onmouseover="$('#d1e158').show('1000');" onmouseout="$('#d1e158').hide('1000');">[ footnote ]</div>
                  <div id="d1e158" style="display: none;">
                     <div class="footnote">
                        <div class="para e83">A number of other equivalent encodings are of
                           	    course possible.  The 
                           <div class="code e84">q</div> elements can be fragmented
                           	    in TEI style to signal that multiple XML elements together
                           	    make up a single logical unit.  In a Goddag structure built
                           	    from this example, one would expect to find one node in the
                           	    graph for each logical 
                           <div class="code e85">q</div> element, rather one for
                           	    each 
                           <div class="code e86">q</div> element in the XML.
                           	    
                           
                           <div class="programlisting e87" xml:space="preserve">&lt;div xmlns="http://www.tei-c.org/ns/1.0"&gt;
                              &lt;p&gt;
                              &lt;verse n="Jer.2.1"&gt;Moreover the word 
                              of the LORD came to me, saying,&lt;/verse&gt;
                              &lt;verse n="Jer.2.2"&gt;
                              &lt;q xml:id="Q-Jer.2.2-A" part="I"&gt;
                              	Go and cry in the hearing of 
                              	Jerusalem, saying, 
                              &lt;q xml:id="Q-Jer.2.2-B" part="I"&gt;
                              	  Thus says the LORD:
                              &lt;q xml:id="Q-Jer.2.2-C" part="I"&gt;
                              	    I remember you, 
                              The kindness of your youth, 
                              	    The love of your betrothal, 
                              	    When you went after Me in the wilderness, 
                              	    In a land not sown. 
                              	  &lt;/q&gt;
                              &lt;/q&gt;
                              &lt;/q&gt;
                              &lt;/verse&gt;
                              &lt;verse n="Jer.2.3"&gt;
                              &lt;q part="M" prev="#Q-Jer.2.2-A"&gt;
                              &lt;q part="F" prev="#Q-Jer.2.2-B"&gt;
                              &lt;q part="F" prev="#Q-Jer.2.2-C"&gt;
                              	    Israel [was] holiness to the LORD, 
                              	    The firstfruits of His increase.  
                              	    All that devour him will offend;
                              	    Disaster will come upon them,
                              	  &lt;/q&gt;
                              	  says the LORD.
                              	&lt;/q&gt;
                              &lt;/q&gt;
                              &lt;/verse&gt;
                              &lt;/p&gt;
                              &lt;/div&gt;
                              
                           </div>
                        </div>
                        <div class="para e88">Or the 
                           <div class="code e89">verse</div> elements can be fragmented.
                           	    Or TEI virtual elements can be used to represent parts of
                           	    the document structure that do not fit neatly into a 
                           	    hierarchy.
                        </div>
                     </div>
                  </div>
               </div>
               
               
               <div class="programlisting e90" xml:space="preserve">&lt;div xmlns="http://www.tei-c.org/ns/1.0"&gt;
                  &lt;p&gt;
                  &lt;verse xml:id="Jer.2.1"/&gt;
                  Moreover the word of the LORD 
                  came to me, saying,
                  &lt;verse eID="#Jer.2.1"/&gt;
                  &lt;q n="Q-Jer.2.2-A"&gt;
                  &lt;verse xml:id="Jer.2.2"/&gt;
                  Go and cry in the
                  hearing of Jerusalem, saying,
                  &lt;q n="Q-Jer.2.2-B"&gt;
                  	Thus says the LORD:
                  	&lt;q n="Q-Jer.2.2-C"&gt;
                  	  I remember you, 
                  	  The kindness of your youth, 
                  	  The love of your betrothal, 
                  	  When you went after Me in the wilderness, 
                  	  In a land not sown.
                  	  &lt;verse eID="#Jer.2.2"/&gt;
                  	  &lt;verse xml:id="Jer.2.3"/&gt;
                  	  Israel [was] holiness to the LORD, 
                  	  The firstfruits of His increase.  
                  	  All that devour him will offend; 
                  	  Disaster will come upon them,
                  	&lt;/q&gt;
                  	&lt;!--True Close Q-Jer.2.2-C--&gt;
                  says the LORD.&lt;/q&gt;
                  &lt;verse eID="#Jer.2.3"/&gt;
                  &lt;!--* ... *--&gt;
                  &lt;/q&gt;
                  &lt;/p&gt;
                  &lt;/div&gt;
               </div>      
               
            </div>
            <div class="para e91">The same Goddag structure can also be serialized in an extended
               	form of TexMecs notation.
               <div class="popupBox e92">
                  <div class="popupLabel" onmouseover="$('#d1e183').show('1000');" onmouseout="$('#d1e183').hide('1000');">[ footnote ]</div>
                  <div id="d1e183" style="display: none;">
                     <div class="footnote">
                        <div class="para e93">Readers who have not recently reviewed the definition
                           	    of TexMecs may need to be reminded of some basics of 
                           	    TexMecs notation.  The conventions used here are these;
                           	    most are adopted from 
                           <div class="xref e94" linkend="HS2003"></div> but
                           	    bilocation tags are new; they are introduced in order to
                           	    allow the serialization of a larger class of graphs.
                           	    
                           <div class="itemizedlist e95">
                              <div class="listitem e96">
                                 <div class="para e97">Start-, end-, and sole-tags for an element 
                                    		  of type 
                                    <div class="code e98">e</div> take the
                                    		  forms 
                                    <div class="code e99">&lt;e|</div>, 
                                    <div class="code e100">|e&gt;</div>
                                    		  
                                    <div class="code e101">&lt;e&gt;</div>.
                                 </div>
                              </div>
                              <div class="listitem e102">
                                 <div class="para e103">Elements may overlap.</div>
                              </div>
                              <div class="listitem e104">
                                 <div class="para e105">A unique identifier may be assigned to an
                                    		  element by following its generic identifier immediately
                                    		  with 
                                    <div class="code e106">@</div> and an ID value.  These IDs are
                                    		  recognized and handled at the TexMecs level; they do 
                                    		  not require declaration or application-level
                                    		  semantics.
                                    		
                                 </div>
                              </div>
                              <div class="listitem e107">
                                 <div class="para e108">The generic identifier may be omitted from
                                    		  start- and end-tags, in which case they mark a
                                    		  pseduo-element: an arbitrary portion of the
                                    		  document, typically marked this way in order to
                                    		  assign an identifier to that segment of the text.
                                    		  In the examples in this paper, we assume a
                                    		  convention that wrapping a text node in such an
                                    		  
                                    <div class="quote e109">anonymous</div> element does not create a
                                    		  new node but merely gives an identifier for the text
                                    		  node.  (This is not stated normatively in the
                                    		  definition of TexMecs.)
                                    		
                                 </div>
                              </div>
                              <div class="listitem e110">
                                 <div class="para e111">
                                    		  The notation 
                                    <div class="code e112">&lt;^e^xyz&gt;</div> marks a
                                    		  
                                    <div class="quote e113">virtual element</div>, whose type is
                                    		  
                                    <div class="code e114">e</div> and whose children are those of the element
                                    		  whose ID is 
                                    <div class="code e115">xyz</div>.  Virtual elements thus
                                    		  serve as additional parents to nodes already
                                    		  present with other parents.
                                    		
                                 </div>
                                 <div class="para e116">
                                    		  The analogous notation 
                                    <div class="code e117">&lt;^^xyz&gt;</div> is
                                    		  used to refer to the pseudo-element whose ID is
                                    		  
                                    <div class="code e118">xyz</div>.  
                                    		
                                 </div>
                              </div>
                              <div class="listitem e119">
                                 <div class="para e120">
                                    		  The notation 
                                    <div class="code e121">&lt;=xyz=&gt;</div> is a 
                                    		  
                                    <div class="quote e122">bilocation tag</div>, used to signal
                                    		  that the element whose ID is 
                                    <div class="code e123">xyz</div>
                                    		  appears as a child of the immediately open
                                    		  elements, at the location indicated.  
                                 </div>
                                 <div class="para e124">
                                    		  Bilocation tags are not defined in 
                                    <div class="xref e125" linkend="HS2003"></div>; they are defined here in order
                                    		  to have a convenient notation for the graphs in this
                                    		  paper.  When a bilocation tag appears in a TexMecs
                                    		  document, all the same parent-child arcs are created
                                    		  in the document graph as would be created were there
                                    		  a sole-tag at that location. But the target of the
                                    		  parent-child arcs is not a new element represented
                                    		  by a sole tag, but the element whose ID appears in
                                    		  the bilocation tag.
                                    		
                                 </div>
                              </div>
                           </div>
                           	  
                        </div>
                        <div class="para e126">The example given here could be represented without
                           	    bilocation tags, by adopting the convention that neither
                           	    pseudo-elements nor virtual-element references to
                           	    pseudo-elements create new nodes during parsing.  Verse 3
                           	    would look like this using this convention.
                           	
                           <div class="programlisting e127" xml:space="preserve">      &lt;verse@Jer.2.3|
                              &lt;^^Jer.2.3a&gt;
                              says the LORD.
                              |verse&gt;
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               	
               <div class="programlisting e128" xml:space="preserve">&lt;div|
                  &lt;p|
                  &lt;verse@Jer.2.1|Moreover the word 
                  of the LORD came to me, saying,|verse&gt;
                  &lt;q n="Q-Jer.2.2-A"|
                  &lt;verse@Jer.2.2|
                  	Go and cry in the
                  	hearing of Jerusalem, saying, 
                  &lt;~@Jer.2.2b|
                  Thus says the LORD:|~&gt;
                  &lt;~@Jer.2.2c|
                  	    I remember you, 
                  	    The kindness of your youth, 
                  	    The love of your betrothal, 
                  	    When you went after Me in the wilderness, 
                  	    In a land not sown.|~&gt;
                  |verse&gt;	
                  &lt;q n="Q-Jer.2.2-B"|
                  &lt;=@Jer.2.2b=&gt;
                  	  &lt;q n="Q-Jer.2.2-C"|
                  &lt;=Jer.2.2c=&gt;
                  &lt;~@Jer.2.3a|
                  	    Israel [was] holiness to the LORD, 
                  	    The firstfruits of His increase.  
                  	    All that devour him will offend; 
                  	    Disaster will come upon them,
                  |~&gt;
                  |q&gt;
                  |q&gt;
                  &lt;verse@Jer.2.3|
                  &lt;=Jer.2.3a=&gt;
                  says the LORD.
                  |verse&gt;
                  &lt;* ... *&gt;
                  |q&gt;
                  |p&gt;
                  |div&gt;
               </div>
               
            </div>
            <div class="para e129">
               	This particular Goddag structure can also be
               	serialized without virtual elements, just by allowing
               	the 
               <div class="code e130">q</div> and 
               <div class="code e131">verse</div> elements
               	to overlap:
               	
               <div class="programlisting e132" xml:space="preserve">&lt;div|
                  &lt;p|
                  &lt;verse@Jer.2.1|
                  Moreover the word of the LORD 
                  came to me, saying,
                  |verse&gt;
                  &lt;q n="Q-Jer.2.2-A"|
                  &lt;verse@Jer.2.2|
                  Go and cry in the
                  hearing of Jerusalem, saying,
                  &lt;q n="Q-Jer.2.2-B"|
                  	Thus says the LORD:
                  	&lt;q n="Q-Jer.2.2-C"|
                  	  I remember you, 
                  	  The kindness of your youth, 
                  	  The love of your betrothal, 
                  	  When you went after Me in the wilderness, 
                  	  In a land not sown.
                  	  |verse&gt;
                  	  &lt;verse@Jer.2.3|
                  	  Israel [was] holiness to the LORD, 
                  	  The firstfruits of His increase.  
                  	  All that devour him will offend; 
                  	  Disaster will come upon them,
                  	|q&gt;
                  	  says the LORD.
                  	|verse&gt;
                  |q&gt;
                  &lt;* ... etc. ... *&gt;
                  |q&gt;
                  |p&gt;
                  |div&gt;
               </div>
               
               	Intuitively, many readers find the overlap-only version of the
               	document simpler and more natural than the version using
               	bilocation tags. But (as demonstrated by 
               <div class="xref e133" linkend="M2008"></div>), not all Goddag structures can be 
               	written out using only overlap, without virtual elements,
               	discontinuous elements, or bilocation tags. 
            </div>
            <div class="para e134">
               	This leads directly and obviously to the questions
               	
               <div class="quote e135">When 
                  <div class="emphasis e136">can</div> graphs be serialized
                  	  using overlap only?  And conversely, when are other
                  	  markup mechanisms necessary?
               </div>
               
            </div>
            <div class="para e137">Marcoux 
               <div class="xref e138" linkend="M2008"></div> introduced the notions of
               	
               <div class="emphasis e139" role="ital">noDAG</div> and 
               <div class="emphasis e140" role="ital">overlap-only
                  	  (oo) TexMecs
               </div> as a first step towards answering these
               	questions.
               	A noDAG is a node-ordered directed acyclic graph,
               	i.e., a slight variation on the Goddag, where there is a strict partial
               	ordering on nodes. As a markup language, oo-TexMecs is the subset of TexMecs that
               	allows multiple roots and overlapping elements, but not virtual or interrupted
               	elements. Marcoux established that a noDAG is serializable if and only if it is
               	
               <div class="emphasis e141" role="ital">completion-acyclic</div>, and that
               	“round-tripping” is possible, in that there is essentially a
               	bijective correspondence between noDAGs and oo-TexMecs documents.
            </div>
         </div><a name="13TheapproachofthispaperANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e142">
            <div class="title e143">1.3 The approach of this paper</div>
            <div class="para e144">In order to investigate whether and how the results of 
               	
               <div class="xref e145" linkend="M2008"></div>	apply to other classes
               	of graphs, we introduce here the more general notion of a 
               <div class="emphasis e146" role="ital">child-arc-ordered directed graph</div> (CODG), and
               	demonstrate that the results from 
               <div class="xref e147" linkend="M2008"></div> hold also for CODGs,
               	with the somewhat surprising exception of 
               <div class="emphasis e148" role="ital">some</div> CODGs with multiple roots. By defining the stronger
               	notion of “fully completion-acyclic” graphs, we succeed in
               	identifying this subset: the oo-serializable CODGs are exactly the
               	fully-completion-acyclic ones. We also give basic polynomial-time upper bounds
               	on the complexity of checking full-completion-acyclicity and of actually
               	computing an oo-serialization of fully-completion-acyclic
               	CODGs.
            </div>
         </div>
      </div><a name="2ChildarcordereddirectedgraphsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e149">
         <div class="title e150">2. Child-arc-ordered directed graphs</div>
         <div class="para e151">
            <div class="emphasis e152" role="bold">2.1 Definition</div> A 
            <div class="emphasis e153" role="ital">child-arc-ordered directed graph</div> (CODG for short) G = (V, ch) is a
            directed graph over a
            finite
            non-empty set of 
            <div class="emphasis e154" role="ital">vertices</div> (or 
            <div class="emphasis e155" role="ital">nodes</div>) V, where ch (for 
            <div class="emphasis e156" role="ital">children</div>) is a total mapping from V to finite (and possibly
            empty) sequences of nodes from V. The set of 
            <div class="emphasis e157" role="ital">arcs</div> (or 
            <div class="emphasis e158" role="ital">edges</div>) of G, noted
            E(G), comprises exactly those ordered pairs (v, w) for which
         </div>
         <div class="popupBox e159">
            <div class="popupLabel" onmouseover="$('#d1e346').show('1000');" onmouseout="$('#d1e346').hide('1000');">[ blockquote ]</div>
            <div id="d1e346" style="display: none;">
               <div class="blockquote">
                  <div class="para e160">(∃n ∈ N)[ ch(v, n) = w ],</div>
               </div>
            </div>
         </div>
         <div class="para e161">where N represents the set of non-negative integers. The notation
            ch(v, n) is used as a shorthand for (ch(v))(n), that is, for the element with
            index n in the sequence ch(v). We use 0-origin indexing; thus, for all v
            ∈ V, ch(v, 0) denotes the first child of v (or is undefined, if v has no child).
         </div>
         <div class="para e162">
            <div class="emphasis e163" role="bold">Note:</div> Throughout this paper, the
            “parent” relation must be understood to be the exact inverse of
            the “child” relation (we bother to make this explicit because it
            is 
            <div class="emphasis e164" role="ital">not</div> the case in some other models, such as
            the XPath 1.0 data model).
         </div>
         <div class="para e165">It is possible for the same child to show up at more than one place
            in a sequence of children; that is, ch(v, n) = ch(v, m) with m ≠ n is
            possible. Loops are allowed; that is, ch(v, n) = v for a given n is possible.
         </div>
         <div class="para e166">Note that (v, w) ∈ E(G) for given v and w tells only part of the story: There
            could be many distinct values of n for which ch(v, n) = w. Also note that the
            length of ch(v), i.e., the smallest value of n (≥ 0) for which ch(v, n) is undefined,
            is greater than or equal to the number of distinct children of v (if v has no child,
            ch(v) = ∅, which, as a sequence, is of length 0).
         </div>
         <div class="para e167">CODGs are very loose structures: they can be
            “multi-graphs,” in that more than one arc can link any given
            pair of nodes. They can have cycles and loops (i.e., cycles of length one).
            There can be both a direct (length one) and indirect path between any two given
            nodes.
         </div>
         <div class="para e168">The rationale for the adjective 
            <div class="quote e169">child-arc-ordered</div> is that for all
            v ∈ V, ch(v) can be seen as inducing an ordering on the arcs 
            <div class="quote e170">going out of</div> v (the
            
            <div class="quote e171">child-arcs</div> of v).
         </div>
         <div class="para e172">
            <div class="emphasis e173" role="bold">Examples</div> We present examples of
            CODGs illustrating some of their features.
         </div>
         <div class="para e174">
            <div class="mediaobject e175">
               <div class="imageobject e176">
                  <div class="metaBox e177"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e383').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e383" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e177'
                           </span><span class="metaAttribute">fileref='../../../vol10/graphics/Marcoux01/Marcoux01-001.png'
                           </span><span class="metaAttribute">format='png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
               <div class="caption e178">
                  <div class="para e179">Example 2.1</div>
               </div>
            </div>
         </div>
         <div class="para e180">Example 2.1 illustrates that CODGs can be disconnected, and that, in a
            CODG:
         </div>
         <div class="itemizedlist e181">
            <div class="listitem e182">
               <div class="para e183">A node can have more than one parent (here most simply
                  	  node 
                  <div class="emphasis e184" role="ital">d</div>, with parents 
                  <div class="emphasis e185" role="ital">a</div> and 
                  <div class="emphasis e186" role="ital">c</div>, but also node 
                  <div class="emphasis e187" role="ital">b</div> [with
                  	  parents 
                  <div class="emphasis e188" role="ital">a</div> and 
                  <div class="emphasis e189" role="ital">b</div>]). This is a significant departure from
                  	  the rule of single parenthood in XML.
               </div>
            </div>
            <div class="listitem e190">
               <div class="para e191">There can be cycles and loops (cycles of length 1); here
                  	  the only example is the loop on node 
                  <div class="emphasis e192" role="ital">b</div>.
               </div>
            </div>
            <div class="listitem e193">
               <div class="para e194">The same node can occur more than once as a child of
                  	  some parent (here node 
                  <div class="emphasis e195" role="ital">c</div>, which is both second and fourth
                  	  among the children of node 
                  <div class="emphasis e196" role="ital">a</div>).
               </div>
            </div>
            <div class="listitem e197">
               <div class="para e198">There can be both direct and indirect paths between two
                  	  nodes (here node 
                  <div class="emphasis e199" role="ital">a</div> dominates node 
                  <div class="emphasis e200" role="ital">d</div> both directly and
                  	  via node 
                  <div class="emphasis e201" role="ital">c</div>).
               </div>
            </div>
         </div>
         <div class="para e202">Note that the 
            <div class="emphasis e203" role="ital">order</div> of the
            outgoing arcs is usually not shown explicitly in the visual representation of a CODG.
            We adopt the convention of drawing
            the arcs going out of any node in order from left to right (even if
            the arcs must cross each other further down, in order to reach
            the child node they point to).  So the leftmost arc leaving any
            parent is pointing to that parent's first child, and the
            rightmost arc points to that parent's last child.
            <div class="popupBox e204">
               <div class="popupLabel" onmouseover="$('#d1e444').show('1000');" onmouseout="$('#d1e444').hide('1000');">[ footnote ]</div>
               <div id="d1e444" style="display: none;">
                  <div class="footnote">
                     <div class="para e205">This
                        	  may sound like a fragile or error-prone convention, but it
                        	  turns out to work well most of the time, and it makes the
                        	  diagrams easier to read than attaching numbers to the arcs
                        	  and drawing them with fewer crossings but out of order.
                     </div>
                  </div>
               </div>
            </div>
            Thus, in Example 1, ch(a) = (b, c, d, c).
         </div>
         <div class="para e206">On the rare occasions that this convention is not practical, we use
            explicit 
            <div class="emphasis e207" role="ital">green arrows</div> between the outgoing
            arcs to indicate their order, as in the next example.
            
         </div>
         <div class="para e208">
            <div class="mediaobject e209">
               <div class="imageobject e210">
                  <div class="metaBox e211"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e456').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e456" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e211'
                           </span><span class="metaAttribute">fileref='../../../vol10/graphics/Marcoux01/Marcoux01-002.png'
                           </span><span class="metaAttribute">format='png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
               <div class="caption e212">
                  <div class="para e213">Example 2.2</div>
               </div>
            </div>
         </div>
         <div class="para e214">In Example 2.2, ch(a) = (b, c) and ch(d) = (e, c). Right-pointing
            arrows, though superfluous, are sometimes shown as a reminder of the implicit
            convention.
         </div>
         <div class="para e215">
            <div class="emphasis e216" role="bold">Sibling precedence</div> For all v, ch(v) 
            induces a 
            <div class="quote e217">sibling-precedence</div> relation sp(v) among
            the children of v, defined by:
            
            <div class="popupBox e218">
               <div class="popupLabel" onmouseover="$('#d1e469').show('1000');" onmouseout="$('#d1e469').hide('1000');">[ blockquote ]</div>
               <div id="d1e469" style="display: none;">
                  <div class="blockquote">
                     <div class="para e219">sp(v) =
                        <div class="subscript e220">def</div> { (w, x) ∈ V × V
                        | (∃m, n ∈ N)[ m &lt; n &amp; ch(v, m) = w &amp; ch(v, n) = x ]
                        }.
                     </div>
                  </div>
               </div>
            </div>
            This relation may or may not be a strict order relation. When it is, we say that v
            
            <div class="emphasis e221">orders its children</div>.
         </div>
         <div class="para e222">
            <div class="mediaobject e223">
               <div class="imageobject e224">
                  <div class="metaBox e225"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e482').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e482" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e225'
                           </span><span class="metaAttribute">fileref='../../../vol10/graphics/Marcoux01/Marcoux01-003.png'
                           </span><span class="metaAttribute">format='png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
               <div class="caption e226">
                  <div class="para e227">Example 2.3</div>
               </div>
            </div>
         </div>
         <div class="para e228">Example 2.3 illustrates that parents may order the same nodes
            differently as children. Thus, note that ch(a) = (b, c), which induces the 
            strict order relation b
            &lt; c, and ch(d) = (c, b), which induces the strict order relation c &lt; b.
         </div>
         <div class="para e229">In examples in which no pair of nodes is ordered differently by different
            parents, we will usually place the green arrows between nodes, rather than between
            arcs:
         </div>
         <div class="para e230">
            <div class="mediaobject e231">
               <div class="imageobject e232">
                  <div class="metaBox e233"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e494').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e494" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e233'
                           </span><span class="metaAttribute">fileref='../../../vol10/graphics/Marcoux01/Marcoux01-004.png'
                           </span><span class="metaAttribute">format='png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
               <div class="caption e234">
                  <div class="para e235">Example 2.4</div>
               </div>
            </div>
         </div>
         <div class="para e236">
            <div class="emphasis e237" role="bold">Auxiliary concepts</div> We now define a
            number of auxiliary concepts useful in discussions of CODGs.  All
            of them are secondary concepts in the sense that they are entirely and uniquely
            determined by the set of vertices and the sequences of children of the
            graph.
         </div>
         <div class="para e238">
            <div class="emphasis e239" role="bold">2.2 Definition</div> Let G = (V, ch) be a
            CODG. Then:
         </div>
         <div class="orderedlist e240">
            <div class="listitem e241">
               <div class="para e242">⇒
                  <div class="subscript e243">G</div> denotes the (positive)
                  transitive closure of E(G).
               </div>
               <div class="para e244">Note that ⇒
                  <div class="subscript e245">G</div> is not necessarily
                  antireflexive, as E(G) may contain cycles.
               </div>
            </div>
            <div class="listitem e246">
               <div class="para e247">⇒
                  <div class="superscript e248">*</div>
                  <div class="subscript e249">G</div>
                  denotes the reflexive transitive closure of E(G), that is:
               </div>
               <div class="popupBox e250">
                  <div class="popupLabel" onmouseover="$('#d1e526').show('1000');" onmouseout="$('#d1e526').hide('1000');">[ blockquote ]</div>
                  <div id="d1e526" style="display: none;">
                     <div class="blockquote">
                        <div class="para e251">⇒
                           <div class="subscript e252">G</div> ∪ { (v, v) | v ∈
                           V }.
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="listitem e253">
               <div class="para e254">sp(G) =
                  <div class="subscript e255">def</div> { (v, w, x) ∈ V × V × V
                  | (∃m, n ∈ N)[ m &lt; n &amp; ch(v, m) = w &amp; ch(v, n) = x ]
                  }.
               </div>
               <div class="para e256">The name “sp” stands for “sibling
                  precedence.” Note that, iff w occurs more than once in the sequence of
                  children of v, then (v, w, w) ∈ sp(G). Note also that it is entirely
                  possible for both (v, w, x) and and (v, x, w) to be members of sp(G).
                  Finally note that sp(G) is the union over all v ∈ V of ({v} × sp(v)),
                  where sp(v) is the sibling-precedence relation induced by ch(v), as defined above
                  
                  at 
                  <div class="emphasis e257" role="bold">Sibling precedence</div>.
               </div>
            </div>
            <div class="listitem e258">
               <div class="para e259">gsp(G) =
                  <div class="subscript e260">def</div> { (w, x) ∈ V × V |
                  (∃v ∈ V)[ (v, w, x) ∈ sp(G) ] }.
               </div>
               <div class="para e261">The name “gsp” stands for “global sibling
                  precedence.” It is the projection of sp(G) onto the last two components.
                  It follows from the observations in the preceding point that there can be loops
                  and cycles in gsp(G).
               </div>
            </div>
         </div>
         <div class="para e262">
            <div class="emphasis e263" role="bold">2.3 Notation</div> Let G = (V, ch) be a CODG.
            Unless otherwise stated:
         </div>
         <div class="orderedlist e264">
            <div class="listitem e265">
               <div class="para e266">V can also be denoted by V(G),</div>
            </div>
            <div class="listitem e267">
               <div class="para e268">E denotes E(G),</div>
            </div>
            <div class="listitem e269">
               <div class="para e270">⇒ denotes ⇒
                  <div class="subscript e271">G</div>,
               </div>
            </div>
            <div class="listitem e272">
               <div class="para e273">⇒
                  <div class="superscript e274">*</div> denotes
                  ⇒
                  <div class="superscript e275">*</div>
                  <div class="subscript e276">G</div>,
               </div>
            </div>
            <div class="listitem e277">
               <div class="para e278">sp denotes sp(G),</div>
            </div>
            <div class="listitem e279">
               <div class="para e280">gsp denotes gsp(G).</div>
            </div>
         </div>
      </div><a name="3OverlaponlydocumentsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e281">
         <div class="title e282">3. Overlap-only documents</div>
         <div class="para e283">The phenomenon we wish to study in this paper is how the structural
            properties of a CODG relate to the fact that it mimics the containment and
            precedence relationships among elements in some marked-up document. More
            specifically, we want to consider documents expressed in markup languages that
            allow overlapping elements, such as TexMecs 
            <div class="xref e284" linkend="HS2003"></div>. Thus, we
            need to define a model for such documents.
         </div>
         <div class="para e285">TexMecs allows many more constructs than element embedding and
            overlap. However, in this paper, we concentrate on those two, ignoring the
            others, such as virtual elements, interrupted elements, empty elements,
            attribute specifications, entity references, generic identifier co-indexing
            (for handling self-overlap), unordered contents, and comments. This is why we
            speak of “overlap-only” (or “oo”) documents. When
            the structure of a CODG corresponds to the containment and precedence
            relationships of some oo-document (to be defined precisely in a moment), we say
            the CODG is “oo-serializable,” because the oo-document can be
            viewed as a 
            <div class="emphasis e286" role="ital">serialization</div> (a representation in
            serial form) of the CODG.
         </div>
         <div class="para e287">Instead of defining documents as character strings with syntactic
            constraints, we use a more abstract approach that avoids some complications and
            leads to results that are simpler to formulate. More constraints on the
            definition of document could later be added to suit specific markup languages
            if and when desired.
         </div>
         <div class="para e288">Intuitively, we adopt a tokenized view of the document, where tokens
            are tags and leaves. Tokens are represented by their (integer) position in the
            sequence of tokens that make up the document.
         </div>
         <div class="para e289">The tags in our model of oo-documents correspond, in the XML
            world, to start- and end-tags for non-empty elements.
         </div>
         <div class="para e290">The leaves in our model of oo-documents correspond, in the
            XML world, to text nodes (#PCDATA) and empty elements. Note that
            our model abstracts away from the actual textual content of
            elements and documents, and also ignores the differences among
            different element types. We claim, however, that our abstraction
            captures the essential structural aspects of marked-up documents
            with possible element overlap.
         </div>
         <div class="para e291">
            <div class="emphasis e292" role="bold">3.1 Definition</div> An 
            <div class="emphasis e293" role="ital">oo-document</div> is a finite set of pairs of
            the form (x, y), where x, y ∈ N (the set of non-negative
            natural numbers) and x ≤ y, additionally satisfying a number of
            “well-formedness” constraints (stated below).
         </div>
         <div class="para e294">The pairs in a document are called 
            <div class="emphasis e295" role="ital">ranges</div>. If r = (x, y) is a
            range, then r
            <div class="subscript e296">1</div> and r
            <div class="subscript e297">2</div> denote
            respectively x and y.
         </div>
         <div class="para e298">Intuitively, a range gives the position of a start-tag and of the
            corresponding end-tag, or the position of a leaf, in which case, x =
            y. Formally, if D is an oo-document:
         </div>
         <div class="popupBox e299">
            <div class="popupLabel" onmouseover="$('#d1e625').show('1000');" onmouseout="$('#d1e625').hide('1000');">[ blockquote ]</div>
            <div id="d1e625" style="display: none;">
               <div class="blockquote">
                  <div class="itemizedlist e300">
                     <div class="listitem e301">
                        <div class="para e302">leaves(D) =
                           <div class="subscript e303">def</div> { x ∈ N | (x, x)
                           ∈ D },
                        </div>
                     </div>
                     <div class="listitem e304">
                        <div class="para e305">stags(D) =
                           <div class="subscript e306">def</div> domain(D) -
                           leaves(D),
                        </div>
                     </div>
                     <div class="listitem e307">
                        <div class="para e308">etags(D) =
                           <div class="subscript e309">def</div> image(D) -
                           leaves(D).
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e310">Note that, as usual:</div>
         <div class="popupBox e311">
            <div class="popupLabel" onmouseover="$('#d1e648').show('1000');" onmouseout="$('#d1e648').hide('1000');">[ blockquote ]</div>
            <div id="d1e648" style="display: none;">
               <div class="blockquote">
                  <div class="itemizedlist e312">
                     <div class="listitem e313">
                        <div class="para e314">domain(D) =
                           <div class="subscript e315">def</div> { x ∈ N | ( ∃ y ∈ N | (x,
                           y) ∈ D ) }, and
                        </div>
                     </div>
                     <div class="listitem e316">
                        <div class="para e317">image(D) =
                           <div class="subscript e318">def</div> { y ∈ N | ( ∃ x ∈ N | (x,
                           y) ∈ D ) }, and
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e319">Oo-documents are subject to the following well-formedness
            constraints.
         </div>
         <div class="popupBox e320">
            <div class="popupLabel" onmouseover="$('#d1e664').show('1000');" onmouseout="$('#d1e664').hide('1000');">[ blockquote ]</div>
            <div id="d1e664" style="display: none;">
               <div class="blockquote">
                  <div class="para e321">For all oo-document D:</div>
                  <div class="orderedlist e322">
                     <div class="listitem e323">
                        <div class="para e324">D is a partial function over N, i.e., for all x ∈ N,
                           there is at most one y such that (x, y) ∈ D.
                        </div>
                     </div>
                     <div class="listitem e325">
                        <div class="para e326">D
                           <div class="superscript e327">-1</div> (that is, the inverse
                           	    of D) is also a partial function over N, i.e., for all y
                           	    ∈ N, there is at most one x such that (x, y)
                           	    ∈ D.
                        </div>
                     </div>
                     <div class="listitem e328">
                        <div class="para e329">stags(D) ∩ etags(D) = ∅.</div>
                        <div class="para e330">Put less formally: No token is both a start-tag and an
                           end-tag.
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e331">It must also be remembered that (as stated at the beginning of the
            definition) for all range r, r
            <div class="subscript e332">1</div> ≤
            r
            <div class="subscript e333">2</div>, which corresponds to the normal
            rule of syntax that start-tag must precede its matching end-tag.
         </div>
         <div class="para e334">Note that we do not require the numbering of token positions to be
            gap-free, nor do we forbid consecutive leaves without intervening
            tags. There is also no requirement of an element spanning the whole
            document: this is of course crucial for oo-documents to be able to
            correspond to graphs with multiple roots.
         </div>
         <div class="para e335">
            <div class="emphasis e336" role="bold">3.2 Definition</div> Let D be an oo-document,
            and r, s ∈ D:
         </div>
         <div class="itemizedlist e337">
            <div class="listitem e338">
               <div class="para e339">r is said to 
                  <div class="emphasis e340" role="ital">contain</div> s iff
                  (r
                  <div class="subscript e341">1</div> &lt; s
                  <div class="subscript e342">1</div> and
                  s
                  <div class="subscript e343">2</div> &lt; r
                  <div class="subscript e344">2</div>).
               </div>
            </div>
            <div class="listitem e345">
               <div class="para e346">r is said to 
                  <div class="emphasis e347" role="ital">precede</div> s iff
                  (r
                  <div class="subscript e348">1</div> &lt; s
                  <div class="subscript e349">1</div> and
                  r
                  <div class="subscript e350">2</div> &lt; s
                  <div class="subscript e351">2</div>).
               </div>
            </div>
         </div>
         <div class="para e352">Note that in the latter case, r and s may or may not overlap. Also
            note that r cannot both contain 
            <div class="emphasis e353" role="ital">and</div> precede
            s.
         </div>
      </div><a name="4CorrespondencebetweenagraphandadocumentANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e354">
         <div class="title e355">4. Correspondence between a graph and a document</div>
         <div class="para e356">Intuitively, a CODG and an oo-document 
            <div class="emphasis e357" role="ital">correspond</div> to each other when the nodes of the graph and
            the ranges of the document can be put in correspondence in such a way that node
            reachability corresponds to range containment, and gsp corresponds to range
            precedence.
         </div>
         <div class="para e358">
            <div class="emphasis e359" role="bold">4.1 Definition</div> A CODG G and an
            oo-document D 
            <div class="emphasis e360" role="ital">correspond</div> to each other iff
            there exists a bijective mapping g from V(G) to D, such that all of the
            following conditions hold:
         </div>
         <div class="orderedlist e361">
            <div class="listitem e362">
               <div class="para e363">(∀ b, c ∈ V(G)) [(b ⇒ c) iff g(b) contains
                  g(c)]
               </div>
            </div>
            <div class="listitem e364">
               <div class="para e365">(∀ b, c ∈ V(G)) [if (b, c) ∈ gsp(G), then
                  g(b) precedes g(c)]
               </div>
            </div>
         </div>
         <div class="para e366">We then say that G and D correspond to each other
            
            <div class="emphasis e367" role="ital">through</div> g.
         </div>
         <div class="para e368">
            <div class="emphasis e369" role="bold">4.2 Definition</div> A CODG G is said to
            be 
            <div class="emphasis e370" role="ital">oo-serializable</div> iff there exists an
            oo-document that corresponds to G.
         </div>
         <div class="para e371">It is clear that every oo-document has a corresponding CODG: use
            ranges as nodes, and the transitive reduction of range containment as
            parent-child relation. Then, order all sets of siblings in range precedence
            order.
         </div>
         <div class="para e372">It is also clear that 
            <div class="emphasis e373" role="ital">some</div> CODGs are
            not oo-serializable: for example, a CODG with cycles would imply (by
            transitivity) a range containing itself, which is impossible. But are all
            acyclic CODGs oo-serializable? The following examples, inspired from
            
            <div class="xref e374" linkend="M2008"></div>, show that the question is at best not trivial:
         </div>
         <div class="para e375">
            <div class="mediaobject e376">
               <div class="imageobject e377">
                  <div class="metaBox e378"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e785').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e785" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e378'
                           </span><span class="metaAttribute">fileref='../../../vol10/graphics/Marcoux01/Marcoux01-005.png'
                           </span><span class="metaAttribute">format='png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
               <div class="caption e379">
                  <div class="para e380">Example 4</div>
               </div>
            </div> 
            
            <div class="mediaobject e381">
               <div class="imageobject e382">
                  <div class="metaBox e383"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e792').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e792" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e383'
                           </span><span class="metaAttribute">fileref='../../../vol10/graphics/Marcoux01/Marcoux01-006.png'
                           </span><span class="metaAttribute">format='png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
               <div class="caption e384">
                  <div class="para e385">Example 5</div>
               </div>
            </div>
         </div>
         <div class="para e386">Both graphs are acyclic and they differ by just the presence/absence
            of one arc. Yet, only the first one is oo-serializable 
            <div class="xref e387" linkend="M2008"></div>.
            <div class="popupBox e388">
               <div class="popupLabel" onmouseover="$('#d1e800').show('1000');" onmouseout="$('#d1e800').hide('1000');">[ footnote ]</div>
               <div id="d1e800" style="display: none;">
                  <div class="footnote">
                     <div class="para e389">Example&nbsp;4 is oo-serializable in the TexMecs form
                        	  
                        <div class="code e390">&lt;poem| &lt;verse| &lt;quote~1| leaves &lt;quote~2| fall |verse&gt;
                           	    |quote~1&gt; |quote~2&gt; |poem&gt;
                        </div>.
                     </div>
                     <div class="para e391">Example&nbsp;5 is not oo-serializable, in brief, because
                        	  its EA (ends-after) relation has a cycle among the first
                        	  
                        <div class="code e392">quote</div> element, the 
                        <div class="code e393">verse</div> element,
                        	  and the text node containing the word 
                        <div class="code e394">fall</div>.
                        	  Let us refer to them as 
                        <div class="emphasis e395" role="ital">q</div>
                        <div class="subscript e396">1</div>, 
                        <div class="emphasis e397" role="ital">v</div>, and 
                        <div class="emphasis e398" role="ital">f</div> for short.
                        	  
                        <div class="itemizedlist e399">
                           <div class="listitem e400">
                              <div class="para e401">
                                 <div class="emphasis e402" role="ital">q</div>
                                 <div class="subscript e403">1</div> follows 
                                 <div class="emphasis e404" role="ital">v</div> among the children of the
                                 		
                                 <div class="code e405">poem</div> element, and thus 
                                 <div class="emphasis e406" role="ital">q</div>
                                 <div class="subscript e407">1</div> must end
                                 		after 
                                 <div class="emphasis e408" role="ital">v</div>.
                                 	      
                              </div>
                           </div>
                           <div class="listitem e409">
                              <div class="para e410">
                                 <div class="emphasis e411" role="ital">v</div> dominates 
                                 <div class="emphasis e412" role="ital">f</div>, and thus 
                                 <div class="emphasis e413" role="ital">v</div> must end after
                                 		
                                 <div class="emphasis e414" role="ital">f</div>.
                                 	      
                              </div>
                           </div>
                           <div class="listitem e415">
                              <div class="para e416">
                                 <div class="emphasis e417" role="ital">f</div> is not dominated by 
                                 <div class="emphasis e418" role="ital">q</div>
                                 <div class="subscript e419">1</div>, but it
                                 		
                                 <div class="emphasis e420">is</div> dominated by a following
                                 		sibling of 
                                 <div class="emphasis e421" role="ital">q</div>
                                 <div class="subscript e422">1</div> (namely, the second 
                                 <div class="code e423">quote</div>
                                 		element), and thus 
                                 <div class="emphasis e424" role="ital">f</div> must end after 
                                 <div class="emphasis e425" role="ital">q</div>
                                 <div class="subscript e426">1</div>.
                                 	      
                              </div>
                           </div>
                        </div>
                        	  It is the third constraint, not present in Example&nbsp;4,
                        	  which makes the difference between the oo-serializability
                        	  of the two examples.
                        	
                     </div>
                  </div>
               </div>
            </div>
            
         </div>
         <div class="para e427">In 
            <div class="xref e428" linkend="M2008"></div>, Marcoux defined noDAGs, or
            
            <div class="emphasis e429" role="ital">node-ordered DAGs</div>, as (essentially) directed
            acyclic graphs (DAGs) in which the nodes are partially ordered in such a way
            that siblings (children of a common parent), 
            <div class="emphasis e430" role="ital">as well as
               distinct roots
            </div>, are totally ordered. He then defined the property of
            
            <div class="emphasis e431" role="ital">completion-acyclicity</div> for noDAGs, and showed
            that oo-serializable noDAGs are exactly the completion-acyclic ones.
         </div>
         <div class="para e432">In order to investigate whether the same is true of CODGs, we must
            define an analogous property for CODGs. The following definition is the natural
            adaptation of completion-acyclicity to CODGs.
         </div>
         <div class="para e433">
            <div class="emphasis e434" role="bold">4.3 Definition</div> Let G = (V, ch) be a
            CODG. Then:
         </div>
         <div class="orderedlist e435">
            <div class="listitem e436">
               <div class="para e437">ssba(G) =
                  <div class="subscript e438">def</div> { (w, x) ∈ V × V |
                  (∃v ∈ V)[ v ⇒ w &amp; (v, x) ∈ gsp &amp; x
                  ⇏ w ] }.
               </div>
               <div class="para e439">The name “ssba” stands for
                  “should-start-before additions.”
               </div>
            </div>
            <div class="listitem e440">
               <div class="para e441">ssb(G) denotes the transitive closure of (E ∪ gsp ∪
                  ssba).
               </div>
               <div class="para e442">The relation “ssb” is called the
                  “should-start-before completion” of G.
               </div>
            </div>
            <div class="listitem e443">
               <div class="para e444">seaa(G) =
                  <div class="subscript e445">def</div> { (w, x) ∈ V × V |
                  (∃v ∈ V)[ v ⇒ w &amp; (v, x) ∈
                  gsp
                  <div class="superscript e446">-1</div> &amp; x ⇏ w
                  ] }.
               </div>
               <div class="para e447">The name “seaa” stands for “should-end-after
                  additions.” The relation gsp
                  <div class="superscript e448">-1</div> is
                  	the inverse of relation gsp.
               </div>
            </div>
            <div class="listitem e449">
               <div class="para e450">sea(G) denotes the transitive closure of (E ∪
                  gsp
                  <div class="superscript e451">-1</div> ∪ seaa).
               </div>
               <div class="para e452">The relation “sea” is called the
                  “should-end-after completion” of G.
               </div>
            </div>
         </div>
         <div class="para e453">
            <div class="emphasis e454" role="bold">4.4 Notation</div> Let G = (V, ch) be a CODG.
            Unless otherwise stated:
         </div>
         <div class="orderedlist e455">
            <div class="listitem e456">
               <div class="para e457">ssba denotes ssba(G),</div>
            </div>
            <div class="listitem e458">
               <div class="para e459">ssb denotes ssb(G),</div>
            </div>
            <div class="listitem e460">
               <div class="para e461">seaa denotes seaa(G),</div>
            </div>
            <div class="listitem e462">
               <div class="para e463">sea denotes sea(G).</div>
            </div>
         </div>
         <div class="para e464">The relations ssb and sea can be understood as meaning:
            “should &lt;
            <div class="emphasis e465" role="ital">something</div>&gt;
            
            <div class="emphasis e466" role="ital">
               <div class="emphasis e467" role="bold">in any oo-serialization of the
                  CODG
               </div>
            </div>,” for example “should
            
            <div class="emphasis e468" role="ital">end after</div> in any oo-serialization of the
            CODG.” Thus, “(v, w) ∈ ssb” can be read out as:
            “v should start before w in any oo-serialization of the CODG.” In
            other words, ssb (respectively, sea) represents the start- (respectively, end-)
            tag-precedence relations that can be deduced from the topology of the CODG,
            supposing parent-child relations are interpreted as element containment, and
            sibling-precedence relations as start- and end-tag-precedence.
         </div>
         <div class="para e469">The relations ssba and seaa represent the “additional”
            arcs (over and above those in E and gsp or gsp
            <div class="superscript e470">-1</div>)
            that must be considered to compute 
            <div class="emphasis e471" role="ital">all</div> the
            possible ssb and sea pairs that can be deduced from the CODG topology.
         </div>
         <div class="para e472">
            <div class="emphasis e473" role="bold">4.5 Definition</div> A CODG G = (V, ch) is
            said to be 
            <div class="emphasis e474" role="ital">completion-acyclic</div> (CA) iff each of
            ssb(G) and sea(G) is acyclic.
         </div>
      </div><a name="5MainresultsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e475">
         <div class="title e476">5. Main results</div>
         <div class="para e477">Things are not as simple with CODGs as with noDAGs. There
            are, it turns out, CODGs that are completion-acyclic, yet not oo-serializable. Our
            first result is to show that Example&nbsp;2.2 above, as well as the following CODG,
            are in that situation:
         </div>
         <div class="para e478">
            <div class="mediaobject e479">
               <div class="imageobject e480">
                  <div class="metaBox e481"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1005').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1005" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e481'
                           </span><span class="metaAttribute">fileref='../../../vol10/graphics/Marcoux01/Marcoux01-007.png'
                           </span><span class="metaAttribute">format='png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
               <div class="caption e482">
                  <div class="para e483">Example 6</div>
               </div>
            </div>
         </div>
         <div class="para e484">Since the number of structurally distinct documents that can
            possibly correspond to a 5-node graph is finite, we could
            exhaustively enumerate them and verify that none of them correspond
            to either Example&nbsp;2.2 or to
            Example&nbsp;6. 
            However, that would not be very
            insightful.
            <div class="popupBox e485">
               <div class="popupLabel" onmouseover="$('#d1e1011').show('1000');" onmouseout="$('#d1e1011').hide('1000');">[ footnote ]</div>
               <div id="d1e1011" style="display: none;">
                  <div class="footnote">
                     <div class="para e486">The curious reader may, however, be interested in the
                        	  enumeration.  We cannot give it in full, but we can sketch
                        	  it here.
                     </div>
                     <div class="para e487">In Example&nbsp;6, nodes 
                        <div class="emphasis e488" role="ital">a</div> and 
                        <div class="emphasis e489" role="ital">e</div> are non-terminals
                        	  (which means they must correspond to elements in TexMecs)
                        	  and nodes 
                        <div class="emphasis e490" role="ital">b</div>, 
                        <div class="emphasis e491" role="ital">c</div> and 
                        <div class="emphasis e492" role="ital">d</div> are childless (which means they may
                        	  correspond either to empty elements or to spans of character
                        	  data in TexMecs, that is, to leaf nodes).  
                        	  One way to begin the enumeration is to
                        	  observe that in overlap-only TexMecs the elements 
                        <div class="emphasis e493" role="ital">a</div> and
                        	  
                        <div class="emphasis e494" role="ital">e</div> will each have one start- and one end-tag.  There are
                        	  six possible orders for these four tags:
                        	  
                        <div class="orderedlist e495">
                           <div class="listitem e496">
                              <div class="para e497">
                                 <div class="code e498">&lt;a| &lt;e| |a&gt; |e&gt;</div>
                              </div>
                           </div>
                           <div class="listitem e499">
                              <div class="para e500">
                                 <div class="code e501">&lt;a| &lt;e| |e&gt; |a&gt;</div>
                              </div>
                           </div>
                           <div class="listitem e502">
                              <div class="para e503">
                                 <div class="code e504">&lt;a| |a&gt; &lt;e| |e&gt;</div>
                              </div>
                           </div>
                           <div class="listitem e505">
                              <div class="para e506">
                                 <div class="code e507">&lt;e| &lt;a| |a&gt; |e&gt;</div>
                              </div>
                           </div>
                           <div class="listitem e508">
                              <div class="para e509">
                                 <div class="code e510">&lt;e| &lt;a| |e&gt; |a&gt;</div>
                              </div>
                           </div>
                           <div class="listitem e511">
                              <div class="para e512">
                                 <div class="code e513">&lt;e| |e&gt; &lt;a| |a&gt;</div>
                              </div>
                           </div>
                        </div>
                        	  Note that the possible number of orderings for any 
                        <div class="emphasis e514" role="ital">n</div> items is
                        	  
                        <div class="emphasis e515" role="ital">n</div>! (
                        <div class="emphasis e516" role="ital">n</div> factorial), so the total number of orderings for
                        	  the four tags involved here is 24 (= 4!).  Of those 24, half
                        	  are ill-formed because in them the end-tag for 
                        <div class="emphasis e517" role="ital">a</div>
                        	  precedes its end-tag; of the remaining 12, half are
                        	  ill-formed because the end-tag of 
                        <div class="emphasis e518" role="ital">e</div> precedes the start-tag.
                        	
                     </div>
                     <div class="para e519">To each of these six patterns for the representation of
                        	  nodes 
                        <div class="emphasis e520" role="ital">a</div> and 
                        <div class="emphasis e521" role="ital">e</div> there correspond 210 possible TexMecs
                        	  documents with nodes 
                        <div class="emphasis e522" role="ital">b</div>, 
                        <div class="emphasis e523" role="ital">c</div>, and 
                        <div class="emphasis e524" role="ital">d</div> interleaved among the
                        	  tags for 
                        <div class="emphasis e525" role="ital">a</div> and 
                        <div class="emphasis e526" role="ital">e</div>.  (Node 
                        <div class="emphasis e527" role="ital">b</div> can be situated in any of
                        	  five locations:  before the first tag, after the first tag,
                        	  after the second, after the third, after the fourth.  The
                        	  tag for node 
                        <div class="emphasis e528" role="ital">c</div> can be placed in any of six locations
                        	  (before or after any of the four start- and end-tags and
                        	  node 
                        <div class="emphasis e529" role="ital">b</div>); the
                        	  tag for node 
                        <div class="emphasis e530" role="ital">d</div> can be placed in any of seven locations.
                        	  210 = 5 × 6 × 7.)  The beginning of the
                        	  enumeration might look like this:
                        <div class="itemizedlist e531">
                           <div class="listitem e532">
                              <div class="para e533">
                                 <div class="emphasis e534" role="ital">d</div> 
                                 <div class="emphasis e535" role="ital">c</div> 
                                 <div class="emphasis e536" role="ital">b</div> &lt;a| &lt;e| |a&gt; |e&gt;
                              </div>
                           </div>
                           <div class="listitem e537">
                              <div class="para e538">
                                 <div class="emphasis e539" role="ital">c</div> 
                                 <div class="emphasis e540" role="ital">d</div> 
                                 <div class="emphasis e541" role="ital">b</div> &lt;a| &lt;e| |a&gt; |e&gt;
                              </div>
                           </div>
                           <div class="listitem e542">
                              <div class="para e543">
                                 <div class="emphasis e544" role="ital">c</div> 
                                 <div class="emphasis e545" role="ital">b</div> 
                                 <div class="emphasis e546" role="ital">d</div> &lt;a| &lt;e| |a&gt; |e&gt;
                              </div>
                           </div>
                           <div class="listitem e547">
                              <div class="para e548">
                                 <div class="emphasis e549" role="ital">c</div> 
                                 <div class="emphasis e550" role="ital">b</div> &lt;a| 
                                 <div class="emphasis e551" role="ital">d</div> &lt;e| |a&gt; |e&gt;
                              </div>
                           </div>
                           <div class="listitem e552">
                              <div class="para e553">
                                 <div class="emphasis e554" role="ital">c</div> 
                                 <div class="emphasis e555" role="ital">b</div> &lt;a| &lt;e| 
                                 <div class="emphasis e556" role="ital">d</div> |a&gt; |e&gt;
                              </div>
                           </div>
                           <div class="listitem e557">
                              <div class="para e558">
                                 <div class="emphasis e559" role="ital">c</div> 
                                 <div class="emphasis e560" role="ital">b</div> &lt;a| &lt;e| |a&gt; 
                                 <div class="emphasis e561" role="ital">d</div> |e&gt;
                              </div>
                           </div>
                           <div class="listitem e562">
                              <div class="para e563">
                                 <div class="emphasis e564" role="ital">c</div> 
                                 <div class="emphasis e565" role="ital">b</div> &lt;a| &lt;e| |a&gt; |e&gt; 
                                 <div class="emphasis e566" role="ital">d</div>
                              </div>
                           </div>
                           <div class="listitem e567">
                              <div class="para e568">
                                 <div class="emphasis e569" role="ital">d</div> 
                                 <div class="emphasis e570" role="ital">b</div> 
                                 <div class="emphasis e571" role="ital">c</div> &lt;a| &lt;e| |a&gt; |e&gt;
                              </div>
                           </div>
                           <div class="listitem e572">
                              <div class="para e573">
                                 <div class="emphasis e574" role="ital">b</div> 
                                 <div class="emphasis e575" role="ital">d</div> 
                                 <div class="emphasis e576" role="ital">c</div> &lt;a| &lt;e| |a&gt; |e&gt;
                              </div>
                           </div>
                           <div class="listitem e577">
                              <div class="para e578">
                                 <div class="emphasis e579" role="ital">b</div> 
                                 <div class="emphasis e580" role="ital">c</div> 
                                 <div class="emphasis e581" role="ital">d</div> &lt;a| &lt;e| |a&gt; |e&gt;
                              </div>
                           </div>
                           <div class="listitem e582">
                              <div class="para e583">
                                 <div class="emphasis e584" role="ital">b</div> 
                                 <div class="emphasis e585" role="ital">c</div> &lt;a| 
                                 <div class="emphasis e586" role="ital">d</div> &lt;e| |a&gt; |e&gt;
                              </div>
                           </div>
                           <div class="listitem e587">
                              <div class="para e588"> … </div>
                           </div>
                           <div class="listitem e589">
                              <div class="para e590">
                                 <div class="emphasis e591" role="ital">d</div> 
                                 <div class="emphasis e592" role="ital">b</div> &lt;a| 
                                 <div class="emphasis e593" role="ital">c</div> &lt;e| |a&gt; |e&gt;
                              </div>
                           </div>
                           <div class="listitem e594">
                              <div class="para e595">
                                 <div class="emphasis e596" role="ital">b</div> 
                                 <div class="emphasis e597" role="ital">d</div> &lt;a| 
                                 <div class="emphasis e598" role="ital">c</div> &lt;e| |a&gt; |e&gt;
                              </div>
                           </div>
                           <div class="listitem e599">
                              <div class="para e600">
                                 <div class="emphasis e601" role="ital">b</div> &lt;a| 
                                 <div class="emphasis e602" role="ital">d</div> 
                                 <div class="emphasis e603" role="ital">c</div> &lt;e| |a&gt; |e&gt;
                              </div>
                           </div>
                           <div class="listitem e604">
                              <div class="para e605">
                                 <div class="emphasis e606" role="ital">b</div> &lt;a| 
                                 <div class="emphasis e607" role="ital">c</div> 
                                 <div class="emphasis e608" role="ital">d</div> &lt;e| |a&gt; |e&gt;
                              </div>
                           </div>
                           <div class="listitem e609">
                              <div class="para e610">
                                 <div class="emphasis e611" role="ital">b</div> &lt;a| 
                                 <div class="emphasis e612" role="ital">c</div> &lt;e| 
                                 <div class="emphasis e613" role="ital">d</div> |a&gt; |e&gt;
                              </div>
                           </div>
                           <div class="listitem e614">
                              <div class="para e615"> … </div>
                           </div>
                        </div>
                        	
                     </div>
                     <div class="para e616">To each of these 210 interleavings of 
                        <div class="emphasis e617" role="ital">b</div>, 
                        <div class="emphasis e618" role="ital">c</div>, and 
                        <div class="emphasis e619" role="ital">d</div>
                        	into the four start- and end-tags for 
                        <div class="emphasis e620" role="ital">a</div> and 
                        <div class="emphasis e621" role="ital">e</div>, there
                        	correspond eight TexMecs documents.  Each of nodes 
                        <div class="emphasis e622" role="ital">b</div>, 
                        <div class="emphasis e623" role="ital">c</div>,
                        	and 
                        <div class="emphasis e624" role="ital">d</div> may be either a text node or an empty element, so
                        	there are eight (two to the third power) combinations.  The
                        	first pattern in the preceding list corresponds to the
                        	following eight TexMecs documents, and each of the other 210
                        	  expands similarly.
                        <div class="itemizedlist e625">
                           <div class="listitem e626">
                              <div class="para e627">d c b &lt;a| &lt;e| |a&gt; |e&gt;</div>
                           </div>
                           <div class="listitem e628">
                              <div class="para e629">&lt;d&gt; c b &lt;a| &lt;e| |a&gt; |e&gt;</div>
                           </div>
                           <div class="listitem e630">
                              <div class="para e631">d &lt;c&gt; b &lt;a| &lt;e| |a&gt; |e&gt;</div>
                           </div>
                           <div class="listitem e632">
                              <div class="para e633">&lt;d&gt; &lt;c&gt; b &lt;a| &lt;e| |a&gt; |e&gt;</div>
                           </div>
                           <div class="listitem e634">
                              <div class="para e635">d c &lt;b&gt; &lt;a| &lt;e| |a&gt; |e&gt;</div>
                           </div>
                           <div class="listitem e636">
                              <div class="para e637">&lt;d&gt; c &lt;b&gt; &lt;a| &lt;e| |a&gt; |e&gt;</div>
                           </div>
                           <div class="listitem e638">
                              <div class="para e639">d &lt;c&gt; &lt;b&gt; &lt;a| &lt;e| |a&gt; |e&gt;</div>
                           </div>
                           <div class="listitem e640">
                              <div class="para e641">&lt;d&gt; &lt;c&gt; &lt;b&gt; &lt;a| &lt;e| |a&gt; |e&gt;</div>
                           </div>
                        </div>
                        	
                     </div>
                     <div class="para e642">In total, then, there are 6 patterns for the start- and
                        	  end-tags of 
                        <div class="emphasis e643" role="ital">a</div> and 
                        <div class="emphasis e644" role="ital">e</div>, 210 ways to interleave 
                        <div class="emphasis e645" role="ital">b</div>, 
                        <div class="emphasis e646" role="ital">c</div>,
                        	  and 
                        <div class="emphasis e647" role="ital">d</div> into those patterns, and 8 ways to realize each
                        	  interleaving, for 10,080 (6 × 210 × 8)
                        	  structurally possible oo-TexMecs documents for this
                        	  configuration of five nodes.  Since each of the five nodes
                        	  can be either a leaf node or a non-terminal, there are 32
                        	  possible configurations.  These vary in their number of
                        	  possible realizations, but we hope it is now clear why
                        	  enumerating the distinct documents for five-node graphs
                        	  seems unlikely to be a helpful approach.
                        	
                     </div>
                  </div>
               </div>
            </div>
            We will thus rather proceed by way of a lemma&nbsp;(5.9) that
            provides a general characterization of oo-serializable CODGs, and
            will be useful for our second main result.
         </div>
         <div class="para e648">
            <div class="emphasis e649" role="bold">5.1 Definition</div> Let G = (V, ch) be a
            CODG. The 
            <div class="emphasis e650" role="ital">ancestral precedence</div> relation of G,
            denoted ap(G), is defined as:
         </div>
         <div class="popupBox e651">
            <div class="popupLabel" onmouseover="$('#d1e1379').show('1000');" onmouseout="$('#d1e1379').hide('1000');">[ blockquote ]</div>
            <div id="d1e1379" style="display: none;">
               <div class="blockquote">
                  <div class="para e652">ap(G) =
                     <div class="subscript e653">def</div> { (v, w) ∈ V × V | (v
                     ⇒ w) &amp; (w ⇏ v) }.
                  </div>
               </div>
            </div>
         </div>
         <div class="para e654">It is easy to show that ap(G) is always a strict partial-order on V.
            Informally, we could say that ap(G) gets rid of the cycles in G by contracting
            its (maximal) strongly-connected components, then re-expanding them to an equal
            number of 
            <div class="emphasis e655" role="ital">disconnected</div>
            vertices.
            
         </div>
         <div class="para e656">
            <div class="emphasis e657" role="bold">5.2 Definition</div> Let G = (V, ch) be a
            CODG. A 
            <div class="emphasis e658" role="ital">root</div> in G is a vertex r ∈ V for
            which:
         </div>
         <div class="popupBox e659">
            <div class="popupLabel" onmouseover="$('#d1e1400').show('1000');" onmouseout="$('#d1e1400').hide('1000');">[ blockquote ]</div>
            <div id="d1e1400" style="display: none;">
               <div class="blockquote">
                  <div class="para e660">(∄w ∈ V)[ (w, r) ∈ ap(G) ].</div>
               </div>
            </div>
         </div>
         <div class="para e661">
            <div class="emphasis e662" role="bold">5.3 Notation</div> Let G = (V, ch) be a CODG.
            Unless otherwise stated, ap denotes ap(G).
         </div>
         <div class="para e663">The next result establishes that for any distinct roots v and w,
            either v and w are in the same strongly-connected component, or else v and w
            are unordered in each of ssb and sea.
         </div>
         <div class="para e664">
            <div class="emphasis e665" role="bold">5.4 Lemma</div> Let G = (V, ch) be a CODG,
            and v and w two distinct roots in G. Then, either:
         </div>
         <div class="popupBox e666">
            <div class="popupLabel" onmouseover="$('#d1e1416').show('1000');" onmouseout="$('#d1e1416').hide('1000');">[ blockquote ]</div>
            <div id="d1e1416" style="display: none;">
               <div class="blockquote">
                  <div class="para e667">(v ⇒ w) &amp; (w ⇒ v)</div>
               </div>
            </div>
         </div>
         <div class="para e668">or</div>
         <div class="popupBox e669">
            <div class="popupLabel" onmouseover="$('#d1e1421').show('1000');" onmouseout="$('#d1e1421').hide('1000');">[ blockquote ]</div>
            <div id="d1e1421" style="display: none;">
               <div class="blockquote">
                  <div class="para e670">{ (v, w), (w, v) } ∩ ((ssb ∪ sea) − ⇒) = ∅.</div>
               </div>
            </div>
         </div>
         <div class="para e671">
            <div class="emphasis e672" role="bold">Note:</div> For space consideration, most
            proofs are omitted. 
         </div>
         <div class="para e673">Thus, an important difference between noDAGs and CODGs is that the
            latter can have unordered root pairs, whereas noDAGs have (by definition) their
            roots totally-ordered.
         </div>
         <div class="para e674">
            <div class="emphasis e675" role="bold">5.5 Definition</div> A CODG G = (V, ch) is
            said to be 
            <div class="emphasis e676" role="ital">sp-consistent</div> iff gsp is an acyclic
            relation, i.e., iff:
         </div>
         <div class="popupBox e677">
            <div class="popupLabel" onmouseover="$('#d1e1439').show('1000');" onmouseout="$('#d1e1439').hide('1000');">[ blockquote ]</div>
            <div id="d1e1439" style="display: none;">
               <div class="blockquote">
                  <div class="para e678">(∀v ∈ V)[(v, v) ∉ transitive-closure(gsp)].</div>
               </div>
            </div>
         </div>
         <div class="para e679">Note that if G is truly a multi-graph, i.e., if some node occurs more
            than once as a child of the same parent, then G is certainly
            
            <div class="emphasis e680" role="ital">not</div> sp-consistent. However, G could fail to be
            sp-consistent without being a true multi-graph, for example if two siblings are
            ordered differently by two distinct parents.
         </div>
         <div class="para e681">
            <div class="emphasis e682" role="bold">5.6 Definition</div> A CODG G = (V, ch) is
            said to be 
            <div class="emphasis e683" role="ital">reduced</div> iff no node is both
            directly and indirectly reachable from some other node, i.e., iff:
         </div>
         <div class="popupBox e684">
            <div class="popupLabel" onmouseover="$('#d1e1455').show('1000');" onmouseout="$('#d1e1455').hide('1000');">[ blockquote ]</div>
            <div id="d1e1455" style="display: none;">
               <div class="blockquote">
                  <div class="para e685">(∄v, w, x ∈ V)[ {(v, w), (v, x)} ⊆ E(G) &amp;
                     w ⇒ x].
                  </div>
               </div>
            </div>
         </div>
         <div class="para e686">Note that if there is a cycle in G, then it is 
            <div class="emphasis e687" role="ital">not</div> reduced.
         </div>
         <div class="para e688">
            <div class="emphasis e689" role="bold">5.7 Lemma</div> If a CODG is
            sp-consistent, is reduced, and has a single root, then it is isomorphic to a
            noDAG; thus, by 
            <div class="xref e690" linkend="M2008"></div>, it is oo-serializable iff it is
            completion-acyclic.
         </div>
         <div class="para e691">
            <div class="emphasis e692" role="bold">5.8 Definition</div> Let G be a CODG. A
            
            <div class="emphasis e693" role="ital">single-rooted extension</div> (sre) of a G, is
            identical to G with an added root that has as children the roots of the
            original CODG, in 
            <div class="emphasis e694" role="ital">some</div> ordering, without
            repetition.
         </div>
         <div class="para e695">Note that, in general, a CODG has more than one sre (in effect, n!,
            where n is the number of roots in the original CODG, i.e., one for each
            possible ordering of the original roots).
         </div>
         <div class="para e696">
            <div class="emphasis e697" role="bold">5.9 Lemma</div> A CODG is oo-serializable
            iff it has an sre that is oo-serializable.
         </div>
         <div class="para e698">
            <div class="emphasis e699" role="ital">Proof sketch.</div> (←): Let G be a
            CODG, and H an oo-serializable sre of G. Let D be any serialization of H.
            Because H has only one root, and D corresponds to H, there must be a range in D
            that contains all the others. Thus, the first and last tag of H must be
            matching tags. By “removing” those tags from D, we obtain an
            oo-serialization of G.
         </div>
         <div class="para e700">(→): Let G be an oo-serializable CODG, and D any serialization
            of G. By “adding” a start-tag and a matching end- tag at
            (respectively) the beginning and end of D, we obtain a document that can be
            shown to correspond to some sre of G.
         </div>
         <div class="para e701">We are now ready to state our first main result:</div>
         <div class="para e702">
            <div class="emphasis e703" role="bold">5.10 Theorem</div> There exist CODGs that
            are completion-acyclic but not oo-serializable.
         </div>
         <div class="para e704">
            <div class="emphasis e705" role="ital">Proof sketch.</div> The theorem follows
            from the observations that:
         </div>
         <div class="itemizedlist e706">
            <div class="listitem e707">
               <div class="para e708">Each of Examples 2.2 and 6 is completion-acyclic.</div>
            </div>
            <div class="listitem e709">
               <div class="para e710">Each of Examples 2.2 and 6 has exactly two sres, each of which is
                  sp-consistent, reduced, and (by definition of sre) has a single root.
               </div>
            </div>
            <div class="listitem e711">
               <div class="para e712">Each sre of each of Examples 2.2 and 6 is completion-
                  <div class="emphasis e713" role="ital">cyclic</div>.
               </div>
            </div>
         </div>
         <div class="para e714">By Lemma 5.7, none of Examples 2.2 and 6 has an sre that is
            oo-serializable. Thus, by Lemma 5.9, none of Examples 2.2 and 6 is
            oo-serializable.
         </div>
         <div class="para e715">Our second main result is easiest seen as a corollary to the proof of
            the preceding theorem. First, we define:
         </div>
         <div class="para e716">
            <div class="emphasis e717" role="bold">5.11 Definition</div> A CODG is said to be
            
            <div class="emphasis e718" role="ital">fully-completion-acyclic</div> (FCA) iff it has an sre
            that is completion-acyclic.
         </div>
         <div class="para e719">
            <div class="emphasis e720" role="bold">5.12 Theorem</div> A CODG is
            oo-serializable iff it is fully-completion-acyclic.
         </div>
         <div class="para e721">
            <div class="emphasis e722" role="ital">Proof sketch.</div> The theorem follows
            from the proof of the preceding theorem and the following lemma:
         </div>
         <div class="para e723">
            <div class="emphasis e724" role="bold">5.13 Lemma</div> If a CODG is not
            sp-consistent or is not reduced, then it is not completion-acyclic.
         </div>
      </div><a name="6CheckingfullcompletionacyclicityANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e725">
         <div class="title e726">6. Checking full-completion-acyclicity</div>
         <div class="para e727">An obvious way to check whether a CODG is fully-completion-acyclic is to try
            out all possible sres and see if at least one is completion-acyclic. From a
            completion-acyclic sre, it would be easy to derive an oo-serialization
            of the CODG. However, since there are n! different sres to check (where n is
            the number of roots in the CODG), this can be very inefficient. It would be
            nice to be able to check whether a CODG is fully-completion-acyclic without
            having to generate all possible sres.
         </div>
         <div class="para e728">It turns out it suffices to check each pair of roots for a particular
            condition which is verifiable in polynomial time. Since there are n × (n - 1)
            / 2 root-pairs and checking the condition can be done in polynomial time, it
            follows that full-completion-acyclicity can in fact be checked in polynomial
            time.
         </div>
         <div class="para e729">The condition to be checked is as follows.</div>
         <div class="para e730">
            <div class="emphasis e731" role="bold">6.1 Definition</div> Let r and s be two roots of
            some CODG G = (V, ch) that are unordered with respect to ssb(G). We say that r
            
            <div class="emphasis e732" role="ital">must precede</div> s, noted r ↝ s, iff there
            exist vertices x and y standing in either (or both) of the following configurations
            with
            respect to r and s:
         </div>
         <div class="para e733">
            
            <div class="mediaobject e734">
               <div class="imageobject e735">
                  <div class="metaBox e736"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1558').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1558" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e736'
                           </span><span class="metaAttribute">fileref='../../../vol10/graphics/Marcoux01/Marcoux01-008.png'
                           </span><span class="metaAttribute">format='png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
               <div class="caption e737">
                  <div class="para e738">Root-pair configuration 1</div>
               </div>
            </div>
            
            <div class="mediaobject e739">
               <div class="imageobject e740">
                  <div class="metaBox e741"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1565').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1565" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e741'
                           </span><span class="metaAttribute">fileref='../../../vol10/graphics/Marcoux01/Marcoux01-009.png'
                           </span><span class="metaAttribute">format='png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
               <div class="caption e742">
                  <div class="para e743">Root-pair configuration 2</div>
               </div>
            </div>
            
         </div>
         <div class="para e744">Here, the double-arrows represent the reachability (⇒) relation, not just
            parent-child relationships. The red double-arrow (with a stroke through it)
            means the complement of ⇒ (thus, in Configuration&nbsp;1, s ⇏ x). It does not
            matter whether or not r ⇒ y (resp. s ⇒ x) in Configuration&nbsp;1 (resp.
            Configuration&nbsp;2). In other words, 
            <div class="emphasis e745">at least</div> one of r
            ⇏ y and s ⇏ x must be the case. The dotted green arrow means that (x, y) ∈
            (ssb − ⇒), in other words, that x precedes y without being an ancestor of
            it.
         </div>
         <div class="para e746">An instance of at least one of those configurations is found in each of the following
            CODGs:
         </div>
         <div class="para e747">
            <div class="mediaobject e748">
               <div class="imageobject e749">
                  <div class="metaBox e750"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1580').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1580" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e750'
                           </span><span class="metaAttribute">fileref='../../../vol10/graphics/Marcoux01/Marcoux01-010.png'
                           </span><span class="metaAttribute">format='png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
               <div class="caption e751">
                  <div class="para e752">Example 7</div>
               </div>
            </div>
            
            <div class="mediaobject e753">
               <div class="imageobject e754">
                  <div class="metaBox e755"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1587').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1587" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e755'
                           </span><span class="metaAttribute">fileref='../../../vol10/graphics/Marcoux01/Marcoux01-011.png'
                           </span><span class="metaAttribute">format='png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
               <div class="caption e756">
                  <div class="para e757">Example 8</div>
               </div>
            </div>
            
            <div class="mediaobject e758">
               <div class="imageobject e759">
                  <div class="metaBox e760"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1594').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1594" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e760'
                           </span><span class="metaAttribute">fileref='../../../vol10/graphics/Marcoux01/Marcoux01-012.png'
                           </span><span class="metaAttribute">format='png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
               <div class="caption e761">
                  <div class="para e762">Example 9</div>
               </div>
            </div>
         </div>
         <div class="para e763">
            <div class="emphasis e764" role="bold">6.2 Lemma</div> Let G be a CODG, and r and s be
            two roots in G such that r ↝ s. Then, for each H that is a CA sre of G, (r, s)
            ∈ gsp(H).
         </div>
         <div class="para e765">
            <div class="emphasis e766">Proof sketch.</div> If there exists no CA sre of G, or if
            there are no two roots r and s in G such that r ↝ s, then the lemma is
            vacuously verified. Let thus H be any CA sre of G and, for the sake of
            contradiction, suppose r and s are two G-roots such that r ↝ s and such that
            (r, s) ∉ gsp(H). Suppose x and y are two vertices as in Configuration&nbsp;1
            above (we prove only the case of Configuration&nbsp;1; that of
            Configuration&nbsp;2 is proved similarly).
         </div>
         <div class="para e767">By the definition of sre, if (r, s) ∉ gsp(H), then it must be the case that
            (s, r) ∈ gsp(H), and thus, by construction of ssb(H) (Definition&nbsp;4.3-2),
            that (s, r) ∈ ssb(H). Hence, it follows by Lemma&nbsp;4 of 
            <div class="xref e768" linkend="M2008"></div> and the fact that r and s do not stand in
            ancestor-descendant relationship (being both G-roots, they are
            ⇒-incomparable), that (r, s) ∈ sea(H). Similarly, from (x, y) ∈ ssb(H) and x ⇏
            y, and y ⇏ x (because (x, y) ∈ ssb(H)), we conclude that (y, x) ∈
            sea(H).
         </div>
         <div class="para e769">Now, by construction of sea(H) (Definition&nbsp;4.3-4), and from the facts
            that r ⇒ x, that (r, s) ∈ gsp
            <div class="superscript e770">-1</div>(H), and that s ⇏ x,
            we conclude that (x, s) ∈ sea(H). So, we have (y, x) ∈ sea(H) (established
            earlier), and (x, s) ∈ sea(H), and (s, y) ∈ sea(H) (because s ⇒ y). Thus,
            sea(H) is cyclic, contrary to our hypothesis that H is CA, and so we must
            reject the hypothesis that (r, s) ∉ gsp(H), and conclude that (r, s) ∈
            gsp(H).
         </div>
         <div class="para e771">QED</div>
         <div class="para e772">
            <div class="emphasis e773" role="bold">6.3 Theorem</div> A CODG is FCA iff it is CA and
            it does not have any two roots r and s such that r ↝ s and s ↝ r.
         </div>
         <div class="para e774">
            <div class="emphasis e775">Proof sketch.</div>
         </div>
         <div class="para e776">(⇒) Any FCA CODG is CA. If a CODG had roots r and s such that r ↝ s and s ↝
            r, then by Lemma&nbsp;6.2, it would have a cycle in ssb, and thus could not be
            CA.
         </div>
         <div class="para e777">(⇐) Let G be a CA CODG in which no two roots r and s are such that r ↝ s and
            s ↝ r. Note that by Lemma&nbsp;5.13 and the fact that G is CA, we know that G
            is sp-consistent and reduced, and will thus take this for granted.
         </div>
         <div class="para e778">We give an algorithm for constructing an ordering of the roots of G that can
            be used as the root-order in a sre H of G which will be shown to be FCA. In
            the algorithm, ssb(G, ROR) denotes the result of building ssb as per
            Definitions&nbsp;4.3-1 and&nbsp;4.3-2, but using gsp(G) ∪ ROR instead of
            gsp(G)
         </div>
         <div class="para e779">
            <div class="emphasis e780" role="bold">Algorithm:</div>
            
            <div class="orderedlist e781">
               <div class="listitem e782">
                  <div class="para e783">Let ROR = { (r, s) | r and s are roots in G and r ↝ s }.</div>
               </div>
               <div class="listitem e784">
                  <div class="para e785">Let SSB = ssb(G, ROR).</div>
               </div>
               <div class="listitem e786">
                  <div class="para e787">WHILE (∃ x, y ∈ V)[ch(x) = ch(y) &amp; {(x, y), (y, x)} ∩ SSB =
                     ∅] 
                     <div class="orderedlist e788">
                        <div class="listitem e789">
                           <div class="para e790">Pick any x and y satisfying the WHILE clause, and
                              let X = x, and Y = y.
                           </div>
                        </div>
                        <div class="listitem e791">
                           <div class="para e792">Let ROR = ROR ∪ {(r, s) | r and s are roots in G,
                              and r ⇒
                              <div class="superscript e793">*</div> X, and s
                              ⇒
                              <div class="superscript e794">*</div> Y}.
                           </div>
                        </div>
                        <div class="listitem e795">
                           <div class="para e796">Let SSB = ssb(G, ROR).</div>
                        </div>
                     </div>
                     
                  </div>
               </div>
            </div> When the algorithm stops, ROR is the root-order to be used for
            constructing H.
         </div>
         <div class="para e797">The intuition behind the algorithm is best conveyed with examples.
            Essentially, the algorithm goes like this: start with the root-orderings that
            are imposed by the topology of the CODG, i.e., those pairs of roots (r, s) for
            which r ↝ s. Then, for the other root-pairs, they can basically be ordered
            randomly, as long as no 
            <div class="quote e798">silly decision</div> is taken.
         </div>
         <div class="para e799">To see what 
            <div class="quote e800">silly decisions</div> would be, consider
            Example&nbsp;10. A silly decision would be to stick root r between s and t. To
            avoid such decisions, the root-ordering must be built gradually, considering
            one by one (the order does not matter) the unordered pairs of parents of the
            same children. For each such pair (x, y), decide of an arbitrary order, then,
            make sure all roots reachable upwards from x come before all those reachable
            upwards from y (there can be no root reachable both ways, otherwise, x and y
            would have been ordered to start with).
         </div>
         <div class="para e801">Each time such root-orderings are added, the consequences on the global ordering
            of the CODG are recomputed and propagated down from the roots.
         </div>
         <div class="para e802">Example&nbsp;11 provides a more intricate example, in which eight possible
            pairs of unordered parents of the same children exist: (u, w), (u, x), (v, w),
            and (v, x), and their inverse. Whichever pair is chosen, it will result in roots r
            and s
            being ordered at step&nbsp;3b, and then, in all eight pairs being ordered at 
            step&nbsp;3c.
         </div>
         <div class="para e803">Examples&nbsp;12 and&nbsp;13 show that the addition of a leaf can cause some
            root-pairs to be ordered from the start: (r ↝ s) and (r ↝ t) in
            Example&nbsp;12; (r ↝ s) in Example&nbsp;13.
         </div>
         <div class="para e804">
            
            <div class="mediaobject e805">
               <div class="imageobject e806">
                  <div class="metaBox e807"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1685').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1685" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e807'
                           </span><span class="metaAttribute">fileref='../../../vol10/graphics/Marcoux01/Marcoux01-013.png'
                           </span><span class="metaAttribute">format='png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
               <div class="caption e808">
                  <div class="para e809">Example 10</div>
               </div>
            </div>
            
            <div class="mediaobject e810">
               <div class="imageobject e811">
                  <div class="metaBox e812"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1692').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1692" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e812'
                           </span><span class="metaAttribute">fileref='../../../vol10/graphics/Marcoux01/Marcoux01-014.png'
                           </span><span class="metaAttribute">format='png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
               <div class="caption e813">
                  <div class="para e814">Example 11</div>
               </div>
            </div>
            
            <div class="mediaobject e815">
               <div class="imageobject e816">
                  <div class="metaBox e817"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1699').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1699" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e817'
                           </span><span class="metaAttribute">fileref='../../../vol10/graphics/Marcoux01/Marcoux01-015.png'
                           </span><span class="metaAttribute">format='png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
               <div class="caption e818">
                  <div class="para e819">Example 12</div>
               </div>
            </div>
            
            <div class="mediaobject e820">
               <div class="imageobject e821">
                  <div class="metaBox e822"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1706').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1706" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e822'
                           </span><span class="metaAttribute">fileref='../../../vol10/graphics/Marcoux01/Marcoux01-016.png'
                           </span><span class="metaAttribute">format='png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
               <div class="caption e823">
                  <div class="para e824">Example 13</div>
               </div>
            </div>
            
         </div>
         <div class="para e825">
            <div class="emphasis e826">Proof sketch of termination:</div> At each turn, at least one
            pair of the kind sought for in (3) is ordered. Indeed, it can be shown that
            the chosen pair (x, y) causes arcs to be added to ROR that will necessarily
            order the pair (x, y) itself. Thus, eventually, no pair satisfying the WHILE
            clause will remain.
         </div>
         <div class="para e827">
            <div class="emphasis e828">Proof sketch that ROR orders all pairs of roots:</div> The
            existence of an unordered root-pair 
            implies that there is a pair satisfying the WHILE clause. Thus, when no more
            such pair exists, all the roots 
            have been ordered.
            
         </div>
         <div class="para e829">
            <div class="emphasis e830">Proof sketch that ssb(G, ROR) is acyclic:</div> Any condition
            that might cause a cycle would also cause a cycle in { (r, s) | r and s are
            roots in G and r ↝ s }, a contradiction.
         </div>
         <div class="para e831">A rough analysis of the algorithm shows that its running time is polynomial
            (probably with degree at most 3 or 4). Obviously, it could be used to actually
            build a CA sre of any FCA CODG, and thus an oo-serialization of the CODG. This
            establishes a polynomial upper-bound on the task of verifying
            full-completion-acyclicity and of generating an oo-serialization of a FCA
            CODG. While interesting, we do not believe these upper-bounds to be tight, and
            hence consider the exact complexity of these tasks to be open
            questions.
         </div>
      </div><a name="7ConclusionandfutureworkANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e832">
         <div class="title e833">7. Conclusion and future work</div>
         <div class="para e834">In this paper, we defined a class of graphs, 
            <div class="emphasis e835" role="ital">child-arc-ordered directed graphs</div> (CODGs), that includes
            multi-graphs and non-acyclic graphs, and investigated the conditions under
            which a CODG is “oo-serializable”, i.e., has a structure which
            corresponds to that of an overlap-only marked-up document. We found that the
            property of completion-acyclicity does 
            <div class="emphasis e836" role="ital">not</div>
            guarantee oo-serializability in general for CODGs, by showing that there exist
            completion-acyclic CODGs that are not oo-serializable. By contrast, Marcoux
            has shown that for the less general class of 
            <div class="emphasis e837" role="ital">node-ordered-DAGs</div> (noDAGs), completion-acyclicity does
            guarantee oo-serializability 
            <div class="xref e838" linkend="M2008"></div>.
         </div>
         <div class="para e839">We then defined a condition strictly stronger than
            completion-acyclicity, 
            <div class="emphasis e840" role="ital">full-completion-acyclicity</div>, and showed that it does
            guarantee oo-serializability for all CODGs.
         </div>
         <div class="para e841">Finally, we presented polynomial-time algorithms for checking
            full-completion-acyclicity and for computing an oo-serialization of
            fully-completion-acyclic CODGs. However, we do not believe these algorithms to
            be optimal. Thus, open questions include determining the exact complexity of
            — and finding optimal algorithms for — checking
            completion-acyclicity, full-completion-acyclicity, and of actually computing
            an oo-serialization of a CODG once it is found to be serializable.
         </div>
         <div class="para e842">Another area of research we hope to pursue in the near future is
            investigating whether and how some forms of interrupted and virtual elements,
            as found in TexMecs, can be characterized in terms of graphs.
         </div>
      </div><a name="NotationandsymbolsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="appendix e843">
         <div class="title e844">Notation and symbols</div>
         <div class="para e845">For the convenience of readers who find the notation used
            here unfamiliar, we list here the symbols and conventional
            variable names used in this paper.
         </div>
         <div class="variablelist e846">
            <div class="varlistentry e847">
               <div class="term e848">↝</div>
               <div class="listitem e849">
                  <div class="para e850">the must-precede relation on roots of a graph
                     	  G:  r ↝ s if and only if there exist vertices x and y standing in some
                     	  specific configurations with respect to r and s (see Definition&nbsp;6.1).
                     	  
                  </div>
               </div>
            </div>
            <div class="varlistentry e851">
               <div class="term e852">⇒
                  <div class="subscript e853">G</div>
               </div>
               <div class="listitem e854">
                  <div class="para e855">the positive transitive closure of
                     	    E(G), for any graph G; sometimes known as the 
                     	    reachability relation of G; often abbreviated
                     	    to ⇒ when the identity of G is understood.
                     	  
                  </div>
               </div>
            </div>
            <div class="varlistentry e856">
               <div class="term e857">⇒
                  <div class="superscript e858">*</div>
                  <div class="subscript e859">G</div>
               </div>
               <div class="listitem e860">
                  <div class="para e861">the reflexive transitive closure of
                     	    E(G), for any graph G; often abbreviated
                     	    to ⇒
                     <div class="superscript e862">*</div> when 
                     	    the identity of G is understood.
                     	  
                  </div>
               </div>
            </div>
            <div class="varlistentry e863">
               <div class="term e864">∈</div>
               <div class="listitem e865">
                  <div class="para e866">is an element of.  So 
                     <div class="quote e867">x ∈
                        	      y
                     </div> means that x is an element in the 
                     	    set y.
                     	  
                  </div>
               </div>
            </div>
            <div class="varlistentry e868">
               <div class="term e869">∪</div>
               <div class="listitem e870">
                  <div class="para e871">set union.  So 
                     <div class="quote e872">x ∪ y</div>
                     	    denotes the set of all elements which are members either
                     	    of set x or of set y or both.
                     	  
                  </div>
               </div>
            </div>
            <div class="varlistentry e873">
               <div class="term e874">∩</div>
               <div class="listitem e875">
                  <div class="para e876">set intersection.  So 
                     <div class="quote e877">x ∩ y</div>
                     	    denotes the set of all elements which are members of
                     	    both set x and set y.
                     	  
                  </div>
               </div>
            </div>
            <div class="varlistentry e878">
               <div class="term e879">ap(G)</div>
               <div class="listitem e880">
                  <div class="para e881">the ancestral-precedence relation of a graph G;
                     	    abbreviated ap when G is understood.  This is a binary
                     	    relation consisting of all node pairs (v, w) for which
                     	    (informally) v is an ancestor of w and not vice-versa.
                     	  
                  </div>
               </div>
            </div>
            <div class="varlistentry e882">
               <div class="term e883">ch</div>
               <div class="listitem e884">
                  <div class="para e885">(core meaning) a unary function that maps each
                     	    node of a graph to a sequence of nodes of that
                     	    graph.
                  </div>
                  <div class="para e886">(secondary meaning) a two-argument function that 
                     	    maps from a pair (v, n) (where v is a node and n is
                     	    an integer) to at most one node among the children of v.
                     	  
                  </div>
               </div>
            </div>
            <div class="varlistentry e887">
               <div class="term e888">ch(v)</div>
               <div class="listitem e889">
                  <div class="para e890">for any node v in a graph G,
                     	    
                     <div class="quote e891">ch(v)</div> denotes a sequence of nodes in
                     	    G.
                  </div>
                  <div class="para e892">Note that sequences are typically modeled as
                     	    sets of pairs (n, e) where n is a number and e an 
                     	    element of the sequence.  The set of pairs
                     	    denoted by ch(v) can thus be treated as a function 
                     	    from non-negative integers to nodes in the graph:
                     	    for any node v and any suitable integer
                     	    n, 
                     <div class="quote e893">ch(v)(n)</div> denotes the nth child of v;
                     	    ch(v)(0) denotes the first child, ch(v)(1) denotes
                     	    the second, etc. To reduce the need for parentheses,
                     	    
                     <div class="quote e894">ch(v)(n)</div> is normally written in the
                     	    simpler form 
                     <div class="quote e895">ch(v,n)</div>.
                     	  
                  </div>
               </div>
            </div>
            <div class="varlistentry e896">
               <div class="term e897">ch(v, n)</div>
               <div class="listitem e898">
                  <div class="para e899">denotes the nth child (counting from 0)
                     	    of node v.  This is a short-hand form for the
                     	    expression ch(v)(n).
                     	  
                  </div>
               </div>
            </div>
            <div class="varlistentry e900">
               <div class="term e901">E(G)</div>
               <div class="listitem e902">
                  <div class="para e903">the set of arcs in a graph G</div>
               </div>
            </div>
            <div class="varlistentry e904">
               <div class="term e905">G</div>
               <div class="listitem e906">
                  <div class="para e907">the conventional variable for a graph (here
                     	invariably a CODG)
                  </div>
               </div>
            </div>
            <div class="varlistentry e908">
               <div class="term e909">gsp</div>
               <div class="listitem e910">
                  <div class="para e911">a shorthand form of gsp(G) when the identity of
                     	    the graph G is understood.
                     	  
                  </div>
               </div>
            </div>
            <div class="varlistentry e912">
               <div class="term e913">gsp(G)</div>
               <div class="listitem e914">
                  <div class="para e915">the global sibling-precedence relation of a graph G;
                     	    written as 
                     <div class="quote e916">sp</div> when G is understood.
                     	    This is (speaking informally) a relation consisting of all
                     	    node pairs (v, w) which share a parent, and for which v
                     	    precedes w among the children of that parent. Note that
                     	    the same pair of children may share more than one parent,
                     	    occurring in one order for one parent and in the other
                     	    order for the other parent.  So gsp(Example&nbsp;2.3)
                     	    includes both (
                     <div class="emphasis e917" role="ital">b</div>, 
                     <div class="emphasis e918" role="ital">c</div>) and (
                     <div class="emphasis e919" role="ital">c</div>, 
                     <div class="emphasis e920" role="ital">b</div>).
                     	  
                  </div>
               </div>
            </div>
            <div class="varlistentry e921">
               <div class="term e922">N</div>
               <div class="listitem e923">
                  <div class="para e924">the natural numbers (0, 1, 2, ...)</div>
               </div>
            </div>
            <div class="varlistentry e925">
               <div class="term e926">n, m</div>
               <div class="listitem e927">
                  <div class="para e928">conventional variables used to represent
                     	    individual natural numbers
                  </div>
               </div>
            </div>
            <div class="varlistentry e929">
               <div class="term e930">r</div>
               <div class="listitem e931">
                  <div class="para e932">conventional variable used to denote an
                     	    arbitrary range.
                  </div>
               </div>
            </div>
            <div class="varlistentry e933">
               <div class="term e934">r
                  <div class="subscript e935">1</div>
               </div>
               <div class="listitem e936">
                  <div class="para e937">for a given range r, 
                     	    r
                     <div class="subscript e938">1</div> denotes the first
                     	    element of r.
                  </div>
               </div>
            </div>
            <div class="varlistentry e939">
               <div class="term e940">r
                  <div class="subscript e941">2</div>
               </div>
               <div class="listitem e942">
                  <div class="para e943">for a given range r, 
                     	    r
                     <div class="subscript e944">2</div> denotes the second
                     	    element of r.
                  </div>
               </div>
            </div>
            <div class="varlistentry e945">
               <div class="term e946">r, s</div>
               <div class="listitem e947">
                  <div class="para e948">conventional variables used to denote two
                     	    roots of a CODG.
                  </div>
               </div>
            </div>
            <div class="varlistentry e949">
               <div class="term e950">sea(G)</div>
               <div class="listitem e951">
                  <div class="para e952">the 
                     <div class="quote e953">should-end-after</div> relation
                     	    of a graph G; abbreviated 
                     <div class="quote e954">sea</div> when G is
                     	    understood
                  </div>
               </div>
            </div>
            <div class="varlistentry e955">
               <div class="term e956">seaa(G)</div>
               <div class="listitem e957">
                  <div class="para e958">the 
                     <div class="quote e959">should-end-after additions</div>
                     	    relation of a graph G; abbreviated 
                     <div class="quote e960">seaa</div>
                     	    when G is understood
                  </div>
               </div>
            </div>
            <div class="varlistentry e961">
               <div class="term e962">sp</div>
               <div class="listitem e963">
                  <div class="para e964">a shorthand form of sp(G) when the identity of
                     	    the graph G is understood.
                     	  
                  </div>
               </div>
            </div>
            <div class="varlistentry e965">
               <div class="term e966">sp(G)</div>
               <div class="listitem e967">
                  <div class="para e968">the sibling-precedence relation of a graph G; this is
                     	    a ternary relation consisting of all node triples (v, w,
                     	    x) for which (informally) w precedes x among the children
                     	    of v; note that if w occurs more than once among the
                     	    children of v, then the triple (v, w, w) appears in
                     	    sp.  If some node x occurs between the two occurrences of
                     	    w, then (v, w, x) and (v, x, w) are both in sp.
                  </div>
               </div>
            </div>
            <div class="varlistentry e969">
               <div class="term e970">sre</div>
               <div class="listitem e971">
                  <div class="para e972">single-rooted extension of some graph G.  Note that
                     	    any multi-rooted graph G has many single-rooted extensions
                     	    (one for each possible ordering of the roots of G).
                     	  
                  </div>
               </div>
            </div>
            <div class="varlistentry e973">
               <div class="term e974">ssb(G)</div>
               <div class="listitem e975">
                  <div class="para e976">the 
                     <div class="quote e977">should-start-before</div>
                     	    relation of a graph G; abbreviated 
                     <div class="quote e978">ssb</div> when
                     	    G is understood
                  </div>
               </div>
            </div>
            <div class="varlistentry e979">
               <div class="term e980">ssba(G)</div>
               <div class="listitem e981">
                  <div class="para e982">the 
                     <div class="quote e983">should-start-before
                        	      additions
                     </div> relation of a graph G; abbreviated
                     	    
                     <div class="quote e984">ssba</div> when G is understood
                  </div>
               </div>
            </div>
            <div class="varlistentry e985">
               <div class="term e986">V</div>
               <div class="listitem e987">
                  <div class="para e988">the set of nodes (or vertices) in a graph; 
                     	  a short-hand for V(G)
                  </div>
               </div>
            </div>
            <div class="varlistentry e989">
               <div class="term e990">V(G)</div>
               <div class="listitem e991">
                  <div class="para e992">the set of vertices in a graph G</div>
               </div>
            </div>
            <div class="varlistentry e993">
               <div class="term e994">V × V</div>
               <div class="listitem e995">
                  <div class="para e996">the Cartesian product of V, the set of nodes;
                     	    that is, the set of pairs (v, w) where v ∈ V and w
                     	    ∈ V
                  </div>
               </div>
            </div>
            <div class="varlistentry e997">
               <div class="term e998">V × V × V</div>
               <div class="listitem e999">
                  <div class="para e1000">the set of triples (v, w, x) where v, w and x
                     	are all ∈ V.
                  </div>
               </div>
            </div>
            <div class="varlistentry e1001">
               <div class="term e1002">v, w, x, u</div>
               <div class="listitem e1003">
                  <div class="para e1004">variables conventionally used
                     	    for individual nodes in a graph (by convention, all of 
                     	    v, w, x, u ∈ V)
                  </div>
               </div>
            </div>
         </div>
      </div><a name="ReferencesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e1005">
         <div class="title e1006">References</div>
         <div class="bibliomixed e1007" xml:id="B1995">David Barnard, Lou Burnard, Jean-Pierre
            Gaspart, Lynne A. Price, C. M. Sperberg-McQueen, and Giovanni Battista Varile.
            “Hierarchical Encoding of Text: Technical Problems and SGML
            Solutions”, in 
            <div class="emphasis e1008" role="ital">Computers and the
               Humanities
            </div>, 29/3 1995, pp. 211-231. 
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e1009" xlink:actuate="onRequest" xlink:href="http://www.springerlink.com/content/p7775247276v88h3/" xlink:show="new" xlink:type="simple">http://www.springerlink.com/content/p7775247276v88h3/</div>,  
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e1010" xlink:actuate="onRequest" xlink:href="http://xml.coverpages.org/barnardHier-ps.gz" xlink:show="new" xlink:type="simple">http://xml.coverpages.org/barnardHier-ps.gz</div>. doi:
            <div class="biblioid doi e1011">10.1007/BF01830617</div>
         </div>
         <div class="bibliomixed e1012" xml:id="D2004">Steven DeRose. “Markup Overlap: A
            Review and a Horse”.  Paper delivered at Extreme Markup
            Languages, 2004, Montréal.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e1013" xlink:actuate="onRequest" xlink:href="http://conferences.idealliance.org/extreme/html/2004/DeRose01/EML2004DeRose01.html" xlink:show="new" xlink:type="simple">http://conferences.idealliance.org/extreme/html/2004/DeRose01/EML2004DeRose01.html</div>
            
         </div>
         <div class="bibliomixed e1014" xml:id="HS2003">Claus Huitfeldt and C. M. Sperberg-McQueen.
            
            <div class="emphasis e1015" role="ital">TexMECS: An experimental markup meta-language for complex
               documents.
            </div> University of Bergen, January 2001, rev. October 2003. 
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e1016" xlink:actuate="onRequest" xlink:href="http://mlcd.blackmesatech.com/mlcd/2003/Papers/texmecs.html" xlink:show="new" xlink:type="simple">http://mlcd.blackmesatech.com/mlcd/2003/Papers/texmecs.html</div>
         </div>
         <div class="bibliomixed e1017" xml:id="M2008">Yves Marcoux. 
            <div class="emphasis e1018" role="ital">Graph
               characterization of overlap-only TexMECS and other overlapping markup
               formalisms
            </div>. Proceedings of the 
            <div class="emphasis e1019" role="ital">Balisage
               2008
            </div> conference, 12-15 august 2008, Montréal (Canada). 
            doi:
            <div class="biblioid doi e1020">10.4242/BalisageVol1.Marcoux01</div>
         </div>
         <div class="bibliomixed e1021" xml:id="M2012">Moore, Neil. 
            <div class="emphasis e1022">Multihierarchical documents
               and fine-grained access control
            </div> (2012). Theses and
            Dissertations--Computer Science. Paper&nbsp;6. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e1023" xlink:actuate="onRequest" xlink:href="http://uknowledge.uky.edu/cs_etds/6" xlink:show="new" xlink:type="simple">http://uknowledge.uky.edu/cs_etds/6</div>
         </div>
         <div class="bibliomixed e1024" xml:id="SH2004">C. M. Sperberg-McQueen and Claus Huitfeldt.
            
            <div class="emphasis e1025" role="ital">GODDAG: A Data Structure for Overlapping
               Hierarchies.
            </div> Springer-Verlag (2004).
            Preprint at 
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e1026" xlink:actuate="onRequest" xlink:href="http://cmsmcq.com/2000/poddp2000.html" xlink:show="new" xlink:type="simple">http://cmsmcq.com/2000/poddp2000.html</div>
            
         </div>
         <div class="bibliomixed e1027" xml:id="SH1999">C. M. Sperberg-McQueen and Claus Huitfeldt:
            “Concurrent Document Hierarchies in MECS and SGML”, in
            
            <div class="emphasis e1028" role="ital">Literary and Linguistic Computing</div>, 14 1999,
            pp. 29-42. 
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e1029" xlink:actuate="onRequest" xlink:href="http://llc.oxfordjournals.org/cgi/content/abstract/14/1/29" xlink:show="new" xlink:type="simple">http://llc.oxfordjournals.org/cgi/content/abstract/14/1/29</div>. doi:
            <div class="biblioid doi e1030">10.1093/llc/14.1.29</div>
         </div>
         <div class="bibliomixed e1031" xml:id="W2005">Andreas Witt. “Multiple Hierarchies: New
            Aspects of an Old Solution”, in: Stefanie Dipper, Michael Götze, and
            Manfred Stede (eds.), 
            <div class="emphasis e1032" role="ital">Heterogeneity in Focus: Creating
               and Using Linguistic Databases
            </div>, vol. 2 of Interdisciplinary
            Studies on Information Structure (ISIS), Working Papers of the SFB 632.
            University of Potsdam, Germany, 2005. (Corrected reprint of an Extreme Markup
            2004 paper.) 
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e1033" xlink:actuate="onRequest" xlink:href="http://www.sfb632.uni-potsdam.de/publications/isis02_4witt.pdf" xlink:show="new" xlink:type="simple">http://www.sfb632.uni-potsdam.de/publications/isis02_4witt.pdf</div>
         </div>
      </div>
   </div>
</div>