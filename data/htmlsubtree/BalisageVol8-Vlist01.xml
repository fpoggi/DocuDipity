<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#FleshingtheXDMchimeraANCHOR" name="FleshingtheXDMchimeraTOC">Fleshing the XDM chimera</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#MotivationANCHOR" name="MotivationTOC">Motivation</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#XMLDataModelsANCHOR" name="XMLDataModelsTOC">XML Data Models</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#XPath/XSLT10ANCHOR" name="XPath/XSLT10TOC">XPath/XSLT 1.0</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#XDML20:XPath20/XSLT20/XQuery10ANCHOR" name="XDML20:XPath20/XSLT20/XQuery10TOC">XDML 2.0: XPath 2.0/XSLT 2.0/XQuery 1.0</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#XDM30:XPath30/XSLT30/XQuery30ANCHOR" name="XDM30:XPath30/XSLT30/XQuery30TOC">XDM 3.0: XPath 3.0/XSLT 3.0/XQuery 3.0</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IdentityCrisisANCHOR" name="IdentityCrisisTOC">Identity Crisis</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#Introducing%CF%87%CE%AF%CE%BC%CE%B1%CE%B9%CF%81%CE%B1%CE%BB(chimeral)theChimeraLanguageANCHOR" name="Introducing%CF%87%CE%AF%CE%BC%CE%B1%CE%B9%CF%81%CE%B1%CE%BB(chimeral)theChimeraLanguageTOC">Introducing χίμαιραλ (chimeral), the Chimera Language</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ExampleANCHOR" name="ExampleTOC">Example</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#%CF%87%CE%AF%CE%BC%CE%B1%CE%B9%CF%81%CE%B1%CE%BBInaNutshellANCHOR" name="%CF%87%CE%AF%CE%BC%CE%B1%CE%B9%CF%81%CE%B1%CE%BBInaNutshellTOC">χίμαιραλ In a Nutshell</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#RemainingIssuesANCHOR" name="RemainingIssuesTOC">Remaining Issues</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#%CF%87%CE%AF%CE%BC%CE%B1%CE%B9%CF%81%CE%B1%CE%BBandtheidentitycrisisANCHOR" name="%CF%87%CE%AF%CE%BC%CE%B1%CE%B9%CF%81%CE%B1%CE%BBandtheidentitycrisisTOC">χίμαιραλ and the identity crisis</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#MovingthechimeraforwardANCHOR" name="MovingthechimeraforwardTOC">Moving the chimera forward</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#EmbracingRDFANCHOR" name="EmbracingRDFTOC">Embracing RDF</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#SyntacticalsugarANCHOR" name="SyntacticalsugarTOC">Syntactical sugar</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#XPathANCHOR" name="XPathTOC">XPath</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ValidationANCHOR" name="ValidationTOC">Validation</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConclusionANCHOR" name="ConclusionTOC">Conclusion</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">ancestor::</div>
         <div class="singletermTERMS">Atomic values</div>
         <div class="singletermTERMS">August 7 - 10, 2012</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">Bug 16118</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2012</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">Chimera (mythology)</div>
         <div class="singletermTERMS">Chimera (genetics)</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">deeply equal</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">early version</div>
         <div class="singletermTERMS">Eric</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">interleave</div>
         <div class="singletermTERMS">item</div>
         <div class="singletermTERMS">items</div>
         <div class="singletermTERMS">identities</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
         <div class="singletermTERMS">kind test</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">map:new()</div>
         <div class="singletermTERMS">map:item()</div>
         <div class="singletermTERMS">map{1:= 'foo'}</div>
         <div class="singletermTERMS">map{1:= ('foo', 'bar')}</div>
         <div class="singletermTERMS">map()</div>
         <div class="singletermTERMS">map</div>
         <div class="singletermTERMS">More musings on XDM 3.0</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">node</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">own specification</div>
         <div class="singletermTERMS">ObjectIdentity on c2.com</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">path expressions</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">restriction on interleave</div>
         <div class="singletermTERMS">result tree fragments</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">sibling::</div>
         <div class="singletermTERMS">show</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">The Syntactic Web</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
         <div class="singletermTERMS">usually ugly, foolish or impossible fantasies</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
         <div class="singletermTERMS">vdv@dyomedea.com</div>
         <div class="singletermTERMS">van der Vlist</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">xdm:*</div>
         <div class="singletermTERMS">xdm:element</div>
         <div class="singletermTERMS">xdm:attribute</div>
         <div class="singletermTERMS">XMLfr.org</div>
         <div class="singletermTERMS">XDM</div>
         <div class="singletermTERMS">XPath 1.0 data model</div>
         <div class="singletermTERMS">XSLT 1.0 data model</div>
         <div class="singletermTERMS">XQuery and XPath Data Model 3.0</div>
         <div class="singletermTERMS">XDM Maps should be first class citizens</div>
         <div class="singletermTERMS">XDM serialization</div>
         <div class="singletermTERMS">XDML</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="FleshingtheXDMchimeraANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3">
      <div class="title e1">Fleshing the XDM chimera</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2012</div>
            <div class="confdates e5">August 7 - 10, 2012</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">The XQuery and XPath Data Model 3.0 (XDM) is the kernel of the XML ecosystem. XDM
               had been extended with foreign item types to embrace new data sources such as JSON,
               taking the risk
               to become a chimera. This talk explores some ways to move this fundamental piece of
               the XML stack forward.
            </div>
         </div>
         <div class="author e8">
            <div class="personname e9">
               <div class="firstname e10">Eric</div>
               <div class="surname e11">van der Vlist</div>
            </div>
            <div class="personblurb e12">
               <div class="para e13">Eric is an independent consultant and trainer. His domain of expertise include Web
                  development and XML technologies.
               </div>
               <div class="para e14">He is the creator and main editor of 
                  <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e15" xlink:actuate="onRequest" xlink:href="http://xmlfr.org" xlink:show="new" xlink:type="simple">XMLfr.org</div>, the main site dedicated to XML technologies in French, the author of the O'Reilly
                  animal books XML Schema and RELAX NG and a member or the ISO DSDL (
                  <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e16" xlink:actuate="onRequest" xlink:href="http://dsdl.org" xlink:show="new" xlink:type="simple">http://dsdl.org</div>) working group focused on XML schema languages.
               </div>
               <div class="para e17">He is based in Paris and you can reach him by mail (
                  <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e18" xlink:actuate="onRequest" xlink:href="mailto:vdv@dyomedea.com" xlink:show="new" xlink:type="simple">vdv@dyomedea.com</div>) or meet him in one of the many conferences where he
                  presents his projects.
               </div>
            </div>
            <div class="affiliation e19">
               <div class="orgname e20">Dyomedea</div>
            </div>
         </div>
         <div class="legalnotice e21">
            <div class="para e22">Published under the Creative Commons "cc by" license</div>
         </div>
      </div><a name="MotivationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e23">
         <div class="title e24">Motivation</div>
         <div class="popupBox e25">
            <div class="popupLabel" onmouseover="$('#d1e44').show('1000');" onmouseout="$('#d1e44').hide('1000');">[ blockquote ]</div>
            <div id="d1e44" style="display: none;">
               <div class="blockquote">
                  <div class="para e26">
                     <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e27" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/Chimera_%28mythology%29" xlink:show="new" xlink:type="simple">Chimera (mythology)</div>: The Chimera (also Chimaera or Chimæra) (Greek: Χίμαιρα, Khimaira, from χίμαρος,
                     khimaros, "she-goat") was, according to Greek mythology, a monstrous fire-breathing
                     female creature of Lycia in Asia Minor, composed of the parts of multiple animals:
                     upon the body of
                     a lioness with a tail that ended in a snake's head, the head of a goat arose on her
                     back at the center of her spine. The Chimera was one of the offspring of Typhon and
                     Echidna and a
                     sibling of such monsters as Cerberus and the Lernaean Hydra. The term chimera has
                     also come to describe any mythical animal with parts taken from various animals and,
                     more generally,
                     an impossible or foolish fantasy.
                  </div>
                  <div class="attribution e28">
                     <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e29" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/Chimera_%28mythology%29" xlink:show="new" xlink:type="simple">Wikipedia</div>
                  </div>
               </div>
            </div>
         </div>
         <div class="popupBox e30">
            <div class="popupLabel" onmouseover="$('#d1e52').show('1000');" onmouseout="$('#d1e52').hide('1000');">[ blockquote ]</div>
            <div id="d1e52" style="display: none;">
               <div class="blockquote">
                  <div class="para e31">
                     <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e32" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/Chimera_%28genetics%29" xlink:show="new" xlink:type="simple">Chimera (genetics)</div>: A chimera or chimaera is a single organism (usually an animal) that is composed
                     of
                     two or more different populations of genetically distinct cells that originated from
                     different zygotes involved in sexual reproduction. If the different cells have emerged
                     from the
                     same zygote, the organism is called a mosaic. Chimeras are formed from at least four
                     parent cells (two fertilized eggs or early embryos fused together). Each population
                     of cells keeps
                     its own character and the resulting organism is a mixture of tissues. 
                  </div>
                  <div class="attribution e33">
                     <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e34" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/Chimera_%28genetics%29" xlink:show="new" xlink:type="simple">Wikipedia</div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e35">During her opening keynote at XML Prague 2012, speaking about the relation between
            XML, HTML, JSON and RDF, Jeni Tennison warned us against the temptation to create
            chimeras:
            
            <div class="citation e36">chimera are usually ugly, foolish or impossible fantasies</div>.
         </div>
         <div class="para e37">The next morning, Michael Kay and Jonathan Robie came to present new features in XPath/XQuery/XSLT
            3.0. A lot of these features are directly based on the XQuery and XPath Data Model
            3.0
            (aka 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e38" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/2011/WD-xpath-datamodel-30-20111213/#other-items" xlink:show="new" xlink:type="simple">XDM</div>):
            <div class="popupBox e39">
               <div class="popupLabel" onmouseover="$('#d1e70').show('1000');" onmouseout="$('#d1e70').hide('1000');">[ blockquote ]</div>
               <div id="d1e70" style="display: none;">
                  <div class="blockquote">
                     <div class="para e40">The XPath Data Model is the abstraction over which XPath expressions are evaluated.
                        Historically, all of the items in the data model could be derived directly (nodes)
                        or
                        indirectly (typed values, sequences) from an XML document. However, as the XPath expression
                        language has matured, new features have been added which require additional types
                        of
                        items to appear in the data model. These items have no direct XML serialization, but
                        they are never the less part of the data model. 
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e41">XDM 3.0 is composed of items from a number of different technologies:
            <div class="itemizedlist e42">
               <div class="listitem e43">
                  <div class="para e44">Items from the XML Infoset (nodes, attributes, ...)</div>
               </div>
               <div class="listitem e45">
                  <div class="para e46">Datatype information borrowed from the Post Schema Validation Infoset</div>
               </div>
               <div class="listitem e47">
                  <div class="para e48">Sequences</div>
               </div>
               <div class="listitem e49">
                  <div class="para e50">Atomic values</div>
               </div>
               <div class="listitem e51">
                  <div class="para e52">Functions that can also be used to model JSON arrays</div>
               </div>
            </div>
         </div>
         <div class="note e53">
            <div class="para e54">The feature that will be introduced to model JSON arrays is called "maps" and it will
               be specified as a XSLT feature in the XSLT 3.0 recommendation (not published yet).
               The XSLT 3.0
               editor, Michael Kay has published an 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e55" xlink:actuate="onRequest" xlink:href="http://dev.saxonica.com/blog/mike/2012/01/#000188" xlink:show="new" xlink:type="simple">early version</div> of this feature in his blog. In this paper, XDM 3.0 will
               refer to the XSLT 3.0 data model (the XPath 3.0 data model augmented with maps).
            </div>
         </div>
         <div class="para e56">XDM 3.0 being a single data model composed of items from different data models, it
            is fair to say that it is a chimera!
         </div>
         <div class="para e57">Following Jeni Tennison on stage, I have tried to 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e58" xlink:actuate="onRequest" xlink:href="http://www.xmlprague.cz/2012/sessions.html#The-eX-Markup-Language" xlink:show="new" xlink:type="simple">show</div> that in a world where HTML 5 on one
            hand and JSON on the other hand are gaining traction, XML has become an ecosystem
            in a competitive environment and that it's data model is a major competitive advantage.
         </div>
         <div class="para e59">Among other factors, the continued success of XML will thus come from its ability
            to seamlessly integrate other data models such as JSON.
         </div>
         <div class="para e60">If we follow this conclusion, we must admit that this chimera is essential to the
            future of XML and do our best to make it elegant and smart.
         </div>
      </div><a name="XMLDataModelsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e61">
         <div class="title e62">XML Data Models</div>
         <div class="para e63">Whether it's a bug or a feature could be debated endlessly, but a remarkable feature
            of the XML recommendation it's all about syntax and parsing rule and does not really
            define a data
            model. The big advantage is that everyone can find pretty much what he wants in XML
            documents but for the sake of this paper we need to choose a well known -and well
            defined- data model to
            work on. 
         </div>
         <div class="para e64">The most common XML data model is probably the data model defined by the trio XPath/XSLT/XQuery
            known as "XDM" since XPath version 2.0 and that's the one we will choose.
         </div>
         <div class="para e65">XDM version 3.0, still work in progress, will be the third version of this data model.
            It's important to understand its design and evolution to use its most advanced features
            and we'll
            start our prospective by a short history of its versions.
         </div><a name="XPath/XSLT10ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e66">
            <div class="title e67">XPath/XSLT 1.0</div>
            <div class="para e68">The 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e69" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xpath/#data-model" xlink:show="new" xlink:type="simple">XPath 1.0 data model</div> is described as being composed of seven types of nodes (root, elements, text, attributes,
               namespaces, processing instructions and comments).
            </div>
            <div class="para e70">The 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e71" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xslt/#data-model" xlink:show="new" xlink:type="simple">XSLT 1.0 data model</div> is defined as being the XPath 1.0 data model with:
            </div>
            <div class="itemizedlist e72">
               <div class="listitem e73">
                  <div class="para e74">Relaxed constraints on root node children to support well-formed external general
                     parsed entities that are not well formed XML documents
                  </div>
               </div>
               <div class="listitem e75">
                  <div class="para e76">An additional "base URI" property on every node.</div>
               </div>
               <div class="listitem e77">
                  <div class="para e78">An additional "unparsed entities" property on the root node. </div>
               </div>
            </div>
            <div class="para e79">It's fair to say that these two -very close- data models are completely focused on
               XML, but is that all?
            </div>
            <div class="para e80">Not entirely and these two specifications introduce other notions that should be considered
               as related to the data model even if they are not described in their sections called
               "Data
               Model"...
            </div>
            <div class="para e81">XSLT 1.0 inadvertently mentions 
               <div class="quote e82">the four basic XPath data-types (string, number, boolean, node-set)</div> to explicitly add a fifth one: 
               <div class="quote e83">result tree
                  fragments
               </div>.
            </div>
            <div class="para e84">These four basic data-types are implicitly defined in XPath 1.0 in its section about
               its function library but no formal description of these types is given.
            </div>
         </div><a name="XDML20:XPath20/XSLT20/XQuery10ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e85">
            <div class="title e86">XDML 2.0: XPath 2.0/XSLT 2.0/XQuery 1.0</div>
            <div class="para e87">In version 2.0, the XDM is promoted to get its 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e88" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xpath-datamodel/" xlink:show="new" xlink:type="simple">own specification</div>.
            </div>
            <div class="para e89">XDM 2.0 keeps the same seven types of nodes as XPath 1.0 and integrates the additions
               from the XSLT 1.0 data model. A number of properties are added to these nodes to capture
               information that had been left outside the data model by the previous version and
               also to support the data-type system from the PSVI (Post Schema Validation Infoset).
            </div>
            <div class="para e90">The term "data-type" or simply "type" being now used to refer to XML Schema data-types,
               a new terminology is introduced where the data model is composed of "information items"
               (or
               items) being either XML nodes or "atomic values".
            </div>
            <div class="para e91">The concept of "sequences" is also introduced. Sequences are not strictly considered
               as items but play a very important role in XDM. They are defined as 
               <div class="quote e92">an ordered collection
                  of zero or more 
                  <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e93" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xpath-datamodel/#dt-item" xlink:show="new" xlink:type="simple">items</div>
               </div>.
            </div>
            <div class="para e94">The data model is thus now composed of three different concepts:
               <div class="itemizedlist e95">
                  <div class="listitem e96">
                     <div class="para e97">nodes</div>
                  </div>
                  <div class="listitem e98">
                     <div class="para e99">atomic values</div>
                  </div>
                  <div class="listitem e100">
                     <div class="para e101">sequences</div>
                  </div>
               </div>
            </div>
            <div class="para e102">XDM 2.0 notes that an important difference between nodes and atomic values is that
               only nodes have 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e103" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xpath-datamodel/#node-identity" xlink:show="new" xlink:type="simple">identities</div>:
               <div class="popupBox e104">
                  <div class="popupLabel" onmouseover="$('#d1e190').show('1000');" onmouseout="$('#d1e190').hide('1000');">[ blockquote ]</div>
                  <div id="d1e190" style="display: none;">
                     <div class="blockquote">
                        <div class="para e105">Each node has a unique identity. Every 
                           <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e106" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xpath-datamodel/#dt-node" xlink:show="new" xlink:type="simple">node</div> in an instance of the data model is unique: identical to
                           itself, and not identical to any other node. (
                           <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e107" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xpath-datamodel/#dt-atomic-value" xlink:show="new" xlink:type="simple">Atomic values</div> do not have identity; every instance
                           of the value “5” as an integer is identical to every other instance of the value “5”
                           as an integer.)
                        </div>
                        <div class="attribution e108">
                           <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e109" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xpath-datamodel/#node-identity" xlink:show="new" xlink:type="simple">XQuery 1.0 and XPath 2.0 Data Model (XDM) (Second Edition)</div>
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e110">This is a crucial distinction that divides the data model into two different kind
               of items (those which have an identity and those which haven't one). Let's take an
               example: 
            </div>
            <div class="programlisting e111" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
               &lt;root&gt;
               &lt;foo&gt;5&lt;/foo&gt;
               &lt;foo&gt;5&lt;/foo&gt;
               &lt;bar foo="5"&gt;
               &lt;foo&gt;5&lt;/foo&gt;
               &lt;/bar&gt;
               &lt;/root&gt;
            </div>
            <div class="para e112">The three 
               <div class="code e113">&lt;foo&gt;5&lt;/foo&gt;</div> look similar and can be considered "
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e114" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xpath-functions/#func-deep-equal" xlink:show="new" xlink:type="simple">deeply equal</div>" but they
               are three different elements with three different identities. This is needed because
               some of their properties are different: the parent of the first two is 
               <div class="code e115">&lt;root/&gt;</div>
               while the parent of the third one is 
               <div class="code e116">&lt;bar/&gt;</div>, the preceding sibling of the second one is the first one while the first one has
               no preceeding sibling, ...
            </div>
            <div class="para e117">The three "5" text nodes are similar but they still are different text nodes with
               different identities and this is necessary because they don't have the same parent
               elements.
            </div>
            <div class="para e118">By contrast, the atomic values of the three 
               <div class="code e119">&lt;foo/&gt;</div> element (and the atomic value of the 
               <div class="code e120">@foo</div> attribute) are the same atomic value, the "5" (assuming they
               have all been declared with the same datatype). Among many other things, this means
               that when you manipulate their values, you can't access back to the node that is holding
               the
               value).
            </div>
         </div><a name="XDM30:XPath30/XSLT30/XQuery30ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e121">
            <div class="title e122">XDM 3.0: XPath 3.0/XSLT 3.0/XQuery 3.0</div>
            <div class="para e123">
               <div class="note e124">
                  <div class="para e125">These specifications are still work on progress, currently divided between 
                     <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e126" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/2011/WD-xpath-datamodel-30-20111213/" xlink:show="new" xlink:type="simple">XQuery and XPath Data
                        Model 3.0
                     </div> and data model extensions described in XSL Transformations (XSLT) Version 3.0.
                  </div>
               </div>
            </div>
            <div class="para e127">XDM 3.0 adds functions as a third kind of items, transforming XQuery and XSLT into
               functional languages.
            </div>
            <div class="para e128">Like atomic values, functions have no identity:
               <div class="popupBox e129">
                  <div class="popupLabel" onmouseover="$('#d1e245').show('1000');" onmouseout="$('#d1e245').hide('1000');">[ blockquote ]</div>
                  <div id="d1e245" style="display: none;">
                     <div class="blockquote">
                        <div class="para e130">Functions have no identity, cannot be compared, and have no serialization.</div>
                        <div class="attribution e131">
                           <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e132" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/2011/WD-xpath-datamodel-30-20111213/#function-items" xlink:show="new" xlink:type="simple">XQuery and XPath Data Model 3.0 - W3C Working Draft 13 December
                              2011
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e133">XSLT 3.0 adds to XDM 3.0 a fourth king of items: maps, derived from functions which,
               among many other use cases, can be used to model JSON objects:
            </div>
            <div class="para e134">Like atomic values and functions (from which they are derived), maps have no identity:
               <div class="popupBox e135">
                  <div class="popupLabel" onmouseover="$('#d1e255').show('1000');" onmouseout="$('#d1e255').hide('1000');">[ blockquote ]</div>
                  <div id="d1e255" style="display: none;">
                     <div class="blockquote">
                        <div class="para e136">Like sequences, maps have no identity. It is meaningful to compare the contents of
                           two maps, but there is no way of asking whether they are "the same map": two maps
                           with the
                           same content are indistinguishable.
                        </div>
                        <div class="attribution e137">
                           <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e138" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xslt-30/#map" xlink:show="new" xlink:type="simple">XSL Transformations (XSLT) Version 3.0 - W3C Working Draft 10 July 2012</div>
                        </div>
                     </div>
                  </div>
               </div>
               <div class="note e139">
                  <div class="para e140">In this statement, the specification does acknowledge that sequences have no identity
                     either. This is understandable but didn't seem to be clearly specified elsewhere.
                  </div>
               </div>
            </div>
            <div class="para e141">Of course, XSLT 3.0 is also adding functions to create, manipulate maps and serialize/deserialize
               them as JSON and a syntax to define map literals. It does not any new pattern to
               select of match maps or map entries, though.
            </div>
         </div>
      </div><a name="IdentityCrisisANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e142">
         <div class="title e143">Identity Crisis</div>
         <div class="popupBox e144">
            <div class="popupLabel" onmouseover="$('#d1e269').show('1000');" onmouseout="$('#d1e269').hide('1000');">[ blockquote ]</div>
            <div id="d1e269" style="display: none;">
               <div class="blockquote">
                  <div class="para e145">Appolonius' ship is a beautiful ship. Over the years it has been repaired so many
                     times that there is not a single piece of the original materials remaining. The question
                     is,
                     therefore, is it really still Appolonius' ship? 
                  </div>
                  <div class="attribution e146">
                     <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e147" xlink:actuate="onRequest" xlink:href="http://c2.com/cgi/wiki?ObjectIdentity" xlink:show="new" xlink:type="simple">ObjectIdentity on c2.com</div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e148">Object identity is often confused with mutability. The need for objects to have identities
            is more obvious when they are mutable, their identities being then used to track them
            despite
            their changes like Appolonius' ship. However, XDM 3.0 gives us a good opportunity
            to explore the meaning and consequences of having (or not having) an identity for
            immutable object
            structures.
         </div>
         <div class="para e149">The definition of node identity in XDM 3.0 is directly copied from XDM 2.0:
            <div class="popupBox e150">
               <div class="popupLabel" onmouseover="$('#d1e279').show('1000');" onmouseout="$('#d1e279').hide('1000');">[ blockquote ]</div>
               <div id="d1e279" style="display: none;">
                  <div class="blockquote">
                     <div class="para e151">Each node has a unique identity. Every 
                        <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e152" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/2011/WD-xpath-datamodel-30-20111213/#dt-node" xlink:show="new" xlink:type="simple">node</div> in an instance of the data model is
                        unique: identical to itself, and not identical to any other node. (
                        <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e153" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/2011/WD-xpath-datamodel-30-20111213/#dt-atomic-value" xlink:show="new" xlink:type="simple">Atomic values</div>
                        do not have identity; every instance of the value “5” as an integer is identical to
                        every other instance of the value “5” as an integer.)
                     </div>
                     <div class="attribution e154">
                        <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e155" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/2011/WD-xpath-datamodel-30-20111213/#node-identity" xlink:show="new" xlink:type="simple">XQuery and XPath Data Model 3.0 - W3C Working Draft 13 December
                           2011
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e156">I find this definition confusing:
            <div class="itemizedlist e157">
               <div class="listitem e158">
                  <div class="para e159">Why should the value “5” as an integer be instantiated and why should we care? The
                     value “5” as an integer is... the value “5” as an integer! It's unique and being unique,
                     doesn't it have an identity?
                  </div>
               </div>
               <div class="listitem e160">
                  <div class="para e161">A node, with all the properties defined in XDM (including its document-uri and parent
                     accessors) would be unique if it had "previous-sibling" or "document-order" accessors.
                     
                  </div>
               </div>
            </div>
            <div class="note e162">
               <div class="para e163">To find the previous siblings of a node relying only on the accessors defined in XDM
                  (2.0 or 3.0), you'd have to access to the node's parent and loop over it's children
                  until you
                  find the current node that you would identify as such by checking its identity.
               </div>
            </div>
         </div>
         <div class="para e164">Rather than focussing on uniqueness, which for immutable information items does not
            really matter, a better differentiation could be between information items which have
            enough context
            information to "know where they belong" in the data model and those which don't. 
         </div>
         <div class="para e165">This differentiation has the benefit of highlighting the consequences of having or
            not having an identity: to be able to navigate between an information item and its
            ancestors or sibling
            this item must know where it belongs. When that's not the case, it is still be possible
            to navigate between the item and its descendants but axis such as 
            <div class="code e166">ancestor::</div> or
            
            <div class="code e167">sibling::</div> are not available. 
         </div>
         <div class="note e168">
            <div class="para e169">Identity can be seen as the price to pay for the 
               <div class="code e170">ancestor::</div> and 
               <div class="code e171">sibling::</div> axis. 
            </div>
         </div>
         <div class="para e172">Let's take back a simple example:</div>
         <div class="para e173">
            
            <div class="programlisting e174" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
               &lt;root&gt;
               &lt;foo&gt;5&lt;/foo&gt;
               &lt;foo&gt;5&lt;/foo&gt;
               &lt;bar&gt; 
               &lt;foo&gt;5&lt;/foo&gt;
               &lt;/bar&gt;
               &lt;/root&gt;
            </div>
            
         </div>
         <div class="para e175">In an hypothetical data model where nodes have no identity, there would be only 3
            elements:
            <div class="itemizedlist e176">
               <div class="listitem e177">
                  <div class="para e178">The root element</div>
               </div>
               <div class="listitem e179">
                  <div class="para e180">The bar element</div>
               </div>
               <div class="listitem e181">
                  <div class="para e182">The foo element (referred twice has children of root end once as child of bar)</div>
               </div>
            </div>
         </div>
         <div class="para e183">If we add identity (or context information) properties, the foo elements become three
            information different items since they defer by these properties.
         </div>
         <div class="para e184">The process of adding these properties to an information item looks familiar. Depending
            on your background, you can compare it to:
            <div class="itemizedlist e185">
               <div class="listitem e186">
                  <div class="para e187">class/object instantiation in class based Object Oriented Programming</div>
               </div>
               <div class="listitem e188">
                  <div class="para e189">clones in prototype based Object Oriented Programming</div>
               </div>
               <div class="listitem e190">
                  <div class="para e191">RDF reification.</div>
               </div>
            </div>
         </div>
         <div class="para e192">We've seen that XDM 3.0 acknowledges this difference between information items which
            have context information and those which don't have. I don't want to deny that both
            types of data
            models have their use cases: there are obviously many use cases where context information
            is needed and use cases where lightweight structures are a better fit.
         </div>
         <div class="para e193">That being said, if we are serious about the support of JSON in XDM, we should offer
            the same features to access data whether this data is stored in maps or in XML nodes.
            
         </div>
         <div class="para e194">Let's consider this JSON object borrowed from the XSLT 3.0 Working
            Draft:
            <div class="programlisting e195" xml:space="preserve">{ "accounting" : [ 
               { "firstName" : "John", 
               "lastName"  : "Doe",
               "age"       : 23 },
               
               { "firstName" : "Mary", 
               "lastName"  : "Smith",
               "age"       : 32 }
               ],                                 
               "sales"     : [ 
               { "firstName" : "Sally", 
               "lastName"  : "Green",
               "age"       : 27 },
               
               { "firstName" : "Jim",  
               "lastName"  : "Galley",
               "age"       : 41 }
               ]
               }                  
            </div>
         </div>
         <div class="para e196">This object could be represented in XML by the following
            document:
            <div class="programlisting e197" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
               &lt;company&gt;
               &lt;department name="sales"&gt;
               &lt;employee&gt;
               &lt;firstName&gt;Sally&lt;/firstName&gt;
               &lt;lastName&gt;Green&lt;/lastName&gt;
               &lt;age&gt;27&lt;/age&gt;
               &lt;/employee&gt;
               &lt;employee&gt;
               &lt;firstName&gt;Jim&lt;/firstName&gt;
               &lt;lastName&gt;Galley&lt;/lastName&gt;
               &lt;age&gt;41&lt;/age&gt;
               &lt;/employee&gt;
               &lt;/department&gt;
               &lt;department name="accounting"&gt;
               &lt;employee&gt;
               &lt;firstName&gt;John&lt;/firstName&gt;
               &lt;lastName&gt;Doe&lt;/lastName&gt;
               &lt;age&gt;23&lt;/age&gt;
               &lt;/employee&gt;
               &lt;employee&gt;
               &lt;firstName&gt;Mary&lt;/firstName&gt;
               &lt;lastName&gt;Smith&lt;/lastName&gt;
               &lt;age&gt;32&lt;/age&gt;
               &lt;/employee&gt;
               &lt;/department&gt;
               &lt;/company&gt;
            </div>
         </div>
         <div class="para e198">The features introduced in the latest XSLT 3.0 Working Draft do allow to transform
            rather easily from one model to the other, but these two models do not have, bar far,
            the same
            features.
         </div>
         <div class="para e199">In the XML flavor, when the context item is the employee "John Doe", you can easily
            find out what his department is because this is an element and element do carry context
            information.
            In the map flavor by contrast when the context item is an employee map, this object
            has no context information and you can't tell which is his department without looping
            within the
            containing map.  
         </div>
         <div class="para e200">This important restriction is at a purely data model level. It is aggravated by the
            XPath syntax has not been extended to generalize axis so that they can work with maps.
            If I work with
            the XML version of this structure, it's obvious to evaluate things such as the number
            of employees, the average age of employees, the number of departments, the number
            of employees by
            department, the average age by department, obvious to find out if there is an employee
            called "Mary Smith" in one of the departments, the employees who are more than 40,
            to get a list of
            employees from all the department sorted by age, ... In the map flavor by contrast,
            I don't have any XPath axis available and must do all these operations using a limited
            number of map
            functions (map:keys(), map:contains(), map:get()). In other words, while I can use
            XPath expressions with the XML version, I must use DOM like operations to access the
            map version!
         </div>
         <div class="para e201">To summarize, yes XDM 3.0 does support JSON but to do pretty much anything interesting
            with JSON objects, you'd better transform them into XML nodes first! XSLT 3.0 does
            give you the
            tools to do this transformation quite easily but the message to JSON users is that
            we don't treat their data model as a first class citizen.
         </div>
         <div class="para e202">To make it worse, XPath is used by many other specifications, within and outside the
            W3C and the level of support for JSON provided by XDM and XPath will determine how
            these
            specifications will be able to support for JSON. Specifications that are impacted
            by this issue include XForms, XProc and Schematron. Supporting JSON would be really
            useful for these three
            specifications if and only if map items could have the same features than nodes.
         </div>
         <div class="para e203">Furthermore, the same asymmetry exists when you went to create these two structures
            from other sources: to create the XML structure you can use sequence constructors
            but to create the
            map structure, you have to use the 
            <div class="code e204">map:new()</div> and 
            <div class="code e205">map:item()</div> functions.
         </div>
         <div class="para e206">My proposal to solve this issue is:
            <div class="itemizedlist e207">
               <div class="listitem e208">
                  <div class="para e209">To acknowledge the fact that any type of information item can be either "context independent"
                     or include context information and explore the consequences of this
                     statement.
                  </div>
               </div>
               <div class="listitem e210">
                  <div class="para e211">To generalize XPath axis so that they can be used with map items. </div>
               </div>
               <div class="listitem e212">
                  <div class="para e213">To create sequence constructors for maps and map entries.</div>
               </div>
            </div>
         </div>
         <div class="para e214">You are welcome to discuss this further:
            <div class="itemizedlist e215">
               <div class="listitem e216">
                  <div class="para e217"> W3C XSLT 3.0 
                     <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e218" xlink:actuate="onRequest" xlink:href="https://www.w3.org/Bugs/Public/show_bug.cgi?id=16118" xlink:show="new" xlink:type="simple">Bug 16118</div>, "Maps should be first class citizens"
                  </div>
               </div>
               <div class="listitem e219">
                  <div class="para e220">Blog entry: 
                     <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e221" xlink:actuate="onRequest" xlink:href="http://eric.van-der-vlist.com/blog/2012/02/25/xdm-maps-should-be-first-class-citizens/" xlink:show="new" xlink:type="simple">XDM Maps should be first class citizens</div>.
                  </div>
               </div>
               <div class="listitem e222">
                  <div class="para e223">Blog entry: 
                     <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e224" xlink:actuate="onRequest" xlink:href="http://eric.van-der-vlist.com/blog/2012/02/28/more-musings-on-xdm-3-0/" xlink:show="new" xlink:type="simple">More musings on XDM 3.0</div>
                  </div>
               </div>
            </div>
         </div>
      </div><a name="Introducing%CF%87%CE%AF%CE%BC%CE%B1%CE%B9%CF%81%CE%B1%CE%BB(chimeral)theChimeraLanguageANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e225">
         <div class="title e226">Introducing χίμαιραλ (chimeral), the Chimera Language</div>
         <div class="para e227">When I started to work on 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e228" xlink:actuate="onRequest" xlink:href="http://χίμαιραλ.com" xlink:show="new" xlink:type="simple">χίμαιραλ</div> a few months ago, my first motivation was to propose an XDM serialization for maps
            which would turn the
            rather abstract prose from the specification into concrete angle brackets that you
            could see and read.
         </div>
         <div class="para e229">The exercise has been very instructive and helped me a lot to understand the spec,
            however a more ambitious use pattern has emerged while I was making progress. The
            XSLT 3.0 Working
            Draft is part of a batch of Working Drafts which are far more advanced. My proposals
            to solve the "map identity crisis" are probably too intrusive and too late to be taken
            into account and
            the batch of specifications will most probably carry on with the current proposal.
         </div>
         <div class="para e230">If that's the case, we've seen that it makes a lot of sense to convert maps into nodes
            to enable to use XPath axis and χίμαιραλ provides a generic target format for these
            conversions.
         </div><a name="ExampleANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e231">
            <div class="title e232">Example</div>
            <div class="para e233">Let's take again the JSON object borrowed from the XSLT 3.0 Working
               Draft:
               <div class="programlisting e234" xml:space="preserve">{ "accounting" : [ 
                  { "firstName" : "John", 
                  "lastName"  : "Doe",
                  "age"       : 23 },
                  
                  { "firstName" : "Mary", 
                  "lastName"  : "Smith",
                  "age"       : 32 }
                  ],                                 
                  "sales"     : [ 
                  { "firstName" : "Sally", 
                  "lastName"  : "Green",
                  "age"       : 27 },
                  
                  { "firstName" : "Jim",  
                  "lastName"  : "Galley",
                  "age"       : 41 }
                  ]
                  }                  
               </div>
            </div>
            <div class="para e235">Its χίμαιραλ representation
               is:
               <div class="programlisting e236" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
                  &lt;χ:data-model xmlns:χ="http://χίμαιραλ.com#"&gt;
                  &lt;χ:map&gt;
                  &lt;χ:entry key="sales" keyType="string"&gt;
                  &lt;χ:map&gt;
                  &lt;χ:entry key="1" keyType="number"&gt;
                  &lt;χ:map&gt;
                  &lt;χ:entry key="lastName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;Green&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="age" keyType="string"&gt;
                  &lt;χ:atomic-value type="number"&gt;27&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="firstName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;Sally&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;/χ:map&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="2" keyType="number"&gt;
                  &lt;χ:map&gt;
                  &lt;χ:entry key="lastName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;Galley&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="age" keyType="string"&gt;
                  &lt;χ:atomic-value type="number"&gt;41&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="firstName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;Jim&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;/χ:map&gt;
                  &lt;/χ:entry&gt;
                  &lt;/χ:map&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="accounting" keyType="string"&gt;
                  &lt;χ:map&gt;
                  &lt;χ:entry key="1" keyType="number"&gt;
                  &lt;χ:map&gt;
                  &lt;χ:entry key="lastName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;Doe&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="age" keyType="string"&gt;
                  &lt;χ:atomic-value type="number"&gt;23&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="firstName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;John&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;/χ:map&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="2" keyType="number"&gt;
                  &lt;χ:map&gt;
                  &lt;χ:entry key="lastName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;Smith&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="age" keyType="string"&gt;
                  &lt;χ:atomic-value type="number"&gt;32&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="firstName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;Mary&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;/χ:map&gt;
                  &lt;/χ:entry&gt;
                  &lt;/χ:map&gt;
                  &lt;/χ:entry&gt;
                  &lt;/χ:map&gt;
                  &lt;/χ:data-model&gt;
               </div>
            </div>
            <div class="para e237">Granted, it's much more verbose than the JSON version, but it's the exact translation
               of the XDM corresponding to the JSON object in XML. 
            </div>
         </div><a name="%CF%87%CE%AF%CE%BC%CE%B1%CE%B9%CF%81%CE%B1%CE%BBInaNutshellANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e238">
            <div class="title e239">χίμαιραλ In a Nutshell</div>
            <div class="para e240">The design goals are:
               <div class="itemizedlist e241">
                  <div class="listitem e242">
                     <div class="para e243">Be as close as possible to the XDM and its terminology</div>
                  </div>
                  <div class="listitem e244">
                     <div class="para e245">Represent XML nodes as... XML nodes</div>
                  </div>
                  <div class="listitem e246">
                     <div class="para e247">Allow round-trips (an XDM model serialized as χίμαιραλ should give a XDM model identical
                        to the original one when de-serialized)
                     </div>
                  </div>
                  <div class="listitem e248">
                     <div class="para e249">Be easy to process using XPath/XQuery/XSLT</div>
                  </div>
                  <div class="listitem e250">
                     <div class="para e251">Support of the PSVI is not a goal</div>
                  </div>
               </div>
            </div>
            <div class="para e252">χίμαιραλ is not the only proposal to serialize XDM as XML. Two other notable ones
               are:
               <div class="itemizedlist e253">
                  <div class="listitem e254">
                     <div class="para e255">Zorba's 
                        <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e256" xlink:actuate="onRequest" xlink:href="http://bazaar.launchpad.net/~zorba-coders/zorba/pul-and-xdm-schemas/view/head:/schemas/xdm.xsd" xlink:show="new" xlink:type="simple">XDM serialization</div> is a straight and
                        accurate XDM serialization which does support PSVI annotations. As a consequence,
                        nodes are serialized as 
                        <div class="code e257">xdm:*</div> elements (an element is an
                        
                        <div class="code e258">xdm:element</div>, an attribute an 
                        <div class="code e259">xdm:attribute</div> element, ...). This does'n meet  by second requirement to represent nodes as themselves.
                     </div>
                  </div>
                  <div class="listitem e260">
                     <div class="para e261">
                        <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e262" xlink:actuate="onRequest" xlink:href="http://balisage.net/Proceedings/vol7/html/Rennau01/BalisageVol7-Rennau01.html" xlink:show="new" xlink:type="simple">XDML</div>, presented by Rennau, Hans-Jürgen, and David A. Lee at
                        Balisage 2011 is more than just an XDM serialization and also includes manipulation
                        and processing definitions. It introduces its own terminology and concepts and is
                        too
                        far away from XDM for my design goals.
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e263">A lot of attention has been given to the first design goal: the structure of a χίμαιραλ
               model and the name of its elements and attributes are directly derived from the
               specifications.
            </div>
            <div class="para e264">In XDM, map entries' values can be arrays (an array beeing nothing else than a map
               with integer keys) but also sequences (which is not possible in JSON). χίμαιραλ respects
               the fact
               that in XDM there is no difference between a sequence composed of a single element
               and represents sequences by a repetition of values.
            </div>
            <div class="para e265">The map 
               <div class="code e266">map{1:= 'foo'}</div> is serialized
               as:
               <div class="programlisting e267" xml:space="preserve">&lt;χ:data-model xmlns:χ="http://χίμαιραλ.com#"&gt;
                  &lt;χ:map&gt;
                  &lt;χ:entry key="1" keyType="number"&gt;
                  &lt;χ:atomic-value type="string"&gt;foo&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;/χ:map&gt;
                  &lt;/χ:data-model&gt;
               </div>
            </div>
            <div class="para e268">And the map 
               <div class="code e269">map{1:= ('foo', 'bar')}</div> is serialized
               as:
               <div class="programlisting e270" xml:space="preserve">&lt;χ:data-model xmlns:χ="http://χίμαιραλ.com#"&gt;
                  &lt;χ:map&gt;
                  &lt;χ:entry key="1" keyType="number"&gt;
                  &lt;χ:atomic-value type="string"&gt;foo&lt;/χ:atomic-value&gt;
                  &lt;χ:atomic-value type="string"&gt;bar&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;/χ:map&gt;
                  &lt;/χ:data-model&gt;
               </div>
            </div>
            <div class="para e271">We've seen that XDM makes a clear distinction between nodes which have identities
               and other item types (atomic values, functions and maps) which haven't. XDM allows
               to use nodes as
               map entry values. χίμαιραλ allows this feature too, but copying the nodes would create
               new nodes with different identities.
            </div>
            <div class="para e272">To avoid that, documents to which these nodes belong are copied into χ:instance elements
               and references between map entries values and instances are made using XPath expressions.
               
            </div>
            <div class="para e273">The following 
               <div class="code e274">$map</div>
               variable:
               <div class="programlisting e275" xml:space="preserve">&lt;xsl:variable name="a-node"&gt;
                  &lt;foo/&gt;
                  &lt;/xsl:variable&gt;
                  &lt;xsl:variable name="map" select="map{'a-node':= $a-node}"/&gt;
               </div>
            </div>
            <div class="para e276">Is serialized
               as:
               <div class="programlisting e277" xml:space="preserve">&lt;χ:data-model xmlns:χ="http://χίμαιραλ.com#"&gt;
                  &lt;χ:instance id="d4" kind="document"&gt;
                  &lt;foo/&gt;
                  &lt;/χ:instance&gt;
                  &lt;χ:map&gt;
                  &lt;χ:entry key="a-node" keyType="string"&gt;
                  &lt;χ:node kind="document" instance="d4" path="/"/&gt;
                  &lt;/χ:entry&gt;
                  &lt;/χ:map&gt;
                  &lt;/χ:data-model&gt;
               </div>
            </div>
            <div class="para e278">Like XSLT variable, instances do not always contain document nodes and the following
               
               <div class="code e279">$map</div>
               variable:
               <div class="programlisting e280" xml:space="preserve">&lt;xsl:variable name="a-node" as="node()"&gt;
                  &lt;foo/&gt;
                  &lt;/xsl:variable&gt;
                  &lt;xsl:variable name="map" select="map{'a-node':= $a-node}"/&gt;
               </div>
            </div>
            <div class="para e281">Is serialized
               as:
               <div class="programlisting e282" xml:space="preserve">&lt;χ:data-model xmlns:χ="http://χίμαιραλ.com#"&gt;
                  &lt;χ:instance id="d4e0" kind="fragment"&gt;
                  &lt;foo/&gt;
                  &lt;/χ:instance&gt;
                  &lt;χ:map&gt;
                  &lt;χ:entry key="a-node" keyType="string"&gt;
                  &lt;χ:node kind="element" instance="d4e0" path="root()" name="foo"/&gt;
                  &lt;/χ:entry&gt;
                  &lt;/χ:map&gt;
                  &lt;/χ:data-model&gt;
               </div>
            </div>
            <div class="para e283">Nodes can belong to more than one instances, and this $map
               variable:
               <div class="programlisting e284" xml:space="preserve">&lt;xsl:variable name="a-node" as="node()*"&gt;
                  &lt;foo/&gt;
                  &lt;bar/&gt;
                  &lt;/xsl:variable&gt;
                  &lt;xsl:variable name="map" select="map{'a-node':= $a-node}"/&gt;
               </div>
            </div>
            <div class="para e285">Is serialized
               as:
               <div class="programlisting e286" xml:space="preserve">&lt;χ:data-model xmlns:χ="http://χίμαιραλ.com#"&gt;
                  &lt;χ:instance id="d4e0" kind="fragment"&gt;
                  &lt;foo/&gt;
                  &lt;/χ:instance&gt;
                  &lt;χ:instance id="d4e3" kind="fragment"&gt;
                  &lt;bar/&gt;
                  &lt;/χ:instance&gt;
                  &lt;χ:map&gt;
                  &lt;χ:entry key="a-node" keyType="string"&gt;
                  &lt;χ:node kind="element" instance="d4e0" path="root()" name="foo"/&gt;
                  &lt;χ:node kind="element" instance="d4e3" path="root()" name="bar"/&gt;
                  &lt;/χ:entry&gt;
                  &lt;/χ:map&gt;
                  &lt;/χ:data-model&gt;
               </div>
            </div>
            <div class="para e287">Nodes can be "deep linked", a same node can be linked several times and nodes can
               be mixed with atomic values at wish. The following $map
               variable:
               <div class="programlisting e288" xml:space="preserve">&lt;xsl:variable name="doc"&gt;
                  &lt;department name="sales"&gt;
                  &lt;employee&gt;
                  &lt;firstName&gt;Sally&lt;/firstName&gt;
                  &lt;lastName&gt;Green&lt;/lastName&gt;
                  &lt;age&gt;27&lt;/age&gt;
                  &lt;/employee&gt;
                  &lt;employee&gt;
                  &lt;firstName&gt;Jim&lt;/firstName&gt;
                  &lt;lastName&gt;Galley&lt;/lastName&gt;
                  &lt;age&gt;41&lt;/age&gt;
                  &lt;/employee&gt;
                  &lt;/department&gt;
                  &lt;department name="accounting"&gt;
                  &lt;employee&gt;
                  &lt;firstName&gt;John&lt;/firstName&gt;
                  &lt;lastName&gt;Doe&lt;/lastName&gt;
                  &lt;age&gt;23&lt;/age&gt;
                  &lt;/employee&gt;
                  &lt;employee&gt;
                  &lt;firstName&gt;Mary&lt;/firstName&gt;
                  &lt;lastName&gt;Smith&lt;/lastName&gt;
                  &lt;age&gt;32&lt;/age&gt;
                  &lt;/employee&gt;
                  &lt;/department&gt;
                  &lt;/xsl:variable&gt;
                  &lt;xsl:variable name="map"
                  select="map{
                  'sales' := $doc/department[@name='sales'],
                  'Sally' := $doc//employee[firstName = 'Sally'],
                  'kids'  := $doc//employee[age &amp;lt; 30],
                  'dep-names-attributes' := $doc/department/@name,
                  'dep-names' := for $name in $doc/department/@name return string($name)
                  }"/&gt;
               </div>
            </div>
            <div class="para e289">Is serialized
               as:
               <div class="programlisting e290" xml:space="preserve">&lt;χ:data-model xmlns:χ="http://χίμαιραλ.com#"&gt;
                  &lt;χ:instance id="d4" kind="document"&gt;
                  &lt;department name="sales"&gt;
                  &lt;employee&gt;
                  &lt;firstName&gt;Sally&lt;/firstName&gt;
                  &lt;lastName&gt;Green&lt;/lastName&gt;
                  &lt;age&gt;27&lt;/age&gt;
                  &lt;/employee&gt;
                  &lt;employee&gt;
                  &lt;firstName&gt;Jim&lt;/firstName&gt;
                  &lt;lastName&gt;Galley&lt;/lastName&gt;
                  &lt;age&gt;41&lt;/age&gt;
                  &lt;/employee&gt;
                  &lt;/department&gt;
                  &lt;department name="accounting"&gt;
                  &lt;employee&gt;
                  &lt;firstName&gt;John&lt;/firstName&gt;
                  &lt;lastName&gt;Doe&lt;/lastName&gt;
                  &lt;age&gt;23&lt;/age&gt;
                  &lt;/employee&gt;
                  &lt;employee&gt;
                  &lt;firstName&gt;Mary&lt;/firstName&gt;
                  &lt;lastName&gt;Smith&lt;/lastName&gt;
                  &lt;age&gt;32&lt;/age&gt;
                  &lt;/employee&gt;
                  &lt;/department&gt;
                  &lt;/χ:instance&gt;
                  &lt;χ:map&gt;
                  &lt;χ:entry key="sales" keyType="string"&gt;
                  &lt;χ:node kind="element"
                  instance="d4"
                  path="/&amp;#34;&amp;#34;:department[1]"
                  name="department"/&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="Sally" keyType="string"&gt;
                  &lt;χ:node kind="element"
                  instance="d4"
                  path="/&amp;#34;&amp;#34;:department[1]/&amp;#34;&amp;#34;:employee[1]"
                  name="employee"/&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="kids" keyType="string"&gt;
                  &lt;χ:node kind="element"
                  instance="d4"
                  path="/&amp;#34;&amp;#34;:department[1]/&amp;#34;&amp;#34;:employee[1]"
                  name="employee"/&gt;
                  &lt;χ:node kind="element"
                  instance="d4"
                  path="/&amp;#34;&amp;#34;:department[2]/&amp;#34;&amp;#34;:employee[1]"
                  name="employee"/&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="dep-names-attributes" keyType="string"&gt;
                  &lt;χ:node kind="attribute"
                  instance="d4"
                  path="/&amp;#34;&amp;#34;:department[1]/@name"
                  name="name"&gt;sales&lt;/χ:node&gt;
                  &lt;χ:node kind="attribute"
                  instance="d4"
                  path="/&amp;#34;&amp;#34;:department[2]/@name"
                  name="name"&gt;accounting&lt;/χ:node&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="dep-names" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;sales&lt;/χ:atomic-value&gt;
                  &lt;χ:atomic-value type="string"&gt;accounting&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;/χ:map&gt;
                  &lt;/χ:data-model&gt;
               </div>
            </div>
         </div><a name="RemainingIssuesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e291">
            <div class="title e292">Remaining Issues</div>
            <div class="para e293">A collation property should be added to 
               <div class="code e294">&lt;χ:map/&gt;</div>, probably as an attribute, the transformation to serialize to χίμαιραλ should be
               cleaned up and the reverse
               transformation should be implemented.
            </div>
            <div class="para e295">These are pretty trivial issues and the biggest one is probably to find a way to cleanly
               serialize references to nodes that are not contained within an element, such as the
               following
               $map
               variable:
               <div class="programlisting e296" xml:space="preserve">&lt;xsl:variable name="attribute" as="node()"&gt;
                  &lt;xsl:attribute name="foo"&gt;bar&lt;/xsl:attribute&gt;
                  &lt;/xsl:variable&gt;
                  &lt;xsl:variable name="map"
                  select="map{
                  'attribute' := $attribute
                  }"/&gt;
               </div>
            </div>
            <div class="para e297">Support of functions should also be considered.</div>
         </div><a name="%CF%87%CE%AF%CE%BC%CE%B1%CE%B9%CF%81%CE%B1%CE%BBandtheidentitycrisisANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e298">
            <div class="title e299">χίμαιραλ and the identity crisis</div>
            <div class="para e300">To some extend, χίμαιραλ can be considered as a solution to the XDM identity crisis:
               
               <div class="itemizedlist e301">
                  <div class="listitem e302">
                     <div class="para e303">Serializing an XDM model as χίμαιραλ creates elements for maps, map entries and atomic
                        values and these elements, being nodes, have identities. The serialization is
                        therefore also an instantiation of XDM information items as defined above.
                     </div>
                  </div>
                  <div class="listitem e304">
                     <div class="para e305">De-serializing a χίμαιραλ to create an XDM data model is also a de-instantiation--
                        except of course that the identity of XML nodes is not "removed". 
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e306">However, χίμαιραλ does keep a strong difference between nodes which are kept in 
               <div class="code e307">&lt;χ:instance&gt;</div> elements and maps and atomic values.
            </div>
         </div>
      </div><a name="MovingthechimeraforwardANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e308">
         <div class="title e309">Moving the chimera forward</div>
         <div class="para e310">χίμαιραλ is a good playground to explore the new possibilities offered by XDM 3.0.
            Here is a (non exhaustive) list of a few directions that seem interesting... 
         </div>
         <div class="note e311">
            <div class="para e312">Don't expect to find fully baked proposals in this section which contains, on the
               contrary very early drafts of  ideas to follow to support XDM maps as "first class
               citizens"!
            </div>
         </div><a name="EmbracingRDFANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e313">
            <div class="title e314">Embracing RDF</div>
            <div class="para e315">If you had the opportunity to enjoy the sunny weather of Orlando in December 2001,
               you may remember "
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e316" xlink:actuate="onRequest" xlink:href="http://web.archive.org/web/20020115041927/http://www.idealliance.org/papers/xml2001/papers/html/03-01-04.html" xlink:show="new" xlink:type="simple">The Syntactic Web</div>" a provocative talk where
               Jonathan Robie has shown how XQuery 1.0 could be used to query normalized XML/RDF
               documents.
            </div>
            <div class="para e317">The gap between RDF triples and the versatility of its XML representation was a big
               issue, but the new features brought by this new version of the XPath/XQuery/XSLT package
               should
               help us.
            </div>
            <div class="para e318">The basic data model of RDF is based on triples, a triple being a composed of a subject,
               a predicate and an object. In XDM, a triple can now be represented by either a sequence,
               an
               array or a map of three items.
            </div>
            <div class="para e319">XDM sequences have the property that they cannot include other sequences and representing
               triples as sequences would mean that you couldn't define sequences of triples. For
               that
               reason it is probably better to define triples as maps or arrays. An array being a
               map indexed by integers, that doesn't make a huge difference at a conceptual level,
               but I find it
               cleaner to access to the subject of a triple using a QName (such as rdf:subject) rather
               than an index. Following this principle, we could define a triple
               as:
               <div class="programlisting e320" xml:space="preserve">map {
                  xs:QName('rdf:subject')   := xs:anyURI('http://www.example.org/index.html'),
                  xs:QName('rdf:predicate') := xs:anyURI('http://purl.org/dc/elements/1.1/creator'),
                  xs:QName('rdf:object')    := xs:anyURI('http://www.example.org/staffid/85740')
                  }
               </div>
            </div>
            <div class="para e321">The χίμαιραλ serialization of this map
               is:
               <div class="programlisting e322" xml:space="preserve">&lt;χ:data-model xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:χ="http://χίμαιραλ.com#"
                  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"&gt;
                  &lt;χ:map&gt;
                  &lt;χ:entry key="rdf:object"
                  keyType="xs:QName"&gt;
                  &lt;χ:atomic-value type="xs:anyURI"&gt;http://www.example.org/staffid/85740&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="rdf:predicate"
                  keyType="xs:QName"&gt;
                  &lt;χ:atomic-value type="xs:anyURI"&gt;http://purl.org/dc/elements/1.1/creator&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="rdf:subject"
                  keyType="xs:QName"&gt;
                  &lt;χ:atomic-value type="xs:anyURI"&gt;http://www.example.org/index.html&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;/χ:map&gt;
                  &lt;/χ:data-model&gt;
               </div>
            </div>
            <div class="para e323">What can we do with such triples? Using higher order functions, it should not be too
               difficult to define triple stores with basic query features!
            </div>
            <div class="para e324">Is this lightweight enough? Or does RDF support deserve new information item types
               to be supported by XDM?
            </div>
         </div><a name="SyntacticalsugarANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e325">
            <div class="title e326">Syntactical sugar</div>
            <div class="para e327">We've seen that this JSON
               object
               <div class="programlisting e328" xml:space="preserve">{ "accounting" : [ 
                  { "firstName" : "John", 
                  "lastName"  : "Doe",
                  "age"       : 23 },
                  
                  { "firstName" : "Mary", 
                  "lastName"  : "Smith",
                  "age"       : 32 }
                  ],                                 
                  "sales"     : [ 
                  { "firstName" : "Sally", 
                  "lastName"  : "Green",
                  "age"       : 27 },
                  
                  { "firstName" : "Jim",  
                  "lastName"  : "Galley",
                  "age"       : 41 }
                  ]
                  }                  
               </div>
            </div>
            <div class="para e329">Is serialized in χίμαιραλ
               as:
               <div class="programlisting e330" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
                  &lt;χ:data-model xmlns:χ="http://χίμαιραλ.com#"&gt;
                  &lt;χ:map&gt;
                  &lt;χ:entry key="sales" keyType="string"&gt;
                  &lt;χ:map&gt;
                  &lt;χ:entry key="1" keyType="number"&gt;
                  &lt;χ:map&gt;
                  &lt;χ:entry key="lastName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;Green&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="age" keyType="string"&gt;
                  &lt;χ:atomic-value type="number"&gt;27&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="firstName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;Sally&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;/χ:map&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="2" keyType="number"&gt;
                  &lt;χ:map&gt;
                  &lt;χ:entry key="lastName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;Galley&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="age" keyType="string"&gt;
                  &lt;χ:atomic-value type="number"&gt;41&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="firstName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;Jim&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;/χ:map&gt;
                  &lt;/χ:entry&gt;
                  &lt;/χ:map&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="accounting" keyType="string"&gt;
                  &lt;χ:map&gt;
                  &lt;χ:entry key="1" keyType="number"&gt;
                  &lt;χ:map&gt;
                  &lt;χ:entry key="lastName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;Doe&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="age" keyType="string"&gt;
                  &lt;χ:atomic-value type="number"&gt;23&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="firstName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;John&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;/χ:map&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="2" keyType="number"&gt;
                  &lt;χ:map&gt;
                  &lt;χ:entry key="lastName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;Smith&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="age" keyType="string"&gt;
                  &lt;χ:atomic-value type="number"&gt;32&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="firstName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;Mary&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;/χ:map&gt;
                  &lt;/χ:entry&gt;
                  &lt;/χ:map&gt;
                  &lt;/χ:entry&gt;
                  &lt;/χ:map&gt;
                  &lt;/χ:data-model&gt;
               </div>
            </div>
            <div class="para e331">We can work with that, but wouldn't it be nice if we had a native syntax that does
               not use XML elements and attributes to represent maps?
            </div>
            <div class="para e332">Depending on the requirements, many approaches are possible. </div>
            <div class="para e333">A first option would be to define pluggable notation parsers within XML and
               write:
               <div class="programlisting e334" xml:space="preserve">&lt;χ:notation mediatype="application/json"&gt;&lt;![CDATA[
                  { "accounting" : [ 
                  { "firstName" : "John", 
                  "lastName"  : "Doe",
                  "age"       : 23 },
                  
                  { "firstName" : "Mary", 
                  "lastName"  : "Smith",
                  "age"       : 32 }
                  ],                                 
                  "sales"     : [ 
                  { "firstName" : "Sally", 
                  "lastName"  : "Green",
                  "age"       : 27 },
                  
                  { "firstName" : "Jim",  
                  "lastName"  : "Galley",
                  "age"       : 41 }
                  ]
                  }                  
                  ]]&gt;&lt;/χ:notation&gt;
               </div>The
               meaning of the 
               <div class="code e335">&lt;χ:notation/&gt;</div> element would be to trigger a parser supporting the application/json datatype. This
               is less verbose, more natural to JSON users, but
               doesn't allow to add XML nodes in maps or sequences.
            </div>
            <div class="para e336">Another direction would be to extend the syntax of XML itself. To do so, again, there
               are many possibilities. The markup in XML is based on angle brackets and the distinction
               between
               the different XML productions is usually done through the character following the
               bracket in the opening tags.
            </div>
            <div class="para e337">This principle leaves a lot of possibilities. For instance, maps could be identified
               by the tags 
               <div class="code e338">&lt;{&gt;</div> and 
               <div class="code e339">&lt;/}&gt;</div> to follow the characters used by XDM map
               literals and JSON objects
               :
               <div class="programlisting e340" xml:space="preserve">&lt;χ:data-model&gt;
                  &lt;{&gt;
                  &lt;χ:entry key="sales" keyType="string"&gt;
                  &lt;{&gt;
                  &lt;χ:entry key="1" keyType="number"&gt;
                  &lt;{&gt;
                  &lt;χ:entry key="lastName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;Green&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="age" keyType="string"&gt;
                  &lt;χ:atomic-value type="number"&gt;27&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="firstName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;Sally&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;/}&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="2" keyType="number"&gt;
                  &lt;{&gt;
                  &lt;χ:entry key="lastName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;Galley&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="age" keyType="string"&gt;
                  &lt;χ:atomic-value type="number"&gt;41&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="firstName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;Jim&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;/}&gt;
                  &lt;/χ:entry&gt;
                  &lt;/}&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="accounting" keyType="string"&gt;
                  &lt;{&gt;
                  &lt;χ:entry key="1" keyType="number"&gt;
                  &lt;{&gt;
                  &lt;χ:entry key="lastName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;Doe&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="age" keyType="string"&gt;
                  &lt;χ:atomic-value type="number"&gt;23&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="firstName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;John&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;/}&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="2" keyType="number"&gt;
                  &lt;{&gt;
                  &lt;χ:entry key="lastName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;Smith&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="age" keyType="string"&gt;
                  &lt;χ:atomic-value type="number"&gt;32&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;χ:entry key="firstName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;Mary&lt;/χ:atomic-value&gt;
                  &lt;/χ:entry&gt;
                  &lt;/}&gt;
                  &lt;/χ:entry&gt;
                  &lt;/}&gt;
                  &lt;/χ:entry&gt;
                  &lt;/}&gt;
                  &lt;/χ:data-model&gt;
               </div>
            </div>
            <div class="para e341">Map entries are not ordered and in that respect they are similar to XML attributes.
               We could use this similarity and use the character 
               <div class="code e342">@</div> to identify map
               entries:
               <div class="programlisting e343" xml:space="preserve">&lt;χ:data-model&gt;
                  &lt;{&gt;
                  &lt;@"sales" keyType="string"&gt;
                  &lt;{&gt;
                  &lt;@"1" keyType="number"&gt;
                  &lt;{&gt;
                  &lt;@"lastName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;Green&lt;/χ:atomic-value&gt;
                  &lt;/@"lastName"&gt;
                  &lt;@"age" keyType="string"&gt;
                  &lt;χ:atomic-value type="number"&gt;27&lt;/χ:atomic-value&gt;
                  &lt;/@"age"&gt;
                  &lt;@"firstName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;Sally&lt;/χ:atomic-value&gt;
                  &lt;/@"firstName"&gt;
                  &lt;/}&gt;
                  &lt;/@"1"&gt;
                  &lt;@"2" keyType="number"&gt;
                  &lt;{&gt;
                  &lt;@"lastName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;Galley&lt;/χ:atomic-value&gt;
                  &lt;/@"lastName"&gt;
                  &lt;@"age" keyType="string"&gt;
                  &lt;χ:atomic-value type="number"&gt;41&lt;/χ:atomic-value&gt;
                  &lt;/@"age"&gt;
                  &lt;@"firstName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;Jim&lt;/χ:atomic-value&gt;
                  &lt;/@"firstName"&gt;
                  &lt;/}&gt;
                  &lt;/@"2"&gt;
                  &lt;/}&gt;
                  &lt;/@"sales"&gt;
                  &lt;@"accounting" keyType="string"&gt;
                  &lt;{&gt;
                  &lt;@"1" keyType="number"&gt;
                  &lt;{&gt;
                  &lt;@"lastName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;Doe&lt;/χ:atomic-value&gt;
                  &lt;/@"lastName"&gt;
                  &lt;@"age" keyType="string"&gt;
                  &lt;χ:atomic-value type="number"&gt;23&lt;/χ:atomic-value&gt;
                  &lt;/@"age"&gt;
                  &lt;@"firstName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;John&lt;/χ:atomic-value&gt;
                  &lt;/@"firstName"&gt;
                  &lt;/}&gt;
                  &lt;/@"1"&gt;
                  &lt;@"2" keyType="number"&gt;
                  &lt;{&gt;
                  &lt;@"lastName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;Smith&lt;/χ:atomic-value&gt;
                  &lt;/@"lastName"&gt;
                  &lt;@"age" keyType="string"&gt;
                  &lt;χ:atomic-value type="number"&gt;32&lt;/χ:atomic-value&gt;
                  &lt;/@"age"&gt;
                  &lt;@"firstName" keyType="string"&gt;
                  &lt;χ:atomic-value type="string"&gt;Mary&lt;/χ:atomic-value&gt;
                  &lt;/@"firstName"&gt;
                  &lt;/}&gt;
                  &lt;/@"2"&gt;
                  &lt;/}&gt;
                  &lt;/@"accounting"&gt;
                  &lt;/}&gt;
                  &lt;/χ:data-model&gt;
               </div>
            </div>
            <div class="para e344">The key names have been enclosed between quotes because map keys can include any character
               including whitespaces, but they can be made optional when they are not needed. We
               could
               also give to the keyType a default value of
               "string":
               <div class="programlisting e345" xml:space="preserve">&lt;χ:data-model&gt;
                  &lt;{&gt;
                  &lt;@sales&gt;
                  &lt;{&gt;
                  &lt;@1 keyType="number"&gt;
                  &lt;{&gt;
                  &lt;@lastName&gt;
                  &lt;χ:atomic-value type="string"&gt;Green&lt;/χ:atomic-value&gt;
                  &lt;/@lastName
                  &lt;@age&gt;
                  &lt;χ:atomic-value type="number"&gt;27&lt;/χ:atomic-value&gt;
                  &lt;/@age
                  &lt;@firstName&gt;
                  &lt;χ:atomic-value type="string"&gt;Sally&lt;/χ:atomic-value&gt;
                  &lt;/@firstName
                  &lt;/}&gt;
                  &lt;/@1
                  &lt;@2 keyType="number"&gt;
                  &lt;{&gt;
                  &lt;@lastName&gt;
                  &lt;χ:atomic-value type="string"&gt;Galley&lt;/χ:atomic-value&gt;
                  &lt;/@lastName
                  &lt;@age&gt;
                  &lt;χ:atomic-value type="number"&gt;41&lt;/χ:atomic-value&gt;
                  &lt;/@age
                  &lt;@firstName&gt;
                  &lt;χ:atomic-value type="string"&gt;Jim&lt;/χ:atomic-value&gt;
                  &lt;/@firstName
                  &lt;/}&gt;
                  &lt;/@2
                  &lt;/}&gt;
                  &lt;/@sales
                  &lt;@accounting&gt;
                  &lt;{&gt;
                  &lt;@1 keyType="number"&gt;
                  &lt;{&gt;
                  &lt;@lastName&gt;
                  &lt;χ:atomic-value type="string"&gt;Doe&lt;/χ:atomic-value&gt;
                  &lt;/@lastName
                  &lt;@age&gt;
                  &lt;χ:atomic-value type="number"&gt;23&lt;/χ:atomic-value&gt;
                  &lt;/@age
                  &lt;@firstName&gt;
                  &lt;χ:atomic-value type="string"&gt;John&lt;/χ:atomic-value&gt;
                  &lt;/@firstName
                  &lt;/}&gt;
                  &lt;/@1
                  &lt;@2 keyType="number"&gt;
                  &lt;{&gt;
                  &lt;@lastName&gt;
                  &lt;χ:atomic-value type="string"&gt;Smith&lt;/χ:atomic-value&gt;
                  &lt;/@lastName
                  &lt;@age&gt;
                  &lt;χ:atomic-value type="number"&gt;32&lt;/χ:atomic-value&gt;
                  &lt;/@age
                  &lt;@firstName&gt;
                  &lt;χ:atomic-value type="string"&gt;Mary&lt;/χ:atomic-value&gt;
                  &lt;/@firstName
                  &lt;/}&gt;
                  &lt;/@2
                  &lt;/}&gt;
                  &lt;/@accounting
                  &lt;/}&gt;
                  &lt;/χ:data-model&gt;
               </div>
            </div>
            <div class="para e346">Atomic values could be identified by 
               <div class="code e347">&lt;=&gt;</div> and 
               <div class="code e348">&lt;/=&gt;</div> and the same default value applied to its type
               attribute:
               <div class="programlisting e349" xml:space="preserve">&lt;χ:data-model&gt;
                  &lt;{&gt;
                  &lt;@sales&gt;
                  &lt;{&gt;
                  &lt;@1 keyType="number"&gt;
                  &lt;{&gt;
                  &lt;@lastName&gt;
                  &lt;=&gt;Green&lt;/=&gt;
                  &lt;/@lastName&gt;
                  &lt;@age&gt;
                  &lt;= type="number"&gt;27&lt;/=&gt;
                  &lt;/@age&gt;
                  &lt;@firstName&gt;
                  &lt;=&gt;Sally&lt;/=&gt;
                  &lt;/@firstName&gt;
                  &lt;/}&gt;
                  &lt;/@1&gt;
                  &lt;@2 keyType="number"&gt;
                  &lt;{&gt;
                  &lt;@lastName&gt;
                  &lt;=&gt;Galley&lt;/=&gt;
                  &lt;/@lastName&gt;
                  &lt;@age&gt;
                  &lt;= type="number"&gt;41&lt;/=&gt;
                  &lt;/@age&gt;
                  &lt;@firstName&gt;
                  &lt;=&gt;Jim&lt;/=&gt;
                  &lt;/@firstName&gt;
                  &lt;/}&gt;
                  &lt;/@2&gt;
                  &lt;/}&gt;
                  &lt;/@sales&gt;
                  &lt;@accounting&gt;
                  &lt;{&gt;
                  &lt;@1 keyType="number"&gt;
                  &lt;{&gt;
                  &lt;@lastName&gt;
                  &lt;=&gt;Doe&lt;/=&gt;
                  &lt;/@lastName&gt;
                  &lt;@age&gt;
                  &lt;= type="number"&gt;23&lt;/=&gt;
                  &lt;/@age&gt;
                  &lt;@firstName&gt;
                  &lt;=&gt;John&lt;/=&gt;
                  &lt;/@firstName&gt;
                  &lt;/}&gt;
                  &lt;/@1&gt;
                  &lt;@2 keyType="number"&gt;
                  &lt;{&gt;
                  &lt;@lastName&gt;
                  &lt;=&gt;Smith&lt;/=&gt;
                  &lt;/@lastName&gt;
                  &lt;@age&gt;
                  &lt;= type="number"&gt;32&lt;/=&gt;
                  &lt;/@age&gt;
                  &lt;@firstName&gt;
                  &lt;=&gt;Mary&lt;/=&gt;
                  &lt;/@firstName&gt;
                  &lt;/}&gt;
                  &lt;/@2&gt;
                  &lt;/}&gt;
                  &lt;/@accounting&gt;
                  &lt;/}&gt;
                  &lt;/χ:data-model&gt;
               </div>
            </div>
            <div class="para e350">The tags that surround atomic values are useful when these values are within a sequence
               but look superfluous when the item has a single value. The next step could be to define
               that
               in that case as a shortcut the value and its type attribute could be directly included
               in the
               item:
               <div class="programlisting e351" xml:space="preserve">&lt;χ:data-model&gt;
                  &lt;{&gt;
                  &lt;@sales&gt;
                  &lt;{&gt;
                  &lt;@1 keyType="number"&gt;
                  &lt;{&gt;
                  &lt;@lastName&gt;Green&lt;/@lastName&gt;
                  &lt;@age type="number"&gt;27&lt;/@age&gt;
                  &lt;@firstName&gt;Sally&lt;/@firstName&gt;
                  &lt;/}&gt;
                  &lt;/@1&gt;
                  &lt;@2 keyType="number"&gt;
                  &lt;{&gt;
                  &lt;@lastName&gt;Galley&lt;/@lastName&gt;
                  &lt;@age type="number"&gt;41&lt;/@age&gt;
                  &lt;@firstName&gt;Jim&lt;/@firstName&gt;
                  &lt;/}&gt;
                  &lt;/@2&gt;
                  &lt;/}&gt;
                  &lt;/@sales&gt;
                  &lt;@accounting&gt;
                  &lt;{&gt;
                  &lt;@1 keyType="number"&gt;
                  &lt;{&gt;
                  &lt;@lastName&gt;Doe&lt;/@lastName&gt;
                  &lt;@age type="number"&gt;23&lt;/@age&gt;
                  &lt;@firstName&gt;John&lt;/@firstName&gt;
                  &lt;/}&gt;
                  &lt;/@1&gt;
                  &lt;@2 keyType="number"&gt;
                  &lt;{&gt;
                  &lt;@lastName&gt;Smith&lt;/@lastName&gt;
                  &lt;@age type="number"&gt;32&lt;/@age&gt;
                  &lt;@firstName&gt;Mary&lt;/@firstName&gt;
                  &lt;/}&gt;
                  &lt;/@2&gt;
                  &lt;/}&gt;
                  &lt;/@accounting&gt;
                  &lt;/}&gt;
                  &lt;/χ:data-model&gt;
                  
               </div>
            </div>
         </div><a name="XPathANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e352">
            <div class="title e353">XPath</div>
            <div class="para e354">The χίμαιραλ serialization being XML, it is possible to use XPath path expressions
               to query its structure. For instance, to get a list of employees which are less than
               30, we can
               write:
               <div class="programlisting e355" xml:space="preserve">χ:map/χ:entry/χ:map/χ:entry/χ:map[χ:entry[@key='age'][χ:atomic-value &lt; 30]]</div>
            </div>
            <div class="para e356">Or, if we're feeling lucky:
               <div class="programlisting e357" xml:space="preserve">//χ:map[χ:entry[@key='age'][χ:atomic-value &lt; 30]]</div>
            </div>
            <div class="para e358">Again, that's good as long we work on a χίμαιραλ serialization but it would be good
               to be able to use 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e359" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/2011/WD-xpath-30-20111213/#id-path-expressions" xlink:show="new" xlink:type="simple">path expressions</div>  directly on map data structures. To do so we would need at minima to
               define steps to match maps and entries.
            </div>
            <div class="para e360">XSLT 3.0 introduces a new 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e361" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xslt-30/#map-type" xlink:show="new" xlink:type="simple">
                  <div class="code e362">map()</div> item type
               </div> which could be used as a 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e363" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/2011/WD-xpath-30-20111213/#doc-xpath30-KindTest" xlink:show="new" xlink:type="simple">kind test</div> to identify maps.
            </div>
            <div class="para e364">If we follow the idea that map entries are similar to XML attributes, we could use
               the 
               <div class="code e365">@</div> notation to identify them. The XPath expression would then
               become:
               <div class="programlisting e366" xml:space="preserve">map()/@*/map()/@*/map()[@age &lt; 30]]</div>
            </div>
            <div class="para e367">Or, if we're feeling lucky:
               <div class="programlisting e368" xml:space="preserve">//map()[@age &lt; 30]]</div>
            </div>
         </div><a name="ValidationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e369">
            <div class="title e370">Validation</div>
            <div class="para e371">These data models can be complex. Wouldn't it be useful to be able to validate them
               with schema languages? This would give us a way to validate JSON maps!
            </div>
            <div class="para e372">Of course we can already serialize them in χίμαιραλ and validate the serialization
               using any schema language, but again it would be good to be able to validate these
               structures
               directly.
            </div>
            <div class="para e373">A RELAX NG schema to validate the χίμαιραλ serialization of our example would
               be:
               <div class="programlisting e374" xml:space="preserve">namespace χ = "http://χίμαιραλ.com#"
                  
                  start = element χ:data-model { top-level-map }
                  
                  # Top level map: departments
                  top-level-map =
                  element χ:map {
                  element χ:entry {
                  attribute key { xsd:NMTOKEN },
                  attribute keyType { "string" },
                  emp-array
                  }*
                  }
                  
                  # List of employees
                  emp-array =
                  element χ:map {
                  element χ:entry {
                  attribute key { xsd:positiveInteger },
                  attribute keyType { "number" },
                  emp-map
                  }*
                  }
                  
                  # Description of an employee
                  emp-map = element χ:map { (age | firstName | lastName) + }
                  
                  age =
                  element χ:entry {
                  attribute key { "age" },
                  attribute keyType { "string" },
                  element χ:atomic-value {
                  attribute type { "number" },
                  xsd:positiveInteger
                  }
                  }
                  
                  firstName =
                  element χ:entry {
                  attribute key { "firstName" },
                  attribute keyType { "string" },
                  element χ:atomic-value {
                  attribute type { "string" },
                  xsd:token
                  }
                  }
                  
                  lastName =
                  element χ:entry {
                  attribute key { "lastName" },
                  attribute keyType { "string" },
                  element χ:atomic-value {
                  attribute type { "string" },
                  xsd:token
                  }
                  }
                  
               </div>
            </div>
            <div class="note e375">
               <div class="para e376">In the description of the maps used to describe employees, we cannot use 
                  <div class="code e377">interleave</div> patterns because of the 
                  <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e378" xlink:actuate="onRequest" xlink:href="http://relaxng.org/spec-20011203.html#interleave-restrictions" xlink:show="new" xlink:type="simple">restriction on interleave</div> and the schema is approximate. In this specific case, we could
                  enumerate the six possible combinations but the exercise would quickly become verbose
                  if the number of items
                  grew:
                  <div class="programlisting e379" xml:space="preserve">emp-map = element χ:map { 
                     (age, firstName, lastName)  
                     | (age, lastName, firstName) 
                     | (firstName, age, lastName)  
                     | (firstName, lastName, age) 
                     | (lastName, age, firstName)  
                     | (lastName, firstName, age) 
                     }
                  </div>
               </div>
            </div>
            <div class="para e380">A Schematron schema for the χίμαιραλ serialization could be developed based on XPath
               expressions similar to those that have been shown in the previous section.
            </div>
            <div class="para e381">Again, it would be interesting to support maps directly as first class citizens in
               XML schema languages.
            </div>
            <div class="para e382">The ability to use Schematron on XDM maps depends directly on the ability to browse
               maps using patterns and path expressions in XPath and XSLT (see above)...
            </div>
            <div class="para e383">The main impact on RELAX NG would be to add 
               <div class="code e384">map</div> and 
               <div class="code e385">item</div> patterns and the schema could look
               like:
               <div class="programlisting e386" xml:space="preserve">namespace χ = "http://χίμαιραλ.com#"
                  
                  start = element χ:data-model { top-level-map }
                  
                  # Top level map: departments
                  top-level-map =
                  map  {
                  entry xsd:NMTOKEN {
                  emp-array
                  }*
                  }
                  
                  # List of employees
                  emp-array =
                  map {
                  entry xsd:positiveInteger {
                  emp-map
                  }*
                  }
                  
                  # Description of an employee
                  emp-map = map { age, firstName, lastName  }
                  
                  age =
                  entry age {
                  xsd:positiveInteger
                  }
                  }
                  
                  firstName =
                  entry firstName {
                  xsd:token
                  }
                  }
                  
                  lastName =
                  entry lastName {
                  xsd:token
                  }
                  }
                  
               </div>
            </div>
            <div class="para e387">Sequences could probably be supported without adding a new pattern but would require
               to relax some restrictions to allow the description of sequences mixing atomic values,
               maps and
               nodes (in Relax NG, sequences of atomic values are already possible in list datatypes,
               sequences of nodes are of course available to describe node contents but these two
               type of
               sequences cannot be mixed).
            </div>
         </div>
      </div><a name="ConclusionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e388">
         <div class="title e389">Conclusion</div>
         <div class="para e390">According to the definition of chimeras in genetics from Wikipedia quoted in the introduction,
            
            <div class="citation e391">chimeras are formed from at least four parent cells (two fertilized eggs or early
               embryos fused together). Each population of cells keeps its own character and the
               resulting organism is a mixture of tissues
            </div>.
         </div>
         <div class="para e392">The current XDM proposals have added to the XML data model a foreign model to represent
            maps. This new model is a superset of the JSON data model. The two data models keep
            their own
            character and the resulting model is a mixture of information items.
         </div>
         <div class="para e393">It's far to say that the current XDM proposal is a chimera, something described as
            
            <div class="citation e394">usually ugly, foolish or impossible fantasies</div> by Jeni Tennison.
         </div>
         <div class="para e395">I hope that the proposals sketched in this paper will help to address this situation
            and fully integrate these new information items in the XML echosystem.
         </div>
      </div>
   </div>
</div>