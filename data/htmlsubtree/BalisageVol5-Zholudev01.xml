<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#ScriptingDocumentswithXQuery:VirtualDocumentsinTNTBaseANCHOR" name="ScriptingDocumentswithXQuery:VirtualDocumentsinTNTBaseTOC">Scripting Documents with XQuery: Virtual Documents in TNTBase</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#TNTBaseaShortRecapANCHOR" name="TNTBaseaShortRecapTOC">TNTBase, a Short Recap</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TheCoreANCHOR" name="TheCoreTOC">The Core</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ApplicationLayerofTNTBaseANCHOR" name="ApplicationLayerofTNTBaseTOC">Application Layer of TNTBase</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#ValidationPresentationInterfaceExtractionPluginArchitectureANCHOR" name="ValidationPresentationInterfaceExtractionPluginArchitectureTOC">Validation, Presentation, Interface Extraction, Plugin Architecture</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#CustomXQuerymodulesANCHOR" name="CustomXQuerymodulesTOC">Custom XQuery modules</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#VirtualDocumentsANCHOR" name="VirtualDocumentsTOC">Virtual Documents</a></div>
               </div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#VirtualDocumentsANCHOR" name="VirtualDocumentsTOC">Virtual Documents</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#VDocSpecificationsandSkeletonsANCHOR" name="VDocSpecificationsandSkeletonsTOC">VDoc Specifications and Skeletons</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#VDocSkeletonsANCHOR" name="VDocSkeletonsTOC">VDoc Skeletons</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#QueriesANCHOR" name="QueriesTOC">Queries</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#ParametersANCHOR" name="ParametersTOC">Parameters</a></div>
               </div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#VDocsasTNTBaseFSEntitiesandTheirMaterializingANCHOR" name="VDocsasTNTBaseFSEntitiesandTheirMaterializingTOC">VDocs as TNTBase FS Entities and Their Materializing</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#QueryingVDocsANCHOR" name="QueryingVDocsTOC">Querying VDocs</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#VDocEditingANCHOR" name="VDocEditingTOC">VDoc Editing</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#VDocSchemaValidationANCHOR" name="VDocSchemaValidationTOC">VDoc Schema Validation</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ImplementationDetailsANCHOR" name="ImplementationDetailsTOC">Implementation Details</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#UseCasesANCHOR" name="UseCasesTOC">Use Cases</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AutomatedExamGenerationANCHOR" name="AutomatedExamGenerationTOC">Automated Exam Generation</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#MultipleVersionsofDocumentsANCHOR" name="MultipleVersionsofDocumentsTOC">Multiple Versions of Documents</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ManagingDocumentCollectionsANCHOR" name="ManagingDocumentCollectionsTOC">Managing Document Collections</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#RefactoringOntologiesANCHOR" name="RefactoringOntologiesTOC">Refactoring Ontologies</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#Conclusion&amp;FurtherWorkANCHOR" name="Conclusion&amp;FurtherWorkTOC">Conclusion &amp; Further Work</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ReferencesANCHOR" name="ReferencesTOC">References</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">auxiliary information</div>
         <div class="singletermTERMS">and editing</div>
         <div class="singletermTERMS">AI in Education (AIED-2003), IOS Press</div>
         <div class="singletermTERMS">August 3 - 6, 2010</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">branching</div>
         <div class="singletermTERMS">Balisage Series on Markup Technologies</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2010</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">consume</div>
         <div class="singletermTERMS">committed</div>
         <div class="singletermTERMS">constructed</div>
         <div class="singletermTERMS">content</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">database views as first-class citizens</div>
         <div class="singletermTERMS">Diff VDoc</div>
         <div class="singletermTERMS">DocBook 5.0: The Definitive Guide</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">enabling technology</div>
         <div class="singletermTERMS">editable</div>
         <div class="singletermTERMS">exam VDoc</div>
         <div class="singletermTERMS">enabling tools</div>
         <div class="singletermTERMS">ESWC</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
         <div class="singletermTERMS">fix</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
         <div class="singletermTERMS">generated</div>
         <div class="singletermTERMS">guided tours</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">handle</div>
         <div class="singletermTERMS">HEAD</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">in-document macros</div>
         <div class="singletermTERMS">indexing</div>
         <div class="singletermTERMS">index</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
         <div class="singletermTERMS">Kohlhase</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">Literate Programming</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">m.kohlhase@jacobs-university.de</div>
         <div class="singletermTERMS">Michael</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">not</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">older</div>
         <div class="singletermTERMS">other VDocs</div>
         <div class="singletermTERMS">override</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">particular revision</div>
         <div class="singletermTERMS">payload</div>
         <div class="singletermTERMS">Proceedings of XML Prague 2010</div>
         <div class="singletermTERMS">PhD Student</div>
         <div class="singletermTERMS">Professor</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">references</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">static</div>
         <div class="singletermTERMS">ss</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">transactional support</div>
         <div class="singletermTERMS">tntbase:validate</div>
         <div class="singletermTERMS">tnt:xqinclude</div>
         <div class="singletermTERMS">tnt:return</div>
         <div class="singletermTERMS">tnt:result</div>
         <div class="singletermTERMS">tnt:query</div>
         <div class="singletermTERMS">tnt:param</div>
         <div class="singletermTERMS">tnt:vdoc($path as xs:string)</div>
         <div class="singletermTERMS">tnt:vd-spec($path as xs:string)</div>
         <div class="singletermTERMS">tnt:doc</div>
         <div class="singletermTERMS">tnt:xpath</div>
         <div class="singletermTERMS">tnt:make-editable</div>
         <div class="singletermTERMS">tnt:skeleton</div>
         <div class="singletermTERMS">tnt:path</div>
         <div class="singletermTERMS">tableofcontents</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
         <div class="singletermTERMS">Virtual Documents</div>
         <div class="singletermTERMS">VDoc Specification (VDoc Spec)</div>
         <div class="singletermTERMS">VDoc Skeleton (VDoc Skel)</div>
         <div class="singletermTERMS">VDoc Specs</div>
         <div class="singletermTERMS">VDoc materializing</div>
         <div class="singletermTERMS">vyacheslav.zholudev@gmail.com</div>
         <div class="singletermTERMS">Vyacheslav</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">xs:element</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
         <div class="singletermTERMS">Zholudev</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="ScriptingDocumentswithXQuery:VirtualDocumentsinTNTBaseANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.2">
      <div class="title e1">Scripting Documents with XQuery: Virtual Documents in TNTBase</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2010</div>
            <div class="confdates e5">August 3 - 6, 2010</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">This paper introduces the concept of Virtual Documents and its prototypical realization
               in our TNTBase system, a versioned XML database. Virtual Documents integrate XQuery-based
               computational facilities into documents like JSP/PHP do for relational queries. We
               view
               the integration of computation in documents as an 
               <div class="emphasis e8" role="ital">enabling technology</div> and
               evaluate it on a handful of real-world use cases.
               
            </div>
         </div>
         <div class="author e9">
            <div class="personname e10">
               <div class="firstname e11">Vyacheslav</div>
               <div class="surname e12">Zholudev</div>
            </div>
            <div class="personblurb e13">
               <div class="para e14">Vyacheslav Zholudev has graduated in May, 2007 from Saint-Petersburg State University,
                  Russia with a Master degree in Computer Science. 
                  He is continuing his studies at Jacobs University Bremen as a Ph.D student. 
                  Starting from September of 2007 he is working in the KWARC research group under the
                  supervision of Prof. Michael Kohlhase.
               </div>
            </div>
            <div class="affiliation e15">
               <div class="jobtitle e16">PhD Student</div>
               <div class="orgname e17">Jacobs University Bremen</div>
            </div>
            <div class="email e18">vyacheslav.zholudev@gmail.com</div>
         </div>
         <div class="author e19">
            <div class="personname e20">
               <div class="firstname e21">Michael</div>
               <div class="surname e22">Kohlhase</div>
            </div>
            <div class="personblurb e23">
               <div class="para e24">Dr. Michael Kohlhase (born 1964 in Erlangen) is a 
                  German computer scientist and professor at Jacobs University, Bremen, Germany, 
                  where he is head of the KWARC research group (Knowledge Adaptation and Reasoning for
                  Content) at the School of Engineering and Science.
               </div>
            </div>
            <div class="affiliation e25">
               <div class="jobtitle e26">Professor</div>
               <div class="orgname e27">Jacobs University Bremen</div>
            </div>
            <div class="email e28">m.kohlhase@jacobs-university.de</div>
         </div>
         <div class="legalnotice e29">
            <div class="para e30">Copyright © 2010 Vyacheslav Zholudev, Michael Kohlhase. Licensed under the Creative
               Commons License 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e31" xlink:actuate="onRequest" xlink:href="http://creativecommons.org/licenses/by-sa/3.0/" xlink:show="new" xlink:type="simple">http://creativecommons.org/licenses/by-sa/3.0/</div>.
            </div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e32" xml:id="LABEL.intro">
         <div class="title e33">Introduction</div>
         <div class="para e34">One of the big promises of XML as a representation paradigm is that documents become
            uniformly
            machine-processable. Indeed XSLT is widely used for pre/postprocessing XML-encoded
            documents, and
            XQuery is poised to become for semi-structured data what SQL is for relational data.
            But in both
            cases, traditional workflows have important features that are largely missing from
            XML workflows.
            (i)  Document authoring and management systems
            <div class="popupBox e35">
               <div class="popupLabel" onmouseover="$('#d1e59').show('1000');" onmouseout="$('#d1e59').hide('1000');">[ footnote ]</div>
               <div id="d1e59" style="display: none;">
                  <div class="footnote">
                     <div class="para e36">We take TeX/LaTeX as the most prominent
                        example from which we take our intuitions. Wikis usually also allow in-text macros
                        and arguably
                        the VB/VBA extensions of Office suites also allow macros, even if they are less extensively
                        used.
                     </div>
                  </div>
               </div>
            </div> allow user-definable, 
            <div class="emphasis e37" role="ital">in-document macros</div> that allow the computation repetitive
            writing tasks or processing of outside data.
            (ii)  Relational databases support 
            <div class="emphasis e38" role="ital">database views as first-class citizens</div>,
            i.e. computational devices that look like tables to the user, but internally are embedded
            queries.
            
            Both in-text macros and views could in principle be externalized from production workflows
            at the
            cost of losing locality and ease-of-use. And indeed their integrated nature has brought
            levels of
            customization and functionality that have not been achieved in practice without.
         </div>
         <div class="para e39">In this paper, we present 
            <div class="emphasis e40" role="ital">Virtual Documents</div> (VDocs), a general framework for
            
            <div class="emphasis e41" role="ital">integrating XQueries into XML documents as computational devices</div> and processing them
            efficiently. As a rough approximation, VDocs are “XML database views”
            analogous to views in relational databases;
            these are tables that are virtual in the sense that they are the results of SQL queries
            computed on
            demand from the explicitly represented database tables. Similarly, TNTBase Virtual
            Documents
            are the results of XQueries computed on demand from the XML files explicitly represented
            in TNTBase,
            presented to the user as entities (files) in the TNTBase file system.  Like views
            in relational
            databases TNTBase VDocs are editable, and the TNTBase system transparently patches
            the differences
            into the original files in its underlying versioning system. Thus a user does not
            have to know about
            the original source of document parts which allows him to focus only on relevant pieces
            of
            information.  Again, like relational database views, VDocs become very useful abstractions
            in the
            interaction with versioned XML storage.
         </div>
         <div class="para e42">We have already discussed VDocs&nbsp;[
            <div class="xref e43" linkend="zhokohrab.tntbasef10"></div>], concentrating on theoretical issues such
            as when XML-based document formats admit virtual documents. Since
            then, our VDocs implementation has been extended and has
            matured considerably, and we will concentrate on features and real word use cases
            and practical issues. In the
            next section we recap the basics of our TNTBase system, before we introduce the functionality
            of VDocs
            in Section&nbsp;
            <div class="xref e44" linkend="LABEL.sec.vds"></div>. Section&nbsp;
            <div class="xref e45" linkend="LABEL.sec.usecases"></div> discusses some high-profile use cases of VDocs
            and Section&nbsp;
            <div class="xref e46" linkend="LABEL.sec.concl"></div> concludes the paper.
            
         </div>
      </div><a name="TNTBaseaShortRecapANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e47" xml:id="LABEL.sec.tntbase">
         <div class="title e48">TNTBase, a Short Recap</div>
         <div class="para e49">The TNTBase system is a versioned XML-database with a client-server
            architecture. Essentially, it consists of two parts: the core and the application-specific
            layer. Let us briefly discuss them.
         </div><a name="TheCoreANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e50" xml:id="LABEL.sec.tntbase-core">
            <div class="title e51">The Core</div>
            <div class="para e52">The core of TNTBase consists of the xSVN module, which integrates Berkeley DB
               XML&nbsp;[
               <div class="xref e53" linkend="berkeleydbxml.web"></div>] into a Subversion server&nbsp;[
               <div class="xref e54" linkend="svn.web"></div>]. DB XML stores HEAD
               revisions of XML files; non-XML content like PDF, images or LaTeX source files,
               differences between revisions, directory entry lists and other repository information
               are
               retained in a usual SVN back-end storage (Berkeley DB&nbsp;[
               <div class="xref e55" linkend="berkeleydb.web"></div>] in our
               case). It is worth mentioning here that TNTBase also supports 
               <div class="emphasis e56" role="ital">branching</div>
               as SVN does (see also Section&nbsp;
               <div class="xref e57" linkend="LABEL.sec.usecases.branches"></div> for a use-case of virtual
               documents with on this).  Keeping XML documents in DB XML allows us to access those
               files
               not only via any SVN client, but also through the DB XML API that supports efficient
               querying of XML content via XQuery&nbsp;[
               <div class="xref e58" linkend="w3c.xquery10"></div>] and modifying that content via
               XQuery Update&nbsp;[
               <div class="xref e59" linkend="w3c.xquery-update"></div>]. As with many XML-native databases, DB XML (and hence
               TNTBase) supports 
               <div class="emphasis e60" role="ital">indexing</div>, which improves performance of certain
               queries. TNTBase also adopted 
               <div class="emphasis e61" role="ital">transactional support</div> (atomicity,
               consistency, isolation, durability) from DB XML.
            </div>
            <div class="para e62">The TNTBase system is realized as a web-application that provides two different interfaces
               to communicate with: an xSVN interface and a RESTful interface (for
               details refer to&nbsp;[
               <div class="xref e63" linkend="zholudev.tntbaserestful.web"></div>]) for XML-related tasks. The
               xSVN interface behaves like the normal SVN interface — the mod_dav_svn Apache module
               serves requests from remote SVN clients — with one exception: If one of the committed
               XML
               files is ill-formed, then xSVN will abort the whole transaction. The RESTful&nbsp;[
               <div class="xref e64" linkend="jsr311.web"></div>] interface
               provides XML fragment access to the versioned collection of documents:
            </div>
            <div class="variablelist e65">
               <div class="varlistentry e66">
                  <div class="term e67">Querying:</div>
                  <div class="listitem e68">
                     <div class="para e69">As every XML-native database, TNTBase supports XQuery, but extends the DB XML
                        syntax by a notion of file system path and revision to address different versions
                        of path-based
                        collections of documents.
                     </div>
                  </div>
               </div>
               <div class="varlistentry e70">
                  <div class="term e71">Modifying:</div>
                  <div class="listitem e72">
                     <div class="para e73">Apart from modifying any kinds of documents via any SVN client, TNTBase takes
                        advantage of XQuery Update facilities, and, in contrast to pure DB XML, modified documents
                        are
                        versioned, i.e., a new revision is committed to xSVN whenever some changed are made
                        to the
                        documents stored in a TNTBase repository .
                     </div>
                  </div>
               </div>
               <div class="varlistentry e74">
                  <div class="term e75">Querying of previous revisions:</div>
                  <div class="listitem e76">
                     <div class="para e77">Although xSVN’s DB XML back-end by default holds only HEAD
                        (the last) revisions of XML documents, and others are stored as reverse deltas against
                        HEAD
                        revisions, it is also possible to access and query previous versions by additionally
                        providing a
                        revision number to the TNTBase XQuery extension functions. It is necessary to note
                        that
                        previous versions cannot be modified because once a revision is committed to an xSVN
                        repository it
                        becomes persistent.
                     </div>
                  </div>
               </div>
               <div class="varlistentry e78">
                  <div class="term e79">Virtual Files:</div>
                  <div class="listitem e80">
                     <div class="para e81">This is a precursor technology to the Virtual Documents discussed in this
                        paper. It has been described in detail in&nbsp;[
                        <div class="xref e82" linkend="zhokoh.tvsx09.biblatex"></div>]: a Virtual File is a
                        TNTBase file system entity whose content is defined by a single XQuery expression.
                        For the end
                        user they are like normal files whose contents are the wrapped results of an associated
                        query. Virtual
                        Files also can be queried and modified.
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e83">For more information about the TNTBase core refer
               to&nbsp;[
               <div class="xref e84" linkend="zhokoh.tvsx09.biblatex"></div>]. Since then we have significantly increased stability and
               performance that can be proved that TNTBase is being used for the LATIN
               Project&nbsp;[
               <div class="xref e85" linkend="latin.url"></div>], for General Computer Science lectures repository (that counts
               more than 2000 XML documents with over 2500 revisions) and Translation SUMO to OMDoc
               Project&nbsp;[
               <div class="xref e86" linkend="misev.sumo2omdoc"></div>]. Moreover, we are mirroring some of TNTBase
               repositories to normal SVN repositories by replication functionality adopted from
               Subversion. This possibility once more justifies the decision of combining the two
               systems. If something went wrong with a TNTBase repository and the data got corrupted
               (actually, it never happened to us), then we can easily restore them from a replicated
               SVN
               repository with all history preservation.
            </div>
         </div><a name="ApplicationLayerofTNTBaseANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e87" xml:id="LABEL.sub.vd">
            <div class="title e88">Application Layer of TNTBase</div>
            <div class="figure e89" xml:id="LABEL.tntf" xreflabel="TNTBase">
               <div class="title e90">
                  TNTBase
                  
               </div>
               <div class="mediaobject e91">
                  <div class="imageobject e92">
                     <div class="metaBox e93"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e168').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e168" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e93'
                              </span><span class="metaAttribute">fileref='../../../vol5/graphics/Zholudev01/Zholudev01-001.png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e94">In our experiments it turned out that many tasks specific to particular XML formats
               can be done by
               TNTBase. This was a reason to derive a separate layer on top of the TNTBase core and
               augment this layer with format-specific functionalities (see Figure&nbsp;
               <div class="xref e95" linkend="LABEL.tntf"></div>). Although the detailed information can be
               found in&nbsp;[
               <div class="xref e96" linkend="zhokohrab.tntbasef10"></div>], let us briefly describe the major features:
            </div><a name="ValidationPresentationInterfaceExtractionPluginArchitectureANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e97">
               <div class="title e98">Validation, Presentation, Interface Extraction, Plugin Architecture</div>
               <div class="para e99">TNTBase
                  provides facilities to integrate format-specific validation (e.g. for RelaxNG schemas)
                  and
                  presentation (e.g. via XSL transformations). But sometimes a format requires more
                  specific
                  functionality, e.g. extraction and caching RDF information upon commit or retrieval
                  of
                  rendered MathML. Such functionality can be supplied as additional modules and injected
                  into the application layer via the TNTBase plugin API. Configuration files are also
                  stored in a TNTBase repository, so a user do not have to have an access to a server:
                  for instance, commit-time behavior is defined by an SVN 
                  <div class="emphasis e100" role="ital">tntbase:validate</div> property
                  that can be assigned to files as well as to whole directories. Pre-commit or post-commit
                  hooks that are automatically generated take care of processing committed information
                  based
                  on the configuration files. In case of pre-commit processing a corresponding plugin
                  has
                  access to the documents that are about to be committed, and may reject a transaction
                  if
                  the collection of committed documents is format-inconsistent, or clashes with existing
                  documents in the repository.  Last but not least, TNTBase RESTful URLs that are used
                  to perform validation
                  or presentation are dynamically changed once configuration files are modified.
               </div>
            </div><a name="CustomXQuerymodulesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e101">
               <div class="title e102">Custom XQuery modules</div>
               <div class="para e103">A user can write his own XQuery extensions and store
                  them in the repository. Thus it is not necessary to have modules located in the server’s
                  file system or remotely. XQuery modules can be referenced inside repository itself,
                  which
                  might happen to be useful if the development of XQuery modules is still in progress.
               </div>
            </div><a name="VirtualDocumentsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e104">
               <div class="title e105">Virtual Documents</div>
               <div class="para e106">Virtual Documents are also a part of an application layer,
                  but we will focus on them in the next sections.
               </div>
               <div class="para e107">TNTBase also gained number of features that have been requested by TNTBase users.
                  To
                  name just a few of them: integration with JOBAD framework&nbsp;[
                  <div class="xref e108" linkend="jobad.web"></div>], extracting RDF
                  from OMDoc&nbsp;[
                  <div class="xref e109" linkend="kohlhase.omdoc1.6spec"></div>] documents upon commit and storing it in
                  TNTBase, integration with LaTeXML&nbsp;[
                  <div class="xref e110" linkend="miller.latexml"></div>] and
                  Virtuoso&nbsp;[
                  <div class="xref e111" linkend="openlinkvirtuoso.web"></div>] (for more details refer
                  to&nbsp;[
                  <div class="xref e112" linkend="dklrz.pubmathlectnotlinkeddata10"></div>]). Those features are pluggable, so a new
                  TNTBase installation does not have to include them.
               </div>
            </div>
         </div>
      </div><a name="VirtualDocumentsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e113" xml:id="LABEL.sec.vds">
         <div class="title e114">Virtual Documents</div>
         <div class="para e115">This section introduces practical aspects and technical details of Virtual Documents
            (for
            the theory we refer to&nbsp;[
            <div class="xref e116" linkend="zhokohrab.tntbasef10"></div>]) using a simple running example to
            fortify our intuitions. Section&nbsp;
            <div class="xref e117" linkend="LABEL.sec.usecases"></div> will tackle the real-world scenarios
            and justify VDocs in TNTBase.
         </div>
         <div class="figure e118" xml:id="LABEL.vd_wf" xreflabel="VDoc Workflow">
            <div class="title e119">VDoc Workflow</div>
            <div class="mediaobject e120">
               <div class="imageobject e121">
                  <div class="metaBox e122"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e219').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e219" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e122'
                           </span><span class="metaAttribute">fileref='../../../vol5/graphics/Zholudev01/Zholudev01-002.png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e123">VDocs are the first class citizens in the TNTBase file system. Whereas internally
            they
            are quite different from usual documents in the repository, for a user they look like
            normal files: one can browse them, validate, apply stylesheets, query and even modify.
            VDocs
            are essentially a tight mix of static XML parts with XQuery queries and instructions
            in
            XML form that prompt TNTBase how to organize the XQuery results inside a VDoc. Let
            us
            start with a simple example. Assume that we want to have a joined list of mathematical
            exercises together with authors contributed to them. We might want to have the root
            element and the elements that embrace authors and exercises (we will refer to
            Figure&nbsp;
            <div class="xref e124" linkend="LABEL.vd_wf"></div> throughout this section). XQueries that select necessary data will
            augment our document. The way we describe the VDoc is the subject of the next subsection.
         </div><a name="VDocSpecificationsandSkeletonsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e125" xml:id="LABEL.sec.vds.spec">
            <div class="title e126">VDoc Specifications and Skeletons</div>
            <div class="para e127">
               <div class="emphasis e128" role="ital">VDoc Specification (VDoc Spec)</div> is the most important part of any VDoc. Basically, it is a
               document template with XQuery inclusions and some other auxiliary elements helping
               TNTBase to figure out how to execute a particular XQuery and how to populate query
               results. It must be XML. In Listing&nbsp;
               <div class="xref e129" linkend="LABEL.lst.vd_spec"></div> one can see a simple example of a
               VDoc Spec that is supposed to define a VDoc that would contain thematic lecture exercises
               together with their authors. For the complete RelaxNG&nbsp;[
               <div class="xref e130" linkend="relaxngweb"></div>] schema refer
               to&nbsp;[
               <div class="xref e131" linkend="tntvdskel.url"></div>].
            </div>
            <div class="figure e132" xml:id="LABEL.lst.vd_spec" xreflabel="Example of  a VDoc Spec">
               <div class="title e133">Example of  a VDoc Spec</div>
               <div class="programlisting e134" xml:space="preserve">&lt;tnt:virtualdocument&nbsp;xmlns:tnt=”http://tntbase.mathweb.org/ns”&gt;
                  &nbsp;&nbsp;&lt;tnt:skeleton&nbsp;xml:id=”exercises”&gt;
                  &nbsp;&nbsp;&nbsp;&nbsp;&lt;omdoc&nbsp;xmlns:dc=”http://purl.org/dc/elements/1.1/”&gt;
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;dc:title&gt;Exercises&nbsp;for&nbsp;Computer&nbsp;Science&nbsp;lectures&lt;/dc:title&gt;
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;dc:creator&gt;Michael&nbsp;Kohlhase&lt;/dc:creator&gt;
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;omdoc&gt;
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;dc:title&gt;Acknowledgements&lt;/dc:title&gt;
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;omtext&gt;
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;following&nbsp;individuals&nbsp;have&nbsp;contributed&nbsp;material&nbsp;to&nbsp;this&nbsp;document:
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tnt:xqinclude&nbsp;query=”tnt:collection(’/exercises//*.omdoc’)//dc:creator”&gt;
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tnt:return&gt;&lt;tnt:result/&gt;&lt;/tnt:return&gt;
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tnt:xqinclude&gt;
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/omtext&gt;
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/omdoc&gt;
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;omdoc&gt;
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;dc:title&gt;Exercises&lt;/dc:title&gt;
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tnt:xqinclude&gt;
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tnt:query&nbsp;name=”exercises.xq”/&gt;
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tnt:return&gt;&lt;tnt:result/&gt;&lt;/tnt:return&gt;
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tnt:xqinclude&gt;
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/omdoc&gt;
                  &nbsp;&nbsp;&nbsp;&nbsp;&lt;/omdoc&gt;
                  &nbsp;&nbsp;&lt;/tnt:skeleton&gt;
                  
                  &nbsp;&nbsp;&lt;tnt:query&nbsp;name=”exercises.xq”&gt;
                  &nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;$t&nbsp;in&nbsp;$topics&nbsp;return
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tnt:collection(concat(’/exercises/’,&nbsp;$t,&nbsp;’/*.omdoc’))//exercise[position()&nbsp;le&nbsp;$max]
                  &nbsp;&nbsp;&lt;/tnt:query&gt;
                  
                  &nbsp;&nbsp;&lt;tnt:params&gt;
                  &nbsp;&nbsp;&nbsp;&nbsp;&lt;tnt:param&nbsp;name=”max”&gt;
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tnt:value&gt;10&lt;/tnt:value&gt;
                  &nbsp;&nbsp;&nbsp;&nbsp;&lt;/tnt:param&gt;
                  &nbsp;&nbsp;&nbsp;&nbsp;&lt;tnt:param&nbsp;name&nbsp;=&nbsp;”topics”&gt;
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tnt:value&gt;search&lt;/tnt:value&gt;
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tnt:value&gt;graphs&lt;/tnt:value&gt;
                  &nbsp;&nbsp;&nbsp;&nbsp;&lt;/tnt:param&gt;
                  &nbsp;&nbsp;&lt;/tnt:params&gt;
                  &lt;/tnt:virtualdocument&gt;
                  
               </div>
            </div>
            <div class="para e135">A VDoc Spec consists of a 
               <div class="emphasis e136" role="ital">VDoc Skeleton (VDoc Skel)</div>, number of named queries that are
               referenced from VDoc Skel and arbitrary parameters that are used in XQueries.  Let
               us consider
               these elements in order:
            </div><a name="VDocSkeletonsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e137">
               <div class="title e138">VDoc Skeletons</div>
               <div class="para e139">contain a mixture between any XML nodes and
                  
                  <div class="emphasis e140" role="ital">tnt:xqinclude</div> elements. The latter ones specify a single
                  XQuery query and “the rules” how results of that query will be mixed with other elements
                  in a VDoc. The rules are enclosed into a single 
                  <div class="emphasis e141" role="ital">tnt:return</div>
                  child element that, in turn, contains a mixture of any XML elements with empty
                  
                  <div class="emphasis e142" role="ital">tnt:result</div> elements. In order to understand how VDoc content
                  is produced let us consider the following sequence of actions:
               </div>
               <div class="itemizedlist e143">
                  <div class="listitem e144">
                     <div class="para e145">We take a 
                        <div class="emphasis e146" role="ital">tnt:xqinclude</div> element and obtain an XQuery
                        associated with it
                     </div>
                  </div>
                  <div class="listitem e147">
                     <div class="para e148">We get the results of that query and iterate over them
                        
                     </div>
                  </div>
                  <div class="listitem e149">
                     <div class="para e150">For every result we get children of the 
                        <div class="emphasis e151" role="ital">tnt:return</div>
                        element and substitute any 
                        <div class="emphasis e152" role="ital">tnt:result</div> element with a
                        considered query result
                     </div>
                  </div>
                  <div class="listitem e153">
                     <div class="para e154">We concatenate all children obtained from step 3) in order</div>
                  </div>
                  <div class="listitem e155">
                     <div class="para e156">The result of concatenation replaces the considered
                        
                        <div class="emphasis e157" role="ital">tnt:xqinclude</div> element
                     </div>
                  </div>
                  <div class="listitem e158">
                     <div class="para e159">Repeat steps 1)-5) for all 
                        <div class="emphasis e160" role="ital">tnt:xqinclude</div> elements in a
                        VDoc Spec
                     </div>
                  </div>
               </div>
               <div class="para e161">Although this workflow might seem complicated, the logics behind it are quite intuitive,
                  which is observed in the following example. The part of a VDoc:
               </div>
               <div class="programlisting e162" xml:space="preserve">&lt;tnt:xqinclude&nbsp;query=”tnt:collection(’/exercises//*.omdoc’)//dc:creator/text()”&gt;
                  &nbsp;&nbsp;&lt;tnt:return&gt;&lt;omtext&gt;&lt;tnt:result/&gt;&lt;/omtext&gt;&lt;/tnt:return&gt;
                  &lt;/tnt:xqinclude&gt;
                  
               </div>
               <div class="para e163">assuming for the sake of simplicity that results of the query</div>
               <div class="programlisting e164" xml:space="preserve">tnt:collection(’/exercises//*.omdoc’)//dc:creator/text()
                  
               </div>
               <div class="para e165">are “Paul” and “John”, will be substituted by:</div>
               <div class="programlisting e166" xml:space="preserve">&lt;omtext&gt;Paul&lt;/omtext&gt;
                  &lt;omtext&gt;John&lt;/omtext&gt;
                  
               </div>
               <div class="para e167">VDocs allow an arbitrary number of 
                  <div class="emphasis e168" role="ital">tnt:xqinclude</div> elements in
                  the VDoc Skel (not nested, though) with different XQueries. XQueries can be defined
                  in 4
                  ways: in the attribute, in the child element as text, as a reference to outside defined
                  queries (see next bullet) and as a reference to another file in a TNTBase repository
                  that contains the implied query.  It is worth mentioning that VDoc Specs may contain
                  only
                  references to skeletons in other VDoc Specs and differ just in queries or parameters.
                  This
                  approach becomes very handy when we want to leverage from the same skeleton but tweak
                  another parts of a VDoc Spec, i.e. queries or parameters (see below for examples).
               </div>
            </div><a name="QueriesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e169">
               <div class="title e170">Queries</div>
               <div class="para e171">Apart from being defined in
                  
                  <div class="emphasis e172" role="ital">tnt:xqinclude</div> elements, XQueries can also be described in
                  separate 
                  <div class="emphasis e173" role="ital">tnt:query</div> elements, again as a text or as a
                  reference to another file in the repository. Query should contain a name that serves
                  as
                  a link point from a VDoc Skel. There are no constraints on a query: it may reference
                  
                  <div class="emphasis e174" role="ital">older</div> revisions of documents (that justifies a temporal aspect of TNTBase),
                  
                  <div class="emphasis e175" role="ital">other VDocs</div> or 
                  <div class="emphasis e176" role="ital">auxiliary information</div> associated with documents, e.g. RDF
                  (see&nbsp;[
                  <div class="xref e177" linkend="zhokohrab.tntbasef10"></div>] for more details).  Such “external” query definition
                  may be handy when we want to 
                  <div class="emphasis e178" role="ital">override</div> the queries for a particular VDoc Skel. Getting
                  back to our example, assume that we want to embed only statements of assignments in
                  our
                  VDoc preserving the common structure. We do not need to modify a VDoc Skel. Instead
                  we create
                  a new VDoc Spec that references the existing one with an overriding XQuery:
               </div>
               <div class="programlisting e179" xml:space="preserve">&lt;tnt:virtualdocument&nbsp;xmlns:tnt=”http://tntbase.mathweb.org/ns”&gt;
                  &nbsp;&nbsp;&lt;tnt:skeleton&nbsp;href=”/basic-spec.xml”/&gt;
                  &nbsp;&nbsp;&lt;tnt:query&nbsp;name=”exercises.xq”&gt;
                  &nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;$t&nbsp;in&nbsp;$topics&nbsp;return
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tnt:collection(concat(’/exercises/’,&nbsp;$t,&nbsp;’/*.omdoc’))//exercise/statement
                  &nbsp;&nbsp;&lt;/tnt:query&gt;
                  &lt;/tnt:virtualdocument&gt;
                  
               </div>
               <div class="para e180">Here we assume that the full-fledged VDoc Skel can be found in the VDoc Spec under
                  the path
                  
                  <div class="emphasis e181" role="ital">/basic-spec.xml</div>. Thus we can 
                  <div class="emphasis e182" role="ital">”inherit”</div> VDoc Skels recursively and override
                  XQueries in any combination that comprised quite a flexible mechanism to reuse existing
                  VDoc Skels and queries and override only parts when needed. Also it is possible to
                  create
                  VDoc Specs whose skeletons reference queries that are not present in the same VDoc
                  Spec. This
                  feature is comparable to e.g. Java abstract classes, i.e. such a VDoc Spec cannot
                  be used as such,
                  but can be referenced from another VDoc Specs that defines the missing queries.
               </div>
            </div><a name="ParametersANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e183">
               <div class="title e184">Parameters</div>
               <div class="para e185">XQueries can reference variables that are not defined in the
                  current context. Those can be externally defined in the
                  
                  <div class="emphasis e186" role="ital">tnt:param</div> elements outside the
                  query. This approach separates logics
                  from the input. Similarly to queries, parameters can also be overridden or be absent
                  in a
                  particular VDoc Spec. In the latter case, VDoc Specs that inherit the current VDoc
                  Spec should define
                  absent parameters. In our example in Listing&nbsp;
                  <div class="xref e187" linkend="LABEL.lst.vd_spec"></div> we are using two
                  parameters: a list of topics for which we retrieve exercises
                  (
                  <div class="emphasis e188" role="ital">$topics</div>) and a maximum number of returned exercises for
                  each topic (
                  <div class="emphasis e189" role="ital">$max</div>). Such a mechanism considerably improves
                  reusability and flexibility of VDocs.
               </div>
               <div class="para e190">In this subsection we described the 
                  <div class="emphasis e191" role="ital">VDoc Specs</div> — means to define the structure of
                  VDocs. In Figure&nbsp;
                  <div class="xref e192" linkend="LABEL.vd_wf"></div> a VDoc Spec is denoted as the left bottom picture in the life cycle
                  of VDocs. But how do we 
                  <div class="emphasis e193" role="ital">handle</div> and 
                  <div class="emphasis e194" role="ital">consume</div> VDoc content?
               </div>
            </div>
         </div><a name="VDocsasTNTBaseFSEntitiesandTheirMaterializingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e195" xml:id="LABEL.sec.vds.wrappers">
            <div class="title e196">VDocs as TNTBase FS Entities and Their Materializing</div>
            <div class="para e197">In order to make VDocs as a part of a TNTBase file system and expose them to users,
               one has
               to utilize the RESTful API of TNTBase&nbsp;[
               <div class="xref e198" linkend="zholudev.tntbaserestful.web"></div>]. When creating
               a VDoc, a user has to provide a path and a name of a VDoc, a VDoc Spec and its
               revision which a VDoc will be
               linked to and, optionally, a set of parameters, analogously to those that a VDoc Spec
               has
               (thus, one can override VDoc Spec parameters or define new ones). Note that it is
               possible to
               associate a VDoc with a VDoc Spec of a 
               <div class="emphasis e199" role="ital">particular revision</div>, not only with the 
               <div class="emphasis e200" role="ital">HEAD</div>
               revision. Parameters associated with VDoc file system entities make VDoc Spec even
               more
               reusable. When retrieving content of a VDoc (i.e. the expanded version of a VDoc Spec),
               a user
               might also provide parameters that will override those defined in a
               VDoc Spec and in a VDoc
               itself. It might be very useful for dynamic alternation of a VDoc or during debugging.
               In
               Figure&nbsp;
               <div class="xref e201" linkend="LABEL.vd_wf"></div> the content of a VDoc is presented in the second picture at the
               bottom. We see how data are aggregated and mashed up with the static
               parts of a VDoc Spec.
            </div>
            <div class="para e202">Currently every time VDoc content is requested, TNTBase executes every query included
               into a VDoc Spec and aggregates the results. 
               For certain VDoc Specs it may be time-consuming. Furthermore, generated on the fly
               VDoc content is not accessible via xSVN working copy. Therefore a user may want to
               
               
               <div class="emphasis e203" role="ital">fix</div> the content and make it versioned. In our example when a user is satisfied with exercises
               list he got through a VDoc, he may desire to make it persistent by putting it into
               a
               repository file under a certain path. To satisfy these demands TNTBase RESTful interface
               provides a VDoc feature that turns
               the content of a VDoc into a regular file in a repository. We call such a process
               as 
               <div class="emphasis e204" role="ital">VDoc materializing</div>. If there is already a document
               under a provided path, the materializing process results in a new revision of that
               file. Thus we make VDocs content accessible via SVN client and track the revision
               history.
            </div>
         </div><a name="QueryingVDocsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e205" xml:id="LABEL.sec.vds.query">
            <div class="title e206">Querying VDocs</div>
            <div class="para e207">The contents of a VDoc can be addressed in a query via the TNTBase XQuery extension
               function 
               <div class="emphasis e208" role="ital">tnt:vdoc($path as xs:string)</div>, where
               
               <div class="emphasis e209" role="ital">$path</div> is a path of a VDoc in a TNTBase repository. Thus
               one may combine querying of usual repository files together with multiple VDocs. It
               is
               also possible to retrieve just the expanded version of a VDoc Spec (not the content
               of a VDoc
               which might be different due to additionally defined parameters). The XQuery extension
               function looks similar - 
               <div class="emphasis e210" role="ital">tnt:vd-spec($path as xs:string)</div>,
               but instead of a VDoc path, we provide a path to a VDoc Spec. As an example, assume
               that we
               want to get a number of authors that contributed to exercises in a VDoc. The query
               will be
               simple:
            </div>
            <div class="programlisting e211" xml:space="preserve">count(tnt:vdoc(’/path/to/vd’)//dc:author)
               
            </div>
         </div><a name="VDocEditingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e212" xml:id="LABEL.sec.vds.edit">
            <div class="title e213">VDoc Editing</div>
            <div class="para e214">One of the strongest features of VDocs is that they can be edited and 
               <div class="emphasis e215" role="ital">committed</div> to
               TNTBase via the RESTful interface. Changed parts of a VDoc that came from files in
               a
               repository will be transparently propagated back to the sources with repository history
               preservation, i.e. a new revision will appear in TNTBase.  In Figure&nbsp;
               <div class="xref e216" linkend="LABEL.vd_wf"></div> on the
               bottom right picture we can see the final phase of a VDoc workflow: editing and submitting
               it back -- the modified parts (marked with red) are populated back to their “home”.
               All
               changes are performed in a single xSVN transaction and only those files will be part
               of it
               that were implicitly affected by VDoc editing.
            </div>
            <div class="para e217">In a VDoc we distinguish 
               <div class="emphasis e218" role="ital">static</div> parts (i.e. those that come from the VDoc Spec) from
               
               <div class="emphasis e219" role="ital">generated</div> ones (i.e. those parts that are results of a particular VDoc Spec query). Currently,
               static parts are not editable in a VDoc – TNTBase will abort a commit,
               if they have been changed. However, static parts can be modified by changing VDoc
               Spec file
               directly in a repository.  From the generated part, only the XML elements that come
               from the
               repository are 
               <div class="emphasis e220" role="ital">editable</div>; TNTBase annotates them with
               
               <div class="emphasis e221" role="ital">tnt:doc</div> and 
               <div class="emphasis e222" role="ital">tnt:xpath</div>
               attributes that cache information about the element source needed for the commit.
               In our
               exercise example an editable part might look like:
            </div>
            <div class="programlisting e223" xml:space="preserve">&lt;exercise&nbsp;topic=”algebra”&nbsp;tnt:xpath=”/omdoc[1]/theory[3]/exercise[2]”
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tnt:doc=”/exercises/algebra/isomorphic-sets.omdoc”&gt;
               ...                
               &lt;/exercise&gt;
               ...
               &lt;exercise&nbsp;topic=”algebra”&nbsp;tnt:xpath=”/omdoc[1]/theory[2]/exercise[1]”
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tnt:doc=”/exercises/algebra/relations.omdoc”&gt;         
               &nbsp;&nbsp;
               ...
               &lt;/exercise&gt;
               
            </div>
            <div class="para e224">A user may add attributes, text, comments, new elements or delete the old ones, but
               he is
               
               <div class="emphasis e225" role="ital">not</div> allowed to modify 
               <div class="emphasis e226" role="ital">tnt:doc</div> and
               
               <div class="emphasis e227" role="ital">tnt:xpath</div> attributes, otherwise TNTBase will abort
               committing.
            </div>
            <div class="para e228">So far we have considered only 
               <div class="emphasis e229" role="ital">editable</div> parts of the generated part.
               There could be, however, non-editable, generated nodes (e.g. dates or
               average of some values), which we
               call 
               <div class="emphasis e230" role="ital">constructed</div>. In some cases, we can even partially modify these and
               propagate changes back to a repository: If XQueries
               wrap some of DB XML elements into some other elements, making these
               constructed. For example, the query associated with some
               
               <div class="emphasis e231" role="ital">tnt:xqinclude</div> element could be:
            </div>
            <div class="programlisting e232" xml:space="preserve">&lt;author&gt;{tnt:collection(’/exercises//*.omdoc’)//dc:creator}&lt;/author&gt;
               
            </div>
            <div class="para e233">So the results might be:</div>
            <div class="programlisting e234" xml:space="preserve">&lt;author&gt;
               &nbsp;&lt;dc:creator&gt;Paul&lt;/dc:creator&gt;
               &nbsp;&lt;dc:creator&gt;John&lt;/dc:creator&gt;
               &lt;/author&gt;
               
            </div>
            <div class="para e235">In such cases we can make these elements editable via the XQuery 
               <div class="emphasis e236" role="ital">wrapper</div> function
               
               <div class="emphasis e237" role="ital">tnt:make-editable</div> supplied by TNTBase for this purpose. This function adds
               
               <div class="emphasis e238" role="ital">tnt:doc</div> and 
               <div class="emphasis e239" role="ital">tnt:xpath</div>
               attributes to the wrapped elements if possible (i.e. if the input sequence of elements
               are
               nodes in DB XML) to mark them as editable. So in our example the query should really
               be:
            </div>
            <div class="programlisting e240" xml:space="preserve">&lt;author&gt;{tnt:make-editable(tnt:collection(’/exercises//*.omdoc’)//dc:creator)}&lt;/author&gt;
               
            </div>
            <div class="para e241">This leads to the following result which parts are editable:</div>
            <div class="programlisting e242" xml:space="preserve">&lt;author&gt;
               &nbsp;&lt;dc:creator&nbsp;tnt:doc=’…’&nbsp;tnt:xpath=’…’&gt;Paul&lt;/dc:creator&gt;
               &nbsp;&lt;dc:creator&nbsp;tnt:doc=’…’&nbsp;tnt:xpath=’…’&gt;John&lt;/dc:creator&gt;
               &lt;/author&gt;
               
            </div>
            <div class="para e243">The editing approach has a number of natural limitations:</div>
            <div class="itemizedlist e244">
               <div class="listitem e245">
                  <div class="para e246">If VDoc content contains multiple results that are the same document node in a
                     repository, then TNTBase will not allow committing this VDoc either because in this
                     case
                     it is not clear which of modified nodes should be propagated to a source document.
                     In
                     future, this behavior might be changed so that e.g. the first or the last change of
                     the
                     same node wins and is sent to a repository.
                  </div>
               </div>
               <div class="listitem e247">
                  <div class="para e248">If VDoc dynamic parts came from older revisions of repository files, then such parts
                     can not be editable as well because once revision is committed to a repository it
                     becomes
                     unchangeable.
                  </div>
               </div>
               <div class="listitem e249">
                  <div class="para e250">From a dynamic part only XML elements
                     <div class="popupBox e251">
                        <div class="popupLabel" onmouseover="$('#d1e506').show('1000');" onmouseout="$('#d1e506').hide('1000');">[ footnote ]</div>
                        <div id="d1e506" style="display: none;">
                           <div class="footnote">
                              <div class="para e252">i.e. that are of
                                 XML Schema type 
                                 <div class="emphasis e253" role="ital">xs:element</div>
                              </div>
                           </div>
                        </div>
                     </div> are editable.  This limitation stems from the
                     fact that e.g. text may be produced by concatenation of multiple strings inside some
                     element and TNTBase will not be able to determine how to propagate
                     changes back and there is no place to put source
                     information inside a VDoc (the latter holds for all remained types of XML nodes
                     as well). However, it
                     is possible to work around this limitation by embedding XQueries
                     that
                     return those nodes together with their parent element.
                  </div>
               </div>
            </div>
            <div class="para e254">Last but not least, TNTBase follows the “update-modify-commit-merge” cycle from the
               underlying version control system in this process, so if another user modified repository
               contents while we were editing a VDoc, submitting of the latter will fail, since our
               VDoc is
               “out-of-date” and we have to get the VDoc content again and merge our changes. This
               mechanism guarantees that we will not overwrite somebody else’s changes.
            </div>
         </div><a name="VDocSchemaValidationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e255" xml:id="LABEL.sec.vds.schema">
            <div class="title e256">VDoc Schema Validation</div>
            <div class="para e257">The obvious well-formedness constraints for a VDoc Spec can easily be expressed in
               a RelaxNG
               schema, which we supply as&nbsp;[
               <div class="xref e258" linkend="tntvdskel.url"></div>].  But schema-validity of the VDoc Spec does not
               ensure validity of the resulting VDoc because it
               does not take the constraints of the target format into account. Fortunately, we can
               easily integrate the VDoc Spec schema with the target schema, if the latter meets
               (or is
               extended to meet) some modularity requirements. As an example we provide such a
               combination for OMDoc language in Listing&nbsp;
               <div class="xref e259" linkend="LABEL.lst.ovd.rnc"></div>.
            </div>
            <div class="figure e260" xml:id="LABEL.lst.ovd.rnc" xreflabel="A RelaxNG Schema for Virtual OMDoc Specifications">
               <div class="title e261">A RelaxNG Schema for Virtual OMDoc Specifications</div>
               <div class="programlisting e262" xml:space="preserve">include&nbsp;”tnt-vd-spec.rnc”&nbsp;{
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;skeleton.model&nbsp;&nbsp;=&nbsp;grammar&nbsp;{include&nbsp;”omdoc/omdoc.rnc”
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ss&nbsp;|=&nbsp;parent&nbsp;xq?}}
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return.internal.el&nbsp;=&nbsp;grammar&nbsp;{include&nbsp;”omdoc/omdoc.rnc”
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{start=&nbsp;omdoc.class|CMP|FMP
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss&nbsp;|=&nbsp;parent&nbsp;result.el}}}
                  
                  
               </div>
            </div>
            <div class="para e263">Here we made use of the fact that the OMDoc schema has a hook (the 
               <div class="emphasis e264" role="ital">ss</div>
               schema macro) that allows replacement of elements in the declarations: all element
               declarations are of the form
            </div>
            <div class="programlisting e265" xml:space="preserve">CMP&nbsp;=&nbsp;(ss&nbsp;|&nbsp;element&nbsp;CMP&nbsp;{CMP.attribs&nbsp;&amp;&nbsp;CMP.model})
               
            </div>
            <div class="para e266">In this situation, we only had to replace the content and attribute model of the
               
               <div class="emphasis e267" role="ital">tnt:skeleton</div> element
               <div class="popupBox e268">
                  <div class="popupLabel" onmouseover="$('#d1e540').show('1000');" onmouseout="$('#d1e540').hide('1000');">[ footnote ]</div>
                  <div id="d1e540" style="display: none;">
                     <div class="footnote">
                        <div class="para e269">which allowed arbitrary
                           elements that contain 
                           <div class="emphasis e270" role="ital">tnt:xqinclude</div> queries
                        </div>
                     </div>
                  </div>
               </div> with the
               OMDoc document model, which is upgraded to allow an
               
               <div class="emphasis e271" role="ital">tnt:xqinclude</div> element in place of all
               “
               <div class="emphasis e272" role="ital">ss</div>-replaceable” elements. The content model of the
               
               <div class="emphasis e273" role="ital">tnt:return</div> element is instantiated to the model of OMDoc “
               <div class="emphasis e274" role="ital">ss</div>-replaceable” fragments, updated to allow
               
               <div class="emphasis e275" role="ital">tnt:result</div> element in place of
               “
               <div class="emphasis e276" role="ital">ss</div>-replaceable” elements.  When VDoc format-aware schema is ready, we can
               associate it with a VDoc Spec via 
               <div class="emphasis e277" role="ital">tntbase:validate</div> xSVN property (details
               in&nbsp;[
               <div class="xref e278" linkend="zhokohrab.tntbasef10"></div>]), and thus ensure that TNTBase allows committing only
               those VDoc Specs which would always produce content that is valid against our format
               schema.
            </div>
         </div><a name="ImplementationDetailsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e279" xml:id="LABEL.sec.vds.implementation">
            <div class="title e280">Implementation Details</div>
            <div class="para e281">VDocs are realized
               <div class="popupBox e282">
                  <div class="popupLabel" onmouseover="$('#d1e576').show('1000');" onmouseout="$('#d1e576').hide('1000');">[ footnote ]</div>
                  <div id="d1e576" style="display: none;">
                     <div class="footnote">
                        <div class="para e283">Due to some problems in DB XML concerning multiple imported
                           modules or support of XQuery external functions written in different languages, VDoc
                           functionality cannot yet be fully integrated, we expect to have a fix for this by
                           the
                           conference.
                        </div>
                     </div>
                  </div>
               </div> in XQuery with help of XQuery external functions written in Java. External
               function are used, for instance, for dynamic query execution from another XQuery (for
               expansion of a VDoc Spec), getting the revision information from a repository (to
               control that
               no other revisions have been committed while editing a VDoc) or committing changes
               under
               certain path (to propagate changes to original files one edited VDoc has been submitted
               back).  In order to support VDoc editing workflow, there is a simple XQuery implementation
               of XML differencing, that
            </div>
            <div class="itemizedlist e284">
               <div class="listitem e285">
                  <div class="para e286">controls that VDoc static parts were not modified,</div>
               </div>
               <div class="listitem e287">
                  <div class="para e288">controls that 
                     <div class="emphasis e289" role="ital">tnt:doc</div> and
                     
                     <div class="emphasis e290" role="ital">tnt:path</div> attributes of editable parts were not modified,
                  </div>
               </div>
               <div class="listitem e291">
                  <div class="para e292">aggregates information about changed editable parts and groups them by source file,</div>
               </div>
               <div class="listitem e293">
                  <div class="para e294">checks that there are no more than one editable part that corresponds to the same
                     node in the same XML document.
                     
                  </div>
               </div>
            </div>
         </div>
      </div><a name="UseCasesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e295" xml:id="LABEL.sec.usecases">
         <div class="title e296">Use Cases</div>
         <div class="para e297">In this section we discuss four real-world use cases of the VDoc technology. The discussion
            here is complemented with an evolving
            <div class="popupBox e298">
               <div class="popupLabel" onmouseover="$('#d1e604').show('1000');" onmouseout="$('#d1e604').hide('1000');">[ footnote ]</div>
               <div id="d1e604" style="display: none;">
                  <div class="footnote">
                     <div class="para e299">At the time of the submission, the sandbox
                        is not fully operational yet, but we expect it to be the base of our system demos
                        at
                        the conference
                     </div>
                  </div>
               </div>
            </div> TNTBase sandbox installation&nbsp;[
            <div class="xref e300" linkend="tntvdusecases.url"></div>] that supplies
            Relax NG schemas and shows VDoc queries and VDoc Specs of our use cases in action.
         </div><a name="AutomatedExamGenerationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e301" xml:id="LABEL.sec.usecases.exams">
            <div class="title e302">Automated Exam Generation</div>
            <div class="para e303">This is a dogfood use case from our academic practice, and is (partially) used in
               day-to-day operation: The second author teaches a first-year, two-semester Introduction
               to
               Computer Science a Jacobs university and – over the last six years – has accumulated
               a
               collection of about 1000 homework, quiz, and exam problems encoded into the XML-based
               OMDoc format&nbsp;[
               <div class="xref e304" linkend="url.omdocspec"></div>]. For the courses we need to prepare regular four
               exams, four “grand tutorial test exams” and two make-up exams per year. While the
               homework problems are typically new (and add to the corpus of well-tested problems),
               we
               assemble the exams from it semi-automatically with a VDoc Spec that generates random
               exam sheet
               based on the input list of topics we intend to cover throughout an exam.
            </div>
            <div class="para e305">There are two kind of proper exams: midterms and finals. Midterms usually are meant
               to be
               for 1 hour, although sometimes it takes 75 minutes or so, whereas finals are designed
               for
               2 hours. Thus we also provide an exam duration as an input parameter for our 
               <div class="emphasis e306" role="ital">exam
                  VDoc
               </div>. Changing only this parameter together with the topic list allows us to get
               different exam sheets that do not exceed the certain time and cover desired topics.
               All
               necessary information is encoded into the problems as RDFa metadata annotations. Our
               XQuery for a VDoc Spec takes care about adjusting the timing closely to the provided
               limit. When VDoc content is generated, it can be rendered by utilizing XSLTs and developed
               in our group JOMDoc library&nbsp;[
               <div class="xref e307" linkend="jomdoc.web"></div>] for rendering
               MathML[
               <div class="xref e308" linkend="w3c.web.mathml3"></div>]. Everything is embedded into TNTBase, and once an exam VDoc
               is installed it is a matter of one click in the TNTBase web interface to get the unique
               human-readable exam sheet for the students.
            </div>
            <div class="para e309">VDoc Editing facilities also find an application in our use case. Before giving generated
               exam to students we test it on our teaching assistants that may express some of the
               comments or suggestions how to improve particular problems. Then we edit the contents
               of
               an exam VDoc and commit it back – all modifications are automatically patched into
               original
               XML sources: easily and painlessly. If one does not like a particular problem to be
               included into exam, we can adjust a VDoc parameter that excludes them from the exam.
            </div>
            <div class="para e310">The biggest advantage of current exam generation approach is that we write a VDoc
               Spec once and
               reuse it next semester by simply adjusting few parameters to a VDoc. When one is satisfied
               with the exam presented, it can be materialized and saved in a repository as a normal
               file
               that can be referenced in future to keep track how students performed on different
               assignment and figure out what their weaknesses are.
            </div>
            <div class="para e311">Although a presented approach already meets our requirements, there are some issues
               that
               could be improved. For instance, we might want to take total exam difficulty into
               account
               to generate exams that do not exceed a certain duration and that have difficulty in
               a
               certain range (again difficulty information is embedded into problems XML). That will
               lead
               to a more complicated queries for a VDoc Spec, but is still feasible. Apart from generating
               exams, this use cases might be used by students that are willing to sharpen their
               knowledge: they could generate practice sheets starting from easy tasks and end up
               with
               the complex ones. Some parameters in e.g. cookies may keep track of what exercises
               already
               appeared in the practice sheet, and a VDoc will never show them again. It could easily
               be
               done by providing dynamic parameters to a VDoc retrieval method as was described in
               the
               previous section.
            </div>
         </div><a name="MultipleVersionsofDocumentsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e312" xml:id="LABEL.sec.usecases.branches">
            <div class="title e313">Multiple Versions of Documents</div>
            <div class="para e314">In most scenarios with long-lived documents, we encounter the problem of document
               versions. Let us consider the case of W3C specifications like XQuery 1.0/1.1, XPath
               1/2,
               XML 1.0/1.1., or even MathML1.0/1.0.1/2.0/2.0(2e)/3.0. They are encoded in XML format
               XMLSpec&nbsp;[
               <div class="xref e315" linkend="xmlspec.url"></div>], so TNTBase and VDocs apply. Usually some parts of specification
               remained the same, while other parts change between the versions, and it is an important
               task to track the differences. For this use case we are experimenting with XML 1.0
               and 1.1
               specifications to supply the user with a view that will show only the relevant changes
               in
               the formal parts of specification branches.  It is rather simple to provide an 
               <div class="emphasis e316" role="ital">Diff
                  VDoc
               </div> via an XQuery that summarize changes in formal parts (the rules of the XML grammar
               are marked up by special elements in XMLSpec), ignores document order (grammars are
               sets,
               not lists of rules), and presents them as a document XMLSpec documents upgraded with
               difference alternatives. Note that our XQuery-based XML-diff comes in handy here.
               This VDoc
               gives a user better understanding in which direction the development is going and
               what
               changes are intended ones and which are made by mistake. Our Diff VDoc is also editable
               that
               allows a user to fix obvious bugs right on spot, without navigating to the source
               files. Once Diff VDoc is settled in TNTBase it can be reused to filter only relevant
               differences as well as transparently editing them, all in one place.  Currently W3C
               stores
               specifications in a CVS repository, but does not make use of its differencing facilities
               for version tracking as diff is text-based and outputs even less and least relevant
               differences.
            </div>
            <div class="para e317">Note that the Diff VDoc encapsulates a particular notion of relevance in the filtering
               part,
               which may need to be explained in a document preamble. Thus the representational form
               of a
               VDoc which mixes document parts and queries is beneficial. Moreover, there can be
               multiple
               Diff VDocs for tracking (and editing) various aspects of the differences in the
               specifications. Such Diff VDocs may even take over the role of conflict editors we
               currently
               have in version control aware IDEs.
            </div>
         </div><a name="ManagingDocumentCollectionsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e318" xml:id="LABEL.sec.usecases.writing">
            <div class="title e319">Managing Document Collections</div>
            <div class="para e320">The exam generation use case described above can be seen as a special case of managing
               (here extracting custom documents from) a collection of primary (
               <div class="emphasis e321" role="ital">content</div>)
               documents and creating secondary documents from them that aggregate parts of the
               content. These secondary documents can either be used for communication to the outside
               (
               <div class="emphasis e322" role="ital">payload</div> documents) or for management of the document collections. In this
               terminology, the exams above can be seen as the payload documents derived from the
               content
               documents in the problem collection. That is where VDocs may naturally come into play
               as we
               have seen above.
               
            </div>
            <div class="para e323">A very simple application of VDocs in payload documents are queries for a table of
               contents
               (collecting all sectioning elements in a narrative document), the references (collecting
               all citations, sorting them, and completing them with information from a bibliographic
               database), or an index. In DocBook&nbsp;[
               <div class="xref e324" linkend="walmue.dtdg2008"></div>] these aggregated document parts
               generated by XSLT stylesheets in the presentation phase, which may incur performance
               bottlenecks in practice, since this is not supported by indexing and caching. Moreover,
               VDocs make separate conceptually the issue of auto-aggregation and presentation, which
               allows to support workflows like previews/editing of aggregated document parts and
               materialization (e.g. of branches and tags) for archiving.
            </div>
            <div class="para e325">Another simple application of VDocs in technical payload documents is in XML-based
               literate
               programming&nbsp;[
               <div class="xref e326" linkend="dk.lp"></div>], where program text is intermingled with its documentation and
               explanation in a single document. Here a VDoc can be used to extract the program text
               (with
               comments that cross-link to) from the literate source. As a concrete XML-based example
               take the XMLSpec-based source of the MathML3 Recommendation&nbsp;[
               <div class="xref e327" linkend="carlisleed.mathml3"></div>] from
               which we generate the MathML3 RelaxNG Schema. A VDoc would have considerably simplified
               this
               process.
            </div>
            <div class="para e328">We have already seen Diff VDocs as examples of management VDocs for version management
               in the
               last section. But VDocs can also support proofreading, a very important task in the
               document
               life cycle. Often one wants to proofread special aspects of a document, e.g. whether
               certain technical terms are used consistently. For this we can quickly specify these
               terms
               as parameter to an XQuery that assembles all paragraphs that contain them. Then we
               can
               proofread (and edit) the text passages, commit them back to the collection, and move
               on to
               other proofreading tasks.
            </div>
         </div><a name="RefactoringOntologiesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e329" xml:id="LABEL.sec.usecases.ontologies">
            <div class="title e330">Refactoring Ontologies</div>
            <div class="para e331">Finally, VDocs can be used for refactoring OWL&nbsp;[
               <div class="xref e332" linkend="w3c04.owl-guide"></div>] Ontologies that are
               written in XML Syntax, e.g. OWL 2 XML&nbsp;[
               <div class="xref e333" linkend="w3c.owl2-xml"></div>]. VDocs become very handy when
               making changes to a small subsets of multiple large ontologies. In the first phase
               we can
               preview ontologies changes in a VDoc using XQuery transform functions. In the second
               phase,
               when we are satisfied with results we can materialize a VDoc thus obtaining a refactored
               ontology as a usual document in a repository. Refactorings that can be done using
               VDocs
               include renaming entities, factoring out or merging modules, rewriting axioms, lowering
               expressivity or stripping axiom annotations. For more detailed information concerning
               ontology refactoring using VDocs refer to&nbsp;[
               <div class="xref e334" linkend="lz.owlchangerefactorxmldb10"></div>].
            </div>
         </div>
      </div><a name="Conclusion&amp;FurtherWorkANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e335" xml:id="LABEL.sec.concl">
         <div class="title e336">Conclusion &amp; Further Work</div>
         <div class="para e337">In this paper, we have presented the concept of Virtual Documents and their prototypical
            realization in our TNTBase system. VDocs integrate computational facilities into
            documents like JSP/PHP or TeX/LaTeX, only that VDocs use the versatile and XML-optimized
            XQuery processing as a computational process instead of relational database lookup
            (PHP)
            or general macro expansion in the latter case. We view the integration of computation
            in
            documents as an 
            <div class="emphasis e338" role="ital">enabling technology</div> that explains much of the success and
            usefulness of the respective approaches, and contend that our VDocs are one way of
            introducing this to the XML world. We feel that we have just skimmed the practical
            possibilities induced by VDocs in the use cases discussed in Section&nbsp;
            <div class="xref e339" linkend="LABEL.sec.usecases"></div>.
         </div>
         <div class="para e340">For instance, we envision that VDocs can serve as a basis for news generation that
            are
            tailored to a particular user and keep track of the news that have been read already.
            Thus
            a reader would receive only those topics that are interested for him and has not been
            explored so far. The targeted VDoc would contain an XQuery that takes specific to
            a
            particular user parameters like interested sections or ids of read items. The only
            part
            still missing to realize this is a user model for preferences and explored news, but
            it is
            a separate problem. The important thing that a single VDoc can satisfy needs of multiple
            users at the same time. Consider for instance the following situation: If the content
            collection contains information conceptual dependencies, then we can use VDocs to
            generate
            
            <div class="emphasis e341" role="ital">guided tours</div>&nbsp;[
            <div class="xref e342" linkend="mu-01-a"></div>], i.e. self-contained sub-documents introduce the
            necessary prerequisites of a concept. As VDocs allow to re-use the parametric XQueries
            that
            operationalize e.g. the topological sorting of concept descriptions, populating a
            file
            system with guided tours over a content collection becomes a mechanical exercise.
            In fact,
            we surmise that much of the functionality of advanced e-learning systems like
            ActiveMath&nbsp;[
            <div class="xref e343" linkend="activemathaima03"></div>] can be externalized into VDocs.
         </div>
         <div class="para e344">Note that the viability of virtual documents is intertwined with the targeted document
            formats in an interesting way as our discussion of validation in
            Section&nbsp;
            <div class="xref e345" linkend="LABEL.sec.vds.schema"></div> shows. In&nbsp;[
            <div class="xref e346" linkend="zhokohrab.tntbasef10"></div>] we have begun an
            exploration on a theoretical level; from our practical work reported in this paper
            it
            seems that more theoretical investigations are necessary. Note furthermore that our
            realization of VDocs is not tied to the TNTBase system – even though version management
            can profit from VDocs, it is not a prerequisite; instead of an SVN commit we could
            just as
            well write to an XML database.  In particular, as our implementation is based on XQuery
            in
            its core, it should be possible to port it to other XML databases if they supply a
            notion
            of a file system interface.
         </div>
         <div class="para e347">In our use cases, the ability to re-use XQueries
            <div class="popupBox e348">
               <div class="popupLabel" onmouseover="$('#d1e705').show('1000');" onmouseout="$('#d1e705').hide('1000');">[ footnote ]</div>
               <div id="d1e705" style="display: none;">
                  <div class="footnote">
                     <div class="para e349">which require specialized
                        expertise and therefore constitute a significant investment
                     </div>
                  </div>
               </div>
            </div> for different situations
            and over time has been a crucial ingredient for practical use of VDocs. We therefore
            anticipate that common XQueries will be rolled into extensions
            <div class="popupBox e350">
               <div class="popupLabel" onmouseover="$('#d1e709').show('1000');" onmouseout="$('#d1e709').hide('1000');">[ footnote ]</div>
               <div id="d1e709" style="display: none;">
                  <div class="footnote">
                     <div class="para e351">Think e.g. of
                        
                        <div class="emphasis e352" role="ital">tableofcontents</div>, 
                        <div class="emphasis e353" role="ital">references</div>, or 
                        <div class="emphasis e354" role="ital">index</div> elements that
                        abbreviate respective XQueries.
                     </div>
                  </div>
               </div>
            </div> for document formats much like macro packages in
            TeX/LaTeX and thus will create an avenue for user-driven format extensions that may
            well drive evolution of XML-based formats in the future.
            
         </div>
         <div class="para e355">An enabling technology must of course also have 
            <div class="emphasis e356" role="ital">enabling tools</div>, which we
            want to develop on top of our TNTBase system. One such tool is an editing framework
            for
            VDocs. Note that this is non-trivial, since — like their underlying XML formats —
            VDocs
            need to be presented to a user in a human-oriented format for reading 
            <div class="emphasis e357" role="ital">and
               editing
            </div>. Let us consider XHTML as a presentation format. JavaScript frameworks like
            JOBAD&nbsp;[
            <div class="xref e358" linkend="jobad.web"></div>] could be extended in order to inject JavaScript into XHTML that
            marks up the editable parts of a transformed VDoc with help of auxiliary TNTBase
            attributes (like 
            <div class="emphasis e359" role="ital">tnt:doc</div> and
            
            <div class="emphasis e360" role="ital">tnt:xpath</div>). Special markup will allow that framework to
            figure out what parts of a presentational document correspond to what parts of the
            sources
            from which VDoc content was comprised. The result could be that every “editable” part
            of
            rendered XHTML contains a small button or a link for editing pressing which results
            in
            some popup that shows an editable fragment of an XML document. Pressing submit button
            will modify the original content of a VDoc and commit it back to TNTBase. XML sources
            will be transparently patched that will lead to an updated XHTML version of a considered
            VDoc. Such an approach will allow a typical user to understand better the meaning
            of a VDoc
            (with help of human-oriented presentations) as well as provide interactive means for
            utilizing the concept of VDoc editing.
         </div>
      </div><a name="ReferencesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e361">
         <div class="title e362">References</div>
         <div class="bibliomixed e363" xml:id="carlisleed.mathml3" xreflabel="ABC+09">
            Ron Ausbrooks, Stephen Buswell, David Carlisle, Giorgi Chavchanidze,
            Stéphane Dalmas, Stan Devitt, Angel Diaz, Sam Dooley, Roger Hunter,
            Patrick Ion, Michael Kohlhase, Azzeddine Lazrek, Paul Libbrecht, Bruce
            Miller, Robert Miner, Murray Sargent, Bruce Smith, Neil Soiffer, Robert
            Sutor, and Stephen Watt.
            Mathematical Markup Language (MathML) version 3.0.
            W3C Candidate Recommendation of 15 December 2009, World Wide Web
            Consortium, 2009.
            
         </div>
         <div class="bibliomixed e364" xml:id="w3c.xquery10" xreflabel="BCF+07">
            Scott Boag, Don Chamberlin, Mary&nbsp;F. Fernández, Daniela Florescu, Jonathan
            Robie, and Jérôme Siméon.
            XQuery: An XML Query Language.
            W3C recommendation, World Wide Web Consortium (W3C), January
            2007.
            available at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e365" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xquery/</div>.
            
         </div>
         <div class="bibliomixed e366" xml:id="berkeleydb.web" xreflabel="Ber09a">Berkeley DB.
            available at
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e367" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.oracle.com/technology/products/berkeley-db/index.html</div>, seen
            January 2009.
            
         </div>
         <div class="bibliomixed e368" xml:id="berkeleydbxml.web" xreflabel="Ber09b">
            Berkeley DB XML.
            available at
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e369" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.oracle.com/database/berkeley-db/xml/index.html</div>, seen January
            2009.
            
         </div>
         <div class="bibliomixed e370" xml:id="w3c.xquery-update" xreflabel="CDF+08">
            Don Chamberlin, Michael Dyck, Daniela Florescu, Jim Melton, Jonathan Robie, and
            Jérôme Siméon.
            XQUpdate: XQuery Update Facility 1.0.
            W3C Candidate Recommendation, World Wide Web Consortium (W3C),
            seen February 2008.
            
         </div>
         <div class="bibliomixed e371" xml:id="dklrz.pubmathlectnotlinkeddata10" xreflabel="DKL+10">
            Catalin David, Michael Kohlhase, Christoph Lange, Florian Rabe, Nikita
            Zhiltsov, and Vyacheslav Zholudev.
            Publishing math lecture notes as linked data.
            In Lora Aroyo, Grigoris Antoniou, Eero Hyvönen, Annette ten
            Teije, Heiner Stuckenschmidt, Liliana Cabral, and Tania Tudorache, editors,
            
            <div class="emphasis e372" role="ital">ESWC</div>, number 6089 in Lecture Notes in Computer Science, pages 370–375.
            Springer, June 2010. doi: 
            <div class="biblioid doi e373">10.1007/978-3-642-13489-0_26</div>.
            
         </div>
         <div class="bibliomixed e374" xml:id="jobad.web" xreflabel="JOB08">
            JOBAD framework – JavaScript API for OMDoc-based active documents.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e375" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://jomdoc.omdoc.org/wiki/JOBAD</div>, 2008.
            
         </div>
         <div class="bibliomixed e376" xml:id="jomdoc.web" xreflabel="JOM10">
            JOMDoc project — Java library for OMDoc documents.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e377" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://jomdoc.omdoc.org</div>, 2010.
            seen Feb.
            
         </div>
         <div class="bibliomixed e378" xml:id="jsr311.web" xreflabel="JSR09">
            JSR 311: JAX-RS: The Java API for RESTful Web Services, seen April 2009.
            available at
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e379" xlink:actuate="onRequest" xlink:href="https://jsr311.dev.java.net/nonav/releases/1.0/index.html" xlink:show="new" xlink:type="simple">https://jsr311.dev.java.net/nonav/releases/1.0/index.html</div>.
            
         </div>
         <div class="bibliomixed e380" xml:id="dk.lp" xreflabel="Knu92">
            Donald&nbsp;E. Knuth.
            
            <div class="emphasis e381" role="ital">Literate Programming</div>.
            The University of Chicago Press, 1992.
            
         </div>
         <div class="bibliomixed e382" xml:id="url.omdocspec" xreflabel="Koh">
            Michael Kohlhase.
            OMDoc: An open markup format for mathematical documents
            (latest released version).
            Specification, 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e383" xlink:actuate="onRequest" xlink:href="http://www.omdoc.org/pubs/spec.pdf" xlink:show="new" xlink:type="simple">http://www.omdoc.org/pubs/spec.pdf</div>.
            
         </div>
         <div class="bibliomixed e384" xml:id="kohlhase.omdoc1.6spec" xreflabel="Koh10">
            Michael Kohlhase.
            An open markup format for mathematical documents OMDoc [version
            1.6 (pre-2.0)].
            Draft Specification, 2010.
            
         </div>
         <div class="bibliomixed e385" xml:id="latin.url" xreflabel="LAT">
            Latin: Logic atlas and integrator.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e386" xlink:actuate="onRequest" xlink:href="http://trac.omdoc.org/latin/" xlink:show="new" xlink:type="simple">http://trac.omdoc.org/latin/</div>.
            
         </div>
         <div class="bibliomixed e387" xml:id="lz.owlchangerefactorxmldb10" xreflabel="LZ10">
            Christoph Lange and Vyacheslav Zholudev.
            Previewing OWL changes and refactorings using a flexible XML
            database.
            In Mathieu d’Aquin, Alexander García&nbsp;Castro, Christoph Lange, and
            Kim Viljanen, editors, 
            <div class="emphasis e388" role="ital">1st Workshop on Ontology
               Repositories and Editors
            </div>, number 596 in CEUR Workshop Proceedings,
            Hersonissos, Greece, May 2010.
            
         </div>
         <div class="bibliomixed e389" xml:id="activemathaima03" xreflabel="MAF+03">
            E.&nbsp;Melis, J.&nbsp;Buedenbender&nbsp;E. Andres, A.&nbsp;Frischauf, G.&nbsp;Goguadse, P.&nbsp;Libbrecht,
            M.&nbsp;Pollet, and C.&nbsp;Ullrich.
            Knowledge representation and management in activemath.
            
            <div class="emphasis e390" role="ital">International Journal on Artificial Intelligence and
               Mathematics, Special Issue on Management of Mathematical Knowledge
            </div>,
            38(1–3):47–64, 2003. doi: 
            <div class="biblioid doi e391">10.1023/A:1022959613174</div>.
            
         </div>
         <div class="bibliomixed e392" xml:id="miller.latexml" xreflabel="Mil10">
            Bruce Miller.
            LaTeXML: A LaTeX to XML converter.
            Web Manual at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e393" xlink:actuate="onRequest" xlink:href="http://dlmf.nist.gov/LaTeXML/" xlink:show="new" xlink:type="simple">http://dlmf.nist.gov/LaTeXML/</div>, seen May&nbsp; 2010.
            
         </div>
         <div class="bibliomixed e394" xml:id="misev.sumo2omdoc" xreflabel="Mis10">
            Dimitar Misev.
            Integrating SUMO and OMDoc.
            Bachelor’s thesis, Computer Science, Jacobs University, Bremen, 2010.
            
         </div>
         <div class="bibliomixed e395" xml:id="w3c.owl2-xml" xreflabel="MPPS09">
            Boris Motik, Bijan Parsia, and Peter&nbsp;F. Patel-Schneider.
            OWL 2 web ontology language: XML serialization.
            W3C recommendation, World Wide Web Consortium (W3C), 10 2009.
            
         </div>
         <div class="bibliomixed e396" xml:id="mu-01-a" xreflabel="MU01">
            Erica Melis and Carsten Ullrich.
            How to teach it – polya-inspired scenarios in activemath.
            
            <div class="emphasis e397" role="ital">AI in Education (AIED-2003), IOS Press</div>, pages 141–147, 2001.
            
         </div>
         <div class="bibliomixed e398" xml:id="openlinkvirtuoso.web" xreflabel="Ope">OpenLink Software.
            OpenLink universal integration middleware – Virtuoso product
            family.
            web page at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e399" xlink:actuate="onRequest" xlink:href="http://virtuoso.openlinksw.com" xlink:show="new" xlink:type="simple">http://virtuoso.openlinksw.com</div>.
            
         </div>
         <div class="bibliomixed e400" xml:id="relaxngweb" xreflabel="Rel">
            A schema language for XML.
            available at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e401" xlink:actuate="onRequest" xlink:href="http://www.relaxng.org/" xlink:show="new" xlink:type="simple">http://www.relaxng.org/</div>.
            
         </div>
         <div class="bibliomixed e402" xml:id="svn.web" xreflabel="SVN08">
            Subversion, seen June 2008.
            available at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e403" xlink:actuate="onRequest" xlink:href="http://subversion.tigris.org/" xlink:show="new" xlink:type="simple">http://subversion.tigris.org/</div>.
            
         </div>
         <div class="bibliomixed e404" xml:id="w3c04.owl-guide" xreflabel="SWM04">
            Michael&nbsp;K. Smith, Chris Welty, and Deborah&nbsp;L. McGuinness.
            OWL web ontology language guide.
            W3C Recommendation, World Wide Web Consortium (W3C), February
            2004.
            
         </div>
         <div class="bibliomixed e405" xml:id="w3c.web.mathml3" xreflabel="W3C07">
            W3C.
            Mathematical Markup Language (MathML) Version 3.0 (Third Edition).
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e406" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/MathML3/" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/MathML3/</div>, 2007.
            Seen November 2007.
            
         </div>
         <div class="bibliomixed e407" xml:id="walmue.dtdg2008" xreflabel="WM08">
            Norman Walsh and Leonard Muellner.
            
            <div class="emphasis e408" role="ital">DocBook 5.0: The Definitive Guide</div>.
            O’Reilly, 2008.
            
         </div>
         <div class="bibliomixed e409" xml:id="xmlspec.url" xreflabel="XML09">
            The XML Spec schema and stylesheets.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e410" xlink:actuate="onRequest" xlink:href="http://www.w3.org/2002/xmlspec/" xlink:show="new" xlink:type="simple">http://www.w3.org/2002/xmlspec/</div>, seen March 2009.
            
         </div>
         <div class="bibliomixed e411" xml:id="zholudev.tntbaserestful.web" xreflabel="Z+10">
            Vyacheslav Zholudev et&nbsp;al.
            TNTBase – restful api.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e412" xlink:actuate="onRequest" xlink:href="http://tntbase.org/wiki/restful" xlink:show="new" xlink:type="simple">http://tntbase.org/wiki/restful</div>, 2010.
            
         </div>
         <div class="bibliomixed e413" xml:id="tntvdusecases.url" xreflabel="Zho">
            Vyacheslav Zholudev.
            Sandbox for Balisage 2010 – Virtual Documents.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e414" xlink:actuate="onRequest" xlink:href="http://tntbase.org/wiki/balisage2010" xlink:show="new" xlink:type="simple">http://tntbase.org/wiki/balisage2010</div>.
            
         </div>
         <div class="bibliomixed e415" xml:id="tntvdskel.url" xreflabel="ZK">
            Vyacheslav Zholudev and Michael Kohlhase.
            The RelaxNG schema for vd skeletons.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e416" xlink:actuate="onRequest" xlink:href="https://svn.tntbase.org/repos/tntbase/trunk/DbXmlAccessLib/resources/tnt-vd-spec.rnc" xlink:show="new" xlink:type="simple">https://svn.tntbase.org/repos/tntbase/trunk/DbXmlAccessLib/resources/tnt-vd-spec.rnc</div>.
            
         </div>
         <div class="bibliomixed e417" xml:id="zhokoh.tvsx09.biblatex" xreflabel="ZK09">
            Vyacheslav Zholudev and Michael Kohlhase.
            TNTBase: a versioned storage for XML.
            In 
            <div class="emphasis e418" role="ital">Proceedings of Balisage: The Markup Conference 2009</div>,
            volume&nbsp;3 of 
            <div class="emphasis e419" role="ital">Balisage Series on Markup Technologies</div>. Mulberry
            Technologies, Inc., 2009. doi: 
            <div class="biblioid doi e420">10.4242/BalisageVol3.Zholudev01</div>.
            
         </div>
         <div class="bibliomixed e421" xml:id="zhokohrab.tntbasef10" xreflabel="ZKR10">
            Vyacheslav Zholudev, Michael Kohlhase, and Florian Rabe.
            A [insert xml format] database for [insert cool application].
            In 
            <div class="emphasis e422" role="ital">Proceedings of XML Prague 2010</div>, 2010.
            
         </div>
      </div>
   </div>
</div>