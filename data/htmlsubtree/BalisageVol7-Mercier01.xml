<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#IncludingXSLTstylesheetstestingincontinuousintegrationprocessANCHOR" name="IncludingXSLTstylesheetstestingincontinuousintegrationprocessTOC">Including XSLT stylesheets testing in continuous integration process</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ProblemANCHOR" name="ProblemTOC">Problem</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#SolutionANCHOR" name="SolutionTOC">Solution</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#XSLTtestframeworkANCHOR" name="XSLTtestframeworkTOC">XSLT test framework</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#JavaunittestingwrapperANCHOR" name="JavaunittestingwrapperTOC">Java unit testing wrapper</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#BuildtoolandcontinuousintegrationserverANCHOR" name="BuildtoolandcontinuousintegrationserverTOC">Build tool and continuous integration server</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConclusionANCHOR" name="ConclusionTOC">Conclusion</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#AcknowledgmentsANCHOR" name="AcknowledgmentsTOC">Acknowledgments</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#WorkcitedANCHOR" name="WorkcitedTOC">Work cited</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">August 2 - 5, 2011</div>
         <div class="singletermTERMS">Analyst</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">Behavior Driven Development</div>
         <div class="singletermTERMS">Bamboo</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2011</div>
         <div class="singletermTERMS">benoit.mercier@usherbrooke.ca</div>
         <div class="singletermTERMS">Benoit</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">Continuum</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">Hudson</div>
         <div class="singletermTERMS">How to write XSpec scenarios</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
         <div class="singletermTERMS">Jxsl</div>
         <div class="singletermTERMS">Jenkins</div>
         <div class="singletermTERMS">jxsl, Java XSL code library</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">Mercier</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">src/test/resources/xspec-context.xml</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">TeamCity</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">XSpec</div>
         <div class="singletermTERMS">XSLT</div>
         <div class="singletermTERMS">XSpec RELAX NG schema</div>
         <div class="singletermTERMS">xspec-context.xml</div>
         <div class="singletermTERMS">XSpec, BDD framework for XSLT</div>
         <div class="singletermTERMS">XspecTestScenarioRunner</div>
         <div class="singletermTERMS">XspecTestSuiteRunner</div>
         <div class="singletermTERMS">XspecScenarioJUnitTest</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="IncludingXSLTstylesheetstestingincontinuousintegrationprocessANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3">
      <div class="title e1">Including XSLT stylesheets testing in continuous integration process</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2011</div>
            <div class="confdates e5">August 2 - 5, 2011</div>
         </div>
         <div class="abstract e6">
            <div class="para e7"> XSLT stylesheets are just like any other programming language code units: they
               need to be written, debugged, refactored and tested. In these days of « Agility »,
               refactoring and continuous integration play major roles in development process. How
               to assert that XSLT stylesheets refactoring are still producing correct outputs? How
               to early detect defects? This paper proposes a practical approach to include XSLT
               stylesheets testing in continuous integration process, based on 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e8" xlink:actuate="onRequest" xlink:href="http://code.google.com/p/xspec/" xlink:show="new" xlink:type="simple">XSpec</div>, a 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e9" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/Behavior_Driven_Development" xlink:show="new" xlink:type="simple">Behavior
                  Driven Development
               </div>&nbsp;(BDD) framework for&nbsp;
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e10" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xslt20" xlink:show="new" xlink:type="simple">XSLT</div>, and on Java helpers
               provided by 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e11" xlink:actuate="onRequest" xlink:href="http://code.google.com/p/jxsl/" xlink:show="new" xlink:type="simple">Jxsl</div>, a Java
               XSL code library.
            </div>
         </div>
         <div class="author e12">
            <div class="personname e13">
               <div class="firstname e14">Benoit</div>
               <div class="surname e15">Mercier</div>
            </div>
            <div class="personblurb e16">
               <div class="para e17">Benoit Mercier has been working as researcher and analyst at the Franqus research
                  group of the University of Sherbrooke (Quebec, Canada) since 2006 where he collaborates
                  to the development of a new North American French dictionary. His main interests include
                  computer linguistic, Free Software development and technology watch. His is also a
                  European Commission official since 2000. He started and animated the Commission IT
                  Network (CITnet), an internal collaboration platform for IT specialists (almost 2000
                  individuals) and is the author of the 2003-2006 version of the strategy for internal
                  use of Open Source Software at the European Commission.
               </div>
            </div>
            <div class="email e18">benoit.mercier@usherbrooke.ca</div>
            <div class="affiliation e19">
               <div class="jobtitle e20">Analyst</div>
               <div class="orgname e21">Faculté des lettres et sciences humaines, Université de Sherbrooke</div>
            </div>
         </div>
         <div class="legalnotice e22">
            <div class="para e23">Copyright © 2011 Benoit Mercier</div>
         </div>
      </div><a name="ProblemANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e24">
         <div class="title e25">Problem</div>
         <div class="para e26">Writing XSLT stylesheets is similar to writing code in any kind of programming
            language. The aim is to build a working piece of code that will produce predictable
            results to meet functional requirements. Software development is evolving at a fast
            pace and more and more new methodologies are emerging in order to guide development
            process. One of the key aspects shared by all these methodologies is testing, to
            guarantee software behaviour predictability and consistency. To be really efficient
            and
            useful, testing should be made easy for developers and tests scenario executions should
            be triggered automatically as soon as code has been modified. This is nowadays part
            of a
            common best practice called Continuous Integration (CI). But XSLT stylesheets are
            in a
            poor relation in this context. There are few unit testing frameworks available for
            XSLT
            and none of them are easily embeddable in CI processes and tools. 
         </div>
         <div class="para e27">This paper tries to demonstrate that XSLT stylesheet testing can be made simple by
            using the 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e28" xlink:actuate="onRequest" xlink:href="http://code.google.com/p/xspec/" xlink:show="new" xlink:type="simple">XSpec</div>
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e29" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/Behavior_Driven_Development" xlink:show="new" xlink:type="simple">Behavior
               Driven Development
            </div>&nbsp;(BDD) framework for XSLT through the use of  
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e30" xlink:actuate="onRequest" xlink:href="http://code.google.com/p/jxsl/" xlink:show="new" xlink:type="simple">Jxsl</div> Java wrapper library and can
            be easily integrated into existing or new CI environment. It is an awareness-raising
            document to help XSLT stylesheet developers to change their outlooks so as to foster
            the
            adoption of testing as a new valuable tool at their disposal. 
         </div>
      </div><a name="SolutionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e31">
         <div class="title e32">Solution</div>
         <div class="para e33">The proposed solution to achieve continuous integration of XSLT stylesheets adds three
            possibly new components to the usual toolkit (IDE, version control system, etc.) used
            by
            XSLT developers: 
            <div class="itemizedlist e34">
               <div class="listitem e35">
                  <div class="para e36">an XSLT test framework;</div>
               </div>
               <div class="listitem e37">
                  <div class="para e38">a Java unit testing wrapper;</div>
               </div>
               <div class="listitem e39">
                  <div class="para e40">a continuous integration server.</div>
               </div>
            </div>
         </div>
         <div class="para e41">The following sections describe the selected tools and their respective roles in the
            process.
         </div><a name="XSLTtestframeworkANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e42">
            <div class="title e43">XSLT test framework</div>
            <div class="para e44">This is the core of the solution. Writing tests should be easy, intuitive and
               frictionless. XSpec framework meets these conditions[
               <div class="xref e45" linkend="xspec-01"></div>]. BDD approach, tool quality,
               authors and recent project activities have lead to its selection from among various
               other projects like Juxy, XSLTUnit or UTF-X for instance.
            </div>
            <div class="para e46">The general idea is to write XSpec documents to describe stylesheet behaviours.
               XSpec documents are XML documents which adhere to the 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e47" xlink:actuate="onRequest" xlink:href="http://code.google.com/p/xspec/source/browse/trunk/xspec.rnc" xlink:show="new" xlink:type="simple">XSpec
                  RELAX NG schema
               </div>. XSpec scenarios are straightforward to write for XSLT
               developers. Stylesheet templates and functions can be tested against contextual data
               (XML documents, fragments or mock object) by creating test scenarios. Here is a
               sample XSpec file.
            </div>
            <div class="programlisting e48" xml:space="preserve">
               &lt;?xml version="1.0" encoding="UTF-8"?&gt;
               
               &lt;x:description xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="toHtmlWithIds.xsl"&gt;
               
               &lt;x:scenario label="When processing a list of books"&gt;
               
               &lt;!-- apply template rules to this element --&gt;
               &lt;x:context href="xsltestengine-data/books-a.xml/&gt;
               
               &lt;!-- check the result --&gt;
               &lt;x:expect label="There must be 12 button to books" test="count(//button) = 12"/&gt;
               
               &lt;/x:scenario&gt;
               
               &lt;/x:description&gt;
               
               
            </div>
            <div class="para e49">The precise way to write XSpec document is described in the official documentation
               [
               <div class="xref e50" linkend="xspec-02"></div>].
            </div>
            <div class="para e51">Systematically writing XSpec test scenarios for each XSLT stylesheets produced is
               a first step towards improving bug detection, guaranteeing compliance to
               specifications, business and technical requirements, safer refactoring, etc. But
               XSpec documents alone are not sufficient. Running tests is still under the sole
               responsibility and good will of the developer. Tests should be run on a regular
               basis to allow early error detection. Such systems exist and are widely used for
               other programming languages. How could XSpec files be integrated in those existing
               solutions?
            </div>
         </div><a name="JavaunittestingwrapperANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e52">
            <div class="title e53">Java unit testing wrapper</div>
            <div class="para e54">In order to be able to benefit from other languages testing tools availability,
               XSpec test executions should be wrapped up in one of these languages. This is one
               of
               the goals of the Jxsl project [
               <div class="xref e55" linkend="jxsl-01"></div>]: to offer Java wrapper objects for XSpec test
               configuration and executions.
            </div>
            <div class="para e56">Jxsl provides method to execute XSpec tests directly from Java code, one at a time
               (
               <div class="emphasis e57" role="ital">XspecTestScenarioRunner</div>) or in batch mode
               (
               <div class="emphasis e58" role="ital">XspecTestSuiteRunner</div>). This is useful for
               embedding test executions in custom Java code. But Jxsl also contains wrapper for
               the JUnit unit testing framework (TestNG support is coming). That means that an
               existing Java project can add XSpec file testing to its standard JUnit test
               suites.
            </div>
            <div class="para e59">To enable XSLT unit testing with XSpec in an existing Java project, it is as
               simple as creating a new class in the project test package that extends 
               <div class="emphasis e60" role="ital">XspecScenarioJUnitTest</div> and to provide a Spring bean
               configuration file called 
               <div class="emphasis e61" role="ital">
                  <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e62" xlink:actuate="onRequest" xlink:href="http://jxsl.googlecode.com/svn/trunk/src/test/resources/xspec-context.xml" xlink:show="new" xlink:type="simple">xspec-context.xml</div>
               </div>. Here is a complete and functional
               implementation. 
            </div>
            <div class="programlisting e63" xml:space="preserve">package com.mycompany.test.xspec;
               
               import com.servicelibre.jxsl.scenario.test.xspec.XspecScenarioJUnitTest;
               import java.io.File;
               
               public class XspecUnitTesting extends XspecScenarioJUnitTest {
               
               public XspecUnitTesting(File xspecFile) {
               super(xspecFile);
               }
               }
            </div>
            <div class="para e64">Jxsl offers a Maven archetype to get started quickly.  This archetype is also very
               useful for non Java developers. Java 1.5+ JRE and Maven 2.9+ are required. The
               archetype can be generated with the following command:
            </div>
            <div class="programlisting e65" xml:space="preserve">
               mvn archetype:generate -DarchetypeGroupId=com.servicelibre  \
               -DarchetypeArtifactId=xspec-test \ 
               -DarchetypeVersion=0.1.5 \ 
               -DarchetypeCatalog=http://jxsl.googlecode.com/svn/trunk/archetypes               
               
               
            </div>
            <div class="para e66">The only things to configure to get started is the XSpec file locations . This is
               achieved by editing the 
               <div class="code e67">src/test/resources/xspec-context.xml</div> file.
               Tests can now be run with the following
               command:
               <div class="programlisting e68" xml:space="preserve">mvn test</div>
            </div>
            <div class="para e69">XSpec test executions have now be integrated into some Java unit testing code in
               order to benefit from all the tools available for triggering and monitoring standard
               Java unit tests. The Maven project build from the archetype could also be used to
               integrate XSpec testing in XML editor like Oxygen XML Editor (through External tools
               configuration).
            </div>
         </div><a name="BuildtoolandcontinuousintegrationserverANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e70">
            <div class="title e71">Build tool and continuous integration server</div>
            <div class="para e72">XSpec tests wrapped up in Java unit tests can now be triggered as part of a
               standard Java project build process. Build tool like Maven does this automatically
               by convention. Ant can be configured to run JUnit tests as follows :
            </div>
            <div class="programlisting e73" xml:space="preserve">
               &lt;?xml version="1.0" encoding="UTF-8"?&gt;
               &lt;project name="jxsl" default="test" basedir="."&gt;
               
               	&lt;target name="init"&gt;
               		&lt;property name="resources" location="${basedir}/../resources"/&gt;
               	&lt;/target&gt;
               
               	&lt;target name="test" depends="init"&gt;
               		&lt;echo&gt;basedir=${basedir}&lt;/echo&gt;
               		&lt;junit dir="${basedir}" fork="true" haltonerror="true" &gt;
               			&lt;test name="com.servicelibre.jxsl.scenario.test.xspec.XspecScenarioJUnitTest"/&gt;
               
               			&lt;classpath&gt;
               				&lt;pathelement path="${resources}/jxsl/jxsl-with-dependencies.jar"/&gt;
               				&lt;pathelement path="${user.home}/.m2/repository/net/sf/saxon/saxon/9.3.0.2j/saxon-9.3.0.2j.jar"/&gt;
               				&lt;path path="${basedir}"/&gt; &lt;!-- for xspec-context.xml Spring bean configuration
               file --&gt;
               			&lt;/classpath&gt;
               
               			&lt;formatter type="brief" usefile="false"/&gt;
               		&lt;/junit&gt;
               	&lt;/target&gt;
               
               &lt;/project&gt;
               
               
            </div>
            <div class="para e74">Today, not having a CI server in place when doing software development is almost
               like not using a version control system: a risky bet.  CI server ensures, at least,
               that code are regularly built and tested successfully in a clean environment
               (understand « not on the developer computer ») .  There are several popular CI
               servers: 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e75" xlink:actuate="onRequest" xlink:href="http://hudson-ci.org" xlink:show="new" xlink:type="simple">Hudson</div>/
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e76" xlink:actuate="onRequest" xlink:href="http://jenkins-ci.org/" xlink:show="new" xlink:type="simple">Jenkins</div>, 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e77" xlink:actuate="onRequest" xlink:href="http://continuum.apache.org/" xlink:show="new" xlink:type="simple">Continuum</div>, 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e78" xlink:actuate="onRequest" xlink:href="http://www.atlassian.com/software/bamboo/" xlink:show="new" xlink:type="simple">Bamboo</div>, 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e79" xlink:actuate="onRequest" xlink:href="http://www.jetbrains.com/teamcity/" xlink:show="new" xlink:type="simple">TeamCity</div>, etc.
            </div>
            <div class="para e80">XSpec tests should be run regularly by a CI server.  </div>
            <div class="para e81">
               <div class="inlinemediaobject e82">
                  <div class="imageobject e83">
                     <div class="metaBox e84"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e165').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e165" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e84'
                              </span><span class="metaAttribute">fileref='../../../vol7/graphics/Mercier01/Mercier01-001.jpg'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e85">In order to catch errors even more early, it is suggested to trigger test
               executions on commit in the version control system. This is usually done via
               server-side hook scripts. Resources on hook scripts for common version control
               systems:
            </div>
            <div class="itemizedlist e86">
               <div class="listitem e87">
                  <div class="para e88">Subversion: 
                     <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e89" xlink:actuate="onRequest" xlink:href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.create.hooks" xlink:show="new" xlink:type="simple">http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.create.hooks</div>
                  </div>
               </div>
               <div class="listitem e90">
                  <div class="para e91">GIT: 
                     <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e92" xlink:actuate="onRequest" xlink:href="http://book.git-scm.com/5_git_hooks.html" xlink:show="new" xlink:type="simple">http://book.git-scm.com/5_git_hooks.html</div>
                  </div>
               </div>
               <div class="listitem e93">
                  <div class="para e94">Mercurial: 
                     <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e95" xlink:actuate="onRequest" xlink:href="http://hgbook.red-bean.com/read/handling-repository-events-with-hooks.html" xlink:show="new" xlink:type="simple">http://hgbook.red-bean.com/read/handling-repository-events-with-hooks.html</div>
                  </div>
               </div>
            </div>
            <div class="para e96">Here is a sample Subversion hook script that triggers a project rebuild by
               Hudson
               <div class="programlisting e97" xml:space="preserve">#!/bin/sh
                  
                  # POST-COMMIT HOOK
                  
                  USER=hudson
                  PASSWORD=*****
                  HUDSON_SERVER=hostname:8081
                  HUDSON_COMMAND=polling
                  
                  HTTP_PREFIX=http://${USER}:${PASSWORD}@${HUDSON_SERVER}
                  
                  wget -b ${HTTP_PREFIX}/job/hudson_project_name/${HUDSON_COMMAND} &gt; /dev/null
                  
               </div>
            </div>
         </div>
      </div><a name="ConclusionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e98">
         <div class="title e99">Conclusion</div>
         <div class="para e100">With the proposed solution, XSLT developers, even without any knowledge of Java, are
            now able to easily create a Maven project from an archetype, configure it to run their
            own XSpec files and trigger test executions by a CI server at each commit in their
            version control system.
         </div>
      </div><a name="AcknowledgmentsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e101">
         <div class="title e102">Acknowledgments</div>
         <div class="para e103">This project would not have been possible without the support of the Franqus Research
            Group of the Faculté des lettres et sciences humaines, Université de Sherbrooke. The
            author wishes to express his gratitude to colleague and friend, Dominic Marcotte,
            who
            offered invaluable assistance and support.
         </div>
      </div><a name="WorkcitedANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e104">
         <div class="title e105">Work cited</div>
         <div class="bibliomixed e106" xml:id="jxsl-01">            
            
            <div class="quote e107">jxsl, Java XSL code library</div>
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e108" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://code.google.com/p/jxsl</div>.
            Accessed 2011-06-10.
            
         </div>
         <div class="bibliomixed e109" xml:id="xspec-01">            
            
            <div class="quote e110">XSpec, BDD framework for XSLT</div>
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e111" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://code.google.com/p/xspec</div>.
            Accessed 2011-06-10.
            
         </div>
         <div class="bibliomixed e112" xml:id="xspec-02">
            
            <div class="quote e113">How to write XSpec scenarios</div> (part of the XSpec documentation),
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e114" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://code.google.com/p/xspec/wiki/WritingScenarios</div>. Accessed
            2011-06-10. 
         </div>
      </div>
   </div>
</div>