<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#XDMLanextensiblemarkuplanguageandprocessorforXDMANCHOR" name="XDMLanextensiblemarkuplanguageandprocessorforXDMTOC">XDML - an extensible markup language and processor for XDM</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#WhyaskforXDM(ifwehaveXML)?ANCHOR" name="WhyaskforXDM(ifwehaveXML)?TOC">Why ask for XDM (if we have XML)?</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#XDMstructureANCHOR" name="XDMstructureTOC">XDM structure</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#PartitioninganXDMvalueANCHOR" name="PartitioninganXDMvalueTOC">Partitioning an XDM value</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ImposingtreestructureANCHOR" name="ImposingtreestructureTOC">Imposing tree structure</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#Concept:InformationunitsANCHOR" name="Concept:InformationunitsTOC">Concept: Information units</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#XDMmetadataANCHOR" name="XDMmetadataTOC">XDM metadata</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#Whyandhowaddmetadata?ANCHOR" name="Whyandhowaddmetadata?TOC">Why and how add metadata?</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AmodelofmetadataANCHOR" name="AmodelofmetadataTOC">A model of metadata</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#XDMLtheconceptANCHOR" name="XDMLtheconceptTOC">XDML - the concept</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#GoalsANCHOR" name="GoalsTOC">Goals</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#StructuremodelANCHOR" name="StructuremodelTOC">Structure model</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#MetadatamodelANCHOR" name="MetadatamodelTOC">Metadata model</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ProcessingmodelANCHOR" name="ProcessingmodelTOC">Processing model</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#EncodingprinciplesANCHOR" name="EncodingprinciplesTOC">Encoding principles</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#XDMLconcreteproposalANCHOR" name="XDMLconcreteproposalTOC">XDML - concrete proposal</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#XDMLoperationsANCHOR" name="XDMLoperationsTOC">XDML operations</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#DatamodelofinputandoutputANCHOR" name="DatamodelofinputandoutputTOC">Data model of input and output</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#RequestmessagesANCHOR" name="RequestmessagesTOC">Request messages</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#SpecialparametervaluesANCHOR" name="SpecialparametervaluesTOC">Special parameter values</a></div>
                  <div class="headedContainerTOC">
                     <div class="headedContainerTitleTOC"><a href="#ParametervaluessuppliedbytheXDMLuserANCHOR" name="ParametervaluessuppliedbytheXDMLuserTOC">Parameter values supplied by the XDML user</a></div>
                  </div>
                  <div class="headedContainerTOC">
                     <div class="headedContainerTitleTOC"><a href="#ParametervaluesprovidedbyotherinformationunitsANCHOR" name="ParametervaluesprovidedbyotherinformationunitsTOC">Parameter values provided by other information units</a></div>
                  </div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#LibraryofstandardoperationsANCHOR" name="LibraryofstandardoperationsTOC">Library of standard operations</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#ExtensibilityANCHOR" name="ExtensibilityTOC">Extensibility</a></div>
               </div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#MethodsANCHOR" name="MethodsTOC">Methods</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ExecutioncontextANCHOR" name="ExecutioncontextTOC">Execution context</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#Executioncontext&#34;finalize&#34;ANCHOR" name="Executioncontext&#34;finalize&#34;TOC">Execution context "finalize"</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#Executioncontext&#34;execute&#34;ANCHOR" name="Executioncontext&#34;execute&#34;TOC">Execution context "execute"</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#Executioncontext&#34;enable&#34;ANCHOR" name="Executioncontext&#34;enable&#34;TOC">Execution context "enable"</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#Executioncontext&#34;translate&#34;ANCHOR" name="Executioncontext&#34;translate&#34;TOC">Execution context "translate"</a></div>
               </div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#MethoddefinitionsANCHOR" name="MethoddefinitionsTOC">Method definitions</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#XDMLuserperspectiveANCHOR" name="XDMLuserperspectiveTOC">XDML user perspective</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#ObtainingandextendingtheXDMLprocessorANCHOR" name="ObtainingandextendingtheXDMLprocessorTOC">Obtaining and extending the XDML processor</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#ObtaininganXDMLvalueANCHOR" name="ObtaininganXDMLvalueTOC">Obtaining an XDML value</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#ParsinganXDMLvalueANCHOR" name="ParsinganXDMLvalueTOC">Parsing an XDML value</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#ProcessinganXDMLvalueANCHOR" name="ProcessinganXDMLvalueTOC">Processing an XDML value</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#ExampleANCHOR" name="ExampleTOC">Example</a></div>
               </div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#Generalization:XDMLasaninformationmodelANCHOR" name="Generalization:XDMLasaninformationmodelTOC">Generalization: XDML as an information model</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#EncodingXDMLwithmapitemsANCHOR" name="EncodingXDMLwithmapitemsTOC">Encoding XDML with map items</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#EncodingXDMasXMLANCHOR" name="EncodingXDMasXMLTOC">Encoding XDM as XML</a></div>
               </div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#DiscussionANCHOR" name="DiscussionTOC">Discussion</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BibliographyANCHOR" name="BibliographyTOC">Bibliography</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">Atomic values</div>
         <div class="singletermTERMS">augmenting</div>
         <div class="singletermTERMS">August 2 - 5, 2011</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2011</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">Collection-like data</div>
         <div class="singletermTERMS">collection</div>
         <div class="singletermTERMS">Continuous result</div>
         <div class="singletermTERMS">control items</div>
         <div class="singletermTERMS">complex</div>
         <div class="singletermTERMS">concept</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">DataUnit</div>
         <div class="singletermTERMS">defined</div>
         <div class="singletermTERMS">data context</div>
         <div class="singletermTERMS">data value</div>
         <div class="singletermTERMS">dual maps</div>
         <div class="singletermTERMS">dlee@epocrates.com</div>
         <div class="singletermTERMS">David</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">execute</div>
         <div class="singletermTERMS">executed</div>
         <div class="singletermTERMS">Encoding model</div>
         <div class="singletermTERMS">Execution contexts and method definitions.</div>
         <div class="singletermTERMS">Execution contexts and their encoding.</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
         <div class="singletermTERMS">finalize</div>
         <div class="singletermTERMS">finalization</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
         <div class="singletermTERMS">grouping</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">hrennau@yahoo.de</div>
         <div class="singletermTERMS">Hans-Jürgen</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">InformationUnit</div>
         <div class="singletermTERMS">invoke</div>
         <div class="singletermTERMS">invoke(..., "getResultTable")</div>
         <div class="singletermTERMS">invoke(..., "getHtml")</div>
         <div class="singletermTERMS">invoke(..., "getCVS")</div>
         <div class="singletermTERMS">if</div>
         <div class="singletermTERMS">information unit</div>
         <div class="singletermTERMS">information units</div>
         <div class="singletermTERMS">information with an interface</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">language</div>
         <div class="singletermTERMS">Lee</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">MetadataUnit</div>
         <div class="singletermTERMS">Method</div>
         <div class="singletermTERMS">method</div>
         <div class="singletermTERMS">metadata</div>
         <div class="singletermTERMS">methods</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">node()</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">Object[]</div>
         <div class="singletermTERMS">OperationRequest</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">Properties</div>
         <div class="singletermTERMS">Processing model</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">Result as an XDM provider</div>
         <div class="singletermTERMS">request message</div>
         <div class="singletermTERMS">return value</div>
         <div class="singletermTERMS">Rennau</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">simple</div>
         <div class="singletermTERMS">Some standard XDML operations.</div>
         <div class="singletermTERMS">Senior programmer</div>
         <div class="singletermTERMS">Senior Principal Software Engineer</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">trees</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
         <div class="singletermTERMS">usage</div>
         <div class="singletermTERMS">Updatable result</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">xs:string</div>
         <div class="singletermTERMS">XDMLOperations</div>
         <div class="singletermTERMS">XMDLParser</div>
         <div class="singletermTERMS">XDMLProcessing</div>
         <div class="singletermTERMS">XDMLRegistry</div>
         <div class="singletermTERMS">XDML</div>
         <div class="singletermTERMS">XQSequence</div>
         <div class="singletermTERMS">XDML parser</div>
         <div class="singletermTERMS">XDML</div>
         <div class="singletermTERMS">XDM</div>
         <div class="singletermTERMS">XProc</div>
         <div class="singletermTERMS">XQuery</div>
         <div class="singletermTERMS">XSLT</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="XDMLanextensiblemarkuplanguageandprocessorforXDMANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3" xml:id="HR-23632987-8973">
      <div class="title e1">XDML - an extensible markup language and processor for XDM</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2011</div>
            <div class="confdates e5">August 2 - 5, 2011</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">
               XDML is a set of rules how XDM values can be built which are more 
               useful entities as compared to ordinary XDM values. The key idea is to insert
               into the XDM values control information which guides the interpretation and
               processing of the data. In particular, it structures the XDM value into
               named parts and associates these parts with metadata. The control
               information is evaluated by an XDML processor, which reports and processes
               the data accordingly. The processing of a part is organized as the execution
               of operations which the control data bind to the part, but whose actual
               invocation depends on API calls of the XDML user. The bindings are 
               represented by request messages which encode the actual input to operations 
               selected from an extensible library of available "XDML operations".
               The operation bindings of a part can be regarded as a specific interface 
               dynamically attached to the data of the part. The net result
               of this approach is to enable the creation of self-describing XDM values: they encode
               the way how they are presented to applications, as well as how they
               should or might be processed. This means that the
               XDM producer - e.g. XQuery programs - can emit "rich" data whose downstream 
               processing is significantly simplified. 
               
            </div>
         </div>
         <div class="author e8">
            <div class="personname e9">
               <div class="firstname e10">Hans-Jürgen</div>
               <div class="othername e11"></div>
               <div class="surname e12">Rennau</div>
            </div>
            <div class="personblurb e13">
               <div class="para e14">Hans-Jürgen Rennau works as a software developer for bits GmbH (Büro für Informations-Technologie
                  und Software). He takes a keen interest in the integration of object-oriented and
                  “item-oriented” (XML) components of behavior and components of information. Hans-Jürgen's
                  background as a biologist partly accounts for his belief that the naturalness of a
                  thought is important to its potential. A natural integration of two natural approaches
                  — OO and XML — is what he strives for in theory and practice.
               </div>
            </div>
            <div class="affiliation e15">
               <div class="jobtitle e16">Senior programmer</div>
               <div class="orgname e17">bits - Büro für Informations-Technologie und Software GmbH</div>
            </div>
            <div class="email e18">hrennau@yahoo.de</div>
         </div>
         <div class="author e19">
            <div class="personname e20">
               <div class="firstname e21">David</div>
               <div class="othername e22"></div>
               <div class="surname e23">Lee</div>
            </div>
            <div class="personblurb e24">
               <div class="para e25">David Lee has over 25 years experience in the software industry responsible for many
                  major projects in small and large companies including Sun Microsystems, IBM, Centura
                  Software (formerly Gupta), Premenos, Epiphany (formerly RightPoint), WebGain, Nexstra,
                  Epocrates. As senior principal software engineer at Epocrates, Inc., Mr Lee is responsible
                  for managing data integration, storage, retrieval, and processing of clinical knowledge
                  databases for the leading clinical information provider.
               </div>
               <div class="para e26">Key career contributions include Real-time AIX OS extensions for optimizing transmission
                  of real-time streaming video (IBM), secure encrypted EDI over internet email (Premenos),
                  porting the Centura Team Desktop system to Solaris (Gupta, Centura), optimizations
                  of large Enterprise CRM systems (Epiphany), author of xmlsh (http://www.xmlsh.org)
                  an open source scripting language for XML.
               </div>
            </div>
            <div class="affiliation e27">
               <div class="jobtitle e28">Senior Principal Software Engineer</div>
               <div class="orgname e29">Epocrates, Inc.</div>
            </div>
            <div class="email e30">dlee@epocrates.com </div>
         </div>
         <div class="legalnotice e31">
            <div class="para e32">Copyright © 2011 by the authors. Used with permission.</div>
         </div>
         <div class="keywordset e33" role="author">
            <div class="keyword e34">XDML</div>
            <div class="keyword e35">XDM</div>
            <div class="keyword e36">XProc</div>
            <div class="keyword e37">XQuery</div>
            <div class="keyword e38">XSLT</div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e39" xml:id="introduction">
         <div class="title e40">Introduction</div>
         <div class="para e41">
            XDM [
            <div class="xref e42" linkend="W3C-XDM"></div>] is the data model of the major XML processing languages – XPath, XQuery 
            and XSLT. The model is marked by a bold simplicity: (a) every value is a sequence
            of items, 
            (b) an item is either an XML node or an atomic value, (c) there are seven kinds of
            XML 
            nodes and  (d) a few dozens atomic types. This means that the size and complexity
            of an 
            XDM value is virtually unlimited, and at the same time that any value can be decomposed
            
            into a linear sequence of building blocks, the items. "XDM item" is an abstraction
            enabling 
            us to regard a single byte and a huge XML document as just two instances of the same
            building block.
            
         </div>
         <div class="para e43">
            One can look at the XDM from three different perspectives. The first one regards XDM
            as a 
            component of those processing languages, concerning only writers of XPath expressions,
            
            XQuery scripts or XSLT stylesheets. We suspect that the majority of software developers
            
            and architects would subscribe to this view.
            
         </div>
         <div class="para e44">
            The second perspective takes into account that input and output of those languages
            is 
            also XDM and accepts the XDM as a player in the game of process integration. This
            
            perspective pays attention to the issue of translating information back and forth
            
            between XDM values and other data models, for example the data models of general 
            purpose programming languages. It should also take an interest in the 
            serialization of XDM values.
            
         </div>
         <div class="para e45">
            A third perspective makes a step from looking at the XDM as either a local affair
            
            of specialized languages or a challenge for data mapping. This new perspective regards
            
            the XDM as the foundation for building a new kind of resource, offering some particular
            
            advantages in comparison to other resource types – e.g. XML documents, relational
            tables 
            or CSV files. At the same time it gives a boost to XQuery, as XQuery 
            is the XDM producer par excellence. Increased importance of XDM means increased importance
            
            of XQuery.
            
         </div>
         <div class="para e46">
            Ironically, the key step toward a new appreciation of the XDM is awareness of its
            
            fundamental limitation: there is no structure – only a flat sequence of items; there
            
            is no meta information – only items and nothing else. An XDM value has something in
            
            common with a string – no limitation of size and complexity, but unless a creative
            
            step is taken there is no general way how to impose and detect a structure (above
            the level
            of its building blocks, that is). 
            Concerning strings, the creative step was the invention of markup: divide the sequence
            
            of atoms (characters) into sections of primary information and those of meta information,
            
            the latter also known as markup. One might consider doing something equivalent with
            XDM 
            values, where the atoms are XDM items, rather than characters. We want to explore
            the 
            potential of such an approach. Based on prior experimental work, we propose 
            a simple markup language and an infrastructure evaluating it.
            A prototypic reference implementation is a work in 
            progress, and our main intent is to open a discussion.
            
         </div>
      </div><a name="WhyaskforXDM(ifwehaveXML)?ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e47" xml:id="why-ask-for-xdm">
         <div class="title e48">Why ask for XDM (if we have XML)?</div>
         <div class="para e49">
            Let us assume a consumer’s perspective. Scenario: some processing 
            yields a result. This might be an XML document, a sequence of XML documents, 
            or an XDM value. The last alternative is clearly the most general one, as 
            any sequence of XML documents is an XDM value. But do we really need this 
            alternative, if we consider the expressiveness of XML?
            
         </div>
         <div class="para e50">
            From a theoretical point of view, the answer is "no": whatever you can encode as an
            XDM value you 
            can translate 1:1 into an equivalent representation consisting of a single 
            XML document. For example, the following rules would suffice: (a) 
            the XDM items are represented by children of the document element; (b) 
            a dedicated type attribute on these children encodes the item type. 
            Clearly - XDM values cannot express more than a 
            single XML document, if some simple conventions are accepted. 
            We turn to the practical side and consider the 
            <div class="emphasis e51" role="ital">
               usage
            </div> of the results. 
            Can XDM under certain circumstances provide more convenient access to the 
            units we need, or can it deliver units which are a closer fit to
            what is actually needed?
            
         </div>
         <div class="para e52">
            
            <div class="emphasis e53" role="ital">
               <div class="emphasis e54" role="bold">Atomic values</div>
            </div>
            
         </div>
         <div class="para e55">
            A striking difference between XML and XDM is that the latter supports 
            atomic values. This is a concrete advantage: if the desired result 
            is one or several atomic values, then XDM can explicitly deliver 
            them as such, whereas in the case of an XML result they must be 
            extracted. Extraction requires knowledge about the result document
            structure and involves non-trivial instruments like 
            an XPath or DOM API. A further drawback of the XML variant is 
            computational overhead. Conclusion: in cases where the result 
            consists wholly of atomic values, XDM is probably the more 
            suitable format.
            
         </div>
         <div class="para e56">
            
            <div class="emphasis e57" role="ital">
               <div class="emphasis e58" role="bold">Collection-like data</div>
            </div>
            
         </div>
         <div class="para e59">
            The second difference between XML documents and XDM values is that documents are 
            logical 
            <div class="emphasis e60" role="ital">trees</div> within which everything is 
            related to everything; whereas an XDM 
            value is a 
            <div class="emphasis e61" role="ital">collection</div> of independent entities. 
            What if the result is just that, 
            conceptually, a collection? Then the main concern is fast and convenient access 
            to the individual parts, as well as the possibility to process them – e.g. 
            update them – in safe isolation. Typical examples for collection-like results are:
            
            <div class="itemizedlist e62">
               <div class="listitem e63">
                  <div class="para e64">a heterogeneous result, the parts of which are used in different ways</div>
               </div>
               <div class="listitem e65">
                  <div class="para e66">a large result, only selected parts of which are used</div>
               </div>
            </div>
            So the need for differential or selective processing calls for a collection-like 
            result. Arrays and maps come to mind, supporting index or name based access to 
            self-contained units. As we have seen, it is easy to mimic 
            collections with XML documents. This amounts to an "XML-as-a-container" approach.
            
            Under many circumstances, this may be a perfect solution. But there are issues 
            that may become important:
            
            <div class="itemizedlist e67">
               <div class="listitem e68">
                  <div class="para e69">the access to parts is XPath-based, rather than name- or index-based</div>
               </div>
               <div class="listitem e70">
                  <div class="para e71">the whole result tree must be constructed in memory (unless streaming processing is
                     used)
                  </div>
               </div>
               <div class="listitem e72">
                  <div class="para e73">local modification of the result means updating a large document</div>
               </div>
            </div>
            
         </div>
         <div class="para e74">
            XPath-based access is inconvenient, compared to name- or index-based access. It may
            
            also be less efficient. The need to construct the whole result tree is a real drawback
            
            
            <div class="emphasis e75">if</div> such a construction is not required for other reasons 
            anyway. This must not be the case. If the result is available in serialized form,
            
            then it makes a big difference if the whole result must be turned into an 
            in-memory tree, or if small, independent parts can be located and selectively 
            expanded. And the required parsing may be extremely fast if the parser is 
            able to locate the desired parts without parsing the details of the preceding parts.
            
         </div>
         <div class="para e76">
            Is XDM a good alternative? Not or not yet. The lack of structure and metadata turn
            
            XDM into an awkward format: it resembles a Java array of type 
            <div class="code e77">Object[]</div>. 
            And there 
            is not yet a serialization format available, let alone a parser to read such a 
            format. If XDM is to excel as a collection-like format, these problems – no 
            structure, no metadata, no serialization – would have to be solved.
            
         </div>
         <div class="para e78">
            
            <div class="emphasis e79" role="ital">
               <div class="emphasis e80" role="bold">Updatable result</div>
            </div>
            
         </div>
         <div class="para e81">
            In pipelined processing, it is a common requirement to receive the result of a 
            preceding step, modify it locally and pass it on to the next step. If the result 
            is a collection of self-contained parts, such local updating is easier in several
            
            aspects, compared to the updating of a monolithic document. XDM looks promising 
            for such purposes, but the difficulty of selective access – no structure, no 
            metadata – reduces the attractiveness.
            
         </div>
         <div class="para e82">
            
            <div class="emphasis e83" role="ital">
               <div class="emphasis e84" role="bold">Continuous result</div>
            </div>
            
         </div>
         <div class="para e85">
            Some resources grow continuously by appending more data. Log data are the classical
            
            example. Such data, as any other data, may be desired to be XML, so as to enable 
            XML processing. But continuous resources must not be an XML document, as it is impossible
            to 
            append data to a document, they must be inserted, which is much more difficult. 
            In this case, XDM (a lossless serialization provided) is an obvious solution, 
            as you can append items to an XDM value without difficulty.
            
         </div>
         <div class="para e86">
            
            <div class="emphasis e87" role="ital">
               <div class="emphasis e88" role="bold">Result as an XDM provider</div>
            </div>
            
         </div>
         <div class="para e89">
            XDM is the input format for XPath, XQuery and XSLT. In pipelined processing, one 
            step might produce a result which provides XDM input for another step – either 
            the value as a whole is used, or one or more subsequences of it. In this scenario,
            
            an XDM result is convenient and natural. Dependent on the type of the required 
            input XDM , an XDM result may be a better alternative than an XML result.
            
         </div>
         <div class="para e90">
            We draw a conclusion: 
            XML documents should not be the only option for encoding the result of XML 
            processing. No native representation of atomic values, the tight coupling implied
            
            by overall tree structure and the inability for plain appending must not be ignored.
            
            XDM is an interesting alternative, as it is a superset of XML and 
            addresses those issues. But XDM is, as we said, an awkward format due to lack 
            of structure and metadata. Thus we came to explore the possibility of 
            
            <div class="emphasis e91" role="ital">augmenting</div> XDM: add to it control information 
            which imparts structure and enriches the data with metadata. The goal is to 
            combine XDM’s built-in advantages – support for atomic values, collection-like 
            nature, being appendable and being a natural XDM provider – with structure and 
            metadata enabling convenient and guided access to the contents, as well as 
            simplified processing. 
            
         </div>
      </div><a name="XDMstructureANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e92" xml:id="xdm-structure">
         <div class="title e93">XDM structure</div><a name="PartitioninganXDMvalueANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e94" xml:id="partitioning-an-xdm-value">
            <div class="title e95">Partitioning an XDM value</div>
            <div class="para e96">
               Consider the situation that an XDM value should convey two code lists, each one 
               represented by a sequence of string items. XDM offers no way to tell where one 
               list ends and the other begins. Similar example: the XDM value is a sequence of 
               XML documents which represent the log data gathered during one hour - how to 
               identify the subsequence corresponding to one day of operation?
               A quick and simple solution is to insert into the XDM 
               value additional items which delimit subsequences. These items can be regarded 
               as 
               <div class="emphasis e97" role="ital">control items</div>, to be distinguished from the 
               original data items. The subsequences are parts of the XDM value which have been 
               turned into new units of information. In order to give names to these parts,
               we add a "name" attribute to the respective control item. Example:
               
            </div>
            <div class="para e98">
               
               <div class="programlisting e99" xml:space="preserve">
                  &lt;xm:part xmlns:xm=”http://www.xdml.org/ns” name=”alpha-codes”/&gt;,
                  a001,
                  a005,
                  a012,
                  
                  &lt;xm:part xmlns:xm=”http://www.xdml.org/ns” name=”beta-codes”/&gt;,
                  b002,
                  b003
                  
               </div>
               
            </div>
            <div class="para e100">
               And if the uniqueness of part names is not guaranteed, an optional "partID"
               attribute may accompany the mandatory "name" attribute.
               
            </div>
         </div><a name="ImposingtreestructureANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e101" xml:id="Imposing-tree-structure">
            <div class="title e102">Imposing tree structure</div>
            <div class="para e103">
               The shown use of control items defines parts of an XDM value in an intuitive way:
               
               the contents of a part is simply all items following the part definition and 
               preceding the next part definition, or all following items, if this was the last
               part definition. But we might also allow "complex parts" - parts containing
               parts, to be distinguished from simple parts which contain only data items. To
               encode this structural model, we choose a simple rule: the contents of a complex part
               
               ends before an item explicitly "closing" the part, whereas the contents of a 
               simple part is delimited implicitly: it ends before the next control
               item defining a new part (simple or complex) or closing the surrounding complex 
               part. Note that these parts - simple or complex - are defined in a "streaming" 
               fashion - contents are not children, but a subsequence of items delimited by 
               an item recognized as start point and another item explicitly or implicitly 
               meaning an end point (or the end of the XDM value, as a special case). 
               
            </div>
            <div class="para e104">
               In order to keep things simple, we constrain the definition of complex parts: 
               they must not contain data items outside of contained parts. In other words: 
               parts must not be mixed, their content is either a sequence of data items, 
               or a sequence of parts which may be simple or complex. An example using
               complex parts:
               
            </div>
            <div class="para e105">
               
               <div class="note e106">
                  <div class="title e107">Leaving out namespace declarations</div>
                  <div class="para e108">
                     For brevity, all further examples will leave out the namespace declaration  xmlns:xm=”http://www.xdml.org/ns".
                     
                  </div>
               </div>
               
               <div class="programlisting e109" xml:space="preserve">
                  &lt;xm:complexPart name="code-lists"/&gt;,
                  &lt;xm:part name="alpha-codes"/&gt;,
                  a001,
                  a005,
                  a012,
                  &lt;xm:part name="beta-codes"/&gt;,
                  b002,
                  b003,
                  &lt;xm:complexPartEnd/&gt;,
                  
                  &lt;xm:complexPart name="logs"/&gt;,
                  &lt;xm:part name="log0800" /&gt;,
                  &lt;log&gt;...&lt;/log&gt;,
                  &lt;xm:part name="log0900" /&gt;,
                  &lt;log&gt;...&lt;/log&gt;,
                  &lt;xm:complexPartEnd/&gt; 
                  
               </div>
               
            </div>
         </div><a name="Concept:InformationunitsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e110" xml:id="concept-information-units">
            <div class="title e111">Concept: Information units</div>
            <div class="para e112">
               We have seen how the insertion of control items can partition an XDM value 
               into parts. To denote the concept of such parts we introduce the term 
               
               <div class="emphasis e113" role="ital">information unit</div>. An information unit
               is encoded by a sequence of XDM items. According to whether whose items
               represent nested units, two kinds of information units
               are distinguished. A
               
               <div class="emphasis e114" role="ital">simple</div> information unit contains only data 
               items, but not any nested information units. A 
               <div class="emphasis e115" role="ital">
                  complex
               </div> information unit, on the other hand, contains other 
               information units, but no data items outside of nested units.
               
            </div>
            <div class="para e116">
               An information unit has the following properties:
               
               <div class="itemizedlist e117">
                  <div class="listitem e118">
                     <div class="para e119">a name</div>
                  </div>
                  <div class="listitem e120">
                     <div class="para e121">a part ID (optional)</div>
                  </div>
                  <div class="listitem e122">
                     <div class="para e123">metadata (optional)</div>
                  </div>
                  <div class="listitem e124">
                     <div class="para e125">value</div>
                  </div>
               </div>
               Name and part ID we constrain to be a QName and NCName, respectively; 
               metadata are introduced in the next section. The value is 
               
               <div class="itemizedlist e126">
                  <div class="listitem e127">
                     <div class="para e128">a sequence of data items - in the case of a simple unit</div>
                  </div>
                  <div class="listitem e129">
                     <div class="para e130">an unordered collection of information units - in the case of a complex unit</div>
                  </div>
               </div>
               
            </div>
            <div class="para e131">
               Note that this definition renders the sequence of nested information units irrelevant,
               as these
               units are associated with names. This corresponds to the modeling practice of XML
               
               attributes or JSON members.
               
            </div>
         </div>
      </div><a name="XDMmetadataANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e132" xml:id="xdm-metadata">
         <div class="title e133">XDM metadata</div><a name="Whyandhowaddmetadata?ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e134" xml:id="adding-metadata">
            <div class="title e135">Why and how add metadata?</div>
            <div class="para e136">
               We saw that control items may structure XDM values 
               into information units, which are groups of items or of other information units. 
               These units are entities 
               which do not exist in XDM values without control items. Often they will
               serve as units of processing, and it is reasonable to
               expect that different units may be subjected to different processing.
               Such considerations suggest the usefulness of metadata.
               
            </div>
            <div class="para e137">
               In fact, it is very simple to associate the units with as many metadata 
               as one would like. Every unit is preceded by a control item which amounts to
               a convenient container where to place those metadata, either as attributes 
               or as child elements. Come to think of it, the control item can be regarded 
               as a full-scale XML document which is still hardly constrained in its 
               contents: only the name of the root element and the use of a "name" and a
               "partID" attribute are specified, so far. This document is dedicated to defining
               a unit, and it is ready to be filled with metadata describing the unit.
               
            </div>
            <div class="para e138">
               Returning to the example given above, the units containing a single document of 
               log data may be associated with metadata "startTime" and "devices". 
               To accommodate such data, we can use attributes and child elements of the markup 
               item, like so:
               
            </div>
            <div class="para e139">
               
               <div class="programlisting e140" xml:space="preserve">
                  &lt;xm:complexPart name="logs"/&gt;,
                  
                  &lt;xm:part name="log0800" xmlns:e=”e.com” e:startTime="2010-12-30T08:00:00" xmlns:e="http://example.com"&gt;
                  &lt;e:devices&gt;…&lt;/e:devices&gt;
                  &lt;/xm:part&gt;,
                  &lt;log&gt;...&lt;/log&gt;, 
                  
                  &lt;xm:part name="log0900" xmlns:e=”e.com” e:startTime="2010-12-30T09:00:00" xmlns:e="http://example.com"&gt;
                  
                  &lt;e:devices&gt;…&lt;/e:devices&gt;
                  &lt;/xm:part&gt;,
                  &lt;log&gt;...&lt;/log&gt;,
                  
                  &lt;xm:complexPartEnd/&gt;
                  
               </div>
               
            </div>
         </div><a name="AmodelofmetadataANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e141" xml:id="a-component-model-of-metadata">
            <div class="title e142">A model of metadata</div>
            <div class="para e143">
               We have arrived at a very simple method how to impose structure on XDM 
               values, and we have found a slot into which one might throw any amount of 
               metadata pertaining to the emerging units. Now 
               we face two alternatives.
               We might stop here and regard the semantics of metadata as the 
               realm of proprietary extensions of our simple, general model, in the 
               same way as XML Schema allows annotation attributes. We might, for example, 
               say that any additional attributes and child elements of control items are 
               meta information, to be evaluated in a proprietary way. 
               
            </div>
            <div class="para e144">
               But we can also take a different path and attempt to arrive at a generic 
               model of XDM metadata and its processing by a responsive infrastructure. 
               This approach does not remove the option of proprietary extensions, but factors 
               them out and constrains them in a way which allows a generic "XDM parser" to 
               report them in a structured way.
               The basic principle of such a model is to distinguish metadata meant to
               control a specific processing from other metadata. The latter might be 
               called "descriptive metadata" 
               and is available for variable uses. The former – "control metadata" – has
               a defined impact on a defined processing.
               
            </div>
            <div class="para e145">
               Why should one associate data with information which controls their 
               processing? We note an interesting analogy. A key concept of object orientation
               is to associate data sets with behavior. This is similar to what we
               try to do. The behavior of objects is implemented by methods; the
               "behavior" of information units resides in control metadata which define a processing.
               Control metadata is behavior encoded as data, as opposed to methods which 
               are behavior encoded as code. To get a more practical motivation, imagine 
               writing an XQuery program and regretting the limitations of XQuery. For 
               example, one cannot call XSLT to accomplish some finalization, 
               one cannot trigger actions with side effects (like the execution of the SQL 
               just composed), and one cannot create a map object which the calling application 
               would really like to receive. In this situation there is a way out: let the query
               
               code rely on a postprocessing of the query result which is 
               <div class="emphasis e146" role="ital">
                  defined
               </div> by the query and 
               
               <div class="emphasis e147" role="ital">executed</div> by infrastructure. Our model of 
               XDM metadata amounts to a framework for this approach.
               
            </div>
            <div class="para e148">
               Obviously, control metadata and the responsive infrastructure must be modeled
               as a coherent whole. We assume that control metadata can be further grouped
               into a set of metadata components, and that a general processing model
               yet to be defined determines how actual processing depends on those
               components. But at this point of our 
               argument we want to separate the general idea from our elaboration of it, 
               as we want to protect the value of the idea from the possible weaknesses of our attempts
               
               to refine it. For the time being, we remain abstract. We assume a standard
               infrastructure governed by a set of standard metadata components.
               
            </div>
         </div>
      </div><a name="XDMLtheconceptANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e149" xml:id="xdml-the-concept">
         <div class="title e150">XDML - the concept</div>
         <div class="para e151">
            By now we have collected a set of ideas which can be assembled into 
            a comprehensive concept how XDM is turned into a 
            
            <div class="emphasis e152" role="ital">language</div> designed to encode 
            information content as well as information processing. 
            XDM is turned into a language by defining 
            and constraining the way how control items can be used within an XDM value. 
            To denote this language we use the acronym "XDML" (short for: 
            "XDM markup language"). An XDML value is then an XDM value which uses control 
            items in a way consistent with the rules of the language. 
            
         </div>
         <div class="para e153">
            We distinguish between the 
            <div class="emphasis e154" role="ital">concept</div> of an 
            XDML language and a concrete specification of the language. While we 
            offer a first proposal for such a specification, we attempt to factor 
            out basic principles. These principles should be simple and 
            intuitive to a degree which a concrete elaboration cannot attain.
            
            <div class="note e155">
               <div class="title e156">Informal style</div>
               <div class="para e157">
                  For the sake of readability, we do not embark 
                  on any formal definition. Rather, we want to convey the definition in a 
                  natural style which concentrates on ideas and intent at the expense of formal 
                  exactness and completeness.
                  
               </div>
            </div>
            
         </div><a name="GoalsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e158" xml:id="goals">
            <div class="title e159">Goals</div>
            <div class="para e160">
               XDML is a set of rules how XDM values can be designed in order to become more 
               useful entities as compared to ordinary XDM values. The key idea is to insert
               into the XDM values control information which guides the interpretation and
               processing of the data. An XDM value thus augmented is called an XDML value.
               Its usefulness is provided by an XDML processor, which
               is a generic program evaluating the control information.
               XDML addresses the 
               following major goals:
               
               <div class="itemizedlist e161">
                  <div class="listitem e162">
                     <div class="para e163">to structure XDM values into nestable parts</div>
                  </div>
                  <div class="listitem e164">
                     <div class="para e165">to enable name-based access to XDM parts</div>
                  </div>
                  <div class="listitem e166">
                     <div class="para e167">to associate XDM parts with metadata</div>
                  </div>
                  <div class="listitem e168">
                     <div class="para e169">to process XDM parts as guided by their metadata</div>
                  </div>
               </div>
               
            </div>
         </div><a name="StructuremodelANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e170" xml:id="structure-model">
            <div class="title e171">Structure model</div>
            <div class="para e172">
               XDML structures XDM values by 
               <div class="emphasis e173" role="ital">grouping</div> 
               the XDM items. The resulting groups are units of usage in a broad sense: conceptual
               units of 
               information, units of data retrieval and units of data processing. 
               Item groups are called 
               <div class="emphasis e174" role="ital">information units</div>. 
               The grouping approach distinguishes:
               
               <div class="itemizedlist e175">
                  <div class="listitem e176">
                     <div class="para e177">simple information units – do not contain other units</div>
                  </div>
                  <div class="listitem e178">
                     <div class="para e179">complex information units – contain other units</div>
                  </div>
               </div>
               and introduces the following constraints:
               
               <div class="itemizedlist e180">
                  <div class="listitem e181">
                     <div class="para e182">complex units do not contain data 
                        items which are not contained by nested units
                     </div>
                  </div>
                  <div class="listitem e183">
                     <div class="para e184">the information content of a complex unit is regarded as unordered 
                        collection of units
                     </div>
                  </div>
               </div>
               
            </div>
         </div><a name="MetadatamodelANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e185" xml:id="metadata-model">
            <div class="title e186">Metadata model</div>
            <div class="para e187">
               Information units can be associated with metadata. XDML uses a simple metadata model
               which
               
               <div class="itemizedlist e188">
                  <div class="listitem e189">
                     <div class="para e190">distinguishes between descriptive data and control data</div>
                  </div>
                  <div class="listitem e191">
                     <div class="para e192">distributes control data into distinct sets, called metadata components</div>
                  </div>
                  <div class="listitem e193">
                     <div class="para e194">defines how metadata components control the processing</div>
                  </div>
               </div>
               
            </div>
         </div><a name="ProcessingmodelANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e195" xml:id="processing-model">
            <div class="title e196">Processing model</div>
            <div class="para e197">
               XDML values are submitted to an XDML processor
               which evaluates the control information and is responsible for reporting
               and processing the data
               accordingly. The processor is viewed as the sum of two components:
               
               <div class="itemizedlist e198">
                  <div class="listitem e199">
                     <div class="para e200">an XDML parser</div>
                  </div>
                  <div class="listitem e201">
                     <div class="para e202">XDML engine</div>
                  </div>
               </div>
               An XDML parser delivers the information encoded as 
               XDML value in a structured way. The engine enables other kinds of
               processing. A concrete specification of XDML must define a
               processing model governing the engine and its control by
               metadata and user actions (API calls).
               
            </div>
         </div><a name="EncodingprinciplesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e203" xml:id="encoding-principles">
            <div class="title e204">Encoding principles</div>
            <div class="para e205">
               XDML defines the syntax and semantics of control information embedded in
               XDM values. We propose four general encoding principles:
               
               <div class="itemizedlist e206">
                  <div class="listitem e207">
                     <div class="para e208">control information is encoded by control items, to be 
                        distinguished from data items
                     </div>
                  </div>
                  <div class="listitem e209">
                     <div class="para e210">a control item is an XDM item which is an element information
                        item in a particular namespace
                     </div>
                  </div>
                  <div class="listitem e211">
                     <div class="para e212">each information unit is associated with a control item defining
                        the unit in terms of metadata
                     </div>
                  </div>
                  <div class="listitem e213">
                     <div class="para e214">metadata components are not mixed - each component is encoded 
                        by a distinct (possibly empty) set of elements
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e215">
               A concrete specification of XDML must elaborate these principles into a
               concrete encoding model. This model must define the names and structure
               of control items, and it must define the mapping of control 
               items onto content items ("where does the unit begin and end?").
               
            </div>
         </div>
      </div><a name="XDMLconcreteproposalANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e216" xml:id="xdml-concrete-proposal">
         <div class="title e217">XDML - concrete proposal</div>
         <div class="para e218">
            The step from XDML as a concept to a concrete specification requires:
            
            <div class="itemizedlist e219">
               <div class="listitem e220">
                  <div class="para e221">A concrete encoding model</div>
               </div>
               <div class="listitem e222">
                  <div class="para e223">Specification of an XDML parser</div>
               </div>
               <div class="listitem e224">
                  <div class="para e225">Specification of a processing model</div>
               </div>
            </div>      
            
         </div>
         <div class="para e226">
            
            <div class="note e227">
               <div class="title e228">On language binding</div>
               <div class="para e229">
                  The XDML user communicates with the XDML processor via an API. 
                  A processor implementation is therefore 
                  bound to a programming language, whereas the concept of an XDML processor
                  is language neutral. Our ongoing implementation work uses Java, 
                  and API code snippets in this paper use Java as well. This representation 
                  is chosen for convenience sake and does not mandate Java in 
                  preference to other languages.
                  
               </div>
            </div>
            
         </div>
         <div class="para e230">      
            
            <div class="emphasis e231" role="ital">
               <div class="emphasis e232" role="bold">Encoding model</div>
            </div>
            
         </div>
         <div class="para e233">
            We adopt the rules applied in our illustrative examples:
            
            <div class="itemizedlist e234">
               <div class="listitem e235">
                  <div class="para e236">Control items contain elements in the XDML namespace: 
                     http://www.xdml.org/ns
                  </div>
               </div>
               <div class="listitem e237">
                  <div class="para e238">Simple information units are preceded by an 
                     <div class="code e239">&lt;xm:part&gt;</div> item
                  </div>
               </div>
               <div class="listitem e240">
                  <div class="para e241">Complex information units are delimited by 
                     <div class="code e242">&lt;xm:complexPart&gt;</div> and 
                     
                     <div class="code e243">&lt;xm:complexPartEnd&gt;</div> items
                  </div>
               </div>
               <div class="listitem e244">
                  <div class="para e245">Name and partID of an information unit are given by the 
                     "name" and "partID" attribute of an 
                     <div class="code e246">&lt;xm:part&gt;</div> or 
                     
                     <div class="code e247">&lt;xm:complexPart&gt;</div> item
                  </div>
               </div>
               <div class="listitem e248">
                  <div class="para e249">Descriptive metadata are encoded as attributes or child 
                     elements of an 
                     <div class="code e250">&lt;xm:part&gt;</div> or 
                     
                     <div class="code e251">&lt;xm:complexPart&gt;</div> item; they 
                     must be in a namespace but must not be in the XDML namespace
                  </div>
               </div>
            </div>
            We extend the model of 
            <div class="code e252">&lt;xm:part&gt;</div> items by three further
            standard attributes. Attribute "private", if containing the value "true",
            indicates that the unit is used to assist in the processing of other units
            and should be ignored by the XDML user. Two other attributes convey type information
            and
            thus facilitate the translation of XDM values into the data model of the processor
            language:
            
            <div class="itemizedlist e253">
               <div class="listitem e254">
                  <div class="para e255">"type" - represents the data type of the information unit</div>
               </div>
               <div class="listitem e256">
                  <div class="para e257">
                     "finalType" - represents the data type of the information unit 
                     after 
                     <div class="emphasis e258" role="ital">finalization</div>
                     
                  </div>
               </div>
            </div>
            Finalization is a processing which is part of the proposed
            processing model and which may change the data type of the unit (see 
            
            <div class="xref e259" linkend="execution-context-finalize"></div> for
            details). The following example shows two information units containing 
            a sequence of nodes and a string, respectively, as indicated by the type attributes:
            
            <div class="programlisting e260" xml:space="preserve">
               &lt;xm:part name="logs" type="nodes"/&gt;,
               &lt;log&gt;...&lt;/log&gt;,
               &lt;log&gt;...&lt;/log&gt;,
               &lt;log&gt;...&lt;/log&gt;,
               
               &lt;xm:part name="query_getSummary" type="string" private="true"/&gt;,
               xquery version="1.0"
               ...
               
            </div>
            
         </div>
         <div class="para e261">      
            
            <div class="emphasis e262" role="ital">
               <div class="emphasis e263" role="bold">XDML parser</div>
            </div>
            
         </div>
         <div class="para e264">
            The parser has to report data in accordance to a data model which in turn
            depends on the processing model. Therefore the parser will be dealt with later,
            after explaining the 
            processing model and in the context of describing the various APIs of the XDML processor.
            
            
         </div>
         <div class="para e265">      
            
            <div class="emphasis e266" role="ital">
               <div class="emphasis e267" role="bold">Processing model</div>
            </div>
            
         </div>
         <div class="para e268">
            The processing model is based on three concepts which the following 
            sections will explain in detail:
            
            <div class="itemizedlist e269">
               <div class="listitem e270">
                  <div class="para e271">Operation - any processing can be decomposed into distinct operations</div>
               </div>
               <div class="listitem e272">
                  <div class="para e273">Method - unit of processing composed of one or more operations</div>
               </div>
               <div class="listitem e274">
                  <div class="para e275">Execution context - it specifies when to invoke a method and what to do with
                     the return value
                  </div>
               </div>
            </div>
            
         </div><a name="XDMLoperationsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e276" xml:id="xdml-operations">
            <div class="title e277">XDML operations</div>
            <div class="para e278">
               Data processing provided by the XDML processor is modeled as the execution of discrete
               operations, 
               collectively called XDML operations. XDML operations thus serve as basic unit of data
               processing: 
               an operation is either executed as a whole or not at all; and any processing can be
               decomposed 
               into the execution of one or more operations. An operation is supplied with input
               information, 
               it may produce output information and it may have side-effects. Output information
               is the return 
               value of the operation. Input information comprises a data context and a request message.
               
               
            </div>
            <div class="para e279">
               The 
               <div class="emphasis e280" role="ital">data context</div> can be regarded as the main input, 
               comparable to the context item of XQuery, the context node of XSLT or the 
               primary input port of XProc. The data context of an XDML operation is (usually) the
               value 
               of an information unit (as represented by the implementation language of the XDML
               
               processor). Therefore one might say that an XDML operation is applied to an information
               
               unit, or that an information unit is processed by an XDML operation. 
               
            </div>
            <div class="para e281">
               The 
               <div class="emphasis e282" role="ital">request message</div> consists of named parameters, 
               comparable to the external variables of XQuery and the global parameters of XSLT.
               
               In the case of XProc, the corresponding input sources would be non-primary input ports,
               
               options and parameters. 
               
            </div>
            <div class="para e283">
               The 
               <div class="emphasis e284" role="ital">return value</div> of an operation may be an 
               instance of any type supported by the implementation language of the XDML 
               processor. Note that this value may or may not have a default mapping to 
               an XDM value. In other words: operations may produce a result which is not 
               related to the XDM model, e.g. an object of a custom class.
               
            </div>
            <div class="para e285">
               The XDML provider defines the processing of an information unit by 
               associating it with methods. A method is a processing defined
               as the sequential execution of one or several operations. It is
               therefore encoded as one or more request messages and 
               the choice of a so-called 
               execution context. The context determines when to invoke the method and 
               what to do with the return value. Method definition is described in 
               
               <div class="xref e286" linkend="method-definitions"></div>. 
               The current section describes XDML operations in general terms, independently of 
               their use in a particular execution context. Main aspects are the data model 
               of input and output, the encoding of input by request messages, the standard 
               library of XDML operations and the extensibility by user-defined operations.
               
            </div><a name="DatamodelofinputandoutputANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e287" xml:id="data-model-of-input-and-output">
               <div class="title e288">Data model of input and output</div>
               <div class="para e289">
                  An XDML operation consumes input information, which comprises:
                  
                  <div class="itemizedlist e290">
                     <div class="listitem e291">
                        <div class="para e292">data context</div>
                     </div>
                     <div class="listitem e293">
                        <div class="para e294">request message</div>
                     </div>
                  </div>
                  
               </div>
               <div class="para e295">
                  The 
                  <div class="emphasis e296" role="ital">data context</div> of an XDML operation 
                  is (usually) the value of an information unit. The present version of XDML 
                  constrains XDML operations to process simple information units only. 
                  The data context is therefore usually an XDM value, or more precisely: the 
                  implementation language’s representation of an XDM value. But there are
                  two exceptions to the rules. First, the data context may also be the
                  return value of another XDML operation (preceding it within a method, see
                  
                  <div class="xref e297" linkend="methods"></div>). Second, the value of a simple information
                  unit may be an instance of a data type without default mapping to XDM 
                  (resulting
                  from unit translation, see 
                  <div class="xref e298" linkend="execution-context-translate"></div>).
                  
               </div>
               <div class="para e299">
                  The 
                  <div class="emphasis e300" role="ital">request message</div> is modeled as follows:
                  
                  <div class="itemizedlist e301">
                     <div class="listitem e302">
                        <div class="para e303">
                           the message comprises two parameter sets: statically known 
                           parameters and dynamic parameters
                           
                        </div>
                     </div>
                     <div class="listitem e304">
                        <div class="para e305">each set contains zero or more named parameters</div>
                     </div>
                     <div class="listitem e306">
                        <div class="para e307">a parameter name is a QName</div>
                     </div>
                     <div class="listitem e308">
                        <div class="para e309">
                           a parameter value has one of these types: string, node, or a 
                           sequence of nodes
                           
                        </div>
                     </div>
                  </div>
                  The model is easily recognized when looking at the API representation of a request
                  
                  message:
                  
                  <div class="programlisting e310" xml:space="preserve">
                     interface OperationRequest {
                     QName   operationName();
                     String  resultType();
                     
                     String  getStringParam(QName name);
                     Node    getNodeParam(QName name);
                     Node[]  getNodesParam(QName name);
                     
                     String  getDynamicStringParam(QName name);
                     Node    getDynamicNodeParam(QName name);
                     Node[]  getDynamicNodesParam(QName name);
                     
                     QName[] getParamNames();
                     QName[] getDynamicParamNames();
                     }
                     
                  </div>
                  Note that this model follows the approach taken by the XProc 
                  language rather closely: the set of statically known parameters 
                  corresponds to the non-primary input ports and options of XProc 
                  steps, while the set of dynamic parameters corresponds to XProc’s 
                  parameter port. Dynamic parameters are required, for example, to 
                  enable operations which execute arbitrary stylesheets: 
                  the names of stylesheet parameters cannot be anticipated and may 
                  collide with the names of statically known parameters.
                  
               </div>
               <div class="para e311">
                  Output information is the 
                  <div class="emphasis e312" role="ital">return value</div>
                  of the operation. An operation may or may not produce a return value. 
                  The return value can be an instance of any data type supported 
                  by the implementation language: it is not constrained to have a default 
                  mapping to an XDM value. It may, for example, be an object of a custom class.
                  
               </div>
            </div><a name="RequestmessagesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e313" xml:id="request-messages">
               <div class="title e314">Request messages</div>
               <div class="para e315">
                  The XDML provider encodes the input information of an operation by an
                  element information item representing a request message. This message 
                  is implicitly accompanied by a data context, which is either the value 
                  of the surrounding information unit or the return value of a
                  preceding operation.
                  
               </div>
               <div class="para e316">
                  The request message has the following parts:
                  
                  <div class="itemizedlist e317">
                     <div class="listitem e318">
                        <div class="para e319">the root element representing the message as a whole</div>
                     </div>
                     <div class="listitem e320">
                        <div class="para e321">attributes encoding statically known parameters of type “string”</div>
                     </div>
                     <div class="listitem e322">
                        <div class="para e323">
                           child elements encoding statically known parameters of type “node” 
                           or “node sequence”
                           
                        </div>
                     </div>
                     <div class="listitem e324">
                        <div class="para e325">
                           an optional child element 
                           <div class="code e326">&lt;xm:params&gt;</div> 
                           representing the dynamic parameters
                           
                        </div>
                     </div>
                     <div class="listitem e327">
                        <div class="para e328">
                           the attributes of 
                           <div class="code e329">&lt;xm:params&gt;</div> encoding dynamic 
                           parameters of type “string”
                           
                        </div>
                     </div>
                     <div class="listitem e330">
                        <div class="para e331">
                           child elements of 
                           <div class="code e332">&lt;xm:params&gt;</div> encoding dynamic parameters 
                           of type “node” or “node sequence”
                           
                        </div>
                     </div>
                  </div>
                  The name of the root element equals the operation name, and the names of 
                  attributes and elements representing parameters correspond to the parameter 
                  names. Consider this example:
                  
                  <div class="programlisting e333" xml:space="preserve">
                     &lt;submitToXSLT serialize=”true”&gt;
                     &lt;stylesheet&gt;
                     &lt;xsl:transform …&gt;…&lt;/xsl:transform&gt;
                     &lt;/stylesheet&gt;
                     &lt;xm:params verbosity=”1”&gt;
                     &lt;weatherData&gt;&lt;weather&gt;…&lt;/weather&gt;&lt;/weatherData&gt;
                     &lt;/xm:params&gt;
                     &lt;/submitToXSLT&gt;
                     
                  </div>
                  The operation "submitToXSLT" is invoked with two statically 
                  known parameters (“serialize” and “stylesheet”) and two dynamic 
                  parameters (“verbosity” and “weatherData”). In both 
                  parameter groups there is a string parameter as well as a node parameter. 
                  The operation executes the stylesheet supplied as parameter “stylesheet” 
                  and passes to it two stylesheet parameters, one with name “verbosity” and 
                  type 
                  <div class="code e334">xs:string</div>, the other with name “weatherData”  and 
                  type 
                  <div class="code e335">node()</div>. The 
                  operation also passes to the stylesheet the value of the 
                  surrounding information unit as context node.
                  
               </div>
            </div><a name="SpecialparametervaluesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e336" xml:id="special-parameter-values">
               <div class="title e337">Special parameter values</div>
               <div class="para e338">
                  A request message may reference
                  
                  <div class="itemizedlist e339">
                     <div class="listitem e340">
                        <div class="para e341">values supplied by the XDML user</div>
                     </div>
                     <div class="listitem e342">
                        <div class="para e343">values provided by other information units</div>
                     </div>
                  </div>
                  
               </div><a name="ParametervaluessuppliedbytheXDMLuserANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e344" xml:id="parameter-values-supplied-by-the-xdml-user">
                  <div class="title e345">Parameter values supplied by the XDML user</div>
                  <div class="para e346">
                     A request message may reference values supplied by the XDML user. Values 
                     can be supplied as the execution of XDML operations is always triggered 
                     by an API call of the XDML user (see 
                     
                     <div class="xref e347" linkend="xdml-user-perspective"></div>). A reference to a 
                     supplied value is encoded by the expression
                     
                  </div>
                  <div class="para e348">
                     $arg{argName}
                     
                  </div>
                  <div class="para e349">
                     which is resolved to the value of an invocation argument with name 
                     “argName”. For example, the following request message binds two 
                     dynamic parameters, “verbosity” and “weatherData” to values supplied 
                     by the XDML user:
                     
                     <div class="programlisting e350" xml:space="preserve">
                        &lt;submitToXSLT serialize=”true”&gt;
                        &lt;stylesheet&gt;
                        &lt;xsl:transform …&gt;…&lt;/xsl:transform&gt;
                        &lt;/stylesheet&gt;
                        &lt;xm:params verbosity=”$arg{v}”&gt;
                        &lt;weatherData&gt;$arg{weatherData}&lt;/weatherData&gt;
                        &lt;/xm:params&gt;
                        &lt;/submitToXSLT&gt;
                        
                     </div>
                     Note that the parameter name used by the request message and the 
                     argument name expected from the XDML user need not be the same: 
                     in the example, the request parameter “verbosity” is bound to 
                     invocation argument “v”. The XDML provider’s choice of referenced 
                     argument names (in the example – “v” and “weatherData”) defines 
                     the “signature” of the operation from the XDML user’s perspective.
                     
                  </div>
               </div><a name="ParametervaluesprovidedbyotherinformationunitsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e351" xml:id="parameter-values-provided-by-other-information-units">
                  <div class="title e352">Parameter values provided by other information units</div>
                  <div class="para e353">
                     A request parameter may reference the value of another information 
                     unit. Such references are encoded by the expression
                     
                  </div>
                  <div class="para e354">
                     $part{partId}
                     
                  </div>
                  <div class="para e355">
                     which is resolved to the value of the information unit with part ID
                     “partId”. In the following example, parameter “stylesheet” is set 
                     to the value of an information unit with the part ID “toHTML”:
                     
                     <div class="programlisting e356" xml:space="preserve">
                        &lt;submitToXSLT serialize=”true”&gt;
                        &lt;stylesheet&gt;$part{toHTML}&lt;/stylesheet&gt;
                        …
                        &lt;/submitToXSLT&gt;
                        
                     </div>
                     
                  </div>
               </div>
            </div><a name="LibraryofstandardoperationsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e357" xml:id="library-of-standard-operations">
               <div class="title e358">Library of standard operations</div>
               <div class="para e359">
                  The XDML processor offers a library of available XDML operations. 
                  The library comprises 
                  
                  <div class="itemizedlist e360">
                     <div class="listitem e361">
                        <div class="para e362">standard operations which are built-in</div>
                     </div>
                     <div class="listitem e363">
                        <div class="para e364">proprietary operations which have been registered at runtime</div>
                     </div>
                  </div>
                  See 
                  <div class="xref e365" linkend="extensibility"></div> for details about the registration facility. Some examples of 
                  standard operations are:
                  
               </div>
               <div class="para e366">
                  
                  <div class="table e367">
                     <div class="caption e368">
                        <div class="para e369">
                           
                           <div class="emphasis e370" role="bold">
                              <div class="emphasis e371" role="ital">Some standard XDML operations.</div>
                           </div>
                           
                        </div>
                     </div>
                     <div class="metaBox e372"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e692').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e692" class="metaSource" style="display:none;">                
                           &lt;col<span class="metaAttribute">align='left'
                              </span><span class="metaAttribute">class='e372'
                              </span><span class="metaAttribute">span='1'
                              </span><span class="metaAttribute">valign='top'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                     <div class="metaBox e373"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e693').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e693" class="metaSource" style="display:none;">                
                           &lt;col<span class="metaAttribute">align='left'
                              </span><span class="metaAttribute">class='e373'
                              </span><span class="metaAttribute">span='1'
                              </span><span class="metaAttribute">valign='top'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                     <div class="thead e374">
                        <div class="tr e375" valign="top">
                           <div class="th e376" align="left" valign="top">Operation name</div>
                           <div class="th e377" align="left" valign="top">Description</div>
                        </div>
                     </div>
                     <div class="tbody e378">
                        <div class="tr e379" valign="top">
                           <div class="td e380">createMapFromStrings</div>
                           <div class="td e381">
                              Creates a map object, using as input a sequence of strings read from the data context.
                              
                           </div>
                        </div>
                        <div class="tr e382" valign="top">
                           <div class="td e383">createPropertiesFromStrings</div>
                           <div class="td e384">
                              Creates a 
                              <div class="code e385">Properties</div> object, using as input a sequence of strings read from the data context.
                              
                           </div>
                        </div>
                        <div class="tr e386" valign="top">
                           <div class="td e387">execAsSQL</div>
                           <div class="td e388">
                              Regards the data context as a sequence of SQL expressions and executes them.
                              
                           </div>
                        </div>
                        <div class="tr e389" valign="top">
                           <div class="td e390">execAsPerl</div>
                           <div class="td e391">
                              Regards the data context as a Perl script and executes it.
                              
                           </div>
                        </div>
                        <div class="tr e392" valign="top">
                           <div class="td e393">execAsXQuery</div>
                           <div class="td e394">
                              Regards the data context as an XQuery program and executes it.
                              
                           </div>
                        </div>
                        <div class="tr e395" valign="top">
                           <div class="td e396">execAsXSLT</div>
                           <div class="td e397">
                              Regards the data context as an XSLT stylesheet and executes it.
                              
                           </div>
                        </div>
                        <div class="tr e398" valign="top">
                           <div class="td e399">execAsXProc</div>
                           <div class="td e400">
                              Regards the data context as an XProc pipeline and executes it.
                              
                           </div>
                        </div>
                        <div class="tr e401" valign="top">
                           <div class="td e402">readDocument</div>
                           <div class="td e403">Reads a document into a node object, reading the document URI from the data context.</div>
                        </div>
                        <div class="tr e404" valign="top">
                           <div class="td e405">readTextFile</div>
                           <div class="td e406">Reads a text file into a string, reading the file URI from the data context.</div>
                        </div>
                        <div class="tr e407" valign="top">
                           <div class="td e408">sendFTP</div>
                           <div class="td e409">Sends the data context per ftp.</div>
                        </div>
                        <div class="tr e410" valign="top">
                           <div class="td e411">sendSOAP</div>
                           <div class="td e412">Regards the data context as the payload of a SOAP request, sends it
                              and returns the payload of the response.
                           </div>
                        </div>
                        <div class="tr e413" valign="top">
                           <div class="td e414">submitToXQuery</div>
                           <div class="td e415">
                              Executes an XQuery program and passes the data context to it
                              as context item.
                              
                           </div>
                        </div>
                        <div class="tr e416" valign="top">
                           <div class="td e417">submitToXSLT</div>
                           <div class="td e418">
                              Executes an XSLT stylesheet and passes the data context to it
                              as context node.
                              
                           </div>
                        </div>
                        <div class="tr e419" valign="top">
                           <div class="td e420">submitToXProc</div>
                           <div class="td e421">
                              Executes an XProc  pipeline and passes the data context to it
                              as primary input.
                              
                           </div>
                        </div>
                        <div class="tr e422" valign="top">
                           <div class="td e423">validate</div>
                           <div class="td e424">Validates the data context with an XML Schema.</div>
                        </div>
                        <div class="tr e425" valign="top">
                           <div class="td e426">writeDocument</div>
                           <div class="td e427">Stores the data context as an XML document.</div>
                        </div>
                        <div class="tr e428" valign="top">
                           <div class="td e429">writeTextFile</div>
                           <div class="td e430">Stores the data context as a text file.</div>
                        </div>
                     </div>
                  </div>
                  
               </div>
            </div><a name="ExtensibilityANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e431" xml:id="extensibility">
               <div class="title e432">Extensibility</div>
               <div class="para e433">
                  The XMDL processor offers a generic mechanism for extending the library 
                  of XDML operations at runtime. This is achieved by an interface for 
                  registering proprietary operations:
                  
                  <div class="programlisting e434" xml:space="preserve">
                     interface XDMLRegistry {
                     void registerXDMLOperations(XDMLOperations impls);
                     }
                     
                  </div>
                  On registration, an implementation must be supplied as an implementation 
                  of the interface 
                  <div class="code e435">XDMLOperations</div>. It represents the 
                  invocation of an operation as a method with a generic signature: 
                  
                  <div class="programlisting e436" xml:space="preserve">
                     interface XDMLOperations {
                     QName[] getOperationNames();
                     void    execute(OperationRequest requestMsg,
                     DataUnit         dataContext,
                     DataUnit         returnValue) 
                     throws XDMLException;
                     }
                     
                  </div>
                  Implementing proprietary operations is a straightforward task:
                  interfaces 
                  <div class="code e437">OperationRequest</div> and 
                  <div class="code e438">DataUnit</div>
                  provide access to
                  operation name, request parameters and data context, respectively.
                  The return value is inserted into an instance of interface 
                  <div class="code e439">DataUnit</div> 
                  which is either supplied from without or instantiated within the
                  implementation.
                  
               </div>
            </div>
         </div><a name="MethodsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e440" xml:id="methods">
            <div class="title e441">Methods</div>
            <div class="para e442">
               In most cases, a desired processing can be provided by a single operation, in
               other words: the unit of intended processing matches the basic unit of
               implemented functionality. Sometimes, however, a processing may
               require two or more operations to be executed. As a generalization, our 
               processing model defines the unit of intended processing as a sequence 
               of one or more operations. This unit we call a 
               <div class="emphasis e443" role="ital">method</div>. 
               Assuming sequential execution of the operations,
               one may wish for flexibility concerning the data context: shall the second
               operation use, like the first one, the value of the information unit, or
               shall it use the return value of the preceding operation? This flexibility
               is easy to implement, and it is easy to encode:
               
               <div class="itemizedlist e444">
                  <div class="listitem e445">
                     <div class="para e446">
                        represent the method by a sequence of request messages
                        
                     </div>
                  </div>
                  <div class="listitem e447">
                     <div class="para e448">
                        add to request messages an optional attribute indicating any non-default use of the
                        data context
                        
                     </div>
                  </div>
               </div>
               We introduce an attribute "dataContext" which may be attached to a request message
               in order
               to encode where the actual data context is found. Rules:
               
               <div class="itemizedlist e449">
                  <div class="listitem e450">
                     <div class="para e451">
                        attribute missing =&gt; first operation uses the value of the information unit, 
                        later operations use the return value of the preceding operation
                        
                     </div>
                  </div>
                  <div class="listitem e452">
                     <div class="para e453">
                        attribute value is "." =&gt; use the value of the information unit
                        
                     </div>
                  </div>
                  <div class="listitem e454">
                     <div class="para e455">
                        attribute value is an NCName =&gt; use the return value of the preceding operation with
                        that operation ID (attribute "opID")
                        
                     </div>
                  </div>
               </div>
               Note that the value of the information unit is always the data context for the method
               "as a whole" (for
               its first operation), but not necessarily for each of its operations. Every method
               is therefore
               bound to a particular information unit, as in object oriented programs every instance
               method
               is bound to a particular object.
               
            </div>
            <div class="para e456">
               The return value of a method is the return value of its last (or only) operation,
               unless another operation has been marked with a special 
               attribute ("methodReturnValue") to yield the return value.
               
            </div>
         </div><a name="ExecutioncontextANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e457" xml:id="execution-context">
            <div class="title e458">Execution context</div>
            <div class="para e459">
               When defining a method, the control data provide 
               
               <div class="itemizedlist e460">
                  <div class="listitem e461">
                     <div class="para e462">one or more request messages</div>
                  </div>
                  <div class="listitem e463">
                     <div class="para e464">the execution context</div>
                  </div>
               </div>
               The execution context specifies (a) when to execute the method and 
               (b) what to do with the return value (if any). Note the necessity of 
               specifying such an execution context, as the method will be invoked 
               after the XDML value is delivered to the XDML user.
               
            </div>
            <div class="para e465">
               We distinguish four types of execution context, which, taken together, 
               define the processing model of XDML. Future versions of XDML may add 
               further execution contexts. Each context may be viewed as the intent 
               with which the XDML provider defines the method. He may want to 
               
               <div class="itemizedlist e466">
                  <div class="listitem e467">
                     <div class="para e468">finalize the value of the information unit</div>
                  </div>
                  <div class="listitem e469">
                     <div class="para e470">execute actions</div>
                  </div>
                  <div class="listitem e471">
                     <div class="para e472">enable evaluations</div>
                  </div>
                  <div class="listitem e473">
                     <div class="para e474">define non-standard representations</div>
                  </div>
               </div>
               
            </div><a name="Executioncontext&#34;finalize&#34;ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e475" xml:id="execution-context-finalize">
               <div class="title e476">Execution context "finalize"</div>
               <div class="para e477">
                  Sometimes the XDML provider may want to supply intermediary data and 
                  leave the finalization to postprocessing. There are three main reasons 
                  for this pattern: (a) the finalization requires some processing resource 
                  not available to the XDML provider, but available to an XDML operation; 
                  (b) the finalization is deferred as it may turn out to be unnecessary; 
                  (c) the finalization requires parameter values to be supplied by the 
                  XDML user at invocation time.
                  
               </div>
               <div class="para e478">
                  For example, the data which an information unit should ultimately 
                  supply may be obtained by submitting intermediary data to an XSLT 
                  stylesheet. However, if the XDML provider is an XQuery program, it 
                  cannot execute the XSLT processing. In this case, the XDML provider 
                  may provide the intermediate data and bind the information unit to 
                  the stylesheet execution. The execution context “finalize” ensures 
                  that the finalization takes place as soon as the XDML user confirms 
                  that finalizations are to be executed. The confirmation may be global 
                  or restricted to a particular information unit. The code
                  
                  <div class="programlisting e479" xml:space="preserve">
                     XDMLProcessor xp = XDMLProcessorFactory.newXDMLProcessor();
                     XQSequence xdm = ...;
                     XDML xdml = xp.newXDML(xdm);
                     xdml.finalize();
                     
                  </div>
                  loads an XDML value and triggers any finalizations, whereas
                  
                  <div class="programlisting e480" xml:space="preserve">
                     …
                     xdml.finalize(“conferenceProgram”);
                     
                  </div>
                  triggers the finalization of information unit "conferenceProgram" 
                  only. In general, finalization is achieved by executing a method
                  (one or more operations) defined for that purpose and replacing the value 
                  of the unit by the return value of the method.
                  
               </div>
               <div class="para e481">
                  To give a second example, the intermediary submitted to finalization 
                  may be the payload of a SOAP request. The finalization may then be 
                  achieved by operation “sendSOAP”, which wraps the unit data in a 
                  SOAP envelope, sends the request, receives the response and returns 
                  its payload. Using this operation in the execution context “finalize” 
                  will ensure that the information unit supplies the response payload,
                  rather than the request payload.
                  
               </div>
            </div><a name="Executioncontext&#34;execute&#34;ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e482" xml:id="execution-context-execute">
               <div class="title e483">Execution context "execute"</div>
               <div class="para e484">
                  To create data may be less than what the XDML provider wants to do: 
                  his intent may be to execute actions related to the data. In some 
                  cases, the data are only a means to an end which is such an action: 
                  the data may represent, for example, a sequence of SQL statements, and the 
                  action consist of their execution. In other cases, the data may be valuable as 
                  such, but additional action is mandatory – for example, storage in 
                  a file or in a database. In both situations, overall processing may 
                  be simplified if the XDML provider may define the actions to be 
                  executed, specifying all details, rather than rely on the XDML user 
                  to know which actions to trigger and which details to specify.
                  
               </div>
               <div class="para e485">
                  The execution context “execute” takes care of this scenario. The 
                  XDML user does not have to know which operations are executed. 
                  He has to confirm, however, that any defined actions shall indeed 
                  be executed. His responsibility is restricted to giving or refusing 
                  “green light” to the actions defined by the XDML provider. The 
                  confirmation may be global:
                  
                  <div class="programlisting e486" xml:space="preserve">
                     …
                     xdml.execute();
                     
                  </div>
                  or restricted to a particular information unit:
                  
                  <div class="programlisting e487" xml:space="preserve">
                     …
                     xdml.execute(“cleanupScript”);
                     
                  </div>
                  The XDML user does not receive a return value. Therefore, the 
                  operations commanded by the XDM provider are always actions, 
                  rather than evaluations: operations motivated by their side 
                  effects, not by the production of a result value.
                  
               </div>
            </div><a name="Executioncontext&#34;enable&#34;ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e488" xml:id="execution-context-enable">
               <div class="title e489">Execution context "enable"</div>
               <div class="para e490">
                  A different intent of the XDML provider might be to make 
                  certain evaluations or actions available, but leave it to the XDML 
                  user if the processing is actually performed. An example 
                  might be an evaluation which extracts some values from an
                  XML document, which might or might not be desired. The 
                  execution context “enable” supports such intent: the evaluation 
                  is only executed if the XDML user demands it explicitly, 
                  identifying it by a name which the XDML provider has assigned 
                  to it. In this example code:
                  
                  <div class="programlisting e491" xml:space="preserve">
                     String[] locations = (String[]) xdml.invoke(“waterReport”, “getLocations”);
                     
                  </div>
                  the XDML user invokes an evaluation which is labeled "getLocations" 
                  and bound to information unit "waterReport". 
                  The name identifies a method (one or more operations) defined
                  for this unit and associated with the execution context "enable". 
                  The method has 
                  a signature, as implied by the use of $arg{argName} 
                  references in the operation requests. The following
                  method definitions create two XDML methods, one without parameters
                  and the other with a string parameter "location". The methods
                  are implemented by one and two operations, respectively:
                  
                  <div class="programlisting e492" xml:space="preserve">
                     &lt;xm:part name="waterReport" type="node"&gt;
                     &lt;xm:interface&gt;
                     &lt;xm:method name="getLocations" returnType="strings"&gt;
                     &lt;submitToXQuery&gt;
                     &lt;query&gt;distinct-values(//location/@name)&lt;/query&gt;
                     &lt;/submitToXQuery&gt;
                     &lt;/xm:method&gt;
                     &lt;xm:method name="getResultTable" returnType="map_string_to_string"&gt;
                     &lt;submitToXQuery&gt;
                     &lt;query&gt;
                     declare variable $location external; 
                     //location[@name eq $location]//substance/(@name, @quantity)
                     &lt;/query&gt;
                     &lt;xm:params location="$arg{location}"/&gt;
                     &lt;/submitToXQuery&gt;         
                     &lt;createMapFromStrings/&gt;
                     &lt;/xm:method&gt;
                     &lt;/xm:interface&gt;
                     &lt;/xm:part&gt;
                     
                  </div>
                  These method definitions impart to the information unit
                  an interface of possible method invocations, which might be represented 
                  in pseudo-code like so:
                  
                  <div class="programlisting e493" xml:space="preserve">
                     informationUnitInterface {
                     String[] getLocations();
                     Map&lt;String,String&gt; getResultTable(String location)
                     }
                     
                  </div>
                  
               </div>
            </div><a name="Executioncontext&#34;translate&#34;ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e494" xml:id="execution-context-translate">
               <div class="title e495">Execution context "translate"</div>
               <div class="para e496">
                  The XDML provider might desire the XDML parser to deliver data 
                  which are not a standard representation of XDM data. For example, 
                  he might intend to deliver a map object, whereas the information 
                  unit contains an XML fragment encoding the map entries. To achieve 
                  this, the metadata specify the transformation of the unit data 
                  into the desired representation. Conceptually, this may be viewed 
                  as executing a method which produces the non-standard 
                  representation and replaces the value of the unit with this 
                  representation – which is essentially the same processing as provided 
                  by a method in context “finalize”. We prefer, however, to 
                  distinguish finalization in the sense described above from the 
                  translation of the unit data into a specific data type. Such
                  translation we regard as processing associated with an
                  execution context "translate". Contrary 
                  to the handling of finalization, the XDML user does not confirm 
                  translation - translation is built into the XDML parser which 
                  always delivers values in accordance to a defined translation. For example, this code:
                  
                  <div class="programlisting e497" xml:space="preserve">
                     Map&lt;String,String&gt; map = xdml.getPart("foo").getMapString2String()
                     
                  </div>
                  retrieves the unit data as a map, rather than as an XML element 
                  which is the XDM source format consumed by the XDML processor. 
                  The XDML user can only retrieve the unit data as a map.
                  
               </div>
            </div>
         </div><a name="MethoddefinitionsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e498" xml:id="method-definitions">
            <div class="title e499">Method definitions</div>
            <div class="para e500">
               The processing of an information unit is organized as the execution of
               methods. A method consists of one or several operations. The definition of a method
               consists of the request message(s) launching its operation(s). 
               The definitions are associated with an execution context, where
               execution contexts and method definitions are related as follows:
               
            </div>
            <div class="para e501">
               
               <div class="table e502">
                  <div class="caption e503">
                     <div class="para e504">
                        
                        <div class="emphasis e505" role="bold">
                           <div class="emphasis e506" role="ital">Execution contexts and method definitions.</div>
                        </div>
                        
                     </div>
                  </div>
                  <div class="metaBox e507"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e939').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e939" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='left'
                           </span><span class="metaAttribute">class='e507'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
                  <div class="metaBox e508"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e940').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e940" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='left'
                           </span><span class="metaAttribute">class='e508'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
                  <div class="thead e509">
                     <div class="tr e510" valign="top">
                        <div class="th e511" align="left" valign="top">Execution context</div>
                        <div class="th e512" align="left" valign="top">Content</div>
                     </div>
                  </div>
                  <div class="tbody e513">
                     <div class="tr e514" valign="top">
                        <div class="td e515">finalize</div>
                        <div class="td e516">
                           a single anonymous method (or empty)
                           
                        </div>
                     </div>
                     <div class="tr e517" valign="top">
                        <div class="td e518">execute</div>
                        <div class="td e519">
                           a single anonymous method (or empty)
                           
                        </div>
                     </div>
                     <div class="tr e520" valign="top">
                        <div class="td e521">enable</div>
                        <div class="td e522">
                           a set of named methods (possibly empty)
                           
                        </div>
                     </div>
                     <div class="tr e523" valign="top">
                        <div class="td e524">translate</div>
                        <div class="td e525">
                           a single operation per target language (possibly none)
                           
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e526">
               The encoding of method definitions reflects these relationships:
               
            </div>
            <div class="para e527">
               
               <div class="table e528">
                  <div class="caption e529">
                     <div class="para e530">
                        
                        <div class="emphasis e531" role="bold">
                           <div class="emphasis e532" role="ital">Execution contexts and their encoding.</div>
                        </div>
                        
                     </div>
                  </div>
                  <div class="metaBox e533"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e981').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e981" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='left'
                           </span><span class="metaAttribute">class='e533'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
                  <div class="metaBox e534"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e982').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e982" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='left'
                           </span><span class="metaAttribute">class='e534'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
                  <div class="thead e535">
                     <div class="tr e536" valign="top">
                        <div class="th e537" align="left" valign="top">Execution context</div>
                        <div class="th e538" align="left" valign="top">Encoding</div>
                     </div>
                  </div>
                  <div class="tbody e539">
                     <div class="tr e540" valign="top">
                        <div class="td e541">finalize</div>
                        <div class="td e542">
                           optional 
                           <div class="code e543">&lt;xm:finalize&gt;</div> element, child elements are request messages
                           
                        </div>
                     </div>
                     <div class="tr e544" valign="top">
                        <div class="td e545">execute</div>
                        <div class="td e546">
                           optional 
                           <div class="code e547">&lt;xm:execute&gt;</div> element, child elements are request messages
                           
                        </div>
                     </div>
                     <div class="tr e548" valign="top">
                        <div class="td e549">enable</div>
                        <div class="td e550">
                           optional 
                           <div class="code e551">&lt;xm:interface&gt;</div> element, child elements are 
                           <div class="code e552">&lt;xm:method&gt;</div>
                           elements representing named methods, whose child elements are request messages
                           
                        </div>
                     </div>
                     <div class="tr e553" valign="top">
                        <div class="td e554">translate</div>
                        <div class="td e555">
                           zero or more 
                           <div class="code e556">&lt;xm:translate&gt;</div> elements, each one representing a target language
                           and encoding the data type and translation parameters as attributes
                           
                        </div>
                     </div>
                  </div>
               </div>
               The following listing presents a schematic example:
               
               <div class="programlisting e557" xml:space="preserve">
                  &lt;xm:part name="foo" type="bar"&gt;
                  &lt;xm:finalize&gt;
                  &lt;op1&gt;...&lt;/op1&gt;
                  &lt;op2&gt;...&lt;/op2&gt;
                  &lt;/xm:finalize&gt;
                  &lt;xm:execute&gt;
                  &lt;op3&gt;...&lt;/op3&gt;
                  &lt;op4&gt;...&lt;/op4&gt;
                  &lt;/xm:execute&gt;
                  &lt;xm:interface&gt;
                  &lt;xm:method name="m1" returnType="t1"&gt;
                  &lt;op5&gt;...&lt;/op5&gt;
                  &lt;op6&gt;...&lt;/op6&gt;
                  &lt;/xm:method&gt;
                  &lt;xm:method name="m2" returnType="t2"&gt;
                  &lt;op7&gt;...&lt;/op7&gt;
                  &lt;op8&gt;...&lt;/op8&gt;
                  &lt;/xm:method&gt;
                  &lt;/xm:interface&gt;
                  &lt;xm:translate target="java" type="t3" att1="..." att2="..."/&gt;
                  &lt;/xm:part&gt;
                  
               </div>
               
            </div>
            <div class="para e558">
               And here comes a realistic example using three execution contexts, “finalize”, "execute"
               and "enable".
               It shows an information unit which is finalized into a Perl script to be executed
               in context "execute"
               and besides offering a little interface of methods to be invoked explicitly ("writeLog",
               "save"):
               
               <div class="programlisting e559" xml:space="preserve">
                  &lt;xm:part name="cleanupScript" type="node" finalType="string"&gt;
                  &lt;xm:finalize&gt;
                  &lt;execAsXSLT serialize="true"/&gt;
                  &lt;/xm:finalize&gt;
                  &lt;xm:execute&gt;
                  &lt;execAsPerl&gt;
                  &lt;xm:params options="-m cleanup"/&gt;        
                  &lt;/execAsPerl&gt;
                  &lt;/xm:execute&gt;
                  &lt;xm:interface&gt;
                  &lt;xm:method name="writeLog"&gt;
                  &lt;execAsPerl&gt;
                  &lt;xm:params options="-m writeLog -f $arg{fileName}"/&gt;
                  &lt;/execAsPerl&gt;
                  &lt;/xm:method&gt;
                  &lt;xm:method name="save"&gt;
                  &lt;execAsPerl&gt;
                  &lt;xm:params options="-m save"/&gt;
                  &lt;/execAsPerl&gt;
                  &lt;/xm:method&gt;
                  &lt;/xm:interface&gt;
                  &lt;/xm:part&gt;
                  
               </div>
               
            </div>
         </div><a name="XDMLuserperspectiveANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e560" xml:id="xdml-user-perspective">
            <div class="title e561">XDML user perspective</div>
            <div class="para e562">
               An XDML value is a set of information units which may be 
               retrieved and – depending on the method definitions – processed 
               in a simplified way. An XDML value is represented by an object 
               whose interfaces provide for retrieval 
               (interface 
               <div class="code e563">XMDLParser</div>) and processing 
               (
               <div class="code e564">XDMLProcessing</div>).
               The following sections give a brief overview of these and further
               interfaces which taken together amount to the user perspective 
               of XDML.
               
            </div><a name="ObtainingandextendingtheXDMLprocessorANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e565" xml:id="obtaining-an-xdml-processor">
               <div class="title e566">Obtaining and extending the XDML processor</div>
               <div class="para e567">
                  The instantiation of XDML values requires an instance
                  of the XDML processor. 
                  The processor object represents the engine responsible for
                  executing XDML operations. It implements interface
                  
                  <div class="code e568">XDMLRegistry</div> which enables the XDML user
                  to register proprietary operations:
                  
                  <div class="programlisting e569" xml:space="preserve">
                     XDMLProcessor xp = XDMLProcessorFactory.newXDMLProcessor();
                     xp.registerXDMLOperations(new WaterOperations());
                     xp.registerXDMLOperations(new WeatherOperations());
                     
                  </div>
                  Now we are ready to begin working with XDML values.
                  
               </div>
            </div><a name="ObtaininganXDMLvalueANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e570" xml:id="obtaining-an-xdml-value">
               <div class="title e571">Obtaining an XDML value</div>
               <div class="para e572">
                  An XDML value is represented by an instance of class
                  
                  <div class="code e573">XDML</div>. The XDML processor offers a
                  generic method for instantiating XDML values:
                  
                  <div class="programlisting e574" xml:space="preserve">
                     void newXDML(Object dataSource) throws XDMLException;
                     
                  </div>
                  Note that the signature does not constrain the data type of the data source.
                  Which type(s) are supported depends on the actual implementation of the 
                  processor. Our prototypic implementation expects an
                  
                  <div class="code e575">XQSequence</div> object, which is the XQJ representation
                  [
                  <div class="xref e576" linkend="JSR-XQJ"></div>] of an XDM value. Typical code snippet:
                  
                  <div class="programlisting e577" xml:space="preserve">
                     XQSequence xdm = …;            // procure XDM value
                     XDML xdml = xp.newXDML(xdm);   // create XDML value
                     
                  </div>
                  
               </div>
            </div><a name="ParsinganXDMLvalueANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e578" xml:id="parsing-an-xdml-value">
               <div class="title e579">Parsing an XDML value</div>
               <div class="para e580">
                  Class 
                  <div class="code e581">XDML</div> implements a parser API which 
                  supports iteration over the units as well as 
                  random access:
                  
                  <div class="programlisting e582" xml:space="preserve">
                     interface XDMLParser {
                     InformationUnit next();
                     boolean hasNext();
                     void rewind();
                     
                     InformationUnit getPart(QName partName);
                     InformationUnit getPart(QName[] partNames);  // access nested part
                     InformationUnit getPartByID(String partID);
                     
                     …   
                     }
                     
                  </div>
                  If the information unit is complex, it is represented by an
                  
                  <div class="code e583">XDML</div> object delivered by the 
                  <div class="code e584">InformationUnit</div>
                  object:
                  
                  <div class="programlisting e585" xml:space="preserve">
                     class InformationUnit implements DataUnit, MetadataUnit {
                     XDML getComplexValue();
                     boolean isValueComplex();
                     ...
                     
                  </div>           
                  Class 
                  <div class="code e586">InformationUnit</div> implements two interfaces for accessing
                  the data value (interface 
                  <div class="code e587">DataUnit</div>) and metadata
                  (
                  <div class="code e588">MetadataUnit</div>) of a simple unit. 
                  The 
                  <div class="emphasis e589" role="ital">data value</div> is always retrieved 
                  as a single object (which may 
                  be an array object) – never by iterating over the items of the 
                  value. There are many possible types and for each 
                  one there is a specific retrieval method. The range of data types 
                  includes several types which have no default mapping to an XDM
                  value, as the interface must also handle values which result
                  from a value translation (via 
                  <div class="code e590">&lt;xm:translate&gt;</div> metadata)
                  or which are the return value of an XDML operation -
                  e.g. several map types:
                  
                  <div class="programlisting e591" xml:space="preserve">
                     interface DataUnit {
                     // *** read value
                     Node         getNode();
                     Node[]       getNodes();
                     int          getInteger();
                     int[]        getIntegers();
                     String       getString();
                     String[]     getStrings();
                     Duration     getDuration();
                     Duration[]   getDurations();   
                     …
                     Object       getObject();    // allows for a DataUnit to contain ANY type
                     
                     // *** write value
                     void         setNode(Node value);
                     void         setNodes(Node[] value);
                     ...
                     void         setObject(Object value, String typeName);
                     }
                     
                  </div>
                  The retrieval of 
                  <div class="emphasis e592" role="ital">metadata</div> is different 
                  dependent on the metadata component. Descriptive metadata and translation 
                  metadata are delivered as a metadata set:
                  
                  <div class="programlisting e593" xml:space="preserve">
                     interface MetadataUnit {
                     MetadataSet getDescriptiveMetadata(String topic);
                     MetadataSet getTranslationMetadata(String targetLanguage);
                     String[] getDescriptiveTopics();
                     String[] getTranslationTargetLanguages();
                     ...
                     }
                     
                  </div>
                  A metadata set is a set of named properties; similar to the 
                  parameters of request messages, property names are QNames 
                  and values are either a string, or a node, or a sequence of nodes:
                  
                  <div class="programlisting e594" xml:space="preserve">
                     interface MetadataSet {
                     QName[] getPropertyNames();
                     String  getStringProperty(QName name);
                     Node    getNodeProperty(QName name);
                     Node[]  getNodesProperty(QName name);
                     …
                     }
                     
                  </div>
                  Other metadata – that is, metadata components corresponding to 
                  execution contexts (other than “translate”) – are delivered as 
                  
                  <div class="emphasis e595" role="ital">methods</div> or a map of named methods:
                  
                  <div class="programlisting e596" xml:space="preserve">
                     interface MetadataUnit {
                     …
                     Method getFinalizationMethod();
                     Method getExecutionMethod();
                     Map&lt;QName, Method&gt; getInterfaceMethods();
                     }
                     
                  </div>
                  A 
                  <div class="code e597">Method</div> is a sequence of operation requests:
                  
                  <div class="programlisting e598" xml:space="preserve">
                     interface Method {
                     int              getOperationCount();
                     OperationRequest getOperationRequest(int index);
                     Integer          getDataContext(int index);
                     // data context is the return value of a preceding operation (&gt;0), or the unit value
                     (0), or null
                     }
                     
                  </div>
                  
                  See 
                  <div class="xref e599" linkend="data-model-of-input-and-output"></div> for details 
                  about interface OperationRequest.
                  
               </div>
            </div><a name="ProcessinganXDMLvalueANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e600" xml:id="processing-an-xdml-value">
               <div class="title e601">Processing an XDML value</div>
               <div class="para e602">
                  Any processing happens in response to an API call of the XDML user (
                  <div class="code e603">finalize</div>, 
                  <div class="code e604">execute</div>,
                  
                  <div class="code e605">invoke</div>). Here comes the processing interface implemented by class 
                  <div class="code e606">XDML</div>:
                  
                  <div class="programlisting e607" xml:space="preserve">
                     interface XDMLProcessing {
                     void finalize();
                     void finalize(Arguments args);
                     void finalize(QName part);
                     void finalize(QName part, Arguments args);
                     
                     void execute();
                     void execute(Arguments args);
                     void execute(QName part);
                     void execute(QName part, Arguments args);
                     
                     Object invoke(QName part, QName methodName);
                     Object invoke(QName part, QName methodName, Arguments args);
                     
                     boolean isFinalized();
                     boolean isFinalized(QName part);
                     boolean isExecuted();
                     boolean isExecuted(QName part);
                     }
                     
                  </div>
                  If arguments are passed to the processing, they will be used in the respective request
                  messages
                  for resolving argument references of the syntax 
                  <div class="code e608">$arg(argName)</div> (see
                  
                  <div class="xref e609" linkend="parameter-values-supplied-by-the-xdml-user"></div>). Setting arguments is straightforward:
                  
                  <div class="programlisting e610" xml:space="preserve">
                     Document weatherData = ...;
                     String location = "NY";
                     
                     Arguments args = xdml.newArguments();
                     args.set(new QName("location"), location);
                     args.set(new QName("weatherData"), weatherData); 
                     
                  </div>
                  
               </div>
            </div><a name="ExampleANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e611" xml:id="example">
               <div class="title e612">Example</div>
               <div class="para e613">
                  An example handles the following scenario. Two datasets – one representing 
                  hydrological measurements, the other meteorological data – are the input 
                  for an evaluation yielding an XML report. Some value extraction, as
                  well as HTML and CVS representations of 
                  the report should be available on demand. Before creating the report, the 
                  input datasets must be procured: weather data are obtained from a SOAP 
                  service, water data are downloaded from a relational database. The 
                  following code snippet demonstrates XDML user code:
                  
                  <div class="programlisting e614" xml:space="preserve">
                     // *** obtain XDML value
                     XDMLProcessor xp = XDMLProcessorFactory.newXDMLProcessor();
                     XQSequence xdm = …;   // procure source data (e.g. exec XQuery) 
                     XDML xdml = xp.newXDML(xdm);
                     
                     // *** use XDML value
                     xdml.finalize();
                     Map&lt;String,String&gt; results = (Map&lt;String,String&gt;) xdml.invoke("report", "getResultTable");
                     String html = (String) xdml.invoke("report", "getHTML");
                     String[] cvs = (String[])  xdml.invoke("report", "getCVS");
                     
                  </div>
                  Although the processing requires the use of various technologies 
                  (XQuery, XSLT, SOAP, SQL), the client code is very simple and 
                  unawares of the complexity involved:
                  
                  <div class="itemizedlist e615">
                     <div class="listitem e616">
                        <div class="para e617">
                           Calling 
                           <div class="code e618">finalize</div> accomplishes ...
                           
                           <div class="itemizedlist e619">
                              <div class="listitem e620">
                                 <div class="para e621">retrieval of a dataset via SOAP</div>
                              </div>
                              <div class="listitem e622">
                                 <div class="para e623">retrieval of a dataset via SQL</div>
                              </div>
                              <div class="listitem e624">
                                 <div class="para e625">execution of an XQuery script producing the XML report</div>
                              </div>
                           </div>
                           
                        </div>
                     </div>
                     <div class="listitem e626">
                        <div class="para e627">
                           Calling 
                           <div class="code e628">invoke(..., "getResultTable")</div> creates a value extraction
                           
                        </div>
                     </div>
                     <div class="listitem e629">
                        <div class="para e630">
                           Calling 
                           <div class="code e631">invoke(..., "getHtml")</div> creates an HTML representation
                           
                        </div>
                     </div>
                     <div class="listitem e632">
                        <div class="para e633">
                           Calling 
                           <div class="code e634">invoke(..., "getCVS")</div> creates a CVS representation
                           
                        </div>
                     </div>
                  </div>
                  The following table summarizes the structure of the XDML value enabling 
                  this simplicity:
                  
                  <div class="table e635">
                     <div class="caption e636">
                        <div class="para e637">
                           
                           <div class="emphasis e638" role="bold">
                              <div class="emphasis e639" role="ital">Example: information units providing simplified processing.</div>
                           </div>
                           
                        </div>
                     </div>
                     <div class="metaBox e640"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1221').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1221" class="metaSource" style="display:none;">                
                           &lt;col<span class="metaAttribute">align='left'
                              </span><span class="metaAttribute">class='e640'
                              </span><span class="metaAttribute">span='1'
                              </span><span class="metaAttribute">valign='top'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                     <div class="metaBox e641"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1222').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1222" class="metaSource" style="display:none;">                
                           &lt;col<span class="metaAttribute">align='left'
                              </span><span class="metaAttribute">class='e641'
                              </span><span class="metaAttribute">span='1'
                              </span><span class="metaAttribute">valign='top'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                     <div class="thead e642">
                        <div class="tr e643" valign="top">
                           <div class="th e644" align="left" valign="top">Unit name</div>
                           <div class="th e645" align="left" valign="top">Semantics</div>
                           <div class="th e646" align="left" valign="top">(Initial) unit value</div>
                           <div class="th e647" align="left" valign="top">Context : used operations</div>
                        </div>
                     </div>
                     <div class="tbody e648">
                        <div class="tr e649" valign="top">
                           <div class="td e650">toHTML</div>
                           <div class="td e651">tool for transforming the report to HTML</div>
                           <div class="td e652">an XSLT stylesheet</div>
                           <div class="td e653">-</div>
                        </div>
                        <div class="tr e654" valign="top">
                           <div class="td e655">toCVS</div>
                           <div class="td e656">tool for transforming the report to CVS</div>
                           <div class="td e657">an XQuery program</div>
                           <div class="td e658">-</div>
                        </div>
                        <div class="tr e659" valign="top">
                           <div class="td e660">weatherData</div>
                           <div class="td e661">weather data</div>
                           <div class="td e662">payload of a SOAP request</div>
                           <div class="td e663">finalize:sendSOAP</div>
                        </div>
                        <div class="tr e664" valign="top">
                           <div class="td e665">waterData</div>
                           <div class="td e666">water data</div>
                           <div class="td e667">text of a SQL SELECT statement</div>
                           <div class="td e668">finalize:execAsSQL</div>
                        </div>
                        <div class="tr e669" valign="top">
                           <div class="td e670">report</div>
                           <div class="td e671">
                              an XML report with an interface
                              
                           </div>
                           <div class="td e672">an XQuery program</div>
                           <div class="td e673">
                              
                              <div class="para e674">finalize:execAsXQuery</div>
                              
                              <div class="para e675">invoke:createMapFromStrings</div>
                              
                              <div class="para e676">invoke:submitToXQuery</div>
                              
                              <div class="para e677">invoke:submitToXSLT</div>
                              
                           </div>
                        </div>
                     </div>
                  </div>
                  
               </div>
               <div class="para e678">
                  An abbreviated representation of the XDM value follows:
                  
                  <div class="programlisting e679" xml:space="preserve">
                     &lt;xm:part name="toHTML" partID="toHTML" type="node" private="true"/&gt;,
                     &lt;xsl:transform…&gt;…&lt;/xsl:transform&gt;
                     ,
                     
                     &lt;xm:part name="toCVS" partID="toCVS" type="string" private="true"&gt;,
                     xquery 1.0 …
                     …
                     ,
                     
                     &lt;xm:part name="weatherData" partID="we" type="node" finalType="node"&gt;
                     &lt;xm:finalize&gt;
                     &lt;sendSOAP href="…" /&gt;
                     &lt;/xm:finalize&gt;
                     &lt;/xm:part&gt;,
                     &lt;getWeatherData&gt;…&lt;/getWeatherData&gt;
                     ,
                     
                     &lt;xm:part name="waterData" partID="wa" type="string" finalType="node"&gt;
                     &lt;xm:finalize&gt;
                     &lt;execAsSQL driver="…" host="…" db="…" user="…" password="…" format="xml"/&gt;
                     &lt;/xm:finalize&gt;
                     &lt;/xm:part&gt;,
                     SELECT …
                     ,
                     
                     &lt;xm:part name="report" type="string" finalType="node"&gt;
                     &lt;xm:finalize requiredParts="we wa"&gt;
                     &lt;execAsXQuery resultType="node"&gt;
                     &lt;xm:params&gt;
                     &lt;weatherData&gt;$part{we}&lt;/weatherData&gt;
                     &lt;waterData&gt;$part{wa}&lt;/waterData&gt;
                     &lt;/xm:params&gt;
                     &lt;/execAsXQuery&gt;
                     &lt;/xm:finalize&gt;
                     
                     &lt;xm:interface&gt;
                     &lt;xm:method name="getResultTable" returnType="map_string_to_string"&gt;
                     &lt;submitToXQuery resultType="strings"&gt;
                     &lt;query&gt;...&lt;/query&gt;
                     &lt;/submitToXQuery&gt;
                     &lt;createMapFromStrings/&gt;
                     &lt;/xm:method&gt;
                     &lt;xm:method name="toHTML" returnType="string"&gt;
                     &lt;submitToXSLT serialize="true"&gt;
                     &lt;stylesheet&gt;$part{toHTML}&lt;/stylesheet&gt;
                     &lt;/submitToXSLT&gt;
                     &lt;/xm:method&gt;
                     &lt;xm:method name="toCVS" returnType="strings"&gt;
                     &lt;submitToXQuery resultType="strings"&gt;
                     &lt;query&gt;$part{toCVS}&lt;/query&gt;
                     &lt;/submitToXQuery&gt;
                     &lt;/xm:method&gt;
                     &lt;/xm:interface&gt;
                     &lt;/xm:part&gt;,
                     xquery 1.0
                     declare variable $weatherData as node() external;
                     declare variable $waterData as node() external;
                     &lt;waterReport&gt;{
                     …
                     }&lt;/waterReport&gt;
                     
                  </div>
                  
               </div>
            </div>
         </div><a name="Generalization:XDMLasaninformationmodelANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e680" xml:id="generalization-xdml-as-an-information-model">
            <div class="title e681">Generalization: XDML as an information model</div>
            <div class="para e682">
               The concept of XDML can be generalized by distinguishing the 
               encoding of XDML values from their information model.
               
            </div><a name="EncodingXDMLwithmapitemsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e683" xml:id="encoding-xdml-with-map-items">
               <div class="title e684">Encoding XDML with map items</div>
               <div class="para e685">
                  This paper describes a technique how to create XDML values by 
                  augmenting an XDM value with control items. The use of control 
                  items amounts to encoding an information model which is based 
                  on the concept of information units. It is important to note 
                  that the XDML API does not reflect this encoding. Therefore 
                  XDML user code does not depend on how the XDML value is encoded. 
                  It is possible that a future version of XDML supports additional 
                  encodings which do not rely on control items. 
                  
               </div>
               <div class="para e686">
                  In this context, recent work of W3C working groups on the XDM model 
                  promises an interesting alternative. The current working draft of the 
                  XDM specification version 3.0 [
                  <div class="xref e687" linkend="W3C-XDM-3.0"></div>] 
                  introduces as new item type a “map item” 
                  which uses atomic values as keys and sequences of XDM items as values. 
                  It is easy to encode XDML values as defined in this paper using map 
                  items instead of inserting control items between data items. 
                  The change amounts to shifting control items and data items
                  from their linear arrangement into a couple of map items,
                  one receiving the control items and the other receiving the data items.
                  This is shown in two steps. First assume 
                  an XDML value which does not contain any metadata – which only structures 
                  the overall XDM value into named units. The information content can be 
                  represented by an XDM value obeying the following rules:
                  
                  <div class="itemizedlist e688">
                     <div class="listitem e689">
                        <div class="para e690">
                           the value consists of a single map item which uses QNames as keys
                           
                        </div>
                     </div>
                     <div class="listitem e691">
                        <div class="para e692">
                           the map values are XDM values which either do not contain map items 
                           or consist of a single map item
                           
                        </div>
                     </div>
                     <div class="listitem e693">
                        <div class="para e694">
                           any nested maps are constrained in the same way as the top-level map: 
                           keys are QNames, values are XDM values which either do not contain 
                           map items or consist of a single map item
                           
                        </div>
                     </div>
                  </div>
                  In order to reestablish our full XDML model which associates information 
                  units with metadata, the above rules are modified by replacing each map item 
                  with a sequence of two map items, the first one representing the
                  data of the information units, the second one representing the
                  associated metadata and the map keys encoding the names of the units.
                  The metadata of a unit can again be represented by a single 
                  
                  <div class="code e695">&lt;xm:part&gt;</div> or 
                  <div class="code e696">&lt;xm:complexPart&gt;</div>
                  element item. The net result is a lossless encoding of 
                  the XDML information model using map items rather than inserting control items
                  between data items.
                  
               </div>
               <div class="para e697">
                  The relationship between the XDML data model and the new map items can 
                  be further elucidated by regarding XDML values as 
                  
                  <div class="emphasis e698" role="ital">dual maps</div>: the keys are 
                  associated with two entities, one representing the data, the other representing 
                  associated metadata.
                  
               </div>
            </div><a name="EncodingXDMasXMLANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e699" xml:id="encoding-xdm-as-xml">
               <div class="title e700">Encoding XDM as XML</div>
               <div class="para e701">
                  The XDML data model is based on the XDM model: the XDML value as a 
                  whole is an XDM value, and the value of any (simple) information unit 
                  is a sequence of XDM items, in other words – an XDM value. This 
                  dependence on XDM does not preclude the option to encode the underlying 
                  XDM value as a single XML document. This possibility is important, as 
                  XSLT and XProc do not export XDM values, but export XML documents. A 
                  generic XML encoding of XDM values can be easily defined. It might, for 
                  example, represent each XDM item by a child node of a root element 
                  representing the XDM value as a whole. The following listing provides an 
                  illustrative example:
                  
                  <div class="programlisting e702" xml:space="preserve">
                     &lt;x:xdm xmlns:x="http://www.xdml.org/ns/xdm"&gt;
                     &lt;x:item type="document"&gt;
                     &lt;foo/&gt;
                     &lt;/x:item&gt;
                     &lt;x:item type="element"&gt;
                     &lt;bar/&gt;
                     &lt;/x:item&gt;
                     &lt;x:item type="attribute" name="a" value="v"/&gt;
                     &lt;x:item type="processing-instruction" value="foo a=x b=y"/&gt;
                     &lt;x:item type="xs:string"&gt;hello&lt;/x:item&gt;
                     &lt;x:item type="xs:integer"&gt;123&lt;/x:item&gt;
                     &lt;/x:xdm&gt;
                     
                  </div>
                  Therefore, the factory method constructing an 
                  XDML value might easily be extended 
                  to load the XDML value from an XML document conforming to
                  	  an agreed upon “XDM schema”. 
                  
               </div>
            </div>
         </div>
      </div><a name="DiscussionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e703" xml:id="discussion">
         <div class="title e704">Discussion</div>
         <div class="para e705">
            The languages XQuery and XSLT enable a very efficient and elegant processing 
            of XML resources. Their integration into programs written in general purpose
            languages - like Java - is therefore highly desirable. The potential
            contribution is 
            however limited by three major issues. First, XQuery and XSLT are designed
            to create information, rather than execute actions with side effects.
            Second, these languages are rather closed systems, 
            without a concept of embedding other technologies and domain-specific
            functionality. Third,
            the information delivered (XML and/or atomic values) is pure information without 
            behaviour, rather than objects associating information with
            specific behaviour, which means that downstream usage of the information
            may be a relatively complex and challenging task. These limitations of effect -
            "no actions, closed functionality, no behaviour" - is at odds with the 
            enormous power of the means which the X-languages offer. 
            
         </div>
         <div class="para e706">
            XProc [
            <div class="xref e707" linkend="W3C-XPROC"></div>] addresses the first two limitations: it integrates
            the major XML technologies (XSLT, XQuery, XML Schema, ...) into a single
            script language, provides openness
            to other technologies (HTTP, system commands, ...) and enables to
            combine side-effect free processing with actions in a well-controlled
            way (based on distinct steps). XProc is a powerful approach
            to accomplish complex XML processing.
            
         </div>
         <div class="para e708">
            XDML has a different emphasis: it concentrates on integrating
            XML technology into general purpose languages. 
            XDML strives to broaden the
            scope of what the X-developer can achieve as a
            contributor to a non-XML environment - rather than as the author
            of a standalone processing. He is enabled to
            define a complex postprocessing and its control by API client actions.
            This creates a novel
            possibility of leveraging XML technology to generate
            information associated with behaviour: 
            
            <div class="emphasis e709" role="ital">information with an interface</div>. 
            The usefulness of the behaviour hinges critically upon the functional
            wealth offered by the available XDML operations. Therefore we believe
            that the easy extensibility of the XDML processor by proprietary,
            domain specific XDML operations may be of key importance for
            the value which XDML has to offer.
            
         </div>
      </div><a name="BibliographyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e710">
         <div class="title e711">Bibliography</div>
         <div class="bibliomixed e712" xml:id="RENNAU2010" xreflabel="Rennau 2010">Hans-Juergen Rennau. 
            Java Integration of XQuery - an Information-Unit Oriented Approach.
            Presented at Balisage: The Markup Conference 2010, Montréal, Canada, August 3 - 6,
            
            2010. In Proceedings of Balisage: The Markup Conference 2010. Balisage 
            Series on Markup Technologies, vol. 5 (2010). doi:10.4242/BalisageVol5.Rennau01.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e713" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.balisage.net/Proceedings/vol5/html/Rennau01/BalisageVol5-Rennau01.html</div>.
         </div>
         <div class="bibliomixed e714" xml:id="JSR-XQJ" xreflabel="XQJ Spec">Jim Melton et al, eds. 
            JSR 225: XQuery API for JavaTM (XQJ) 1.0 Specfication.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e715" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://jcp.org/en/jsr/detail?id=225</div>.
         </div>
         <div class="bibliomixed e716" xml:id="W3C-XDM" xreflabel="W3C XDM">Mary Fernandez et al, eds. 
            XQuery 1.0 and XPath 2.0 Data Model (XDM) W3C Recommendation 23 January 2007.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e717" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xpath-datamodel/</div>.
         </div>
         <div class="bibliomixed e718" xml:id="W3C-XDM-3.0" xreflabel="W3C XDM 3.0">Norman Walsh et al, eds. 
            XQuery and XPath Data Model 3.0 W3C Working Draft 14 June 2011.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e719" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xpath-datamodel-30/</div>.
         </div>
         <div class="bibliomixed e720" xml:id="W3C-XPROC" xreflabel="W3C XPROC">Norman Walsh et al, eds. 
            XProc: An XML Pipeline Language W3C Recommendation 11 May 2010.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e721" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xproc/</div>.
         </div>
      </div>
   </div>
</div>