<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#TNTBase:VersionedStorageforXMLANCHOR" name="TNTBase:VersionedStorageforXMLTOC">TNTBase: Versioned Storage for XML</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#StateoftheArtANCHOR" name="StateoftheArtTOC">State of the Art</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#SubversionANCHOR" name="SubversionTOC">Subversion</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#BerkeleyDBXMLANCHOR" name="BerkeleyDBXMLTOC">Berkeley DB XML</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#TheSystemDesignandInterfacesANCHOR" name="TheSystemDesignandInterfacesTOC">The System Design and Interfaces</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#xSVNanXMLenabledRepositoryANCHOR" name="xSVNanXMLenabledRepositoryTOC">xSVN, an XML-enabled Repository</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#TheDBXMLAccessorLibraryANCHOR" name="TheDBXMLAccessorLibraryTOC">The DB XML Accessor Library</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#QueryingXMLDocumentsANCHOR" name="QueryingXMLDocumentsTOC">Querying XML Documents</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#FileSysteminanxSVNContainerANCHOR" name="FileSysteminanxSVNContainerTOC">File System in an xSVN Container</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#WriteAccesstoANCHOR" name="WriteAccesstoTOC">Write Access to </a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#QueryingPreviousRevisionsANCHOR" name="QueryingPreviousRevisionsTOC">Querying Previous Revisions</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#CachingQueryResultsANCHOR" name="CachingQueryResultsTOC">Caching Query Results</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#VirtualFilesANCHOR" name="VirtualFilesTOC">Virtual Files</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#CreatingaVirtualFileandGettingInformationaboutVirtualFilesANCHOR" name="CreatingaVirtualFileandGettingInformationaboutVirtualFilesTOC">Creating a Virtual File and Getting Information about Virtual Files</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#CachingandQueryingVirtualFilesANCHOR" name="CachingandQueryingVirtualFilesTOC">Caching and Querying Virtual Files</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#EditingVirtualFilesANCHOR" name="EditingVirtualFilesTOC">Editing Virtual Files</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConclusionandFutureWorkANCHOR" name="ConclusionandFutureWorkTOC">Conclusion and Future Work</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BibliographyANCHOR" name="BibliographyTOC">Bibliography</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">authz</div>
         <div class="singletermTERMS">application/xml</div>
         <div class="singletermTERMS">ActiveMath</div>
         <div class="singletermTERMS">Automated Deduction - CADE-17</div>
         <div class="singletermTERMS">August 11 - 14, 2009</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2009</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">checking out</div>
         <div class="singletermTERMS">commit</div>
         <div class="singletermTERMS">container</div>
         <div class="singletermTERMS">collection('dbxml:/&lt;container_name&gt;')</div>
         <div class="singletermTERMS">collection()</div>
         <div class="singletermTERMS">collection(&lt;arbitrary_path&gt;)</div>
         <div class="singletermTERMS">collection(/doc*//test//paper??.xml)</div>
         <div class="singletermTERMS">cache</div>
         <div class="singletermTERMS">collection(./*.omdoc)//ns:definitions</div>
         <div class="singletermTERMS">Connexions</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">DB XML Accessor</div>
         <div class="singletermTERMS">DB XML full-text</div>
         <div class="singletermTERMS">doc(&lt;path_to_doc&gt;)</div>
         <div class="singletermTERMS">doc</div>
         <div class="singletermTERMS">defs.vf</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
         <div class="singletermTERMS">file system documents (FSDs)</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
         <div class="singletermTERMS">groups</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">https://trac.mathweb.org/tntbase/wiki/info</div>
         <div class="singletermTERMS">https://alpha.tntbase.mathweb.org/repos/lectures/</div>
         <div class="singletermTERMS">https://trac.mathweb.org/tntbase/</div>
         <div class="singletermTERMS">https://trac.mathweb.org/tntbase/ticket/50</div>
         <div class="singletermTERMS">https://jersey.dev.java.net/</div>
         <div class="singletermTERMS">head revision</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">in the client</div>
         <div class="singletermTERMS">id</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
         <div class="singletermTERMS">Kohlhase</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">LaTeXML</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">mod_dav_svn</div>
         <div class="singletermTERMS">MBase</div>
         <div class="singletermTERMS">m.kohlhase@jacobs-university.de</div>
         <div class="singletermTERMS">Michael</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">OMDoc</div>
         <div class="singletermTERMS">on the server</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">paper.xml</div>
         <div class="singletermTERMS">paper??.xml</div>
         <div class="singletermTERMS">PhD Student</div>
         <div class="singletermTERMS">Professor</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">representations</div>
         <div class="singletermTERMS">Research Assistant</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">SVNKitAdapter</div>
         <div class="singletermTERMS">strings</div>
         <div class="singletermTERMS">skel</div>
         <div class="singletermTERMS">svn:mime-type</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">TNTBase</div>
         <div class="singletermTERMS">text/xml</div>
         <div class="singletermTERMS">test</div>
         <div class="singletermTERMS">tnt:&lt;directory_path&gt;</div>
         <div class="singletermTERMS">tnt:/Balisage/papers/</div>
         <div class="singletermTERMS">type</div>
         <div class="singletermTERMS">Temporal Data &amp; the Relational Model</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
         <div class="singletermTERMS">update</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
         <div class="singletermTERMS">Virtual File (VF)</div>
         <div class="singletermTERMS">vfile</div>
         <div class="singletermTERMS">VF encapsulated document (VFED)</div>
         <div class="singletermTERMS">Version Control With Subversion</div>
         <div class="singletermTERMS">v.zholudev@jacobs-university.de</div>
         <div class="singletermTERMS">Vyacheslav</div>
         <div class="singletermTERMS">Vice Director</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">xSVN</div>
         <div class="singletermTERMS">XML-enabled repository</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
         <div class="singletermTERMS">Zholudev</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="TNTBase:VersionedStorageforXMLANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.2" xml:id="Bal2009zhol0812">
      <div class="title e1">TNTBase: Versioned Storage for XML</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2009</div>
            <div class="confdates e5">August 11 - 14, 2009</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">
               Version control systems like CVS and Subversion have transformed collaboration
               workflows in software engineering and made possible the globally distributed project
               teams we know from the Open Source phenomenon. On the other hand, XML is coming of
               age
               as a basis for document formats, and even though XML as a text-based format is
               amenable to version control in principle, the fact that version control systems work
               on files makes difficult the integration of fragment access techniques like XPath,
               XQuery that are currently revolutionizing XML workflows.
               
            </div>
            <div class="para e8">
               In this paper we present the 
               <div class="emphasis e9">TNTBase</div> system, an open-source versioned XML
               database obtained by integrating Berkeley DB XML into the Subversion Server. The
               system is intended as a basis for collaborative editing and sharing XML-based
               documents. It integrates versioning and fragment access needed for fine-granular 
               document content management.
               
            </div>
         </div>
         <div class="author e10">
            <div class="personname e11">
               <div class="firstname e12">Vyacheslav</div>
               <div class="surname e13">Zholudev</div>
            </div>
            <div class="personblurb e14">
               <div class="para e15">Vyacheslav Zholudev graduated in May of 2007 from Saint-Petersburg State University
                  with a Master degree in Computer Science. He is continuing his studies at Jacobs University
                  Bremen as a Ph.D student. Since September of 2007 he has been part of the KWARC research
                  group under the supervision of Prof. Michael Kohlhase.
               </div>
            </div>
            <div class="affiliation e16">
               <div class="jobtitle e17">PhD Student</div>
               <div class="orgname e18">Jacobs University Bremen</div>
            </div>
            <div class="affiliation e19">
               <div class="jobtitle e20">Research Assistant</div>
               <div class="orgname e21">DFKI Bremen</div>
            </div>
            <div class="email e22">v.zholudev@jacobs-university.de</div>
         </div>
         <div class="author e23">
            <div class="personname e24">
               <div class="firstname e25">Michael</div>
               <div class="surname e26">Kohlhase</div>
            </div>
            <div class="personblurb e27">
               <div class="para e28">Dr. Michael Kohlhase is a professor for Computer Science at Jacobs University Bremen
                  and Deputy Director of the German Research Center for Artificial Intelligence (DFKI).
                  
               </div>
               <div class="para e29">He studied pure mathematics at the Universities of Tübingen and Bonn (1983-1989) and
                  continued with computer science, in particular, higher-order unification and automated
                  theorem proving (Ph.D. 1994, Saarland University). Since then, he has taken up research
                  in
                  computational logic, kwnowledge representation, and natural language semantics.
               </div>
               <div class="para e30">His current research interests include automated theorem proving and knowledge
                  representation for mathematics, inference-based techniques for natural language
                  processing, and computer-supported education. He has pursued these interests during
                  extended visits to Carnegie Mellon University, SRI International, and the Universities
                  of
                  Amsterdam, Edinburgh, and Auckland.
               </div>
               <div class="para e31">Michael Kohlhase is a recipient of the dissertation award of the Association of German
                  Artificial Intelligence Institutes (AKI; 1995) and of a Heisenberg stipend of the
                  German
                  Research Council (DFG 2000-2003). He was a member of the Special Research Action 378
                  (Resource-Adaptive Cognitive Processes), leading projects on both automated theorem
                  proving and computational linguistics. Michael Kohlhase is trustee of the MKM and
                  CALCULEMUS Conferences, a member of the W3C MathML working group, and the president
                  of the
                  OpenMath Society.
               </div>
            </div>
            <div class="affiliation e32">
               <div class="jobtitle e33">Professor</div>
               <div class="orgname e34">Jacobs University Bremen</div>
            </div>
            <div class="affiliation e35">
               <div class="jobtitle e36">Vice Director</div>
               <div class="orgname e37">DFKI Bremen</div>
            </div>
            <div class="email e38">m.kohlhase@jacobs-university.de</div>
         </div>
         <div class="legalnotice e39">
            <div class="para e40">Copyright © 2009 Vyacheslav Zholudev, Michael Kohlhase.  Licensed under the Creative
               Commons License (http://creativecommons.org/licenses/by-sa/3.0/).
            </div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e41" xml:id="intro">
         <div class="title e42">Introduction</div>
         <div class="para e43">
            With the rapid growth of computers and Internet resources the communication between
            humans
            became much more efficient. The number of electronic documents and the speed of
            communication are growing rapidly. We see the development of a deep web (web content
            stored in Databases) from which the surface Web (what we see in our browsers) is
            generated. With the merging of XML fragment access techniques (most notably
            URIs [
            <div class="xref e44" linkend="BLFM98"></div>] and XPath [
            <div class="xref e45" linkend="CD99"></div>, 
            <div class="xref e46" linkend="BBC07"></div>]) and database
            techniques and the ongoing development of XML-based document formats, we are seeing
            the
            beginnings of a deep web of XML documents, where surface documents are assembled,
            aggregated and mashed up from background information in XML databases by techniques
            like
            XQuery [
            <div class="xref e47" linkend="XQu07"></div>], and document (fragment) collections are managed by XQuery
            Update [
            <div class="xref e48" linkend="XQU08"></div>].            
            
         </div>
         <div class="para e49">
            At the same time, the Web is constantly changing - it has been estimated that 20%
            of
            the surface Web changes daily and 30%
            monthly [
            <div class="xref e50" linkend="CGM00"></div>, 
            <div class="xref e51" linkend="FMNW03"></div>]. While archiving services like the
            
            <div class="emphasis e52" role="rom">Wayback Machine</div> try to get a grip on this for the surface level, we really need
            an infrastructure for managing changes in the XML-based deep web.
            
         </div>
         <div class="para e53">
            Unfortunately, support for this has been very frugal. Version Control systems like
            CVS and
            Subversion [
            <div class="xref e54" linkend="SVN08"></div>] which have transformed collaboration workflows in software
            engineering are deeply text-based (wrt. diff/patch/merge) and do not integrate well
            with
            XML databases and XQuery. Some relational databases address temporal
            aspects [
            <div class="xref e55" linkend="DDL02"></div>], but this does not seem to have counterparts in the XML
            database or XQuery world. Wikis provide simple versioning functionalities, but these
            are
            largely hand-crafted into each system's (relational) database design.
            
         </div>
         <div class="para e56">
            In this paper we present the 
            <div class="emphasis e57" role="ital">TNTBase</div> system, an open-source versioned XML database
            obtained by integrating Berkeley DB XML [
            <div class="xref e58" linkend="Ber09b"></div>] into the Subversion
            Server [
            <div class="xref e59" linkend="SVN08"></div>]. The system is intended as an enabling technology that provides a
            basis for future XML-based document management systems that support collaborative
            editing
            and sharing by integrating the enabling technologies of versioning and fragment access
            needed for fine-granular document content management.  Our aim is to make possible
            workflows and globally distributed project teams as we know them from Open Source
            projects.
            
         </div>
         <div class="para e60">
            The 
            <div class="emphasis e61" role="ital">TNTBase</div> system is developed in the context of the 
            
            <div class="emphasis e62" role="ital">OMDoc</div> project 
            (Open Mathematical Documents [
            <div class="xref e63" linkend="omd"></div>, 
            <div class="xref e64" linkend="Koh06"></div>]), an XML-based representation
            format for the structure of mathematical knowledge and communication. Correspondingly,
            the
            development requirements for the 
            <div class="emphasis e65" role="ital">TNTBase</div> come out of OMDoc-based applications and
            their storage needs. We are experimenting with a math search engine [
            <div class="xref e66" linkend="KS06"></div>],
            a collaborative community-based reader panta rhei [
            <div class="xref e67" linkend="pan"></div>], the semantic wiki
            SWiM [
            <div class="xref e68" linkend="Lan08"></div>], the learning system for mathematics
            ActiveMath [
            <div class="xref e69" linkend="Act08"></div>], and a system for the verification of statements about
            programs VeriFun [
            <div class="xref e70" linkend="Ver08"></div>].
            
         </div>
         <div class="para e71">
            But 
            <div class="emphasis e72" role="ital">TNTBase</div> as described here is independent of all of these and has no
            specialization to mathematical content. This will be added at another layer,
            re-implementing an earlier system [
            <div class="xref e73" linkend="FK00"></div>, 
            <div class="xref e74" linkend="KF01"></div>, 
            <div class="xref e75" linkend="FK06"></div>],
            but other XML-based systems could be supported as well, e.g. semantic Wikis like
            IkeWiKi [
            <div class="xref e76" linkend="Sch06"></div>], KiWi [
            <div class="xref e77" linkend="SEG09"></div>], eLearning
            Systems [
            <div class="xref e78" linkend="CNX08"></div>, 
            <div class="xref e79" linkend="Tea06"></div>], scientific document archives, etc.
            
         </div>
         <div class="para e80">
            In the next section we will review the state of the art in versioning and XML databases,
            describing the two systems we combine and extend for 
            <div class="emphasis e81" role="ital">TNTBase</div>.  In
            Section 
            <div class="xref e82" linkend="sec_system"></div> we an overview of a 
            <div class="emphasis e83" role="ital">TNTBase</div> architecture and interfaces it
            exposes.  To make an every part of the architecture picture clear we will continue
            with
            describing the core of 
            <div class="emphasis e84" role="ital">TNTBase</div> - the XML-enabled repository in
            Section 
            <div class="xref e85" linkend="sec_xmlenrep"></div> and the Java accessory library in
            Section 
            <div class="xref e86" linkend="sec_dbxmlaccessor"></div>. Section 
            <div class="xref e87" linkend="sec_vfs"></div> showcases an advanced feature of
            
            <div class="emphasis e88" role="ital">TNTBase</div>: Virtual Files. Section 
            <div class="xref e89" linkend="sec_concl"></div> concludes the paper.
            
         </div>
      </div><a name="StateoftheArtANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e90" xml:id="sec_state">
         <div class="title e91">State of the Art</div>
         <div class="para e92">
            The 
            <div class="emphasis e93" role="ital">TNTBase</div> system is based on two widespread open-source systems: Subversion and
            Berkeley DB XML. We provide a short description of those aspects of the systems that
            are
            relevant to TNTBase and discuss what is missing for versioned XML-storage.
            
         </div><a name="SubversionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e94" xml:id="rel_svn">
            <div class="title e95">Subversion</div>
            <div class="para e96">
               Subversion (SVN) is one of the most popular open-source client-server version control
               systems. On a server side SVN maintains versions and history of documents and directories
               in a
               repository. Users work with such a
               repository by 
               <div class="emphasis e97" role="ital">checking out</div> to a local working space the directory tree (a working
               copy). This maintenance is performed by the SVN client utility. 
               After a working copy is checked out users can perform various actions with it [
               <div class="xref e98" linkend="CSFP04"></div>]: change,
               update from a repository or propagate changes back to a repository, changing properties
               of
               directories or files, merging different source trees, etc. The 
               <div class="emphasis e99" role="ital">update</div> command
               performs merging of a local working copy with the latest version in a repository.
               In case
               when automated merging is not solvable, a user has to edit conflicting files
               manually. Afterwards in order to propagate local changes back to a repository a user
               performs a 
               <div class="emphasis e100" role="ital">commit</div>. Using above mentioned commands comprises the typical workflow
               encountered by SVN users. We have covered only the basic concepts, but that is enough
               to
               get a rough conception of SVN. In Section 
               <div class="xref e101" linkend="sec_xmlenrep"></div> we will show that 
               the 
               <div class="emphasis e102" role="ital">TNTBase</div> core is a substitution of an SVN server. 
               
            </div>
            <div class="para e103">
               SVN is not aware of content inside a repository (apart from distinguishing binary
               and text
               files). For SVN users it does not make a difference whether they store text files,
               PDFs or
               XSLT stylesheets. In particular, SVN does not support native XML processing like XML
               databases. By XML-processing we mean possibilities to query XML-documents, index them
               in
               order to improve querying performance, benefit from XQuery Update
               facilities [
               <div class="xref e104" linkend="XQU08"></div>] or utilize transactional mechanism in order to keep
               collection of XML documents consistent. Thus when we are talking about XML storing
               we
               should look at the XML-databases which is a subject of the next subsection.
               
            </div>
            <div class="para e105">
               Another limitation of SVN is that the smallest versioned entity in its repository
               is a
               file. But for some users it might be desirable to abstract away from the notion of
               files,
               and work with XML objects like a section in scientific papers in the DocBook format
               or
               theorems or proofs in mathematical documents. Roughly speaking, a user should be able
               to
               get away from the file metaphor (see [
               <div class="xref e106" linkend="MK08"></div>] for further ideas).
               
            </div>
         </div><a name="BerkeleyDBXMLANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e107" xml:id="rel_bdbxml">
            <div class="title e108">Berkeley DB XML</div>
            <div class="para e109">
               Berkeley DB XML (DB XML) is an open-source, XML-native embedded database. Embeddedness
               means that it is distributed as a library with a number of API for various programming
               languages like C++, Java, Perl, Ruby and some others. This approach does not have
               an
               overhead by having surrounding environment like servlets or stand-alone servers. Also
               the
               embeddedness eliminates some database administration costs. DB XML is built on top
               of
               Berkeley DB [
               <div class="xref e110" linkend="Ber09a"></div>] which is used by such applications as SVN (the
               consequences of this are discussed in Section 
               <div class="xref e111" linkend="sec_xmlenrep"></div>), the RPM Package
               Manager 
               <div class="xref e112" linkend="RPM09"></div>, the MySQL database 
               <div class="xref e113" linkend="MyS08"></div> and Postfix 
               <div class="xref e114" linkend="Pos09"></div>,
               to name just a few of the most notable. Berkeley DB is an open source, embeddable
               database
               with zero administration; and DB XML inherits its advantages and features
               (e.g. portability, transactions, replications, easy deployment, etc.) from it. Naturally
               DB
               XML extends this with the typical XML-native database features:
               XQuery-based [
               <div class="xref e115" linkend="XQu07"></div>] access to documents (with XQuery Update facilities
               support), support of transactions, preparsed queries, content-based indexing, scalability,
               recovery and locking mechanisms and the ability to work in multi-threaded and multi-process
               environments. Furthermore DB XML has established a reputation of being a scalable
               and
               very productive XML-native database that makes it a good choice to base the 
               <div class="emphasis e116" role="ital">TNTBase</div>
               system on.
               
            </div>
            <div class="para e117">
               But unfortunately DB XML does not support versioning which is becoming more and more
               important when 
               managing collections of XML documents. Some of the products [
               <div class="xref e118" linkend="Ipe09"></div>, 
               <div class="xref e119" linkend="Mar09"></div>, 
               <div class="xref e120" linkend="Ora09b"></div>] 
               on the XML-native databases market actually support versioning in a way, but this
               versioning has a bunch of limitations 
               in comparison to ordinary version control systems like SVN or CVS, and moreover they
               all have a commercial license. 
               On the other hand there is no popular version control systems which treat XML in a
               special way.
               This should be a goal of 
               <div class="emphasis e121" role="ital">TNTBase</div> as well.
               
            </div>
         </div>
      </div><a name="TheSystemDesignandInterfacesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e122" xml:id="sec_system" xreflabel="The System Design and Interfaces">
         <div class="title e123">The System Design and Interfaces</div>
         <div class="para e124">
            The 
            <div class="emphasis e125" role="ital">TNTBase</div> architecture is presented in Figure 
            <div class="xref e126" linkend="tntbase_figure"></div>. 
            We tried to keep it simple and understandable for readers by not showing irrelevant
            parts of the system. 
            The core of 
            <div class="emphasis e127" role="ital">TNTBase</div> is 
            <div class="emphasis e128" role="ital">xSVN</div> (see Section 
            <div class="xref e129" linkend="sec_xmlenrep"></div>). 
            It is managed by Apache's 
            <div class="emphasis e130" role="ital">mod_dav_svn</div> module or accessed by 
            <div class="emphasis e131" role="ital">DB XML Accessor</div> 
            (see Section 
            <div class="xref e132" linkend="sec_dbxmlaccessor"></div>) locally on the same machine.
            Apache's mod_dav_svn module exposes an HTTP interface exactly like it is done in SVN.
            
            Thereby a user of 
            <div class="emphasis e133" role="ital">TNTBase</div> is able to 
            work with 
            <div class="emphasis e134" role="ital">TNTBase</div> repository exactly 
            in the same way as with a normal SVN repository via HTTP protocol 
            including Apache's SVN authentication via 
            <div class="emphasis e135" role="ital">authz</div> and 
            <div class="emphasis e136" role="ital">groups</div> files. 
            The non-XML content can be managed as well in 
            <div class="emphasis e137" role="ital">TNTBase</div>, but only via discussed xSVN's HTTP interface. 	
            
         </div>
         <div class="figure e138" floatstyle="1" xml:id="tntbase_figure" xreflabel="TNTBase architecture">
            <div class="mediaobject e139">
               <div class="imageobject e140">
                  <div class="metaBox e141"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e295').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e295" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e141'
                           </span><span class="metaAttribute">fileref='../../../vol3/graphics/Zholudev01/Zholudev01-001.png'
                           </span><span class="metaAttribute">format='png'
                           </span><span class="metaAttribute">width='100%'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
            <div class="caption e142">
               <div class="para e143">TNTBase architecture</div>
            </div>
         </div>
         <div class="para e144">
            DB XML Accessor is able to work with XML-content in an xSVN repository. Actually
            it works directly only with a part of it, namely with an xSVN container by utilizing
            DB XML
            API. All indispensable information needed for XML-specific tasks is incorporated in
            a DB
            XML container using additional documents or metadata fields of documents.  
            <div class="emphasis e145" role="ital">SVNKitAdapter</div>
            comes into play when the revision information needs to be accessed, and acts as a
            mediator
            between an xSVN repository and DB XML Accessor. And in turn when DB XML Accessor intends
            to create a new revision in a \xSVN repository it also exploits SVNKitAdapter
            functionality. In Figure 
            <div class="xref e146" linkend="tntbase_figure"></div> note that SVNKitAdapter does not work
            directly with \xSVN, but accesses it via HTTP as SVNKit [
            <div class="xref e147" linkend="SVN07"></div>] can not access BDB-based
            repositories via the local protocol. But because we expose SVN HTTP access, this is
            not a problem.
            
         </div>
         <div class="para e148">
            DB XML Accessor realizes a number of useful features but is able to access an xSVN
            repository only locally. In order to exhibit all its functionality to the world, RESTful
            interface of 
            <div class="emphasis e149" role="ital">TNTBase</div> is provided for users. The full specification can be found at
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e150" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">https://trac.mathweb.org/tntbase/wiki/info</div>, but to get a rough idea what a user is
            able to do with it, see Sections 
            <div class="xref e151" linkend="sec_dbxmlaccessor"></div>
            and 
            <div class="xref e152" linkend="sec_vfs"></div> devoted to the DB XML Accessor features.  We use the
            Jersey [
            <div class="xref e153" linkend="Jer09"></div>] library to implement a RESTful interface in
            
            <div class="emphasis e154" role="ital">TNTBase</div>. Jersey is a reference implementations of JAX-RS (JSR 311), the Java API
            for RESTful Web Services [
            <div class="xref e155" linkend="JSR09"></div>] and has simplified our implementation
            considerably. 
            
         </div>
         <div class="para e156">
            Apart from RESTful interface, 
            <div class="emphasis e157" role="ital">TNTBase</div> provides a test web-form that allows users to
            play with a subset of the 
            <div class="emphasis e158" role="ital">TNTBase</div> functionality before using RESTful style of
            communication. For simple testing of RESTful interfaces we would suggest the Firefox
            plugin which could be found at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e159" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">https://addons.mozilla.org/en-US/firefox/addon/9780</div>.
            Also an XML-content browser is available online that shows the 
            <div class="emphasis e160" role="ital">TNTBase</div> file system
            content including virtual files. Unfortunately 
            <div class="emphasis e161" role="ital">TNTBase</div> now supports authentication
            only when accessing its SVN interface. The united authentication for all interfaces
            is a
            subject for future work
            <div class="popupBox e162">
               <div class="popupLabel" onmouseover="$('#d1e346').show('1000');" onmouseout="$('#d1e346').hide('1000');">[ footnote ]</div>
               <div id="d1e346" style="display: none;">
                  <div class="footnote">
                     <div class="para e163">
                        see Ticket https://trac.mathweb.org/tntbase/ticket/3
                        
                     </div>
                  </div>
               </div>
            </div>.
            
         </div>
         <div class="para e164">
            Currently readers can access a test 
            <div class="emphasis e165" role="ital">TNTBase</div> system by two URLs: SVN interface at
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e166" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">https://alpha.tntbase.mathweb.org/repos/lectures/</div> and other interfaces at
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e167" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://alpha.tntbase.mathweb.org:8080/lectures/</div>. Additional information about
            
            <div class="emphasis e168" role="ital">TNTBase</div> can be found on its TRAC page at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e169" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">https://trac.mathweb.org/tntbase/</div>.
            
         </div>
      </div><a name="xSVNanXMLenabledRepositoryANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e170" xml:id="sec_xmlenrep" xreflabel="xSVN">
         <div class="title e171">xSVN, an XML-enabled Repository</div>
         <div class="para e172">
            The architecture of xSVN and thus 
            <div class="emphasis e173" role="ital">TNTBase</div> is motivated 
            by the following observation: Both the SVN server
            and the DB XML library are based on Berkeley DB (BDB). The SVN server uses it to store
            repository information
            <div class="popupBox e174">
               <div class="popupLabel" onmouseover="$('#d1e375').show('1000');" onmouseout="$('#d1e375').hide('1000');">[ footnote ]</div>
               <div id="d1e375" style="display: none;">
                  <div class="footnote">
                     <div class="para e175">In fact SVN can also use a file-system based storage
                        back end (SVN FS), but this does not affect 
                        <div class="emphasis e176" role="ital">TNTBase</div>.
                     </div>
                  </div>
               </div>
            </div>, and DB XML uses for storing raw bytes of XML and for supporting
            consistency, recoverability and transactions. Moreover, transactions can be shared
            between BDB and DB XML. Let us look at the situation in more detail
            <div class="popupBox e177">
               <div class="popupLabel" onmouseover="$('#d1e382').show('1000');" onmouseout="$('#d1e382').hide('1000');">[ footnote ]</div>
               <div id="d1e382" style="display: none;">
                  <div class="footnote">
                     <div class="para e178">The
                        more comprehensive information could be found at
                        
                        <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e179" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://svn.collab.net/repos/svn/trunk/subversion/libsvn_fs_base/notes/structure</div>
                        for the full story
                     </div>
                  </div>
               </div>
            </div>.
            
         </div>
         <div class="para e180">
            The SVN BDB-based file system uses multiple tables to store different repository
            information like information about locks, revisions, transactions, files, and directories,
            etc.. The two important tables for us are 
            <div class="emphasis e181" role="ital">representations</div> and 
            
            <div class="emphasis e182" role="ital">strings</div>. The 
            <div class="emphasis e183" role="ital">strings</div> table 
            stores only raw bytes and one entry of this table could be any of these:
            
            <div class="itemizedlist e184">
               <div class="listitem e185">
                  <div class="para e186">a file's contents or a delta
                     <div class="popupBox e187">
                        <div class="popupLabel" onmouseover="$('#d1e404').show('1000');" onmouseout="$('#d1e404').hide('1000');">[ footnote ]</div>
                        <div id="d1e404" style="display: none;">
                           <div class="footnote">
                              <div class="para e188">a difference between two versions of the same
                                 entity (directory entry lists, files, property lists) in a special format
                              </div>
                           </div>
                        </div>
                     </div> that reconstructs file contents
                     
                  </div>
               </div>
               <div class="listitem e189">
                  <div class="para e190">a directory entry list in special format called 
                     <div class="emphasis e191" role="ital">skel</div> or 
                     a delta that reconstructs a directory entry list skel
                  </div>
               </div>
               <div class="listitem e192">
                  <div class="para e193">a property list skel or a delta that reconstructs a property list skel</div>
               </div>
            </div>
            
         </div>
         <div class="figure e194" floatstyle="1" xml:id="xsvn_figure" xreflabel="xSVN Repository">
            <div class="mediaobject e195">
               <div class="imageobject e196">
                  <div class="metaBox e197"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e421').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e421" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e197'
                           </span><span class="metaAttribute">fileref='../../../vol3/graphics/Zholudev01/Zholudev01-002.png'
                           </span><span class="metaAttribute">format='png'
                           </span><span class="metaAttribute">width='100%'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
            <div class="caption e198">
               <div class="para e199">xSVN Repository</div>
            </div>
         </div>
         <div class="para e200">
            From looking at a 
            <div class="emphasis e201" role="ital">strings</div> entry alone there is no way to tell what kind of data it
            represents; the SVN server uses the 
            <div class="emphasis e202" role="ital">representations</div> table for this. Its entries are
            links that address entries in the 
            <div class="emphasis e203" role="ital">strings</div> table together with information about
            what kind of 
            <div class="emphasis e204" role="ital">strings</div> entry it references, and - if it is a delta - what it is a
            delta against. Note that the SVN server stores only the youngest revision (called
            the
            
            <div class="emphasis e205" role="ital">head revision</div>) explicitly in the 
            <div class="emphasis e206" role="ital">strings</div> table. Other revisions of
            whatever entity (a file, a directory or a property list) are re-computed by recursively
            applying inverse deltas from the head revision.
            
         </div>
         <div class="para e207">
            To extend SVN to xSVN (an 
            <div class="emphasis e208" role="ital">XML-enabled repository</div>), we only need to subjoin the
            DB XML library to SVN and add a new type of entry in the 
            <div class="emphasis e209" role="ital">representations</div> table that
            points to the last version of that document in the DB XML 
            <div class="emphasis e210" role="ital">container</div> (see
            Figure 
            <div class="xref e211" linkend="xsvn_figure"></div>). Containers are entities in DB XML that are used for storing
            XML documents in. Literally, a container is a file on disk that contains all the data
            associated with your documents, including metadata and indices. For every xSVN repository
            we use only one container located in the same folder as BDB tables, and therefore
            it
            allows us to share the same BDB environment exploited by an SVN back end.
            
         </div>
         <div class="para e212">
            From an end-user perspective there is no difference between SVN and xSVN: all the
            SVN commands are still available and have the same behavior. But for XML documents
            the
            internals are different. Assume that we commit a newly added XML file
            <div class="popupBox e213">
               <div class="popupLabel" onmouseover="$('#d1e461').show('1000');" onmouseout="$('#d1e461').hide('1000');">[ footnote ]</div>
               <div id="d1e461" style="display: none;">
                  <div class="footnote">
                     <div class="para e214">xSVN considers a file as an XML document if its extension is 
                        <div class="emphasis e215" role="ital">.xml</div> or its
                        
                        <div class="emphasis e216" role="ital">svn:mime-type</div> property is set to either 
                        <div class="emphasis e217" role="ital">text/xml</div> or
                        
                        <div class="emphasis e218" role="ital">application/xml</div>. This behavior can be easily adapted, for instance, by checking
                        if a file starts with 
                        <div class="emphasis e219" role="ital">&lt;?xml</div>. Even now an SVN repository administrator 
                        can benefit from using automated property setting, 
                        i.e. associate certain file extensions with 
                        <div class="emphasis e220" role="ital">text/xml</div> 
                        
                        <div class="emphasis e221" role="ital">svn:mime-type</div> property. 
                        For example, 
                        <div class="emphasis e222" role="ital">*.xslt</div> or 
                        <div class="emphasis e223" role="ital">*.xsd</div> would obtain 
                        
                        <div class="emphasis e224" role="ital">text/xml</div> mime-type on adding to a 
                        working copy and therefore will be treated as XML files for xSVN.
                     </div>
                  </div>
               </div>
            </div>. Its content does not go 
            to the 
            <div class="emphasis e225" role="ital">strings</div> table, but instead a file is added to DB XML container with a name
            which is equal to the reference key stored in the also newly created
            
            <div class="emphasis e226" role="ital">representations</div> entry of 
            <div class="emphasis e227" role="ital">DB XML full-text</div> type.  When we commit a number
            of files and even one of the XML files is not well-formed then the commit fails and
            no data
            are added into an xSVN repository, which conforms to the notion of a transaction in
            SVN
            and DB XML. When we want to checkout or update a working copy, xSVN knows what files
            are
            stored in DB XML, and those files are read from a DB XML container. Another important
            thing
            is the scenario when we commit another version of an XML file. The older revision
            is
            deleted from DB XML, the newer revision is added to DB XML and a delta between these
            revisions are stored in the 
            <div class="emphasis e228" role="ital">strings</div> table. This delta has a normal text SVN format, and
            the SVN deltification algorithms have not been changed in xSVN. Thus we are still
            able to
            receive older revisions of XML documents. For non-XML files the workflow of xSVN is
            absolutely the same as in SVN: data are stored in the same BDB tables, and the code
            behaves entirely in the same way. Thereby we are also able to store text or binary
            data in
            xSVN which can supplement the collection of XML files (e.g. licensing information
            or
            generated out of XML PDFs). And moreover we can add or commit XML and non-XML files
            in the
            same transaction.
            
         </div>
         <div class="para e229">
            As was mentioned above, xSVN deltification algorithms are inherited from normal
            SVN. The natural course of things for XML storage would be to substitute or extend
            these
            algorithms by XML-diff algorithms. We currently decided against this because SVN is
            a
            very complex system with differencing algorithms being an evidence of it. The more
            parts
            are subject for replacement or modification, the more efforts it requires and the
            less
            stable system becomes in comparison with the original well-tested one. Moreover, the
            text-based diff-algorithms are efficient, fast and reliable, nicely fit in with SVN
            architecture (to be precise, they are a part of it). Finally, it is not clear that
            there
            is any advantage to changing the deltification 
            <div class="emphasis e230" role="ital">on the server</div>. It is however
            clear that XML differencing brings great advantages 
            <div class="emphasis e231" role="ital">in the client</div> both in terms
            of smaller and less invasive deltas, and more informative conflict resolution
            strategies. But for transport in the server these "semantic differences" can be
            transformed into text-based diffs. If future research turns up advantages for supporting
            "semantic
            differences" in the server, we will integrate this into the xSVN server, otherwise
            we
            leave semantic differencing to the client layer integrated into 
            <div class="emphasis e232" role="ital">TNTBase</div>.
            
         </div>
         <div class="para e233">
            In conclusion: xSVN, as we presented it so far, offers a versioned XML storage, but
            without additional modules
            it is useless as the only difference from SVN is that it refuses to commit ill-formed
            XML
            documents. 
            
         </div>
      </div><a name="TheDBXMLAccessorLibraryANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e234" xml:id="sec_dbxmlaccessor" xreflabel="DB XML Accessor">
         <div class="title e235">The DB XML Accessor Library</div>
         <div class="para e236">
            So far we have introduced xSVN, an enhanced in our sense SVN, which stores the last
            revisions of XML files 
            in DB XML instead of BDB. The next decision was to implement a Java library (DB XML
            Accessor) 
            for internal usage which will serve as another brick to build the 
            <div class="emphasis e237" role="ital">TNTBase</div> system. 
            So we have a DB XML container that contains all of the newest revisions of XML files,
            
            and we have a Java API for accessing this container. How do we proceed?
            
         </div><a name="QueryingXMLDocumentsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e238" xml:id="sec_querying" xreflabel="Querying XML Documents">
            <div class="title e239">Querying XML Documents</div>
            <div class="para e240">
               We will start with a short description how querying is done in DB XML and in 
               DB XML Accessor. As in nearly every XML-native database, the query language in DB
               XML is XQuery. 
               To address the whole container in DB XML we use 
               <div class="emphasis e241" role="ital">collection('dbxml:/&lt;container_name&gt;')</div>. 
               To access a particular document in a container DB XML uses 
               
               <div class="emphasis e242" role="ital">doc('dbxml:/&lt;container_name&gt;/&lt;doc_name_inside_container&gt;')</div> syntax.
               
            </div>
            <div class="para e243">
               DB XML Accessor utilizes slightly extended and simplified syntax of accessing documents
               in a DB XML container. 
               Since we have only one container in xSVN, to access all documents in a container just
               use 
               
               <div class="emphasis e244" role="ital">collection()</div>, to access a particular document use 
               <div class="emphasis e245" role="ital">doc(&lt;path_to_doc&gt;)</div>. 
               
            </div>
            <div class="para e246">
               Here we should say something about how the latter query is transformed to DB XML syntax.
               
               As we mentioned in Section 
               <div class="xref e247" linkend="sec_xmlenrep"></div>, we use reference keys from the 
               
               <div class="emphasis e248" role="ital">representations</div>
               table as documents names in DB XML. There is another way to preserve a path and a
               document name in DB XML.
               To accomplish this DB XML document metadata are used. 
               Each document in a container can have an arbitrary set of metadata fields of different
               types. 
               This metadata could be also indexed by DB XML, which might improve performance of
               particular queries. 
               So when xSVN adds a new XML document into a container, it also sets a document location
               in a repository, 
               a document name and a full path of a document. For instance, if we have a document
               
               <div class="emphasis e249" role="ital">paper.xml</div> 
               in the 
               <div class="emphasis e250" role="ital">/Balisage</div> folder, then the location in a repository would be 
               
               <div class="emphasis e251" role="ital">/Balisage</div>, 
               the document name - 
               <div class="emphasis e252" role="ital">paper.xml</div>, and the full path - 
               <div class="emphasis e253" role="ital">/Balisage/paper.xml</div>. 
               At first glance this information might seem redundant, especially taking into account
               that 
               xSVN stores all of these in BDB tables. But by this approach we do not lose much except
               
               some storage space and writing performance when index of metadata should be updated.
               
               But we gain much more, now we are independent in DB XML Accessor from BDB tables,
               
               and each of the metadata fields can improve performance on particular queries which
               deal with documents paths.    
               
            </div>
            <div class="para e254">
               Thanks to the mentioned above metadata fields, it is possible to access a subset of
               documents in a container. 
               For this one should use 
               <div class="emphasis e255" role="ital">collection(&lt;arbitrary_path&gt;)</div> in 
               DB XML Accessor. For example 
               <div class="emphasis e256" role="ital">collection(/doc*//test//paper??.xml)</div> 
               would address all documents which names corresponds to the pattern 
               <div class="emphasis e257" role="ital">paper??.xml</div> 
               (a '?' is just a wildcard) and they contain 
               <div class="emphasis e258" role="ital">test</div> directory in the path and the 
               first directory of which starts with 
               <div class="emphasis e259" role="ital">doc</div>.
               
            </div>
            <div class="para e260">
               Also DB XML Accessor exposes methods for retrieving contents and paths of documents
               which 
               are located at some arbitrary paths. Wildcards or '//', which stands for an arbitrary
               number of subfolders in a path, 
               could also be used. All these queries would not be so efficient if we did not introduce
               a file system concept 
               in xSVN container. Why did we have to introduce a file system? The answer is simple:
               
               DB XML does not have any hierarchical structure inside its containers. The next sections
               explains how we have introduced it. 
               
            </div>
         </div><a name="FileSysteminanxSVNContainerANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e261" xml:id="sec_fs" xreflabel="File System in an xSVN Container">
            <div class="title e262">File System in an xSVN Container</div>
            <div class="para e263">
               We already introduced the file path metadata fields in Section 
               <div class="xref e264" linkend="sec_querying"></div>. 
               Using them it is possible to reproduce the file system
               tree, but unfortunately it is not always efficiently. Assume that we want to find
               out what
               directories and files are located in a particular folder. For this we would have to
               execute a substring query on our file path metadata field. If a DB XML container contains
               a huge collection of documents then we could have a big delay while performing a seemingly
               simple task.  The solution was to introduce ad-hoc XML documents in an xSVN container,
               one
               for each directory. We call such XML documents as 
               <div class="emphasis e265" role="ital">file system documents
                  (FSDs)
               </div>. FSDs have a special name format: 
               <div class="emphasis e266" role="ital">tnt:&lt;directory_path&gt;</div>. 
               Each of these FSDs contains a list of directory entries in XML format. For example
               for directory
               
               <div class="emphasis e267" role="ital">/Balisage/papers</div> we might have the following FSD inside an xSVN container (its
               name is 
               <div class="emphasis e268" role="ital">tnt:/Balisage/papers/</div>):
               
            </div>
            <div class="programlisting e269" xml:space="preserve">
               &lt;entries xmlns="http://tntbase.mathweb.org/ns"&gt;
               &lt;dir name="sources"/&gt;
               &lt;dir name="references"/&gt;
               &lt;file name="paper_zholudev.xml"/&gt;
               &lt;file name="paper_kohlhase.xml"/&gt;
               &lt;vfile name="notations.vf" id="dbxml_54"/&gt;  &lt;!--will be explained later --&gt;
               &lt;/entries&gt;
               
            </div>
            <div class="para e270">
               Now we can easily and efficiently find out about entries in the particular directory
               using XQuery. 
               Here we should mention that such FSDs exist only for a folder which contain XML files
               or folders which contain XML files. 
               Thereby we do not interfere with other content of an xSVN repository like text files
               or images. 
               xSVN takes care about consistency in such FSDs, e.g. if a folder becomes empty after
               deletion of XML files, 
               then the corresponding FSD is removed from a DB XML container and the folder is removed
               from the parent's folder entries 
               and so on recursively. Also if we add some XML files to a newly created folder, then
               the file system structure 
               is created recursively. 
               
            </div>
         </div><a name="WriteAccesstoANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e271" xml:id="sec_write" xreflabel="Write Access to TNTBase">
            <div class="title e272">Write Access to 
               <div class="emphasis e273" role="ital">TNTBase</div>
            </div>
            <div class="para e274">
               So far we discussed only how to retrieve content and query an xSVN container by DB
               XML
               Accessor. But is it possible to write to xSVN using DB XML Accessor, or perform an
               XQUpdate query? The answer is positive. Then the next question arises, what would
               happen
               with revisions of XML files inside an xSVN repository?  Shortly the answer is that
               the
               updated XML files will get a new revision in xSVN, then will be deltified, and a delta
               will be
               stored in BDB. Thus all history of modifications will be preserved. Let us discuss
               how we
               have accomplished that.
               
            </div>
            <div class="para e275">
               In DB XML Accessor we use the 
               <div class="emphasis e276" role="ital">SVNKitAdapter</div> library, which is based on the
               SVNKit - a Java library that re-implements the SVN client
               functionality. This allows us to work directly with an xSVN repository without a need
               to
               have a local working copy. In particular, SVNKit follows the SVN protocol to makes
               sure
               that no changes are lost on a commit; it forces an in-memory update and construct
               a delta
               between the local and the (updated) head revision. Only this delta is sent to a repository
               by SVNKit. But things get more complicated if we intend to modify an XML document
               by XQUpdate
               facilities. Then DB XML Accessor substitutes the original XQUpdate with a transform
               function (see [
               <div class="xref e277" linkend="XQU08"></div>] for more details), which returns a modified document but
               does not modify a document internally in DB XML. Then this modified part is sent via
               SVNKitAdapter to xSVN in the usual way: SVNKit creates a new revision of a file and
               stores
               a delta against the previous version. Thus we can again retrieve a version of a file
               before executing XQUpdate. The xSVN log message would tell users how this change has
               occurred.
               
            </div>
         </div><a name="QueryingPreviousRevisionsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e278">
            <div class="title e279">Querying Previous Revisions</div>
            <div class="para e280">
               Even though the xSVN container only stores the head revision of XML files we can query
               previous revisions of XML files: DB XML Accessor can 
               <div class="emphasis e281" role="ital">cache</div> XML files in the same
               xSVN container for the respective revision. Then we are able to query XML files
               exactly like we describe it in Section 
               <div class="xref e282" linkend="sec_querying"></div> but additionally providing a
               revision of interest. Note that only those files that have been cached before will
               be
               queried. Analogously we can remove a set of documents from a cache. Then they will
               not be
               queried. The advantage of this approach is that we choose manually the interesting
               subset
               of a revision thereby avoiding redundant filling of an xSVN container and eliminating
               unnecessary results. Also we are able to cache the single file unlike SVN when we
               are able
               to checkout or export only folders. Note that we can even cache the head revision,
               even
               though the head xSVN container already contains it. This can be useful when we intend
               to
               query against the documents of an exact revision: documents of the head revision can
               evolve, but cached documents remain the same.
               
            </div>
            <div class="para e283">
               All caching is mediated by SVNKitAdapter, which retrieves the necessary revisions
               from an
               xSVN repository. Then these revisions are added to a DB XML container with a special
               metadata field that denotes a revision number. This metadata field is also indexed,
               which
               improves performance on querying. All XML documents of the latest revision have a
               revision
               meta field equal to '-1'. This field allows us to distinguish different revisions
               when
               querying without loosing performance. In order to cache the latest revision, one should
               provide the exact number of it.    
               
            </div>
         </div><a name="CachingQueryResultsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e284" xml:id="sec_caching" xreflabel="Caching Query Results">
            <div class="title e285">Caching Query Results</div>
            <div class="para e286">
               DB XML Accessor can cache query results in situations where a query incurs a large
               processing load, but the files that contribute to a query result change rarely. The
               user
               must simply pass a corresponding option to a query engine and receive a unique access
               handle with the computed result. Of course it is also possible to clean an xSVN container
               from cached results if they are not needed any longer or became obsolete. Internally,
               DB
               XML Accessor stores query results as separate documents. To distinguish them from
               e.g. FSDs introduced in Section 
               <div class="xref e287" linkend="sec_vfs"></div>, we introduce a 
               <div class="emphasis e288" role="ital">type</div> metadata field
               which is also applied for virtual files (see Section 
               <div class="xref e289" linkend="sec_vfs"></div>).
               
            </div>
         </div>
      </div><a name="VirtualFilesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e290" xml:id="sec_vfs" xreflabel="Virtual Files">
         <div class="title e291">Virtual Files</div>
         <div class="para e292">
            In this section we introduce a powerful concept - a 
            <div class="emphasis e293" role="ital">Virtual File (VF)</div>. A VF is a
            
            <div class="emphasis e294" role="ital">TNTBase</div> file system entity which is a result of a particular XQuery expression, i.e. a
            VF is characterized by XQuery expression and a revision number this expression operates
            on. For instance if we create a VF with XQuery that returns the list of references
            from
            all scientific papers in a repository, then the content of a VF would be the list
            of
            references.            
            
         </div><a name="CreatingaVirtualFileandGettingInformationaboutVirtualFilesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e295">
            <div class="title e296">Creating a Virtual File and Getting Information about Virtual Files</div>
            <div class="para e297">
               A VF is a file system entity that records the following information:
               
            </div>
            <div class="itemizedlist e298">
               <div class="listitem e299">
                  <div class="para e300">an XQuery expression together with a list of namespace declarations which are used
                     by it. The VF contents are determined by this XQUery expression. If XQuery provided
                     is
                     not valid, then TNTBase notifies the user and does not create the VF.
                  </div>
               </div>
               <div class="listitem e301">
                  <div class="para e302">a revision number that a VF operates on. Note that if we did not cache any
                     documents for that revision, then the content of a VF will be empty.
                  </div>
               </div>
               <div class="listitem e303">
                  <div class="para e304">a description of what a VF does. This will simplify understanding for other users
                     of
                     VF intention. This field can be blank of course.
                  </div>
               </div>
               <div class="listitem e305">
                  <div class="para e306">a VF path in a repository. It will be not allowed to create a VF if a file system
                     entity already exists in the specified path. Even though it is possible to create
                     a VF
                     in folders which do not exist yet. In this case a directory structure will be created
                     automatically.
                  </div>
               </div>
            </div>
            <div class="para e307">
               For instance, if somebody is interested in all definitions from mathematical documents
               in a folder where a VF is being created, 
               then (s)he can provide the following information to DB XML Accessor:
               
            </div>
            <div class="itemizedlist e308">
               <div class="listitem e309">
                  <div class="para e310">
                     XQuery: 
                     <div class="emphasis e311" role="ital">collection(./*.omdoc)//ns:definitions</div> together with the
                     namespaces: 
                     <div class="emphasis e312" role="ital">(ns, http://www.mathweb.org/omdoc)</div>. Note that the first
                     '.' in the XQuery means the folder where a VF is being created.
                     
                  </div>
               </div>
               <div class="listitem e313">
                  <div class="para e314">Revision number: 
                     <div class="emphasis e315" role="ital">-1</div>. Stands for the latest revision
                  </div>
               </div>
               <div class="listitem e316">
                  <div class="para e317">Description: 
                     <div class="emphasis e318" role="ital">This VF returns all definitions from the current folder</div>
                  </div>
               </div>
               <div class="listitem e319">
                  <div class="para e320">Path: 
                     <div class="emphasis e321" role="ital">/omdoc/theories/defs.vf</div>. A VF 
                     <div class="emphasis e322" role="ital">defs.vf</div> 
                     will be created in the folder 
                     <div class="emphasis e323" role="ital">/omdoc/theories</div>
                  </div>
               </div>
            </div>
            <div class="para e324">
               After a VF has been created, one can easily retrieve its 'content', i.e. in our example
               all definitions in OMDoc documents in the 
               <div class="emphasis e325" role="ital">/omdoc/theories</div> folder. 
               For the sake of example, a reader might also find useful Figure 
               <div class="xref e326" linkend="vf_figure"></div>. 
               
            </div>
            <div class="figure e327" floatstyle="1" xml:id="vf_figure" xreflabel="Definitions virtual file">
               <div class="mediaobject e328">
                  <div class="imageobject e329">
                     <div class="metaBox e330"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e724').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e724" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e330'
                              </span><span class="metaAttribute">fileref='../../../vol3/graphics/Zholudev01/Zholudev01-003.jpg'
                              </span><span class="metaAttribute">format='jpg'
                              </span><span class="metaAttribute">width='80%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="caption e331">
                  <div class="para e332">Definitions virtual file</div>
               </div>
            </div>
            <div class="para e333">
               That is a typical creation procedure that is supported by DB XML Accessor. When a
               VF is
               created a new entity is added to a corresponding FSD. This entity is called 
               <div class="emphasis e334" role="ital">vfile</div>
               and also contains a name of a newly created DB XML document that encapsulates information
               about a VF. We call such a document as a 
               <div class="emphasis e335" role="ital">VF encapsulated document (VFED)</div>. To
               retrieve the content of a VF the corresponding FSD is checked for the VF. If a VF
               exists,
               then a name of a VFED is read. When we know the name of a VFED, then we are able to
               receive an XQuery expression from that document. As soon as we have an XQuery expression
               we can execute it and deliver results to a user. Namespace declarations which have
               been
               provided during a creation of a VF are used during XQuery execution and are stored
               in a
               VFED.
               
            </div>
            <div class="para e336">
               VFEDs are tagged with the metadata
               field 
               <div class="emphasis e337" role="ital">type</div> discussed in Section 
               <div class="xref e338" linkend="sec_caching"></div>. Therefore we can easily pick out only VFs and retrieve information
               about them in an xSVN container like their descriptions, revisions they operate on,
               their
               names, etc. Thus we are not get lost in the variety of VFs that users might have created.
               
               
            </div>
         </div><a name="CachingandQueryingVirtualFilesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e339">
            <div class="title e340">Caching and Querying Virtual Files</div>
            <div class="para e341">
               To make VFs more like VIEWS in relational data bases, DB XML Accessor also allows
               them to
               be queried, but only if their content has been cached. This allows the user to specify
               which VFs participate in querying. Note that if XML files which form the content of
               a VF
               have been changed, the cache of a VF is not changed. This is a target for a future
               work
               <div class="popupBox e342">
                  <div class="popupLabel" onmouseover="$('#d1e748').show('1000');" onmouseout="$('#d1e748').hide('1000');">[ footnote ]</div>
                  <div id="d1e748" style="display: none;">
                     <div class="footnote">
                        <div class="para e343">see Ticket 
                           <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e344" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">https://trac.mathweb.org/tntbase/ticket/50</div>
                        </div>
                     </div>
                  </div>
               </div>. Caching also might be useful
               when a user intends to receive a content of a VF quickly and is sure that the cache
               contains up-to-date data. This is especially worthwhile when an XQuery expression
               of a VF is computationally expensive.
               
            </div>
            <div class="para e345">
               When DB XML Accessor receives a command to cache a content of a VF (during creation
               of a
               VF, receiving VF's content or just via simple re-cache command), then the VF's content
               is
               stored in an xSVN container in the corresponding VFED. Results are wrapped in the
               special
               XML elements that are indexed. When querying VFs a user should use the same query
               syntax
               as (s)he uses for usual XML documents. That is possible because each VFED contains
               metadata fields for a VF path and its name. So for DB XML Accessor it does not make
               too
               much difference what is being queried: XML documents of the latest revision, cached
               documents of former revisions or VFs.
               
            </div>
         </div><a name="EditingVirtualFilesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e346">
            <div class="title e347">Editing Virtual Files</div>
            <div class="para e348">
               We complete this section by introducing another operation that could be performed
               on
               VFs. We are talking about editing VFs, i.e. in some cases (which we will explain a
               bit
               later) it is possible to retrieve a VF for editing, modify it and submit changes
               back. Then the files from which a VF was formed will be modified in xSVN and will
               receive
               a new revision. Returning back to our example with a VF that contains definitions
               of
               mathematical objects, if we modify all definitions in this file, then all OMDoc files
               in
               the folder 
               <div class="emphasis e349" role="ital">/omdoc/theories</div> that contain definitions will be modified accordingly
               and committed to xSVN.
               
            </div>
            <div class="para e350">
               This approach has a number of limitations, some of them are quite obvious and
               straightforward:
               
            </div>
            <div class="itemizedlist e351">
               <div class="listitem e352">
                  <div class="para e353">A VF we intend to modify should operate on the latest revision, since we can not
                     change a particular revision in xSVN, because once committed a revision becomes
                     persistent in a repository.
                  </div>
               </div>
               <div class="listitem e354">
                  <div class="para e355">We can edit only those VFs whose results are elements of some XML documents in DB
                     XML, to be precise attributes or XML nodes. We rely on DB XML query engine to figure
                     that out. If a result type is an XML node or attribute from DB XML point of view then
                     we
                     allow to edit such elements and show them in a list of results to be modified. But
                     we
                     can not edit pure text values which come from XML elements since text elements could
                     be
                     mixed with other XML elements, and when we retrieve such a text we lose the information
                     before/after which nested element this text element has come from.
                  </div>
               </div>
               <div class="listitem e356">
                  <div class="para e357">The VF content is a set of results. Every result should be wrapped in a special XML
                     element that contains the special information to allow DB XML Accessor to propagate
                     changes back to original files. A user is only allowed to edit inside such elements,
                     otherwise important information could be lost.
                  </div>
               </div>
            </div>
            <div class="para e358">
               This allow us to get rid of a notion of files in a way and operate on the level of
               objects and version them, although internally in xSVN the minimal versioned entity
               is
               still a file. Let us provide an example of the VF
               that contains a list of creators in OMDoc files.
               
            </div>
            <div class="programlisting e359" xml:space="preserve">
               &lt;?xml version="1.0" encoding="UTF-8"?&gt;
               &lt;tnt:vfile name="defs.vf" mode="edit" xmlns:tnt="http://tntbase.mathweb.org/ns" 
               xmlns="http://www.mathweb.org/omdoc" xmlns:dc="http://purl.org/dc/elements/1.1/"&gt;
               &lt;tnt:note&gt;
               WARNING: do not edit 'results' elements, edit only within them! 
               Otherwise TNTBase will not be able to version the corresponding 
               original files! Appending additional result elements may harm 
               your TNTBase content. Additional elements under 'tnt:vfile' other 
               than 'tnt:result' will be ignored 
               &lt;/tnt:note&gt;
               &lt;tnt:result file_path="/ecc.omdoc" element_path="/omdoc/metadata" 
               element_name="dc:creator" element_type="element" id="1"&gt;
               &lt;dc:creator role="trl"&gt;Michael Kohlhase&lt;/dc:creator&gt;
               &lt;/tnt:result&gt;
               &lt;tnt:result file_path="/ecc.omdoc" element_path="/omdoc/metadata" 
               element_name="dc:creator" element_type="element" id="2"&gt;
               &lt;dc:creator role="ant"&gt;The OpenMath Society&lt;/dc:creator&gt;
               &lt;/tnt:result&gt;
               &lt;tnt:result file_path="/omstd/arithmetics1.omdoc" element_path="/omdoc/
               symbol/metadata"  element_name="dc:creator" element_type="element" id="3"&gt;
               &lt;dc:creator role="ant"&gt;The TNTBase Society&lt;/dc:creator&gt;
               &lt;/tnt:result&gt;
               &lt;/tnt:vfile&gt;
               
            </div>
            <div class="para e360">
               This file is obtained for editing and as was discussed above contain wrappers with
               a set of attributes. 
               Elements with the same name and path in the same documents are distinguished by the
               
               <div class="emphasis e361" role="ital">id</div> attribute.
               
            </div>
            <div class="para e362">
               A couple of words how it is realized in DB XML Accessor.  
               As we can see out of the example, every result of a VF is wrapped in a special XML
               element that contains the information about an original document, 
               a path in the original document, a name of an element, a type of an element (an attribute
               or a node) and a unique id. 
               All these items allow us to construct a unified XQUpdate expression for an every modified
               original document. 
               So in our example, if we modify each element, then it means that we should propagate
               changes to two documents: 
               
               <div class="emphasis e363" role="ital">/ecc.omdoc</div> and 
               <div class="emphasis e364" role="ital">/omstd/arithmetics1.omdoc</div>. For the former one XQUpdate will contain two replacement statements, 
               for the latter one - only one replacement statement. Then the technique described
               in Section 
               <div class="xref e365" linkend="sec_write"></div> is applied. 
               
            </div>
         </div>
      </div><a name="ConclusionandFutureWorkANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e366" xml:id="sec_concl" xreflabel="Conclusion and Future Work">
         <div class="title e367">Conclusion and Future Work</div>
         <div class="para e368">
            We have presented the 
            <div class="emphasis e369" role="ital">TNTBase</div> system, a
            versioned XML database system that can act as a storage solution for an XML-based
            deep
            web. The implementation effort has reached a state, where the system has enough features
            to be used in experimental applications. 
            <div class="emphasis e370" role="ital">TNTBase</div> may significantly ease
            implementation and experimentation of XML-based applications, as it allows us to offload
            the
            storage layer to a separate system. Moreover users which require only versioning
            functionality may use 
            <div class="emphasis e371" role="ital">TNTBase</div> as a version control system whereas more exigent
            users can experiment with additional features of the system.        
            
         </div>
         <div class="para e372">
            The next development goals will be to stabilize the system further, to improve performance
            and extend it with special infrastructure for the OMDoc language. As an extended case
            study we want to develop 
            <div class="emphasis e373" role="ital">TNTBase</div> into an archive and content management system
            for scientific publications and semi-formal theories. A practical limitation that
            needs to
            be overcome on the way to this is the lack of a unified authentication and rights
            management subsystem.
            
         </div>
         <div class="figure e374" floatstyle="1" xml:id="example_figure" xreflabel="Distributed Scientific Publishing">
            <div class="mediaobject e375">
               <div class="imageobject e376">
                  <div class="metaBox e377"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e817').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e817" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e377'
                           </span><span class="metaAttribute">fileref='../../../vol3/graphics/Zholudev01/Zholudev01-004.png'
                           </span><span class="metaAttribute">format='png'
                           </span><span class="metaAttribute">width='100%'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
            <div class="caption e378">
               <div class="para e379">Distributed Scientific Publishing</div>
            </div>
         </div>
         <div class="para e380">
            In the near future, we want to study how the difference-based architecture inherent
            in
            version control systems can be extended to a distribution model. Consider for instance
            the
            situation in Figure 
            <div class="xref e381" linkend="example_figure"></div>: Michael started to work on his paper with future
            intentions to propagate it to Jacobs University. During the creation Normen wants
            to have
            a cache copy of a Michael's paper on his computer and look after the changes. From
            time to
            time Michael pushes his work to Jacobs University and the corresponding people at
            Jacobs
            checks the correctness of the paper. Then assume Figure 
            <div class="xref e382" linkend="example_figure"></div>(b). When
            everything is done from Michael's side he wants to pass the rights for primary editing
            to
            university and only receive updates from it. Notice that Normen still depends on the
            Michael's updates. Now Jacobs University propagates its changes of the paper to some
            Journal and its stuff validates the correctness. Here is the same scenario as with
            Michael
            and Jacobs University in Figure 
            <div class="xref e383" linkend="example_figure"></div>(a). Finally (see
            Figure 
            <div class="xref e384" linkend="example_figure"></div>(c)) Jacobs University passes the rights for original editing of
            the paper to a Journal (like Michael did with Jacobs) and Normen decides to switch
            the
            source of cached copy to Jacobs since he thinks that Jacobs contains more actual
            information. We assume that all the individuals and institutions in our examples are
            running 
            <div class="emphasis e385" role="ital">TNTBase</div> installations that store the relevant documents. Some instance of
            these are "originals", others are working copies that are updated from them and that
            commit to them. Crucially the 
            <div class="emphasis e386" role="ital">TNTBase</div> take over all the necessary caching and
            communication of differences to make the process transparent and effortless to the
            users.
            The preliminary idea is to implement a client library inside a 
            <div class="emphasis e387" role="ital">TNTBase</div> web
            application that will be taught to speak to other instances of 
            <div class="emphasis e388" role="ital">TNTBase</div> and receive
            information from them. This library would exploit the SVNKitAdapter module, which
            will be
            in charge of checking compatibility of documents versions and commit or update necessary
            paths in an xSVN repository.
            
         </div>
         <div class="para e389">
            Also our plans include the further work regarding virtual files. 
            Some efficiency improvements should be done as well as more intelligent caching should
            be implemented. 
            By "more intelligent" here we mean that the cache of virtual files should be updated
            automatically when the original files 
            in a repository which form a VF content are changed. That would also mean the gain
            of performance since every time when we receive a content
            of a VF or query it, we can be sure that the cache is up-to-date and we do not need
            to regenerate it.
            
         </div>
         <div class="para e390">
            Finally, we plan to extend the XQuery family of languages with primitives for versioning
            to develop the full potential of the 
            <div class="emphasis e391" role="ital">TNTBase</div> system. The main operations here
            will be the propagation of changes, conflicts and non-interference judgments along
            semantic dependency relation; see [
            <div class="xref e392" linkend="MK08"></div>] for first ideas. Currently much of the
            necessary content relations are language-dependent, but we will try to distill query
            and
            propagation primitives that can be implemented in the 
            <div class="emphasis e393" role="ital">TNTBase</div> system level.
            
         </div>
      </div><a name="BibliographyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e394">
         <div class="title e395">Bibliography</div>
         <div class="bibliomixed e396" xml:id="Act08" xreflabel="Act08">
            
            <div class="emphasis e397" role="ital">ActiveMath</div>, seen September 2008. Web page at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e398" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.activemath.org/</div>.
            
         </div>
         <div class="bibliomixed e399" xml:id="BBC07" xreflabel="BBC+07">
            Anders Berglund, Scott Boag, Don Chamberlin, Mary F. Fernandez, Michael Kay,
            Jonathan Robie, and Jerome Simeon. XML Path Language (XPath) Version 2.0. W3C
            recommendation, The World Wide Web Consortium, January 2007.                     
            
            
         </div>
         <div class="bibliomixed e400" xml:id="Ber09a" xreflabel="Ber09a">
            Berkeley DB, seen January 2009. Available at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e401" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.oracle.com/technology/products/berkeley-db/index.html</div>.
            
         </div>
         <div class="bibliomixed e402" xml:id="Ber09b" xreflabel="Ber09b">
            Berkeley DB XML, seen January 2009. Available at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e403" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.oracle.com/database/berkeley-db/xml/index.html</div>.
            
         </div>
         <div class="bibliomixed e404" xml:id="BLFM98" xreflabel="BLFM98">
            Tim Berners-Lee, R. Fielding, and L. Masinter. Uniform Resource Identifiers (URI),
            Generic Syntax. RFC 2717, Internet Engineering Task Force, 1998.
            
         </div>
         <div class="bibliomixed e405" xml:id="CD99" xreflabel="CD99">
            James Clark and Steve DeRose. XML Path Language (XPath) Version 1.0. W3C
            recommendation, The World Wide Web Consortium, November 1999.
            
         </div>
         <div class="bibliomixed e406" xml:id="CGM00" xreflabel="CGM00">
            J. Cho and H. Garcia-Molina. The evolution of the web and implications for an
            incremental crawler. In Proc. of the 26th International Conference on Very Large
            Databases, pages 200-209, 2000.
            
         </div>
         <div class="bibliomixed e407" xml:id="CNX08" xreflabel="CNX08">
            
            <div class="emphasis e408" role="ital">Connexions</div>. Web page at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e409" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://cnx.org</div>, seen June 2008.
            
         </div>
         <div class="bibliomixed e410" xml:id="CSFP04" xreflabel="CSFP04">
            Ben Collins-Sussman, Brian W. Fitzpatrick, and Michael Pilato. 
            <div class="emphasis e411">Version Control With
               Subversion
            </div>. O'Reilly &amp; Associates, Inc., Sebastopol, CA, USA, 2004.
            
         </div>
         <div class="bibliomixed e412" xml:id="DDL02" xreflabel="DDL02">
            C.J. Date, Hugh Darwen, and Nikos Lorentzos. 
            <div class="emphasis e413">Temporal Data &amp; the Relational
               Model
            </div>. The Morgan Kaufmann Series in Data Management Systems. Morgan
            Kaufmann, 2002.
            
         </div>
         <div class="bibliomixed e414" xml:id="FK00" xreflabel="FK00">
            Andreas Franke and Michael Kohlhase. System description: 
            <div class="emphasis e415">MBase</div>, an open mathematical
            knowledge base. In David McAllester, editor, 
            <div class="emphasis e416">Automated Deduction - CADE-17</div>, number 1831 in LNAI, pages 455-459. Springer Verlag, 2000.
            
         </div>
         <div class="bibliomixed e417" xml:id="FK06" xreflabel="FK06">
            Andreas Franke and Michael Kohlhase. MBase, an open mathematical knowledge
            base. In OMDoc - 
            <div class="emphasis e418">An open markup format for mathematical documents [Version 1.2]</div>
            [Koh06], chapter 26.4.
            
         </div>
         <div class="bibliomixed e419" xml:id="FMNW03" xreflabel="FMNW03">
            Dennis Fetterly, Mark Manasse, Marc Najork, and Janet Wiener. A large-scale
            study of the evolution of web pages. In WWW2003. ACM Press, 2003.
            
         </div>
         <div class="bibliomixed e420" xml:id="Ipe09" xreflabel="Ipe09">
            Ipedo XML Database, seen March 2009. Available at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e421" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.ipedo.com/html/ipedo_xml_db.html</div>.
            
         </div>
         <div class="bibliomixed e422" xml:id="Jer09" xreflabel="Jer09">
            Reference Implementation for building RESTful Web services, seen April 2009. Available
            at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e423" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">https://jersey.dev.java.net/</div>.
            
         </div>
         <div class="bibliomixed e424" xml:id="JSR09" xreflabel="JSR09">
            JSR 311: JAX-RS: The Java API for RESTful Web Services, seen April 2009. Available
            at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e425" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">https://jsr311.dev.java.net/nonav/releases/1.0/index.html</div>.
            
         </div>
         <div class="bibliomixed e426" xml:id="KF01" xreflabel="KF01">
            Michael Kohlhase and Andreas Franke. MBase: Representing knowledge and context
            for the integration of mathematical software systems. 
            <div class="emphasis e427">Journal of Symbolic Computation;
               Special Issue on the Integration of Computer Algebra and Deduction Systems
            </div>,
            32(4):365-402, 2001. doi: 
            <div class="biblioid doi e428">10.1006/jsco.2000.0468</div>.
            
         </div>
         <div class="bibliomixed e429" xml:id="Koh06" xreflabel="Koh06">
            Michael Kohlhase. OMDoc - 
            <div class="emphasis e430">An open markup format for mathematical documents [Version 1.2]</div>. Number 4180 in LNAI. Springer Verlag, 2006.
            
         </div>
         <div class="bibliomixed e431" xml:id="Koh08" xreflabel="Koh08">
            Michael Kohlhase. Using LaTeX as a semantic markup format. Mathematics in Computer
            Science, 2008. doi: 
            <div class="biblioid doi e432">10.1007/s11786-008-0055-5</div>.
            
         </div>
         <div class="bibliomixed e433" xml:id="KS06" xreflabel="KS06">
            Michael Kohlhase and Ioan Sucan. A search engine for mathematical formulae. In
            Tetsuo Ida, Jacques Calmet, and Dongming Wang, editors, 
            <div class="emphasis e434">Proceedings of Artificial
               Intelligence and Symbolic Computation
            </div>, AISC'2006, number 4120 in LNAI, pages 241-253. Springer Verlag, 2006. doi: 
            <div class="biblioid doi e435">10.1007/11856290_21</div>.
            
         </div>
         <div class="bibliomixed e436" xml:id="Lan08" xreflabel="Lan08">
            Christoph Lange. SWiM: A semantic wiki for mathematical knowledge management.
            Web page at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e437" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://kwarc.info/projects/swim/</div>, seen October 2008.
            
         </div>
         <div class="bibliomixed e438" xml:id="Mar09" xreflabel="Mar09">
            MarkLogic Server, seen March 2009. Available at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e439" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.marklogic.com/product/marklogic-server.html</div>.
            
         </div>
         <div class="bibliomixed e440" xml:id="Mil07" xreflabel="Mil07">
            Bruce Miller. 
            <div class="emphasis e441">LaTeXML</div>: A LaTeX to xml converter. Web Manual at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e442" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://dlmf.nist.gov/LaTeXML/</div>, seen September2007.
            
         </div>
         <div class="bibliomixed e443" xml:id="MK08" xreflabel="MK08">
            Normen Mueller and Michael Kohlhase. Fine-Granular Version Control &amp; Redundancy
            Resolution. In Joachim Baumeister and Martin Atzmueller, editors, 
            <div class="emphasis e444">Wissens- und Erfahrungsmanagement
               LWA (Lernen, Wissensentdeckung und Adaptivitaet) Conference Proceedings
            </div>, volume 448, 2008.
            
         </div>
         <div class="bibliomixed e445" xml:id="MyS08" xreflabel="MyS08">
            Mysql, seen June 2008. Homepage at http://www.mysql.com/.
            
         </div>
         <div class="bibliomixed e446" xml:id="omd" xreflabel="omd">
            The OMDoc repository. Web page at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e447" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://omdoc.org</div>.
            
         </div>
         <div class="bibliomixed e448" xml:id="Ora09a" xreflabel="Ora09a">
            Oracle Database, seen April 2009. Available at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e449" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.oracle.com/database/index.html</div>.
            
         </div>
         <div class="bibliomixed e450" xml:id="Ora09b" xreflabel="Ora09b">
            Oracle XML DB, seen April 2009. Available at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e451" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.oracle.com/technology/tech/xml/xmldb/index.html</div>.
            
         </div>
         <div class="bibliomixed e452" xml:id="pan" xreflabel="pan">
            The panta rhei Project. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e453" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://trac.kwarc.info/panta-rhei</div>. Seen March 2009.
            
         </div>
         <div class="bibliomixed e454" xml:id="Pos09" xreflabel="Pos09">
            Postfix, seen May 2009. Homepage at http://www.postfix.org/.
            
         </div>
         <div class="bibliomixed e455" xml:id="RPM09" xreflabel="RPM09">
            The rpm package manager, seen May 2009. Homepage at http://www.rpm.org/.
            
         </div>
         <div class="bibliomixed e456" xml:id="Sch06" xreflabel="Sch06">
            Sebastian Schaffert. IkeWiki: A semantic wiki for collaborative knowledge management.
            In 
            <div class="emphasis e457">1st International Workshop on Semantic Technologies in Collaborative Applications
               STICA 06, Manchester, UK
            </div>, June 2006.
            
         </div>
         <div class="bibliomixed e458" xml:id="SEG09" xreflabel="SEG09">
            Sebastian Schaffert, Julia Eder, Szaby Grunwald, Thomas Kurz, Mihai Radulescu,
            Rolf Sint, and Stephanie Stroka. KiWi - a platform for semantic social software. In
            Christoph Lange, Sebastian Schaffert, Hala Skaf-Molli, and Max Voelkel, editors, 
            <div class="emphasis e459">Proceedings
               of the 4th Workshop on Semantic Wikis, European Semantic Web Conference
               2009
            </div>, Hersonissos, Greece, June 2009. In press.
            
         </div>
         <div class="bibliomixed e460" xml:id="SVN07" xreflabel="SVN07">
            SVNKit - The only pure Java Subversion library in the world!, seen September 2007.
            Available at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e461" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://svnkit.com/</div>.
            
         </div>
         <div class="bibliomixed e462" xml:id="SVN08" xreflabel="SVN08">
            Subversion, seen June 2008. Available at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e463" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://subversion.tigris.org/</div>.
            
         </div>
         <div class="bibliomixed e464" xml:id="Tea06" xreflabel="Tea06">
            Connexions Team. Connexions: Sharing knowledge and building communities.
            White paper at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e465" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://cnx.org/aboutus/publications/ConnexionsWhitePaper.pdf</div>, 2006.
            
         </div>
         <div class="bibliomixed e466" xml:id="Ver08" xreflabel="Ver08">
            VeriFun: A verifier for functional programs, seen February 2008. System homepage at
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e467" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.verifun.de/</div>.
            
         </div>
         <div class="bibliomixed e468" xml:id="XQu07" xreflabel="XQu07">
            XQuery: An XML Query Language, seen December 2007. Available at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e469" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xquery/</div>.
            
         </div>
         <div class="bibliomixed e470" xml:id="XQU08" xreflabel="XQU08">
            XQUpdate: XQuery Update Facility 1.0, seen February 2008. Available at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e471" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xquery-update-10/</div>.
            
         </div>
      </div>
   </div>
</div>