<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#PlatformIndependence2010HelpingDocumentsFlyWellinEmergingArchitecturesANCHOR" name="PlatformIndependence2010HelpingDocumentsFlyWellinEmergingArchitecturesTOC">Platform Independence 2010 - Helping Documents Fly Well in Emerging Architectures</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#NoteonlanguageANCHOR" name="NoteonlanguageTOC">Note on language</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#Whataretheseemergingarchitectures?ANCHOR" name="Whataretheseemergingarchitectures?TOC">What are these emerging architectures?</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#SingleprocessorarchitecturebecomingmultithenmanycoreANCHOR" name="SingleprocessorarchitecturebecomingmultithenmanycoreTOC">Single processor architecture becoming multi-, then many-core</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#MemoryandstoragehierarchyANCHOR" name="MemoryandstoragehierarchyTOC">Memory and storage hierarchy</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#PlatformIndependence2010++?ANCHOR" name="PlatformIndependence2010++?TOC">Platform Independence 2010++? </a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#DesignPrinciplesforPlatformIndependenceANCHOR" name="DesignPrinciplesforPlatformIndependenceTOC">Design Principles for Platform-Independence</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#MinimizeactionatadistanceANCHOR" name="MinimizeactionatadistanceTOC">Minimize action at a distance</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#Helpprocessingto&#34;shoplocal&#34;ANCHOR" name="Helpprocessingto&#34;shoplocal&#34;TOC">Help processing to "shop local"</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ReplicationmaybeyourfriendANCHOR" name="ReplicationmaybeyourfriendTOC">Replication may be your friend</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#DetaileddifferencesacrosslotsofsortofsimilarthingsmaybecostlyANCHOR" name="DetaileddifferencesacrosslotsofsortofsimilarthingsmaybecostlyTOC">Detailed differences across lots of sort-of-similar things may be costly</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ExamplesANCHOR" name="ExamplesTOC">Examples</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#Actionatadistance&#34;shoppinglocal&#34;andreplicationANCHOR" name="Actionatadistance&#34;shoppinglocal&#34;andreplicationTOC">Action at a distance, "shopping local", and replication</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#VariationincontentbetweenapparentlysimilarthingsANCHOR" name="VariationincontentbetweenapparentlysimilarthingsTOC">Variation in content between apparently similar things </a></div>
               </div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConclusionANCHOR" name="ConclusionTOC">Conclusion</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ReferencesANCHOR" name="ReferencesTOC">References</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">A view of the parallel computing landscape.</div>
         <div class="singletermTERMS">A Bridging Model for Parallel Computation</div>
         <div class="singletermTERMS">August 3 - 6, 2010</div>
         <div class="singletermTERMS">Ann</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2010</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">Cache-Oblivious Algorithms and Data Structures</div>
         <div class="singletermTERMS">Cache-oblivious data structure</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">Data exchange</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">example</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">IT Consultant - Technical Architecture</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">Memory hierarchy</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">of any size</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">Parallel processing</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
         <div class="singletermTERMS">Questions and Answers about BSP</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">The Complexity of Data Exchange</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">XQuery 1.0 and XPath 2.0 Formal Semantics</div>
         <div class="singletermTERMS">XQuery 1.0 and XPath 2.0 Data Model (XDM)</div>
         <div class="singletermTERMS">XSL Transformations (XSLT) Version 2.0,</div>
         <div class="singletermTERMS">XML processing performance</div>
         <div class="singletermTERMS">XML instance design</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="PlatformIndependence2010HelpingDocumentsFlyWellinEmergingArchitecturesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.2">
      <div class="title e1">Platform Independence 2010 - Helping Documents Fly Well in Emerging Architectures</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2010</div>
            <div class="confdates e5">August 3 - 6, 2010</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">Parallel processing and memory bottlenecks dominate current platform architecture
               conversations. After many years on the sidelines, parallel architectures are rapidly
               becoming mainstream, with more parallelism the obvious way to gain yet more
               performance. Feeding data to and from all these parallel cycles is also becoming
               more challenging. 
            </div>
            <div class="para e8">What does this have to do with XML? Surely all this is under the hood, something
               for compiler designers, software architects and other non-content people to worry
               about? The answer is that these issues can't be totally hidden under the hood.
               Balisageurs as content-folks and interoperability-folks need to pay attention now
               to
               the high level information design heuristics that will prevent our data structures
               being the ones that happen to run like treacle (or molasses) on the coming
               generations of faster, larger and neater systems.
            </div>
         </div>
         <div class="author e9">
            <div class="personname e10">
               <div class="firstname e11">Ann</div>
               <div class="surname e12">Wrightson</div>
            </div>
            <div class="personblurb e13">
               <div class="para e14">Ann Wrightson has been working with markup since 1978, from typesetting
                  languages &amp; fielded records through generic coding to SGML &amp; XML. She
                  has experience of using markup for interoperability and platform-independence
                  across a wide range of content including published reference works, technical
                  publications, e-learning, legal codes &amp; materials, and semantic
                  interoperability standards for information systems in healthcare. 
               </div>
            </div>
            <div class="affiliation e15">
               <div class="jobtitle e16">IT Consultant - Technical Architecture</div>
               <div class="orgname e17">Informing Healthcare (NHS Wales)</div>
            </div>
         </div>
         <div class="legalnotice e18">
            <div class="para e19">Copyright © 2010 Ann Wrightson</div>
         </div>
         <div class="keywordset e20" role="author">
            <div class="keyword e21">XML processing performance</div>
            <div class="keyword e22">Parallel processing</div>
            <div class="keyword e23">Memory hierarchy</div>
            <div class="keyword e24">Cache-oblivious data structure</div>
            <div class="keyword e25">XML instance design</div>
            <div class="keyword e26">Data exchange</div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e27">
         <div class="title e28">Introduction</div>
         <div class="para e29">Ever faster sequential computations in single ever-larger memory spaces has been
            "just how it is" in mainstream computing for about a generation - long enough
            for design considerations that are actually dependent on this environment to become
            invisible, unthought assumptions. After many years on the sidelines, parallel
            architectures are becoming mainstream, with more parallelism now the obvious way to
            gain
            more performance. Memory performance has been growing more slowly, so feeding data
            to
            and from all these parallel cycles is also a major challenge, with platform architecture
            solutions generally focussing on efficient ways to move data through deep hierarchies
            spanning the range from distant network resources to on-chip caches. Large and
            distributed data in particular needs to move efficiently through many layers of memory
            hierarchy, with each layer behaving as a cache with respect to the previous layer,
            that
            is, being significantly smaller and faster, and with a different block or page size.
            
         </div>
         <div class="para e30"> What does this have to do with XML? Surely all this is under the hood or behind the
            scenes, something for compiler designers, software architects and other non-content
            people to worry about? After all, a platform is a just a platform, and XML and many
            XML
            tools are platform-independent. 
         </div>
         <div class="para e31">To an extent this is true. Compiler designers, software architects and especially
            database vendors are busy worrying right now, and much thought from the Balisage
            community and others will also undoubtedly go into making basic XML tools work well
            on
            the new platforms. However, notwithstanding these efforts, data designed with due
            attention to the fundamental characteristics of emerging platform architectures are
            likely to fare better, especially in speed of processing, than data designed for the
            "old world".
         </div>
         <div class="para e32">Against this background, the premise underlying this paper is that since parallel
            processing and managing data flows within memory hierarchies are increasingly prominent
            in mainstream platform architecture, any large data structure, or collection of data
            that is usually processed together, now needs to be more or less parallel-friendly,
            cache-oblivious, and distribution-tolerant, to be really platform-independent - and
            this
            includes XML instances. This paper is about the attention we need to pay now as
            designers of XML content to the structural design patterns that will promote or prevent
            our data structures being the ones that happen to start running unexpectedly slowly
            next
            year or the year after.
         </div><a name="NoteonlanguageANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e33">
            <div class="title e34">Note on language</div>
            <div class="para e35">In this paper, the common parlance "XML vocabularies" is deprecated in
               favour of discussing XML data structures and design features of instances of XML
               content. This is partly from personal preference, but also from a suspicion that
               thinking about XML in terms of vocabularies may inhibit the kind of thinking that
               this paper is intended to encourage. Markup that contains terms reflecting natural
               language does function like language vocabulary in some ways (see 
               <div class="xref e36" linkend="Wrightson05"></div>) however XML instances are also structured data, and
               the latter is the aspect that predominates in the issues discussed in this paper.
               
            </div>
         </div>
      </div><a name="Whataretheseemergingarchitectures?ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e37">
         <div class="title e38">What are these emerging architectures?</div>
         <div class="para e39">This section provides a concise account of emerging processor architectures and the
            state of the art in data access. Implications for platform-independent XML content
            design are discussed in the following section.
         </div><a name="SingleprocessorarchitecturebecomingmultithenmanycoreANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e40">
            <div class="title e41">Single processor architecture becoming multi-, then many-core</div>
            <div class="para e42">About 2003-4, performance improvement in sequential processors slowed down very
               significantly. Power density was a major factor, but so was the growing difficulty
               of getting even cleverer about executing single sequences of instructions really
               fast. With a way still to go in raw chip capacity, a consensus rapidly emerged
               amongst the majority of processing-chip designers that the only way forward was to
               put multiple processing "cores" on a chip, first two or four, then twelve,
               sixty-four, eighty... The latest edition of Patterson &amp; Hennesey's classic
               textbook on processor architecture provides a fuller account of this phenomenon (
               <div class="xref e43" linkend="PatHen09"></div>, Chapter 7).
            </div>
            <div class="para e44">Graphics processors and some other niche processing applications had already made
               some progress into gaining performance through large-scale parallel processing, but
               for the rest of the industry there was a fairly sudden realization a few years ago
               that all that weird parallel stuff from the 1980s onward that no-one except the
               high-performance crowd had been taking seriously was on its way back in with a
               vengeance. Following this realization, and taking into account the head start
               achieved by graphics applications, graphics processors and general purpose
               processors are on an interesting journey of combination and convergence, for example
               in Intel's "Larrabee" architecture (
               <div class="xref e45" linkend="Seiler08"></div>).
            </div>
            <div class="para e46">While various parallel computation models have been proposed and investigated, two
               of the most durable have been BSP (bulk-synchronous-parallelism) and nested
               parallelism. BSP (
               <div class="xref e47" linkend="BSP90"></div>, 
               <div class="xref e48" linkend="BSP96"></div>) formalizes the notion of performing a bunch of parallel
               computations then collating the results before setting up and performing another
               bunch of parallel computations, in a regular cycle of
               compute-communicate/collate-compute. Nested parallelism (
               <div class="xref e49" linkend="NESL"></div>,
               <div class="xref e50" linkend="PJ08"></div>) is more of a language model, enabling a programmer to
               describe a large computation as a recursively nested structure of parallel
               parts.
            </div>
            <div class="para e51">The main point for our purposes is that in order to work well in a parallel world,
               computation (and its requisite data) needs to come apart into independent pieces,
               at
               least for long enough to be useful in getting some work done. Two interesting
               special cases are where many computations run in parallel on the same data, and
               where a single computation runs the same instruction stream to process many
               different, similar items of data. The latter is the basis of graphics processing
               units. Both put a disproportionate cost on variation, in data content and processing
               respectively, compared to sequential processing, so that replication of common parts
               and separating rather than combining similar cases becomes more efficient. 
            </div>
            <div class="para e52">This is very counterintuitive to those engineers and information designers,
               including many who have come into markup since XML emerged as a mainstream force in
               1998-2000, whose intuitions have been formed in situations that take for granted
               single (increasingly fast) computation and single (increasingly fast and capacious)
               memory. Based on personal conversations and anecdotal evidence, there is a mixed
               reaction from the older hands who did not play in the parallel pond, and remember
               what it took to keep computations and working memory compact on smaller machines or
               in the small job partitions in early multitasking architectures. To caricature
               somewhat, some feel that after a period of deep illusion, computing has finally
               woken up once more to some essential design disciplines - and some feel this is
               separating the engineer even further from the real machine, which is becoming ever
               more deeply incomprehensible.
            </div>
         </div><a name="MemoryandstoragehierarchyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e53">
            <div class="title e54">Memory and storage hierarchy</div>
            <div class="para e55">Memory performance has been growing continually alongside processor performance,
               over decades. In recent years it has become a commonplace to say that the rate of
               growth in memory performance is markedly slower than for processing, leading to a
               large and increasing performance gap. This is broadly true, but stated simply
               obscures a more interesting detailed picture of evolving patterns of memory and
               storage access over a range of hardware, media and networks (
               <div class="xref e56" linkend="PatHen09"></div>, 5.13). 
            </div>
            <div class="para e57"> Multiple cache levels within processors, deep memory hierarchies using different
               types of hardware, delegating disk access management to on-board processors within
               disk drives, and introducing specialized storage network managers, have between them
               taken the strain to a large extent. However, the very intensity and diversity of
               this effort means that different platforms are more likely than before to have
               different memory hierarchies and storage characteristics.A practical consequence is
               that fine tuning of memory hierarchy assumptions and data design to make data fast
               on one platform can very easily slow it down on another.
            </div>
            <div class="para e58">This is an area where a good theory has turned out to be very practical as a tool
               for thinking. Cache-obliviousness (better named hierarchy-obliviousness, but as
               usual the initial name has stuck) is the core concept of an area of research on data
               structures that are not only fast to process in principle, but remain fast however
               the memory hierarchy (and storage network, at larger scale) is structured.
               Cache-oblivious data structures have high locality with respect to whatever the
               usual operations are on the data.That is, if an instance of a cache-oblivious data
               structure is broken arbitrarily into pieces 
               <div class="emphasis e59" role="ital"> of any size </div> (for example, loaded a page at a time into
               a cache, hence the name) the common operations on the data structure are, on
               average, highly likely to need data that is within the same piece. The value of this
               area of work for our purposes is not so much in the detail as in the overall
               concept. Data structures that follow this design pattern are likely to "fly
               well" in a wide range of memory hierarchies, since at any scale, the usual
               kinds of processing are less likely to walk or reference out of the piece that is
               already in fast(er) memory.
            </div>
            <div class="para e60">For readers interested in following up the detail of the theory, there is a
               thorough introduction to cache-obliviousness by Erik Demaine (
               <div class="xref e61" linkend="Dem02"></div>) in the papers from a European summer school on large data
               structures in 2002 (
               <div class="xref e62" linkend="BRICS02"></div>).
            </div>
         </div>
      </div><a name="PlatformIndependence2010++?ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e63">
         <div class="title e64">Platform Independence 2010++? </div>
         <div class="para e65">So what is it to be platform independent in 2010 and beyond? What do we need to be
            independent of, specifically? In simple terms, the key platform features are:
         </div>
         <div class="itemizedlist e66">
            <div class="listitem e67">
               <div class="para e68"> A processing model that uses many processing units, breaking large computations
                  into many independent, different tasks that run simultaneously. This happens
                  within a many-core chip, and also happens when computations are deployed across
                  several processors with different data processing characteristics (one example
                  that is already mainstream is a desktop computer with a separate graphics
                  processor that is highly data-parallel);
               </div>
            </div>
            <div class="listitem e69">
               <div class="para e70">A memory hierarchy of arbitrary depth and width, with considerable variation
                  in the detail of how data is moved up and down the hierarchy; and
               </div>
            </div>
            <div class="listitem e71">
               <div class="para e72">Greater variation in platform architectures as architecture concepts developed
                  in niche areas (especially high performance scientific computing and graphics
                  processing) are brought to bear in mainstream computing platforms.
               </div>
            </div>
         </div>
         <div class="para e73">Any one platform can be assumed to have clever low-level software that is designed
            to
            hide its complexity and weirdness, so that everything still works correctly. Preserving
            correct processing is a high priority in designing new processor architectures with
            forward compatibility from older ones - however it turns out that data designed for
            the
            "old world" , although not broken, can be unexpectedly slow in emerging
            architectures. This can also lead indirectly to faults, for example when timing
            assumptions are broken. 
         </div>
         <div class="para e74">The main evidence I have for this is anecdotal - side-remarks in talks and
            water-cooler chat with infrastructure-specialist colleagues who are managing a range
            of
            data-intensive applications in a growing data centre. Suffice it to say that there
            are
            people who earn a living advising how to get this right, and that my colleagues tell
            me
            that more than one well-established product has needed updates to resolve performance
            problems in a more distributed, parallel environment. 
         </div>
         <div class="para e75"> Abstracting away from platform features into data processing, the key features are
            as
            follows.
         </div>
         <div class="itemizedlist e76">
            <div class="listitem e77">
               <div class="para e78">Significant performance speed-up by separating large computations into smaller
                  pieces of computation that can run independently long enough to get some useful
                  work done (task parallelism).
               </div>
            </div>
            <div class="listitem e79">
               <div class="para e80">Significant performance speed-up by executing exactly the same process
                  simultaneously and independently across numbers (8, 16, 32...) of data items
                  (data parallelism);
               </div>
            </div>
            <div class="listitem e81">
               <div class="para e82">Separating large data structures into smaller pieces that are usable in
                  isolation long enough to get some useful work done (required in both task
                  parallelism and data parallelism).
               </div>
            </div>
            <div class="listitem e83">
               <div class="para e84">Moving data up (read) and down (write) a deep memory hierarchy. At each level
                  some size of data will need to be broken into parts (in a very simple manner, eg
                  pages), and there is significant performance benefit if, on average, such parts
                  of data (at any level) are usable in isolation long enough to get some useful
                  work done.
               </div>
            </div>
            <div class="listitem e85">
               <div class="para e86">Moving data between the pieces of a parallel computation so that each piece
                  has the data it needs, respecting dependencies regarding data integrity (eg read
                  vs write) and the intended overall flow of computation. 
               </div>
            </div>
         </div>
         <div class="para e87">The balance of emphasis between these features varies across the different
            architectures involved, for example scheduling dependencies and data exchange (rather
            than just data partitioning) become more prominent the more communication is needed
            between pieces of computation. Data exchange operates at different scales such as
            a
            multicore chip passing data between independently processing cores that have separate
            caches, and a multi-processor architecture passing data between processors (such as
            the
            common example of a desktop computer with a separate graphics processor).
         </div>
         <div class="para e88">A fundamental research result regarding data exchange is that, in the general case
            where the structures at each end are different, and a computation is needed to map
            data
            from one to the other, the computational complexity of a data exchange is exponentially
            related to the complexity of the data schemas at each end. The complexity of a data
            schema is a combination of complexity measures on the actual data structure and how
            it
            is described (
            <div class="xref e89" linkend="Kol06"></div>). 
         </div>
         <div class="para e90">This result is no great surprise, since data exchange feels like a hard problem in
            practice. However, when data exchange becomes a larger proportionate part of general
            computation, its exponential general complexity properties suggest that there are
            significant benefits to be gained from keeping data structures and the ways they are
            described as simple as possible.
         </div>
         <div class="para e91">Partitioning data and computation is a more familiar problem, though one effect of
            a
            generation of ever-more-capable sequential processing environments with ever-larger
            memory spaces has been a tendency to regard such concerns as rather old-fashioned.
            High
            performance computing for scientific data analysis has kept this area of work alive,
            especially in relation to arrays of data and matrix computations (for example 
            <div class="xref e92" linkend="LeeZedem02"></div>) and automatic data partitioning on this kind of data in XML
            has also been investigated (
            <div class="xref e93" linkend="HG09"></div>). 
         </div>
      </div><a name="DesignPrinciplesforPlatformIndependenceANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e94">
         <div class="title e95">Design Principles for Platform-Independence</div>
         <div class="para e96">This section suggests a few rules of thumb that are likely to make larger documents,
            and smaller documents (such as messages) that turn up in large numbers, more truly
            platform independent over these changes in processing architecture. Some of the rules
            come naturally when writing or designing documents by hand, but are pretty easy to
            break
            or ignore when marked-up data is generated by a program. Others may look like obvious
            bad practice from the point of view of writing and maintaining documents by hand,
            but
            look more like candidates for sensible design trade-offs when marked-up data is being
            generated by a program. (Note that "generated by a program" includes using one
            of the many authoring tools that provide an illusion of manual editing. If you are
            not
            seeing all the grim details of the pointy brackets as you type, then your data is
            being
            generated by a program.)
         </div>
         <div class="para e97">Note that it is specifically NOT assumed here that the current usual-suspect XML
            processing tools will be used to process or pre-process the document instances
            concerned. These tools may or may not be able to overcome fundamental problems in
            data
            characterstics " under the hood ", even if rewritten, and new tools will come.
            The only assumptions made below are the structural properties of XML instances.
         </div><a name="MinimizeactionatadistanceANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e98">
            <div class="title e99">Minimize action at a distance</div>
            <div class="itemizedlist e100">
               <div class="listitem e101">
                  <div class="para e102">Ensure that the intended scope of influence of any data value that
                     represents a parameter for processing data in the document propagates in a
                     direction from root to leaf along the tree structure of the document.
                  </div>
               </div>
               <div class="listitem e103">
                  <div class="para e104"> Minimize cross-references in the data (in particular when purely implicit
                     in the data and not made evident in the raw XML structure) that mean that a
                     computation on the data finds out in flight that it needs to look at a
                     distant part of the tree.
                  </div>
               </div>
            </div>
         </div><a name="Helpprocessingto&#34;shoplocal&#34;ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e105">
            <div class="title e106">Help processing to "shop local"</div>
            <div class="itemizedlist e107">
               <div class="listitem e108">
                  <div class="para e109">Put things that are relevant to each other for processing, close to each
                     other in the document, that is, few steps apart in the document tree. Expect
                     the document tree to be cut into branches, twig-bunches or even small twigs
                     for processing, and think about what computations can be completed in-twig
                     with larger and smaller twig-sizes.
                  </div>
               </div>
               <div class="listitem e110">
                  <div class="para e111">Keep document structure aligned with probable processing structures. Think
                     about the flow of information through expected computations on the document,
                     and see if it follows a natural decompositon of the document structure. A
                     simple positive example is hyphenation a paragraph at a time over many
                     paragraphs making up a chapter of a novel.
                  </div>
               </div>
            </div>
         </div><a name="ReplicationmaybeyourfriendANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e112">
            <div class="title e113">Replication may be your friend</div>
            <div class="itemizedlist e114">
               <div class="listitem e115">
                  <div class="para e116">Repeating pieces of data in different places seems wasteful, yet it may be
                     a really good idea. If a document is generated by a program, so that the
                     conceptual burden of repetition and likelihood of error are small, then
                     there is no reason not to replicate data items it if it helps to reduce
                     action at a distance.
                  </div>
               </div>
            </div>
         </div><a name="DetaileddifferencesacrosslotsofsortofsimilarthingsmaybecostlyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e117">
            <div class="title e118">Detailed differences across lots of sort-of-similar things may be costly</div>
            <div class="itemizedlist e119">
               <div class="listitem e120">
                  <div class="para e121"> If a processor with data-parallel capabilities thinks that some bunch of
                     things are all the same, then it may decide to process them in a
                     data-parallel way, that is, assume that their processing is identical. A
                     consequence of this is that, from the point of view of any arbitrary one of
                     the parallel processing threads, it has to wait idly through the work needed
                     to cope with all the detailed optional differences that apply to any of the
                     others. If this really is efficient for your data, fine, however it may be
                     better have more different kinds of things, and less optionality within the
                     same kind of thing, so that the under-the-hood gnomes can make more
                     efficient choices more easily for parallel processing.
                  </div>
               </div>
            </div>
         </div><a name="ExamplesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e122">
            <div class="title e123">Examples</div>
            <div class="para e124">The performance penalties discussed above would be expected to be felt mainly at
               large scale, that is, on large documents or high volume processing of smaller
               documents. However, the structural patterns in the rules of thumb can be illustrated
               using small examples, and that is the purpose of this section. 
            </div><a name="Actionatadistance&#34;shoppinglocal&#34;andreplicationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e125">
               <div class="title e126">Action at a distance, "shopping local", and replication</div>
               <div class="para e127">These patterns are illustrated in this section using two contrasting examples.
                  Each example is based on the structural characteristics of a (different) real
                  data format designed for exchanging information extracted from patient records. 
               </div>
               <div class="para e128">The first example has instances divided into in two main parts. First, a list
                  of entities (people, roles and locations), and second, a list of recorded events
                  involving these entitites. Entities are included in events by reference to a
                  unique identifier for each entity. 
               </div>
               <div class="para e129">As the number of events grows, then because a patient will tend to interact
                  with the same people and be treated in the same places, the proportion of
                  entities compared to events will decrease.
               </div>
               <div class="para e130">There are two motivating ideas underlying these design features. One is to
                  minimize repetition of data, and the other is to facilitate data transfer
                  between instances of software applications having similar (relational) database
                  structures that are closely aligned with the structure of the data. These aims
                  lead to a structure that explicitly avoids replication and has a strong tendency
                  not to &amp;quot;shop local&amp;quot;. In addition, the references to
                  identifiers are well hidden in the data from the point of view of XML parsing,
                  and the majority of references are between two subtrees that diverge near the
                  root of the document (" action at a distance").
               </div>
               <div class="figure e131">
                  <div class="title e132">Example 1</div>
                  <div class="programlisting e133" xml:space="preserve">
                     &lt;?xml version="1.0" encoding="UTF-8"?&gt;
                     &lt;record&gt;
                     &lt;entities&gt;
                     &lt;person&gt;
                     &lt;id&gt;FF138AF1-F3BC-4BF7-B45C-427E012BA3F4&lt;/id&gt;
                     &lt;dateOfBirth&gt;1987-11-20&lt;/dateOfBirth&gt;
                     &lt;name&gt;...&lt;/name&gt;
                     &lt;address&gt;...&lt;/address&gt;
                     &lt;/person&gt;
                     &lt;person&gt;
                     &lt;id&gt;BBBBE23A-A9D1-A411-F824-9F7A00A33757&lt;/id&gt;
                     &lt;dateOfBirth&gt;1987-11-20&lt;/dateOfBirth&gt;
                     &lt;name&gt;...&lt;/name&gt;
                     &lt;address&gt;...&lt;/address&gt;
                     &lt;/person&gt;
                     &lt;location&gt;
                     &lt;id&gt;4B98A89C-41AD-4425-B6CF-17DE8C779FC7&lt;/id&gt;
                     &lt;name&gt;...&lt;/name&gt;
                     &lt;address&gt;...&lt;/address&gt;
                     &lt;/location&gt;
                     &lt;role&gt;
                     &lt;id&gt;8533C566-74FB-4176-8EFE-13E3FCE5B3A6&lt;/id&gt;
                     &lt;name&gt;General Practitioner&lt;/name&gt;
                     &lt;moreAboutRole&gt;...&lt;/moreAboutRole&gt;
                     &lt;/role&gt;
                     &lt;practitioner&gt;
                     &lt;id&gt;3CBA0926-1E25-4B0E-AAFC-F9CF02F8596B&lt;/id&gt;
                     &lt;person&gt;BBBBE23A-A9D1-A411-F824-9F7A00A33757&lt;/person&gt;
                     &lt;role&gt;8533C566-74FB-4176-8EFE-13E3FCE5B3A6&lt;/role&gt;
                     &lt;/practitioner&gt;
                     &lt;patient&gt;
                     &lt;id&gt;A17B8BFA-3A2B-4796-87ED-F9A4D7375C3D&lt;/id&gt;
                     &lt;pasNumber&gt;39752746&lt;/pasNumber&gt;
                     &lt;patientPerson&gt;FF138AF1-F3BC-4BF7-B45C-427E012BA3F4&lt;/patientPerson&gt;
                     &lt;/patient&gt;
                     &lt;/entities&gt;
                     &lt;events&gt;
                     &lt;encounter&gt;
                     &lt;id&gt;97E037BE-4CBE-46BA-98F8-3BA6B4DA3D1C&lt;/id&gt;
                     &lt;date&gt;2010-04-01&lt;/date&gt;
                     &lt;patient&gt;A17B8BFA-3A2B-4796-87ED-F9A4D7375C3D&lt;/patient&gt;
                     &lt;practitioner&gt;3CBA0926-1E25-4B0E-AAFC-F9CF02F8596B&lt;/practitioner&gt;
                     &lt;location&gt;4B98A89C-41AD-4425-B6CF-17DE8C779FC7&lt;/location&gt;
                     &lt;/encounter&gt;
                     &lt;/events&gt;
                     &lt;/record&gt;
                     
                  </div>
               </div>
               <div class="para e134">In the second example, data about the people and places involved in a care
                  event are given directly in each event subtree of the record extract. This data
                  format was designed to convey information from a number of different software
                  applications into a common store, from which it is then retrieved on a per-event
                  basis. An explicit design criterion was to make no assumptions about the
                  internal structure of the data store, and in the real situation this is based
                  on, there are several such stores with different internal database structures. 
               </div>
               <div class="para e135">This example also illustrates the role of replicating subtrees of data. A
                  location address may appear many times, however the benefits of replication were
                  judged to outweigh the costs, and the sending system is unlikely to make errors
                  putting the same data into a number of events in a transferred record.
               </div>
               <div class="figure e136">
                  <div class="title e137">Example 2</div>
                  <div class="programlisting e138" xml:space="preserve">
                     &lt;?xml version="1.0" encoding="UTF-8"?&gt;
                     &lt;Record&gt;
                     &lt;Event&gt;
                     &lt;EffectiveTime&gt;2008-04-23T15:10:00.0Z&lt;/EffectiveTime&gt;
                     &lt;EventType&gt;
                     &lt;IdValue&gt;[Identifier for this event type]&lt;/IdValue&gt;
                     &lt;/EventType&gt;
                     &lt;PatientDetails&gt;
                     &lt;NHSnumber&gt;
                     &lt;IdValue&gt;1234567890&lt;/IdValue&gt;
                     &lt;/NHSnumber&gt;
                     &lt;Name&gt;...&lt;/Name&gt;
                     &lt;Address&gt;...&lt;/Address&gt;
                     &lt;/PatientDetails&gt;
                     &lt;ResponsiblePerson&gt;
                     &lt;StructuredName&gt;
                     &lt;Title&gt;Dr&lt;/Title&gt;
                     &lt;GivenName&gt;Local&lt;/GivenName&gt;
                     &lt;FamilyName&gt;Doctor&lt;/FamilyName&gt;
                     &lt;/StructuredName&gt;
                     &lt;/ResponsiblePerson&gt;
                     &lt;Role&gt;
                     &lt;IdValue&gt;[role of responsible person]&lt;/IdValue&gt;
                     &lt;/Role&gt;
                     &lt;Location&gt;
                     &lt;StructuredAddress&gt;
                     &lt;PropertyNumber&gt;65&lt;/PropertyNumber&gt;
                     &lt;AddressLine&gt;Festaville Way&lt;/AddressLine&gt;
                     &lt;AddressLine&gt;Limnoleon&lt;/AddressLine&gt;
                     &lt;AddressLine&gt;Cranmore Regis&lt;/AddressLine&gt;
                     &lt;/StructuredAddress&gt;
                     &lt;PostCode&gt;LL99 3BB&lt;/PostCode&gt;
                     &lt;/Location&gt;
                     &lt;LocationType&gt;
                     &lt;IdValue&gt;[Identifier for location type]&lt;/IdValue&gt;
                     &lt;/LocationType&gt;
                     &lt;/Event&gt;
                     &lt;/Record&gt;
                     
                  </div>
               </div>
            </div><a name="VariationincontentbetweenapparentlysimilarthingsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e139">
               <div class="title e140">Variation in content between apparently similar things </div>
               <div class="para e141">The next example illustrates in principle how parallel processing of instances
                  of the same element is slowed down by optionality in the data, in a processor
                  that runs the same instruction stream in parallel on many data instances (SIMD).
                  Each picture in the series shows the effect of progressively more variation
                  between instances. Coloured cells indicate steps where no progress is made in
                  processing that element.
               </div>
               <div class="para e142">The first picture below shows element instances with no variation at all, and
                  there is no loss of performance. In the next, some items are optional. Any
                  instance that lacks an optional item will be waiting while the other instances
                  use that part of the instruction stream. The next one after shows what happens
                  when a content model has a choice of sequences of elements. Finally, the fourth
                  picture shows the result of having many possible options (for example, a rich XML
                  vocabulary) with only a few used in
                  any one data instance. 
               </div>
               <div class="figure e143">
                  <div class="title e144">No optionality</div>
                  <div class="mediaobject e145">
                     <div class="imageobject e146">
                        <div class="metaBox e147"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e247').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e247" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e147'
                                 </span><span class="metaAttribute">fileref='../../../vol5/graphics/Wrightson01/Wrightson01-001.JPG'
                                 </span><span class="metaAttribute">format='jpg'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               <div class="figure e148">
                  <div class="title e149">Sparse optionality</div>
                  <div class="mediaobject e150">
                     <div class="imageobject e151">
                        <div class="metaBox e152"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e253').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e253" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e152'
                                 </span><span class="metaAttribute">fileref='../../../vol5/graphics/Wrightson01/Wrightson01-002.JPG'
                                 </span><span class="metaAttribute">format='jpg'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               <div class="figure e153">
                  <div class="title e154">Alternative substructures</div>
                  <div class="mediaobject e155">
                     <div class="imageobject e156">
                        <div class="metaBox e157"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e259').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e259" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e157'
                                 </span><span class="metaAttribute">fileref='../../../vol5/graphics/Wrightson01/Wrightson01-003.JPG'
                                 </span><span class="metaAttribute">format='jpg'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               <div class="figure e158">
                  <div class="title e159">Selective use of a large vocabulary</div>
                  <div class="mediaobject e160">
                     <div class="imageobject e161">
                        <div class="metaBox e162"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e265').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e265" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e162'
                                 </span><span class="metaAttribute">fileref='../../../vol5/graphics/Wrightson01/Wrightson01-004.JPG'
                                 </span><span class="metaAttribute">format='jpg'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               <div class="para e163">A simple count provides a rough indication of the magnitude of the effect.
                  Taking the content of the 
                  <div class="code e164">example</div> element only, in the first case,
                  all steps are active. In the second, there are 5 idle steps out of 40, giving a
                  crude efficiency measure of 87.5%. In the third case, 24 steps out of 40 are
                  idle, i.e. 45% are active. In the final case, the majority of the steps relate
                  to options not represented in the data, and only 4 steps out of 40 are active,
                  i.e. 10%. 
               </div>
               <div class="para e165">It must be emphasized that this is only a rough indication in principle; real
                  effects will depend on a combination of data structures, application-level
                  algorithms, programming language implementations, and operating system and
                  processor strategies. However, even this crude analysis indicates the potential
                  value of, for example, reconfiguring messages that have repetitive internal
                  structure to use different element names in preference to naming elements by
                  role and varying their internal structure, in order to provide easy
                  opportunities for efficient data-parallel processing.
               </div>
            </div>
         </div>
      </div><a name="ConclusionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e166">
         <div class="title e167">Conclusion</div>
         <div class="para e168">Only experience will show conclusively what effect emerging architectures may have
            on
            processing XML and other markup language instances. It just might turn out that the
            under-the-hood gnomes in the new architectures are so clever that most document and
            data
            designers can safely ignore these issues. However, the factors discussed above suggest
            that developers and owners of XML vocabularies, document types and data architectures
            should give some thought to the effect of emerging architectures on the realities
            of
            platform-independence.
         </div>
         <div class="para e169">This paper has focussed strongly on XML instances, independent from schemas, data
            models and processing models. Thorough consideration of these from the perspective
            of
            platform independence on emerging archtitectures may well either show some of the
            concerns in the paper to be groundless, or (more likely) yield more refined guidance
            on
            design principles. In particular, it is worth noting that the functional style of
            XSLT,
            and the explicitly context-limited formal semantics of XQuery, are both favourable
            characteristics (
            <div class="xref e170" linkend="XQsem"></div>, 
            <div class="xref e171" linkend="XDM"></div>, 
            <div class="xref e172" linkend="XSLT2"></div>) .
         </div>
         <div class="para e173">Another possible area of further work would be to analyse data exchange complexity
            specifically for XML to XML data exchanges. Theoretical work on data exchange complexity
            mostly uses relational database schemas as a reference model of data structure, and
            the
            work on XML-to-XML data exchange that came to light in researching this paper (though
            well short of a thorough literature review on the topic) indicated a tendency to work
            from oversimplified models of XML without apparent knowledge of foundational XML-related
            work such as the XPath/XQuery data model and formal semantics.
         </div>
      </div><a name="ReferencesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e174">
         <div class="title e175">References</div>
         <div class="bibliomixed e176" xml:id="LeeZedem02" xreflabel="Lee &amp; Zedem 2002">P Lee, Z Kedem 
            <div class="emphasis e177">Automatic Data and Computation
               Decomposition on Distributed Memory Parallel Computers 
            </div> ACM Transactions
            on Programming Languages and Systems, Vol. 24, No. 1, January 2002, Pages 1–50. doi:
            
            <div class="biblioid doi e178">10.1145/509705.509706</div>
         </div>
         <div class="bibliomixed e179" xml:id="ParLab09" xreflabel="Par Lab 09">Asanovic, Bodik et al 
            <div class="emphasis e180">A view of the parallel computing
               landscape. 
            </div>Commun. ACM 52, 10 (Oct. 2009), 56-67. 
            doi: 
            <div class="biblioid doi e181">10.1145/1562764.1562783</div>
         </div>
         <div class="bibliomixed e182" xml:id="ParLab06" xreflabel="Par Lab 06">Asanovic, Bodik et al 
            <div class="emphasis e183">The Landscape of Parallel
               Computing Research: A View from Berkeley
            </div> Technical Report No.
            UCB/EECS-2006-183 2006 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e184" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">
               http://www.eecs.berkeley.edu/Pubs/TechRpts/2006/EECS-2006-183.pdf
            </div>
         </div>
         <div class="bibliomixed e185" xml:id="Seiler08" xreflabel="Seiler et al 08">L Seiler et al 
            <div class="emphasis e186"> Larrabee: A Many-Core x86
               Architecture for Visual Computing 
            </div> ACM Transactions on Graphics, Vol. 27,
            No. 3, Article 18 August 2008. doi: 
            <div class="biblioid doi e187">10.1145/1360612.1360617</div>
         </div>
         <div class="bibliomixed e188" xml:id="BSP90" xreflabel="Valliant 90">L Valliant 
            <div class="emphasis e189">A Bridging Model for Parallel Computation
               
            </div> Communications of the ACM Vol.33, No.8 August 1990. doi: 
            <div class="biblioid doi e190">10.1145/79173.79181</div>
         </div>
         <div class="bibliomixed e191" xml:id="BSP96" xreflabel="Skillicorn et al 96">D Skillicorn, J Hill and W McColl 
            <div class="emphasis e192">Questions
               and Answers about BSP 
            </div> Oxford University Computing Laboratory
            PRG-TR-15-96 November 1996
         </div>
         <div class="bibliomixed e193" xml:id="PJ08" xreflabel="Peyton Jones et al 08">S Peyton Jones et al 
            <div class="emphasis e194"> Harnessing the Multicores: Nested Data
               Parallelism in Haskell 
            </div> Foundations of Software Technology and
            Theoretical Computer Science (Bangalore) 2008.
         </div>
         <div class="bibliomixed e195" xml:id="Kol06" xreflabel="Kolaitis et al 06">P Kolaitis, J Panttaja, W Tan 
            <div class="emphasis e196">The Complexity of Data Exchange
               
            </div> ACM SIGMOD-SIGACT-SIGART symposium on Principles of database systems (PODS)
            2006. doi: 
            <div class="biblioid doi e197">10.1145/1142351.1142357</div>
         </div>
         <div class="bibliomixed e198" xml:id="XQsem" xreflabel="XPath/XQuery formal semantics">
            <div class="emphasis e199">XQuery 1.0 and XPath 2.0 Formal
               Semantics 
            </div> W3C Recommendation 23 January 2007 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e200" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">
               http://www.w3.org/TR/xquery-semantics/
            </div>
         </div>
         <div class="bibliomixed e201" xml:id="XDM" xreflabel="XPath/XQuery data model">
            <div class="emphasis e202">XQuery 1.0 and XPath 2.0 Data Model (XDM) </div> W3C
            Recommendation 23 January 2007 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e203" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">
               http://www.w3.org/TR/xpath-datamodel/
            </div>
         </div>
         <div class="bibliomixed e204" xml:id="XSLT2" xreflabel="XSLT 2.0">
            <div class="emphasis e205">XSL Transformations (XSLT) Version 2.0,</div> W3C
            Recommendation 23 January 2007 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e206" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"> http://www.w3.org/TR/xslt20/ </div>
         </div>
         <div class="bibliomixed e207" xml:id="PatHen09" xreflabel="Patterson &amp; Hennessey 09">D Patterson, J Hennessey 
            <div class="emphasis e208">Computer
               Organization and Design: The Hardware/Software Interface
            </div> 4th edition,
            Morgan Kaufmann 2009. 
         </div>
         <div class="bibliomixed e209" xml:id="NESL" xreflabel="Blelloch et al 94">G Blelloch et al 
            <div class="emphasis e210"> Implementation of a Portable
               Nested Data-Parallel Language 
            </div> Journal of Parallel and Distributed
            Computing, 21(1), April 1994. doi: 
            <div class="biblioid doi e211">10.1006/jpdc.1994.1038</div>
         </div>
         <div class="bibliomixed e212" xml:id="Dem02" xreflabel="Demaine 02">E Demaine 
            <div class="emphasis e213">Cache-Oblivious Algorithms and Data Structures
               
            </div> EEF Summer School on Massive Data Sets June 27-July 1, 2002, BRICS,
            University of Aarhus, Denmark 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e214" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.brics.dk/MassiveData02/</div>
         </div>
         <div class="bibliomixed e215" xml:id="BRICS02" xreflabel="Massive Data Sets 02">EEF Summer School on Massive Data Sets 2002, BRICS,
            University of Aarhus, Denmark 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e216" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.brics.dk/MassiveData02/</div>
         </div>
         <div class="bibliomixed e217" xml:id="HG09" xreflabel="Head et al 09">M Head &amp; M Govindaraju 
            <div class="emphasis e218">Performance enhancement with
               speculative execution based parallelism for processing large-scale xml-based
               application data 
            </div> 18th ACM international symposium on High performance
            distributed computing 2009. doi: 
            <div class="biblioid doi e219">10.1145/1551609.1551615</div>
         </div>
         <div class="bibliomixed e220" xml:id="Wrightson05" xreflabel="Wrightson 05"> A Wrightson 
            <div class="emphasis e221">Semantics of Well Formed XML as a Human
               and Machine Readable Language
            </div>Extreme Markup Languages 2005
         </div>
      </div>
   </div>
</div>