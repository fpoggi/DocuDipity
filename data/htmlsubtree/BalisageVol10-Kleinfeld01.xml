<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#TheCaseforAuthoringandProducingBooksin(X)HTML5ANCHOR" name="TheCaseforAuthoringandProducingBooksin(X)HTML5TOC">The Case for Authoring and Producing Books in (X)HTML5</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#WhyHTML?ANCHOR" name="WhyHTML?TOC">Why HTML?</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#NewandImprovedSemantics!ANCHOR" name="NewandImprovedSemantics!TOC">New and Improved Semantics!</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#NoConversionsNecessary!ANCHOR" name="NoConversionsNecessary!TOC">No Conversions Necessary!</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#HTML5:BothSourceFormatandOutputFormatANCHOR" name="HTML5:BothSourceFormatandOutputFormatTOC">HTML5: Both Source Format and Output Format</a></div>
               </div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#WeDon%E2%80%99tNeedYourValidator!ANCHOR" name="WeDon%E2%80%99tNeedYourValidator!TOC">We Don’t Need Your Validator!</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#DigitalFirstContentDevelopment!ANCHOR" name="DigitalFirstContentDevelopment!TOC">Digital-First Content Development!</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#WebBasedWYSIWYGAuthoringANCHOR" name="WebBasedWYSIWYGAuthoringTOC">Web-Based, WYSIWYG Authoring</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#WhereHTML5FallsFlatANCHOR" name="WhereHTML5FallsFlatTOC">Where HTML5 Falls Flat</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#NewandImprovedSemantics?ANCHOR" name="NewandImprovedSemantics?TOC">New-and-Improved Semantics?</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#NoConversionsNecessary?ANCHOR" name="NoConversionsNecessary?TOC">No Conversions Necessary?</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#WeDon%E2%80%99tNeedYourValidator?ANCHOR" name="WeDon%E2%80%99tNeedYourValidator?TOC">We Don’t Need Your Validator?</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BridgingtheGapANCHOR" name="BridgingtheGapTOC">Bridging the Gap</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#EPUB3andtheStructuralSemanticsVocabularyANCHOR" name="EPUB3andtheStructuralSemanticsVocabularyTOC">EPUB 3 and the Structural Semantics Vocabulary</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#HTMLBook:ANewHTML5AuthoringStandardANCHOR" name="HTMLBook:ANewHTML5AuthoringStandardTOC">HTMLBook: A New HTML5 Authoring Standard</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConclusionANCHOR" name="ConclusionTOC">Conclusion</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#Bibliography/ReferencesANCHOR" name="Bibliography/ReferencesTOC">Bibliography/References</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">audio::</div>
         <div class="singletermTERMS">Antenna House Formatter</div>
         <div class="singletermTERMS">AsciiDoc</div>
         <div class="singletermTERMS">auto-generation of navigation content</div>
         <div class="singletermTERMS">approximation</div>
         <div class="singletermTERMS">August 6 - 9, 2013</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">book</div>
         <div class="singletermTERMS">Book: A Futurist’s Manifesto</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2013</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">class</div>
         <div class="singletermTERMS">contenteditable</div>
         <div class="singletermTERMS">CSS3 Paged Media Module</div>
         <div class="singletermTERMS">Chrome OS</div>
         <div class="singletermTERMS">Chromebooks</div>
         <div class="singletermTERMS">conversions</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">data</div>
         <div class="singletermTERMS">data-type</div>
         <div class="singletermTERMS">DocBook Project’s open source XSL stylesheets</div>
         <div class="singletermTERMS">DocBook project</div>
         <div class="singletermTERMS">DocBook DTD</div>
         <div class="singletermTERMS">discussed previously</div>
         <div class="singletermTERMS">Dropbox</div>
         <div class="singletermTERMS">DocBook XSL stylesheets</div>
         <div class="singletermTERMS">docbook-xsl stylesheets</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">epub:type</div>
         <div class="singletermTERMS">EPUB</div>
         <div class="singletermTERMS">EPUB 3 specification</div>
         <div class="singletermTERMS">epubcheck</div>
         <div class="singletermTERMS">eliminate the need for conversions</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
         <div class="singletermTERMS">FO</div>
         <div class="singletermTERMS">formally encourage this practice</div>
         <div class="singletermTERMS">Flow Content</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
         <div class="singletermTERMS">Google Docs</div>
         <div class="singletermTERMS">GUI HTML5 web editors</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">HTMLBook</div>
         <div class="singletermTERMS">HTML5</div>
         <div class="singletermTERMS">Heading Content</div>
         <div class="singletermTERMS">HTML5 for Publishers</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">id="chapter_2"</div>
         <div class="singletermTERMS">inroads into the field of journalism</div>
         <div class="singletermTERMS">Inkling Habitat</div>
         <div class="singletermTERMS">International Digital Publishing Forum (IDPF)</div>
         <div class="singletermTERMS">Interactive Data Visualization for the Web</div>
         <div class="singletermTERMS">in italics</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
         <div class="singletermTERMS">Kindle Mobi KF8</div>
         <div class="singletermTERMS">KindleGen</div>
         <div class="singletermTERMS">Kleinfeld</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">minor exceptions</div>
         <div class="singletermTERMS">Mercury Editor’s</div>
         <div class="singletermTERMS">minimum requirements necessary</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">Navigation Document</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">O’Reilly Media</div>
         <div class="singletermTERMS">open-source stylesheets</div>
         <div class="singletermTERMS">open source</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">prefix</div>
         <div class="singletermTERMS">Package Document</div>
         <div class="singletermTERMS">Prince</div>
         <div class="singletermTERMS">PressBooks</div>
         <div class="singletermTERMS">Phrasing Content</div>
         <div class="singletermTERMS">production</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">rank</div>
         <div class="singletermTERMS">released publicly</div>
         <div class="singletermTERMS">reflowable</div>
         <div class="singletermTERMS">real</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">start</div>
         <div class="singletermTERMS">sect1</div>
         <div class="singletermTERMS">sect2</div>
         <div class="singletermTERMS">sect3</div>
         <div class="singletermTERMS">sect4</div>
         <div class="singletermTERMS">Scribd</div>
         <div class="singletermTERMS">stylesheets</div>
         <div class="singletermTERMS">subset of elements</div>
         <div class="singletermTERMS">Safari Books Online</div>
         <div class="singletermTERMS">Sectioning Content</div>
         <div class="singletermTERMS">single-source workflow</div>
         <div class="singletermTERMS">Sanders</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">third-party firms</div>
         <div class="singletermTERMS">the EPUB 3 specification</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
         <div class="singletermTERMS">video::</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="TheCaseforAuthoringandProducingBooksin(X)HTML5ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3">
      <div class="title e1">The Case for Authoring and Producing Books in (X)HTML5</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2013</div>
            <div class="confdates e5">August 6 - 9, 2013</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">In this paper, I argue that HTML5 offers unique advantages to
               authors and publishers in comparison to both traditional word processing
               and desktop publishing tools like Microsoft Word and Adobe InDesign, as
               well as other markup vocabularies like DocBook and AsciiDoc. I also
               consider the drawbacks currently inherent in the HTML5 standard with
               respect to representing long-form, structured text content, and the
               challenges faced in adopting HTML5 as the source format for book
               authoring and publishing workflows. Finally, I discuss the development
               of HTMLBook, a new open, HTML5-based XML standard expressly designed to
               surmount these challenges and facilitate the use of HTML5 for the
               authoring and production of both print and digital book content.
            </div>
         </div>
         <div class="author e8">
            <div class="personname e9">
               <div class="firstname e10">Sanders</div>
               <div class="surname e11">Kleinfeld</div>
            </div>
            <div class="personblurb e12">
               <div class="para e13">Sanders Kleinfeld has been employed at O’Reilly Media since 2004
                  and has held a variety of positions, including roles on O’Reilly’s
                  Production, Editorial, and Tools teams. Currently, he works as
                  Publishing Technology Engineer, maintaining O’Reilly’s toolchain for
                  generating digital formats of both frontlist and backlist titles. He
                  also helps coordinate O’Reilly’s digital distribution efforts to
                  electronic sales channels, and is currently assisting in R&amp;D
                  efforts surrounding HTML5 and EPUB 3, helping to develop
                  next-generation workflows and ebook content for O’Reilly and its
                  publishing partners. Sanders is the author of 
                  <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e14" xlink:actuate="onRequest" xlink:href="http://shop.oreilly.com/product/0636920022473.do" xlink:show="new" xlink:type="simple">
                     <div class="emphasis e15">HTML5
                        for Publishers
                     </div>
                  </div> (O’Reilly, 2011).
               </div>
            </div>
         </div>
         <div class="legalnotice e16">
            <div class="para e17">Copyright © 2013 Sanders Kleinfeld.  All rights reserved.</div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e18">
         <div class="title e19">Introduction</div>
         <div class="para e20">For the past seven years, DocBook XML has been the cornerstone of
            tech publisher O’Reilly Media’s book authoring and publishing toolchain.
            As a richly semantic markup language, DocBook provides a single
            maintainable source format for book content that can be readily
            transformed and output to a variety of formats, allowing the construction
            of a highly automated production infrastracture. However, as the digital
            book has continued to rise in importance, so has the need to architect
            faster, more efficient, and more lightweight workflows for book creation.
            O’Reilly found that there was another markup format even better suited to
            this paradigm: (X)HTML5.
         </div>
         <div class="para e21">In this paper, I argue that HTML5 offers unique advantages to
            authors and publishers in comparison to both traditional word processing
            and desktop publishing tools like Microsoft Word and Adobe InDesign, as
            well as other markup vocabularies like DocBook and AsciiDoc. I also
            consider the drawbacks currently inherent in the HTML5 standard with
            respect to representing long-form, structured text content, and the
            challenges O’Reilly has faced in adopting the standard as the new source
            format for its toolchain. Finally, I discuss how O’Reilly has surmounted
            these challenges by developing 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e22" xlink:actuate="onRequest" xlink:href="http://github.com/oreillymedia/HTMLBook" xlink:show="new" xlink:type="simple">HTMLBook</div>, a
            new open, HTML5-based XML standard expressly designed for the authoring
            and production of both print and digital book content.
         </div>
      </div><a name="WhyHTML?ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e23">
         <div class="title e24">Why HTML?</div>
         <div class="para e25">As the primary markup language for both the Web and two ebook
            formats (EPUB and Mobi), HTML offers several key advantages over both
            standard book source document formats (e.g., Word
            
            <div class="emphasis e26">.doc</div> and InDesign 
            <div class="emphasis e27">.indd</div>) as well
            as other XML vocabularies. Authoring and producing books in HTML5 offers
            the potential of standardized semantics, a streamlined workflow for
            generating print and digital outputs, the ability to think “digital-first”
            when developing content, and the opportunity for Web-based, WYSIWYG
            authoring. In the following sections, I discuss the advances afforded by
            HTML5 in greater depth.
         </div><a name="NewandImprovedSemantics!ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e28">
            <div class="title e29">New and Improved Semantics!</div>
            <div class="para e30">Prior to HTML5, structural semantics were largely absent from the
               HTML vocabulary, and rich tagging of content entailed liberal use of two
               all-purpose elements: the 
               <div class="code e31">&lt;div&gt;</div> and
               
               <div class="code e32">&lt;span&gt;</div>. Compared to markup languages like DocBook,
               which standardized elements for both high-level book components
               (chapter, appendix, glossary) and lower-level blocks (section, sidebar,
               footnote), as shown below:
            </div>
            <div class="programlisting e33" xml:space="preserve">&lt;article&gt;
               &lt;title&gt;Rich semantics in DocBook&lt;/title&gt;
               &lt;sect1&gt;
               &lt;title&gt;Mathematical elements&lt;/title&gt;
               &lt;para&gt;The "mathphrase" element&lt;footnote&gt;&lt;para&gt;Introduced in DocBook 4.5&lt;/para&gt;&lt;/footnote&gt;
               is used to tag mathematical expressions
               that are readily representable in plaintext.&lt;/para&gt;
               &lt;/sect1&gt;
               &lt;/article&gt;
            </div>
            <div class="para e34">HTML’s vocabulary was severely lacking, and forced reliance on
               nonstandardized 
               <div class="code e35">class</div> attributes to inject the missing
               semantic context:
            </div>
            <div class="programlisting e36" xml:space="preserve">&lt;div class="article"&gt;
               &lt;h1&gt;Rich semantics in DocBook&lt;/h1&gt;
               &lt;div class="top_level_section"&gt;
               &lt;h1&gt;Mathematical elements&lt;/h1&gt;
               &lt;p&gt;The "mathphrase" element&lt;span class="footnote"&gt;Introduced in DocBook 4.5&lt;/span&gt;
               is used to tag mathematical expressions
               that are readily representable in plaintext.&lt;/p&gt;
               &lt;/div&gt;
               &lt;/div&gt;
            </div>
            <div class="para e37">HTML5 adds a whole new category of elements used for 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e38" xlink:actuate="onRequest" xlink:href="http://www.w3.org/html/wg/drafts/html/master/dom.html#sectioning-content" xlink:show="new" xlink:type="simple">“sectioning
                  content”
               </div>
               <div class="xref e39" linkend="h13"></div>, which can be used to
               mark divisions of books, journals, and other long-form content:
               
               <div class="code e40">&lt;article&gt;</div> for complete, self-contained articles;
               
               <div class="code e41">&lt;section&gt;</div> for subsections of a larger book or article
               (both chapters/appendices, and their subsections);
               
               <div class="code e42">&lt;aside&gt;</div> for tangential remarks (e.g., sidebars or
               footnotes), and 
               <div class="code e43">&lt;nav&gt;</div> for navigational components
               (such as a table of contents or an index).
            </div>
            <div class="para e44">Also new to HTML5 are elements for representing formal (titled)
               images (
               <div class="code e45">&lt;figure&gt;</div> and
               
               <div class="code e46">&lt;figcaption&gt;</div>), as well as headers/footers (the aptly
               named 
               <div class="code e47">&lt;header&gt;</div> and
               
               <div class="code e48">&lt;footer&gt;</div>)
            </div>
            <div class="para e49">With the addition of these elements, the previous example can now
               be written as:
            </div>
            <div class="programlisting e50" xml:space="preserve">&lt;article&gt;
               &lt;h1&gt;Rich semantics in DocBook&lt;/h1&gt;
               &lt;section&gt;
               &lt;h1&gt;Mathematical elements&lt;/h1&gt;
               &lt;p&gt;The "mathphrase" element&lt;aside&gt;Introduced in DocBook 4.5&lt;/aside&gt; is used to tag
               mathematical expressions
               that are readily representable in plaintext.&lt;/p&gt;
               &lt;/section&gt;
               &lt;/article&gt;
            </div>
            <div class="para e51">These new structural elements greatly enhance the
               ability to semantically mark up an entire book manuscript in
               HTML5.
            </div>
         </div><a name="NoConversionsNecessary!ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e52">
            <div class="title e53">No Conversions Necessary!</div>
            <div class="para e54">Books don’t remain manuscripts forever. The goal—which hopefully
               is achieved—is to publish
               <div class="popupBox e55">
                  <div class="popupLabel" onmouseover="$('#d1e113').show('1000');" onmouseout="$('#d1e113').hide('1000');">[ footnote ]</div>
                  <div id="d1e113" style="display: none;">
                     <div class="footnote">
                        <div class="para e56">Traditionally, “publishing” a manuscript has meant reifying
                           its textual content through the act of printing its words in ink on
                           reams of paper that are sliced and bound to create a physical book.
                           In the digital age, the distintiction between a “manuscript” and
                           “published book” is more nebulous, given that both typically refer
                           to an electronic document. As such, I’m defining “publish” here to
                           mean the act of packaging manuscript content (either physically or
                           digitally) such that it is suitable for distribution to and
                           consumption by readers.
                        </div>
                     </div>
                  </div>
               </div> them. Thus, the purpose of manuscript authoring tools is
               not only to facilitate writing and formatting of text, but to do so in a
               fashion in which it can be output as a final print and/or digital
               product.
            </div>
            <div class="para e57">Traditional word processing applications like Microsoft Word are
               actually far from ideally suited to this last output stage, the actual
               
               <div class="emphasis e58">production</div> of a manuscript. Because they are not
               primarily designed as compositing tools for generating printer-ready
               PDFs, word processors don’t offer as robust a suite of layout and
               prepress features as provided by desktop publishing applications like
               Adobe InDesign. So while it’s trivial to export a Word or Pages document
               to PDF, it’s not quite as trivial to export a PDF that would be
               considered “print-ready.” As a result, it’s common for workflows for
               producing manuscripts for print to entail first converting binary
               word-processor documents (e.g., Word 
               <div class="emphasis e59">.doc</div> files) to
               binary desktop-publishing documents (InDesign 
               <div class="emphasis e60">.indd</div>
               files), and then outputting the final print-ready PDF from the second
               set of files. In other words, the manuscript transitions through three
               distinct file formats: one for writing/editing, one for compositing, and
               one for distribution.
               <div class="popupBox e61">
                  <div class="popupLabel" onmouseover="$('#d1e128').show('1000');" onmouseout="$('#d1e128').hide('1000');">[ footnote ]</div>
                  <div id="d1e128" style="display: none;">
                     <div class="footnote">
                        <div class="para e62">Historically, dividing the book lifecycle into distinct phases
                           that employed specialized software applications made perfect sense,
                           because there was just one desired output format (a print product)
                           and two actors needed to bring it to fruition: the author who did
                           the writing and the publisher who did the production. The rise of
                           digital publishing and self-publishing has effectively detonated the
                           assumptions undergirding ths model, as contemporary publishing
                           rewards a much more lightweight, flexible workflow, which can
                           produce multiple output formats quickly.
                        </div>
                     </div>
                  </div>
               </div> The paradigm is similar for digital production to output
               ebook formats of a manuscript. The two main digital formats in which
               ebooks are sold, 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e63" xlink:actuate="onRequest" xlink:href="http://idpf.org/epub" xlink:show="new" xlink:type="simple">EPUB</div> and
               
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e64" xlink:actuate="onRequest" xlink:href="http://www.amazon.com/gp/feature.html?ie=UTF8&amp;docId=1000729511" xlink:show="new" xlink:type="simple">Kindle
                  Mobi KF8
               </div>,
               <div class="popupBox e65">
                  <div class="popupLabel" onmouseover="$('#d1e139').show('1000');" onmouseout="$('#d1e139').hide('1000');">[ footnote ]</div>
                  <div id="d1e139" style="display: none;">
                     <div class="footnote">
                        <div class="para e66">The largest U.S. ebook sales channels (per O’Reilly’s “Global
                           eBook Market” report
                           <div class="xref e67" linkend="w13"></div>, Amazon, Barnes
                           &amp; Noble, and the Apple iBookstore) all sell ebook content in
                           either EPUB or Mobi format. However, many other digital channels
                           (such as 
                           <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e68" xlink:actuate="onRequest" xlink:href="http://www.scribd.com/" xlink:show="new" xlink:type="simple">Scribd</div>) sell ebook
                           content in PDF format, either exclusively or in addition to other
                           formats. Producing PDF for digital consumption entails generally the
                           same process as preparing a PDF for print, with the exception that
                           more effort can and should be paid to providing rich intradocument
                           navigation (e.g., a hyperlinked Table of Contents and Index,
                           bookmarks for key sections, and clickable cross-references between
                           chapters).
                        </div>
                     </div>
                  </div>
               </div> are both 
               <div class="emphasis e69">reflowable</div> formats, where
               content does not have fixed pagination like a print book but instead
               spreads to fill the dimensions of the ereader screen. Here, compositing
               is much less of a concern, but there’s still a conversion step that must
               be navigated to produce the ebook output. Exporting to EPUB/Mobi from a
               format like Word or InDesign is not typically a process that produces
               high-quality results out of the box without extensive configuration,
               troubleshooting, and possibly even post-conversion cleanup, as is
               evidenced by a burgeoning industry of 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e70" xlink:actuate="onRequest" xlink:href="https://kdp.amazon.com/self-publishing/help?topicId=A3RRQXI478DDG7" xlink:show="new" xlink:type="simple">third-party
                  firms
               </div> offering ebook conversion and consulting services.
            </div>
            <div class="para e71">An alternative to the Word-to-InDesign-to-(e)book shuffle is to
               design a 
               <div class="emphasis e72">single-source workflow</div>, where there is
               just one set of document files used both for writing/editing the book
               manuscript and for completing the necessary production work for
               generating both print and electronic outputs. Here is where an XML
               format like DocBook shines, as its rich semantic vocabulary makes it
               highly transformable to a variety of output formats. The 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e73" xlink:actuate="onRequest" xlink:href="http://docbook.sourceforge.net/" xlink:show="new" xlink:type="simple">DocBook Project’s open
                  source XSL stylesheets
               </div> were developed to facilitate this very
               task, and provide transformations from DocBook to a variety of key
               document formats, including PDF (via FO), HTML (both XHTML1.1 and
               XHTML5), and EPUB (versions 2 and 3). This is the workflow that 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e74" xlink:actuate="onRequest" xlink:href="http://oreilly.com/" xlink:show="new" xlink:type="simple">O’Reilly Media</div> has used for the
               past seven years, which Andrew Savikas describes in his essay
               “Distribution Everywhere”:
            </div>
            <div class="popupBox e75">
               <div class="popupLabel" onmouseover="$('#d1e165').show('1000');" onmouseout="$('#d1e165').hide('1000');">[ blockquote ]</div>
               <div id="d1e165" style="display: none;">
                  <div class="blockquote">
                     <div class="para e76">That large ecosystem of tools and users meant that there was
                        already a very mature and robust set of 
                        <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e77" xlink:actuate="onRequest" xlink:href="http://docbook.sourceforge.net/release/xsl/1.75.1/doc/" xlink:show="new" xlink:type="simple">open-source
                           stylesheets
                        </div> intended to do exactly what we wanted: to take a
                        set of DocBook source files and create multiple outputs, each with its
                        own formatting rules. We could even create multiple versions of the
                        same output format; for example, a PDF intended for printing (with
                        crop marks and high-resolution images) and a PDF designed for viewing
                        digitally (with color images and hyperlinks). By customizing the
                        stylesheets with our branding, we could deliver three different
                        “final” outputs (print PDF, web PDF, and Safari) from the same source
                        file at the same time, while retaining the flexibility to modify the
                        presentation formatting independently of the content.
                     </div>
                     <div class="para e78">When 
                        <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e79" xlink:actuate="onRequest" xlink:href="http://www.idpf.org" xlink:show="new" xlink:type="simple">EPUB</div> emerged
                        as the standard for the growing ebook market, we partnered with Adobe
                        to contribute changes to those open source 
                        <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e80" xlink:actuate="onRequest" xlink:href="http://oreil.ly/5B6Kc9" xlink:show="new" xlink:type="simple">stylesheets</div> to support
                        output as EPUB (and with some additional processing, in
                        Kindle-compatible Mobi format as well). That meant that as long as our
                        production workflow resulted in a high-quality DocBook XML version of
                        a book, we could deliver multiple print and digital versions at the
                        same time from the same source.
                        <div class="xref e81" linkend="s11"></div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e82">The conversions in this type of workflow are optimal: all operate
               on a single, highly and consistently structured source format, and are
               wholly automated—ensuring fast, accurate results. But no matter how
               efficient the production infrastructure, every conversion built into
               one’s processses still incurs a cost. If conversions are outsourced to
               another vendor, the cost is in both dollars and time. If conversions are
               automated in-house, the cost comes in the form of the human resources on
               staff required to maintain the codebase. As such, the ultimate goal in
               creating streamlined publishing workflows isn’t solely to lower the
               costs of conversions whenever possible; the aim should also be to
               
               <div class="emphasis e83">eliminate the need for conversions</div> whenever
               possible.
            </div><a name="HTML5:BothSourceFormatandOutputFormatANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e84" xml:id="html5_source_and_output">
               <div class="title e85">HTML5: Both Source Format and Output Format</div>
               <div class="para e86">A huge asset that HTML5 offers as a book authoring format is
                  that unlike Microsoft Word or DocBook, it is not just an authoring
                  format: it is a hugely popular output format. Aside from the fact that
                  HTML is inarguably the dominant markup for content published on the
                  Web, it is also at the core of both the EPUB and Mobi ebook
                  formats.
                  <div class="popupBox e87">
                     <div class="popupLabel" onmouseover="$('#d1e190').show('1000');" onmouseout="$('#d1e190').hide('1000');">[ footnote ]</div>
                     <div id="d1e190" style="display: none;">
                        <div class="footnote">
                           <div class="para e88">The latest versions of EPUB (3.0) and Mobi (KF8) both
                              support HTML5 as a core content-document format. The 
                              <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e89" xlink:actuate="onRequest" xlink:href="http://www.idpf.org/epub/30/spec/" xlink:show="new" xlink:type="simple">EPUB 3
                                 specification
                              </div> largely supports the full 
                              <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e90" xlink:actuate="onRequest" xlink:href="http://www.idpf.org/epub/30/spec/epub30-contentdocs.html#refHTML5" xlink:show="new" xlink:type="simple">HTML5</div>
                              document model (provided XHTML syntax is used), with just a
                              handful of 
                              <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e91" xlink:actuate="onRequest" xlink:href="http://www.idpf.org/epub/30/spec/epub30-contentdocs.html#sec-xhtml-deviations" xlink:show="new" xlink:type="simple">minor
                                 exceptions
                              </div>. KF8 currently supports only a 
                              <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e92" xlink:actuate="onRequest" xlink:href="http://www.amazon.com/gp/feature.html/ref=amb_link_357754562_1?ie=UTF8&amp;docId=1000729901&amp;pf_rd_m=ATVPDKIKX0DER&amp;pf_rd_s=center-10&amp;pf_rd_r=1DWZJVJ6VWJQDK7AJS0G&amp;pf_rd_t=1401&amp;pf_rd_p=1343223442&amp;pf_rd_i=1000729511" xlink:show="new" xlink:type="simple">subset
                                 of elements
                              </div> new to HTML5, but this subset encompasses the
                              majority of new semantic elements, including
                              
                              <div class="code e93">&lt;section&gt;</div>, 
                              <div class="code e94">&lt;aside&gt;</div>, and
                              
                              <div class="code e95">&lt;figure&gt;</div>.
                           </div>
                        </div>
                     </div>
                  </div>As a result, if HTML5 is used as the source manuscript
                  format, the task of producing ebook outputs is reduced to one of
                  styling the content (with CSS) and packaging it as appropriate for
                  distribution. In the case of EPUB, creating a valid file entails
                  creating a ZIP archive of book assets (HTML, CSS, images, script
                  documents) with an embedded mimetype, config settings (e.g., DRM),
                  and 
                  <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e96" xlink:actuate="onRequest" xlink:href="http://www.idpf.org/epub/30/spec/epub30-publications.html#sec-package-def" xlink:show="new" xlink:type="simple">Package
                     Document
                  </div> that contains a full manifest and metadata about the
                  ebook. In the case of Mobi, packaging entails processing either an
                  EPUB file or an HTML document with Amazon’s 
                  <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e97" xlink:actuate="onRequest" xlink:href="http://www.amazon.com/gp/feature.html?ie=UTF8&amp;docId=1000765211" xlink:show="new" xlink:type="simple">KindleGen</div>
                  tool.
               </div>
               <div class="para e98">And what about producing print books? It may be
                  counterintuitive, but HTML5 is actually an excellent source format for
                  producing paginated content, as the 
                  <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e99" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/css3-page/" xlink:show="new" xlink:type="simple">CSS3 Paged Media Module
                     
                  </div>can be utilized to design the eqiuivalent of a standard book
                  template for print. Features supported in CSS3 Paged Media include
                  page headers, footers, folios, crop marks, font selection,
                  distinct master pages for verso/recto/chapter-opener pages, and even a
                  good deal of control over pagebreaking via both explicit instructions
                  and widow/orphan controls. The process for writing the CSS for these
                  elements is well documented in “Building Books with CSS3” by Nellie
                  McKesson
                  <div class="xref e100" linkend="m12"></div>.
               </div>
               <div class="para e101">While the Paged Media Module is still in W3C Working Draft
                  status, two major commercial tools already support its feature set for
                  generating PDF documents: 
                  <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e102" xlink:actuate="onRequest" xlink:href="http://www.antennahouse.com/" xlink:show="new" xlink:type="simple">Antenna House
                     Formatter
                  </div> and 
                  <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e103" xlink:actuate="onRequest" xlink:href="http://www.princexml.com/" xlink:show="new" xlink:type="simple">Prince</div>. It’s now
                  possible to take an HTML5 manuscript and a CSS3 stylesheet including
                  paged-media rules, and run it through either tool to get a
                  high-quality, print-ready PDF file. 
                  <div class="xref e104" linkend="paged_media_pdfs"></div> shows a side-by-side comparison of a PDF
                  page excerpted from the O’Reilly Media title 
                  <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e105" xlink:actuate="onRequest" xlink:href="http://shop.oreilly.com/product/0636920026938.do" xlink:show="new" xlink:type="simple">
                     <div class="emphasis e106">Interactive
                        Data Visualization for the Web
                     </div>
                  </div> (2013), generated
                  from a single HTML5 file using two different CSS3 stylesheets.
               </div>
               <div class="figure e107" xml:id="paged_media_pdfs">
                  <div class="title e108">The same HTML5 file used to generate PDF content in two
                     different templates using distinct CSS stylesheets; note the
                     differences in styling of headers, footers, and figure images in the
                     PDF at left versus the PDF at right.
                  </div>
                  <div class="mediaobject e109">
                     <div class="imageobject e110">
                        <div class="metaBox e111"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e248').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e248" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e111'
                                 </span><span class="metaAttribute">fileref='../../../vol10/graphics/Kleinfeld01/Kleinfeld01-001.png'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               <div class="para e112">It’s worth noting that while at first glance, a DocBook-source
                  and HTML5-source production toolchain seem quite similar―a single
                  input format from which multiple output formats are automatically
                  generated―there’s a key difference between the two models. As
                  previously stated, in an HTML5 workflow, the source format and the
                  ready-to-package output format are identical, which means that
                  both the toolchain and the people creating books with it only need to
                  concern themselves with one markup language, not two. In a
                  DocBook-based workflow, there are two problems to solve:
               </div>
               <div class="itemizedlist e113">
                  <div class="listitem e114">
                     <div class="para e115">How do we convert DocBook markup into a corresponding HTML
                        representation that is faithful to the original semantics?
                     </div>
                  </div>
                  <div class="listitem e116">
                     <div class="para e117">How do we style the HTML representation with CSS to achieve
                        the desired formatting and aesthetics?
                     </div>
                  </div>
               </div>
               <div class="para e118">Such a system thus has two points of failure
                  <div class="popupBox e119">
                     <div class="popupLabel" onmouseover="$('#d1e260').show('1000');" onmouseout="$('#d1e260').hide('1000');">[ footnote ]</div>
                     <div id="d1e260" style="display: none;">
                        <div class="footnote">
                           <div class="para e120">It’s certainly possible to have a single-source workflow
                              that has more than two points of failure, if the toolchain permits
                              intermediate formats used between source and output.
                              For example, if authors write their manuscript in a lightweight
                              markup language that exports to DocBook (e.g., 
                              <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e121" xlink:actuate="onRequest" xlink:href="http://www.methods.co.nz/asciidoc/" xlink:show="new" xlink:type="simple">AsciiDoc</div>),
                              then there are two transformations built into the system—AsciiDoc
                              to DocBook, and DocBook to HTML—which means two opportunities for
                              problems to be introduced before the markup is even styled.
                           </div>
                        </div>
                     </div>
                  </div> that can result in problems in the final EPUB, Mobi, or
                  PDF output: there can be issues with the transformation engine
                  (XSL-based or otherwise) that converts DocBook to HTML, or there can
                  be a problem with the CSS stylesheets applied to the HTML.
                  Troubleshooting problems in the former category requires a high level
                  of expertise,
                  <div class="popupBox e122">
                     <div class="popupLabel" onmouseover="$('#d1e267').show('1000');" onmouseout="$('#d1e267').hide('1000');">[ footnote ]</div>
                     <div id="d1e267" style="display: none;">
                        <div class="footnote">
                           <div class="para e123">It’s true that the open source DocBook XSL stylesheets
                              available in the 
                              <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e124" xlink:actuate="onRequest" xlink:href="http://docbook.sourceforge.net" xlink:show="new" xlink:type="simple">DocBook project</div>
                              are quite mature and robust, as they have been refined over the
                              course of the past eleven years, but that does not eliminate the
                              need for expert-level knowledge to both maintain the toolchain as
                              additional requirements arise (e.g., add support for new EPUB 3
                              features in HTML5 output) or customize the DocBook-to-HTML
                              mappings to meet publisher-specific style conventions. Performing
                              translations between two markup languages is not all that
                              different from translating between two spoken languages: to do it
                              well, you need to be fluent in both vocabularies and be able to
                              effectively map and pattern words to meet the specific syntax
                              demands of each. Even for the most knowledgeable and capable
                              engineers, that level of complexity is likely to slow down the
                              software development process.
                           </div>
                        </div>
                     </div>
                  </div> as one needs to have extensive knowledge of both source
                  and output markup languages just to determine how best to rectify the
                  problem. This usually entails either modifying the transformation
                  logic used to convert from source to output, or recommending
                  alterations to the source format to achieve the desired output with
                  the existing transformations.
               </div>
               <div class="para e125">When HTML5 is used as both source and output format, this first
                  point of failure is completely removed from the production system. If
                  you review the output and find that it contains an unordered list
                  where you were expecting an ordered list, you simply crack open the
                  HTML file and change the 
                  <div class="code e126">&lt;ul&gt;</div> element to an
                  
                  <div class="code e127">&lt;ol&gt;</div> element; you don’t need to audit the
                  transformation logic used for conversion of DocBook
                  
                  <div class="code e128">&lt;itemizedlist&gt;</div> and 
                  <div class="code e129">&lt;orderedlist&gt;</div>
                  elements. The only thing you have to worry about is the CSS. Such a
                  system is much simpler and easier to maintain.
               </div>
            </div>
         </div><a name="WeDon%E2%80%99tNeedYourValidator!ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e130">
            <div class="title e131">We Don’t Need Your Validator!</div>
            <div class="para e132">When you’re in the process of drafting your manuscript, you want
               to focus on expressing your thoughts in writing; you don’t want to worry
               about having to regularly validate your document to ensure that it
               conforms to a preset template or schema. There are few things more
               irritating than having the writing rhythm be interrupted to troubleshoot
               a template error (e.g., 
               <div class="xref e133" linkend="word_error_screenshot"></div>), or a
               DTD error like the following:
            </div>
            <div class="programlisting e134" xml:space="preserve">ch01.xml:4: element chapter: validity error : Element chapter content does not follow
               the DTD, expecting (beginpage? , chapterinfo? , 
               (title , subtitle? , titleabbrev?) , (toc | lot | index | glossary | bibliography)*
               , tocchap? , (((calloutlist | glosslist | bibliolist | 
               itemizedlist | orderedlist | segmentedlist | simplelist | variablelist | caution |
               important | note | tip | warning | literallayout | 
               programlisting | programlistingco | screen | screenco | screenshot | synopsis | cmdsynopsis
               | funcsynopsis | classsynopsis | fieldsynopsis | 
               constructorsynopsis | destructorsynopsis | methodsynopsis | formalpara | para | simpara
               | address | blockquote | graphic | graphicco | 
               mediaobject | mediaobjectco | informalequation | informalexample | informalfigure
               | informaltable | equation | example | figure | table | 
               msgset | procedure | sidebar | qandaset | task | anchor | bridgehead | remark | highlights
               | abstract | authorblurb | epigraph | indexterm | beginpage)+ , 
               (sect1* | refentry* | simplesect* | section*)) | sect1+ | refentry+ | simplesect+
               | section+) , (toc | lot | index | glossary | bibliography)*), 
               got (title para sect1 figure para sect1 sect1 sect1 )
               Document book.xml does not validate
               
            </div>
            <div class="figure e135" xml:id="word_error_screenshot">
               <div class="title e136">Why does Word hate me?</div>
               <div class="mediaobject e137">
                  <div class="imageobject e138">
                     <div class="metaBox e139"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e302').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e302" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e139'
                              </span><span class="metaAttribute">fileref='../../../vol10/graphics/Kleinfeld01/Kleinfeld01-002.png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e140">Document validity should not be considered to be inherently
               valuable: validation is a means toward an end. We validate to confirm
               that necessary constraints are met to achieve a specific goal. In the
               case of book production, that goal is producing a PDF to be printed
               and/or an ebook to be distributed digitally.
            </div>
            <div class="para e141">When a book-production workflow is conversion-heavy, robust
               validation is crucial, as it’s a key mechanism to prevent formatting
               mistakes in source documents from propagating to output documents, or
               from causing the conversion process to fail entirely. If a Word
               manuscript document isn’t properly tagged with its template’s paragraph
               styles, it likely won’t convert to InDesign cleanly, which means extra
               QA and cleanup work for the compositor. Similarly, if a DocBook document
               doesn’t meet the requirements specified in the 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e142" xlink:actuate="onRequest" xlink:href="http://docbook.org/xml/4.5/docbookx.dtd" xlink:show="new" xlink:type="simple">DocBook DTD</div>, the XSL transformations in the
               toolchain may not properly convert it to HTML or 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e143" xlink:actuate="onRequest" xlink:href="http://www.w3schools.com/xslfo/" xlink:show="new" xlink:type="simple">FO</div>, which again
               means more troubleshooting. When offered a choice between placing effort
               on validation or on ex post facto damage control, validation is rightly
               seen as the lesser of two evils.
            </div>
            <div class="para e144">But the balance of the tradeoff between validation and cleanup
               shifts dramatically when conversions are eliminated from the production
               workflow. As 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e145" linkend="html5_source_and_output" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">discussed
                  previously
               </div>, when HTML5 is used as both source and output format,
               there’s one less failure point in the process, which means fewer
               opportunities for something to go wrong. That doesn’t mean that all
               problems will disappear. Books are written by humans,
               <div class="popupBox e146">
                  <div class="popupLabel" onmouseover="$('#d1e318').show('1000');" onmouseout="$('#d1e318').hide('1000');">[ footnote ]</div>
                  <div id="d1e318" style="display: none;">
                     <div class="footnote">
                        <div class="para e147">Still true in 2013, although artificial intelligence is
                           clearly already making 
                           <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e148" xlink:actuate="onRequest" xlink:href="http://narrativescience.com/" xlink:show="new" xlink:type="simple">inroads into the field of
                              journalism
                           </div>.
                        </div>
                     </div>
                  </div>
               </div>and humans make mistakes. What changes when conversions are
               eliminated from the workflow is a decrease in the difficulty of
               troubleshooting and rectifying these mistakes. When the output format is
               identical to the source format, there’s no longer a need to retrace
               one’s steps to identify the source of a problem. If there’s a problem
               with the 
               <div class="code e149">&lt;ol&gt;</div> markup in your EPUB, you find the
               
               <div class="code e150">&lt;ol&gt;</div> and fix it; you don’t need to backtrack to the
               corresponding numbered list in Word or 
               <div class="code e151">&lt;orderedlist&gt;</div>
               in DocBook and attempt to figure out why your numeration settings
               weren’t converted to the proper 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e152" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/html-markup/ol.html#ol.attrs.start" xlink:show="new" xlink:type="simple">
                  <div class="code e153">start</div>
               </div>
               attribute.
            </div>
            <div class="para e154">Even better, HTML5 rendering systems are generally reasonably
               fault-tolerant. As Liza Daly, VP of Engineering at 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e155" xlink:actuate="onRequest" xlink:href="http://www.safaribooksonline.com/" xlink:show="new" xlink:type="simple">Safari Books
                  Online
               </div>, notes in her article “The unXMLing of digital books,”
               it’s not necessary to have perfect, XHTML-compliant syntax to get your
               HTML5 to render as expected in a Web browser:
            </div>
            <div class="popupBox e156">
               <div class="popupLabel" onmouseover="$('#d1e344').show('1000');" onmouseout="$('#d1e344').hide('1000');">[ blockquote ]</div>
               <div id="d1e344" style="display: none;">
                  <div class="blockquote">
                     <div class="para e157">I can throw just about anything even resembling an EPUB book at
                        our reading system — even if it’s completely invalid with HTML tag
                        soup — and it’ll load. We have very little preprocessing necessary;
                        XSLT, which is hard to learn and harder to master, is almost absent
                        from our workflow.
                        <div class="xref e158" linkend="d13"></div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e159">As an example, if a book manuscript did contain poorly formed HTML
               with poor semantics like the following:
            </div>
            <div class="programlisting e160" xml:space="preserve">&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
               &lt;body&gt;
               &lt;h1&gt;Basic formatting&lt;/h1&gt;
               &lt;p&gt;Here’s a paragraph with the last word in &lt;b&gt;bold.&lt;/b&gt;&lt;br&gt;&lt;br&gt;
               Here’s another paragraph with &lt;i&gt;some italics.&lt;/i&gt;
               &lt;/body&gt;
               &lt;/html&gt;
            </div>
            <div class="para e161">Instead of well-formed, more semantic XHTML syntax like
               this:
            </div>
            <div class="programlisting e162" xml:space="preserve">&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
               &lt;body&gt;
               &lt;section class="chapter" title="Basic formatting"&gt;
               &lt;h1&gt;Basic formatting&lt;/h1&gt;
               &lt;p&gt;Here’s a paragraph with the last word in &lt;strong&gt;bold.&lt;/strong&gt;&lt;/p&gt;
               &lt;p&gt;Here’s another paragraph with &lt;em&gt;some italics.&lt;/em&gt;&lt;/p&gt;
               &lt;/section&gt;
               &lt;/body&gt;
               &lt;/html&gt;
            </div>
            <div class="para e163">The HTML will still render largely the same in most modern Web
               browsers. AntennaHouse Formatter will also render identical PDF output
               from both syntaxes.
               <div class="popupBox e164">
                  <div class="popupLabel" onmouseover="$('#d1e359').show('1000');" onmouseout="$('#d1e359').hide('1000');">[ footnote ]</div>
                  <div id="d1e359" style="display: none;">
                     <div class="footnote">
                        <div class="para e165">The EPUB format, however, requires that content be well-formed
                           XHTML, and many EPUB ereaders (including iBooks, Adobe Digital
                           Editions, and Kobo) will not be able to properly render HTML that is
                           not well-formed XML (e.g., no 
                           <div class="code e166">&lt;br&gt;</div> instead of
                           
                           <div class="code e167">&lt;br/&gt;</div> or 
                           <div class="code e168">&lt;br&gt;&lt;/br&gt;</div>).
                           Additionally, even if these readers did render EPUBs with non-XHTML
                           content properly, these files would still not conform to the EPUB
                           specification and would fail 
                           <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e169" xlink:actuate="onRequest" xlink:href="http://code.google.com/p/epubcheck/" xlink:show="new" xlink:type="simple">epubcheck</div>,
                           the official EPUB validation tool. However, given that non-XHTML
                           HTML5 content is good enough for the Web, and modern browsers can
                           handle “tag soup” just fine, I tend to agree with Daly’s argument in
                           “The unXMLing of digital books”
                           <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e170" linkend="d13" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">[d13]</div> that
                           it’s excessively restrictive to impose higher standards on EPUB
                           content documents.
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e171">That’s not to say that every instance of sloppy HTML tagging will
               be so benign as to have no perceptible side effects on rendering. The
               point is that there is a fair amount of leeway, which can potentially be
               augmented by well-crafted CSS that accounts for potential variation in
               expected markup.
            </div>
            <div class="para e172">If your markup is relatively flexible, doesn’t need to be
               converted/transformed into another format, and problems are easy to
               correct, do you really need to focus on validation?
            </div>
         </div><a name="DigitalFirstContentDevelopment!ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e173">
            <div class="title e174">Digital-First Content Development!</div>
            <div class="para e175">When crafting a book that will be released in both print and ebook
               formats, there’s an opportunity to think “digital first,” and develop
               content that takes advantage of the features offered by a digital
               medium, such as audio/video, adaptive quizzes, games, etc.
            </div>
            <div class="para e176">If you opt to use traditional word-processing and
               desktop-publishing tools to author a book with special digital features,
               you’ll be faced with questions like, “How do I embed a Canvas in my Word
               doc?”, “How do I change all those image placeholders into video files
               for the ebook version?”, and so on. The answer: more scripting or manual
               markup rework, either as part of the conversion or as a postprocessing
               step.
            </div>
            <div class="para e177">Rich semantic markup languages like DocBook XML and AsciiDoc are a
               bit better suited to the goals of representing and converting multimedia
               content. DocBook in particular contains elements designated for
               representing audio and video media: 
               <div class="code e178">&lt;audiodata&gt;</div> and
               
               <div class="code e179">&lt;videodata&gt;</div>, respectively. Similarly, the HTML5
               backend toolchain for AsciiDoc comes with a configuration file with
               
               <div class="code e180">audio::</div> and 
               <div class="code e181">video::</div> macros you can use to
               embed audio/video references into your documents. But there’s still no
               out of the box analog to the 
               <div class="code e182">&lt;canvas&gt;</div> element, so
               some custom modeling and handling may still be in order for interactive
               features.
            </div>
            <div class="para e183">In contrast, HTML5 was expressly designed for the purpose of
               marking up digital media, and the ebooks you produce will use HTML5 to
               render it. Choosing to author the entire book in HTML5 just makes sense,
               because it will then be trivial to integrate these digital-first
               elements directly into the manuscript.
            </div>
         </div><a name="WebBasedWYSIWYGAuthoringANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e184">
            <div class="title e185">Web-Based, WYSIWYG Authoring</div>
            <div class="para e186">Two increasingly important features for authoring tools in the age
               of ebooks and self-publishing are having a Web-based platform and a
               WYSIWYG editing interface.
            </div>
            <div class="para e187">It’s not much of an overstatement to say that in recent years,
               cloud computing has revolutionized the whole realm of document
               production (not just books, but also articles, spreadsheets, and
               correspondence). The two key advances a platform like 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e188" xlink:actuate="onRequest" xlink:href="https://drive.google.com" xlink:show="new" xlink:type="simple">Google Docs</div> offers over
               desktop word processors are “access everywhere” and live, versioned
               collaboration.
               <div class="popupBox e189">
                  <div class="popupLabel" onmouseover="$('#d1e417').show('1000');" onmouseout="$('#d1e417').hide('1000');">[ footnote ]</div>
                  <div id="d1e417" style="display: none;">
                     <div class="footnote">
                        <div class="para e190">Google is really doubling down on its stake on the cloud being
                           the future of business computing with 
                           <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e191" xlink:actuate="onRequest" xlink:href="http://www.chromium.org/chromium-os" xlink:show="new" xlink:type="simple">Chrome OS</div>
                           and its line of 
                           <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e192" xlink:actuate="onRequest" xlink:href="http://www.google.com/intl/en/chrome/devices/" xlink:show="new" xlink:type="simple">Chromebooks</div>,
                           which effectively turn the computer’s entire OS into a web
                           app.
                        </div>
                     </div>
                  </div>
               </div> Documents stored in the cloud can be retrieved from any
               Internet enabled device—desktop, laptop, tablet, smartphone—which
               completely obviates the need to traffic and sync files among machines
               via email or FTP. Cloud storage platforms like 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e193" xlink:actuate="onRequest" xlink:href="https://www.dropbox.com/" xlink:show="new" xlink:type="simple">Dropbox</div> also offer that
               functionality, but what they don’t provide is the ability to collaborate
               on documents in real-time and track the history of changes made by
               different users. If more than one person is going to be accessing the
               book manuscript as it’s being developed (co-authors, editors,
               copyeditors, reviewers), a Web-based platform with cloud storage is a
               huge boon in facilitating the logistics so that all parties can focus at
               the task at hand, instead of worrying about file management.
               <div class="popupBox e194">
                  <div class="popupLabel" onmouseover="$('#d1e430').show('1000');" onmouseout="$('#d1e430').hide('1000');">[ footnote ]</div>
                  <div id="d1e430" style="display: none;">
                     <div class="footnote">
                        <div class="para e195">Whenever the virtues of a Web-based authoring tool are touted,
                           there’s always one objection that is raised: online editing
                           environments are no good because you can’t use them if you lack
                           internet connectivity. Obviously that’s true, but you could equally
                           well make the argument that computer-based authoring tools are also
                           no good because they’re dependent on electricity or battery power.
                           The utility of any given tool is context-dependent, and given that
                           our modern infrastructure continues to come closer and closer to
                           delivering on the promise of constant, ubiquitous internet access,
                           it seems prudent to take full advantage of this connectivity when
                           developing modern collaboration tools—with fallback offline functionality
                           added as feasible.
                        </div>
                     </div>
                  </div>
               </div> A Web app also greatly reduces the risks of hiccups being
               introduced into the process when collaborators are working on machines
               running different operating systems and/or different versions of desktop
               apps—no more “Could you resave as 
               <div class="emphasis e196">.doc</div> instead of
               
               <div class="emphasis e197">.docx</div>” or “Your template doesn’t work in Word 2008
               for Mac.”
               <div class="popupBox e198">
                  <div class="popupLabel" onmouseover="$('#d1e441').show('1000');" onmouseout="$('#d1e441').hide('1000');">[ footnote ]</div>
                  <div id="d1e441" style="display: none;">
                     <div class="footnote">
                        <div class="para e199">Of course, there’s still the risk of “Your webapp won’t run in
                           IE6,” but in general, these sorts of issues are much easier to deal
                           with. It’s much easier to say “Download another free Web browser”
                           than it is to say “Please buy the latest version of this expensive
                           software suite” or “Please stop using Windows.”
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e200">Equally valuable to a lightweight authoring model (e.g.,
               self-publishing) is the ability to instantly get feedback while writing
               as to how the content renders. By WYSIWYG authoring, I not only mean
               that when content is tagged to be rendered in italics, the content
               onscreen actually appears 
               <div class="emphasis e201">in italics</div> (as opposed to
               being displayed as 
               <div class="code e202">_in italics_</div> or 
               <div class="code e203">&lt;emphasis&gt;in
                  italics&lt;/emphasis&gt;
               </div>). WYSIWYG should mean that the onscreen
               display mirrors as closely as possible what the final product will
               actually look like. In a model where a book manuscript is written in
               Microsoft Word and then composited in Adobe InDesign, this is rarely the
               case. At best, the onscreen display in Word is usually a rough
               
               <div class="emphasis e204">approximation</div> of how the content will end up
               looking when the 
               <div class="emphasis e205">real</div> template is applied in
               InDesign. That’s not a great model when you’re looking to quickly
               iterate on both content development and typesetting.
            </div>
            <div class="para e206">HTML5 offers an elegant path forward toward constructing both a
               Web-based and WYSIWYG authoring environment. If you need to construct an
               authoring frontend in HTML5, CSS, and JavaScript to get it on the Web,
               why not just accept the manuscript files in HTML5, CSS, and JavaScript
               as well? That means no additional interpreters are needed to render the
               source content in the editor for WYSIWYG display.
            </div>
            <div class="para e207">The cornerstone of the WYSIWYG HTML5 editor is the 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e208" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/2008/WD-html5-20080610/editing.html#contenteditable0" xlink:show="new" xlink:type="simple">
                  <div class="code e209">contenteditable</div>
                  attribute
               </div>, which, when set on any element in a HTML5 document,
               allows the interior content of that element to be dynamically edited in
               real time by the end user who loads that document in her Web browser.
               With the help of some JavaScript to allow manipulation of
               
               <div class="code e210">contenteditable</div> elements via a GUI interface (formatting
               buttons, etc.), and CSS to provide the appropriate styling of the added
               content, it is possible to create the analog of an InDesign template
               right in the Web browser, where the user can write and composite a
               manuscript without having to manually modify the HTML source or CSS
               stylesheets.
            </div>
            <div class="para e211">A plethora of 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e212" xlink:actuate="onRequest" xlink:href="http://www.aloha-editor.org/" xlink:show="new" xlink:type="simple">open
                  source
               </div>, 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e213" xlink:actuate="onRequest" xlink:href="http://www.raptor-editor.com/" xlink:show="new" xlink:type="simple">
                  <div class="code e214">contenteditable</div>-based
               </div>
               
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e215" xlink:actuate="onRequest" xlink:href="http://ckeditor.com/" xlink:show="new" xlink:type="simple">GUI HTML5 web editors</div>
               have been created in this fashion. 
               <div class="xref e216" linkend="mercury_editor_screenshot"></div> shows a screenshot of 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e217" xlink:actuate="onRequest" xlink:href="http://jejacks0n.github.io/mercury/" xlink:show="new" xlink:type="simple">Mercury Editor’s</div>
               
               <div class="code e218">contenteditable</div> interface in action.
            </div>
            <div class="figure e219" xml:id="mercury_editor_screenshot">
               <div class="title e220">The open source Mercury Editor has a GUI 
                  <div class="code e221">contenteditable</div>
                  interface that can be used to dynamicallly update Web content
               </div>
               <div class="mediaobject e222">
                  <div class="imageobject e223">
                     <div class="metaBox e224"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e503').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e503" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e224'
                              </span><span class="metaAttribute">fileref='../../../vol10/graphics/Kleinfeld01/Kleinfeld01-003.png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e225">The fact that so many 
               <div class="code e226">contenteditable</div> editors are available right
               now is strong evidence that it is relatively easy to code this type of
               interface into an HTML5 app. But the fact that so many 
               <div class="code e227">contenteditable</div>
               editors are available right now is also strong evidence that no one’s
               really completely nailed the right feature set yet for this kind of app.
               The WYSIWYG part is there, but many of the features folks have grown
               accustomed to expect from suites like Google Docs aren’t baked in yet:
               collaborative editing, versioning, spellcheck, and so on. But it’s just
               a matter of time before that happens, as Web-based self-publishing
               platforms like 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e228" xlink:actuate="onRequest" xlink:href="http://pressbooks.com/" xlink:show="new" xlink:type="simple">PressBooks</div> and 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e229" xlink:actuate="onRequest" xlink:href="https://www.inkling.com/habitat/" xlink:show="new" xlink:type="simple">Inkling Habitat</div> have already embraced HTML as
               source format and have built their own Web editing interfaces.
            </div>
         </div>
      </div><a name="WhereHTML5FallsFlatANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e230">
         <div class="title e231">Where HTML5 Falls Flat</div>
         <div class="para e232">Between the potential benefits available in terms of streamlining
            production workflows to eliminate costly conversions, mitigate the
            overhead of validation, and construct a truly WYSIWYG Web authoring
            platform, O’Reilly Media has aggressively been pursuing a switch from a
            single-source workflow based on DocBook XML to one based on HTML5. But
            effecting this shift has not been without its challenges, and ironically,
            some of the issues we’ve faced in attempting to implement authoring and
            production in HTML5 are directly related to the markup format’s key
            strengths.
         </div><a name="NewandImprovedSemantics?ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e233">
            <div class="title e234">New-and-Improved Semantics?</div>
            <div class="para e235">Yes, as discussed previously, HTML5 introduces a collection of
               semantic sectioning elements that greatly facilitate one’s ability to
               structure long-form textual content. However, HTML5’s sectioning
               vocabulary still pales in comparison to that of an XML vocabulary like
               DocBook, which was specificallly designed to support semantic tagging of
               book content. So, while HTML5 now offers 
               <div class="code e236">&lt;article&gt;</div>,
               
               <div class="code e237">&lt;aside&gt;</div>, 
               <div class="code e238">&lt;nav&gt;</div>, and
               
               <div class="code e239">&lt;section&gt;</div> for blocking off book subsections, some key
               omissions include analogs to the following DocBook elements:
               
               <div class="code e240">&lt;appendix&gt;</div>, 
               <div class="code e241">&lt;bibliography&gt;</div>,
               
               <div class="code e242">&lt;chapter&gt;</div>, 
               <div class="code e243">&lt;glossary&gt;</div>,
               
               <div class="code e244">&lt;index&gt;</div>, and 
               <div class="code e245">&lt;part&gt;</div>. Without
               standardized semantics for these book components, it’s left to
               individuals to improvise their own custom semantics within the
               constraints of the HTML5 specification. But when the tagging for a book
               chapter can fairly accurately be represented as:
            </div>
            <div class="programlisting e246" xml:space="preserve">&lt;div class="chapter"&gt;</div>
            <div class="para e247">Or:</div>
            <div class="programlisting e248" xml:space="preserve">&lt;section class="chapter"&gt;</div>
            <div class="para e249">Or maybe:</div>
            <div class="programlisting e250" xml:space="preserve">&lt;section data-book-division="chapter"&gt;</div>
            <div class="para e251">Or if you’re not a native English speaker, perhaps:</div>
            <div class="programlisting e252" xml:space="preserve">&lt;section class="chapitre"&gt;</div>
            <div class="para e253">Then the vocabulary really isn’t precise enough to serve the
               intended purpose. Just as many HTML 4.01 Web developers felt that
               
               <div class="code e254">&lt;div&gt;</div> was insufficient to meet their needs, many
               HTML5 book authors will likely feel the same way about the relatively
               small set of sectioning elements available.
            </div>
         </div><a name="NoConversionsNecessary?ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e255" xml:id="no_conversions_necessary_question_mark">
            <div class="title e256">No Conversions Necessary?</div>
            <div class="para e257">It’s true that when HTML5 is used as both source format and output
               format that no mappings are needed between markup types, but that
               doesn’t necessarily mean that no document transformations are needed. In
               a DocBook single-source workflow, the conversion of book files to the
               desired output format typically serves two functions. One purpose is
               indeed the markup translation, but the other is the autogeneration of
               book content that is implicit in the structure of the source files: the
               Table of Contents, the Index (if present), and intrabook
               cross-references. These elements are generally not hardcoded into the
               document because doing so is both tedious and redundant.
            </div>
            <div class="para e258">A standard Table of Contents simply lists chronologically the
               titles of each major division of the book (chapters, subsections, etc.)
               with hyperlinks and/or page numbers that reference the corresponding
               content in the body of the book. It makes little sense to manually mark
               up the Table of Contents by hand when the process can be automated,
               which is faster and less error-prone. The 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e259" xlink:actuate="onRequest" xlink:href="http://sourceforge.net/projects/docbook/files/" xlink:show="new" xlink:type="simple">DocBook XSL
                  stylesheets
               </div> contain logic to handle TOC generation, as do
               Microsoft Word and Adobe InDesign.
            </div>
            <div class="para e260">Similarly, it’s desirable to have an Index that is autogenerated
               based on tags embedded in proper context in body text, rather than one
               hardcoded at the end of the book that is alphabetized by hand. A manual
               indexing process is typically so labor-intensive and not amenable to
               ongoing maintenance that it’s left to the very end of the production
               process to ensure that it won’t need to be repeated if text is added,
               deleted, or shuffled about). And for the same maintenance reasons,
               albeit on a smaller scale, “softcoded” cross references are preferable
               to their hardcoded counterparts. Hardcoding text in the manuscript like
               “See Chapter 7 for more details” opens the door to mistakes if at a
               later point in the writing/editing process, a decision is made to
               flip-flop Chapters 7 and 8 in the book. Much better to mark up the
               reference by linking to an anchor, as in the DocBook syntax “See
               
               <div class="code e261">&lt;xref linkend="chapter_about_xml"/&gt;</div> for more
               details”, and leave the work of generating the proper chapter number in
               the output to a script.
            </div>
            <div class="para e262">Any robust, agile production workflow based on HTML5 is going to
               need to have the capability to autogenerate tables of contents, indices,
               and cross-reference text when appropriate
               <div class="popupBox e263">
                  <div class="popupLabel" onmouseover="$('#d1e595').show('1000');" onmouseout="$('#d1e595').hide('1000');">[ footnote ]</div>
                  <div id="d1e595" style="display: none;">
                     <div class="footnote">
                        <div class="para e264">If you’re also aiming to produce ebook outputs like EPUB and
                           Mobi, some additional transformations may be desirable for these
                           output formats to account for the vagaries of HTML rendering on
                           different ereader devices. O’Reilly maintains a set of XSL
                           stylesheets that preprocess HTML targeted for the Kindle before
                           generating Mobi output to achieve better rendering results on
                           devices that are not compatible with the KF8 format.
                        </div>
                     </div>
                  </div>
               </div>—whether via XSL, JavaScript, or another set of tools. So
               while it’s a good thing that no formal 
               <div class="emphasis e265">conversions</div>
               are needed in this model, HTML5-to-HTML5 document transformations are
               still very much on the table. Unfortunately, it’s not especially
               realistic to presume that it will be possible to just apply some CSS to
               the HTML manuscript and call it a day.
            </div>
         </div><a name="WeDon%E2%80%99tNeedYourValidator?ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e266" xml:id="no_validator_question_mark">
            <div class="title e267">We Don’t Need Your Validator?</div>
            <div class="para e268">Once transformations are back in the mix, the scale starts tilting
               back in favor of validation again. At minimum, most XML parsers are
               going to require well-formed markup, which means you don’t just need
               HTML5; you need XHTML5. Additionally, if automated Table of Contents,
               Index, or cross-reference generation are part of the toolchain, you may
               also want to validate against some additional requirements such as the
               following:
            </div>
            <div class="itemizedlist e269">
               <div class="listitem e270">
                  <div class="para e271">All major book divisions must have titles (e.g., every chapter
                     must have a corresponding nonempty 
                     <div class="code e272">&lt;h1&gt;</div>)
                  </div>
               </div>
               <div class="listitem e273">
                  <div class="para e274">Book-division nesting and headings must follow a sensible
                     hierarchy (e.g., no 
                     <div class="code e275">&lt;h1&gt;</div> elements lower in the
                     hierarchy than 
                     <div class="code e276">&lt;h2&gt;</div> elements)
                  </div>
               </div>
               <div class="listitem e277">
                  <div class="para e278">All softcoded cross-references must reference ids that are
                     present in the markup (e.g., an anchor like 
                     <div class="code e279">&lt;a
                        href="#chapter_2"&gt;
                     </div> must point to a corresponding element
                     with 
                     <div class="code e280">id="chapter_2"</div>)
                  </div>
               </div>
            </div>
            <div class="para e281">The effort expended in catching these sorts of issues up front may
               pay dividends in terms of less cleanup required when producing the final
               product.
            </div>
         </div>
      </div><a name="BridgingtheGapANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e282">
         <div class="title e283">Bridging the Gap</div>
         <div class="para e284">To make HTML5 a truly viable markup format for authoring and
            producing long-form text content, it needs to be augmented with a semantic
            vocabulary for book-specific components. Once that’s in place, validation
            rules can be formulated to ensure conformance, and code can be written to
            script generation of navigation elements (table of contents, index, etc.).
            While it’s certainly possible for individual authors and publishers to
            create their own custom schemas and toolsets for HTML5 to fill this void,
            there are standard, universal semantics for book sectioning (e.g.,
            chapter, glossary, afterword), which means there’s a clear opportunity and
            need for an open HTML5-based standard geared toward book authoring so that
            there’s not a constant reinventing of the wheel by each entrant into the
            HTML5-based publishing space. When O’Reilly Media started exploring the
            options for HTML5-based book markup, the first standard we looked at was
            the EPUB ebook format, which added a new semantic vocabulary for book
            components in version 3.0 of the specification.
         </div><a name="EPUB3andtheStructuralSemanticsVocabularyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e285">
            <div class="title e286">EPUB 3 and the Structural Semantics Vocabulary</div>
            <div class="para e287">The 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e288" xlink:actuate="onRequest" xlink:href="http://idpf.org/about-us" xlink:show="new" xlink:type="simple">International
                  Digital Publishing Forum (IDPF)
               </div>, the organization that developed
               and maintains the EPUB standard, recognized the need for richer
               semantics in HTML-based ebook content. In version 3.0 of the EPUB
               standard, they added a new EPUB-specific attribute to the format’s
               supported HTML5 markup called 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e289" xlink:actuate="onRequest" xlink:href="http://www.idpf.org/epub/30/spec/epub30-contentdocs.html#attrdef-epub-type" xlink:show="new" xlink:type="simple">
                  <div class="code e290">epub:type</div>
               </div>
               <div class="xref e291" linkend="e11"></div>. The 
               <div class="code e292">epub:type</div> attribute can be
               applied to any element in any content document,
               <div class="popupBox e293">
                  <div class="popupLabel" onmouseover="$('#d1e655').show('1000');" onmouseout="$('#d1e655').hide('1000');">[ footnote ]</div>
                  <div id="d1e655" style="display: none;">
                     <div class="footnote">
                        <div class="para e294">This includes any HTML5 element, but also any SVG or MathML
                           elements embedded in the document, as these vocabularies are also
                           supported in EPUB 3 content documents.
                        </div>
                     </div>
                  </div>
               </div>and its supported values include any terms defined in the
               “EPUB 3 Structural Semantics Vocabulary”
               <div class="xref e295" linkend="e11_2"></div>. Also drafted by the IDPF, the Structural
               Semantics Vocabulary is a companion spec that standardarizes a set of
               semantics for book components. It encompasses a broad lexicon with which
               most in the publishing industry should be familiar, including terms such
               as “chapter”, “appendix”, “part”, “copyright-page”, “errata”,
               “pagebreak”, and “sidebar”.
               <div class="popupBox e296">
                  <div class="popupLabel" onmouseover="$('#d1e662').show('1000');" onmouseout="$('#d1e662').hide('1000');">[ footnote ]</div>
                  <div id="d1e662" style="display: none;">
                     <div class="footnote">
                        <div class="para e297">If needed, the default value set offered by the Structural
                           Semantics Vocabulary can be extended with terms from other
                           vocabularies by using prefixes and the 
                           <div class="code e298">prefix</div>
                           attribute. See 
                           <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e299" xlink:actuate="onRequest" xlink:href="http://www.idpf.org/epub/30/spec/epub30-publications.html#sec-metadata-assoc" xlink:show="new" xlink:type="simple">http://www.idpf.org/epub/30/spec/epub30-publications.html#sec-metadata-assoc</div>
                           for more details.
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e300">Using 
               <div class="code e301">epub:type</div>, content creators can inflect
               existing HTML5 elements with the additional proper book semantics. For
               example, the following markup:
            </div>
            <div class="programlisting e302" xml:space="preserve">&lt;section epub:type="chapter"&gt;</div>
            <div class="para e303">Indicates a section of the document that corresponds to a book
               chapter.
            </div>
            <div class="para e304">While 
               <div class="code e305">epub:type</div> in conjunction with the Structural
               Semantics Vocabulary does provide a standard mechanism for tagging book
               components, it was not intended to serve the needs of content authoring
               and production; it was designed for consumption by ereader software. Per
               
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e306" xlink:actuate="onRequest" xlink:href="http://www.idpf.org/epub/30/spec/epub30-contentdocs.html#sec-xhtml-content-type-attribute" xlink:show="new" xlink:type="simple">the
                  EPUB 3 specification
               </div>, 
               <div class="code e307">epub:type</div> “provides a
               controlled way for Reading Systems and other User Agents to learn more
               about the structure and content of a document, providing them the
               opportunity to enhance the reading experience for Users.” As such, there
               are a couple key shortcomings that arise when using
               
               <div class="code e308">epub:type</div> as a semantic authoring solutions:
            </div>
            <div class="variablelist e309">
               <div class="varlistentry e310">
                  <div class="term e311">It’s EPUB-specific</div>
                  <div class="listitem e312">
                     <div class="para e313">The 
                        <div class="code e314">epub:type</div> attribute is not a formal part of
                        the HTML5 specification at this time; it’s an add-on that’s
                        specific to the EPUB 3 specification and that is a part of the
                        EPUB namespace (
                        <div class="code e315">http://www.idpf.org/2007/ops</div>). Using
                        
                        <div class="code e316">epub:type</div> in your source documents implicitly
                        associates them with a specific output format (EPUB) and may
                        necessitate additional postprocessing for other formats. For
                        example, if the same HTML source content is to be published on the
                        Web, you’ll probably want to transform 
                        <div class="code e317">epub:type</div> into
                        an attribute supported by the HTML5 spec (e.g., 
                        <div class="code e318">class</div>
                        or a custom 
                        <div class="code e319">data</div> attribute), which might also
                        necessitate some corresponding CSS tweaks.
                     </div>
                     <div class="para e320">Having semantics that were valid against the HTML5 spec and
                        thus output-format-agnostic would be a cleaner, more elegant
                        solution for content creators.
                     </div>
                  </div>
               </div>
               <div class="varlistentry e321">
                  <div class="term e322">It doesn’t specify any content model restrictions</div>
                  <div class="listitem e323">
                     <div class="para e324">Having proper semantics for HTML elements is likely not
                        enough to support more robust validation of the type described in
                        
                        <div class="xref e325" linkend="no_validator_question_mark"></div>. In EPUB 3, the
                        following markup for a chapter and subsection:
                     </div>
                     <div class="programlisting e326" xml:space="preserve">&lt;section epub:type="chapter"&gt;
                        
                        <div class="emphasis e327" role="bold">&lt;h2&gt;This is the chapter heading&lt;/h2&gt;</div>
                        &lt;p&gt;I am now going to include a subsection here:&lt;/p&gt;
                        &lt;section&gt;
                        
                        <div class="emphasis e328" role="bold">&lt;p&gt;It would be odd to put a body-text paragraph before the main section heading&lt;/p&gt;
                           &lt;h1&gt;Book Markup Best Practices&lt;/h1&gt;
                        </div>
                        &lt;/section&gt;
                        &lt;/section&gt;
                     </div>
                     <div class="para e329">Is as equally acceptable as this markup:</div>
                     <div class="programlisting e330" xml:space="preserve">&lt;section epub:type="chapter"&gt;
                        
                        <div class="emphasis e331" role="bold">&lt;h1&gt;This is the chapter heading&lt;/h1&gt;</div>
                        &lt;p&gt;I am now going to include a subsection here:&lt;/p&gt;
                        &lt;section&gt;
                        
                        <div class="emphasis e332" role="bold">    &lt;h2&gt;Book Markup Best Practices&lt;/h2&gt;
                           &lt;p&gt;It would be odd to put a body-text paragraph before the main section heading&lt;/p&gt;
                           
                        </div>   
                        &lt;/section&gt;
                        &lt;/section&gt;
                     </div>
                     <div class="para e333">However, it’s hard not to argue that the latter markup is
                        far superior to the former markup in terms of clean, sensible
                        representation of hierarchical book components, as it conforms to
                        two rules: a formal section begins with a heading, and subheadings
                        should be of lesser importance than their parent headings
                        <div class="popupBox e334">
                           <div class="popupLabel" onmouseover="$('#d1e750').show('1000');" onmouseout="$('#d1e750').hide('1000');">[ footnote ]</div>
                           <div id="d1e750" style="display: none;">
                              <div class="footnote">
                                 <div class="para e335">THe HTML5 specification does 
                                    <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e336" xlink:actuate="onRequest" xlink:href="http://www.w3.org/html/wg/drafts/html/master/sections.html#headings-and-sections" xlink:show="new" xlink:type="simple">formally
                                       encourage this practice
                                    </div>: “Sections may contain headings
                                    of any 
                                    <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e337" xlink:actuate="onRequest" xlink:href="http://www.w3.org/html/wg/drafts/html/master/sections.html#rank" xlink:show="new" xlink:type="simple">rank</div>,
                                    and authors are strongly encouraged to use headings of the
                                    appropriate 
                                    <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e338" xlink:actuate="onRequest" xlink:href="http://www.w3.org/html/wg/drafts/html/master/sections.html#rank" xlink:show="new" xlink:type="simple">rank</div>
                                    for the section’s nesting level.” But it’s not a requirement,
                                    and the EPUB 3 
                                    <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e339" xlink:actuate="onRequest" xlink:href="http://code.google.com/p/epubcheck/" xlink:show="new" xlink:type="simple">epubcheck</div>
                                    validator doesn’t enforce it.
                                 </div>
                              </div>
                           </div>
                        </div> (i.e., it’s bad practice to nest a
                        
                        <div class="code e340">&lt;h1&gt;</div> under an 
                        <div class="code e341">&lt;h2&gt;</div>).
                     </div>
                     <div class="para e342">I’m not arguing that EPUB 3 should be enforcing these kinds
                        of restrictions; as an output format meant for HTML rendering, I
                        think it’s an asset that any valid XHTML is acceptable. But as an
                        authoring format, these additional restrictions are valuable, as
                        consistent, high-quality source markup ensures high-quality
                        output.
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e343">It’s not the EPUB specification’s mission to address either of
               these content-authoring concerns, and as such, I feel it’s misguided to
               consider EPUB 3 to be an appropriate HTML authoring format.
            </div>
         </div><a name="HTMLBook:ANewHTML5AuthoringStandardANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e344">
            <div class="title e345">HTMLBook: A New HTML5 Authoring Standard</div>
            <div class="para e346">If EPUB 3 isn’t a good fit as an HTML5 authoring format, what
               should be used instead? Since we weren’t aware of another existing open
               standard for authoring in HTML5, my colleagues and I at O’Reilly
               developed our own: HTMLBook. The first Working Draft of the HTMLBook
               specification was 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e347" xlink:actuate="onRequest" xlink:href="https://github.com/oreillymedia/HTMLBook" xlink:show="new" xlink:type="simple">released
                  publicly
               </div> in April 2013, along with an XML Schema that can be used
               for validation.
            </div>
            <div class="para e348">Unlike EPUB 3, the HTMLBook specification does not include any
               custom add-on elements or attributes that cannot be found in standard
               HTML5. Instead, HTMLBook subsets the content model defined in the HTML5
               specification to add additional requirements and restrictions that apply
               specifically to book components such as chapters, figures, and sidebars.
               This means that documents that are valid HTMLBook documents are also
               valid against the standard HTML5 specification
               <div class="popupBox e349">
                  <div class="popupLabel" onmouseover="$('#d1e786').show('1000');" onmouseout="$('#d1e786').hide('1000');">[ footnote ]</div>
                  <div id="d1e786" style="display: none;">
                     <div class="footnote">
                        <div class="para e350">However, the converse is not necessarily true. Just as not all
                           rectangles are squares, not all HTML5 documents will meet the
                           additional requirements of HTMLBook.
                        </div>
                     </div>
                  </div>
               </div> and can be used as is in all HTML5-based output
               formats.
            </div>
            <div class="para e351">The key supplemental requirements imposed by HTMLBook are semantic
               inflections on all structural book elements, as well as some additional
               restrictions in the content models of these elements.
            </div>
            <div class="para e352">Whenever possible, the values for semantic inflections were drawn
               from those available in the EPUB 3 Structural Semantics Vocabulary, but
               when appropriate terms did not exist in this corpus, values were drawn
               from the DocBook XML vocabulary. In contrast to EPUB 3, the
               
               <div class="code e353">data-type</div> attribute is used for semantic inflection instead of 
               <div class="code e354">epub:type</div>, which
               serves to maintain conformity with the HTML5 spec.
            </div>
            <div class="para e355">In a standard HTMLBook document, the 
               <div class="code e356">&lt;body&gt;</div>
               element is the root element for book content, and requires a
               
               <div class="code e357">data-type</div> value of 
               <div class="code e358">book</div> (any book-related
               metadata―such as ISBN or price—can be captured in
               
               <div class="code e359">&lt;meta&gt;</div> elements in the document
               
               <div class="code e360">&lt;head&gt;</div>). Nested in the 
               <div class="code e361">&lt;body&gt;</div> must
               be one or more 
               <div class="code e362">&lt;section&gt;</div>, 
               <div class="code e363">&lt;nav&gt;</div>,
               and/or 
               <div class="code e364">&lt;div&gt;</div> elements that represent standard book
               divisions and that must be inflected accordingly. Here is an example of
               a standard HTMLBook skeleton for a book that has a titlepage, table of
               contents, preface, several chapters, and an appendix:
            </div>
            <div class="programlisting e365" xml:space="preserve">&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://www.w3.org/1999/xhtml ../htmlbook.xsd"
               xmlns="http://www.w3.org/1999/xhtml"&gt;
               &lt;head&gt;
               &lt;title&gt;This is the book title&lt;/title&gt;
               &lt;/head&gt;
               &lt;body data-type="book"&gt;
               &lt;section data-type="titlepage"&gt;
               &lt;!-- Titlepage content here --&gt;
               &lt;/section&gt;
               &lt;nav data-type="toc"&gt;
               &lt;!-- Table of Contents content here --&gt;
               &lt;/nav&gt;
               &lt;section data-type="preface"&gt;
               &lt;!-- Preface content here --&gt;
               &lt;/section&gt;
               &lt;section data-type="chapter"&gt;
               &lt;!-- Chapter 1 content here --&gt;
               &lt;/section&gt;
               &lt;section data-type="chapter"&gt;
               &lt;!-- Chapter 2 content here --&gt;
               &lt;/section&gt;
               &lt;section data-type="chapter"&gt;
               &lt;!-- Chapter 3 content here --&gt;
               &lt;/section&gt;
               &lt;section data-type="appendix"&gt;
               &lt;!-- Appendix content here --&gt;
               &lt;/section&gt;
               &lt;/body&gt;
               &lt;/html&gt;
            </div>
            <div class="para e366">Each of these main book divisions can have subdivisions of their
               own, which are 
               <div class="code e367">&lt;section&gt;</div> elements inflected with a
               data-type value of 
               <div class="code e368">sect1</div>, 
               <div class="code e369">sect2</div>,
               
               <div class="code e370">sect3</div>, or 
               <div class="code e371">sect4</div>
               <div class="popupBox e372">
                  <div class="popupLabel" onmouseover="$('#d1e848').show('1000');" onmouseout="$('#d1e848').hide('1000');">[ footnote ]</div>
                  <div id="d1e848" style="display: none;">
                     <div class="footnote">
                        <div class="para e373">Borrowed from DocBook XML</div>
                     </div>
                  </div>
               </div>, the appropriate value enforced based on position in the
               overall hierarchy. Additional requirements imposed on book divisions
               that are both direct children of 
               <div class="code e374">&lt;body&gt;</div> and
               lower-level descendants:
            </div>
            <div class="itemizedlist e375">
               <div class="listitem e376">
                  <div class="para e377">Each division’s first child must be a heading using a heading
                     element (
                     <div class="code e378">&lt;h1&gt;</div>–
                     <div class="code e379">&lt;h6&gt;</div>) that is
                     appropriate to the hierarchy level.
                  </div>
               </div>
               <div class="listitem e380">
                  <div class="para e381">Each division can only contain children that belong to a
                     predefined set of Block elements (no raw text nodes). HTMLBook’s
                     classification of Block elements is largely consistent with the
                     HTML5 specification’s classification of 
                     <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e382" xlink:actuate="onRequest" xlink:href="http://www.w3.org/html/wg/drafts/html/master/dom.html#flow-content" xlink:show="new" xlink:type="simple">Flow
                        Content
                     </div>, minus elements that can also be found in the HTML5
                     categories of 
                     <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e383" xlink:actuate="onRequest" xlink:href="http://www.w3.org/html/wg/drafts/html/master/dom.html#heading-content" xlink:show="new" xlink:type="simple">Heading
                        Content
                     </div>, 
                     <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e384" xlink:actuate="onRequest" xlink:href="http://www.w3.org/html/wg/drafts/html/master/dom.html#phrasing-content" xlink:show="new" xlink:type="simple">Phrasing
                        Content
                     </div>, and 
                     <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e385" xlink:actuate="onRequest" xlink:href="http://www.w3.org/html/wg/drafts/html/master/dom.html#sectioning-content" xlink:show="new" xlink:type="simple">Sectioning
                        Content
                     </div>.
                  </div>
               </div>
               <div class="listitem e386">
                  <div class="para e387">The Table of Contents content in a 
                     <div class="code e388">&lt;nav&gt;</div>
                     element must contain 
                     <div class="code e389">&lt;ol&gt;</div> markup that is
                     consistent with the requirements for the 
                     <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e390" xlink:actuate="onRequest" xlink:href="http://www.idpf.org/epub/30/spec/epub30-contentdocs-20111011.html#sec-xhtml-nav" xlink:show="new" xlink:type="simple">Navigation
                        Document
                     </div> specified in the EPUB 3 standard.
                  </div>
               </div>
            </div>
            <div class="para e391">The goal of HTMLBook is not to overlay a panoply of burdensome
               supplemental requirements on top of the HTML5 standard; rather, it’s to
               add the 
               <div class="emphasis e392">minimum requirements necessary </div>to support
               consistant, semantic tagging of book content to facilitate templating
               and styling with CSS3—as well as 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e393" linkend="no_conversions_necessary_question_mark" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">auto-generation of
                  navigation content
               </div> and any requisite postprocessing via XSL or
               other scripting language—to produce high-quality outputs in multiple
               formats (both print and digital). Within this general framework, users
               of HTMLBook can employ whatever HTML5 markup they wish, including MathML
               and SVG content.
            </div>
            <div class="para e394">Along with the formal specification and Schema document, the
               HTMLBook project contains some sample CSS stylesheets, which authors can
               either use wholesale as design templates for their ebook outputs, or
               adapt to create their own custom styling. It also contains a set of XSL
               stylesheets that can be used to autogenerate Table of Contents, Indices,
               and cross-references for HTMLBook content, as well as assist in
               packaging it as PDF, EPUB, and Mobi.
               <div class="popupBox e395">
                  <div class="popupLabel" onmouseover="$('#d1e903').show('1000');" onmouseout="$('#d1e903').hide('1000');">[ footnote ]</div>
                  <div id="d1e903" style="display: none;">
                     <div class="footnote">
                        <div class="para e396">These stylesheets are modeled after the 
                           <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e397" xlink:actuate="onRequest" xlink:href="http://sourceforge.net/projects/docbook/files/docbook-xsl/" xlink:show="new" xlink:type="simple">docbook-xsl
                              stylesheets
                           </div>, but with a focus placed solely on postprocessing
                           and packaging HTML5 content, not on translating it.
                        </div>
                     </div>
                  </div>
               </div> We are currently in the early phases of developing this
               toolchain, but we hope over the coming months to continue to extend and
               refine this open source software to support the growing community of
               authors and publishers who are looking toward HTML5 and Web technologies
               for developing and producing book content.
            </div>
         </div>
      </div><a name="ConclusionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e398">
         <div class="title e399">Conclusion</div>
         <div class="para e400">HTML5 is better suited than any other document format to the unique
            demands of next-generation book authoring workflows, where creating both
            print and digital products is the aim, and the value lies in having a
            lightweight, low-cost, efficient toolset. While we’re still in the early
            stages of book authoring platforms and ebook tooling for HTML5-as-source,
            I expect that in a few years, drafting a book manuscript in HTML5 will be
            as commonplace as drafting a manuscript in Microsoft Word is today, and
            that the tools available for both editing and producing books in HTML5
            will continue to grow and evolve.
         </div>
      </div><a name="Bibliography/ReferencesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e401">
         <div class="title e402">Bibliography/References</div>
         <div class="bibliomixed e403" xml:id="d13">Daly, Liza. “The unXMLing of digital
            books,” February 1, 2013, 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e404" xlink:actuate="onRequest" xlink:href="http://techblog.safaribooksonline.com/2013/02/01/the-unxmling-of-digital-books/" xlink:show="new" xlink:type="simple">http://techblog.safaribooksonline.com/2013/02/01/the-unxmling-of-digital-books/</div>
         </div>
         <div class="bibliomixed e405" xml:id="e11">“EPUB Content Documents 3.0,” IDPF, 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e406" xlink:actuate="onRequest" xlink:href="http://www.idpf.org/epub/30/spec/epub30-contentdocs.html" xlink:show="new" xlink:type="simple">http://www.idpf.org/epub/30/spec/epub30-contentdocs.html</div>
         </div>
         <div class="bibliomixed e407" xml:id="e11_2">“EPUB 3 Structural Semantics
            Vocabulary,” IDPF, 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e408" xlink:actuate="onRequest" xlink:href="http://www.idpf.org/epub/vocab/structure/" xlink:show="new" xlink:type="simple">http://www.idpf.org/epub/vocab/structure/
               
            </div>
         </div>
         <div class="bibliomixed e409" xml:id="m12">McKesson, Nellie. “Building Books with
            CSS3,” June 12, 2012, 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e410" xlink:actuate="onRequest" xlink:href="http://alistapart.com/article/building-books-with-css3" xlink:show="new" xlink:type="simple">http://alistapart.com/article/building-books-with-css3</div>
         </div>
         <div class="bibliomixed e411" xml:id="s11">Savikas, Andrew. “Distribution
            Everywhere,” 
            <div class="emphasis e412">Book: A Futurist’s Manifesto</div>: O’Reilly
            Media, Inc, pp 21-34
         </div>
         <div class="bibliomixed e413" xml:id="h13">“Sectioning content,” HTML 5.1 Nightly, A
            vocabulary and associated APIs for HTML and XHTML, Editor’s Draft 8 April
            2013, 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e414" xlink:actuate="onRequest" xlink:href="http://www.w3.org/html/wg/drafts/html/master/dom.html#sectioning-content-0" xlink:show="new" xlink:type="simple">http://www.w3.org/html/wg/drafts/html/master/dom.html#sectioning-content-0</div>
         </div>
         <div class="bibliomixed e415" xml:id="w13">Wischenbart, Rüdiger, Carlo Carrerho,
            Veronika Licher, and Vinutha Mallya. “The Global eBook Market: Current
            Conditions &amp; Future Projections”: O’Reilly Media, Inc.,
            2013.
         </div>
      </div>
   </div>
</div>