<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#AbstractgenericmicroformatsforcoveragecomprehensivenessandadaptabilityANCHOR" name="AbstractgenericmicroformatsforcoveragecomprehensivenessandadaptabilityTOC">Abstract generic microformats for coverage, comprehensiveness, and adaptability</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#XMLdocumenttypesandtheirdiscontentsANCHOR" name="XMLdocumenttypesandtheirdiscontentsTOC">XML document types and their discontents</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#WhendescriptiveschemasworkANCHOR" name="WhendescriptiveschemasworkTOC">When descriptive schemas work</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#Thelimitsofdescription:thecaseofANCHOR" name="Thelimitsofdescription:thecaseofTOC">The limits of description: the case of </a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#TheproblemwithschemaextensibilityANCHOR" name="TheproblemwithschemaextensibilityTOC">The problem with schema extensibility</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ExtensionintheinstancewithabstractgenericmicroformatsANCHOR" name="ExtensionintheinstancewithabstractgenericmicroformatsTOC">Extension in the instance with abstract generic microformats</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AproposalANCHOR" name="AproposalTOC">A proposal</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#Anexample:anapproachtodramaANCHOR" name="Anexample:anapproachtodramaTOC">An example: an approach to drama</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IssuesandideasANCHOR" name="IssuesandideasTOC">Issues and ideas</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#Mergingwithahostlanguage:tightorloose?ANCHOR" name="Mergingwithahostlanguage:tightorloose?TOC">Merging with a host language: tight or loose?</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ValidationandvalidibilityANCHOR" name="ValidationandvalidibilityTOC">Validation and validibility</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#InterchangeandinteroperabilityANCHOR" name="InterchangeandinteroperabilityTOC">Interchange and interoperability</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AddressingproductionworkflowconcernsANCHOR" name="AddressingproductionworkflowconcernsTOC">Addressing production workflow concerns</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#MicroformatsasadriverforevolutionarychangeANCHOR" name="MicroformatsasadriverforevolutionarychangeTOC">Microformats as a driver for evolutionary change</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ReferencesANCHOR" name="ReferencesTOC">References</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">ab</div>
         <div class="singletermTERMS">app</div>
         <div class="singletermTERMS">ap</div>
         <div class="singletermTERMS">abstract generics</div>
         <div class="singletermTERMS">abstract block</div>
         <div class="singletermTERMS">abstract pairing</div>
         <div class="singletermTERMS">A Mathematical Theory of Communication</div>
         <div class="singletermTERMS">adaptability</div>
         <div class="singletermTERMS">as a class</div>
         <div class="singletermTERMS">ad hoc</div>
         <div class="singletermTERMS">August 2 - 5, 2011</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">blockquote</div>
         <div class="singletermTERMS">block</div>
         <div class="singletermTERMS">boxed-text</div>
         <div class="singletermTERMS">books</div>
         <div class="singletermTERMS">big</div>
         <div class="singletermTERMS">book</div>
         <div class="singletermTERMS">blind</div>
         <div class="singletermTERMS">because</div>
         <div class="singletermTERMS">Bell System Technical Journal</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2011</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">custom-meta</div>
         <div class="singletermTERMS">choice</div>
         <div class="singletermTERMS">crucial</div>
         <div class="singletermTERMS">correct</div>
         <div class="singletermTERMS">control points for extensibility in the instance</div>
         <div class="singletermTERMS">creative</div>
         <div class="singletermTERMS">coverage</div>
         <div class="singletermTERMS">comprehensiveness</div>
         <div class="singletermTERMS">Course in General Linguistics</div>
         <div class="singletermTERMS">Computer Supported Cooperative Work</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">div</div>
         <div class="singletermTERMS">dl</div>
         <div class="singletermTERMS">dt</div>
         <div class="singletermTERMS">dd</div>
         <div class="singletermTERMS">display-quote</div>
         <div class="singletermTERMS">dl/dt</div>
         <div class="singletermTERMS">docbook:para</div>
         <div class="singletermTERMS">differences</div>
         <div class="singletermTERMS">descriptive</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">editorial intent</div>
         <div class="singletermTERMS">element types</div>
         <div class="singletermTERMS">easier</div>
         <div class="singletermTERMS">escape-hatch</div>
         <div class="singletermTERMS">escape hatch</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
         <div class="singletermTERMS">figure</div>
         <div class="singletermTERMS">floatingText</div>
         <div class="singletermTERMS">fo:block</div>
         <div class="singletermTERMS">fo:list-block</div>
         <div class="singletermTERMS">fo:list-item</div>
         <div class="singletermTERMS">fo:inline</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
         <div class="singletermTERMS">generic</div>
         <div class="singletermTERMS">genre</div>
         <div class="singletermTERMS">generic identifier</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">html:p</div>
         <div class="singletermTERMS">hide</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">informalTable</div>
         <div class="singletermTERMS">inline</div>
         <div class="singletermTERMS">in the wild</div>
         <div class="singletermTERMS">information</div>
         <div class="singletermTERMS">ipso facto</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">lg</div>
         <div class="singletermTERMS">li</div>
         <div class="singletermTERMS">line</div>
         <div class="singletermTERMS">link</div>
         <div class="singletermTERMS">Laws of Form</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">mirror</div>
         <div class="singletermTERMS">more</div>
         <div class="singletermTERMS">Markup Languages: Theory and Practice</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">named-content</div>
         <div class="singletermTERMS">note</div>
         <div class="singletermTERMS">normal</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">ol</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">para</div>
         <div class="singletermTERMS">phrase</div>
         <div class="singletermTERMS">pair</div>
         <div class="singletermTERMS">paragraph</div>
         <div class="singletermTERMS">para</div>
         <div class="singletermTERMS">Platform for Change</div>
         <div class="singletermTERMS">Programmer to Programmer</div>
         <div class="singletermTERMS">Proceedings of Extreme Markup Languages 2007</div>
         <div class="singletermTERMS">Piez</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">RELAX NG Compact Syntax Tutorial</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">span</div>
         <div class="singletermTERMS">seg</div>
         <div class="singletermTERMS">sec</div>
         <div class="singletermTERMS">section</div>
         <div class="singletermTERMS">styled-content</div>
         <div class="singletermTERMS">same</div>
         <div class="singletermTERMS">significant variation within pattern</div>
         <div class="singletermTERMS">Sartor Resartus</div>
         <div class="singletermTERMS">sine qua non</div>
         <div class="singletermTERMS">Senior Consultant</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">table</div>
         <div class="singletermTERMS">tei:p</div>
         <div class="singletermTERMS">the book</div>
         <div class="singletermTERMS">thing itself</div>
         <div class="singletermTERMS">tag abuse</div>
         <div class="singletermTERMS">Tristram Shandy</div>
         <div class="singletermTERMS">two</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
         <div class="singletermTERMS">ul</div>
         <div class="singletermTERMS">ul/li</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">XSLT 2.0 and XPath 2.0 Programmer's Reference</div>
         <div class="singletermTERMS">XSLT 2.0 and XPath 2.0: Programmer's Reference</div>
         <div class="singletermTERMS">XSLT 2.0 and XPath 2.0 Programmer's Reference.</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="AbstractgenericmicroformatsforcoveragecomprehensivenessandadaptabilityANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3">
      <div class="title e1">Abstract generic microformats for coverage, comprehensiveness, and adaptability</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2011</div>
            <div class="confdates e5">August 2 - 5, 2011</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">Markup languages that attempt not only to support particular applications, but to
               provide encoding standards for decentralized communities, face a particular problem:
               how do
               they adapt to new requirements for data description? The most usual approach is a
               schema
               extensibility mechanism, but many projects avoid them, since they fork the local application
               from the core tag set, complicating implementation, maintenance, and document interchange
               and thus undermining many of the advantages of using a standard. Yet the easy alternative,
               creatively reusing and abusing available elements and attributes, is even worse: it
               introduces signal disguised as noise, degrades the semantics of repurposed elements
               and
               hides the interchange problem without solving it.
            </div>
            <div class="para e8">This dilemma follows from the way we have conceived of our models for text. If designing
               an encoding format for one work must compromise its fitness for any other – because
               the clean and powerful descriptive markup for one kind of text is inevitably unsuitable
               for
               another – we will always be our own worst enemies. Yet texts 
               <div class="quote e9">in the
                  wild
               </div> are purposefully divergent in the structures, features and affordances of
               their design at both micro and macro levels. This suggests that at least in tag sets
               intended for wide use across decentralized communities, we must support design innovation
               not only in the schema, but in the instance – in particular documents and sets of
               documents. By defining, in the schema, a set of abstract generic elements for microformats,
               we can appropriate tag abuse (at one time making it unnecessary and capturing the
               initiative
               it represents), expose significant and useful semantic variation, and support bottom-up
               development of new semantic types.
            </div>
         </div>
         <div class="author e10">
            <div class="personname e11">
               <div class="firstname e12">Wendell</div>
               <div class="surname e13">Piez</div>
            </div>
            <div class="personblurb e14">
               <div class="para e15">Lead developer of the Proceedings of Balisage: The Markup Conference, Wendell Piez
                  has
                  worked at Mulberry Technologies, Inc., since 1998, where he provides advice, assistance
                  and training in XML, XSLT, and related technologies.
               </div>
            </div>
            <div class="affiliation e16">
               <div class="jobtitle e17">Senior Consultant</div>
               <div class="orgname e18">Mulberry Technologies, Inc.</div>
            </div>
            <div class="email e19">wapiez@mulberrytech.com</div>
         </div>
         <div class="legalnotice e20">
            <div class="para e21">Copyright © 2011 by Wendell Piez</div>
         </div>
      </div><a name="XMLdocumenttypesandtheirdiscontentsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e22">
         <div class="title e23">XML document types and their discontents</div>
         <div class="para e24">The power and utility of descriptive markup has been well understood and widely
            demonstrated for years and now decades; so it doesn't need to be defended here. However,
            for
            all the demonstrable usefulness of descriptive formats, and of standards that propose
            particular descriptions for documents (in the form of XML element and attribute sets)
            such as
            Docbook, TEI, NISO/NLM and DITA, a number of problems continue to inhibit their adoption
            for
            the widest applications of text encoding, including (significantly) that large and
            open-ended
            set of documents we loosely designate as 
            <div class="quote e25">books</div>. One of the most vexing of these
            is in how we define and manage the boundaries of application of a particular markup
            language
            – what does it seek to do, for what sorts of documents. We can identify this problem
            with the terms 
            <div class="emphasis e26" role="bold">coverage</div>, 
            <div class="emphasis e27" role="bold">comprehensiveness</div> and 
            <div class="emphasis e28" role="bold">adaptability</div>:
            <div class="variablelist e29">
               <div class="varlistentry e30">
                  <div class="term e31">Coverage</div>
                  <div class="listitem e32">
                     <div class="para e33">What are the limits of description? What sorts of documents can be described using
                        the tag set? Is the set bounded in advance (as for example when converting a defined
                        set of extant historical documents), or unbounded?
                     </div>
                     <div class="para e34">For example, the coverage of NISO/NLM JATS (the Journal Article Tag Set) is
                        defined as journal articles, especially (though not exclusively) for STM
                        (scientific/technical/medical) journals. It does not seek to encode musical
                        scores.
                     </div>
                     <div class="para e35">Document types and tag sets (families of related document types such as NLM/NISO
                        or TEI) vary in how much coverage they attempt and in how open-ended that coverage
                        is.
                     </div>
                  </div>
               </div>
               <div class="varlistentry e36">
                  <div class="term e37">Comprehensiveness</div>
                  <div class="listitem e38">
                     <div class="para e39">This is the complement to coverage: not how broadly a tag set seeks to describe
                        texts, but how deeply. Given a set of documents to be encoded, what are the purposes
                        of their description? Are there processing requirements to be addressed, either
                        directly or indirectly? To what extent must variations among the texts be registered;
                        how detailed, exact and complete must the description be? What is the scope of
                        description? For example, can two blocks of text separated by vertical whitespace
                        in
                        rendition both be called 
                        <div class="quote e40">paragraph</div>, or are there cases and conditions
                        in which this is not sufficient, and further distinctions to be made?
                     </div>
                     <div class="para e41">The comprehensiveness problem might come up for NISO/NLM JATS if a journal article
                        were to turn up that contained a segment of musical notation. Without a requirement
                        to
                        treat the notation in any particular way, owners or publishers of this information
                        might choose to encode it as something they do recognize, such as an ordinary
                        graphic.
                     </div>
                     <div class="para e42">It is natural to consider coverage and comprehensiveness together as a problem of
                        scoping. If a document type, formalized by a schema, does not explicitly define its
                        scope of application (what the documents are, and how and for what purposes elements
                        within them are to be distinguished), it will do so implicitly, in its
                        application.
                     </div>
                  </div>
               </div>
               <div class="varlistentry e43">
                  <div class="term e44">Adaptability</div>
                  <div class="listitem e45">
                     <div class="para e46">If an encoding format is adequate to the description of a well-defined (bounded)
                        document set for the purposes of a known and well-understood set of applications,
                        it
                        does not have to be adaptable: we will never have to introduce new elements,
                        attributes or tag semantics, as these can all be distinguished and defined up front.
                        But most schemas in actual use need to be able to stretch, either to describe new
                        documents, or to identify new structures and features of documents already considered
                        in scope. That is, they need to adapt, in both their coverage and their
                        comprehensiveness.
                     </div>
                     <div class="para e47">Adaptability will be a problem to the extent that it is needed (that is, coverage
                        and comprehensiveness are problems) and available mechanisms are not adequate to meet
                        the need.
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e48">We now have enough experience with XML encoding to have a good sense of how well our
            mechanisms work in the face of these issues. Whether they work well enough for you
            depends on
            who you are; more generally, it depends on the scope of control exerted by schema
            designers
            (either directly or by proxy) over documents.
            <div class="popupBox e49">
               <div class="popupLabel" onmouseover="$('#d1e88').show('1000');" onmouseout="$('#d1e88').hide('1000');">[ footnote ]</div>
               <div id="d1e88" style="display: none;">
                  <div class="footnote">
                     <div class="para e50">In passing, it is worth noting that none of these problems arise in XML document types
                        or formats that are designed to face applications (such as, say, XSL formatting objects
                        or
                        SVG), rather than describe information directly without regard to how it may be processed.
                        This is because an application format, as opposed to a descriptive format, defines
                        its
                        coverage and comprehensiveness in the design of the application. From this, we can
                        reason
                        backwards and see that the problems discussed here are inherent in the very idea of
                        descriptive markup, since to posit a description of a text that is not bound to a
                        particular application is to raise the question of how we define that description's
                        coverage and comprehensiveness.
                     </div>
                  </div>
               </div>
            </div>
         </div><a name="WhendescriptiveschemasworkANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e51">
            <div class="title e52">When descriptive schemas work</div>
            <div class="para e53">The short answer is that how well a descriptive schema works in operation depends
               not
               only on its fitness for the data and task (i.e., whether its coverage is appropriate
               and it
               is adequately comprehensive), but also to the extent that document encoders have editorial
               control over the information, both in its content and organization. This should not
               come as
               a surprise, since indeed the roots of XML technologies are in publishing systems in
               which it
               is more or less imperative to exercise such control, and the promise of externalizing,
               rationalizing and simplifying these control mechanisms is much of the point of descriptive
               markup. The classic application of this principle, of course, is in the publishing
               of a
               manual, technical series or periodical, in which authors or contributors (on the one
               hand)
               and production staff and designers (on the other) assent to creative decisions of
               editors,
               and document markup can serve transparently to represent 
               <div class="quote e54">editorial intent</div>.
               When control is centralized in this way, the circle is complete: once an encoding
               format is
               defined, content can be selected, composed and modified to conform to its capabilities.
               Requirements for change and adaptability are managed in balance against other needs
               for
               consistency and stability. System operators resort, when necessary, to editorial
               policy-making to forestall, prioritize, and schedule any innovations likely to have
               a
               destabilizing effect.
            </div>
         </div><a name="Thelimitsofdescription:thecaseofANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e55">
            <div class="title e56">The limits of description: the case of 
               <div class="quote e57">the book</div>
            </div>
            <div class="para e58">The inverse is also true. Descriptive schemas work well to the extent that control
               over
               the data is centralized and consistency in the application of markup can be enforced.
               But
               when it is not so centralized, they do not work so well. This can happen anywhere,
               but it
               happens most notably and inescapably in a community of use which shares a common schema
               or
               tag set (using that term to identify a family of related schemas) without sharing
               local
               goals and objectives. Maybe they have an interest in a common encoding standard for
               purposes
               ostensibly of document interchange; similarly, they may wish to take advantage of
               common
               knowledge and a shared tool base. Of course, this is exactly the case with the
               
               <div class="quote e59">big</div> general-purpose document encoding standards and community initiatives,
               such as TEI, Docbook, and NLM/NISO.
            </div>
            <div class="para e60">The limits of a descriptive encoding can be readily illustrated by considering
               information artifacts in the wild – that is, as actually found, and apart from any
               considerations of how they may be encoded electronically (or not) by the authors,
               editors,
               designers and publishers who have composed and produced them. Texts in the wild –
               even
               if we limit consideration to those texts we are content to designate as 
               <div class="quote e61">books</div>
               – are not perfectly regular, but only mostly so. Indeed this semi-regularity is an
               important (perhaps the most important) general feature of books, inasmuch as 
               <div class="emphasis e62" role="bold">significant variation within pattern</div> might serve as a definition of
               
               <div class="quote e63">information</div> itself: the structures of books cannot be entirely regularized
               without sometimes destroying the book. Sometimes this works at a very granular level.
            </div>
            <div class="figure e64">
               <div class="title e65">Specialized structures across a series of books</div>
               <div class="mediaobject e66">
                  <div class="imageobject e67">
                     <div class="metaBox e68"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e125').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e125" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e68'
                              </span><span class="metaAttribute">fileref='../../../vol7/graphics/Piez01/Piez01-001.jpg'
                              </span><span class="metaAttribute">width='100%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="caption e69">
                  <div class="para e70">Michael Kay's 
                     <div class="emphasis e71" role="ital">XSLT 2.0 and XPath 2.0 Programmer's
                        Reference
                     </div> is a convenient example of a book whose internal structures are
                     more elaborate than may be typical of a 
                     <div class="quote e72">generic</div> book. Yet unless we wish
                     to say this book is not a book, but something else, a viable book model has to support
                     such structures either natively or by means of extensions to be introduced by the
                     author
                     or publisher. It is possible that the markup needed here could be useful across all
                     the
                     books of the series to which this book belongs; in any case, it might be useful to
                     the 
                     publisher and to application designers who wished to design interfaces to this content
                     
                     if it were.
                  </div>
               </div>
            </div>
            <div class="figure e73" xml:id="fig2">
               <div class="title e74">Specialized structures across a single book</div>
               <div class="mediaobject e75">
                  <div class="imageobject e76">
                     <div class="metaBox e77"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e140').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e140" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e77'
                              </span><span class="metaAttribute">fileref='../../../vol7/graphics/Piez01/Piez01-002.jpg'
                              </span><span class="metaAttribute">width='100%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="mediaobject e78">
                  <div class="imageobject e79">
                     <div class="metaBox e80"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e143').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e143" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e80'
                              </span><span class="metaAttribute">fileref='../../../vol7/graphics/Piez01/Piez01-003.jpg'
                              </span><span class="metaAttribute">width='100%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="mediaobject e81">
                  <div class="imageobject e82">
                     <div class="metaBox e83"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e146').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e146" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e83'
                              </span><span class="metaAttribute">fileref='../../../vol7/graphics/Piez01/Piez01-004.jpg'
                              </span><span class="metaAttribute">width='100%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="caption e84">
                  <div class="para e85">Stafford Beer's 
                     <div class="emphasis e86" role="ital">Platform for Change</div> (1975), like
                     many other literary or quasi-literary productions, is a fascinating example of a book
                     whose structure is peculiar to itself. Beer's volume is not unusual in having figures
                     and diagrams, although one appears on the inside of the dust jacket; but it does have
                     structured prose (it is not verse, or so the author asserts), and its chapters are
                     differentiated by type, as indicated by page colors.
                  </div>
                  <div class="para e87">Does a generic book model need to be able to accommodate works of this kind? We can
                     agree to say no, this book is out of scope: the coverage problem again. Or say that
                     although it is a book, we will force-fit it within available semantics (risking tag
                     abuse to deal with inadequate comprehensiveness). Or we have to find a way of dealing
                     with its special requirements: the adaptability problem.
                  </div>
                  <div class="para e88">For what it's worth, even unextended TEI does not provide elements directly capable
                     of marking up this text, as it has no elements for lineated (structured) prose, only
                     verse.
                  </div>
               </div>
            </div>
            <div class="figure e89">
               <div class="title e90">Specialized structures within a single book</div>
               <div class="mediaobject e91">
                  <div class="imageobject e92">
                     <div class="metaBox e93"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e162').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e162" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e93'
                              </span><span class="metaAttribute">fileref='../../../vol7/graphics/Piez01/Piez01-005.jpg'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="mediaobject e94">
                  <div class="imageobject e95">
                     <div class="metaBox e96"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e165').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e165" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e96'
                              </span><span class="metaAttribute">fileref='../../../vol7/graphics/Piez01/Piez01-006.jpg'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="caption e97">
                  <div class="para e98">Thomas Carlyle's 
                     <div class="emphasis e99" role="ital">Sartor Resartus</div> (1833) should be
                     required reading for all students of semiology. It is mostly conventional in structure;
                     or at least, much of its point is in how it observes some of the more elaborate
                     conventions of nineteenth-century scholarship. But an epitaph pops up in the middle.
                     Students of literature know that such things are less uncommon than you might think,
                     even leaving aside 
                     <div class="emphasis e100" role="ital">Tristram Shandy</div>. (Illustration from
                     Google Books.)
                  </div>
                  <div class="para e101">Again, we have either to extend our coverage of what's a book (or what's in a book),
                     or provide a way for a markup language to be adapted to purposes like this.
                  </div>
               </div>
            </div>
            <div class="para e102">Three examples appear in Figures 1-3, showing this phenomenon at the level of the
               series
               (the Wrox 
               <div class="emphasis e103" role="ital">Programmer to Programmer</div> series, shown here by
               Michael Kay's 
               <div class="emphasis e104" role="ital">XSLT 2.0 and XPath 2.0: Programmer's
                  Reference
               </div>
               <div class="popupBox e105">
                  <div class="popupLabel" onmouseover="$('#d1e184').show('1000');" onmouseout="$('#d1e184').hide('1000');">[ footnote ]</div>
                  <div id="d1e184" style="display: none;">
                     <div class="footnote">
                        <div class="para e106">I offer this example without being able to confirm that the design of Kay's book
                           actually shares its structures exactly with other books in the series. But even if
                           it
                           does not, we all know of cases like this.
                        </div>
                     </div>
                  </div>
               </div>); the level of the book (Stafford Beer's 
               <div class="emphasis e107" role="ital">Platform for
                  Change
               </div>); and within the book (the epitaph appearing in 
               <div class="emphasis e108" role="ital">Sartor Resartus</div>). Of course, many more examples could be shown to demonstrate
               how every book – and every structure within a book – is potentially a one-off, a
               thing unique unto itself. In part, this reflects the fact that books as functioning
               information objects can and must be designed to serve sometimes very distinct and
               peculiar
               purposes, which may even be intended specifically to differentiate them from other
               books.
               One of the core requirements addressed by book design, that is, is that a particular
               design
               may be distinctive, at least in part, not only in its features but even in the requirements
               it addresses, which will be different from the requirements addressed by any generalized
               design. This reflects a different balance of power in book publishing from journal
               publishing: the center of gravity for design decisions shifts from publisher to author
               – which is why, as a class, 
               <div class="quote e109">books</div> are less tractable for descriptive
               markup than journals that maintain a consistent structure (expressed in their design,
               layout
               and page formatting) across articles.
            </div>
            <div class="para e110">Of course, the irony here is that this will be true of books 
               <div class="emphasis e111" role="ital">as a
                  class
               </div> even while individual books or certain genres, types or formal series of
               books might well be suitable and profitable objects for description. (And so we generally
               deal with this problem by limiting our coverage to particular books, leaving
               
               <div class="quote e112">books</div> in the abstract out of scope.) Because coverage – what,
               exactly, constitutes a 
               <div class="quote e113">book</div>, and what sorts of documents are not books
               – is not well defined, the comprehensiveness of any markup applied to nominal books
               will also be at issue. In practice this means that descriptive encoding hits a wall,
               since
               to whatever extent we try and provide appropriate handling of every structure we see,
               our
               markup language grows into a Tower of Babel: a single megalo-description supporting
               this
               differentiation ultimately fragments under its own weight, since any instance may
               have
               structures peculiar to it, while no instance includes all (or even many of) the structures
               necessary for the others. While this may be a fascinating state of affairs to a media
               critic
               or markup language designer, it is no basis for a common information standard that
               needs to
               normalize description at some level, if only to enable and regulate processing.
            </div>
            <div class="para e114">This paradox results from the foundational insight of descriptive encoding. The
               operative dogma is that we can and should clearly distinguish presentation from content,
               where the organization of content is regular and in some way normative, even while
               the
               presentation and indeed application of that content may vary. (In effect, this is
               a
               model/view/controller paradigm applied to documents, in which the document itself
               is a model
               that can be subjected to multiple views in one or more applications as controllers.)
               As
               noted earlier, this tends to be the case within collections of documents that can
               have such
               regularity imposed on them – consistently designed works such as journal articles
               or
               technical manuals, that is, where control of both content and composition is top-down
               and centralized.
               <div class="popupBox e115">
                  <div class="popupLabel" onmouseover="$('#d1e210').show('1000');" onmouseout="$('#d1e210').hide('1000');">[ footnote ]</div>
                  <div id="d1e210" style="display: none;">
                     <div class="footnote">
                        <div class="para e116">I know a publisher that forbids formatted lists, either numbered or bulleted. Markup
                           designers like this sort of thing: no lists to worry about. The onus is on the authors
                           to do without them.
                        </div>
                     </div>
                  </div>
               </div> So the design of markup languages is focused on defining that regularity and
               normativity, in a sense leveling the differentiation into those classes of things
               (we try to
               identify these with 
               <div class="quote e117">element types</div>) that can be adequately, if not always
               comprehensively, distinguished with an encoding system.
            </div>
            <div class="para e118">Yet in order to do this, we have to pretend that some distinctions between things
               which
               we choose to identify as the same type are not, and cannot be, significant. And we
               never
               know which one or another of the distinctions to which a particular markup system
               has a
               blind spot will turn out to be important as soon as we turn the page of a book or
               of any
               work outside our controlled set. In other words, depending on the type of work, anomalous
               structures may be more or less unusual, and regarded as more or less anomalous; but
               when
               they occur, they can be very anomalous. The structures of actual books, that is, have
               a
               fractal quality, inasmuch as what constitutes an anomaly (as opposed to merely another
               regular if unusual feature) depends on the level of scale – and yet there is no level
               at which anomalies disappear.
               <div class="popupBox e119">
                  <div class="popupLabel" onmouseover="$('#d1e219').show('1000');" onmouseout="$('#d1e219').hide('1000');">[ footnote ]</div>
                  <div id="d1e219" style="display: none;">
                     <div class="footnote">
                        <div class="para e120">Take epitaphs in prose fiction as an example. Among Menippean satires, the genre to
                           which 
                           <div class="emphasis e121" role="ital">Sartor Resartus</div> belongs, they are perhaps not
                           uncommon. But shift the scope to nineteenth-century fictional monographs, in a corpus
                           of
                           one or a dozen or a hundred instances including 
                           <div class="emphasis e122" role="ital">Sartor
                              Resartus
                           </div>, we may find just the one epitaph, an anomaly. Yet in a thousand,
                           maybe there are three or four epitaphs, in ten thousand, thirty or forty – still
                           unusual, but no longer quite anomalies. But now we discover a dinner menu. If we had
                           randomly picked the single work with the dinner menu earlier, we would have seen this
                           anomaly earlier – but in smaller samples, it is more likely not to find dinner
                           menus at all.
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e123">Different markup languages deal with this problem differently, depending on the extent
               to which their design targets a distinct 
               <div class="quote e124">genre</div> or application domain. But in
               every markup language, we can see this stress between coverage and comprehensiveness
               on the
               one hand, and adaptability on the other. To whatever extent coverage is well defined
               and
               comprehensiveness is achieved within it – by virtue of the meaningful distinctions
               being made and the incidental ones elided – adaptability also becomes important
               – because a distinction never made in one context, or made only incidentally, becomes
               meaningful in another. (In contrast, precisely because it is relatively uncomprehensive
               across a very wide coverage, a markup language such as HTML needs to adapt less; the
               price
               for this, of course, is that its semantics are weak.) But adaptability by its nature
               threatens the integrity of the boundaries (the coverage) that make the semantic labeling
               function of a markup language useful.
            </div>
            <div class="para e125">The root of the problem here is in a question not often asked about descriptive markup
               (except, possibly, at Balisage), namely what is it that markup should be intended
               to
               describe. Sometimes, naïve proponets of descriptive markup have been content to argue
               that
               what is being described is the 
               <div class="quote e126">thing itself</div>, but this of course begs the
               question. A successful markup application works precisely because it does not seek
               to
               capture every distinguishable feature or detail of anything it describes, but instead
               represents and abstracts from it. The model it offers is an optimization: more accessible,
               tractable and useful, at least for certain purposes (including automation), than the
               thing
               itself. This reduction of differences to (supposed) essentials reflects the way, in
               information processing systems, everything we do is on the basis of the 
               <div class="emphasis e127" role="ital">differences</div> and differentiations (and similarities) we can register
               and retain within and between different data objects, as is well established in information
               theory from Saussure [
               <div class="xref e128" linkend="saussure1916"></div>] to Shannon [
               <div class="xref e129" linkend="shannon1948"></div>].
               <div class="popupBox e130">
                  <div class="popupLabel" onmouseover="$('#d1e246').show('1000');" onmouseout="$('#d1e246').hide('1000');">[ footnote ]</div>
                  <div id="d1e246" style="display: none;">
                     <div class="footnote">
                        <div class="para e131">Shannon puts this mathematically as our ability to select which of a possible set
                           of
                           messages we have in front of us. To select correctly from among possibilities is to
                           differentiate. See also 
                           <div class="xref e132" linkend="spencerbrown1969"></div>.
                        </div>
                     </div>
                  </div>
               </div> And this means that we necessarily make assertions (by our names and labels)
               that erase some distinctions between things, precisely so that we can assert others.
               It is
               in recognition of this that in SGML terminology, an element name is called a 
               <div class="quote e133">generic
                  identifier
               </div>.
               <div class="popupBox e134">
                  <div class="popupLabel" onmouseover="$('#d1e256').show('1000');" onmouseout="$('#d1e256').hide('1000');">[ footnote ]</div>
                  <div id="d1e256" style="display: none;">
                     <div class="footnote">
                        <div class="para e135">This is not to argue that we do not rely frequently or even always on information
                           whose transmission is not perfectly reliable, such as the expectation that the term
                           
                           <div class="quote e136">para</div> will be taken to assert something particular to a recipient. It is
                           only to point out that from the machine's point of view, all we have said by labeling
                           something a 
                           <div class="code e137">para</div> is that it is like other things with the markup
                           
                           <div class="code e138">para</div>, and unlike things marked 
                           <div class="code e139">div</div> or 
                           <div class="code e140">span</div> or
                           anything else not 
                           <div class="code e141">para</div>. Whether this likeness or unlikeness will have any
                           consequences in processing is again a different matter.
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e142">This erasure of distinctions by calling different things by the same names, as long
               as
               they are alike in certain crucial aspects – 
               <div class="quote e143">crucial</div> being defined in
               the relation between an information type and its application domains – is the
               balancing factor that prevents descriptive markup from going out of control and failing
               in
               its mission 
               <div class="emphasis e144" role="ital">sine qua non</div>, namely the automatability that
               follows on our ability to know in advance the limits we will work within. For a markup
               application to be viable, in other words, it must have a fairly limited set of elements,
               whose semantics are known and respected and whose structural arrangements are predictable
               (indeed this is the entire point of a schema).
               <div class="popupBox e145">
                  <div class="popupLabel" onmouseover="$('#d1e286').show('1000');" onmouseout="$('#d1e286').hide('1000');">[ footnote ]</div>
                  <div id="d1e286" style="display: none;">
                     <div class="footnote">
                        <div class="para e146">See my 2001 paper on this topic, 
                           <div class="quote e147">Beyond the ‘Descriptive vs
                              Procedural’ Distinction
                           </div>
                           [
                           <div class="xref e148" linkend="piez2001"></div>].
                        </div>
                     </div>
                  </div>
               </div> To the extent this set grows and changes (either because new elements and
               attributes are added or because the semantics of old ones are elaborated), viability
               is
               endangered, to the point where (if the rate of change outstrips the capability of
               the rest
               of the system to change with it) applications of the language become unsustainable
               and the
               language itself becomes, at best, a literary artifact.
            </div>
            <div class="para e149">Of course, this limitation inhibits adaptability, insofar as an element set defined
               in
               advance will (
               <div class="emphasis e150" role="ital">ipso facto</div>) fail to account for any semantic
               features of the information type that are newly defined or recognized, whether accounting
               for new phenomena to be described, addressing new applications, or for any other reason.
               And
               this is the crux of the paradox, the precise dilemma on whose horns the problem of
               descriptive markup is stuck.
            </div>
         </div>
      </div><a name="TheproblemwithschemaextensibilityANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e151">
         <div class="title e152">The problem with schema extensibility</div>
         <div class="para e153">The usual way of providing an encoding format with adaptability is to allow that a
            schema
            may be extended and customized for local use. 
            <div class="quote e154">If you need new element types, this is
               how to add them
            </div> etc., sometimes with elaborations in the form of class systems,
            metalanguages (TEI ODD), architectural forms, and so forth. Such mechanisms can be
            ingenious;
            they can also be useful – especially for publishers who can exert top-down control.
            Yet
            this solution often works less well in the real world than it should, as it has problems
            of
            its own. Extensions to a tag set, even as they successfully address new requirements,
            raise
            interoperability issues with systems that do not know about them. When we address
            this problem
            in turn by allowing extensions to make it back into the development trunk of the markup
            language, we end up making the entire system more complex, more unwieldy, and more
            expensive
            to develop with, use and maintain. In effect, we have a devil's choice: fork, or bloat.
            In the
            one case, having extended the schema I find my documents will no longer be interchangeable,
            even nominally, with yours. In the other, we will reconcile and merge my extensions
            back into
            the main schema, where you and everyone else who works with it will have to live with
            them
            (even if you will never need them), and all our common tools must be larger and more
            complex
            to accommodate them.
         </div>
         <div class="para e155">Schema extensibility also gets it wrong in another way: it assumes that adapting a
            tag set
            to meet new requirements for data description is properly the task of a schema designer,
            and
            not of the content creator, editor or owner who is actually responsible for the document.
            Again, this differentiation in roles is less of a problem for organizations with strong
            top-down control, where coordination between the different parties can be expected,
            and a
            schema designer is available either to give or to take orders. But many tag sets aim
            to
            support wide deployment across a user community with a greater variation in needs,
            goals and
            available resources, where project principals may have neither expertise, nor resources,
            nor
            the inclination to take on the task of schema modification, especially as it distracts
            from
            the immediate and more important task of producing the document itself.
            <div class="popupBox e156">
               <div class="popupLabel" onmouseover="$('#d1e310').show('1000');" onmouseout="$('#d1e310').hide('1000');">[ footnote ]</div>
               <div id="d1e310" style="display: none;">
                  <div class="footnote">
                     <div class="para e157">To provide for an optimized method for schema extension as Docbook and NLM/NISO do
                        through modular design, and TEI and DITA through their more specialized mechanisms,
                        does
                        not actually alleviate this problem, inasmuch as it demands familiarity with a whole
                        new
                        set of technical arcana in order to make things 
                        <div class="quote e158">easier</div>. This is not to say
                        that such measures are without advantage or value, just that their value is not in
                        making
                        schema modification more accessible to non-experts.
                     </div>
                  </div>
               </div>
            </div> In other words, to customize a community standard for local uses works best, as a
            solution, for those organizations who need it least – who are best able to exert
            top-down centralized control, who have schema developers on call, and who are probably
            able
            (if they do not see other benefits to using a standard) to manage completely on their
            own.
         </div>
         <div class="para e159">And finally, there is a simple cost issue whenever we consider cases that are,
            effectively, one-offs. Even in an organization with the resources to do so, it may
            be too much
            of an effort to introduce customizations to accommodate a single book, or a single
            interesting
            textual artifact appearing on a single page in a single book.
         </div>
         <div class="para e160">We commonly assume that this means the game is over, since how can a content creator
            introduce new descriptions to the data without schema extension, at least not without
            resorting to tag abuse, forcibly attempting to carry new semantics on elements provided
            for
            other purposes? In effect, what is needed is an extension mechanism that happens in
            the
            instance, not in the schema – and yet in a way that enables authors, editors and
            production (not markup) designers without compromising the integrity of the markup
            language as
            a whole (which is what happens when tag abuse becomes rampant). This implies not that
            we have
            more elements or more easy ways to add new elements, but rather a smaller set of elements
            that
            are nevertheless, paradoxically, capable of more expressiveness and wider application.
         </div>
      </div><a name="ExtensionintheinstancewithabstractgenericmicroformatsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e161">
         <div class="title e162">Extension in the instance with abstract generic microformats</div>
         <div class="para e163">The mechanism we need to do this is already in front of us. We routinely permit content
            creators to introduce exactly such 
            <div class="emphasis e164" role="ital">ad hoc</div> semantic extensions
            to the language, whenever we invite them to qualify their element types with attributes.
            TEI
            
            <div class="code e165">@type</div>, HTML 
            <div class="code e166">@class</div>, Docbook 
            <div class="code e167">@role</div>, the various
            NLM/NISO subtyping attributes: these are there specifically so that we can identify
            particular
            instances of elements such as 
            <div class="code e168">div</div>, 
            <div class="code e169">p</div>, 
            <div class="code e170">figure</div>,
            
            <div class="code e171">table</div>, 
            <div class="code e172">seg</div>, 
            <div class="code e173">sec</div>, 
            <div class="code e174">span</div> and so forth with
            particular semantics over and above the generic semantics of the parent element. The
            practice
            has come to be an essential feature in HTML, inasmuch as 
            <div class="code e175">@class</div> attributes as
            much as element types provide the semantic hooks for display and behavior in the browser,
            in
            the preferred fashion (as supported by CSS). It is the recommended solution also in
            TEI for
            handing chapters, parts, books, sections, cantos or what have you as arbitrary text-segmenting
            elements, which are all unified as 
            <div class="code e176">div</div> (or 
            <div class="code e177">lg</div> or what have you) with
            a 
            <div class="code e178">@type</div> attribute available for the subtyping.
         </div>
         <div class="para e179">Indeed, successful documentary markup languages commonly have elements whose native
            semantics are especially loose, as if specifically to allow 
            <div class="quote e180">escape-hatch</div> markup
            for ad-hoc inclusion of structures not naturally described otherwise.
            <div class="popupBox e181">
               <div class="popupLabel" onmouseover="$('#d1e378').show('1000');" onmouseout="$('#d1e378').hide('1000');">[ footnote ]</div>
               <div id="d1e378" style="display: none;">
                  <div class="footnote">
                     <div class="para e182">I described this sort of mechanism in my 2009 Balisage paper, 
                        <div class="quote e183">How to Play XML:
                           Markup technologies as nomic game
                        </div>
                        [
                        <div class="xref e184" linkend="piez2009"></div>].
                     </div>
                  </div>
               </div>
            </div> TEI: 
            <div class="code e185">div</div>, 
            <div class="code e186">floatingText</div>, 
            <div class="code e187">ab</div>,
            
            <div class="code e188">seg</div>. NLM/NISO JATS: 
            <div class="code e189">sec</div>, 
            <div class="code e190">app</div>,
            
            <div class="code e191">named-content</div>, 
            <div class="code e192">custom-meta</div>. Docbook: 
            <div class="code e193">blockquote</div>,
            
            <div class="code e194">informalTable</div>, 
            <div class="code e195">note</div>, 
            <div class="code e196">phrase</div>. HTML: 
            <div class="code e197">div</div>
            and 
            <div class="code e198">span</div>. While using such elements in this way is not always officially
            encouraged, in any widely used markup system it soon enough becomes a widespread practice,
            if
            only informally. Sometimes an element that supposedly has a strong semantic comes
            to serve
            this way simply by having been widely abused: no one actually assumes that an HTML
            
            <div class="code e199">blockquote</div> must always be a quotation, or that 
            <div class="code e200">dl</div>, 
            <div class="code e201">dt</div>
            and 
            <div class="code e202">dd</div> must always be terms and definitions. Such a two-tier description is a way
            of evading the problem of constraining the markup too stringently in the schema, by
            allowing
            the balance between generic and specific to be struck in the instance, where the
            
            <div class="quote e203">same</div> things (
            <div class="code e204">p</div> or 
            <div class="code e205">div</div> elements, for example) can be
            differentiated by different class assignments. Descriptive semantics are provided
            to tabular
            data by this mechanism probably more often than by providing content-oriented elements
            in a
            schema, if only because tables are so often peculiar or one-of-a-kind that it is the
            only
            practical way to do it.
            <div class="popupBox e206">
               <div class="popupLabel" onmouseover="$('#d1e454').show('1000');" onmouseout="$('#d1e454').hide('1000');">[ footnote ]</div>
               <div id="d1e454" style="display: none;">
                  <div class="footnote">
                     <div class="para e207">That is, the issue is not that more properly descriptive markup is not possible or
                        useful for tables (see 
                        <div class="xref e208" linkend="birnbaum2007"></div>), but that to design, deploy and
                        support 
                        <div class="quote e209">correct</div>, descriptive markup 
                        <div class="emphasis e210" role="ital">ad hoc</div>
                        for every table (or even most sets of tables) is simply impractical. The related workflow
                        problem – that insofar as it separates description from presentation, markup tends
                        to take the design of a table's presentation out of the hands of people who are properly
                        responsible for it (that is, authors or editors who understand the information's
                        intellectual structure, which that presentation must reflect not just generically
                        but in
                        the particular instance) – is related to this.
                     </div>
                     <div class="para e211">It should be added, however, that information that is presented in tabular form might
                        well be marked up using more abstract structures, leaving presentational issues to
                        a
                        processing step, without having particular elements devoted to the particular semantics
                        of
                        every particular table.
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e212">Nor does this have to mean any loss of control or normalization, since we have learned
            to
            validate constraints on attribute assignments, using means such as Schematron. On
            the
            contrary, it means that we can assert levels of validity: a basic level of schema
            validation
            can be supplemented by a profile validation that is defined locally and peculiarly
            for only a
            subset of all documents valid to the schema. This exact strategy is in fact happening
            more and
            more commonly, as a way of balancing a requirement for standards conformance (to TEI
            or
            NLM/NISO JATS, for example) with more particular local requirements being addressed
            by local
            schema subsetting and profiling.
         </div>
         <div class="para e213">Another way of putting it is that we should look not to schema extensibility but to
            microformats defined locally as the primary means of providing specialized semantics
            for local
            processing. (There is a more or less coherent movement to codify HTML microformats
            at
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e214" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.microformats.org</div>; but as the TEI among others demonstrates, the
            basic idea of carrying primary semantics in attributes predates the web and is more
            general
            than HTML.
            <div class="popupBox e215">
               <div class="popupLabel" onmouseover="$('#d1e474').show('1000');" onmouseout="$('#d1e474').hide('1000');">[ footnote ]</div>
               <div id="d1e474" style="display: none;">
                  <div class="footnote">
                     <div class="para e216">To be sure, the application of microformats I suggest here, and its rationale, is
                        somewhat different from microformats (at least as usually promoted) in HTML, where
                        they
                        are all about implicit application binding by way of semantic labels, as opposed to
                        description in the stricter sense. Yet there is a wide spectrum between these two
                        extremes, which can and should be filled as much by users addressing their local problems
                        as by engineers building a system out: in both cases, the promise is that applications
                        can
                        be built on top of the standard without having to modify and extend the standard
                        itself.
                     </div>
                  </div>
               </div>
            </div>) The only thing remaining to complete this picture is to provide scaffolding for
            such a mechanism, in the form of a set of elements defined neutrally enough (that
            is, with
            generic enough semantics of their own) that they can readily be devoted to such a
            use, without
            compromising the stronger semantics of more properly descriptive elements. Such a
            built-in
            adaptability mechanism would implicitly address issues of both coverage and comprehensiveness.
            <div class="popupBox e217">
               <div class="popupLabel" onmouseover="$('#d1e478').show('1000');" onmouseout="$('#d1e478').hide('1000');">[ footnote ]</div>
               <div id="d1e478" style="display: none;">
                  <div class="footnote">
                     <div class="para e218">In paraphrasing this talk at Balisage 2011, Michael Sperberg-McQueen helpfully
                        described this mechanism as 
                        <div class="quote e219">control points for extensibility in the
                           instance
                        </div>. This is a nice way of indicating that far from being an allowance for
                        less control over content, the essence of the proposal is to make it possible for
                        both
                        schema designers and document creators to assert 
                        <div class="emphasis e220" role="ital">more</div>
                        control, by asserting it gently when it cannot be asserted strongly.
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e221">It is also feasible, since even across hypermedia, the basic display and functional
            elements of text media are fairly well known and stable: they are inline objects (the
            very
            fact that I don't have to explain to the Balisage audience what I mean by this term
            makes my
            point here); blocks; conceptual containers (
            <div class="quote e222">wrappers</div>) for blocks allowing them
            to be grouped and for common features to be inherited together; tabular layout objects;
            perhaps lists (which might be considered a special kind of table); and links and images
            (allowing that an image element can be thought of as a transcluding link). Along these
            lines,
            a comprehensive taxonomy can be derived by identifying basic common formatting properties
            of
            elements in relation to other elements.
         </div>
         <div class="para e223">This fact suggests that a set of abstract structural elements be defined that map
            directly
            straightforwardly to the semantics of known result formats of transformation, including
            CSS
            and XSL-FO. Elements as generic as 
            <div class="code e224">div</div>, 
            <div class="code e225">block</div>, and
            
            <div class="code e226">inline</div> allowing 
            <div class="code e227">@class</div> or 
            <div class="code e228">@type</div> attributes to specify
            semantics for applications further downstream, would provide strong enough semantics
            at a base
            line, supporting presentation, to be useful, while nevertheless alerting developers,
            by their
            use, that more particular kinds of handling might also be called for. In effect, the
            implicit
            contract offered by element typing mechanisms (that all elements will be handled downstream
            in
            ways appropriate to them) would be suspended for these 
            <div class="quote e229">abstract generics</div> in
            favor of another, allowing and encouraging local developers to take advantage of them
            for
            local purposes. Even without specialized functionalities (including very strong validation)
            for these elements by default, they could nonetheless be differentiated enough from
            one
            another and from the main set of elements to do something reasonable in display and
            in other
            applications – up to and including useful generic functionalities, such as simply
            exposing the values of their 
            <div class="code e230">@type</div> or 
            <div class="code e231">@class</div> assignments in the HTML
            results of a transformation, where they would be available for mapping to display
            semantics in
            CSS.
         </div><a name="AproposalANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e232">
            <div class="title e233">A proposal</div>
            <div class="para e234">So here is a straw-man proposal for a set of such elements and attributes:
               <div class="variablelist e235">
                  <div class="varlistentry e236">
                     <div class="term e237">
                        <div class="code e238">div</div> (division)
                     </div>
                     <div class="listitem e239">
                        <div class="para e240">Named after 
                           <div class="code e241">div</div> in HTML and TEI. Permitted to appear anywhere a
                           block may appear (like HTML 
                           <div class="code e242">div</div>, more like TEI
                           
                           <div class="code e243">floatingText</div> than TEI 
                           <div class="code e244">div</div>). Unlike NLM/NISO
                           
                           <div class="code e245">sec</div>, Docbook 
                           <div class="code e246">section</div> or TEI 
                           <div class="code e247">div</div>, a title is
                           not required, although generic metadata may be permitted. 
                           <div class="code e248">div</div> is
                           permitted to contain any block-level object, such as paragraphs, figures or tables,
                           display quotes, 
                           <div class="code e249">div</div> or 
                           <div class="code e250">ab</div> elements.
                        </div>
                        <div class="para e251">In general, 
                           <div class="code e252">div</div> may be expected to map to HTML 
                           <div class="code e253">div</div> or
                           XSL-FO 
                           <div class="code e254">fo:block</div> for display. For conversion, given sufficient
                           constraints imposed on 
                           <div class="code e255">div</div> or on attribute-qualifed families of
                           
                           <div class="code e256">div</div>, they may become TEI 
                           <div class="code e257">div</div> or
                           
                           <div class="code e258">floatingText</div>, NLM/NISO 
                           <div class="code e259">sec</div>, 
                           <div class="code e260">display-quote</div>,
                           or 
                           <div class="code e261">boxed-text</div>, Docbook 
                           <div class="code e262">section</div>, 
                           <div class="code e263">blockquote</div> or
                           
                           <div class="code e264">informalTable</div>, or the like. 
                        </div>
                     </div>
                  </div>
                  <div class="varlistentry e265">
                     <div class="term e266">
                        <div class="code e267">ab</div> (abstract block)
                     </div>
                     <div class="listitem e268">
                        <div class="para e269">Named after TEI 
                           <div class="code e270">ab</div>, an 
                           <div class="quote e271">abstract block</div>. This element
                           is an analogue for a paragraph or a list item. It is permitted to contain any mixed
                           content or any block-level item (and not only the other abstract generics, but any
                           inline content permitted in the host language), but it will not have its own
                           metadata.
                        </div>
                        <div class="para e272">For display, 
                           <div class="code e273">ab</div> will become HTML 
                           <div class="code e274">div</div> or
                           
                           <div class="code e275">p</div>, or XSL-FO 
                           <div class="code e276">fo:block</div>. For conversion, 
                           <div class="code e277">ab</div>
                           will often become a paragraph or paragraph-like object.
                        </div>
                     </div>
                  </div>
                  <div class="varlistentry e278">
                     <div class="term e279">
                        <div class="code e280">ap</div>, 
                        <div class="code e281">pair</div> (abstract pairing, pair)
                     </div>
                     <div class="listitem e282">
                        <div class="para e283">
                           <div class="code e284">ap</div> or 
                           <div class="quote e285">abstract pairing</div>, along with
                           
                           <div class="code e286">pair</div>, can serve to represent all kinds of labeled lists, paired lists
                           such as glossaries, definition lists and indexes. Such a generic element does not
                           carry the semantic baggage of any particular kind of list or associated array, all
                           of which are especially liable to tag abuse in the wild.
                        </div>
                        <div class="para e287">
                           <div class="code e288">pair</div> could be validated as 
                           <div class="code e289">((ab | line | span), (ab | line |
                              span))
                           </div> in order to enforce the pairings. (Additionally, RelaxNG or
                           Schematron could validate 
                           <div class="code e290">ap</div> to see that every enclosed
                           
                           <div class="code e291">pair</div> has the same content model.) Of course, any of these constituent
                           elements could be qualified with 
                           <div class="code e292">@class</div> or 
                           <div class="code e293">@type</div> of their
                           own (which might similarly be validated across pairs within an
                           
                           <div class="code e294">ap</div>).
                        </div>
                        <div class="para e295">Both 
                           <div class="code e296">ap</div> and 
                           <div class="code e297">pair</div> will also become 
                           <div class="code e298">div</div> or
                           
                           <div class="code e299">p</div> in HTML and 
                           <div class="code e300">fo:block</div> in FO, when they do not map
                           directly to especially formatted lists (
                           <div class="code e301">ul</div>, 
                           <div class="code e302">ol</div>,
                           
                           <div class="code e303">dl</div> with 
                           <div class="code e304">li</div>, 
                           <div class="code e305">fo:list-block</div> with
                           
                           <div class="code e306">fo:list-item</div>), or even to tables.
                        </div>
                        <div class="para e307">And 
                           <div class="code e308">pair</div> might additionally be allowed to appear anywhere
                           
                           <div class="code e309">ab</div>, 
                           <div class="code e310">line</div>, or any block-level element appears – or
                           even (at any rate when it contains only 
                           <div class="code e311">span</div> elements) in line, as a
                           proxy for structures such as TEI 
                           <div class="code e312">choice</div>.
                        </div>
                     </div>
                  </div>
                  <div class="varlistentry e313">
                     <div class="term e314">
                        <div class="code e315">line</div>
                     </div>
                     <div class="listitem e316">
                        <div class="para e317">A 
                           <div class="code e318">line</div> element is a block that may contain inline elements, but not
                           other block elements. This is much like TEI 
                           <div class="code e319">l</div>, except that
                           
                           <div class="code e320">l</div> is restricted in TEI usage to lines of verse or poetry, and this
                           element should be available for any use, any time a new line is required. (It should
                           not preclude an element for a line break in tag sets that need it.)
                        </div>
                        <div class="para e321">Like 
                           <div class="code e322">ab</div>, 
                           <div class="code e323">line</div> will usually become 
                           <div class="code e324">div</div> or
                           
                           <div class="code e325">p</div> in HTML, although not necessarily with vertical white space; and
                           its indenting may vary. Occasionally, sequences of 
                           <div class="code e326">line</div> elements within
                           a 
                           <div class="code e327">div</div> (and without other siblings) may map to 
                           <div class="code e328">dl/dt</div> or
                           
                           <div class="code e329">ul/li</div>, as a simple (unmarked) list item. In XSL-FO, 
                           <div class="code e330">line</div>
                           will become 
                           <div class="code e331">fo:block</div>.
                        </div>
                        <div class="para e332">For modeling purposes, we could use 
                           <div class="code e333">ab</div> everywhere we might want
                           this element; but 
                           <div class="code e334">line</div> may feel more appropriate than 
                           <div class="code e335">ab</div>
                           for isolable units of text such as headings or titles; and because it cannot contain
                           block structures (such as 
                           <div class="code e336">ab</div>), it also comes with a useful constraint
                           for conversion and formatting.
                        </div>
                     </div>
                  </div>
                  <div class="varlistentry e337">
                     <div class="term e338">
                        <div class="code e339">span</div>
                     </div>
                     <div class="listitem e340">
                        <div class="para e341">Of course, this is the inline object, analogous to HTML 
                           <div class="code e342">span</div>, TEI
                           
                           <div class="code e343">seg</div>, Docbook 
                           <div class="code e344">phrase</div> and NLM/NISO
                           
                           <div class="code e345">named-content</div>. For display, 
                           <div class="code e346">span</div> would generally become
                           
                           <div class="code e347">fo:inline</div> or HTML 
                           <div class="code e348">span</div>, when not a more specific inline
                           element. Similarly, in conversion, given suitable qualification, a 
                           <div class="code e349">span</div>
                           might map to any inline element in the target language. Given sufficient control,
                           a
                           sequence of 
                           <div class="code e350">span</div> elements within a 
                           <div class="code e351">line</div> or 
                           <div class="code e352">ab</div>
                           enclosed in a 
                           <div class="code e353">div</div> may sometimes become table cells in a table. 
                        </div>
                     </div>
                  </div>
                  <div class="varlistentry e354">
                     <div class="term e355">
                        <div class="code e356">link</div>
                     </div>
                     <div class="listitem e357">
                        <div class="para e358">Analogous to general-purpose inline linking elements. We might simply allow the
                           full panoply of XLink attributes on this element to make it a general-purpose
                           element suitable for arbitrary linking.
                        </div>
                        <div class="para e359">As noted above, images and other media objects are really special-purpose links
                           (which may imply transclusion of their targets on rendering), so they can be
                           accommodated by 
                           <div class="code e360">link</div>.
                        </div>
                     </div>
                  </div>
                  <div class="varlistentry e361">
                     <div class="term e362">
                        <div class="code e363">@type</div>
                     </div>
                     <div class="listitem e364">
                        <div class="para e365">Let 
                           <div class="code e366">@type</div> assert (implicitly and when possible explicitly, by means
                           of documentation) a class or type assignment whose value is controlled across a
                           document collection.
                        </div>
                        <div class="para e367">Multiple values of @type can be provided as space-delimited values of this
                           attribute. Explicit mappings to known tag sets, such as 
                           <div class="code e368">docbook:para</div>,
                           
                           <div class="code e369">tei:p</div>, 
                           <div class="code e370">html:p</div> and so forth might be provided by using
                           the namespace-qualified type names of appropriate elements.
                        </div>
                     </div>
                  </div>
                  <div class="varlistentry e371">
                     <div class="term e372">
                        <div class="code e373">@class</div>
                     </div>
                     <div class="listitem e374">
                        <div class="para e375">Let 
                           <div class="code e376">@class</div> identify subtypes of elements within a single document
                           instance, in a more ad hoc way than does 
                           <div class="code e377">@type</div>. The expectation would
                           be that when 
                           <div class="code e378">@type</div> is also present, 
                           <div class="code e379">@class</div> offers a
                           subtype. Like 
                           <div class="code e380">@type</div>, and like 
                           <div class="code e381">@class</div> in HTML (where it
                           provides bindings for CSS selectors), multiple values can be provided with space
                           delimiters.
                        </div>
                        <div class="para e382">Of course, the distinction offered here between 
                           <div class="code e383">@type</div> and
                           
                           <div class="code e384">@class</div> is not absolute nor even enforceable in the general case. It
                           is up to particular systems and implementations of abstract generic elements to
                           enforce the constraints over these attributes they need. Offering both allows a
                           local system to constrain 
                           <div class="code e385">@type</div>, for example, while leaving
                           
                           <div class="code e386">@class</div> free for use.
                        </div>
                     </div>
                  </div>
                  <div class="varlistentry e387">
                     <div class="term e388">
                        <div class="code e389">@which</div>
                     </div>
                     <div class="listitem e390">
                        <div class="para e391">
                           <div class="code e392">@which</div> is intended to serve as a general-purpose pointer, either to
                           another element or to an implicit or explicit taxonomy, local or general. Its
                           lexical form is unconstrained, and it may have as many values as a local application
                           may need.
                        </div>
                        <div class="para e393">For example, in an abstract rendition of information intended to be represented in
                           tabular form, a single value given to two or more places (to be rendered as spanning
                           cells) might show its multiple placement using 
                           <div class="code e394">@which</div>.
                        </div>
                     </div>
                  </div>
                  <div class="varlistentry e395">
                     <div class="term e396">
                        <div class="code e397">@xml:id</div>
                     </div>
                     <div class="listitem e398">
                        <div class="para e399">For generalized purposes of cross-reference, we will potentially need a unique
                           identifier for any element.
                        </div>
                     </div>
                  </div>
                  <div class="varlistentry e400">
                     <div class="term e401">
                        <div class="code e402">@style</div>
                     </div>
                     <div class="listitem e403">
                        <div class="para e404">Finally, I suggest we allow any of the abstract generic elements to include
                           explicit styling information, in the form of a widely recognized syntax such as CSS3.
                           Of course, this clearly breaches the content/format divide, but it does so in a
                           strategic way. By allowing this attribute on the abstract generics, we relieve the
                           design stress on other elements in the markup language to provide their own styling
                           overrides – the fact that a name, say, needs specialized styling by itself
                           suggests it is a special kind of name and might be described with an abstract
                           generic.
                        </div>
                        <div class="para e405">It should be noted that a number of industry-standard schemas for documents
                           allow this kind of thing already, either as an escape hatch on a few elements, or
                           on
                           a wider basis. Indeed, TEI P5 has 
                           <div class="emphasis e406" role="ital">two</div> attributes
                           with the sole purpose of specifying rendition, namely 
                           <div class="code e407">@rend</div> and
                           
                           <div class="code e408">@rendition</div>. (
                           <div class="code e409">@rendition</div> is supposed to carry CSS while
                           
                           <div class="code e410">@rend</div> is more free-form.) And at least one of the NLM/NISO tag sets
                           similarly permits an inline element called 
                           <div class="code e411">styled-content</div>.
                        </div>
                        <div class="para e412">Some purist systems might choose to ignore this attribute, to deprecate its use
                           and validate against it, and/or to recognize patterns of usage and promote the
                           elements that show them into other representations of the information they
                           carry.
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e413">It is important to stress that this element set would be intended to supplement, not
               replace, the basic core elements of a capable document-oriented tag set – although
               it
               is also conceivable that a valid (and useful) document might contain nothing but these
               element types.
            </div>
            <div class="para e414">One limitation of abstract generic elements is if they cannot be provided with arbitrary
               attributes. How severe an encumbrance this would on the general use of abstract generics
               for
               ordinary purposes can only be known by trying it.
            </div>
            <div class="para e415">But at least two possible workarounds can be imagined: (1) where attributes are needed
               to provide subclassing, either or both the 
               <div class="code e416">@class</div> or 
               <div class="code e417">@type</div>
               assignment of the abstract generic can be overloaded. (2) In general, child elements
               or
               element structures can be recruited for use to carry values that might otherwise be
               given in
               attributes.
            </div>
         </div><a name="Anexample:anapproachtodramaANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e418">
            <div class="title e419">An example: an approach to drama</div>
            <div class="para e420">An example in TEI markup:</div>
            <div class="programlisting e421" xml:space="preserve">&lt;stage&gt;Enter EGEUS, HERMIA, LYSANDER, and DEMETRIUS&lt;/stage&gt;
               &lt;sp&gt;
               &lt;speaker&gt;EGEUS&lt;/speaker&gt;
               &lt;l&gt;Happy be Theseus, our renowned duke!&lt;/l&gt;
               &lt;/sp&gt;
               &lt;sp&gt;
               &lt;speaker&gt;THESEUS&lt;/speaker&gt;
               &lt;l&gt;Thanks, good Egeus: what's the news with thee?&lt;/l&gt;
               &lt;/sp&gt;
               &lt;sp&gt;
               &lt;speaker&gt;EGEUS&lt;/speaker&gt;
               &lt;l&gt;Full of vexation come I, with complaint&lt;/l&gt;
               &lt;l&gt;Against my child, my daughter Hermia....&lt;/l&gt;
               &lt;/sp&gt;
            </div>
            <div class="para e422">The same example could be tagged as follows in a schema that supported abstract generic
               elements:
            </div>
            <div class="programlisting e423" xml:space="preserve">&lt;div type="drama"&gt;
               &lt;line type="stage"&gt;Enter EGEUS, HERMIA, LYSANDER, and DEMETRIUS&lt;/line&gt;
               &lt;pair type="sp"&gt;
               &lt;line type="speaker"&gt;EGEUS&lt;/line&gt;
               &lt;ab type="speech"&gt;
               &lt;line&gt;Happy be Theseus, our renowned duke!&lt;/line&gt;
               &lt;/ab&gt;
               &lt;/pair&gt;
               &lt;pair type="sp"&gt;
               &lt;line type="speaker"&gt;THESEUS&lt;/line&gt;
               &lt;ab type="speech"&gt;
               &lt;line&gt;Thanks, good Egeus: what's the news with thee?&lt;/line&gt;
               &lt;/ab&gt;
               &lt;/pair&gt;
               &lt;pair type="sp"&gt;
               &lt;line type="speaker"&gt;EGEUS&lt;/line&gt;
               &lt;ab type="speech"&gt;
               &lt;line&gt;Full of vexation come I, with complaint&lt;/line&gt;
               &lt;line&gt;Against my child, my daughter Hermia....&lt;/line&gt;
               &lt;/ab&gt;
               &lt;/pair&gt;
               &lt;/div&gt;
            </div>
            <div class="para e424">It is important to note here that stylesheets or display engines that don't know what
               to
               do with these attributes could nevertheless do something reasonable with the elements.
               For
               processes that need the more specific semantics, they are available – as they are
               available to be validated using Schematron or by way of a transformation into a more
               tightly
               defined schema.
            </div>
            <div class="note e425">
               <div class="para e426">A more fully worked example, with stylesheets for display, is provided as a
                  demonstration with the Slides and Materials attached to this paper.
               </div>
            </div>
         </div>
      </div><a name="IssuesandideasANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e427">
         <div class="title e428">Issues and ideas</div>
         <div class="para e429">Let's say we proceed to implement a small tag set of this sort and integrate it into
            a
            known schema (or perhaps better, a relatively lightweight subset of one). What issues
            and
            objections might be raised against this design idea? What questions remain as to how
            to
            engineer and deploy such a system, and what do we have to know before we can answer
            them? What
            problems can we expect if it should be widely used, and what opportunities might it
            present?
         </div><a name="Mergingwithahostlanguage:tightorloose?ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e430">
            <div class="title e431">Merging with a host language: tight or loose?</div>
            <div class="para e432">At least two different ways of integrating a set of abstract generics with a host
               language can be considered:
            </div>
            <div class="variablelist e433">
               <div class="varlistentry e434">
                  <div class="term e435">Tight</div>
                  <div class="listitem e436">
                     <div class="para e437">Since most host languages already have families of elements in their architecture
                        corresponding to the different abstract generics – section-level, block-level,
                        and inline – it should in most cases be relatively straightforward to integrate
                        the abstract generics into them.
                     </div>
                     <div class="para e438">In this design, an abstract generic 
                        <div class="code e439">div</div> element, say, could contain
                        the host language's own block-level elements along with the generic 
                        <div class="code e440">div</div>,
                        
                        <div class="code e441">ab</div>, 
                        <div class="code e442">ap</div> and 
                        <div class="code e443">line</div>. The advantage here is that
                        the stronger semantics of elements from the host language will be available to the
                        contents of the abstract generics.
                     </div>
                     <div class="para e444">Of course, a system that does this would need abstract generic elements and
                        attributes consistent with the semantics of other element and attribute types in the
                        host language.
                     </div>
                  </div>
               </div>
               <div class="varlistentry e445">
                  <div class="term e446">Loose</div>
                  <div class="listitem e447">
                     <div class="para e448">It is also tempting to consider deploying abstract generics as a relatively
                        discrete set of tags, whose use would provide a clean 
                        <div class="quote e449">escape hatch</div> from
                        a host language, in a way more or less entirely divorced from it.
                     </div>
                     <div class="para e450">The way to do this would be to restrict the content of the abstract generics to
                        other abstract generics. The abstract 
                        <div class="code e451">span</div>, for example, would contain
                        only text and/or the abstract 
                        <div class="code e452">span</div>, without permitting any inline
                        elements from the host language.
                     </div>
                     <div class="para e453">The advantages of doing this would be that it would simplify deployment, and that
                        subtrees of abstract generics would be readily portable without modification.
                     </div>
                     <div class="para e454">A family of abstract generics designed to work like this could be given its own
                        namespace, allowing it to be integrated into more than one host language.
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e455">It seems reasonable to suppose that both these approaches could be useful for different
               reasons and in different contexts.
            </div>
         </div><a name="ValidationandvalidibilityANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e456">
            <div class="title e457">Validation and validibility</div>
            <div class="para e458">Introducing custom semantics in a secondary layer using attribute values raises the
               problem of how to validate them. Obvious alternatives for validation of microformats
               include
               RelaxNG and Schematron. Additionally, transformation pipelines can be used to formalize
               the
               relation between a microformat defined using abstract generic elements, and more tightly
               defined elements in target markup languages.
            </div>
            <div class="variablelist e459">
               <div class="varlistentry e460">
                  <div class="term e461">RelaxNG</div>
                  <div class="listitem e462">
                     <div class="para e463">As demonstrated in 
                        <div class="xref e464" linkend="clark2003"></div> (section 15:&nbsp;Non-restrictions),
                        RelaxNG can be used to specify microformats by asserting attribute bindings along
                        with
                        element types.
                     </div>
                  </div>
               </div>
               <div class="varlistentry e465">
                  <div class="term e466">Schematron</div>
                  <div class="listitem e467">
                     <div class="para e468">As it is based on XPath, which can freely interrogate and test attribute values,
                        Schematron is well-suited for testing the kinds of complex co-occurrences to be
                        expected between attribute values in the semantic layer, as a supplement to or
                        replacement for RelaxNG.
                     </div>
                  </div>
               </div>
               <div class="varlistentry e469">
                  <div class="term e470">Pipelines</div>
                  <div class="listitem e471">
                     <div class="para e472">Another strategy for validation will be to map microformats into more highly
                        controlled target formats for validation. XProc pipelines provide a capable framework
                        for this: an XSLT transformation can convert an instance containing microformats into
                        one in which they are expressed more formally, and validated by traditional means.
                        While this approach will not, ordinarily, provide much in the way of useful feedback
                        when data in a microformat is invalid (since it will not found to be invalid until
                        after conversion into something different), this could nonetheless be a useful way
                        of
                        validating the design of a microformat intended as a 
                        <div class="quote e473">mirror</div> of a target
                        format whose semantics are expressed in element types.
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e474">Of possibly greater importance, however, than the means of validation, might be the
               shift in emphasis on stages of validation necessitated by the presence of abstract
               generics
               in the model – since the very idea is to relax both the demand and the expectation
               for
               uniformity and consistency of element usage across system boundaries. Validation will
               no
               longer, in other words, be as simple as thumbs-up vs thumbs-down against a common
               schema,
               but will also entail more nuanced specifications and tests.
            </div>
         </div><a name="InterchangeandinteroperabilityANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e475">
            <div class="title e476">Interchange and interoperability</div>
            <div class="para e477">Isn't this an invitation to chaos, as users are encouraged to introduce their own
               idiosyncratic usages of the abstract generic elements?
            </div>
            <div class="para e478">Whether allowing microformats based on abstract generic elements would in fact make
               it
               harder than it presently is to achieve interoperability or even interchange across
               organizational boundaries depends on what we take that baseline to be. To the extent
               that
               stronger typing of schema-validated element types now supports interchange, obviously
               to
               rely on labeling abstract generics to assert the same semantics in the instance would
               be a
               step backwards. However, it should be considered whether experience has not shown
               that
               beyond a very basic level (hardly beyond the level of XML well-formedness), interchange
               cannot be guaranteed by schema validation alone in any case, at least for properly
               
               <div class="emphasis e479" role="ital">descriptive</div> markup languages, not markup applications that are
               essentially serializations of object models bound to applications (such as XSL-FO
               or SVG).
               <div class="popupBox e480">
                  <div class="popupLabel" onmouseover="$('#d1e1093').show('1000');" onmouseout="$('#d1e1093').hide('1000');">[ footnote ]</div>
                  <div id="d1e1093" style="display: none;">
                     <div class="footnote">
                        <div class="para e481">See in particular 
                           <div class="xref e482" linkend="Bauman2011"></div> and 
                           <div class="xref e483" linkend="Kimber2011"></div> on
                           this topic. Also see 
                           <div class="xref e484" linkend="piez2001"></div> for more on the distinction between
                           descriptive tagging and applications of markup to application-centric data
                           modeling.
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e485">There is, in other words, a difference between the mythic ideal of interchange, and
               the
               actual fact of it; and in fact, when it is achieved at all, data interchange at scale
               happens as a deliberate outcome of a negotiated process, in which a shared tag set
               may be a
               useful starting point, but will not by itself be a guarantor of success. It might
               be better
               if we considered transparent or 
               <div class="quote e486">blind</div> interchange to be a functional
               requirement to be considered among others – and considered in its particulars as they
               apply to specific parties to interchange rather than simply asserted as an abstract
               principle that remains unrealized. Doing so would mean that we would be free not only
               to
               consider the actual costs and benefits of achieving interchange, but also to balance
               this
               requirement against others, such as the need for expressiveness and adaptability simply
               so a
               tag set can address local goals that are, after all, sometimes more pressing.
            </div>
            <div class="para e487">In view of this, allowing document creators and editors the means to extend the
               semantics of their markup openly would be better than the status quo, in which they
               do this
               anyway, but hide their practices behind the premises of interchange offered by standard
               semantic tagging. When standard semantic tagging is used in non-standard ways, in
               other
               words, it is not standard any more. This is why we call it 
               <div class="quote e488">tag abuse</div>, because
               such practice not only mislabels the contents with elements designed for other purposes;
               it
               also degrades the semantics of the misused element type even where it is used
               properly.
            </div>
            <div class="para e489">Since abstract generic elements are designed to accommodate the very behaviors that
               constitute abuse when used on properly descriptive elements, they would (at least
               to the
               extent they are used) should relieve the pressure to do so. And to the extent problems
               with
               interchange and interoperability will exist across systems that use the abstract generics
               differently, it is reasonable to wonder whether it does not actually reflect the
               requirements for description itself, which would otherwise have been hidden behind
               
               <div class="quote e490">creative</div> tag use and misuse. That is, to the extent a system uses abstract
               elements instead of abusing other elements, its tag usage will be more open and transparent
               – while the abstract generics provide a base level of interoperability even without
               any implementation of their local semantics.
            </div>
            <div class="para e491">Thus, when parties to interchange find that they don't know how to handle the semantics
               of one another's abstract generics, they will have a basis for identifying, isolating
               and
               analyzing the issues. Already, markup systems engineers who are not deploying their
               own
               schemas or schema customizations are doing this all the time, and successfully, with
               HTML.
               (The success does not come without effort; the point is that it is possible at all.)
               To
               introduce abstract generic elements and encourage the development of microformats
               on that
               basis would not be to license bad behavior so much as it is to adopt and appropriate
               the
               good motivations that might, under too strict a regiment, lead to it.
            </div>
         </div><a name="AddressingproductionworkflowconcernsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e492">
            <div class="title e493">Addressing production workflow concerns</div>
            <div class="para e494">One of the virtues of abstract generic elements with microformatting is that it fits
               well within a production model in which XML encoding happens later, after authors
               and
               designers have made commitments to structures in their content that serve expressive
               and
               rhetorical purposes rather than the goals of any technology as such. In other words,
               if a
               tag set is to be a suitable target format for upconversion of arbitrary content (such
               as is
               produced in word processors or derived by OCR from page images), it needs to be arbitrarily
               flexible, if only to capture structures at the edges of 
               <div class="quote e495">normal</div>. Then too (and
               for the same reason), most authors who have worked in XML have also had to confront
               limits
               in the expressiveness of the tag set in use, and would welcome an opportunity to use
               more
               abstract tagging, with attributes to signal semantics for possible application downstream,
               when the situation warrants it.
            </div>
            <div class="para e496">Yet both these scenarios raise the question of what should happen in a production
               system
               when these elements are encountered: clearly, these capabilities are somewhat at odds
               with
               processing requirements, since to 
               <div class="quote e497">hide</div> semantics in attributes is in no way
               the same as extending an application framework to support them. Yet (as noted above)
               there
               is a great advantage in having a set of elements designated especially for this purpose,
               as
               opposed to the present state of affairs, in which this already happens, but in a way
               much
               less amenable to improvement, because the elements being appropriated are already
               designated
               for other purposes.
            </div>
            <div class="para e498">Again, layered validation, where only the basic structures are validated in the core
               schema, and supplementary validation logic is provided elsewhere (in schemas, Schematron,
               XSLT or custom logic), provides a way to negotiate the challenges here. The abstract
               generic
               elements are already provided with a baseline of functionality by virtue of their
               mappings
               to common display types. Provide for alerts in the system when unknown labels or
               combinations are used, and developers can then address them more specifically, whether
               by
               extending processing, retagging, or pushing the questions they raise back for editorial
               consideration.
            </div>
         </div><a name="MicroformatsasadriverforevolutionarychangeANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e499">
            <div class="title e500">Microformats as a driver for evolutionary change</div>
            <div class="para e501">A set of abstract generic elements can offer a way for users to mark up structures
               of
               arbitrary description and complexity as they are encountered. But if this concept
               works in
               the field, it will be due to the willingness of users and application developers to
               work to
               support it. Is half a loaf really better than none?
            </div>
            <div class="para e502">Experience with HTML shows that local users are able, and eager, to take good advantage
               of such capabilities, given the right level of support by generic tools. Furthermore,
               this
               reservation has its counter-argument built into it: anything that rewards users for
               taking
               such responsibility – confronting practical issues of schema design and document
               modeling and getting hands-on experience with transformations – will be a good
               thing.
            </div>
            <div class="para e503">While good design is accomplished by design, markup technologies do not develop in
               a
               technological or cultural vacuum, and no design can foresee exactly the ways in which
               it can
               be put to use. In this kind of world, we can rely also on evolutionary mechanisms
               –
               selecting and promulgating the most successful from among those attempted – to help
               us
               distinguish the best available solutions to any set of problems. But this requires
               alternatives from which we can select.
            </div>
            <div class="para e504">In a widely deployed tag set, variations in tagging practices are certain to occur;
               and
               in an environment in which many different approaches can be tried, some will persist
               and
               spread. While including a set of abstract generic elements will make any tag set better
               fitted for use across a disparate community, the argument for fitness does not end
               with
               this. Abstract generic elements may also serve as useful laboratories for tagging
               practice;
               and on this basis, common microformats for common kinds of data and common markup
               problems
               may emerge, and even micro-standards, perhaps, maintained much like the core standards
               although across more localized application domains within and across organizations.
            </div>
            <div class="para e505">It should be stressed that the aim here is to serve bottom-up as well as top-down
               design
               for XML applications in use – not because XML schemas don't work, but because they
               do.
               Precisely 
               <div class="emphasis e506" role="ital">because</div>, and insofar as, communities are able to
               take advantage of shared practices and tools, the needs of authors, editors and publishers
               to design their own models will continue to be felt. Giving them the means to do this
               will
               enable and empower them, while maintaining the integrity of the community standards
               they
               share.
            </div>
         </div>
      </div><a name="ReferencesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e507">
         <div class="title e508">References</div>
         <div class="bibliomixed e509">Beer, Stafford. 
            <div class="emphasis e510" role="ital">Platform for change: A message from Stafford
               Beer.
            </div> New York: John Wiley and Sons, 1975.
         </div>
         <div class="bibliomixed e511" xml:id="Bauman2011" xreflabel="Bauman 2011">Bauman, Syd. “Interchange vs.
            Interoperability.” Presented at Balisage: The Markup Conference 2011, Montréal, Canada,
            August
            2 - 5, 2011. In 
            <div class="emphasis e512" role="ital">Proceedings of Balisage: The Markup Conference
               2011
            </div>. Balisage Series on Markup Technologies, vol. 7 (2011). doi:
            <div class="biblioid doi e513">10.4242/BalisageVol7.Bauman01</div>. At
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e514" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://balisage.net/Proceedings/vol7/html/Bauman01/BalisageVol7-Bauman01.html</div>.
         </div>
         <div class="bibliomixed e515" xml:id="birnbaum2007" xreflabel="Birnbaum 2007">Birnbaum, David J. 
            <div class="quote e516">Sometimes
               a table is only a table: And sometimes a row is a column
            </div>.  
            <div class="emphasis e517" role="ital">Proceedings of Extreme Markup Languages 2007</div>. See
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e518" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://conferences.idealliance.org/extreme/html/2007/Birnbaum01/EML2007Birnbaum01.html</div>.
         </div>
         <div class="bibliomixed e519">Carlyle, Thomas. 
            <div class="emphasis e520" role="ital">Sartor Resartus</div>. Second edition.
            Boston: James Munroe and co., 1834.
         </div>
         <div class="bibliomixed e521" xml:id="clark2003" xreflabel="Clark, Cowan and Murata 2003">Clark, James, John
            Cowan and Murata Makoto. 2003. 
            <div class="emphasis e522" role="ital">RELAX NG Compact Syntax
               Tutorial
            </div>
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e523" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://relaxng.org/compact-tutorial-20030326.html</div>
         </div>
         <div class="bibliomixed e524">Docbook. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e525" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.docbook.org/</div>
         </div>
         <div class="bibliomixed e526">Hillesund, Terje.
            <div class="quote e527">Many Outputs — Many Inputs: XML for Publishers and E-book
               Designers
            </div>. Journal of Digital Information,&nbsp;Vol 3, No 1 (2002).
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e528" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://journals.tdl.org/jodi/article/view/76</div>.
         </div>
         <div class="bibliomixed e529">Journal Article Tag Suite (JATS). National Center for Biotechnology Information,
            National Library of Medicine (NCBI/NLM).
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e530" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://jats.nlm.nih.gov/index.html</div>
         </div>
         <div class="bibliomixed e531">Kay, Michael. 
            <div class="emphasis e532" role="ital">XSLT 2.0 and XPath 2.0 Programmer's
               Reference.
            </div> New York: John Wiley and Sons, 2008.
         </div>
         <div class="bibliomixed e533" xml:id="Kimber2011" xreflabel="Kimber 2011">Kimber, Eliot. “DITA Document Types:
            Enabling Blind Interchange Through Modular Vocabularies and Controlled Extension.”
            Presented
            at Balisage: The Markup Conference 2011, Montréal, Canada, August 2-5, 2011. In 
            <div class="emphasis e534" role="ital">Proceedings of Balisage: The Markup Conference 2011</div>. Balisage Series
            on Markup Technologies, vol. 7 (2011). doi:
            <div class="biblioid doi e535">10.4242/BalisageVol7.Kimber01</div>. At
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e536" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://balisage.net/Proceedings/vol7/html/Kimber01/BalisageVol7-Kimber01.html</div>.
         </div>
         <div class="bibliomixed e537">OASIS Darwin Information Typing Architecture (DITA).
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e538" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.oasis-open.org/committees/dita/</div>
         </div>
         <div class="bibliomixed e539" xml:id="piez2001" xreflabel="Piez 2001">Piez, Wendell.  
            <div class="quote e540">Beyond the
               ‘Descriptive vs Procedural’ Distinction
            </div>
            
            <div class="emphasis e541" role="ital">Markup Languages: Theory and Practice</div>, Vol. 3 no. 2 (Spring
            2001). Also at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e542" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.piez.org/wendell/papers/beyonddistinction.pdf</div>. 
         </div>
         <div class="bibliomixed e543" xml:id="piez2009" xreflabel="Piez 2009"> Piez, Wendell. 
            <div class="quote e544">How to Play XML:
               Markup Technologies as Nomic Game.
            </div> Presented at Balisage: The Markup Conference
            2009, Montréal, Canada, August 11-14, 2009. In 
            <div class="emphasis e545" role="ital">Proceedings of Balisage:
               The Markup Conference 2009
            </div>. Balisage Series on Markup Technologies, vol. 3
            (2009). doi:
            <div class="biblioid doi e546">10.4242/BalisageVol3.Piez01</div>. 
         </div>
         <div class="bibliomixed e547" xml:id="saussure1916" xreflabel="Saussure 1916">Saussure, Ferdinand de. 
            <div class="emphasis e548" role="ital">Course in General Linguistics</div>. 1916. Trans. Wade Baskin. The
            Philosophical Library, 1955. Reprint New York: McGraw-Hill, 1966. 
         </div>
         <div class="bibliomixed e549" xml:id="shannon1948" xreflabel="Shannon 1948">Shannon, Claude F. 
            <div class="quote e550">A
               Mathematical Theory of Communication
            </div>. 
            <div class="emphasis e551" role="ital">Bell System Technical
               Journal
            </div>, July and October, 1948. Reprint available on line at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e552" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://cm.bell-labs.com/cm/ms/what/shannonday/paper.html</div>.
         </div>
         <div class="bibliomixed e553" xml:id="shipman1999" xreflabel="Shipman 1999">Shipman, Frank M. and Catherine C.
            Marshall. 
            <div class="quote e554">Formality Considered Harmful: Experiences, Emerging Themes, and
               Directions
            </div>. 
            <div class="emphasis e555" role="ital">Computer Supported Cooperative Work</div>,
            Vol 8 no 4 (October 1999). On line at
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e556" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.csdl.tamu.edu/~shipman/formality-paper/harmful.html</div>.
         </div>
         <div class="bibliomixed e557" xml:id="spencerbrown1969" xreflabel="Spencer-Brown 1969">Spencer-Brown, G.
            
            <div class="emphasis e558" role="ital">Laws of Form</div>. 1969. Reprint Portland, OR: Cognizer,
            1994.
         </div>
         <div class="bibliomixed e559">Text Encoding Initiative (TEI).
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e560" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.tei-c.org/index.xml</div>
         </div>
      </div>
   </div>
</div>