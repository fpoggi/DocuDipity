<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#LeveragingXMLTechnologyforWebApplicationsANCHOR" name="LeveragingXMLTechnologyforWebApplicationsTOC">Leveraging XML Technology for Web Applications</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#CalendarX:MotivationandDescriptionANCHOR" name="CalendarX:MotivationandDescriptionTOC">CalendarX: Motivation and Description</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#MethodologyandTechnologyANCHOR" name="MethodologyandTechnologyTOC">Methodology and Technology</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#DomainDrivenDesignandDomainSpecificLanguagesANCHOR" name="DomainDrivenDesignandDomainSpecificLanguagesTOC">Domain-Driven Design and Domain-Specific Languages</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AbstractStateMachinesANCHOR" name="AbstractStateMachinesTOC">Abstract State Machines</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ImplementationTechnologyANCHOR" name="ImplementationTechnologyTOC">Implementation Technology</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#TheCalendarXDomainModelANCHOR" name="TheCalendarXDomainModelTOC">The CalendarX Domain Model</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ModelingthecalendardataANCHOR" name="ModelingthecalendardataTOC">Modeling the calendar data</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ModelingCalendarXFunctionalityandUserInterfaceANCHOR" name="ModelingCalendarXFunctionalityandUserInterfaceTOC">Modeling CalendarX Functionality and User Interface</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#ViewsANCHOR" name="ViewsTOC">Views</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#InteractionANCHOR" name="InteractionTOC">Interaction</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#InterimsummaryANCHOR" name="InterimsummaryTOC">Interim summary</a></div>
               </div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#FormalizingtheCalendarXdomainmodelasanASMANCHOR" name="FormalizingtheCalendarXdomainmodelasanASMTOC">Formalizing the CalendarX domain model as an ASM</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#InterimSummaryANCHOR" name="InterimSummaryTOC">Interim Summary</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#TheCalendarXImplementationANCHOR" name="TheCalendarXImplementationTOC">The CalendarX Implementation</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConclusionsandfurtherworkANCHOR" name="ConclusionsandfurtherworkTOC">Conclusions and further work</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#SupportingmaterialsANCHOR" name="SupportingmaterialsTOC">Supporting materials</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#LiteratureANCHOR" name="LiteratureTOC">Literature</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">and</div>
         <div class="singletermTERMS">August 7 - 10, 2012</div>
         <div class="singletermTERMS">Anne</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2012</div>
         <div class="singletermTERMS">Brüggemann-Klein</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">CalendarX</div>
         <div class="singletermTERMS">Calendar</div>
         <div class="singletermTERMS">Contact</div>
         <div class="singletermTERMS">currentPage</div>
         <div class="singletermTERMS">calendar</div>
         <div class="singletermTERMS">Calendar.description</div>
         <div class="singletermTERMS">c.description()</div>
         <div class="singletermTERMS">Calendar.description(c)</div>
         <div class="singletermTERMS">c.description()="Anne's private calendar"</div>
         <div class="singletermTERMS">c.superEvents()</div>
         <div class="singletermTERMS">c.superEvents() ∪ {se}</div>
         <div class="singletermTERMS">c.superEvents()=c.superEvents() ∪ {se}</div>
         <div class="singletermTERMS">condition</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">DayView</div>
         <div class="singletermTERMS">dateInfo</div>
         <div class="singletermTERMS">dayView</div>
         <div class="singletermTERMS">date</div>
         <div class="singletermTERMS">Date</div>
         <div class="singletermTERMS">datesForWeek(startDate:Date): Date*</div>
         <div class="singletermTERMS">datesForMonth(monthYear:MonthYear): Date*</div>
         <div class="singletermTERMS">datesForWeek(startDate: Date): Date*</div>
         <div class="singletermTERMS">datesForMonth(month: Month, year: Year): Date*</div>
         <div class="singletermTERMS">description</div>
         <div class="singletermTERMS">Domain-Specific Languages.</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">Event</div>
         <div class="singletermTERMS">EventRule</div>
         <div class="singletermTERMS">endTime</div>
         <div class="singletermTERMS">Edit</div>
         <div class="singletermTERMS">events()</div>
         <div class="singletermTERMS">events(): Event*</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
         <div class="singletermTERMS">filterInfo</div>
         <div class="singletermTERMS">FilterInfo</div>
         <div class="singletermTERMS">firstDay</div>
         <div class="singletermTERMS">filter(filterInfo: FilterInfo): P(Event)</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
         <div class="singletermTERMS">getEventsForDay(date: Date): Event*</div>
         <div class="singletermTERMS">getEventsForWeek(d)</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">if</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
         <div class="singletermTERMS">Jose Tomas</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">Location</div>
         <div class="singletermTERMS">location</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">MonthView</div>
         <div class="singletermTERMS">monthView</div>
         <div class="singletermTERMS">matches(date:Date)</div>
         <div class="singletermTERMS">matches(date: Date): Boolean</div>
         <div class="singletermTERMS">Metamodels for XML Schema</div>
         <div class="singletermTERMS">Marouane</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">nextPage</div>
         <div class="singletermTERMS">nextCalendar</div>
         <div class="singletermTERMS">nextDateInfo</div>
         <div class="singletermTERMS">nextFilterInfo</div>
         <div class="singletermTERMS">nextState==start</div>
         <div class="singletermTERMS">nextState==dayView</div>
         <div class="singletermTERMS">nextState==weekView</div>
         <div class="singletermTERMS">nextState==monthView</div>
         <div class="singletermTERMS">nextState==rangeView</div>
         <div class="singletermTERMS">nextState==quit</div>
         <div class="singletermTERMS">new DayView()</div>
         <div class="singletermTERMS">new WeekView()</div>
         <div class="singletermTERMS">new MonthView()</div>
         <div class="singletermTERMS">new RangeView()</div>
         <div class="singletermTERMS">new View()</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">Pattern</div>
         <div class="singletermTERMS">Page</div>
         <div class="singletermTERMS">P(Event)</div>
         <div class="singletermTERMS">P(SuperEvent)</div>
         <div class="singletermTERMS">PartialDate</div>
         <div class="singletermTERMS">Participatory Design: Principles and Practices.</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
         <div class="singletermTERMS">quit</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">RangeView</div>
         <div class="singletermTERMS">rangeView</div>
         <div class="singletermTERMS">Rich event model</div>
         <div class="singletermTERMS">Rich recurrence pattern model</div>
         <div class="singletermTERMS">REST-Oriented Architectures.</div>
         <div class="singletermTERMS">Robles Hahn</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">SuperEvent</div>
         <div class="singletermTERMS">startTime</div>
         <div class="singletermTERMS">start</div>
         <div class="singletermTERMS">se</div>
         <div class="singletermTERMS">setDate()</div>
         <div class="singletermTERMS">setFirstDate()</div>
         <div class="singletermTERMS">setMonthYear()</div>
         <div class="singletermTERMS">setLastDate()</div>
         <div class="singletermTERMS">setStatusMessage()</div>
         <div class="singletermTERMS">String</div>
         <div class="singletermTERMS">superEvents</div>
         <div class="singletermTERMS">superEvents(c)</div>
         <div class="singletermTERMS">Sayih</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">then</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
         <div class="singletermTERMS">User</div>
         <div class="singletermTERMS">updates</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
         <div class="singletermTERMS">View</div>
         <div class="singletermTERMS">view</div>
         <div class="singletermTERMS">View(c: Calendar, dI: DateInfo, fI: FilterInfo)</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">xCal: The XML format for iCalendar.</div>
         <div class="singletermTERMS">XRX: Simple, Elegant, Disruptive.</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
         <div class="singletermTERMS">zero translation</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="LeveragingXMLTechnologyforWebApplicationsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3">
      <div class="title e1">Leveraging XML Technology for Web Applications</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2012</div>
            <div class="confdates e5">August 7 - 10, 2012</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">As eBooks evolve into interactive applications, our vision at Electronic Publishing
               Group (EPT) is to empower authors to write and deploy not only documents and eBooks
               but
               whole Web applications using widely available tools without system lock-in. We envision
               XML technology as open, accessible, well supported technology to be leveraged for
               Web
               applications: Information is represented and manipulated with XML technology. Data
               and
               programs are deployed on a Web server, stored in an XML database, run by XML processors
               (XSLT, XQuery, XProc) and accessed from XML-aware Web clients (XForms) via the HTTP
               protocol.
            </div>
            <div class="para e8">We document a calendar system, CalendarX, as a case study. We illustrate our use of
               XML technology and the methodology we employed, drawing on ideas from Domain-Driven
               Design and Abstract State Machines.
            </div>
         </div>
         <div class="author e9">
            <div class="personname e10">
               <div class="firstname e11">Anne</div>
               <div class="surname e12">Brüggemann-Klein</div>
            </div>
            <div class="personblurb e13">
               <div class="para e14"></div>
            </div>
            <div class="affiliation e15">
               <div class="orgname e16">Fakultät für Informatik, Technische Universität München</div>
            </div>
         </div>
         <div class="author e17">
            <div class="personname e18">
               <div class="firstname e19">Jose Tomas</div>
               <div class="surname e20">Robles Hahn</div>
            </div>
            <div class="personblurb e21">
               <div class="para e22"></div>
            </div>
            <div class="affiliation e23">
               <div class="orgname e24">Fakultät für Informatik, Technische Universität München</div>
            </div>
         </div>
         <div class="author e25">
            <div class="personname e26">
               <div class="firstname e27">Marouane</div>
               <div class="surname e28">Sayih</div>
            </div>
            <div class="personblurb e29">
               <div class="para e30"></div>
            </div>
            <div class="affiliation e31">
               <div class="orgname e32">Fakultät für Informatik, Technische Universität München</div>
            </div>
         </div>
         <div class="legalnotice e33">
            <div class="para e34">Copyright © 2012 by the authors. Used with permission.</div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e35" xml:id="sec.Introduction">
         <div class="title e36">Introduction</div>
         <div class="para e37">As eBooks evolve into interactive applications, our vision at Electronic Publishing
            Group (EPT) is to empower authors to write and deploy not only documents and eBooks
            but
            whole Web applications using widely available tools without system lock-in. Our work
            brings
            ideas of end-user development&nbsp;[
            <div class="xref e38" linkend="FloydParadigmChange"></div>]&nbsp;[
            <div class="xref e39" linkend="EndUserDevelopmentManifesto"></div> ] to the area of Web applications. 
         </div>
         <div class="para e40">XML technology is our technology of choice. Historically, the nature of the entities
            that are encoded with XML and related standards (XML Namespaces, XLink, XML Schema,
            RDF,
            Docbook, MathML, ePUB, XML syntaxes of HTML including HTML5) has evolved over time.
            Originally, XML encoding was applied to textual documents to support single-source,
            cross-media publishing. Then textual documents expanded their scope, to act as databases
            that can be semantically processed, and data collections were represented as (collections
            of) documents, to be queried or data mined. Finally, we also have snippets of data
            encoded
            with XML technology, to configure applications or to exchange messages between
            systems
         </div>
         <div class="para e41">Together with the nature of the entities to be encoded in XML and related languages,
            further XML technologies evolved that support these entities and their use cases:
            CSS, XSL
            with XSLT and XSL-FO, XQuery, XForms, XProc.
         </div>
         <div class="para e42">We intend to leverage XML technology for Web applications, looking for a methodology
            that lets domain experts be involved into the software development process from start
            to
            finish, even empowers them to do their own software development. We envision XML technology
            as open, accessible, well supported technology to be leveraged for Web applications:
            Information is represented and manipulated with XML technology. Data and programs
            are
            deployed on a Web server, stored in an XML database, run by XML processors (XSLT,
            XQuery,
            XProc) and accessed from XML-aware Web clients (XForms) via the HTTP protocol.
         </div>
         <div class="para e43">The required XML technology, such as XML processors and systems to support the various
            XML languages, is in place and accessible to end users. The XRX architecture provides
            a
            point of reference, how to make use of standard Web servers, Web browsers and the
            HTTP
            protocol as the plattform on which to run components of XML-based Web applications
            without
            system locck-in.
         </div>
         <div class="para e44">It has been argued by Baumann&nbsp;[
            <div class="xref e45" linkend="BaumanBalisage2009"></div>], among others,
            that XML technology is implementation technology. Hence, the missing pieces, as far
            as we
            can see, are methodology, reference architectures, proven practices, case studies.
            That is
            the topic of this paper.
         </div>
         <div class="para e46">By way of methodology, we draw on the principles of Domain-Driven Design&nbsp;[
            <div class="xref e47" linkend="EvansDDD"></div>] and Domain-Specific Languages&nbsp; [
            <div class="xref e48" linkend="FowlerDSLs"></div>]
            to empower domain experts to develop Web applications. For requirement specification
            and
            design, we adapt Abstract State Machines (ASMs)&nbsp;[
            <div class="xref e49" linkend="ASMBook"></div>] that are
            refined into XML code.
         </div>
         <div class="para e50">We illustrate our methodology with a case study, a calendar system that we call
            CalendarX. Robles Hahn&nbsp;[
            <div class="xref e51" linkend="RoblesHahnBTh"></div>] designed and implemented a
            calendar system with XML technology using principles of Domain-Driven Design and employing
            Domain-Specific Languages. In this paper, we propose an extended methodology that
            is based
            on Abstract State Machines (ASMs): We formally describe requirement specification
            and
            design by a so-called ASM ground model. We envision use the ASM concept of refinement
            to
            derive an implementation in terms of XML technology.
         </div>
         <div class="para e52">This paper is organized into six further sections. First, we briefly discuss the
            application CalendarX with which we demonstrate our methodology. Then we introduce
            the main
            building blocks of our methodology, namely Domain-Driven Design, Abstract State Machines
            and XML technology. Finally, we discuss the CalendarX domain model, its formal
            specification as an ASM ground model and the CalendarX implementation. We finish with
            conclusions and discussion of further work.
         </div>
      </div><a name="CalendarX:MotivationandDescriptionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e53" xml:id="sec.CalendarXIntro">
         <div class="title e54">CalendarX: Motivation and Description</div>
         <div class="para e55">We illustrate our approach with a small case study or feasibility study, the calendar
            system CalendarX. We demonstrate how to leverage XML technology for Web applications
            while
            working towards a methodology that lets domain experts be involved into the software
            development process from start to finish, even empowers them to do their own software
            development.
         </div>
         <div class="para e56">One may well question our choice of domain, arguing that anybody is a domain expert
            in
            calendars. That is precisely our reason for choosing this domain: Since this study
            started
            out as students' work in a lab course and a thesis, there were no independent, external
            domain experts. Students and supervisors had to be able to fill in the roles of domain
            experts and software developers. We feel that we can demonstrate the value of Domain-Driven
            Design nevertheless.
         </div>
         <div class="para e57">Furthermore, we have found from personal experience that migrating from one calendar
            system to another is troublesome when access to the calendar data is mitigated by
            software.
            Hence, we have found it worth our while to design and implement a calendar system
            that
            exposes its data in XML format, applying lessons learnt in the field of document
            processing.
         </div>
         <div class="para e58">As to the specific data model, the first author has always found the limitations of
            existing calendar systems irritating. Hence, we have taken the chance to add a few
            special
            requirements for CalendarX&nbsp;[
            <div class="xref e59" linkend="RoblesHahnBTh"></div>]. Foremost, we require
            CalendarX to support a rich domain model, going beyond state-of-the-art calendar systems
            such as Microsoft Outlook or Google Calendar and calendar languages such as
            iCalendar&nbsp;[
            <div class="xref e60" linkend="iCalendar"></div>] and xCal&nbsp;[
            <div class="xref e61" linkend="xCal"></div>].
         </div>
         <div class="para e62">
            <div class="emphasis e63" role="bold">Rich event model</div> CalendarX is capable of expressing a
            relationship between events that do not follow a single repetition pattern. For example,
            an
            event that takes place on a Monday from 10 to 11 am and on a Wednesday from 2 to 4
            pm can
            be represented as a single event, that holds information common to both instances,
            such as
            event description, category and location.
         </div>
         <div class="para e64">
            <div class="emphasis e65" role="bold">Rich recurrence pattern model</div> CalendarX supports the
            usual recurrence patterns, but also combinations of patterns, including exception
            patterns.
            For example, we can specify that an event recurs every first Monday and every third
            Tuesday
            of the month, but not during school holidays.
         </div>
         <div class="para e66">To summarize, we consider CalendarX a good case study and we have taken the chance
            to
            design and implement a calendar system with extended functionality that we personally
            wish
            to use.
         </div>
      </div><a name="MethodologyandTechnologyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e67" xml:id="sec.Methodologies">
         <div class="title e68">Methodology and Technology</div><a name="DomainDrivenDesignandDomainSpecificLanguagesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e69" xml:id="subSec.DDD">
            <div class="title e70">Domain-Driven Design and Domain-Specific Languages</div>
            <div class="para e71">Domain-Driven Design (DDD)&nbsp;[
               <div class="xref e72" linkend="EvansDDD"></div>] is a design philosophy
               originally aimed at dealing with complex software projects. Primary focus is on the
               concepts and the functionality of the domain of the software; that is, the subject
               area
               to which the user applies the program. Concepts and functionality are captured in
               a
               model; that is, a rigorously organized and selective abstraction of the subset of
               domain
               knowledge that is relevant to the software.
            </div>
            <div class="para e73">One of the key points of DDD is ubiquitious language: Domain experts and software
               engineers use a common core subset of the domain language for communication, model
               
               <div class="emphasis e74" role="ital">and</div> implementation, thus intimately connecting these
               two concerns.
            </div>
            <div class="para e75">DDD extends a design methodology that was propagated in the 1980s: Participatory
               Design&nbsp;[
               <div class="xref e76" linkend="FloydParadigmChange"></div>]&nbsp;[
               <div class="xref e77" linkend="PDPrinciplesPractice"></div>]. It does not only involve domain experts in
               requirement elicitation and system design but lets the domain model drive the whole
               software development process, up to the point that the implementation
               “becomes” the model. DDD enables domain experts to become more deeply
               involved into the software development process and eventually to develop their own
               software.
            </div>
            <div class="para e78">Domain-Specific Languages (DSLs) are programming or descriptional languages of
               limited expressiveness that target a specific domain. In the context of XML technology,
               schema-constrained sets of documents form DSLs that work particularly well within
               a DDD
               design philosophy, since their semantics are embodied in the domain model and their
               syntax can be derived from the domain model&nbsp;[
               <div class="xref e79" linkend="EPTatEML2007"></div>].
            </div>
         </div><a name="AbstractStateMachinesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e80" xml:id="subSec.ASMs">
            <div class="title e81">Abstract State Machines</div>
            <div class="para e82">The DDD design philosophy is open with respect to mechanisms with which to express
               the domain model and the connections to system articfacts. We wish for a more formal,
               precise specification of the domain model and the linking between the domain model
               and
               the implementation that is able to let the domain model shine through, in the spirit
               of
               DDD. Our methodology for these issues is inspired by Abstract State Machines
               (ASMs)&nbsp;[
               <div class="xref e83" linkend="ASMBook"></div>]. ASMs are suited because of their notational
               flexibility, formal semantics, low protocol overhead and concept of step-wise refinement
               for linking levels of abstraction from high-level specification to low-level
               implementation.
            </div>
            <div class="para e84">ASMs are best described as abstract software systems (machines) written in pseudo
               code that operate on abstract data (state). ASMs are homogeneously used to formally
               represent artifacts on all levels of software development, from requirements (ground
               model) to implementation. The ASMs of the different levels are linked by so-called
               refinement steps.
            </div>
            <div class="para e85">The notion of abstract data and a pseudo code operational model make ASMs a natural
               tool for domain experts. Their precise semantics and notion of refinement make ASMs
               a
               great tool for formal specification of software systems and their development process
               that works well within the DDD design philosophy.
            </div>
         </div><a name="ImplementationTechnologyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e86" xml:id="subSec.ImplementationTechnology">
            <div class="title e87">Implementation Technology</div>
            <div class="para e88">We employ a basic set of XML technologies to implement CalendarX: XML for
               representing data, XML Schema for constraining data, XQuery for querying and processing
               data, and XForms embedded into XHTML with CSS for the user interface.
            </div>
            <div class="para e89">We build Web applications from these technologies using the XRX architectural style,
               based on XForms on the client, RESTful communication and XQuery on the
               server.&nbsp;[
               <div class="xref e90" linkend="XRXIntro"></div>]&nbsp;[
               <div class="xref e91" linkend="XRXExplained"></div>]. The
               greatest advantage of XRX lies in the use of a single data model (XML) on the server
               and
               on the client, eliminating the translation complexity of other architectures (
               <div class="emphasis e92" role="bold">zero translation</div>). Other benefits of the XRX architecture
               include:
            </div>
            <div class="itemizedlist e93">
               <div class="listitem e94">
                  <div class="para e95">XML technology everywhere: The zero-translation architecture enables the use of
                     XML technologies throughout the application. XML technologies suffice for all
                     programming tasks on the client and on the server.
                  </div>
               </div>
               <div class="listitem e96">
                  <div class="para e97">Declarative language on the client: The effort required to implement the client
                     user interface is greatly reduced thanks to the declarative nature of XForms. The
                     developer does not have to spend time programming complex scripts for user
                     interface widgets and input validation. XForms just needs to be told what
                     functionality is desired and the XForms engine will deal with buttons, text boxes,
                     getting data to and from the server, and so on.
                  </div>
               </div>
               <div class="listitem e98">
                  <div class="para e99">Separation of concers: The XRX architecture encourages separation of concerns
                     in multiple ways. On the client, XForms keeps the user interface code separate
                     from the data model. The REST interface keeps the server separate from the client,
                     as both communicate with each other only through the interface.
                  </div>
               </div>
            </div>
            <div class="para e100">The use of XML in all layers of a Web application makes use of the full potential
               of
               the XML family of technologies.
            </div>
            <div class="para e101">We deploy CalendarX on a software platform that consists of the following
               components:
            </div>
            <div class="itemizedlist e102">
               <div class="listitem e103">
                  <div class="para e104">Orbeon XForms processor: It runs within an Apache Tomcat Server and compiles
                     XForms documents into XHTML and Javascript code that can be handled by any modern
                     browser. We have tested it with Firefox and Chrome.
                  </div>
               </div>
               <div class="listitem e105">
                  <div class="para e106">eXist XML database with XQuery support, running also within Tomcat.</div>
               </div>
               <div class="listitem e107">
                  <div class="para e108">Communication between these components and the browser via a REST
                     protocol.
                  </div>
               </div>
            </div>
            <div class="para e109">All CalendarX code is XML technology (XML, XML Schema, XForms, XHTML, and XQuery)
               that is linked to the domain model with ASM methods. No Web application frameworks,
               other object representations or programming languages are used. The CalendarX code
               truely expresses the domain model.
            </div>
         </div>
      </div><a name="TheCalendarXDomainModelANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e110" xml:id="sec.CalenderXDomainModel">
         <div class="title e111">The CalendarX Domain Model</div><a name="ModelingthecalendardataANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e112" xml:id="subSec.CalendarXConceptualModel">
            <div class="title e113">Modeling the calendar data</div>
            <div class="para e114">We start modeling CalendarX with concepts in the calendar domain that need to be
               represented as data in the system, and their relations.
            </div>
            <div class="para e115">Our first stab at a conceptual model is a UML class diagram that captures calendar
               concepts, as pictured in 
               <div class="xref e116" linkend="fig.CMinUML"></div>.
            </div>
            <div class="figure e117" xml:id="fig.CMinUML">
               <div class="title e118">Modeling calendar concepts</div>
               <div class="mediaobject e119">
                  <div class="imageobject e120">
                     <div class="metaBox e121"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e206').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e206" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e121'
                              </span><span class="metaAttribute">fileref='../../../vol8/graphics/Bruggemann-Klein01/Bruggemann-Klein01-001.png'
                              </span><span class="metaAttribute">format='png'
                              </span><span class="metaAttribute">width='15cm'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e122">CalendarX has a top-level concept, 
               <div class="code e123">CalendarX</div>. A 
               <div class="code e124">CalendarX</div>
               object contains collections of 
               <div class="code e125">Calendar</div>, 
               <div class="code e126">User</div>,
               
               <div class="code e127">Pattern</div>, 
               <div class="code e128">Location</div> and 
               <div class="code e129">Contact</div> objects that
               participate in relationships as indicated in the conceptual model.
            </div>
            <div class="para e130">In order to satisfy the richness requirements, the CalendarX conceptual model
               features a novel kind of concept that is not present in other calendar models:
               
               <div class="code e131">SuperEvent</div>. A 
               <div class="code e132">SuperEvent</div> object defines a potentially
               infinite series of 
               <div class="code e133">Event</div> objects via recurrence patterns. More precisely,
               the series of 
               <div class="code e134">Event</div> objects is generated on demand from
               
               <div class="code e135">EventRule</div> objects, with each 
               <div class="code e136">EventRule</div> object being related
               to a 
               <div class="code e137">Pattern</div> object. The 
               <div class="code e138">Pattern</div> object defines a set of dates
               for 
               <div class="code e139">Event</div> objects, while the associated 
               <div class="code e140">EventRule</div> object
               defines common attribute settings that are shared by the 
               <div class="code e141">Event</div> objects
               generated by the 
               <div class="code e142">EventRule</div> object, such as 
               <div class="code e143">startTime</div>,
               
               <div class="code e144">endTime</div> or 
               <div class="code e145">location</div>. A 
               <div class="code e146">SuperEvent</div> object may
               contain several 
               <div class="code e147">EventRule</div> objects, one for each combination of attribute
               settings that need to be represented.
            </div>
            <div class="para e148">The UML class diagram leaves room for interpretation regarding relationships between
               concepts. Hence, a few words to clarify our intentions: Associations (simple line
               symbols) carry explicit navigational arrows, specifying which objects in a relationship
               should be accessible from other objects. Further types of relationships are composition
               (“owns-a”, closed diamond symbol) and aggregation (“has-a”,
               open-diamond symbol). We require that composition relationships can be navigated in
               both
               directions, aggregation relationships just in one. The star occurrence operator always
               indicates unordered collections in our diagram.
            </div>
            <div class="para e149">In earlier work&nbsp;[
               <div class="xref e150" linkend="EPTatEML2007"></div>][
               <div class="xref e151" linkend="EPTatBalisage2009"></div>] we have discussed how to translate the constraints of
               a UML class diagram into XML Schema so that related objects that instantiate the class
               diagram correspond exactly to instances of the schema, as illustrated in 
               <div class="xref e152" linkend="fig.UML2SchemaDiagram"></div>:
            </div>
            <div class="figure e153" xml:id="fig.UML2SchemaDiagram">
               <div class="title e154">Correspondence between UML class diagram and XML Schema</div>
               <div class="mediaobject e155">
                  <div class="imageobject e156">
                     <div class="metaBox e157"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e301').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e301" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e157'
                              </span><span class="metaAttribute">fileref='../../../vol8/graphics/Bruggemann-Klein01/Bruggemann-Klein01-002.png'
                              </span><span class="metaAttribute">format='png'
                              </span><span class="metaAttribute">width='15cm'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e158">We have extended this method of translation by ensuring referential integrity of
               relationships with XML Schema key constraints. More importantly, following ideas
               presented in earlier work&nbsp;[
               <div class="xref e159" linkend="EPTatBalisage2010"></div>], we are developing
               a meta model for the subset of XML Schema that we need, including a formal ASM
               specification of its validation rules and a DSL for representing the instances as
               XML
               documents&nbsp;[
               <div class="xref e160" linkend="EPTGoldenBraidXMLT"></div>]. The resulting XML Schema for
               CalendarX and an instance document are referenced in the supporting-materials
               section.
            </div>
            <div class="para e161">The XML Schema incorporates the principles of DDD. It is a direct representation of
               the calendar data model, as part of the CalendarX domain model.
            </div>
            <div class="para e162">This finalizes the modeling of calendar data as part of the CalendarX domain
               model.
            </div>
         </div><a name="ModelingCalendarXFunctionalityandUserInterfaceANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e163" xml:id="subSec.CalendarXUI">
            <div class="title e164">Modeling CalendarX Functionality and User Interface</div>
            <div class="para e165">Our starting point for modeling the dynamics of CalendarX is the user interface. We
               model the views and activities that are available from the views. We continue to use
               class diagrams, now including methods, as a first modeling language.
            </div><a name="ViewsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e166">
               <div class="title e167">Views</div>
               <div class="para e168">CalendarX is accessed via a number of pages or screens that offer information and
                  choices of interaction.
               </div>
               <div class="para e169">The four main pages are 
                  <div class="code e170">DayView</div>, 
                  <div class="code e171">WeekView</div>,
                  
                  <div class="code e172">MonthView</div> and 
                  <div class="code e173">RangeView</div>. These four view pages display a
                  calendar's event data for a specific date, for the seven consecutive dates starting
                  from a specific date, for a specific month in a specific year and for an arbitrary
                  range of dates, respectively. Note that we leave open the start date for a week
                  (often Monday or Sunday) at this point; we leave details such as these for further
                  refinement of the domain model. Pages 
                  <div class="code e174">DayView</div>, 
                  <div class="code e175">WeekView</div> and
                  
                  <div class="code e176">MonthView</div> are specific cases of 
                  <div class="code e177">RangeView</div>. Page
                  
                  <div class="code e178">RangeView</div> references the (finitely many) 
                  <div class="code e179">Event</div> objects
                  that are to be displayed by a specific view.
               </div>
               <div class="para e180">Note that we describe the information that is needed to build the page and the
                  information that is displayed on a page in a purely logical form for now. Questions
                  of layout and methods of interaction are left to further stages of refinement.
               </div>
               <div class="para e181">In addition to the view pages, the full version of CalendarX has 
                  <div class="code e182">Edit</div>
                  pages that are capable of displaying calendar data and their relations for editing
                  purposes. We leave modeling of 
                  <div class="code e183">Edit</div> pages to future refinements.
                  Questions of data representation will be addressed below.
               </div>
               <div class="para e184">We abstract page 
                  <div class="code e185">RangeView</div> and indirectly the other view pages to an
                  abstract page 
                  <div class="code e186">View</div> that holds information and offers choices of
                  interaction that are common to all view pages of CalendarX: A 
                  <div class="code e187">View</div>
                  object provides a status message and holds information about the current calendar,
                  date info and further filter info. The date info is a combination
                  
                  <div class="code e188">dateInfo</div> of day, month and year information that may be partial but
                  must be consistent; it is used as potentially partial information to compute specific
                  date info for specific types of view. The filter info 
                  <div class="code e189">filterInfo</div>
                  constrains the events that are to be displayed, for example according to category
                  or
                  venue.
               </div>
               <div class="para e190">Questions of authentification and authorization are left to further refinements of
                  the domain model.
               </div>
               <div class="para e191">Hence, we need to extend our conceptual model with page types, as demonstrated in
                  
                  <div class="xref e192" linkend="fig.CMPages"></div>.
               </div>
               <div class="figure e193" xml:id="fig.CMPages">
                  <div class="title e194">Modeling pages</div>
                  <div class="mediaobject e195">
                     <div class="imageobject e196">
                        <div class="metaBox e197"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e394').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e394" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e197'
                                 </span><span class="metaAttribute">fileref='../../../vol8/graphics/Bruggemann-Klein01/Bruggemann-Klein01-003.png'
                                 </span><span class="metaAttribute">format='png'
                                 </span><span class="metaAttribute">width='15cm'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
            </div><a name="InteractionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e198">
               <div class="title e199">Interaction</div>
               <div class="para e200">The state of the system CalendarX comprises an object 
                  <div class="code e201">currentPage</div> of
                  type 
                  <div class="code e202">View</div>, carrying page-specific information as indicated above. A
                  
                  <div class="code e203">Page</div> object offers user selections: the next page type to be visited
                  and which 
                  <div class="code e204">calendar</div>, 
                  <div class="code e205">dateInfo</div> and 
                  <div class="code e206">filterInfo</div>
                  values to use for the next page. These choices are stored in global attributes that
                  we name 
                  <div class="code e207">nextPage</div>, 
                  <div class="code e208">nextCalendar</div>, 
                  <div class="code e209">nextDateInfo</div>
                  and 
                  <div class="code e210">nextFilterInfo</div>.
               </div>
               <div class="para e211">Hence, we envision CalendarX to move, under user control, between control states
                  that we label 
                  <div class="code e212">dayView</div>, 
                  <div class="code e213">weekView</div>, 
                  <div class="code e214">monthView</div>,
                  
                  <div class="code e215">rangeView</div> and 
                  <div class="code e216">view</div>, according to the page types; we also
                  have states 
                  <div class="code e217">start</div> and 
                  <div class="code e218">quit</div>. The choice of state is stored
                  in 
                  <div class="code e219">nextPage</div>.
               </div>
               <div class="para e220">When CalendarX enters the control state that is indicated by the current value of
                  
                  <div class="code e221">nextPage</div>, information items 
                  <div class="code e222">nextCalendar</div>,
                  
                  <div class="code e223">nextDateInfo</div> and 
                  <div class="code e224">nextFilterInfo</div> are also available.
                  CalendarX uses this information to create a new 
                  <div class="code e225">View</div> object of
                  appropriate type, setting view attributes, computing specific date information from
                  
                  <div class="code e226">nextDateInfo</div>, and computing specific 
                  <div class="code e227">Event</div> objects from
                  date information, 
                  <div class="code e228">nextCalendar</div> and 
                  <div class="code e229">nextFilterInfo</div>. It also
                  computes a status message.
               </div>
               <div class="para e230">The system assigns the newly constructed page to 
                  <div class="code e231">currentPage</div>,
                  displays that page and awaits user input for user selections, which are initialized
                  with their current values.
               </div>
               <div class="para e232">The user enters data and signals completion of selection, and the system responds
                  with a new iteration. Alternatively, the user may signal the intention to exit the
                  system by setting 
                  <div class="code e233">nextPage</div> to 
                  <div class="code e234">quit</div>, prompting CalendarX to
                  quit operation.
               </div>
               <div class="para e235">Creating view pages involves computing the associated events. For example, the
                  method 
                  <div class="code e236">events()</div> for 
                  <div class="code e237">DayView</div> uses the 
                  <div class="code e238">date</div>
                  attribute of type 
                  <div class="code e239">Date</div>, the 
                  <div class="code e240">calendar</div> attribute of type
                  
                  <div class="code e241">Calendar</div> and the 
                  <div class="code e242">filterInfo</div> of type
                  
                  <div class="code e243">FilterInfo</div> of the object that it operates on. It calls a method
                  
                  <div class="code e244">getEventsForDay(date: Date): Event*</div> on 
                  <div class="code e245">Calendar</div> object
                  
                  <div class="code e246">calendar</div>, filters them according to 
                  <div class="code e247">filterInfo</div> and
                  returns the result. The methods 
                  <div class="code e248">events()</div> for 
                  <div class="code e249">WeekView</div>,
                  
                  <div class="code e250">MonthView</div> and 
                  <div class="code e251">RangeView</div> delegate to
                  
                  <div class="code e252">events()</div> for 
                  <div class="code e253">DayView</div>, calling it repeatedly for each
                  
                  <div class="code e254">Date</div> that is returned by general methods
                  
                  <div class="code e255">datesForWeek(startDate:Date): Date*</div> and
                  
                  <div class="code e256">datesForMonth(monthYear:MonthYear): Date*</div>, gathering the filtered
                  return values of these calls into the result sequence of 
                  <div class="code e257">Event</div>
                  objects.
               </div>
               <div class="para e258">Getting the events for the week that starts at 
                  <div class="code e259">firstDay</div> for
                  
                  <div class="code e260">Calendar</div> object 
                  <div class="code e261">c</div> filtered by 
                  <div class="code e262">filterInfo</div> of
                  type 
                  <div class="code e263">FilterInfo</div> entails the following steps:
               </div>
               <div class="itemizedlist e264">
                  <div class="listitem e265">
                     <div class="para e266">Look for all 
                        <div class="code e267">SuperEvent</div> objects 
                        <div class="code e268">se</div> that are part
                        of 
                        <div class="code e269">c</div>.
                     </div>
                  </div>
                  <div class="listitem e270">
                     <div class="para e271">Compute all days 
                        <div class="code e272">d</div> in the week that starts at
                        
                        <div class="code e273">firstDay</div>.
                     </div>
                  </div>
                  <div class="listitem e274">
                     <div class="para e275">For each of these 
                        <div class="code e276">se</div> objects apply
                        
                        <div class="code e277">getEventsForWeek(d)</div>.
                     </div>
                  </div>
                  <div class="listitem e278">
                     <div class="para e279">Filter the union of all the resulting sets of events according to
                        
                        <div class="code e280">filterInfo</div>.
                     </div>
                  </div>
                  <div class="listitem e281">
                     <div class="para e282">Return the result.</div>
                  </div>
               </div>
               <div class="para e283">If we complete this specification, we notice that we need a method
                  
                  <div class="code e284">matches(date:Date)</div> for 
                  <div class="code e285">Pattern</div> that tests if a
                  
                  <div class="code e286">Pattern</div> object covers 
                  <div class="code e287">date</div>.
               </div>
               <div class="para e288">We list below the methods that we have mentioned above, grouped by types:</div>
               <div class="itemizedlist e289">
                  <div class="listitem e290">
                     <div class="para e291">
                        <div class="code e292">DayView</div>
                     </div>
                     <div class="itemizedlist e293">
                        <div class="listitem e294">
                           <div class="para e295">Constructor 
                              <div class="code e296">DayView(c: Calendar, dI: DateInfo, fI:
                                 FilterInfo)
                              </div>
                           </div>
                        </div>
                        <div class="listitem e297">
                           <div class="para e298">
                              <div class="code e299">setDate()</div>
                           </div>
                        </div>
                        <div class="listitem e300">
                           <div class="para e301">
                              <div class="code e302">events(): Event*</div>
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="listitem e303">
                     <div class="para e304">
                        <div class="code e305">WeekView</div>
                     </div>
                     <div class="itemizedlist e306">
                        <div class="listitem e307">
                           <div class="para e308">Constructor 
                              <div class="code e309">WeekView(c: Calendar, dI: DateInfo, fI:
                                 FilterInfo)
                              </div>
                           </div>
                        </div>
                        <div class="listitem e310">
                           <div class="para e311">
                              <div class="code e312">setFirstDate()</div>
                           </div>
                        </div>
                        <div class="listitem e313">
                           <div class="para e314">
                              <div class="code e315">events(): Event*</div>
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="listitem e316">
                     <div class="para e317">
                        <div class="code e318">MonthView</div>
                     </div>
                     <div class="itemizedlist e319">
                        <div class="listitem e320">
                           <div class="para e321">Constructor 
                              <div class="code e322">MonthView(c: Calendar, dI: DateInfo, fI:
                                 FilterInfo)
                              </div>
                           </div>
                        </div>
                        <div class="listitem e323">
                           <div class="para e324">
                              <div class="code e325">setMonthYear()</div>
                           </div>
                        </div>
                        <div class="listitem e326">
                           <div class="para e327">
                              <div class="code e328">events(): Event*</div>
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="listitem e329">
                     <div class="para e330">
                        <div class="code e331">RangeView</div>
                     </div>
                     <div class="itemizedlist e332">
                        <div class="listitem e333">
                           <div class="para e334">Constructor 
                              <div class="code e335">RangeView(c: Calendar, dI: DateInfo, fI:
                                 FilterInfo)
                              </div>
                           </div>
                        </div>
                        <div class="listitem e336">
                           <div class="para e337">
                              <div class="code e338">setFirstDate()</div>
                           </div>
                        </div>
                        <div class="listitem e339">
                           <div class="para e340">
                              <div class="code e341">setLastDate()</div>
                           </div>
                        </div>
                        <div class="listitem e342">
                           <div class="para e343">
                              <div class="code e344">events(): Event*</div>
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="listitem e345">
                     <div class="para e346">
                        <div class="code e347">View</div>
                     </div>
                     <div class="itemizedlist e348">
                        <div class="listitem e349">
                           <div class="para e350">Constructor 
                              <div class="code e351">View(c: Calendar, dI: DateInfo, fI:
                                 FilterInfo)
                              </div>
                           </div>
                        </div>
                        <div class="listitem e352">
                           <div class="para e353">
                              <div class="code e354">setStatusMessage()</div>
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="listitem e355">
                     <div class="para e356">
                        <div class="code e357">Calendar</div>, 
                        <div class="code e358">SuperEvent</div>,
                        
                        <div class="code e359">EventRule</div>
                     </div>
                     <div class="itemizedlist e360">
                        <div class="listitem e361">
                           <div class="para e362">
                              <div class="code e363">getEventsForDay(date: Date): Event*</div>
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="listitem e364">
                     <div class="para e365">
                        <div class="code e366">Pattern</div>
                     </div>
                     <div class="itemizedlist e367">
                        <div class="listitem e368">
                           <div class="para e369">
                              <div class="code e370">matches(date: Date): Boolean</div>
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="listitem e371">
                     <div class="para e372">
                        <div class="code e373">Event</div>
                     </div>
                     <div class="itemizedlist e374">
                        <div class="listitem e375">
                           <div class="para e376">
                              <div class="code e377">filter(filterInfo: FilterInfo): P(Event)</div>, where the
                              returned set of 
                              <div class="code e378">Event</div> objects 
                              <div class="code e379">P(Event)</div> has at
                              most one element
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="listitem e380">
                     <div class="para e381">Global</div>
                     <div class="itemizedlist e382">
                        <div class="listitem e383">
                           <div class="para e384">
                              <div class="code e385">datesForWeek(startDate: Date): Date*</div>
                           </div>
                        </div>
                        <div class="listitem e386">
                           <div class="para e387">
                              <div class="code e388">datesForMonth(month: Month, year: Year): Date*</div>
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
            </div><a name="InterimsummaryANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e389">
               <div class="title e390">Interim summary</div>
               <div class="para e391">What have we achieved so far? We have created a domain model for CalendarX that
                  captures data and functionality, including abstract user interface, navigation and
                  data access. We are now going to formalize the domain model with the goal of deriving
                  an implementation for CalendarX based on XML technology.
               </div>
            </div>
         </div>
      </div><a name="FormalizingtheCalendarXdomainmodelasanASMANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e392" xml:id="sec.ASMGroundModel">
         <div class="title e393">Formalizing the CalendarX domain model as an ASM</div>
         <div class="para e394">We are looking for a methodology that embodies the DDD design philosophy in the target
            area of Web applications that are solely built with XML technology. We wish to formalize
            the domain model while keeping to the ubiquitious language that the domain model
            establishes.
         </div>
         <div class="para e395">We have recently become acquainted with the method of Abstract State Machines
            (ASMs)&nbsp;[
            <div class="xref e396" linkend="ASMBook"></div>] that seems to be highly suitable, as explained
            above. So we have decided to explore this method for this project.
         </div>
         <div class="para e397">ASMs are virtual machines that capture state in the form of algebras. This means that
            an
            ASM defines a vocabulary of set and function symbols and that it specifies functions
            and
            constraints with the help of algebraic expressions over this vocabulary.
         </div>
         <div class="para e398">It is straightforward to translate our conceptual and page models into an algebraic
            vocabulary with type and identity constraints. For example, we will have set symbols
            
            <div class="code e399">Calendar</div>, 
            <div class="code e400">SuperEvent</div> and 
            <div class="code e401">String</div> that denote
            pairwise disjoint sets. There is a function named 
            <div class="code e402">Calendar.description</div> with
            domain 
            <div class="code e403">Calendar</div> and range 
            <div class="code e404">String</div>. We use the standard
            object-oriented notation 
            <div class="code e405">c.description()</div> for
            
            <div class="code e406">Calendar.description(c)</div>. Setting the value for 
            <div class="code e407">description</div> at
            argument 
            <div class="code e408">c</div> in 
            <div class="code e409">Calendar</div> as “Anne's private calendar”
            is achieved by setting 
            <div class="code e410">c.description()="Anne's private calendar"</div>, using
            standard object-oriented notation. This is called an update expression in ASM terminology.
            Updates are used to redefine functions at runtime and so change system state. Of course,
            we
            can reuse the function name 
            <div class="code e411">description</div> for other domains, including
            
            <div class="code e412">SuperEvent</div>, since the sets that represent concepts are considered to be
            pairwise disjoint as long as they are not related by inheritance. In case of inheritance
            we
            employ the object-oriented semantics of overwriting methods and polymorphy.
         </div>
         <div class="para e413">The composition relationship between 
            <div class="code e414">Calendar</div> and 
            <div class="code e415">SuperEvent</div>
            is modeled by a function 
            <div class="code e416">superEvents</div> with domain 
            <div class="code e417">Calendar</div> and
            range 
            <div class="code e418">P(SuperEvent)</div>, the power set of 
            <div class="code e419">SuperEvent</div>, that is
            reversible in the following sense: For any 
            <div class="code e420">SuperEvent</div> object 
            <div class="code e421">se</div>
            there is exactly one 
            <div class="code e422">Calendar</div> object 
            <div class="code e423">c</div> so that 
            <div class="code e424">se</div> is
            in 
            <div class="code e425">superEvents(c)</div>. With this constraint, 
            <div class="code e426">superEvents</div> models
            precisely the composition relation that can be navigated in both directions.
         </div>
         <div class="para e427">The full translation of the conceptual and page models into an ASM vocabulary with
            constraints is referenced in the supporting-materials section. This section also specifies
            the constructor functions, methods and auxilliary functions that are listed above.
            These
            functions are static; that is, they are independent of system state. The ASM methodology
            considers static functions as part of the initial state and leaves open how and at
            what
            level of abstraction they are specified.
         </div>
         <div class="para e428">We note already, even before we have specified any changes of state, that the ASM
            notation is more precise than the UML class diagram notation, which required us to
            define
            constraints outside of the diagram that can be covered explicitly by the ASM notation.
            We
            will reap the full benefits of ASMs when specifying CalendarX functionality and user
            interface.
         </div>
         <div class="para e429">An ASM program is designated as an initial state. It is a collection of statements
            of
            the form
         </div>
         <div class="popupBox e430">
            <div class="popupLabel" onmouseover="$('#d1e900').show('1000');" onmouseout="$('#d1e900').hide('1000');">[ blockquote ]</div>
            <div id="d1e900" style="display: none;">
               <div class="blockquote">
                  <div class="para e431">
                     <div class="emphasis e432" role="bold">if</div>
                     
                     <div class="emphasis e433" role="ital">condition</div>
                     
                     <div class="emphasis e434" role="bold">then</div>
                     
                     <div class="emphasis e435" role="ital">updates</div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e436">The semantics of such a statement are straightforward: If the Boolean condition
            
            <div class="emphasis e437" role="ital">condition</div> is met, then state updates 
            <div class="emphasis e438" role="ital">updates</div> are performed.
         </div>
         <div class="para e439">Updates are changes in the ASMs algebra; that is, additions or deletions of elements
            to
            or from a set or changes in the definition of a function. For example, if we wish
            to add a
            new 
            <div class="code e440">SuperEvent</div> object 
            <div class="code e441">se</div> to a Calendar object 
            <div class="code e442">c</div>, we
            would redefine 
            <div class="code e443">c.superEvents()</div> as 
            <div class="code e444">c.superEvents() ∪ {se}</div>,
            writing this as an update statement
         </div>
         <div class="popupBox e445">
            <div class="popupLabel" onmouseover="$('#d1e939').show('1000');" onmouseout="$('#d1e939').hide('1000');">[ blockquote ]</div>
            <div id="d1e939" style="display: none;">
               <div class="blockquote">
                  <div class="para e446">
                     <div class="code e447">c.superEvents()=c.superEvents() ∪ {se}</div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e448">In ASMs, all updates of all statements whose condition is true are performed
            simultaneously (or not at all if the update instructions are inconsistens).
         </div>
         <div class="para e449">Before the next round of computations is performed, the ASM accepts user input: that
            is,
            specifically designated input variables are set from the outside.
         </div>
         <div class="para e450">Hence, the modus operandi of an ASM is in repeating phases. The machine starts in
            the
            initial state, with input variables set.
         </div>
         <div class="para e451">During each phase, it first executes the updates specified that apply in the current
            state and moves into a new state. Then, second, it accepts changes of the input variables
            from outside.
         </div>
         <div class="para e452">In the CalendarX ASM, we have input states 
            <div class="code e453">nextPage</div> with potential values
            
            <div class="code e454">start</div>, 
            <div class="code e455">dayView</div>, 
            <div class="code e456">weekView</div>, 
            <div class="code e457">monthView</div>,
            
            <div class="code e458">monthView</div>, 
            <div class="code e459">view</div> and 
            <div class="code e460">quit</div> as well as
            
            <div class="code e461">nextCalendar</div> of type 
            <div class="code e462">Calendar</div>, which must be a calendar in the
            CalendarX database, 
            <div class="code e463">nextDateInfo</div> of type 
            <div class="code e464">PartialDate</div>, and
            
            <div class="code e465">nextFilterInfo</div> of type 
            <div class="code e466">FilterInfo</div>.
         </div>
         <div class="para e467">Each phase of the ASM CalendarX program corresponds to one navigation step from one
            page
            to another. The input variable 
            <div class="code e468">nextPage</div> determines which type of page is to be
            built. The input variables 
            <div class="code e469">nextDateInfo</div>, 
            <div class="code e470">nextCalendar</div> and
            
            <div class="code e471">nextFilterInfo</div> determine from what information it is built.
         </div>
         <div class="para e472">This is the CalendarX ASM:</div>
         <div class="popupBox e473">
            <div class="popupLabel" onmouseover="$('#d1e1013').show('1000');" onmouseout="$('#d1e1013').hide('1000');">[ blockquote ]</div>
            <div id="d1e1013" style="display: none;">
               <div class="blockquote">
                  <div class="para e474">
                     <div class="emphasis e475" role="bold">if</div>
                     
                     <div class="code e476">nextState==start</div>
                     
                     <div class="emphasis e477" role="bold">then</div>
                  </div>
                  <div class="popupBox e478">
                     <div class="popupLabel" onmouseover="$('#d1e1023').show('1000');" onmouseout="$('#d1e1023').hide('1000');">[ blockquote ]</div>
                     <div id="d1e1023" style="display: none;">
                        <div class="blockquote">
                           <div class="para e479">
                              
                              <div class="code e480">currentPage=new View(nextCalendar,nextDateInfo, nextFilterInfo)</div>
                              
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="para e481">
                     <div class="emphasis e482" role="bold">if</div>
                     
                     <div class="code e483">nextState==dayView</div>
                     
                     <div class="emphasis e484" role="bold">then</div>
                  </div>
                  <div class="popupBox e485">
                     <div class="popupLabel" onmouseover="$('#d1e1038').show('1000');" onmouseout="$('#d1e1038').hide('1000');">[ blockquote ]</div>
                     <div id="d1e1038" style="display: none;">
                        <div class="blockquote">
                           <div class="para e486">
                              
                              <div class="code e487">currentPage=new DayView(nextCalendar,nextDateInfo, nextFilterInfo)</div>
                              
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="para e488">
                     <div class="emphasis e489" role="bold">if</div>
                     
                     <div class="code e490">nextState==weekView</div>
                     
                     <div class="emphasis e491" role="bold">then</div>
                  </div>
                  <div class="popupBox e492">
                     <div class="popupLabel" onmouseover="$('#d1e1053').show('1000');" onmouseout="$('#d1e1053').hide('1000');">[ blockquote ]</div>
                     <div id="d1e1053" style="display: none;">
                        <div class="blockquote">
                           <div class="para e493">
                              
                              <div class="code e494">currentPage=new WeekView(nextCalendar,nextDateInfo, nextFilterInfo)</div>
                              
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="para e495">
                     <div class="emphasis e496" role="bold">if</div>
                     
                     <div class="code e497">nextState==monthView</div>
                     
                     <div class="emphasis e498" role="bold">then</div>
                  </div>
                  <div class="popupBox e499">
                     <div class="popupLabel" onmouseover="$('#d1e1068').show('1000');" onmouseout="$('#d1e1068').hide('1000');">[ blockquote ]</div>
                     <div id="d1e1068" style="display: none;">
                        <div class="blockquote">
                           <div class="para e500">
                              
                              <div class="code e501">currentPage=new MonthView(nextCalendar,nextDateInfo, nextFilterInfo)</div>
                              
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="para e502">
                     <div class="emphasis e503" role="bold">if</div>
                     
                     <div class="code e504">nextState==rangeView</div>
                     
                     <div class="emphasis e505" role="bold">then</div>
                  </div>
                  <div class="popupBox e506">
                     <div class="popupLabel" onmouseover="$('#d1e1083').show('1000');" onmouseout="$('#d1e1083').hide('1000');">[ blockquote ]</div>
                     <div id="d1e1083" style="display: none;">
                        <div class="blockquote">
                           <div class="para e507">
                              
                              <div class="code e508">currentPage=new RangeView(nextCalendar,nextDateInfo, nextFilterInfo)</div>
                              
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="para e509">
                     <div class="emphasis e510" role="bold">if</div>
                     
                     <div class="code e511">nextState==quit</div>
                     
                     <div class="emphasis e512" role="bold">then</div>
                  </div>
                  <div class="popupBox e513">
                     <div class="popupLabel" onmouseover="$('#d1e1099').show('1000');" onmouseout="$('#d1e1099').hide('1000');">[ blockquote ]</div>
                     <div id="d1e1099" style="display: none;">
                        <div class="blockquote">
                           <div class="para e514"> stop operation </div>
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e515">The CalendarX ASM makes use of static constructor functions 
            <div class="code e516">new DayView()</div>,
            
            <div class="code e517">new WeekView()</div>, 
            <div class="code e518">new MonthView()</div>, 
            <div class="code e519">new RangeView()</div>
            and 
            <div class="code e520">new View()</div> that we have already specified.
         </div><a name="InterimSummaryANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e521">
            <div class="title e522">Interim Summary</div>
            <div class="para e523">What have we achieved so far? We have created a domain model for CalendarX that
               captures data and functionality. And we have fully formalized the CalendarX domain
               model
               as an Abstract State Machine (ASM) while staying within the realm of the domain
               language. The result is what in the ASM world is called a ground model, an ASM that
               formally captures the requirements of a system.
            </div>
         </div>
      </div><a name="TheCalendarXImplementationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e524" xml:id="sec.implementation">
         <div class="title e525">The CalendarX Implementation</div>
         <div class="para e526">Robles Hahn as part of his Bachelor Thesis&nbsp;[
            <div class="xref e527" linkend="RoblesHahnBTh"></div>] and a
            number of groups of students as work in the lab courses “XML Technology” in the
            academic year 2011/2012 have implemented CalendarX as a Web application, on the basis
            of a
            domain model, using only XML technology as indicated above.
         </div>
         <div class="para e528">Currently, we are exploring the ASM concept of refinement that derives the
            implementation in a more systematic way from the specification, in accord with the
            DDD
            philosophy. This involves mapping objects to XML represenations, methods to XQuery
            functions, and function calls and return values to HTTP request and response
            entities.
         </div>
         <div class="para e529">We are going to relate our experiences with this approach in an expanded version of
            this
            paper.
         </div>
      </div><a name="ConclusionsandfurtherworkANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e530" xml:id="sec.Conclusion">
         <div class="title e531">Conclusions and further work</div>
         <div class="itemizedlist e532">
            <div class="listitem e533">
               <div class="para e534">The principle of Domain-Driven Design has been fully validated for this
                  project.
               </div>
            </div>
            <div class="listitem e535">
               <div class="para e536">Formal specification and systematic derivation of implementation make building
                  CalendarX straightforward.
               </div>
            </div>
            <div class="listitem e537">
               <div class="para e538">The implementations of CalendarX are largely platform independent, as far as XML
                  technology is used. For example, Orbeon Forms and XSLTForms can be used
                  interchangably as XForms processors. However, there are some areas where platform
                  dependencies still exist, particularly in access to HTTP data via eXist extension
                  modules to XQuery. We plan to address these issues with another standardized XML
                  technology, namely XProc. With XProc, we can then also derive in a declarative way
                  the orchestration of server-side functions from the ASM model, replacing some clumsy
                  XQuery functions or Orbeon flowscripts.
               </div>
            </div>
            <div class="listitem e539">
               <div class="para e540">ASMs have been useful for clarification but so far not mission-critical. We need
                  to explore them further for step-wise refinement from ground model to implementation.
                  
               </div>
            </div>
            <div class="listitem e541">
               <div class="para e542">There is some functionality we want to add: First of all, editing of calendar
                  data, which we expect to be mostly an XForms challenge. Next, printing of calendar
                  data; student solutions use SVG, generated with XSLT; our idea is to make this
                  technology accessible to domain experts via a higher-level graphics DSL. Finally,
                  access control, concurrent access, safety and liveness requirements; the quickest
                  route seems to recur to Web application frameworks as suggested by Davis&nbsp;[
                  <div class="xref e543" linkend="DavisOnREST"></div>].
               </div>
            </div>
            <div class="listitem e544">
               <div class="para e545">Our methodology might be best suited to smaller projects that are amenable to
                  end-user computing. This is OK. After all, large publishing projects such as
                  producing an electronic Oxford English Dictionary have not been exercises in personal
                  publishing, either. Boundaries might be pushed a bit further with other case studies,
                  though.
               </div>
            </div>
         </div>
      </div><a name="SupportingmaterialsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="appendix e546">
         <div class="title e547">Supporting materials</div>
         <div class="para e548">Please visit http://www11.in.tum.de/lehrstuhl/personen/sayih/2012BalisageVol8-Bruggemann-Klein01-documents
            for supporting materials,
            particularly
            <div class="itemizedlist e549">
               <div class="listitem e550">
                  <div class="para e551">XML Schema document for CalendarX plus an instance.</div>
               </div>
               <div class="listitem e552">
                  <div class="para e553">ASM model for CalendarX.</div>
               </div>
            </div>
         </div>
      </div><a name="LiteratureANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e554">
         <div class="title e555">Literature</div>
         <div class="bibliomixed e556" xml:id="BaumanBalisage2009" xreflabel="B09">B.T. Bauman: 
            <div class="emphasis e557">Prying Apart
               Semantics and Implementation: Generating XML Schemata directly from ontologically
               sound
               conceptual models.
            </div> Balisage 2009. Available from
            http://www.balisage.net/Proceedings/. doi:
            <div class="biblioid doi e558">10.4242/BalisageVol3.Bauman01</div>.
         </div>
         <div class="bibliomixed e559" xml:id="BrüggeEtAlsOOSWE" xreflabel="BD04">B. Brügge and A.H. Dutoit. 
            <div class="emphasis e560" role="ital">Object-Oriented Software Engineering: Using UML, Patterns and
               Java.
            </div> Second Edition, Prentice Hall 2004. 
         </div>
         <div class="bibliomixed e561" xml:id="EPTatBalisage2010" xreflabel="BDPT10"> Brüggemann-Klein A, Demirel T,
            Pagano D und Tai A: 
            <div class="emphasis e562" role="ital">Reverse Modeling for Domain-Driven Engineering of
               Publishing Technology.
            </div> Balisage Series on Markup Technologies 2010. Available
            from http://www.balisage.net/Proceedings/. doi:
            <div class="biblioid doi e563">10.4242/BalisageVol5.Bruggemann-Klein01</div>.
         </div>
         <div class="bibliomixed e564" xml:id="ASMBook" xreflabel="BS03">E. Börger and R. Stärk: 
            <div class="emphasis e565">Abstract
               State Machines. A Method for High-Level System Design and Analysis
            </div>.
            Springer-Verlag 2003. 
         </div>
         <div class="bibliomixed e566" xml:id="EPTatBalisage2008" xreflabel="BS08">A. Brüggemann-Klein, L. Singer:
            
            <div class="emphasis e567" role="ital">Hypertext Links and Relationships in XML Databases.</div>
            Presented at Balisage: The Markup Conference 2008, Montréal, Canada, 2008,
            http://www.balisage.net/. Available from
            http://hyquery.ls-softworks.de/HyperDataSystemsBalisage2008.pdf. doi:
            <div class="biblioid doi e568">10.4242/BalisageVol1.Bruggemann-Klein01</div>.
         </div>
         <div class="bibliomixed e569" xml:id="EPTGoldenBraidXMLT" xreflabel="BS12">A. Brüggemann-Klein and M. Sayih:
            
            <div class="emphasis e570">Metamodels for XML Schema</div>. Work in Progress 2012.
         </div>
         <div class="bibliomixed e571" xml:id="EPTatEML2007" xreflabel="BST07">A. Brüggemann-Klein, Th. Schöpf, K. Toni:
            
            <div class="emphasis e572" role="ital">Principles, Patterns and Procedures of XML Schema Design —
               Reporting from the XBlog Project.
            </div> Extreme Markup Languages 2007. Available
            from http://conferences.idealliance.org/extreme/.
         </div>
         <div class="bibliomixed e573" xml:id="CagleOnREST" xreflabel="C08">K. Cagle.
            
            <div class="emphasis e574">REST-Oriented Architectures.</div>. Balisage 2008. Available from
            http://www.balisage.net/Proceedings/. doi:
            <div class="biblioid doi e575">10.4242/BalisageVol1.Cagle01</div>.
         </div>
         <div class="bibliomixed e576" xml:id="xCal" xreflabel="DDL09">C. Daboo, M. Douglass, and St. Lees.
            
            <div class="emphasis e577">xCal: The XML format for iCalendar.</div> May 2011. Available from
            http://tools.ietf.org/pdf/draft-daboo-et-al-icalendar-in-xml-09.pdf.
         </div>
         <div class="bibliomixed e578" xml:id="DavisOnREST" xreflabel="D11">C. Davis.
            
            <div class="emphasis e579">Programming Application Logic for RESTful Services Using XML
               Technologies.
            </div>. Balisage 2011. Available from
            http://www.balisage.net/Proceedings/. doi:
            <div class="biblioid doi e580">10.4242/BalisageVol7.Davis01</div>.
         </div>
         <div class="bibliomixed e581" xml:id="iCalendar" xreflabel="D09">B. Desruisseaux, ed. 
            <div class="emphasis e582">Internet
               Calendaring and Scheduling Core Object Specification (iCalendar)
            </div>. September
            2009. Available from http://tools.ietf.org/pdf/rfc5545.pdf. 
         </div>
         <div class="bibliomixed e583" xml:id="EvansDDD" xreflabel="E04">E. Evans: 
            <div class="emphasis e584" role="ital">Domain-Driven
               Design. Tackling Complexity in the Heart of Software
            </div>. Addison-Wesley
            2004.
         </div>
         <div class="bibliomixed e585" xml:id="EndUserDevelopmentManifesto" xreflabel="FGSM04">G. Fischer, E. Giaccardi,
            Y. Ye, A.G. Sutcliffe, N. Mehandijev: 
            <div class="emphasis e586" role="ital">Meta-Design: A Manifesto for
               End-User Development.
            </div> CACM Vol 47 No 9, 2004. 
         </div>
         <div class="bibliomixed e587" xml:id="FloydParadigmChange" xreflabel="F88">Ch. Floyd: 
            <div class="emphasis e588" role="ital">Outline of a Paradigm Change in Software Engineering.</div> ACM SIGSOFT Vol 13 NO
            2, 1988.
         </div>
         <div class="bibliomixed e589" xml:id="FowlerDSLs" xreflabel="F11">M. Fowler: 
            <div class="emphasis e590" role="ital">Domain-Specific Languages.</div> Addison-Wesley 2011.
         </div>
         <div class="bibliomixed e591" xml:id="XRXIntro" xreflabel="McC07">D. McCreary: 
            <div class="emphasis e592" role="ital">Introducing the XRX Architecture: XForms/REST/XQuery.</div> Available from
            http://datadictionary.blogspot.de/2007/12/introducing-xrx-architecture.html
            2007.
         </div>
         <div class="bibliomixed e593" xml:id="XRXExplained" xreflabel="Mc08">D. McCreary: 
            <div class="emphasis e594" role="ital">XRX:
               Simple, Elegant, Disruptive.
            </div> Available from
            http://www.oreillynet.com/xml/blog/2008/05/xrx_a_simple_elegant_disruptiv_1.html
            2008.
         </div>
         <div class="bibliomixed e595" xml:id="EPTatBalisage2009" xreflabel="PB09">D. Pagano and A. Brüggemann-Klein.
            
            <div class="emphasis e596">Engineering Document Applications — From UML Models to XML Schemas</div>.
            Balisage 2009. Available from http://www.balisage.net/Proceedings/. doi:
            <div class="biblioid doi e597">10.4242/BalisageVol3.Bruggemann-Klein01</div>.
         </div>
         <div class="bibliomixed e598" xml:id="RoblesHahnBTh" xreflabel="RH11">J.T. Robles Hahn: 
            <div class="emphasis e599" role="ital">An XML Application for a Calendar System using Domain-Driven Design.</div>
            Bachelor Thesis. Technische Universität München 2011.
         </div>
         <div class="bibliomixed e600" xml:id="PDPrinciplesPractice" xreflabel="SchN93"> D. Schuler, A. Namioka (Eds):
            
            <div class="emphasis e601" role="ital">Participatory Design: Principles and Practices.</div>
            Lawrence Erlbaum Associates, Hillsdale, NJ, 1993. 
         </div>
      </div>
   </div>
</div>