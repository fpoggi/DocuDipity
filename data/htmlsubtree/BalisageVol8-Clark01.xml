<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#Metastylesheets:ExploringtheProvenanceofXSLTransformationsANCHOR" name="Metastylesheets:ExploringtheProvenanceofXSLTransformationsTOC">Meta-stylesheets: Exploring the Provenance of XSL Transformations</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ProvenanceterminologyANCHOR" name="ProvenanceterminologyTOC">Provenance terminology</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#WhatcanwegleanfromanXSLtransformation?ANCHOR" name="WhatcanwegleanfromanXSLtransformation?TOC">What can we glean from an XSL transformation?</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ThemetastylesheetmethodANCHOR" name="ThemetastylesheetmethodTOC">The meta-stylesheet method</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AssumptionsandapproachANCHOR" name="AssumptionsandapproachTOC">Assumptions and approach</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AworkflowforprovenancereportingANCHOR" name="AworkflowforprovenancereportingTOC">A workflow for provenance reporting</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#LayeringcodeforprovenanceANCHOR" name="LayeringcodeforprovenanceTOC">Layering code for provenance</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#RequirementsforametastylesheetANCHOR" name="RequirementsforametastylesheetTOC">Requirements for a meta-stylesheet</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#FutureworkANCHOR" name="FutureworkTOC">Future work</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#AcknowledgementsANCHOR" name="AcknowledgementsTOC">Acknowledgements</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BibliographyANCHOR" name="BibliographyTOC">Bibliography</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">Artifact</div>
         <div class="singletermTERMS">Agent</div>
         <div class="singletermTERMS">August 7 - 10, 2012</div>
         <div class="singletermTERMS">Ashley</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">base-uri()</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2012</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">Clark</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">Libraries &amp; the Cultural Record</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">Open Provenance Model (OPM)</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">Process</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">rdf:ID</div>
         <div class="singletermTERMS">rdf:Graph</div>
         <div class="singletermTERMS">rdf:about</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">system-property()</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">The International Journal of Digital Curation,</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">xsl:stylesheet</div>
         <div class="singletermTERMS">xslt:Transformation</div>
         <div class="singletermTERMS">xslt:Template</div>
         <div class="singletermTERMS">xslt:MatchedTemplate</div>
         <div class="singletermTERMS">xslt:NamedTemplate</div>
         <div class="singletermTERMS">xslt:used</div>
         <div class="singletermTERMS">xsl:apply-templates</div>
         <div class="singletermTERMS">xsl:template</div>
         <div class="singletermTERMS">xsl:comment</div>
         <div class="singletermTERMS">xsl:element</div>
         <div class="singletermTERMS">xsl:for-each</div>
         <div class="singletermTERMS">xsl:call-template</div>
         <div class="singletermTERMS">xslt:CalledTemplate</div>
         <div class="singletermTERMS">xsl:with-param</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="Metastylesheets:ExploringtheProvenanceofXSLTransformationsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3">
      <div class="title e1">Meta-stylesheets: Exploring the Provenance of XSL Transformations</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2012</div>
            <div class="confdates e5">August 7 - 10, 2012</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">When documents are transformed with XSLT, what methods can be used to understand and
               record those transformations? Though they aren't specifically meant for provenance
               capture, existing tools and informal practices can be used to manually piece together
               the provenance of XSLTs. However, a meta-stylesheet approach has the potential to
               generate provenance information by creating a copy of XSLT stylesheets with provenance-specific
               instructions. This method is currently being implemented, using the strategies and
               workflows detailed here. Even with the complications and limitations of the method,
               XSLT itself enables a surprising amount of provenance capture.
            </div>
         </div>
         <div class="author e8">
            <div class="personname e9">
               <div class="firstname e10">Ashley</div>
               <div class="surname e11">Clark</div>
            </div>
            <div class="personblurb e12">
               <div class="para e13">Ashley Clark recently received her M.S. from the Graduate School of Library and Information
                  Science at the University of Illinois at Urbana-Champaign, where she specialized in
                  data curation and worked as a research assistant and hourly academic. Her interests
                  include data curation and data provenance in the humanities.
               </div>
            </div>
         </div>
         <div class="legalnotice e14">
            <div class="para e15">Copyright Â© 2012 by the author. Used with permission.</div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e16">
         <div class="title e17">Introduction</div>
         <div class="para e18">Provenance records are records for trust and authenticity, records to prove that the
            object is what it is claimed to be. Provenance has its roots in the archival world,
            where the goal is to see objects survive with minimal weathering as they pass from
            one caretaker to the next (
            <div class="xref e19" linkend="sweeney08"></div>). Similarly, data provenance answers the question "How did this come to be here,
            in this state?", and it does so by identifying the agents, transformation events,
            and other artifacts associated with that object.
         </div>
         <div class="para e20">Computer usage is so prevalent in humanities and sciences research that it is all
            but guaranteed that data will be changed in some way during its lifetime. This has
            the advantage that tools can automatically generate provenance information, recording
            important details about the transformation process. Later, a provenance record of
            this sort may be used for error-checking, to independently reproduce a result, or
            simply for results verification (
            <div class="xref e21" linkend="kusteretal11"></div>). Few e-humanities software tools offer provenance capabilities, likely due to time
            constraints and a lack of common practice. However, one reason may be in terms of
            nomenclature. Humanities research often involves documents, and humanists may bristle
            to think of their documents as the 'data' part of data provenance (
            <div class="xref e22" linkend="fear11"></div>).
            <div class="popupBox e23">
               <div class="popupLabel" onmouseover="$('#d1e38').show('1000');" onmouseout="$('#d1e38').hide('1000');">[ footnote ]</div>
               <div id="d1e38" style="display: none;">
                  <div class="footnote">
                     <div class="para e24">See 
                        <div class="xref e25" linkend="babeu11"></div> for an in-depth look at digital humanists and the challenges of creating "ecosystems"
                        to suit their needs.
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e26">Still, more and more documents are becoming - or are born as - data, thanks to mark-up
            languages (
            <div class="xref e27" linkend="bunemankhannatan00"></div>). XSLT is one possible step in document transformation, and as such, is subject to
            the same provenance needs as other processes. XSL transformations can be examined
            and, with a little effort, used to generate provenance information about the creation
            of documents. The goal of this project is to examine methods of gathering provenance
            information about XSL transformations, and to explore the possibilities of automatically
            generating such records.
         </div>
      </div><a name="ProvenanceterminologyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e28">
         <div class="title e29">Provenance terminology</div>
         <div class="para e30">A handful of provenance ontologies exist, and each identifies three basic classes
            of provenance: information about processes, or transformation events; about agents,
            or the people (or software) which catalyze or carry out the event; and artifacts,
            or 'things' which may be acted on, generated by, or otherwise associated with a transformation
            event. The below figure gives the terminology of two such ontologies, the Open Provenance
            Model (
            <div class="xref e31" linkend="moreau10"></div>) and the W3C PROV-O (
            <div class="xref e32" linkend="belhajjame12"></div>). 
            <div class="figure e33">
               <div class="title e34">Provenance classes of OPM and W3C PROV-O</div>
               <div class="table e35">
                  <div class="thead e36">
                     <div class="tr e37">
                        <div class="td e38">Ontology</div>
                        <div class="td e39">'Thing'</div>
                        <div class="td e40">Transformation Event</div>
                        <div class="td e41">Person/Software</div>
                     </div>
                  </div>
                  <div class="tbody e42">
                     <div class="tr e43">
                        <div class="td e44">
                           <div class="emphasis e45">Open Provenance Model (OPM)</div>
                        </div>
                        <div class="td e46">
                           <div class="emphasis e47">Artifact</div>
                        </div>
                        <div class="td e48">
                           <div class="emphasis e49">Process</div>
                        </div>
                        <div class="td e50">
                           <div class="emphasis e51">Agent</div>
                        </div>
                     </div>
                     <div class="tr e52">
                        <div class="td e53">W3C PROV</div>
                        <div class="td e54">Entity</div>
                        <div class="td e55">Action</div>
                        <div class="td e56">Agent</div>
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e57">My first attempts at provenance documentation were founded on the XML binding of OPM.
            OPM was designed primarily to capture information about scientific data workflows,
            and loosely fit the information needed to document XSLT provenance. Current work makes
            use of the Open Provenance Model Vocabulary, a modified version of OPM which includes
            a module for XSLT provenance (
            <div class="xref e58" linkend="zhao10"></div>). As such, this paper makes use of OPM and OPMV XSLT module terminology.
            <div class="popupBox e59">
               <div class="popupLabel" onmouseover="$('#d1e97').show('1000');" onmouseout="$('#d1e97').hide('1000');">[ footnote ]</div>
               <div id="d1e97" style="display: none;">
                  <div class="footnote">
                     <div class="para e60">Currently a work in progress, the W3C PROV is an attempt at a provenance ontology
                        general enough to be used for many fields, but flexible enough to handle the specific
                        provenance needs of any organization or community. Once completed, it will likely
                        prove more useful than OPM for provenance markup. For example, OPM has no versioning
                        capabilities, while PROV does.
                     </div>
                  </div>
               </div>
            </div>
         </div>
      </div><a name="WhatcanwegleanfromanXSLtransformation?ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e61">
         <div class="title e62">What can we glean from an XSL transformation?</div>
         <div class="para e63">Gathering XSLT provenance information is already possible through a number of methods.
            The simplest method (though not necessarily the easiest for understanding) is to simply
            examine the artifacts associated with an XSL transformation - mainly the input, output,
            and stylesheets involved in the transformation. In particular, comments left on a
            stylesheet could reveal the author agent's identity, thought process, and understanding
            of what the XSLT code does or is supposed to do. One might be able to determine the
            templates' firing order, but the process may just as well be laborious in terms of
            piecing together provenance.
         </div>
         <div class="para e64">A better method is to use a debugger to step through a transformation, which grants
            an in-depth look at the way an output document is constructed from input and stylesheet.
            Parameter and variable values may also be shown, which may explain choices made by
            the XSLT processor. This step-through method is aimed for human understanding, but
            no record of the steps is available for consultation. Provenance information would
            be easier to identify with this method as opposed to the first, but it would still
            have to be documented by hand.
         </div>
         <div class="para e65">In contrast, the Saxon processor has a trace function
            <div class="popupBox e66">
               <div class="popupLabel" onmouseover="$('#d1e109').show('1000');" onmouseout="$('#d1e109').hide('1000');">[ footnote ]</div>
               <div id="d1e109" style="display: none;">
                  <div class="footnote">
                     <div class="para e67">Append "-T" when transforming via Java platform.</div>
                  </div>
               </div>
            </div> which provides a tree view of the steps within an XSL transformation. It shows what
            input nodes are matched to templates, and includes the file name and line numbers
            of each processed node. The trace log cannot reference the specific elements in the
            output that came into existence due to any one transformation step. Instead, one must
            infer the structure of the output from the steps taken. Still, when used as a roadmap
            to examining the input documents and stylesheets, the trace log is explicit and exact
            in its references - a good representation of the transformation which created the
            output, so long as one has access to the files referenced.
            <div class="figure e68">
               <div class="title e69">Sample Saxon trace output (with other error output removed)</div>
               <div class="programlisting e70" xml:space="preserve">&lt;trace saxon-version="9.4.0.3" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
                  &lt;source node="/" line="0" file="test1.xml"&gt;
                  &lt;xsl:template match="/" line="16" module="testRegStylesheet.xsl"&gt;
                  &lt;LRE name="html" line="17" module="testRegStylesheet.xsl"&gt;
                  &lt;LRE name="head" line="18" module="testRegStylesheet.xsl"&gt;
                  &lt;LRE name="title" line="19" module="testRegStylesheet.xsl"&gt;
                  &lt;xsl:text line="19" module="testRegStylesheet.xsl"&gt;
                  &lt;/xsl:text&gt;
                  &lt;/LRE&gt;
                  &lt;/LRE&gt;
                  &lt;xsl:apply-templates line="21" module="testRegStylesheet.xsl"&gt;
                  &lt;source node="/test/compute[1]" line="3" file="test1.xml"&gt;
                  &lt;xsl:template match="compute" line="26" module="testRegStylesheet.xsl"&gt;
                  &lt;LRE name="body" line="27" module="testRegStylesheet.xsl"&gt;
                  &lt;xsl:apply-templates line="28" module="testRegStylesheet.xsl"&gt;
                  &lt;source node="/test/compute[1]/message[1]" line="3" file="test1.xml"&gt;
                  &lt;xsl:template match="message" line="33" module="testRegStylesheet.xsl"&gt;
                  &lt;xsl:call-template line="34" module="testRegStylesheet.xsl"&gt;
                  &lt;xsl:value-of line="36" module="testRegStylesheet.xsl"&gt;
                  &lt;/xsl:value-of&gt;
                  &lt;xsl:template name="summon" line="42" module="testRegStylesheet.xsl"&gt;
                  &lt;xsl:param name="sayeth" line="43" module="testRegStylesheet.xsl"&gt;
                  &lt;/xsl:param&gt;
                  &lt;LRE name="b" line="44" module="testRegStylesheet.xsl"&gt;
                  &lt;xsl:text line="45" module="testRegStylesheet.xsl"&gt;
                  &lt;/xsl:text&gt;
                  &lt;xsl:value-of line="46" module="testRegStylesheet.xsl"&gt;
                  &lt;/xsl:value-of&gt;
                  &lt;xsl:text line="47" module="testRegStylesheet.xsl"&gt;
                  &lt;/xsl:text&gt;
                  &lt;xsl:value-of line="48" module="testRegStylesheet.xsl"&gt;
                  &lt;/xsl:value-of&gt;
                  &lt;/LRE&gt;
                  &lt;/xsl:template&gt;
                  &lt;/xsl:call-template&gt;
                  &lt;/xsl:template&gt;
                  &lt;/source&gt;&lt;!-- /test/compute[1]/message[1] --&gt;
                  &lt;/xsl:apply-templates&gt;
                  &lt;/LRE&gt;
                  &lt;/xsl:template&gt;
                  &lt;/source&gt;&lt;!-- /test/compute[1] --&gt;
                  &lt;/xsl:apply-templates&gt;
                  &lt;/LRE&gt;
                  &lt;/xsl:template&gt;
                  &lt;/source&gt;&lt;!-- / --&gt;
                  &lt;/trace&gt;
               </div>
            </div>
         </div>
         <div class="para e71">XSLT itself also provides the capability to capture some provenance information, through
            functions such as 
            <div class="code e72">system-property()</div> and 
            <div class="code e73">base-uri()</div>. With these functions, the output of a stylesheet could include information on the
            XSLT version used; the processor agent which controlled the XSL transformation; and
            the file names of an input document and the primary stylesheet. However, the use of
            this method is dependent on those who created or who maintain the stylesheet.
            <div class="popupBox e74">
               <div class="popupLabel" onmouseover="$('#d1e126').show('1000');" onmouseout="$('#d1e126').hide('1000');">[ footnote ]</div>
               <div id="d1e126" style="display: none;">
                  <div class="footnote">
                     <div class="para e75">Read: those who likely already know the files and processor being used, and who may
                        not see the use in including such information.
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e76">The oXygen XML Editor has a documentation generation tool for XSLT stylesheets. The
            tool creates a log giving information about the stylesheet and children of the 
            <div class="code e77">xsl:stylesheet</div> node (most notably, templates). Interestingly enough, the documentation tool also
            assumes that if a node has a comment placed immediately before it, then the comment
            is documentation for the contents of that node. While this assumption could be wrong,
            it certainly rewards those who provide descriptions of stylesheets and templates through
            comments. It is worth noting that the documentation tool may not contain any provenance
            information at all, since it only describes the stylesheet artifact and does not guarantee
            any references to agents, process instances, or other artifacts. On the other hand,
            the documentation is an excellent example of the types of information that should
            be included when a provenance record references a stylesheet or template artifact.
         </div>
         <div class="para e78">What kinds of information, then, can we find about an XSL transformation? 
            <div class="itemizedlist e79">
               <div class="listitem e80">
                  <div class="para e81">XSLT version</div>
               </div>
               <div class="listitem e82">
                  <div class="para e83">XSLT processor name, version, vendor</div>
               </div>
               <div class="listitem e84">
                  <div class="para e85">input document URI</div>
               </div>
               <div class="listitem e86">
                  <div class="para e87">stylesheet URI</div>
               </div>
               <div class="listitem e88">
                  <div class="para e89">template matches or calls</div>
               </div>
               <div class="listitem e90">
                  <div class="para e91">literal result element (LRE) insertion</div>
               </div>
               <div class="listitem e92">
                  <div class="para e93">input node transformation steps</div>
               </div>
               <div class="listitem e94">
                  <div class="para e95">authorship (dependent on programmer)</div>
               </div>
               <div class="listitem e96">
                  <div class="para e97">copyright information (dependent on programmer)</div>
               </div>
               <div class="listitem e98">
                  <div class="para e99">explanation of coding choices (dependent on programmer)</div>
               </div>
            </div>Although we have a number of methods for piecing together the provenance of an XSL
            transformation, there are a number of limitations, the foremost of which is the fact
            that these methods offer only a portion of the provenance information available for
            XSLT processes. To gather all of the above information would require using each method
            and manually piecing together the results to form comprehensive provenance documentation.
            A general provenance tool for XSLT should include as much of this information as possible,
            recording it during XSLT processes at a user's behest.
         </div>
      </div><a name="ThemetastylesheetmethodANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e100">
         <div class="title e101">The meta-stylesheet method</div><a name="AssumptionsandapproachANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e102">
            <div class="title e103">Assumptions and approach</div>
            <div class="para e104">When I started looking at XSLT provenance, I hoped to find a method that would be:
               
               <div class="orderedlist e105">
                  <div class="listitem e106">
                     <div class="para e107">comprehensive, combining as many types of the above provenance information as possible;
                        
                     </div>
                  </div>
                  <div class="listitem e108">
                     <div class="para e109">easy to use - either fitting right into existing workflows, or able to be run and
                        used with minimum fuss; and
                     </div>
                  </div>
                  <div class="listitem e110">
                     <div class="para e111">in a format built for shareable provenance.</div>
                  </div>
               </div>I also hoped for a method that would be reliant on neither a specific type of XSLT
               processor (as helpful as the Saxon trace has been), nor on a specific program such
               as oXygen.
            </div>
            <div class="para e112">Wendell Piez suggested a possible solution - to build a "meta-stylesheet." The meta-stylesheet
               will take stylesheet A as input, and output a stylesheet B, which in turn will approximate
               the XSLT processes of running stylesheet A with the same input document. Instead of
               the output expected from stylesheet A, the "meta'd" transformation scenario will output
               an OPMV-based RDF graph, providing provenance information on multiple levels of granularity.
               Currently, only two levels of provenance are captured: first, the file-level transformation
               process; second, the firing of templates as they are matched or called.
            </div>
         </div><a name="AworkflowforprovenancereportingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e113">
            <div class="title e114">A workflow for provenance reporting</div>
            <div class="para e115">The steps of the XSLT provenance workflow are currently as follows: 
               <div class="orderedlist e116">
                  <div class="listitem e117">
                     <div class="para e118">Use the meta-stylesheet to create stylesheet B (for generating provenance) and, optionally,
                        stylesheet C (for assigning 
                        <div class="code e119">rdf:ID</div>s to template code)
                     </div>
                  </div>
                  <div class="listitem e120">
                     <div class="para e121">Use stylesheet A or C
                        <div class="popupBox e122">
                           <div class="popupLabel" onmouseover="$('#d1e204').show('1000');" onmouseout="$('#d1e204').hide('1000');">[ footnote ]</div>
                           <div id="d1e204" style="display: none;">
                              <div class="footnote">
                                 <div class="para e123">Since A and C have the same output, I refer to "A" when talking about the characteristics
                                    of both, and "C" when specifically talking about stylesheet C.
                                 </div>
                              </div>
                           </div>
                        </div> and input.xml to create output.xml
                        <div class="popupBox e124">
                           <div class="popupLabel" onmouseover="$('#d1e208').show('1000');" onmouseout="$('#d1e208').hide('1000');">[ footnote ]</div>
                           <div id="d1e208" style="display: none;">
                              <div class="footnote">
                                 <div class="para e125">The input and output can, of course, be in formats other than XML.</div>
                              </div>
                           </div>
                        </div>.
                     </div>
                  </div>
                  <div class="listitem e126">
                     <div class="para e127">Use stylesheet B on input.xml to create an OPMV RDF graph representing the provenance
                        of step 2.
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e128">
               <div class="figure e129">
                  <div class="title e130">An overview of the meta-stylesheet method</div>
                  <div class="mediaobject e131">
                     <div class="imageobject e132">
                        <div class="metaBox e133"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e221').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e221" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e133'
                                 </span><span class="metaAttribute">fileref='../../../vol8/graphics/Clark01/Clark01-001.png'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div>The workflow is meant to capture the provenance of step 2, on two levels of granularity:
               file-level and template-level. The file-level XSL transformation process references
               the input document, as well as the stylesheet(s) used. The process is controlled by
               the XSLT processor, and generates an output document. As with the Saxon trace, this
               method can only give the provenance information of the transformation process which
               created the output.xml.
               <div class="figure e134">
                  <div class="title e135">Provenance at the file level</div>
                  <div class="mediaobject e136">
                     <div class="imageobject e137">
                        <div class="metaBox e138"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e228').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e228" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e138'
                                 </span><span class="metaAttribute">fileref='../../../vol8/graphics/Clark01/Clark01-002.png'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               <div class="figure e139">
                  <div class="title e140">Sample file-level provenance documentation (provenance.rdf)</div>
                  <div class="programlisting e141" xml:space="preserve">&lt;!-- Provenance for the transformation of file:/C:/Users/Ashley/Desktop/global_001/input.xml
                     
                     using stylesheetC.xsl: --&gt;
                     &lt;xslt:Stylesheet rdf:about="stylesheetC.xsl"&gt;
                     &lt;xslt:version&gt;1.0&lt;/xslt:version&gt;
                     &lt;/xslt:Stylesheet&gt;
                     &lt;xslt:Processor rdf:ID="proc01"&gt;
                     &lt;xslt:vendor rdf:resource="http://www.saxonica.com/"/&gt;
                     &lt;xslt:productName&gt;SAXON&lt;/xslt:productName&gt;
                     &lt;xslt:productVersion&gt;PE 9.3.0.5&lt;/xslt:productVersion&gt;
                     &lt;/xslt:Processor&gt;
                     &lt;xslt:Binding rdf:ID="alpha"&gt;
                     &lt;xslt:value&gt;Y&lt;/xslt:value&gt;
                     &lt;/xslt:Binding&gt;
                     &lt;xslt:Transformation rdf:ID="overall"&gt;
                     &lt;xslt:source rdf:resource="file:/C:/Users/Ashley/Desktop/global_001/input.xml"/&gt;
                     &lt;xslt:stylesheet rdf:resource="stylesheetC.xsl"/&gt;
                     &lt;xslt:processor rdf:resource="#proc01"/&gt;
                     &lt;xslt:binding rdf:resource="#alpha"/&gt;
                     &lt;/xslt:Transformation&gt;
                  </div>
               </div>
            </div>
            <div class="para e142">Like the overall transformation process, template-level provenance heavily uses the
               XSLT module for OPMV. Here, each 
               <div class="code e143">xslt:Transformation</div> points to an 
               <div class="code e144">xslt:Template</div> artifact, which could be of either subtype 
               <div class="code e145">xslt:MatchedTemplate</div> or 
               <div class="code e146">xslt:NamedTemplate</div>. The edge between the two is 
               <div class="code e147">xslt:used</div>. If the template firing was triggered by 
               <div class="code e148">xsl:apply-templates</div>, then it also contains a reference to the source node to which the template was matched.
               Any template, and thus any transformation, might contain parameters or variables,
               and thus, bindings. Unlike stylesheet bindings, a template parameter of the same name
               - but different 
               <div class="code e149">rdf:ID</div>! - can carry a different value every time the template is run. 
               <div class="figure e150">
                  <div class="title e151">Provenance at the template level</div>
                  <div class="mediaobject e152">
                     <div class="imageobject e153">
                        <div class="metaBox e154"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e263').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e263" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e154'
                                 </span><span class="metaAttribute">fileref='../../../vol8/graphics/Clark01/Clark01-003.png'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               <div class="figure e155">
                  <div class="title e156">Sample template-level provenance documentation (provenance.rdf)</div>
                  <div class="programlisting e157" xml:space="preserve">&lt;!-- Template-level provenance: --&gt;
                     &lt;xslt:Template rdf:about="stylesheetC.xsl#art_t1"&gt;
                     &lt;rdfs:label&gt;mode='#default', match='/', name=''&lt;/rdfs:label&gt;
                     &lt;rdfs:comment&gt;&amp;lt;xsl:template match='/'&amp;gt;
                     &amp;lt;html&amp;gt;
                     &amp;lt;head&amp;gt;
                     &amp;lt;meta http-equiv='Content-Type' content='text/html; charset=UTF-8'&amp;gt;&amp;lt;/meta&amp;gt;
                     &amp;lt;title&amp;gt;Provenance&amp;lt;/title&amp;gt;
                     &amp;lt;/head&amp;gt;
                     &amp;lt;xsl:apply-templates&amp;gt;&amp;lt;/xsl:apply-templates&amp;gt;
                     &amp;lt;/html&amp;gt;
                     &amp;lt;/xsl:template&amp;gt;&lt;/rdfs:comment&gt;
                     &lt;opmv:wasEncodedBy rdf:resource="stylesheetC.xsl"/&gt;
                     &lt;/xslt:Template&gt;
                     &lt;xslt:Template rdf:about="stylesheetC.xsl#art_t2"&gt;
                     &lt;rdfs:label&gt;mode='#default', match='compute', name=''&lt;/rdfs:label&gt;
                     &lt;rdfs:comment&gt;&amp;lt;xsl:template match='compute'&amp;gt;
                     &amp;lt;body&amp;gt;
                     &amp;lt;xsl:apply-templates&amp;gt;&amp;lt;/xsl:apply-templates&amp;gt;
                     &amp;lt;/body&amp;gt;
                     &amp;lt;/xsl:template&amp;gt;&lt;/rdfs:comment&gt;
                     &lt;opmv:wasEncodedBy rdf:resource="stylesheetC.xsl"/&gt;
                     &lt;/xslt:Template&gt;
                     &lt;xslt:Transformation rdf:ID="pr_d1-1"&gt;
                     &lt;rdfs:label&gt;Template art_t1 applied&lt;/rdfs:label&gt;
                     &lt;xslt:source rdf:resource="file:/C:/Users/Ashley/Desktop/global_001/input.xml#"/&gt;
                     &lt;xslt:used&gt;
                     &lt;xslt:MatchedTemplate rdf:about="stylesheetC.xsl#art_t1"/&gt;
                     &lt;/xslt:used&gt;
                     &lt;xslt:processor rdf:resource="#proc01"/&gt;
                     &lt;opmv:wasTriggeredBy rdf:resource="#overall"/&gt;
                     &lt;/xslt:Transformation&gt;
                     &lt;xslt:Transformation rdf:ID="pr_d1e3-2"&gt;
                     &lt;rdfs:label xmlns=""&gt;Template art_t2 applied&lt;/rdfs:label&gt;
                     &lt;xslt:source
                     rdf:resource="file:/C:/Users/Ashley/Desktop/global_001/input.xml#/test[1]/compute[1]"/&gt;
                     &lt;xslt:used&gt;
                     &lt;xslt:MatchedTemplate rdf:about="stylesheetC.xsl#art_t2"/&gt;
                     &lt;/xslt:used&gt;
                     &lt;xslt:processor rdf:resource="#proc01"/&gt;
                     &lt;opmv:wasTriggeredBy rdf:resource="#pr_d1-1"/&gt;
                     &lt;/xslt:Transformation&gt;
                  </div>
               </div>
            </div>
         </div><a name="LayeringcodeforprovenanceANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e158">
            <div class="title e159">Layering code for provenance</div>
            <div class="para e160">The job of stylesheet B is to carry the same structure as stylesheet A, so that for
               any input document, an XSLT processor will choose the same transformation step for
               either stylesheet. However, the structure needed to accurately mirror stylesheet A
               depends on the granularity expectations. If stylesheet B only needs to capture file-level
               granularity, the XSLT code only requires information about the input document artifact
               and the processor agent. On the other hand, template-level granularity would require
               stylesheet B to maintain the same templates with the same attributes and the same
               template calls or matches. Currently, the stylesheet B keeps only those elements from
               stylesheet A which are essential to the structure of the stylesheet (such as 
               <div class="code e161">xsl:template</div>), or which are needed to determine parameter or variable bindings. The more provenance
               required, the more stylesheet B will come to resemble stylesheet A. However, stylesheet
               B keeps this structure only to accurately represent the process of obtaining output.xml
               in step 2.
               <div class="popupBox e162">
                  <div class="popupLabel" onmouseover="$('#d1e277').show('1000');" onmouseout="$('#d1e277').hide('1000');">[ footnote ]</div>
                  <div id="d1e277" style="display: none;">
                     <div class="footnote">
                        <div class="para e163">As provenance becomes increasingly fine-grained, other elements will be left in as
                           well.
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e164">The meta-stylesheet is simply a means to create stylesheet B. The meta-stylesheet
               passes the OPMV base structures to the meta'd stylesheet. The stylesheet artifact,
               and template artifacts must be generated at this step. The meta-stylesheet also sets
               up the XSLT code for the transformation processes and artifacts which must be generated
               when stylesheet B is used with input, so as to accurately represent the transformation
               at step 2.
            </div>
            <div class="para e165">As an example, the next figure shows a simple comment taken from the beginning of
               the provenance output. The two figures after that show the XSLT code needed to generate
               that comment. The meta-stylesheet must layer 
               <div class="code e166">xsl:comment</div> within an 
               <div class="code e167">xsl:element</div> so that the comment appears in provenance.rdf and not stylesheet B. The meta-stylesheet
               also passes the name of stylesheet A to stylesheet B, since stylesheet B otherwise
               would have no knowledge of the parallel stylesheet. Stylesheet B, however, must find
               the 
               <div class="code e168">base-uri()</div> of the input document and generate the comment for provenance.rdf.
            </div>
            <div class="figure e169">
               <div class="title e170">Selection from provenance.rdf</div>
               <div class="programlisting e171" xml:space="preserve">&lt;!-- Provenance for the transformation of file:/C:/Users/Ashley/Desktop/global_001/input.xml
                  
                  using stylesheetC.xsl: --&gt;
               </div>
            </div>
            <div class="figure e172">
               <div class="title e173">Selection from stylesheet B.xsl</div>
               <div class="programlisting e174" xml:space="preserve">&lt;xsl:comment&gt; Provenance for the transformation of &lt;xsl:value-of select="base-uri()"/&gt;
                  
                  using stylesheetC.xsl: &lt;/xsl:comment&gt;
               </div>
            </div>
            <div class="figure e175">
               <div class="title e176">Selection from the meta-stylesheet (metaRDF.xsl)</div>
               <div class="programlisting e177" xml:space="preserve">&lt;xsl:element name="xsl:comment"&gt;
                  &lt;xsl:text&gt; Provenance for the transformation of &lt;/xsl:text&gt;
                  &lt;xsl:element name="xsl:value-of"&gt;
                  &lt;xsl:attribute name="select"&gt;base-uri()&lt;/xsl:attribute&gt;
                  &lt;/xsl:element&gt;
                  &lt;xsl:text&gt; using &lt;/xsl:text&gt;
                  &lt;xsl:value-of select="$regularStylesheet"/&gt;
                  &lt;xsl:text&gt;: &lt;/xsl:text&gt;
                  &lt;/xsl:element&gt;
               </div>
            </div>
            <div class="para e178">Essentially, the meta-stylesheet has knowledge of stylesheet A; the version of XSLT
               and the files it uses; and the number of and identifying information regarding the
               templates. The stylesheet B will be able to grab information about the input document,
               the specifics of an individual transformation, and the XSLT processor. The meta-stylesheet
               sets up stylesheet B to take that kind of information and funnel it into the provenance
               output.
            </div>
         </div><a name="RequirementsforametastylesheetANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e179">
            <div class="title e180">Requirements for a meta-stylesheet</div>
            <div class="para e181">Before it does anything else, the meta-stylesheet matches the root of its input and
               creates an copy of stylesheet A, only with 
               <div class="code e182">rdf:ID</div>s attached to the templates. "Stylesheet C" is unnecessary for the provenance workflow
               above, but it may be useful for linking relevant template code to the provenance template
               artifacts.
            </div>
            <div class="para e183">After stylesheet C is taken care of, the meta-stylesheet starts on stylesheet B. However,
               stylesheet A might fall into one of three categories: 
               <div class="itemizedlist e184">
                  <div class="listitem e185">
                     <div class="para e186">there is no template matching root (default template rules apply); </div>
                  </div>
                  <div class="listitem e187">
                     <div class="para e188">there is a template which matches root and only root; </div>
                  </div>
                  <div class="listitem e189">
                     <div class="para e190">or, there is a template which matches root as well as other nodes.</div>
                  </div>
               </div>Since the meta-stylesheet must keep the structure of stylesheet A as well as preparing
               for eventual RDF/XML output, the 
               <div class="code e191">rdf:Graph</div> container element must be carefully placed. In the first case, a root template is
               created. In the second case, stylesheet A's root template can be reduced to provenance-ready
               structure, but with the template node's descendants wrapped in the 
               <div class="code e192">rdf:Graph</div>. The third case is slightly more difficult. The original template must have the root
               node stripped from 
               <div class="code e193">@match</div> before it can be copied forward into stylesheet B, and a new template created to
               match only root, with the same instructions wrapped in the 
               <div class="code e194">rdf:Graph</div>. It's also worth noting that each template in stylesheet B will be prepared with
               an 
               <div class="code e195">rdf:about</div> with a link to a template in stylesheet C. In the third case, both template artifacts
               derived from the original will point to the same template in stylesheet C. 
            </div>
            <div class="para e196">Placing the root element is also important because there is no better place to record
               the file-level provenance. When the processor matches the root node to any template
               (or built-in rule, as the case may be), the stylesheet and input file artifacts are
               already known, as are the processor agent and stylesheet-level parameters and variables.
               <div class="figure e197">
                  <div class="title e198">Code for the overall transformation process (metaRDF.xsl)</div>
                  <div class="programlisting e199" xml:space="preserve">&lt;!-- Set up the xslt:Transformation for $regularStylesheet and its input. --&gt;
                     &lt;xslt:Transformation rdf:ID="overall"&gt;
                     &lt;xslt:source&gt;
                     &lt;xsl:element name="xsl:attribute"&gt;
                     &lt;xsl:attribute name="name"&gt;rdf:resource&lt;/xsl:attribute&gt;
                     &lt;xsl:element name="xsl:value-of"&gt;
                     &lt;xsl:attribute name="select"&gt;base-uri()&lt;/xsl:attribute&gt;
                     &lt;/xsl:element&gt;
                     &lt;/xsl:element&gt;
                     &lt;/xslt:source&gt;
                     &lt;xslt:stylesheet&gt;
                     &lt;xsl:attribute name="rdf:resource"&gt;
                     &lt;xsl:value-of select="$regularStylesheet"/&gt;
                     &lt;/xsl:attribute&gt;
                     &lt;/xslt:stylesheet&gt;
                     &lt;xslt:processor&gt;
                     &lt;xsl:attribute name="rdf:resource"&gt;
                     &lt;xsl:text&gt;#proc01&lt;/xsl:text&gt;
                     &lt;/xsl:attribute&gt;
                     &lt;/xslt:processor&gt;
                     &lt;xsl:for-each select="/(xsl:transform | xsl:stylesheet)/xsl:param"&gt;
                     &lt;xslt:binding&gt;
                     &lt;xsl:attribute name="rdf:resource"&gt;
                     &lt;xsl:text&gt;#&lt;/xsl:text&gt;
                     &lt;xsl:value-of select="@name"/&gt;
                     &lt;/xsl:attribute&gt;
                     &lt;/xslt:binding&gt;
                     &lt;/xsl:for-each&gt;
                     &lt;/xslt:Transformation&gt;
                  </div>
               </div>The template artifacts can be generated here by using 
               <div class="code e200">xsl:for-each</div>, so long as one is willing to accept that template artifacts may be listed that are
               not referenced in any transformation.
            </div>
            <div class="para e201">The processes for templates firing should be generated during the transformation of
               stylesheet B, thus guaranteeing a chain of template-level processes. A template-level
               process is triggered by another process - either the file-level process, or by an
               
               <div class="code e202">xsl:apply-templates</div> or 
               <div class="code e203">xsl:call-template</div> during another template's firing. If a template is called or matched, OPMV contains
               two Template subclasses - 
               <div class="code e204">xslt:MatchedTemplate</div> and 
               <div class="code e205">xslt:CalledTemplate</div>. For a process to correctly reference the use of a template artifact, the meta-stylesheet
               must set up stylesheet B to pass along information about the 'parent' template. I
               used tunneled parameters to accomplish this - each template in stylesheet B gains
               two parameters, called 'provTemplate' and 'provTrigger'. 'provTemplate' identifies
               the XSLT instruction which initiated the current template process, and 'provTrigger'
               passes along the identifier for the 'parent' template. The meta-stylesheet must assign
               
               <div class="code e206">xsl:with-param</div> instructions to each 
               <div class="code e207">xsl:apply-templates</div> and 
               <div class="code e208">xsl:call-template</div>.
               <div class="figure e209">
                  <div class="title e210">Code to track template parentage with xsl:call-template (metaRDF.xsl)</div>
                  <div class="programlisting e211" xml:space="preserve">&lt;xsl:template match="xsl:call-template"&gt;
                     &lt;xsl:copy&gt;
                     &lt;xsl:copy-of select="@*"/&gt;
                     &lt;xsl:element name="xsl:with-param"&gt;
                     &lt;xsl:attribute name="name"&gt;provTemplate&lt;/xsl:attribute&gt;
                     &lt;xsl:attribute name="tunnel"&gt;yes&lt;/xsl:attribute&gt;
                     &lt;xsl:text&gt;called&lt;/xsl:text&gt;
                     &lt;/xsl:element&gt;
                     &lt;xsl:element name="xsl:with-param"&gt;
                     &lt;xsl:attribute name="name"&gt;provTrigger&lt;/xsl:attribute&gt;
                     &lt;xsl:attribute name="tunnel"&gt;yes&lt;/xsl:attribute&gt;
                     &lt;xsl:element name="xsl:value-of"&gt;
                     &lt;xsl:element name="xsl:text"&gt;#pr_&lt;/xsl:element&gt;
                     &lt;xsl:element name="xsl:value-of"&gt;
                     &lt;xsl:attribute name="select"&gt;generate-id()&lt;/xsl:attribute&gt;
                     &lt;/xsl:element&gt;
                     &lt;xsl:element name="xsl:text"&gt;-&lt;/xsl:element&gt;
                     &lt;xsl:number count="xsl:template" level="any"/&gt;
                     &lt;/xsl:element&gt;
                     &lt;/xsl:element&gt;
                     &lt;xsl:apply-templates/&gt;
                     &lt;/xsl:copy&gt;
                     &lt;/xsl:template&gt;
                  </div>
               </div>
            </div>
         </div>
      </div><a name="FutureworkANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e212">
         <div class="title e213">Future work</div>
         <div class="para e214">The meta-stylesheet has been successfully created, and it can provide file- and template-level
            provenance documentation for XSL transformations, as shown in the examples above.
            Still, there are a number of questions still left to explore regarding the meta-stylesheet
            method and XSLT provenance documentation. For example, how much provenance collection
            is too much? Further work can be done to include finer levels of granularity, but
            it probably isn't necessary to document every XSLT instruction. What about coarser
            granularity? If XSLTs are used in a workflow, what kinds of provenance documentation
            can be generated, and what should it look like?
         </div>
         <div class="para e215">Unfortunately, the meta-stylesheet method does not entirely fulfill the assumptions
            listed previously, especially in ease of use. No matter what version of XSLT is used
            by stylesheet A, both the meta-stylesheet and stylesheet B currently require the use
            of an XSLT 2.0 processor. This certainly limits the number of processors able to make
            use of this method without fuss. Further, the meta-stylesheet has only undergone testing
            using the Saxon HE and PE processors shipped with oXygen. More testing is needed to
            ensure that the approach works in broader contexts, with other tools and XSLT 2.0
            processors.
         </div>
         <div class="para e216">But the biggest problem with this approach is the meta-stylesheet's inability to say
            anything concrete about the output of stylesheet A. Neither the meta-stylesheet nor
            stylesheet B has knowledge of the actual contents of output.xml, although a good estimation
            can probably be made by modifying the structure of stylesheet B. It is unclear whether
            this is a beneficial side-effect (as in workflows where intermediate outputs may not
            be available) or something that should be fixed.
         </div>
         <div class="para e217">Besides attempting to solve these questions, I continue to test the meta-stylesheet
            against a greater number of input stylesheets, and to include other types of provenance
            information, such as the template descriptions given by the oXygen Editor. Even at
            this date, this project shows that an impressive amount of provenance information
            can be generated with just XSLT.
         </div>
      </div><a name="AcknowledgementsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e218">
         <div class="title e219">Acknowledgements</div>
         <div class="para e220">Many, many thanks to Wendell Piez for coming up with the idea for a meta-stylesheet,
            as well as providing guidance and technical help along the way. Thanks also to Allen
            Renear, Megan Senseney, and my colleagues at CIRSS for their advice and unflagging
            support.
         </div>
         <div class="para e221">This project was supported by DCEP-H, an initiative to extend the Data Curation Education
            Program to the humanities. Funded by IMLS Grant RE-05-08-0062-08, DCEP-H was based
            at the Center for Informatics Research in Science and Scholarship at the University
            of Illinois at Urbana-Champaign.
         </div>
      </div><a name="BibliographyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e222">
         <div class="title e223">Bibliography</div>
         <div class="bibliomixed e224" xml:id="babeu11" xreflabel="Babeu, 2011">Babeu, A. (2011). "Rome wasn't digitized in a day": Building a cyberinfrastructure
            for digital classics. Washington, D.C.: Council on Library and Information Resources.
            Accessed at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e225" xlink:actuate="onRequest" xlink:href="http://www.clir.org/pubs/reports/pub150/pub150.pdf" xlink:show="new" xlink:type="simple">http://www.clir.org/pubs/reports/pub150/pub150.pdf</div>
         </div>
         <div class="bibliomixed e226" xml:id="belhajjame12" xreflabel="Belhajjame et al., 2012">Belhajjame, K., Deus, H., Garijo, D., Klyne, G., Missier, P., Soiland-Reyes, S., Zednik,
            S. (2012). PROV Model Primer, W3C Working Draft 03 May 2012. Accessed at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e227" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/2012/WD-prov-primer-20120503/" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/2012/WD-prov-primer-20120503/</div>
         </div>
         <div class="bibliomixed e228" xml:id="bunemankhannatan00" xreflabel="Buneman, Khanna, &amp; Tan, 2000">Buneman, P., Khanna, S., &amp; Tan, W. (2000). Data provenance: Some basic issues. In
            Kapoor, S., &amp; Prasad, S (Eds.), 
            <div class="emphasis e229" role="ital">Lecture Notes in Computer Science : Vol. 1974. FST TCS 2000: Foundations of Software
               Technology and Theoretical Computer Science
            </div> (pp. 87-93). Berlin, Germany: Springer. doi:
            <div class="biblioid doi e230">10.1007/3-540-44450-5_6</div>
         </div>
         <div class="bibliomixed e231" xml:id="fear11" xreflabel="Fear, 2011">Fear, K. (2011). "You made it, you take care of it": Data management as personal information
            management. 
            <div class="emphasis e232" role="ital">The International Journal of Digital Curation,</div> 6(2), 53-77. Accessed at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e233" xlink:actuate="onRequest" xlink:href="http://www.ijdc.net/index.php/ijdc/article/view/183/250" xlink:show="new" xlink:type="simple">http://www.ijdc.net/index.php/ijdc/article/view/183/250</div>
         </div>
         <div class="bibliomixed e234" xml:id="kusteretal11" xreflabel="KÃ¼ster, Ludwig, Al-Hajj, &amp; Selig, 2011">KÃ¼ster, M., Ludwig, C., Al-Hajj, Y. &amp; Selig, T. (2011). TextGrid provenance tools
            for digital humanities ecosystems. 
            <div class="emphasis e235" role="ital">Proceedings of the 5th IEEE International Conference on Digital Ecosystems and Technologies
               2011
            </div>. (pp. 317-323). Daejeon, Korea: IEEE. doi:
            <div class="biblioid doi e236">10.1109/DEST.2011.5936615</div>
         </div>
         <div class="bibliomixed e237" xml:id="moreau10" xreflabel="Moreau et al., 2010">Moreau, L., Clifford, B., Freire, J., Futrelle, J., Gil, Y., Groth, P., ..., Van den
            Bussche, J. (2010). The Open Provenance Model core specification (v1.1). Accessed
            at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e238" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://eprints.ecs.soton.ac.uk/21449/</div>
         </div>
         <div class="bibliomixed e239" xml:id="sweeney08" xreflabel="Sweeney, 2008">Sweeney, S. (2008). The ambiguous origins of the archival principle of "provenance".
            
            <div class="emphasis e240" role="ital">Libraries &amp; the Cultural Record</div> 43(2), 193-213. University of Texas Press. doi:
            <div class="biblioid doi e241">10.1353/lac.0.0017</div>
         </div>
         <div class="bibliomixed e242" xml:id="zhao10" xreflabel="Zhao, 2010">Zhao, Jun. (2010). Open Provenance Model Vocabulary specification. Accessed at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e243" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://purl.org/net/opmv/ns-20101006</div>.
         </div>
      </div>
   </div>
</div>