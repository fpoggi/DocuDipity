<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#ParallelBitStreamTechnologyasaFoundationforXMLParsingPerformanceANCHOR" name="ParallelBitStreamTechnologyasaFoundationforXMLParsingPerformanceTOC">Parallel Bit Stream Technology as a Foundation for XML Parsing Performance</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ACatalogofParallelBitStreamsforXMLANCHOR" name="ACatalogofParallelBitStreamsforXMLTOC">A Catalog of Parallel Bit Streams for XML</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#BasisBitStreamsANCHOR" name="BasisBitStreamsTOC">Basis Bit Streams</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#GeneralStreamsANCHOR" name="GeneralStreamsTOC">General Streams</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#DeletionMaskStreamsANCHOR" name="DeletionMaskStreamsTOC">Deletion Mask Streams</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#ErrorFlagStreamsANCHOR" name="ErrorFlagStreamsTOC">Error Flag Streams </a></div>
               </div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#LexicalItemStreamsANCHOR" name="LexicalItemStreamsTOC">Lexical Item Streams</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#UTF8ByteClassificationScopeandValidationStreamsANCHOR" name="UTF8ByteClassificationScopeandValidationStreamsTOC">UTF-8 Byte Classification, Scope and Validation Streams</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#UTF8ByteClassificationStreamsANCHOR" name="UTF8ByteClassificationStreamsTOC">UTF-8 Byte Classification Streams</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#UTF8ScopeStreamsANCHOR" name="UTF8ScopeStreamsTOC">UTF-8 Scope Streams</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#UTF8ValidationStreamsANCHOR" name="UTF8ValidationStreamsTOC">UTF-8 Validation Streams</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#XMLCharacterValidationStreamsANCHOR" name="XMLCharacterValidationStreamsTOC">XML Character Validation Streams</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#UTF8toUTF16TranscodingANCHOR" name="UTF8toUTF16TranscodingTOC">UTF-8 to UTF-16 Transcoding</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#UTF8IndexedUTF16StreamsANCHOR" name="UTF8IndexedUTF16StreamsTOC">UTF-8 Indexed UTF-16 Streams</a></div>
               </div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ControlCharacterStreamsANCHOR" name="ControlCharacterStreamsTOC">Control Character Streams</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#XMLCharacterValidationANCHOR" name="XMLCharacterValidationTOC">XML Character Validation</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#XML10EndoflineHandlingANCHOR" name="XML10EndoflineHandlingTOC">XML 1.0 End-of-line Handling</a></div>
               </div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#CallOutStreamsANCHOR" name="CallOutStreamsTOC">Call Out Streams</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#CommentProcessingInstructionandCDATASectionCallOutStreamsANCHOR" name="CommentProcessingInstructionandCDATASectionCallOutStreamsTOC">Comment, Processing Instruction and CDATA Section Call Out Streams</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#ReferenceCallOutStreamsANCHOR" name="ReferenceCallOutStreamsTOC">Reference Call Out Streams</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#TagCallOutStreamsANCHOR" name="TagCallOutStreamsTOC">Tag Call Out Streams</a></div>
               </div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#SIMDBeyondBitstreams:NamesandNumbersANCHOR" name="SIMDBeyondBitstreams:NamesandNumbersTOC">SIMD Beyond Bitstreams: Names and Numbers</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#NameLookupANCHOR" name="NameLookupTOC">Name Lookup</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#NumericProcessingANCHOR" name="NumericProcessingTOC">Numeric Processing</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#APIsandParallelBitStreamsANCHOR" name="APIsandParallelBitStreamsTOC">APIs and Parallel Bit Streams</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TheILAXStreamingAPIANCHOR" name="TheILAXStreamingAPITOC">The ILAX Streaming API</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#EfficientXMLinJavaUsingArraySetModelsANCHOR" name="EfficientXMLinJavaUsingArraySetModelsTOC">Efficient XML in Java Using Array Set Models</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#SaxonBTinyTreeExampleANCHOR" name="SaxonBTinyTreeExampleTOC">Saxon-B TinyTree Example</a></div>
               </div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#CompilerTechnologyANCHOR" name="CompilerTechnologyTOC">Compiler Technology</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#CharacterClassCompilerANCHOR" name="CharacterClassCompilerTOC">Character Class Compiler</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#RegularExpressionCompilationANCHOR" name="RegularExpressionCompilationTOC">Regular Expression Compilation</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#UnboundedBitStreamCompilationANCHOR" name="UnboundedBitStreamCompilationTOC">Unbounded Bit Stream Compilation</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConclusionANCHOR" name="ConclusionTOC">Conclusion</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#AcknowledgmentsANCHOR" name="AcknowledgmentsTOC">Acknowledgments</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BibliographyANCHOR" name="BibliographyTOC">Bibliography</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">A Text in Farsi:&nbsp;ى&nbsp;ك&nbsp;&nbsp;م&nbsp;ت&nbsp;ن&nbsp;&nbsp;ف&nbsp;ا&nbsp;ر&nbsp;س&nbsp;ى</div>
         <div class="singletermTERMS">Array Set Models</div>
         <div class="singletermTERMS">August 10, 2009</div>
         <div class="singletermTERMS">Amiri</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">Bit0</div>
         <div class="singletermTERMS">Bit1</div>
         <div class="singletermTERMS">Bit7</div>
         <div class="singletermTERMS">Bit0/Bit1</div>
         <div class="singletermTERMS">Bit2/Bit3</div>
         <div class="singletermTERMS">Bit4/Bit5</div>
         <div class="singletermTERMS">Bit6/Bit7</div>
         <div class="singletermTERMS">basis streams</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">cursor</div>
         <div class="singletermTERMS">cameron@cs.sfu.ca</div>
         <div class="singletermTERMS">Cameron</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">eamiri@cs.sfu.ca</div>
         <div class="singletermTERMS">Ehsan</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
         <div class="singletermTERMS">Graduate Student, School of Computing Science</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">Herdy</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
         <div class="singletermTERMS">ksherdy@cs.sfu.ca</div>
         <div class="singletermTERMS">Ken</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">Professor of Computing Science</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">Rob</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="ParallelBitStreamTechnologyasaFoundationforXMLParsingPerformanceANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.2" xml:id="HR-23632987-8973">
      <div class="title e1">Parallel Bit Stream Technology as a Foundation for XML Parsing Performance</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">International Symposium on Processing XML Efficiently: Overcoming Limits on Space,
               Time, or Bandwidth
            </div>
            <div class="confdates e5">August 10, 2009</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">By first transforming the octets (bytes) of XML texts into eight parallel bit
               streams, the SIMD features of commodity processors can be exploited for parallel
               processing of blocks of 128 input bytes at a time. Established transcoding and parsing
               techniques are reviewed followed by new techniques including parsing with bitstream
               addition. Further opportunities are discussed in light of expected advances in CPU
               architecture and compiler technology. Implications for various APIs and information
               models are presented as well opportunities for collaborative open-source
               development.
            </div>
         </div>
         <div class="author e8">
            <div class="personname e9">
               <div class="firstname e10">Rob</div>
               <div class="surname e11">Cameron</div>
            </div>
            <div class="personblurb e12">
               <div class="para e13">Dr. Rob Cameron is Professor and Director of Computing Science at Simon Fraser
                  University. With a broad spectrum of research interests related to programming
                  languages, software engineering and sociotechnical design of public computing
                  infrastructure, he has recently been focusing on high performance text processing
                  using parallel bit stream technology and its applications to XML. He is also a
                  patentleft evangelist, advocating university-based technology transfer models
                  dedicated to free use in open source. 
               </div>
            </div>
            <div class="affiliation e14">
               <div class="jobtitle e15">Professor of Computing Science</div>
               <div class="orgname e16">Simon Fraser University</div>
            </div>
            <div class="email e17">cameron@cs.sfu.ca</div>
         </div>
         <div class="author e18">
            <div class="personname e19">
               <div class="firstname e20">Ken</div>
               <div class="surname e21">Herdy</div>
            </div>
            <div class="personblurb e22">
               <div class="para e23"> Ken Herdy completed an Advanced Diploma of Technology in Geographical Information
                  Systems at the British Columbia Institute of Technology in 2003 and earned a Bachelor
                  of Science in Computing Science with a Certificate in Spatial Information Systems
                  at
                  Simon Fraser University in 2005. 
               </div>
               <div class="para e24"> Ken is currently pursuing graduate studies in Computing Science at Simon Fraser
                  University with industrial scholarship support from the Natural Sciences and
                  Engineering Research Council of Canada, the Mathematics of Information Technology
                  and
                  Complex Systems NCE, and the BC Innovation Council. His research focus is an analysis
                  of the principal techniques that may be used to improve XML processing performance
                  in
                  the context of the Geography Markup Language (GML). 
               </div>
            </div>
            <div class="affiliation e25">
               <div class="jobtitle e26">Graduate Student, School of Computing Science</div>
               <div class="orgname e27">Simon Fraser University </div>
            </div>
            <div class="email e28">ksherdy@cs.sfu.ca</div>
         </div>
         <div class="author e29">
            <div class="personname e30">
               <div class="firstname e31">Ehsan</div>
               <div class="surname e32">Amiri</div>
            </div>
            <div class="personblurb e33">
               <div class="para e34">Ehsan Amiri is a PhD student of Computer Science at Simon Fraser University.
                  Before that he studied at Sharif University of Technology, Tehran, Iran. While his
                  graduate research has been focused on theoretical problems like fingerprinting, Ehsan
                  has worked on some software projects like development of a multi-node firewall as
                  well. More recently he has been developing compiler technology for automatic
                  generation of bit stream processing code. 
               </div>
            </div>
            <div class="affiliation e35">
               <div class="jobtitle e36">Graduate Student, School of Computing Science</div>
               <div class="orgname e37">Simon Fraser University</div>
            </div>
            <div class="email e38">eamiri@cs.sfu.ca</div>
         </div>
         <div class="legalnotice e39">
            <div class="para e40">Copyright © 2009 Robert D. Cameron, Kenneth S. Herdy and Ehsan Amiri.
               This work is licensed under a Creative Commons Attribution-Noncommercial-No Derivative
               Works 2.5 Canada License.
            </div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e41">
         <div class="title e42">Introduction</div>
         <div class="para e43"> While particular XML applications may benefit from special-purpose hardware such
            as XML
            chips [
            <div class="xref e44" linkend="XMLChip09"></div>] or appliances [
            <div class="xref e45" linkend="Datapower09"></div>], the bulk
            of the world's XML processing workload will continue to be handled by XML software
            stacks
            on commodity processors. Exploiting the SIMD capabilities of such processors such
            as the
            SSE instructions of x86 chips, parallel bit stream technology offers the potential
            of
            dramatic improvement over byte-at-a-time processing for a variety of XML processing
            tasks.
            Character set issues such as Unicode validation and transcoding [
            <div class="xref e46" linkend="PPoPP08"></div>], normalization of line breaks and white space and XML character validation can be
            handled fully in parallel using this representation. Lexical item streams, such as
            the bit
            stream marking the positions of opening angle brackets, can also be formed in parallel.
            Bit-scan instructions of commodity processors may then be used on lexical item streams
            to
            implement rapid single-instruction scanning across variable-length multi-byte text
            blocks
            as in the Parabix XML parser [
            <div class="xref e47" linkend="CASCON08"></div>]. Overall, these techniques may be
            combined to yield end-to-end performance that may be 1.5X to 15X faster than alternatives
            [
            <div class="xref e48" linkend="SVGOpen08"></div>].
         </div>
         <div class="para e49">Continued research in parallel bit stream techniques as well as more conventional
            application of SIMD techniques in XML processing offers further prospects for improvement
            of core XML components as well as for tackling performance-critical tasks further
            up the
            stack. A newly prototyped technique for parallel tag parsing using bitstream addition
            is
            expected to improve parsing performance even beyond that achieved using sequential
            bit
            scans. Several techniques for improved symbol table performance are being investigated,
            including parallel hash value calculation and length-based sorting using the cheap
            length
            determination afforded by bit scans. To deliver the benefits of parallel bit stream
            technology to the Java world, we are developing Array Set Model (ASM) representations
            of
            XML Infoset and other XML information models for efficient transmission across the
            JNI
            boundary.
         </div>
         <div class="para e50">Amplifying these software advances, continuing hardware advances in commodity processors
            increase the relative advantage of parallel bit stream techniques over traditional
            byte-at-a-time processors. For example, the Intel Core architecture improved SSE processing
            to give superscalar execution of bitwise logic operations (3 instructions per cycle
            vs. 1
            in Pentium 4). Upcoming 256-bit AVX technology extends the register set and replaces
            destructive two-operand instructions with a nondestructive three-operand form. General
            purpose programming on graphic processing units (GPGPU) such as the upcoming 512-bit
            Larrabee processor may also be useful for XML applications using parallel bit streams.
            New
            instruction set architectures may also offer dramatic improvements in core algorithms.
            Using the relatively simple extensions to support the principle of inductive doubling,
            a 3X
            improvement in several core parallel bit stream algorithms may be achieved [
            <div class="xref e51" linkend="ASPLOS09"></div>]. Other possibilities include direct implementation of parallel
            extract and parallel deposit (pex/pdep) instructions [
            <div class="xref e52" linkend="Pex06"></div>], and
            bit-level interleave operations as in Larrabee, each of which would have important
            application to parallel bit stream processing.
         </div>
         <div class="para e53">Further prospects for XML performance improvement arise from leveraging the
            intraregister parallelism of parallel bit stream technology to exploit the interchip
            parallelism of multicore computing. Parallel bit stream techniques can support multicore
            parallelism in both data partitioning and task partitioning models. For example, the
            datasection partitioning approach of Wu, Zhang, Yu and Li may be used to partition
            blocks
            for speculative parallel parsing on separate cores followed by a postprocessing step
            to
            join partial S-trees [
            <div class="xref e54" linkend="Wu08"></div>].
         </div>
         <div class="para e55">In our view, the established and expected performance advantages of parallel bit stream
            technology over traditional byte-at-a-time processing are so compelling that parallel
            bit
            stream technology should ultimately form the foundation of every high-performance
            XML
            software stack. We envision a common high-performance XML kernel that may be customized
            to
            a variety of processor architectures and that supports a wide range of existing and
            new XML
            APIs. Widespread deployment of this technology should greatly benefit the XML community
            in
            addressing both the deserved and undeserved criticism of XML on performance grounds.
            A
            further benefit of improved performance is a substantial greening of XML technologies.
         </div>
         <div class="para e56">To complement our research program investigating fundamental algorithms and issues
            in
            high-performance XML processing, our work also involves development of open source
            software
            implementing these algorithms, with a goal of full conformance to relevant specifications.
            From the research perspective, this approach is valuable in ensuring that the full
            complexity of required XML processing is addressed in reporting and assessing processing
            results. However, our goal is also to use this open source software as a basis of
            technology transfer. A Simon Fraser University spin-off company, called International
            Characters, Inc., has been created to commercialize the results of this work using
            a
            patent-based open source model.
         </div>
         <div class="para e57">To date, we have not yet been successful in establishing a broader community of
            participation with our open source code base. Within open-source communities, there
            is
            often a general antipathy towards software patents; this may limit engagement with
            our
            technology, even though it has been dedicated for free use in open source. 
         </div>
         <div class="para e58">A further complication is the inherent difficulty of SIMD programming in general,
            and
            parallel bit stream programming in particular. Considerable work is required with
            each new
            algorithmic technique being investigated as well as in retargetting our techniques
            for each
            new development in SIMD and multicore processor technologies. To address these concerns,
            we
            have increasingly shifted the emphasis of our research program towards compiler technology
            capable of generating parallel bit stream code from higher-level specifications.
         </div>
      </div><a name="ACatalogofParallelBitStreamsforXMLANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e59">
         <div class="title e60">A Catalog of Parallel Bit Streams for XML</div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e61">
            <div class="title e62">Introduction</div>
            <div class="para e63">In this section, we introduce the fundamental concepts of parallel bit stream
               technology and present a comprehensive catalog of parallel bit streams for use in
               XML
               processing. In presenting this catalog, the focus is on the specification of the bit
               streams as data streams in one-to-one correspondence with the character code units
               of an
               input XML stream. The goal is to define these bit streams in the abstract without
               initially considering memory layouts, register widths or other issues related to
               particular target architectures. In cataloging these techniques, we also hope to convey
               a sense of the breadth of applications of parallel bit stream technology to XML
               processing tasks. 
            </div>
         </div><a name="BasisBitStreamsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e64">
            <div class="title e65">Basis Bit Streams</div>
            <div class="para e66">Given a byte-oriented text stream represented in UTF-8, for example, we define a
               transform representation of this text consisting of a set of eight parallel bit streams
               for the individual bits of each byte. Thus, the 
               <div class="code e67">Bit0</div> stream is the stream
               of bits consisting of bit 0 of each byte in the input byte stream, 
               <div class="code e68">Bit1</div> is
               the bit stream consisting of bit 1 of each byte in the input stream and so on. The
               set
               of streams 
               <div class="code e69">Bit0</div> through 
               <div class="code e70">Bit7</div> are known as the 
               <div class="emphasis e71">basis
                  streams
               </div> of the parallel bit stream representation. The following table
               shows an example XML character stream together with its representation as a set of
               8
               basis streams. 
               <div class="table e72">
                  <div class="caption e73">
                     <div class="para e74">XML Character Stream Transposition.</div>
                  </div>
                  <div class="colgroup e75" span="1">
                     <div class="metaBox e76"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e135').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e135" class="metaSource" style="display:none;">                
                           &lt;col<span class="metaAttribute">align='left'
                              </span><span class="metaAttribute">class='e76'
                              </span><span class="metaAttribute">span='1'
                              </span><span class="metaAttribute">valign='top'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                     <div class="metaBox e77"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e136').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e136" class="metaSource" style="display:none;">                
                           &lt;col<span class="metaAttribute">align='left'
                              </span><span class="metaAttribute">class='e77'
                              </span><span class="metaAttribute">span='1'
                              </span><span class="metaAttribute">valign='top'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                     <div class="metaBox e78"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e137').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e137" class="metaSource" style="display:none;">                
                           &lt;col<span class="metaAttribute">align='left'
                              </span><span class="metaAttribute">class='e78'
                              </span><span class="metaAttribute">span='1'
                              </span><span class="metaAttribute">valign='top'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                     <div class="metaBox e79"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e138').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e138" class="metaSource" style="display:none;">                
                           &lt;col<span class="metaAttribute">align='left'
                              </span><span class="metaAttribute">class='e79'
                              </span><span class="metaAttribute">span='1'
                              </span><span class="metaAttribute">valign='top'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                     <div class="metaBox e80"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e139').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e139" class="metaSource" style="display:none;">                
                           &lt;col<span class="metaAttribute">align='left'
                              </span><span class="metaAttribute">class='e80'
                              </span><span class="metaAttribute">span='1'
                              </span><span class="metaAttribute">valign='top'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                     <div class="metaBox e81"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e140').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e140" class="metaSource" style="display:none;">                
                           &lt;col<span class="metaAttribute">align='left'
                              </span><span class="metaAttribute">class='e81'
                              </span><span class="metaAttribute">span='1'
                              </span><span class="metaAttribute">valign='top'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
                  <div class="tbody e82">
                     <div class="tr e83" valign="top">
                        <div class="td e84">Input Data</div>
                        <div class="td e85">
                           
                           <div class="code e86">&lt;</div>
                           
                        </div>
                        <div class="td e87">
                           
                           <div class="code e88">t</div>
                           
                        </div>
                        <div class="td e89">
                           
                           <div class="code e90">a</div>
                           
                        </div>
                        <div class="td e91">
                           
                           <div class="code e92">g</div>
                           
                        </div>
                        <div class="td e93">
                           
                           <div class="code e94">/</div>
                           
                        </div>
                        <div class="td e95">
                           
                           <div class="code e96">&gt;</div>
                           
                        </div>
                     </div>
                     <div class="tr e97" valign="top">
                        <div class="td e98">ASCII</div>
                        <div class="td e99">
                           
                           <div class="code e100">00111100</div>
                           
                        </div>
                        <div class="td e101">
                           
                           <div class="code e102">01110100</div>
                           
                        </div>
                        <div class="td e103">
                           
                           <div class="code e104">01100001</div>
                           
                        </div>
                        <div class="td e105">
                           
                           <div class="code e106">01100111</div>
                           
                        </div>
                        <div class="td e107">
                           
                           <div class="code e108">00101111</div>
                           
                        </div>
                        <div class="td e109">
                           
                           <div class="code e110">00111110</div>
                           
                        </div>
                     </div>
                     <div class="tr e111" valign="top">
                        <div class="td e112">Bit0</div>
                        <div class="td e113">
                           
                           <div class="code e114">0</div>
                           
                        </div>
                        <div class="td e115">
                           
                           <div class="code e116">0</div>
                           
                        </div>
                        <div class="td e117">
                           
                           <div class="code e118">0</div>
                           
                        </div>
                        <div class="td e119">
                           
                           <div class="code e120">0</div>
                           
                        </div>
                        <div class="td e121">
                           
                           <div class="code e122">0</div>
                           
                        </div>
                        <div class="td e123">
                           
                           <div class="code e124">0</div>
                           
                        </div>
                     </div>
                     <div class="tr e125" valign="top">
                        <div class="td e126">Bit1</div>
                        <div class="td e127">
                           
                           <div class="code e128">0</div>
                           
                        </div>
                        <div class="td e129">
                           
                           <div class="code e130">1</div>
                           
                        </div>
                        <div class="td e131">
                           
                           <div class="code e132">1</div>
                           
                        </div>
                        <div class="td e133">
                           
                           <div class="code e134">1</div>
                           
                        </div>
                        <div class="td e135">
                           
                           <div class="code e136">0</div>
                           
                        </div>
                        <div class="td e137">
                           
                           <div class="code e138">0</div>
                           
                        </div>
                     </div>
                     <div class="tr e139" valign="top">
                        <div class="td e140">Bit2</div>
                        <div class="td e141">
                           
                           <div class="code e142">1</div>
                           
                        </div>
                        <div class="td e143">
                           
                           <div class="code e144">1</div>
                           
                        </div>
                        <div class="td e145">
                           
                           <div class="code e146">1</div>
                           
                        </div>
                        <div class="td e147">
                           
                           <div class="code e148">1</div>
                           
                        </div>
                        <div class="td e149">
                           
                           <div class="code e150">1</div>
                           
                        </div>
                        <div class="td e151">
                           
                           <div class="code e152">1</div>
                           
                        </div>
                     </div>
                     <div class="tr e153" valign="top">
                        <div class="td e154">Bit3</div>
                        <div class="td e155">
                           
                           <div class="code e156">1</div>
                           
                        </div>
                        <div class="td e157">
                           
                           <div class="code e158">1</div>
                           
                        </div>
                        <div class="td e159">
                           
                           <div class="code e160">0</div>
                           
                        </div>
                        <div class="td e161">
                           
                           <div class="code e162">0</div>
                           
                        </div>
                        <div class="td e163">
                           
                           <div class="code e164">0</div>
                           
                        </div>
                        <div class="td e165">
                           
                           <div class="code e166">1</div>
                           
                        </div>
                     </div>
                     <div class="tr e167" valign="top">
                        <div class="td e168">Bit4</div>
                        <div class="td e169">
                           
                           <div class="code e170">1</div>
                           
                        </div>
                        <div class="td e171">
                           
                           <div class="code e172">0</div>
                           
                        </div>
                        <div class="td e173">
                           
                           <div class="code e174">0</div>
                           
                        </div>
                        <div class="td e175">
                           
                           <div class="code e176">0</div>
                           
                        </div>
                        <div class="td e177">
                           
                           <div class="code e178">1</div>
                           
                        </div>
                        <div class="td e179">
                           
                           <div class="code e180">1</div>
                           
                        </div>
                     </div>
                     <div class="tr e181" valign="top">
                        <div class="td e182">Bit5</div>
                        <div class="td e183">
                           
                           <div class="code e184">1</div>
                           
                        </div>
                        <div class="td e185">
                           
                           <div class="code e186">1</div>
                           
                        </div>
                        <div class="td e187">
                           
                           <div class="code e188">0</div>
                           
                        </div>
                        <div class="td e189">
                           
                           <div class="code e190">1</div>
                           
                        </div>
                        <div class="td e191">
                           
                           <div class="code e192">1</div>
                           
                        </div>
                        <div class="td e193">
                           
                           <div class="code e194">1</div>
                           
                        </div>
                     </div>
                     <div class="tr e195" valign="top">
                        <div class="td e196">Bit6</div>
                        <div class="td e197">
                           
                           <div class="code e198">0</div>
                           
                        </div>
                        <div class="td e199">
                           
                           <div class="code e200">0</div>
                           
                        </div>
                        <div class="td e201">
                           
                           <div class="code e202">0</div>
                           
                        </div>
                        <div class="td e203">
                           
                           <div class="code e204">1</div>
                           
                        </div>
                        <div class="td e205">
                           
                           <div class="code e206">1</div>
                           
                        </div>
                        <div class="td e207">
                           
                           <div class="code e208">1</div>
                           
                        </div>
                     </div>
                     <div class="tr e209" valign="top">
                        <div class="td e210">Bit7</div>
                        <div class="td e211">
                           
                           <div class="code e212">0</div>
                           
                        </div>
                        <div class="td e213">
                           
                           <div class="code e214">0</div>
                           
                        </div>
                        <div class="td e215">
                           
                           <div class="code e216">1</div>
                           
                        </div>
                        <div class="td e217">
                           
                           <div class="code e218">1</div>
                           
                        </div>
                        <div class="td e219">
                           
                           <div class="code e220">1</div>
                           
                        </div>
                        <div class="td e221">
                           
                           <div class="code e222">0</div>
                           
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e223"> Depending on the features of a particular processor architecture, there are a number
               of algorithms for transposition to parallel bit stream form. Several of these algorithms
               employ a three-stage structure. In the first stage, the input byte stream is divided
               into a pair of half-length streams consisting of four bits for each byte, for example,
               one stream for the high nybble of each byte and another for the low nybble of each
               byte.
               In the second stage, these streams of four bits per byte are each divided into streams
               consisting of two bits per original byte, for example streams for the
               
               <div class="code e224">Bit0/Bit1</div>, 
               <div class="code e225">Bit2/Bit3</div>, 
               <div class="code e226">Bit4/Bit5</div>, and
               
               <div class="code e227">Bit6/Bit7</div> pairs. In the final stage, the streams are further subdivided
               in the individual bit streams. 
            </div>
            <div class="para e228"> Using SIMD capabilities, this process is quite efficient, with an amortized cost
               of
               1.1 CPU cycles per input byte on Intel Core 2 with SSE, or 0.6 CPU cycles per input
               byte
               on Power PC G4 with Altivec. With future advances in processor technology, this
               transposition overhead is expected to reduce, possibly taking advantage of upcoming
               parallel extract (pex) instructions on Intel technology. In the ideal, only 24
               instructions are needed to transform a block of 128 input bytes using 128-bit SSE
               registers using the inductive doubling instruction set architecture, representing
               an
               overhead of less than 0.2 instructions per input byte. 
            </div>
         </div><a name="GeneralStreamsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e229">
            <div class="title e230">General Streams</div>
            <div class="para e231">This section describes bit streams which support basic processing operations.</div><a name="DeletionMaskStreamsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e232">
               <div class="title e233">Deletion Mask Streams</div>
               <div class="para e234">DelMask (deletion mask) streams marks character code unit positions for deletion.
                  Since the deletion operation is dependency free across many stages of XML processing,
                  it is possible to simply mark and record deletion positions as deletion mask streams
                  for future processing. A single
                  invocation of a SIMD based parallel deletion algorithm can then perform the deletion
                  of
                  positions accumulated across a number of stages through a bitwise ORing of deletion
                  masks. For example, deletion arises in the replacement of predefined entities with
                  a
                  single character, such as in the replacement of the &amp;amp; entity, with the
                  &amp; character. Deletion also arises in XML
                  end-of-line handling, and CDATA section delimeter processing. Several algorithms to
                  delete bits at positions marked by DelMask are possible [
                  <div class="xref e235" linkend="u8u16"></div>]. 
               </div>
               <div class="para e236">The following table provides an example of generating a DelMask in the context of
                  bit stream based parsing of well-formed character references and predefined entities.
                  The result is the generation of a DelMask stream. 
                  <div class="table e237">
                     <div class="caption e238">
                        <div class="para e239">DelMask Stream Generation</div>
                     </div>
                     <div class="colgroup e240" span="1">
                        <div class="metaBox e241"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e508').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e508" class="metaSource" style="display:none;">                
                              &lt;col<span class="metaAttribute">align='left'
                                 </span><span class="metaAttribute">class='e241'
                                 </span><span class="metaAttribute">span='1'
                                 </span><span class="metaAttribute">valign='top'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                        <div class="metaBox e242"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e509').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e509" class="metaSource" style="display:none;">                
                              &lt;col<span class="metaAttribute">align='left'
                                 </span><span class="metaAttribute">class='e242'
                                 </span><span class="metaAttribute">span='1'
                                 </span><span class="metaAttribute">valign='top'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                     <div class="tbody e243">
                        <div class="tr e244" valign="top">
                           <div class="td e245">Input Data</div>
                           <div class="td e246">
                              
                              <div class="code e247">&amp;gt; &amp;#13; &amp;#x0a;</div>
                              
                           </div>
                        </div>
                        <div class="tr e248" valign="top">
                           <div class="td e249">GenRefs</div>
                           <div class="td e250">
                              
                              <div class="code e251">_11______________</div>
                              
                           </div>
                        </div>
                        <div class="tr e252" valign="top">
                           <div class="td e253">DecRefs</div>
                           <div class="td e254">
                              
                              <div class="code e255">_______11________</div>
                              
                           </div>
                        </div>
                        <div class="tr e256" valign="top">
                           <div class="td e257">HexRefs</div>
                           <div class="td e258">
                              
                              <div class="code e259">______________11_</div>
                              
                           </div>
                        </div>
                        <div class="tr e260" valign="top">
                           <div class="td e261">DelMask</div>
                           <div class="td e262">
                              
                              <div class="code e263">111__1111__11111_</div>
                              
                           </div>
                        </div>
                        <div class="tr e264" valign="top">
                           <div class="td e265">ErrorFlag</div>
                           <div class="td e266">
                              
                              <div class="code e267">_________________</div>
                              
                           </div>
                        </div>
                     </div>
                  </div>
                  
               </div>
            </div><a name="ErrorFlagStreamsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e268">
               <div class="title e269">Error Flag Streams </div>
               <div class="para e270">Error flag streams indicates the character code unit positions of syntactical
                  errors. XML processing examples which benefit from the marking of error positions
                  include UTF-8 character sequence validation and XML parsing [
                  <div class="xref e271" linkend="u8u16"></div>].
               </div>
               <div class="para e272">The following table provides an example of using bit streams to parse character
                  references and predefined entities which fail to meet the XML 1.0 well-formedness
                  constraints. The result is the generation of an error flag stream that marks the
                  positions of mal-formed decimal and hexical character references respectively. 
                  <div class="table e273">
                     <div class="caption e274">
                        <div class="para e275">Error Flag Stream Generation</div>
                     </div>
                     <div class="colgroup e276" span="1">
                        <div class="metaBox e277"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e574').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e574" class="metaSource" style="display:none;">                
                              &lt;col<span class="metaAttribute">align='left'
                                 </span><span class="metaAttribute">class='e277'
                                 </span><span class="metaAttribute">span='1'
                                 </span><span class="metaAttribute">valign='top'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                        <div class="metaBox e278"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e575').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e575" class="metaSource" style="display:none;">                
                              &lt;col<span class="metaAttribute">align='left'
                                 </span><span class="metaAttribute">class='e278'
                                 </span><span class="metaAttribute">span='1'
                                 </span><span class="metaAttribute">valign='top'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                     <div class="tbody e279">
                        <div class="tr e280" valign="top">
                           <div class="td e281">Input Data</div>
                           <div class="td e282">
                              
                              <div class="code e283">&amp;gt; &amp;#, &amp;#x; </div>
                              
                           </div>
                        </div>
                        <div class="tr e284" valign="top">
                           <div class="td e285">GenRefs</div>
                           <div class="td e286">
                              
                              <div class="code e287">_11___________</div>
                              
                           </div>
                        </div>
                        <div class="tr e288" valign="top">
                           <div class="td e289">DecRefs</div>
                           <div class="td e290">
                              
                              <div class="code e291">______________</div>
                              
                           </div>
                        </div>
                        <div class="tr e292" valign="top">
                           <div class="td e293">HexRefs</div>
                           <div class="td e294">
                              
                              <div class="code e295">______________</div>
                              
                           </div>
                        </div>
                        <div class="tr e296" valign="top">
                           <div class="td e297">DelMask</div>
                           <div class="td e298">
                              
                              <div class="code e299">111__11__111__</div>
                              
                           </div>
                        </div>
                        <div class="tr e300" valign="top">
                           <div class="td e301">ErrorFlag</div>
                           <div class="td e302">
                              
                              <div class="code e303">_______1____1_</div>
                              
                           </div>
                        </div>
                     </div>
                  </div>
                  
               </div>
            </div>
         </div><a name="LexicalItemStreamsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e304">
            <div class="title e305">Lexical Item Streams</div>
            <div class="para e306">Lexical item streams differ from traditional streams of tokens in that they are bit
               streams that mark the positions of tokens, whitespace or delimiters. Additional bit
               streams, such as the reference streams and callout streams, are subsequently constructed
               based on the information held within the set of lexical items streams. Differentiation
               between the actual tokens that may occur at a particular point (e.g., the different
               XML
               tokens that begin “&lt;”) may be performed using multicharacter recognizers on the
               bytestream representation [
               <div class="xref e307" linkend="CASCON08"></div>].
            </div>
            <div class="para e308">A key role of lexical item streams in XML parsing is to facilitate fast scanning
               operations. For example, a left angle bracket lexical item stream may be formed to
               identify those character code unit positions at which a “&lt;” character occurs.
               Hardware register bit scan operations may then be used by the XML parser on the left
               angle bracket stream to efficiently identify the position of the next “&lt;”. Based
               on the capabilities of current commodity processors, a single register bit scan
               operation may effectively scan up to 64 byte positions with a single instruction.
            </div>
            <div class="para e309">Overall, the construction of the full set of lexical item stream computations
               requires approximately 1.0 CPU cycles per byte when implemented for 128 positions
               at a
               time using 128-bit SSE registers on Intel Core2 processors [
               <div class="xref e310" linkend="CASCON08"></div>].
               The following table defines the core lexical item streams defined by the Parabix XML
               parser.
            </div>
            <div class="para e311">
               
               <div class="table e312">
                  <div class="caption e313">
                     <div class="para e314">Lexical item stream descriptions.</div>
                  </div>
                  <div class="tbody e315">
                     <div class="tr e316">
                        <div class="td e317" align="left"> LAngle </div>
                        <div class="td e318" align="left"> Marks the position of any left angle bracket character.</div>
                     </div>
                     <div class="tr e319">
                        <div class="td e320" align="left"> RAngle </div>
                        <div class="td e321" align="left"> Marks the position of any right angle bracket character.</div>
                     </div>
                     <div class="tr e322">
                        <div class="td e323" align="left"> LBracket </div>
                        <div class="td e324" align="left"> Marks the position of any left square bracker character.</div>
                     </div>
                     <div class="tr e325">
                        <div class="td e326" align="left"> RBracket </div>
                        <div class="td e327" align="left"> Marks the position of any right square bracket
                           character.
                        </div>
                     </div>
                     <div class="tr e328">
                        <div class="td e329" align="left"> Exclam </div>
                        <div class="td e330" align="left"> Marks the position of any exclamation mark character.</div>
                     </div>
                     <div class="tr e331">
                        <div class="td e332" align="left"> QMark </div>
                        <div class="td e333" align="left"> Marks the position of any question mark character.</div>
                     </div>
                     <div class="tr e334">
                        <div class="td e335" align="left"> Hyphen </div>
                        <div class="td e336" align="left"> Marks the position of any hyphen character.</div>
                     </div>
                     <div class="tr e337">
                        <div class="td e338" align="left"> Equals </div>
                        <div class="td e339" align="left"> Marks the position of any equal sign character.</div>
                     </div>
                     <div class="tr e340">
                        <div class="td e341" align="left"> SQuote </div>
                        <div class="td e342" align="left"> Marks the position of any single quote character.</div>
                     </div>
                     <div class="tr e343">
                        <div class="td e344" align="left"> DQuote </div>
                        <div class="td e345" align="left"> Marks the position of any double quote character.</div>
                     </div>
                     <div class="tr e346">
                        <div class="td e347" align="left"> Slash </div>
                        <div class="td e348" align="left"> Marks the position of any forward slash character</div>
                     </div>
                     <div class="tr e349">
                        <div class="td e350" align="left"> NameScan </div>
                        <div class="td e351" align="left"> Marks the position of any XML name character.</div>
                     </div>
                     <div class="tr e352">
                        <div class="td e353" align="left"> WS </div>
                        <div class="td e354" align="left"> Marks the position of any XML 1.0 whitespace character.</div>
                     </div>
                     <div class="tr e355">
                        <div class="td e356" align="left"> PI_start </div>
                        <div class="td e357" align="left"> Marks the position of the start of any processing instruction
                           at the '?' character position.
                        </div>
                     </div>
                     <div class="tr e358">
                        <div class="td e359" align="left"> PI_end </div>
                        <div class="td e360" align="left"> Marks the position of any end of any processing instruction
                           at the '&gt;' character position.
                        </div>
                     </div>
                     <div class="tr e361">
                        <div class="td e362" align="left"> CtCD_start </div>
                        <div class="td e363" align="left"> Marks the position of the start of any comment or CDATA
                           section at the '!' character position.
                        </div>
                     </div>
                     <div class="tr e364">
                        <div class="td e365" align="left"> EndTag_start </div>
                        <div class="td e366" align="left"> Marks the position of any end tag at the '/' character
                           position.
                        </div>
                     </div>
                     <div class="tr e367">
                        <div class="td e368" align="left"> CD_end </div>
                        <div class="td e369" align="left"> Marks the position of the end of any CDATA section at the '&gt;'
                           character position. 
                        </div>
                     </div>
                     <div class="tr e370">
                        <div class="td e371" align="left"> DoubleHyphen </div>
                        <div class="td e372" align="left"> Marks the position of any double hyphen character.</div>
                     </div>
                     <div class="tr e373">
                        <div class="td e374" align="left"> RefStart </div>
                        <div class="td e375" align="left"> Marks the position of any ampersand character.</div>
                     </div>
                     <div class="tr e376">
                        <div class="td e377" align="left"> Hash </div>
                        <div class="td e378" align="left"> Marks the position of any hash character.</div>
                     </div>
                     <div class="tr e379">
                        <div class="td e380" align="left"> x </div>
                        <div class="td e381" align="left"> Marks the position of any 'x' character.</div>
                     </div>
                     <div class="tr e382">
                        <div class="td e383" align="left"> Digit </div>
                        <div class="td e384" align="left"> Marks the position of any digit.</div>
                     </div>
                     <div class="tr e385">
                        <div class="td e386" align="left"> Hex </div>
                        <div class="td e387" align="left"> Marks the position of any hexidecimal character.</div>
                     </div>
                     <div class="tr e388">
                        <div class="td e389" align="left"> Semicolon </div>
                        <div class="td e390" align="left"> Marks the position of any semicolon character.</div>
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e391"> The following illustrates a number of the lexical item streams. </div>
            <div class="para e392">
               
               <div class="table e393">
                  <div class="caption e394">
                     <div class="para e395">Lexical Item Streams</div>
                  </div>
                  <div class="colgroup e396" span="1">
                     <div class="metaBox e397"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e783').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e783" class="metaSource" style="display:none;">                
                           &lt;col<span class="metaAttribute">align='left'
                              </span><span class="metaAttribute">class='e397'
                              </span><span class="metaAttribute">span='1'
                              </span><span class="metaAttribute">valign='top'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                     <div class="metaBox e398"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e784').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e784" class="metaSource" style="display:none;">                
                           &lt;col<span class="metaAttribute">align='left'
                              </span><span class="metaAttribute">class='e398'
                              </span><span class="metaAttribute">span='1'
                              </span><span class="metaAttribute">valign='top'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
                  <div class="tbody e399">
                     <div class="tr e400" valign="top">
                        <div class="td e401">Input Data</div>
                        <div class="td e402">
                           
                           <div class="code e403">&lt;tag&gt;&lt;tag&gt; text &amp;lt;
                              &amp;#x3e; &lt;/tag&gt;&lt;/tag&gt;
                           </div>
                           
                        </div>
                     </div>
                     <div class="tr e404" valign="top">
                        <div class="td e405">LAngle</div>
                        <div class="td e406">
                           
                           <div class="code e407">1____1______________________1_____1_____</div>
                           
                        </div>
                     </div>
                     <div class="tr e408" valign="top">
                        <div class="td e409">RAngle</div>
                        <div class="td e410">
                           
                           <div class="code e411">____1____1_______________________1_____1</div>
                           
                        </div>
                     </div>
                     <div class="tr e412" valign="top">
                        <div class="td e413">WS</div>
                        <div class="td e414">
                           
                           <div class="code e415">__________1____1____1______1____________</div>
                           
                        </div>
                     </div>
                     <div class="tr e416" valign="top">
                        <div class="td e417">RefStart</div>
                        <div class="td e418">
                           
                           <div class="code e419">________________1____1__________________</div>
                           
                        </div>
                     </div>
                     <div class="tr e420" valign="top">
                        <div class="td e421">Hex</div>
                        <div class="td e422">
                           
                           <div class="code e423">__1____1____1___________11_____1_____1__</div>
                           
                        </div>
                     </div>
                     <div class="tr e424" valign="top">
                        <div class="td e425">Semicolon</div>
                        <div class="td e426">
                           
                           <div class="code e427">___________________1______1_____________</div>
                           
                        </div>
                     </div>
                     <div class="tr e428" valign="top">
                        <div class="td e429">Slash</div>
                        <div class="td e430">
                           
                           <div class="code e431">_____________________________1_____1____</div>
                           
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
         </div><a name="UTF8ByteClassificationScopeandValidationStreamsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e432">
            <div class="title e433">UTF-8 Byte Classification, Scope and Validation Streams</div>
            <div class="para e434"> An XML parser must accept the UTF-8 encoding of Unicode [
               <div class="xref e435" linkend="XML10"></div>].
               It is a fatal error if an XML document determined to be in UTF-8 contains byte sequences
               that are not legal in that encoding. UTF-8 byte classification, scope, XML character
               validation and error flag bit streams are defined to validate UTF-8 byte sequences
               and
               support transcoding to UTF-16.
            </div><a name="UTF8ByteClassificationStreamsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e436">
               <div class="title e437">UTF-8 Byte Classification Streams</div>
               <div class="para e438">UTF-8 byte classification bit streams classify UTF-8 bytes based on their role in
                  forming single and multibyte sequences. The u8Prefix and u8Suffix bit streams
                  identify bytes that represent, respectively, prefix or suffix bytes of multibyte
                  UTF-8 sequences. The u8UniByte bit stream identifies those bytes that may be
                  considered single-byte sequences. The u8Prefix2, u8Prefix3, and u8Prefix4 refine the
                  u8Prefix respectively indicating prefixes of two, three or four byte
                  sequences respectively.
               </div>
            </div><a name="UTF8ScopeStreamsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e439">
               <div class="title e440">UTF-8 Scope Streams</div>
               <div class="para e441"> Scope streams represent expectations established by UTF-8 prefix bytes. For
                  example, the u8Scope22 bit stream represents the positions at which the second byte
                  of a
                  two-byte sequence is expected based on the occurrence of a two-byte prefix in the
                  immediately preceding position. The u8scope32, u8Scope33, u8Scope42, u8scope43, and
                  u8Scope44 complete the set of UTF-8 scope streams.
               </div>
               <div class="para e442"> The following example demonstrates the UTF-8 character encoding validation
                  process using parallel bit stream techniques. The result of this validation process
                  is an error flag stream identifying the positions at which errors occur.
               </div>
               <div class="para e443">
                  
                  <div class="table e444">
                     <div class="caption e445">
                        <div class="para e446">UTF-8 Scope Streams</div>
                     </div>
                     <div class="colgroup e447" span="1">
                        <div class="metaBox e448"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e877').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e877" class="metaSource" style="display:none;">                
                              &lt;col<span class="metaAttribute">align='left'
                                 </span><span class="metaAttribute">class='e448'
                                 </span><span class="metaAttribute">span='1'
                                 </span><span class="metaAttribute">valign='top'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                        <div class="metaBox e449"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e878').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e878" class="metaSource" style="display:none;">                
                              &lt;col<span class="metaAttribute">align='left'
                                 </span><span class="metaAttribute">class='e449'
                                 </span><span class="metaAttribute">span='1'
                                 </span><span class="metaAttribute">valign='top'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                     <div class="tbody e450">
                        <div class="tr e451" valign="top">
                           <div class="td e452">Input Data</div>
                           <div class="td e453">
                              <div class="code e454">A Text in Farsi:&nbsp;ى&nbsp;ك&nbsp;&nbsp;م&nbsp;ت&nbsp;ن&nbsp;&nbsp;ف&nbsp;ا&nbsp;ر&nbsp;س&nbsp;ى</div>
                           </div>
                        </div>
                        <div class="tr e455" valign="top">
                           <div class="td e456">High Nybbles</div>
                           <div class="td e457">
                              
                              <div class="code e458">42567726624677632D8DBDBDAD82D8DAD82D8D8</div>
                              
                           </div>
                        </div>
                        <div class="tr e459" valign="top">
                           <div class="td e460">Low Nybbles</div>
                           <div class="td e461">
                              
                              <div class="code e462">10458409E061239A099838187910968A9509399</div>
                              
                           </div>
                        </div>
                        <div class="tr e463" valign="top">
                           <div class="td e464">u8Unibyte</div>
                           <div class="td e465">
                              
                              <div class="code e466">11111111111111111__________1______1____</div>
                              
                              
                           </div>
                        </div>
                        <div class="tr e467" valign="top">
                           <div class="td e468">u8Prefix</div>
                           <div class="td e469">
                              
                              <div class="code e470">_________________1_1_1_1_1__1_1_1__1_1_</div>
                              
                           </div>
                        </div>
                        <div class="tr e471" valign="top">
                           <div class="td e472">u8Suffix</div>
                           <div class="td e473">
                              
                              <div class="code e474">__________________1_1_1_1_1__1_1_1__1_1</div>
                              
                           </div>
                        </div>
                        <div class="tr e475" valign="top">
                           <div class="td e476">u8Prefix2</div>
                           <div class="td e477">
                              
                              <div class="code e478">_________________1_1_1_1_1__1_1_1__1_1_</div>
                              
                           </div>
                        </div>
                        <div class="tr e479" valign="top">
                           <div class="td e480">u8Scope22</div>
                           <div class="td e481">
                              
                              <div class="code e482">__________________1_1_1_1_1__1_1_1__1_1</div>
                              
                              
                           </div>
                        </div>
                        <div class="tr e483" valign="top">
                           <div class="td e484">ErrorFlag</div>
                           <div class="td e485">
                              
                              <div class="code e486">_______________________________________</div>
                              
                           </div>
                        </div>
                     </div>
                  </div>
                  
                  
                  
               </div>
            </div><a name="UTF8ValidationStreamsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e487">
               <div class="title e488">UTF-8 Validation Streams</div>
               <div class="para e489"> Proper formation of UTF-8 byte sequences requires that the correct number of
                  suffix bytes always follow a UTF-8 prefix byte, and that certain illegal byte
                  combinations are ruled out. For example, sequences beginning with the prefix bytes
                  0xF5 through 0xFF are illegal as they would represent code point values above 10FFFF.
                  In addition, there are constraints on the first suffix byte following certain special
                  prefixes, namely that a suffix following the prefix 0xE0 must fall in the range
                  0xA0–0xBF, a suffix following the prefix 0xED must fall in the range 0x80–0x9F, a
                  suffix following the prefix 0xF0 must fall in the range 0x90–0xBF and a suffix
                  following the prefix 0xF4 must fall in the range 0x80–0x8F. The task of ensuring that
                  each of these constraints hold is known as UTF-8 validation. The bit streams xE0,
                  xED, xF0, xF4, xA0_xBF, x80_x9F, x90_xBF, and x80_x8F are constructed to flag the
                  aforementioned UTF-8 validation errors. The result of UTF-8 validation is a UTF-8
                  error flag bit stream contructed as the ORing of a series of UTF-8 validation tests.
                  
               </div>
            </div><a name="XMLCharacterValidationStreamsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e490">
               <div class="title e491">XML Character Validation Streams</div>
               <div class="para e492">The UTF-8 character sequences 
                  <div class="emphasis e493">0xEF 0xBF 0xBF</div> and
                  
                  <div class="emphasis e494">0xEF 0xBF 0xBE</div> correspond to the Unicode code points 0xFFFE
                  and 0xFFFF respectively. In XML 1.0, 0xFFFE and 0xFFFF represent characters outside
                  the legal XML character ranges. As such, bit streams which mark 0xEF, 0xBF, and 0xBE
                  character are constructed to flag illegal UTF-8 character sequences. 
               </div>
            </div><a name="UTF8toUTF16TranscodingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e495">
               <div class="title e496">UTF-8 to UTF-16 Transcoding</div>
               <div class="para e497">UTF-8 is often preferred for storage and data exchange, it is suitable for
                  processing, but it is significantly more complex to process than UTF-16 [
                  <div class="xref e498" linkend="Unicode"></div>]. As such, XML documents are typically encoded in UTF-8 for
                  serialization and transport, and subsequently transcoded to UTF-16 for processing
                  with programming languages such as Java and C#. Following the parallel bit stream
                  methods developed for the u8u16 transcoder, a high-performance standalone UTF-8 to
                  UTF-16 transcoder [
                  <div class="xref e499" linkend="u8u16"></div>], transcoding to UTF-16 may be achieved by
                  computing a series of 16 bit streams. One stream for each of the individual bits of
                  a
                  UTF-16 code unit. 
               </div>
               <div class="para e500">The bit streams for UTF-16 are conveniently divided into groups: the eight streams
                  u16Hi0, u16Hi1, ..., u16Hi7 for the high byte of each UTF-16 code unit and the eight
                  streams u16Lo1, ..., u16Lo7 for the low byte. Upon conversion of the parallel bit
                  stream data back to byte streams, eight sequential byte streams U16h0, U16h1, ...,
                  U16Hi7 are used for the high byte of each UTF-16 code unit, while U16Lo0, U16Lo1,...,
                  U16Lo7 are used for the corresponding low byte. Interleaving these streams then
                  produces the full UTF-16 doublebyte stream.
               </div>
            </div><a name="UTF8IndexedUTF16StreamsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e501">
               <div class="title e502">UTF-8 Indexed UTF-16 Streams</div>
               <div class="para e503">UTF-16 bit streams are initially defined in UTF-8 indexed form. That is, with sets
                  of bits in one-to-one correspondence with UTF-8 bytes. However, only one set of
                  UTF-16 bits is required for encoding two or three-byte UTF-8 sequences and only two
                  sets are required for surrogate pairs corresponding to four-byte UTF-8 sequences.
                  The
                  u8LastByte (u8UniByte , u8Scope22 , u8Scope33 , and u8Scope44 ) and u8Scope42 streams
                  mark the positions at which the correct UTF-16 bits are computed. The bit sets at
                  other positions must be deleted to compress the streams to the UTF-16 indexed form.
                  
               </div>
            </div>
         </div><a name="ControlCharacterStreamsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e504">
            <div class="title e505">Control Character Streams</div>
            <div class="para e506">The control character bit streams marks ASCII control characters in the range
               0x00-0x1F. Additional control character bit streams mark the tab, carriage return,
               line
               feed, and space character. In addition, a bit stream to mark carriage return line
               combinations is also constructed. Presently, control character bit streams support
               the
               operations of XML 1.0 character validation and XML end-of-line handling.
            </div><a name="XMLCharacterValidationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e507">
               <div class="title e508">XML Character Validation</div>
               <div class="para e509">Legal characters in XML are the tab, carriage return, and line feed characters,
                  together with all Unicode characters and excluding the surrogate blocks, as well as
                  hexadecimal OxFFFE and
                  OxFFFF [
                  <div class="xref e510" linkend="XML10"></div>]. The x00_x1F bit stream is constructed and used in
                  combination with the additional control character bit streams to flags the positions
                  of illegal control characters.
               </div>
            </div><a name="XML10EndoflineHandlingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e511">
               <div class="title e512">XML 1.0 End-of-line Handling</div>
               <div class="para e513">In XML 1.0 the two-character sequence CR LF (carriage return, line feed) as well as
                  any CR character not followed by a LF character must be converted to a single LF
                  character [
                  <div class="xref e514" linkend="XML10"></div>].
               </div>
               <div class="para e515">By defining carriage return, line feed, and carriage return line feed bit streams,
                  dentoted CR, LF and CRLF respectively, end-of-line normalization processing can be
                  performed in parallel using only a small number of logical and shift operations.
               </div>
               <div class="para e516">The following example demonstrates the generation of the CRLF deletion mask. In
                  this example, the position of all CR characters followed by LF characters are marked
                  for deletion. Isolated carriage returns are then replaced with LF characters.
                  Completion of this process satisfies the XML 1.0 end-of-line handling requirements.
                  For clarity, this example encodes input data carriage returns as
                  
                  <div class="emphasis e517">C</div> characters, whereas line feed characters are shown as
                  
                  <div class="emphasis e518">L</div> characters.
               </div>
               <div class="para e519">
                  
                  <div class="table e520">
                     <div class="caption e521">
                        <div class="para e522">XML 1.0 End-of-line Handling</div>
                     </div>
                     <div class="colgroup e523" span="1">
                        <div class="metaBox e524"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1019').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1019" class="metaSource" style="display:none;">                
                              &lt;col<span class="metaAttribute">align='left'
                                 </span><span class="metaAttribute">class='e524'
                                 </span><span class="metaAttribute">span='1'
                                 </span><span class="metaAttribute">valign='top'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                     <div class="tbody e525">
                        <div class="tr e526" valign="top">
                           <div class="td e527">Input Data</div>
                           <div class="td e528">
                              
                              <div class="code e529">first line C second line CL third line L one more C nothing
                                 left
                              </div>
                              
                           </div>
                        </div>
                        <div class="tr e530" valign="top">
                           <div class="td e531">CR</div>
                           <div class="td e532">
                              
                              <div class="code e533">-----------1-------------1------------------------1-------------</div>
                              
                           </div>
                        </div>
                        <div class="tr e534" valign="top">
                           <div class="td e535">LF</div>
                           <div class="td e536">
                              
                              <div class="code e537">--------------------------1------------1------------------------</div>
                              
                           </div>
                        </div>
                        <div class="tr e538" valign="top">
                           <div class="td e539">DelMask</div>
                           <div class="td e540">
                              
                              <div class="code e541">--------------------------1-------------------------------------</div>
                              
                           </div>
                        </div>
                     </div>
                  </div>
                  
                  
               </div>
            </div>
         </div><a name="CallOutStreamsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e542">
            <div class="title e543">Call Out Streams</div>
            <div class="para e544"> Call out bit streams mark the extents of XML markup structures such as comments,
               processing instruction and CDATA sections as well as physical structures such as character
               and
               entity references and general references.  Call out streams are also formed for logical
               markup structures such
               start tags, end tags and empty element tags. 
            </div><a name="CommentProcessingInstructionandCDATASectionCallOutStreamsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e545">
               <div class="title e546">Comment, Processing Instruction and CDATA Section Call Out Streams</div>
               <div class="para e547">Comments, processing instructions and CDATA sections call out streams, Ct_Span,
                  PI_Span and CD_Span respectively, define sections of an XML document which 
                  contain markup that is not interpreted by an XML processor. As such, the union of
                  Ct_Span, PI_Span and CD_Span streams defines the regions of non-interpreteable markup.
                  
                  The stream formed by this union is termed the CtCDPI_Mask.
               </div>
               <div class="para e548">The following tables provides an example of constructing the CtCDPI_Mask. </div>
               <div class="table e549">
                  <div class="caption e550">
                     <div class="para e551">CtCDPI Mask Generation</div>
                  </div>
                  <div class="colgroup e552" span="1">
                     <div class="metaBox e553"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1071').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1071" class="metaSource" style="display:none;">                
                           &lt;col<span class="metaAttribute">align='left'
                              </span><span class="metaAttribute">class='e553'
                              </span><span class="metaAttribute">span='1'
                              </span><span class="metaAttribute">valign='top'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                     <div class="metaBox e554"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1072').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1072" class="metaSource" style="display:none;">                
                           &lt;col<span class="metaAttribute">align='left'
                              </span><span class="metaAttribute">class='e554'
                              </span><span class="metaAttribute">span='1'
                              </span><span class="metaAttribute">valign='top'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
                  <div class="tbody e555">
                     <div class="tr e556" valign="top">
                        <div class="td e557">Input Data</div>
                        <div class="td e558">
                           <div class="code e559">&lt;?php?&gt; &lt;!-- example --&gt; &lt;![CDATA[ shift: a&lt;&lt;1 ]]&gt;</div>
                        </div>
                     </div>
                     <div class="tr e560" valign="top">
                        <div class="td e561">CD_Span</div>
                        <div class="td e562">
                           <div class="code e563">___________________________1111111111111111111111_</div>
                        </div>
                     </div>
                     <div class="tr e564" valign="top">
                        <div class="td e565">Ct_Span</div>
                        <div class="td e566">
                           <div class="code e567">___________111111111111___________________________</div>
                        </div>
                     </div>
                     <div class="tr e568" valign="top">
                        <div class="td e569">PI_Span</div>
                        <div class="td e570">
                           <div class="code e571">_11111____________________________________________</div>
                        </div>
                     </div>
                     <div class="tr e572" valign="top">
                        <div class="td e573">CtCDPI_Mask</div>
                        <div class="td e574">
                           <div class="code e575">_111111__111111111111111__111111111111111111111111</div>
                        </div>
                     </div>
                     <div class="tr e576" valign="top">
                        <div class="td e577">ErrorFlag</div>
                        <div class="td e578">
                           <div class="code e579">__________________________________________________</div>
                        </div>
                     </div>
                  </div>
               </div>
               <div class="para e580"> With the removal of all non-interpreteable markup, several phases of parallel bit
                  stream based SIMD operations may follow operating on up to 128 byte positions on
                  current commondity processors and assured of XML markup relevancy. For
                  example, with the extents identification of comments, processing instructions and
                  CDATA sections, XML names may be identified and length sorted for efficient symbol
                  table construction. 
               </div>
               <div class="para e581"> As an aside, comments and CDATA sections must first be validated to ensure
                  that comments do not contain "--" sequences and that CDATA sections do not contain
                  illegal
                  "]]&gt;" sequences prior to ignorable markup stream generation.
               </div>
            </div><a name="ReferenceCallOutStreamsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e582">
               <div class="title e583">Reference Call Out Streams</div>
               <div class="para e584">The reference call out streams are the GenRefs, DecRefs, and HexRefs streams. This
                  subset of the call out streams marks the extents of all but the closing semicolon
                  of
                  general and character references.
               </div>
               <div class="para e585">Predefined character
                  (&amp;lt;,&amp;gt;,&amp;amp;,&amp;apos;,&amp;quot;) and numeric character
                  references (&amp;#nnnn;, &amp;#xhhhh;) must be replaced by a single character
                  [
                  <div class="xref e586" linkend="XML10"></div>]. As previously shown, this subset of call out streams enables the construction of
                  a DelMask for
                  references.
               </div>
            </div><a name="TagCallOutStreamsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e587">
               <div class="title e588">Tag Call Out Streams</div>
               <div class="para e589">Whereas sequential bit scans over lexical item streams form the basis of XML
                  parsing, in the current Parabix parser a new method of parallel parsing has been
                  developed and prototyped using the concept of bitstream addition. Fundamental to this
                  method is the concept of a 
                  <div class="emphasis e590">cursor</div> stream, a bit stream marking
                  the positions of multiple parallel parses currently in process. 
               </div>
               <div class="para e591">The results of parallel parsing using the bit stream addition technique produces a
                  set of tag call out bit streams. These streams mark the extents of each start tag,
                  end tag and empty element tag. Within tags, additional streams mark start
                  and end positions for tag names, as well as attribute names and values. An error flag
                  stream marks the positions of any syntactic errors encountered during parsing.
               </div>
               <div class="para e592"> The set of tag call out streams consists of the ElemNames, AttNames, AttVals, Tags,
                  EmptyTagEnds and EndTags bit streams. The following example demonstrates the bit
                  stream output produced which from parallel parsing using bit stream addition. 
               </div>
               <div class="table e593">
                  <div class="caption e594">
                     <div class="para e595">Tag Call Out Streams</div>
                  </div>
                  <div class="colgroup e596" span="1">
                     <div class="metaBox e597"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1140').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1140" class="metaSource" style="display:none;">                
                           &lt;col<span class="metaAttribute">align='left'
                              </span><span class="metaAttribute">class='e597'
                              </span><span class="metaAttribute">span='1'
                              </span><span class="metaAttribute">valign='top'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                     <div class="metaBox e598"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1141').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1141" class="metaSource" style="display:none;">                
                           &lt;col<span class="metaAttribute">align='left'
                              </span><span class="metaAttribute">class='e598'
                              </span><span class="metaAttribute">span='1'
                              </span><span class="metaAttribute">valign='top'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
                  <div class="tbody e599">
                     <div class="tr e600" valign="top">
                        <div class="td e601">Input Data</div>
                        <div class="td e602">
                           
                           <div class="code e603">&lt;root&gt;&lt;t1&gt;text&lt;/t1&gt;&lt;t2
                              a1='foo' a2 =
                              'fie'&gt;more&lt;/t2&gt;&lt;tag3
                              att3='b'/&gt;&lt;/root&gt;
                           </div>
                           
                        </div>
                     </div>
                     <div class="tr e604" valign="top">
                        <div class="td e605">ElemNames</div>
                        <div class="td e606">
                           
                           <div class="code e607">_1111__11___________11_______________________________1111__________________</div>
                           
                        </div>
                     </div>
                     <div class="tr e608" valign="top">
                        <div class="td e609">AttNames</div>
                        <div class="td e610">
                           
                           <div class="code e611">_______________________11_______11________________________1111_____________</div>
                           
                        </div>
                     </div>
                     <div class="tr e612" valign="top">
                        <div class="td e613">AttrVals</div>
                        <div class="td e614">
                           
                           <div class="code e615">__________________________11111______11111_____________________111_________</div>
                           
                        </div>
                     </div>
                     <div class="tr e616" valign="top">
                        <div class="td e617">EmptyTagEnds</div>
                        <div class="td e618">
                           
                           <div class="code e619">___________________________________________________________________1_______</div>
                           
                        </div>
                     </div>
                     <div class="tr e620" valign="top">
                        <div class="td e621">EndTags</div>
                        <div class="td e622">
                           
                           <div class="code e623">_______________111______________________________111__________________11111_</div>
                           
                        </div>
                     </div>
                     <div class="tr e624" valign="top">
                        <div class="td e625">Start/EmptyTags</div>
                        <div class="td e626">
                           
                           <div class="code e627">_1111__11___________1111111111111111111111___________11111111111111________</div>
                           
                        </div>
                     </div>
                     <div class="tr e628" valign="top">
                        <div class="td e629">ErrorFlag</div>
                        <div class="td e630">
                           
                           <div class="code e631">___________________________________________________________________________</div>
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </div>
      </div><a name="SIMDBeyondBitstreams:NamesandNumbersANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e632">
         <div class="title e633">SIMD Beyond Bitstreams: Names and Numbers</div>
         <div class="para e634">Whereas the fundamental innovation of our work is the use of SIMD technology in
            implementing parallel bit streams for XML, there are also important ways in which
            more
            traditional byte-oriented SIMD operations can be useful in accelerating other aspects
            of
            XML processing.
         </div><a name="NameLookupANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e635">
            <div class="title e636">Name Lookup</div>
            <div class="para e637">Efficient symbol table mechanisms for looking up element and attribute names is
               important for almost all XML processing applications. It is also an important technique
               merely for assessing well-formedness of an XML document; rather than validating the
               character-by-character composition of each occurrence of an XML name as it is
               encountered, it is more efficient to validate all but the first occurrence by first
               determining whether the name already exists in a table of prevalidated names.
            </div>
            <div class="para e638">The first symbol table mechanism deployed in the Parabix parser simply used the
               hashmaps of the C++ standard template library, without deploying any SIMD technology.
               However, with the overhead of character validation, transcoding and parsing dramatically
               reduced by parallel bit stream technology, we found that symbol lookups then accounted
               for about half of the remaining execution time in a statistics gathering application
               [
               <div class="xref e639" linkend="CASCON08"></div>]. Thus, symbol table processing was identified as a major
               target for further performance improvement. 
            </div>
            <div class="para e640"> Our first effort to improve symbol table performance was to employ the splash tables
               with cuckoo hashing as described by Ross [
               <div class="xref e641" linkend="Ross06"></div>], using SIMD
               technology for parallel bucket processing. Although this technique did turn out to
               have
               the advantage of virtually constant-time performance even for very large vocabularies,
               it was not particularly helpful for the relatively small vocabularies typically found
               in
               XML document processing. 
            </div>
            <div class="para e642"> However, a second approach has been found to be quite useful, taking advantage of
               parallel bit streams for cheap determination of symbol length. In essence, the length
               of
               a name can be determined very cheaply using a single bit scan operation. This then
               makes
               it possible to use length-sorted symbol table processing, as follows. First, the
               occurrences of all names are stored in arrays indexed by length. Then the length-sorted
               arrays may each be inserted into the symbol table in turn. The advantage of this is
               that
               a separate loop may be written for each length. Length sorting makes for very efficient
               name processing. For example hash value computations and name comparisons can be made
               by
               loading multibyte values and performing appropriate shifting and masking operations,
               without the need for a byte-at-a-time loop. In initial experiments, this length-sorting
               approach was found to reduce symbol lookup cost by a factor of two. 
            </div>
            <div class="para e643"> Current research includes the application of SIMD technology to further enhance the
               performance of length-sorted lookup. We have identified a promising technique for
               parallel processing of multiple name occurrences using a parallel trie lookup technique.
               Given an array of occurrences of names of a particular length, the first one, two
               or
               four bytes of each name are gathered and stored in a linear array. SIMD techniques
               are
               then used to compare these prefixes with the possible prefixes for the current position
               within the trie. In general, a very small number of possibilities exist for each trie
               node, allowing for fast linear search through all possibilities. Typically, the
               parallelism is expected to exceed the number of possibilities to search through at
               each
               node. With length-sorting to separate the top-level trie into many small subtries,
               we
               expect only a single step of symbol lookup to be needed in most practical instances.
               
            </div>
            <div class="para e644">The gather step of this algorithm is actually a common technique in SIMD processing.
               Instruction set support for gather operations is a likely future direction for SIMD
               technology.
            </div>
         </div><a name="NumericProcessingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e645">
            <div class="title e646">Numeric Processing</div>
            <div class="para e647"> Many XML applications involve numeric data fields as attribute values or element
               content. Although most current XML APIs uniformly return information to applications
               in
               the form of character strings, it is reasonable to consider direct API support for
               numeric conversions within a high-performance XML engine. With string to numeric
               conversion such a common need, why leave it to application programmers? 
            </div>
            <div class="para e648"> High-performance string to numeric conversion using SIMD operations also can
               considerably outperform the byte-at-a-time loops that most application programmers
               or
               libraries might employ. A first step is reduction of ASCII bytes to corresponding
               decimal nybbles using a SIMD packing operation. Then an inductive doubling algorithm
               using SIMD operations may be employed. First, 16 sets of adjacent nybble values in
               the
               range 0-9 can be combined in just a few SIMD operations to 16 byte values in the range
               0-99. Then 8 sets of byte values may similarly be combined with further SIMD processing
               to produce doublebyte values in the range 0-9999. Further combination of doublebyte
               values into 32-bit integers and so on can also be performed using SIMD operations.
               
            </div>
            <div class="para e649"> Using appropriate gather operations to bring numeric strings into appropriate array
               structures, an XML engine could offer high-performance numeric conversion services
               to
               XML application programmers. We expect this to be an important direction for our future
               work, particularly in support of APIs that focus on direct conversion of XML data
               into
               business objects. 
            </div>
         </div>
      </div><a name="APIsandParallelBitStreamsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e650">
         <div class="title e651">APIs and Parallel Bit Streams</div><a name="TheILAXStreamingAPIANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e652">
            <div class="title e653">The ILAX Streaming API</div>
            <div class="para e654">The In-Line API for XML (ILAX) is the base API provided with the Parabix parser. It
               is intended for low-level extensions compiled right into the engine, with minimum
               possible overhead. It is similar to streaming event-based APIs such as SAX, but
               implemented by inline substitution rather than using callbacks. In essence, an extension
               programmer provides method bodies for event-processing methods declared internal to
               the
               Parabix parsing engine, compiling the event processing code directly with the core
               code
               of the engine. 
            </div>
            <div class="para e655"> Although ILAX can be used directly for application programming, its primary use is
               for implementing engine extensions that support higher-level APIs. For example, the
               implementation of C or C++ based streaming APIs based on the Expat [
               <div class="xref e656" linkend="Expat"></div>] or general SAX models can be quite directly implemented. C/C++ DOM
               or other tree-based APIs can also be fairly directly implemented. However, delivering
               Parabix performance to Java-based XML applications is challenging due to the
               considerable overhead of crossing the Java Native Interface (JNI) boundary. This issue
               is addressed with the Array Set Model (ASM) concept discussed in the following section.
               
            </div>
            <div class="para e657"> With the recent development of parallel parsing using bitstream addition, it is
               likely that the underlying ILAX interface of Parabix will change. In essence, ILAX
               suffers the drawback of all event-based interfaces: they are fundamentally sequential
               in
               number. As research continues, we expect efficient parallel methods building on parallel
               bit stream foundations to move up the stack of XML processing requirements. Artificially
               imposing sequential processing is thus expected to constrain further advances in XML
               performance. 
            </div>
         </div><a name="EfficientXMLinJavaUsingArraySetModelsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e658">
            <div class="title e659">Efficient XML in Java Using Array Set Models</div>
            <div class="para e660"> In our GML-to-SVG case study, we identified the lack of high-performance XML
               processing solutions for Java to be of particular interest. Java byte code does not
               provide access to the SIMD capabilities of the underlying machine architecture. Java
               just-in-time compilers might be capable of using some SIMD facilities, but there is
               no
               real prospect of conventional compiler technology translating byte-at-a-time algorithms
               into parallel bit stream code. So the primary vehicle for delivering high-performance
               XML processing is to call native parallel bit stream code written in C through JNI
               capabilities. 
            </div>
            <div class="para e661">However, each JNI call is expensive, so it is desirable to minimize the number of
               calls and get as much work done during each call as possible. This mitigates against
               direct implementation of streaming APIs in Java through one-to-one mappings to an
               underlying streaming API in C. Instead, we have concentrated on gathering information
               on
               the C side into data structures that can then be passed to the Java side. However,
               using
               either C pointer-based structures or C++ objects is problematic because these are
               difficult to interpret on the Java side and are not amenable to Java's automatic storage
               management system. Similarly, Java objects cannot be conveniently created on the C
               side.
               However, it is possible to transfer arrays of simple data values (bytes or integers)
               between C and Java, so that makes a reasonable focus for bulk data communication between
               C and Java. 
            </div>
            <div class="para e662">
               <div class="emphasis e663">Array Set Models</div> are array-based representations of information
               representing an XML document in accord with XML InfoSet [
               <div class="xref e664" linkend="InfoSet"></div>] or
               other XML data models relevant to particular APIs. As well as providing a mechanism
               for
               efficient bulk data communication across the JNI boundary, ASMs potentially have a
               number of other benefits in high-performance XML processing. 
               <div class="itemizedlist e665">
                  <div class="listitem e666">
                     <div class="para e667">Prefetching. Commodity processors commonly support hardware and/or software
                        prefetching to ensure that data is available in a processor cache when it is
                        needed. In general, prefetching is most effective in conjunction with the
                        continuous sequential memory access patterns associated with array
                        processing.
                     </div>
                  </div>
                  <div class="listitem e668">
                     <div class="para e669">DMA. Some processing environments provide Direct Memory Access (DMA)
                        controllers for block data movement in parallel with computation. For example,
                        the Cell Broadband Engine uses DMA controllers to move the data to and from the
                        local stores of the synergistic processing units. Arrays of contiguous data
                        elements are well suited to bulk data movement using DMA.
                     </div>
                  </div>
                  <div class="listitem e670">
                     <div class="para e671">SIMD. Single Instruction Multiple Data (SIMD) capabilities of modern
                        processor instruction sets allow simultaneous application of particular
                        instructions to sets of elements from parallel arrays. For effective use of
                        SIMD capabilities, an SoA (Structure of Arrays) model is preferrable to an AoS
                        (Array of Structures) model. 
                     </div>
                  </div>
                  <div class="listitem e672">
                     <div class="para e673">Multicore processors. Array-oriented processing can enable the effective
                        distribution of work to the individual cores of a multicore system in two
                        distinct ways. First, provided that sequential dependencies can be minimized or
                        eliminated, large arrays can be divided into separate segments to be processed
                        in parallel on each core. Second, pipeline parallelism can be used to implement
                        efficient multipass processing with each pass consisting of a processing kernel
                        with array-based input and array-based output. 
                     </div>
                  </div>
                  <div class="listitem e674">
                     <div class="para e675">Streaming buffers for large XML documents. In the event that an XML document
                        is larger than can be reasonably represented entirely within processor memory,
                        a buffer-based streaming model can be applied to work through a document using
                        sliding windows over arrays of elements stored in document order. 
                     </div>
                  </div>
               </div>
               
            </div><a name="SaxonBTinyTreeExampleANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e676">
               <div class="title e677">Saxon-B TinyTree Example</div>
               <div class="para e678">As a first example of the ASM concept, current work includes a proof-of-concept to
                  deliver a high-performance replacement for building the TinyTree data structure used
                  in Saxon-B 6.5.5, an open-source XSLT 2.0 processor written in Java [
                  <div class="xref e679" linkend="Saxon"></div>]. Although XSLT stylesheets may be cached for performance, the
                  caching of source XML documents is typically not possible. A new TinyTree object to
                  represent the XML source document is thus commonly constructed with each new query
                  so
                  that the overall performance of simple queries on large source XML documents is
                  highly dependent on TinyTree build time. Indeed, in a study of Saxon-SA, the
                  commercial version of Saxon, query time was shown to be dominated by TinyTree build
                  time [
                  <div class="xref e680" linkend="Kay08"></div>]. Similar performance results are demonstrable for the
                  Saxon-B XSLT processor as well. 
               </div>
               <div class="para e681"> The Saxon-B processor studied is a pure Java solution, converting a SAX (Simple
                  API for XML) event stream into the TinyTree Java object using the efficient Aelfred
                  XML parser [
                  <div class="xref e682" linkend="AElfred"></div>]. The TinyTree structure is itself an
                  array-based structure mapping well suited to the ASM concept. It consists of six
                  parallel arrays of integers indexed on node number and containing one entry for each
                  node in the source document, with the exception of attribute and namespace nodes
                  [
                  <div class="xref e683" linkend="Saxon"></div>]. Four of the arrays respectively provide node kind, name
                  code, depth, and next sibling information for each node, while the two others are
                  overloaded for different purposes based on node kind value. For example, in the
                  context of a text node , one of the overloaded arrays holds the text buffer offset
                  value whereas the other holds the text buffer length value. Attributes and namespaces
                  are represented using similiar parallel array of values. The stored TinyTree values
                  are primarily primitive Java types, however, object types such as Java Strings and
                  Java StringBuffers are also used to hold attribute values and comment values
                  respectively. 
               </div>
               <div class="para e684"> In addition to the TinyTree object, Saxon-B maintains a NamePool object which
                  represents a collection of XML name triplets. Each triplet is composed of a Namespace
                  URI, a Namespace prefix and a local name and encoded as an integer value known as
                  a
                  namecode. Namecodes permit efficient name search and look-up using integer
                  comparison. Namecodes may also be subsequently decoded to recover namespace and local
                  name information. 
               </div>
               <div class="para e685"> Using the Parabix ILAX interface, a high-performance reimplementation of TinyTree
                  and NamePool data structures was built to compare with the Saxon-B implementation.
                  In
                  fact, two functionally equivalent versions of the ASM java class were constructed.
                  An
                  initial version was constructed based on a set of primitive Java arrays constructed
                  and allocated in the Java heap space via JNI New&lt;PrimitiveType&gt;Array
                  method call. In this version, the JVM garbage collector is aware of all memory
                  allocated in the native code. However, in this approach, large array copy operations
                  limited overall performance to approximately a 2X gain over the Saxon-B build time.
                  
               </div>
               <div class="para e686">To further address the performance penalty imposed by copying large array values,
                  a second version of the ASM Java object was constructed based on natively backed
                  Direct Memory Byte Buffers [
                  <div class="xref e687" linkend="JNI"></div>]. In this version the JVM garbage
                  collector is unaware any native memory resources backing the Direct Memory Byte
                  Buffers. Large JNI-based copy operations are avoided; however, system memory must
                  be
                  explicitly deallocated via a Java native method call. Using this approach, our
                  preliminary results show an approximate total 2.5X gain over Saxon-B build time.
                  
               </div>
            </div>
         </div>
      </div><a name="CompilerTechnologyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e688">
         <div class="title e689">Compiler Technology</div>
         <div class="para e690"> An important focus of our recent work is on the development of compiler technology
            to
            automatically generate the low-level SIMD code necessary to implement bit stream processing
            given suitable high-level specifications. This has several potential benefits. First,
            it
            can eliminate the tedious and error-prone programming of bit stream operations in
            terms of
            register-at-a-time SIMD operations. Second, compilation technology can automatically
            employ
            a variety of performance improvement techniques that are difficult to apply manually.
            These
            include algorithms for instruction scheduling and register allocation as well as
            optimization techniques for common subexpression expression elimination and register
            rematerialization among others. Third, compiler technology makes it easier to make
            changes
            to the low-level code for reasons of perfective or adaptive maintenance.
         </div>
         <div class="para e691">Beyond these reasons, compiler technology also offers the opportunity for retargetting
            the generation of code to accommodate different processor architectures and API
            requirements. Strategies for efficient parallel bit stream code can vary considerably
            depending on processor resources such as the number of registers available, the particular
            instruction set architecture supported, the size of L1 and L2 data caches, the number
            of
            available cores and so on. Separate implementation of custom code for each processor
            architecture would thus be likely to be prohibitively expensive, prone to errors and
            inconsistencies and difficult to maintain. Using compilation technology, however,
            the idea
            would be to implement a variety of processor-specific back-ends all using a common
            front
            end based on parallel bit streams. 
         </div><a name="CharacterClassCompilerANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e692">
            <div class="title e693">Character Class Compiler</div>
            <div class="para e694">The first compiler component that we have implemented is a character class compiler,
               capable of generation all the bit stream logic necessary to produce a set of lexical
               item streams each corresponding to some particular set of characters to be recognized.
               By taking advantage of common patterns between characters within classes, and special
               optimization logic for recognizing character-class ranges, our existing compiler is
               able
               to generate well-optimized code for complex sets of character classes involving numbers
               of special characters as well as characters within specific sets of ranges. 
            </div>
         </div><a name="RegularExpressionCompilationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e695">
            <div class="title e696">Regular Expression Compilation</div>
            <div class="para e697">Based on the character class compiler, we are currently investigating the
               construction of a regular expression compiler that can implement bit-stream based
               parallel regular-expression matching similar to that describe previously for parallel
               parsing by bistream addition. This compiler works with the assumption that bitstream
               regular-expression definitions are deterministic; no backtracking is permitted with
               the
               parallel bit stream representation. In XML applications, this compiler is primarily
               intended to enforce regular-expression constraints on string datatype specifications
               found in XML schema. 
            </div>
         </div><a name="UnboundedBitStreamCompilationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e698">
            <div class="title e699">Unbounded Bit Stream Compilation</div>
            <div class="para e700">The Catalog of XML Bit Streams presented earlier consist of a set of abstract,
               unbounded bit streams, each in one-to-one correspondence with input bytes of a text
               file. Determining how these bit streams are implemented using fixed-width SIMD
               registers, and possibly processed in fixed-length buffers that represent some multiple
               of the register width is a source of considerable programming complexity. The general
               goal of our compilation strategy in this case is to allow operations to be programmed
               in
               terms of unbounded bit streams and then automatically reduced to efficient low-level
               code with the application of a systematic code generation strategy for handling block
               and buffer boundary crossing. This is work currently in progress. 
            </div>
         </div>
      </div><a name="ConclusionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e701">
         <div class="title e702">Conclusion</div>
         <div class="para e703">Parallel bit stream technology offers the opportunity to dramatically speed up the
            core
            XML processing components used to implement virtually any XML API. Character validation
            and
            transcoding, whitespace processing, and parsing up to including the full validation
            of tag
            syntax can be handled fully in parallel using bit stream methods. Bit streams to mark
            the
            positions of all element names, attribute names and attribute values can also be produced,
            followed by fast bit scan operations to generate position and length values. Beyond
            bit
            streams, byte-oriented SIMD processing of names and numerals can also accelerate
            performance beyond sequential byte-at-a-time methods. 
         </div>
         <div class="para e704">Advances in processor architecture are likely to further amplify the performance of
            parallel bit stream technology over traditional byte-at-a-time processing over the
            next
            decade. Improvements to SIMD register width, register complement and operation format
            can
            all result in further gains. New SIMD instruction set features such as inductive doubling
            support, parallel extract and deposit instructions, bit interleaving and scatter/gather
            capabilities should also result in significant speed-ups. Leveraging the intraregister
            parallelism of parallel bit stream technology within SIMD registers to take of intrachip
            parallelism on multicore processors should accelerate processing further. 
         </div>
         <div class="para e705">Technology transfer using a patent-based open-source business model is a further goal
            of
            our work with a view to widespread deployment of parallel bit stream technology in
            XML
            processing stacks implementing a variety of APIs. The feasibility of substantial
            performance improvement in replacement of technology implementing existing APIs has
            been
            demonstrated even in complex software architectures involving delivery of performance
            benefits across the JNI boundary. We are seeking to accelerate these deployment efforts
            both through the development of compiler technology to reliably apply these methods
            to a
            variety of architectures as well as to identify interested collaborators using open-source
            or commercial models. 
         </div>
      </div><a name="AcknowledgmentsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e706">
         <div class="title e707">Acknowledgments</div>
         <div class="para e708">This work is supported in part by research grants and scholarships from the Natural
            Sciences and Engineering Research Council of Canada, the Mathematics of Information
            Technology and Complex Systems Network and the British Columbia Innovation Council.
            
         </div>
         <div class="para e709">We thank our colleague Dan Lin (Linda) for her work in high-performance symbol table
            processing. 
         </div>
      </div><a name="BibliographyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e710">
         <div class="title e711">Bibliography</div>
         <div class="bibliomixed e712" xml:id="XMLChip09" xreflabel="Leventhal and Lemoine 2009">Leventhal, Michael and
            Eric Lemoine 2009. The XML chip at 6 years. Proceedings of International Symposium
            on
            Processing XML Efficiently 2009, Montréal. doi: 
            <div class="biblioid doi e713">10.4242/BalisageVol4.Leventhal01</div>.
         </div>
         <div class="bibliomixed e714" xml:id="Datapower09" xreflabel="Salz, Achilles and Maze 2009">Salz, Richard,
            Heather Achilles, and David Maze. 2009. Hardware and software trade-offs in the IBM
            DataPower XML XG4 processor card. Proceedings of International Symposium on Processing
            XML
            Efficiently 2009, Montréal. doi: 
            <div class="biblioid doi e715">10.4242/BalisageVol4.Salz01</div>.
         </div>
         <div class="bibliomixed e716" xml:id="PPoPP08" xreflabel="Cameron 2007">Cameron, Robert D. 2007. A Case Study
            in SIMD Text Processing with Parallel Bit Streams UTF-8 to UTF-16 Transcoding. Proceedings
            of 13th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming 2008,
            Salt
            Lake City, Utah. On the Web at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e717" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://research.ihost.com/ppopp08/</div>. doi: 
            <div class="biblioid doi e718">10.1145/1345206.1345222</div>.
         </div>
         <div class="bibliomixed e719" xml:id="CASCON08" xreflabel="Cameron, Herdy and Lin 2008">Cameron, Robert D.,
            Kenneth S Herdy, and Dan Lin. 2008. High Performance XML Parsing Using Parallel Bit
            Stream
            Technology. Proceedings of CASCON 2008. 13th ACM SIGPLAN Symposium on Principles and
            Practice of Parallel Programming 2008, Toronto. doi: 
            <div class="biblioid doi e720">10.1145/1463788.1463811</div>.
         </div>
         <div class="bibliomixed e721" xml:id="SVGOpen08" xreflabel="Herdy, Burggraf and Cameron 2008">Herdy, Kenneth
            S., Robert D. Cameron and David S. Burggraf. 2008. High Performance GML to SVG
            Transformation for the Visual Presentation of Geographic Data in Web-Based Mapping
            Systems.
            Proceedings of SVG Open 6th International Conference on Scalable Vector Graphics,
            Nuremburg. On the Web at
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e722" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.svgopen.org/2008/papers/74-HighPerformance_GML_to_SVG_Transformation_for_the_Visual_Presentation_of_Geographic_Data_in_WebBased_Mapping_Systems/</div>.
         </div>
         <div class="bibliomixed e723" xml:id="Ross06" xreflabel="Ross 2006">Ross, Kenneth A. 2006. Efficient hash
            probes on modern processors. Proceedings of ICDE, 2006. ICDE 2006, Atlanta. On the
            Web at
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e724" xlink:actuate="onRequest" xlink:href="http://www1.cs.columbia.edu/~kar/pubsk/icde2007.pdf" xlink:show="new" xlink:type="simple">http://www1.cs.columbia.edu/~kar/pubsk/icde2007.pdf</div>.
         </div>
         <div class="bibliomixed e725" xml:id="ASPLOS09" xreflabel="Cameron and Lin 2009">Cameron, Robert D. and Dan
            Lin. 2009. Architectural Support for SWAR Text Processing with Parallel Bit Streams:
            The
            Inductive Doubling Principle. Proceedings of ASPLOS 2009, Washington, DC. doi: 
            <div class="biblioid doi e726">10.1145/1508244.1508283</div>.
         </div>
         <div class="bibliomixed e727" xml:id="Wu08" xreflabel="Wu et al. 2008">Wu, Yu, Qi Zhang, Zhiqiang Yu and
            Jianhui Li. 2008. A Hybrid Parallel Processing for XML Parsing and Schema Validation.
            Proceedings of Balisage 2008, Montréal. On the Web at
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e728" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.balisage.net/Proceedings/vol1/html/Wu01/BalisageVol1-Wu01.html</div>. doi: 
            <div class="biblioid doi e729">10.4242/BalisageVol1.Wu01</div>.
         </div>
         <div class="bibliomixed e730" xml:id="u8u16" xreflabel="Cameron 2008">u8u16 - A High-Speed UTF-8 to UTF-16
            Transcoder Using Parallel Bit Streams Technical Report 2007-18. 2007. School of Computing
            Science Simon Fraser University, June 21 2007.
         </div>
         <div class="bibliomixed e731" xml:id="XML10" xreflabel="XML 1.0">Extensible Markup Language (XML) 1.0 (Fifth
            Edition) W3C Recommendation 26 November 2008. On the Web at
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e732" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/REC-xml/</div>.
         </div>
         <div class="bibliomixed e733" xml:id="Unicode" xreflabel="Unicode">The Unicode Consortium. 2009. On the Web at
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e734" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://unicode.org/</div>.
         </div>
         <div class="bibliomixed e735" xml:id="Pex06" xreflabel="Hilewitz and Lee 2006"> Hilewitz, Y. and Ruby B. Lee.
            2006. Fast Bit Compression and Expansion with Parallel Extract and Parallel Deposit
            Instructions. Proceedings of the IEEE 17th International Conference on Application-Specific
            Systems, Architectures and Processors (ASAP), pp. 65-72, September 11-13, 2006. doi:
            
            <div class="biblioid doi e736">10.1109/ASAP.2006.33</div>.
         </div>
         <div class="bibliomixed e737" xml:id="InfoSet" xreflabel="XML Infoset">XML Information Set (Second Edition) W3C
            Recommendation 4 February 2004. On the Web at
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e738" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xml-infoset/</div>.
         </div>
         <div class="bibliomixed e739" xml:id="Saxon" xreflabel="Saxon">SAXON The XSLT and XQuery Processor. On the Web
            at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e740" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://saxon.sourceforge.net/</div>.
         </div>
         <div class="bibliomixed e741" xml:id="Kay08" xreflabel="Kay 2008"> Kay, Michael Y. 2008. Ten Reasons Why Saxon
            XQuery is Fast, IEEE Data Engineering Bulletin, December 2008.
         </div>
         <div class="bibliomixed e742" xml:id="AElfred" xreflabel="Ælfred"> The Ælfred XML Parser. On the Web at
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e743" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://saxon.sourceforge.net/aelfred.html</div>.
         </div>
         <div class="bibliomixed e744" xml:id="JNI" xreflabel="Hitchens 2002">Hitchens, Ron. Java NIO. O'Reilly, 2002.</div>
         <div class="bibliomixed e745" xml:id="Expat" xreflabel="Expat">The Expat XML Parser.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e746" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://expat.sourceforge.net/</div>.
         </div>
      </div>
   </div>
</div>