<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#TagAlANCHOR" name="TagAlTOC">TagAl</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#Digitaldocuments:RepresentationalformsandoperationsANCHOR" name="Digitaldocuments:RepresentationalformsandoperationsTOC">Digital documents: Representational forms and operations</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#TheOverlapProblemANCHOR" name="TheOverlapProblemTOC">The Overlap Problem</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AlternatelinearformsANCHOR" name="AlternatelinearformsTOC">Alternate linear forms</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AlternatedocumentmodelsANCHOR" name="AlternatedocumentmodelsTOC">Alternate document models</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#StandoffmarkupANCHOR" name="StandoffmarkupTOC">Stand-off markup</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TransformationalgorithmsANCHOR" name="TransformationalgorithmsTOC">Transformation algorithms</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#TheideaofatagalgebraANCHOR" name="TheideaofatagalgebraTOC">The idea of a tag algebra</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BracketednotationsandmatchingANCHOR" name="BracketednotationsandmatchingTOC">Bracketed notations and matching</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#DocumentlatticesANCHOR" name="DocumentlatticesTOC">Document lattices</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BuildingdocumentmodelsfromlatticesANCHOR" name="BuildingdocumentmodelsfromlatticesTOC">Building document models from lattices</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ModelingdocumentswithoutoverlapANCHOR" name="ModelingdocumentswithoutoverlapTOC">Modeling documents without overlap</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ModelingdocumentswithoverlapANCHOR" name="ModelingdocumentswithoverlapTOC">Modeling documents with overlap</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#WellformednessANCHOR" name="WellformednessTOC">Well-formedness</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ConcludingremarksANCHOR" name="ConcludingremarksTOC">Concluding remarks</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#AlgebraiccharacterizationANCHOR" name="AlgebraiccharacterizationTOC">Algebraic characterization</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#MeetandjoinANCHOR" name="MeetandjoinTOC">Meet and join</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AreM(D)andO(D)lattices?ANCHOR" name="AreM(D)andO(D)lattices?TOC">Are M(D) and O(D) lattices?</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ClosureANCHOR" name="ClosureTOC">Closure</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#SpuriousoverlapANCHOR" name="SpuriousoverlapTOC">Spurious overlap</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConclusionANCHOR" name="ConclusionTOC">Conclusion</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#AppendixANCHOR" name="AppendixTOC">Appendix</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ReferencesANCHOR" name="ReferencesTOC">References</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">as well as all their relatives</div>
         <div class="singletermTERMS">August 2 - 5, 2011</div>
         <div class="singletermTERMS">Associate Professor</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">Balisage Series on Markup Technologies</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2011</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">Colorful XML: one hierarchy isn't enough</div>
         <div class="singletermTERMS">containment</div>
         <div class="singletermTERMS">Computers and the Humanities</div>
         <div class="singletermTERMS">claus.huitfeldt@uib.no</div>
         <div class="singletermTERMS">Claus</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">element</div>
         <div class="singletermTERMS">Extreme Markup Languages</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">hfolg@uib.no</div>
         <div class="singletermTERMS">Huitfeldt</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">i+1</div>
         <div class="singletermTERMS">International Journal of Human-Computer Studies</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
         <div class="singletermTERMS">Johnsen</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">Lemma on string splitting</div>
         <div class="singletermTERMS">Language Resources and Evaluation</div>
         <div class="singletermTERMS">Lars</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">match</div>
         <div class="singletermTERMS">Markup overlap: A review and a horse</div>
         <div class="singletermTERMS">Making CONCUR work</div>
         <div class="singletermTERMS">MECS - A Multi-Element Code System</div>
         <div class="singletermTERMS">Markup Reconsidered</div>
         <div class="singletermTERMS">minimal node</div>
         <div class="singletermTERMS">min</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">nesting</div>
         <div class="singletermTERMS">Non-hierarchical Structures</div>
         <div class="singletermTERMS">not</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">P→()</div>
         <div class="singletermTERMS">P→(P)</div>
         <div class="singletermTERMS">P→PP</div>
         <div class="singletermTERMS">P→P*</div>
         <div class="singletermTERMS">Ps</div>
         <div class="singletermTERMS">Partial Parsing via Finite-State Cascades</div>
         <div class="singletermTERMS">Proceedings of Extreme Markup Languages®</div>
         <div class="singletermTERMS">Proceedings of Extreme Markup Languages</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">relatives</div>
         <div class="singletermTERMS">rel</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">S=XYZ</div>
         <div class="singletermTERMS">S'</div>
         <div class="singletermTERMS">S'=X'Y'Z'</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">TEI HORSEing around</div>
         <div class="singletermTERMS">The NITE XML Toolkit: data model and query</div>
         <div class="singletermTERMS">Towards validation of concurrent markup</div>
         <div class="singletermTERMS">The Layered Markup and Annotation Language (LMNL)</div>
         <div class="singletermTERMS">token</div>
         <div class="singletermTERMS">The SGML Handbook</div>
         <div class="singletermTERMS">The New Review of Hypermedia and Multimedia</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">X₂ Y₄ Z₇</div>
         <div class="singletermTERMS">X'</div>
         <div class="singletermTERMS">XYZ</div>
         <div class="singletermTERMS">X'Y'Z'</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
         <div class="singletermTERMS">Y'</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
         <div class="singletermTERMS">Z'</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="TagAlANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3" xml:id="HR-23632987-8973">
      <div class="title e1">TagAl</div>
      <div class="subtitle e2">A tag algebra for document markup</div>
      <div class="info e3">
         <div class="confgroup e4">
            <div class="conftitle e5">Balisage: The Markup Conference 2011</div>
            <div class="confdates e6">August 2 - 5, 2011</div>
         </div>
         <div class="abstract e7">
            <div class="para e8"> This paper takes its point of departure in an overview of the overlap problem, and
               of
               proposed solutions to that problem. We then look at some analogies between bracketed
               markup
               notations and rules for well-formedness and structuring of simple parenthetical expressions.
               We propose a method for building lattices from marked up documents with and without
               overlap,
               and for generating, from these lattices, document models in the form of trees for
               XML
               documents, and in the form of GODDAGs for documents with overlap. It turns out that
               one and
               the same method can be used for generating both kinds of models, and we argue that
               lattices
               can also be used to implement well-formedness constraints for both kinds of documents.
               Finally, we discuss and compare some of the algebraic features of the document models,
               and
               the relations between them. 
            </div>
         </div>
         <div class="author e9">
            <div class="personname e10">
               <div class="firstname e11">Lars</div>
               <div class="othername e12">G</div>
               <div class="surname e13">Johnsen</div>
            </div>
            <div class="personblurb e14">
               <div class="para e15">Lars G. Johnsen is Associate Professor of linguistics at the University of Bergen,
                  Norway.
               </div>
            </div>
            <div class="email e16">hfolg@uib.no</div>
            <div class="affiliation e17">
               <div class="jobtitle e18">Associate Professor</div>
               <div class="orgname e19">University of Bergen, Norway</div>
            </div>
         </div>
         <div class="author e20">
            <div class="personname e21">
               <div class="firstname e22">Claus</div>
               <div class="surname e23">Huitfeldt</div>
            </div>
            <div class="personblurb e24">
               <div class="para e25">Claus Huitfeldt is Associate Professor at the Department of Philosophy of the
                  University of Bergen, Norway.
               </div>
            </div>
            <div class="affiliation e26">
               <div class="jobtitle e27">Associate Professor </div>
               <div class="orgname e28">University of Bergen</div>
            </div>
            <div class="email e29">claus.huitfeldt@uib.no</div>
         </div>
         <div class="legalnotice e30">
            <div class="para e31">Copyright © 2011 by the authors.  Used with permission.</div>
         </div>
      </div><a name="Digitaldocuments:RepresentationalformsandoperationsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e32">
         <div class="title e33">Digital documents: Representational forms and operations</div>
         <div class="para e34">When computers were first used for purposes of text processing, documents were typically
            represented as linear sequences of characters. This format lends reasonable support
            to basic
            operations on documents, such as visual presentation, editing, retrieval, content
            extraction,
            linguistic and quantitative analysis, and various forms of transformation. 
         </div>
         <div class="para e35">However, the objects of such operations are not always most naturally thought of,
            or not
            easily identified, in terms of character sequences. Some operations are performed
            on
            structural partitions of documents such as sections, paragraphs, or sentences. Objects
            defined
            in terms of their thematic, linguistic, rhetorical or other properties, such as names,
            foreign
            words, high-lighted phrases etc. may also be the target of operations to be performed.
            Sometimes such objects can be identified at least indirectly in terms of properties
            of
            character sequences, but seldom reliably, 
            <div class="popupBox e36">
               <div class="popupLabel" onmouseover="$('#d1e59').show('1000');" onmouseout="$('#d1e59').hide('1000');">[ footnote ]</div>
               <div id="d1e59" style="display: none;">
                  <div class="footnote">
                     <div class="para e37">Simple examples in point are sentences, quotations, and proper names</div>
                  </div>
               </div>
            </div> and often not at all. 
         </div>
         <div class="para e38">Document markup can be seen as a response to these problems: when candidate objects
            of
            operations are explicitly marked, text processing applications are relieved of the
            burden of
            identifying them, and developers of such applications may concentrate on the operations
            to be
            performed rather than on the identification of the objects to be processed. Thus,
            marked up
            documents provide improved support for text processing, compared to documents without
            markup. 
         </div>
         <div class="para e39"> Therefore, it is perhaps only natural that with the introduction of document markup,
            the
            number and kinds of document objects that became subject of interest for processing
            increased.
            Markup languages and tools were developed not only for general purpose document publication
            and analysis, but also for more specialized purposes and document types. 
         </div>
         <div class="para e40">For a number of reasons, the markup languages which became most widely used, and the
            grammars which ultimately acquired the status of international standards for those
            languages,
            such as SGML and XML, 
            <div class="popupBox e41">
               <div class="popupLabel" onmouseover="$('#d1e69').show('1000');" onmouseout="$('#d1e69').hide('1000');">[ footnote ]</div>
               <div id="d1e69" style="display: none;">
                  <div class="footnote">
                     <div class="para e42">For convenience, we will allow ourselves to use the term "XML" in the rest of this
                        paper, also when for historical or other reasons the correct reference would be either
                        to
                        XML, or to SGML, or to both.
                     </div>
                  </div>
               </div>
            </div> were based on context-free grammars. One obvious reason was that representations
            based on context-free grammars were processable according to well known and computationally
            efficient algorithms. Over the years a plethora of general as well as special-purpose
            software
            for XML document processing has become available. 
         </div>
         <div class="para e43"> Such markup languages invite an abstract view of document structure and content,
            in which
            the "artifacts" of markup in the document in its serial form are represented in a
            more
            conspicuous way. Many or most XML processors do not actually perform operations on
            the
            document in its serialized form, but only (or largely) on a model of the document,
            usually in
            the form of a labeled directed acyclic graph. The graph is constructed from the serialized
            form of the document, and reserialized only for purposes of storage and exchange.
            Since one
            and the same graph may be represented in the form of more than one serialization,
            focus tends
            to be transferred on the graph (or, in XML terms, the document object model), rather
            than the
            serial form of the document. 
         </div>
      </div><a name="TheOverlapProblemANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e44">
         <div class="title e45">The Overlap Problem</div>
         <div class="para e46"> The coincidence of the two factors mentioned above (i.e. the increasing interest
            in
            marking up more and more aspects of documents, and the fact that available systems
            were based
            on context-free grammars) lead to a number of closely related problems which are now
            commonly
            referred to as "the overlap problem". 
            <div class="popupBox e47">
               <div class="popupLabel" onmouseover="$('#d1e80').show('1000');" onmouseout="$('#d1e80').hide('1000');">[ footnote ]</div>
               <div id="d1e80" style="display: none;">
                  <div class="footnote">
                     <div class="para e48">The one problem which has received most attention in the literature is the difficulty
                        or inconvenience of representing overlapping elements in XML. There are related problems
                        pertaining to the representation of discontinuous elements and alternate ordering
                        of
                        elements, which we do not address in this paper. We do believe, however, that the
                        general
                        strategy outlined here could also be adopted in order to get a better grip on these
                        problems.
                     </div>
                  </div>
               </div>
            </div> On the one hand, the obvious advantages of markup lead to interest in marking up
            a
            wide variety of aspects of document structure, often necessitating different segmentations
            of
            one and the same document. On the other hand, standard markup systems did not provide
            a
            straight-forward and natural way of representing such competing or conflicting segmentations.
            
            <div class="popupBox e49">
               <div class="popupLabel" onmouseover="$('#d1e84').show('1000');" onmouseout="$('#d1e84').hide('1000');">[ footnote ]</div>
               <div id="d1e84" style="display: none;">
                  <div class="footnote">
                     <div class="para e50"> An important exception on this point is the SGML CONCUR feature, which did provide
                        a
                        mechanism for the encoding of concurrent hierarchies. Unfortunately, CONCUR was never
                        widely supported by SGML implementations, and was not carried over to XML. However
                        see
                        [
                        <div class="xref e51" linkend="Schonefeld2007"></div>]. 
                     </div>
                  </div>
               </div>
            </div> So although marked up documents provide better support for a broad range of
            processing purposes than documents without markup, the introduction of markup also
            lead to a
            number of problems one did not have much means or motivation to identify or formulate
            before
            the introduction of markup. 
         </div>
         <div class="para e52">The so-called overlap problem was identified fairly early, and the literature of proposed
            solutions goes more than 30 years back in time. 
            <div class="popupBox e53">
               <div class="popupLabel" onmouseover="$('#d1e92').show('1000');" onmouseout="$('#d1e92').hide('1000');">[ footnote ]</div>
               <div id="d1e92" style="display: none;">
                  <div class="footnote">
                     <div class="para e54">See e.g. [
                        <div class="xref e55" linkend="Barnardetal.1988"></div>], [
                        <div class="xref e56" linkend="Barnardetal.1995"></div>], [
                        <div class="xref e57" linkend="DeRose2004"></div>], and [
                        <div class="xref e58" linkend="Witt2005"></div>].
                        We cannot and do not attempt a full overview of the literature in this paper, but
                        only to
                        point to some of the main courses among various approaches to the problem. 
                     </div>
                  </div>
               </div>
            </div> The responses to the problem may be said to fall largely in four groups: 1)
            Alternate linear forms, 2) Alternate document models, 3) Stand-off markup, and 4)
            Transformation algorithms. 
         </div><a name="AlternatelinearformsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e59">
            <div class="title e60">Alternate linear forms</div>
            <div class="para e61"> Since the syntax of XML enforces a strict hierarchical nesting of XML elements, it
               seems like a tempting solution simply to lift or soften this restriction. A large
               number of
               such proposals have been made. 
            </div>
            <div class="para e62">Some notable examples are SGML CONCUR [
               <div class="xref e63" linkend="Goldfarb1990"></div>], XCONCUR
               [
               <div class="xref e64" linkend="Schonefeld2007"></div>], MECS [
               <div class="xref e65" linkend="Huitfeldt1998"></div>],
               TexMecs [
               <div class="xref e66" linkend="HuitfeldtandSperberg-McQueen2003"></div>], and LMNL [
               <div class="xref e67" linkend="TennisonandPiez2002"></div>]. 
            </div>
            <div class="para e68">The advantages of most of these proposals is that they provide what for human readers
               seems like a more natural and easily readable linear representation of overlapping
               elements
               than is provided by alternative proposals adhering to XML syntax. They may also provide
               better support for certain operations on overlapping elements. However, for the most
               part it
               is unclear how to perform anything like a full range of standard operations on their
               markup
               constructs, and there are unresolved issues of processability, expressive power etc.
               
            </div>
         </div><a name="AlternatedocumentmodelsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e69">
            <div class="title e70">Alternate document models</div>
            <div class="para e71"> Some proposals provide alternatives to what is commonly perceived as the XML document
               model, i.e. tree-shaped graphs like XDM or XML DOM, either in combination with or
               independently of proposals for alternative linear forms. 
            </div>
            <div class="para e72">Some notable examples are LMNL [
               <div class="xref e73" linkend="TennisonandPiez2002"></div>], Goddag
               [
               <div class="xref e74" linkend="Sperberg-McQueenandHuitfeldt2000"></div>], multi-colored trees [
               <div class="xref e75" linkend="Jagadishetal.2004"></div>], and Multi-Document Graphs [
               <div class="xref e76" linkend="SchmidtandColomb2009"></div>]. 
            </div>
            <div class="para e77">Although these solutions in general provide better support for at least certain
               operations on overlapping elements, the question of how to perform other standard
               operations
               is mostly unclear or not systematically addressed. For some of the proposals it is
               also
               unclear whether, or to what extent, it is possible to support roundtripping between
               the
               proposed document model and its form, or even what such roundtripping would amount
               to. (This
               is the case, for example, concerning the relation between Goddag and TexMecs.) Again,
               there
               are in general unresolved issues of processability, expressive power etc. 
            </div>
         </div><a name="StandoffmarkupANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e78">
            <div class="title e79">Stand-off markup</div>
            <div class="para e80">Quite early on, it was suggested that many or most of the problems related to overlap
               can be seen as a result of the general limitations of embedded markup. [
               <div class="xref e81" linkend="Raymondetal1992"></div>, 
               <div class="xref e82" linkend="Raymondetal1995"></div>] Thus, the idea
               of separating the markup from the document to be marked up, in the form of so-called
               "stand-off" markup has received considerable attention and adoption. 
            </div>
            <div class="para e83">Some notable examples are xStandoff [
               <div class="xref e84" linkend="StührenbergandJettka2009"></div>],
               Nite [
               <div class="xref e85" linkend="Carlettaetal.2005"></div>], Earmark [
               <div class="xref e86" linkend="DiIorioetal.2009"></div>], and (as an interesting limiting case) Multix [
               <div class="xref e87" linkend="Chattietal.2007"></div>]. TEI [
               <div class="xref e88" linkend="TEIP5"></div>] also contains recommendation for stand-off
               markup. 
            </div>
            <div class="para e89">Stand-off markup does indeed provide potentially very strong expressive power and
               might
               seem to be the one sweeping solution to all problems related to overlap. And perhaps
               it is. 
               <div class="popupBox e90">
                  <div class="popupLabel" onmouseover="$('#d1e163').show('1000');" onmouseout="$('#d1e163').hide('1000');">[ footnote ]</div>
                  <div id="d1e163" style="display: none;">
                     <div class="footnote">
                        <div class="para e91">In addition, stand-off markup may provide solutions to problems related to the
                           representation of document change histories, of multi-versioned documents, and to
                           dynamic document editing. These problems often coincide with, but are in our view
                           distinct from, the overlap problem. Common objections to stand-off markup concern
                           data
                           integrity under document editing. This is indeed a serious concern, but one which
                           lies
                           outside the scope of this paper.
                        </div>
                     </div>
                  </div>
               </div> We note, however, that standoff markup either has been used, or could be used,
               in combination with any or all of the linear formats and document models referred
               to above.
               Thus, all the unclarities that pertain to those, and to the relationships between
               them,
               pertain also to stand-off markup. 
            </div>
         </div><a name="TransformationalgorithmsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e92">
            <div class="title e93">Transformation algorithms</div>
            <div class="para e94">Since there is such a multitude of proposals for alternate linear forms and document
               models, since they all have their pros and cons, and since no universal agreement
               on a
               unified solution seems to be forthcoming, it has been proposed that one should instead
               try
               to provide a common framework of algorithms for transformation between different linear
               forms and/or document models. 
               <div class="popupBox e95">
                  <div class="popupLabel" onmouseover="$('#d1e172').show('1000');" onmouseout="$('#d1e172').hide('1000');">[ footnote ]</div>
                  <div id="d1e172" style="display: none;">
                     <div class="footnote">
                        <div class="para e96">Requests and proposals for transformation tools are abundant in the literature, but
                           we know of only one proposal which recommends the establishment of a common framework
                           of
                           transformation algorithms as a general solution: [
                           <div class="xref e97" linkend="Marinellietal.2008"></div>].
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e98">The advantages of this approach may be as obvious as its disadvantages: A major
               advantage is that, to the extent that transformations may be performed without loss
               of
               information, it makes all the strengths of all of the solutions above available to
               the
               users. Major disadvantages are: First, for every alternate serial form and/or document
               model
               introduced, the number of required transformation algorithms increases exponentially.
               Second
               (and perhaps most importantly), there seems to be no established and agreed-upon way
               of
               deciding whether or not any given transformation algorithm introduces information
               loss.
            </div>
         </div>
      </div><a name="TheideaofatagalgebraANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e99">
         <div class="title e100">The idea of a tag algebra</div>
         <div class="para e101"> There seems to be no consensus neither on whether the basic elements of marked up
            documents are most suitably regarded as partitions of a character stream (tags, elements
            etc.)
            or nodes of a graph of some kind, nor on what the basic operations on these elements
            are and
            how they are to be defined. As long as these issues are not clear, it is hard to compare
            and
            evaluate the various approaches to the overlap problem. 
         </div>
         <div class="para e102">Elementary algebra assumes that numbers are the same whether written in Arabic or
            Roman
            notation, or, for that matter, whether we use a decimal, a digital or a hexadecimal
            numeral
            system, and that the sum of two numbers is the same irrespective of which algorithm
            we employ
            to calculate it. Certainly, some notations may seem less intuitive than others, and
            some
            notations require the use of more complex algorithms than others in order to perform
            certain
            operations. However, while important enough, such issues have no bearing on the question
            of
            what the correct result of an operation is. There is one and only one answer to the
            question
            of what the sum of two numbers are, irrespective of which notation and algorithm one
            might
            choose to use in computing that sum.
         </div>
         <div class="para e103">Similarly, a tag algebra should be able to tell us whether two representations of
            a
            document marked up using different notations are representations of the same document
            or not,
            and what the result of adding or subtracting a specific element to or from that document
            should be. In what follows, we hope to establish at common basis for the solution
            of at least
            the first of these problems. We believe this basis will also be useful for defining
            operations
            on marked up documents, although we do not get that far in this paper. 
         </div>
      </div><a name="BracketednotationsandmatchingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e104">
         <div class="title e105">Bracketed notations and matching</div>
         <div class="para e106"> In the rest of this paper, we will explore the relationship between markup without
            overlap and markup with overlap by way of comparing XML to another, imaginary markup
            language.
            This other markup language, which we may call O-XML, is exactly like XML, except that
            in O-XML
            overlap is allowed. 
            <div class="popupBox e107">
               <div class="popupLabel" onmouseover="$('#d1e194').show('1000');" onmouseout="$('#d1e194').hide('1000');">[ footnote ]</div>
               <div id="d1e194" style="display: none;">
                  <div class="footnote">
                     <div class="para e108">For all relevant purposes, therefore, O-XML is equivalent to what Yves Marcoux termed
                        "overlap-only TexMECS" in [
                        <div class="xref e109" linkend="Marcoux2008"></div>]. Note that, like
                        "overlap-only TexMECS" and some other notations, but unlike yet other notations allowing
                        for overlap, O-XML does not allow for self-overlap.
                     </div>
                  </div>
               </div>
            </div> So whereas nesting structures like
            
            <div class="programlisting e110" xml:space="preserve">&lt;a&gt;...&lt;b&gt;...&lt;/b&gt;...&lt;/a&gt;</div> are well-formed in both
            XML and O-XML, overlapping structures like
            
            <div class="programlisting e111" xml:space="preserve">&lt;a&gt;...&lt;b&gt;...&lt;/a&gt;...&lt;/b&gt;</div> are ill-formed in XML,
            but well-formed in O-XML. As we are concerned exclusively with element structure,
            we ignore
            all other features or mechanisms of XML such as attributes, entities, comments, declarations,
            cdata sections, processing instructions, etc. 
         </div>
         <div class="para e112">We may start with the observation that in XML all elements nest, while in documents
            with
            overlap not all of them do. 
            <div class="popupBox e113">
               <div class="popupLabel" onmouseover="$('#d1e208').show('1000');" onmouseout="$('#d1e208').hide('1000');">[ footnote ]</div>
               <div id="d1e208" style="display: none;">
                  <div class="footnote">
                     <div class="para e114">The latter may seem like a tautology, as it merely says that in documents with overlap
                        some elements overlap. Note that in the sense we are using the term overlap here,
                        XML
                        documents do not have overlap, whereas documents in notations like O-XML, such as
                        MECS,
                        TexMecs, LMNL, xConcur etc. may have.
                     </div>
                  </div>
               </div>
            </div> We may also observe that the element structure of XML documents can be deduced
            without looking at the generic identifiers of end tags, 
            <div class="popupBox e115">
               <div class="popupLabel" onmouseover="$('#d1e212').show('1000');" onmouseout="$('#d1e212').hide('1000');">[ footnote ]</div>
               <div id="d1e212" style="display: none;">
                  <div class="footnote">
                     <div class="para e116">This may be one of the reasons for the complaints about the verbosity of XML as
                        compared to e.g. SGML, which allows for the omission of generic identifiers on end
                        tags.
                     </div>
                  </div>
               </div>
            </div> whereas in notations allowing overlap this information is essential. We might
            summarize this by saying that in XML the start and end tags of nesting elements always
            match,
            whereas in other notations they do not always match. 
         </div>
         <div class="para e117">But there is something puzzling about this way of putting the matter. Exactly what
            do we
            mean by the terms 
            <div class="quote e118">nesting</div>, 
            <div class="quote e119">element</div>, and 
            <div class="quote e120">match</div>? We
            observe that whereas there is no overlap in
            
            <div class="programlisting e121" xml:space="preserve">&lt;a&gt;...&lt;b&gt;...&lt;/b&gt;...&lt;/a&gt;</div> and there is overlap in
            
            <div class="programlisting e122" xml:space="preserve">&lt;a&gt;...&lt;b&gt;...&lt;/a&gt;...&lt;/b&gt;</div> the difference between
            them disappears if we leave out the generic identifiers:
            
            <div class="programlisting e123" xml:space="preserve">&lt; &gt;...&lt; &gt;...&lt;/ &gt;...&lt;/ &gt;</div> Our guess is that it
            probably seems natural to most readers to assume that the element structure of the
            last
            example above is identical to the first, rather than the second. But is this necessarily
            so,
            and if so, why? Let us pursue the similarities between the nesting of start and end
            tags and
            the nesting of simple parentheses a bit further. 
         </div>
         <div class="para e124">Consider any string consisting of left (i.e. start, or open) and right (i.e. end,
            or
            close) parentheses. One common assumption is that there should be a one to one correspondence
            between left and right parentheses, so that they are equal in number. This ensures
            that the
            string 
            <div class="code e125">((()))</div> is to be regarded as well-formed, while the string
            
            <div class="code e126">((())</div> is not. Another common assumption is that for every left parenthesis there
            is a succeeding right parenthesis. This ensures that the string 
            <div class="code e127">)()(</div> is not to be
            regarded as well-formed. In the following, we will refer to these two assumptions
            as "basic".
         </div>
         <div class="para e128"> The two basic assumptions do not by themselves imply any specific answer to the question
            which of the left parentheses correspond to which of the right parentheses in the
            well-formed
            cases. The intuitively most plausible (or common) reading of the string 
            <div class="code e129">(())</div> may
            be in accordance with a "nesting" convention, to the effect that the first left parenthesis
            corresponds to the last right parenthesis. According to this convention, the structure
            of the
            expression 
            <div class="code e130">()(())</div> looks like this, where subscripts indicate correspondence: 
            <div class="popupBox e131">
               <div class="popupLabel" onmouseover="$('#d1e256').show('1000');" onmouseout="$('#d1e256').hide('1000');">[ blockquote ]</div>
               <div id="d1e256" style="display: none;">
                  <div class="blockquote">
                     <div class="para e132">
                        
                        <div class="code e133">(
                           <div class="subscript e134">1</div> )
                           <div class="subscript e135">1</div> (
                           <div class="subscript e136">2</div>
                           (
                           <div class="subscript e137">3</div> )
                           <div class="subscript e138">3</div> )
                           <div class="subscript e139">2</div>
                        </div>
                        
                     </div>
                  </div>
               </div>
            </div> However, nothing in the two basic assumptions as stated stops us from adopting
            other conventions. We might imagine a "mirroring" convention, where the first left
            parenthesis
            corresponds to the first right, the second left parenthesis to the second right, and
            so on. A
            "mirroring" convention for the same expression may look like this: 
            <div class="popupBox e140">
               <div class="popupLabel" onmouseover="$('#d1e281').show('1000');" onmouseout="$('#d1e281').hide('1000');">[ blockquote ]</div>
               <div id="d1e281" style="display: none;">
                  <div class="blockquote">
                     <div class="para e141">
                        
                        <div class="code e142">(
                           <div class="subscript e143">1</div> )
                           <div class="subscript e144">1</div> (
                           <div class="subscript e145">2</div>
                           (
                           <div class="subscript e146">3</div> )
                           <div class="subscript e147">2</div> )
                           <div class="subscript e148">3</div>
                        </div>
                        
                     </div>
                  </div>
               </div>
            </div> (Note the "overlap" between parentheses subscripted 
            <div class="quote e149">2</div> and
            
            <div class="quote e150">3</div> here. 
            <div class="popupBox e151">
               <div class="popupLabel" onmouseover="$('#d1e313').show('1000');" onmouseout="$('#d1e313').hide('1000');">[ footnote ]</div>
               <div id="d1e313" style="display: none;">
                  <div class="footnote">
                     <div class="para e152">Nesting and mirroring agrees on single level coordinate structures, for example
                        
                        <div class="code e153">()()</div>.
                     </div>
                  </div>
               </div>
            </div>)
         </div>
         <div class="para e154">Other conventions may be imagined in which some parentheses are selected according
            to
            specific rules, while the rest follow some general scheme like nesting or mirroring.
            
            <div class="popupBox e155">
               <div class="popupLabel" onmouseover="$('#d1e322').show('1000');" onmouseout="$('#d1e322').hide('1000');">[ footnote ]</div>
               <div id="d1e322" style="display: none;">
                  <div class="footnote">
                     <div class="para e156"> Imagine speakers of two dialects Nest and Mirr of the language Parenthesian, a
                        language forming subsets of well-formed parentheses. In dialect Nest the semantics
                        follows
                        nested brackets, in Mirr matches are a mix of mirrored and nested parenthesis. In
                        both
                        dialects the word for walk is 
                        <div class="code e157">"()"</div> and the word for dog is "(())". The rule
                        for forming "verb+subject" sentences in dialect Nest is to wrap the verb inside the
                        first
                        parenthesis of the noun, so that "dog walks" becomes 
                        <div class="code e158">"(()())"</div>. Using
                        subscripted d's to indicate "dog" the structure is:
                        <div class="code e159">
                           (
                           <div class="subscript e160">d</div>()(
                           <div class="subscript e161">d</div>)
                           <div class="subscript e162">d</div>)
                           <div class="subscript e163">d</div>.
                           
                        </div> Dialect Mirr has a different rule for forming sentences (verb+subject): wrap the
                        last parenthesis of the verb around the first parenthesis of the noun, resulting in
                        the
                        configuration 
                        <div class="code e164">"(()())"</div>. Surprisingly, this is exactly the same expression as
                        above, although it now has a different structure: 
                        <div class="code e165">
                           ((
                           <div class="subscript e166">d</div>)(
                           <div class="subscript e167">d</div>)
                           <div class="subscript e168">d</div>)
                           <div class="subscript e169">d</div>.
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            
         </div>
         <div class="para e170"> Thus, the two basic assumptions concerning the well-formedness of parenthetical
            expressions are compatible with alternate ways of assigning structure to those expressions.
            This important fact is easy to overlook, because one common method of testing for
            well-formedness, namely the use of rewrite grammars, also lends itself very easily
            to the
            assignment of a structure in accordance with the "nesting" convention above. The following
            example will illustrate this. 
         </div>
         <div class="para e171">A rewrite grammar for generating strings of parentheses which obey the two basic
            assumptions may look like this: 
            <div class="variablelist e172">
               <div class="varlistentry e173">
                  <div class="term e174">Base step</div>
                  <div class="listitem e175">
                     <div class="para e176">
                        
                        <div class="code e177">P→()</div>
                        
                     </div>
                  </div>
               </div>
               <div class="varlistentry e178">
                  <div class="term e179">Subordination step</div>
                  <div class="listitem e180">
                     <div class="para e181">
                        
                        <div class="code e182">P→(P)</div>
                        
                     </div>
                  </div>
               </div>
               <div class="varlistentry e183">
                  <div class="term e184">Coordination step</div>
                  <div class="listitem e185">
                     <div class="para e186">
                        
                        <div class="code e187">P→PP</div>
                        
                     </div>
                  </div>
               </div>
            </div>A string is well-formed, in accordance with the two basic assumptions, if and
            only if it can be generated by this grammar, which generates strings like 
            <div class="code e188">()</div>,
            
            <div class="code e189">()(()())</div> and 
            <div class="code e190">((()))</div>
            
            <div class="popupBox e191">
               <div class="popupLabel" onmouseover="$('#d1e406').show('1000');" onmouseout="$('#d1e406').hide('1000');">[ footnote ]</div>
               <div id="d1e406" style="display: none;">
                  <div class="footnote">
                     <div class="para e192"> If we allow for the use of regular expressions in grammar rules, the base and
                        coordination steps can be merged to: 
                        <div class="code e193">P→P*</div>
                        
                     </div>
                  </div>
               </div>
            </div>
            
         </div>
         <div class="para e194"> As mentioned, this grammar may also be used in order to assign a structure to the
            expressions in accordance with the "nesting" convention. This may be done by associating
            with
            each other the two parentheses that are generated together in each of the subordination
            or
            base steps. Selecting an index from the sequence number of rule application, the string
            
            <div class="code e195">(()())</div> could be derived with indicated associations as follows, where each rule
            selects a 
            <div class="code e196">P</div> in the string coming from the immediately preceding rule application,
            and substitutes it with the right hand side of the →: 
            <div class="variablelist e197">
               <div class="varlistentry e198">
                  <div class="term e199"> 0th step, start symbol</div>
                  <div class="listitem e200">
                     <div class="para e201">
                        
                        <div class="code e202">P</div>
                        
                     </div>
                  </div>
               </div>
               <div class="varlistentry e203">
                  <div class="term e204">1st step, subordination</div>
                  <div class="listitem e205">
                     <div class="para e206">
                        
                        <div class="code e207">(
                           <div class="subscript e208">1</div> P )
                           <div class="subscript e209">1</div>
                        </div>
                        
                     </div>
                  </div>
               </div>
               <div class="varlistentry e210">
                  <div class="term e211">2nd step, coordination step</div>
                  <div class="listitem e212">
                     <div class="para e213">
                        
                        <div class="code e214">(
                           <div class="subscript e215">1</div> P P )
                           <div class="subscript e216">1</div>
                        </div>
                        
                     </div>
                  </div>
               </div>
               <div class="varlistentry e217">
                  <div class="term e218">3rd step, base step </div>
                  <div class="listitem e219">
                     <div class="para e220">
                        
                        <div class="code e221">(
                           <div class="subscript e222">1</div> (
                           <div class="subscript e223">3</div> )
                           <div class="subscript e224">3</div> P )
                           <div class="subscript e225">1</div>
                        </div>
                        
                     </div>
                  </div>
               </div>
               <div class="varlistentry e226">
                  <div class="term e227">4th step, base step</div>
                  <div class="listitem e228">
                     <div class="para e229">
                        
                        <div class="code e230">(
                           <div class="subscript e231">1</div> (
                           <div class="subscript e232">3</div> )
                           <div class="subscript e233">3</div>(
                           <div class="subscript e234">4</div> )
                           <div class="subscript e235">4</div> )
                           <div class="subscript e236">1</div>
                        </div>
                        
                     </div>
                  </div>
               </div>
            </div> After the fourth step, there are no non-terminals left in the expression, and
            the process halts. As can be seen from the last line, the structure that has been
            assigned to
            the expression is in exact accordance with the "nesting" convention. 
         </div>
         <div class="para e237">This confirms that rewrite grammars may be used for assigning structure as well as
            for
            checking well-formedness. However, one may very well use a rewrite grammar to check
            for
            well-formedness 
            <div class="emphasis e238" role="ital">without</div> using that same grammar for assigning
            structure. Moreover, there are other ways both of checking well-formedness and of
            assigning
            structure than using rewrite grammars.
         </div>
         <div class="para e239">This should make clear that well-formedness is separate from structure. In the appendix
            we
            prove that well-formedness is preserved even when inserting randomly any left parenthesis,
            succeeded by another randomly inserted right parenthesis, into a well-formed string.
            
         </div>
         <div class="para e240">We observe that the rule for matching of start and end tags in XML is identical to
            what we
            called a "nesting" convention for simple parenthetical expressions above. We also
            observe that
            this seems to be the "default" rule for matching of start and end tags in markup languages
            which allow overlap, such as O-XML. In such languages, however, deviations from the
            default
            rule are allowed, and they are signaled by the selection of generic identifiers for
            end tags. 
         </div>
         <div class="para e241">This explains why, as we noted above, the element structure of XML documents can be
            identified independently of information about the generic identifiers of start and
            end tags,
            whereas in O-XML this information is essential. In the following sections we will
            exploit
            these observations in order to look at alternate ways of describing the difference
            between
            nesting and overlap.
         </div>
      </div><a name="DocumentlatticesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e242">
         <div class="title e243">Document lattices</div>
         <div class="para e244">We believe that lattice theory [
            <div class="xref e245" linkend="Grätzer1971"></div>] may usefully be
            applied to the construction of document models from marked-up documents. Lattice theory,
            like
            graph theory, is a way of reasoning over ordering relations. The theory has two components,
            one is a theory of order, the other of algebraic operations defined in terms of that
            order. In
            this section we will consider the order aspect, while algebraic operations will be
            discussed
            in the next section ("Algebraic characterization"). 
         </div>
         <div class="para e246">A lattice is a partially ordered set of objects, here referred to as nodes, which
            will
            provide the elements of document models. Not all nodes will find their way into a
            document
            model, only those that do may also be referred to as elements, in agreement with the
            use of
            this term in XML and XSLT. A key requirement for an ordered collection of nodes to
            constitute
            a lattice, is that there should be one unique largest and one unique smallest node
            in the
            collection. If there is only a largest (or smallest) node, it is what is called a
            semi-lattice. 
            <div class="popupBox e247">
               <div class="popupLabel" onmouseover="$('#d1e528').show('1000');" onmouseout="$('#d1e528').hide('1000');">[ footnote ]</div>
               <div id="d1e528" style="display: none;">
                  <div class="footnote">
                     <div class="para e248">In the following, this distinction will not always be important, and we may
                        occasionally refer to lattices and semi-lattices indiscriminately as "lattices".
                     </div>
                  </div>
               </div>
            </div> Examples of lattices so constructed abound. Any society ordered by social rank (or
            constitutional order) is a semi-lattice, with e.g president or monarch at the top.
            XML trees
            are semi lattices, with a root node on the top and text nodes at the bottom. 
         </div>
         <div class="para e249"> We analyze the stream of characters making up a document morphologically into a series
            of
            typed objects consisting of start tags, end tags, and simples.
            <div class="popupBox e250">
               <div class="popupLabel" onmouseover="$('#d1e534').show('1000');" onmouseout="$('#d1e534').hide('1000');">[ footnote ]</div>
               <div id="d1e534" style="display: none;">
                  <div class="footnote">
                     <div class="para e251">As noted above, the only difference between XML and O-XML is that O-XML allows
                        overlapping elements. Therefore, element structures of some other markup languages,
                        such
                        as the suspend and resume tags of TexMecs, are not taken into consideration.
                     </div>
                  </div>
               </div>
            </div> The terms "start tag" and "end tag" should require no further explanation. We will
            used XML notation in specifying them. 
         </div>
         <div class="para e252">The term "simples" refers to PCDATA. Informally, we might say that a simple is whatever
            occurs between two tags. 
            <div class="popupBox e253">
               <div class="popupLabel" onmouseover="$('#d1e540').show('1000');" onmouseout="$('#d1e540').hide('1000');">[ footnote ]</div>
               <div id="d1e540" style="display: none;">
                  <div class="footnote">
                     <div class="para e254">Excluding other markup constructs, such as comments, processing instructions or
                        declarations, cf. the remark above. It does not matter whether the tags separating
                        two
                        simples are start tags, end tags, or a combination of start and end tags.
                     </div>
                  </div>
               </div>
            </div>
            
         </div>
         <div class="para e255">Empty elements are treated as a start tag followed by an end tag, without any intervening
            simple. 
         </div>
         <div class="para e256">We assume a linear order on the morphological constituents. This order is derived
            directly
            from the serialized form of the document.
         </div>
         <div class="para e257">Consider the following XML sample document, D
            <div class="subscript e258">1</div>:
            <div class="figure e259">
               <div class="title e260">Sample document 1 (D
                  <div class="subscript e261">1</div>)
               </div>
               <div class="para e262">
                  
                  <div class="code e263">&lt;a&gt;X&lt;b&gt;Y&lt;/b&gt;&lt;c&gt;Z&lt;/c&gt;&lt;/a&gt;</div>
                  
               </div>
            </div> According to the definitions just given, this document is a linearly ordered set
            of
            token objects, consisting of the following morphological constituents with the properties
            indicated in this table, along with position indexes which, for our purpose, serve
            as token
            indexes for the types: 
            <div class="table e264" border="1" cellpadding="10" cellspacing="0">
               <div class="tr e265">
                  <div class="td e266">Constituent</div>
                  <div class="td e267">&lt;a&gt;</div>
                  <div class="td e268">X</div>
                  <div class="td e269">&lt;b&gt;</div>
                  <div class="td e270">Y</div>
                  <div class="td e271">&lt;/b&gt;</div>
                  <div class="td e272">&lt;c&gt;</div>
                  <div class="td e273">Z</div>
                  <div class="td e274">&lt;/c&gt;</div>
                  <div class="td e275">&lt;/a&gt;</div>
               </div>
               <div class="tr e276">
                  <div class="td e277">Type</div>
                  <div class="td e278">start</div>
                  <div class="td e279">simple</div>
                  <div class="td e280">start</div>
                  <div class="td e281">simple</div>
                  <div class="td e282">end</div>
                  <div class="td e283">start</div>
                  <div class="td e284">simple</div>
                  <div class="td e285">end</div>
                  <div class="td e286">end</div>
               </div>
               <div class="tr e287">
                  <div class="td e288">N</div>
                  <div class="td e289">1</div>
                  <div class="td e290">2</div>
                  <div class="td e291">3</div>
                  <div class="td e292">4</div>
                  <div class="td e293">5</div>
                  <div class="td e294">6</div>
                  <div class="td e295">7</div>
                  <div class="td e296">8</div>
                  <div class="td e297">9</div>
               </div>
            </div>
            
         </div>
         <div class="para e298">For any document D, let S be the set of all start tag tokens and E the set of all
            end tag
            tokens in the document. Take the Cartesian product (all possible combinations) of
            S and E, and
            subtract all pairs for which the position of the end tag does not succeed the start
            tag. This
            object then represents all the possibilities for a start tag to match up with an end
            tag. Add
            the simples, and name the result L(D). 
         </div>
         <div class="para e299">L(D
            <div class="subscript e300">1</div>) now consists of the following nodes: 
            <div class="table e301" border="1" cellpadding="15" cellspacing="0">
               <div class="tr e302">
                  <div class="td e303">&lt;a&gt;</div>
                  <div class="td e304">&lt;/b&gt;</div>
                  <div class="td e305">1</div>
                  <div class="td e306">5</div>
               </div>
               <div class="tr e307">
                  <div class="td e308">&lt;a&gt;</div>
                  <div class="td e309">&lt;/c&gt;</div>
                  <div class="td e310">1</div>
                  <div class="td e311">8</div>
               </div>
               <div class="tr e312">
                  <div class="td e313">&lt;a&gt;</div>
                  <div class="td e314">&lt;/a&gt;</div>
                  <div class="td e315">1</div>
                  <div class="td e316">9</div>
               </div>
               <div class="tr e317">
                  <div class="td e318">&lt;b&gt;</div>
                  <div class="td e319">&lt;/b&gt;</div>
                  <div class="td e320">3</div>
                  <div class="td e321">5</div>
               </div>
               <div class="tr e322">
                  <div class="td e323">&lt;b&gt;</div>
                  <div class="td e324">&lt;/c&gt;</div>
                  <div class="td e325">3</div>
                  <div class="td e326">8</div>
               </div>
               <div class="tr e327">
                  <div class="td e328">&lt;b&gt;</div>
                  <div class="td e329">&lt;/a&gt;</div>
                  <div class="td e330">3</div>
                  <div class="td e331">9</div>
               </div>
               <div class="tr e332">
                  <div class="td e333">&lt;c&gt;</div>
                  <div class="td e334">&lt;/c&gt;</div>
                  <div class="td e335">6</div>
                  <div class="td e336">8</div>
               </div>
               <div class="tr e337">
                  <div class="td e338">&lt;c&gt;</div>
                  <div class="td e339">&lt;/a&gt;</div>
                  <div class="td e340">6</div>
                  <div class="td e341">9</div>
               </div>
               <div class="tr e342">
                  <div class="td e343">X</div>
                  <div class="td e344"></div>
                  <div class="td e345">2</div>
                  <div class="td e346">2</div>
               </div>
               <div class="tr e347">
                  <div class="td e348">Y</div>
                  <div class="td e349"></div>
                  <div class="td e350">4</div>
                  <div class="td e351">4</div>
               </div>
               <div class="tr e352">
                  <div class="td e353">Z</div>
                  <div class="td e354"></div>
                  <div class="td e355">7</div>
                  <div class="td e356">7</div>
               </div>
            </div>
            
         </div>
         <div class="para e357">The reader may be puzzled by the fact that we include non-matching pairs of tags,
            i.e.
            nodes with start and end tags with different generic identifiers (GIs), among the
            nodes of the
            lattice. This is simply because the point of the exercise at this stage is to see
            how far we
            are able to build document models without taking the generic identifiers of tags into
            consideration.
         </div>
         <div class="para e358"> We define a hierarchical order relation between nodes in terms of
            
            <div class="emphasis e359">containment</div> as follows: A node x is larger than a node y if and only if
            the start position of x is smaller or equal to that of y, and the end position of
            x is greater
            or equal to that of y (viewed as strings the larger, or higher, node contains the
            other). 
            <div class="popupBox e360">
               <div class="popupLabel" onmouseover="$('#d1e743').show('1000');" onmouseout="$('#d1e743').hide('1000');">[ footnote ]</div>
               <div id="d1e743" style="display: none;">
                  <div class="footnote">
                     <div class="para e361">This would mean that nodes contain each other if their start and end positions are
                        identical, -- however this situation cannot occur in the current context, since a
                        position
                        index functions as token index.
                     </div>
                  </div>
               </div>
            </div> This relation is asymmetric and transitive, so it is a partial order. 
            <div class="popupBox e362">
               <div class="popupLabel" onmouseover="$('#d1e747').show('1000');" onmouseout="$('#d1e747').hide('1000');">[ footnote ]</div>
               <div id="d1e747" style="display: none;">
                  <div class="footnote">
                     <div class="para e363"> We observe that these concepts are parallel to the concepts of sequence and range
                        of
                        Core Range Algebra [
                        <div class="xref e364" linkend="Nicol2002a"></div>]. There is a connection between the
                        approach adopted here, and Core Range Algebra, but we leave a discussion of that
                        connection for future work.
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e365">With this order in place, L(D
            <div class="subscript e366">1</div>) as given in the table above is a semi-lattice. It
            has a top node, namely the pair consisting of the first start tag and last end tag
            
            <div class="code e367">&lt;a&gt;₁&lt;/a&gt;₉</div>. It also has a set of minimal nodes, the
            simples. Each pair of tag tokens is a node in the semilattice. Lattice structures
            are
            displayed using Hasse-diagrams (familiar from tree structures).
            <div class="orderedlist e368">
               <div class="listitem e369">
                  <div class="para e370">Nodes are positioned vertically according to their position in the hierarchy, with
                     the more inclusive nodes at the top and the less inclusive further down. 
                  </div>
               </div>
               <div class="listitem e371">
                  <div class="para e372">Nodes at the same vertical level are positioned from left to right according to
                     their linear order in the document. 
                  </div>
               </div>
            </div>
            
         </div>
         <div class="para e373">The lattice structure for L(D
            <div class="subscript e374">1</div>): 
            <div class="figure e375" xml:id="L" xreflabel="Lattice         L(D₁)">
               <div class="title e376">Lattice L</div>
               <div class="mediaobject e377">
                  <div class="imageobject e378">
                     <div class="metaBox e379"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e778').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e778" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e379'
                              </span><span class="metaAttribute">fileref='../../../vol7/graphics/Johnsen01/Johnsen01-001.png'
                              </span><span class="metaAttribute">format='png'
                              </span><span class="metaAttribute">width='330px'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            
         </div>
         <div class="para e380">As mentioned, the hierarchical order is transitive. According to the conventions of
            diagrams like these, however, lines are drawn only between nodes immediately ordered.
            
         </div>
         <div class="para e381">Before we proceed, we need to define a relation we call 
            <div class="emphasis e382" role="ital">relatives</div>: Two nodes are relatives if they share a token start or end tag. This is
            a reflexive, symmetric and non-transitive relation. 
         </div>
         <div class="para e383">We also need to define a concept which has already been introduced implicitly, the
            concept
            of a 
            <div class="emphasis e384" role="ital">minimal node</div>: A node is minimal if it is lowest in the
            hierarchy, i.e. if it contains no other node.
         </div>
      </div><a name="BuildingdocumentmodelsfromlatticesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e385">
         <div class="title e386">Building document models from lattices</div><a name="ModelingdocumentswithoutoverlapANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e387">
            <div class="title e388">Modeling documents without overlap</div>
            <div class="para e389">In what follows, we will show how what we may call a "standard" document model can
               be
               built on the basis of the lattice. In building this model, we will rely on distinguishing
               between nodes only in terms of the morphology introduced earlier, i.e. on the basis
               of which
               start tags, end tags, or simple tokens they contain. In particular, we do 
               <div class="emphasis e390" role="ital">not</div> take the GIs of tags into consideration in the building of this
               model. 
            </div>
            <div class="para e391">A document model for D
               <div class="subscript e392">1</div> from the lattice L(D
               <div class="subscript e393">1</div>) is built through a
               number of steps by selecting subsets from L(D
               <div class="subscript e394">1</div>). Hence, the model building process
               can be viewed as a filtering process. We start from the bottom of the lattice and
               identify
               all the lowest-level minimal nodes. We copy these minimal nodes, i.e. the nodes labeled
               X₂, Y₄ and Z₇, from L and transfer them to a subset of L(D
               <div class="subscript e395">1</div>)
               which we call S
               <div class="subscript e396">0</div>. 
               <div class="figure e397" xml:id="D0" xreflabel="subset           S₀">
                  <div class="title e398">Subset S
                     <div class="subscript e399">0</div>
                  </div>
                  <div class="para e400">
                     
                     <div class="code e401">X₂ Y₄ Z₇</div>
                     
                  </div>
               </div> We then delete these minimal nodes from L(D
               <div class="subscript e402">1</div>), 
               <div class="popupBox e403">
                  <div class="popupLabel" onmouseover="$('#d1e836').show('1000');" onmouseout="$('#d1e836').hide('1000');">[ footnote ]</div>
                  <div id="d1e836" style="display: none;">
                     <div class="footnote">
                        <div class="para e404">These minimal nodes happen to have no relatives, otherwise we would have had to
                           delete those as well. See next step.
                        </div>
                     </div>
                  </div>
               </div> and call the result L
               <div class="subscript e405">0</div>. 
               <div class="figure e406" xml:id="L0" xreflabel="Lattice L0">
                  <div class="title e407">Subset L
                     <div class="subscript e408">0</div>
                  </div>
                  <div class="mediaobject e409">
                     <div class="imageobject e410">
                        <div class="metaBox e411"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e850').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e850" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e411'
                                 </span><span class="metaAttribute">fileref='../../../vol7/graphics/Johnsen01/Johnsen01-002.png'
                                 </span><span class="metaAttribute">format='png'
                                 </span><span class="metaAttribute">width='330px'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e412">We repeat the process of selecting minimal nodes, now from L
               <div class="subscript e413">0</div>,
               and add them to S
               <div class="subscript e414">0</div>, naming the result S
               <div class="subscript e415">1</div>. In
               this case the minimal nodes are those labeled &lt;b&gt;₃&lt;/b&gt;₅ and
               &lt;c&gt;₆&lt;/c&gt;₈. S
               <div class="subscript e416">1</div> inherits the order from L, and looks like
               this: 
               <div class="figure e417" xml:id="S1" xreflabel="Lattice S1">
                  <div class="title e418">Subset S
                     <div class="subscript e419">1</div>
                  </div>
                  <div class="mediaobject e420">
                     <div class="imageobject e421">
                        <div class="metaBox e422"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e874').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e874" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e422'
                                 </span><span class="metaAttribute">fileref='../../../vol7/graphics/Johnsen01/Johnsen01-003.png'
                                 </span><span class="metaAttribute">format='png'
                                 </span><span class="metaAttribute">width='310px'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div> Next, we delete these minimal nodes, 
               <div class="emphasis e423" role="ital">as well as all their
                  relatives
               </div>, from L
               <div class="subscript e424">0</div>, and call the result
               L
               <div class="subscript e425">1</div>. 
            </div>
            <div class="para e426">Removal of the relatives assures that a tag can only enter into a relationship once.
               As
               soon as a node is selected for the model, neither the start nor the end tag of that
               node can
               enter into another node of the model. The relatives of &lt;b&gt;₃&lt;/b&gt;₅
               in L(D
               <div class="subscript e427">1</div>) are the following nodes 
               <div class="figure e428" xml:id="rel1" xreflabel="relatives           b/b">
                  <div class="title e429">Relatives of &lt;b&gt;₃&lt;/b&gt;₅</div>
                  <div class="mediaobject e430">
                     <div class="imageobject e431">
                        <div class="metaBox e432"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e897').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e897" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e432'
                                 </span><span class="metaAttribute">fileref='../../../vol7/graphics/Johnsen01/Johnsen01-004.png'
                                 </span><span class="metaAttribute">format='png'
                                 </span><span class="metaAttribute">width='250px'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               
               <div class="popupBox e433">
                  <div class="popupLabel" onmouseover="$('#d1e900').show('1000');" onmouseout="$('#d1e900').hide('1000');">[ footnote ]</div>
                  <div id="d1e900" style="display: none;">
                     <div class="footnote">
                        <div class="para e434">Remember that the relatives of a node are defined as the set of other nodes with the
                           same start or end tag 
                           <div class="emphasis e435" role="ital">token</div>. If there had been further
                           nodes with tokens of the start tag &lt;b&gt; or the end tag &lt;/b&gt; in the lattice,
                           they would still not have been relatives of &lt;b&gt;₃&lt;/b&gt;₅. In
                           other words, we are still ignoring information derivable from GIs.
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e436">L
               <div class="subscript e437">1</div> looks like this:
               <div class="figure e438" xml:id="L1" xreflabel="Lattice L1">
                  <div class="title e439">Lattice L
                     <div class="subscript e440">1</div>
                  </div>
                  <div class="para e441">&lt;a&gt;₁&lt;/a&gt;₉</div>
               </div>
               
            </div>
            <div class="para e442">As L
               <div class="subscript e443">1</div> only contains the single node
               &lt;a&gt;₁&lt;/a&gt;₉ a repetition of the step above, which copies this
               minimal node to S
               <div class="subscript e444">1</div> resulting in S
               <div class="subscript e445">2</div>, will
               terminate the process. 
               <div class="popupBox e446">
                  <div class="popupLabel" onmouseover="$('#d1e931').show('1000');" onmouseout="$('#d1e931').hide('1000');">[ footnote ]</div>
                  <div id="d1e931" style="display: none;">
                     <div class="footnote">
                        <div class="para e447">The above process can be defined inductively using the functions
                           
                           <div class="emphasis e448">min</div> that selects the minimal nodes from a lattice, and
                           
                           <div class="emphasis e449">rel</div> which selects the relatives of its argument. Recall that the
                           latter relation is reflexive, which means that rel(S) has S as a subset. The induction
                           stops when 
                           <div class="emphasis e450">L</div>
                           <div class="subscript e451">i</div> is empty. 
                           <div class="variablelist e452">
                              <div class="varlistentry e453">
                                 <div class="term e454">Base step for S:</div>
                                 <div class="listitem e455">
                                    <div class="para e456">S
                                       <div class="subscript e457">0</div> =
                                       
                                       <div class="emphasis e458">min</div>(
                                       <div class="emphasis e459">L</div>)
                                    </div>
                                 </div>
                              </div>
                              <div class="varlistentry e460">
                                 <div class="term e461">Base step for L:</div>
                                 <div class="listitem e462">
                                    <div class="para e463">
                                       <div class="emphasis e464"> L
                                          <div class="subscript e465">0</div>
                                       </div> = 
                                       <div class="emphasis e466">L</div> -
                                       rel(S
                                       <div class="subscript e467">0</div>)
                                    </div>
                                 </div>
                              </div>
                              <div class="varlistentry e468">
                                 <div class="term e469">Induction step for S:</div>
                                 <div class="listitem e470">
                                    <div class="para e471">S
                                       <div class="subscript e472">i+1</div> =
                                       
                                       <div class="emphasis e473">min</div>(
                                       <div class="emphasis e474">L
                                          <div class="subscript e475">i</div>
                                       </div>)
                                       ∪ S
                                       <div class="subscript e476">i</div>
                                    </div>
                                 </div>
                              </div>
                              <div class="varlistentry e477">
                                 <div class="term e478">Induction step for L:</div>
                                 <div class="listitem e479">
                                    <div class="para e480">
                                       <div class="emphasis e481">L
                                          <div class="subscript e482">i+1</div>
                                       </div> =
                                       
                                       <div class="emphasis e483">L
                                          <div class="subscript e484">i</div>
                                       </div> -
                                       rel(D
                                       <div class="subscript e485">i</div>) 
                                    </div>
                                 </div>
                              </div>
                           </div>
                           
                        </div>
                        <div class="para e486">This method bears a resemblance to cascaded finite state transducers, used in
                           natural language processing 
                           <div class="xref e487" linkend="abney97"></div>. A finite state transducer
                           F, may scan a string over the symbols "(" and ")" replacing each occurrence of "()"
                           (i.e
                           the innermost, or minimal elements) with the empty string. Then repeat the process
                           on
                           the output (the cascading). When nothing is left, the process stops and the parentheses
                           that are removed together can be taken to match. Even though the language over
                           parentheses itself is context free, a cascaded approach using finite state transducers
                           can in principle analyze it.
                        </div>
                     </div>
                  </div>
               </div> There are now no more nodes to select, and the process stops with the following
               candidate model M of D
               <div class="subscript e488">1</div>: 
               <div class="figure e489" xml:id="D2" xreflabel="Lattice D2">
                  <div class="title e490">subset S
                     <div class="subscript e491">2</div>=M(D
                     <div class="subscript e492">1</div>)
                  </div>
                  <div class="mediaobject e493">
                     <div class="imageobject e494">
                        <div class="metaBox e495"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1035').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1035" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e495'
                                 </span><span class="metaAttribute">fileref='../../../vol7/graphics/Johnsen01/Johnsen01-005.png'
                                 </span><span class="metaAttribute">format='png'
                                 </span><span class="metaAttribute">width='310px'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e496">What we find in S
               <div class="subscript e497">2</div> is, mutatis mutandis, identical to the
               "standard" XML document tree for the document we started with: 
               <div class="figure e498" xml:id="D3" xreflabel="Lattice D3">
                  <div class="title e499">Standard document model of D
                     <div class="subscript e500">1</div>
                  </div>
                  <div class="mediaobject e501">
                     <div class="imageobject e502">
                        <div class="metaBox e503"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1049').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1049" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e503'
                                 </span><span class="metaAttribute">fileref='../../../vol7/graphics/Johnsen01/Johnsen01-006.png'
                                 </span><span class="metaAttribute">format='png'
                                 </span><span class="metaAttribute">width='160px'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e504"> While GIs have been left out of consideration during the building, the candidate
               model
               will also be subjected to a well-formedness check: 
               <div class="emphasis e505">For each node in the model, the
                  GI of the start tag must be identical to the GI of the end tag.
               </div>. For this
               model, this is the case. 
            </div>
            <div class="para e506">We conclude that with the method described here, lattices can be used to generate
               "standard" models of XML documents in the form of conventional XML document trees.
               Recall
               that we may also refer to nodes that are members of the model as elements. The claim
               that these constitue trees will be
               substantiated below, where we will show that the model building procedure indeed
               guarantees production of tree structures only.
            </div>
         </div><a name="ModelingdocumentswithoverlapANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e507">
            <div class="title e508">Modeling documents with overlap</div>
            <div class="para e509">In this section, we will show that lattices can also be used in order to generate
               models
               of O-XML documents in the form of GODDAGs [
               <div class="xref e510" linkend="Sperberg-McQueenandHuitfeldt2000"></div>]. Consider the following O-XML sample document, D
               <div class="subscript e511">2</div>: 
               <div class="figure e512">
                  <div class="title e513">Sample document 2 (D
                     <div class="subscript e514">2</div>)
                  </div>
                  <div class="para e515">
                     
                     <div class="code e516">&lt;a&gt;&lt;b&gt;X&lt;c&gt;Y&lt;/b&gt;Z&lt;/c&gt;&lt;/a&gt;</div>
                     
                  </div>
               </div>
               
            </div>
            <div class="para e517">The lattice L(D
               <div class="subscript e518">2</div>) for this document is as follows (while we have used capital M
               to designate document models for XML documents, we will use capital O to designate
               document
               models for O-XML models): 
               <div class="figure e519" xml:id="O" xreflabel="Lattice O">
                  <div class="title e520">Lattice L(D
                     <div class="subscript e521">2</div>)
                  </div>
                  <div class="mediaobject e522">
                     <div class="imageobject e523">
                        <div class="metaBox e524"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1094').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1094" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e524'
                                 </span><span class="metaAttribute">fileref='../../../vol7/graphics/Johnsen01/Johnsen01-007.png'
                                 </span><span class="metaAttribute">format='png'
                                 </span><span class="metaAttribute">width='330px'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e525">An application of the method described in the previous section to this lattice, yields
               the following candidate model: 
               <div class="figure e526" xml:id="P" xreflabel="Lattice P">
                  <div class="title e527">Candidate model of D
                     <div class="subscript e528">2</div>, M(D
                     <div class="subscript e529">2</div>)
                  </div>
                  <div class="mediaobject e530">
                     <div class="imageobject e531">
                        <div class="metaBox e532"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1110').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1110" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e532'
                                 </span><span class="metaAttribute">fileref='../../../vol7/graphics/Johnsen01/Johnsen01-008.png'
                                 </span><span class="metaAttribute">format='png'
                                 </span><span class="metaAttribute">width='170px'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e533">It easy enough to see that something must have gone wrong here, as there is disagreement
               between the GIs of the start and end tags for the nodes &lt;b&gt;₂&lt;/c&gt;₈ and
               &lt;c&gt;₄&lt;/b&gt;₆. Now D
               <div class="subscript e534">2</div> is not a well-formed XML document, and we have used the
               same procedure for generating M(D
               <div class="subscript e535">2</div>) from D
               <div class="subscript e536">2</div> (which is a well-formed O-XML document
               with overlap, but not a well-formed XML document) as we did for building M(D
               <div class="subscript e537">1</div>) from
               D
               <div class="subscript e538">1</div> (which is a well-formed XML document). The method will build document models for
               well-formed as well as ill-formed documents. However, the ill-formedness of D
               <div class="subscript e539">2</div> will be
               captured by the well-formedness condition introduced above.
            </div>
            <div class="para e540">In constructing O(D
               <div class="subscript e541">2</div>), it suffices to introduce one single modification to the
               procedure described in the previous section: Before performing any other operations
               on
               L(D
               <div class="subscript e542">2</div>), we remove all nodes that have start and end tags with different GIs. Once
               this rule is introduced, the application of the procedure produces the following candidate
               model: 
               <div class="figure e543" xml:id="Q" xreflabel="Lattice           Q">
                  <div class="title e544">Subset O(D
                     <div class="subscript e545">2</div>)
                  </div>
                  <div class="mediaobject e546">
                     <div class="imageobject e547">
                        <div class="metaBox e548"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1150').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1150" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e548'
                                 </span><span class="metaAttribute">fileref='../../../vol7/graphics/Johnsen01/Johnsen01-009.png'
                                 </span><span class="metaAttribute">format='png'
                                 </span><span class="metaAttribute">width='280px'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e549">What we find here is, mutatis mutandis, identical to the GODDAG document model of
               the
               document: 
               <div class="figure e550" xml:id="R" xreflabel="Lattice R">
                  <div class="title e551">GODDAG model of D
                     <div class="subscript e552">2</div>
                  </div>
                  <div class="mediaobject e553">
                     <div class="imageobject e554">
                        <div class="metaBox e555"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1162').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1162" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e555'
                                 </span><span class="metaAttribute">fileref='../../../vol7/graphics/Johnsen01/Johnsen01-010.png'
                                 </span><span class="metaAttribute">format='png'
                                 </span><span class="metaAttribute">width='270px'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e556">We conclude that with the method described here, lattices can also be used for
               generating document models of O-XML documents with overlap in the form of GODDAGs.
               Since the
               extra rule that we introduced in this section does not affect the result for XML documents,
               one and the same method can be used for generating XML trees from XML documents and
               GODDAGs
               from O-XML documents. In other words, if D is a well-formed XML document M(D)=O(D).
               However,
               O(D) does not have any built-in well-formedness check. 
            </div>
         </div><a name="WellformednessANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e557">
            <div class="title e558">Well-formedness</div>
            <div class="para e559">In the previous section we noticed, in passing, that of the proposed method for building
               models from XML and O-XML documents, only M-models carry a well-formedness constraint.
               By
               introducing the rule that all nodes with different GIs on start and end tags should
               be
               deleted from the lattice, we effectively made sure that O(D) fulfills one well-formedness
               constraint on documents. The difference between the M- and O-constructions is subtle:
               The
               M-construction will always produce trees, while the O-construction will not necessarily
               produce trees. That issue is discussed in a subsequent section. The question to be
               asked
               here is: Can document lattices be used to capture the full set of well-formedness
               constraints? 
            </div>
            <div class="para e560">The model building in itself may work even if document D starts with and end tag or
               ends
               with a start tag. The process will just ignore them. If they are taken into account
               as e.g.
               simples, the requirement that L(D) is a lattice will rule them out, since they will
               be
               ordered on the same level as the widest start tag/end tag pair. 
            </div>
            <div class="para e561">Another source of ill-formedness stems from unbalanced parenthesis. For M(D) this
               is
               taken care of by requiring that the top node of L(D) is also the top node of M(D).
               The
               reason for this is that the top node of L(D) will be the widest start/end tag pair.
               If that
               pair is not a node it will be because all the tags are used up, so to speak, before
               it is
               reached, as the model building moves inside out. Consider this ill-formed document
               <div class="popupBox e562">
                  <div class="popupLabel" onmouseover="$('#d1e1176').show('1000');" onmouseout="$('#d1e1176').hide('1000');">[ blockquote ]</div>
                  <div id="d1e1176" style="display: none;">
                     <div class="blockquote">
                        <div class="para e563">
                           
                           <div class="code e564">&lt;a&gt;₁&lt;b&gt;₂&lt;/b&gt;₃</div>
                           
                        </div>
                     </div>
                  </div>
               </div> The top node for L(D) is 
               <div class="code e565">&lt;a&gt;₁&lt;/b&gt;₃</div>
               but this node will be removed from M(D) as a relative of the minimal
               
               <div class="code e566">&lt;b&gt;₂&lt;/b&gt;₃</div>. 
            </div>
            <div class="para e567">For O(D) this doesn't work since the removal process looks at tag GI, so if the document
               is this 
               <div class="popupBox e568">
                  <div class="popupLabel" onmouseover="$('#d1e1191').show('1000');" onmouseout="$('#d1e1191').hide('1000');">[ blockquote ]</div>
                  <div id="d1e1191" style="display: none;">
                     <div class="blockquote">
                        <div class="para e569">
                           
                           <div class="code e570">&lt;a&gt;₁&lt;b&gt;₂&lt;/a&gt;₃</div>
                           
                        </div>
                     </div>
                  </div>
               </div> it is &lt;b&gt;₂&lt;/a&gt;₃ which is left out. So we cannot
               pin the requirement on the top node. However, we take it that for any document, including
               O-XML,
               that each tag should find a partner. Clearly &lt;b&gt;₂ in this document does
               not have one. 
            </div>
            <div class="para e571">We conjecture that, in addition to the already introduced rule of deleting nodes with
               non-matching GIs on start and end tags, the following rule should suffice to capture
               all
               remaining well-formedness constraints on O-XML: 
            </div>
            <div class="para e572"> For any x.start or x.end in L(D) there must be an element E in M(D) or O(D) such
               that
               E.start=x.start or E.end=x.end.
            </div>
            <div class="para e573">This should make sure that every tag in L(D) finds a match in M(D) or O(D). Moreover,
               ff
               M(D) is constructed without first removing non macthin GIs, the GI agreement constraint
               mentioned above will rule out any overlap.
            </div>
            <div class="para e574">If this conjecture is correct, it means that checking for well-formedness as well
               as
               asignment of document structure can be accomplished by using document lattices, and
               without
               the use of rewrite grammars.
            </div>
         </div><a name="ConcludingremarksANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e575">
            <div class="title e576">Concluding remarks</div>
            <div class="para e577">We believe that the proposed use of document lattices for building document models
               from
               marked up documents provides a unified account of the assignment of structure to documents
               with and without overlap. If our conjecture about well-formedness is correct, this
               account
               is also able to capture all well-formedness constraints on both types of markup.
            </div>
            <div class="para e578">The proposed method exploits the observations made about possible alternative
               conventions for the assignment of structure to simple parenthetical expressions made
               earlier. In building models for both kinds of documents, XML and O-XML, we rely on
               the
               "nesting" convention. The difference is that for XML documents, information about
               the GIs of
               tags may be ignored, whereas for O-XML documents this information is essential. 
            </div>
            <div class="para e579">In introducing O-XML, we said that the only difference between XML and O-XML is that
               O-XML allows overlapping elements, whereas XML does not. What about so-called self-overlap,
               discontinuous elements and virtual elements, mechanisms which have been proposed in
               for
               example TexMECS, LMNL and other alternative markup languages? We believe that the
               handling
               of self-overlap with document lattices is just a question of adjusting the basic morphology.
               Whether, or to what extent, document lattices can also be used for markup languages
               with
               discontinuous or virtual elements we simply do not know.
            </div>
         </div>
      </div><a name="AlgebraiccharacterizationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e580">
         <div class="title e581">Algebraic characterization</div><a name="MeetandjoinANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e582">
            <div class="title e583">Meet and join</div>
            <div class="para e584">The meet and join operations are a central part of lattice theory. In our context,
               they
               may serve to characterize the difference between the models for XML and O-XML, and
               their
               relationship to the lattice L. 
            </div>
            <div class="para e585"> The meet operation selects the largest node below its operands, while join selects
               the
               smallest above its operands. A requirement for lattices is that any two nodes have
               a meet
               and a join. 
            </div>
            <div class="para e586">Since we are dealing not primarily with lattices in the strict sense, but mostly with
               semi-lattices, we need to lighten this requirement for the meet operation: two nodes
               are
               allowed not to have any meet if they do not have any common nodes below them at all.
               
            </div>
            <div class="para e587">We indicate the vertical ordering of nodes in a lattice by using the symbols ⊒
               and ⊑, so that the opening is faced towards the larger node. In other words,
               x⊒y means that x is higher in the lattice than y, while x⊑y means that y
               is higher than x.
            </div>
            <div class="para e588">We can now define the meet operation, indicated by the operator ⊓, and the
               join operation, indicated by the operator ⊔, as follows: 
               <div class="variablelist e589">
                  <div class="varlistentry e590">
                     <div class="term e591">meet:</div>
                     <div class="listitem e592">
                        <div class="para e593">x⊓y=z iff, for all u, whenever u⊑x and u⊑y then
                           u⊑z. 
                        </div>
                     </div>
                  </div>
                  <div class="varlistentry e594">
                     <div class="term e595">join:</div>
                     <div class="listitem e596">
                        <div class="para e597">x⊔y=z iff, for all u, whenever u⊒x and u⊒y then
                           u⊒z. 
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e598">The meet and join operations can also be characterized in terms of tag configurations.
               Let the start and end tag for a node x be written as x.start and x.end. The meet operation
               can be captured by saying that whenever z=x⊓y then z.start=max(x.start, y.start)
               and z.end=min(x.end,y.end). Similarly, the join operation can be captured by saying
               that
               whenever z=x⊔y then z.start=min(x.start,y.start) and z.end=max(x.end, y.end). 
               <div class="popupBox e599">
                  <div class="popupLabel" onmouseover="$('#d1e1247').show('1000');" onmouseout="$('#d1e1247').hide('1000');">[ footnote ]</div>
                  <div id="d1e1247" style="display: none;">
                     <div class="footnote">
                        <div class="para e600"> To see that this is so, consider first the case of ⊓. Any node that is
                           below x must have a start tag occurring after or at x.start and an end tag at or before
                           x.end, and similarly for any node below y. Thus, any node u, such that u⊑x and
                           u⊑y, must satisfy that u.start ≥ x.start and that u.start ≥
                           y.start, and both of u.end ≤ x.end and u.end ≤y.end. Consequently, any
                           such u will therefore also satisfy u⊑z so z must be equal to x⊓y in
                           accordance with the definition for ⊓. A similar argument can be applied to
                           ⊔. As simples are minimal, they cannot have a meet, while their join will be
                           discussed below.
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
         </div><a name="AreM(D)andO(D)lattices?ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e601">
            <div class="title e602">Are M(D) and O(D) lattices?</div>
            <div class="para e603">The first step of the method we have proposed consists in constructing, on the basis
               of
               a marked up document D, a lattice L(D). The construction method ensures that L(D)
               always is
               a lattice, i.e. that it has a unique largest node, that every pair of nodes has a
               join, and
               that every pair of non-minimal nodes has a meet. The document models, M(D) for XML
               documents
               and O(D) for O-XML documents, however, are derived from L(D) through a filtering process.
               Therefore, it is appropriate to ask whether M(D) and O(D) are also lattices, or not.
               
            </div>
            <div class="para e604">In this section we will argue that M(D) is not only guaranteed to be a lattice, it
               is
               also guaranteed to be a tree. O(D), however, is obviously not guaranteed to be a tree,
               but
               it is also not guaranteed to be a lattice.
            </div>
            <div class="para e605"> We have earlier observed the similarity between the document model M(D) and XML trees.
               The following argument will show that this is necessarily the case for any model M(D).
               In
               XML, whenever both x.start&lt;y.start and y.start&lt;x.end is true, it is safe to conclude
               that y.end&lt;x.end (in other words, there is no overlap). This is also true for the
               relationships in M(D). 
            </div>
            <div class="para e606"> To see why, consider x and y, both elements of a model M(D), with the assumption
               that
               x.start&lt;y.start and y.start&lt;x.end. We want to show that it will always be the case
               that y.end&lt;x.end under these circumstances. So suppose for contradiction that this
               is not
               so, and that x.end&lt;y.end. Then there exists a node z=(y.start,x.end) in L(D), since
               y.start&lt;x.end (recall that L(D) contains all pairs of start tags followed by end tags).
               It is also clear that z is not a member of M(D). Further, from z's definition, we
               note that
               z is smaller than both x and y, and also a relative of both. This is enough to contradict
               the selection assumption for M(D): if z is smaller than x, then, since z=(y.start,
               x.end), z
               cannot have been removed in the model building process as a candidate for x, because
               any
               node is below all the relatives it removes, and by assumption z&lt;x . So z must then
               have
               been removed as candidate for M(D) considered as a relative of y. But this contradicts
               the
               assumption that z&lt;y, since y&lt;z for z to be removed. We can therefore conclude that
               assuming that x.end&lt;y.end is not tenable, and therefore that y.end&lt;x.end. This means
               that if ⊓ is confined to elements of M(D), u⊓v is either one of u or v (if it
               has a value at all); if u strictly comes after v, they would not share any nodes.
               A
               consequence of this is that any element x must have a unique parent (if it has one
               at all):
               if both u and v where distinct parents in M(D) (i.e. smallest nodes above x), x⊑u
               and
               x⊑v, which would mean that x⊑u⊓v=u (or v). We can therefore conclude that
               M(D) is a tree. 
            </div>
            <div class="para e607"> The above argument does not hold for O(D) which models overlap structures. The example
               GODDAG in 
               <div class="xref e608" linkend="R"></div> shows that the structure is not a tree, as the simple Y has
               two parents. Also, the join may be undefined when restricted to O(D) (that is, redefined
               within O(D) and not computed within L(D)). In O(D) two elemnts do not necessarily
               have a
               unique smallest dominating element, even if there are elements above them. For example,
               two
               elements x and y may be dominated by elementss a and b, and neither of these dominate
               the
               other if they overlap. In this example it is therefore impossible to select a smallest
               dominating element to serve as the join of x and y. 
            </div>
         </div><a name="ClosureANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e609">
            <div class="title e610">Closure</div>
            <div class="para e611"> In this section and the ones that follow, we will look at the differences between
               O-
               and M-models in terms of meet and join. This also brings us to regard M(D) and O(D)
               as
               subsets of L(D), and consider ways of adding nodes to them in order to make them satisfy
               certain requirements. 
            </div>
            <div class="para e612"> When M(D) and O(D) are seen as subsets of L(D), with meet and join computed in L(D),
               there are a number of differences between them that were not captured above, when
               we limited
               ourselves to look at their structures only. Our first question is whether the meet
               and join
               operations are closed in M(D) and O(D). (An operation is closed in a subset A if the
               result
               of the operation stays in A when operating on elements of A.) 
            </div>
            <div class="para e613">One defining difference between O(D) and M(D) in terms of closure is that while the
               meet
               operation is closed in M(D), it is not in O(D). As we saw above, given two elements
               x and y
               in M(D), their meet is either x or y, which is still in M(D). If u and v in O(D) are
               distinct and overlapping, which means that u.start&lt;v.start while u.end&lt;v.end, their
               meet is w=(v.start,u.end), which is not an element of O(D). (It is a node in L(D),
               but since
               it is a relative of both u and v, it is not a member of O(D)). 
            </div>
            <div class="para e614">The join operation will not always be closed, neither in M(D) nor in O(D). If x precedes
               y with both tags of x before y.start, their join is (x.start,y.end). This node cannot
               be any
               element neither of M(D) nor of O(D), since it is a relative of both x and y, but not
               identical to any of them. 
            </div>
            <div class="para e615">An observation concerning M(D) is that there are nested documents that are closed
               under
               both join and meet. Documents where no node precedes another are of that type, like
               for
               example 
               <div class="code e616">&lt;r&gt;&lt;a&gt;X&lt;/a&gt;&lt;r&gt;</div>. In a document like this, where ⊑ is a
               total order, it is the case that if x⊔y=x then x⊓y=y and vice versa. A
               document with overlap will in general leak into L(D) for both meet and join.
            </div>
            <div class="para e617">Consider D
               <div class="subscript e618">2</div> from the previous section. The lattice L(D
               <div class="subscript e619">2</div>) may be used to
               represent M(D
               <div class="subscript e620">2</div>) as well as O(D
               <div class="subscript e621">2</div>). D
               <div class="subscript e622">2</div> is an O-XML document with overlap, so
               M(D
               <div class="subscript e623">2</div>) will be ill-formed, but that is not of relevance at this point; M(D
               <div class="subscript e624">2</div>) will
               simply exhibit the nested view of the document. In the figure below, showing the lattice
               L(
               <div class="subscript e625">2</div>), the elements of M(D
               <div class="subscript e626">2</div>) are indicated with a ✓, while the elements of
               O(D
               <div class="subscript e627">2</div>) are indicated with a ✗; the simples are members of both models. 
               <div class="figure e628" xml:id="OMD2" xreflabel="Lattice OMD2">
                  <div class="title e629">L(D
                     <div class="subscript e630">2</div>) with subsets ✓M(D
                     <div class="subscript e631">2</div>) and ✗O(D
                     <div class="subscript e632">2</div>)
                  </div>
                  <div class="mediaobject e633">
                     <div class="imageobject e634">
                        <div class="metaBox e635"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1329').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1329" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e635'
                                 </span><span class="metaAttribute">fileref='../../../vol7/graphics/Johnsen01/Johnsen01-011.png'
                                 </span><span class="metaAttribute">format='png'
                                 </span><span class="metaAttribute">width='330px'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e636">We write M(D)* for the closure of M(D). It is obtained by collecting all nodes
               x⊓y and x⊔y in L(D) where x, y are elements of M(D), with recombinations.
               Similarly, we write O(D)* for the closure of O(D). The new nodes that are added in
               this way
               are called semi-elements, distinct from the elements of M(D) or O(D).
            </div>
            <div class="para e637">Here is what the O-XML document D
               <div class="subscript e638">2</div> with overlap looks like with semi-elements
               added. The semi-elements are indicated with a check mark, ✓. Note that the
               semi-elements are precisely the candidate elements for M(D
               <div class="subscript e639">2</div>), an observation we return
               to below.
               <div class="figure e640" xml:id="oOMD2" xreflabel="Lattice oOMD2">
                  <div class="title e641">O(D
                     <div class="subscript e642">2</div>)* with semi-elements check marked.
                  </div>
                  <div class="mediaobject e643">
                     <div class="imageobject e644">
                        <div class="metaBox e645"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1350').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1350" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e645'
                                 </span><span class="metaAttribute">fileref='../../../vol7/graphics/Johnsen01/Johnsen01-012.png'
                                 </span><span class="metaAttribute">format='png'
                                 </span><span class="metaAttribute">width='277px'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e646"> The semi-elements are considered nameless, they may be annotated with an algebraic
               formula having that node as value. 
               <div class="figure e647" xml:id="oOMD2s" xreflabel="Lattice oOMD2s">
                  <div class="title e648">O(D
                     <div class="subscript e649">2</div>)* 
                  </div>
                  <div class="mediaobject e650">
                     <div class="imageobject e651">
                        <div class="metaBox e652"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1363').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1363" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e652'
                                 </span><span class="metaAttribute">fileref='../../../vol7/graphics/Johnsen01/Johnsen01-013.png'
                                 </span><span class="metaAttribute">width='222px'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e653"> The reader may check that the above diagram represents the closure of O(D
               <div class="subscript e654">2</div>). Here
               are all possible combinations alongside their value, not including combinations involving
               elements x and y such that x≤y. 
               <div class="table e655">
                  <div class="caption e656">
                     <div class="para e657">All possible meet and join combinations for O(D
                        <div class="subscript e658">2</div>)
                     </div>
                  </div>
                  <div class="metaBox e659"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1378').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1378" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='left'
                           </span><span class="metaAttribute">class='e659'
                           </span><span class="metaAttribute">span='1'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
                  <div class="tr e660">
                     <div class="td e661">X₃⊔Y₅ = b = &lt;b&gt;₂&lt;/b&gt;₆</div>
                  </div>
                  <div class="tr e662">
                     <div class="td e663">X₃⊔Z₇ = b⊔c = &lt;b&gt;₂&lt;/c&gt;₈</div>
                  </div>
                  <div class="tr e664">
                     <div class="td e665">Z₇⊔Y₅ = c = &lt;c&gt;₄&lt;/c&gt;₈</div>
                  </div>
                  <div class="tr e666">
                     <div class="td e667">b⊓c = &lt;c&gt;₄&lt;/b&gt;₆</div>
                  </div>
               </div>
               
            </div>
            <div class="para e668"> It was noted above that M(D
               <div class="subscript e669">2</div>) was a subset of O(D
               <div class="subscript e670">2</div>)*. We want to demonstrate
               that it holds for any document D that M(D) is a subset of O(D)*, even though M(D)
               and O(D)
               need only have the top element in common. The converse does not hold. A consequence
               of this
               is that O-XML documents with overlap cannot be reached from algebraic manipulations
               on M(D),
               but that the corresponding XML document without overlap can be reached from O(D)*.
            </div>
            <div class="para e671"> For this to make sense, D must be a well-formed overlapping O-XML document. If D
               has no
               overlap, it will also be a well-formed XML document for which we have already established
               that O(D)=M(D). Hence, in that case M(D) will automatically be a subset of O(D)* (=M(D)*).
               Further, we take it without argument that if O(D) contains an element x that does
               not
               overlap with any other element y in O(D), x will also be a member of M(D). It doesn't
               matter
               if x contains, or is contained, in an overlap configuration as long x does not itself
               overlap with another element. To illustrate, the a and b elements of the following
               document
               D
               <div class="subscript e672">4</div> will be elements of both M(D
               <div class="subscript e673">4</div>) and O(D
               <div class="subscript e674">4</div>), even though c and d overlaps.
               The latter two will obviously not be members of M(D
               <div class="subscript e675">4</div>):
               
               <div class="programlisting e676" xml:space="preserve">&lt;a&gt;&lt;d&gt;X&lt;c&gt;&lt;b&gt;Y&lt;/b&gt;&lt;/d&gt;Z&lt;/c&gt;&lt;/a&gt;</div> In
               addition to the simples, the elements of M(D
               <div class="subscript e677">4</div>) will be these (token indexes are skipped
               since the GIs serve to uniquely identify token tags), where the linear order of the
               elements
               also reflects the hierarchical order:
               
               <div class="programlisting e678" xml:space="preserve">(&lt;a&gt;,&lt;/a&gt;) (&lt;d&gt;,&lt;/c&gt;) (&lt;c&gt;,&lt;/d&gt;) (&lt;b&gt;,&lt;/b&gt;)</div>
               So the odd elements here, which are not elements of O(D
               <div class="subscript e679">4</div>), are these two
               
               <div class="programlisting e680" xml:space="preserve">(&lt;d&gt;,&lt;/c&gt;) (&lt;c&gt;,&lt;/d&gt;)</div> It can be seen that these
               two nodes are semi-elements of O(D
               <div class="subscript e681">4</div>)* given the equations 
               <div class="programlisting e682" xml:space="preserve">(&lt;d&gt;,&lt;/c&gt;)=(&lt;d&gt;,&lt;/d&gt;)⊔(&lt;c&gt;,&lt;/c&gt;)</div>
               
               <div class="programlisting e683" xml:space="preserve">(&lt;c&gt;,&lt;/d&gt;)=(&lt;d&gt;,&lt;/d&gt;)⊓(&lt;c&gt;,&lt;/c&gt;)</div>
               
            </div>
            <div class="para e684">The above equations hold also in the general case. Consider an O-XML document D, and
               an
               element m in M(D), so m may possibly not have matching tags. Then it will be the case
               that either m
               is in O(D), or else there will be elements in O(D) so that m is their join, their
               meet or a
               combination of join and meet. To see this, note that m will either be well-formed
               according
               to XML (checked through the GI-identity constraint) or it will not, but still well-formed
               according to O-XML. So it is like either 
               <div class="code e685">(&lt;a&gt;,&lt;/a&gt;)</div> or
               
               <div class="code e686">(&lt;d&gt;,&lt;/c&gt;)</div> of M(D
               <div class="subscript e687">4</div>). If m is a member of O(D), it will also be in
               O(D)*. So consider the case where m is not an element in O(D). Then there must be
               distinct
               elements a and b in O(D) so that a.start=m.start and b.end=m.end, this because of
               the
               constraint which says all tag tokens must be part of an element. Now there are three
               cases
               to consider: 
               <div class="orderedlist e688">
                  <div class="listitem e689">
                     <div class="para e690">a.start&lt;b.start and a.end&lt;b.end (this subsumes overlap and
                        sequencing)
                     </div>
                  </div>
                  <div class="listitem e691">
                     <div class="para e692">b.start&lt;a.start and b.end&lt;a.end (overlap only)</div>
                  </div>
                  <div class="listitem e693">
                     <div class="para e694">a.start&lt;b.start and b.end&lt;a.end (nesting)</div>
                  </div>
               </div>
               
            </div>
            <div class="para e695"> In the first case m=a⊔b, while in the second, m=a⊓b, parallel to the case
               for D
               <div class="subscript e696">4</div>.The third case, the nesting case is a bit trickier. The tag configuration for a and
               b is now 
               <div class="programlisting e697" xml:space="preserve">...&lt;a&gt;...&lt;b&gt;....&lt;/b&gt;...</div> where
               m=
               <div class="code e698">(&lt;a&gt;,&lt;/b&gt;</div>), another way of stating that m=(a.start, b.end). Recall
               that the M-models are constructed without looking at GIs, so for m to be an element
               of M(D),
               all the tags between a.start(=m.start) and b.end(=m.end) must match up. In particular
               there
               must be an equal number of start tags and end tags between a.start and b.end. Since
               we
               already have b.start in there, we know there must be at least one extra end tag between
               a.start and b.end. That end tag must be matched in O(D) by a start tag outside of
               the
               (a.start, b.end) configuration. Which means that there must be an element c of O(D)
               such
               that c.end is between a.start and b.end and such that c.start is outside of the pair,
               that
               is c.start&lt;a.start. Now m can be written on the form m=a⊓c⊔b, and so is a
               semi-element of O(D)*. 
               <div class="popupBox e699">
                  <div class="popupLabel" onmouseover="$('#d1e1474').show('1000');" onmouseout="$('#d1e1474').hide('1000');">[ footnote ]</div>
                  <div id="d1e1474" style="display: none;">
                     <div class="footnote">
                        <div class="para e700">Note in passing that there must be an end tag positioned between b.start and b.end.
                           This is so because m as a member of M(D) do not allow overlap, and with b.start between
                           its start and end tags, b.start must match up with a tag in M(D) that comes before
                           b.end
                           itself. If c does not serve this purpose, there will be additional tags between a.start
                           and b.end
                        </div>
                     </div>
                  </div>
               </div> 
            </div>
            <div class="para e701">This result, that M(D) is a subset of O(D)*, but not vice versa, pinpoints an asymmetry
               between overlapping and nesting documents. Nested documents can be recovered, so to
               speak,
               from overlapping documents, but there are overlapping documents that cannot be described
               algebraicly in terms of nested documents. 
            </div>
         </div><a name="SpuriousoverlapANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e702">
            <div class="title e703">Spurious overlap</div>
            <div class="para e704">Closure models may be help in representing certain cases so-called spurious overlap
               as discussed in [
               <div class="xref e705" linkend="HuitfeldtandSperberg-McQueen2003"></div>]. Roughly, spurious overlap occurs
               whenever two elements a and b overlap, and there is no PCDATA either between the two
               start
               tags, or between the two end tags, or between the start tag of a and the end tag of
               b. The
               following O-XML document D
               <div class="subscript e706">3</div> may illustrate. 
               <div class="popupBox e707">
                  <div class="popupLabel" onmouseover="$('#d1e1490').show('1000');" onmouseout="$('#d1e1490').hide('1000');">[ blockquote ]</div>
                  <div id="d1e1490" style="display: none;">
                     <div class="blockquote">
                        <div class="para e708">
                           
                           <div class="code e709">&lt;a&gt;&lt;b&gt;X&lt;c&gt;&lt;/b&gt;Y&lt;/c&gt;&lt;a&gt;</div>
                           
                        </div>
                     </div>
                  </div>
               </div> Its document model is this 
               <div class="figure e710" xml:id="MD3" xreflabel="Spurious           model">
                  <div class="title e711">O(D
                     <div class="subscript e712">3</div>)
                  </div>
                  <div class="mediaobject e713">
                     <div class="imageobject e714">
                        <div class="metaBox e715"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1505').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1505" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e715'
                                 </span><span class="metaAttribute">fileref='../../../vol7/graphics/Johnsen01/Johnsen01-014.png'
                                 </span><span class="metaAttribute">width='200px'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e716"> Except for token indexes, it is identical to the document model for the following
               XML document: 
               <div class="popupBox e717">
                  <div class="popupLabel" onmouseover="$('#d1e1510').show('1000');" onmouseout="$('#d1e1510').hide('1000');">[ blockquote ]</div>
                  <div id="d1e1510" style="display: none;">
                     <div class="blockquote">
                        <div class="para e718">
                           
                           <div class="code e719">&lt;a&gt;&lt;b&gt;X&lt;/b&gt;&lt;c&gt;Y&lt;/c&gt;&lt;a&gt;</div>
                           
                        </div>
                     </div>
                  </div>
               </div> The closures of the two document models are slightly different, though. The
               document with spurious overlap has this closure: 
               <div class="figure e720" xml:id="SCD3" xreflabel="Spurious           closure">
                  <div class="title e721">O(D
                     <div class="subscript e722">3</div>)*
                  </div>
                  <div class="mediaobject e723">
                     <div class="imageobject e724">
                        <div class="metaBox e725"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1525').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1525" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e725'
                                 </span><span class="metaAttribute">fileref='../../../vol7/graphics/Johnsen01/Johnsen01-015.png'
                                 </span><span class="metaAttribute">width='200px'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div> while the document without overlap has this closure:
               <div class="figure e726" xml:id="CD3" xreflabel="Nested             closure">
                  <div class="title e727">M(D
                     <div class="subscript e728">3</div>a)*
                  </div>
                  <div class="mediaobject e729">
                     <div class="imageobject e730">
                        <div class="metaBox e731"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1536').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1536" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e731'
                                 </span><span class="metaAttribute">fileref='../../../vol7/graphics/Johnsen01/Johnsen01-016.png'
                                 </span><span class="metaAttribute">width='200px'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e732"> This may serve to illustrate the close relationship between the lattice model and
               the
               serial form of the marked up document. By the use of closure models with semi-elements,
               documents with spurious overlap can be distinguished from other documents which share
               the
               same document model.
            </div>
         </div>
      </div><a name="ConclusionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e733">
         <div class="title e734">Conclusion</div>
         <div class="para e735"> We have described a method for building lattices from marked up documents with and
            without overlap, and for generating, from these lattices, document models in the form
            of trees
            for XML documents, and in the form of GODDAGs for documents with overlap. We have
            shown that
            one and the same method can be used for generating both kinds of models, and we have
            given
            reasons to believe that lattices can also be used to implement well-formedness constraints
            for
            both kinds of documents. In this sense, this is also a step away from relying on context
            free
            grammars and the like in analyzing documents. As presented here, model building is
            kept
            separate from grammar, but we leave open the question of how this bears on document
            validation. 
         </div>
         <div class="para e736">We have discussed and compared some of the algebraic features of the document models
            and
            the relations between them, and pointed out some interesting results. For example,
            that the
            algebraic operations provide a link between nested documents and overlapping documents.
            The
            former can be computed by algebraic means from the latter, but not the other way around.
            We
            have also disussed how the algebraically closed models can be used to distinguish
            models of
            spurious overlap from nested models, via the introduction of semi-elements.
         </div>
         <div class="para e737"> Therefore, although many of the details in the work presented here probably are in
            need
            of correction and revision, we believe that the application of lattices to marked
            up documents
            may provide a unified account of markup languages with and without overlap.
         </div>
      </div><a name="AppendixANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e738">
         <div class="title e739">Appendix</div>
         <div class="para e740">In the section called "Bracketed notations and matching" we defined the grammar P.
            We will
            formally prove that any two parentheses (a left then a right) can be added to a well-formed
            parenthetical expression according to this grammar, while preserving well-formedness.
            We start
            with the following lemma 
         </div>
         <div class="para e741">
            
            <div class="emphasis e742" role="bold">Lemma on string splitting</div>
            
         </div>
         <div class="para e743">Let the string 
            <div class="code e744">S</div> over left and right parentheses be derived according to P,
            and decomposed into 
            <div class="code e745">S=XYZ</div>. Then 
            <div class="code e746">X</div>, 
            <div class="code e747">Y</div> and 
            <div class="code e748">Z</div>
            can be reduced, by removing non-terminal Ps
            from each of them into 
            <div class="code e749">X'</div>, 
            <div class="code e750">Y'</div>, and 
            <div class="code e751">Z'</div>, such that 
            
            <div class="code e752">X'=(
               <div class="superscript e753">n</div>
            </div> and
            
            <div class="code e754">Y'=)
               <div class="superscript e755">m</div>(
               <div class="superscript e756">p</div>
            </div> and
            
            <div class="code e757">Z'=)
               <div class="superscript e758">q</div>
            </div>, so that 
            <div class="code e759">S'</div> is well-formed. 
         </div>
         <div class="para e760">Proof: Since 
            <div class="code e761">X</div> is the leftmost string of 
            <div class="code e762">S</div>, any right
            parenthesis, 
            <div class="code e763">)</div>, in 
            <div class="code e764">X</div> must occur in the pattern 
            <div class="code e765">(p)</div>, and
            such a pattern can safely be removed without destroying the well-formedness of the
            expression.
            Thus, 
            <div class="code e766">X</div> will in the end be reduced to 
            <div class="code e767">X'</div> as a consecutive string of
            left parentheses. A parallel argument goes for 
            <div class="code e768">Z</div> and its reduction to
            
            <div class="code e769">Z'</div> as a string of right parentheses. For 
            <div class="code e770">Y</div> the story is a bit
            different, since a left or right parenthesis may be generated with a corresponding
            parenthesis
            in 
            <div class="code e771">X</div> or 
            <div class="code e772">Z</div>. However, we can safely conclude that if all
            
            <div class="code e773">P</div>s are removed from Y, then there can be no string of the form 
            <div class="code e774">(W)</div>
            in 
            <div class="code e775">Y</div>, since either 
            <div class="code e776">)</div> is derived with a corresponding 
            <div class="code e777">(</div>
            in 
            <div class="code e778">W</div>, or 
            <div class="code e779">(</div> is derived with a corresponding 
            <div class="code e780">)</div> in
            
            <div class="code e781">W</div>. Thus, Y' must be a string of 
            <div class="code e782">)</div>'s followed by 
            <div class="code e783">(</div>'s.
            Since removing a 
            <div class="code e784">P</div> from a well-formed string won't affect its well-formedness,
            the string 
            <div class="code e785">S'=X'Y'Z'</div> is well-formed.
         </div>
         <div class="para e786"> This lemma will be used to show that any pair of left and right parentheses can be
            inserted into a well-formed string without affecting its well-formedness. 
         </div>
         <div class="para e787">
            
            <div class="emphasis e788" role="bold">Well-formedness of additional parentheses</div>
            
         </div>
         <div class="para e789">Let the string S be a well-formed parenthetical expression according to P. Inserting
            a
            left parenthesis anywhere in 
            <div class="code e790">S</div> followed by a right parenthesis anywhere after the
            left, will result in a well-formed string according to 
            <div class="code e791">P</div>.
         </div>
         <div class="para e792">Proof: Split the string 
            <div class="code e793">S</div> into three substrings 
            <div class="code e794">XYZ</div> at the
            positions where ( and ) are to be inserted, so that The new string is 
         </div>
         <div class="popupBox e795">
            <div class="popupLabel" onmouseover="$('#d1e1714').show('1000');" onmouseout="$('#d1e1714').hide('1000');">[ blockquote ]</div>
            <div id="d1e1714" style="display: none;">
               <div class="blockquote">
                  <div class="para e796">
                     
                     <div class="code e797">S
                        <div class="subscript e798">1</div>=X(Y)Z.
                     </div>
                     
                  </div>
               </div>
            </div>
         </div>
         <div class="para e799"> Now according to lemma, X Y and Z can be reduced and re-concatenated into the well-formed
            expression
         </div>
         <div class="popupBox e800">
            <div class="popupLabel" onmouseover="$('#d1e1726').show('1000');" onmouseout="$('#d1e1726').hide('1000');">[ blockquote ]</div>
            <div id="d1e1726" style="display: none;">
               <div class="blockquote">
                  <div class="para e801">
                     
                     <div class="code e802">
                        (
                        <div class="superscript e803">n</div>)
                        <div class="superscript e804">m</div>(
                        <div class="superscript e805">p</div>)
                        <div class="superscript e806">q</div>
                        
                     </div>
                     
                  </div>
               </div>
            </div>
         </div>
         <div class="para e807"> Inserting the new left-( and right-) into their respective positions, results in
            
            <div class="popupBox e808">
               <div class="popupLabel" onmouseover="$('#d1e1746').show('1000');" onmouseout="$('#d1e1746').hide('1000');">[ blockquote ]</div>
               <div id="d1e1746" style="display: none;">
                  <div class="blockquote">
                     <div class="para e809">
                        
                        <div class="code e810">
                           (
                           <div class="superscript e811">n</div>()
                           <div class="superscript e812">m</div>(
                           <div class="superscript e813">p</div>))
                           <div class="superscript e814">q</div>
                           
                        </div>
                        
                     </div>
                  </div>
               </div>
            </div> Now, all that is left to do is just to shift the superscripts to the right and
            left; this expression can be written as 
            <div class="popupBox e815">
               <div class="popupLabel" onmouseover="$('#d1e1765').show('1000');" onmouseout="$('#d1e1765').hide('1000');">[ blockquote ]</div>
               <div id="d1e1765" style="display: none;">
                  <div class="blockquote">
                     <div class="para e816">
                        
                        <div class="code e817">
                           ((
                           <div class="superscript e818">n</div>)
                           <div class="superscript e819">m</div>(
                           <div class="superscript e820">p</div>)
                           <div class="superscript e821">q</div>)
                           
                        </div>
                        
                     </div>
                  </div>
               </div>
            </div>
            
         </div>
         <div class="para e822"> But this is just the expression 
            <div class="code e823">(X'Y'Z')</div>, and since the 
            <div class="code e824">X'Y'Z'</div>,
            can be reduced to a sequence of 
            <div class="code e825">Ps</div>,  the resulting
            expression is also well-formed, being then on the form 
            <div class="code e826">(P*)</div>. 
         </div>
         <div class="para e827"> This proposition guarantees that the intended matching of the parentheses is of no
            concern to the well-formedness of the expression. 
         </div>
      </div><a name="ReferencesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e828">
         <div class="title e829">References</div>
         <div class="bibliomixed e830" xml:id="abney97" xreflabel="Abney 1997">Abney, Steven, 
            <div class="quote e831">Partial Parsing via
               Finite-State Cascades
            </div>. 
            <div class="emphasis e832" role="ital">Journal of Natural Language Engineering
               2:337-344.
            </div>
         </div>
         <div class="bibliomixed e833" xml:id="Barnardetal.1988" xreflabel="Barnard et al. 1988">Barnard, David, Ron
            Hayter, Maria Karababa, George Logan, and John McFadden, 
            <div class="quote e834">SGML-based markup for literary
               texts: Two problems and some solutions
            </div>, 
            <div class="emphasis e835" role="ital">Computers and the
               Humanities
            </div>, 22: 265-276. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e836" xlink:actuate="onRequest" xlink:href="http://www.springerlink.com/content/r1p6t63627663436/" xlink:show="new" xlink:type="simple">http://www.springerlink.com/content/r1p6t63627663436/</div>
         </div>
         <div class="bibliomixed e837" xml:id="Barnardetal.1995" xreflabel="Barnard et al. 1995">Barnard, David; Burnard,
            Lou; Gaspart, Jean-Pierre; Price, Lynne A.; Sperberg-McQueen, C. M.; Varile, Giovanni
            Battista, 
            <div class="quote e838">Hierarchical Encoding of Text: Technical Problems and SGML Solutions</div>,
            
            <div class="emphasis e839" role="ital">Computers and the Humanities</div>, The Text Encoding Initiative:
            Background and Contents, Guest Editors Nancy Ide and Jean Vèronis, 29/3, 211-231.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e840" xlink:actuate="onRequest" xlink:href="http://www.springerlink.com/content/p7775247276v88h3/" xlink:show="new" xlink:type="simple">http://www.springerlink.com/content/p7775247276v88h3/</div>
         </div>
         <div class="bibliomixed e841" xml:id="Bauman2005" xreflabel="Bauman 2005">Bauman, Syd, 
            <div class="quote e842">TEI HORSEing
               around
            </div>, 
            <div class="emphasis e843" role="ital">Proceedings of Extreme Markup Languages®</div>.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e844" xlink:actuate="onRequest" xlink:href="http://conferences.idealliance.org/extreme/html/2005/Bauman01/EML2005Bauman01.html" xlink:show="new" xlink:type="simple">http://conferences.idealliance.org/extreme/html/2005/Bauman01/EML2005Bauman01.html</div>
         </div>
         <div class="bibliomixed e845" xml:id="Carlettaetal.2005" xreflabel="Carletta et al. 2005">Carletta, J.; S. Evert;
            U. Heid; and J. Kilgour, 
            <div class="quote e846">The NITE XML Toolkit: data model and query</div>, 
            <div class="emphasis e847" role="ital">Language Resources and Evaluation</div>, 39.4: 313-334. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e848" xlink:actuate="onRequest" xlink:href="http://www.springerlink.com/content/j37h2p15u682075g/" xlink:show="new" xlink:type="simple">http://www.springerlink.com/content/j37h2p15u682075g/</div>
         </div>
         <div class="bibliomixed e849" xml:id="Chattietal.2007" xreflabel="Chatti et al. 2007">Chatti, Noureddine; Suha
            Kaouk; Sylvie Calabretto; and Jean Marie Pinon, 
            <div class="quote e850">MultiX: an XML-based formalism to
               encode multi-structured documents
            </div>, 
            <div class="emphasis e851" role="ital">Proceedings of Extreme
               Markup Languages
            </div>. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e852" xlink:actuate="onRequest" xlink:href="http://conferences.idealliance.org/extreme/html/2007/Chatti01/EML2007Chatti01.html" xlink:show="new" xlink:type="simple">http://conferences.idealliance.org/extreme/html/2007/Chatti01/EML2007Chatti01.html</div>
         </div>
         <div class="bibliomixed e853" xml:id="DeRose2004" xreflabel="DeRose 2004">DeRose, Steven J., 
            <div class="quote e854">Markup
               overlap: A review and a horse
            </div>, 
            <div class="emphasis e855" role="ital">Proceedings of Extreme Markup
               Languages®
            </div>. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e856" xlink:actuate="onRequest" xlink:href="http://conferences.idealliance.org/extreme/html/2004/DeRose01/EML2004DeRose01.html" xlink:show="new" xlink:type="simple">http://conferences.idealliance.org/extreme/html/2004/DeRose01/EML2004DeRose01.html</div>
         </div>
         <div class="bibliomixed e857" xml:id="DiIorioetal.2009" xreflabel="Di Iorio et al. 2009">Di Iorio, Angelo; Silvio
            Peroni; and Fabio Vitali, 
            <div class="quote e858">Towards markup support for full GODDAGs and beyond: the
               EARMARK approach
            </div>, 
            <div class="emphasis e859" role="ital">Balisage Series on Markup
               Technologies
            </div>, vol. 3. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e860" xlink:actuate="onRequest" xlink:href="http://www.balisage.net/Proceedings/vol3/html/Peroni01/BalisageVol3-Peroni01.html" xlink:show="new" xlink:type="simple">http://www.balisage.net/Proceedings/vol3/html/Peroni01/BalisageVol3-Peroni01.html</div>
         </div>
         <div class="bibliomixed e861" xml:id="Goldfarb1990" xreflabel="Goldfarb 1990">Charles F. Goldfarb, 
            <div class="emphasis e862" role="ital">The SGML Handbook</div>, Clandon Press, Oxford. 
         </div>
         <div class="bibliomixed e863" xml:id="Grätzer1971" xreflabel="Grätser 1971">Gråtser, George, 
            <div class="emphasis e864" role="ital">Lattice Theory, first concepts and distributive lattices</div> San
            Fransisco, Calif., 1971. xv+212 pp. Softcover edition, Dover Publications, 2009. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e865" xlink:actuate="onRequest" xlink:href="http://server.maths.umanitoba.ca/homepages/gratzer.html" xlink:show="new" xlink:type="simple">http://server.maths.umanitoba.ca/homepages/gratzer.html</div>
            
         </div>
         <div class="bibliomixed e866" xml:id="Hilbertetal.2005" xreflabel="Hilbert et al. 2005">Hilbert, Mirco; Oliver
            Schonefeld; and Andreas Witt, 
            <div class="quote e867">Making CONCUR work</div>, 
            <div class="emphasis e868" role="ital">Proceedings of Extreme Markup Languages®</div>. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e869" xlink:actuate="onRequest" xlink:href="http://conferences.idealliance.org/extreme/html/2005/Witt01/EML2005Witt01.xml" xlink:show="new" xlink:type="simple">http://conferences.idealliance.org/extreme/html/2005/Witt01/EML2005Witt01.xml</div>
         </div>
         <div class="bibliomixed e870" xml:id="Huitfeldt1998" xreflabel="Huitfeldt 1998">Huitfeldt C, 
            <div class="quote e871">MECS - A
               Multi-Element Code System
            </div>, 
            <div class="emphasis e872" role="ital">Working Papers from the
               Wittgenstein Archives at the University of Bergen
            </div>, No 3, Version October 1998.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e873" xlink:actuate="onRequest" xlink:href="http://helmer.aksis.uib.no/claus/mecs/mecs.htm" xlink:show="new" xlink:type="simple">http://helmer.aksis.uib.no/claus/mecs/mecs.htm</div>
         </div>
         <div class="bibliomixed e874" xml:id="HuitfeldtandSperberg-McQueen2003" xreflabel="Huitfeldt and Sperberg-McQueen       2003">Huitfeldt, Claus; and C. M.
            Sperberg-McQueen, 
            <div class="quote e875">TexMECS: An experimental markup meta-language for complex
               documents
            </div>, 
            <div class="emphasis e876" role="ital">Working paper of the project Markup Languages for
               Complex Documents (MLCD)
            </div>, University of Bergen. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e877" xlink:actuate="onRequest" xlink:href="http://decentius.aksis.uib.no/mlcd/2003/Papers/texmecs.html" xlink:show="new" xlink:type="simple">http://decentius.aksis.uib.no/mlcd/2003/Papers/texmecs.html</div>
         </div>
         <div class="bibliomixed e878" xml:id="Jagadishetal.2004" xreflabel="Jagadish et al. 2004">Jagadish, H.V.; Laks V.
            S. Lakshmanan; Monica Scannapieco; Divesh Srivastava; and Nuwee Wiwatwattana, 
            <div class="quote e879">Colorful
               XML: one hierarchy isn't enough
            </div>, 
            <div class="emphasis e880" role="ital">Proceedings of the 2004 ACM
               SIGMOD international conference on Management of data
            </div>, Paris, France: 251-262.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e881" xlink:actuate="onRequest" xlink:href="http://doi.acm.org/10.1145/1007568.1007598" xlink:show="new" xlink:type="simple">http://doi.acm.org/10.1145/1007568.1007598</div>
         </div>
         <div class="bibliomixed e882" xml:id="Marcoux2008">Marcoux, Yves. 
            <div class="quote e883">Graph characterization of overlap-only
               TexMECS and other overlapping markup formalisms.
            </div> Presented at Balisage: The Markup
            Conference 2008, Montréal, Canada, August 12 - 15, 2008. In 
            <div class="emphasis e884" role="ital">Proceedings
               of Balisage: The Markup Conference 2008. Balisage Series on Markup Technologies
            </div>,
            vol. 1 (2008). doi:10.4242/BalisageVol1.Marcoux01. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e885" xlink:actuate="onRequest" xlink:href="http://balisage.net/Proceedings/vol1/html/Marcoux01/BalisageVol1-Marcoux01.html" xlink:show="new" xlink:type="simple">http://balisage.net/Proceedings/vol1/html/Marcoux01/BalisageVol1-Marcoux01.html</div>
            
         </div>
         <div class="bibliomixed e886" xml:id="Marinellietal.2008" xreflabel="Marinelli et al. 2008">Marinelli, P.,
            Vitali, F., Zacchiroli, S., 
            <div class="quote e887">Towards the unification of formats for overlapping
               markup
            </div>, 
            <div class="emphasis e888" role="ital">The New Review of Hypermedia and
               Multimedia
            </div>. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e889" xlink:actuate="onRequest" xlink:href="http://www.informaworld.com/smpp/ftinterface~content=a903040611~fulltext=713240930" xlink:show="new" xlink:type="simple">http://www.informaworld.com/smpp/ftinterface~content=a903040611~fulltext=713240930</div>
         </div>
         <div class="bibliomixed e890" xml:id="Nicol2002a" xreflabel="Nicol 2002a">Nicol, Gavin, 
            <div class="quote e891">Core range
               algebra: Toward a formal theory of markup
            </div>, 
            <div class="emphasis e892" role="ital">Extreme Markup
               Languages
            </div>. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e893" xlink:actuate="onRequest" xlink:href="http://www.mind-to-mind.com/library/papers/ara/core-range-algebra-03-2002.html" xlink:show="new" xlink:type="simple">http://www.mind-to-mind.com/library/papers/ara/core-range-algebra-03-2002.html</div>
         </div>
         <div class="bibliomixed e894" xml:id="Nicol2002b" xreflabel="Nicol 2002b">Gavin Nicol, 
            <div class="quote e895">Attributed range
               algebra: Extending core range algebra to arbitrary structures
            </div>, 
            <div class="emphasis e896" role="ital"></div>. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e897" xlink:actuate="onRequest" xlink:href="http://www.mind-to-mind.com/library/papers/ara/attributed-range-algebra-07-2002.pdf" xlink:show="new" xlink:type="simple">http://www.mind-to-mind.com/library/papers/ara/attributed-range-algebra-07-2002.pdf</div>
         </div>
         <div class="bibliomixed e898" xml:id="Raymondetal1992" xreflabel="Raymond et al. 1992"> Raymond, Darrell R;
            Tompa, Frank William, and Wood, Derick: 
            <div class="quote e899">Markup Reconsidered</div>. University of
            Western Ontario. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e900" xlink:actuate="onRequest" xlink:href="www.cs.uwaterloo.ca/~fwtompa/.papers/markup.ps" xlink:show="new" xlink:type="simple">www.cs.uwaterloo.ca/~fwtompa/.papers/markup.ps</div>
         </div>
         <div class="bibliomixed e901" xml:id="Raymondetal1995" xreflabel="Raymond et al. 1995"> Raymond, Darrell R;
            Tompa, Frank William, and Wood, Derick: 
            <div class="quote e902">From Data Representation to Data Model:
               Meta-Semantic Issues in the Evlution of SGML.
            </div>
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e903" xlink:actuate="onRequest" xlink:href="http://reference.kfupm.edu.sa/content/f/r/from_data_representation_to_data_model___1594703.pdf" xlink:show="new" xlink:type="simple">http://reference.kfupm.edu.sa/content/f/r/from_data_representation_to_data_model___1594703.pdf</div>
            
         </div>
         <div class="bibliomixed e904" xml:id="SchonefeldandWitt2006" xreflabel="Schonefeld and Witt 2006">Schonefeld,
            Oliver, and Andreas Witt, 
            <div class="quote e905">Towards validation of concurrent markup</div>, 
            <div class="emphasis e906" role="ital">Proceedings of Extreme Markup Languages®</div>, . 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e907" xlink:actuate="onRequest" xlink:href="http://conferences.idealliance.org/extreme/html/2006/Schonefeld01/EML2006Schonefeld01.html" xlink:show="new" xlink:type="simple">http://conferences.idealliance.org/extreme/html/2006/Schonefeld01/EML2006Schonefeld01.html</div>
         </div>
         <div class="bibliomixed e908" xml:id="Schonefeld2007" xreflabel="Schonefeld 2007">Schonefeld, Oliver Georg Rehm,
            Andreas Witt, Lothar Lemnitzer (eds.), 
            <div class="quote e909">XCONCUR and XCONCUR-CL: A constraint-based
               approach for the validation of concurrent markup
            </div>, 
            <div class="emphasis e910" role="ital">Datenstrukturen für linguistische Ressourcen und ihre Anwendungen / Data structures
               for
               linguistic resources and applications: Proceedings of the Biennial GLDV Conference
               2007
            </div>, Tübingen: Gunter Narr Verlag. Pp. 347-356. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e911" xlink:actuate="onRequest" xlink:href="" xlink:show="new" xlink:type="simple"></div>
         </div>
         <div class="bibliomixed e912" xml:id="SchmidtandColomb2009" xreflabel="Schmidt and Colomb 2009">Schmidt, D.,
            Colomb, R., 
            <div class="quote e913">A data structure for representing multi-version texts online</div>,
            
            <div class="emphasis e914" role="ital">International Journal of Human-Computer Studies</div>, . 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e915" xlink:actuate="onRequest" xlink:href="http://portal.acm.org/citation.cfm?id=1523966" xlink:show="new" xlink:type="simple">http://portal.acm.org/citation.cfm?id=1523966</div>
         </div>
         <div class="bibliomixed e916" xml:id="Sperberg-McQueenandHuitfeldt2000" xreflabel="Sperberg-McQueen and Huitfeldt       2000">Sperberg-McQueen, C. M., and Claus
            Huitfeldt Peter R. King and Ethan V. Munson (eds.), 
            <div class="quote e917">GODDAG: A Data Structure for
               Overlapping Hierarchies
            </div>, 
            <div class="emphasis e918" role="ital">Digital documents: systems and
               principles. Lecture Notes in Computer Science 2023
            </div>, Berlin: Springer, 2004, pp.
            139-160. Paper given at Digital Documents: Systems and Principles. 8th International
            Conference on Digital Documents and Electronic Publishing, DDEP 2000, 5th International
            Workshop on the Principles of Digital Document Processing, PODDP 2000, Munich, Germany,
            September 13-15, 2000.. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e919" xlink:actuate="onRequest" xlink:href="http://www.w3.org/People/cmsmcq/2000/poddp2000.html" xlink:show="new" xlink:type="simple">http://www.w3.org/People/cmsmcq/2000/poddp2000.html</div>
         </div>
         <div class="bibliomixed e920" xml:id="StührenbergandJettka2009" xreflabel="Stührenberg and Jettka 2009">Stührenberg, Maik; and Daniel Jettka, 
            <div class="quote e921">A toolkit for multi-dimensional markup: The
               development of SGF to XStandoff
            </div>, 
            <div class="emphasis e922" role="ital">Proceedings of Balisage: The
               Markup Conference 2009. Balisage Series on Markup Technologies
            </div>, Vol. 3. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e923" xlink:actuate="onRequest" xlink:href="http://www.balisage.net/Proceedings/vol3/html/Stuhrenberg01/BalisageVol3-Stuhrenberg01.html" xlink:show="new" xlink:type="simple">http://www.balisage.net/Proceedings/vol3/html/Stuhrenberg01/BalisageVol3-Stuhrenberg01.html</div>
         </div>
         <div class="bibliomixed e924" xml:id="TEIP5" xreflabel="TEI P5">Lou Burnard and Syd Bauman (eds.),
            
            <div class="quote e925">Non-hierarchical Structures</div>, 
            <div class="emphasis e926" role="ital">Guidelines for the
               Encoding and Interchange of Machine-Readable Texts (TEI P5)
            </div>, The TEI Consortium.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e927" xlink:actuate="onRequest" xlink:href="http://www.tei-c.org/release/doc/tei-p5-doc/en/html/NH.html" xlink:show="new" xlink:type="simple">http://www.tei-c.org/release/doc/tei-p5-doc/en/html/NH.html</div>
         </div>
         <div class="bibliomixed e928" xml:id="TennisonandPiez2002" xreflabel="Tennison and Piez 2002">Tennison, J. and W.
            Piez, 
            <div class="quote e929">The Layered Markup and Annotation Language (LMNL)</div>, 
            <div class="emphasis e930" role="ital">Proceedings of Extreme Markup Languages®</div>. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e931" xlink:actuate="onRequest" xlink:href="http://www.idealliance.org/papers/extreme/proceedings/author-pkg/2002/Tennison02/EML2002Tennison02.zip" xlink:show="new" xlink:type="simple">http://www.idealliance.org/papers/extreme/proceedings/author-pkg/2002/Tennison02/EML2002Tennison02.zip</div>
         </div>
         <div class="bibliomixed e932" xml:id="Witt2005" xreflabel="Witt 2005">Andreas Witt Stefanie Dipper, Michael
            Götze, and Manfred Stede (eds.), 
            <div class="quote e933">Multiple Hierarchies: New Aspects of an Old
               Solution
            </div>, 
            <div class="emphasis e934" role="ital">Heterogeneity in Focus: Creating and and Using
               Linguistic Databases
            </div>, volume 2 of Interdisciplinary Studies on Information
            Structure (ISIS), Working Papers of the SFB 632. University of Potsdam, Germany. (Corrected
            reprint of an Extreme Markup 2004 paper). 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e935" xlink:actuate="onRequest" xlink:href="http://en.scientificcommons.org/42597903" xlink:show="new" xlink:type="simple">http://en.scientificcommons.org/42597903</div>
         </div>
      </div>
   </div>
</div>