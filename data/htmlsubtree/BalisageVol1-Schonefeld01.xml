<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#ASimpleAPIforXCONCURANCHOR" name="ASimpleAPIforXCONCURTOC">A Simple API for XCONCUR</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#XCONCURANCHOR" name="XCONCURTOC">XCONCUR</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#AneventcentricapplicationprogramminginterfaceANCHOR" name="AneventcentricapplicationprogramminginterfaceTOC">An event-centric application programming interface</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConclusionANCHOR" name="ConclusionTOC">Conclusion</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#APIinterfacesANCHOR" name="APIinterfacesTOC">API interfaces</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ReferencesANCHOR" name="ReferencesTOC">References</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">Attributes</div>
         <div class="singletermTERMS">August 12 - 15, 2008</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2008</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">ContentHandler</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">Document Object Model</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">oliver.schonefeld (AT) uni-tuebingen (DOT) de</div>
         <div class="singletermTERMS">Oliver</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">processing XCONCUR</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">Simple API for XML processing</div>
         <div class="singletermTERMS">Schonefeld</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">XConcurReader</div>
         <div class="singletermTERMS">xconcurlint</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="ASimpleAPIforXCONCURANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.2" xml:id="Bal20081102">
      <div class="title e1">A Simple API for XCONCUR</div>
      <div class="subtitle e2">Processing concurrent markup using an event-centric API</div>
      <div class="info e3">
         <div class="confgroup e4">
            <div class="conftitle e5">Balisage: The Markup Conference 2008</div>
            <div class="confdates e6">August 12 - 15, 2008</div>
         </div>
         <div class="abstract e7">
            <div class="para e8">
               Programmers can basically choose from two different types APIs
               when working with XML documents. On provides an event-centric
               view (SAX) on the document, while the offers an object-centric
               view (DOM). This contribution introduces an event-centric
               programming interface to work with XCONCUR documents which is
               inspired by the XML's SAX-API. It provides a very easy to use
               API for parsing XCONCUR documents.
               
            </div>
         </div>
         <div class="author e9">
            <div class="personname e10">
               <div class="firstname e11">Oliver</div>
               <div class="surname e12">Schonefeld</div>
            </div>
            <div class="personblurb e13">
               <div class="para e14">
                  	  Oliver Schonefeld works in University of Tübingen's
                  collaborative research centre Linguistic Data Structures in
                  a project that develops the foundations for sustainable
                  linguistic resources. He studied computer science at
                  University of Bielefeld until 2005. This contribution
                  deals with aspects of his forthcoming PhD thesis.
                  
               </div>
            </div>
            <div class="affiliation e15">
               <div class="orgname e16">University of Tübingen</div>
            </div>
            <div class="email e17">oliver.schonefeld (AT) uni-tuebingen (DOT) de</div>
         </div>
         <div class="legalnotice e18">
            <div class="para e19">Copyright © 2008 Oliver Schonefeld</div>
         </div>
         <div class="keywordset e20" role="author">
            <div class="keyword e21">processing XCONCUR</div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e22" xml:id="sec-intro" xreflabel="1">
         <div class="title e23">Introduction</div>
         <div class="para e24">
            To process XML documents using a programming language, one can
            basically choose from two different application programming
            interfaces (APIs). The 
            <div class="emphasis e25" role="ital">Simple API for XML
               processing
            </div> (SAX)  is an event-centric interface, while the
            
            <div class="emphasis e26" role="ital">Document Object Model</div> (DOM) provides
            a sophisticated object structure to work with XML
            documents.
            This contribution introduces an event-centric API to work
            with XCONCUR documents, which is inspired by the XML's SAX-API.
            
         </div>
         <div class="para e27">
            Section 
            <div class="xref e28" linkend="sec-xconcur"></div> gives a brief overview of
            the XCONCUR document syntax, in section 
            <div class="xref e29" linkend="sec-api"></div> an event-centric XCONCUR API is described
            and in section 
            <div class="xref e30" linkend="sec-conclude"></div> contains an
            outlook on further work.
            
         </div>
      </div><a name="XCONCURANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e31" xml:id="sec-xconcur" xreflabel="2">
         <div class="title e32">XCONCUR</div>
         <div class="para e33">
            XCONCUR is an extension to XML with major goal to
            provide an convenient method for expressing concurrent
            hierarchies. An XCONCUR document may contain an arbitrary number
            of annotation layers. Each layer can be transformed to a
            well-formed XML document by a simple filtering
            process. Therefore, an XCONCUR document can be seen as set of
            inter-woven XML documents. Figure 
            <div class="xref e34" linkend="fig-sample"></div>
            shows an XCONCUR example document with two annotation
            layers. Each tag is prefixed by an annotation layer id and thus
            assigned to a layer. The XCONCUR schema declarations
            allow to assign an annotation schema to each layer. The
            annotation schema may be written in any of the current XML
            schema languages, e.g. DTD, XML Schema or RELAX NG. If an
            annotation schema has been assigned to an annotation layer, the
            layer is validated using this schema. While the use of
            annotation schemas is optional, an XCONCUR document is required
            to be well-formed: each XCONCUR document can be decomposed in a
            set of XML documents, by selecting one layer and removing the
            tags from other annotation layers and the annotation layer
            prefixes. The resulting XML documents are required to be
            well-formed. Additionally, an XCONCUR constraint declaration can
            optionally be used to associate an XCONCUR-CL constraint set to
            the document, which allows cross-tree validation. For details
            see 
            <div class="xref e35" linkend="Schonefeld2007"></div> and 
            <div class="xref e36" linkend="Witt2007"></div>.
            
         </div>
         <div class="figure e37" xml:id="fig-sample" xreflabel="1">
            <div class="title e38">XCONCUR example</div>
            <div class="programlisting e39" xml:space="preserve">&lt;?xconcur version="1.1" encoding="iso-8859-1"?&gt;
               &lt;?xconcur-schema layer="l1" root="div" system="teispok2.dtd"?&gt;
               &lt;?xconcur-schema layer="l2" root="text" system="teiana2.dtd"?&gt;
               &lt;?xconcur-constraint system="peterandpaul.xcs" xconcur:l1="L1" xconcur:l2="L2"?&gt;
               &lt;(l1)div type="dialog" org="uniform"&gt;
               &lt;(l2)text&gt;
               &lt;(l1)u who="Peter"&gt;
               &lt;(l2)s&gt;Hey Paul!&lt;/(l2)s&gt;
               &lt;(l2)s&gt;Would you give me
               &lt;/(l1)u&gt;
               &lt;(l1)u who="Paul"&gt;
               the hammer?&lt;/(l2)s&gt;
               &lt;/(l1)u&gt;
               &lt;/(l2)text&gt;
               &lt;/(l1)div&gt;
            </div>
         </div>
      </div><a name="AneventcentricapplicationprogramminginterfaceANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e40" xml:id="sec-api" xreflabel="3">
         <div class="title e41">An event-centric application programming interface</div>
         <div class="para e42">
            The event-centric API for processing XCONCUR documents is
            heavily inspired by XML's SAX API (see 
            <div class="xref e43" linkend="SaxAPI"></div>). It provides a very low-level approach for
            working with XCONCUR documents. While processing a document, the
            parser emits a series of events. An application may receive
            those events and perform custom actions, e.g. build an in-memory
            representation of the document. Since the application ultimately
            decides which events to accept and how to handle them, the
            parser only has to build up a very minimal in-memory
            representation to perform it's work. This streaming approach is
            therefore quite memory-efficient.
            
         </div>
         <div class="para e44">
            The API basically defines a number of start events, which
            signal the beginning of an entity in the parsed document (e.g. a
            start tag) and their corresponding counterparts. The event signaling
            character data is an exception, since only a sole character data
            event exists without any start or end event. The following list
            contains the events, which are defined by the API. All events
            marked with an asterisk are unique the XCONCUR API, all others
            have been adapted to cope with more than one annotation
            layer.
            
            <div class="variablelist e45">
               <div class="varlistentry e46">
                  <div class="term e47">Start&nbsp;Document&nbsp;()</div>
                  <div class="listitem e48">
                     <div class="para e49">
                        The beginning of the document has been detected. This event
                        is sent after the XCONCUR declaration has been read.
                        
                     </div>
                  </div>
               </div>
               <div class="varlistentry e50">
                  <div class="term e51">End&nbsp;Document&nbsp;()</div>
                  <div class="listitem e52">
                     <div class="para e53">
                        The end of the document has been detected. This
                        event is sent, when the document has been processed completely.
                        
                     </div>
                  </div>
               </div>
               <div class="varlistentry e54">
                  <div class="term e55">Start&nbsp;Layer&nbsp;(layer)
                     <div class="superscript e56">*</div>
                  </div>
                  <div class="listitem e57">
                     <div class="para e58">
                        A new annotation layer has been detected. This is event is
                        sent, either if an XCONCUR layer declaration has been
                        processed or if the root tag of a new annotation layer has
                        been found. The name of the annotation layer prefix is
                        provided.
                        
                     </div>
                  </div>
               </div>
               <div class="varlistentry e59">
                  <div class="term e60">End&nbsp;Layer&nbsp;(layer)
                     <div class="superscript e61">*</div>
                  </div>
                  <div class="listitem e62">
                     <div class="para e63">
                        The end of an annotation layer has been detected, This
                        event is send after the matching end tag for the
                        annotation layer's root element has been processed. The
                        name of the annotation layer prefix is provided.
                        
                     </div>
                  </div>
               </div>
               <div class="varlistentry e64">
                  <div class="term e65">Start&nbsp;Primary&nbsp;Data&nbsp;()
                     <div class="superscript e66">*</div>
                  </div>
                  <div class="listitem e67">
                     <div class="para e68">
                        This events signals the beginning of the character data of
                        the document. It is sent, after the root element for all
                        annotation layers in the document have been processed.
                        
                     </div>
                  </div>
               </div>
               <div class="varlistentry e69">
                  <div class="term e70">End&nbsp;Primary&nbsp;Data&nbsp;()
                     <div class="superscript e71">*</div>
                  </div>
                  <div class="listitem e72">
                     <div class="para e73">
                        This events signals the end of the actual character data
                        of the document. It is sent, right before the first end
                        tag of a root element for any annotation has been
                        processed.
                        
                     </div>
                  </div>
               </div>
               <div class="varlistentry e74">
                  <div class="term e75">Start&nbsp;Prefix&nbsp;Mapping&nbsp;(layer,&nbsp;prefix,&nbsp;uri)</div>
                  <div class="listitem e76">
                     <div class="para e77">
                        This event signals the beginning of the scope of a
                        namespace prefix mapping on a layer. It is sent
                        just before start tag event of the element, which declares
                        the prefix mapping, is emitted. The event carries
                        information about the annotation layer, the namespace
                        prefix and the namespace URI is provided. If an element
                        defines more than one prefix mapping, the start prefix
                        mapping events may occur in any order.
                        
                     </div>
                  </div>
               </div>
               <div class="varlistentry e78">
                  <div class="term e79">End&nbsp;Prefix&nbsp;Mapping&nbsp;(layer,&nbsp;prefix,&nbsp;uri)</div>
                  <div class="listitem e80">
                     <div class="para e81">
                        This event signals the end of the scope of a
                        namespace prefix mapping on a layer. It is sent just after
                        the end element event for the element, which declared the
                        mapping, was emitted. The event carries information about
                        the annotaion layer, the namespace prefix and the
                        namespace URI is provided. If an element defined more than
                        one prefix mapping, the end prefix mapping events may
                        occur in any order.
                        
                     </div>
                  </div>
               </div>
               <div class="varlistentry e82">
                  <div class="term e83">Characters&nbsp;(characters)</div>
                  <div class="listitem e84">
                     <div class="para e85">
                        This event signals the character data. More then one
                        character data events my be emitted for one chunk of
                        character data in the document.
                        
                     </div>
                  </div>
               </div>
               <div class="varlistentry e86">
                  <div class="term e87">Start&nbsp;Element&nbsp;(layer,&nbsp;uri,&nbsp;localname,
                     qname,&nbsp;attributes)
                  </div>
                  <div class="listitem e88">
                     <div class="para e89">
                        A start tag has been detected. The event carries the
                        annotation layer prefix, the namespace URI, the local
                        name and the qualified name of the tag. Furthermore, a list of
                        attributes is available. This list is either empty, if the
                        element has no attributes or contains the namespace URI,
                        local name, qualified name and value for each attribute.
                        
                     </div>
                  </div>
               </div>
               <div class="varlistentry e90">
                  <div class="term e91">End&nbsp;Element&nbsp;(layer,&nbsp;uri,&nbsp;localname,&nbsp;qname)</div>
                  <div class="listitem e92">
                     <div class="para e93">
                        A end tag has been detected. The event carries the
                        annotation layer prefix, the namespace URI, the local
                        name and the qualified name of the tag.
                        
                     </div>
                  </div>
               </div>
            </div>
            
         </div>
         <div class="para e94">
            The major difference to XML's SAX-API is that all events, except
            the characters event, have been modified to also carry the
            annotation layer id, so an application can also take this
            information into account. Furthermore, the start/end layer and
            start/end primary data events have been added. The start/end layer
            events provide an easy mechanism for the application to determine
            which annotation layers exist in an XCONCUR document and perform
            actions, e.g. allocating memory for each layer. Strictly speaking,
            one could derive this information from other events
            (e.g. checking, if the just received start element event carries
            an yet unknown annotation layer id), but by providing the
            start/end layer events, the API eases writing the application,
            since the programmer can rely upon these events. The same hold for
            the start/end primary data events. They signal the start and end
            of the actual character data for a document.
            
         </div>
         <div class="para e95">
            The XCONCUR SAX-API provides various classes and interfaces. The
            most important entities of the XCONCUR SAX-API are the
            
            <div class="code e96">XConcurReader</div> and 
            <div class="code e97">ContentHandler</div>
            classes. The 
            <div class="code e98">XConcurReader</div> class encapsulates the
            underlying parser
            <div class="popupBox e99">
               <div class="popupLabel" onmouseover="$('#d1e172').show('1000');" onmouseout="$('#d1e172').hide('1000');">[ footnote ]</div>
               <div id="d1e172" style="display: none;">
                  <div class="footnote" xml:id="fn-parser">
                     <div class="para e100">The parser
                        implementation is not part if the API. Different vendors could
                        supply their own implementation. The reference implementation of
                        the XCONCUR SAX-API currently provides a non-validating
                        parser.
                     </div>
                  </div>
               </div>
            </div>. The 
            <div class="code e101">ContentHandler</div> defines
            an interface, which needs to be implemented by user's program and
            acts as the message sink for the events generated by the
            parser. The whole API consists of various other auxiliary classes,
            e.g. provide abstract input sources for reading XCONCUR documents
            or error reporting classes.
            
         </div>
         <div class="para e102">
            Figure 
            <div class="xref e103" linkend="fig-handler"></div> shows an excerpt of a class
            implementing the 
            <div class="code e104">ContentHandler</div> interface. Given this
            class, a typical sequence for parsing an XCONCUR document is shown
            in Figure 
            <div class="xref e105" linkend="fig-invoke"></div>.
            
         </div>
         <div class="figure e106" xml:id="fig-handler" xreflabel="2">
            <div class="title e107">An example implementation of 
               <div class="code e108">ContentHandler</div>
               interface
            </div>
            <div class="programlisting e109" xml:space="preserve">class MyContentHandler : public ContentHandler {
               public:
               virtual void StartElement(const char* const layer,
               const char* const uri,
               const char* const localname,
               const char* const qname,
               const Attributes &amp;attrs) {
               if (strcmp(layer, "l1")) {
               // do something for start element events on layer "l1"
               }
               }
               
               virtual void EndElement(const char* const layer,
               const char* const uri,
               const char* const localname,
               const char* const qname) {
               if (strcmp(layer, "l1")) {
               // do something for end elements events on layer "l1"
               }
               }
               
               // ...
               }; // class MyContentHandler
            </div>
         </div>
         <div class="figure e110" xml:id="fig-invoke" xreflabel="3">
            <div class="title e111">Typical sequence to invoke the parser</div>
            <div class="programlisting e112" xml:space="preserve">try {
               // create reader instance
               XConcurReader *reader = XConcurReaderFactory::CreateReader();
               
               // class 'MyContentHandler' extends the ContentHandler interface
               MyContentHandler handler;
               
               // register content handler with reader
               reader-&gt;SetContentHandler(handler);
               
               // create input source
               // NOTE: 'input' is an InputStream object which points to an XCONCUR file
               InputSource source(input);
               
               // parse document
               reader-&gt;parse(&amp;source);
               } catch (XConcurException &amp;e) {
               // handle exception
               }
            </div>
         </div>
         <div class="para e113">
            The C++ reference implementation of the XCONCUR SAX-API contains a
            program called 
            <div class="code e114">xconcurlint</div>. It uses the API to read
            an XCONCUR document and prints the events, which are emitted by
            the parser. Figure 
            <div class="xref e115" linkend="fig-xconcurlint"></div> shows a
            transcript of the parse of the XCONCUR document from figure 
            <div class="xref e116" linkend="fig-sample"></div>. The event types are printed in curly
            brackets. Other event specific information, like annotation layer
            prefix or element name are also printed.
            
         </div>
         <div class="figure e117" xml:id="fig-xconcurlint" xreflabel="4">
            <div class="title e118">Output created by the 
               <div class="code e119">xconcurlint</div> utility
            </div>
            <div class="programlisting e120" xml:space="preserve">{START LAYER} l1
               {START ELEMENT} l1, div
               type = dialog
               org = uniform
               {START LAYER} l2
               {START ELEMENT} l2, text
               {START PRIMARY DATA}
               {CHARACTERS} "\n      "
               {START ELEMENT} l1, u
               who = Peter
               {CHARACTERS} "\n    "
               {START ELEMENT} l2, s
               {CHARACTERS} "Hey Paul!"
               {END ELEMENT} l2, s
               {CHARACTERS} "\n      "
               {START ELEMENT} l2, s
               {CHARACTERS} "Would you give me\n    "
               {END ELEMENT} l1, u
               {CHARACTERS} "\n    "
               {START ELEMENT} l1, u
               who = Paul
               {CHARACTERS} "\n      "
               {CHARACTERS} "the hammer?"
               {END ELEMENT} l2, s
               {CHARACTERS} "\n    "
               {END ELEMENT} l1, u
               {CHARACTERS} "\n  "
               {END PRIMARY DATA}
               {END ELEMENT} l2, text
               {END LAYER} l2
               {END ELEMENT} l1, div
               {END LAYER} l1
            </div>
         </div>
      </div><a name="ConclusionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e121" xml:id="sec-conclude" xreflabel="4">
         <div class="title e122">Conclusion</div>
         <div class="para e123">
            The XCONCUR SAX-API provides a very low-level, yet powerful,
            interface for processing XCONCUR documents. It is a relatively
            simple and easy interface to work with XCONCUR
            documents. Programmers, who are familiar with XML's SAX-API,
            should feel at ease with XCONCUR API really quickly. The API
            makes very few assumptions about the underlying parser and
            provides a uniform interface for using parser implementations
            from different vendors. Furthermore, the API can easily be
            ported to different programming languages. A C++ and a Java
            reference implementation is available
            <div class="popupBox e124">
               <div class="popupLabel" onmouseover="$('#d1e224').show('1000');" onmouseout="$('#d1e224').hide('1000');">[ footnote ]</div>
               <div id="d1e224" style="display: none;">
                  <div class="footnote" xml:id="fn-request">
                     <div class="para e125">The author provides the software for
                        evaluation and academic purposes upon
                        request.
                     </div>
                  </div>
               </div>
            </div>. For the Java language bindings, the
            API is implemented in plain Java, while parser uses the C++
            implementation of the parser.
            
         </div>
         <div class="para e126">
            Future work involves creating a object based API similar to
            XML's DOM-API. Conceptional work for this is currently underway
            and the XCONCUR-DOM parser will be built upon the XCONCUR-SAX
            parser. Furthermore, the Mascarpone XCONCUR editor needs to be
            overhauled to use the new APIs.
            
         </div>
      </div><a name="APIinterfacesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="appendix e127">
         <div class="title e128">API interfaces</div>
         <div class="para e129">
            This appendix lists the most fundamental interfaces of the
            XCONCUR SAX-API. The full API contains a few more interfaces and
            classes.
            
         </div>
         <div class="figure e130">
            <div class="title e131">
               <div class="code e132">XConcurReader</div> interface
            </div>
            <div class="programlisting e133" xml:space="preserve">class XConcurReader {
               public:
               virtual ContentHandler* GetContentHandler() const = 0;
               
               virtual void SetContentHandler(ContentHandler *handler) = 0;
               
               virtual ErrorHandler* GetErrorHandler() const = 0;
               
               virtual void SetErrorHandler(ErrorHandler *handler) = 0;
               
               virtual void Parse(InputSource *source) = 0;
               
               virtual void SetFeature(const char* const name, const bool value) = 0;
               
               virtual bool GetFeature(const char* const name) = 0;
               
               virtual ~XConcurReader();
               }; // class XConcurReader
            </div>
         </div>
         <div class="figure e134">
            <div class="title e135">
               <div class="code e136">ContentHandler</div> interface
            </div>
            <div class="programlisting e137" xml:space="preserve">class ContentHandler {
               public:
               virtual ~ContentHandler();
               
               virtual void StartDocument() = 0;
               
               virtual void EndDocument() = 0;
               
               virtual void StartLayer(const char* const prefix) = 0;
               
               virtual void EndLayer(const char* const prefix) = 0;
               
               virtual void StartPrimaryData() = 0;
               
               virtual void EndPrimaryData() = 0;
               
               virtual void StartPrefixMapping(const char* const layer,
               const char* const prefix,
               const char* const uri) = 0;
               
               virtual void EndPrefixMapping(const char* const layer,
               const char* const prefix) = 0;
               
               virtual void Characters(const char* const chars,
               const size_t offset,
               const size_t len) = 0;
               
               virtual void StartElement(const char* const layer,
               const char* const uri,
               const char* const localname,
               const char* const qname,
               const Attributes &amp;attrs) = 0;
               
               virtual void EndElement(const char* const layer,
               const char* const uri,
               const char* const localname,
               const char* const qname) = 0;
               }; // interface ContentHandler
            </div>
         </div>
         <div class="figure e138">
            <div class="title e139">
               <div class="code e140">Attributes</div> interface
            </div>
            <div class="programlisting e141" xml:space="preserve">class Attributes {
               public:
               
               virtual int GetLength() const = 0;
               
               virtual int GetIndex(const char* const qname) const = 0;
               
               virtual int GetIndex(const char* const uri,
               const char* const localname) const = 0;
               
               virtual const char* const GetQName(const int idx) const = 0;
               
               virtual const char* const GetURI(const int idx) const = 0;
               
               virtual const char* const GetLocalName(const int idx) const = 0;
               
               virtual const char* const GetType(const char* const qname) const = 0;
               
               virtual const char* const GetType(const char* const uri,
               const char* const localname) const = 0;
               
               virtual const char* const GetType(const int idx) const = 0;
               
               virtual const char* const GetValue(const char* const qname) const = 0;
               
               virtual const char* const GetValue(const char* const uri,
               const char* const localname) const = 0;
               
               virtual const char* const GetValue(const int idx) const = 0;
               
               virtual bool IsDeclared(const char* const qname) const = 0;
               
               virtual bool IsDeclared(const char* const uri,
               const char* const localname) const = 0;
               
               virtual bool IsDeclared(const int idx) const = 0;
               
               virtual bool IsSpecified(const char* const qname) const = 0;
               
               virtual bool IsSpecified(const char* const uri,
               const char* const localname) const = 0;
               
               virtual bool IsSpecified(const int idx) const = 0;
               
               protected:
               virtual ~Attributes();
               }; // interface Attributes
            </div>
         </div>
      </div><a name="ReferencesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e142">
         <div class="title e143">References
            <div class="popupBox e144">
               <div class="popupLabel" onmouseover="$('#d1e262').show('1000');" onmouseout="$('#d1e262').hide('1000');">[ footnote ]</div>
               <div id="d1e262" style="display: none;">
                  <div class="footnote">
                     <div class="para e145">All online resources have last been
                        checked on 2008/08/31.
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="bibliomixed e146" xml:id="SaxAPI" xreflabel="Megginson et al. (2002)">
            David Megginson, 
            <div class="emphasis e147" role="ital">“Simple API for XML
               processing”
            </div>. Available online at
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e148" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.saxproject.org/quickstart.html</div>
            
         </div>
         <div class="bibliomixed e149" xml:id="DomAPI" xreflabel="Le Hors et al. (2004)">
            Arnaud Le Hors, Philippe Le Hégaret, Lauren Wood, Gavin Nicol,
            Jonathan Robie, Mike Champion, Steve Byrne: 
            <div class="emphasis e150" role="ital">“Document Object Model (DOM) Level 3 Core
               Specification”
            </div>. World Wide Web Consortium,
            2006. Available online at
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e151" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/</div>
            
         </div>
         <div class="bibliomixed e152" xml:id="Schonefeld2007" xreflabel="Schonefeld (2007)">
            Oliver Schonefeld: 
            <div class="emphasis e153" role="ital">“XCONCUR and
               XCONCUR-CL: A constraint-based approach for the validation of
               concurrent markup”
            </div>. In: Datenstrukturen für
            linguistische Ressourcen und ihre Anwendungen / Data structures
            for linguistic resources and applications: Proceedings of the
            Biennial GLDV Conference 2007, Georg Rehm, Andreas Witt, Lothar
            Lemnitzer (eds), Tübingen Verlag, Germany, 2007. Pp. 347–356.
            
         </div>
         <div class="bibliomixed e154" xml:id="Witt2007" xreflabel="Witt at al. (2007)">
            Andreas Witt, Oliver Schonefeld, Georg Rehm, Jonathan Khoo,
            Kilian Evang: 
            <div class="emphasis e155" role="ital">“On the Lossless
               Transformation of Single-File, Multi-Layer Annotations into
               Multi-Rooted Trees”
            </div>. In: Proceedings of Extreme
            Markup Languages 2007, Montréal, Canada, 2007. Available online
            at
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e156" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.idealliance.org/papers/extreme/proceedings/html/2007/Witt01/EML2007Witt01.xml</div>
            
         </div>
         <div class="bibliomixed e157" xml:id="Bray2006" xreflabel="Bray et al. (2006)">
            Tim Bray, Jean Paoli, C. M. Sperberg-McQueen, Eve Maler,
            Francois Yergeau, John Cowan: 
            <div class="emphasis e158" role="ital">“Extensible Markup Language (XML)
               1.1”
            </div>. World Wide Web Consortium, 2006, 2nd
            edition. Available online at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e159" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/2006/REC-xml11-20060816/</div>
            
         </div>
      </div>
   </div>
</div>