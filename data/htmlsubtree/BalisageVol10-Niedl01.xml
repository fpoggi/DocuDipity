<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#ProcessingXFormsinHTML5EnabledBrowsersANCHOR" name="ProcessingXFormsinHTML5EnabledBrowsersTOC">Processing XForms in HTML5-Enabled Browsers</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#RequirementsforanXFormsprocessorANCHOR" name="RequirementsforanXFormsprocessorTOC">Requirements for an XForms processor</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#DatamodelANCHOR" name="DatamodelTOC">Data model</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#DatatypesanddatamodelvalidationANCHOR" name="DatatypesanddatamodelvalidationTOC">Data types and data model validation</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#EventsANCHOR" name="EventsTOC">Events</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#WidgetsANCHOR" name="WidgetsTOC">Widgets</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#RepetitionsANCHOR" name="RepetitionsTOC">Repetitions</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#XFormsbuildingblocksonaWebbrowserANCHOR" name="XFormsbuildingblocksonaWebbrowserTOC">XForms building blocks on a Web browser</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#XMLANCHOR" name="XMLTOC">XML</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#XPathANCHOR" name="XPathTOC">XPath</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#XMLEventsandXMLSchemaANCHOR" name="XMLEventsandXMLSchemaTOC">XML Events and XML Schema</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#DocumentsandXMLsubmissionANCHOR" name="DocumentsandXMLsubmissionTOC">Documents and XML submission</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#WidgetsANCHOR" name="WidgetsTOC">Widgets</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#RepetitionsANCHOR" name="RepetitionsTOC">Repetitions</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#TheXFormsprocessorxfjsANCHOR" name="TheXFormsprocessorxfjsTOC">The XForms processor xf.js</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#PrinciplesANCHOR" name="PrinciplesTOC">Principles</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ArchitectureANCHOR" name="ArchitectureTOC">Architecture</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#xfModelclassANCHOR" name="xfModelclassTOC">xfModel class</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#xfInstanceclassANCHOR" name="xfInstanceclassTOC">xfInstance class</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#xfSubmissionandxfWidgetSubmitANCHOR" name="xfSubmissionandxfWidgetSubmitTOC">xfSubmission and xfWidgetSubmit</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#xfBindANCHOR" name="xfBindTOC">xfBind</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#WidgetsANCHOR" name="WidgetsTOC">Widgets</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#xfRepeatandxfRepeatGroupANCHOR" name="xfRepeatandxfRepeatGroupTOC">xfRepeat and xfRepeatGroup</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#ActionsandeventsANCHOR" name="ActionsandeventsTOC">Actions and events</a></div>
               </div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#EvaluationANCHOR" name="EvaluationTOC">Evaluation</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#MissingtechnologyANCHOR" name="MissingtechnologyTOC">Missing technology</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#LimitationsoftheplatformANCHOR" name="LimitationsoftheplatformTOC">Limitations of the platform</a></div>
               </div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#SummaryANCHOR" name="SummaryTOC">Summary</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#OutlookANCHOR" name="OutlookTOC">Outlook</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ExamplesandscreenshotsANCHOR" name="ExamplesandscreenshotsTOC">Examples and screenshots</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#WidgetreplacementANCHOR" name="WidgetreplacementTOC">Widget replacement</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ChangesinthedatamodelANCHOR" name="ChangesinthedatamodelTOC">Changes in the data model</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#RepeatinggroupsANCHOR" name="RepeatinggroupsTOC">Repeating groups</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BibliographyANCHOR" name="BibliographyTOC">Bibliography</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">action</div>
         <div class="singletermTERMS">add</div>
         <div class="singletermTERMS">August 6 - 9, 2013</div>
         <div class="singletermTERMS">Anne</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">button</div>
         <div class="singletermTERMS">bind</div>
         <div class="singletermTERMS">button</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2013</div>
         <div class="singletermTERMS">brueggem@in.tum.de</div>
         <div class="singletermTERMS">Br√ºggemann-Klein</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">createNSResolver()</div>
         <div class="singletermTERMS">checkbox</div>
         <div class="singletermTERMS">color</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">delete</div>
         <div class="singletermTERMS">delete</div>
         <div class="singletermTERMS">Data model:</div>
         <div class="singletermTERMS">Data types:</div>
         <div class="singletermTERMS">DELETE</div>
         <div class="singletermTERMS">date</div>
         <div class="singletermTERMS">datetime</div>
         <div class="singletermTERMS">datetime-local</div>
         <div class="singletermTERMS">DOMActivate</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">evaluate()</div>
         <div class="singletermTERMS">enables free-form data entry</div>
         <div class="singletermTERMS">Events:</div>
         <div class="singletermTERMS">end</div>
         <div class="singletermTERMS">email</div>
         <div class="singletermTERMS">event</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
         <div class="singletermTERMS">form</div>
         <div class="singletermTERMS">file</div>
         <div class="singletermTERMS">Forms</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
         <div class="singletermTERMS">GET</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">HTML5</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">input</div>
         <div class="singletermTERMS">instance</div>
         <div class="singletermTERMS">insert</div>
         <div class="singletermTERMS">insert</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">label</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">message</div>
         <div class="singletermTERMS">model</div>
         <div class="singletermTERMS">Mutation observer</div>
         <div class="singletermTERMS">min</div>
         <div class="singletermTERMS">max</div>
         <div class="singletermTERMS">model</div>
         <div class="singletermTERMS">month</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">number</div>
         <div class="singletermTERMS">nodeset</div>
         <div class="singletermTERMS">niedl@in.tum.de</div>
         <div class="singletermTERMS">Niedl</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">onclick</div>
         <div class="singletermTERMS">output</div>
         <div class="singletermTERMS">option</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">password</div>
         <div class="singletermTERMS">POST</div>
         <div class="singletermTERMS">PUT</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">repeat</div>
         <div class="singletermTERMS">range</div>
         <div class="singletermTERMS">Repetitions:</div>
         <div class="singletermTERMS">range</div>
         <div class="singletermTERMS">radio</div>
         <div class="singletermTERMS">ref</div>
         <div class="singletermTERMS">replace</div>
         <div class="singletermTERMS">remove</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">setvalue</div>
         <div class="singletermTERMS">submit</div>
         <div class="singletermTERMS">secret</div>
         <div class="singletermTERMS">select1</div>
         <div class="singletermTERMS">select</div>
         <div class="singletermTERMS">submission</div>
         <div class="singletermTERMS">submit</div>
         <div class="singletermTERMS">start</div>
         <div class="singletermTERMS">step</div>
         <div class="singletermTERMS">Software Engineer</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">trigger</div>
         <div class="singletermTERMS">textarea</div>
         <div class="singletermTERMS">text</div>
         <div class="singletermTERMS">targetref</div>
         <div class="singletermTERMS">type</div>
         <div class="singletermTERMS">tel</div>
         <div class="singletermTERMS">time</div>
         <div class="singletermTERMS">Tobias</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
         <div class="singletermTERMS">upload</div>
         <div class="singletermTERMS">URLENCODED-POST</div>
         <div class="singletermTERMS">url</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">xml.js</div>
         <div class="singletermTERMS">XForms for HTML Authors</div>
         <div class="singletermTERMS">XForms 1.1 W3C Recommendation 20 October 2009</div>
         <div class="singletermTERMS">xforms-ready</div>
         <div class="singletermTERMS">xf.js</div>
         <div class="singletermTERMS">XForms</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="ProcessingXFormsinHTML5EnabledBrowsersANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3" xml:id="HR-23632987-8973">
      <div class="title e1">Processing XForms in HTML5-Enabled Browsers</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2013</div>
            <div class="confdates e5">August 6 - 9, 2013</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">Forms technology for the World Wide Web has developed along two lines. The XForms
               strain has worked for a cleaner separation of concerns and supports more complex
               bindings between user interface and data. The HTML strain has focused on the user
               interface, defining new widgets and in HTML5 adding type definitions to form
               elements to enable native in-form validation. Some XForms implementations translate
               XForms elements into HTML widgets plus executable code. But HTML5 also defines new
               Javascript APIs browsers should support. The new facilities of HTML5-enabled
               browsers can be used to support XForms near-natively. We explain how.
            </div>
         </div>
         <div class="author e8">
            <div class="personname e9">
               <div class="firstname e10">Tobias</div>
               <div class="surname e11">Niedl</div>
            </div>
            <div class="personblurb e12">
               <div class="para e13">Has studied computer science at the TU M√ºnchen and works today as Software
                  Engineer in Munich. XML was one of his major field of study during his Master
                  course. The introduced XForms processor was developed as part of his Master
                  Thesis. 
               </div>
            </div>
            <div class="affiliation e14">
               <div class="jobtitle e15">Software Engineer</div>
            </div>
            <div class="email e16">niedl@in.tum.de</div>
         </div>
         <div class="author e17">
            <div class="personname e18">
               <div class="firstname e19">Anne</div>
               <div class="surname e20">Br√ºggemann-Klein</div>
            </div>
            <div class="personblurb e21">
               <div class="para e22"></div>
            </div>
            <div class="affiliation e23">
               <div class="jobtitle e24"></div>
               <div class="orgname e25">Technische Universit√§t M√ºnchen</div>
            </div>
            <div class="email e26">brueggem@in.tum.de</div>
         </div>
         <div class="legalnotice e27">
            <div class="para e28">Copyright ¬©  2013 by the authors. Used with permission.</div>
         </div>
         <div class="keywordset e29" role="author">
            <div class="keyword e30">xf.js</div>
            <div class="keyword e31">XForms</div>
            <div class="keyword e32">HTML5</div>
            <div class="keyword e33">Forms</div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e34">
         <div class="title e35">Introduction</div>
         <div class="para e36">Forms offer a structured interface to users for entering or editing information which
            is eventually submitted to some system for further processing. Forms play a crucial
            role
            on the Web. Early form technology enables interactivity on the Web beyond hyperlinking:
            With forms in a Web browser, users can activate services on the Web, after setting
            service parameters, and they will receive service results in the browser in a
            request-response cycle. Another use case is data entry, with forms in a Web browser
            acting as masks for database input. Recently, Sperberg-McQueen in personal discussion
            and workshop announcements has framed forms on the Web as padded-cell editors that
            allow for specialized editing of XML documents and data in a Web browser in a safe
            and
            easy-to-learn manner.
         </div>
         <div class="para e37">How has forms technology for the Web evolved over time? There are two lines of
            development:
         </div>
         <div class="para e38">The HTML strain has focused on the user interface. The forms module of HTML defines
            a
            set of widget or control elements; an HTML form contains a number of widgets and a
            target URL to which form data are to be submitted. HTML browsers display form widgets,
            support data entry and encode form data, transferring them to the form's target URL
            when
            submission of a form is activated.
         </div>
         <div class="para e39">The most recent version of HTML, namely HTML5, has expanded the set of widgets and
            has
            added type definitions to form elements, enabling native in-form data validation.
         </div>
         <div class="para e40">The XForms strain has brought data into focus. XForms separates the data of a form
            from its user interface; form data in XForms are XML documents that can be loaded
            into a
            form, edited via widgets and submitted to external services. An XForms processor
            supports the binding between a form's widgets and data, handles form events and executes
            form actions including load and submit of data.
         </div>
         <div class="para e41">XForms needs to be embedded into a host language, which most commonly is HTML.
            Nevertheless, in contrast to HTML forms, which are part of the W3C HTML Recommendation,
            Web browsers are not obliged to support XForms natively. Attempts to make XForms a
            true
            part of HTML in XHTML&nbsp;2 have been abandoned by the W3C together with XHTML&nbsp;2
            in favor of HTML5. In fact, none of the current mainstream browsers support XForms
            natively. Browser plug-ins come closest to native XForms support. There used to be
            a
            Firefox plug-in Mozilla XForms that has no developer's support any more and is no
            longer
            compatible with current versions of Firefox. FormsPlayer, a plug-in XForms processor
            for
            Internet Explorer, is also no longer supported. Current XForms implementations
            (XSLTForms, BetterForms, Orbeon Forms) translate an XForms form into an HTML form
            and
            JavaScript code. There are purely client-side, purely server-side and distributed
            architectures for both the translator and the form execution code.
         </div>
         <div class="para e42">Tobias Niedl, the first author of this paper, has explored under supervision of the
            second author, as part of his Master Thesis at TU&nbsp;M√ºnchen, JavaScript and the new
            APIs that an HTML5-enabled Web browser provides as an implementation platform for
            an
            XForms processor. It turns out that the new facilities of HTML5-enabled browsers can
            be
            used to support XForms more natively. In a similar way as the plug-in solutions the
            code
            which executes the form is programmed directly, not generated. This removes a level
            of
            indirection in the interest of clarity and maintenance. But in contrast to plug-in
            solutions, it is platform independent, relying only on the APIs and the JavaScript
            that
            an HTML5-conformant browser supplies. For its reach, it capitalizes on the market
            power
            of the major browser vendors in the WHATWG
            <div class="popupBox e43">
               <div class="popupLabel" onmouseover="$('#d1e70').show('1000');" onmouseout="$('#d1e70').hide('1000');">[ footnote ]</div>
               <div id="d1e70" style="display: none;">
                  <div class="footnote">
                     <div class="para e44">Web Hypertext Application Technology Working Group
                        
                        <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e45" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.whatwg.org/</div>
                     </div>
                  </div>
               </div>
            </div>, who stand behind HTML5.
         </div>
         <div class="para e46">Tobias Niedl has designed and implemented an XForms processor on the platform of an
            HTML5-enabled Web browser. A JavaScript program called xf.js sets up some data
            structures when an HTML page with an embedded XForms form is loaded and acts as an
            XForms processor during the lifetime of the document in the browser, making use of
            APIs
            that an HTML5-enabled Web browser must support.
         </div>
         <div class="para e47">The remainder of this paper is organized as follows: First, we derive the requirements
            for an XForms processor from the core features of XForms in 
            <div class="xref e48" linkend="s1-requirements"></div>. Since our target implementation platforms are Web
            browsers, we relate XForms features and XForms processor requirements to HTML
            forms.
         </div>
         <div class="para e49">In 
            <div class="xref e50" linkend="s2-building-blocks"></div> we discuss which building blocks an
            HTML5-enabled Web browser does or does not provide, in view of our requirements.
         </div>
         <div class="para e51">Finally, we discuss in 
            <div class="xref e52" linkend="s3-xf.js"></div> core principles, architecture and
            limitations of our implementation, illustrated with examples and screenshots.
         </div>
      </div><a name="RequirementsforanXFormsprocessorANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e53" xml:id="s1-requirements">
         <div class="title e54">Requirements for an XForms processor</div>
         <div class="para e55">Form systems share core functionality: A form offers a structured interface to users
            for entering or editing information which may then be further processed outside the
            form. In the realm of the Web, HTML has enabled data capture and interactivity beyond
            hyperlinking via forms since version&nbsp;2. As its name implies, XForms leverages XML
            and related technologies. XForms extends HTML forms in providing essential innovations
            (cf. 
            <div class="xref e56" linkend="XFormsEssentials"></div>):
         </div>
         <div class="itemizedlist e57">
            <div class="listitem e58">
               <div class="para e59">
                  <div class="emphasis e60" role="bold">Data model:</div> An XForms form holds its data in
                  an explicitly defined, XML encoded data container, which is called the form's
                  data model. A key point of XForms is that a form's data model is independent of
                  its user interface.
               </div>
            </div>
            <div class="listitem e61">
               <div class="para e62">
                  <div class="emphasis e63" role="bold">Data types:</div> Textual values in the data model
                  can be declared to be of specific data types; XML Schema's predefined or
                  user-defined data types (simple types) may be used.
               </div>
            </div>
            <div class="listitem e64">
               <div class="para e65">
                  <div class="emphasis e66" role="bold">Events:</div> XForms builds on the W3C
                  Recommendation XML Events. Form events, their targets and associated actions are
                  declaratively represented by XML elements and attributes.
               </div>
            </div>
            <div class="listitem e67">
               <div class="para e68">
                  <div class="emphasis e69" role="bold">Widgets:</div> XForms defines a rich set of widgets
                  that has only recently been matched by the newest version of HTML, namely
                  HTML5.
               </div>
            </div>
            <div class="listitem e70">
               <div class="para e71">
                  <div class="emphasis e72" role="bold">Repetitions:</div> XForms has a number of container
                  form controls, for repetitions, groupings and switching. XForms is the only
                  forms technology on the Web that natively supports repeating groups of widgets
                  under action control.
               </div>
            </div>
         </div>
         <div class="para e73">These innovations, whose value is discussed elsewhere
            
            <div class="xref e74" linkend="w3.xforms"></div>
            <div class="xref e75" linkend="XFormsEssentials"></div>
            <div class="xref e76" linkend="FormsNG"></div>
            imply requirements for any XForms processor. We discuss these
            implications in detail below, contrasting them with the lesser requirements of HTML
            forms.
         </div><a name="DatamodelANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e77">
            <div class="title e78">Data model</div>
            <div class="para e79">Form systems deal with data that initialize a form, are edited using the form and
               are eventually submitted to external systems for further processing. 
            </div>
            <div class="para e80">XForms distinguishes between a data model, which carries the form's information,
               and the user interface, which makes the data model accessible to an XForms user. On
               submission, the data model (or a part of it) is transferred to an external service.
               The data model itself is encoded in XML. It can be seen as a structure of nodes
               carrying data (text nodes and attribute nodes in the XDM data model for XML).
            </div>
            <div class="para e81">XForms facilitates editing of data in the model in two alternative ways: The
               obvious first possibility is to use widget elements that are connected to nodes in
               the data model. Changing a widget's value in the user interface changes the value
               of
               the corresponding node in the model. The XForms processor propagates value changes
               to all widgets that might be connected to the same node, in Model-View-Controller
               fashion. The second and less obvious possibility to change the data model is by
               action elements which act as event handlers for form events. An action element is
               connected to a node (or a set of nodes) in the data model in the same way as a
               widget element. In both cases the connection to a node in the model, called a
               reference, is expressed by an XPath expression.
            </div>
            <div class="para e82">In contrast, HTML forms do not have explicit, separate data models. The model of
               an HTML form is implicitly defined by the widget elements in the form. It is a flat
               set of name-value pairs, implicitly ordered by the sequence of the widgets in the
               form. The model is generated on the fly when the form is submitted.
            </div>
            <div class="para e83">Hence, HTML forms do not separate data and input facilities the way XForms does.
               In addition, further processing of form data that originate from an HTML form
               usually necessitates data translation, whereas XForms data can be directly processed
               using XML technologies as in the zero-translation XRX
               <div class="popupBox e84">
                  <div class="popupLabel" onmouseover="$('#d1e143').show('1000');" onmouseout="$('#d1e143').hide('1000');">[ footnote ]</div>
                  <div id="d1e143" style="display: none;">
                     <div class="footnote">
                        <div class="para e85">XForms REST XQuery</div>
                     </div>
                  </div>
               </div> architecture.
            </div>
            <div class="para e86">It is immediately apparent that an XForms processor needs to support building,
               changing and serializing of XML structures and dynamic evaluation of XPath
               expressions.
            </div>
         </div><a name="DatatypesanddatamodelvalidationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e87">
            <div class="title e88">Data types and data model validation</div>
            <div class="para e89">Form systems that support data types can offer type-specific data entry support
               such as date pickers and data validation without custom scripting. XForms offers a
               small number of proprietary data types and supports the built-in simple types of XML
               Schema. On top of that, the data model of a form can be constrained by an external
               schema with XML Schema custom data types (simple types) and also complex types. This
               ensures that not only updates to data values but also changes in the structure of
               the data model via actions are schema conformant.
            </div>
            <div class="para e90">Earlier versions of HTML forms did not provide type support. All data values were
               considered as text, for which custom validation rules could be scripted. HTML5 knows
               a small number of pre-defined data types, which can be customized declaratively by
               a
               few parameters and regular expressions, similar to restricting XML Schema simple
               types with facets. HTML5 data types are validated in conformant browsers. This is
               the big advantage of HTML5 over earlier versions of HTML with respect to
               forms.
            </div>
            <div class="para e91">A fully conformant XForms processor must be able to do XML Schema validation
               dynamically, also selectively for parts of the document.
            </div>
         </div><a name="EventsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e92">
            <div class="title e93">Events</div>
            <div class="para e94">Form systems handle events or signals that are activated in a form internally or
               under user control. For example, events can cause parts of a form to expand or
               collapse or value changes to be propagated to formulas that need to be re-evaluated,
               spreadsheet-like.
            </div>
            <div class="para e95">As to events, both HTML forms and XForms are based on the DOM Events W3C Recommendation
               <div class="popupBox e96">
                  <div class="popupLabel" onmouseover="$('#d1e165').show('1000');" onmouseout="$('#d1e165').hide('1000');">[ footnote ]</div>
                  <div id="d1e165" style="display: none;">
                     <div class="footnote">
                        <div class="para e97">
                           <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e98" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/DOM-Level-3-Events/</div>
                        </div>
                     </div>
                  </div>
               </div>. DOM Events defines the structure of and processing rules for browser
               events. XForms goes beyond HTML forms in that it utilizes an XML encoding layer for
               DOM events, according to the W3C Recommendation XML Events
               <div class="popupBox e99">
                  <div class="popupLabel" onmouseover="$('#d1e170').show('1000');" onmouseout="$('#d1e170').hide('1000');">[ footnote ]</div>
                  <div id="d1e170" style="display: none;">
                     <div class="footnote">
                        <div class="para e100">
                           <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e101" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/2003/REC-xml-events-20031014/</div>
                        </div>
                     </div>
                  </div>
               </div>.
            </div>
            <div class="para e102">A form reacts to an event by executing an action. In HTML forms, actions are
               custom-programmed pieces of script, often JavaScript; actions are associated with
               events by HTML-specific attributes (such as 
               <div class="code e103">onclick</div>) or by registration
               mechanisms that are specific to the scripting language in use. In contrast, XForms
               has predefined actions (such as 
               <div class="code e104">message</div>, 
               <div class="code e105">setvalue</div> or
               
               <div class="code e106">delete</div>). XForms also specifies events beyond DOM Events. Most
               importantly, it uses the standardized XML encoding of XML Events to associate events
               with actions. XML Events defines how to encode event-related information in XML.
               With XML Events and XForms' predefined actions, the processing of specific events
               can be defined declaratively, reducing the need for scripting.
            </div>
            <div class="para e107">Consequently, an XForms processor needs to implement the predefined XForms actions
               and specific XForms events, and it must be able to interprete XML Event definitions,
               in addition to supporting DOM events and their processing model.
            </div>
         </div><a name="WidgetsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e108" xml:id="innovations.widgets">
            <div class="title e109">Widgets</div>
            <div class="para e110">The most prominent feature of a form system is the set of widgets that is
               available for data entry. In this respect, XForms and HTML5 are basically
               equivalent, while earlier versions of HTML are slightly weaker [
               <div class="xref e111" linkend="w3.pemberton"></div>].
            </div>
         </div><a name="RepetitionsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e112">
            <div class="title e113">Repetitions</div>
            <div class="para e114">Forms need to display repeated data that can be manipulated with actions, such as
               repeating rows in a database table view. XForms provides the user-interface element
               
               <div class="code e115">repeat</div>, which contains a template of inner widgets that will be
               instantiated for each portion of the block of data in the form's data that the
               
               <div class="code e116">repeat</div> is connected with. Early versions of HTML do not support
               repetitions natively. Interestingly enough, repetition functionality has been a part
               of Webforms&nbsp;2
               <div class="popupBox e117">
                  <div class="popupLabel" onmouseover="$('#d1e209').show('1000');" onmouseout="$('#d1e209').hide('1000');">[ footnote ]</div>
                  <div id="d1e209" style="display: none;">
                     <div class="footnote">
                        <div class="para e118">
                           <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e119" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.whatwg.org/specs/web-forms/current-work/</div>
                        </div>
                     </div>
                  </div>
               </div>, a tributary to HTML5 that has been inspired by XForms, but has not made
               it into HTML5. Hence, no version of HTML forms supports repetitions, but XForms
               processors must support the 
               <div class="code e120">repeat</div> element.
            </div>
            <div class="para e121">To summarize, an XForms processor needs to satisfy the following requirements
               beyond those of a simple HTML forms processor:
            </div>
            <div class="itemizedlist e122">
               <div class="listitem e123">
                  <div class="para e124">Handling of XML data, including load and transmit.</div>
               </div>
               <div class="listitem e125">
                  <div class="para e126">Dynamic evaluation of XPath expressions.</div>
               </div>
               <div class="listitem e127">
                  <div class="para e128">Dynamic evaluation of (parts of) XML data against XML Schema.</div>
               </div>
               <div class="listitem e129">
                  <div class="para e130">Support for XForms widgets.</div>
               </div>
               <div class="listitem e131">
                  <div class="para e132">Support for the 
                     <div class="code e133">repeat</div> element.
                  </div>
               </div>
               <div class="listitem e134">
                  <div class="para e135">Implementation of XForms actions.</div>
               </div>
               <div class="listitem e136">
                  <div class="para e137">Support for XForms events.</div>
               </div>
               <div class="listitem e138">
                  <div class="para e139">Interpretation of XML Event definitions.</div>
               </div>
            </div>
         </div>
      </div><a name="XFormsbuildingblocksonaWebbrowserANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e140" xml:id="s2-building-blocks">
         <div class="title e141">XForms building blocks on a Web browser</div>
         <div class="para e142">The implementation platform for our XForms processor xf.js is the HTML5-enabled
            browser. Referring back to the requirements for an XForms processor, we discuss in
            this
            section, which building blocks of an XForms processor an HTML5-enabled browser provides
            and what needs to be built in xf.js from scratch.
         </div><a name="XMLANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e143">
            <div class="title e144">XML</div>
            <div class="para e145">Today's Web browsers can parse XML files and translate them into data structures
               of a higher level of abstraction. Web browsers make these data structures available
               to programming languages via the standardized Document Object Model (DOM) interface.
               Furthermore, new DOM objects can be created in a Web browser under JavaScript
               control. JavaScript programs that run in the browser can read, modify and extend XML
               data in the browser via DOM. HTML5-enabled browsers support an advanced version of
               DOM that is specified by WHATWG and also addresses parsing and serialization of XML
               documents to and from DOM
               <div class="popupBox e146">
                  <div class="popupLabel" onmouseover="$('#d1e257').show('1000');" onmouseout="$('#d1e257').hide('1000');">[ footnote ]</div>
                  <div id="d1e257" style="display: none;">
                     <div class="footnote">
                        <div class="para e147">
                           <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e148" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://domparsing.spec.whatwg.org/</div>
                        </div>
                     </div>
                  </div>
               </div>. The XMLHttpRequest specification
               <div class="popupBox e149">
                  <div class="popupLabel" onmouseover="$('#d1e262').show('1000');" onmouseout="$('#d1e262').hide('1000');">[ footnote ]</div>
                  <div id="d1e262" style="display: none;">
                     <div class="footnote">
                        <div class="para e150">
                           <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e151" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/XMLHttpRequest/</div>
                        </div>
                     </div>
                  </div>
               </div> enables modern Web browsers to transfer DOM objects or XML-encoded
               strings.
            </div>
         </div><a name="XPathANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e152">
            <div class="title e153">XPath</div>
            <div class="para e154">With Document Object Model (DOM) Level 3 XPath Specification
               <div class="popupBox e155">
                  <div class="popupLabel" onmouseover="$('#d1e272').show('1000');" onmouseout="$('#d1e272').hide('1000');">[ footnote ]</div>
                  <div id="d1e272" style="display: none;">
                     <div class="footnote">
                        <div class="para e156">
                           <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e157" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/DOM-Level-3-XPath/</div>
                        </div>
                     </div>
                  </div>
               </div>, W3C defines an interface to query a DOM object with an XPath 1.0
               expression. The interface provides, among others, the following two methods:
            </div>
            <div class="itemizedlist e158">
               <div class="listitem e159">
                  <div class="para e160">The method 
                     <div class="code e161">evaluate()</div> evaluates an XPath expression against a
                     DOM node.
                  </div>
               </div>
               <div class="listitem e162">
                  <div class="para e163">The method 
                     <div class="code e164">createNSResolver()</div> generates a namespace resolver
                     object for all namespace definitions that are in scope at a specific DOM
                     node.
                  </div>
               </div>
            </div>
            <div class="para e165">Modern Web browsers support this specification and its JavaScript binding.</div>
         </div><a name="XMLEventsandXMLSchemaANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e166">
            <div class="title e167">XML Events and XML Schema</div>
            <div class="para e168">Current Web browsers support neither XML Events nor XML Schema.</div>
         </div><a name="DocumentsandXMLsubmissionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e169">
            <div class="title e170">Documents and XML submission</div>
            <div class="para e171">In a Web browser new DOM document objects can be created on the fly using
               JavaScript. As XForms requires to handle each data model as an independent document,
               browsers meet the requirements of XForms here. 
            </div>
            <div class="para e172">A data model (or rather the document representing it) can be submitted as a XML
               string according to the XForms specification. Most Web browsers implement the XMLHttpRequest
               <div class="popupBox e173">
                  <div class="popupLabel" onmouseover="$('#d1e304').show('1000');" onmouseout="$('#d1e304').hide('1000');">[ footnote ]</div>
                  <div id="d1e304" style="display: none;">
                     <div class="footnote">
                        <div class="para e174">
                           <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e175" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/XMLHttpRequest/</div>
                        </div>
                     </div>
                  </div>
               </div> interface which provides (a)synchronous communication to a Web server
               out of a JavaScript program. The data to be sent can be a String, a Document object
               or another type according to XMLHttpRequest specification. As each data model is
               handled as an independent DOM Document, and the XMLHttpRequest specification enables
               a browser to transfer such a Document without conversion, the combination of
               Document and XMLHttpRequest fits well for the mentioned XForms requirements.
            </div>
         </div><a name="WidgetsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e176">
            <div class="title e177">Widgets</div>
            <div class="para e178">Widgets in XForms and HTML5 have the same functional range but different names.
               Thus, an XForms processor can utilize HTML5 widgets after mapping, as shown in the
               following table. It can also utilize the data entry support and validation
               facilities of an HTML5-enabled browser, compensating at least partially for lacking
               XML Schema support.
            </div>
            <div class="table e179" xml:id="widgets-mapping">
               <div class="metaBox e180"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e315').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e315" class="metaSource" style="display:none;">                
                     &lt;col<span class="metaAttribute">align='left'
                        </span><span class="metaAttribute">class='e180'
                        </span><span class="metaAttribute">span='1'
                        </span><span class="metaAttribute">valign='top'
                        </span>
                     &gt;
                     
                  </div>
               </div>
               <div class="metaBox e181"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e316').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e316" class="metaSource" style="display:none;">                
                     &lt;col<span class="metaAttribute">align='left'
                        </span><span class="metaAttribute">class='e181'
                        </span><span class="metaAttribute">span='1'
                        </span><span class="metaAttribute">valign='top'
                        </span>
                     &gt;
                     
                  </div>
               </div>
               <div class="metaBox e182"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e317').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e317" class="metaSource" style="display:none;">                
                     &lt;col<span class="metaAttribute">align='left'
                        </span><span class="metaAttribute">class='e182'
                        </span><span class="metaAttribute">span='1'
                        </span><span class="metaAttribute">valign='top'
                        </span>
                     &gt;
                     
                  </div>
               </div>
               <div class="thead e183">
                  <div class="tr e184" valign="top">
                     <div class="th e185">XForms</div>
                     <div class="th e186">HTML5</div>
                     <div class="th e187">Details</div>
                  </div>
               </div>
               <div class="tbody e188">
                  <div class="tr e189">
                     <div class="td e190">
                        <div class="code e191">input</div>
                     </div>
                     <div class="td e192">
                        <div class="code e193">input</div>
                     </div>
                     <div class="td e194">At default the XForms input widget 
                        <div class="quote e195">enables free-form data
                           entry
                        </div> (cf. 
                        <div class="xref e196" linkend="w3.xforms"></div>). The same is
                        provided in HTML5 when the type attribute is not set or set to 
                        <div class="emphasis e197" role="ital">text</div>.
                     </div>
                  </div>
                  <div class="tr e198">
                     <div class="td e199">
                        <div class="code e200">output</div>
                     </div>
                     <div class="td e201">
                        <div class="code e202">output</div>
                     </div>
                     <div class="td e203">-</div>
                  </div>
                  <div class="tr e204">
                     <div class="td e205">
                        <div class="code e206">label</div>
                     </div>
                     <div class="td e207">
                        <div class="code e208">label</div>
                     </div>
                     <div class="td e209">-</div>
                  </div>
                  <div class="tr e210">
                     <div class="td e211">
                        <div class="code e212">trigger</div>
                     </div>
                     <div class="td e213">
                        <div class="code e214">input</div>, 
                        <div class="code e215">button</div>
                     </div>
                     <div class="td e216">In HTML5: The type attribute on the 
                        <div class="code e217">input</div> element has to be
                        set to 
                        <div class="emphasis e218" role="ital">button</div>.
                     </div>
                  </div>
                  <div class="tr e219">
                     <div class="td e220">
                        <div class="code e221">submit</div>
                     </div>
                     <div class="td e222">
                        <div class="code e223">input</div>
                     </div>
                     <div class="td e224">In HTML5: The type attribute has to be set to 
                        <div class="emphasis e225" role="ital">submit</div>.
                     </div>
                  </div>
                  <div class="tr e226">
                     <div class="td e227">
                        <div class="code e228">secret</div>
                     </div>
                     <div class="td e229">
                        <div class="code e230">input</div>
                     </div>
                     <div class="td e231">In HTML5: The type attribute has to be set to 
                        <div class="emphasis e232" role="ital">password</div>.
                     </div>
                  </div>
                  <div class="tr e233">
                     <div class="td e234">
                        <div class="code e235">textarea</div>
                     </div>
                     <div class="td e236">
                        <div class="code e237">textarea</div>
                     </div>
                     <div class="td e238">-</div>
                  </div>
                  <div class="tr e239">
                     <div class="td e240">
                        <div class="code e241">upload</div>
                     </div>
                     <div class="td e242">
                        <div class="code e243">input</div>
                     </div>
                     <div class="td e244">In HTML5: The type attribute has to be set to 
                        <div class="emphasis e245" role="ital">file</div>. But see restrictions in xf.js below.
                     </div>
                  </div>
                  <div class="tr e246">
                     <div class="td e247">
                        <div class="code e248">range</div>
                     </div>
                     <div class="td e249">
                        <div class="code e250">input</div>
                     </div>
                     <div class="td e251">This is the only widget that needs HTML5 beyond earlier HTML versions.
                        In HTML5: The type attribute has to be set to 
                        <div class="emphasis e252" role="ital">range</div>. The values of additional attributes can be mapped
                        as follows: 
                        <div class="itemizedlist e253">
                           <div class="listitem e254">
                              <div class="para e255">
                                 <div class="emphasis e256" role="ital">start</div> (HTML5) to
                                 
                                 <div class="emphasis e257" role="ital">min</div> (XForms)
                              </div>
                           </div>
                           <div class="listitem e258">
                              <div class="para e259">
                                 <div class="emphasis e260" role="ital">end</div> (HTML5) to 
                                 <div class="emphasis e261" role="ital">max</div> (XForms)
                              </div>
                           </div>
                           <div class="listitem e262">
                              <div class="para e263">
                                 <div class="emphasis e264" role="ital">step</div> (HTML5) to 
                                 <div class="emphasis e265" role="ital">step</div> (XForms)
                              </div>
                           </div>
                        </div>
                        
                     </div>
                  </div>
                  <div class="tr e266">
                     <div class="td e267">
                        <div class="code e268">select1</div> (full)
                     </div>
                     <div class="td e269">
                        <div class="code e270">input</div>
                     </div>
                     <div class="td e271">In HTML5: The type attribute has to be set to 
                        <div class="emphasis e272" role="ital">radio</div>. In XForms there is one 
                        <div class="code e273">select1</div>
                        containing a list of options. In HTML5 there must be one
                        
                        <div class="code e274">input</div> element per option.
                     </div>
                  </div>
                  <div class="tr e275">
                     <div class="td e276">
                        <div class="code e277">select1</div> (compact)
                     </div>
                     <div class="td e278">
                        <div class="code e279">option</div>
                     </div>
                     <div class="td e280">In HTML5: The size attribute has to be set to a value greater than "1".
                        A browser will display it as a listbox.
                     </div>
                  </div>
                  <div class="tr e281">
                     <div class="td e282">
                        <div class="code e283">select1</div> (minimal)
                     </div>
                     <div class="td e284">
                        <div class="code e285">option</div>
                     </div>
                     <div class="td e286">In HTML5: The size attribute has to be set to "1". A browser will
                        display it as a drop down selection box.
                     </div>
                  </div>
                  <div class="tr e287">
                     <div class="td e288">
                        <div class="code e289">select</div> (full)
                     </div>
                     <div class="td e290">
                        <div class="code e291">input</div>
                     </div>
                     <div class="td e292">In HTML5: The type attribute has to be set to 
                        <div class="emphasis e293" role="ital">checkbox</div>. In XForms there is one 
                        <div class="code e294">select</div>
                        containing a list of options. In HTML5 there must be one
                        
                        <div class="code e295">input</div> element per option.
                     </div>
                  </div>
                  <div class="tr e296">
                     <div class="td e297">
                        <div class="code e298">select</div> (compact)
                     </div>
                     <div class="td e299">
                        <div class="code e300">option</div>
                     </div>
                     <div class="td e301">In HTML5: The size attribute has to be set to a value greater than "1".
                        Additional the multiple attribute has to be set. 
                     </div>
                  </div>
                  <div class="tr e302">
                     <div class="td e303">
                        <div class="code e304">select</div> (minimal)
                     </div>
                     <div class="td e305">
                        <div class="code e306">option</div>
                     </div>
                     <div class="td e307">In HTML5: The size attribute has to be set "1". Additional the multiple
                        attribute has to be set.
                     </div>
                  </div>
               </div>
            </div>
         </div><a name="RepetitionsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e308">
            <div class="title e309">Repetitions</div>
            <div class="para e310">HTML5-enabled browsers have no native support for repetitions in forms.</div>
            <div class="para e311">In conclusion, on the positive side, HTML5-enabled Web browsers have a good
               support for XML via the DOM interface. An XML document is made accessible through
               a
               DOM interface and nodes in the DOM can be accessed using XPath expressions. New DOM
               document objects can be created and edited. Browsers also provide widget elements
               which cover the functionality required by XForms.
            </div>
            <div class="para e312">On the negative side, even HTML5-enabled Web browsers do not support XML Events
               nor XML Schema nor repetitions in the user interface. An XForms processor running
               on
               the HTML5-enabled bowser platform either has to implement its own support for these
               technologies or has to neglect them, giving up some required functionality.
            </div>
         </div>
      </div><a name="TheXFormsprocessorxfjsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e313" xml:id="s3-xf.js">
         <div class="title e314">The XForms processor xf.js</div>
         <div class="para e315">This section describes the implementation of the prototypical pure JavaScript XForms
            processor called xf.js. The goal of the implementation was not to provide full support
            for XForms but to evaluate the capabilities of Web browsers with HTML5 as platform
            for a
            XForms processor.
         </div><a name="PrinciplesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e316">
            <div class="title e317">Principles</div>
            <div class="para e318">As the goal was to discover browser capabilities, an easy to handle architecture
               was chosen. The xf.js processor implements a class for every supported XForms
               element (except the 
               <div class="code e319">label</div> element). These classes provide methods and
               class members for the specified attributes of the corresponding XForms element. When
               an object is instantiated, these members are initialized with the default values
               according to the XForms specification.
            </div>
            <div class="para e320">As Web browsers do not know the semantics of XForms widget elements, the DOM nodes
               of these elements are replaced by their HTML5 counterparts as shown in 
               <div class="xref e321" linkend="widgets-mapping"></div>.
            </div>
            <div class="para e322">The initialization of all objects, their relationships and the replacement of the
               widgets is done in a general parsing function, which is called after the browser has
               finished loading the document. 
            </div>
         </div><a name="ArchitectureANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e323">
            <div class="title e324">Architecture</div>
            <div class="para e325">The following section introduces the architecture of the xf.js processor by
               introducing the class model.
            </div>
            <div class="para e326">The following image shows the underlaying class model of the xf.js processor. For
               simplicity the classes in the image do not contain method identifiers.
            </div>
            <div class="figure e327" xml:id="class-model">
               <div class="title e328">The class model of the xf.js processor</div>
               <div class="mediaobject e329">
                  <div class="imageobject e330">
                     <div class="metaBox e331"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e582').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e582" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e331'
                              </span><span class="metaAttribute">fileref='../../../vol10/graphics/Niedl01/Niedl01-001.png'
                              </span><span class="metaAttribute">format='png'
                              </span><span class="metaAttribute">width='100%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="para e332">The functionality of the more important classes is described in the following
                  sections.
               </div>
            </div><a name="xfModelclassANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e333">
               <div class="title e334">xfModel class</div>
               <div class="para e335">The core of the processor is the xfModel object which belongs to a
                  
                  <div class="code e336">model</div> element in the document. The object has connections to
                  all objects of elements which are related to the 
                  <div class="code e337">model</div> node in the
                  document. This relations can be expressed in different ways. Child elements of
                  the 
                  <div class="code e338">model</div> element are related in a direct way (e.g.
                  
                  <div class="code e339">instance</div> or 
                  <div class="code e340">bind</div>). Widget and action elements can
                  point to a 
                  <div class="code e341">model</div> element by usage of the 
                  <div class="emphasis e342" role="ital">model</div> attribute which contains the ID of a corresponding
                  
                  <div class="code e343">model</div> element. Finally Widget and action elements can be
                  implicit related to the first 
                  <div class="code e344">model</div> element defined in the
                  document, if they have no 
                  <div class="emphasis e345">model</div> attribute defined. 
               </div>
               <div class="para e346">The xfModel class holds a reference to the DOM node of the corresponding
                  
                  <div class="code e347">model</div> element and to the HTML5 
                  <div class="code e348">form</div> element which
                  is generated during the parsing process. 
               </div>
               <div class="para e349">The class also provides methods for operations on the model. The most
                  important method is evaluate(), a central interface to evaluate XPath
                  expressions concerning the data models hold by dedicated 
                  <div class="code e350">instance</div>
                  elements. XForms augments the XPath specification with its own functions. These
                  XForms specific functions are of course not provided by the Web browser's XPath
                  interface. Thus the xf.js processor has to handle them by itself and can not
                  pass it through. Therefore a central evaluation method provides a good place to
                  implement these additional XForms functions. The processor supports the
                  additional functions instance() and index(). The evaluation method is also a
                  well fitting place for another XPath related feature which is still not
                  implemented: the implicit data model. If a node in the data model is referenced,
                  which does not exist, it is created by the XForms processor according to the
                  specification. The XPath interface of Web browsers does not provide such
                  functionality. But the evaluate method of xfModel could easily provide this
                  feature. If a XPath evaluation does not return any value, the next step should
                  be to check on every part of that expression if a corresponding node exists. If
                  this is not the case, the corresponding node could be generated by using the DOM
                  interface.
               </div>
               <div class="para e351">For each xfModel object an HTML5 
                  <div class="code e352">form</div> element is created in the
                  document. This form is an anchor to all HTML5 widgets which are created to
                  replace the XForms widget elements. Each xfModel object holds a reference to its
                  
                  <div class="code e353">form</div> element.
               </div>
            </div><a name="xfInstanceclassANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e354">
               <div class="title e355">xfInstance class</div>
               <div class="para e356">The xfInstance class is used to handle 
                  <div class="code e357">instance</div> elements which
                  carry the data model of a form. In the processor one xfInstance object is
                  generated for every 
                  <div class="code e358">instance</div> element. At the current state of the
                  implementation each xfInstance object holds a reference to the DOM node of the
                  
                  <div class="code e359">instance</div> element to perform read and write operations on the
                  data model. The XForms specification requests to handle all data models as
                  independent documents. Thus operations should not take place in the main
                  document itself. This feature would also be possible in a Web browser based
                  XForms implementation, as browsers implement the createDocument() interface as
                  defined in DOM Level 3 specification
                  <div class="popupBox e360">
                     <div class="popupLabel" onmouseover="$('#d1e656').show('1000');" onmouseout="$('#d1e656').hide('1000');">[ footnote ]</div>
                     <div id="d1e656" style="display: none;">
                        <div class="footnote">
                           <div class="para e361">
                              <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e362" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/DOM-Level-3-Core/</div>
                           </div>
                        </div>
                     </div>
                  </div>. Thus a new XML document could be created and filled with the nodes
                  defined inside the instance node. The xfInstance class provides also methods to
                  serialize the data model. For the submission of the data model as XML, the
                  implementation utilizes the XMLSerializer
                  <div class="popupBox e363">
                     <div class="popupLabel" onmouseover="$('#d1e661').show('1000');" onmouseout="$('#d1e661').hide('1000');">[ footnote ]</div>
                     <div id="d1e661" style="display: none;">
                        <div class="footnote">
                           <div class="para e364">
                              <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e365" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://domparsing.spec.whatwg.org/#the-xmlserializer-interface</div>
                           </div>
                        </div>
                     </div>
                  </div> to generate a XML string. For submission as name-value pairs the
                  getDataAsHashMap() method flattens the model data down as specified by XForms
                  before submission.
               </div>
            </div><a name="xfSubmissionandxfWidgetSubmitANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e366">
               <div class="title e367">xfSubmission and xfWidgetSubmit</div>
               <div class="para e368">A xfSubmission object is responsible for the transmission of a data model.
                  Each xfSubmission object is bidirectional attached to one xfModel object and
                  thus has indirect access to the xfInstance objects holding the data to send. The
                  main method is doSubmit() which performs the submission according to the
                  parameters set. A data model can be submitted as XML document, or as name-value
                  pairs according to HTML forms. The submission can be done using the methods
                  
                  <div class="emphasis e369" role="ital">POST</div>, 
                  <div class="emphasis e370" role="ital">GET</div>,
                  
                  <div class="emphasis e371" role="ital">PUT</div>, 
                  <div class="emphasis e372" role="ital">DELETE</div> or 
                  <div class="emphasis e373" role="ital">URLENCODED-POST</div> as
                  defined by XForms. To control which part of a data model should be submitted and
                  which one should be replaced the processor implements the attributes 
                  <div class="emphasis e374" role="ital">ref</div>, 
                  <div class="emphasis e375" role="ital">replace</div> and
                  
                  <div class="emphasis e376" role="ital">targetref</div>.
               </div>
               <div class="para e377">To start a submission a xfWidgetSubmit object is needed which is connected to
                  a xfSubmission object. The object is created for a XForms 
                  <div class="code e378">submit</div>
                  element and represented to the user as HTML5 button. When the user clicks the
                  button, the event of that click is handled at the xfWidgetSubmit object which
                  calls the doSubmit() method of the connected xfSubmission object.
               </div>
            </div><a name="xfBindANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e379">
               <div class="title e380">xfBind</div>
               <div class="para e381">The xfBind class represents the XForms 
                  <div class="code e382">bind</div> element. As XML
                  Schema is not supported by browsers (and not implemented in the processor
                  neither) xfBind allows type checking based on the HTML5 form check interface.
                  The 
                  <div class="emphasis e383" role="ital">type</div> attribute can be set to one of the
                  following values as defined in HTML5: 
                  <div class="emphasis e384" role="ital">text</div>,
                  
                  <div class="emphasis e385" role="ital">number</div>, 
                  <div class="emphasis e386" role="ital">url</div>, 
                  <div class="emphasis e387" role="ital">email</div>, 
                  <div class="emphasis e388" role="ital">tel</div>, 
                  <div class="emphasis e389" role="ital">date</div>, 
                  <div class="emphasis e390" role="ital">time</div>, 
                  <div class="emphasis e391" role="ital">datetime</div>,
                  
                  <div class="emphasis e392" role="ital">datetime-local</div>, 
                  <div class="emphasis e393" role="ital">month</div>, 
                  <div class="emphasis e394" role="ital">week</div> or 
                  <div class="emphasis e395" role="ital">color</div>.
               </div>
               <div class="para e396">If a XForms input widget refers to a 
                  <div class="code e397">bind</div> element with one of
                  these type values, the 
                  <div class="emphasis e398" role="ital">type</div> attribute of the
                  generated HTML5 widget replacing the XForms widget will be set to this value
                  leading to a deeper integration of XForms into HTML5. Before a data model is
                  submitted, a check of the user input is done according to the type settings by
                  usage of the checkValidity
                  <div class="popupBox e399">
                     <div class="popupLabel" onmouseover="$('#d1e758').show('1000');" onmouseout="$('#d1e758').hide('1000');">[ footnote ]</div>
                     <div id="d1e758" style="display: none;">
                        <div class="footnote">
                           <div class="para e400">
                              <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e401" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.whatwg.org/specs/web-apps/current-work/multipage/forms.html#dom-form-checkvalidity</div>
                           </div>
                        </div>
                     </div>
                  </div> interface which was introduced in HTML5 on the 
                  <div class="code e402">form</div>
                  element.
               </div>
            </div><a name="WidgetsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e403">
               <div class="title e404">Widgets</div>
               <div class="para e405">For every XForms widget element an appropriate xfWidget object is created,
                  e.g. a xfWidgetTrigger object for a 
                  <div class="code e406">trigger</div> element. As the browser
                  does not know the semantics of the XForms widget elements they are replaced by
                  their HTML5 counterparts according to 
                  <div class="xref e407" linkend="widgets-mapping"></div>. Every
                  xfWidget object holds a reference to the corresponding HTML5 widget.
               </div>
               <div class="para e408">To ensure a widget shows the actual value of the referenced node in the data
                  model, the processor uses the 
                  <div class="quote e409">Mutation observer</div>
                  <div class="popupBox e410">
                     <div class="popupLabel" onmouseover="$('#d1e780').show('1000');" onmouseout="$('#d1e780').hide('1000');">[ footnote ]</div>
                     <div id="d1e780" style="display: none;">
                        <div class="footnote">
                           <div class="para e411">
                              <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e412" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://dom.spec.whatwg.org/#mutation-observers</div>
                           </div>
                        </div>
                     </div>
                  </div> interface. The Mutation observer is going to be introduced in DOM 4
                  to replace the DOM Mutation Events. Every xfWidget object owns a mutation
                  observer and a callback function which is executed by the observer. The observer
                  is set to the referenced node in the data model and the callback function
                  updates the widgets state to the current value of the node in the data
                  model.
               </div>
               <div class="para e413">For simplicity the XForms label element is not handled as a own class. As a
                  label element belongs to another widget element, the label's value is stored as
                  attribute in the corresponding xfWidget object. Depending on the widget element
                  the label's value is displayed as HTML5 
                  <div class="code e414">label</div> element, or on the
                  widget element itself, e.g. as caption of a button.
               </div>
            </div><a name="xfRepeatandxfRepeatGroupANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e415">
               <div class="title e416">xfRepeat and xfRepeatGroup</div>
               <div class="para e417">XForms provides the 
                  <div class="code e418">repeat</div> element to display all child elements
                  inside it multiple times. This functionality is given in the processor with the
                  xfRepeat and xfRepeatGroup classes. The xfRepeat class represents the repeat
                  element itself. 
               </div>
               <div class="para e419">The 
                  <div class="code e420">repeat</div> element refers to a nodeset in a data model. For every
                  node in this set the elements inside the 
                  <div class="code e421">repeat</div> element will be
                  repeated. The xfRepeatGroup object is used to represent such a repeat. It
                  contains a copy of all elements which are defined inside the 
                  <div class="code e422">repeat</div>
                  element of the superior xfRepeat object. Every xfRepeatGroup object also refers
                  to one node of the repeat element's nodeset. 
               </div>
               <div class="para e423">The processor supports the 
                  <div class="emphasis e424" role="ital">add</div> and 
                  <div class="emphasis e425" role="ital">remove</div> operations of such groups. When a new node is
                  added to the nodeset, a new group is created and displayed. When a node is
                  removed from the nodeset, the corresponding group is deleted and removed from
                  the user interface.
               </div>
            </div><a name="ActionsandeventsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e426">
               <div class="title e427">Actions and events</div>
               <div class="para e428">The processor supports the action elements 
                  <div class="code e429">insert</div>,
                  
                  <div class="code e430">setvalue</div>, 
                  <div class="code e431">delete</div> and 
                  <div class="code e432">message</div> and the
                  superior element 
                  <div class="code e433">action</div> to group the others. Each element is
                  represented by a xfAction class, e.g. xfActionMessage. Each object owns a class
                  member 
                  <div class="emphasis e434" role="ital">event</div> which contains the name of the
                  event on which the object should react. In addition each object has a method
                  perform() which implements the desired actions.
               </div>
               <div class="para e435">As Action elements belong to another XForms element, each xf class is able to
                  hold references to one or more action objects. Each xf class also implements a
                  method handleEvent(), a generic event handler for the underlying XForms element.
                  When an event reaches the XForms element, the event handler is called which
                  compares the event's name with the event name of each registered xfAction
                  object. If the names match, the perform() method of the corresponding xfAction
                  object is called. 
               </div>
            </div>
         </div><a name="EvaluationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e436">
            <div class="title e437">Evaluation</div>
            <div class="para e438">As we have demonstrated, most of the XForms concepts can be implemented in a
               browser native XForms processor. But some concepts can not be covered. The
               restrictions can be divided into the following classes:
            </div>
            <div class="itemizedlist e439">
               <div class="listitem e440">
                  <div class="para e441">Missing technology in an HTML5-enabled Web browser.</div>
               </div>
               <div class="listitem e442">
                  <div class="para e443">Limitations of the platform (browsers and HTML5).</div>
               </div>
            </div><a name="MissingtechnologyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e444">
               <div class="title e445">Missing technology</div>
               <div class="para e446">First of all, XML Schema support is missing completely as Web browsers today
                  do not implement it. A solution for a browser based XForms processor would be to
                  use a JavaScript based XML Schema implementation, as provided by
                  
                  <div class="quote e447">xml.js</div>
                  <div class="popupBox e448">
                     <div class="popupLabel" onmouseover="$('#d1e862').show('1000');" onmouseout="$('#d1e862').hide('1000');">[ footnote ]</div>
                     <div id="d1e862" style="display: none;">
                        <div class="footnote">
                           <div class="para e449">
                              <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e450" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://syssgx.github.com/xml.js/</div>
                           </div>
                        </div>
                     </div>
                  </div>.
               </div>
               <div class="para e451">The same holds for the support of XML Events. Mozilla seems to have had a XML
                  Events implementation but it was rejected from core in 2012
                  <div class="popupBox e452">
                     <div class="popupLabel" onmouseover="$('#d1e869').show('1000');" onmouseout="$('#d1e869').hide('1000');">[ footnote ]</div>
                     <div id="d1e869" style="display: none;">
                        <div class="footnote">
                           <div class="para e453">
                              <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e454" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">https://bugzilla.mozilla.org/show_bug.cgi?id=656311</div>
                           </div>
                        </div>
                     </div>
                  </div>. Therefore a XForms processor also has to implement the XML Events
                  specification itself. The xf.js processor partially implements XML Events
                  itself.
               </div>
            </div><a name="LimitationsoftheplatformANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e455">
               <div class="title e456">Limitations of the platform</div>
               <div class="para e457">To evaluate an XPath expression, a namespace resolver is needed which provides
                  a mapping from namespace prefixes to their corresponding name. A namespace
                  resolver can be build manually or by using the createNSResolver() method. It
                  takes a DOM node 
                  <div class="emphasis e458" role="ital">n</div> and builds a resolver which
                  knows the namespaces and prefixes of all nodes from the document's root to the
                  given node 
                  <div class="emphasis e459" role="ital">n</div>. It is not possible to
                  automatically generate a namespace resolver which knows the namespaces of the
                  whole document (and not just a part of it). For the processor implementation
                  this rises the question which node should be taken? It should be a node, at a
                  very deep position in the document tree (to get as much namespace definitions as
                  possible) and on a branch which will be evaluated by the XPath expression in the
                  next step. But such a node can not be chosen without evaluating the XPath
                  expression first. Therefore only the node of the instance element itself (or its
                  first and only child node) can be taken as input for the createNSResolver
                  function. This leads to the problem, that namespaces which are defined inside
                  the data model can not be used and evaluating a XPath expression which contains
                  such namespace prefixes will fail. 
               </div>
               <div class="para e460">Another limitation is given at the document submission. XForms specifies both:
                  synchronous and asynchronous submissions, whereas a synchronous submission means
                  that the document holding the XForms is replaced by the server response. To
                  provide the submission of XML data, the processor has to use the XMLHttpRequest
                  interface. The interface is well suited for asynchronous data transfer (meaning
                  that the document remains in the browser after a submit). But it does not
                  provide functionality to replace the whole document with a server
                  response.
               </div>
               <div class="para e461">As the xf.js processor is implemented in JavaScript all restrictions of the
                  JavaScript interpreter in a Web browser also apply for the xf.js processor
                  itself. 
               </div>
               <div class="para e462">First, Web browsers do not permit access to the local file system to
                  JavaScript programs. Thus saving a data model on the computer or opening an
                  existing one cannot be implemented without using additional technologies, like
                  Adobe Flash or another browser plug-in which is able to access the local file
                  system. HTML5 defines the Web storage
                  <div class="popupBox e463">
                     <div class="popupLabel" onmouseover="$('#d1e891').show('1000');" onmouseout="$('#d1e891').hide('1000');">[ footnote ]</div>
                     <div id="d1e891" style="display: none;">
                        <div class="footnote">
                           <div class="para e464">
                              <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e465" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.whatwg.org/specs/web-apps/current-work/multipage/webstorage.html#webstorage</div>
                           </div>
                        </div>
                     </div>
                  </div> interface which allows the storage of data on the local system in a
                  key-value pair manner. But Web storage meets the requirements of XForms only
                  partially as XForms allows the specification of a URL pointing into the local
                  file system for storing the data model. Browsers providing the Web storage
                  interface act as a simple database, but do not allow the user to choose the
                  destination of the stored information.
               </div>
               <div class="para e466">Second, Web browsers prevent scripts from accessing other sites (with
                  different host name, port, etc.). Thus the submission of data to an URL
                  different from the one the current loaded document is not possible for security
                  reasons.
               </div>
               <div class="para e467">The JavaScript restrictions also prevent a working upload widget element. In
                  XForms the content of a file, which was selected using the upload widget, can be
                  embedded into the data model as binary content. The HTML5 counterpart widget has
                  no interface to fetch the file content via JavaScript. As the access to local
                  files is not possible in general, a pure JavaScript based XForms processor lacks
                  this feature. 
               </div>
            </div>
         </div>
      </div><a name="SummaryANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e468" xml:id="s4-conclusion">
         <div class="title e469">Summary</div>
         <div class="para e470">The xf.js processor uses a straight forward architecture. Each XForms element is
            represented by a corresponding object. After loading the document, a parser instantiates
            the needed objects and connects them in the desired way. In a second step each widget
            element is replaced by its HTML5 counterpart. 
         </div>
         <div class="para e471">The xf.js processor supports multiple 
            <div class="code e472">model</div> elements in a document and
            multiple instances inside a 
            <div class="code e473">model</div> element. Nodes in the data model can
            either be referenced directly with a XPath expression by using the appropriate attribute
            (
            <div class="emphasis e474" role="ital">ref</div> or 
            <div class="emphasis e475" role="ital">nodeset</div>)
            or by using 
            <div class="code e476">bind</div> elements in the data model. A data model can be submitted
            as XML or as name-value pairs according to form submission in HTML. 
         </div>
         <div class="para e477">For this purposes the xf.js processor supports the following elements:
            
            <div class="code e478">model</div>, 
            <div class="code e479">instance</div>, 
            <div class="code e480">bind</div> and
            
            <div class="code e481">submission</div>. For the user interface, the elements 
            <div class="code e482">label</div>,
            
            <div class="code e483">input</div>, 
            <div class="code e484">output</div>, 
            <div class="code e485">trigger</div>, 
            <div class="code e486">submit</div>
            and 
            <div class="code e487">repeat</div> are supported. To show the capabilities of Web browsers towards
            events, the xf.js processor implements the Action elements 
            <div class="code e488">insert</div>,
            
            <div class="code e489">setvalue</div>, 
            <div class="code e490">delete</div>, 
            <div class="code e491">message</div> and the element
            
            <div class="code e492">action</div> itself to group multiple other Action elements. These elements
            can react on events generated by the Web browser (implementation currently supports
            
            <div class="emphasis e493" role="ital">DOMActivate</div>) and on XForms specific events
            (
            <div class="emphasis e494" role="ital">xforms-ready</div> is implemented), which are generated
            by the processor itself.
         </div>
         <div class="para e495">To validate user inputs the xf.js processor uses some of the types defined by HTML5,
            e.g. 
            <div class="emphasis e496" role="ital">number</div>, 
            <div class="emphasis e497" role="ital">text</div>,
            
            <div class="emphasis e498" role="ital">datetime</div>, etc. These types can be used with a
            
            <div class="code e499">bind</div> element, like XML Schema types in other processors.
         </div>
      </div><a name="OutlookANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e500">
         <div class="title e501">Outlook</div>
         <div class="para e502">As already mentioned, the xf.js processor has an easy to implement architecture where
            each supported XForms element is represented as a class. Such a class is instantiated
            for every XForms element used in a document. The members of the objects are filled
            with
            the values given in the element attributes. This architecture has the draw back of
            creating a shadow model of all information which are already present in the loaded
            document and accessible via the DOM.
         </div>
         <div class="para e503">Therefore a new version of the processor is going to be implemented with a different
            architecture. Instead of creating an object for every XForms node in the DOM the
            existing DOM nodes should be used directly. This includes the enhancement of the DOM
            nodes with a set of JavaScript functions which provide the needed functionality for
            every node. E.g. the DOM node of a XForms 
            <div class="code e504">message</div> element node gets a
            function perform() associated which displays the defined message to the user when
            called.
         </div>
         <div class="para e505">An important functionality is the support of XML Schema which is not given at the
            moment. It has to be checked if JavaScript implementations for XML Schema can be used
            for the xf.js processor. 
         </div>
         <div class="para e506">We plan to make the source code of the new version public as soon as it has reached
            some kind of maturity.
         </div>
      </div><a name="ExamplesandscreenshotsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="appendix e507" xml:id="appendix.screenshots">
         <div class="title e508">Examples and screenshots</div>
         <div class="para e509">Finally we want to show the results of the implementation with a set of examples and
            screenshots. The XForms source is given on each example.
         </div><a name="WidgetreplacementANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e510">
            <div class="title e511">Widget replacement</div>
            <div class="para e512">The first example shows how the document is modified when the XForms widget
               elements are replaced by HTML5 widgets.
            </div>
            <div class="para e513">This XForms code:
               
               <div class="programlisting e514" xml:space="preserve">&lt;body&gt;
                  &lt;xf:input ref="data"&gt; 
                  &lt;xf:label&gt;Input: &lt;/xf:label&gt;
                  &lt;/xf:input&gt; &lt;br /&gt;
                  &lt;xf:output value="data"&gt;
                  &lt;xf:label&gt;Result: &lt;/xf:label&gt; 
                  &lt;/xf:output&gt; 
                  &lt;/body&gt;
               </div>
               Will result in the following XHTML5 code:
               
               <div class="programlisting e515" xml:space="preserve">&lt;body&gt;
                  &lt;label&gt;Input: &lt;/label&gt;
                  &lt;input type="text" name="FNinput_Input" value="Back to the Future" form="FN_model1"
                  /&gt;
                  &lt;br /&gt;	
                  &lt;label&gt;Output: &lt;/label&gt;
                  &lt;output name="output" form="FN_model1"&gt;Back to the Future&lt;/output&gt;
                  &lt;form id="FN_model1"&gt;&lt;/form&gt;
                  &lt;/body&gt;
               </div>
               
            </div>
            <div class="para e516">It will be displayed as follows: </div>
            <div class="figure e517" xml:id="input-output">
               <div class="title e518">The user interface in the browser</div>
               <div class="mediaobject e519">
                  <div class="imageobject e520">
                     <div class="metaBox e521"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1030').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1030" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e521'
                              </span><span class="metaAttribute">fileref='../../../vol10/graphics/Niedl01/Niedl01-002.png'
                              </span><span class="metaAttribute">format='png'
                              </span><span class="metaAttribute">width='50%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </div><a name="ChangesinthedatamodelANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e522">
            <div class="title e523">Changes in the data model</div>
            <div class="para e524">The data model can be changed using widget elements as in the previous example or
               using action elements. The following shows the XForms code to set a value in the
               data model after the user has clicked on a button:
               
               <div class="programlisting e525" xml:space="preserve">&lt;head&gt;
                  ...         
                  &lt;xf:model id="model2"&gt;
                  &lt;xf:instance&gt;
                  &lt;timeTravellers xmlns=""&gt;
                  &lt;name&gt;Marty McFly&lt;/name&gt;
                  &lt;name&gt;Dr. Emmet Brown&lt;/name&gt;
                  &lt;name&gt;Jennifer Parker&lt;/name&gt;
                  &lt;/timeTravellers&gt;
                  &lt;/xf:instance&gt;
                  
                  &lt;xf:instance id="inst2"&gt;
                  &lt;timeMachine xmlns=""&gt;
                  &lt;name&gt;&lt;/name&gt;
                  &lt;/timeMachine&gt;
                  &lt;/xf:instance&gt;     
                  &lt;/xf:model&gt;
                  &lt;/head&gt;
                  
                  &lt;body&gt;
                  &lt;xf:trigger&gt;
                  &lt;xf:label&gt;Click me&lt;/xf:label&gt;
                  &lt;xf:setvalue ev:event="DOMActivate" ref="instance('inst2')/name" model="model2"&gt;DeLorean
                  DMC-12&lt;/xf:setvalue&gt;
                  &lt;/xf:trigger&gt;
                  &lt;br /&gt;
                  &lt;xf:output ref="instance('inst2')/name" model="model2"&gt;
                  &lt;xf:label&gt;Time machine: &lt;/xf:label&gt;
                  &lt;/xf:output&gt;
                  &lt;/body&gt;
               </div>This
               code will lead to the following behaviour in the browser:
            </div>
            <div class="figure e526" xml:id="trigger-1">
               <div class="title e527">Updating the data model with events: Before the click</div>
               <div class="mediaobject e528">
                  <div class="imageobject e529">
                     <div class="metaBox e530"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1044').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1044" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e530'
                              </span><span class="metaAttribute">fileref='../../../vol10/graphics/Niedl01/Niedl01-003.png'
                              </span><span class="metaAttribute">format='png'
                              </span><span class="metaAttribute">width='75%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="figure e531" xml:id="trigger-2">
               <div class="title e532">Updating the data model with events: After the click</div>
               <div class="mediaobject e533">
                  <div class="imageobject e534">
                     <div class="metaBox e535"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1050').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1050" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e535'
                              </span><span class="metaAttribute">fileref='../../../vol10/graphics/Niedl01/Niedl01-004.png'
                              </span><span class="metaAttribute">format='png'
                              </span><span class="metaAttribute">width='75%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </div><a name="RepeatinggroupsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e536">
            <div class="title e537">Repeating groups</div>
            <div class="para e538">The xf.js processor also provides support for the XForms 
               <div class="code e539">repeat</div>
               element. We use the following XForms code as
               example:
               <div class="programlisting e540" xml:space="preserve">&lt;body&gt;
                  &lt;div&gt;
                  &lt;xf:repeat id="carRepeat" nodeset="car"&gt;
                  &lt;xf:input ref="."&gt;
                  &lt;xf:label&gt;Car &lt;/xf:label&gt;
                  &lt;/xf:input&gt;
                  &lt;br /&gt;
                  &lt;/xf:repeat&gt;
                  
                  &lt;xf:trigger&gt;
                  &lt;xf:label&gt;Insert new car at beginning&lt;/xf:label&gt;
                  &lt;xf:action ev:event="DOMActivate"&gt;
                  &lt;xf:insert nodeset="car" at="1" position="before"/&gt;
                  &lt;xf:setvalue ref="car[1]/text()"&gt;Porsche&lt;/xf:setvalue&gt;
                  &lt;/xf:action&gt;  
                  &lt;/xf:trigger&gt;
                  
                  &lt;xf:trigger&gt;
                  &lt;xf:label&gt;Delete last car&lt;/xf:label&gt;
                  &lt;xf:delete ev:event="DOMActivate" nodeset="car" at="last()"/&gt;
                  &lt;/xf:trigger&gt;
                  &lt;/div&gt;  
                  &lt;/body&gt;
               </div>
            </div>
            <div class="para e541">The following images show the website after initialization, after a click on the
               
               <div class="quote e542">insert</div> button and after a click on the 
               <div class="quote e543">delete</div>
               button:
            </div>
            <div class="figure e544" xml:id="repeat-1">
               <div class="title e545">The repeat group after initialization</div>
               <div class="mediaobject e546">
                  <div class="imageobject e547">
                     <div class="metaBox e548"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1074').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1074" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e548'
                              </span><span class="metaAttribute">fileref='../../../vol10/graphics/Niedl01/Niedl01-005.png'
                              </span><span class="metaAttribute">format='png'
                              </span><span class="metaAttribute">width='75%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="figure e549" xml:id="repeat-2">
               <div class="title e550">The repeat group after an insert operation</div>
               <div class="mediaobject e551">
                  <div class="imageobject e552">
                     <div class="metaBox e553"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1080').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1080" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e553'
                              </span><span class="metaAttribute">fileref='../../../vol10/graphics/Niedl01/Niedl01-006.png'
                              </span><span class="metaAttribute">format='png'
                              </span><span class="metaAttribute">width='75%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="figure e554" xml:id="repeat-3">
               <div class="title e555">The repeat group after a delete operation</div>
               <div class="mediaobject e556">
                  <div class="imageobject e557">
                     <div class="metaBox e558"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1086').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1086" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e558'
                              </span><span class="metaAttribute">fileref='../../../vol10/graphics/Niedl01/Niedl01-007.png'
                              </span><span class="metaAttribute">format='png'
                              </span><span class="metaAttribute">width='75%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </div>
      </div><a name="BibliographyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e559">
         <div class="title e560">Bibliography</div>
         <div class="bibliomixed e561" xml:id="XFormsEssentials">Micah Dubinko: XForms Essentials. O'Reilly
            2003.
         </div>
         <div class="bibliomixed e562" xml:id="FormsNG">Hofmann/Liebermann: XForms: The Next Generation of Internet
            Interfaces. Augsburg 2004.
         </div>
         <div class="bibliomixed e563" xml:id="w3.pemberton" xreflabel="Pemberton 2003"> Steven Pemberton.
            
            <div class="quote e564">XForms for HTML Authors</div>. [last accessed 24. Mar 2013].
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e565" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/MarkUp/Forms/2003/xforms-for-html-authors.html</div>
            
         </div>
         <div class="bibliomixed e566" xml:id="w3.xforms" xreflabel="XForms 1.1"> John M. Boyer [Editor].
            
            <div class="quote e567">XForms 1.1 W3C Recommendation 20 October 2009</div>. [last accessed 24. Mar
            2013]. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e568" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xforms/#ui-input</div>
            
         </div>
      </div>
   </div>
</div>