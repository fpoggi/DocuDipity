<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#BeyondWellFormedandValidANCHOR" name="BeyondWellFormedandValidTOC">Beyond Well-Formed and Valid</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#XMLforConfiguration:BackgroundANCHOR" name="XMLforConfiguration:BackgroundTOC">XML for Configuration:  Background</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#XMLforConfigurationatPortico:IssuesANCHOR" name="XMLforConfigurationatPortico:IssuesTOC">XML for Configuration at Portico:  Issues</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#WhatisPortico?ANCHOR" name="WhatisPortico?TOC">What is Portico?</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#PorticoXMLConfigurationFiles:ADescriptionANCHOR" name="PorticoXMLConfigurationFiles:ADescriptionTOC">Portico XML Configuration Files:  A Description</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#PorticoXMLConfigurationFiles:CategoriesofConfigurationIssuesANCHOR" name="PorticoXMLConfigurationFiles:CategoriesofConfigurationIssuesTOC">Portico XML Configuration Files:  Categories of Configuration Issues</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#ConsistencyIssuesANCHOR" name="ConsistencyIssuesTOC">Consistency Issues</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#IssuesANCHOR" name="IssuesTOC"> Issues</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#ExistenceIssuesANCHOR" name="ExistenceIssuesTOC">Existence Issues</a></div>
               </div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#XMLforConfigurationatPortico:SolutionsANCHOR" name="XMLforConfigurationatPortico:SolutionsTOC">XML for Configuration at Portico:  Solutions</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ConsistencyCheckerANCHOR" name="ConsistencyCheckerTOC">Consistency Checker</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#%E2%80%9CReferentialIntegrity%E2%80%9DCheckerANCHOR" name="%E2%80%9CReferentialIntegrity%E2%80%9DCheckerTOC">“Referential Integrity” Checker</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ExistenceCheckerANCHOR" name="ExistenceCheckerTOC">Existence Checker</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ReflectionsANCHOR" name="ReflectionsTOC">Reflections</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ReferencesANCHOR" name="ReferencesTOC">References</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">AttributeValueSeparator</div>
         <div class="singletermTERMS">AttributeName</div>
         <div class="singletermTERMS">and</div>
         <div class="singletermTERMS">August 6, 2012</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">BaseTransform_1.0</div>
         <div class="singletermTERMS">BaseTransform_1.0</div>
         <div class="singletermTERMS">Bhattarai</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">Director of Data Technology</div>
         <div class="singletermTERMS">Data Software Developer</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">ElementQNames</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
         <div class="singletermTERMS">Format</div>
         <div class="singletermTERMS">File Formats</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
         <div class="singletermTERMS">gautham.kalwala@ithaka.org</div>
         <div class="singletermTERMS">Gautham</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">InputFilterClass</div>
         <div class="singletermTERMS">ITHAKA</div>
         <div class="singletermTERMS">InputFilterClass</div>
         <div class="singletermTERMS">if</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
         <div class="singletermTERMS">JHOVE2 and Java Reflection</div>
         <div class="singletermTERMS">Journal of Electronic Publishing</div>
         <div class="singletermTERMS">john.meyer@ithaka.org</div>
         <div class="singletermTERMS">jie.ling@ithaka.org</div>
         <div class="singletermTERMS">John</div>
         <div class="singletermTERMS">Jie</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
         <div class="singletermTERMS">Kalwala</div>
         <div class="singletermTERMS">Kurdikar</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">Ling</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">MatchString</div>
         <div class="singletermTERMS">moving parts</div>
         <div class="singletermTERMS">matt.stoeffler@ithaka.org</div>
         <div class="singletermTERMS">Matt</div>
         <div class="singletermTERMS">Morrissey</div>
         <div class="singletermTERMS">Meyer</div>
         <div class="singletermTERMS">M.</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">outputFormatId</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">Paramter</div>
         <div class="singletermTERMS">Portico</div>
         <div class="singletermTERMS">profiles</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">Rid</div>
         <div class="singletermTERMS">ReplacementString</div>
         <div class="singletermTERMS">registries</div>
         <div class="singletermTERMS">Referential Integrity</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">ScriptInfo</div>
         <div class="singletermTERMS">ScriptID</div>
         <div class="singletermTERMS">scrxxx</div>
         <div class="singletermTERMS">scrxxx</div>
         <div class="singletermTERMS">StyleSheetList</div>
         <div class="singletermTERMS">sheila.morrissey@ithaka.org</div>
         <div class="singletermTERMS">sushil.bhattarai@ithaka.org</div>
         <div class="singletermTERMS">sachin.kurdikar@ithaka.org</div>
         <div class="singletermTERMS">Sheila</div>
         <div class="singletermTERMS">Sushil</div>
         <div class="singletermTERMS">Sachin</div>
         <div class="singletermTERMS">Senior Research Developer</div>
         <div class="singletermTERMS">Stoeffler</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">ToolInfo</div>
         <div class="singletermTERMS">Transform Files</div>
         <div class="singletermTERMS">Thanneeru</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
         <div class="singletermTERMS">unparsed-text()</div>
         <div class="singletermTERMS">umadevi.thanneeru@ithaka.org</div>
         <div class="singletermTERMS">Umadevi</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">XXX_NLM_Journal_Publishing_DTD_2.1</div>
         <div class="singletermTERMS">xsl-document</div>
         <div class="singletermTERMS">xxx</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="BeyondWellFormedandValidANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3">
      <div class="title e1">Beyond Well-Formed and Valid</div>
      <div class="subtitle e2">QA for XML Configuration Files</div>
      <div class="info e3">
         <div class="confgroup e4">
            <div class="conftitle e5">International Symposium on Quality Assurance and Quality Control in XML</div>
            <div class="confdates e6">August 6, 2012</div>
         </div>
         <div class="abstract e7">
            <div class="para e8">One of the consequences of the rapid development and dissemination of the ecosystem
               of XML technologies was the widespread adoption of XML as a meta-format for the specification
               of application configuration information.  The validation of these rich configuration
               files with standard XML validation tools, however, is often not sufficient for error-free
               deployment of applications.  This paper considers how to categorize some of the constraints
               that cannot be enforced by such tools, and discusses some XML-based approaches to
               enforcing such constraints before, or as part of, deployment.
            </div>
         </div>
         <div class="author e9">
            <div class="personname e10">
               <div class="firstname e11">Sheila</div>
               <div class="othername e12">M.</div>
               <div class="surname e13">Morrissey</div>
            </div>
            <div class="personblurb e14">
               <div class="para e15">Sheila Morrissey is Senior Research Developer at ITHAKA.</div>
            </div>
            <div class="affiliation e16">
               <div class="jobtitle e17">Senior Research Developer</div>
               <div class="orgname e18">ITHAKA</div>
            </div>
            <div class="email e19">sheila.morrissey@ithaka.org</div>
         </div>
         <div class="author e20">
            <div class="personname e21">
               <div class="firstname e22">John</div>
               <div class="surname e23">Meyer</div>
            </div>
            <div class="personblurb e24">
               <div class="para e25">John Meyer is Director of Data Technology at ITHAKA.</div>
            </div>
            <div class="affiliation e26">
               <div class="jobtitle e27">Director of Data Technology</div>
               <div class="orgname e28">ITHAKA</div>
            </div>
            <div class="email e29">john.meyer@ithaka.org</div>
         </div>
         <div class="author e30">
            <div class="personname e31">
               <div class="firstname e32">Sushil</div>
               <div class="surname e33">Bhattarai</div>
            </div>
            <div class="personblurb e34">
               <div class="para e35">Sushil Bhattarai is a Data Software Developer at ITHAKA.</div>
            </div>
            <div class="affiliation e36">
               <div class="jobtitle e37">Data Software Developer</div>
               <div class="orgname e38">ITHAKA</div>
            </div>
            <div class="email e39">sushil.bhattarai@ithaka.org</div>
         </div>
         <div class="author e40">
            <div class="personname e41">
               <div class="firstname e42">Gautham</div>
               <div class="surname e43">Kalwala</div>
            </div>
            <div class="personblurb e44">
               <div class="para e45">Gautham Kalwala is a member of the ITHAKA data team.</div>
            </div>
            <div class="email e46">gautham.kalwala@ithaka.org</div>
         </div>
         <div class="author e47">
            <div class="personname e48">
               <div class="firstname e49">Sachin</div>
               <div class="surname e50">Kurdikar</div>
            </div>
            <div class="personblurb e51">
               <div class="para e52">Sachin Kurdikar  is a Data Software Developer at ITHAKA.</div>
            </div>
            <div class="affiliation e53">
               <div class="jobtitle e54">Data Software Developer</div>
               <div class="orgname e55">ITHAKA</div>
            </div>
            <div class="email e56">sachin.kurdikar@ithaka.org</div>
         </div>
         <div class="author e57">
            <div class="personname e58">
               <div class="firstname e59">Jie</div>
               <div class="surname e60">Ling</div>
            </div>
            <div class="personblurb e61">
               <div class="para e62">Jie Ling is a Data Software Developer at ITHAKA.</div>
            </div>
            <div class="affiliation e63">
               <div class="jobtitle e64">Data Software Developer</div>
               <div class="orgname e65">ITHAKA</div>
            </div>
            <div class="email e66">jie.ling@ithaka.org</div>
         </div>
         <div class="author e67">
            <div class="personname e68">
               <div class="firstname e69">Matt</div>
               <div class="surname e70">Stoeffler </div>
            </div>
            <div class="personblurb e71">
               <div class="para e72">Matt Stoeffler is a Data Software Developer at ITHAKA.</div>
            </div>
            <div class="affiliation e73">
               <div class="jobtitle e74">Data Software Developer</div>
               <div class="orgname e75">ITHAKA</div>
            </div>
            <div class="email e76">matt.stoeffler@ithaka.org</div>
         </div>
         <div class="author e77">
            <div class="personname e78">
               <div class="firstname e79">Umadevi</div>
               <div class="surname e80">Thanneeru</div>
            </div>
            <div class="personblurb e81">
               <div class="para e82">Umadevi Thanneeru is a Data Software Developer at ITHAKA.</div>
            </div>
            <div class="affiliation e83">
               <div class="jobtitle e84">Data Software Developer</div>
               <div class="orgname e85">ITHAKA</div>
            </div>
            <div class="email e86">umadevi.thanneeru@ithaka.org</div>
         </div>
         <div class="legalnotice e87">
            <div class="para e88">Copyright © 2012 ITHAKA</div>
         </div>
      </div><a name="XMLforConfiguration:BackgroundANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e89">
         <div class="title e90">XML for Configuration:  Background</div>
         <div class="para e91">One of the consequences of the rapid development and dissemination of an ecosystem
            of XML technologies, including free and open source XML parsers, XSLT engines, and
            binding tools for various programming languages, was the widespread adoption of XML
            as a meta-format for the specification of application configuration information. 
            The XML ecosystem obviated the need to write custom parsers for one-off configuration
            formats.  This was true in part because, at least at the syntactic level, there was
            a tool-chain at hand to warrant the well-formedness and validity of those files. 
            XML also facilitated the use of richly structured configuration information.  Coincident
            with an increasing community of practice in architectural idioms such as abstract
            factories (see [
            <div class="xref e92" linkend="bib02"></div>]), this capacity for rich configuration made XML the norm for configuration of such
            applications as Apache’s Tomcat server for Java servlets and Java Server Pages (JSP),
            Hibernate’s object/relational mapping framework, the Ant build tool, and the Spring
            application framework and inversion-of-control (IOC) container. 
         </div>
         <div class="para e93">These rich configuration files forward many diverse ends, ranging from (at least the
            possibility of) more cleanly engineered code, to hot-swappable web applications. 
            However, as even a cursory view of these projects’ listservs indicates, configuration
            files often are the cause of hiccups in application deployment.  Some of these problems
            can be alleviated by the application of standard XML validating parsers in the deployment
            process.  Other problems however do not yield themselves to the standard XML tool
            chain.
         </div>
         <div class="para e94">Widely used applications such as the ones mentioned here often have interactive development
            environment (IDE) support for the creation of configuration files.  The IDE might
            make use of template files, for example, and provide hints when creating and populating
            configuration instances.  Such IDE support however is not typically robust in validating
            the content entered, whether or not the hints are taken.
         </div>
         <div class="para e95">The information models of which these XML configuration files are instantiations (see
            [
            <div class="xref e96" linkend="bib01"></div>]) entail constraints more complex than those enforced by XML
            well-formedness and validity. These constraints are not expressed, and are perhaps
            inexpressible, in a configuration file’s document type definition, whether that
            definition is a DTD, or an XSD schema, or a RelaxNG specification. How might we
            categorize at least some of these constraints? What techniques can we employ to enforce
            them before, or as part of, deployment?
         </div>
      </div><a name="XMLforConfigurationatPortico:IssuesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e97">
         <div class="title e98">XML for Configuration at Portico:  Issues</div><a name="WhatisPortico?ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e99">
            <div class="title e100">What is Portico?</div>
            <div class="para e101">
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e102" xlink:actuate="onRequest" xlink:href="http://www.portico.org/digital-preservation/" xlink:show="new" xlink:type="simple">Portico</div> is a digital preservation service for electronic journals, books, and other content.
               Portico is a service of 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e103" xlink:actuate="onRequest" xlink:href="http://ithaka.org/" xlink:show="new" xlink:type="simple">ITHAKA</div>, a not-for-profit organization dedicated to helping the academic community use digital
               technologies to preserve the scholarly record and to advance research and teaching
               in sustainable ways.  As of April 2012, Portico is preserving more than 17.7 million
               journal articles, nearly 17,000 books, and nearly 1.5 million items from digitized
               historical collections (for example digitized newspapers of the 18th century).
            </div>
            <div class="para e104">Content comes to Portico in approximately 300 different XML and SGML vocabularies.
               These XML and SGML documents are accompanied by page image (PDF) and other
               supporting files such as still and moving images, spreadsheets, audio files, and
               others. Typically content providers do not have any sort of manifest or other
               explicit description of how files are related (which ones make up an article, an
               issue of a journal, a chapter of a book). This content is batched and fed into a
               Java workflow that is driven by XML configuration files, which Portico calls
               
               <div class="quote e105">profiles</div> (about 190, one for each publisher content stream), and
               
               <div class="quote e106">registries</div> (shared across all content streams). 
            </div>
            <div class="para e107">The Portico workflow maps the publisher-provided miscellany of files into bundles
               that comprise an article or book or other content item. 
            </div>
            <div class="para e108">
               
               <div class="figure e109" xml:id="fig01" xreflabel="Figure 1">
                  <div class="mediaobject e110">
                     <div class="imageobject e111">
                        <div class="metaBox e112"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e186').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e186" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e112'
                                 </span><span class="metaAttribute">fileref='../../../vol9/graphics/Morrissey01/Morrissey01-001.png'
                                 </span><span class="metaAttribute">format='png'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="caption e113">
                     <div class="para e114">Figure 1:  Mapping Files to Content Units</div>
                  </div>
               </div>
               
               
            </div>
            <div class="para e115">Publisher-provided XML and SGML files are normalized to the Portico profile of the
               National Library of Medicine’s Journal Archiving DTD. The workflow identifies the
               format of each of the component files, and, where a format specification and
               validation tool is available, validates each file against its format specification.
               It generates metadata considered important for preservation (descriptive, or
               bibliographic, metadata; technical metadata about files and their formats;
               provenance and event metadata, detailing the tool chain, including hardware and
               software information, used in processing the content). These metadata are formatted
               as XML, and are stored with the preserved digital object.
            </div>
            <div class="para e116">
               
               <div class="figure e117" xml:id="fig02" xreflabel="Figure 2">
                  <div class="mediaobject e118">
                     <div class="imageobject e119">
                        <div class="metaBox e120"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e198').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e198" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e120'
                                 </span><span class="metaAttribute">fileref='../../../vol9/graphics/Morrissey01/Morrissey01-002.png'
                                 </span><span class="metaAttribute">format='png'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="caption e121">
                     <div class="para e122">Figure 2: Portico High-Level Workflow</div>
                  </div>
               </div>
               
               
            </div>
            <div class="para e123">Some of the sub-steps in this workflow are explicit QA checks of the XML content –
               both that provided by the publishers, and that produced by Portico in the workflow
               itself. This QA includes XML validation, the assertion (via Schematron) of other
               constraints on content values, and visual inspection of sample content. We have
               written about some of the QA techniques and challenges associated with these content
               files for Balisage and other venues (see, for example, [
               <div class="xref e124" linkend="bib03"></div>] and
               [
               <div class="xref e125" linkend="bib04"></div>]). In this paper we would like to focus on the QA
               challenges associated with those XML registry files that drive our workflow.
            </div>
         </div><a name="PorticoXMLConfigurationFiles:ADescriptionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e126">
            <div class="title e127">Portico XML Configuration Files:  A Description</div>
            <div class="para e128">The Portico workflow is a pluggable framework.  At each step, or activity, in the
               workflow, the particular tool to be employed is dynamically selected, based on the
               format or mime type of the file or files being processed at that step.  Thus, for
               example, the “de-layer” activity would invoke standard tar, gzip, or zip tools to
               expand and separate out the content of .tar, .gzip, or .zip files.  The same activity
               would invoke an XSL transform to split a publisher XML file containing bibliographic
               metadata for all the articles in an issue of a journal into separate XML files for
               each article (and would invoke a different XSL transform for each different publisher
               XML format).
            </div>
            <div class="para e129">
               
               <div class="figure e130" xml:id="fig03" xreflabel="Figure 3">
                  <div class="mediaobject e131">
                     <div class="imageobject e132">
                        <div class="metaBox e133"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e219').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e219" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e133'
                                 </span><span class="metaAttribute">fileref='../../../vol9/graphics/Morrissey01/Morrissey01-003.png'
                                 </span><span class="metaAttribute">format='png'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="caption e134">
                     <div class="para e135">Figure 3: Format-driven Tool and Tool Component Plugins for WorkFlow
                        Step
                     </div>
                  </div>
               </div>
               
               
            </div>
            <div class="para e136">So, at the root of all the XML configuration files that drive and parameterize the
               Portico workflow is the format registry file: FormatRegistry.xml.  There is a 
               <div class="code e137">&lt;Format&gt;</div> element for each distinct format for which the archive contains at least one instance.
               This, for example, is part of the 
               <div class="code e138">&lt;Format&gt;</div> element for one publisher’s profile of one version of the NLM Journal Publishing
               DTD:
            </div>
            <div class="para e139">
               
               <div class="programlisting e140" xml:space="preserve">
                  &lt;Format FormatId=
                  <div class="emphasis e141" role="bold">"XXX_NLM_Journal_Publishing_DTD_2.1"</div> 
                  CreationTimestamp="2006-06-13T13:00:00-05:00"&gt;
                  	&lt;PorticoDefinedName&gt;XXX Journal Publishing DTD v2.1 20050630&lt;/PorticoDefinedName&gt;
                  	…
                  &lt;Format&gt;
                  
               </div>
            </div>
            <div class="para e142">For each workflow step or activity, the tool registry file, ToolRegistry.xml, maps
               each format to the Java class to be plugged in, configured, and executed at that step.
               So, for example, in the tool registry, we have entries such as:
            </div>
            <div class="para e143">
               
               <div class="programlisting e144" xml:space="preserve">
                  &lt;TransformationSet&gt;
                  	  &lt;ToolStrategy SupportingFormatId=
                  <div class="emphasis e145" role="bold">"XXX_NLM_Journal_Publishing_DTD_2.1"</div>&gt;
                  		  &lt;Script Rid=
                  <div class="emphasis e146" role="bold">"scrxxx"/&gt;</div>				
                  	  &lt;/ToolStrategy&gt;
                  	  ...
                  &lt;/TransformationSet&gt;
                  
               </div>
               
            </div>
            <div class="para e147">This entry indicates that in the workflow 
               <div class="quote e148">Transform Files</div> step, if
               the Portico identifier (defined in the format registry) for the format of the file
               to be transformed is 
               <div class="code e149">XXX_NLM_Journal_Publishing_DTD_2.1</div>, then we should
               look for plug-in information about what tool to employ, and how to parameterize it,
               in a subsequent 
               <div class="code e150">ScriptInfo</div> element with a 
               <div class="code e151">ScriptID</div>
               attribute value of 
               <div class="code e152">scrxxx</div>. In that element, we will see specified such
               things as a list of relative file paths to XSL transforms that comprise the
               transformation pipeline for instances of this format, along with (relative)
               directory names where those files are located; the Portico identifier for the format
               of the output of this transformation (also defined in the format registry); a
               fully-qualified Java class name for a filter through which the input file is to be
               passed; and an 
               <div class="code e153">Rid</div> attribute referring to yet another subsequent
               element containing full information about the Java tool class that will invoke the
               filters and the XSL pipeline.
            </div>
            <div class="para e154">
               
               <div class="programlisting e155" xml:space="preserve">
                  &lt;ScriptInfoSet&gt;
                  &lt;ScriptInfo ScriptId="
                  <div class="emphasis e156" role="bold">scrxxx</div>" 
                  ScriptType="transformation" 
                  ScriptDir="
                  <div class="emphasis e157" role="bold">xxx</div>"&gt;
                  &lt;Tool Rid="
                  <div class="emphasis e158" role="bold">BaseTransform_1.0</div>"&gt;
                  &lt;Parameters&gt;
                  &lt;Parameter&gt;
                  &lt;Name&gt;
                  <div class="emphasis e159" role="bold">StyleSheetList</div>&lt;/Name&gt;
                  &lt;ValueOrderedList&gt;
                  &lt;ValueOrderedListItem&gt;
                  &lt;Number&gt;10&lt;/Number&gt;
                  &lt;Value&gt;xxx2ptc_1_10.xsl&lt;/Value&gt;
                  &lt;/ValueOrderedListItem&gt;
                  &lt;ValueOrderedListItem&gt;
                  &lt;Number&gt;20&lt;/Number&gt;
                  &lt;Value&gt;fix-data_1.xsl&lt;/Value&gt;
                  &lt;/ValueOrderedListItem&gt;
                  ...
                  &lt;/ValueOrderedList&gt;
                  &lt;/Parameter&gt;
                  ....
                  &lt;Parameter&gt;
                  &lt;Name&gt;
                  <div class="emphasis e160" role="bold">outputFormatId</div>&lt;/Name&gt;
                  &lt;Value&gt;PTC_Article_DTD_2.1&lt;/Value&gt;
                  &lt;/Parameter&gt;
                  &lt;Parameter&gt;
                  &lt;Name&gt;
                  <div class="emphasis e161" role="bold">InputFilterClass</div>&lt;/Name&gt;
                  &lt;Value&gt;
                  org.portico.threadedtool.tool.transform.filter.XmlPrologTransformFilter
                  &lt;/Value&gt;
                  &lt;/Parameter&gt;
                  ...
                  &lt;/Parameters&gt;
                  &lt;/Tool&gt;
                  &lt;/ScriptInfo&gt;
                  ...
                  &lt;/ScriptInfoSet&gt;                   
                  
               </div>
               
            </div>
            <div class="para e162">Later in the tool registry, information about the 
               <div class="code e163">BaseTransform_1.0</div> tool is specified, including its Java class name, and information about the parameters
               to be passed when instantiating that class (as we did in the 
               <div class="code e164">ScriptInfo</div> element above), including whether or not the parameter is required, and what its
               type should be:
            </div>
            <div class="para e165">
               
               <div class="programlisting e166" xml:space="preserve">
                  &lt;ToolInfoSet&gt;
                  &lt;ToolInfo Id="
                  <div class="emphasis e167" role="bold">BaseTransform_1.0</div>"&gt;
                  &lt;Name&gt;BaseTransformTool:1.0:2007-05-01&lt;/Name&gt;
                  &lt;Description&gt;
                  Tool for transformation of XML files via XSL stylesheets.
                  &lt;/Description&gt;
                  &lt;Status&gt;ACTIVE&lt;/Status&gt;
                  &lt;ClassName&gt;
                  org.portico.threadedtool.tool.transform.BaseTransformTool
                  &lt;/ClassName&gt;
                  &lt;ToolParameters&gt;
                  &lt;ToolParameter Name="
                  <div class="emphasis e168" role="bold">StyleSheetList</div>" 
                  Required="true" 
                  ParameterType="ValueOrderedList"&gt;
                  &lt;Description&gt;
                  This is the list of XSL stylesheets that are to be processed and the 
                  order in which they should be processed.
                  &lt;/Description&gt;
                  &lt;/ToolParameter&gt;
                  &lt;ToolParameter Name="
                  <div class="emphasis e169" role="bold">outputFormatId</div>" 
                  Required="true" 
                  ParameterType="Value"&gt;
                  &lt;Description&gt;
                  This identifies the output format ID of this set of transforms.
                  &lt;/Description&gt;
                  &lt;/ToolParameter&gt;
                  &lt;ToolParameter Name="
                  <div class="emphasis e170" role="bold">InputFilterClass</div>" 
                  Required="false" 
                  ParameterType="Value"&gt;
                  &lt;Description&gt;
                  This identifies the filter to be applied to the file before transforms.  
                  It should contain the fully qualified class name of the filter. 
                  If this Parameter is not supplied, the default BaseFilter 
                  class is used. Legal values come from package
                  org.portico.threadedtool.tool.transform.filter.
                  &lt;/Description&gt;
                  &lt;/ToolParameter&gt;
                  	...
                  &lt;/ToolParameters&gt;
                  &lt;/ToolInfo&gt;
                  ...
                  &lt;ToolInfoSet&gt;
                  
               </div>
               
            </div>
         </div><a name="PorticoXMLConfigurationFiles:CategoriesofConfigurationIssuesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e171">
            <div class="title e172">Portico XML Configuration Files:  Categories of Configuration Issues</div>
            <div class="para e173">There are a lot of 
               <div class="quote e174">moving parts</div> in even this condensed description of the semantics of these two configuration files.
               As more and more publisher streams were added to Portico’s workflow, more and more
               configuration information was added to these files, by more and more developers working
               at the same time to add new content streams and their accompanying Java tool and filter
               classes, and associated XSL transformations.  And these additions had to be made in
               several different workflow environments:  a developer environment; an integration
               environment where profiles and registries for new publisher streams are first worked
               out; a QA environment for regression testing of tool, transform, workflow, and configuration
               changes; and, finally, to the production environment.
            </div>
            <div class="para e175">Perhaps to no one’s surprise, Portico began to experience deployment glitches.  None
               of these glitches occurred because the XML registry files were either not well formed
               or invalid, as developers consistently validated the files against their respective
               schemas before committing to Portico’s source control system, and the deployment scripts
               also invoked a parser to validate the files.  The workflow was paused; new configuration
               files and other resources were deployed; the workflow was cranked back up.  Then it
               would hum along through several workflow steps, before encountering what effectively
               was a configuration error that would bring one or more batches to a halt. 
            </div>
            <div class="para e176">So the first question we asked ourselves was, what is it about the semantics of the
               content of the elements in these files – and the relationship among elements in the
               same and in different XML configuration files, 
               <div class="emphasis e177" role="ital">and</div> the relationship between the content in those elements and other components of the
               workflow software and other resource files – that enabled configuration errors to
               pass undetected through the sieve of standard XML validation tools?
            </div><a name="ConsistencyIssuesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e178">
               <div class="title e179">Consistency Issues</div>
               <div class="para e180">At run time, every tool specified in the tool registry verifies the presence
                  or absence of various required and optional parameters, and checks to see, when
                  present, that they are of the required type before proceeding to execute the
                  tool. Just as the workflow that invokes the tools is a pluggable framework, so
                  too are the individual tools themselves pluggable (See 
                  <div class="xref e181" linkend="fig03"></div>). This enables Portico to
                  use a single generic XML transformation Java tool on input that requires
                  slightly varying processing. 
               </div>
               <div class="para e182">Since the tool is in some sense generic, some parameters for the tool are
                  optional. However, it can be the case that if one of these optional parameters
                  is present, and if the parameter has a particular value, then other optional
                  parameters must be provided as well. For example, the
                  
                  <div class="code e183">InputFilterClass</div> parameter is optional, but 
                  <div class="emphasis e184" role="ital">if</div> it is present, and 
                  <div class="emphasis e185" role="ital">if</div> its value is
                  
                  <div class="code e186">org.portico.threadedtool.tool.transform.filter.ExternalEntityReplacerFilter</div>,
                  then the tool registry must also provide the additional otherwise optional
                  parameters 
                  <div class="code e187">AttributeValueSeparator</div>, 
                  <div class="code e188">AttributeName</div>,
                  
                  <div class="code e189">ElementQNames</div>, 
                  <div class="code e190">MatchString</div>, and
                  
                  <div class="code e191">ReplacementString</div>. 
                  <div class="popupBox e192">
                     <div class="popupLabel" onmouseover="$('#d1e374').show('1000');" onmouseout="$('#d1e374').hide('1000');">[ footnote ]</div>
                     <div id="d1e374" style="display: none;">
                        <div class="footnote" xml:id="fn01" xreflabel="1">
                           <div class="para e193">Portico filters incoming XML and SGML files for a variety of reasons.
                              The format validation step, for example, makes use of the JHOVE tool,
                              which is not able to make use of catalogs. The DOCTYPE statement will
                              therefore sometimes require filtering to cause the parser to resolve to
                              a local copy of the DTD or schema. Sometimes a filter is used to correct
                              syntactic errors in the DOCTYPE statement, such as white space or
                              comments before the XML declaration, encoding declarations inconsistent
                              with actual encoding used by the publisher (see 
                              <div class="xref e194" linkend="bib03"></div>
                              for other examples)
                           </div>
                        </div>
                     </div>
                  </div>
                  
               </div>
               <div class="para e195">If these constraints are not met, the tool registry file will pass schema validation,
                  but the workflow step attempting to transform an instance of this file format will
                  fail at runtime, because the tool it invokes requires more configuration information
                  to perform the transformation.  So we have a need to check for consistency between
                  the (variable, and complexly dependent) input expectations of the Java tool, and the
                  configuration values provided in the XML registry. 
               </div>
            </div><a name="IssuesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e196">
               <div class="title e197">
                  <div class="quote e198">Referential Integrity</div> Issues
               </div>
               <div class="para e199">As mentioned above, the Portico workflow is "format driven.” The choice of
                  tool to be plugged in at different steps in the workflow is determined by the
                  format of the object to be processed at the step (indeed, the sequence of
                  workflow steps itself is driven by the expected collection of format instances
                  in a content stream). And, as noted, we encounter many formats – the
                  FormatRegistry.xml file contains, at the time of writing, 545
                  
                  <div class="code e200">Format</div> elements.
               </div>
               <div class="para e201">Various constructs for defining an XML vocabulary (DTD, Schema, and RelaxNG) have
                  provisions for specifying a constrained list of values for, for example, attributes.
                  These provisions typically are employed for a smaller number of values than would
                  be required to cover the ever-growing list of formats Portico encounters.  Nor would
                  such a constrained list of identifiers include the other information about the format
                  that is associated with the identifier in the format registry. For our purposes, we
                  would categorize that list of format identifiers (along with associated format information)
                  as “data” rather than “structure”.  Further, if the list of constrained values were
                  to be maintained in the document type definition itself – at “compile time”, so to
                  speak, – we would be injecting what would be for us an unwanted level of complexity
                  in the versioning of our schema.  
               </div>
               <div class="para e202">Nevertheless, we have the requirement to ensure a sort of “referential integrity check”
                  among XML files – that is, between the unique Portico format identifiers in the format
                  registry, and the format identifiers employed in the tool registry and other Portico
                  configuration files – to ensure successful runtime interaction between the workflow
                  tools and the registries that drive them.
               </div>
            </div><a name="ExistenceIssuesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e203">
               <div class="title e204">Existence Issues</div>
               <div class="para e205">As seen above, the tool registry refers to many objects that are assumed to
                  exist at run time: Java tool and filter classes, XSL files, and other supporting
                  files. The existence or non-existence of such objects, even if their names are
                  specified in a document type definition, is extrinsic to the kind of structural
                  information a document type definition can provide, and which standard parsers
                  can validate. Yet a successful deployment of these XML configuration files
                  depends on verifying the actual existence of these objects in the total
                  deployment package. This was in fact the most frequent cause of
                  configuration-file-dependent deployment errors. An updated tool registry would
                  be deployed, but the new XSL files, or a new JAR file containing new Java tool
                  or filter classes specified in the updated registry, or the DTD or XSD files
                  associated with an XML  or SGML format, were not deployed along with the new
                  tool registry. When the workflow was restarted, a (Java) workflow step would
                  look to the tool registry to determine which Java tool or filter class it should
                  employ, or, if the workflow step was an XSL transformation, what list of XSL
                  makes up the transformation pipelene, or against which DTD or schema a format
                  instance was to be validated. If the classes or files specified in the tool
                  registry had not also been deployed, the workflow step would raise a fatal error
                  and halt processing.
               </div>
            </div>
         </div>
      </div><a name="XMLforConfigurationatPortico:SolutionsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e206">
         <div class="title e207">XML for Configuration at Portico:  Solutions</div>
         <div class="para e208">The second question we asked ourselves was whether we could devise some automated
            solutions to these consistency, referential integrity, and existence issues in order
            to avoid, or at least minimize, costly cycles of stop/deploy/restart/fail/stop/correct/redeploy/restart
            in our release deployments.  We found that we could, and that we could do so fairly
            simply with XSL transforms, assisted, in some cases, with Java extension functions.
            We run these transform as part of deployment script before the stop/restart of the
            workflow.
         </div><a name="ConsistencyCheckerANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e209">
            <div class="title e210">Consistency Checker</div>
            <div class="para e211">The tool registry’s 
               <div class="code e212">ToolInfo</div> element documents all the possible calling parameters that can be passed to the Java
               tool class it specifies, indicating whether they are required or optional, and specifying
               the type of each parameter.  Assuming correct documentation (for ensuring which, to
               probably no one’s surprise, we have not yet invented a completely automated tool),
               this meant that we had sufficient information in the tool registry itself to perform
               consistency checks.  We use an XSL transform (Schematron is another obvious candidate
               for this) to compare the various 
               <div class="code e213">Paramter</div> elements in the 
               <div class="code e214">ScriptInfo</div> element that configures each invocation of a particular tool for a particular format,
               with the information in the 
               <div class="code e215">ToolInfo</div> elements.  If an error message is created, the registry is not deployed until it
               is repaired. 
            </div>
         </div><a name="%E2%80%9CReferentialIntegrity%E2%80%9DCheckerANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e216">
            <div class="title e217">“Referential Integrity” Checker</div>
            <div class="para e218">Again, we used an XSL transform.  The transform extracts format and mime type information
               from the format registry being deployed with the tool registry, and uses that extracted
               information to verify that any referenced format id or mime type in the tool registry
               has been declared in the format registry.
            </div>
         </div><a name="ExistenceCheckerANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e219">
            <div class="title e220">Existence Checker</div>
            <div class="para e221">Our existence checker also uses XSL, aided by extension functions, to look outside
               the XML box to determine that expected directories and XSL and other files exist in
               the target deployment directories, and that classes referenced in the tool registry
               exist in the .jar files also on the deployment path. In the case of XSL and other
               XML files, it would of course be possible to use 
               <div class="code e222">xsl-document</div> to check
               for the existence of necessary resources. For non-XML file resources whose existence
               we wished to confirm, we could have used the 
               <div class="code e223">unparsed-text()</div> function,
               interpreting an empty string result as a non-existent file. As we were using Java
               extension functions to confirm the existence (i.e. deployment) of Java classes on
               what would be the workflow's runtime Java classpath, and as the workflow uses the
               classpath to resolve the location of XSL and other file resources, we used Java
               extension functions to confirm the existence of these resources at deployment. 
            </div>
            <div class="para e224">
               
               <div class="programlisting e225" xml:space="preserve">
                  &lt;xsl:stylesheet version="2.0"
                  xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
                  xmlns:jexist="java/org.portico.conprep.util.deployment.validatetoolregistry.ExistenceChecker"
                  &gt;
                  
                  &lt;xsl:variable name="jExistInstance" select="jexist:new()"/&gt;
                  
                  &lt;!-- ==================================================== --&gt;
                  &lt;!--          name="check-class-exists"                   --&gt;
                  &lt;!-- ==================================================== --&gt;  
                  &lt;xsl:template name="check-class-exists"&gt;
                  &lt;xsl:param name="className"/&gt;
                  &lt;xsl:param name="Path"/&gt;
                  &lt;xsl:variable name="result" 
                  select="jexist:classExistsOnClasspath($jExistInstance, $className)"/&gt;  
                  &lt;xsl:if test="not($result)"&gt;
                  &lt;xsl:message  terminate="no" &gt;
                  Class  &lt;xsl:value-of select="$className"/&gt; does not exist.  
                  &lt;xsl:value-of select="$Path"/&gt;
                  &lt;/xsl:message&gt;
                  &lt;/xsl:if&gt;
                  &lt;/xsl:template&gt;
                  
                  &lt;!-- ==================================================== --&gt;
                  &lt;!--           name="check-file-exists"                   --&gt;
                  &lt;!-- ==================================================== --&gt;  
                  &lt;xsl:template name="check-file-exists"&gt;
                  &lt;xsl:param name="scriptType"/&gt;
                  &lt;xsl:param name="scriptDir"/&gt;
                  &lt;xsl:param name="fileName"/&gt;
                  &lt;xsl:param name="Path"/&gt;
                  &lt;xsl:variable name="result" 
                  select="jexist:fileExistsOnClasspath($jExistInstance, 
                  $scriptType, $scriptDir, $fileName)"/&gt;  
                  &lt;xsl:if test="not($result)"&gt;
                  &lt;xsl:message  terminate="no" &gt;
                  File  &lt;xsl:value-of select="$fileName"/&gt; does not exist.  
                  ScriptType = &lt;xsl:value-of select="$scriptType"/&gt;, 
                  ScriptDir = &lt;xsl:value-of select="$scriptDir"/&gt;  
                  Path to script = &lt;xsl:value-of select="$Path"/&gt;
                  &lt;/xsl:message&gt;
                  &lt;/xsl:if&gt;
                  &lt;/xsl:template&gt;
                  
               </div>
               
            </div>
         </div>
      </div><a name="ReflectionsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e226">
         <div class="title e227">Reflections</div>
         <div class="para e228">Not all configuration files -- not even all Portico workflow configuration files --
            are XML files, of course, and not all are likely to be amenable to an XML-based QA
            solution. XML would be overkill for the sort of name-value pairs of configuration
            information more compactly expressed in conventional properties files. As the category
            name of one class of deployment issues suggests, a different implementation choice
            (relational database in lieu of XML registry files for configuration) would provide
            a
            different mechanism for enforcing at least one sort of consistency in deployment.
            
         </div>
         <div class="para e229">There are some limitations to these tools, even as applied to XML configuration files.
            Our consistency checker, which validates the number, name, type, and compulsoriness
            of
            parameters passed to our Java tools, depends on a manual process of updating the
            ToolRegisty.xml file's 
            <div class="code e230">ToolInfo</div> section whenever we update our Java tools.
            We could conceivably employ Java annotations, and a meta-process to generate appropriate
            
            <div class="code e231">ToolInfo</div> elements, and test to see if those generated elements matched
            the actual elements in the ToolRegistry.xml file (though this approach perhaps only
            pushes back our "manual" dependency on developer discipline to ensuring consistent
            annotation in the Java code). 
         </div>
         <div class="para e232"> A warrant of existence of a resource at deployment time, while reassuring, is not
            necessarily a warrant of existence at run time, particularly for resources outside
            of
            one's institutional domain or control (though this has not been an issue in Portico's
            deployment process). We have found a simple syntactic surrogate (a non-empty return
            from
            a method call) that reliably signifies the existence or non-existence of an artifact
            "out there" in the world extrinsic to the XML document we are interrogating. That
            surrogate is satisfactory for our purposes, but it might not be sufficient for all
            purposes. And it is certainly no magical solution to the general ontological problem
            of
            assessing an XML document's assertion about external reality.
         </div>
         <div class="para e233">As mentioned above in the Background section, users of other applications with rich
            XML configuration files experience deployment problems. Many of these are caused by
            these same consistency, referential integrity, and existence issues experienced by
            Portico with its registry files. Spring, Hibernate, and Tomcat configuration files
            all
            contain elements whose contents are intended to be fully-qualified Java class names,
            for
            classes that are presumed to be on the application’s classpath at runtime, and hence
            available for instantiation via inversion of control. The XML configuration files
            for
            any of the applications mentioned above can contain elements whose content refers
            to
            files and directories, both local and non-local, assumed to exist at runtime (for
            example, the location for JSP files used by Apache, as well as “welcome” files and
            login
            pages, can be specified). Nothing in the schema for Ant files ensures that a developer
            using Ant to build and deploy a Java servlet populates the Ant configuration file
            so as
            to follow the Java servlet conventions for relative deployment location for servlet
            and
            other files. A Tomcat web.xml file specifying both type and values for JNDI can be
            well-formed and valid, and yet specify a value that cannot be instantiated as an
            instance of the specified type, or specify a type that in fact does not exist.
         </div>
         <div class="para e234">What we have found is that, for our XML configuration files, where standard XML
            validation tools will not resolve these deployment issues, we can use XML-based tools
            for at least these categories of non-structural, “extrinsic” validation requirements.
            Further, because they are XML based, they can be employed in both in simple deployment
            scripts and in continuous integration tools, reducing many common deployment problems.
            
         </div>
         <div class="para e235">XML-based tools, though not the only possible solution for solving XML configuration
            file-related deployment issues, were a natural choice for Portico. In part this was
            a
            pragmatic choice: such XSL and Java-based solutions were well-supported by the skill
            set
            in our programming team, and the categories of deployment problems we experienced
            where
            amenable to solution by the means described. Standard XML parsers and XSL transform
            engines made it easy to "get at" the content of XML elements and attributes to test
            assertions about that content beyond the document's well-formedness and validity (Do
            certains things exist "out there" on the file system? Have we provided all the
            parameters that an optional Java filter plugin to a Java plugin tool to a Java framework
            requires at runtime?) . And they made it easy to "get at" them in different contexts
            --both a manual context (a developer updating an XML registry in Oxygen, for example)
            and an automated one (a deployment script that is part of a configuration management
            system).
         </div>
         <div class="para e236">In part however this was also an aesthetic choice: there is a certain "turtles all
            the
            way down" appeal to applying XML-based QA tools to XML configuration files that drive
            a
            workflow for processing digital artifacts whose key components are XML files. The
            aesthetic shaded into the pragmatic, as it so often does in software engineering.
            The
            consistent, conventional reuse of large-scale structure and coding idioms across such
            a
            large application as the Portico workflow system helps in making that system
            comprehensible to the developers who support and extend it -- an approach, so to speak,
            toward the possibly asymptotic, reader-centric rather than process- or processor-centric
            goal of "Read once, understand everywhere" [
            <div class="xref e237" linkend="bib05"></div>] in complex
            systems.
         </div>
         <div class="para e238">What precisely comprises the "beauty" or aesthetic appeal of a piece of software (both
            data structures and algorithms, and their instantiation in concrete formalisms such
            as
            languages) is a topic of much discussion. To what extent does a software instance
            provide, as mathematicians might say of a proof, an "elegant" or "economical" solution
            to the problem it was created to solve? The extent to which the XML community has
            grappled with the ways in which, and the degree to which, an XML document type
            definition can or might comprise a model homomorphic to some domain, suggests that
            such
            homomorphism is a key criterion. It might be argued that the choice of XML as a
            configuration language for these large-scale frameworks was in some sense opportunistic,
            or "merely pragmatic." The ecosystem of XML parsers provided a "good enough" solution
            to
            the expression of richly hierarchical configuration information, even if it did not
            provide a solution to the problem of the more complex relationships among components
            of
            these hierarchies, and to extrinsic realities. The necessity of performing QA on these
            files can be viewed as an indicator of the limits of the economy of XML as a solution
            to
            the original problem. Whether other software constructs would provide a more "beautiful"
            solution is an open question. That a partial solution to the limits of XML as a
            configuration language can be found in XML-based tools has, at least for Portico,
            its
            own economical appeal.
         </div>
      </div><a name="ReferencesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e239">
         <div class="title e240">References</div>
         <div class="bibliomixed e241" xml:id="bib01" xreflabel="abrams">Abrams, Stephen. 
            <div class="quote e242">File Formats</div> in DCC Digital Curation Manual.  S.Ross, M.Day (eds), (October 2007), Retrieved April
            20, 2012, from 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e243" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.dcc.ac.uk/sites/default/files/documents/resource/curation-manual/chapters/file-formats/file-formats.pdf</div>.
         </div>
         <div class="bibliomixed e244" xml:id="bib02" xreflabel="gamma et al">Gamma, Erich, Richard Helm, Ralph Johnson, and John Vlissides. 
            <div class="emphasis e245" role="ital">Design Patterns:  Elements of Reusable Object-Oriented Software.</div>Reading, MA: Addison-Wesley, 1995.
         </div>
         <div class="bibliomixed e246" xml:id="bib03" xreflabel="morrissey et al"> Morrissey, Sheila, John Meyer,
            Sushil Bhattarai, Sachin Kurdikar, Jie Ling, Matthew Stoeffler and Umadevi Thanneeru.
            "Portico: A Case Study in the Use of XML for the Long-Term Preservation of
            Digital Artifacts." Presented at International Symposium on XML for the Long
            Haul: Issues in the Long-term Preservation of XML, Montréal, Canada, August 2, 2010.
            In
            
            <div class="emphasis e247" role="ital">Proceedings of the International Symposium on XML for the Long
               Haul: Issues in the Long-term Preservation of XML
            </div> Balisage Series on
            Markup Technologies, vol. 6 (2010). doi:
            <div class="biblioid doi e248">10.4242/BalisageVol6.Morrissey01</div>. Retrieved April 20, 2012, from
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e249" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.balisage.net/Proceedings/vol6/html/Morrissey01/BalisageVol6-Morrissey01.html</div>.
         </div>
         <div class="bibliomixed e250" xml:id="bib04" xreflabel="morrissey 2011">Morrissey, Sheila M. 
            <div class="quote e251">‘More What You’d Call ‘Guidelines’ Than Actual Rules' : Variation in the Use of Standards</div>.  
            <div class="emphasis e252" role="ital">Journal of Electronic Publishing </div> 14, no. 1: 14. doi:
            <div class="biblioid doi e253">10.3998/3336451.0014.104</div>. Retrieved April 20, 2012, from 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e254" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://quod.lib.umich.edu/cgi/t/text/text-idx?c=jep;view=text;rgn=main;idno=3336451.0014.104
               
            </div>.
         </div>
         <div class="bibliomixed e255" xml:id="bib05" xreflabel="reflection">Morrissey, Sheila  
            <div class="quote e256">JHOVE2 and Java Reflection</div>. (February 2009), Retrieved August 05, 2012, from 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e257" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">https://bitbucket.org/jhove2/main/wiki/Background_Papers</div>.
         </div>
      </div>
   </div>
</div>