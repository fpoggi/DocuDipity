<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#XMLintheBrowser:theNextDecadeANCHOR" name="XMLintheBrowser:theNextDecadeTOC">XML in the Browser: the Next Decade</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#&#34;FirstHand&#34;XMLHistoryANCHOR" name="&#34;FirstHand&#34;XMLHistoryTOC">"First Hand" XML History</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#TheStatusQuoANCHOR" name="TheStatusQuoTOC">The Status Quo</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BrowserApplicationDeliveryANCHOR" name="BrowserApplicationDeliveryTOC">Browser Application Delivery</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#IntrinsicVocabulariesANCHOR" name="IntrinsicVocabulariesTOC">Intrinsic Vocabularies</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TheCoreIntrinsicVocabulariesANCHOR" name="TheCoreIntrinsicVocabulariesTOC">The Core Intrinsic Vocabularies</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#FirefoxExtensionsforNonIntrinsicVocabulariesANCHOR" name="FirefoxExtensionsforNonIntrinsicVocabulariesTOC">Firefox Extensions for Non-Intrinsic Vocabularies</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#MobileApplicationsANCHOR" name="MobileApplicationsTOC">Mobile Applications</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TheUnifiedApplicationModelANCHOR" name="TheUnifiedApplicationModelTOC">The Unified Application Model</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#TheDAISYBookExampleANCHOR" name="TheDAISYBookExampleTOC">The DAISY Book Example</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#APeekIntotheFutureANCHOR" name="APeekIntotheFutureTOC">A Peek Into the Future</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BibliographyANCHOR" name="BibliographyTOC">Bibliography</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">application/oebps-package+xml</div>
         <div class="singletermTERMS">Application Provider</div>
         <div class="singletermTERMS">August 11 - 14, 2009</div>
         <div class="singletermTERMS">alex.milowski@appolux.com</div>
         <div class="singletermTERMS">Alexander</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">Book Demo</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2009</div>
         <div class="singletermTERMS">browser</div>
         <div class="singletermTERMS">browser extensions</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">Content Providers</div>
         <div class="singletermTERMS">Content Provider</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">DAISY Firefox Extension</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">https://developer.mozilla.org/en/Extensions</div>
         <div class="singletermTERMS">https://launchpad.net/daisyextension</div>
         <div class="singletermTERMS">HTML5</div>
         <div class="singletermTERMS">Head Geek</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">iframe</div>
         <div class="singletermTERMS">Intrinsic Vocabulary</div>
         <div class="singletermTERMS">International Digital Publishing Forum</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">MathML</div>
         <div class="singletermTERMS">Mozilla Firefox</div>
         <div class="singletermTERMS">Milowski</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">object</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">R.</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">script</div>
         <div class="singletermTERMS">SVG</div>
         <div class="singletermTERMS">Scalable Vector Graphics (SVG) 1.1 Specification</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">TOC Demo</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
         <div class="singletermTERMS">Usage share of web browsers</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">XML and Related Standards in Gecko</div>
         <div class="singletermTERMS">XML Linking Language (XLink) Version 1.0</div>
         <div class="singletermTERMS">xml applications</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="XMLintheBrowser:theNextDecadeANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.2">
      <div class="title e1">XML in the Browser: the Next Decade</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2009</div>
            <div class="confdates e5">August 11 - 14, 2009</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">At the 1999 XTech conference in San Jose, Netscape demonstrated
               their web browser natively rendering an XML document for the first time.
               It is now a decade later, browsers have changed, and there has possibly
               been forward progress. This paper briefly describes the demonstration
               from 1999 and then questions whether current browsers can or cannot 
               handle what was demonstrated in 1999. It also details how new XML 
               vocabularies can be integrated into the browser to provide a new way 
               forward for XML in the browser.
            </div>
         </div>
         <div class="author e8">
            <div class="personname e9">
               <div class="firstname e10">R.</div>
               <div class="othername e11">Alexander</div>
               <div class="surname e12">Milowski</div>
            </div>
            <div class="personblurb e13">
               <div class="para e14">Alex Milowski is a technologist, entrepreneur, developer, and
                  mathematician who has worked on markup technologies and their use
                  since 1990. Mr. Milowski is also an active and past participant on a
                  number of different standards efforts at the W3C: he is currently a
                  co-editor of XProc and has been involved in XSLT and XML Schema in
                  the past.
               </div>
               <div class="para e15">Mr. Milowski is also an advocate of open source software and 
                  its use for accessible content. He's an avid Firefox extension
                  developer--several of which are open source. He is currently working
                  on contract for Benetech to produce a Firefox extension that is a
                  DAISY e-book reader for the visually disabled.
               </div>
            </div>
            <div class="affiliation e16">
               <div class="jobtitle e17">Head Geek</div>
               <div class="orgname e18">Appolux, Inc</div>
            </div>
            <div class="email e19">alex.milowski@appolux.com</div>
         </div>
         <div class="legalnotice e20">
            <div class="para e21">Copyright © 2009 R. Alexander Milowski. Used by permission.</div>
         </div>
         <div class="keywordset e22" role="author">
            <div class="keyword e23">browser</div>
            <div class="keyword e24">xml applications</div>
            <div class="keyword e25">browser extensions</div>
         </div>
      </div><a name="&#34;FirstHand&#34;XMLHistoryANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e26">
         <div class="title e27">"First Hand" XML History</div>
         <div class="para e28">It was Thursday, March 11th and the last day of XTech 1999 in San
            Jose, California, just before lunch. We'd just heard a presentation from
            Microsoft about their vision for client and server XML and what we should
            expect in IE (Internet Explorer) 5. I and few of my colleagues were
            standing in the back, arms crossed, ready for the session to be over. The
            next presentation [
            <div class="xref e29" linkend="xtech-slides-1999"></div>] was from Netscape
            about their new Gecko rendering engine and what came next was going to
            make our day.
         </div>
         <div class="para e30">The first six slides went through more technical information than
            most wanted about how it was all going to work together and on the seventh
            slide was a demo. The demo consisted of a simple XML document listing six
            books, their titles, authors, and ISBN numbers that had been rendered via
            CSS natively for the first time in a widely used, open-source, commercial
            web browser [
            <div class="xref e31" linkend="xtech-books-1999"></div>]. For some of us, that
            was delivery on the promise of rendering XML on the web and surprise to
            many in the room. It deserved and received a standing ovation.
         </div>
         <div class="para e32">The demo continued in that not only was the document able to be
            rendered, but Javascript was used to add semantics to a set of buttons
            that toggled the sort order (via title, author, or ISBN) and the style (as
            a simple list or boxes). The style changes were simply enabling and
            disabling of different CSS stylesheets with a dramatic effect on the
            document. This again deserved applause.
         </div>
         <div class="para e33">They could have stopped there with some success but there was more
            to be seen. A few slides later was a final demo that demonstrated
            client-side harvesting of information [
            <div class="xref e34" linkend="xtech-tocdemo-1999"></div>]. An IRS document in XML was presented
            that contained a small box with a button labeled "Contents" on the right.
            When this button was pressed, TOC items were harvested from the document
            and a collapsible table of contents was displayed on the left side of the
            document. When a TOC item was clicked, the document navigated to the
            item's location in the document. Unbeknownst to the users at the
            conference, this was accomplished via Simple XLinks [
            <div class="xref e35" linkend="simple-link"></div>] embedded in the TOC.
         </div>
         <div class="para e36">Elated and hungry we all went to lunch with "success" on our minds.
            We had just stood witness to the start of an avalanche, or so we thought,
            of delivery of XML content to users. We were no longer bound to the
            perceived limitations of HTML.
         </div>
      </div><a name="TheStatusQuoANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e37">
         <div class="title e38">The Status Quo</div>
         <div class="para e39">Given the demos from 1999, the simple question is where are we today
            after a decade of "progress". Testing with IE 6, IE7, IE 8, Firefox,
            Safari, and Andriod's WebKit-based mobile browser, we get these
            results:
         </div>
         <div class="table e40">
            <div class="tr e41">
               <div class="th e42">Browser</div>
               <div class="th e43">Books Demo</div>
               <div class="th e44">TOC Demo</div>
            </div>
            <div class="tr e45">
               <div class="th e46">Firefox 3.x</div>
               <div class="td e47">Yes</div>
               <div class="td e48">Yes</div>
            </div>
            <div class="tr e49">
               <div class="th e50">Safari 4.x</div>
               <div class="td e51">Yes</div>
               <div class="td e52">Partial</div>
            </div>
            <div class="tr e53">
               <div class="th e54">Andriod (WebKit)</div>
               <div class="td e55">Yes</div>
               <div class="td e56">Partial</div>
            </div>
            <div class="tr e57">
               <div class="th e58">IE 6</div>
               <div class="td e59">No - Blank Page</div>
               <div class="td e60">No - Errors</div>
            </div>
            <div class="tr e61">
               <div class="th e62">IE 7</div>
               <div class="td e63">No - Blank Page</div>
               <div class="td e64">No - Errors</div>
            </div>
            <div class="tr e65">
               <div class="th e66">IE 8</div>
               <div class="td e67">No - Blank Page</div>
               <div class="td e68">No - Errors</div>
            </div>
         </div>
         <div class="para e69">The books demo uses CSS for rendering and Javascript via a
            "borrowed" HTML 
            <div class="code e70">script</div> element. The CSS is provided by three
            separate stylesheets. In the case of all the "recent" versions of IE, the
            browser fails to render the document and provides no indication of what
            failed. All the other browsers give a consistent rendering and user
            experience--including the loading and execution of the Javascript.
         </div>
         <div class="para e71">As for the TOC demo, since this demo uses XLink and only Firefox
            completely implements simple links, only Firefox can display this demo
            correctly. WebKit and all WebKit based browsers have some ability to
            detect simple links and provide the hover/click semantics for rendering
            display, but the show/replace semantics are not implemented. For this
            demo, all versions of IE have the same Javascript error related to
            unimplemented parts of the DOM level 2 specification [
            <div class="xref e72" linkend="dom2"></div>].
         </div>
         <div class="para e73">Based on browser usage statistics [
            <div class="xref e74" linkend="usage"></div>] and
            grouping all WebKit based browser together, we get a penetration of 32.74%
            of browsers that can render XML (excluding XLink handling) as of July 9th,
            2009. Given that IE fails for both demos and consists of around 65.5% on
            that same date, that leaves roughly 1.76% in an unknown state of whether
            they can render and manipulate XML documents. That's not a very good
            result for a decade of browser development--mainly due to IE's dominance
            and failures.
         </div>
         <div class="para e75">The question remains as to where the decade has gone. One large
            factor has been the stagnation of browser development due to the demise of
            Netscape and the resulting reluctance of Microsoft to really implement the
            W3C's recommendations. Only recently has the public--either general or
            developers--understood the need for conformance to these W3C
            recommendations and how failing to do so affects both the bottom line and
            the user's experience.
         </div>
         <div class="para e76">Nevertheless, the open source community has emerged strong with two
            viable contenders for core browser technology--Firefox [
            <div class="xref e77" linkend="mozilla"></div>] and WebKit [
            <div class="xref e78" linkend="webkit"></div>]. While
            readers are probably more familiar with Mozilla Firefox, the WebKit
            project is the core technology inside Safari, Chrome, the iPhone's web
            browser, and Andriod's web browser. Also, the WebKit project is both open
            source and supported by large companies such as Google and Apple.
         </div>
      </div><a name="BrowserApplicationDeliveryANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e79">
         <div class="title e80">Browser Application Delivery</div>
         <div class="figure e81">
            <div class="mediaobject e82">
               <div class="imageobject e83">
                  <div class="metaBox e84"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e146').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e146" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e84'
                           </span><span class="metaAttribute">fileref='../../../vol3/graphics/Milowski01/Milowski01-001.png'
                           </span><span class="metaAttribute">format='png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
            <div class="caption e85">
               <div class="para e86">The Current Model of Application Delivery</div>
            </div>
         </div>
         <div class="para e87">Over the last decade the browser's intrinsic ability to handle
            deliver of complex applications based on some combination of HTML,
            Javascript (ECMAScript), and CSS has dramatically increased such that it
            is an economic force. Delivery of goods and services via browser based
            applications have become not only common but critical to a company's
            continued success. In addition, new kinds of services have been enabled by
            the flexibility provided by the browser as a semi-consistent network-based
            thin client.
         </div>
         <div class="para e88">This success has been driven by the fact that HTML, not XML, in
            conjunction with CSS and ECMAScript has been spiraling towards a
            consistent target platform--dragging Microsoft kicking and screaming along
            the way. The 
            <div class="emphasis e89">Application Provider</div> is then responsible
            for bridging the gap between any 
            <div class="emphasis e90">Content Providers</div>
            and the target application that will properly render and present their
            content intertwined with an application. Many creative and resourceful
            developers have found ways around browser quirks and lack-of-conformance
            issues to provide consistent toolkits for use by the application
            provider.
         </div>
         <div class="para e91">The result is the 
            <div class="emphasis e92">Web User</div> receives the
            application and content intertwined as unrecognizable HTML from whatever
            source received from the 
            <div class="emphasis e93">Content Provider</div>. The
            unfortunate consequence is that they cannot necessarily re-purpose the
            information they receive. For many this is not an issue but, depending on
            user's needs, such lack of information repurpose means they may not be
            able to even read or use the application due to accessibility or other
            human constraints. Further, the user may be unable to use augmentation
            tools--such as browser extensions--to extract additional information or
            enhance their user experience from the same lack of the original
            content.
         </div>
         <div class="para e94">Even with these restrictions, this model has been wildly successful
            and has delivered, on both the business and user sides, a web with some
            aspect of ubiquity. All of this is without much XML involved in the
            client-side delivery of content to the browser. XML has largely been
            hidden on the server-side of the application.
         </div><a name="IntrinsicVocabulariesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e95">
            <div class="title e96">Intrinsic Vocabularies</div>
            <div class="para e97">Any markup that a web browser can natively process with some
               well-defined non-trivial semantic without the aid of additional
               constructs (e.g. stylesheets) we'll call an 
               <div class="emphasis e98">Intrinsic
                  Vocabulary
               </div>. By that definition, HTML is an intrinsic
               vocabulary. Notably, XML is not an intrinsic vocabulary as some
               semantics--at least via something like CSS--are needed to give the
               browser some instructions as what to do with a specific XML
               document.
            </div>
            <div class="para e99">An application provider can rely upon an intrinsic vocabulary to
               have some baseline semantic. They can still enhance the semantics by
               using additional augmentations such as a stylesheet or ECMAScript. In
               some cases, like SVG or MathML, while a stylesheet may enhance the
               rendering, the vocabulary itself is self-contained and the mere act of
               delivering the vocabulary invokes the intended result.
            </div>
            <div class="para e100">Given a sufficient set of intrinsic vocabularies for linking,
               diagramming, and specialized communications like Mathematics, an
               application developer can deliver content to the browser with some
               expected result and semantics for the user. In the case of domains like
               Mathematics, by having MathML as an intrinsic vocabulary, augmentation
               by tools or accessibility can be achieved by the simple fact that the
               markup is there instead of a representation (e.g like an image of the
               mathematics).
            </div>
            <div class="para e101">Unfortunately, the set of currently available intrinsic vocabularies 
               is across the different browsers is limited to a subset of HTML
               4. MathML [
               <div class="xref e102" linkend="mathml"></div>], SVG [
               <div class="xref e103" linkend="svg"></div>], and
               other possible intrinsic vocabularies are limited to specific browsers
               and their implementations are incomplete.
            </div>
         </div><a name="TheCoreIntrinsicVocabulariesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e104">
            <div class="title e105">The Core Intrinsic Vocabularies</div>
            <div class="para e106">There are many choices for core intrinsic vocabularies but it is
               clear that the likely near-term outcomes are the following:
            </div>
            <div class="itemizedlist e107">
               <div class="listitem e108">
                  <div class="para e109">
                     <div class="emphasis e110">HTML5</div> - provides needed enhancements to
                     HTML while providing a standard way of including other vocabularies
                     like MathML or SVG and, at the same time, provides an option for an
                     XML syntax.
                  </div>
               </div>
               <div class="listitem e111">
                  <div class="para e112">
                     <div class="emphasis e113">SVG</div> - provides interactive diagrams that
                     can be affected by stylesheets and/or ECMAScript much like
                     HTML.
                  </div>
               </div>
               <div class="listitem e114">
                  <div class="para e115">
                     <div class="emphasis e116">MathML</div> - provides essential content
                     models for mathematical, scientific, or education content.
                  </div>
               </div>
            </div>
            <div class="para e117">While HTML5 is currently under development, the promise of the
               ability to mix MathML and SVG into an HTML document is very powerful.
               Add to that the ability to deliver an HTML document in XML syntax
               without it being thought of as a separate vocabulary means we can
               utilize all the work that has gone into making XML
               internationalized.
            </div>
            <div class="para e118">Also, SVG has shown up recently in several browsers. The support
               for this essential vocabulary will certainly grow over time in the
               open-source community. Whether commercial browser vendors like Microsoft
               will support SVG is unknown.
            </div>
            <div class="para e119">Finally, MathML support is currently only native to Firefox. While
               MathML was the first XML vocabulary produced by the W3C in April 1998,
               only the Mozilla developers have chosen to integrate it into their
               browser--which is, unfortunately, an incomplete implementation. While
               Mathematics is a universal human language with a long history,
               intertwined into so many subjects, and involved in so many
               communications, MathML support has been largely ignored by browser
               vendors.
            </div>
            <div class="para e120">Nevertheless, what separates an intrinsic vocabulary from a
               non-intrinsic vocabulary is the ability to map from one to the other. A
               non-intrinsic vocabulary can be composed out of intrinsic vocabulary
               components via some kind of mapping. In contrast, an intrinsic
               vocabulary is difficult to implement correctly and efficiently. We need
               our browser vendors to build-in support for intrinsic vocabularies as
               the average developer cannot do so.
            </div>
         </div><a name="FirefoxExtensionsforNonIntrinsicVocabulariesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e121">
            <div class="title e122">Firefox Extensions for Non-Intrinsic Vocabularies</div>
            <div class="para e123">Unlike many other desktop browsers, Firefox provides the ability
               to write "extensions" [
               <div class="xref e124" linkend="extensions"></div>] in addition to
               "plugins". A plugin typically provides:
            </div>
            <div class="itemizedlist e125">
               <div class="listitem e126">
                  <div class="para e127">the ability to handle a specific media type,</div>
               </div>
               <div class="listitem e128">
                  <div class="para e129">the ability to render that media type via an HTML
                     
                     <div class="code e130">object</div> element.
                  </div>
               </div>
            </div>
            <div class="para e131">In contrast, Firefox has a very successful extensions model that
               provides augmentations to the browser. Extensions can provide what a plugin
               provides as well as add UI elements (menus, sidebars, etc.) and other
               internal components. These augmentations can be used in concert to
               provide a completely new experience for specific tasks or
               services.
            </div>
            <div class="para e132">An extension is installed by the user and always present, unlike 
               plugins which are invoked as necessary by the browser to handle a 
               specific media type.  Accordingly, the user can add extensions that they 
               rely upon for their "every day" experience when using the browser.
            </div>
            <div class="para e133">The user can find new extensions by visiting a registry provided
               by Mozilla. Within Firefox, a user can search and access an application
               registry (addons.mozilla.org) where developers have uploaded extensions.
               These extensions have been put through a basic approval process by which
               a user has a minimum level of confidence that the extension isn't
               malicious. Afterwards, the same services are used to allow the developer
               to upload and distribute updates to their extensions.
            </div>
            <div class="figure e134">
               <div class="mediaobject e135">
                  <div class="imageobject e136">
                     <div class="metaBox e137"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e243').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e243" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e137'
                              </span><span class="metaAttribute">fileref='../../../vol3/graphics/Milowski01/Milowski01-002.png'
                              </span><span class="metaAttribute">format='png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="caption e138">
                  <div class="para e139">Firefox Extensions</div>
               </div>
            </div>
            <div class="para e140">Somewhat unique to Firefox is the ability to register new internal
               components via an extension that can be used by other extensions or web
               pages. These components become part of the browser's ecosystem. As such,
               an extension developer can truly "extend" the basic core of the browser
               and add the ability to process new XML vocabularies.
            </div>
            <div class="para e141">Firefox's extension architecture enables a new application model
               for developing and deploying markup semantics. Previously, had we wanted
               to deliver XML content directly the browser, either it was one of the
               browser's intrinsic vocabularies or it was delegated to a plugin and 
               accessible only as a standalone or via a HTML 'object' element. Within
               this new model, we can develop an extension to the browser that
               understands the XML media type and delegates to our own components using
               the browser's ecosystem and intrinsic capabilities to render the
               document.
            </div>
            <div class="para e142">With this architecture we can extend Firefox such that it can
               handle any XML vocabulary we choose to send to it as long as it can be
               uniquely identified either by namespace or media type (preferably by
               media type). The basic process by which the extension does this is by
               registering a media type handler component with Firefox's internal
               registry. This component is responsible for handling, parsing, and
               otherwise processing the XML data stream coming across any transport
               Firefox supports (e.g. files, http/https, ftp, etc.).
            </div>
            <div class="para e143">Since we have a non-intrinsic vocabulary, the extension can
               provide whatever internal semantics to translate, transform, other
               otherwise orchestrate the use of intrinsic vocabularies like HTML,
               MathML, SVG, etc. to render the document and provide user interface
               components to the browser user. From the perspective of the browser
               user, ultimately, the XML document received is just another tab in their
               browser window. From the perspective of the developer, the user
               interface provided can be much more rich in UI widgets, semantics, and
               privileges than what a typical HTML document provides. The end result is
               a merged view of the application and the document's rendering within the
               Firefox user interface.
            </div>
            <div class="figure e144">
               <div class="mediaobject e145">
                  <div class="imageobject e146">
                     <div class="metaBox e147"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e259').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e259" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e147'
                              </span><span class="metaAttribute">fileref='../../../vol3/graphics/Milowski01/Milowski01-003.png'
                              </span><span class="metaAttribute">format='png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="caption e148">
                  <div class="para e149">Firefox Extensions</div>
               </div>
            </div>
         </div><a name="MobileApplicationsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e150">
            <div class="title e151">Mobile Applications</div>
            <div class="para e152">Mobile applications as architected by Google for their Andriod OS
               and Apple for their iPhone OS are both remarkably similar to each other
               as well as similar, in a limited way, to Firefox extensions. A mobile
               application is essentially a program that runs on the mobile OS platform
               with access to certain system services. On both the Andriod and iPhone
               platforms, one of these system services is the ability to construct a
               web browser environment based on WebKit.
            </div>
            <div class="para e153">Much like Firefox's addon registry, the developer uploads the
               application to the "marketplace" where users can download it and add it
               to their mobile phone's environment. Unlike a Firefox browser extension,
               it isn't really merged into the browser and does not augment the general
               web browser's capability. Instead, it provides a separate launching icon
               where the user must go to initiate the application.
            </div>
            <div class="figure e154">
               <div class="mediaobject e155">
                  <div class="imageobject e156">
                     <div class="metaBox e157"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e273').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e273" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e157'
                              </span><span class="metaAttribute">fileref='../../../vol3/graphics/Milowski01/Milowski01-004.png'
                              </span><span class="metaAttribute">format='png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="caption e158">
                  <div class="para e159">Mobile Application Markets</div>
               </div>
            </div>
            <div class="para e160">Even given the limitations in augmenting the general web browser
               on these platforms, the mobile application can do remarkably similar
               things. Within the environment a developer can instantiate a browser
               instance, load content, and manipulate the browser's environment. To
               some extent, the mobile developer can mimic some of the Firefox browser
               extension environment by building their own application.
            </div>
            <div class="para e161">What a developer cannot do is change the browser's handling of
               media types. If a document is requested that uses some specialized XML
               vocabulary, it will get rendered using the same rules as if the user
               were using the platforms browser application. As such, the application
               developer needs to understand and control what is being given to the
               browser much more so than within Firefox.
            </div>
            <div class="para e162">In addition, once the application has rendered an XML document
               into some kind of HTML/Intrinsic vocabulary application being displayed
               by the WebKit instance, there are platform-specific limitations as to
               what kinds of interactions between the application and document can
               occur. This can be broken down further into these useful application
               categories:
            </div>
            <div class="orderedlist e163">
               <div class="listitem e164">
                  <div class="para e165">Affect Global Environment: Can the application provide global
                     objects accessibly by any document loaded by the browser
                     instance?
                  </div>
               </div>
               <div class="listitem e166">
                  <div class="para e167">Execute Inside: Can the application execute ECMAScript within
                     the browser's document?
                  </div>
               </div>
               <div class="listitem e168">
                  <div class="para e169">Execute Outside: Can the document execute scripts or access
                     objects within the application's environment?
                  </div>
               </div>
            </div>
            <div class="table e170">
               <div class="tr e171">
                  <div class="th e172">OS/Browser</div>
                  <div class="th e173">Affect Global Environment</div>
                  <div class="th e174">Execute Inside</div>
                  <div class="th e175">Execute Outside</div>
               </div>
               <div class="tr e176">
                  <div class="th e177">Andriod/WebKit</div>
                  <div class="td e178">Yes</div>
                  <div class="td e179">No</div>
                  <div class="td e180">Yes</div>
               </div>
               <div class="tr e181">
                  <div class="th e182">iPhone OS/WebKit</div>
                  <div class="td e183">No</div>
                  <div class="td e184">Yes</div>
                  <div class="td e185">No</div>
               </div>
               <div class="tr e186">
                  <div class="th e187">Firefox</div>
                  <div class="td e188">Yes</div>
                  <div class="td e189">Yes</div>
                  <div class="td e190">Yes</div>
               </div>
            </div>
            <div class="para e191">The result of this analysis is that Andriod applications cannot
               affect their documents once loaded but their documents can initiate a
               request causing such a change. As such, an Andriod application can work
               around this limitation by a few clever bootstrapping tricks where there
               is always an internal document which proxies subsequently loaded
               documents in an 
               <div class="code e192">iframe</div>.
            </div>
            <div class="para e193">Conversely, an iPhone OS application can affect their documents by
               executing scripts within their documents but the document cannot
               interact with the application and the application cannot affect the
               global environment in which the document exists. This severely limits a
               browser based application because the document cannot tell the
               application about an event unless the application regularly inquires
               about its status. Similarly, there is no ability to pass continuous data
               streams (e.g. Accelerometer events) to an application without constant
               execution of scripts.
            </div>
            <div class="para e194">Nevertheless, in both these mobile application platforms you can
               build an application that loads, intercepts, and understands XML
               vocabularies while utilizing the intrinsic abilities of the mobile
               browser to handle the rendering and UI semantics. The application has to do
               a lot more of the "heavy lifting" than in the case of a Firefox
               extension and it also cannot integrate quite seamlessly into the
               browser's internals.
            </div>
         </div><a name="TheUnifiedApplicationModelANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e195">
            <div class="title e196">The Unified Application Model</div>
            <div class="para e197">Common between Firefox extensions and applications on the iPhone
               or Andriod platforms is:
            </div>
            <div class="itemizedlist e198">
               <div class="listitem e199">
                  <div class="para e200">an "application registry" or "store" where users can readily
                     get new functionality,
                  </div>
               </div>
               <div class="listitem e201">
                  <div class="para e202">the use of the browser as a core application user interface
                     component,
                  </div>
               </div>
               <div class="listitem e203">
                  <div class="para e204">the reliance on HTML and associated intrinsic capability of
                     the browser for application functionality.
                  </div>
               </div>
            </div>
            <div class="para e205">Unfortunately, in the case of both the mobile platforms, the
               browser's integration into the application is limited. While we can
               possibly write an application that interacts with our XML content, we
               can only do so within the confines of our application. The regular
               browser on the mobile platform remains ignorant of what to do with such
               XML content.
            </div>
            <div class="para e206">What we want is for the browser itself to be augmented to handle our
               media type so that the user experience inside and outside of any mobile
               or desktop application is the same. We don't want to duplicate the
               browser's architecture for handling transports, media types, and linking
               that it already does well. Instead, we want to augment the existing
               known media type handlers and insert a portion (if not all) of our
               application.
            </div>
            <div class="figure e207">
               <div class="mediaobject e208">
                  <div class="imageobject e209">
                     <div class="metaBox e210"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e362').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e362" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e210'
                              </span><span class="metaAttribute">fileref='../../../vol3/graphics/Milowski01/Milowski01-005.png'
                              </span><span class="metaAttribute">format='png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="caption e211">
                  <div class="para e212">Unified Model</div>
               </div>
            </div>
            <div class="para e213">A simplified scenario for how this works internally can be
               described as this sequence of events:
            </div>
            <div class="orderedlist e214">
               <div class="listitem e215">
                  <div class="para e216">A XML media type is recognized at the transport layer.</div>
               </div>
               <div class="listitem e217">
                  <div class="para e218">The media type is associated with our embedded application's
                     media type handler for that XML vocabulary.
                  </div>
               </div>
               <div class="listitem e219">
                  <div class="para e220">The XML data stream and metadata is transferred to our
                     application component registered for that media type.
                  </div>
               </div>
               <div class="listitem e221">
                  <div class="para e222">From the XML content received, our embedded application
                     component constructs user interface elements and/or web content
                     documents in the browser's intrinsic vocabularies.
                  </div>
               </div>
               <div class="listitem e223">
                  <div class="para e224">The unified experience of our application facade and the web
                     content documents are presented to the user.
                  </div>
               </div>
            </div>
            <div class="para e225">The end result is the user's experience is much like that of any
               other HTML application they might use a browser to access. The
               difference is that over the transport they received the XML content
               rather than some single-purpose rendition of that content. As such, they
               can choose the embedded application appropriate to the experience that
               they desire.
            </div>
         </div>
      </div><a name="TheDAISYBookExampleANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e226">
         <div class="title e227">The DAISY Book Example</div>
         <div class="para e228">The DAISY/NISO standard, ANSI/NISO Z39.86 [
            <div class="xref e229" linkend="daisy3"></div>], commonly known as DAISY 3, is an e-book
            specification developed with accessibility for the visually disabled in
            mind. While the specification itself is not limited to only such special
            purpose software environments, the focus of development has been around
            the such special needs users. In the end, the e-book specification is a
            collection of XML vocabularies that work together to form a single
            e-book.
         </div>
         <div class="figure e230">
            <div class="mediaobject e231">
               <div class="imageobject e232">
                  <div class="metaBox e233"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e396').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e396" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e233'
                           </span><span class="metaAttribute">fileref='../../../vol3/graphics/Milowski01/Milowski01-006.png'
                           </span><span class="metaAttribute">format='png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
            <div class="caption e234">
               <div class="para e235">A DAISY Book</div>
            </div>
         </div>
         <div class="para e236">The anatomy of a DAISY 3 book starts with a manifest document called
            a "OEB Package File". This XML document type was developed by the Open
            E-Book Forum/International Digital Publishing Forum [
            <div class="xref e237" linkend="idpf"></div>] and provides a manifest of all the parts of the DAISY
            e-book. From such a manifest you can access:
         </div>
         <div class="itemizedlist e238">
            <div class="listitem e239">
               <div class="para e240">The DAISY DTBook XML instance which contains the e-book
                  content,
               </div>
            </div>
            <div class="listitem e241">
               <div class="para e242">The DAISY NCX XML instance which contains navigation information
                  about the e-book (e.g. table of contents),
               </div>
            </div>
            <div class="listitem e243">
               <div class="para e244">SMIL XML documents used to provide playback scripts for the
                  e-book content,
               </div>
            </div>
            <div class="listitem e245">
               <div class="para e246">Any ancillary media objects used by the playback or book.</div>
            </div>
         </div>
         <div class="para e247">For a browser to open and display such an e-book, assuming we start
            with the OEB Packaging, the browser must first collect all the related
            parts and then decide what to render. The starting point of the packaging
            file gives the typical XML rendering very little to display. As such, just
            associating a CSS stylesheet or an XSLT transformation for rendering is
            insufficient.
         </div>
         <div class="para e248">Solving this requires a browser extension that understands the OEB
            Packaging file's media type, 
            <div class="code e249">application/oebps-package+xml</div>,
            and invokes a DAISY browser extension. This component is the responsible
            for locating the different documents linked by the manifest in the OEB
            Packaging document. The collection of document located is then used to
            assemble an appropriate UI within the browser.
         </div>
         <div class="figure e250">
            <div class="mediaobject e251">
               <div class="imageobject e252">
                  <div class="metaBox e253"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e427').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e427" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e253'
                           </span><span class="metaAttribute">fileref='../../../vol3/graphics/Milowski01/Milowski01-007.png'
                           </span><span class="metaAttribute">format='png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
            <div class="caption e254">
               <div class="para e255">A DAISY Browser Extension</div>
            </div>
         </div>
         <div class="para e256">The DAISY NCX document is used to provide a navigation aid, such as
            a table of contents, to the user. This document has links into the DAISY
            DTBook instance, which is the e-book content. These documents are used to
            present the user with a browser tab with e-book content via some XSLT
            transformation.
         </div>
         <div class="para e257">The book itself can be "played" to the user via the linked SMIL
            documents. These XML documents describe how the content from the original
            DAISY DTBook instance should be sequenced. As such, care must be taken in
            the transformations to preserve the identity of content elements so the
            SMIL references will work. In the end, the user is presented with playback
            options that sequence the book's content.
         </div>
         <div class="para e258">The end result is the user "opens" a DAISY book just like they do any
            other web document. They just follow a link or type in a URL to a DAISY
            book's packaging document and read the content. They don't need to know
            that there is some more complicated processing going on behind the
            interface presented to them.
         </div>
         <div class="para e259">The crucial point here is that for accessibility, since DAISY was
            started as an e-book format for blind and otherwise visually disabled
            people and since the DTBook content is translated into an intrinsic
            vocabulary (HTML) that the browser already understands, the tools used by
            these people to read web documents still work. The vendors of such tools
            like screen readers do not need to add specialized support for the DAISY
            book reader because, to them, the user is just reading a regular HTML web
            document. The combination of standardized intrinsic vocabularies and
            widespread software supported by these vendors means that specialized
            software like the DAISY browser extension can "hide" in the background and
            allow the user the same experience they are used to when they browse the
            web.
         </div>
         <div class="para e260">This DAISY book extension has been implemented as a Firefox
            extension and is now open-source. It is available for download from
            launchpad.net [
            <div class="xref e261" linkend="daisyextension"></div>].
         </div>
      </div><a name="APeekIntotheFutureANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e262">
         <div class="title e263">A Peek Into the Future</div>
         <div class="para e264">Making predictions is certainly risky business. Many of us at that
            1999 XTech presentation thought we were at the start of the ability to
            deliver high quality XML content to users over the web and into their
            browsers. What we didn't understand was the complexity of the
            interactivity model being developed within HTML, the explosion of
            sufficiency from "regular HTML" based web applications, and the relative
            high complexity of delivering a true XML application to a client-side
            browser.
         </div>
         <div class="para e265">In 2009, we've found ourselves at another crossroad where high
            quality browser technology is now simultaneously scalable to the mobile
            platform and open-source as WebKit or Firefox. The promise of WebKit
            provides the unique ability to contribute to open-source efforts and
            bridge the gap between the ultimate flexibility of the Firefox Mozilla
            platform and the streamlined and compliant nature of WebKit. That is, we
            can make WebKit what we need simply by actively contributing or otherwise
            supporting its development.
         </div>
         <div class="para e266">In the past, we waited for the browser vendors to do "the right
            thing". Now we can make what we want to happen by embracing our
            open-source browser technologies and have them do "the right thing"
            because we implemented the code to do so. That's our choice: to contribute
            or let our ideas fail.
         </div>
         <div class="para e267">In the spirit of this, I present these challenges for the
            reader:
         </div>
         <div class="orderedlist e268">
            <div class="listitem e269">
               <div class="para e270">We need intrinsic vocabularies and semantics we can rely upon.
                  We must have HTML5, SVG, and MathML.
               </div>
            </div>
            <div class="listitem e271">
               <div class="para e272">We won't wait for "someone else" to develop our browser
                  enhancements.
               </div>
            </div>
            <div class="listitem e273">
               <div class="para e274">We will embrace the idea of intrinsic vocabularies, like HTML,
                  because such things take an inordinate amount of time to
                  develop.
               </div>
            </div>
            <div class="listitem e275">
               <div class="para e276">We will replicate the browser extension model championed by
                  Firefox because it enables direct delivery of XML vocabularies without
                  obscene acts.
               </div>
            </div>
            <div class="listitem e277">
               <div class="para e278">We will support open-source and make it easy to use because it
                  is our "big stick" we use to get what we want.
               </div>
            </div>
         </div>
         <div class="para e279">Commercial vendors of browser technologies need to catch up or perish.
            The drag that has been created by certain browsers not implementing the
            most basic of recommendations from the W3C has caused enormous delay as
            well as economic consequences. While it is the user who suffers, they also
            often have a choice and can choose one that works.
         </div>
         <div class="para e280">The ability to deliver XML content paired with applications directly
            to users has existed for quite awhile--but only in Firefox. That ability
            has been buried inside Firefox and delegated to the brave souls who want
            to dig through the source code. We need to bring that ability to the
            surface and make it easy to use.
         </div>
         <div class="para e281">Having only one browser that does "cool things" is not enough. We
            need to propagate the ability to extend a web browser by extending it at
            its core. We need the ability to do serious work along side other
            components inside the browser in addition to augmenting the user interface
            to add in our "gadgets". It is really our choice to propagate a new model
            based on this knowledge and experience for the next decade.
         </div>
      </div><a name="BibliographyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e282">
         <div class="title e283">Bibliography</div>
         <div class="bibliomixed e284" xml:id="xtech-slides-1999" xreflabel="apparao1999-1">V.
            Apparao .
            <div class="emphasis e285" role="ital">XML and Related Standards in
               Gecko
            </div> - slides from XTech 1999 - 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e286" xlink:actuate="onRequest" xlink:href="http://www.mozilla.org/newlayout/xml/slides/slide1.xml" xlink:show="new" xlink:type="simple">http://www.mozilla.org/newlayout/xml/slides/slide1.xml</div>.
         </div>
         <div class="bibliomixed e287" xml:id="xtech-books-1999" xreflabel="apparao1999-2">V.
            Apparao .
            <div class="emphasis e288" role="ital">Book Demo</div> - from XTech 1999 -
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e289" xlink:actuate="onRequest" xlink:href="http://www.mozilla.org/newlayout/xml/books/books.xml" xlink:show="new" xlink:type="simple">http://www.mozilla.org/newlayout/xml/books/books.xml</div>.
         </div>
         <div class="bibliomixed e290" xml:id="xtech-tocdemo-1999" xreflabel="apparao1999-3">V.
            Apparao .
            <div class="emphasis e291" role="ital">TOC Demo</div> - from XTech 1999 -
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e292" xlink:actuate="onRequest" xlink:href="http://www.mozilla.org/newlayout/xml/tocdemo/rights.xml" xlink:show="new" xlink:type="simple">http://www.mozilla.org/newlayout/xml/tocdemo/rights.xml</div>.
         </div>
         <div class="bibliomixed e293" xml:id="simple-link" xreflabel="xlink">S. Derose, E. Maler,
            D. Orchard. 
            <div class="emphasis e294" role="ital">XML Linking Language (XLink) Version
               1.0
            </div> - 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e295" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xlink/#simple-links" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xlink/#simple-links</div>.
         </div>
         <div class="bibliomixed e296" xml:id="svg" xreflabel="svg">J. Ferraiolo, 藤沢 淳, D. Jackson.
            
            <div class="emphasis e297" role="ital">Scalable Vector Graphics (SVG) 1.1
               Specification
            </div> - 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e298" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/SVG11/" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/SVG11/</div>.
         </div>
         <div class="bibliomixed e299" xml:id="mathml" xreflabel="mathml">D. Carlisle et al.
            
            <div class="emphasis e300" role="ital">Mathematical Markup Language (MathML) Version 2.0
               (Second Edition)
            </div> - 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e301" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/MathML2/" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/MathML2/</div>.
         </div>
         <div class="bibliomixed e302" xml:id="dom2" xreflabel="dom2">A. Le Hors et al. 
            <div class="emphasis e303" role="ital">Document Object Model (DOM) Level 2 Core
               Specification
            </div> - 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e304" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/DOM-Level-2-Core/" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/DOM-Level-2-Core/</div>.
         </div>
         <div class="bibliomixed e305" xml:id="usage" xreflabel="usage">Wikipedia 
            <div class="emphasis e306" role="ital">Usage share of web browsers</div> - 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e307" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/Usage_share_of_web_browsers" xlink:show="new" xlink:type="simple">http://en.wikipedia.org/wiki/Usage_share_of_web_browsers</div>.
         </div>
         <div class="bibliomixed e308" xml:id="mozilla" xreflabel="mozilla">
            <div class="emphasis e309" role="ital">Mozilla Firefox</div> - 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e310" xlink:actuate="onRequest" xlink:href="http://www.mozilla.org/" xlink:show="new" xlink:type="simple">http://www.mozilla.org/</div>.
         </div>
         <div class="bibliomixed e311" xml:id="webkit" xreflabel="webkit">
            <div class="emphasis e312" role="ital">WebKit</div> - 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e313" xlink:actuate="onRequest" xlink:href="http://www.webkit.org/" xlink:show="new" xlink:type="simple">http://www.webkit.org/</div>.
         </div>
         <div class="bibliomixed e314" xml:id="extensions" xreflabel="extensions">Firefox Extensions
            - 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e315" xlink:actuate="onRequest" xlink:href="http://www.webkit.org/" xlink:show="new" xlink:type="simple">https://developer.mozilla.org/en/Extensions</div>.
         </div>
         <div class="bibliomixed e316" xml:id="daisy3" xreflabel="daisy3">DAISY/NISO Standard,
            officially, the ANSI/NISO Z39.86, Specifications for the Digital Talking
            Book - 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e317" xlink:actuate="onRequest" xlink:href="http://www.niso.org/standards/resources/Z39-86-2005.html" xlink:show="new" xlink:type="simple">http://www.niso.org/standards/resources/Z39-86-2005.html</div>.
         </div>
         <div class="bibliomixed e318" xml:id="idpf" xreflabel="idpf">
            <div class="emphasis e319" role="ital">International Digital Publishing Forum</div> - 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e320" xlink:actuate="onRequest" xlink:href="http://www.webkit.org/" xlink:show="new" xlink:type="simple">http://www.idpf.org/</div>.
         </div>
         <div class="bibliomixed e321" xml:id="daisyextension" xreflabel="daisyextension">
            <div class="emphasis e322" role="ital">DAISY Firefox Extension</div> - 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e323" xlink:actuate="onRequest" xlink:href="https://launchpad.net/daisyextension" xlink:show="new" xlink:type="simple">https://launchpad.net/daisyextension</div>.
         </div>
      </div>
   </div>
</div>