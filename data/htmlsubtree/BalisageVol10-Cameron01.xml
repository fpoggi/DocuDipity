<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#icXML:AcceleratingaCommercialXML%0AParserUsingSIMDandMulticoreTechnologiesANCHOR" name="icXML:AcceleratingaCommercialXML%0AParserUsingSIMDandMulticoreTechnologiesTOC">icXML:  Accelerating a Commercial XML
               Parser Using SIMD and Multicore Technologies</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BackgroundANCHOR" name="BackgroundTOC">Background</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#XercesC++StructureANCHOR" name="XercesC++StructureTOC">Xerces C++ Structure</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TheParabixFrameworkANCHOR" name="TheParabixFrameworkTOC">The Parabix Framework</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#SequentialvsParallelParadigmANCHOR" name="SequentialvsParallelParadigmTOC">Sequential vs. Parallel Paradigm</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ArchitectureANCHOR" name="ArchitectureTOC">Architecture</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#OverviewANCHOR" name="OverviewTOC">Overview</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#CharacterSetAdaptersANCHOR" name="CharacterSetAdaptersTOC">Character Set Adapters</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#CombinedParallelFilteringANCHOR" name="CombinedParallelFilteringTOC">Combined Parallel Filtering</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ContentStreamANCHOR" name="ContentStreamTOC">Content Stream</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#NamespaceHandlingANCHOR" name="NamespaceHandlingTOC">Namespace Handling</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ErrorHandlingANCHOR" name="ErrorHandlingTOC">Error Handling</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#MultithreadingwithPipelineParallelismANCHOR" name="MultithreadingwithPipelineParallelismTOC">Multithreading with Pipeline Parallelism</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#PerformanceANCHOR" name="PerformanceTOC">Performance</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#XercesC++SAXCountANCHOR" name="XercesC++SAXCountTOC">Xerces C++ SAXCount</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#GML2SVGANCHOR" name="GML2SVGTOC">GML2SVG</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConclusionandFutureWorkANCHOR" name="ConclusionandFutureWorkTOC">Conclusion and Future Work</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BibliographyANCHOR" name="BibliographyTOC">Bibliography</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">August 6 - 9, 2013</div>
         <div class="singletermTERMS">ashriram.cs.sfu.ca</div>
         <div class="singletermTERMS">Arrvindh</div>
         <div class="singletermTERMS">Assistant Professor</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">b7&lt;A</div>
         <div class="singletermTERMS">book.org</div>
         <div class="singletermTERMS">books.org</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2013</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">character-class bit streams</div>
         <div class="singletermTERMS">Character Set Adapter</div>
         <div class="singletermTERMS">Content Preparation Unit</div>
         <div class="singletermTERMS">Content Stream Generator</div>
         <div class="singletermTERMS">content stream</div>
         <div class="singletermTERMS">cameron@cs.sfu.ca</div>
         <div class="singletermTERMS">Chief Technology Officer</div>
         <div class="singletermTERMS">Cameron</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">document</div>
         <div class="singletermTERMS">deletion mask stream</div>
         <div class="singletermTERMS">Dan</div>
         <div class="singletermTERMS">Developer</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">E4 BD A0</div>
         <div class="singletermTERMS">E5 A5 BD</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
         <div class="singletermTERMS">fee</div>
         <div class="singletermTERMS">Final WF checker</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
         <div class="singletermTERMS">Graduate Student</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">https://perf.wiki.kernel.org/index.php/Tutorial</div>
         <div class="singletermTERMS">Herdy</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">Intel Software Network</div>
         <div class="singletermTERMS">icXML-p</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
         <div class="singletermTERMS">ksherdy@sfu.ca</div>
         <div class="singletermTERMS">Kenneth</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">Line-Column Tracker</div>
         <div class="singletermTERMS">line-feed bitstream</div>
         <div class="singletermTERMS">lindanl@sfu.ca</div>
         <div class="singletermTERMS">Lin</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">Markup Processor</div>
         <div class="singletermTERMS">Medforth</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">Namespace Binder</div>
         <div class="singletermTERMS">Namespace Processor</div>
         <div class="singletermTERMS">nmedfort@sfu.ca</div>
         <div class="singletermTERMS">Nigel</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">pub.net</div>
         <div class="singletermTERMS">price</div>
         <div class="singletermTERMS">p:name</div>
         <div class="singletermTERMS">Parallel Markup Parser</div>
         <div class="singletermTERMS">Professor of Computing Science</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">Reader</div>
         <div class="singletermTERMS">Rob</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">Scanner</div>
         <div class="singletermTERMS">Symbol Resolver</div>
         <div class="singletermTERMS">symbol stream</div>
         <div class="singletermTERMS">skip mask</div>
         <div class="singletermTERMS">Shriraman</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">title</div>
         <div class="singletermTERMS">Transcoder</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
         <div class="singletermTERMS">URI stream</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
         <div class="singletermTERMS">Validator</div>
         <div class="singletermTERMS">Validation</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">xmlns</div>
         <div class="singletermTERMS">xmlns:p="pub.net"</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="icXML:AcceleratingaCommercialXML%0AParserUsingSIMDandMulticoreTechnologiesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3" xml:id="HR-23632987-8973">
      <div class="title e1">icXML:  Accelerating a Commercial XML
         Parser Using SIMD and Multicore Technologies
      </div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2013</div>
            <div class="confdates e5">August 6 - 9, 2013</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">Prior research on the acceleration of XML processing using single-instruction
               	   multiple-data (SIMD) and multi-core
               parallelism has lead to a number of interesting research prototypes. This work is
               	    the first to investigate to the extent to which the techniques underlying these
               prototypes 
               	    could result
               in systematic performance benefits when fully integrated into a commercial XML parser
               The widely used Xerces-C++ parser of the Apache Software Foundation was chosen as
               the
               foundation for the study. A systematic restructuring of the parser was undertaken,
               while
               maintaining the existing API for application programmers. Using SIMD techniques alone,
               an increase in parsing speed of at least 50% was observed in a range of applications.
               When coupled with pipeline parallelism on dual core processors, improvements of 2x
               and
               beyond were realized. 
               	    
               	    icXML is intended as an important industrial contribution in its own right as
               well
               	    as an important case study for the underlying Parabix parallel processing framework.
               	    Based on the success of the icXML development, there is a strong case for continued
               	    development of that framework as well as for the application of that framework
               	    to other important XML technology stacks.   An important area for further work
               is
               	    the extension of Parabix technology to accelerate Java-based implementations
               as
               	    well as ones based on C/C++.
               	    
               	    
            </div>
         </div>
         <div class="author e8">
            <div class="personname e9">
               <div class="firstname e10">Nigel</div>
               <div class="surname e11">Medforth</div>
            </div>
            <div class="personblurb e12">
               <div class="para e13">Nigel Medforth is a M.Sc. student at Simon Fraser University and the lead
                  developer of icXML. He earned a Bachelor of Technology in Information Technology at
                  Kwantlen Polytechnic University in 2009 and was awarded the Dean’s Medal for
                  Outstanding Achievement.
               </div>
               <div class="para e14">Nigel is currently researching ways to leverage both the Parabix framework and
                  stream-processing models to further accelerate XML parsing within icXML.
               </div>
            </div>
            <div class="affiliation e15">
               <div class="jobtitle e16">Developer</div>
               <div class="orgname e17">International Characters Inc.</div>
            </div>
            <div class="affiliation e18">
               <div class="jobtitle e19">Graduate Student</div>
               <div class="orgname e20">School of Computing Science, Simon Fraser University </div>
            </div>
            <div class="email e21">nmedfort@sfu.ca</div>
         </div>
         <div class="author e22">
            <div class="personname e23">
               <div class="firstname e24">Dan</div>
               <div class="surname e25">Lin</div>
            </div>
            <div class="personblurb e26">
               <div class="para e27">Dan Lin is a Ph.D student at Simon Fraser University. She earned a Master of Science
                  	     in Computing Science at Simon Fraser University in 2010. Her research focus
                  on on high 
                  	     performance algorithms that exploit parallelization strategies on various multicore
                  platforms.
                  	   
               </div>
            </div>
            <div class="affiliation e28">
               <div class="jobtitle e29">Graduate Student</div>
               <div class="orgname e30">School of Computing Science, Simon Fraser University </div>
            </div>
            <div class="email e31">lindanl@sfu.ca</div>
         </div>
         <div class="author e32">
            <div class="personname e33">
               <div class="firstname e34">Kenneth</div>
               <div class="surname e35">Herdy</div>
            </div>
            <div class="personblurb e36">
               <div class="para e37"> Ken Herdy completed an Advanced Diploma of Technology in Geographical Information
                  Systems at the British Columbia Institute of Technology in 2003 and earned a Bachelor
                  of Science in Computing Science with a Certificate in Spatial Information Systems
                  at
                  Simon Fraser University in 2005. 
               </div>
               <div class="para e38"> Ken is currently pursuing PhD studies in Computing Science at Simon Fraser
                  University with industrial scholarship support from the Natural Sciences and
                  Engineering Research Council of Canada, the Mathematics of Information Technology
                  and
                  Complex Systems NCE, and the BC Innovation Council. His research focus is an analysis
                  of the principal techniques that may be used to improve XML processing performance
                  in
                  the context of the Geography Markup Language (GML). 
               </div>
            </div>
            <div class="affiliation e39">
               <div class="jobtitle e40">Graduate Student</div>
               <div class="orgname e41">School of Computing Science, Simon Fraser University </div>
            </div>
            <div class="email e42">ksherdy@sfu.ca</div>
         </div>
         <div class="author e43">
            <div class="personname e44">
               <div class="firstname e45">Rob</div>
               <div class="surname e46">Cameron</div>
            </div>
            <div class="personblurb e47">
               <div class="para e48">Dr. Rob Cameron is Professor of Computing Science and Associate Dean of Applied
                  Sciences at Simon Fraser University. His research interests include programming
                  language and software system technology, with a specific focus on high performance
                  text processing using SIMD and multicore parallelism. He is the developer of the REX
                  XML shallow parser as well as the parallel bit stream (Parabix) framework for SIMD
                  text processing. 
               </div>
            </div>
            <div class="affiliation e49">
               <div class="jobtitle e50">Professor of Computing Science</div>
               <div class="orgname e51">Simon Fraser University</div>
            </div>
            <div class="affiliation e52">
               <div class="jobtitle e53">Chief Technology Officer</div>
               <div class="orgname e54">International Characters, Inc.</div>
            </div>
            <div class="email e55">cameron@cs.sfu.ca</div>
         </div>
         <div class="author e56">
            <div class="personname e57">
               <div class="firstname e58">Arrvindh</div>
               <div class="surname e59">Shriraman</div>
            </div>
            <div class="personblurb e60">
               <div class="para e61"></div>
            </div>
            <div class="affiliation e62">
               <div class="jobtitle e63">Assistant Professor</div>
               <div class="orgname e64">School of Computing Science, Simon Fraser University</div>
            </div>
            <div class="email e65">ashriram.cs.sfu.ca</div>
         </div>
         <div class="legalnotice e66">
            <div class="para e67">This work is licensed under a Creative Commons Attribution-Noncommercial-No Derivative
               Works 2.5 Canada License (
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e68" xlink:actuate="onRequest" xlink:href="http://creativecommons.org/licenses/by-nc-nd/2.5/ca/" xlink:show="new" xlink:type="simple">http://creativecommons.org/licenses/by-nc-nd/2.5/ca/</div>).
            </div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e69">
         <div class="title e70">Introduction</div>
         <div class="para e71">    
            	Parallelization and acceleration of XML parsing is a widely
            	studied problem that has seen the development of a number
            	of interesting research prototypes using both single-instruction
            	   multiple-data (SIMD) and
            	multi-core parallelism.   Most works have investigated
            	data parallel solutions on multicore
            	architectures using various strategies to break input
            	documents into segments that can be allocated to different cores.
            	For example, one possibility for data
            	parallelization is to add a pre-parsing step to compute
            	a skeleton tree structure of an  XML document 
            <div class="citation e72" linkend="GRID2006"></div>.
            	The parallelization of the pre-parsing stage itself can be tackled with 
            	  state machines 
            <div class="citation e73" linkend="E-SCIENCE2007"></div>, 
            <div class="citation e74" linkend="IPDPS2008"></div>.
            	Methods without pre-parsing have used speculation 
            <div class="citation e75" linkend="HPCC2011"></div> or post-processing that 
            	combines the partial results 
            <div class="citation e76" linkend="ParaDOM2009"></div>.
            	A hybrid technique that combines data and pipeline parallelism was proposed to 
            	hide the latency of a "job" that has to be done sequentially 
            <div class="citation e77" linkend="ICWS2008"></div>.
            
         </div>
         <div class="para e78">
            	Fewer efforts have investigated SIMD parallelism, although this approach
            	has the potential advantage of improving single core performance as well
            	as offering savings in energy consumption 
            <div class="citation e79" linkend="HPCA2012"></div>.
            	Intel introduced specialized SIMD string processing instructions in the SSE 4.2 instruction
            set extension 
            	and showed how they can be used to improve the performance of XML parsing 
            <div class="citation e80" linkend="XMLSSE42"></div>.
            	The Parabix framework uses generic SIMD extensions and bit parallel methods to 
            	process hundreds of XML input characters simultaneously 
            <div class="citation e81" linkend="Cameron2009"></div> 
            <div class="citation e82" linkend="cameron-EuroPar2011"></div>.
            	Parabix prototypes have also combined SIMD methods with thread-level parallelism
            to 
            	achieve further acceleration on multicore systems 
            <div class="citation e83" linkend="HPCA2012"></div>.
            
         </div>
         <div class="para e84">
            	In this paper, we move beyond research prototypes to consider
            	the detailed integration of both SIMD and multicore parallelism into the 
            	Xerces-C++ parser of the Apache Software Foundation, an existing
            	standards-compliant open-source parser that is widely used
            	in commercial practice.    The challenge of this work is
            	to parallelize the Xerces parser in such a way as to
            	preserve the existing APIs as well as offering worthwhile 
            	end-to-end acceleration of XML processing.    
            	To achieve the best results possible, we undertook
            	a nine-month comprehensive restructuring of the Xerces-C++ parser,
            	seeking to expose as many critical aspects of XML parsing
            	as possible for parallelization, the result of which we named icXML.   
            	Overall, we employed Parabix-style methods of transcoding, tokenization
            	and tag parsing, parallel string comparison methods in symbol
            	resolution, bit parallel methods in namespace processing, 
            	as well as staged processing using pipeline parallelism to take advantage of
            	multiple cores.
            
         </div>
         <div class="para e85">
            	The remainder of this paper is organized as follows.   
            	  
            <div class="xref e86" linkend="background"></div> discusses the structure of the Xerces and Parabix XML parsers and the fundamental
            	differences between the two parsing models.   
            	
            <div class="xref e87" linkend="architecture"></div> then presents the icXML design based on a restructured Xerces architecture to 
            	incorporate SIMD parallelism using Parabix methods.   
            	
            <div class="xref e88" linkend="multithread"></div> moves on to consider the multithreading of the icXML architecture
            	using the pipeline parallelism model.  
            	
            <div class="xref e89" linkend="performance"></div> analyzes the performance of both the single-threaded and
            	multi-threaded versions of icXML in comparison to original Xerces,
            	demonstrating substantial end-to-end acceleration of
            	a GML-to-SVG translation application written against the Xerces API.
            	  
            <div class="xref e90" linkend="conclusion"></div> concludes the paper with a discussion of future work and the potential for 
            	applying the techniques discussed herein in other application domains.
            
         </div>
      </div><a name="BackgroundANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e91" xml:id="background">
         <div class="title e92">Background</div><a name="XercesC++StructureANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e93" xml:id="background-xerces">
            <div class="title e94">Xerces C++ Structure</div>
            <div class="para e95"> The Xerces C++ parser is a widely-used standards-conformant
               XML parser produced as open-source software
               by the Apache Software Foundation.
               It features comprehensive support for a variety of character encodings both
               commonplace (e.g., UTF-8, UTF-16) and rarely used (e.g., EBCDIC), support for multiple
               XML vocabularies through the XML namespace mechanism, as well as complete
               implementations of structure and data validation through multiple grammars declared
               using either legacy DTDs (document type definitions) or modern XML Schema facilities.
               Xerces also supports several APIs for accessing parser services, including event-based
               parsing using either pull parsing or SAX/SAX2 push-style parsing as well as a DOM
               tree-based parsing interface. 
            </div>
            <div class="para e96">
               Xerces,
               like all traditional parsers, processes XML documents sequentially a byte-at-a-time
               from
               the first to the last byte of input data. Each byte passes through several processing
               layers and is classified and eventually validated within the context of the document
               state. This introduces implicit dependencies between the various tasks within the
               application that make it difficult to optimize for performance. As a complex software
               	      system, no one feature dominates the overall parsing performance. 
               <div class="xref e97" linkend="xerces-profile"></div>
               	    shows the execution time profile of the top ten functions in a
               typical run. Even if it were possible, Amdahl's Law dictates that tackling any one
               of
               these functions for parallelization in isolation would only produce a minute improvement
               in performance. Unfortunately, early investigation into these functions found that
               incorporating speculation-free thread-level parallelization was impossible and they
               were
               already performing well in their given tasks; thus only trivial enhancements were
               attainable. In order to obtain a systematic acceleration of Xerces, it should be
               expected that a comprehensive restructuring is required, involving all aspects of
               the
               parser. 
            </div>
            <div class="table e98" xml:id="xerces-profile">
               <div class="caption e99">
                  <div class="para e100">Execution Time of Top 10 Xerces Functions</div>
               </div>
               <div class="colgroup e101" span="1">
                  <div class="metaBox e102"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e173').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e173" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='left'
                           </span><span class="metaAttribute">class='e102'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
                  <div class="metaBox e103"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e174').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e174" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='left'
                           </span><span class="metaAttribute">class='e103'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
               <div class="thead e104">
                  <div class="tr e105">
                     <div class="th e106">Time (%) </div>
                     <div class="th e107"> Function Name </div>
                  </div>
               </div>
               <div class="tbody e108">
                  <div class="tr e109" valign="top">
                     <div class="td e110">13.29	</div>
                     <div class="td e111">XMLUTF8Transcoder::transcodeFrom </div>
                  </div>
                  <div class="tr e112" valign="top">
                     <div class="td e113">7.45	</div>
                     <div class="td e114">IGXMLScanner::scanCharData </div>
                  </div>
                  <div class="tr e115" valign="top">
                     <div class="td e116">6.83	</div>
                     <div class="td e117">memcpy </div>
                  </div>
                  <div class="tr e118" valign="top">
                     <div class="td e119">5.83	</div>
                     <div class="td e120">XMLReader::getNCName </div>
                  </div>
                  <div class="tr e121" valign="top">
                     <div class="td e122">4.67	</div>
                     <div class="td e123">IGXMLScanner::buildAttList </div>
                  </div>
                  <div class="tr e124" valign="top">
                     <div class="td e125">4.54	</div>
                     <div class="td e126">RefHashTableO&lt;&gt;::findBucketElem </div>
                  </div>
                  <div class="tr e127" valign="top">
                     <div class="td e128">4.20	</div>
                     <div class="td e129">IGXMLScanner::scanStartTagNS </div>
                  </div>
                  <div class="tr e130" valign="top">
                     <div class="td e131">3.75	</div>
                     <div class="td e132">ElemStack::mapPrefixToURI </div>
                  </div>
                  <div class="tr e133" valign="top">
                     <div class="td e134">3.58	</div>
                     <div class="td e135">ReaderMgr::getNextChar </div>
                  </div>
                  <div class="tr e136" valign="top">
                     <div class="td e137">3.20	</div>
                     <div class="td e138">IGXMLScanner::basicAttrValueScan </div>
                  </div>
               </div>
            </div>
         </div><a name="TheParabixFrameworkANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e139">
            <div class="title e140">The Parabix Framework</div>
            <div class="para e141"> The Parabix (parallel bit stream) framework is a transformative approach to XML
               parsing (and other forms of text processing.) The key idea is to exploit the
               availability of wide SIMD registers (e.g., 128-bit) in commodity processors to represent
               data from long blocks of input data by using one register bit per single input byte.
               To
               facilitate this, the input data is first transposed into a set of basis bit streams.
               
               	      For example, 
               <div class="xref e142" linkend="xml-bytes"></div> shows  the ASCII bytes for the string "
               <div class="code e143">b7&lt;A</div>" with
               		the corresponding  8 basis bit streams, b
               <div class="subscript e144">0</div> through  b
               <div class="subscript e145">7</div> shown in  
               <div class="xref e146" linkend="xml-bits"></div>. 
               The bits used to construct b
               <div class="subscript e147">7</div> have been highlighted in this example.
               	      Boolean-logic operations (∧, ∨ and ¬ denote the
               	      boolean AND, OR and NOT operators) are used to classify the input bits into
               a set of
               
               <div class="emphasis e148" role="ital">character-class bit streams</div>, which identify key
               characters (or groups of characters) with a 
               <div class="code e149">1</div>. For example, one of the
               fundamental characters in XML is a left-angle bracket. A character is an
               
               <div class="code e150">'&lt;' if and only if
                  ¬(b
                  <div class="subscript e151">0</div> ∨ b
                  <div class="subscript e152">1</div>)
                  ∧ (b
                  <div class="subscript e153">2</div> ∧ b
                  <div class="subscript e154">3</div>)
                  ∧ (b
                  <div class="subscript e155">4</div> ∧ b
                  <div class="subscript e156">5</div>)
                  ∧ ¬ (b
                  <div class="subscript e157">6</div> ∨
                  b
                  <div class="subscript e158">7</div>) = 1
               </div>. Similarly, a character is numeric, 
               <div class="code e159">[0-9]
                  if and only if ¬(b
                  <div class="subscript e160">0</div> ∨
                  b
                  <div class="subscript e161">1</div>) ∧ (b
                  <div class="subscript e162">2</div> ∧
                  b
                  <div class="subscript e163">3</div>) ∧ ¬(b
                  <div class="subscript e164">4</div>
                  ∧ (b
                  <div class="subscript e165">5</div> ∨
                  b
                  <div class="subscript e166">6</div>))
               </div>. An important observation here is that ranges of
               characters may require fewer operations than individual characters and
                multiple
               classes can share the classification cost. 
            </div>
            <div class="table e167" xml:id="xml-bytes">
               <div class="caption e168">
                  <div class="para e169">XML Source Data</div>
               </div>
               <div class="colgroup e170" span="1">
                  <div class="metaBox e171"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e320').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e320" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='right'
                           </span><span class="metaAttribute">class='e171'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
                  <div class="metaBox e172"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e321').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e321" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='center'
                           </span><span class="metaAttribute">class='e172'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
                  <div class="metaBox e173"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e322').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e322" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='center'
                           </span><span class="metaAttribute">class='e173'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
                  <div class="metaBox e174"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e323').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e323" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='center'
                           </span><span class="metaAttribute">class='e174'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
                  <div class="metaBox e175"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e324').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e324" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='center'
                           </span><span class="metaAttribute">class='e175'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
               <div class="tbody e176">
                  <div class="tr e177">
                     <div class="td e178">String </div>
                     <div class="td e179"> 
                        <div class="code e180">b</div> 
                     </div>
                     <div class="td e181"> 
                        <div class="code e182">7</div> 
                     </div>
                     <div class="td e183"> 
                        <div class="code e184">&lt;</div> 
                     </div>
                     <div class="td e185"> 
                        <div class="code e186">A</div> 
                     </div>
                  </div>
                  <div class="tr e187">
                     <div class="td e188">ASCII </div>
                     <div class="td e189"> 
                        <div class="code e190">0110001</div>
                        <div class="emphasis e191" role="bold">
                           <div class="code e192">0</div>
                        </div> 
                     </div>
                     <div class="td e193"> 
                        <div class="code e194">0011011</div>
                        <div class="emphasis e195" role="bold">
                           <div class="code e196">1</div>
                        </div>
                     </div>
                     <div class="td e197"> 
                        <div class="code e198">0011110</div>
                        <div class="emphasis e199" role="bold">
                           <div class="code e200">0</div>
                        </div>
                     </div>
                     <div class="td e201"> 
                        <div class="code e202">0100000</div>
                        <div class="emphasis e203" role="bold">
                           <div class="code e204">1</div>
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="table e205" xml:id="xml-bits">
               <div class="caption e206">
                  <div class="para e207">8-bit ASCII Basis Bit Streams</div>
               </div>
               <div class="colgroup e208" span="1">
                  <div class="metaBox e209"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e386').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e386" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='center'
                           </span><span class="metaAttribute">class='e209'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
                  <div class="metaBox e210"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e387').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e387" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='center'
                           </span><span class="metaAttribute">class='e210'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
                  <div class="metaBox e211"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e388').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e388" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='center'
                           </span><span class="metaAttribute">class='e211'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
                  <div class="metaBox e212"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e389').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e389" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='center'
                           </span><span class="metaAttribute">class='e212'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
                  <div class="metaBox e213"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e390').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e390" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='center'
                           </span><span class="metaAttribute">class='e213'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
                  <div class="metaBox e214"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e391').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e391" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='center'
                           </span><span class="metaAttribute">class='e214'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
                  <div class="metaBox e215"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e392').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e392" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='center'
                           </span><span class="metaAttribute">class='e215'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
                  <div class="metaBox e216"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e393').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e393" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='center'
                           </span><span class="metaAttribute">class='e216'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
               <div class="tbody e217">
                  <div class="tr e218">
                     <div class="td e219"> b
                        <div class="subscript e220">0</div> 
                     </div>
                     <div class="td e221"> b
                        <div class="subscript e222">1</div> 
                     </div>
                     <div class="td e223"> b
                        <div class="subscript e224">2</div> 
                     </div>
                     <div class="td e225"> b
                        <div class="subscript e226">3</div>
                     </div>
                     <div class="td e227"> b
                        <div class="subscript e228">4</div> 
                     </div>
                     <div class="td e229"> b
                        <div class="subscript e230">5</div> 
                     </div>
                     <div class="td e231"> b
                        <div class="subscript e232">6</div> 
                     </div>
                     <div class="td e233"> b
                        <div class="subscript e234">7</div> 
                     </div>
                  </div>
                  <div class="tr e235">
                     <div class="td e236"> 
                        <div class="code e237">0</div> 
                     </div>
                     <div class="td e238"> 
                        <div class="code e239">1</div> 
                     </div>
                     <div class="td e240"> 
                        <div class="code e241">1</div> 
                     </div>
                     <div class="td e242"> 
                        <div class="code e243">0</div> 
                     </div>
                     <div class="td e244"> 
                        <div class="code e245">0</div> 
                     </div>
                     <div class="td e246"> 
                        <div class="code e247">0</div> 
                     </div>
                     <div class="td e248"> 
                        <div class="code e249">1</div> 
                     </div>
                     <div class="td e250"> 
                        <div class="emphasis e251" role="bold">
                           <div class="code e252">0</div>
                        </div> 
                     </div>
                  </div>
                  <div class="tr e253">
                     <div class="td e254"> 
                        <div class="code e255">0</div> 
                     </div>
                     <div class="td e256"> 
                        <div class="code e257">0</div> 
                     </div>
                     <div class="td e258"> 
                        <div class="code e259">1</div> 
                     </div>
                     <div class="td e260"> 
                        <div class="code e261">1</div> 
                     </div>
                     <div class="td e262"> 
                        <div class="code e263">0</div> 
                     </div>
                     <div class="td e264"> 
                        <div class="code e265">1</div> 
                     </div>
                     <div class="td e266"> 
                        <div class="code e267">1</div> 
                     </div>
                     <div class="td e268"> 
                        <div class="emphasis e269" role="bold">
                           <div class="code e270">1</div>
                        </div> 
                     </div>
                  </div>
                  <div class="tr e271">
                     <div class="td e272"> 
                        <div class="code e273">0</div> 
                     </div>
                     <div class="td e274"> 
                        <div class="code e275">0</div> 
                     </div>
                     <div class="td e276"> 
                        <div class="code e277">1</div> 
                     </div>
                     <div class="td e278"> 
                        <div class="code e279">1</div> 
                     </div>
                     <div class="td e280"> 
                        <div class="code e281">1</div> 
                     </div>
                     <div class="td e282"> 
                        <div class="code e283">1</div> 
                     </div>
                     <div class="td e284"> 
                        <div class="code e285">0</div> 
                     </div>
                     <div class="td e286"> 
                        <div class="emphasis e287" role="bold">
                           <div class="code e288">0</div>
                        </div> 
                     </div>
                  </div>
                  <div class="tr e289">
                     <div class="td e290"> 
                        <div class="code e291">0</div> 
                     </div>
                     <div class="td e292"> 
                        <div class="code e293">1</div> 
                     </div>
                     <div class="td e294"> 
                        <div class="code e295">0</div> 
                     </div>
                     <div class="td e296"> 
                        <div class="code e297">0</div> 
                     </div>
                     <div class="td e298"> 
                        <div class="code e299">0</div> 
                     </div>
                     <div class="td e300"> 
                        <div class="code e301">0</div> 
                     </div>
                     <div class="td e302"> 
                        <div class="code e303">0</div> 
                     </div>
                     <div class="td e304"> 
                        <div class="emphasis e305" role="bold">
                           <div class="code e306">1</div>
                        </div> 
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e307"> Consider, for example, the XML source data stream shown in the first line of 
               <div class="xref e308" linkend="derived"></div>.
               The remaining lines of this figure show
               several parallel bit streams that are computed in Parabix-style parsing, with each
               bit
               of each stream in one-to-one correspondence to the source character code units of
               the
               input stream. For clarity, 1 bits are denoted with 1 in each stream and 0 bits are
               represented as underscores. The first bit stream shown is that for the opening angle
               brackets that represent tag openers in XML. The second and third streams show a
               partition of the tag openers into start tag marks and end tag marks depending on the
               character immediately following the opener (i.e., "
               <div class="code e309">/</div>") or
               not. The remaining three lines show streams that can be computed in subsequent parsing
               (using the technique of bitstream addition 
               <div class="citation e310" linkend="cameron-EuroPar2011"></div>), namely streams
               marking the element names, attribute names and attribute values of tags. 
            </div>
            <div class="table e311" xml:id="derived">
               <div class="caption e312">
                  <div class="para e313">XML Source Data and Derived Parallel Bit Streams</div>
               </div>
               <div class="colgroup e314" span="1">
                  <div class="metaBox e315"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e622').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e622" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='center'
                           </span><span class="metaAttribute">class='e315'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
                  <div class="metaBox e316"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e623').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e623" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='left'
                           </span><span class="metaAttribute">class='e316'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
               <div class="tbody e317">
                  <div class="tr e318">
                     <div class="td e319"> Source Data </div>
                     <div class="td e320"> 
                        <div class="code e321"> &lt;document&gt;fee&lt;element a1='fie' a2 = 'foe'&gt;&lt;/element&gt;fum&lt;/document&gt; </div>
                     </div>
                  </div>
                  <div class="tr e322">
                     <div class="td e323"> Tag Openers </div>
                     <div class="td e324"> 
                        <div class="code e325">1____________1____________________________1____________1__________</div>
                     </div>
                  </div>
                  <div class="tr e326">
                     <div class="td e327"> Start Tag Marks </div>
                     <div class="td e328"> 
                        <div class="code e329">_1____________1___________________________________________________</div>
                     </div>
                  </div>
                  <div class="tr e330">
                     <div class="td e331"> End Tag Marks </div>
                     <div class="td e332"> 
                        <div class="code e333">___________________________________________1____________1_________</div>
                     </div>
                  </div>
                  <div class="tr e334">
                     <div class="td e335"> Empty Tag Marks </div>
                     <div class="td e336"> 
                        <div class="code e337">__________________________________________________________________</div>
                     </div>
                  </div>
                  <div class="tr e338">
                     <div class="td e339"> Element Names </div>
                     <div class="td e340"> 
                        <div class="code e341">_11111111_____1111111_____________________________________________</div>
                     </div>
                  </div>
                  <div class="tr e342">
                     <div class="td e343"> Attribute Names </div>
                     <div class="td e344"> 
                        <div class="code e345">______________________11_______11_________________________________</div>
                     </div>
                  </div>
                  <div class="tr e346">
                     <div class="td e347"> Attribute Values </div>
                     <div class="td e348"> 
                        <div class="code e349">__________________________111________111__________________________</div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e350"> Two intuitions may help explain how the Parabix approach can lead to improved XML
               parsing performance. The first is that the use of the full register width offers a
               considerable information advantage over sequential byte-at-a-time parsing. That is,
               sequential processing of bytes uses just 8 bits of each register, greatly limiting
               the
               processor resources that are effectively being used at any one time. The second is
               that
               byte-at-a-time loop scanning loops are actually often just computing a single bit
               of
               information per iteration: is the scan complete yet? Rather than computing these
               individual decision-bits, an approach that computes many of them in parallel (e.g.,
               128
               bytes at a time using 128-bit registers) should provide substantial benefit. 
            </div>
            <div class="para e351"> Previous studies have shown that the Parabix approach improves many aspects of XML
               processing, including transcoding 
               <div class="citation e352" linkend="Cameron2008"></div>, character classification and
               validation, tag parsing and well-formedness checking. The first Parabix parser used
               processor bit scan instructions to considerably accelerate sequential scanning loops
               for
               individual characters 
               <div class="citation e353" linkend="CameronHerdyLin2008"></div>. Recent work has incorporated a method
               of parallel scanning using bitstream addition 
               <div class="citation e354" linkend="cameron-EuroPar2011"></div>, as well as
               combining SIMD methods with 4-stage pipeline parallelism to further improve throughput
               
               <div class="citation e355" linkend="HPCA2012"></div>. Although these research prototypes handled the full syntax of
               schema-less XML documents, they lacked the functionality required by full XML parsers.
               
            </div>
            <div class="para e356"> Commercial XML processors support transcoding of multiple character sets and can
               parse and validate against multiple document vocabularies. Additionally, they provide
               API facilities beyond those found in research prototypes, including the widely used
               SAX,
               SAX2 and DOM interfaces. 
            </div>
         </div><a name="SequentialvsParallelParadigmANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e357">
            <div class="title e358">Sequential vs. Parallel Paradigm</div>
            <div class="para e359"> Xerces—like all traditional XML parsers—processes XML documents
               sequentially. Each character is examined to distinguish between the XML-specific markup,
               such as a left angle bracket 
               <div class="code e360">"&lt;"</div>, and the content held within the
               document. As the parser progresses through the document, it alternates between markup
               scanning, validation and content processing modes. 
            </div>
            <div class="para e361"> In other words, Xerces belongs to an equivalence class of applications termed FSM
               	   applications.
               <div class="popupBox e362">
                  <div class="popupLabel" onmouseover="$('#d1e706').show('1000');" onmouseout="$('#d1e706').hide('1000');">[ footnote ]</div>
                  <div id="d1e706" style="display: none;">
                     <div class="footnote" xml:id="FSM">
                        <div class="para e363">Herein FSM applications are considered software systems whose
                           behaviour is defined by the inputs, current state and the events associated with
                           	      transitions of states.
                        </div>
                     </div>
                  </div>
               </div> Each state transition indicates the processing context of
               subsequent characters. Unfortunately, textual data tends to be unpredictable and any
               character could induce a state transition. 
            </div>
            <div class="para e364"> Parabix-style XML parsers utilize a concept of layered processing. A block of source
               text is transformed into a set of lexical bitstreams, which undergo a series of
               operations that can be grouped into logical layers, e.g., transposition, character
               classification, and lexical analysis. Each layer is pipeline parallel and require
               neither speculation nor pre-parsing stages 
               <div class="citation e365" linkend="HPCA2012"></div>. To meet the API requirements
               of the document-ordered Xerces output, the results of the Parabix processing layers
               must
               be interleaved to produce the equivalent behaviour. 
            </div>
         </div>
      </div><a name="ArchitectureANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e366" xml:id="architecture">
         <div class="title e367">Architecture</div><a name="OverviewANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e368">
            <div class="title e369">Overview</div>
            <div class="para e370"> icXML is more than an optimized version of Xerces. Many components were grouped,
               restructured and rearchitected with pipeline parallelism in mind. In this section,
               we
               highlight the core differences between the two systems. As shown in Figure
               	      
               <div class="xref e371" linkend="xerces-arch"></div>, Xerces is comprised of five main modules: the transcoder, reader,
               scanner, namespace binder, and validator. The 
               <div class="emphasis e372" role="ital">Transcoder</div> converts source data into UTF-16 before Xerces parses it as XML;
               the majority of the character set encoding validation is performed as a byproduct
               of
               this process. The 
               <div class="emphasis e373" role="ital">Reader</div> is responsible for the
               streaming and buffering of all raw and transcoded (UTF-16) text. It tracks the current
               line/column position,
               
               performs line-break normalization and validates context-specific character set issues,
               such as tokenization of qualified-names. The 
               <div class="emphasis e374" role="ital">Scanner</div>
               pulls data through the reader and constructs the intermediate representation (IR)
               of the
               document; it deals with all issues related to entity expansion, validates the XML
               well-formedness constraints and any character set encoding issues that cannot be
               completely handled by the reader or transcoder (e.g., surrogate characters, validation
               and normalization of character references, etc.) The 
               <div class="emphasis e375" role="ital">Namespace
                  Binder
               </div> is a core piece of the element stack. It handles namespace scoping
               issues between different XML vocabularies. This allows the scanner to properly select
               the correct schema grammar structures. The 
               <div class="emphasis e376" role="ital">Validator</div>
               takes the IR produced by the Scanner (and potentially annotated by the Namespace Binder)
               and assesses whether the final output matches the user-defined DTD and schema grammar(s)
               before passing it to the end-user. 
            </div>
            <div class="figure e377" xml:id="xerces-arch">
               <div class="title e378">Xerces Architecture</div>
               <div class="mediaobject e379">
                  <div class="imageobject e380">
                     <div class="metaBox e381"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e748').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e748" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e381'
                              </span><span class="metaAttribute">fileref='../../../vol10/graphics/Cameron01/Cameron01-001.png'
                              </span><span class="metaAttribute">format='png'
                              </span><span class="metaAttribute">width='155cm'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e382"> In icXML functions are grouped into logical components. As shown in 
               
               <div class="xref e383" linkend="xerces-arch"></div>, two major categories exist: (1) the Parabix Subsystem and (2) the
               	       Markup Processor. All tasks in (1) use the Parabix Framework 
               <div class="citation e384" linkend="HPCA2012"></div>, which
               represents data as a set of parallel bitstreams. The 
               <div class="emphasis e385" role="ital">Character Set
                  	      Adapter
               </div>, discussed in 
               <div class="xref e386" linkend="character-set-adapter"></div>, mirrors
               Xerces's Transcoder duties; however instead of producing UTF-16 it produces a set
               of
               	      lexical bitstreams, similar to those shown in 
               <div class="xref e387" linkend="CameronHerdyLin2008"></div>. These lexical
               bitstreams are later transformed into UTF-16 in the Content Stream Generator, after
               additional processing is performed. The first precursor to producing UTF-16 is the
               
               <div class="emphasis e388" role="ital">Parallel Markup Parser</div> phase. It takes the lexical
               streams and produces a set of marker bitstreams in which a 1-bit identifies significant
               positions within the input data. One bitstream for each of the critical piece of
               information is created, such as the beginning and ending of start tags, end tags,
               element names, attribute names, attribute values and content. Intra-element
               well-formedness validation is performed as an artifact of this process. Like Xerces,
               icXML must provide the Line and Column position of each error. The 
               <div class="emphasis e389" role="ital">Line-Column Tracker</div> uses the lexical information to keep track of the
               document position(s) through the use of an optimized population count algorithm,
               	      described in 
               <div class="xref e390" linkend="errorhandling"></div>. From here, two data-independent
               branches exist: the Symbol Resolver and Content Preparation Unit. 
            </div>
            <div class="para e391"> A typical XML file contains few unique element and attribute names—but
               each of them will occur frequently. icXML stores these as distinct data structures,
               called symbols, each with their own global identifier (GID). Using the symbol marker
               streams produced by the Parallel Markup Parser, the 
               <div class="emphasis e392" role="ital">Symbol
                  Resolver
               </div> scans through the raw data to produce a sequence of GIDs, called
               the 
               <div class="emphasis e393" role="ital">symbol stream</div>. 
            </div>
            <div class="para e394"> The final components of the Parabix Subsystem are the 
               <div class="emphasis e395" role="ital">Content
                  Preparation Unit
               </div> and 
               <div class="emphasis e396" role="ital">Content Stream
                  Generator
               </div>. The former takes the (transposed) basis bitstreams and selectively
               filters them, according to the information provided by the Parallel Markup Parser,
               and
               	    the latter transforms the filtered streams into the tagged UTF-16 
               <div class="emphasis e397" role="ital">content stream</div>, discussed in 
               <div class="xref e398" linkend="contentstream"></div>. 
            </div>
            <div class="para e399"> Combined, the symbol and content stream form icXML's compressed IR of the XML
               document. The 
               <div class="emphasis e400" role="ital">Markup Processor</div>
               	    parses the IR to
               validate and produce the sequential output for the end user. The 
               <div class="emphasis e401" role="ital">Final WF checker</div> performs inter-element well-formedness validation that
               would be too costly to perform in bit space, such as ensuring every start tag has
               a
               matching end tag. Xerces's namespace binding functionality is replaced by the 
               <div class="emphasis e402" role="ital">Namespace Processor</div>. Unlike Xerces, it is a discrete phase
               that produces a series of URI identifiers (URI IDs), the 
               <div class="emphasis e403" role="ital">URI
                  stream
               </div>, which are associated with each symbol occurrence. This is
               		 discussed in 
               <div class="xref e404" linkend="namespace-handling"></div>. Finally, the 
               <div class="emphasis e405" role="ital">Validation</div> layer implements the Xerces's validator. However,
               preprocessing associated with each symbol greatly reduces the work of this stage.
               
            </div>
            <div class="figure e406" xml:id="icxml-arch">
               <div class="title e407">icXML Architecture</div>
               <div class="mediaobject e408">
                  <div class="imageobject e409">
                     <div class="metaBox e410"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e817').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e817" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e410'
                              </span><span class="metaAttribute">fileref='../../../vol10/graphics/Cameron01/Cameron01-002.png'
                              </span><span class="metaAttribute">format='png'
                              </span><span class="metaAttribute">width='500cm'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </div><a name="CharacterSetAdaptersANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e411" xml:id="character-set-adapter">
            <div class="title e412">Character Set Adapters</div>
            <div class="para e413"> In Xerces, all input is transcoded into UTF-16 to simplify the parsing costs of
               Xerces itself and provide the end-consumer with a single encoding format. In the
               important case of UTF-8 to UTF-16 transcoding, the transcoding costs can be significant,
               because of the need to decode and classify each byte of input, mapping variable-length
               UTF-8 byte sequences into 16-bit UTF-16 code units with bit manipulation operations.
               In
               other cases, transcoding may involve table look-up operations for each byte of input.
               In
               any case, transcoding imposes at least a cost of buffer copying. 
            </div>
            <div class="para e414"> In icXML, however, the concept of Character Set Adapters (CSAs) is used to minimize
               transcoding costs. Given a specified input encoding, a CSA is responsible for checking
               that input code units represent valid characters, mapping the characters of the encoding
               into the appropriate bitstreams for XML parsing actions (i.e., producing the lexical
               item streams), as well as supporting ultimate transcoding requirements. All of this
               work
               is performed using the parallel bitstream representation of the source input. 
            </div>
            <div class="para e415"> An important observation is that many character sets are an extension to the legacy
               7-bit ASCII character set. This includes the various ISO Latin character sets, UTF-8,
               UTF-16 and many others. Furthermore, all significant characters for parsing XML are
               confined to the ASCII repertoire. Thus, a single common set of lexical item calculations
               serves to compute lexical item streams for all such ASCII-based character sets. 
            </div>
            <div class="para e416"> A second observation is that—regardless of which character set is
               used—quite often all of the characters in a particular block of input will be
               within the ASCII range. This is a very simple test to perform using the bitstream
               representation, simply confirming that the bit 0 stream is zero for the entire block.
               For blocks satisfying this test, all logic dealing with non-ASCII characters can simply
               be skipped. Transcoding to UTF-16 becomes trivial as the high eight bitstreams of
               the
               UTF-16 form are each set to zero in this case. 
            </div>
            <div class="para e417"> A third observation is that repeated transcoding of the names of XML elements,
               attributes and so on can be avoided by using a look-up mechanism. That is, the first
               occurrence of each symbol is stored in a look-up table mapping the input encoding
               to a
               numeric symbol ID. Transcoding of the symbol is applied at this time. Subsequent look-up
               operations can avoid transcoding by simply retrieving the stored representation. As
               symbol look up is required to apply various XML validation rules, there is achieves
               the
               effect of transcoding each occurrence without additional cost. 
            </div>
            <div class="para e418"> The cost of individual character transcoding is avoided whenever a block of input
               is
               confined to the ASCII subset and for all but the first occurrence of any XML element
               or
               attribute name. Furthermore, when transcoding is required, the parallel bitstream
               representation supports efficient transcoding operations. In the important case of
               UTF-8
               to UTF-16 transcoding, the corresponding UTF-16 bitstreams can be calculated in bit
               	      parallel fashion based on UTF-8 streams 
               <div class="citation e419" linkend="Cameron2008"></div>, and all but the final bytes
               of multi-byte sequences can be marked for deletion as discussed in the following
               subsection. In other cases, transcoding within a block only need be applied for
               non-ASCII bytes, which are conveniently identified by iterating through the bit 0
               stream
               using bit scan operations. 
            </div>
         </div><a name="CombinedParallelFilteringANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e420" xml:id="par-filter">
            <div class="title e421">Combined Parallel Filtering</div>
            <div class="para e422"> As just mentioned, UTF-8 to UTF-16 transcoding involves marking all but the last
               bytes of multi-byte UTF-8 sequences as positions for deletion. For example, the two
               Chinese characters 
               <div class="code e423">你好</div> are represented as two
               three-byte UTF-8 sequences 
               <div class="code e424">E4 BD A0</div> and 
               <div class="code e425">E5 A5 BD</div> while the
               UTF-16 representation must be compressed down to the two code units 
               <div class="code e426">4F60</div>
               and 
               <div class="code e427">597D</div>. In the bit parallel representation, this corresponds to a
               reduction from six bit positions representing UTF-8 code units (bytes) down to just
               two
               bit positions representing UTF-16 code units (double bytes). This compression may
               be
               achieved by arranging to calculate the correct UTF-16 bits at the final position of
               each
               sequence and creating a deletion mask to mark the first two bytes of each 3-byte
               sequence for deletion. In this case, the portion of the mask corresponding to these
               input bytes is the bit sequence 
               <div class="code e428">110110</div>. Using this approach, transcoding
               may then be completed by applying parallel deletion and inverse transposition of the
               UTF-16 bitstreams 
               <div class="citation e429" linkend="Cameron2008"></div>. 
            </div>
            <div class="para e430"> Rather than immediately paying the costs of deletion and transposition just for
               transcoding, however, icXML defers these steps so that the deletion masks for several
               stages of processing may be combined. In particular, this includes core XML requirements
               to normalize line breaks and to replace character reference and entity references
               by
               their corresponding text. In the case of line break normalization, all forms of line
               breaks, including bare carriage returns (CR), line feeds (LF) and CR-LF combinations
               must be normalized to a single LF character in each case. In icXML, this is achieved
               by
               first marking CR positions, performing two bit parallel operations to transform the
               marked CRs into LFs, and then marking for deletion any LF that is found immediately
               after the marked CR as shown by the Pablo source code in 
               	      
               <div class="xref e431" linkend="fig-LBnormalization"></div>.
               	      
               <div class="figure e432" xml:id="fig-LBnormalization">
                  <div class="title e433">Line Break Normalization Logic</div>
                  <div class="programlisting e434" xml:space="preserve">
                     # XML 1.0 line-break normalization rules.
                     if lex.CR:
                     # Modify CR (#x0D) to LF (#x0A)
                     u16lo.bit_5 ^= lex.CR
                     u16lo.bit_6 ^= lex.CR
                     u16lo.bit_7 ^= lex.CR
                     CRLF = pablo.Advance(lex.CR) &amp; lex.LF
                     callouts.delmask |= CRLF
                     # Adjust LF streams for line/column tracker
                     lex.LF |= lex.CR
                     lex.LF ^= CRLF
                     
                  </div>
               </div>
               
            </div>
            <div class="para e435"> In essence, the deletion masks for transcoding and for line break normalization each
               represent a bitwise filter; these filters can be combined using bitwise-or so that
               the
               parallel deletion algorithm need only be applied once. 
            </div>
            <div class="para e436"> A further application of combined filtering is the processing of XML character and
               	   entity references. Consider, for example, the references 
               <div class="code e437">&amp;amp;</div> or
               	     
               <div class="code e438">&amp;#x3C;</div> which must be replaced in XML processing with the single
               
               <div class="code e439">&amp;</div> and 
               <div class="code e440">&lt;</div> characters, respectively. The
               approach in icXML is to mark all but the first character positions of each reference
               for
               deletion, leaving a single character position unmodified. Thus, for the references
               
               <div class="code e441">&amp;amp;</div> or 
               <div class="code e442">&amp;#x3C;</div> the masks 
               <div class="code e443">01111</div> and
               
               <div class="code e444">011111</div> are formed and combined into the overall deletion mask. After the
               deletion and inverse transposition operations are finally applied, a post-processing
               step inserts the proper character at these positions. One note about this process
               is
               that it is speculative; references are assumed to generally be replaced by a single
               UTF-16 code unit. In the case, that this is not true, it is addressed in
               post-processing. 
            </div>
            <div class="para e445"> The final step of combined filtering occurs during the process of reducing markup
               data to tag bytes preceding each significant XML transition as described in
               	      
               <div class="xref e446" linkend="contentstream"></div>. Overall, icXML avoids separate buffer copying
               operations for each of the these filtering steps, paying the cost of parallel deletion
               and inverse transposition only once. Currently, icXML employs the parallel-prefix
               compress algorithm of Steele 
               <div class="citation e447" linkend="HackersDelight"></div>. Performance is independent of the
               number of positions deleted. Future versions of icXML are expected to take advantage
               of
               the parallel extract operation 
               <div class="citation e448" linkend="HilewitzLee2006"></div> that Intel is now providing in its
               Haswell architecture. 
            </div>
         </div><a name="ContentStreamANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e449" xml:id="contentstream">
            <div class="title e450">Content Stream</div>
            <div class="para e451"> A relatively-unique concept for icXML is the use of a filtered content stream.
               Rather that parsing an XML document in its original format, the input is transformed
               into one that is easier for the parser to iterate through and produce the sequential
               output. In 
               <div class="xref e452" linkend="fig-parabix2"></div>, the source data
               	     
               <div class="code e453"> &lt;document&gt;fee&lt;element a1='fie' a2 = 'foe'&gt;&lt;/element&gt;fum&lt;/document&gt;</div>
               	     is transformed into 
               
               
               <div class="emphasis e454" role="ital">
                  <div class="code e455">0</div>
               </div>
               <div class="code e456">fee</div>
               <div class="emphasis e457" role="ital">
                  <div class="code e458">0</div>
               </div>
               <div class="code e459">=fie</div>
               <div class="emphasis e460" role="ital">
                  <div class="code e461">0</div>
               </div>
               <div class="code e462">=foe</div>
               <div class="emphasis e463" role="ital">
                  <div class="code e464">0</div>
               </div>
               <div class="code e465">&gt;</div>
               <div class="emphasis e466" role="ital">
                  <div class="code e467">0</div>
               </div>
               <div class="code e468">/fum</div>
               <div class="emphasis e469" role="ital">
                  <div class="code e470">0</div>
               </div>
               <div class="code e471">/</div>
               
               through the parallel filtering algorithm, described in 
               <div class="xref e472" linkend="par-filter"></div>. 
            </div>
            <div class="table e473" xml:id="fig-parabix2">
               <div class="caption e474">
                  <div class="para e475">XML Source Data and Derived Parallel Bit Streams</div>
               </div>
               <div class="colgroup e476" span="1">
                  <div class="metaBox e477"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e959').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e959" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='center'
                           </span><span class="metaAttribute">class='e477'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
                  <div class="metaBox e478"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e960').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e960" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='left'
                           </span><span class="metaAttribute">class='e478'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
               <div class="tbody e479">
                  <div class="tr e480">
                     <div class="td e481"> Source Data </div>
                     <div class="td e482">
                        	                            
                        <div class="code e483"> &lt;document&gt;fee&lt;element a1='fie' a2 = 'foe'&gt;&lt;/element&gt;fum&lt;/document&gt; </div>
                     </div>
                  </div>
                  <div class="tr e484">
                     <div class="td e485"> String Ends </div>
                     <div class="td e486"> 
                        <div class="code e487">1____________1_______________1__________1_1____________1__________</div>
                     </div>
                  </div>
                  <div class="tr e488">
                     <div class="td e489"> Markup Identifiers </div>
                     <div class="td e490">         
                        <div class="code e491">_________1______________1_________1______1_1____________1_________</div>
                     </div>
                  </div>
                  <div class="tr e492">
                     <div class="td e493"> Deletion Mask </div>
                     <div class="td e494">              
                        <div class="code e495">_11111111_____1111111111_1____1111_11_______11111111_____111111111</div>
                     </div>
                  </div>
                  <div class="tr e496">
                     <div class="td e497"> Undeleted Data </div>
                     <div class="td e498"> 
                        <div class="emphasis e499" role="ital">
                           <div class="code e500">0</div>
                        </div>
                        <div class="code e501">________&gt;fee</div>
                        <div class="emphasis e502" role="ital">
                           <div class="code e503">0</div>
                        </div>
                        <div class="code e504">__________=_fie</div>
                        <div class="emphasis e505" role="ital">
                           <div class="code e506">0</div>
                        </div>
                        <div class="code e507">____=__foe</div>
                        <div class="emphasis e508" role="ital">
                           <div class="code e509">0</div>
                        </div>
                        <div class="code e510">&gt;</div>
                        <div class="emphasis e511" role="ital">
                           <div class="code e512">0</div>
                        </div>
                        <div class="code e513">/________fum</div>
                        <div class="emphasis e514" role="ital">
                           <div class="code e515">0</div>
                        </div>
                        <div class="code e516">/_________</div>
                        
                        
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e517"> Combined with the symbol stream, the parser traverses the content stream to
               effectively reconstructs the input document in its output form. The initial 
               <div class="emphasis e518" role="ital">0</div> indicates an empty content string. The following
               
               <div class="code e519">&gt;</div> indicates that a start tag without any attributes is the first
               element in this text and the first unused symbol, 
               <div class="code e520">document</div>, is the element
               name. Succeeding that is the content string 
               <div class="code e521">fee</div>, which is null-terminated
               in accordance with the Xerces API specification. Unlike Xerces, no memory-copy
               operations are required to produce these strings, which as
               	      
               <div class="xref e522" linkend="xerces-profile"></div> shows accounts for 6.83% of Xerces's execution time.
               Additionally, it is cheap to locate the terminal character of each string: using the
               String End bitstream, the Parabix Subsystem can effectively calculate the offset of
               each
               null character in the content stream in parallel, which in turn means the parser can
               directly jump to the end of every string without scanning for it. 
            </div>
            <div class="para e523"> Following 
               <div class="code e524">'fee'</div> is a 
               <div class="code e525">=</div>, which marks the
               existence of an attribute. Because all of the intra-element was performed in the Parabix
               Subsystem, this must be a legal attribute. Since attributes can only occur within
               start
               tags and must be accompanied by a textual value, the next symbol in the symbol stream
               must be the element name of a start tag, and the following one must be the name of
               the
               attribute and the string that follows the 
               <div class="code e526">=</div> must be its value. However, the
               subsequent 
               <div class="code e527">=</div> is not treated as an independent attribute because the parser
               has yet to read a 
               <div class="code e528">&gt;</div>, which marks the end of a start tag. Thus only
               one symbol is taken from the symbol stream and it (along with the string value) is
               added
               to the element. Eventually the parser reaches a 
               <div class="code e529">/</div>, which marks the
               existence of an end tag. Every end tag requires an element name, which means they
               require a symbol. Inter-element validation whenever an empty tag is detected to ensure
               that the appropriate scope-nesting rules have been applied. 
            </div>
         </div><a name="NamespaceHandlingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e530" xml:id="namespace-handling">
            <div class="title e531">Namespace Handling</div>
            <div class="para e532"> In XML, namespaces prevents naming conflicts when multiple vocabularies are used
               together. It is especially important when a vocabulary application-dependant meaning,
               such as when XML or SVG documents are embedded within XHTML files. Namespaces are
               bound
               to uniform resource identifiers (URIs), which are strings used to identify specific
               names or resources. On line 1 in 
               <div class="xref e533" linkend="namespace-ex"></div>, the 
               <div class="code e534">xmlns</div>
               attribute instructs the XML processor to bind the prefix 
               <div class="code e535">p</div> to the URI
               '
               <div class="code e536">pub.net</div>' and the default (empty) prefix to
               
               <div class="code e537">book.org</div>. Thus to the XML processor, the 
               <div class="code e538">title</div> on line 2
               and 
               <div class="code e539">price</div> on line 4 both read as
               
               <div class="code e540">"book.org":title</div> and
               
               <div class="code e541">"book.org":price</div> respectively, whereas on line 3 and
               5, 
               <div class="code e542">p:name</div> and 
               <div class="code e543">price</div> are seen as
               
               <div class="code e544">"pub.net":name</div> and
               
               <div class="code e545">"pub.net":price</div>. Even though the actual element name
               
               <div class="code e546">price</div>, due to namespace scoping rules they are viewed as two
               uniquely-named items because the current vocabulary is determined by the namespace(s)
               that are in-scope. 
            </div>
            <div class="table e547" xml:id="namespace-ex">
               <div class="caption e548">
                  <div class="para e549">XML Namespace Example</div>
               </div>
               <div class="colgroup e550" span="1">
                  <div class="metaBox e551"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1120').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1120" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='center'
                           </span><span class="metaAttribute">class='e551'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
                  <div class="metaBox e552"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1121').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1121" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='left'
                           </span><span class="metaAttribute">class='e552'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
               <div class="tbody e553">
                  <div class="tr e554">
                     <div class="td e555">1. </div>
                     <div class="td e556">&lt;book xmlns:p="pub.net" xmlns="book.org"&gt; </div>
                  </div>
                  <div class="tr e557">
                     <div class="td e558">2. </div>
                     <div class="td e559">  &lt;title&gt;BOOK NAME&lt;/title&gt; </div>
                  </div>
                  <div class="tr e560">
                     <div class="td e561">3. </div>
                     <div class="td e562">  &lt;p:name&gt;PUBLISHER NAME&lt;/p:name&gt; </div>
                  </div>
                  <div class="tr e563">
                     <div class="td e564">4. </div>
                     <div class="td e565">  &lt;price&gt;X&lt;/price&gt; </div>
                  </div>
                  <div class="tr e566">
                     <div class="td e567">5. </div>
                     <div class="td e568">  &lt;price xmlns="publisher.net"&gt;Y&lt;/price&gt; </div>
                  </div>
                  <div class="tr e569">
                     <div class="td e570">6. </div>
                     <div class="td e571">&lt;/book&gt; </div>
                  </div>
               </div>
            </div>
            <div class="para e572"> In both Xerces and icXML, every URI has a one-to-one mapping to a URI ID. These
               persist for the lifetime of the application through the use of a global URI pool.
               Xerces
               maintains a stack of namespace scopes that is pushed (popped) every time a start tag
               (end tag) occurs in the document. Because a namespace declaration affects the entire
               element, it must be processed prior to grammar validation. This is a costly process
               considering that a typical namespaced XML document only comes in one of two forms:
               (1)
               those that declare a set of namespaces upfront and never change them, and (2) those
               that
               repeatedly modify the namespaces in predictable patterns. 
            </div>
            <div class="para e573"> For that reason, icXML contains an independent namespace stack and utilizes bit
               vectors to cheaply perform 
                When a prefix is
               declared (e.g., 
               <div class="code e574">xmlns:p="pub.net"</div>), a namespace binding
               is created that maps the prefix (which are assigned Prefix IDs in the symbol resolution
               process) to the URI. Each unique namespace binding has a unique namespace id (NSID)
               and
               every prefix contains a bit vector marking every NSID that has ever been associated
               with
               	      it within the document. For example, in 
               <div class="xref e575" linkend="namespace-ex"></div>, the prefix binding
               set of 
               <div class="code e576">p</div> and 
               <div class="code e577">xmlns</div> would be 
               <div class="code e578">01</div> and
               
               <div class="code e579">11</div> respectively. To resolve the in-scope namespace binding for each prefix,
               a bit vector of the currently visible namespaces is maintained by the system. By ANDing
               the prefix bit vector with the currently visible namespaces, the in-scope NSID can
               be
               found using a bit-scan intrinsic. A namespace binding table, similar to 
               
               <div class="xref e580" linkend="namespace-binding"></div>, provides the actual URI ID. 
            </div>
            <div class="table e581" xml:id="namespace-binding">
               <div class="caption e582">
                  <div class="para e583">Namespace Binding Table Example</div>
               </div>
               <div class="colgroup e584" span="1">
                  <div class="metaBox e585"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1186').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1186" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='center'
                           </span><span class="metaAttribute">class='e585'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
                  <div class="metaBox e586"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1187').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1187" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='center'
                           </span><span class="metaAttribute">class='e586'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
                  <div class="metaBox e587"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1188').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1188" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='center'
                           </span><span class="metaAttribute">class='e587'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
                  <div class="metaBox e588"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1189').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1189" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='center'
                           </span><span class="metaAttribute">class='e588'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
                  <div class="metaBox e589"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1190').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1190" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='center'
                           </span><span class="metaAttribute">class='e589'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
               <div class="thead e590">
                  <div class="tr e591">
                     <div class="th e592">NSID </div>
                     <div class="th e593"> Prefix </div>
                     <div class="th e594"> URI </div>
                     <div class="th e595"> Prefix ID </div>
                     <div class="th e596"> URI ID </div>
                  </div>
               </div>
               <div class="tbody e597">
                  <div class="tr e598">
                     <div class="td e599">0 </div>
                     <div class="td e600"> 
                        <div class="code e601"> p</div> 
                     </div>
                     <div class="td e602"> 
                        <div class="code e603"> pub.net</div> 
                     </div>
                     <div class="td e604"> 0 </div>
                     <div class="td e605"> 0 </div>
                  </div>
                  <div class="tr e606">
                     <div class="td e607">1 </div>
                     <div class="td e608"> 
                        <div class="code e609"> xmlns</div> 
                     </div>
                     <div class="td e610"> 
                        <div class="code e611"> books.org</div> 
                     </div>
                     <div class="td e612"> 1 </div>
                     <div class="td e613"> 1 </div>
                  </div>
                  <div class="tr e614">
                     <div class="td e615">2 </div>
                     <div class="td e616"> 
                        <div class="code e617"> xmlns</div> 
                     </div>
                     <div class="td e618"> 
                        <div class="code e619"> pub.net</div> 
                     </div>
                     <div class="td e620"> 1 </div>
                     <div class="td e621"> 0 </div>
                  </div>
               </div>
            </div>
            <div class="para e622">
               
               
               
               
               
            </div>
            <div class="para e623"> To ensure that scoping rules are adhered to, whenever a start tag is encountered,
               any modification to the currently visible namespaces is calculated and stored within
               a
               stack of bit vectors denoting the locally modified namespace bindings. When an end
               tag
               is found, the currently visible namespaces is XORed with the vector at the top of
               the
               stack. This allows any number of changes to be performed at each scope-level with
               a
               constant time.
               
               
            </div>
         </div><a name="ErrorHandlingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e624" xml:id="errorhandling">
            <div class="title e625">Error Handling</div>
            <div class="para e626">
               
               Xerces outputs error messages in two ways: through the programmer API and as thrown
               objects for fatal errors. As Xerces parses a file, it uses context-dependant logic
               to
               assess whether the next character is legal; if not, the current state determines the
               type and severity of the error. icXML emits errors in the similar manner—but
               how it discovers them is substantially different. Recall that in Figure
               
               <div class="xref e627" linkend="icxml-arch"></div>, icXML is divided into two sections: the Parabix Subsystem and
               Markup Processor, each with its own system for detecting and producing error messages.
               
            </div>
            <div class="para e628"> Within the Parabix Subsystem, all computations are performed in parallel, a block
               at
               a time. Errors are derived as artifacts of bitstream calculations, with a 1-bit marking
               the byte-position of an error within a block, and the type of error is determined
               by the
               equation that discovered it. The difficulty of error processing in this section is
               that
               in Xerces the line and column number must be given with every error production. Two
               major issues exist because of this: (1) line position adheres to XML white-normalization
               rules; as such, some sequences of characters, e.g., a carriage return followed by
               a line
               feed, are counted as a single new line character. (2) column position is counted in
               characters, not bytes or code units; thus multi-code-unit code-points and surrogate
               character pairs are all counted as a single column position. Note that typical XML
               documents are error-free but the calculation of the line/column position is a constant
               overhead in Xerces.  To
               reduce this, icXML pushes the bulk cost of the line/column calculation to the occurrence
               of the error and performs the minimal amount of book-keeping necessary to facilitate
               it.
               icXML leverages the byproducts of the Character Set Adapter (CSA) module and amalgamates
               the information within the Line Column Tracker (LCT). One of the CSA's major
               responsibilities is transcoding an input text.
                During this process,
               white-space normalization rules are applied and multi-code-unit and surrogate characters
               are detected and validated. A 
               <div class="emphasis e629" role="ital">line-feed bitstream</div>,
               which marks the positions of the normalized new lines characters, is a natural
               derivative of this process. Using an optimized population count algorithm, the line
               count can be summarized cheaply for each valid block of text.
                Column position is more
               difficult to calculate. It is possible to scan backwards through the bitstream of
               new
               line characters to determine the distance (in code-units) between the position between
               which an error was detected and the last line feed. However, this distance may exceed
               than the actual character position for the reasons discussed in (2). To handle this,
               the
               CSA generates a 
               <div class="emphasis e630" role="ital">skip mask</div> bitstream by ORing together
               many relevant bitstreams, such as all trailing multi-code-unit and surrogate characters,
               and any characters that were removed during the normalization process. When an error
               is
               detected, the sum of those skipped positions is subtracted from the distance to
               determine the actual column number. 
            </div>
            <div class="para e631"> The Markup Processor is a state-driven machine. As such, error detection within it
               is very similar to Xerces. However, reporting the correct line/column is a much more
               difficult problem. The Markup Processor parses the content stream, which is a series
               of
               tagged UTF-16 strings. Each string is normalized in accordance with the XML
               specification. All symbol data and unnecessary whitespace is eliminated from the stream;
               thus its impossible to derive the current location using only the content stream.
               To
               calculate the location, the Markup Processor borrows three additional pieces of
               information from the Parabix Subsystem: the line-feed, skip mask, and a 
               <div class="emphasis e632" role="ital">deletion mask stream</div>, which is a bitstream denoting the
               (code-unit) position of every datum that was suppressed from the source during the
               production of the content stream. Armed with these, it is possible to calculate the
               actual line/column using the same system as the Parabix Subsystem until the sum of
               the
               negated deletion mask stream is equal to the current position. 
            </div>
         </div>
      </div><a name="MultithreadingwithPipelineParallelismANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e633" xml:id="multithread">
         <div class="title e634">Multithreading with Pipeline Parallelism</div>
         <div class="para e635"> As discussed in section 
            <div class="xref e636" linkend="background-xerces"></div>, Xerces can be considered a FSM
            application. These are "embarrassingly
            sequential."
            <div class="citation e637" linkend="Asanovic-EECS-2006-183"></div> and notoriously difficult to
            parallelize. However, icXML is designed to organize processing into logical layers.
            In
            particular, layers within the Parabix Subsystem are designed to operate over significant
            segments of input data before passing their outputs on for subsequent processing.
            This fits
            well into the general model of pipeline parallelism, in which each thread is in charge
            of a
            single module or group of modules. 
         </div>
         <div class="para e638"> The most straightforward division of work in icXML is to separate the Parabix Subsystem
            and the Markup Processor into distinct logical layers into two separate stages. The
            resultant application, 
            <div class="emphasis e639" role="ital">icXML-p</div>, is a course-grained
            software-pipeline application. In this case, the Parabix Subsystem thread
            
            <div class="code e640">T
               <div class="subscript e641">1</div>
            </div> reads 16k of XML input 
            <div class="code e642">I</div> at a
            time and produces the content, symbol and URI streams, then stores them in a pre-allocated
            shared data structure 
            <div class="code e643">S</div>. The Markup Processor thread
            
            <div class="code e644">T
               <div class="subscript e645">2</div>
            </div> consumes 
            <div class="code e646">S</div>, performs well-formedness
            and grammar-based validation, and the provides parsed XML data to the application
            through
            the Xerces API. The shared data structure is implemented using a ring buffer, where
            every
            entry contains an independent set of data streams. In the examples of
            	   
            <div class="xref e647" linkend="threads_timeline1"></div>, the ring buffer has four entries. A
            lock-free mechanism is applied to ensure that each entry can only be read or written
            by one
            thread at the same time. In  
            <div class="xref e648" linkend="threads_timeline1"></div> the processing time of
            
            <div class="code e649">T
               <div class="subscript e650">1</div>
            </div> is longer than
            
            <div class="code e651">T
               <div class="subscript e652">2</div>
            </div>; thus 
            <div class="code e653">T
               <div class="subscript e654">2</div>
            </div> always
            waits for 
            <div class="code e655">T
               <div class="subscript e656">1</div>
            </div> to write to the shared memory.  
            	 
            <div class="xref e657" linkend="threads_timeline2"></div> illustrates the scenario in which
            
            <div class="code e658">T
               <div class="subscript e659">1</div>
            </div> is faster and must wait for
            
            <div class="code e660">T
               <div class="subscript e661">2</div>
            </div> to finish reading the shared data before it can
            reuse the memory space. 
         </div>
         <div class="para e662">
            	
            <div class="figure e663" xml:id="threads_timeline1">
               <div class="title e664">Thread Balance in Two-Stage Pipelines: Stage 1 Dominant</div>
               <div class="mediaobject e665">
                  <div class="imageobject e666">
                     <div class="metaBox e667"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1375').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1375" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e667'
                              </span><span class="metaAttribute">fileref='../../../vol10/graphics/Cameron01/Cameron01-003.png'
                              </span><span class="metaAttribute">format='png'
                              </span><span class="metaAttribute">width='500cm'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            	
            <div class="figure e668" xml:id="threads_timeline2">
               <div class="title e669">Thread Balance in Two-Stage Pipelines: Stage 2 Dominant</div>
               <div class="mediaobject e670">
                  <div class="imageobject e671">
                     <div class="metaBox e672"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1382').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1382" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e672'
                              </span><span class="metaAttribute">fileref='../../../vol10/graphics/Cameron01/Cameron01-004.png'
                              </span><span class="metaAttribute">format='png'
                              </span><span class="metaAttribute">width='500cm'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            
         </div>
         <div class="para e673"> Overall, our design is intended to benefit a range of applications. Conceptually,
            we
            consider two design points. The first, the parsing performed by the Parabix Subsystem
            dominates at 67% of the overall cost, with the cost of application processing (including
            the driver logic within the Markup Processor) at 33%. The second is almost the opposite
            scenario, the cost of application processing dominates at 60%, while the cost of XML
            parsing represents an overhead of 40%. 
         </div>
         <div class="para e674"> Our design is predicated on a goal of using the Parabix framework to achieve a 50%
            to
            100% improvement in the parsing engine itself. In a best case scenario, a 100% improvement
            of the Parabix Subsystem for the design point in which XML parsing dominates at 67%
            of the
            total application cost. In this case, the single-threaded icXML should achieve a 1.5x
            speedup over Xerces so that the total application cost reduces to 67% of the original.
            However, in icXML-p, our ideal scenario gives us two well-balanced threads each performing
            about 33% of the original work. In this case, Amdahl's law predicts that we could
            expect up
            to a 3x speedup at best. 
         </div>
         <div class="para e675"> At the other extreme of our design range, we consider an application in which core
            parsing cost is 40%. Assuming the 2x speedup of the Parabix Subsystem over the
            corresponding Xerces core, single-threaded icXML delivers a 25% speedup. However,
            the most
            significant aspect of our two-stage multi-threaded design then becomes the ability
            to hide
            the entire latency of parsing within the serial time required by the application.
            In this
            case, we achieve an overall speedup in processing time by 1.67x. 
         </div>
         <div class="para e676"> Although the structure of the Parabix Subsystem allows division of the work into
            several pipeline stages and has been demonstrated to be effective for four pipeline
            stages
            in a research prototype 
            <div class="citation e677" linkend="HPCA2012"></div>, our analysis here suggests that the further
            pipelining of work within the Parabix Subsystem is not worthwhile if the cost of
            application logic is little as 33% of the end-to-end cost using Xerces. To achieve
            benefits
            of further parallelization with multi-core technology, there would need to be reductions
            in
            the cost of application logic that could match reductions in core parsing cost. 
         </div>
      </div><a name="PerformanceANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e678" xml:id="performance">
         <div class="title e679">Performance</div>
         <div class="para e680"> We evaluate Xerces-C++ 3.1.1, icXML, icXML-p against two benchmarking applications:
            the
            Xerces C++ SAXCount sample application, and a real world GML to SVG transformation
            application. We investigated XML parser performance using an Intel Core i7 quad-core
            (Sandy
            Bridge) processor (3.40GHz, 4 physical cores, 8 threads (2 per core), 32+32 kB (per
            core)
            L1 cache, 256 kB (per core) L2 cache, 8 MB L3 cache) running the 64-bit version of
            Ubuntu
            12.04 (Linux). 
         </div>
         <div class="para e681"> We analyzed the execution profiles of each XML parser using the performance counters
            found in the processor. We chose several key hardware events that provide insight
            into the
            profile of each application and indicate if the processor is doing useful work. The
            set of
            events included in our study are: processor cycles, branch instructions, branch
            mispredictions, and cache misses. The Performance Application Programming Interface
            (PAPI)
            Version 5.5.0 
            <div class="citation e682" linkend="papi"></div> toolkit was installed on the test system to facilitate the
            collection of hardware performance monitoring statistics. In addition, we used the
            Linux
            perf 
            <div class="citation e683" linkend="perf"></div> utility to collect per core hardware events. 
         </div><a name="XercesC++SAXCountANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e684">
            <div class="title e685">Xerces C++ SAXCount</div>
            <div class="para e686"> Xerces comes with sample applications that demonstrate salient features of the
               parser. SAXCount is the simplest such application: it counts the elements, attributes
               and characters of a given XML file using the (event based) SAX API and prints out
               the
               totals. 
            </div>
            <div class="para e687"> 
               <div class="xref e688" linkend="XMLdocs"></div> shows the document characteristics of the XML input files
               selected for the Xerces C++ SAXCount benchmark. The jaw.xml represents document-oriented
               XML inputs and contains the three-byte and four-byte UTF-8 sequence required for the
               UTF-8 encoding of Japanese characters. The remaining data files are data-oriented
               XML
               documents and consist entirely of single byte encoded ASCII characters. 
               
               <div class="table e689" xml:id="XMLdocs">
                  <div class="caption e690">
                     <div class="para e691">XML Document Characteristics</div>
                  </div>
                  <div class="colgroup e692" span="1">
                     <div class="metaBox e693"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1419').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1419" class="metaSource" style="display:none;">                
                           &lt;col<span class="metaAttribute">align='left'
                              </span><span class="metaAttribute">class='e693'
                              </span><span class="metaAttribute">span='1'
                              </span><span class="metaAttribute">valign='top'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                     <div class="metaBox e694"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1420').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1420" class="metaSource" style="display:none;">                
                           &lt;col<span class="metaAttribute">align='center'
                              </span><span class="metaAttribute">class='e694'
                              </span><span class="metaAttribute">span='1'
                              </span><span class="metaAttribute">valign='top'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                     <div class="metaBox e695"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1421').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1421" class="metaSource" style="display:none;">                
                           &lt;col<span class="metaAttribute">align='center'
                              </span><span class="metaAttribute">class='e695'
                              </span><span class="metaAttribute">span='1'
                              </span><span class="metaAttribute">valign='top'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                     <div class="metaBox e696"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1422').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1422" class="metaSource" style="display:none;">                
                           &lt;col<span class="metaAttribute">align='center'
                              </span><span class="metaAttribute">class='e696'
                              </span><span class="metaAttribute">span='1'
                              </span><span class="metaAttribute">valign='top'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                     <div class="metaBox e697"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1423').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1423" class="metaSource" style="display:none;">                
                           &lt;col<span class="metaAttribute">align='center'
                              </span><span class="metaAttribute">class='e697'
                              </span><span class="metaAttribute">span='1'
                              </span><span class="metaAttribute">valign='top'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
                  <div class="tbody e698">
                     <div class="tr e699">
                        <div class="td e700">File Name 		</div>
                        <div class="td e701"> jaw.xml	 	</div>
                        <div class="td e702"> road.gml 	</div>
                        <div class="td e703"> po.xml	</div>
                        <div class="td e704"> soap.xml </div>
                     </div>
                     <div class="tr e705">
                        <div class="td e706">File Type 		</div>
                        <div class="td e707"> document 		</div>
                        <div class="td e708"> data		</div>
                        <div class="td e709"> data		</div>
                        <div class="td e710"> data	 </div>
                     </div>
                     <div class="tr e711">
                        <div class="td e712">File Size (kB) 		</div>
                        <div class="td e713"> 7343 			</div>
                        <div class="td e714"> 11584 	</div>
                        <div class="td e715"> 76450		</div>
                        <div class="td e716"> 2717 </div>
                     </div>
                     <div class="tr e717">
                        <div class="td e718">Markup Item Count 	</div>
                        <div class="td e719"> 74882 		</div>
                        <div class="td e720"> 280724  	</div>
                        <div class="td e721"> 4634110	</div>
                        <div class="td e722"> 18004 </div>
                     </div>
                     <div class="tr e723">
                        <div class="td e724">Markup Density 		</div>
                        <div class="td e725"> 0.13 			</div>
                        <div class="td e726"> 0.57  	</div>
                        <div class="td e727"> 0.76		</div>
                        <div class="td e728"> 0.87	</div>
                     </div>
                  </div>
               </div>           
               
            </div>
            <div class="para e729"> A key predictor of the overall parsing performance of an XML file is markup
               	   density
               <div class="popupBox e730">
                  <div class="popupLabel" onmouseover="$('#d1e1483').show('1000');" onmouseout="$('#d1e1483').hide('1000');">[ footnote ]</div>
                  <div id="d1e1483" style="display: none;">
                     <div class="footnote">
                        <div class="para e731">Markup Density: the ratio of markup bytes used to define the structure
                           	     of the document vs. its file size.
                        </div>
                     </div>
                  </div>
               </div>. This metric has substantial influence on the
               performance of traditional recursive descent XML parsers because it directly corresponds
               to the number of state transitions that occur when parsing a document. We use a mixture
               of document-oriented and data-oriented XML files to analyze performance over a spectrum
               of markup densities. 
            </div>
            <div class="para e732"> 
               <div class="xref e733" linkend="perf_SAX"></div> compares the performance of Xerces, icXML and pipelined icXML
               in terms of CPU cycles per byte for the SAXCount application. The speedup for icXML
               over
               Xerces is 1.3x to 1.8x. With two threads on the multicore machine, icXML-p can achieve
               speedup up to 2.7x. Xerces is substantially slowed by dense markup but icXML is less
               affected through a reduction in branches and the use of parallel-processing techniques.
               icXML-p performs better as markup-density increases because the work performed by
               each
               stage is well balanced in this application. 
            </div>
            <div class="para e734">
               	
               <div class="figure e735" xml:id="perf_SAX">
                  <div class="title e736">SAXCount Performance Comparison</div>
                  <div class="mediaobject e737">
                     <div class="imageobject e738">
                        <div class="metaBox e739"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1498').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1498" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e739'
                                 </span><span class="metaAttribute">fileref='../../../vol10/graphics/Cameron01/Cameron01-005.png'
                                 </span><span class="metaAttribute">format='png'
                                 </span><span class="metaAttribute">width='500cm'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
         </div><a name="GML2SVGANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e740">
            <div class="title e741">GML2SVG</div>
            <div class="para e742">	 As a more substantial application of XML processing, the GML-to-SVG (GML2SVG) application
               was chosen.   This application transforms geospatially encoded data represented using
               
               an XML representation in the form of Geography Markup Language (GML) 
               <div class="citation e743" linkend="lake2004geography"></div> 
               into a different XML format  suitable for displayable maps: 
               Scalable Vector Graphics (SVG) format 
               <div class="citation e744" linkend="lu2007advances"></div>. In the GML2SVG benchmark, GML feature elements 
               and GML geometry elements tags are matched. GML coordinate data are then extracted
               
               and transformed to the corresponding SVG path data encodings. 
               Equivalent SVG path elements are generated and output to the destination 
               SVG document.  The GML2SVG application is thus considered typical of a broad
               class of XML applications that parse and extract information from 
               a known XML format for the purpose of analysis and restructuring to meet
               the requirements of an alternative format.
            </div>
            <div class="para e745">Our GML to SVG data translations are executed on GML source data 
               modelling the city of Vancouver, British Columbia, Canada. 
               The GML source document set 
               consists of 46 distinct GML feature layers ranging in size from approximately 9 KB
               to 125.2 MB 
               and with an average document size of 18.6 MB. Markup density ranges from approximately
               0.045 to 0.719 
               and with an average markup density of 0.519. In this performance study, 
               213.4 MB of source GML data generates 91.9 MB of target SVG data.
            </div>
            <div class="figure e746" xml:id="perf_GML2SVG">
               <div class="title e747">Performance Comparison for GML2SVG</div>
               <div class="mediaobject e748">
                  <div class="imageobject e749">
                     <div class="metaBox e750"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1516').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1516" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e750'
                              </span><span class="metaAttribute">fileref='../../../vol10/graphics/Cameron01/Cameron01-006.png'
                              </span><span class="metaAttribute">format='png'
                              </span><span class="metaAttribute">width='500cm'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e751">
               <div class="xref e752" linkend="perf_GML2SVG"></div> compares the performance of the GML2SVG application linked against
               the Xerces, icXML and icXML-p.   
               On the GML workload with this application, single-thread icXML
               achieved about a 50% acceleration over Xerces, 
               increasing throughput on our test machine from 58.3 MB/sec to 87.9 MB/sec.   
               Using icXML-p, a further throughput increase to 111 MB/sec was recorded, 
               approximately a 2X speedup.
            </div>
            <div class="para e753">An important aspect of icXML is the replacement of much branch-laden
               sequential code inside Xerces with straight-line SIMD code using far
               fewer branches.  
               <div class="xref e754" linkend="branchmiss_GML2SVG"></div> shows the corresponding
               improvement in branching behaviour, with a dramatic reduction in branch misses per
               kB.
               It is also interesting to note that icXML-p goes even further.   
               In essence, in using pipeline parallelism to split the instruction 
               stream onto separate cores, the branch target buffers on each core are
               less overloaded and able to increase the successful branch prediction rate.
            </div>
            <div class="figure e755" xml:id="branchmiss_GML2SVG">
               <div class="title e756">Comparative Branch Misprediction Rate</div>
               <div class="mediaobject e757">
                  <div class="imageobject e758">
                     <div class="metaBox e759"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1529').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1529" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e759'
                              </span><span class="metaAttribute">fileref='../../../vol10/graphics/Cameron01/Cameron01-007.png'
                              </span><span class="metaAttribute">format='png'
                              </span><span class="metaAttribute">width='500cm'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e760">The behaviour of the three versions with respect to L1 cache misses per kB is shown
               in 
               <div class="xref e761" linkend="cachemiss_GML2SVG"></div>.   Improvements are shown in both instruction-
               and data-cache performance with the improvements in instruction-cache
               behaviour the most dramatic.   Single-threaded icXML shows substantially improved
               performance over Xerces on both measures.   
               Although icXML-p is slightly worse with respect to data-cache performance, 
               this is more than offset by a further dramatic reduction in instruction-cache miss
               rate.
               Again partitioning the instruction stream through the pipeline parallelism model has
               
               significant benefit.
            </div>
            <div class="figure e762" xml:id="cachemiss_GML2SVG">
               <div class="title e763">Comparative Cache Miss Rate</div>
               <div class="mediaobject e764">
                  <div class="imageobject e765">
                     <div class="metaBox e766"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1539').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1539" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e766'
                              </span><span class="metaAttribute">fileref='../../../vol10/graphics/Cameron01/Cameron01-008.png'
                              </span><span class="metaAttribute">format='png'
                              </span><span class="metaAttribute">width='500cm'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e767">One caveat with this study is that the GML2SVG application did not exhibit 
               a relative balance of processing between application code and Xerces library
               code reaching the 33% figure.  This suggests that for this application and
               possibly others, further separating the logical layers of the
               icXML engine into different pipeline stages could well offer significant benefit.
               This remains an area of ongoing work.
            </div>
         </div>
      </div><a name="ConclusionandFutureWorkANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e768" xml:id="conclusion">
         <div class="title e769">Conclusion and Future Work</div>
         <div class="para e770"> This paper is the first case study documenting the significant performance benefits
            that may be realized through the integration of parallel bitstream technology into
            existing
            widely-used software libraries. In the case of the Xerces-C++ XML parser, the combined
            integration of SIMD and multicore parallelism was shown capable of dramatic producing
            dramatic increases in throughput and reductions in branch mispredictions and cache
            misses.
            The modified parser, going under the name icXML is designed to provide the full
            functionality of the original Xerces library with complete compatibility of APIs.
            Although
            substantial re-engineering was required to realize the performance potential of parallel
            technologies, this is an important case study demonstrating the general feasibility
            of
            these techniques. 
         </div>
         <div class="para e771"> The further development of icXML to move beyond 2-stage pipeline parallelism is
            ongoing, with realistic prospects for four reasonably balanced stages within the library.
            For applications such as GML2SVG which are dominated by time spent on XML parsing,
            such a
            multistage pipelined parsing library should offer substantial benefits. 
         </div>
         <div class="para e772"> The example of XML parsing may be considered prototypical of finite-state machines
            applications which have sometimes been considered "embarassingly
            sequential" and so difficult to parallelize that "nothing
            works." So the case study presented here should be considered an important data
            point in making the case that parallelization can indeed be helpful across a broad
            array of
            application types. 
         </div>
         <div class="para e773"> To overcome the software engineering challenges in applying parallel bitstream
            technology to existing software systems, it is clear that better library and tool
            support
            is needed. The techniques used in the implementation of icXML and documented in this
            paper
            could well be generalized for applications in other contexts and automated through
            the
            creation of compiler technology specifically supporting parallel bitstream programming.
            
         </div>
         <div class="para e774">Given the success of the icXML development, there is a strong case for continued
            	    development of the Parabix framework as well as for the application of Parabix
            	    to other important XML technology stacks.   In particular, an important area
            for further 
            	    work is to extend the benefits of SIMD and multicore parallelism to the acceleration
            	    of Java-based XML processors. 
            
         </div>
      </div><a name="BibliographyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e775">
         <div class="title e776">Bibliography</div>
         <div class="bibliomixed e777" xml:id="CameronHerdyLin2008" xreflabel="Parabix1 2008">Cameron, Robert D., Herdy, Kenneth S. and Lin, Dan. High performance XML parsing using
            parallel bit stream technology. CASCON'08: Proc. 2008 conference of the center for
            advanced studies on collaborative research. Richmond Hill, Ontario, Canada. 2008.
         </div>
         <div class="bibliomixed e778" xml:id="papi" xreflabel="PAPI">Innovative Computing Laboratory, University of Texas. Performance Application Programming
            Interface. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e779" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://icl.cs.utk.edu/papi/</div>
         </div>
         <div class="bibliomixed e780" xml:id="perf" xreflabel="perf">Eranian, Stephane, Gouriou, Eric, Moseley, Tipp and Bruijn, Willem de. Linux kernel
            profiling with perf. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e781" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">https://perf.wiki.kernel.org/index.php/Tutorial</div>
         </div>
         <div class="bibliomixed e782" xml:id="Cameron2008" xreflabel="u8u16 2008">Cameron, Robert D.. A case study in SIMD text processing with parallel bit streams:
            UTF-8 to UTF-16 transcoding. Proc. 13th ACM SIGPLAN Symposium on Principles and Practice
            of Parallel Programming. Salt Lake City, USA. 2008. doi:
            <div class="biblioid doi e783">10.1145/1345206.1345222</div>.
         </div>
         <div class="bibliomixed e784" xml:id="ParaDOM2009" xreflabel="Shah and Rao 2009">Shah, Bhavik, Rao, Praveen, Moon, Bongki and Rajagopalan, Mohan. A Data Parallel Algorithm
            for XML DOM Parsing. Database and XML Technologies. 2009.
         </div>
         <div class="bibliomixed e785" xml:id="XMLSSE42" xreflabel="Lei 2008">Lei, Zhai. XML Parsing Accelerator with Intel Streaming SIMD Extensions 4 (Intel SSE4).
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e786" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">Intel Software Network</div>.  2008.
         </div>
         <div class="bibliomixed e787" xml:id="Cameron2009" xreflabel="Balisage 2009">Cameron, Rob, Herdy, Ken and Amiri, Ehsan Amiri. Parallel Bit Stream Technology as
            a Foundation for XML Parsing Performance. Int'l Symposium on Processing XML Efficiently:
            Overcoming Limits on Space, Time, or Bandwidth. Montreal, Quebec, Canada.  2009. doi:
            <div class="biblioid doi e788">10.4242/BalisageVol4.Cameron01</div>.
         </div>
         <div class="bibliomixed e789" xml:id="HilewitzLee2006" xreflabel="Hilewitz and Lee 2006">Hilewitz, Yedidya and Lee, Ruby B.. Fast Bit Compression and Expansion with Parallel
            Extract and Parallel Deposit Instructions. ASAP '06: Proc. IEEE 17th Int'l Conference
            on Application-specific Systems, Architectures and Processors. Steamboat Springs,
            Colorado, USA.  2006.
         </div>
         <div class="bibliomixed e790" xml:id="Asanovic-EECS-2006-183" xreflabel="Asanovic et al. 2006">Asanovic, Krste and others. The Landscape of Parallel Computing Research: A View from
            Berkeley. EECS Department, University of California, Berkeley.  2006.
         </div>
         <div class="bibliomixed e791" xml:id="GRID2006" xreflabel="Lu and Chiu 2006">Lu, Wei, Chiu, Kenneth and Pan, Yinfei. A Parallel Approach to XML Parsing. Proceedings
            of the 7th IEEE/ACM International Conference on Grid Computing. Barcelona, Spain.
            2006.
         </div>
         <div class="bibliomixed e792" xml:id="cameron-EuroPar2011" xreflabel="Parabix2 2011">Cameron, Robert D., Amiri, Ehsan, Herdy, Kenneth S., Lin, Dan, Shermer, Thomas C.
            and Popowich, Fred P.. Parallel Scanning with Bitstream Addition: An XML Case Study.
            Euro-Par 2011, LNCS 6853, Part II.  Bordeaux, Frane. 2011.
         </div>
         <div class="bibliomixed e793" xml:id="HPCA2012" xreflabel="Lin and Medforth 2012">Lin, Dan, Medforth, Nigel, Herdy, Kenneth S., Shriraman, Arrvindh and Cameron, Rob.
            Parabix: Boosting the efficiency of text processing on commodity processors. International
            Symposium on High-Performance Computer Architecture. New Orleans, LA. 2012. doi:
            <div class="biblioid doi e794">10.1109/HPCA.2012.6169041</div>.
         </div>
         <div class="bibliomixed e795" xml:id="HPCC2011" xreflabel="You and Wang 2011">You, Cheng-Han and Wang, Sheng-De. A Data Parallel Approach to XML Parsing and Query.
            10th IEEE International Conference on High Performance Computing and Communications.
            Banff, Alberta, Canada. 2011.
         </div>
         <div class="bibliomixed e796" xml:id="E-SCIENCE2007" xreflabel="Pan and Zhang 2007">Pan, Yinfei, Zhang, Ying, Chiu, Kenneth and Lu, Wei. Parallel XML Parsing Using Meta-DFAs.
            International Conference on e-Science and Grid Computing.   Bangalore, India.  2007.
         </div>
         <div class="bibliomixed e797" xml:id="ICWS2008" xreflabel="Pan and Zhang 2008a">Pan, Yinfei, Zhang, Ying and Chiu, Kenneth. Hybrid Parallelism for XML SAX Parsing.
            IEEE International Conference on Web Services. Beijing, China.  2008.
         </div>
         <div class="bibliomixed e798" xml:id="IPDPS2008" xreflabel="Pan and Zhang 2008b">Pan, Yinfei, Zhang, Ying and Chiu, Kenneth. Simultaneous transducers for data-parallel
            XML parsing. International Parallel and Distributed Processing Symposium. Miami, Florida,
            USA.  2008.
         </div>
         <div class="bibliomixed e799" xml:id="HackersDelight" xreflabel="Warren 2002">Warren, Henry S.. Hacker's Delight. Addison-Wesley Professional. 2003.</div>
         <div class="bibliomixed e800" xml:id="lu2007advances" xreflabel="Lu and Dos Santos 2007">Lu, C.T., Dos Santos, R.F., Sripada, L.N. and Kou, Y.. Advances in GML for geospatial
            applications. Geoinformatica 11:131-157.  2007. doi:
            <div class="biblioid doi e801">10.1007/s10707-006-0013-9</div>.
         </div>
         <div class="bibliomixed e802" xml:id="lake2004geography" xreflabel="Lake and Burggraf 2004">Lake, R., Burggraf, D.S., Trninic, M. and Rae, L.. Geography mark-up language (GML)
            [foundation for the geo-web]. Wiley.  Chichester.  2004.
         </div>
      </div>
   </div>
</div>