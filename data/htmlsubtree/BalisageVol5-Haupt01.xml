<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#AutomaticupconversionusingXSLT20andXProc:ArealworldexampleANCHOR" name="AutomaticupconversionusingXSLT20andXProc:ArealworldexampleTOC">Automatic upconversion using XSLT 2.0 and XProc: A real world example</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ThedataANCHOR" name="ThedataTOC">The data</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#InformationcontentANCHOR" name="InformationcontentTOC">Information content</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TechnicalanalysisANCHOR" name="TechnicalanalysisTOC">Technical analysis</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#TypeAANCHOR" name="TypeATOC">Type A</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#TypeBANCHOR" name="TypeBTOC">Type B</a></div>
               </div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#HighlystructureddataANCHOR" name="HighlystructureddataTOC">Highly structured data</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#UpconversionANCHOR" name="UpconversionTOC">Upconversion</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#XSLT20benefitsANCHOR" name="XSLT20benefitsTOC">XSLT 2.0 benefits</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#PipeliningwithXProcANCHOR" name="PipeliningwithXProcTOC">Pipelining with XProc</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TheresultoftheupconversionprocessANCHOR" name="TheresultoftheupconversionprocessTOC">The result of the upconversion process</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#Benefitsofhighlystructureddata%E2%80%94searchingforthegameaccordingtoyour%0AflavourANCHOR" name="Benefitsofhighlystructureddata%E2%80%94searchingforthegameaccordingtoyour%0AflavourTOC">Benefits of highly structured data â€” searching for the game according to your
                  flavour</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AlternativeaccesstothereviewsANCHOR" name="AlternativeaccesstothereviewsTOC">Alternative access to the reviews</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#FindingagameaccordingtospecificfeaturesANCHOR" name="FindingagameaccordingtospecificfeaturesTOC">Finding a game according to specific features</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#Amoreelaboratedexample:awishlistANCHOR" name="Amoreelaboratedexample:awishlistTOC">A more elaborated example: a wish list</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConclusionANCHOR" name="ConclusionTOC">Conclusion</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#LiteratureANCHOR" name="LiteratureTOC">Literature</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">alt</div>
         <div class="singletermTERMS">author</div>
         <div class="singletermTERMS">August 3 - 6, 2010</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">bg-color</div>
         <div class="singletermTERMS">border</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2010</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">consoleType</div>
         <div class="singletermTERMS">currency</div>
         <div class="singletermTERMS">compatibleInputDevices</div>
         <div class="singletermTERMS">conclusion</div>
         <div class="singletermTERMS">c:file</div>
         <div class="singletermTERMS">c:request</div>
         <div class="singletermTERMS">c:result</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">div</div>
         <div class="singletermTERMS">date</div>
         <div class="singletermTERMS">directoryloop</div>
         <div class="singletermTERMS">Definitive XML Schema.</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">Extensible Markup Language (XML) 1.0.</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
         <div class="singletermTERMS">font</div>
         <div class="singletermTERMS">file</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
         <div class="singletermTERMS">genre</div>
         <div class="singletermTERMS">game</div>
         <div class="singletermTERMS">graphics</div>
         <div class="singletermTERMS">genres.xq</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">h1</div>
         <div class="singletermTERMS">h2</div>
         <div class="singletermTERMS">h6</div>
         <div class="singletermTERMS">handheldGameConsole</div>
         <div class="singletermTERMS">handbook</div>
         <div class="singletermTERMS">https://community.emc.com/community/edn/xmltech</div>
         <div class="singletermTERMS">HTML 3.2 Reference Specification.</div>
         <div class="singletermTERMS">HTML 4.01 Specification.</div>
         <div class="singletermTERMS">Haupt</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">img</div>
         <div class="singletermTERMS">image</div>
         <div class="singletermTERMS">instance</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">languages</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">meta</div>
         <div class="singletermTERMS">marginwidth</div>
         <div class="singletermTERMS">mainText</div>
         <div class="singletermTERMS">multiplayer</div>
         <div class="singletermTERMS">main</div>
         <div class="singletermTERMS">Mag'64</div>
         <div class="singletermTERMS">Maik</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">notes</div>
         <div class="singletermTERMS">not</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">overall</div>
         <div class="singletermTERMS">override-content-type</div>
         <div class="singletermTERMS">opt|chea|tipp|herz|guid|pass</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">platforms</div>
         <div class="singletermTERMS">price</div>
         <div class="singletermTERMS">percent</div>
         <div class="singletermTERMS">p:declare-step</div>
         <div class="singletermTERMS">p:directory-list</div>
         <div class="singletermTERMS">p:for-each</div>
         <div class="singletermTERMS">p:make-absolute-uris</div>
         <div class="singletermTERMS">p:string-replace</div>
         <div class="singletermTERMS">p:http-request</div>
         <div class="singletermTERMS">p:data</div>
         <div class="singletermTERMS">p:exec</div>
         <div class="singletermTERMS">p:unescape-markup</div>
         <div class="singletermTERMS">p:xslt</div>
         <div class="singletermTERMS">p:validate-with-xml-schema</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">release</div>
         <div class="singletermTERMS">review</div>
         <div class="singletermTERMS">result-is-xml</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">span</div>
         <div class="singletermTERMS">subgenre</div>
         <div class="singletermTERMS">spoken</div>
         <div class="singletermTERMS">saving</div>
         <div class="singletermTERMS">score</div>
         <div class="singletermTERMS">sound</div>
         <div class="singletermTERMS">source-is-xml</div>
         <div class="singletermTERMS">shoppingList.xq</div>
         <div class="singletermTERMS">shoppinglist.xq</div>
         <div class="singletermTERMS">search for the game according to your flavour.</div>
         <div class="singletermTERMS">Stefanie</div>
         <div class="singletermTERMS">StÃ¼hrenberg</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">td</div>
         <div class="singletermTERMS">table</div>
         <div class="singletermTERMS">title</div>
         <div class="singletermTERMS">text</div>
         <div class="singletermTERMS">techSpecs</div>
         <div class="singletermTERMS">text/html</div>
         <div class="singletermTERMS">try-catch</div>
         <div class="singletermTERMS">techspecs.xq</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
         <div class="singletermTERMS">Using microformats.</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
         <div class="singletermTERMS">videoGameConsole</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">xml:id</div>
         <div class="singletermTERMS">xs:date</div>
         <div class="singletermTERMS">XSLT 2.0 and XPath 2.0 Programmerâ€™s Reference.</div>
         <div class="singletermTERMS">XML Schema Part 0: Primer Second Edition</div>
         <div class="singletermTERMS">XProc: An XML Pipeline Language.</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="AutomaticupconversionusingXSLT20andXProc:ArealworldexampleANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.2">
      <div class="title e1">Automatic upconversion using XSLT 2.0 and XProc: A real world example</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2010</div>
            <div class="confdates e5">August 3 - 6, 2010</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">All too much of the data on the Web appears in unstructured presentation-centric formatting
               that isn't suited for structured searching and retrieval. Upconversion to a more data-centric
               information storage format offers a potential for many new uses of the data. The starting
               point
               of our work is a collection of HTML documents containing video game reviews. Our goal
               is to
               describe a target XML format that supports certain elements and attributes containing
               information that we consider valuable. Furthermore, the conversion process itself
               should be
               carried out automatically by means of an XProc pipeline. We conclude our paper with
               a
               demonstration of typical benefits of the highly structured data that results from
               our
               conversions.
            </div>
         </div>
         <div class="author e8">
            <div class="personname e9">
               <div class="firstname e10">Stefanie</div>
               <div class="surname e11">Haupt</div>
            </div>
            <div class="personblurb e12">
               <div class="para e13">Stefanie Haupt is currently finishing her education for an M.A. degree in Literary
                  Criticism, Text Technology, and Sociology at Bielefeld University. Her main research
                  interest
                  focuses on markup and schema languages, with emphasis on XML databases and querying.
               </div>
            </div>
         </div>
         <div class="author e14">
            <div class="personname e15">
               <div class="firstname e16">Maik</div>
               <div class="surname e17">StÃ¼hrenberg</div>
            </div>
            <div class="personblurb e18">
               <div class="para e19">Maik StÃ¼hrenberg studied Computational Linguistics at Bielefeld University. After
                  working
                  for four years as research assistant at Giessen University in different text-technological
                  projects, he is now a Ph. D. student and research assistant at Bielefeld University.
                  His main
                  research interests include XML schema languages and specifications for structuring
                  and querying
                  multi-dimensional annotated data.
               </div>
            </div>
         </div>
         <div class="legalnotice e20">
            <div class="para e21">Copyright Â© 2010 by the authors.  Used with
               permission.
            </div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e22" xml:id="Introduction">
         <div class="title e23">Introduction</div>
         <div class="para e24"> Vast collections of information are stored in HTML files distributed over millions
            of Web
            pages through the Internet. Among these quite valuable data can often be found; however,
            HTML
            does not offer a large pool of semantically motivated elements or attributes for annotating
            arbitrary data, since the language was originally created for hypertexts. Although
            CSS
            microformats 
            <div class="xref e25" linkend="bibSuda2006"></div> may be used to add semantic value to structuring
            elements (e.g. 
            <div class="code e26">div</div> and 
            <div class="code e27">span</div>), most information is buried underneath a
            "tag soup" of 
            <div class="code e28">td</div>, 
            <div class="code e29">p</div> or 
            <div class="code e30">div</div> elements that allow no
            inference about their content. In contrast, we can have information that is highly
            structured in
            terms of very specialized XML markup using a document grammar (DTD 
            <div class="xref e31" linkend="bibSGML"></div>,
            
            <div class="xref e32" linkend="bibXML1.0"></div>, XSD 
            <div class="xref e33" linkend="bibW3C.XMLSchemaPrimer"></div> or RELAX NG 
            <div class="xref e34" linkend="bibRelaxNG"></div>) that allows for easy retrieving of very specific information. A real
            world example where the origin of our data is a collection of (sometimes even invalid)
            HTML 4.01
            
            <div class="xref e35" linkend="bibHTML4.01"></div> Web pages storing documents of video game reviews is a good
            candidate for demonstrating how value can be added through better markup. Our goal
            is to
            transform these into fully structured and valid XML instance documents that allow
            different
            queries about the information. Since we are confronted with several hundred reviews,
            an automated
            conversion process is valuable. As an additional goal, we would like to stay in the
            realm of XML
            techniques; for example, we would like to avoid using non-XML-aware software such
            as
            general-purpose scripting languages (e.g. Perl, Python). 
         </div>
      </div><a name="ThedataANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e36" xml:id="data">
         <div class="title e37">The data</div><a name="InformationcontentANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e38">
            <div class="title e39">Information content</div>
            <div class="para e40">Video games are a part of today's culture and are available in a huge variety in terms
               of
               supported game system, genre and â€” of course â€” quality. Finding a game that fits both
               one's
               hardware requirements and favored genre is a relatively easy task to accomplish, but
               basing the
               decision to buy a specific game only on the text written on the back of its case is
               daring at
               least. Impartial (more or less) reviews of video games may help to clarify if the
               money is well
               spent in the long run by providing rating systems for features such as graphics, sound,
               atmosphere or overall score (usually higher scores are better). The team of the German
               
               <div class="emphasis e41" role="ital">Mag'64</div> Web site 
               <div class="popupBox e42">
                  <div class="popupLabel" onmouseover="$('#d1e78').show('1000');" onmouseout="$('#d1e78').hide('1000');">[ footnote ]</div>
                  <div id="d1e78" style="display: none;">
                     <div class="footnote">
                        <div class="para e43">
                           <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e44" xlink:actuate="onRequest" xlink:href="http://www.mag64.de/" xlink:show="new" xlink:type="simple"></div>, for the
                           current site.
                        </div>
                     </div>
                  </div>
               </div> has tested video games for over eight years, gathering over 1500 reviews, each
               consisting of a single HTML Web page. Each document contains information about the
               game being
               tested, the review, including a general judgement, and images and screenshots. This
               information
               is quite valuable since among the provided items are general ones such as the title,
               system, or
               publisher, but in addition more specific items such as number of players, genre, age
               rating and
               difficulty. The review consists of running text' while the final verdict and pros
               and cons are
               summarized in a tabular view. The data we have to deal with consists generally of
               two types of
               reviews, which we call "Type A" and "Type B". Type A was used during the years 2001
               through
               2004, while Type B was introduced in the Autumn of 2004.
            </div>
         </div><a name="TechnicalanalysisANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e45">
            <div class="title e46">Technical analysis</div>
            <div class="para e47">From a technical point of view the data is stored in HTML Web pages. Because HTML's
               original task is to structure hypertexts, it lacks specific elements and attributes
               for
               annotating the information we are interested in. Furthermore, the markup of our test
               data is
               very focussed on presentation, that is, general HTML elements such as 
               <div class="code e48">div</div>,
               
               <div class="code e49">p</div>, 
               <div class="code e50">td</div> are used for physically structuring the information according
               to a given layout. While the two review types, A and B, do not differ regarding their
               information content, there are differences in the markup techniques used.
            </div><a name="TypeAANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e51">
               <div class="title e52">Type A</div>
               <div class="para e53">The Type A review was originally used as part of an HTML frameset. While one frame
                  contained a menu for navigating through the whole service, the second frame stored
                  a single
                  review in the form of a HTML Page. This page lacks an HTML Doctype declaration, and
                  typical
                  copy and paste errors can be found, including end tags without preceding start tags,
                  wrong
                  attributes, etc. The 
                  <div class="code e54">img</div> element for embedded graphics lacks the required
                  
                  <div class="code e55">alt</div> attribute. 
                  <div class="popupBox e56">
                     <div class="popupLabel" onmouseover="$('#d1e108').show('1000');" onmouseout="$('#d1e108').hide('1000');">[ footnote ]</div>
                     <div id="d1e108" style="display: none;">
                        <div class="footnote">
                           <div class="para e57">Although the 
                              <div class="code e58">alt</div> attribute has been marked as optional in 
                              <div class="xref e59" linkend="bibHTML3.2"></div>, 
                              <div class="xref e60" linkend="bibHTML4.01"></div> introduced in 1999 and 
                              <div class="xref e61" linkend="bibHTML.ISO"></div>, requires its use.
                           </div>
                        </div>
                     </div>
                  </div> Furthermore, no information about the character encoding is given, which leads to
                  encoding errors since German umlauts and other special characters were used. 
               </div>
               <div class="para e62">
                  <div class="xref e63" linkend="fig.html.start"></div> shows an excerpt of an Type A review.
               </div>
               <div class="figure e64" xml:id="fig.html.start">
                  <div class="title e65">Type A beginning of document</div>
                  <div class="programlisting e66" xml:space="preserve">&lt;html&gt;
                     &lt;head&gt;
                     &lt;title&gt;Mag64&lt;/title&gt;
                     &lt;/head&gt;
                     &lt;body bgcolor="#FFFFFF" text="#000000" link="#0000FF" 
                     vlink="#990099" alink="#FF0000" leftmargin="2" topmargin="2" 
                     marginwidth="2" marginheight="2"&gt;&lt;a name="page_top"&gt;
                     &lt;table width="98%" border="0" cellspacing="5" cellpadding="0" 
                     height="170" align="center"&gt;
                     &lt;tr&gt;
                     &lt;td width="35%" align="left" valign="top"&gt;
                     &lt;img src="ray3logo.jpg"&gt;
                     &lt;/td&gt;
                     &lt;td width="33%" align="left" valign="top" bgcolor="#CCCCCC"&gt;
                     &lt;p&gt;&lt;font face="Arial, Helvetica, sans-serif" size="3"&gt;&lt;u&gt;
                     &lt;font face="Arial, Helvetica, sans-serif" size="3"&gt;SYSTEM:
                     &lt;/font&gt;
                     &lt;/u&gt;&lt;font face="Arial, Helvetica, sans-serif" size="3"&gt;
                     &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
                     &amp;nbsp;&amp;nbsp;&lt;i&gt;GCN - PAL&lt;/i&gt;&lt;/font&gt;&lt;u&gt;&lt;br&gt;
                     ENTWICKLER:&lt;/u&gt; &lt;i&gt;Ubi Soft&lt;/i&gt;&lt;/font&gt;&lt;br&gt;
                     &lt;u&gt;&lt;font face="Arial, Helvetica, sans-serif" size="3"&gt;
                     GENRE:&lt;/font&gt;&lt;/u&gt;&lt;font face="Arial, Helvetica, sans-serif" 
                     size="3"&gt;
                     &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
                     &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;i&gt;Jump'n Run&lt;/i&gt;&lt;/font&gt;
                     &lt;font face="Arial, Helvetica, sans-serif" size="3"&gt;&lt;i&gt;&lt;br&gt;
                     &lt;/i&gt;&lt;/font&gt;&lt;u&gt;&lt;font face="Arial, Helvetica, sans-serif" 
                     size="3"&gt;SPIELER:&lt;/font&gt;&lt;/u&gt;&lt;font face="Arial, Helvetica, 
                     sans-serif" size="3"&gt;
                     &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
                     &amp;nbsp;&lt;i&gt;1-4 Spieler&lt;/i&gt;&lt;/font&gt;&lt;br&gt;
                  </div>
               </div>
               <div class="para e67">This markup we have to deal with is very presentation-focussed: semantic markup such
                  as
                  
                  <div class="code e68">h1</div> or 
                  <div class="code e69">h2</div> that could be used for structuring the text is not used at
                  all. The title of the game can only be found in the running text or in the graphic
                  image
                  referred by the 
                  <div class="code e70">img</div> element â€” and sometimes in external cheats or tricks documents
                  that are referred to from the review page (the term "CHEATS: JA" in 
                  <div class="xref e71" linkend="fig.head"></div>). All useful information is buried deep inside HTML's 
                  <div class="code e72">table</div> elements, and the
                  page lacks any 
                  <div class="code e73">meta</div> elements for storing additional information. Spacing between
                  different parts of the text was introduced by using HTML's &amp;nbsp; entity, while the
                  whole
                  markup is layout oriented, using 
                  <div class="code e74">font</div>, 
                  <div class="code e75">i</div> and 
                  <div class="code e76">u</div> elements.
                  Sometimes font elements with identical formatting options are embedded into each other
                  resulting in a tag soup. Emphases are arranged solely by selecting "size 3" fonts.
               </div>
               <div class="para e77">The running text of the review is distributed among different 
                  <div class="code e78">table</div> elements,
                  establishing a print-like layout. Each review begins with two blocks containing
                  meta-information, such as system, genre, number of players, etc. 
               </div>
               <div class="figure e79" xml:id="fig.head">
                  <div class="title e80">Typical view of the beginning of a Type A document</div>
                  <div class="mediaobject e81">
                     <div class="imageobject e82">
                        <div class="metaBox e83"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e168').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e168" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e83'
                                 </span><span class="metaAttribute">fileref='../../../vol5/graphics/Haupt01/Haupt01-001.png'
                                 </span><span class="metaAttribute">format='png'
                                 </span><span class="metaAttribute">width='70%'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               <div class="para e84">The Type A review ends with a tabular overview, consisting of the "pros" and "cons"
                  of the
                  game.
               </div>
            </div><a name="TypeBANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e85">
               <div class="title e86">Type B</div>
               <div class="para e87">The Type B reviews were established in the Autumn of 2004, coinciding with the release
                  of
                  the 
                  <div class="trademark registered e88">Nintendo DS</div> handheld console. Since this
                  videogame console introduced some features that were unknown before (e.g. split-screen
                  and the
                  stylus input device), a new HTML template for reviewing video games was adapted. As
                  a new
                  meta-information item, an age rating was added, and the running text was subdivided
                  by
                  headings.
               </div>
               <div class="para e89">Most of the HTML pages contain a doctype declaration (incorrect for HTML 4.01), a
                  reference to an externally declared CSS stylesheet and information about the character
                  encoding
                  (ISO-8859-1 â€” although the specified encoding is sometimes not correct, since some
                  documents
                  are encoded using the Windows-1252 charset or even UTF-8). In addition to the external
                  CSS
                  file, local formatting using attributes such as 
                  <div class="code e90">marginwidth</div>, 
                  <div class="code e91">bg-color</div>
                  or 
                  <div class="code e92">border</div> can still be found. In general, the HTML pages are not valid according
                  to the W3C validation service. 
                  <div class="xref e93" linkend="exstylesheet"></div> shows the mixture of different
                  formatting options used. 
               </div>
               <div class="para e94">
                  
                  <div class="figure e95" xml:id="exstylesheet">
                     <div class="title e96">Type B beginning of document</div>
                     <div class="programlisting e97" xml:space="preserve">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Strict//EN"
                        "http://www.w3.org/TR/html4/strict.dtd"&gt;
                        &lt;html&gt;&lt;head&gt;&lt;title&gt;NDS 7 Wonders of the Ancient World&lt;/title&gt;
                        &lt;meta http-equiv="Content-Type" content="text/html; 
                        charset=iso-8859-1"&gt;
                        &lt;link rel="stylesheet" href="http://www.mag64.de/test.css" 
                        type="text/css"&gt;&lt;/head&gt;
                        &lt;body marginwidth="0" marginheight="0" leftmargin="0" 
                        topmargin="0" bgcolor="#CCCCCC"&gt;
                        &lt;table width="710" border="0" cellpadding="0" cellspacing="0" 
                        bgcolor="#CCCCCC"&gt;
                     </div>
                  </div>
               </div>
               <div class="para e98">A positive difference from the Type A is the fact that the title of the game appears
                  (together with the platform it was released for) in HTML's 
                  <div class="code e99">title</div> element.
                  Important information such as price or age rating are hidden inside a single 
                  <div class="code e100">div</div>
                  element (
                  <div class="xref e101" linkend="exstrings"></div>), divided by line breaks.
               </div>
               <div class="para e102">
                  
                  <div class="figure e103" xml:id="exstrings">
                     <div class="title e104">Hidden information</div>
                     <div class="programlisting e105" xml:space="preserve">&lt;td width="226" valign="top" style="background-image:url (http://www.mag64.de/tr1.jpg)"&gt;
                        &lt;div style="padding-left: 20px;padding-top: 23px"&gt;
                        SPRACHH&amp;Uuml;RDE: Keine&lt;br&gt;
                        MIKRO SUPPORT: Nein&lt;br&gt;
                        ALTERSFREIGABE: &lt;a href="http://www.pegi.info" 
                        target="_blank"&gt;3+&lt;/a&gt;&lt;br&gt;
                        TERMIN: Erh&amp;auml;ltlich&lt;br&gt;
                        VIRTUAL SURROUND: Nein&lt;br&gt;
                        PREIS: ca.20 Euro&lt;br&gt;
                        KOMPLETTL&amp;Ouml;SUNG: Nein&lt;br&gt;
                        CHEATS / TIPPS: Nein&lt;br&gt;
                        LESERMEINUNGEN: Nein&lt;/td&gt;
                     </div>
                  </div>
                  
               </div>
               <div class="para e106">In contrast to the Type A reviews, subheadings are included; however, these are not
                  marked
                  up by HTML's inherent 
                  <div class="code e107">h1</div> through 
                  <div class="code e108">h6</div> elements but by using formatting
                  elements such as 
                  <div class="code e109">b</div> and 
                  <div class="code e110">font</div>.
               </div>
               <div class="para e111">Both review types show HTML's inherent lack of support for highly structured data.
                  Although our example application deals with document-centric texts, the data under
                  observation
                  contains important information that should be marked up explicitly.
               </div>
            </div>
         </div>
      </div><a name="HighlystructureddataANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e112" xml:id="dataInXML">
         <div class="title e113">Highly structured data</div>
         <div class="para e114"> Our goal is to create an XML markup language capable of structuring the video game
            reviews
            of both Type A and B that have been discussed. This format should be used as representation
            format for the output of the conversion process that will be presented in the 
            <div class="xref e115" linkend="conversion"></div> and could be used as a storage format for future review applications.
            Since we have already stated the input documents are often invalid (sometimes even
            not
            well-formed) and important information is buried inside HTML 
            <div class="code e116">table</div> elements, having
            a document grammar for both validating the conversion process's output format and
            providing
            explicit markup of the important information is quite important for us. For these
            reasons, the
            use of a capable of full text search engine was not taken into account. We have chosen
            XML schema
            in favor of XML DTD because of its datatype library and especially for its support
            of
            user-defined simple and complexTypes 
            <div class="xref e117" linkend="bibWalmsley2002"></div>. A RELAX NG schema (in
            combination with the XML schema datatype library) would have been another option,
            however, the
            broader support for XML schema supplied by the XSLT processor used during the conversion
            process
            tipped the scales for us (
            <div class="xref e118" linkend="fig.xsd.game"></div>).
         </div>
         <div class="figure e119" xml:id="fig.xsd.game">
            <div class="title e120">Game centered structure</div>
            <div class="mediaobject e121">
               <div class="imageobject e122">
                  <div class="metaBox e123"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e252').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e252" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e123'
                           </span><span class="metaAttribute">fileref='../../../vol5/graphics/Haupt01/Haupt01-002.png'
                           </span><span class="metaAttribute">format='png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e124">Each game can be identified by a unique 
            <div class="code e125">xml:id</div> attribute, further optional
            attributes correspond to 
            <div class="code e126">genre</div> and 
            <div class="code e127">subgenre</div>, supporting an enumerated
            list of possible values which should help avoiding typical errors such as typos. Children
            of the
            
            <div class="code e128">game</div> element are the 
            <div class="code e129">title</div> and 
            <div class="code e130">platforms</div> elements, the
            latter consisting of at least either one 
            <div class="code e131">handheldGameConsole</div> or
            
            <div class="code e132">videoGameConsole</div>, allowing to combine reviews of the same video game released on
            multiple platforms 
            <div class="popupBox e133">
               <div class="popupLabel" onmouseover="$('#d1e280').show('1000');" onmouseout="$('#d1e280').hide('1000');">[ footnote ]</div>
               <div id="d1e280" style="display: none;">
                  <div class="footnote">
                     <div class="para e134">The optional merging of different game instances can be carried out by an XQuery
                        script.
                     </div>
                  </div>
               </div>
            </div>. Both elements are derived by extension of the globally declared complexType
            
            <div class="code e135">consoleType</div>, sharing common information present in stationary and handheld game
            consoles (see 
            <div class="xref e136" linkend="fig.consoleType"></div> for a graphical overview of the shared
            information).
         </div>
         <div class="figure e137" xml:id="fig.consoleType">
            <div class="title e138">A closer look at the complexType 
               <div class="code e139">consoleType</div>
            </div>
            <div class="mediaobject e140">
               <div class="imageobject e141">
                  <div class="metaBox e142"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e296').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e296" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e142'
                           </span><span class="metaAttribute">fileref='../../../vol5/graphics/Haupt01/Haupt01-003.png'
                           </span><span class="metaAttribute">format='png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e143">The 
            <div class="code e144">release</div> element stores information about the date of release (using an
            
            <div class="code e145">xs:date</div> Type Attribute), the different languages and price. Children of the
            
            <div class="code e146">languages</div> element are 
            <div class="code e147">spoken</div>, 
            <div class="code e148">text</div> and
            
            <div class="code e149">handbook</div> elements, depicting information about the parts of the game that have been
            translated. The 
            <div class="code e150">price</div> element has a 
            <div class="code e151">currency</div> attribute that uses an
            enumerated list of possible values according to 
            <div class="xref e152" linkend="bibISO4217"></div>.
         </div>
         <div class="para e153">An optional 
            <div class="code e154">image</div> element can be used to represent box pictures or screenshots
            of the game reviewed.
         </div>
         <div class="para e155">As mentioned above, the 
            <div class="code e156">handheldGameConsole</div> and 
            <div class="code e157">videoGameConsole</div>
            elements are derived from the complexType 
            <div class="code e158">consoleType</div> by extension. Although the
            additional elements 
            <div class="code e159">techSpecs</div> and 
            <div class="code e160">saving</div> use the same names, their
            content models are different with respect to the video game console, since, for example,
            the
            requirements for storing save games are different between handheld and stationary
            consoles. Only
            the 
            <div class="code e161">videoGameConsole</div> element allows for the 
            <div class="code e162">compatibleInputDevices</div>
            child element. Most of these elements use enumerated lists to eliminate possible typos
            and to
            ease the acquisition of new reviews.
         </div>
         <div class="para e163">The main part of the review is stored underneath the 
            <div class="code e164">review</div> element that
            consists of the 
            <div class="code e165">mainText</div> and 
            <div class="code e166">conclusion</div> elements and further optional
            screenshots and that has a 
            <div class="code e167">date</div> attribute and an 
            <div class="code e168">author</div> attribute
            group. The running text is subdivided into optional headers and paragraphs, allowing
            a fine
            grained division of text parts and representing both review types.
         </div>
         <div class="para e169">The 
            <div class="code e170">conclusion</div> element is used to store both further text (e.g. in a form of a
            final verdict similar to the Type B reviews) and the tabular-like lists of pros and
            cons,
            followed by the final 
            <div class="code e171">score</div> element. Scoring can be expressed either via numeric
            values (using the 
            <div class="code e172">percent</div> child element with its attributes 
            <div class="code e173">graphics</div>,
            
            <div class="code e174">sound</div> (optional), 
            <div class="code e175">multiplayer</div> (optional) and 
            <div class="code e176">overall</div>) or
            through text, since both variants can be found in our sample data.
         </div>
         <div class="para e177">This grammar can not only be used to store the information coded in both review types
            but
            also is highly flexible for future extensions. Possible future extensions of the schema
            may
            include XSD 1.1 assertions, for example, to ensure that multiplayer scoring information
            is only
            allowed when the maximum number of players is greater than "1".
         </div>
      </div><a name="UpconversionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e178" xml:id="conversion">
         <div class="title e179">Upconversion</div>
         <div class="para e180">Our upconversion process begins in the typical manner by using XSLT 2.0 / XPath 2.0
            
            <div class="xref e181" linkend="bibKay2008"></div>. Because it requires multiple steps and must be applied to many files, we
            have encapsulated it in XProc.
         </div><a name="XSLT20benefitsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e182">
            <div class="title e183">XSLT 2.0 benefits</div>
            <div class="para e184">In his paper "Up-conversion using XSLT 2.0" Michael Kay points out the great advances
               XSLT
               made when shifting to XSLT 2.0, and he provides a real-world example that makes heavy
               use of the
               new features. The key features which produce benefit for upconversion are in short
               schema-awareness, support for regular expression processing, better manipulation of
               strings, and
               advanced grouping possibilities. So tasks that formerly were often solved by using
               a general
               purpose scripting language like Perl or Python, by loading XML modules can be done
               equally well
               or better with XSLT 2.0 [See 
               <div class="xref e185" linkend="bibKay2004"></div> for an elaborated example]. Our
               upconversion of the reviews mostly makes use of regular expression processing and
               string
               manipulation. 
            </div>
            <div class="para e186">The documents are preprocessed into well formed XML using HTML Tidy. 
               <div class="popupBox e187">
                  <div class="popupLabel" onmouseover="$('#d1e414').show('1000');" onmouseout="$('#d1e414').hide('1000');">[ footnote ]</div>
                  <div id="d1e414" style="display: none;">
                     <div class="footnote">
                        <div class="para e188">
                           <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e189" xlink:actuate="onRequest" xlink:href="http://tidy.sourceforge.net" xlink:show="new" xlink:type="simple">http://tidy.sourceforge.net</div> for further details.
                        </div>
                     </div>
                  </div>
               </div> For the upconversion, both functions as well as named templates are used widely.
               The
               following snippet demonstrates the massive clean-up the stylesheet performs. It is
               taken from
               the extensive 
               <div class="code e190">main</div> template, which uses a variable to hold the string with
               information about the genre of the reviewed game (
               <div class="xref e191" linkend="fig.xslt.genretemp"></div>). This
               string is checked for both Type A and Type B data equally but it is applied differently
               with
               respect to the structure. 
               <div class="figure e192" xml:id="fig.xslt.genretemp">
                  <div class="title e193">Extracting information</div>
                  <div class="programlisting e194" xml:space="preserve">&lt;xsl:variable name="genreTemp"&gt;
                     &lt;xsl:choose&gt;
                     &lt;!-- new type --&gt;
                     &lt;xsl:when test="/descendant::table[3]/descendant::td[2]/descendant::div[contains(.,'GEN')]"&gt;
                     &lt;xsl:analyze-string select="/descendant::table[3]/descendant::td[2]/descendant::div[contains(.,'GEN')]"
                     
                     regex="GENRE:\s(.*)\sSPIEL"&gt; 
                     &lt;xsl:matching-substring&gt; 
                     &lt;xsl:value-of select="regex-group(1)"/&gt; 
                     &lt;/xsl:matching-substring&gt;  
                     &lt;/xsl:analyze-string&gt;     
                     &lt;/xsl:when&gt;
                     &lt;!-- old type --&gt;
                     &lt;xsl:otherwise&gt;
                     &lt;xsl:value-of select="/descendant::table[1]/descendant::font[contains(.,'GEN')]/following::i[1]"/&gt;
                     &lt;/xsl:otherwise&gt;
                     &lt;/xsl:choose&gt;
                     &lt;/xsl:variable&gt;
                  </div>
               </div> This variable is then checked against regular expressions to assign the respective
               value from the defined enumerated list. 
               <div class="xref e195" linkend="fig.xslt.genrechoose"></div> demonstrates the
               assignment of some genres and a sub genre, implemented using case differentiation
               that takes
               advantage of the order of the test expressions. 
               <div class="figure e196" xml:id="fig.xslt.genrechoose">
                  <div class="title e197">Structuring information</div>
                  <div class="programlisting e198" xml:space="preserve">&lt;xsl:when test="matches($genreTemp, 'A[\w\.\s]*Adv')"&gt;
                     &lt;xsl:attribute name="genre"&gt;Action-Adventure&lt;/xsl:attribute&gt;
                     &lt;/xsl:when&gt;
                     &lt;!-- [...] --&gt;
                     &lt;xsl:when test="matches ($genreTemp, '[sS]port|[bB]all|board|Golf|Box|[hH]ock|[tT]enn|Wrest')"&gt;
                     &lt;xsl:attribute name="genre"&gt;Sport&lt;/xsl:attribute&gt;
                     &lt;/xsl:when&gt;
                     &lt;xsl:when test="matches($genreTemp, '[Aa]ction|Hack|[sS]hoot|Ego|PrÃ¼g|FPS')"&gt;
                     &lt;xsl:attribute name="genre"&gt;Action&lt;/xsl:attribute&gt; 
                     &lt;xsl:choose&gt;
                     &lt;xsl:when test="matches($genreTemp, 'Ego|FPS')"&gt;
                     &lt;xsl:attribute name="subgenre"&gt;First Person Action&lt;/xsl:attribute&gt;
                     &lt;/xsl:when&gt;
                     &lt;!-- [...] --&gt;
                  </div>
               </div> Because the data varies a lot throughout the transformation, many case
               differentiations are used. To find the title of some documents information stored
               into external
               documents has to be taken into account. In 
               <div class="xref e199" linkend="fig.xslt.title"></div>, a linked "cheats"
               or "tips" document is accessed to extract the game title that is hidden in the backlink
               to the
               review document. 
               <div class="figure e200" xml:id="fig.xslt.title">
                  <div class="title e201">Extracting the game title from an external document</div>
                  <div class="programlisting e202" xml:space="preserve">&lt;xsl:when test="/descendant::table[2]/descendant::td[1]/div[1]/
                     descendant::a[doc-available(concat($filepath,(replace
                     (attribute::href, '-i.htm', '-t.xml'))))]"&gt;
                     &lt;xsl:variable name="doc" select="concat($filepath,replace
                     (/descendant::table[2]/descendant::td[1]/div[1]/descendant::a/
                     attribute::href, '-i.htm', '-t.xml'))"/&gt;
                     &lt;xsl:value-of select="document($doc,.)/descendant::table[1]/descendant::a[1]"/&gt;
                     &lt;/xsl:when&gt;
                  </div>
               </div> Throughout the transformation many more requirements are met in carrying out the
               upconversion. The examples above are simply illustrative of the process without going
               into
               complete detail. 
            </div>
         </div><a name="PipeliningwithXProcANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e203" xml:id="pipelining">
            <div class="title e204">Pipelining with XProc</div>
            <div class="para e205">XProc a new standard for automating processes like ours through an XML pipeline has
               been
               developed by the W3 working group 
               <div class="xref e206" linkend="bibW3C.XProc2010"></div>. It has reached the status
               of W3C Recommendation on 11 May 2010 after being advanced to Proposed Recommendation
               in March
               2010. The specification had been downgraded from Candidate Recommendation to Working
               Draft again
               in January to solve some issues. It has reached a fairly stable level now, and a book
               on XProc
               by Norman Walsh is in progress.
               <div class="popupBox e207">
                  <div class="popupLabel" onmouseover="$('#d1e455').show('1000');" onmouseout="$('#d1e455').hide('1000');">[ footnote ]</div>
                  <div id="d1e455" style="display: none;">
                     <div class="footnote">
                        <div class="para e208">
                           <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e209" xlink:actuate="onRequest" xlink:href="http://norman.walsh.name/2010/04/12/xprocbook" xlink:show="new" xlink:type="simple">http://norman.walsh.name/2010/04/12/xprocbook</div> and 
                           <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e210" xlink:actuate="onRequest" xlink:href="http://xprocbook.com/" xlink:show="new" xlink:type="simple">http://xprocbook.com/</div>.
                        </div>
                     </div>
                  </div>
               </div> For our desired all-in-one XML solution, XProc is first choice to handle the
               pipeline.
            </div>
            <div class="para e211">The pipeline should process the documents that are stored locally in the filesystem
               recursively (
               <div class="xref e212" linkend="fig.filesystem"></div>). There are documents other than game reviews
               (e.g. cheats and tricks), and we need some of them to extract the titles of games,
               but most of
               these documents are discarded. One problem here is that while we can say from the
               filename what
               is most likely 
               <div class="emphasis e213">not</div> a test, but not what actually is. 
               <div class="figure e214" xml:id="fig.filesystem">
                  <div class="title e215">An overview of the filesystem</div>
                  <div class="mediaobject e216">
                     <div class="imageobject e217">
                        <div class="metaBox e218"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e476').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e476" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e218'
                                 </span><span class="metaAttribute">fileref='../../../vol5/graphics/Haupt01/Haupt01-004.png'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div> The pipeline will apply the following tasks to each HTML document: 
               <div class="itemizedlist e219">
                  <div class="listitem e220">
                     <div class="para e221">Use HTML Tidy to transform the HTML input into well-formed XML</div>
                  </div>
                  <div class="listitem e222">
                     <div class="para e223">Apply the XSLT script to the output of the former task using an XSLT 2.0
                        processor
                     </div>
                  </div>
                  <div class="listitem e224">
                     <div class="para e225">Validate the output files according to the XML schema</div>
                  </div>
                  <div class="listitem e226">
                     <div class="para e227">Separate valid from invalid documents</div>
                  </div>
                  <div class="listitem e228">
                     <div class="para e229">Provide a log of valid documents</div>
                  </div>
               </div> XProc suits these needs well, and, as an XML language, ensures perfect XML
               compatibility. For processing we use XML Calabash version 0.9.21.
               <div class="popupBox e230">
                  <div class="popupLabel" onmouseover="$('#d1e495').show('1000');" onmouseout="$('#d1e495').hide('1000');">[ footnote ]</div>
                  <div id="d1e495" style="display: none;">
                     <div class="footnote">
                        <div class="para e231">
                           <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e232" xlink:actuate="onRequest" xlink:href="http://xmlcalabash.com/" xlink:show="new" xlink:type="simple">http://xmlcalabash.com/</div> for further details.
                        </div>
                     </div>
                  </div>
               </div> As another option, Calumet 1.0.11,
               <div class="popupBox e233">
                  <div class="popupLabel" onmouseover="$('#d1e502').show('1000');" onmouseout="$('#d1e502').hide('1000');">[ footnote ]</div>
                  <div id="d1e502" style="display: none;">
                     <div class="footnote">
                        <div class="para e234">
                           <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e235" xlink:actuate="onRequest" xlink:href="https://community.emc.com/community/edn/xmltech" xlink:show="new" xlink:type="simple">https://community.emc.com/community/edn/xmltech</div> for further details.
                        </div>
                     </div>
                  </div>
               </div> was taken into account, but since Calumet currently does not support XPath 2.0, we
               stick to XML Calabash. We prepared the documents so the encoding of the files is either
               ISO-8859-1 or UTF-8 and the special characters are masked as numeric entities for
               the moment.
               Otherwise there would be encoding errors in the result XML documents. Since the pipeline
               shall
               take HTML documents as input and shall process all of them in sequential order some
               preparatory
               steps are used to make the documents accessible inside the XML pipeline. 
               <div class="xref e236" linkend="fig.pipelinepreparations"></div> provides a simplified overview of the first steps of the
               pipeline.
               <div class="figure e237" xml:id="fig.pipelinepreparations">
                  <div class="title e238">Preparatory steps</div>
                  <div class="mediaobject e239">
                     <div class="imageobject e240">
                        <div class="metaBox e241"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e515').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e515" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e241'
                                 </span><span class="metaAttribute">fileref='../../../vol5/graphics/Haupt01/Haupt01-005.png'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div> We chose 
               <div class="code e242">p:declare-step</div> as root element for good control of input and
               output ports. Both are set to allow any number of documents. Since parameters are
               to be used for
               XSLT transformation, we need the optional input port "parameters" - because it is
               the only
               parameter port in the pipeline it is primary by default. The source directory HTML
               is bound to a
               variable and made accessible for the step 
               <div class="code e243">p:directory-list</div>, which here returns the
               system-folders in c-namespace (
               <div class="xref e244" linkend="fig.pipeline.c.start"></div>). 
               <div class="figure e245" xml:id="fig.pipeline.c.start">
                  <div class="title e246">Setting the basics</div>
                  <div class="programlisting e247" xml:space="preserve">&lt;?xml version="1.0"?&gt;
                     &lt;p:declare-step xmlns:p="http://www.w3.org/ns/xproc" xmlns:c="http://www.w3.org/ns/xproc-step"
                     name="main" version="1.0"&gt;
                     &lt;p:input port="parameters" kind="parameter"/&gt; 
                     &lt;p:input port="source" sequence="true"/&gt;
                     &lt;p:output port="result" sequence="true"&gt;
                     &lt;p:pipe port="result" step="loglast"/&gt;
                     &lt;/p:output&gt;
                     &lt;p:variable name="input" select="'HTML'"/&gt; 
                     &lt;p:directory-list name="directories"&gt;
                     &lt;p:with-option name="path" select="$input"/&gt;  
                     &lt;/p:directory-list&gt;
                  </div>
               </div> To advance deeper into the structure we use nested 
               <div class="code e248">p:for-each</div> loops; of
               course, the output port needs to be set to accept sequences. Next we list the subdirectories,
               consisting mainly of game-folders (
               <div class="xref e249" linkend="fig.pipeline.c.loop"></div>). 
               <div class="figure e250" xml:id="fig.pipeline.c.loop">
                  <div class="title e251">The main loop</div>
                  <div class="programlisting e252" xml:space="preserve">&lt;p:for-each name="directoryloop"&gt;  
                     &lt;p:output port="result" sequence="true"/&gt;
                     &lt;p:iteration-source select="/c:directory/c:directory"/&gt;  
                     &lt;p:variable name="dirpath"
                     select="concat($input,'/', c:directory/@name)"/&gt;  
                     &lt;p:directory-list name="subdirectories"&gt;
                     &lt;p:with-option name="path" select="$dirpath"/&gt;
                     &lt;/p:directory-list&gt;
                  </div>
               </div> Now we loop over the game-folders (not shown due to space restrictions) and prepare
               the files for accessibility. First we add the base-uri to get the complete filepath
               using
               
               <div class="code e253">p:make-absolute-uris</div>. Then we add slashes using 
               <div class="code e254">p:string-replace</div> to
               ensure accordance to the file protocol. To make sure the file is accessible for the
               
               <div class="code e255">p:http-request</div> step we rename the element 
               <div class="code e256">c:file</div> to
               
               <div class="code e257">c:request</div>.
               <div class="popupBox e258">
                  <div class="popupLabel" onmouseover="$('#d1e559').show('1000');" onmouseout="$('#d1e559').hide('1000');">[ footnote ]</div>
                  <div id="d1e559" style="display: none;">
                     <div class="footnote">
                        <div class="para e259">We will need 
                           <div class="code e260">p:http-request</div>, although we work on the filesystem. This is
                           because 
                           <div class="code e261">p:data</div>, which one could expect here, is not a step and therefore does not
                           accept options.
                        </div>
                     </div>
                  </div>
               </div> Furthermore, we need to add the proper attributes for the
               
               <div class="code e262">p:http-request</div> step to work. Since there is no server involved and we do not want
               to work with binary data, we need to add the attribute 
               <div class="code e263">override-content-type</div> and
               attach the value 
               <div class="code e264">text/html</div> (
               <div class="xref e265" linkend="fig.pipeline.c.HTMLpreparations"></div>).
               
               <div class="figure e266" xml:id="fig.pipeline.c.HTMLpreparations">
                  <div class="title e267">Preparing to process HTML</div>
                  <div class="programlisting e268" xml:space="preserve">&lt;p:make-absolute-uris match="c:file/@name"&gt;
                     &lt;p:with-option name="base-uri" select="concat($subdirpath, '/', c:directory/@name)"/&gt;
                     &lt;/p:make-absolute-uris&gt;
                     &lt;p:string-replace match="c:file/@name" replace="replace(., 'file:', 'file://')" name="replace"/&gt;
                     &lt;p:rename match="c:file" new-name="c:request"/&gt;
                     &lt;p:rename match="@name" new-name="href"/&gt;
                     &lt;p:add-attribute match="c:request" attribute-name="method" attribute-value="get"/&gt;
                     &lt;p:add-attribute match="c:request" attribute-name="override-content-type" attribute-value="text/html"/&gt;
                  </div>
               </div> Now we can process the HTML documents in sequence. We use a filter to exclude
               documents which are not reviews and will not help us to find game titles (
               <div class="xref e269" linkend="fig.pipeline.c.filter"></div>). These documents may be reader reviews that follow no
               certain structure, hardware reviews, or other texts. Files that may help us to find
               missing game
               titles contain these abbreviations: 
               <div class="code e270">opt|chea|tipp|herz|guid|pass</div>. 
               <div class="figure e271" xml:id="fig.pipeline.c.filter">
                  <div class="title e272">Filtering documents not needed</div>
                  <div class="programlisting e273" xml:space="preserve">&lt;p:filter name="filter" select="//c:request[matches(@href, '-i.htm')] 
                     except //c:request[matches(@href, 'les[0-9]|hardware|wifi|wiiware|leser|preview|xpl|wer\.')]"/&gt;
                     &lt;p:for-each name="fileloop"&gt;
                     &lt;p:output port="result" sequence="true"/&gt;
                  </div>
               </div> For the filtered documents, the second and, therefore, the main part of the pipeline
               is initiated (
               <div class="xref e274" linkend="fig.pipeline.main.part"></div>). If something goes wrong during the
               upconversion, we want to be able to check in which step and what the reason may be,
               so each of
               the main steps has its output stored apart from each other. We nest 
               <div class="code e275">try-catch</div>
               clauses to ensure the flow of the pipeline. 
               <div class="figure e276" xml:id="fig.pipeline.main.part">
                  <div class="title e277">An overview of the main steps</div>
                  <div class="mediaobject e278">
                     <div class="imageobject e279">
                        <div class="metaBox e280"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e609').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e609" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e280'
                                 </span><span class="metaAttribute">fileref='../../../vol5/graphics/Haupt01/Haupt01-006.png'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div> The variable 
               <div class="code e281">file</div> holds the URI of each file. It will be available
               throughout the loop and not only serve to get each file but to store each file in
               its given
               folder. So first we convert these files that pass the filter through HTML Tidy via
               
               <div class="code e282">p:exec</div>, which can take non-XML input and provides safety (
               <div class="xref e283" linkend="fig.pipeline.c.exec"></div>). We could use 
               <div class="code e284">p:unescape-markup</div> in conjunction
               with Tagsoup 1.2
               <div class="popupBox e285">
                  <div class="popupLabel" onmouseover="$('#d1e623').show('1000');" onmouseout="$('#d1e623').hide('1000');">[ footnote ]</div>
                  <div id="d1e623" style="display: none;">
                     <div class="footnote">
                        <div class="para e286">
                           <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e287" xlink:actuate="onRequest" xlink:href="http://ccil.org/~cowan/XML/tagsoup/" xlink:show="new" xlink:type="simple">http://ccil.org/~cowan/XML/tagsoup/</div> for
                           further details.
                        </div>
                     </div>
                  </div>
               </div> or HTML Tidy as an alternative solution here, but as XML Calabash so far only
               implemented Tagsoup for reading HTML and the results from HTML Tidy and Tagsoup differ
               slightly,
               we stick to 
               <div class="code e288">p:exec</div>. Calumet supports both HTML Tidy and Tagsoup for this step, but
               as we are using XPath 2.0 we cannot use this option. We set 
               <div class="code e289">source-is-xml</div> to false
               and 
               <div class="code e290">result-is-xml</div> to true. By default, result lines are wrapped, and the output of
               this step is also wrapped to ensure wellformed XML documents on the output port. We
               negate
               
               <div class="code e291">wrap-result-lines</div> and unwrap the output of the step. (Note that the arguments for
               HTML Tidy need to be in a single line.) 
               <div class="figure e292" xml:id="fig.pipeline.c.exec">
                  <div class="title e293">Using 
                     <div class="code e294">p:exec</div> to do a first cleanup 
                  </div>
                  <div class="programlisting e295" xml:space="preserve">&lt;p:variable name="file" select="c:request/@href"/&gt;    
                     &lt;p:http-request/&gt;
                     &lt;p:exec command="/usr/bin/tidy" source-is-xml="false" result-is-xml="true" wrap-result-lines="false"&gt;
                     &lt;p:with-option name="args" select=
                     "'--quiet yes --show-warnings no --output-xml yes --bare yes --doctype omit 
                     --numeric-entities yes --char-encoding utf8'"/&gt;
                     &lt;/p:exec&gt;
                     &lt;p:unwrap match="c:result"/&gt;
                  </div>
               </div>
               
            </div>
            <div class="para e296"> The output of this step is saved to folder "Tidied" as "filename.xml" and chained
               to the
               next step 
               <div class="code e297">p:xslt</div>. As a precaution, this step along with the connected saving
               procedure is encapsulated into a try group. If any of this fails, we record the tidied
               file to
               the folder "Transform-failed". The 
               <div class="code e298">p:xslt</div> step takes three input ports, one for the
               stylesheet, one for the XML document and one for parameters (
               <div class="xref e299" linkend="fig.pipeline.c.xslt"></div>). The filepath needs to be provided to the stylesheet to ensure reaching the documents
               that
               will be consulted for missing titles. The filename and system folder are processed
               inside the
               transformation as well. 
            </div>
            <div class="figure e300" xml:id="fig.pipeline.c.xslt">
               <div class="title e301">Transformation using parameters</div>
               <div class="programlisting e302" xml:space="preserve">&lt;p:xslt name="transform"&gt;
                  &lt;p:input port="source"&gt;
                  &lt;p:pipe port="result" step="tidy"/&gt;
                  &lt;/p:input&gt;
                  &lt;p:input port="stylesheet"&gt;
                  &lt;p:document href="test2xml.xsl"/&gt;
                  &lt;/p:input&gt;
                  &lt;p:with-param name="xpr.platform" select="tokenize($file, '/')[last()-2]"&gt;
                  &lt;p:pipe port="parameters" step="main"/&gt;
                  &lt;/p:with-param&gt;
                  &lt;p:with-param name="xpr.filename" select="substring-before(tokenize($file, '/')[last()],
                  '-i.htm')"&gt;
                  &lt;p:pipe port="parameters" step="main"/&gt;
                  &lt;/p:with-param&gt;
                  &lt;p:with-param name="xpr.filepath" select="$file"&gt;
                  &lt;p:pipe port="parameters" step="main"/&gt;
                  &lt;/p:with-param&gt;
                  &lt;/p:xslt&gt;
               </div>
            </div>
            <div class="para e303"> If the transformation and the saving process can be executed successfully, the output
               of
               this step serves as input for 
               <div class="code e304">p:validate-with-xml-schema</div> (
               <div class="xref e305" linkend="fig.pipeline.c.validation"></div>). Depending on the output of this step, the documents are
               saved separately. Valid documents can be found in the 'Schema-Valid' folder and the
               invalid in
               the 'Schema-Invalid' folder. (During the programming of the XSLT-Transformation, invalid
               documents give hints for expressions in need of improvement.) 
               <div class="figure e306" xml:id="fig.pipeline.c.validation">
                  <div class="title e307">Schema validation of transformation result</div>
                  <div class="programlisting e308" xml:space="preserve">&lt;p:try&gt;
                     &lt;p:group&gt;            
                     &lt;p:validate-with-xml-schema mode="strict" name="validate"&gt;      
                     &lt;p:input port="source"&gt;
                     &lt;p:pipe port="result" step="transform"/&gt;
                     &lt;/p:input&gt;
                     &lt;p:input port="schema"&gt;
                     &lt;p:document href="Struktur.xsd"/&gt;
                     &lt;/p:input&gt;        
                     &lt;/p:validate-with-xml-schema&gt;        
                     &lt;p:store name="storeValid"&gt;&lt;!-- [...] --&gt;&lt;/p:store&gt; 
                     &lt;p:identity&gt;
                     &lt;p:input port="source"&gt;&lt;p:pipe step="storeValid" port="result"/&gt;&lt;/p:input&gt;
                     &lt;/p:identity&gt; 
                     &lt;/p:group&gt;       
                     &lt;p:catch&gt;
                     &lt;p:identity&gt;
                     &lt;p:input port="source"&gt;&lt;p:pipe step="transform" port="result"/&gt;&lt;/p:input&gt;
                     &lt;/p:identity&gt;        
                     &lt;p:store name="storeInvalid"&gt;&lt;!-- [...] --&gt;&lt;/p:store&gt;
                     &lt;/p:catch&gt;
                     &lt;/p:try&gt;
                  </div>
               </div> The last steps of the pipeline follow after the loops and take the result of the
               loop
               started in 
               <div class="xref e309" linkend="fig.pipeline.c.loop"></div>. Here we create an XML document which takes the
               
               <div class="code e310">c:result</div> elements returned by the step 
               <div class="code e311">directoryloop</div> and lists them
               for an overview (
               <div class="xref e312" linkend="pipeline.c.logvalid"></div>). 
               <div class="figure e313" xml:id="pipeline.c.logvalid">
                  <div class="title e314">Logging the valid files</div>
                  <div class="programlisting e315" xml:space="preserve">&lt;p:documentation&gt;Wrap result for info.&lt;/p:documentation&gt;
                     &lt;p:wrap-sequence wrapper="directoryloop"/&gt;
                     &lt;p:store name="loglast"&gt;
                     &lt;p:with-option name="href" select="'file:///home/user/loglaststep.xml'"/&gt;
                     &lt;p:with-option name="encoding" select="'UTF-8'"/&gt;
                     &lt;p:with-option name="omit-xml-declaration" select="'false'"/&gt;
                     &lt;p:with-option name="indent" select="'true'"/&gt;
                     &lt;/p:store&gt;
                  </div>
               </div>
               
            </div>
            <div class="para e316">This pipeline takes approximately half an hour to process the data, and is relatively
               independent of CPU speed on an average actual system. It results in 1573 schema-valid
               files.
               
            </div>
         </div><a name="TheresultoftheupconversionprocessANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e317">
            <div class="title e318">The result of the upconversion process</div>
            <div class="para e319">
               
               <div class="xref e320" linkend="fig.instance"></div> shows an excerpt of an instance coded in the target output format
               according to the XML schema. The critical information is marked up with the help of
               appropriate
               elements or attributes. Conversions of a game (i.e., the release on different platforms)
               are
               supported, as well, by separating the general information such as title and genre
               from the
               platform for which the review is written. The verdict contains the list of "pro" and
               "con" items
               and the score (depending on the input review type, subdivided into single figures
               for game
               graphics, sound, multiplayer and overall) in a highly-structured form that allows
               easy access to
               relevant criteria.
            </div>
            <div class="figure e321" xml:id="fig.instance">
               <div class="title e322">The result of the upconversion</div>
               <div class="programlisting e323" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
                  &lt;game xml:id="d1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:noNamespaceSchemaLocation="Struktur.xsd" genre="Jump 'n' Run"&gt;
                  &lt;title abbreviation="rayman3"&gt;Rayman3 Hoodlum Havoc&lt;/title&gt;
                  &lt;platforms&gt;
                  &lt;videoGameConsole type="GCN"&gt;
                  &lt;developer&gt;Ubi Soft&lt;/developer&gt;
                  &lt;difficulty min="1" max="6"/&gt;
                  &lt;release&gt;
                  &lt;languages&gt;
                  &lt;spoken xml:lang="de"/&gt;
                  &lt;/languages&gt;
                  &lt;price currency="EUR"&gt;60&lt;/price&gt;
                  &lt;/release&gt;
                  &lt;player min="1" max="4"/&gt;
                  &lt;techSpecs&gt;
                  &lt;item&gt;PAL&lt;/item&gt;
                  &lt;item&gt;GCN-GBA-Link&lt;/item&gt;
                  &lt;/techSpecs&gt;
                  &lt;saving mode="Memorycard" blocks="8"/&gt;
                  &lt;compatibleInputDevices&gt;
                  &lt;item&gt;Gamecube Controller&lt;/item&gt;
                  &lt;item&gt;GBA&lt;/item&gt;
                  &lt;/compatibleInputDevices&gt;
                  &lt;review date="2003-02-24" authorFirstname="Matthias"
                  authorLastname="Engert"&gt;
                  &lt;mainText&gt;
                  &lt;paragraph&gt;Bisher hat uns Ubi Soft ja (...)&lt;/paragraph&gt;
                  &lt;paragraph&gt;Durch den Score werden (...)&lt;/paragraph&gt;
                  &lt;paragraph&gt;(...)&lt;/paragraph&gt;
                  &lt;/mainText&gt;
                  &lt;conclusion&gt;
                  &lt;pro&gt;
                  &lt;item&gt;Unterhaltsames Gameplay&lt;/item&gt;
                  &lt;/pro&gt;
                  &lt;contra&gt;
                  &lt;item&gt;Ende wird zu schnell erreicht&lt;/item&gt;
                  &lt;/contra&gt;
                  &lt;score&gt;
                  &lt;percent graphics="85" sound="85" multiplayer="82"
                  overall="82"/&gt;
                  &lt;/score&gt;
                  &lt;/conclusion&gt;
                  &lt;/review&gt;
                  &lt;/videoGameConsole&gt;
                  &lt;/platforms&gt;
                  &lt;/game&gt;
               </div>
            </div>
         </div>
      </div><a name="Benefitsofhighlystructureddata%E2%80%94searchingforthegameaccordingtoyour%0AflavourANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e324" xml:id="benefits">
         <div class="title e325">Benefits of highly structured data â€” searching for the game according to your
            flavour
         </div>
         <div class="para e326">The result instances of the automatic upconversion process discussed in the 
            <div class="xref e327" linkend="conversion"></div> contains highly structured information. All relevant and important data
            that was formerly hidden inside HTML's 
            <div class="code e328">table</div> element or as part of the running text
            can be accessed via XPath or XQuery expressions 
            <div class="xref e329" linkend="bibChamberlin2004"></div>, allowing for
            easy retrieval of reviews of games of certain types or according to certain criteria
            such as
            genre, price, and score. While the original structure of the 
            <div class="emphasis e330" role="ital">Mag'64</div> Web site offered access to the review based on either the video game system
            or the name of the game, a full-text search engine was not implemented. We have 
            developed some sample XQuery queries that allow for a different kind of retrieval
            of game
            reviews.
         </div><a name="AlternativeaccesstothereviewsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e331">
            <div class="title e332">Alternative access to the reviews</div>
            <div class="para e333">The query 
               <div class="code e334">genres.xq</div> uses two parameters, genre and platform, to search for
               games of a certain genre on a specific platform by using a collection of all valid
               XML instance
               documents. 
               <div class="xref e335" linkend="genres.xq.result"></div> shows the output of the 
               <div class="code e336">genres.xq</div>
               with the value "Wii" for the platform parameter and the value "Puzzle"
               supplied for the genre paramater. Since this query was originally developed as a alternative
               access mechanism, the information returned is very sparse. However, in combination
               with
                (X)HTML output containing hyperlinks to the respective review page, it would be
               sufficient.
            </div>
            <div class="figure e337" xml:id="genres.xq.result">
               <div class="title e338">Result example for 
                  <div class="code e339">genres.xq</div>
               </div>
               <div class="programlisting e340" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
                  &lt;games on="Wii" type="Puzzle"&gt;
                  &lt;instance score="85" abbreviation="pqwii"&gt;Puzzle Quest: Challenge of the Warlords&lt;/instance&gt;
                  &lt;instance score="80" abbreviation="jewel"&gt;Jewel Master: Cradle of Rom&lt;/instance&gt;
                  &lt;instance score="79" abbreviation="phwwii"&gt;Professor Heinz Wolff's Gravity&lt;/instance&gt;
                  &lt;instance score="76" abbreviation="bbawii"&gt;Big Brain Academy &lt;/instance&gt;
                  &lt;instance score="50" abbreviation="jengawii"&gt;Jenga World Tour &lt;/instance&gt;
                  &lt;/games&gt;
               </div>
            </div>
         </div><a name="FindingagameaccordingtospecificfeaturesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e341">
            <div class="title e342">Finding a game according to specific features</div>
            <div class="para e343">Sometimes a user searches for games that support certain technical features, such
               as online
               content, multiplayer, etc. The 
               <div class="code e344">techspecs.xq</div> query uses the parameter platform and
               techspec to retrieve only the reviews of games that include the provided feature.
               
               <div class="xref e345" linkend="techspecs.xq.result"></div> shows an example result.
            </div>
            <div class="figure e346" xml:id="techspecs.xq.result">
               <div class="title e347">Result example for 
                  <div class="code e348">techspecs.xq</div>
               </div>
               <div class="programlisting e349" xml:space="preserve">&lt;games on="NDS" featuring="Online"&gt;
                  &lt;instance score="92" abbreviation="suik"&gt;Suikoden Tierkreis &lt;/instance&gt;
                  &lt;instance score="90" abbreviation="layton"&gt;Professor Layton und das geheimnisvolle
                  Dorf&lt;/instance&gt;
                  &lt;instance score="89" abbreviation="fesd"&gt;Fire Emblem : Shadow Dragon&lt;/instance&gt;
                  &lt;instance score="88" abbreviation="cpor"&gt;Castlevania: Portrait of Ruin&lt;/instance&gt;(...)
                  &lt;/games&gt;
               </div>
            </div>
         </div><a name="Amoreelaboratedexample:awishlistANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e350">
            <div class="title e351">A more elaborated example: a wish list</div>
            <div class="para e352">Kids love video games these days, and often they leave their parents behind when it
               comes
               to choosing the right game for a present. We will demonstrate the benefits of highly
               structured
               data in this example. Consider a seven-year-old child with a 
               <div class="trademark registered e353">Nintendo DS</div> who wants to get a racing game for his system. The parents might agree
               but formula additional constraints: the game to be bought should have a score of at
               least 70%
               and should be appropriate for kids of his age. Furthermore, the difficulty should
               not be too
               high.
            </div>
            <div class="para e354">For this query different parameters have to be taken into account: the platform, the
               genre,
               age rating, score, and difficulty. The 
               <div class="code e355">shoppingList.xq</div> query provides all these
               parameters (
               <div class="xref e356" linkend="shoppinglist.xq.xq"></div>). Using Saxon as XQuery processor with the
               following call results in the output shown in 
               <div class="xref e357" linkend="shoppinglist.xq.result"></div>.
            </div>
            <div class="figure e358" xml:id="shoppinglist.xq.xq">
               <div class="title e359">Query for a shopping list</div>
               <div class="programlisting e360" xml:space="preserve">XQuery.sh shoppingList.xq age=7 platform=NDS score=70 genre=Rennspiel maxDifficulty=7</div>
            </div>
            <div class="figure e361" xml:id="shoppinglist.xq.result">
               <div class="title e362">Result example for 
                  <div class="code e363">shoppinglist.xq</div>
               </div>
               <div class="programlisting e364" xml:space="preserve">&lt;games maxAgeRating="7" on="NDS" maxDifficulty="7" type="Rennspiel" scoreAtLeast="70"&gt;
                  &lt;instance ageRating="3" score="82" maxDifficulty="7" abbreviation="augt2" minDifficulty="1"&gt;
                  &lt;title&gt;Asphalt Urban GT 2&lt;/title&gt;
                  &lt;notes&gt;
                  &lt;pro&gt;62 Meisterschaften&lt;/pro&gt;
                  &lt;pro&gt;FÃ¼r Fans von Arcade Steuerung&lt;/pro&gt;
                  &lt;pro&gt;Sehr gute Framerate/Technik&lt;/pro&gt;
                  &lt;pro&gt;Fahrzeugmodelle/Anzahl&lt;/pro&gt;
                  &lt;pro&gt;Grafische PrÃ¤sentation&lt;/pro&gt;
                  &lt;pro&gt;Verschiedene Rennmodi&lt;/pro&gt;
                  &lt;pro&gt;Werkstatt Feature&lt;/pro&gt;
                  &lt;pro&gt;Gamespeed/StraÃŸenverkehr&lt;/pro&gt;
                  &lt;pro&gt;Motorrad Inhalte&lt;/pro&gt;
                  &lt;contra&gt;Leichter als der VorgÃ¤nger&lt;/contra&gt;
                  &lt;contra&gt;Polizei in den Meisterschaften&lt;/contra&gt;
                  &lt;contra&gt;Kein 1C Multiplayer&lt;/contra&gt;
                  &lt;/notes&gt;
                  &lt;/instance&gt;
                  &lt;instance ageRating="3" score="77" maxDifficulty="7" abbreviation="cnr" minDifficulty="1"&gt;
                  &lt;title&gt;Cartoon Network Racing&lt;/title&gt;
                  &lt;notes&gt;
                  &lt;pro&gt;Gute Grundsteuerung&lt;/pro&gt;
                  &lt;pro&gt;Umfangreich duch 4 Cups&lt;/pro&gt;
                  &lt;pro&gt;Steigende Gegner KI&lt;/pro&gt;
                  &lt;pro&gt;Lange Strecken&lt;/pro&gt;
                  &lt;pro&gt;11 gelungene Strecken&lt;/pro&gt;
                  &lt;pro&gt;Gelungene Items&lt;/pro&gt;
                  &lt;pro&gt;Viele Belohnungen&lt;/pro&gt;
                  &lt;pro&gt;Kart Curling Minispiel&lt;/pro&gt;
                  &lt;contra&gt;Kurventechnik per R-Taste&lt;/contra&gt;
                  &lt;contra&gt;5 der 16 Strecken&lt;/contra&gt;
                  &lt;contra&gt;Single Card MP&lt;/contra&gt;
                  &lt;contra&gt;Zu abruptes Bremsen bei Crashs&lt;/contra&gt;
                  &lt;/notes&gt;
                  &lt;/instance&gt;
                  &lt;/games&gt;
               </div>
            </div>
            <div class="para e365">The results are sorted according to the score in descending order (with 100 representing
               the best value). Each 
               <div class="code e366">instance</div> element contains the age rating, score, and
               information about the difficulty, encoded in attribute values. Child elements are
               the title and
               the review notes, consisting of the "pros" and "cons" of the game. The 
               <div class="code e367">notes</div>
               element, in particular, may contain information that is subjective; it may occur that
               our
               example parents will judge a certain feature higher or lower than the reviewer did
               (or even
               think of a "con" as a "pro").
            </div>
         </div>
      </div><a name="ConclusionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e368" xml:id="conclusion">
         <div class="title e369">Conclusion</div>
         <div class="para e370">The results of our work are of many kinds: first, the newly introduced features such
            as
            regular expressions and string manipulations qualify XSLT 2.0 as a full-fledged conversion
            tool
            for transforming weak structured data into a highly structured format. Second, if
            a
            transformation process has to be carried out multiple times and if other processing
            is involved,
            automation by using the XProc pipelining language is highly recommended. Both the
            XProc
            specification and the supporting software tools are ready for a productive environment.
            Furthermore, the output of the upconversion clearly shows a high potential in terms
            of
            flexibility and of the ability to retrieve certain information, as shown by our example
            applications using XQuery.
         </div>
         <div class="para e371">We are certain that minor problems such as the one caused by the character encoding
            will be
            fixed during the ongoing development of XProc software. From our point of view, future
            modifications could result in a XSD 1.1 compatible XML schema supporting more video
            game systems
            or textual content that is not review related, such as cheats, hints, or walk-throughs.
            Both the
            XSLT script and the XQuery queries could be modified in how they interact with each
            other. For
            example, the distinction of different cases that is carried out by the XSLT script
            could be
            reformulated as pipeline step, allowing for a more maintainable XSLT script.
         </div>
         <div class="para e372">In general, the realization of the pipeline and query system as a Web service in conjunction
            with a native XML database would result in an alternative search and retrieval mechanism
            that
            would indeed 
            <div class="emphasis e373" role="ital">search for the game according to your
               flavour.
            </div>
         </div>
      </div><a name="LiteratureANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e374">
         <div class="title e375">Literature</div>
         <div class="bibliomixed e376" xml:id="bibChamberlin2004" xreflabel="Chamberlin et al. (2004)"> Chamberlin, D., D.
            Draper, M. F. FernÃ¡ndez, M. Kay, J. Robie, M. Rys, J. SimÃ©on, J. Tivy, and P. Wadler,
            
            <div class="emphasis e377" role="ital">XQuery from the Experts: A Guide to the W3C XML Query Language.</div> Pearson
            Education. Addison-Wesley, Boston, 2004.
         </div>
         <div class="bibliomixed e378" xml:id="bibHTML3.2" xreflabel="HTML 3.2 Reference Specification"> Raggett, D.
            
            <div class="emphasis e379" role="ital">HTML 3.2 Reference Specification.</div> W3C Recommendation. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e380" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/REC-html32" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/REC-html32</div>, 1997. 
         </div>
         <div class="bibliomixed e381" xml:id="bibHTML4.01" xreflabel="HTML 4.01"> Raggett, D., A. L. Hors, and I. Jacobs,
            
            <div class="emphasis e382" role="ital">HTML 4.01 Specification.</div> W3C Recommendation 24 December 1999,
            World Wide Web Consortium. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e383" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/1999/REC-html401-19991224" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/1999/REC-html401-19991224</div>, 1999. 
         </div>
         <div class="bibliomixed e384" xml:id="bibHTML.ISO" xreflabel="HTML (ISO), ISO/IEC    15445:2000">
            <div class="emphasis e385" role="ital">Information technology â€” Document description and processing languages â€” HyperText
               Markup Language (HTML).
            </div> ISO/IEC 15445:2000, International standard, International
            Organization for Standardization, Geneva, 2000.
         </div>
         <div class="bibliomixed e386" xml:id="bibISO4217" xreflabel="ISO Country Codes, ISO 4217:2008">
            
            <div class="emphasis e387" role="ital">Codes for the representation of currencies and funds.</div> ISO
            4217:2008, International standard, International Organization for Standardization,
            Geneva,
            2008.
         </div>
         <div class="bibliomixed e388" xml:id="bibKay2004" xreflabel="Kay (2004)"> Kay, M. "Up-conversion using XSLT 2.0."
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e389" xlink:actuate="onRequest" xlink:href="http://www.saxonica.com/papers/ideadb-1.1/mhk-paper.xml" xlink:show="new" xlink:type="simple">http://www.saxonica.com/papers/ideadb-1.1/mhk-paper.xml</div>, 2004. 
         </div>
         <div class="bibliomixed e390" xml:id="bibKay2008" xreflabel="Kay (2008)"> Kay, M. 
            <div class="emphasis e391" role="ital">XSLT 2.0
               and XPath 2.0 Programmerâ€™s Reference.
            </div> Wiley Publishing, Indianapolis, 4th edition,
            2008.
         </div>
         <div class="bibliomixed e392" xml:id="bibRelaxNG" xreflabel="RelaxNG, ISO/IEC 19757-2:2003)">
            <div class="emphasis e393" role="ital">Information technology - Document Schema Definition Language (DSDL) â€” Part 2:
               Regular-grammar-based validation â€” RELAX NG.
            </div> ISO/IEC 19757-2:2003, International
            standard, International Organization for Standardization, Geneva, 2003. 
         </div>
         <div class="bibliomixed e394" xml:id="bibSGML" xreflabel="SGML, ISO 8879:1986">
            
            <div class="emphasis e395" role="ital">Information Processing â€” Text and Office Information Systems â€” Standard
               Generalized Markup Language.
            </div> International standard, International Organization for
            Standardization, Geneva 1986.
         </div>
         <div class="bibliomixed e396" xml:id="bibSuda2006" xreflabel="Suda (2006)"> Suda, B. 
            <div class="emphasis e397" role="ital">Using
               microformats.
            </div> O'Reilly, Sebastopol, CA, USA, (2006).
         </div>
         <div class="bibliomixed e398" xml:id="bibWalmsley2002" xreflabel="Walmsley (2002)"> Walmsley, P. 
            <div class="emphasis e399" role="ital">Definitive XML Schema.</div> Prentice Hall PTR, Upper Saddle River, NJ, USA,
            2002.
         </div>
         <div class="bibliomixed e400" xml:id="bibXML1.0" xreflabel="XML 1.0"> Bray, T., J. Paoli, and C. M.
            Sperberg-McQueen, 
            <div class="emphasis e401" role="ital">Extensible Markup Language (XML) 1.0.</div> W3C
            Recommendation 10 February 1998. World Wide Web Consortium. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e402" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/1998/REC-xml-19980210" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/1998/REC-xml-19980210</div>, 1998. 
         </div>
         <div class="bibliomixed e403" xml:id="bibW3C.XMLSchemaPrimer" xreflabel="XML Schema Part 0: Primer"> Fallside, D.
            C., and P. Walmsley, 
            <div class="emphasis e404" role="ital">XML Schema Part 0: Primer Second Edition</div>.
            W3C Recommendation 28 October 2004, World Wide Web Consortium. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e405" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/2004/REC-xmlschema-0-20041028/" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/2004/REC-xmlschema-0-20041028/</div>, 2004. 
         </div>
         <div class="bibliomixed e406" xml:id="bibW3C.XProc2010" xreflabel="XProc"> Walsh, N., A. Milowski, and H. S.
            Thompson, 
            <div class="emphasis e407" role="ital">XProc: An XML Pipeline Language.</div> W3C Recommendation 11
            May 2010, World Wide Web Consortium. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e408" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/2010/REC-xproc-20100511/" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/2010/REC-xproc-20100511/</div>, 2010.
         </div>
      </div>
   </div>
</div>