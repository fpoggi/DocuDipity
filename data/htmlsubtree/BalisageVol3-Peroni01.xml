<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#TowardsmarkupsupportforfullGODDAGsandbeyond:theEARMARKapproachANCHOR" name="TowardsmarkupsupportforfullGODDAGsandbeyond:theEARMARKapproachTOC">Towards markup support for full GODDAGs and beyond: the EARMARK approach</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#EmbeddingmultiplehierarchiesANCHOR" name="EmbeddingmultiplehierarchiesTOC">Embedding multiple hierarchies</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#Couldsingingsongsbesuchabigdeal?ANCHOR" name="Couldsingingsongsbesuchabigdeal?TOC">Could singing songs be such a big deal?</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#DarkistheoverlappingskyANCHOR" name="DarkistheoverlappingskyTOC">Dark is the overlapping sky</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#RestrictedGODDAGANCHOR" name="RestrictedGODDAGTOC">Restricted GODDAG</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#Amoregeneraldatastructure:theGODDAGANCHOR" name="Amoregeneraldatastructure:theGODDAGTOC">A more general data structure: the GODDAG</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#BeyondGODDAG:extensionsforrepeatabilityANCHOR" name="BeyondGODDAG:extensionsforrepeatabilityTOC">Beyond GODDAG: extensions for repeatability</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#EARMARKingcatsanddocsANCHOR" name="EARMARKingcatsanddocsTOC">EARMARKing cats and docs</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#GeneralmodelANCHOR" name="GeneralmodelTOC">General model</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#DetailedmodelANCHOR" name="DetailedmodelTOC"> Detailed model</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#%E2%80%9CAndILoveHer%E2%80%9DinEARMARKANCHOR" name="%E2%80%9CAndILoveHer%E2%80%9DinEARMARKTOC">“And I Love Her” in EARMARK</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#EmbeddingEARMARKdocumentsANCHOR" name="EmbeddingEARMARKdocumentsTOC">Embedding EARMARK documents</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#HandlingtheremainingEARMARKstructuresANCHOR" name="HandlingtheremainingEARMARKstructuresTOC">Handling the remaining EARMARK structures</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#MilestonesANCHOR" name="MilestonesTOC">Milestones</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#FragmentationANCHOR" name="FragmentationTOC">Fragmentation</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#RepetitionsANCHOR" name="RepetitionsTOC"> Repetitions</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#HiddenvariantsANCHOR" name="HiddenvariantsTOC"> Hidden variants</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#RDFaANCHOR" name="RDFaTOC"> RDFa</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#EmbeddedRDFANCHOR" name="EmbeddedRDFTOC"> Embedded RDF </a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConclusionsANCHOR" name="ConclusionsTOC"> Conclusions</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#AcknowledgementsANCHOR" name="AcknowledgementsTOC">Acknowledgements</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BibliographyANCHOR" name="BibliographyTOC">Bibliography</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">anonymous</div>
         <div class="singletermTERMS">a la</div>
         <div class="singletermTERMS">at</div>
         <div class="singletermTERMS">anonymous –</div>
         <div class="singletermTERMS">autonomous resources</div>
         <div class="singletermTERMS">attribute</div>
         <div class="singletermTERMS">August 11 - 14, 2009</div>
         <div class="singletermTERMS">Angelo</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">body</div>
         <div class="singletermTERMS">begins</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2009</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">contain</div>
         <div class="singletermTERMS">chord</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">div</div>
         <div class="singletermTERMS">docuverses</div>
         <div class="singletermTERMS">Docuverse</div>
         <div class="singletermTERMS">docuverse</div>
         <div class="singletermTERMS">diiorio@cs.unibo.it</div>
         <div class="singletermTERMS">Di Iorio</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">Extreme Annotational RDF Markup</div>
         <div class="singletermTERMS">extended GODDAG</div>
         <div class="singletermTERMS">e-GODDAG</div>
         <div class="singletermTERMS">EARMARK</div>
         <div class="singletermTERMS">Extreme Annotational RDF Markup.</div>
         <div class="singletermTERMS">ends</div>
         <div class="singletermTERMS">element</div>
         <div class="singletermTERMS">embedding</div>
         <div class="singletermTERMS">eID</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
         <div class="singletermTERMS">flat milestones</div>
         <div class="singletermTERMS">fragmentation</div>
         <div class="singletermTERMS">first-level</div>
         <div class="singletermTERMS">fabio@cs.unibo.it</div>
         <div class="singletermTERMS">Fabio</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
         <div class="singletermTERMS">General Ordered-Descendant Directed Acyclic Graph</div>
         <div class="singletermTERMS">GODDAG</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">has-uri</div>
         <div class="singletermTERMS">has-text</div>
         <div class="singletermTERMS">has-general-identifier</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">internal</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
         <div class="singletermTERMS">jazzy</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">Layered Markup anNotation Language</div>
         <div class="singletermTERMS">LMNL</div>
         <div class="singletermTERMS">layers</div>
         <div class="singletermTERMS">locations</div>
         <div class="singletermTERMS">location</div>
         <div class="singletermTERMS">Location</div>
         <div class="singletermTERMS">leaf</div>
         <div class="singletermTERMS">local strings</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">milestones</div>
         <div class="singletermTERMS">markup items</div>
         <div class="singletermTERMS">MarkupItem</div>
         <div class="singletermTERMS">markupitem</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">n→a</div>
         <div class="singletermTERMS">n→b</div>
         <div class="singletermTERMS">new</div>
         <div class="singletermTERMS">next</div>
         <div class="singletermTERMS">name</div>
         <div class="singletermTERMS">normal</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">per se</div>
         <div class="singletermTERMS">pointers</div>
         <div class="singletermTERMS">previous</div>
         <div class="singletermTERMS">Peroni</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">Restricted GODDAG</div>
         <div class="singletermTERMS">ranges</div>
         <div class="singletermTERMS">refer to</div>
         <div class="singletermTERMS">refers-to</div>
         <div class="singletermTERMS">Range”</div>
         <div class="singletermTERMS">repeatable edges</div>
         <div class="singletermTERMS">remaining structures</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">stand-off markup</div>
         <div class="singletermTERMS">structured</div>
         <div class="singletermTERMS">semordnilap,</div>
         <div class="singletermTERMS">sID</div>
         <div class="singletermTERMS">span</div>
         <div class="singletermTERMS">speroni@cs.unibo.it</div>
         <div class="singletermTERMS">Silvio</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">twin documents</div>
         <div class="singletermTERMS">tricks</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
         <div class="singletermTERMS">universal root</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
         <div class="singletermTERMS">variant graph</div>
         <div class="singletermTERMS">Vitali</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="TowardsmarkupsupportforfullGODDAGsandbeyond:theEARMARKapproachANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.2" xml:id="Bal2009pero0115">
      <div class="title e1">Towards markup support for full GODDAGs and beyond: the EARMARK approach</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2009</div>
            <div class="confdates e5">August 11 - 14, 2009</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">One of the most evident tenets of the literature on overlapping markup is that the
               philosophy of documents as trees (as dictated by meta-markup languages such as SGML
               and XML) is a simplification that sometimes fails and requires corrections. These
               corrections have been proposed at the markup level (e.g., milestones, segmentation),
               at the meta-markup level (e.g., LMNL, TexMecs, XCONCUR, etc.) or at level of the
               abstract model (e.g., GODDAG). Unfortunately full GODDAGs do not allow
               linearizations in general, and as such a restricted version of GODDAG, r-GODDAG, has
               been proposed that is guaranteed to be linearizable (in TexMecs) and still allows
               many nice features beyond trees.
            </div>
            <div class="para e8">In this paper we discuss that the problem of linearizing more-than-hierarchical
               structures lies basically in the embedding of markup within content and that no such
               problem arises with an appropriate standoff approach, that is able to represent full
               GODDAGs without restrictions. This gives ample opportunities to deal with
               interesting markup features that are describable with GODDAGs but not with
               r-GODDAGs, such as non-contiguous elements and virtual elements.
            </div>
            <div class="para e9">Besides, we discuss whether a specific constraint of full GODDAGs is really
               necessary once all residual hopes of embeddability are given up, and we further
               propose a minimal extension to GODDAG, genially called "extended GODDAG" (e-GODDAG)
               that, by removing the requirement for names in non-terminal nodes, adds support for
               additional interesting markup features such as content repetitions. In truth,
               e-GODDAGs are even less embeddable than full GODDAGs, but they are just as easily
               dealt with by using stand-off markup.
            </div>
            <div class="para e10">We further propose a meta-syntax for non-embedded markup, called EARMARK, that can
               be used for stand-off annotations of textual content, and that naturally represents
               e-GODDAGs with fully W3C-compliant technologies. EARMARK is based on an
               ontologically precise definition of markup that instantiates the markup of a text
               document as an OWL document, and through appropriate OWL and SWRL characterizations
               it can define structures such as trees, r-GODDAGs, full GODDAGs and e-GODDAGs, and
               can be used to generate validity constraints (including co-constraints), and to
               verify adherence to content model patterns.
            </div>
            <div class="para e11">As mentioned, in general the embedding of a full EARMARK document is not straightforward,
               but approaches can be taken in that direction: just like segmentation and
               fragmentation are strategies to embed in a strictly-hierarchical language a
               r-GODDAG-specific feature such as overlapping elements, similarly a number of
               strategies exist to provide embedding of GODDAG and e-GODDAG features in less
               expressive syntaxes. In the final part of the paper we discuss our wish to provide
               at the metalanguage level a series of embedding strategies of the non-hierarchical
               features of EARMARK, i.e. a number of language-independent mechanisms to express
               e-GODDAGs structures into XML (as well as in TexMecs and in LMNL) and that can be
               recognized as such (i.e., as strategies, as tricks) by tools and readers alike,
               especially for further uses of such documents.
            </div>
         </div>
         <div class="author e12">
            <div class="personname e13">
               <div class="firstname e14">Angelo</div>
               <div class="surname e15">Di Iorio</div>
            </div>
            <div class="personblurb e16">
               <div class="para e17">Angelo Di Iorio holds a Ph.D. in Computer Science, from the University of
                  Bologna. His thesis is positioned over markup languages and document engineering
                  areas, being focused on design patterns for digital documents and automatic
                  processes of analysis and segmentation. During his PhD he has also worked on
                  collaborative authoring, document versioning, content formatting, and semantic
                  web technologies. His research interests have recently extended towards layout
                  languages and algorithms. He is a member of the W3C XSL-FO working group, and
                  author of several conference and journal papers on markup languages, digital
                  publishing and Web technologies.
               </div>
            </div>
            <div class="affiliation e18">
               <div class="orgname e19">Department of Computer Science, University of Bologna</div>
            </div>
            <div class="email e20">diiorio@cs.unibo.it</div>
         </div>
         <div class="author e21">
            <div class="personname e22">
               <div class="firstname e23">Silvio</div>
               <div class="surname e24">Peroni</div>
            </div>
            <div class="personblurb e25">
               <div class="para e26">Silvio Peroni holds a degree in Computer Science at the University of Bologna.
                  The main research interests in his current Ph.D. career include Semantic Web
                  technologies, markup languages for complex documents, design patterns for
                  digital documents and automatic processes of analysis and segmentation. He has
                  published 4 scientific papers about these subjects.
               </div>
            </div>
            <div class="affiliation e27">
               <div class="orgname e28">Department of Computer Science, University of Bologna</div>
            </div>
            <div class="email e29">speroni@cs.unibo.it</div>
         </div>
         <div class="author e30">
            <div class="personname e31">
               <div class="firstname e32">Fabio</div>
               <div class="surname e33">Vitali</div>
            </div>
            <div class="personblurb e34">
               <div class="para e35">Fabio Vitali is associate professor in Computer Science at the University of
                  Bologna, where he teaches Web Technologies and Human-Computer Interaction. His
                  interests lie in models and languages for document management and hypertext
                  support, and has published more than 60 papers in national and international
                  venues. He is member of the W3C Working Group on XML Schema, and member of the
                  scientific committee of several conferences and journals in Web engineering and
                  technologies. He is author of important standards in the legislative XML Domain,
                  and work on issues related to digital publishing, Web technologies and Semantic
                  Web technologies.
               </div>
            </div>
            <div class="affiliation e36">
               <div class="orgname e37">Department of Computer Science, University of Bologna</div>
            </div>
            <div class="email e38">fabio@cs.unibo.it</div>
         </div>
         <div class="legalnotice e39">
            <div class="para e40">Copyright © 2009 by the authors.  Used with
               permission.
            </div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e41">
         <div class="title e42">Introduction</div>
         <div class="para e43">Not everybody working with markup languages needs support for overlaps and multiple
            hierarchies. But those that need it, usually need it badly. So badly, in fact, that
            a
            robust slice of markup literature is devoted to it, specialized scientific events
            have
            taken place, and a number of extremely varied approaches have been proposed in the
            last
            years for this issue. 
         </div>
         <div class="para e44">Some of these approaches were proposed at the language level: many XML languages (TEI
            
            <div class="xref e45" linkend="bib-1"></div> being the most evident) took the decision to add specific
            language-dependent markup structures devoted to supporting overlapping. Some of such
            solutions, such as milestones and fragmentation, are so general and widely applicable
            that have been proposed even outside of the specificity of just one markup language
            (e.g., see 
            <div class="xref e46" linkend="bib-20"></div>), as architectural forms available in general in
            XML languages. Further approaches have been to create new meta-markup languages,
            inspired by but independent from XML such as TexMecs, LMNL, XCONCUR, that provide
            at the
            metalanguage itself support for more than a single hierarchy. This makes it possible
            for
            any language defined within the syntax to make use of the features for overlaps, without
            the need for further special tools to make sense of the annotations. 
         </div>
         <div class="para e47">At the conceptual level, what has shown its limits is the idea of forcing tree-like
            structures over documents. While some may be fully described by trees, some just are
            not,
            and we need more powerful abstract data structures to describe them. GODDAGs 
            <div class="xref e48" linkend="bib-5"></div> have been proposed exactly for this purpose: direct acyclic
            ddgraphs with ordered children relax exactly the kind of constraints of trees that
            were
            in the way for sophisticated markup features such as overlap. Unfortunately, generalized
            GODDAGs do not allow an immediate linearization in form of an XML-like syntax (even
            if
            extended in some way), but a variant, restricted GODDAGs (
            <div class="xref e49" linkend="bib-5"></div> and
            then 
            <div class="xref e50" linkend="bib-23"></div>), does allow a linearization in TexMECS. In general,
            though, the linearization of full generalized GODDAGs does not allow to keep all information
            expressed in the original graph. Many additional useful features of
            GODDAGs (e.g., virtual elements) can only be converted in XML structures by recurring
            to 
            procedural tricks. 
         </div>
         <div class="para e51">In this paper we discuss whether the problem of generalized GODDAGs lies in the
            embedding nature of meta-markup languages such as XML, TexMecs and LMNL, and whether
            by
            getting rid of embeddability altogether we can exploit the full potentiality of GODDAGs.
            Furthermore, we propose a minimal extension to GODDAGs to provide full support of
            repeated content in GODDAGs (currently only allowed if appearing in different
            substructures), thereby generalizing the idea of repeatability of markup structures.
            
         </div>
         <div class="para e52">Additionally, in this paper we propose a meta language for GODDAGs and extended
            GODDAGs that relies 100% on well-known and widely available W3C technologies: EARMARK
            (
            <div class="emphasis e53" role="ital">Extreme Annotational RDF Markup</div>) is a language for
            standoff annotations over documents that is based on an OWL ontology and uses RDF
            annotations as its linearization approach. EARMARK annotations are facts expressed
            about
            OWL classes such as ranges and markup elements whose properties are fully and explicitly
            described in the OWL ontology itself, and minimally depend on syntactic constraint
            that
            are inherent of embedded languages. Thus all standard hierarchy assertions as usually
            expressed in XML are available in EARMARK, but the language also supports overlapping
            structures, virtual elements, anonymous elements and structured attributes, that are
            available with more sophisticated non-XML languages such as TexMECS or LMNL, as well
            as
            unsupported features such as repeated structures, content variants and partially
            overlapping multiple hierarchies
            <div class="popupBox e54">
               <div class="popupLabel" onmouseover="$('#d1e92').show('1000');" onmouseout="$('#d1e92').hide('1000');">[ footnote ]</div>
               <div id="d1e92" style="display: none;">
                  <div class="footnote" xml:id="sdfootnote1sym">
                     <div class="para e55">Defined as the “set of partial or independent overlapping hierarchies in which
                        the textual content between the tags is visible in some hierarchies but not in
                        others” 
                        <div class="xref e56" linkend="bib-2"></div>.
                     </div>
                  </div>
               </div>
            </div> etc. are trivially expressed in EARMARK, and contribute to generate a
            language that is suited to fully support generalized GODDAGs and extended GODDAGs.
            
         </div>
         <div class="para e57">EARMARK documents are therefore OWL documents that can be expressed as RDF assertions,
            and using plain and standard W3C technologies a number of Semantic Web tools can be
            used
            for generating, converting, querying and displaying EARMARK documents. Particularly
            relevant here is the process of embedding EARMARK documents in traditional embedded
            languages, such as XML or TexMecs. Of course, not all EARMARK assertions can be directly
            transformed into XML markup structures. The specific subset of the EARMARK document
            that
            can be expressed in the destination syntax (e.g., any of the possible tree substructures
            for XML, or of the r-GODDAG substructures for TexMecs) can be directly generated,
            and
            the remaining ones need to be either left out or forcedly embedded using any of a
            number
            of well-known or newly-introduced syntactic tricks (up to, of course, leaving part
            of
            the EARMARK markup directly as RDF fragments within the destination document). 
         </div>
         <div class="para e58">Providing a recognizable and repeatable two-way process for generating EARMARK
            documents out of embedded documents, and vice versa for generating embedded documents
            out of EARMARK document with embedding tricks represents also a chance to collect
            and
            generalize all such embedding tricks, and providing an additional conversion model
            between different syntaxes. All in all, we propose EARMARK as the most natural
            syntactical rendering of GODDAGs (and e-GODDAGs, of course) and as the intermediate
            representation of any conversion path for documents, XML or otherwise, that use
            overlapping features of any form, i.e., as a generalization of the conversion algorithms
            for overlapping structures proposed in 
            <div class="xref e59" linkend="bib-7"></div>. 
         </div>
      </div><a name="EmbeddingmultiplehierarchiesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e60">
         <div class="title e61">Embedding multiple hierarchies</div>
         <div class="para e62">There comes a time, in marking up documents, where different types of annotations
            need
            to be placed upon the same content, and different markup needs to be used. Sometimes
            these different annotations nest easily, and sometimes they do not. Trying to express
            these different annotations using a hierarchical metamarkup language such as XML is,
            
            <div class="emphasis e63" role="ital">per se</div>, unfeasible: each structure needs to be
            described by its own hierarchy, and the overlapping situations pose a big problem,
            since, as we know, XML is not naturally equipped to deal with them. 
         </div>
         <div class="para e64">Some approaches to deal with overlapping structures in markup languages were proposed
            in past years. Each approach tries mediating between the support for overlapping and
            the
            hierarchical organization of XML documents, as illustrated in 
            <div class="xref e65" linkend="bib-20"></div>,
            as well as in 
            <div class="xref e66" linkend="bib-1"></div>, 
            <div class="xref e67" linkend="bib-8"></div> and 
            <div class="xref e68" linkend="bib-7"></div>. The five main overlap-handling techniques described in
            literature can be summarized in the following:
         </div>
         <div class="itemizedlist e69">
            <div class="listitem e70">
               <div class="para e71">
                  
                  <div class="emphasis e72" role="ital">milestones</div>, through which one hierarchy is
                  expressed using the standard hierarchical XML markup and the elements belonging
                  to the other ones are represented through a pair of empty elements representing the
                  start and the end tags, and connected to each other by special
                  attributes.
               </div>
            </div>
            <div class="listitem e73">
               <div class="para e74">
                  
                  <div class="emphasis e75" role="ital">flat milestones</div>, that represents each of the
                  hierarchy elements as a milestone, i.e., an empty element placed where the start
                  or the end tag should be, all of them contained as children of the same root
                  element.
               </div>
            </div>
            <div class="listitem e76">
               <div class="para e77">
                  
                  <div class="emphasis e78" role="ital">fragmentation</div>, in which one hierarchy (the
                  primary) is expressed though the standard hierarchical XML markup, and the
                  elements of the secondary hierarchies are fragmented within the primary elements
                  as needed to suit the primary hierarchy and are connected to each other by
                  special attributes.
               </div>
            </div>
            <div class="listitem e79">
               <div class="para e80">
                  
                  <div class="emphasis e81" role="ital">twin documents</div>, in which each hierarchy is
                  represented by a different document, which contains the same textual
                  content but marks up the elements according to the individual hierarchy.
               </div>
            </div>
            <div class="listitem e82">
               <div class="para e83">
                  
                  <div class="emphasis e84" role="ital">stand-off markup</div>, which puts all the textual
                  content in a single structure with the possible specification of the shared
                  hierarchy, and puts the remaining elements in other structures (e.g., files) with
                  the
                  positional association of each starting and ending location to the main
                  structure, using, for instance, XPointer 
                  <div class="xref e85" linkend="bib-9"></div> locations.
                  
               </div>
            </div>
         </div>
         <div class="para e86">A separate approach is to give up the XML requirements of a single hierarchy, and
            try new approaches where multiple hierarchies can be specified in the same text flow.
            The data structure itself, of course, is not a tree anymore, and needs to become
            something more general. The 
            <div class="emphasis e87" role="ital">General Ordered-Descendant Directed
               Acyclic Graph
            </div>
            
            <div class="xref e88" linkend="bib-5"></div>, or 
            <div class="emphasis e89" role="ital">GODDAG</div>, is the most
            relevant data structure that has been used to specify complex markup hierarchies,
            such
            as overlapping between elements and fragmentation.
         </div>
         <div class="para e90">Although GODDAG is not able to handle directly other features such as anonymous
            elements and structured attributes, yet another different non-XML approach for these
            and
            other well-known overlapping scenarios is given by 
            <div class="emphasis e91" role="ital">Layered Markup
               anNotation Language
            </div>
            
            <div class="xref e92" linkend="bib-6"></div>, or 
            <div class="emphasis e93" role="ital">LMNL</div>. Contrarily to
            GODDAG, that expresses the many hierarchies with a graph, LMNL uses a XML-like syntax
            where named or anonymous elements can overlap with other ones in one or more element
            
            <div class="emphasis e94" role="ital">layers</div>.
         </div>
         <div class="para e95">A similar approach is used by XConcur 
            <div class="xref e96" linkend="bib-24"></div>. An XConcur document
            is made of multiple layers coexisting in the same multi-root structure, written in
            a
            XML-like syntax: each layer represents an independent hierarchy that can be extracted
            as
            a single unit and validated against a DTD, XML-Schema or RelaxNG schema. Relationships
            and constraints between multiple hierarchies are ruled by a related constraint language
            called XConcur-CL. XConcur documents end up being very complex and few tools to
            manipulate them are available.
         </div>
      </div><a name="Couldsingingsongsbesuchabigdeal?ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e97">
         <div class="title e98">Could singing songs be such a big deal?</div>
         <div class="para e99">To illustrate some of the difficulties in handling complex structures, let us examine
            a fictitious karaoke application in which lyrics are displayed on a screen in sync
            with
            a recording of the instrumental parts of the corresponding song; in order to make
            the
            example even more interesting, let us consider the situation whereby, beside the
            screenfuls of lyrics, the application would also show the chords of the song for any
            additional instrument playing along, and a few fun facts popups here and there to
            keep
            the attention of the readers. 
         </div>
         <div class="para e100">We will use as an example for our discussion the song "And I love her" by the Beatles,
            one of the most famous and sung songs of the history of modern music. The lyrics of
            the original
            version appear in 
            <div class="xref e101" linkend="Tablyrics"></div>.
         </div>
         <div class="table e102" border="1" xml:id="Tablyrics" xreflabel="Table 1">
            <div class="caption e103">
               <div class="para e104">Lyrics and structure of “And I love
                  her” by The Beatles
               </div>
            </div>
            <div class="tbody e105">
               <div class="tr e106">
                  <div class="th e107">
                     
                     <div class="para e108">Title</div>
                     
                  </div>
                  <div class="td e109">
                     
                     <div class="para e110">And I love her</div>
                     
                  </div>
               </div>
               <div class="tr e111">
                  <div class="th e112">
                     
                     <div class="para e113">1</div>
                     
                  </div>
                  <div class="td e114">
                     
                     <div class="para e115">I give her all my love / That's all I do / And if you saw my love /
                        You'd love her too
                     </div>
                     
                  </div>
               </div>
               <div class="tr e116">
                  <div class="th e117">
                     
                     <div class="para e118">Chorus</div>
                     
                  </div>
                  <div class="td e119">
                     
                     <div class="para e120">I love her</div>
                     
                  </div>
               </div>
               <div class="tr e121">
                  <div class="th e122">
                     
                     <div class="para e123">2</div>
                     
                  </div>
                  <div class="td e124">
                     
                     <div class="para e125">She gives me ev'rything / And tenderly / The kiss my lover brings /
                        She brings to me
                     </div>
                     
                  </div>
               </div>
               <div class="tr e126">
                  <div class="th e127">
                     
                     <div class="para e128">Chorus</div>
                     
                  </div>
                  <div class="td e129">
                     
                     <div class="para e130">And I love her</div>
                     
                  </div>
               </div>
               <div class="tr e131">
                  <div class="th e132">
                     
                     <div class="para e133">3</div>
                     
                  </div>
                  <div class="td e134">
                     
                     <div class="para e135">A love like ours / Could never die / As long as I / Have you near
                        me
                     </div>
                     
                  </div>
               </div>
               <div class="tr e136">
                  <div class="th e137">
                     
                     <div class="para e138">4</div>
                     
                  </div>
                  <div class="td e139">
                     
                     <div class="para e140">Bright are the stars that shine / Dark is the sky / I know this love
                        of mine / Will never die
                     </div>
                     
                  </div>
               </div>
               <div class="tr e141">
                  <div class="th e142">
                     
                     <div class="para e143">Chorus</div>
                     
                  </div>
                  <div class="td e144">
                     
                     <div class="para e145">And I love her</div>
                     
                  </div>
               </div>
               <div class="tr e146">
                  <div class="th e147">
                     
                     <div class="para e148">4</div>
                     
                  </div>
                  <div class="td e149">
                     
                     <div class="para e150">Bright are the stars that shine / Dark is the sky / I know this love
                        of mine / Will never die
                     </div>
                     
                  </div>
               </div>
               <div class="tr e151">
                  <div class="th e152">
                     
                     <div class="para e153">Chorus</div>
                     
                  </div>
                  <div class="td e154">
                     
                     <div class="para e155">And I love her</div>
                     
                  </div>
               </div>
            </div>
         </div>
         <div class="para e156">The first difficulty for our karaoke application is to handle more than one structure
            at the same time. We may be interesting in building multiple structures over the same
            content:
         </div>
         <div class="itemizedlist e157">
            <div class="listitem e158">
               <div class="para e159">the lyrics organized in stanzas and verses</div>
            </div>
            <div class="listitem e160">
               <div class="para e161">the notation for the time-driven excerpts of lyrics as shown on screen during
                  the playback
               </div>
            </div>
            <div class="listitem e162">
               <div class="para e163">additional time-driven visualization of the chords, with different time
                  intervals
               </div>
            </div>
            <div class="listitem e164">
               <div class="para e165">the (either time-driven or content-driven) visualization of pop-ups with fun
                  fact sentences
               </div>
            </div>
         </div>
         <div class="para e166">Furthermore, we may need to deal with small difference in lyrics if the gender of
            the
            loved one is female, as in Beatles' original (“and I love her”) or male, as in several
            covers (“and I love him”).
         </div><a name="DarkistheoverlappingskyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e167" xml:id="xml">
            <div class="title e168">Dark is the overlapping sky</div>
            <div class="para e169">Let us concentrate on a single stanza of the song, the fourth, and its
               refrain:
            </div>
            <div class="programlisting e170" xml:space="preserve">Bright are the stars that shine / Dark is the sky / I know this love of mine / Will
               never die / And I love her
            </div>
            <div class="para e171"> The first hierarchy represents the lyrics. We may employ an XHTML vocabulary, using
               the
               class attribute for characterizing containers (e.g. “stanza” and “refrain”),
               obtaining a clear and straightforward structure.
            </div>
            <div class="programlisting e172" xml:space="preserve">&lt;body&gt;
               &lt;div class="stanza" title="4"&gt;
               &lt;p&gt;Bright are the stars that shine&lt;/p&gt;
               &lt;p&gt;Dark is the sky&lt;/p&gt;
               &lt;p&gt;I know this love of mine&lt;/p&gt;
               &lt;p&gt;Will never die&lt;/p&gt;
               &lt;/div&gt;
               &lt;div class="refrain"&gt;
               &lt;p&gt;And I love her&lt;/p&gt;
               &lt;/div&gt;
               &lt;/body&gt;
            </div>
            <div class="para e173"> The harmony of the song uses two chords, Em and Bm, for each of the first three
               lines, then moving to the bridge G for the last line and then the refrain in A and
               D. The A chord starts while the melody is still singing the second part of the last
               line of the stanza. A possible, trivial hierarchy for chords would then be: 
            </div>
            <div class="programlisting e174" xml:space="preserve">&lt;chords&gt;
               &lt;Em&gt;Bright are the&lt;/Em&gt;
               &lt;Bm&gt;stars that shine&lt;/Bm&gt;
               &lt;Em&gt;Dark is the&lt;/Em&gt;
               &lt;Bm&gt;sky&lt;/Bm&gt;
               &lt;Em&gt;I know this&lt;/Em&gt;
               &lt;Bm&gt;love of mine&lt;/Bm&gt;
               &lt;G&gt;Will never&lt;/G&gt;
               &lt;A&gt;die And I&lt;/A&gt;
               &lt;D&gt;love her&lt;/D&gt;
               &lt;/chords&gt;
            </div>
            <div class="para e175"> We have a different issue with the timings for the lyrics. We want each line to
               appear exactly when the music calls for it to be sung, but at the same time we want
               that the next
               line is shown, too, so that the singer gets ready to sing it aftwerward. Thus each
               line
               has to appear twice in each screenful, as in the following XML fragment: 
            </div>
            <div class="programlisting e176" xml:space="preserve">&lt;timing&gt;
               &lt;screenful starts=”68”&gt;
               &lt;main&gt;Bright are the stars that shine&lt;/main&gt;
               &lt;next&gt;Dark is the sky&lt;/next&gt;
               &lt;/screenful&gt;
               &lt;screenful starts=”72”&gt;
               &lt;main&gt;Dark is the sky&lt;/main&gt;
               &lt;next&gt;I know this love of mine&lt;/next&gt;
               &lt;/screenful&gt;
               &lt;screenful starts=”76”&gt;
               &lt;main&gt;I know this love of mine&lt;/main&gt;
               &lt;next&gt;Will never die&lt;/next&gt;
               &lt;/screenful&gt;
               &lt;screenful starts=”80”&gt;
               &lt;main&gt;Will never die&lt;/main&gt;
               &lt;next&gt;And I love her&lt;/next&gt; 
               &lt;/screenful&gt;
               &lt;screenful starts=”84”&gt;
               &lt;main&gt;And I love her&lt;/main&gt;
               &lt;/screenful&gt;
               &lt;/timing&gt;
            </div>
            <div class="para e177"> Only this is not nice: each line appears twice in the screen, and therefore twice
               in the XML document, and forcing them to appear only once in the XML structure would
               either require overlapping, or forcing some structural semantics into procedural
               attributes, that would imply implementing ad hoc visualization tools, as in: 
            </div>
            <div class="programlisting e178" xml:space="preserve">       &lt;p main=”68”&gt;Bright are the stars that shine&lt;/p&gt;
               &lt;p main=”72” next=”68”&gt;Dark is the sky&lt;/p&gt;
               &lt;p main=”76” next=”72”&gt;I know this love of mine&lt;/p&gt;
               &lt;p main=”80” next=”76”&gt;Will never die&lt;/p&gt;
               &lt;p main=”84” next=”80”&gt;And I love her&lt;/p&gt;
            </div>
            <div class="para e179"> We do not like this approach and will not consider it further. Yet the
               multiplicity of the lines is worrisome, as it creates a redundancy that has to be
               carefully considered. 
            </div>
            <div class="para e180">As for the pop-ups, we want to show some additional text exactly at the right time
               – i.e. when the song gets to the precise point of the lyrics associated to these
               paragraphs. It is not even given that pop-ups are aligned with whole lines, indeed
               it could very well happen that the association transcends line boundaries, as in the
               following: 
            </div>
            <div class="programlisting e181" xml:space="preserve">&lt;funfacts&gt;
               &lt;popup&gt;
               &lt;lyrics&gt;this love of mine Will never die&lt;/lyrics&gt;
               &lt;fact&gt;
               &lt;p&gt;Paul McCartney wrote this about his girlfriend, 
               an actress named Jane Asher.&lt;/p&gt;
               &lt;/fact&gt;
               &lt;/popup&gt;
               &lt;/funfacts&gt;
            </div>
            <div class="para e182"> As we have seen, each of these structures, taken individually, is a single
               hierarchy and could be easily managed with a traditional XML document. There is a
               final issue related to text variants: depending on the preferences of the singer,
               we
               may want to decline the lyrics in the masculine or feminine gender. As such, we end
               up with two variants of the refrain, and no syntactically evident way to point out
               which variant to show and which to ignore in each given run of the application: 
            </div>
            <div class="programlisting e183" xml:space="preserve">    &lt;div class="refrain"&gt;
               &lt;p&gt;And I love &lt;span class=”feminine” &gt;her&lt;/span&gt;
               &lt;span class=”masculine”&gt;him&lt;/span&gt;&lt;/p&gt;
               &lt;/div&gt;
            </div>
            <div class="para e184"> This is not declarative at all: it is the application's job to know that when the
               feminine version is chosen, elements of class feminine are present (i.e., shown) and
               elements of class masculine are absent (i.e., hidden), and vice-versa: the class
               attribute suddenly impacts not only on the presentation of the lines, but on their
               presence and content, too.
            </div>
            <div class="para e185">Finally, the issue of repetitions has a further and subtler issue, that impacts on
               the difference between the content of a document and its 
               <div class="emphasis e186" role="ital">structured</div> content. 
            </div>
            <div class="para e187">In the Beatles' song there are some repetitions of quite large structures, such as
               the refrain and the fourth stanza. It could be considered a pointless exercise in
               futility to decide whether the refrains of a song are to be considered as one
               instance of content to be repeated as needed after each stanza, or many different
               instances whose content happens to be identical. Yet, the praxis of transcription
               of
               song lyrics is usually to qualify the refrain lyrics as such the first time they are
               sung, and then refer back to them all other times without actually repeating the
               content, and as such we will treat them in our example. Yet the refrains are
               necessary handled, in an XML document, by repeating the entire structure,
               duplicating the markup code and the text. We could introduce it the first time
               only
               <div class="popupBox e188">
                  <div class="popupLabel" onmouseover="$('#d1e366').show('1000');" onmouseout="$('#d1e366').hide('1000');">[ footnote ]</div>
                  <div id="d1e366" style="display: none;">
                     <div class="footnote" xml:id="sdfootnote2sym">
                        <div class="para e189">We will ignore, for the time being, that in the lyrics that are actually
                           sung by the Beatles the first refrain is slightly different from the other
                           ones, since they sing “I love her” instead of “and I love her”
                        </div>
                     </div>
                  </div>
               </div>, and refer to it in some way the other times – for example, through an
               “href” attribute – in the other parts of the lyrics. Similarly we could handle the
               repetition of the fourth stanza, i.e., as follows:
            </div>
            <div class="programlisting e190" xml:space="preserve">&lt;body&gt;
               &lt;h1&gt;And I love her&lt;/h1&gt;
               &lt;div id=”first” class="stanza" title="1"&gt;[...]&lt;/div&gt;
               
               <div class="emphasis e191" role="bold">&lt;div id=”refrain” class="refrain"&gt;</div>
               				
               <div class="emphasis e192" role="bold">&lt;p&gt;And I love her&lt;/p&gt;</div>
               				
               <div class="emphasis e193" role="bold">&lt;/div&gt;</div>
               &lt;div id=”second” class="stanza" title="2"&gt;[...]&lt;/div&gt;
               
               <div class="emphasis e194" role="bold">&lt;div href=”#refrain” /&gt;</div>
               &lt;div id=”third” class="stanza" title="3"&gt;[...]&lt;/div&gt;
               &lt;div id=”fourth” class="stanza" title="4"&gt;[...]&lt;/div&gt;
               
               <div class="emphasis e195" role="bold">&lt;div href=”#refrain” /&gt;</div>
               &lt;div href=”#fourth” /&gt;
               
               <div class="emphasis e196" role="bold">&lt;div href=”#refrain” /&gt;</div>
               &lt;/body&gt;
            </div>
            <div class="para e197"> Unfortunately, we believe again that this approach is not declarative enough: it
               is the application's job to understand that the last three div elements are not
               empty, but refer to the previous-declared elements and repeat their content.
            </div>
            <div class="para e198"> XML entity references could be used to express repetitions too: content can be
               declared as an entity to be resolved when users view the document. From a merely
               presentation perspective, such an approach would be enough as all the repeated
               content is retrieved and merged into the final XML file. On the other hand,
               processing entities in a more sophisticated way still require entangled and
               application-dependant operations. For instance, it is rather complex to add metadata
               about entities, to extract information about that content, to process those
               fragments via XSLT or to validate entity fragments.
            </div>
            <div class="para e199">Joining the above mentioned different hierarchies in a single document and dealing
               with the issues mentioned so far presents issues that are not manageable
               with the plain XML armamentarium, and requires special approaches: 
            </div>
            <div class="itemizedlist e200">
               <div class="listitem e201">
                  <div class="para e202">the timing of the A chord overlaps two lines of the lyrics;</div>
               </div>
               <div class="listitem e203">
                  <div class="para e204">the timed display of the lyrics requires each line to be shown multiple
                     times;
                  </div>
               </div>
               <div class="listitem e205">
                  <div class="para e206">the popups introduce additional text content to the document, and do so
                     independently of the stanza and line structure of the lyrics;
                  </div>
               </div>
               <div class="listitem e207">
                  <div class="para e208">text variants require elements that exist or do not exist depending on
                     context;
                  </div>
               </div>
               <div class="listitem e209">
                  <div class="para e210">repetitions require that content is specified once, and referred to many
                     times. 
                  </div>
               </div>
            </div>
            <div class="para e211">Some of these structural issues can be handled by standard overlapping approaches,
               and other can be dealt with by introducing ad hoc, non-declarative markup that is
               procedurally interpreted by specialized tools. But it is at the level of the data
               structure model that we prefer to study the problem. 
            </div>
         </div><a name="RestrictedGODDAGANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e212">
            <div class="title e213">Restricted GODDAG</div>
            <div class="para e214">Handling overlapping elements requires a more expressive data structure than
               trees, such as directed graphs. 
               <div class="emphasis e215" role="ital">Restricted GODDAG</div>
               (
               <div class="xref e216" linkend="bib-5"></div> and 
               <div class="xref e217" linkend="bib-23"></div>) are able to deal with the
               lyrics/chord overlap, as shown in 
               <div class="xref e218" linkend="rGODDAG"></div>.
            </div>
            <div class="figure e219" floatstyle="1" xml:id="rGODDAG" xreflabel="Figure 1">
               <div class="mediaobject e220">
                  <div class="imageobject e221">
                     <div class="metaBox e222"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e433').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e433" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e222'
                              </span><span class="metaAttribute">fileref='../../../vol3/graphics/Peroni01/Peroni01-001.png'
                              </span><span class="metaAttribute">format='png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
                  <div class="caption e223">
                     <div class="para e224">The rGODDAG structure to handle lyrics and chords overlapping. The red
                        dashed line represents, here and in the following figures, the document
                        order. 
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e225">Restricted GODDAGS gives strong support for overlapping structures and guarantees
               their full linearizability into TexMECS documents 
               <div class="xref e226" linkend="bib-18"></div>.
            </div>
            <div class="para e227">Restricted GODDAGs, on the other hand, will not help us with the management of
               popups. Restricted GODDAGS have some strong constraints that prevent this:
            </div>
            <div class="itemizedlist e228">
               <div class="listitem e229">
                  <div class="para e230">each r-GODDAG node dominates a contiguous sequence of leaf nodes (i.e.,
                     nodes that contain text);
                  </div>
               </div>
               <div class="listitem e231">
                  <div class="para e232">no two r-GODDAG nodes that are not connected by a dominance relation,
                     dominate the same subsequence of leaf nodes.
                  </div>
               </div>
            </div>
            <div class="para e233">For our popups, these constraints appear quite strong, and particularly the first
               one. Basically, the requirement of contiguity prevents two hierarchies to overlap
               on
               some leaf nodes whenever the content of other leaf nodes is different. 
            </div>
            <div class="para e234">In our example, inserting in the same document both the lyrics
               structure and the one related to the popups implies breaking the contiguousness of
               one of the two hierarchies, because there is always a node that breaks the constraint.
            </div>
            <div class="para e235">Consider the situation in which a popup is associated to the string “this love of
               mine Will never die”. If the content of the fun fact is put at the end of the
               lyrics, as shown in 
               <div class="xref e236" linkend="rGODDAGfactfail"></div>, the elements “funfacts” and
               “fact” both dominate non-contiguous leaf nodes, as “this love of mine” is
               non-contiguous with “Paul McCartney...”, thus breaking the constraint.
            </div>
            <div class="figure e237" floatstyle="1" xml:id="rGODDAGfactfail" xreflabel="Figure 2">
               <div class="mediaobject e238">
                  <div class="imageobject e239">
                     <div class="metaBox e240"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e461').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e461" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e240'
                              </span><span class="metaAttribute">fileref='../../../vol3/graphics/Peroni01/Peroni01-002.png'
                              </span><span class="metaAttribute">format='png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
                  <div class="caption e241">
                     <div class="para e242">The first tentative to make an r-GODDAG for describing both lyrics and
                        fun fact.
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e243">If, on the other hand, the content of the fun fact is put before or after the
               lines it refers to (
               <div class="xref e244" linkend="rGODDAGbodyfail"></div>), the element “body” will
               dominate non-contiguous leaf nodes (two of them will be interrupted by the “Paul
               McCartney...” node that does not belong to that hierarchy) and therefore violate the
               constraint.
            </div>
            <div class="figure e245" floatstyle="1" xml:id="rGODDAGbodyfail" xreflabel="Figure 3">
               <div class="mediaobject e246">
                  <div class="imageobject e247">
                     <div class="metaBox e248"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e473').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e473" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e248'
                              </span><span class="metaAttribute">fileref='../../../vol3/graphics/Peroni01/Peroni01-003.png'
                              </span><span class="metaAttribute">format='png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
                  <div class="caption e249">
                     <div class="para e250">The second tentative to make an r-GODDAG for describing both lyrics
                        and fun facts.
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e251">So, even if a restricted GODDAG is a more expressive data structure than a tree,
               it is still not sufficient to handle complex scenarios such as the ones described.
               The overall point of the contiguity constraint is to allow for embedding markup
               within text; thus r-GODDAG structures are indeed representable with milestones or
               fragmentation in XML, or with TexMECS documents, but more complex structures are
               still unavailable, such as those involving non-contiguous leaf nodes.
            </div>
         </div><a name="Amoregeneraldatastructure:theGODDAGANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e252">
            <div class="title e253">A more general data structure: the GODDAG</div>
            <div class="para e254">If we give up the feature of embedding, we already have a data structure for
               handling complex overlapping scenarios: the full GODDAG, which does not require the
               two constraints mentioned above: it does not require leaf nodes to follow document
               order, 
               and it does not require that any two different nodes dominate
               different sets of leaf nodes.
            </div>
            <div class="para e255">Without these restrictions, we can describe all four hierarchies in a GODDAG, as
               shown in 
               <div class="xref e256" linkend="GODDAG"></div>. The obvious disadvantage of this data structure
               is that embedding everything in a linear structure such as an XML
               document implies either losing some information or recurring to procedural tricks
               that
               would subject the structural meaning of the document to specific tools.
            </div>
            <div class="figure e257" floatstyle="1" xml:id="GODDAG" xreflabel="Figure 4">
               <div class="mediaobject e258">
                  <div class="imageobject e259">
                     <div class="metaBox e260"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e491').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e491" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e260'
                              </span><span class="metaAttribute">fileref='../../../vol3/graphics/Peroni01/Peroni01-004.png'
                              </span><span class="metaAttribute">format='png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
                  <div class="caption e261">
                     <div class="para e262">A GODDAG for the four hierarchies defined for the song. Document order
                        is not shown since where it is not obvious (e.g., in the lyrics lines
                        it is completely arbitrary).
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e263">In 
               <div class="xref e264" linkend="GODDAG"></div> the full GODDAG structure of the three data hierarchies is
               shown: lyrics (in blue), the time in which the lyrics are shown (in yellow), the
               chords (in violet) and the fun facts popups (in green). Non-bordered nodes are
               content, bordered nodes represent markup: rectangles are XML elements, and
               rounded rectangles are XML attributes.
            </div>
            <div class="para e265">Moreover, through GODDAG we can handle cases of textual variants and some simple
               cases of repetitions (for instance, specifying the presence of the class attribute
               in multiple div elements, and even  specifying that the refrain text appears in
               multiple places, but is really only defined once). 
            </div>
            <div class="para e266">GODDAG can also be employed for textual variants: as shown in 
               <div class="xref e267" linkend="textualVariation"></div>, since the refrain uses “her” if the lyrics are
               feminine and “him” otherwise, we actually generate two different and almost
               identical lyrics hierarchies that point to the text in different manners depending
               on the chosen gender. 
            </div>
            <div class="figure e268" floatstyle="1" xml:id="textualVariation" xreflabel="Figure 5">
               <div class="mediaobject e269">
                  <div class="imageobject e270">
                     <div class="metaBox e271"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e508').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e508" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e271'
                              </span><span class="metaAttribute">fileref='../../../vol3/graphics/Peroni01/Peroni01-005.png'
                              </span><span class="metaAttribute">format='png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
                  <div class="caption e272">
                     <div class="para e273">A GODDAG with repetitions and textual variants depending on the gender
                        of the lyrics.
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e274">Clearly, the best thing we can do for linearizing all these kinds of structures
               presented in this section is to use stand-off markup or twin documents techniques
               in
               order to embed all the elements in a rationally unique document. Expressing all 
               information in a single XML tree requires some procedural tricks: elements 
               with procedural values, for instance, are an acceptable
               trade-off between the structure and the relative document representation.
            </div>
         </div><a name="BeyondGODDAG:extensionsforrepeatabilityANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e275">
            <div class="title e276">Beyond GODDAG: extensions for repeatability</div>
            <div class="para e277">Even if the GODDAG is able to handle perfectly all the above-mentioned scenarios,
               there are more things that are interesting to represent, such as a different type
               of
               repetition. The screenful of lines of the karaoke example is interesting in that
               sense. 
            </div>
            <div class="figure e278" floatstyle="1" xml:id="repetitions" xreflabel="Figure 6">
               <div class="mediaobject e279">
                  <div class="imageobject e280">
                     <div class="metaBox e281"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e522').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e522" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e281'
                              </span><span class="metaAttribute">fileref='../../../vol3/graphics/Peroni01/Peroni01-006.png'
                              </span><span class="metaAttribute">format='png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
                  <div class="caption e282">
                     <div class="para e283">This graph describes the structure of “And I Love Her” avoiding the
                        explicit repetitions (refrain and fourth stanza).
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e284">In 
               <div class="xref e285" linkend="repetitions"></div> we show a plausible graph for describing the
               entire structure of “And I Love Her” that avoids the explicit repetitions of the
               refrain and the fourth stanza. Note that the body element has many arcs going to the
               div of the refrain, and two going to the div of the fourth stanza, and that we had
               to specify the order of the arcs themselves.
            </div>
            <div class="para e286">Unfortunately, GODDAGs do not support this kind of repetitions. In fact, for any
               non-terminal node 
               <div class="emphasis e287" role="ital">n</div>, the sets of arcs from
               
               <div class="emphasis e288" role="ital">n</div> is ordered and, if two arcs 
               <div class="emphasis e289" role="ital">n→a</div> and 
               <div class="emphasis e290" role="ital">n→b</div> exist and if 
               
               <div class="emphasis e291" role="ital">a</div>
               is equal to 
               <div class="emphasis e292" role="ital">b</div>, then 
               <div class="emphasis e293" role="ital">n→a</div> and 
               <div class="emphasis e294" role="ital">n→b</div> are the same arc. 
               This prevents us from creating
               multiple arcs from body to the refrain divs, which is exactly what we are trying to
               do.
            </div>
            <div class="para e295">In order to avoid this constraint, we need to extend the definition of GODDAGs. In
               particular, we believe that we can solve our problem by simply relaxing the rule
               that requires non-terminal nodes in GODDAGs to have a general identifier (a label)
               associated to them. We call 
               <div class="emphasis e296" role="ital">anonymous</div> all
               non-terminal nodes that do not have such general identifier and we refer to this new
               GODDAG as 
               <div class="emphasis e297" role="ital">extended GODDAG</div> (or 
               <div class="emphasis e298" role="ital">e-GODDAG</div>). Anonymous e-GODDAG nodes allow the definition of
               anonymous elements 
               <div class="emphasis e299" role="ital">a la</div> LMNL 
               <div class="xref e300" linkend="bib-6"></div>, and at the same time provide the necessary infrastructure for our repeating
               refrains.
            </div>
            <div class="para e301">Through e-GODDAG, in fact, we are now able to allow the previous repetitions: we
               have to add as many anonymous nodes as needed for any repetition we need. Since
               anonymous nodes do not introduce markup or content, they can be used to disambiguate
               multiple arcs going from and to the same nodes: each repeated arc from 
               <div class="emphasis e302" role="ital">body</div> to 
               <div class="emphasis e303" role="ital">div</div> is therefore
               interrupted by a different intermediate anonymous node
               <div class="popupBox e304">
                  <div class="popupLabel" onmouseover="$('#d1e581').show('1000');" onmouseout="$('#d1e581').hide('1000');">[ footnote ]</div>
                  <div id="d1e581" style="display: none;">
                     <div class="footnote" xml:id="sdfootnote4sym">
                        <div class="para e305">An issue to consider relates to another GODDAG constraint: no node can
                           dominate another node both directly and indirectly. That simply means that
                           we need to add an anonymous node for each repeated arc of a node, and just
                           the ones after the first one, so that the we only have indirect dominance in all of
                           them.
                        </div>
                     </div>
                  </div>
               </div>. 
            </div>
         </div>
      </div><a name="EARMARKingcatsanddocsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e306">
         <div class="title e307">EARMARKing cats and docs</div>
         <div class="para e308">The problems described in the previous section derive mostly from the very act of
            embedding annotations: multiple overlapping annotations, especially when referring
            to
            the same text multiple times and reordering the document order, do not naturally fit
            in
            a linear structure of an XML document, and analogously there is no natural position
            for
            embedding annotations to the whole document.
         </div>
         <div class="para e309">The opposite approach – full externalization of annotations 
            <div class="emphasis e310" role="ital">a
               la
            </div> RDF – does not satisfy our requirements, for different motivations.
            RDF annotations do not change the annotated resource in any way, but refer to it via
            URIs. The problem we face in this case is that there exists no URI referring to a
            fragment of text that is not wrapped within an XML or XHTML element provided with
            an ID.
            And since XHTML or XML elements need to follow a nice, hierarchical,
            document-order-compatible structure, we are back to the beginning with the problem
            of
            overlapping hierarchies that play with multiplicities and reshuffling of the document
            order.
         </div>
         <div class="para e311">An approach has been recently proposed in 
            <div class="xref e312" linkend="bib-3"></div> in order to try to
            offer a way to identify precise document locations, called 
            <div class="emphasis e313" role="ital">pointers</div>, through different means (character positions, string indexing,
            etc.) and languages (XPath 
            <div class="xref e314" linkend="bib-12"></div>, XPointer 
            <div class="xref e315" linkend="bib-9"></div>,
            etc.). Unfortunately some languages mentioned, such as XPointer, were never standardized
            by the W3C and there is no sign that they will ever be in the foreseeable future.
            Furthermore, from the RDF point of view all URIs are opaque strings referring to
            different resources, and as such it would be difficult to create ontologies and make
            inferences that differentiate assertions on text fragments from assertions on elements
            or other structures, the required infrastructure to verify overlapping or
            superimposition of assertions.
         </div>
         <div class="para e316">There is another (less important) consideration that comes down against a fully
            externalized approach: the fact that assertions are disjoint from the original document
            and require a more articulated process for storing and transfer (this is known as
            the 
            so-called fragility of standoff markup). Consider the case of
            textual variations in our karaoke example: it would be useful to handle all variations
            (and any other overlapping hierarchy) within a unique document, easier to move and
            manipulate. The 
            <div class="emphasis e317" role="ital">variant graph</div> approach, introduced in
            
            <div class="xref e318" linkend="bib-2"></div>, goes in that direction and allows users to express these
            differences and to extract multiple text linearizations, depending on the particular
            context.
         </div>
         <div class="para e319">Our approach takes inspiration from this work and from the GODDAG-related theories.
            The goal is to introduce a new syntactic approach for overlapping markup that combines
            advantages of embedded and external annotations into a unified framework. In this
            section we define an ontology-based model for expressing such complex overlapping
            structures, similar but more general of existing research efforts such as 
            <div class="xref e320" linkend="bib-4"></div> and 
            <div class="xref e321" linkend="bib-11"></div>.
            
         </div>
         <div class="para e322">A very central point of our proposal is the reliance on Semantic Web
            technologies. The reason is that we want to create tools that can exploit existing
            modules, that can be integrated with other applications and that can be extended by
            other researchers too.
         </div>
         <div class="para e323">As expected, RDF and OWL are the candidates for our proposal. Actually, we propose
            an
            intermediate language built on the top of RDF and OWL data model, that can be
            straightforwardly translated into these standards. We called this language 
            <div class="emphasis e324" role="ital">EARMARK</div> (
            <div class="emphasis e325" role="ital">Extreme Annotational RDF
               Markup
            </div>). EARMARK allows us to build e-GODDAG-equivalent data structures
            that encode all the aforementioned scenarios. High-level data structures can be then
            instantiated into W3C standard documents, easy to integrate in legacy tools and
            environments.
         </div>
         <div class="para e326">Basically, EARMARK allows us create assertions on text fragments by using an
            intermediate ontology that subsumes the XPointer schemas in a manageable way and builds
            from there the concepts of markup structures and generic identifiers useful for the
            specification of elements and attributes.
         </div><a name="GeneralmodelANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e327">
            <div class="title e328">General model</div>
            <div class="para e329">This section describes the model behind EARMARK, 
               <div class="emphasis e330" role="ital">Extreme
                  Annotational RDF Markup. 
               </div>The model itself is defined through an OWL
               document specifying classes and relationships. Through these classes we can produce
               EARMARK documents with assertions about individuals.
            </div>
            <div class="para e331">We introduce four concepts: 
               <div class="emphasis e332" role="ital">docuverses</div>, 
               <div class="emphasis e333" role="ital">locations</div>, 
               <div class="emphasis e334" role="ital">ranges</div> and
               
               <div class="emphasis e335" role="ital">markup items</div>. Each of them is represented in
               EARMARK with a different (and disjoint) OWL class. The following code snippets are
               written using Turtle 
               <div class="xref e336" linkend="bib-13"></div>
               
               <div class="popupBox e337">
                  <div class="popupLabel" onmouseover="$('#d1e656').show('1000');" onmouseout="$('#d1e656').hide('1000');">[ footnote ]</div>
                  <div id="d1e656" style="display: none;">
                     <div class="footnote" xml:id="sdfootnote5sym">
                        <div class="para e338">In all code examples we will also be implying the following
                           prefixes:
                        </div>
                        <div class="para e339">
                           
                           <div class="programlisting e340" xml:space="preserve">
                              @prefix :        &lt;http://www.essepuntato.it/2008/12/earmark#&gt; .
                              @prefix rdf:     &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
                              @prefix rdfs:    &lt;http://www.w3.org/2000/01/rdf-schema#&gt; .
                              @prefix owl:     &lt;http://www.w3.org/2002/07/owl#&gt; .
                              @prefix xsd:     &lt;http://www.w3.org/2001/XMLSchema#&gt; .
                              @prefix swrl:    &lt;http://www.w3.org/2003/11/swrl#&gt; .
                              @prefix swrlb:   &lt;http://www.w3.org/2003/11/swrlb#&gt; .
                           </div>
                           
                        </div>
                     </div>
                  </div>
               </div>.
            </div>
            <div class="para e341">The textual content of a EARMARK document is conceptually separated from the
               annotations, and is referred to by means of assertions on the specific class called
               “Docuverse”. This class (and its name) is based on the concept introduced by Ted
               Nelson in his Xanadu Project 
               <div class="xref e342" linkend="bib-14"></div> to refer to the collection of
               text fragments that can be interconnected to each other and transcluded into new
               documents. 
            </div>
            <div class="para e343">The individuals of this class represent the object of discourse, i.e. all the text
               containers related to a particular EARMARK document.
            </div>
            <div class="programlisting e344" xml:space="preserve">:Docuverse
               a       owl:Class ;
               rdfs:subClassOf owl:Thing .
               
               :has-text
               a       owl:FunctionalProperty , owl:DatatypeProperty ;
               rdfs:domain :Docuverse ;
               rdfs:range xsd:string .
               
               :has-uri
               a       owl:FunctionalProperty , owl:DatatypeProperty ;
               rdfs:domain :Docuverse ;
               rdfs:range xsd:anyURI .
            </div>
            <div class="para e345"> Any individual of the 
               <div class="emphasis e346" role="ital">Docuverse</div> class – commonly
               called a 
               <div class="emphasis e347" role="ital">docuverse</div> (lowercase to distinguish it
               from the class) – might 
               <div class="emphasis e348" role="ital">contain</div> or 
               <div class="emphasis e349" role="ital">refer to</div> the text fragments representing the actual
               content of the document. That is expressed through two properties: 
               <div class="emphasis e350" role="ital">has-uri</div> if the content is stored at a particular URI and
               
               <div class="emphasis e351" role="ital">has-text</div> if the content lies in the document
               itself.
            </div>
            <div class="para e352">A 
               <div class="emphasis e353" role="ital">location</div> is the expression of a position in a
               particular docuverse. It is an instance of the class
               “
               <div class="emphasis e354" role="ital">Location</div>”. The property 
               <div class="emphasis e355" role="ital">at</div> defines a precise point in the docuverse, while the property
               
               <div class="emphasis e356" role="ital">refers-to </div>indicates the docuverse the location
               refers to.
            </div>
            <div class="programlisting e357" xml:space="preserve">:Location
               a       owl:Class ;
               rdfs:subClassOf owl:Thing .
               
               :refers-to
               a       owl:FunctionalProperty , owl:ObjectProperty ;
               rdfs:domain :Location ;
               rdfs:range :Docuverse .
               
               :at   a       owl:FunctionalProperty , owl:DatatypeProperty ;
               rdfs:domain :Location ;
               rdfs:range xsd:string .
            </div>
            <div class="para e358"> The value for the property 
               <div class="emphasis e359" role="ital">at </div>is a string. The
               overall ontology is then independent from the actual addressing mechanism. In fact,
               we expect several syntaxes to be used there, including XPointers.
            </div>
            <div class="para e360">We then define the class “
               <div class="emphasis e361" role="ital">Range”</div> for any text
               lying between two locations:
            </div>
            <div class="programlisting e362" xml:space="preserve">:Range
               a       owl:Class ;
               rdfs:subClassOf owl:Thing .
               
               :begins
               a       owl:FunctionalProperty , owl:ObjectProperty ;
               rdfs:domain :Range ;
               rdfs:range :Location .
               
               :ends
               a       owl:FunctionalProperty , owl:ObjectProperty ;
               rdfs:domain :Range ;
               rdfs:range :Location .
            </div>
            <div class="para e363"> A range, i.e, an individual of the class Range, is defined by a starting and an
               ending location through the properties 
               <div class="emphasis e364" role="ital">begins</div> and
               
               <div class="emphasis e365" role="ital">ends</div> respectively. These locations must refer
               to the same docuverse. Since this restriction cannot be directly expressed in OWL,
               we add the following SWRL 
               <div class="xref e366" linkend="bib-15"></div> rules to enforce that
               constraint
               <div class="popupBox e367">
                  <div class="popupLabel" onmouseover="$('#d1e733').show('1000');" onmouseout="$('#d1e733').hide('1000');">[ footnote ]</div>
                  <div id="d1e733" style="display: none;">
                     <div class="footnote" xml:id="sdfootnote6sym">
                        <div class="para e368">Because of the functional property declarations of “begins” and “end” and
                           the SWRL rules illustrated, an EARMARK document will be consistent if and
                           only if the constraint is valid. Otherwise, there will be a range with two
                           locations that refer to two different documents.
                        </div>
                     </div>
                  </div>
               </div>:
            </div>
            <div class="equation e369" xml:id="swrl1" xreflabel="(1)">
               <div class="mediaobject e370">
                  <div class="imageobject e371">
                     <div class="metaBox e372"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e740').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e740" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e372'
                              </span><span class="metaAttribute">fileref='../../../vol3/graphics/Peroni01/Peroni01-007.png'
                              </span><span class="metaAttribute">format='png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="equation e373" xml:id="swrl2" xreflabel="(2)">
               <div class="mediaobject e374">
                  <div class="imageobject e375">
                     <div class="metaBox e376"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e744').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e744" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e376'
                              </span><span class="metaAttribute">fileref='../../../vol3/graphics/Peroni01/Peroni01-008.png'
                              </span><span class="metaAttribute">format='png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e377">There is no restriction on locations used for the
               
               <div class="emphasis e378" role="ital">begins</div> and 
               <div class="emphasis e379" role="ital">ends</div>
               properties. That is very useful: it allows us to define ranges that “follow”
               or “reverse” the text order of the docuverse they refer to. For instance, the string
               “desserts” can be considered both in document order, with the 
               <div class="emphasis e380" role="ital">begins</div> location lower than the 
               <div class="emphasis e381" role="ital">ends</div>
               location or in the opposite one, forming “stressed”
               <div class="emphasis e382" role="ital">
                  
                  <div class="popupBox e383">
                     <div class="popupLabel" onmouseover="$('#d1e761').show('1000');" onmouseout="$('#d1e761').hide('1000');">[ footnote ]</div>
                     <div id="d1e761" style="display: none;">
                        <div class="footnote" xml:id="sdfootnote7sym">
                           <div class="para e384">An interesting example of 
                              <div class="emphasis e385" role="ital">semordnilap,
                                 
                              </div>http://en.wikipedia.org/wiki/Palindrome#Semordnilaps
                           </div>
                        </div>
                     </div>
                  </div>
                  
               </div>. Thus, the properties “begins” and “ends” define the way a range must be
               read.
            </div>
            <div class="para e386">The class “
               <div class="emphasis e387" role="ital">MarkupItem</div>” is the superclass defining
               artefacts to be interpreted as markup (such as elements and attributes).
            </div>
            <div class="programlisting e388" xml:space="preserve">:MarkupItem
               a       owl:Class ;
               rdfs:subClassOf owl:Thing .
               
               :has-general-identifier
               a       owl:FunctionalProperty , owl:DatatypeProperty ;
               rdfs:domain :MarkupItem ;
               rdfs:range xsd:string .
            </div>
            <div class="para e389"> A 
               <div class="emphasis e390" role="ital">markupitem</div> individual is a sequence (rdf:Bag
               or rdf:Seq) of individuals belonging to the classes MarkupItem and Range. Is it then
               possible to define elements containing nested elements or text, or attributes
               containing values, as well as overlapped and complex structures.
            </div>
            <div class="para e391">A markupitem might have a name, specified in the property “
               <div class="emphasis e392" role="ital">has-general-identifier</div>” (recalling the SGML term to refer to the
               name of elements 
               <div class="xref e393" linkend="bib-16"></div>). Note that we can classify markup items
               as 
               <div class="emphasis e394" role="ital">anonymous – </div>as possible in LMNL
               <div class="xref e395" linkend="bib-6"></div> and e-GODDAG – by simply not asserting a general identifier
               for the items. 
            </div>
            <div class="para e396">All the concepts represented by an EARMARK document are expressed using these four
               disjoint classes and their relative properties:
            </div>
            <div class="programlisting e397" xml:space="preserve">[]    a       owl:AllDisjointClasses ;
               owl:members (:Docuverse :Location :MarkupItem :Range) .
            </div>
         </div><a name="DetailedmodelANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e398">
            <div class="title e399"> Detailed model</div>
            <div class="para e400">The model discussed so far gives us a general picture of the EARMARK framework
               and, as expected, is not enough to describe all the scenarios we are interested in.
               We then need to refine our model. Such a refinement is actually a specialization of
               three classes – all except “Range” – in subclasses that apply specific
               restrictions.
            </div>
            <div class="para e401">First of all, the class Docuverse is specified into a “StringDocuverse” (the
               content is specified as value of 
               <div class="emphasis e402" role="ital">has-text</div> and no
               value is associated to 
               <div class="emphasis e403" role="ital">has-uri</div>) or an
               “URIDocuverse” (the actual content is located at the URL specified in 
               <div class="emphasis e404" role="ital">has-uri</div> and no value is given to 
               <div class="emphasis e405" role="ital">has-text</div>).
            </div>
            <div class="programlisting e406" xml:space="preserve">:StringDocuverse
               a       owl:Class ;
               rdfs:subClassOf :Docuverse ;
               owl:equivalentClass
               [ a       owl:Class ;
               owl:intersectionOf (:Docuverse [ a       owl:Restriction ;
               owl:cardinality "1"^^xsd:nonNegativeInteger ;
               owl:onProperty :has-text
               ] [ a       owl:Restriction ;
               owl:cardinality "0"^^xsd:nonNegativeInteger ;
               owl:onProperty :has-uri
               ])
               ] .
               
               :URIDocuverse
               a       owl:Class ;
               rdfs:subClassOf :Docuverse ;
               owl:equivalentClass
               [ a       owl:Class ;
               owl:intersectionOf (:Docuverse [ a       owl:Restriction ;
               owl:cardinality "0"^^xsd:nonNegativeInteger ;
               owl:onProperty :has-text
               ] [ a       owl:Restriction ;
               owl:cardinality "1"^^xsd:nonNegativeInteger ;
               owl:onProperty :has-uri
               ])
               ] .
               
               []    a       owl:AllDisjointClasses ;
               owl:members (:StringDocuverse :URIDocuverse) .
            </div>
            <div class="para e407"> Depending on particular scenarios or on the kind of docuverse we are dealing with
               – it could be plain-text, XML, LaTeX, a picture, etc. – we need to be able to use
               different kinds of locations. Therefore, the class “Location” has at least three
               different disjoint subclasses:
            </div>
            <div class="programlisting e408" xml:space="preserve">:CharNumberLocation
               a       owl:Class ;
               rdfs:subClassOf :Location .
               
               :XPathLocation
               a       owl:Class ;
               rdfs:subClassOf :Location .
               
               :XPointerLocation
               a       owl:Class ;
               rdfs:subClassOf :Location .
               
               []    a       owl:AllDisjointClasses ;
               owl:members (:CharNumberLocation :XPathLocation :XPointerLocation) .
            </div>
            <div class="itemizedlist e409">
               <div class="listitem e410">
                  <div class="para e411">“CharNumberLocation” defines a location by counting characters. In that
                     case, the string value of the “at” property must be an integer
                     <div class="popupBox e412">
                        <div class="popupLabel" onmouseover="$('#d1e826').show('1000');" onmouseout="$('#d1e826').hide('1000');">[ footnote ]</div>
                        <div id="d1e826" style="display: none;">
                           <div class="footnote" xml:id="sdfootnote8sym">
                              <div class="para e413">It is a positive integer (including zero) if we are counting from
                                 the begin of the document to the end, and a negative integer for
                                 vice versa.
                              </div>
                           </div>
                        </div>
                     </div> that identifies an unambiguous position in the character
                     stream;
                  </div>
               </div>
               <div class="listitem e414">
                  <div class="para e415">“XPathLocation” defines a location as a node of an XML docuverse. In this
                     case, the property “at” will be an XPath expression 
                     <div class="xref e416" linkend="bib-12"></div>;
                  </div>
               </div>
               <div class="listitem e417">
                  <div class="para e418">“XPointerLocation” defines a precise point in a docuverse. In that case,
                     the expression “xpointer(point(.42))”, for instance, indicates the cursor
                     in-between the 42nd and the 43rd character; with “xpointer(point(/1/9.3))”
                     we mean the cursor between the 3rd and the 4th character of the ninth node
                     of the root, and so on.
                  </div>
               </div>
            </div>
            <div class="para e419">MarkupItem is specialized in three disjointed sub-classes: “Element”, “Attribute”
               and “Comment”, that allow a more precise characterization of markup items.
            </div>
            <div class="programlisting e420" xml:space="preserve">:Element
               a       owl:Class ;
               rdfs:subClassOf :MarkupItem .
               
               :Attribute
               a       owl:Class ;
               rdfs:subClassOf :MarkupItem .
               
               :Comment
               a       owl:Class ;
               rdfs:subClassOf :MarkupItem .
               
               []    a       owl:AllDisjointClasses ;
               owl:members (:Attribute :Comment :Element) .
            </div>
            <div class="para e421"> Through this classification, shown also in 
               <div class="xref e422" linkend="earmarkontology"></div>, we
               can describe all the concepts introduced by XML, LMNL or TexMecs, including virtual
               elements 
               <div class="xref e423" linkend="bib-17"></div>
               
               <div class="xref e424" linkend="bib-18"></div>, structured attributes 
               <div class="xref e425" linkend="bib-6"></div> and so on. 
            </div>
            <div class="figure e426" floatstyle="1" xml:id="earmarkontology" xreflabel="Figure 7">
               <div class="mediaobject e427">
                  <div class="imageobject e428">
                     <div class="metaBox e429"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e855').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e855" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e429'
                              </span><span class="metaAttribute">fileref='../../../vol3/graphics/Peroni01/Peroni01-009.png'
                              </span><span class="metaAttribute">format='png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
                  <div class="caption e430">
                     <div class="para e431">The class hierarchy of the EARMARK ontology.</div>
                  </div>
               </div>
            </div>
            <div class="para e432">In order to discuss such potentialities, the next section analyses in detail the
               EARMARK encoding of the aforementioned karaoke example.
            </div>
         </div><a name="%E2%80%9CAndILoveHer%E2%80%9DinEARMARKANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e433">
            <div class="title e434">“And I Love Her” in EARMARK</div>
            <div class="para e435">The approach to mark up a complex document with EARMARK is composed of the
               following steps:
            </div>
            <div class="itemizedlist e436">
               <div class="listitem e437">
                  <div class="para e438">creation of one or more docuverses depending on the number of data streams
                     we must handle;
                  </div>
               </div>
               <div class="listitem e439">
                  <div class="para e440">identification of the ranges within the docuverses;</div>
               </div>
               <div class="listitem e441">
                  <div class="para e442">identification of the 
                     <div class="emphasis e443" role="ital">leaf</div> markup items,
                     i.e. those containing attributes and ranges only;
                  </div>
               </div>
               <div class="listitem e444">
                  <div class="para e445">identification of the 
                     <div class="emphasis e446" role="ital">internal</div> markup
                     items, i.e. those containing markup items or a mixed content of markup items
                     and ranges.
                  </div>
               </div>
            </div>
            <div class="para e447">Let us take into consideration the fragment of the lyrics of “And I Love Her” by
               The Beatles, introduced in 
               <div class="xref e448" linkend="xml"></div>.
            </div>
            <div class="para e449">In EARMARK strings are placed in one or more docuverses. As mentioned, there are
               two different types of docuverses: 
               <div class="emphasis e450" role="ital">autonomous
                  resources
               </div> (i.e., independent files identified by a URIs, appropriate
               for the actual lyrics of the song and the content of the fun fact popups) and
               
               <div class="emphasis e451" role="ital">local strings</div> (i.e. an internal data value,
               appropriate for strings that do not exist as independent units like attribute
               values, metadata, and so on).
            </div>
            <div class="para e452">For the XML version of “And I Love Her”
               <div class="popupBox e453">
                  <div class="popupLabel" onmouseover="$('#d1e901').show('1000');" onmouseout="$('#d1e901').hide('1000');">[ footnote ]</div>
                  <div id="d1e901" style="display: none;">
                     <div class="footnote" xml:id="sdfootnote9sym">
                        <div class="para e454">The complete Turtle example if “And I Love Her” is available at
                           “http://www.essepuntato.it/2009/01/andiloveher.ttl”.
                        </div>
                     </div>
                  </div>
               </div>, we will employ four docuverses: 
            </div>
            <div class="itemizedlist e455">
               <div class="listitem e456">
                  <div class="para e457">an independent text file with the lyrics;</div>
               </div>
               <div class="listitem e458">
                  <div class="para e459">a local string containing strings for all attribute values;</div>
               </div>
               <div class="listitem e460">
                  <div class="para e461">a local string containing the timings of the screenfuls of lyrics;</div>
               </div>
               <div class="listitem e462">
                  <div class="para e463">an independent file with a selection of fun facts. This could just as well
                     be an existing, independent HTML resource such as the one in
                     http://www.songfacts.com/detail.php?id=43.
                  </div>
               </div>
            </div>
            <div class="para e464">Note that we have immediately introduced the machinery for overlapping elements
               and shared text fragments. We can also add any additional annotation (such as
               spaces, separators, etc.) to each docuverse in order to make it more readable. We
               will be explicitly ignoring the non-relevant text within the docuverses. 
            </div>
            <div class="para e465">The Turtle translation of the docuverses could be
               <div class="popupBox e466">
                  <div class="popupLabel" onmouseover="$('#d1e922').show('1000');" onmouseout="$('#d1e922').hide('1000');">[ footnote ]</div>
                  <div id="d1e922" style="display: none;">
                     <div class="footnote" xml:id="sdfootnote10sym">
                        <div class="para e467">The prefix “e” refers to
                           “http://www.essepuntato.it/2009/01/andiloveher#”.
                        </div>
                     </div>
                  </div>
               </div>:
            </div>
            <div class="programlisting e468" xml:space="preserve">
               e:lyrics
               a :URIDocuverse ; :has-uri "http://www.essepuntato.it/2009/01/andiloveher.txt"^^xsd:anyURI
               .
               
               e:funfacts    
               a :URIDocuverse ; :has-uri "http://www.songfacts.com/detail.php?id=43"^^xsd:anyURI
               .
               
               e:attribute_values    
               a :StringDocuverse ; :has-text "stanza - refrain - 4"^^xsd:string .
               
               e:time_values    
               a :StringDocuverse ; :has-text "68 - 72 - 76 – 80 - 84"^^xsd:string .
            </div>
            <div class="para e469"> All the strings defining the actual text content of an EARMARK document are
               identified by ranges. Ranges refer to any of the docuverses, and can overlap and
               invert order. For example, the ranges for the refrain and the last chord overlap
               over the same range.
            </div>
            <div class="para e470">We next define a range for each text node of the song, encoded as element or
               attribute, e.g.:
            </div>
            <div class="programlisting e471" xml:space="preserve">
               e:r_refrain_1    
               a :Range ; :begins e:location0-lyrics ; :ends e:location6-lyrics .
               
               e:r_refrain_2    
               a :Range ; :begins e:location6-lyrics ; :ends e:location14-lyrics .
               
               e:r_attribute_class_refrain 
               a :Range ; :begins e:location9-attribute_values ; :ends e:location16-attribute_values
               .
               
               e:location0-lyrics    
               a :XPointerLocation ; :refers-to lyrics ; :at "xpointer(point(.0))"^^xsd:string .
               
               e:location6-lyrics    
               a :XPointerLocation ; :refers-to lyrics ; :at "xpointer(point(.6))"^^xsd:string .
               
               e:location14-lyrics    
               a :XPointerLocation ; :refers-to lyrics ; :at "xpointer(point(.14))"^^xsd:string .
               
               e:location9-attribute_values    
               a :XPointerLocation ; :refers-to attribute_values ; :at "xpointer(point(.9))"^^xsd:string
               .
               
               e:location16-attribute_values    
               a :XPointerLocation ; :refers-to attribute_values ; :at "xpointer(point(.16))"^^xsd:string
               .
            </div>
            <div class="para e472"> Some ranges can be used more than once in the final EARMARK document. For
               instance, the “r_refrain_2” range is used both in the refrain of the song and in the
               last chord of the refrain.
            </div>
            <div class="para e473">Using these ranges we can now create the leaf markup items, i.e. all the
               attributes and all the 
               <div class="emphasis e474" role="ital">first-level</div> elements. The
               latter are all the elements that have a simple content, i.e., sequences of ranges
               and attributes only.
            </div>
            <div class="para e475">Given an e-GODDAG node 
               <div class="emphasis e476" role="ital">N</div>, an EARMARK markup item
               is made as follows:
            </div>
            <div class="itemizedlist e477">
               <div class="listitem e478">
                  <div class="para e479">it has an identifier generated randomly;</div>
               </div>
               <div class="listitem e480">
                  <div class="para e481">the name of 
                     <div class="emphasis e482" role="ital">N</div>, if it exists, is the
                     general identifier;
                  </div>
               </div>
               <div class="listitem e483">
                  <div class="para e484">all children non-terminal nodes of 
                     <div class="emphasis e485" role="ital">N</div> are
                     translated into individual markup items. They are recursively generated with
                     these same rules;
                  </div>
               </div>
               <div class="listitem e486">
                  <div class="para e487">the ranges corresponding to the text content end up as the sequence of the
                     new markup item.
                  </div>
               </div>
            </div>
            <div class="para e488">In the next piece of code we take into consideration both the e-GODDAG structure
               and the implicitly given XML description for all the markup items, that defines the
               kind – 
               <div class="emphasis e489" role="ital">element</div> or 
               <div class="emphasis e490" role="ital">attribute</div> – of each of them. For instance, the Turtle translation of
               the attribute class and of the p element of the refrain, using the ranges previously
               defined, is:
            </div>
            <div class="programlisting e491" xml:space="preserve">
               e:attr_refrain_class    
               a :Attribute , [ a rdf:Bag ; rdf:_1 e:r_attribute_class_refrain ] ;    
               :has-general-identifier "class"^^xsd:string .
               
               e:refrain_div    
               a :Element , [ a rdf:Seq ; rdf:_1 e:attr_refrain_class ; rdf:_2 e:refrain_p ] ;  
               
               :has-general-identifier "div"^^xsd:string .
               
               e:refrain_p    
               a :Element , [ a rdf:Seq ; rdf:_1 e:r_refrain_1 ; rdf:_2 e:r_refrain_2 ] ;    
               :has-general-identifier "p"^^xsd:string .
            </div>
            <div class="para e492"> The difference between those leaf elements that are simply sequences of ranges
               and those that are sequences of attributes and ranges mirrors the difference between
               types in XML Schema 
               <div class="xref e493" linkend="bib-19"></div>, with the former resembling simple
               type elements with simple content, and the latter resembling complex type elements
               with simple content and attributes.
            </div>
            <div class="para e494">The expressiveness of e-GODDAG's is clearly within EARMARK's : through EARMARK we
               can express general digraphs with or without 
               <div class="emphasis e495" role="ital">repeatable
                  edges
               </div> depending on the particular context we are taking into
               consideration.
            </div>
            <div class="para e496">Through such digraphs we can handle particular scenarios that involve overlapping
               – i.e. different elements partially dominate the same content, such as with chords
               and lines – as well as virtual elements – i.e. non-contiguous ranges are contained
               by a markup item, such as with the fun fact pop-up.
            </div>
            <div class="para e497">Finally, it is interesting to note that EARMARK is actually more expressive than
               e-GODDAGs. Consider the case of unordered items. Although e-GODDAGs always considers
               ordered markup items and ranges within a container, EARMARK allows us to specify
               whether the items are ordered or not, by simply using “rdf:Seq” and “rdf:Bag”
               container classes. The ordering of inner elements becomes a matter of explicit
               choice rather than implicitly given by the markup embedding.
            </div>
            <div class="para e498">Consequently, EARMARK even allows us to specify sequences of attributes, elements
               and ranges in any arbitrary order. Differently than XML, LMNL and TexMECS, EARMARK
               makes possible sequences in which attributes, elements and ranges are freely mixed
               in any order, including elements followed by attributes followed by other elements
               and so on. Moreover, the same global identifier can be specified for multiple
               attributes in the sequence (i.e., EARMARK allows multiple attributes with the same
               name for the same element). These situations are not directly expressible in any embedded
               markup model.
            </div>
         </div>
      </div><a name="EmbeddingEARMARKdocumentsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e499" xml:id="embedding">
         <div class="title e500">Embedding EARMARK documents</div>
         <div class="para e501">The process of generating a linearized structure (such as an XML document) from a
            set
            of EARMARK annotations is not immediate, mostly because of the substantially greater
            expressive power of EARMARK annotations. Without loss of generality, we will be
            describing a conversion to XML, since converting to LMNL or TexMecs will constitute
            a
            much simpler exercise of stopping the linearization a few steps earlier. 
         </div>
         <div class="para e502">Although the conversion of any EARMARK subset that already describes a tree is
            obviously immediate and fully automatic, several different options exist for any further
            EARMARK annotations that we wish to linearize. Since these additional annotations
            are at
            odds with a tree-like structure, we need to use a few embedding tricks to obtain a
            well-formed XML document, and of course the choice of tricks to use is wide and rich.
            In
            this section we will explore the task of linearizing a chosen tree-shaped subset of
            the
            EARMARK document, and in the following section we will describe a few options for
            the
            remaining assertions. 
         </div>
         <div class="para e503">The construction of the tree we envision is bottom up:</div>
         <div class="itemizedlist e504">
            <div class="listitem e505">
               <div class="para e506">the first step is deciding which docuverses (or fragments thereof) will
                  constitute the content of the document, which the content of the attributes, and
                  which, if any, will be ignored;
               </div>
            </div>
            <div class="listitem e507">
               <div class="para e508">then a subset of the first-level elements needs to be chosen, as well as the
                  ranges they contain. Of course, no overlapping or reverse order ranges can be
                  accepted as such;
               </div>
            </div>
            <div class="listitem e509">
               <div class="para e510">there might well be the situation whereby multiple independent sets of
                  first-level elements exist, each of which is by itself non-overlapping, but
                  combined with others would. In this situation, of course, only one set can be
                  selected as the main hierarchy, and all others will need to employ an embedding
                  trick to be expressed in the final linearized document. One possible way to do
                  so is to create independent sets of elements and hierarchy over elements, and
                  then choose the largest set as composing the principal hierarchy, and all others
                  as candidates for tricks;
               </div>
            </div>
            <div class="listitem e511">
               <div class="para e512">mixed content elements are sequences of ranges and first-level elements, and
                  are generated once all contained elements are ready;
               </div>
            </div>
            <div class="listitem e513">
               <div class="para e514">similarly, structure elements (only containing other elements) are available
                  for creation once their content is already generated;
               </div>
            </div>
            <div class="listitem e515">
               <div class="para e516">finally, attributes and their ranges are selected as well and converted into
                  linearized form and associated to their elements;
               </div>
            </div>
            <div class="listitem e517">
               <div class="para e518">the final result of this linearization is possibly a selection of separate and
                  disjoint trees, each linearizing a connected component of the EARMARK document.
                  It is then a linearization choice either to generate several independent XML
                  documents or to employ the 
                  <div class="emphasis e519" role="ital">universal root
                     
                  </div>pattern
                  <div class="popupBox e520">
                     <div class="popupLabel" onmouseover="$('#d1e1026').show('1000');" onmouseout="$('#d1e1026').hide('1000');">[ footnote ]</div>
                     <div id="d1e1026" style="display: none;">
                        <div class="footnote" xml:id="sdfootnote11sym">
                           <div class="para e521"> http://www.xmlpatterns.com/UniversalRootMain.shtml</div>
                        </div>
                     </div>
                  </div> and include these structures within a single 
                  <div class="emphasis e522" role="ital">new</div> elements that become their container.
               </div>
            </div>
         </div>
         <div class="para e523">Whatever is left out of this linearization process needs to be approached using one
            or
            more of the methods described in the next section.
         </div>
      </div><a name="HandlingtheremainingEARMARKstructuresANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e524">
         <div class="title e525">Handling the remaining EARMARK structures</div>
         <div class="para e526">Some kinds of EARMARK structures are not directly linearizable by embedding. In order
            to allow a full representation of the EARMARK document we therefore need to apply
            some
            stratagem to force the hierarchical structure to accept these 
            <div class="emphasis e527" role="ital">remaining structures</div>.
         </div>
         <div class="para e528">Reasonably, frequent unmanaged structures would include:</div>
         <div class="itemizedlist e529">
            <div class="listitem e530">
               <div class="para e531">overlapping leaf elements referring to contiguous ranges;</div>
            </div>
            <div class="listitem e532">
               <div class="para e533">overlapping leaf elements referring to non-contiguous ranges;</div>
            </div>
            <div class="listitem e534">
               <div class="para e535">shared ranges;</div>
            </div>
            <div class="listitem e536">
               <div class="para e537">text variants;</div>
            </div>
            <div class="listitem e538">
               <div class="para e539">overlapping structural elements;</div>
            </div>
            <div class="listitem e540">
               <div class="para e541">structured attributes.</div>
            </div>
         </div>
         <div class="para e542">In 
            <div class="xref e543" linkend="embedding"></div> we listed the EARMARK assertions that could not be
            directly translated into an XML document. Let us examine a few potential approaches
            (which we call 
            <div class="emphasis e544" role="ital">embedding </div>
            
            <div class="emphasis e545" role="ital">tricks</div>) for forcing the conversion. A few of such
            approaches, as well as algorithms for passing from one to the other, are described
            in
            
            <div class="xref e546" linkend="bib-7"></div>
            
         </div><a name="MilestonesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e547">
            <div class="title e548">Milestones</div>
            <div class="para e549">Plain overlapping leaf elements (i.e. elements that partially share the text
               content, but no lower structures) may be forced into an XML structure via 
               <div class="emphasis e550" role="ital">milestones</div> as proposed in CLIX 
               <div class="xref e551" linkend="bib-20"></div>.
            </div>
            <div class="para e552">The open and close tags of the unconverted elements are considered as individual
               empty elements placed in the positions where they should reside. The attribute role
               specifies whether the empty element corresponds to a start or end tag, and the
               
               <div class="emphasis e553" role="ital">sID</div> and 
               <div class="emphasis e554" role="ital">eID</div>
               attributes connect the two elements in a single conceptual one. 
            </div>
            <div class="programlisting e555" xml:space="preserve">&lt;body&gt;
               &lt;div class=”stanza” title=”4”&gt;
               &lt;p&gt;
               &lt;chord name=”G”&gt;Will never&lt;/chord&gt;
               &lt;chord name=”A” clix:role=”start-range” clix:sID=”A”/&gt;
               die
               &lt;/p&gt;
               &lt;/div&gt;
               &lt;div class=”refrain”&gt;
               &lt;p&gt;
               And I
               &lt;chord name=”A” clix:role=”end-range” clix:eID=”A”/&gt; 
               &lt;chord name=”D”&gt;love her&lt;/chord&gt;
               &lt;/p&gt;
               &lt;/div&gt;
               &lt;/body&gt;
            </div>
            <div class="para e556"> Although easy to implement and appreciate, milestones are nonetheless limited in
               that only frontier overlapping (i.e., overlapping on ranges) is expressible. 
            </div>
         </div><a name="FragmentationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e557">
            <div class="title e558">Fragmentation</div>
            <div class="para e559">Another approach is to use fragmentation as introduced by the TEI guidelines 
               <div class="xref e560" linkend="bib-1"></div>.
            </div>
            <div class="para e561">Overlapping elements are separated in many multiple fragments each of which
               properly nests within their container. Individual fragments are then connected via
               attributes such as 
               <div class="emphasis e562" role="ital">next</div> or 
               <div class="emphasis e563" role="ital">previous</div>. 
            </div>
            <div class="programlisting e564" xml:space="preserve">&lt;body&gt;
               &lt;div class=”stanza” title=”4”&gt;
               &lt;p&gt;
               &lt;chord name=”G”&gt;Will never&lt;/chord&gt;
               &lt;chord name=”A” xml:id=”a1” next=”a2”&gt;die&lt;/chord&gt;
               &lt;/p&gt;
               &lt;/div&gt;
               &lt;div class=”refrain”&gt;
               &lt;p&gt;
               &lt;chord name=”A” xml:id=”a2”&gt;And I&lt;/chord&gt; 
               &lt;chord name=”D”&gt;love her&lt;/chord&gt;
               &lt;/p&gt;
               &lt;/div&gt;
               &lt;/body&gt;
            </div>
         </div><a name="RepetitionsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e565">
            <div class="title e566"> Repetitions</div>
            <div class="para e567">The easiest embedding trick for dealing with shared ranges is simply to multiply
               the instances of the corresponding text and possibly annotate that all instances
               except the first one is redundant.
            </div>
            <div class="programlisting e568" xml:space="preserve">&lt;p&gt;
               &lt;span class=”repeat” title=”r_refrain_1”&gt;And I &lt;/span&gt;
               &lt;span class=”repeat” title=”r_refrain_2”&gt;love her&lt;/span&gt;
               &lt;/p&gt;
            </div>
         </div><a name="HiddenvariantsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e569">
            <div class="title e570"> Hidden variants</div>
            <div class="para e571">When we have multiple variants of the same text, we may want to hide in
               substructures (such as attributes or subelements) the alternative variants.
            </div>
            <div class="programlisting e572" xml:space="preserve">&lt;p&gt;And I love &lt;span class=”alternative” title=”him”&gt;her&lt;/span&gt;&lt;/p&gt;</div>
         </div><a name="RDFaANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e573">
            <div class="title e574"> RDFa</div>
            <div class="para e575">RDFa 
               <div class="xref e576" linkend="bib-21"></div> allows arbitrary assertions to be placed on
               existing elements. It is understood that if an assertion exists over a text fragment
               that is not wrapped within an existing element, a generic element (such as the HTML
               
               <div class="emphasis e577" role="ital">span</div>) is added to allow for RDFa assertions to
               attach to the corresponding content. 
            </div>
            <div class="para e578">For instance, support for overlapping inner structures are difficult to provide in
               either fragmentation or milestones, but become possible in RDFa. Consider for
               instance the sequence which contains individual chord elements and overlaps with the
               
               <div class="emphasis e579" role="ital">div</div> element containing individual 
               <div class="emphasis e580" role="ital">p</div> elements. 
            </div>
            <div class="para e581">RDFa thus supports the specification of a virtual instance of the class Chords,
               expressed as a sequence of three instances of the Chord class (in fact, one instance
               each of subclasses GChord, AChord and DChord of the Chord class) as follows:
            </div>
            <div class="programlisting e582" xml:space="preserve">&lt;body about=”#Chs” typeof=”#Chords”&gt;
               &lt;div typeof=”rdf:Seq” property=”rdf:_1” href=”#G”&gt;
               &lt;p property=”rdf:_2” href=”#A”&gt;
               &lt;span about=”#G” typeof=”#GChord” property=”#has”&gt;
               Will never
               &lt;/span&gt;
               &lt;span 
               about=”#A” typeof=”#AChord” property=”#has-first-part”&gt;
               die
               &lt;/span&gt;
               &lt;/p&gt;
               &lt;/div&gt;
               &lt;div property=”rdf:_3” href=”#D”&gt;
               &lt;p&gt;
               &lt;span about=”#A” property=”#has-second-part”&gt;
               And I
               &lt;/span&gt;
               &lt;span about=”#D” typeof=”#DChord” property=”has”&gt;
               love her
               &lt;/span&gt;
               &lt;/p&gt;
               &lt;/lg&gt;
               &lt;/body&gt;
            </div>
         </div><a name="EmbeddedRDFANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e583">
            <div class="title e584"> Embedded RDF </div>
            <div class="para e585">When all else fails, the fallback approach is simply to place the remaining
               assertions as an RDF/XML block in the XML structure, either in a block properly
               thought out for external vocabularies, or converted into some local vocabulary, or
               even as a lump of XML elements placed in a random position within the document. 
            </div>
            <div class="para e586">This is useful, for instance, for dealing with structured attributes 
               <div class="emphasis e587" role="ital">a la</div> LMNL 
               <div class="xref e588" linkend="bib-6"></div>. In the following
               example, a RDF block is inserted in the XML document to provide support for the
               attribute 
               <div class="emphasis e589" role="ital">name</div> of the 
               <div class="emphasis e590" role="ital">chord</div> element, which contains a structure of two different values
               wrapped by elements 
               <div class="emphasis e591" role="ital">normal</div> and 
               <div class="emphasis e592" role="ital">jazzy</div>. This allows the 
               <div class="emphasis e593" role="ital">name</div> of the 
               <div class="emphasis e594" role="ital">chord</div> to cater for both
               a pop and a jazz rendering of the tune, while at the same time remaining one
               attribute of one element. 
            </div>
            <div class="programlisting e595" xml:space="preserve">&lt;body&gt;
               &lt;rdf:RDF     xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
               xmlns="http://www.essepuntato.it/2008/12/earmark#"&gt;
               &lt;Attribute rdf:about="#attr_chord_structured"&gt;
               &lt;has-general-identifier rdf:datatype="xsd:string"&gt;
               name
               &lt;/has-general-identifier&gt;
               &lt;rdf:type&gt;
               &lt;rdf:Seq&gt;
               &lt;rdf:li rdf:resource="#normal"/&gt;
               &lt;rdf:li rdf:resource="#jazzy"/&gt;
               &lt;/rdf:Seq&gt;
               &lt;/rdf:type&gt;
               &lt;/Attribute&gt;
               &lt;Element rdf:about="#normal"&gt;
               &lt;has-general-identifier rdf:datatype="xsd:string"&gt;
               normal
               &lt;/has-general-identifier&gt;
               &lt;rdf:type&gt;
               &lt;rdfs:Bag&gt;
               &lt;rdf:li rdf:resource="#r_chord_D"/&gt;
               &lt;/rdfs:Bag&gt;
               &lt;/rdf:type&gt;
               &lt;/Element&gt;
               &lt;Element rdf:about="#jazzy"&gt;
               &lt;has-general-identifier rdf:datatype="xsd:string"&gt;
               jazzy
               &lt;/has-general-identifier&gt;
               &lt;rdf:type&gt;
               &lt;rdfs:Bag&gt;
               &lt;rdf:li rdf:resource="#r_chord_Dmaj7"/&gt;
               &lt;/rdfs:Bag&gt;
               &lt;rdf:type&gt;
               &lt;/Element&gt;
               &lt;rdf:RDF&gt;
               ...
               &lt;/body&gt;
            </div>
         </div>
      </div><a name="ConclusionsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e596">
         <div class="title e597"> Conclusions</div>
         <div class="para e598">In this paper we presented the Extreme Annotational RDF Markup (EARMARK), a proposal
            for expressing GODDAGs (and e-GODDAG) structures in a general metamarkup language
            that
            does not rely on embedding, and that integrates the advantages of standoff annotations
            and embedded markup into a single unifying framework. 
         </div>
         <div class="para e599">Through EARMARK authors can express a large number of markup assertions and
            observations that would otherwise be non expressible, including overlapping elements,
            elements over non contiguous ranges, repeated structures, text variants, overlapping
            hierarchies, structured attributes, etc.
         </div>
         <div class="para e600">In further work we plan both to explore the application of the structural patterns
            defined in 
            <div class="xref e601" linkend="bib-22"></div>, trying to give a formal ontological demonstration
            if an EARMARK document follows them, and to explore, both formally and pragmatically,
            the expressive power of the EARMARK language and its applications.
         </div>
      </div><a name="AcknowledgementsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e602">
         <div class="title e603">Acknowledgements</div>
         <div class="para e604">The authors wish to thank all that have commented on this paper and on EARMARK in
            general. 
            The anonymous reviewers of this and other EARMARK papers were incredibly useful in
            smoothing
            out both the basic concepts and the written explanation of the most oscure parts of
            the proposal. 
            The participants to the Goddag Workshop in Amsterdam (December 2008) have in no small
            part 
            provided thought fodder for what ended up becoming EARMARK. Finally, we wish to thank
            explicitly 
            Michael Sperberg-McQueen and Federico Meschini for their help, comments and suggestions.
         </div>
      </div><a name="BibliographyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e605">
         <div class="title e606">Bibliography</div>
         <div class="bibliomixed e607" xml:id="bib-21" xreflabel="[1]">Adida, B., Birbeck, M., McCarron, S.,
            Pemberton, S. (2008). RDFa in XHTML: Syntax and processing. W3C Recommendation. World
            Wide Web Consortium. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e608" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/rdfa-syntax/</div>.
         </div>
         <div class="bibliomixed e609" xml:id="bib-13" xreflabel="[2]">Becket, D., Berners-Lee, T. (2008). Turtle -
            Terse RDF Triple Language. W3C Team Submission.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e610" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TeamSubmission/turtle/</div>.
         </div>
         <div class="bibliomixed e611" xml:id="bib-12" xreflabel="[3]">Berglund, A., Boag, S., Chamberlin, D.,
            Fernández, M. F., Kay, M., Robie, J., Siméon, J. (2007). XML Path Language (XPath)
            2.0.
            W3C Recommendation. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e612" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xpath20/</div>.
         </div>
         <div class="bibliomixed e613" xml:id="bib-22" xreflabel="[4]">Dattolo, A., Di Iorio, A., Duca, S., Feliziani,
            A.A., Vitali, F. (2007). Structural patterns for descriptive documents. In the
            Proceedings of the Seventh International Conference on Web Engineering 2007, Como,
            Italy, 2007.
         </div>
         <div class="bibliomixed e614" xml:id="bib-9" xreflabel="[5]">DeRose, S., Maler, E., Daniel, R. (2001). XML
            Pointer Language (XPointer) Version 1.0. W3C Candidate Recommendation.
         </div>
         <div class="bibliomixed e615" xml:id="bib-20" xreflabel="[6]">DeRose. S. (2004). Markup overlap: A review and
            a horse. In Extreme Markup Languages.
         </div>
         <div class="bibliomixed e616" xml:id="bib-16" xreflabel="[7]">Goldfarb, C. F. (1990). The SGML Handbook.
            Oxford University Press, USA.
         </div>
         <div class="bibliomixed e617" xml:id="bib-15" xreflabel="[8]">Horrocks, I., Patel-Schneider, P. F., Boley, H.
            Tabet, S., Grosof, B., Dean, M. (2004). SWRL: A Semantic Web Rule Language Combining
            OWL
            and RuleML. W3C Member Submission.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e618" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/Submission/SWRL/</div>.
         </div>
         <div class="bibliomixed e619" xml:id="bib-18" xreflabel="[9]">Huitfeldt, C., Sperberg-McQueen, C. M. (2001).
            TexMECS: An experimental markup meta-language for complex documents.
         </div>
         <div class="bibliomixed e620" xml:id="bib-3" xreflabel="[10]">Iglesias, C., Squillace, M. (2009). Pointer
            Methods in RDF. W3C Working Draft availables in
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e621" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/Pointer-in-RDF</div>.
         </div>
         <div class="bibliomixed e622" xml:id="bib-10" xreflabel="[11]">Manola, F., Miller, E. (2004). RDF Primer. W3C
            Recommendation. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e623" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/rdf-primer/</div>.
         </div>
         <div class="bibliomixed e624" xml:id="bib-23" xreflabel="[12]">Marcoux, Y. (2008). Graph characterization of
            overlap-only TexMECS and other overlapping markup formalisms. Paper presented at the
            Balisage: The Markup Conference. doi: 
            <div class="biblioid doi e625">10.4242/BalisageVol1.Marcoux01</div>.
         </div>
         <div class="bibliomixed e626" xml:id="bib-7" xreflabel="[13]">Marinelli, P., Vitali, F., Zacchiroli, S.
            (2008). Towards the unification of formats for overlapping markup. The New Review
            of
            Hypermedia and Multimedia.
         </div>
         <div class="bibliomixed e627" xml:id="bib-14" xreflabel="[14]">Nelson, T. (1980). Literary Machines: The
            report on, and of, Project Xanadu concerning word processing, electronic publishing,
            hypertext, thinkertoys, tomorrow's intellectual... including knowledge, education
            and
            freedom - Mindful Press, Sausalito, CA, USA.
         </div>
         <div class="bibliomixed e628" xml:id="bib-24" xreflabel="[15]">Oliver Schonefeld und Andreas Witt (2006).
            Towards validation of concurrent markup. In: Proceedings of the Extreme Markup 2006,
            Montréal, Canada.
         </div>
         <div class="bibliomixed e629" xml:id="bib-2" xreflabel="[16]">Schmidt, D., Colomb, R. (2009). A data
            structure for representing multi-version texts online. International Journal of
            Human-Computer Studies.
         </div>
         <div class="bibliomixed e630" xml:id="bib-1" xreflabel="[17]">Sperberg-McQueen, C. M., Burnard, L. (2005).
            TEI P5 Guidelines for Electronic Text Encoding and Interchange (revised). The
            Association for Computers and the Humanities.
         </div>
         <div class="bibliomixed e631" xml:id="bib-17" xreflabel="[18]">Sperberg-McQueen, C. M., Huitfeldt, C. (2008).
            Markup Discontinued: Discontinuity in TexMecs, Goddag structures, and rabbit/duck
            grammars. doi: 
            <div class="biblioid doi e632">10.4242/BalisageVol1.Sperberg-McQueen01</div>.
         </div>
         <div class="bibliomixed e633" xml:id="bib-5" xreflabel="[19]">Sperberg-McQueen, C.M., Huitfeldt, C. (2004).
            GODDAG: A Data Structure for Overlapping Hierarchies. Lecture Notes In Computer Science.
            Springer.
         </div>
         <div class="bibliomixed e634" xml:id="bib-8" xreflabel="[20]">Tennison, J. (2008). Representing Overlap in
            XML. Article from “Jeni's Musings” blog, available in
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e635" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.jenitennison.com/blog/node/97</div>.
         </div>
         <div class="bibliomixed e636" xml:id="bib-6" xreflabel="[21]">Tennison, J., Piez, W. (2002). The Layered
            Markup and Annotation Language (LMNL). Paper presented at the Late breaking at Extreme
            Markup. Montreal, Canada.
         </div>
         <div class="bibliomixed e637" xml:id="bib-19" xreflabel="[22]">Thompson, H. S., Beech, D., Maloney, M.,
            Mendelsohn, N. (2001). XML Schema Part 1: Structures. W3C Recommendation.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e638" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xmlschema-1/</div>.
         </div>
         <div class="bibliomixed e639" xml:id="bib-4" xreflabel="[23]">Tummarello, G., Morbidni, C., Pierazzo, E.
            (2005). Toward textual encoding based on RDF. 9th ICCC Conference on Electronic
            Publishing (ELPUB 2005). Leuven, Belgium.
         </div>
         <div class="bibliomixed e640" xml:id="bib-11" xreflabel="[24]">W3C OWL Working Group (2009). OWL 2 Web
            Ontology Language Document Overview. W3C Working Draft.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e641" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/owl2-overview/</div>.
         </div>
      </div>
   </div>
</div>