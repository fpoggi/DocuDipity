<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#JavaIntegrationofXQueryanInformationUnitOrientedApproachANCHOR" name="JavaIntegrationofXQueryanInformationUnitOrientedApproachTOC">Java Integration of XQuery - an Information Unit-Oriented Approach</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConceptualframeworkANCHOR" name="ConceptualframeworkTOC">Conceptual framework</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#XQJPLUSANCHOR" name="XQJPLUSTOC">XQJPLUS</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#GettingstartedwithXQJPLUSanillustrativeexampleANCHOR" name="GettingstartedwithXQJPLUSanillustrativeexampleTOC">Getting started with XQJPLUS - an illustrative example</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AsetofsimpleevaluationsANCHOR" name="AsetofsimpleevaluationsTOC">A set of simple evaluations</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ObtainingtheresultsviainfotrayANCHOR" name="ObtainingtheresultsviainfotrayTOC">Obtaining the results via info tray</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ObtainingtheresultsviageneratedinfoshapeANCHOR" name="ObtainingtheresultsviageneratedinfoshapeTOC">Obtaining the results via generated info shape</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#InformationunitorientedaccessANCHOR" name="InformationunitorientedaccessTOC">Information unit-oriented access</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#SummingupANCHOR" name="SummingupTOC">Summing up</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#InformationunitsANCHOR" name="InformationunitsTOC">Information units</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ConceptANCHOR" name="ConceptTOC">Concept</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AvailablephysicaltypesANCHOR" name="AvailablephysicaltypesTOC">Available physical types</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TheassemblyprocessbasicsANCHOR" name="TheassemblyprocessbasicsTOC">The assembly process - basics</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TheassemblyprocessadvancedANCHOR" name="TheassemblyprocessadvancedTOC">The assembly process - advanced</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TheassemblyprocesshowXQueryconstructsJavacustomobjectsANCHOR" name="TheassemblyprocesshowXQueryconstructsJavacustomobjectsTOC">The assembly process - how XQuery constructs Java custom objects</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#MetadataANCHOR" name="MetadataTOC">Meta data</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#Informationtray(infotray)ANCHOR" name="Informationtray(infotray)TOC">Information tray (info tray)</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ConceptANCHOR" name="ConceptTOC">Concept</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TheloadprocessANCHOR" name="TheloadprocessTOC">The load process</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ReadaccessANCHOR" name="ReadaccessTOC">Read access</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#MetadataANCHOR" name="MetadataTOC">Meta data</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#TrayschemaANCHOR" name="TrayschemaTOC">Tray schema</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#PurposeANCHOR" name="PurposeTOC">Purpose</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AsimpleexampleANCHOR" name="AsimpleexampleTOC">A simple example</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ConstrainingmetadataANCHOR" name="ConstrainingmetadataTOC">Constraining meta data</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TrayvalidationANCHOR" name="TrayvalidationTOC">Tray validation</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#InfoshapeANCHOR" name="InfoshapeTOC">Info shape</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#CodegenerationANCHOR" name="CodegenerationTOC">Code generation</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#InfoshapeANCHOR" name="InfoshapeTOC">Info shape</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#InfopathandinfospaceANCHOR" name="InfopathandinfospaceTOC">Info path and info space</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ThecooperationofJavaandXQuerydevelopersANCHOR" name="ThecooperationofJavaandXQuerydevelopersTOC">The cooperation of Java and XQuery developers</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ReusingXQJPLUSinotherintegrationinfrastructuresANCHOR" name="ReusingXQJPLUSinotherintegrationinfrastructuresTOC">Reusing XQJPLUS in other integration infrastructures</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#InformationunitsversusdatabindingANCHOR" name="InformationunitsversusdatabindingTOC">Information units versus data binding</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConclusionANCHOR" name="ConclusionTOC">Conclusion</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#AcknowledgementsANCHOR" name="AcknowledgementsTOC">Acknowledgements</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#SampleofthedataevaluatedintheexamplesectionANCHOR" name="SampleofthedataevaluatedintheexamplesectionTOC">Sample of the data evaluated in the example section</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#XQuerycodeperformingtheevaluationsdescribedintheexamplesectionANCHOR" name="XQuerycodeperformingtheevaluationsdescribedintheexamplesectionTOC">XQuery code performing the evaluations described in the example section</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ThecontrolitemsdefinedbyXQJPLUSANCHOR" name="ThecontrolitemsdefinedbyXQJPLUSTOC">The control items defined by XQJPLUS</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BibliographyANCHOR" name="BibliographyTOC">Bibliography</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">add</div>
         <div class="singletermTERMS">are</div>
         <div class="singletermTERMS">atomic types</div>
         <div class="singletermTERMS">added categories</div>
         <div class="singletermTERMS">adding</div>
         <div class="singletermTERMS">always</div>
         <div class="singletermTERMS">August 3 - 6, 2010</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2010</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">content</div>
         <div class="singletermTERMS">collections</div>
         <div class="singletermTERMS">custom types</div>
         <div class="singletermTERMS">Collection types</div>
         <div class="singletermTERMS">control information</div>
         <div class="singletermTERMS">control item</div>
         <div class="singletermTERMS">Control variables</div>
         <div class="singletermTERMS">custom meta data</div>
         <div class="singletermTERMS">Custom meta data</div>
         <div class="singletermTERMS">Constraining the tray structure</div>
         <div class="singletermTERMS">Controlling the Java binding</div>
         <div class="singletermTERMS">Class InfoSpace</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">data item</div>
         <div class="singletermTERMS">date</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">expose</div>
         <div class="singletermTERMS">evaluation "projectIds"</div>
         <div class="singletermTERMS">evaluation “projectActivities”</div>
         <div class="singletermTERMS">evaluation “fractionResults”</div>
         <div class="singletermTERMS">evaluation “activityResults”</div>
         <div class="singletermTERMS">exceptions</div>
         <div class="singletermTERMS">exception objects</div>
         <div class="singletermTERMS">evaluation versus repetition</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
         <div class="singletermTERMS">From info tray to info shape</div>
         <div class="singletermTERMS">follow</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">Hash</div>
         <div class="singletermTERMS">Hans-Jürgen</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">InfoTray</div>
         <div class="singletermTERMS">InfoTrayLoadingException</div>
         <div class="singletermTERMS">InfoSpace</div>
         <div class="singletermTERMS">Information units</div>
         <div class="singletermTERMS">items</div>
         <div class="singletermTERMS">information units</div>
         <div class="singletermTERMS">information unit-oriented API.</div>
         <div class="singletermTERMS">Information unit: properties</div>
         <div class="singletermTERMS">Information unit: assembly</div>
         <div class="singletermTERMS">Information unit: access via information tray</div>
         <div class="singletermTERMS">info tray</div>
         <div class="singletermTERMS">info shape</div>
         <div class="singletermTERMS">Info path and info space</div>
         <div class="singletermTERMS">into</div>
         <div class="singletermTERMS">info path</div>
         <div class="singletermTERMS">info space</div>
         <div class="singletermTERMS">info shapes</div>
         <div class="singletermTERMS">information unit</div>
         <div class="singletermTERMS">implementation type.</div>
         <div class="singletermTERMS">information content</div>
         <div class="singletermTERMS">Information units that are themselves trays</div>
         <div class="singletermTERMS">Info space</div>
         <div class="singletermTERMS">Info path</div>
         <div class="singletermTERMS">Interpretation of intra-unit paths - examples.</div>
         <div class="singletermTERMS">information units versus items</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
         <div class="singletermTERMS">java.util.Map&lt;String,String&gt;</div>
         <div class="singletermTERMS">java.util.Properties</div>
         <div class="singletermTERMS">Java</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">LoadableFromXML</div>
         <div class="singletermTERMS">loadFromXML</div>
         <div class="singletermTERMS">loading</div>
         <div class="singletermTERMS">load methods</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">Map&lt;String, Map&lt;String,String&gt;&gt;</div>
         <div class="singletermTERMS">Map&lt;String, Map&lt;String, String[]&gt;&gt;</div>
         <div class="singletermTERMS">Map&lt;String, UsgsResult[]&gt;</div>
         <div class="singletermTERMS">Map&lt;String, String&gt;</div>
         <div class="singletermTERMS">Map&lt;String,String&gt;</div>
         <div class="singletermTERMS">Map&lt;QName,String&gt;</div>
         <div class="singletermTERMS">Map&lt;String,&lt;String, String[]&gt;&gt;</div>
         <div class="singletermTERMS">Motivating example</div>
         <div class="singletermTERMS">Modelling information units</div>
         <div class="singletermTERMS">meta data</div>
         <div class="singletermTERMS">maps</div>
         <div class="singletermTERMS">miscellaneous</div>
         <div class="singletermTERMS">Map types</div>
         <div class="singletermTERMS">Meta data</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">name</div>
         <div class="singletermTERMS">Note:</div>
         <div class="singletermTERMS">node types</div>
         <div class="singletermTERMS">nested units</div>
         <div class="singletermTERMS">Namespace context</div>
         <div class="singletermTERMS">Note.</div>
         <div class="singletermTERMS">Note</div>
         <div class="singletermTERMS">node</div>
         <div class="singletermTERMS">Note on multiplicity.</div>
         <div class="singletermTERMS">Note on step indexes and unit selection.</div>
         <div class="singletermTERMS">not</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">Object</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">ProjectData</div>
         <div class="singletermTERMS">physical type</div>
         <div class="singletermTERMS">properties</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">ResultReport</div>
         <div class="singletermTERMS">reuse</div>
         <div class="singletermTERMS">resource ID</div>
         <div class="singletermTERMS">reading</div>
         <div class="singletermTERMS">reading the unit contents</div>
         <div class="singletermTERMS">reading the unit type information</div>
         <div class="singletermTERMS">reading the unit meta data</div>
         <div class="singletermTERMS">reading tray meta data</div>
         <div class="singletermTERMS">Replacing the XQJ API</div>
         <div class="singletermTERMS">Replacing XQuery</div>
         <div class="singletermTERMS">Replacing Java</div>
         <div class="singletermTERMS">rennau@bits-ac.com</div>
         <div class="singletermTERMS">Rennau</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">SortedSet&lt;String&gt;</div>
         <div class="singletermTERMS">sematype</div>
         <div class="singletermTERMS">semantic type</div>
         <div class="singletermTERMS">Summary of Java types delivered by XQJ.</div>
         <div class="singletermTERMS">support for array types</div>
         <div class="singletermTERMS">standard meta data</div>
         <div class="singletermTERMS">Standard meta data</div>
         <div class="singletermTERMS">Standard meta data item “length”</div>
         <div class="singletermTERMS">Standard meta data “ptype”, “stype”, “itype”</div>
         <div class="singletermTERMS">string-to-string map</div>
         <div class="singletermTERMS">string-to-node map</div>
         <div class="singletermTERMS">string-to-(string-to-string map)</div>
         <div class="singletermTERMS">string-to-(string-to-node map)</div>
         <div class="singletermTERMS">string</div>
         <div class="singletermTERMS">Senior programmer</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">Tray schema</div>
         <div class="singletermTERMS">type description</div>
         <div class="singletermTERMS">tray schema</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
         <div class="singletermTERMS">UsgsResult</div>
         <div class="singletermTERMS">using</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
         <div class="singletermTERMS">validate</div>
         <div class="singletermTERMS">validating</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">XQueryResponse</div>
         <div class="singletermTERMS">xqjp:setNamespaceContext</div>
         <div class="singletermTERMS">xqjp:part</div>
         <div class="singletermTERMS">xqjp:setVar</div>
         <div class="singletermTERMS">xqjp:error</div>
         <div class="singletermTERMS">xqjp:trayMeta</div>
         <div class="singletermTERMS">xqjp:complexPartBegin</div>
         <div class="singletermTERMS">xqjp:complexPartEnd</div>
         <div class="singletermTERMS">XQuery integration based on information units</div>
         <div class="singletermTERMS">XQuery</div>
         <div class="singletermTERMS">XQJ</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="JavaIntegrationofXQueryanInformationUnitOrientedApproachANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.2" xml:id="HR-23632987-8973">
      <div class="title e1">Java Integration of XQuery - an Information Unit-Oriented Approach</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2010</div>
            <div class="confdates e5">August 3 - 6, 2010</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">An infrastructure for integrating XQuery into Java systems is described. 
               The infrastructure comprises a new API (XQJPLUS, built on the standard API XQJ) 
               and a tool for Java code generation. The basic idea of the approach is to deliver
               query 
               results not in terms of query result items, but in terms of “information units”,
               ready-to-use entities assembled from the result items. The assembly process is guided
               by control 
               information embedded into the query result, so that the query controls exactly 
               what will be delivered, and in which form. Information units can represent 
               information in a great variety of forms, including many map types and 
               custom objects. The information units produced by a query are collected into 
               a special container ("info tray") which offers name-based, intuitive access
               to the units. The query-specific structure of an info tray may be formally defined
               
               by a tray schema from which an "info shape" can be generated, a Java class representing
               
               a specific kind of info tray and offering compiler checked data access. 
               Info trays also support data integration, as their possibly
               very heterogeneous contents can be addressed in a uniform way, using path-like
               expressions.
               
            </div>
         </div>
         <div class="author e8">
            <div class="personname e9">
               <div class="firstname e10">Hans-Jürgen</div>
               <div class="othername e11"></div>
               <div class="surname e12">Rennau</div>
            </div>
            <div class="personblurb e13">
               <div class="para e14"></div>
            </div>
            <div class="affiliation e15">
               <div class="jobtitle e16">Senior programmer</div>
               <div class="orgname e17">bits - Büro für Informations-Technologie und Software GmbH</div>
            </div>
            <div class="email e18">rennau@bits-ac.com</div>
         </div>
         <div class="legalnotice e19">
            <div class="para e20">Copyright © 2010 by the author.  Used with
               permission.
            </div>
         </div>
         <div class="keywordset e21" role="author">
            <div class="keyword e22">XQuery</div>
            <div class="keyword e23">Java</div>
            <div class="keyword e24">XQJ</div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e25" xml:id="Introduction">
         <div class="title e26">Introduction</div>
         <div class="para e27">
            To model information as XML offers remarkable advantages: the information is itemized
            in a way 
            that endows each item with a name and an identity; each item has a context which in
            turn can be 
            identified; and all items are exposed to navigation and querying.
            
         </div>
         <div class="para e28">
            These gains are not limited to the scope of single documents – they scale globally,
            
            thanks to the concepts of document URIs and namespaces. Using these concepts together
            
            makes it possible to fuse the total set of accessible XML resources into one single,
            
            homogeneous information space, within which document borders are crossed by single
            
            steps. Those resources need not store the data as XML: it suffices to 
            
            <div class="emphasis e29" role="ital">expose</div> them as XML, e.g. creating XML documents on the 
            fly and supporting an XPath or XQuery interface. Relational databases, comma-delimited
            
            files and web services are all examples of resources which can be exposed as XML.
            
         </div>
         <div class="para e30">
            XQuery 
            <div class="xref e31" linkend="W3C-XQuery"></div> is a language designed to live in and work with
            this XML-based information space. 
            Many tasks of information processing can be handled by XQuery with amazing conciseness
            and simplicity. Much software could delegate certain information processing tasks
            to XQuery, thus using XQuery in a similar way to a client delegating processing tasks
            to a 
            server. This integration is helped by the fact that XQuery is not constrained to 
            produce XML. XQuery generates instances of the XDM data model, which means it can
            
            produce heterogeneous sequences of nodes and atomic values. So XQuery can deliver
            
            what is needed by its “clients” in a fine-tuned way.
            
         </div>
         <div class="para e32">
            Object-oriented programs are among those that can benefit from using XQuery. In the
            case of
            Java programs, this possibility is made more attractive by the existence of a standardized
            XQuery API – the XQJ 
            <div class="xref e33" linkend="JSR-XQJ"></div>. 
            This API fully supports the fine-grained data exchange between the languages required
            
            to let XQuery deliver exactly what is needed - for example a sequence of numbers,
            and 
            only that.
            
         </div>
         <div class="para e34">
            Imagine a Java application that must process large and complex XML resources. 
            Assume a message describes an approaching freight train, and the message must serve
            as 
            the data source for many kinds of information, like arrival times, properties and
            
            quantities of goods, numbers and technical details of wagons, etc. Efficiency is highest
            and complexity is lowest if we let XQuery perform the largest possible chunks 
            of processing, producing many of those “partial” results in a single pass.
            
         </div>
         <div class="para e35">
            The XQJ makes this possible in principle. It is very easy – although very tedious
            – 
            to write the required Java code, using as input the XQuery result and producing as
            
            output the various objects desired (for instance documents, string collections, 
            string-to-string maps, string-to-node maps, Properties objects, …). The code would
            
            iterate over the result items and handle them in accordance with their item type and
            the 
            position in the result stream. (Yes, some agreement between Java developer and query
            
            author would be necessary in order to guide these decisions – e.g. “first the strings
            
            of code list #1, then an agreed upon separator element, then the terms of code list
            #2, 
            then a separator, then alternating document names and document nodes”.)
            
         </div>
         <div class="para e36">
            In principle it is very easy, but it is very tedious, and it is extremely brittle:
            the 
            slightest change in the query result – for example, a change in the sequence 
            of the XML documents or code lists – will likely break the Java code. This breaking
            
            might easily go unnoticed, as the Java method might still produce sets and a map,
            
            only with incorrect content.
            
         </div>
         <div class="para e37">
            It's clear that the option to let the query produce complex multi-item results is
            
            problematic as long as there is no new channel opened through which the query author
            can 
            push his intent clearly and explicitly “up” into the Java layer, structuring and associating
            
            content with meaning, as he would do within an XML document. This paper describes
            a new API, 
            XQJPLUS, that addresses the issue of how XQuery can deliver structured, self-describing
            results 
            in a secure and efficient way. Key aspects will be the simplicity, robustness and
            safety of 
            the Java code, as well as the new responsibilities of the query code.
            
         </div>
      </div><a name="ConceptualframeworkANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e38">
         <div class="title e39">Conceptual framework</div>
         <div class="para e40">
            XML models information in terms of the Infoset and information items 
            <div class="xref e41" linkend="W3C-Infoset"></div>. 
            XPath 2.0 extends the model and defines the XDM 
            <div class="xref e42" linkend="W3C-XDM"></div>, 
            a model expressing information as a sequence of items which are nodes and/or atomic
            values.
            
         </div>
         <div class="para e43">
            The XDM is an achievement that can hardly be overestimated. It allows for representing
            all kinds 
            of commonly used information in a unified, platform-independent way. However, 
            computer programs are written in program languages, most of which cannot express XDM
            values 
            directly. Therefore, XDM-supplied information must be “translated” into items of the
            computer language's 
            internal data model. In Java, for example, the standard API for XQuery (XQJ) translates
            XDM items 
            into a set of Java data items like primitive type items and objects of various types
            like 
            String, Integer, QName, Element, etc. 
            
         </div>
         <div class="para e44">
            XQuery programs produce a sequence of XDM items. Integration of XQuery into other
            languages 
            should translate the items one-to-one into language-native data items – which 
            is what XQJ accomplishes. So far, so good. But is this enough?
            
         </div>
         <div class="para e45">      
            
            <div class="emphasis e46" role="ital">
               <div class="emphasis e47" role="bold">Information units</div>
            </div>
            
         </div>
         <div class="para e48">
            Information 
            <div class="emphasis e49" role="ital">items</div> are not necessarily the desired 
            
            <div class="emphasis e50" role="bold">information units</div>. For instance, the unit actually 
            wanted might be an array of strings, or a string-to-string map, a string-to-node map,
            
            a Properties object etc. Any language not based on the XDM itself will use units 
            of information which are not an unambiguous one-to-one mapping of an XDM item type,
            
            but correspond to an aggregation or transformation of itemized information. In 
            this sense, every computer language can be regarded as a specific information platform
            
            with its own set of information unit types.
            
         </div>
         <div class="para e51">      
            
            <div class="emphasis e52" role="ital">
               <div class="emphasis e53" role="bold">XQuery integration based on information units</div>
            </div>
            
         </div>
         <div class="para e54">
            To maximize the benefits of XQuery integration, the assembly of information items
            
            into commonly used information units should not be left to individual applications,
            
            as this would amount to frequent reinvention of the wheel or, worse, cause unwillingness
            
            to integrate XQuery at all. An alternative would be an 
            <div class="emphasis e55" role="bold">information 
               unit-oriented API.
            </div> This API should be able to deliver useful information 
            units like string-to-string maps, implementing their assembly from query result items
            
            behind the API’s façade. But before attempting to design the assembly and retrieval
            of 
            information units, the information content of such units should be modeled.    
            
         </div>
         <div class="para e56">      
            
            <div class="emphasis e57" role="ital">
               <div class="emphasis e58" role="bold">Information unit: properties</div>
            </div>
            
         </div>
         <div class="para e59">
            An information unit contains information, but what properties does it have beside
            that? 
            How about a name and meta data, how should the unit type be modeled? A good starting
            point is to model 
            information units as components with properties.    
            
         </div>
         <div class="para e60">      
            
            <div class="emphasis e61" role="ital">
               <div class="emphasis e62" role="bold">Information unit: assembly</div>
            </div>
            
         </div>
         <div class="para e63">
            Information units are not necessarily one-to-one mappings of the XDM items. In particular,
            they may represent aggregations and transformations of XDM items. How are these items
            assembled into information units? Probably the 
            most general and flexible way is to apply the concept of “markup” to result sequences:
            
            the XQuery result augments the target information with meta information controlling
            the 
            unit assembly.   
            
         </div>
         <div class="para e64">      
            
            <div class="emphasis e65" role="ital">
               <div class="emphasis e66" role="bold">Information unit: access via information tray</div>
            </div>
            
         </div>
         <div class="para e67">
            XML exposes the information items as members of an Infoset, that is, as parts of a
            tree. 
            What should be the structural unit that contains a number of information units? The
            
            approach described in this paper introduces the concept of an “information tray” 
            (
            <div class="emphasis e68" role="bold">info tray</div>, for short) which is a generic collection 
            of information units, offering name-based access to information units as well as the
            
            possibility to expose them as nested structures. The word “tray” is meant to combine
            
            the idea of “tree” with a notion of convenience.
            
         </div>
         <div class="para e69">      
            
            <div class="emphasis e70" role="ital">
               <div class="emphasis e71" role="bold">Tray schema</div>
            </div>
            
         </div>
         <div class="para e72">
            An info tray is a generic, name-aware data container, comparable to maps and XML 
            documents. As with maps and documents, the meaning of names depends on the tray 
            instance one is dealing with. Within a particular instance, the unit name 
            “SampleDescription” might address a unit which is an element node, a name 
            “ProjectActivities” might address a unit which is a string-to-string map, while 
            a third name “DepartmentList” might address nothing, as it is not used by the tray.
            
            To express this situation, some kind of tray schema should define which names are
            
            used and what exactly they address. Note that if an XQuery program is designed to
            
            create a tray, the query result itself may be modeled in terms of a tray schema. 
            
            
         </div>
         <div class="para e73">      
            
            <div class="emphasis e74" role="ital">
               <div class="emphasis e75" role="bold">From info tray to info shape</div>
            </div>
            
         </div>
         <div class="para e76">
            Consider an XQuery API delivering query results as info trays. Further consider 
            the availability of a tray schema which defines for a particular query the names 
            and data types of the information units which it produces. Then it is a small step
            
            to imagine that such a tray schema could be compiled into a query-specific variant
            
            of a tray which would expose an access interface exactly fitted to the available 
            information units. Their names and types could be combined into signatures which 
            exclude any name/type mismatches. Such a tray variant which represents the exact 
            “shape” of the information produced by a particular query might be called an 
            
            <div class="emphasis e77" role="bold">info shape</div>. It would offer type-safe, 
            compiler-guarded access to information units, for example like this:    
            
            <div class="programlisting e78" xml:space="preserve">String getOrganizatonLongName();
               Map&lt;String,String&gt; getProjectActivities();
            </div>
            
         </div>
         <div class="para e79">
            which amounts to a Java binding not of Infosets in terms of info items, but query
            
            results in terms of ready-to-use information units.
            
         </div>
         <div class="para e80">      
            
            <div class="emphasis e81" role="ital">
               <div class="emphasis e82" role="bold">Info path and info space</div>
            </div>
            
         </div>
         <div class="para e83">
            Like an XML document, an info tray associates information with names and supports
            the nesting of named information. When we associate the tray as a whole with a name,
            then
            any information unit within a set of info trays can be described in terms of a simple
            path consisting of a tray name and one or more unit names. If we add to this path
            a trailing 
            part navigating 
            <div class="emphasis e84" role="ital">into</div> the unit, we arrive at the 
            concept of an 
            <div class="emphasis e85" role="bold">info path</div> addressing
            contents found in a set of info trays in a similar way to an XPath addressing the
            contents of an XML document. Thus an 
            <div class="emphasis e86" role="bold">info space</div> 
            simply denotes a set of info trays, associating each tray with a name.
            
         </div>
      </div><a name="XQJPLUSANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e87">
         <div class="title e88">XQJPLUS</div>
         <div class="para e89">
            The remainder of this paper introduces XQJPLUS, which is several things: an API and
            its 
            implementation, a tool for generating Java components and, arguably, a style 
            for integrating XQuery into Java. XQJPLUS is an attempt to elaborate and implement
            
            the conceptual framework sketched in the preceding section. The framework will serve
            
            as a reference when describing XQJPLUS, a single context within which to inspect 
            various details.
            
         </div>
         <div class="note e90">
            <div class="title e91">XQJPLUS is not limited to the use of info trays</div>
            <div class="para e92">
               XQJPLUS offers many features which facilitate the work with XQJ and which are
               independent of whether one actually uses info trays. Examples are a query 
               registration facility, automatic adaptation of the query base URI to the 
               query file URI, simplified parameter type handling, and simplified result 
               retrieval in the case of homogeneously-typed query results. These aspects are 
               ignored in the rest of this paper which concentrates on the possibilities 
               offered by info trays and info shapes.         
               
            </div>
         </div>
      </div><a name="GettingstartedwithXQJPLUSanillustrativeexampleANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e93" xml:id="Getting-started-with-XQJPLUS">
         <div class="title e94">Getting started with XQJPLUS - an illustrative example</div>
         <div class="para e95">
            The goal of this section is to demonstrate how Java programs can be simplified by
            
            integrating XQuery in an “information unit-oriented way”, receiving from XQuery 
            information in the form of named, ready-to-use entities. So the example 
            should be studied with two questions in mind: How would I get the work done 
            without XQuery? And how would I do it using XQuery, but without information 
            unit-oriented access to the query result? See 
            <div class="xref e96" linkend="USGS-evaluation-query"></div>
            for a complete listing of the XQuery program which performs the evaluations
            used by the Java code.
            
         </div>
         <div class="para e97">
            The example considers the evaluation of data obtained from 
            “National Water Information System (NWIS) Water-Quality Web Services”. See
            
            <div class="xref e98" linkend="USGS-WS"></div> for technical documentation on how to use these
            web services. More specifically, we evaluate an XML file obtained from 
            the NWIS Result Service. It contains water quality sampling results 
            reported for the first three months of 2010, collected in the state 
            of Minnesota. The data can be obtained from the following URI:
            
            <div class="programlisting e99" xml:space="preserve">http://qwwebservices.usgs.gov/Result/search?organization=USGS-MN&amp;startDateLo=
               01-01-2010&amp;startDateHi=03-31-2010&amp;mimeType=xml
            </div>
            
         </div>
         <div class="para e100">      
            See 
            <div class="xref e101" linkend="USGS-example-data"></div> for a sample of
            the data. The structure can be summarized as a sequence of activity 
            reports (
            <div class="code e102">(&lt;Activity&gt;</div> elements), each one containing 
            a description of the activity (
            <div class="code e103">&lt;ActivityDescription&gt;</div>) 
            and a sequence of result reports (
            <div class="code e104">&lt;Result&gt;</div> 
            elements). Let us start with a set of simple evaluations.
            
         </div><a name="AsetofsimpleevaluationsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e105">
            <div class="title e106">A set of simple evaluations</div>
            <div class="para e107">
               <div class="emphasis e108" role="ital">
                  <div class="emphasis e109" role="bold">evaluation "projectIds"</div>
               </div>
            </div>
            <div class="para e110">
               Desired result: a sorted list of project identifiers (
               <div class="code e111">&lt;ProjectIdentifier&gt;</div>), 
               delivered as a 
               <div class="code e112">SortedSet&lt;String&gt;</div> object. A string representation of 
               the result might look like this:
               
               <div class="programlisting e113" xml:space="preserve">
                  860700319
                  860700379
                  NAWQA
               </div>
               
            </div>
            <div class="para e114">
               <div class="emphasis e115" role="ital">
                  <div class="emphasis e116" role="bold">evaluation “projectActivities”</div>
               </div>
            </div>
            <div class="para e117">
               Desired result: a nested map, where outer keys are project identifiers, 
               inner keys are timestamps (obtained by concatenating 
               <div class="code e118">&lt;ActivityStartDate&gt;</div> and 
               
               <div class="code e119">&lt;Time&gt;</div>) and inner values are activity identifiers. 
               
            </div>
            <div class="para e120">
               Desired result data type: 
               <div class="code e121">Map&lt;String, Map&lt;String,String&gt;&gt;</div>.
               A string representation might look like this:       
               
               <div class="programlisting e122" xml:space="preserve">
                  860700319= (2 entries)
                  2010-01-21#10:20:00=sun1dmnspl.01.01000102
                  2010-02-09#09:30:00=sun1dmnspl.01.01000105
                  
                  860700379= (1 entries)
                  2010-01-22#12:01:00=sun1dmnspl.01.01000103
                  
                  NAWQA= (2 entries)
                  2010-01-20#09:20:00=sun1dmnspl.01.01000101
                  2010-02-10#11:00:00=sun1dmnspl.01.01000104
               </div>
               
            </div>
            <div class="para e123">
               <div class="emphasis e124" role="ital">
                  <div class="emphasis e125" role="bold">evaluation “fractionResults”</div>
               </div>
            </div>
            <div class="para e126">
               Desired result: a nested map with outer keys specifying the sample kind 
               (concatenation of 
               <div class="code e127">&lt;CharacteristicName&gt;</div> and 
               
               <div class="code e128">&lt;ResultSampleFractionText&gt;</div>), inner keys specifying the timestamp 
               (concatenation of 
               <div class="code e129">&lt;ActivityStartDate&gt;</div> and 
               <div class="code e130">&lt;Time&gt;</div>) 
               and inner values a list of result values (each one a concatenation of 
               
               <div class="code e131">&lt;ResultMeasureValue&gt;</div> and 
               <div class="code e132">&lt;MeasureUnitCode&gt;</div>) 
               obtained for this combination of sample kind and time. 
               
            </div>
            <div class="para e133">
               Desired result data type: 
               <div class="code e134">Map&lt;String, Map&lt;String, String[]&gt;&gt;</div>.
               A string representation might look like this:       
               
               <div class="programlisting e135" xml:space="preserve">…
                  Ammonia and ammonium/Dissolved=
                  2010-01-20#09:20:00=
                  0.49 [mg/l NH4]
                  0.384 [mg/l as N]
                  2010-01-21#10:20:00=
                  0.283 [mg/l as N]
                  0.36 [mg/l NH4]
                  2010-01-22#12:01:00=
                  0.08 [mg/l NH4]
                  0.062 [mg/l as N]
                  2010-02-09#09:30:00=
                  0.307 [mg/l as N]
                  0.40 [mg/l NH4]
                  2010-02-10#11:00:00=
                  0.55 [mg/l NH4]
                  0.431 [mg/l as N]
                  
                  Ammonia and ammonium/Total=
                  2010-01-21#10:20:00=
                  0.29 [mg/l as N]
                  0.38 [mg/l NH4]
                  2010-02-09#09:30:00=
                  0.33 [mg/l as N]
                  0.42 [mg/l NH4]
                  …
               </div>
               
            </div>
            <div class="para e136">
               <div class="emphasis e137" role="ital">
                  <div class="emphasis e138" role="bold">evaluation “activityResults”</div>
               </div>
            </div>
            <div class="para e139">
               Desired result: a map associating 
               <div class="code e140">UsgsResult</div> object arrays with string keys. The 
               key specifies the activity identifier and the objects are custom objects 
               representing an activity as described by one 
               <div class="code e141">&lt;Activity&gt;</div> element. It is 
               assumed that 
               <div class="code e142">UsgsResult</div> objects can be loaded from 
               <div class="code e143">&lt;Activity&gt;</div> 
               element information items. 
               
            </div>
            <div class="para e144">
               Desired result data type: 
               <div class="code e145">Map&lt;String, UsgsResult[]&gt;</div>.
               A string representation of the result might look like this:
               
               <div class="programlisting e146" xml:space="preserve">
                  key=sun1dmnspl.01.01000101
                  result object:
                  ============================================
                  ResultValueTypeName=Calculated
                  ResultStatusIdentifier=Preliminary
                  MeasureUnitCode=mg/l NH4
                  AnalysisStartDate=--
                  ResultSampleFractionText=Dissolved
                  CharacteristicName=Ammonia and ammonium
                  PreparationStartDate=--
                  USGSPCode=71846
                  ResultMeasureValue=0.49
                  
                  ...
               </div>
               
            </div>
         </div><a name="ObtainingtheresultsviainfotrayANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e147">
            <div class="title e148">Obtaining the results via info tray</div>
            <div class="para e149">
               XQJPLUS offers the possibility to let the query create an info tray, 
               a collection of information units which may be conveniently accessed. 
               The following code snippet demonstrates how the evaluations defined in 
               the preceding section might be performed from a Java developer’s perspective.
               
               <div class="programlisting e150" xml:space="preserve">
                  // *** prepare query
                  // *****************
                  xq.registerQueryFile(queryName, queryFile);
                  
                  // *** load info tray
                  // ******************
                  InfoTray tray = xq.execQuery2InfoTray(queryName, new FileInputStream(inputFile), null);
                  
                  // *** read results
                  // *****************
                  SortedSet&lt;String&gt; projectIds =                       tray.getStringSortedSetObject("projectIds");
                  Map&lt;String, Map&lt;String, String&gt;&gt; projectActivities = tray.getNestedMapString2StringObject("projectActivities");
                  Map&lt;String, Map&lt;String, String[]&gt;&gt; fractionResults = tray.getNestedMapString2StringsObject("fractionResults");
                  Map&lt;String, Object[]&gt; activityResults =              tray.getMapString2CustomObjectsObject("activityResults");
                  
                  // *** process results
                  // ******************* 
                  // ...
               </div>
               
            </div>
            <div class="para e151">
               The various results are “information units” which the Java code may 
               conveniently pick from the tray: selecting the appropriate getter method 
               (depending on the unit’s data type) and specifying the result name as a 
               parameter.  
               
            </div>
         </div><a name="ObtainingtheresultsviageneratedinfoshapeANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e152" xml:id="Obtaining-via-info-shape">
            <div class="title e153">Obtaining the results via generated info shape</div>
            <div class="para e154">
               Using an info tray, Java code can contain two kinds of errors not
               detected at compile time: using a wrong access method for a given
               unit name, and using a unit name which does not occur at all in
               the tray. If this is an issue, one may work with 
               <div class="emphasis e155" role="ital">
                  info shapes
               </div> instead of info trays. An info shape is a
               query-specific Java class plus interfaces, providing type-safe 
               access exactly tailored to fit the query results. The Java code 
               is generated from a succinct “tray schema” describing the result. 
               A minimal version of such a schema would just state the names and 
               data types of the units, as well as a distribution of the units 
               over one or more read interfaces. See 
               <div class="xref e156" linkend="Tray-schema"></div> 
               for a listing of the schema used to generate the Java resources 
               used in this section. The schema is compiled into two Java 
               interfaces and a back-end Java class. As an example, 
               an excerpt of interface 
               <div class="code e157">ProjectData</div> looks like this:      
               
               <div class="programlisting e158" xml:space="preserve">
                  public interface ProjectData {
                  
                  //data access
                  public SortedSet&lt;String&gt; getProjectIds() throws XQPException;
                  public Map&lt;String,Map&lt;String,String&gt;&gt; getProjectActivities() throws XQPException;
                  
                  //meta data access
                  public Map&lt;String,String&gt; getProjectIdsMetaData() throws XQPException;
                  public Map&lt;String,String&gt; getProjectActivitiesMetaData() throws XQPException;
                  
                  // more signatures left out …
                  }
               </div>
               
            </div>
            <div class="para e159">
               These generated Java components can be used for even simpler and safer 
               Java access to the query results. This time, we let the query generate
               an info shape, rather than an info tray. The info shape is an object
               of the generated class 
               <div class="code e160">ResultReport</div>, from which we
               obtain the interfaces: 
               
               <div class="programlisting e161" xml:space="preserve">
                  // *** create and load info shape
                  // ******************************
                  ResultReport resultReport = 
                  xq.execQuery2InfoShape(queryName, new FileInputStream(inputFile), null, new ResultReport());
                  
                  ResultData  resultData  = resultReport.getInterfaceResultData();
                  ProjectData projectData = resultReport.getInterfaceProjectData();
               </div>
               We use these interfaces to read the query results:
               
               <div class="programlisting e162" xml:space="preserve">
                  // *** read results
                  // ****************
                  SortedSet&lt;String&gt; projectIds                       = projectData.getProjectIds();
                  Map&lt;String, Map&lt;String, String&gt;&gt; projectActivities = projectData.getProjectActivities();
                  Map&lt;String, Map&lt;String, String[]&gt;&gt; fractionResults = resultData.getFractionResults();
                  Map&lt;String, UsgsResult[]&gt; activityResults          = resultData.getActivityResults();	
               </div>
               
            </div>
            <div class="para e163">
               When using such an info shape, rather than an info tray, mismatches between unit
               name and the unit's data type are excluded. A further advantage is the 
               delivery of custom objects as instances of their specific type, rather than 
               instances of 
               <div class="code e164">Object</div>.
               
            </div>
         </div><a name="InformationunitorientedaccessANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e165" xml:id="Information-unit-oriented-access">
            <div class="title e166">Information unit-oriented access</div>
            <div class="para e167">
               Whether working with an info tray or an info shape - the API client deals with
               information units, rather than information items. The units are named and have
               a granularity adapted to the client's requirements, rather than being dictated by
               the
               XQuery data model. 
               <div class="xref e168" linkend="from-items-to-units"></div> summarizes the process 
               which enables this information unit-oriented access.
               
            </div>
            <div class="figure e169" xml:id="from-items-to-units">
               <div class="title e170">From XDM items to information units</div>
               <div class="mediaobject e171">
                  <div class="imageobject e172">
                     <div class="metaBox e173"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e361').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e361" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e173'
                              </span><span class="metaAttribute">fileref='../../../vol5/graphics/Rennau01/Rennau01-001.jpg'
                              </span><span class="metaAttribute">format='jpg'
                              </span><span class="metaAttribute">width='80%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="caption e174">
                  <div class="para e175">Schematic representation of how query execution is coupled to the generation of an
                     info tray. 
                     A query – myquery.xq – is executed and produces a sequence of XDM items. These are
                     passed to the 
                     assembly machine, which transforms them into a set of named information units. The
                     units are stored 
                     for later delivery. Delivery is enabled by a spectrum of get methods, each one dedicated
                     to a 
                     specific unit data type.
                     
                  </div>
               </div>
            </div>
         </div><a name="SummingupANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e176" xml:id="Example-summing-up">
            <div class="title e177">Summing up</div>
            <div class="para e178">
               The example demonstrated the possibility to supply Java code with the results of XQuery
               evaluations in a convenient and intuitive way. What was the price to pay for this
               convenience, how much effort had to be made in the XQuery layer? The query constructing
               the info tray (or the info shape, if the tray schema was compiled into Java code)
               comprises 111 lines of code, including comments. (See 
               <div class="xref e179" linkend="USGS-evaluation-query"></div> for a full listing.) An experienced 
               XQuery developer can write the code in an hour or two. Adding in the fact that
               on the Java developer's side no learning or understanding of XQuery was
               required, leads to the conclusion that the integration of XQuery into Java may
               offer an interesting perspective in general - and especially so if realized in an
               
               information unit-oriented way.
               
            </div>
         </div>
      </div><a name="InformationunitsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e180" xml:id="Information-units">
         <div class="title e181">Information units</div>
         <div class="para e182">
            This section deals with several aspects of information units. It starts with an 
            elaboration of the concept, followed by an overview of the data types which an information
            
            unit may represent.  The main part is a description how information units are assembled
            from 
            XQuery result items. Finally, the use of meta data is explained.
            
         </div><a name="ConceptANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e183">
            <div class="title e184">Concept</div>
            <div class="para e185">
               The term 
               <div class="emphasis e186" role="ital">
                  <div class="emphasis e187" role="bold">information unit</div>
               </div> 
               should capture the idea of a convenient entity to use when 
               accessing, processing or delivering information. Of course, what is convenient depends
               on 
               the situation and on taste. But as a starting point one may postulate that XDM items
               – nodes 
               and atomic values – certainly 
               <div class="emphasis e188" role="ital">are</div> information units, but 
               not the only ones one might wish for. A node or, say, a string can be exactly what
               one wants 
               to deal with. Note however the general limitation that the XDM model has only two
               ways 
               to express aggregation: (a) by a tree structure found within the content of a node,
               and 
               (b) by regarding a sequence of items as an XDM value. The first must be unravelled
               using 
               tree navigation, and the second is a primitive collection approach. From an application
               
               programmer’s point of view, this may be insufficient.
               
            </div>
            <div class="para e189">
               <div class="emphasis e190" role="ital">
                  <div class="emphasis e191" role="bold">Motivating example</div>
               </div>
            </div>
            <div class="para e192">
               Consider the situation that some processing requires as input a particular string-to-string
               mapping, for example mapping project identifiers to project names. Such a mapping
               can 
               easily be represented by an XML structure, for example:
               
               <div class="programlisting e193" xml:space="preserve">
                  &lt;projects&gt;
                  &lt;project id=”…” name=”…”/&gt;
                  &lt;project id=”…” name=”…”/&gt;
                  &lt;/projects&gt;
               </div>
               
            </div>
            <div class="para e194">
               This ease of representation should not be confused with ease of usage. The Java type
               
               
               <div class="code e195">Map&lt;String, String&gt;</div> is tailored exactly for the purpose of working 
               with a string-to-string mapping. At least in situations where only key-based 
               access is desired (as opposed to querying the sets of keys or values), the map may
               be 
               considered simpler and more straightforward. After all, working with the XML 
               representation one would have to be aware of three paths: one leading from the 
               map root to the nodes representing map entries, one leading from the entry root 
               to the key and one leading from the entry root to the value. (In the example, 
               the paths would be “project”, “@id” and “@name”.) These paths would have to be 
               supplied either by convention (for example using standardized element names 
               “map” and “entry” and attribute names “key” and “value”), or by explicit meta 
               information. So the XML representation needs meta 
               information. Another aspect: the navigation from key to value can be 
               achieved in different ways, e.g. via XPath or via DOM methods. So the XML 
               representation is not unambiguous and explicit as to the appropriate usage 
               style. Apart from that, the map access is probably more efficient. Taking 
               these aspects together, one may conclude that XML’s wonderful ability to 
               represent almost any kind of information does not imply that it is always 
               the most appropriate format for using or processing that information. This is where
               
               “information units” come into play.
               
            </div>
            <div class="para e196">
               Before continuing, let's briefly compare the use of information units with data binding.
               
               Data binding replaces an XML structure by a one-to-one object 
               representation. This is like a “push” model: the XML comes first and dictates 
               the object representation, which is essentially a translation of the item tree 
               into an object tree. Information units, on the other hand, constitute 
               a “pull” model: what comes first is the desired representation of information; 
               it is assembled by 
               <div class="emphasis e197" role="ital">using</div> XDM items, rather 
               than echoing them.
               
            </div>
            <div class="para e198">
               <div class="emphasis e199" role="ital">
                  <div class="emphasis e200" role="bold">Modelling information units</div>
               </div>
            </div>
            <div class="para e201">
               An information unit encapsulates data. It should also contain information about the
               data, 
               as becomes obvious when one considers an element information item as a general prototype
               of information 
               units. An element has 
               
               <div class="itemizedlist e202">
                  <div class="listitem e203">
                     <div class="para e204">content, which is the data represented by its child nodes</div>
                  </div>
                  <div class="listitem e205">
                     <div class="para e206">a name, serving to distinguish it from other (sibling) elements</div>
                  </div>
                  <div class="listitem e207">
                     <div class="para e208">attributes, a set of named atomic values associated with the element</div>
                  </div>
                  <div class="listitem e209">
                     <div class="para e210">a type, which is a description of what kind of content to expect</div>
                  </div>
               </div>
               
            </div>
            <div class="para e211">
               XQJPLUS defines the following generic model of an information unit: it has
               
               <div class="itemizedlist e212">
                  <div class="listitem e213">
                     <div class="para e214">
                        
                        <div class="emphasis e215" role="ital">content</div>, which is an 
                        instance of a programming language's data type
                     </div>
                  </div>
                  <div class="listitem e216">
                     <div class="para e217">
                        a 
                        <div class="emphasis e218" role="ital">name</div>, serving to 
                        distinguish it from other, sibling units
                     </div>
                  </div>
                  <div class="listitem e219">
                     <div class="para e220">
                        
                        <div class="emphasis e221" role="ital">meta data</div>, which is 
                        a set of named string values associated with the unit
                     </div>
                  </div>
                  <div class="listitem e222">
                     <div class="para e223">
                        a 
                        <div class="emphasis e224" role="ital">type description</div> 
                        composed of three components:
                     </div>
                     <div class="itemizedlist e225">
                        <div class="listitem e226">
                           <div class="para e227">a physical type (QName)</div>
                        </div>
                        <div class="listitem e228">
                           <div class="para e229">a semantic type (QName)</div>
                        </div>
                        <div class="listitem e230">
                           <div class="para e231">an implementation type (a string)</div>
                        </div>
                     </div>
                  </div>
               </div>        
               
            </div>
            <div class="para e232">
               <div class="emphasis e233" role="ital">
                  <div class="emphasis e234" role="bold">content</div>
               </div>
            </div>
            <div class="para e235">
               XQJPLUS constrains the content to be a single Java object, or an array of Java objects.
               
            </div>
            <div class="para e236">
               <div class="emphasis e237" role="ital">
                  <div class="emphasis e238" role="bold">name</div>
               </div>
            </div>
            <div class="para e239">
               The name distinguishes an information unit among siblings. The concept of siblings
               relates to 
               a collection of units, which is not an inherent part of the model of an information
               unit. XQJPLUS 
               introduces a distinct concept – the info tray – to model collections of information
               units. So the 
               name of an information unit serves to distinguish it from other units within the same
               info tray. 
               Info trays will be discussed in 
               <div class="xref e240" linkend="Information-tray"></div>.
               
            </div>
            <div class="para e241">
               <div class="emphasis e242" role="ital">
                  <div class="emphasis e243" role="bold">meta data</div>
               </div>
            </div>
            <div class="para e244">
               Any information unit is associated with a set of named values, modelled as a 
               QName-to-string mapping.
               
            </div>
            <div class="para e245">
               <div class="emphasis e246" role="ital">
                  <div class="emphasis e247" role="bold">type description</div>
               </div>
            </div>
            <div class="para e248">
               The type description comprises three names. The contents are guaranteed to be an instance
               of the
               
               <div class="emphasis e249" role="ital">
                  <div class="emphasis e250" role="bold">physical type</div>
               </div>, which is the data
               type defined in the programming language. 
               Note that this may be an interface type or a base type of the data type that is used,
               
               in which case the underlying data type is only partially revealed by the physical
               type. The 
               underlying type is however fully revealed by the 
               <div class="emphasis e251" role="ital">
                  <div class="emphasis e252" role="bold">
                     implementation type.
                  </div>
               </div> 
               
            </div>
            <div class="para e253">
               The 
               <div class="emphasis e254" role="ital">
                  <div class="emphasis e255" role="bold">semantic type</div>
               </div> is a name meant to 
               identify what the content “means”. For example, while the physical type may specify
               the content to be a string-to-string
               map, the semantic type might identify the contents to be a mapping of project identifier
               to project name. To specify 
               this, a name like “{http://www.example.com/ns/proj}projectIdTable” might be invented.
               Note that the semantic type 
               only identifies by specifying a QName, it does not define or describe. XQJPLUS does
               not define the interpretation of the
               semantic type.
               
            </div>
            <div class="note e256">
               <div class="title e257">on physical type names</div>
               <div class="para e258">
                  XQJPLUS implements the integration of XQuery into Java – therefore the physical type
                  amounts to a Java type. 
                  However, the concept of an information unit and its properties is not tied to a specific
                  language, and XQJPLUS 
                  attempts to preserve the language-independence of the concept as far as possible.
                  Therefore the physical  
                  type of an information unit is not defined to be a Java type name, but a QName representing
                  an “abstract” type 
                  that might be implemented by different languages. For example, a string-to-string
                  map can be represented by 
                  many other languages, too. The physical type name is “map_string_to_string_object”,
                  while the corresponding 
                  Java type name is “
                  <div class="code e259">java.util.Map&lt;String,String&gt;</div>”. If, for example, a Perl implementation
                  of XQJPLUS existed, the corresponding Perl type name would probably be 
                  <div class="code e260">Hash</div>.
                  
               </div>
               <div class="para e261">
                  The physical type is defined to be a QName. XQJPLUS uses physical type names without
                  a namespace URI, 
                  suggesting this pattern: standard physical types are in no namespace; any custom physical
                  type 
                  (that is, physical types introduced by project-specific extensions of XQJPLUS) must
                  use a name 
                  with a namespace URI.
                  
               </div>
            </div>
         </div><a name="AvailablephysicaltypesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e262">
            <div class="title e263">Available physical types</div>
            <div class="para e264">
               As the results of a query execution are delivered as information units, a key question
               is: what 
               Java types are available? How is the concept of an information unit implemented in
               terms of Java 
               types? If we compare XQJPLUS with a restaurant where the XQuery developer is the cook
               and the 
               Java developer a potential guest, the range of available Java types is like the menu.
               Without 
               a glance at that range, the value of XQJPLUS cannot be assessed.
               
            </div>
            <div class="para e265">
               
               <div class="emphasis e266" role="ital">Note:</div> The preceding subsection introduced the notion of 
               physical types which are mapped to Java type names. In the current subsection the
               Java type names 
               are used, although the physical type is defined as a QName which is usually different
               
               from the Java type name.
               
            </div>
            <div class="para e267">
               As a starting point, consider the Java types which the underlying XQJ API delivers.
               
            </div>
            <div class="para e268">
               
               <div class="table e269">
                  <div class="caption e270">
                     <div class="para e271">
                        
                        <div class="emphasis e272" role="bold">
                           <div class="emphasis e273" role="ital">Summary of Java types delivered by XQJ.</div>
                        </div>
                        
                     </div>
                  </div>
                  <div class="metaBox e274"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e542').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e542" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='left'
                           </span><span class="metaAttribute">class='e274'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
                  <div class="metaBox e275"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e543').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e543" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='left'
                           </span><span class="metaAttribute">class='e275'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
                  <div class="thead e276">
                     <div class="tr e277" valign="top">
                        <div class="th e278" align="left" valign="top">category</div>
                        <div class="th e279" align="left" valign="top">types</div>
                     </div>
                  </div>
                  <div class="tbody e280">
                     <div class="tr e281" valign="top">
                        <div class="td e282">
                           <div class="emphasis e283" role="bold">atomic types</div>
                        </div>
                        <div class="td e284">Boolean, BigDecimal, BigInteger, Byte, Double, Duration, Float, Integer, Long, QName,
                           Short, String, XMLGregorianCalendar
                        </div>
                     </div>
                     <div class="tr e285" valign="top">
                        <div class="td e286">
                           <div class="emphasis e287" role="bold">node types</div>
                        </div>
                        <div class="td e288">Document, Element, Attr, Text, Comment, ProcessingInstruction</div>
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e289">
               This spectrum is included and extended by XQJPLUS.
               
               <div class="table e290">
                  <div class="caption e291">
                     <div class="para e292">
                        
                        <div class="emphasis e293" role="bold">
                           <div class="emphasis e294" role="ital">Summary of Java types delivered by XQJPLUS. 
                              Note that for each type a single object variant and an array variant is supported,
                              e.g. String and String[].
                           </div>
                        </div>
                        
                     </div>
                  </div>
                  <div class="metaBox e295"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e574').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e574" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='left'
                           </span><span class="metaAttribute">class='e295'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
                  <div class="metaBox e296"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e575').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e575" class="metaSource" style="display:none;">                
                        &lt;col<span class="metaAttribute">align='left'
                           </span><span class="metaAttribute">class='e296'
                           </span><span class="metaAttribute">span='1'
                           </span><span class="metaAttribute">valign='top'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
                  <div class="thead e297">
                     <div class="tr e298" valign="top">
                        <div class="th e299" align="left" valign="top">category</div>
                        <div class="th e300" align="left" valign="top">types</div>
                     </div>
                  </div>
                  <div class="tbody e301">
                     <div class="tr e302" valign="top">
                        <div class="td e303">
                           <div class="emphasis e304" role="bold">atomic types</div>
                        </div>
                        <div class="td e305">Boolean, BigDecimal, BigInteger, Byte, Double, Duration, Float, Integer, Long, QName,
                           Short, String, XMLGregorianCalendar
                        </div>
                     </div>
                     <div class="tr e306" valign="top">
                        <div class="td e307">
                           <div class="emphasis e308" role="bold">node types</div>
                        </div>
                        <div class="td e309">Document, Element, Attr, Text, Comment, ProcessingInstruction</div>
                     </div>
                     <div class="tr e310" valign="top">
                        <div class="td e311" valign="top">
                           <div class="emphasis e312" role="bold">maps</div>
                        </div>
                        <div class="td e313" valign="top">
                           
                           <div class="para e314">Map&lt;String,T&gt;, T=String, String[], Node, Node[], Boolean, Object, Object[]</div>
                           
                           <div class="para e315">Map&lt;String,Map&lt;String,T&gt;&gt;, T=String, String[], Node, Object</div>
                           
                        </div>
                     </div>
                     <div class="tr e316" valign="top">
                        <div class="td e317">
                           <div class="emphasis e318" role="bold">collections</div>
                        </div>
                        <div class="td e319">List&lt;String&gt;, List&lt;Node&gt;, Set&lt;String&gt;, Set&lt;Node&gt;, SortedSet&lt;String&gt;, Queue&lt;String&gt;</div>
                     </div>
                     <div class="tr e320" valign="top">
                        <div class="td e321">
                           <div class="emphasis e322" role="bold">miscellaneous</div>
                        </div>
                        <div class="td e323">java.util.Properties</div>
                     </div>
                     <div class="tr e324" valign="top">
                        <div class="td e325">
                           <div class="emphasis e326" role="bold">custom types</div>
                        </div>
                        <div class="td e327">(any type implementing LoadableFromXML)</div>
                     </div>
                     <div class="tr e328" valign="top">
                        <div class="td e329">
                           <div class="emphasis e330" role="bold">exceptions</div>
                        </div>
                        <div class="td e331">InfoTrayLoadingException</div>
                     </div>
                     <div class="tr e332" valign="top">
                        <div class="td e333">
                           <div class="emphasis e334" role="bold">info tray</div>
                        </div>
                        <div class="td e335">InfoTray</div>
                     </div>
                  </div>
               </div>
               
               
            </div>
            <div class="para e336">
               The extension compared to XQJ has four aspects:
               
               <div class="itemizedlist e337">
                  <div class="listitem e338">
                     <div class="para e339">XQJPLUS units can have either a single object type or an array type</div>
                  </div>
                  <div class="listitem e340">
                     <div class="para e341">XQJPLUS adds further type categories (maps, collections, …)</div>
                  </div>
                  <div class="listitem e342">
                     <div class="para e343">XQJPLUS units can have custom types (!)</div>
                  </div>
                  <div class="listitem e344">
                     <div class="para e345">XQJPLUS units can be nested (using InfoTray or InfoTray[] as physical types)</div>
                  </div>
               </div>
               
            </div>
            <div class="para e346">  
               
               <div class="emphasis e347" role="bold">
                  <div class="emphasis e348" role="ital">support for array types</div>
               </div>
               
            </div>
            <div class="para e349">
               The query result which XQJ delivers is one single, unstructured sequence of items.
               
               It is not possible to express any grouping of items into sub sequences. For example,
               
               if the result consists of 10 strings, there is no way to communicate explicitly that
               
               the first six strings should be viewed as one array, followed by a single item, 
               followed by an array of three items. In XQJPLUS, on the other hand, the result could
               
               be delivered as three units, two of which are arrays.
               
            </div>
            <div class="para e350">
               
               <div class="emphasis e351" role="bold">
                  <div class="emphasis e352" role="ital">added categories</div>
               </div>
               
            </div>
            <div class="para e353">
               
               <div class="emphasis e354" role="ital">Map types</div> are thought to be especially useful, 
               as XML evaluations often yield information which can be modelled as a map. The map
               
               keys are strings, the map values can be strings, booleans, nodes or custom objects
               
               (see below). Maps can be simple or nested. 
               <div class="emphasis e355" role="ital">Collection types</div> 
               are probably less important than maps, due to the general support for array 
               types. The type 
               <div class="emphasis e356" role="ital">
                  <div class="code e357">java.util.Properties</div>
               </div> is 
               currently the only type of category "miscellaneous", but the addition of other types
               is 
               intended. Admitting 
               <div class="emphasis e358" role="ital">exception objects</div> as information 
               units enables query authors to communicate error conditions in a unified way.
               
            </div>
            <div class="para e359">
               
               <div class="emphasis e360" role="bold">
                  <div class="emphasis e361" role="ital">custom types</div>
               </div>
               
            </div>
            <div class="para e362">
               Information units can be custom type objects. Custom types are (presently) required
               to 
               implement the interface 
               <div class="code e363">LoadableFromXML</div>, which is part of the main 
               package of XQJPLUS. It contains a single method 
               <div class="code e364">loadFromXML</div> which 
               loads an object with data received as an XML node. The construction of custom type
               
               objects will be discussed in a later section.
               
            </div>
            <div class="para e365">
               
               <div class="emphasis e366" role="bold">
                  <div class="emphasis e367" role="ital">nested units</div>
               </div>
               
            </div>
            <div class="para e368">
               An information unit may be an 
               <div class="code e369">InfoTray</div> object, which represents 
               a collection of named information units. (See 
               
               <div class="xref e370" linkend="Information-tray"></div> for a discussion of info trays.) This amounts 
               to supporting a type of unit which is a tree consisting of 
               <div class="code e371">InfoTray</div>
               objects as internal nodes and non-
               <div class="code e372">InfoTray</div> objects as leaf nodes.
               In fact, a query result as a whole can be regarded as such a tree. Note that
               the tree of info trays and non-tray leaves must not be confused with an
               XML tree. A leaf of the latter contains an atomic value; a leaf of the
               former may, for example, contain an XML document, or a mapping of strings to 
               XML documents.
               
            </div>
            <div class="para e373">
               Information units are retrieved from an info tray by calling a specific getter method
               
               which has the unit’s physical type as return type. See 
               <div class="xref e374" linkend="read-access"></div> 
               for more information about API access to information units.
               
            </div>
         </div><a name="TheassemblyprocessbasicsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e375" xml:id="The-assembly-process-basics">
            <div class="title e376">The assembly process - basics</div>
            <div class="para e377">
               After deciding which physical types XQJPLUS must support, we can investigate their
               assembly.
               The assembly is wholly controlled by the XQuery code. XQuery 
               thus provides both the 
               <div class="emphasis e378" role="ital">information content</div> and the 
               <div class="emphasis e379" role="ital">control information</div> 
               required to transform this content into a collection of information units.
               
            </div>
            <div class="para e380">
               Let us look at an example. The following XQuery snippet produces two result items
               – a 
               
               <div class="emphasis e381" role="ital">control item</div> and a 
               <div class="emphasis e382" role="ital">data item</div> - 
               which together will command the assembly of an information unit consisting of a string-to-string
               map:
               
               <div class="programlisting e383" xml:space="preserve">&lt;xqjp:part name="activityTimes" 
                  type="map_string_to_string_object"
                  entryPath="activity"
                  keyPath="@id"
                  valuePath="@time"
                  sematype="usgs:activityTimes" /&gt;,
                  
                  &lt;activities&gt;{
                  for $a in //Activity/ActivityDescription return
                  &lt;activity id="{$a/ActivityIdentifier}" 
                  time="{concat($a/ActivityStartDate, 'T', $a/ActivityStartTime/Time)}" /&gt;
                  }&lt;/activities&gt;
               </div>
               
            </div>
            <div class="para e384">
               The control item 
               <div class="code e385">&lt;xqjp:part&gt;</div> announces 
               the construction of an information unit with name “activityTimes” and physical type
               
               “map_string_to_string_object”. This type name corresponds to the Java type 
               
               <div class="code e386">Map&lt;String,String&gt;</div>. The data to be written into the map follow 
               in the next result item, which is a 
               <div class="emphasis e387" role="ital">data item</div>, 
               rather than a control item. 
               The assembly of the information unit (a map object) from the contents of the data
               item (an element node) is 
               configured by the control item’s attributes “entryPath”, “keyPath” and “valuePath”.
               The values of these attributes 
               are interpreted as XPath expressions. The entry path is applied to the data item’s
               root and leads to the nodes 
               representing the map entries. The other paths are applied to these nodes, one at a
               time, yielding a map entry’s key 
               and value, respectively.
               
            </div>
            <div class="para e388">
               Another example illustrates the mapping of a result item sequence to several information
               units. The query generates 
               three information units, named “projectList”, “organizationProfiles” and “countActivities".
               To achieve this, it produces 
               a stream of data items with control items interspersed.
               
            </div>
            <div class="para e389">
               
               <div class="programlisting e390" xml:space="preserve">&lt;xqjp:part name=”projectList” 
                  type=”strings”/&gt;, 
                  distinct-values(//ProjectIdentifier),
                  
                  &lt;xqjp:part name=”organizationProfiles” 
                  type=”nodes”/&gt;
                  &lt;orgProfile&gt;…&lt;/orgProfile&gt;,
                  &lt;orgProfile&gt;…&lt;/orgProfile&gt;,
                  &lt;orgProfile&gt;…&lt;/orgProfile&gt;,
                  
                  &lt;xqjp:part name=”countActivities” type=”integer”&gt;,
                  count(//ActivityIdentifier)
               </div>
               
            </div>
            <div class="para e391">
               The examples illustrate the basic rules of the assembly process. 
               
            </div>
            <div class="para e392">
               <div class="emphasis e393" role="ital">
                  <div class="emphasis e394" role="bold">Rule #1: control information is placed in top-level control items</div>
               </div>
            </div>
            <div class="para e395">
               Control information is contained by top-level control items. Each result item is either
               a data item or a control item. 
               Data and control information is never mixed within result items.
               
            </div>
            <div class="para e396">
               <div class="emphasis e397" role="ital">
                  <div class="emphasis e398" role="bold">Rule #2: special control items define information units</div>
               </div>
            </div>
            <div class="para e399">
               Each information unit created by the query is defined by a control item (
               <div class="code e400">&lt;xqjp:part&gt;</div> element) which specifies 
               all unit properties: name, meta information, type (physical, semantic, implementation
               types). Exceptions to this 
               rule are units defined to be an info tray. The assembly of such complex units is discussed
               in a special section.
               
            </div>
            <div class="para e401">
               <div class="emphasis e402" role="ital">
                  <div class="emphasis e403" role="bold">Rule #3: the source data belonging to an information unit follow the unit’s definition</div>
               </div>
            </div>
            <div class="para e404">
               The source data belonging to a unit are given by all the result items which immediately
               
               
               <div class="emphasis e405" role="ital">follow</div> the unit-defining control item and come before the 
               next control item. So the basic structure of a query result generating an 
               info tray looks like this:
               
               <div class="programlisting e406" xml:space="preserve">...
                  &lt;xqjp:part name="x" type="..."/&gt;,
                  - source data items for unit "x",
                  
                  &lt;xqjp:part name="y" type="..."/&gt;,
                  - source data items for unit "y",
                  
                  &lt;xqjp:part name="z" type="..."/&gt;,
                  - source data items for unit "z",
                  ...
               </div>
               
            </div>
            <div class="para e407">
               Two exceptions to the rule are units which are themselves info trays and unit definitions
               
               which reference control variables (see next section).
               
            </div>
            <div class="para e408">
               
               <div class="emphasis e409" role="ital">Note:</div> For a comprehensive list of all control items
               defined by XQJPLUS, see 
               <div class="xref e410" linkend="The-control-items"></div>.
               
            </div>
         </div><a name="TheassemblyprocessadvancedANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e411" xml:id="The-assembly-process-advanced">
            <div class="title e412">The assembly process - advanced</div>
            <div class="para e413">
               <div class="emphasis e414" role="ital">
                  <div class="emphasis e415" role="bold">Namespace context</div>
               </div>
            </div>
            <div class="para e416">
               Unit assembly is often controlled by XPath expressions. The namespace context in which
               to evaluate those expressions is created by special control items. Example:
               
               <div class="programlisting e417" xml:space="preserve">
                  &lt;xqjp:setNamespaceContext&gt;
                  &lt;xqjp:binding prefix="data" uri="http://qwwebservices.usgs.gov/schemas/WQX-Outbound/2_0/"/&gt;
                  &lt;xqjp:binding prefix="eval" uri="http://www.bits-ac.com/usgs"/&gt;
                  &lt;/xqjp:setNamespaceContext&gt;
               </div>
               
            </div>
            <div class="para e418">
               <div class="emphasis e419" role="ital">
                  <div class="emphasis e420" role="bold">Control variables</div>
               </div>
            </div>
            <div class="para e421">
               Since the data items of the query result are the source data for 
               unit assembly, you may want to 
               <div class="emphasis e422" role="ital">
                  <div class="emphasis e423" role="bold">reuse
                     
                  </div>
               </div> source data in the assembly of different units. A simple example 
               is a query which produces two string-to-string maps, where the second interchanges
               the 
               keys and values used by the first – for example a “code2text” map and a “text2code”
               map. To 
               achieve this without repeating the source data one may use control variables. A control
               
               variable is declared by a special control item (
               <div class="code e424">&lt;xqjp:setVar&gt;</div>), which specifies 
               a name and minimal type information (atomic or node, single value or sequence). During
               the 
               assembly process, all data items following the declaration and preceding the next
               control 
               item are bound to a variable of the declared name. Thereafter, they can be referenced
               
               by unit-defining control items (
               <div class="code e425">&lt;xqjp:part&gt;</div>) via a special attribute (“source”). 
               The following XQuery code illustrates this possibility by generating two maps backed
               by 
               the same data item. Map “activity2time” is string-to-string, whereas the inverse map
               
               “time2activity” is string-to-string[]. Both maps are assembled from the contents of
               
               control variable “activityDates”.
               
            </div>
            <div class="para e426">
               
               <div class="programlisting e427" xml:space="preserve">(: set variable "activityDates" 
                  : ============================ :)
                  &lt;xqjp:setVar name="activityDates" vtype="node" /&gt;,
                  
                  &lt;activityDates&gt;{
                  for $date in distinct-values(//ActivityStartDate)
                  let $activities := //ActivityStartDate[. eq $date]/../ActivityIdentifier
                  return 
                  &lt;activityDate date="{$date}"&gt;{$activities}&lt;/activityDate&gt;
                  }&lt;/activityDates&gt;,
                  
                  (: define information units 
                  : ======================== :)
                  &lt;xqjp:part name="time2activities" 
                  type="map_string_to_strings_object" 
                  sematype="wq:timeActivities"
                  impltype="java.util.TreeMap"
                  source="$activityDates"
                  entryPath="activityDate"
                  keyPath="@date"
                  valuePath="ActivityIdentifier" /&gt;,
                  &lt;xqjp:part name="activity2time" 
                  type="map_string_to_string_object" 
                  sematype="wq:activityTimes"
                  source="$activityDates"
                  entryPath="activityDate/ActivityIdentifier"
                  keyPath="."
                  valuePath="../@date" /&gt;
               </div>        
               
            </div>
            <div class="para e428">
               <div class="emphasis e429" role="ital">
                  <div class="emphasis e430" role="bold">Information units that are themselves trays</div>
               </div>
            </div>
            <div class="para e431">
               As an information unit may itself be an info tray, the result item stream must somehow
               
               delimit the begin and end of such an embedded tray. To do so, use a 
               <div class="code e432">&lt;xqjp:complexPartBegin&gt;
                  
               </div> and a 
               <div class="code e433">&lt;xqjp:complexPartEnd&gt;</div> control item. As an embedded tray is an 
               information unit, the begin marker also plays the role of a unit-defining item. It
               must 
               specify the unit name and may specify a semantic type and meta data, just like any
               other unit-defining item.
               
            </div>
         </div><a name="TheassemblyprocesshowXQueryconstructsJavacustomobjectsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e434">
            <div class="title e435">The assembly process - how XQuery constructs Java custom objects</div>
            <div class="para e436">
               As mentioned before, an information unit may contain custom objects, that is, objects
               of a type which is not a Java 
               standard type. Here are a few physical types involving custom objects:
               
               <div class="variablelist e437">
                  <div class="varlistentry e438">
                     <div class="term e439">custom_object</div>
                     <div class="listitem e440">
                        <div class="para e441">single custom object</div>
                     </div>
                  </div>
                  <div class="varlistentry e442">
                     <div class="term e443">custom_objects</div>
                     <div class="listitem e444">
                        <div class="para e445">an array of custom objects</div>
                     </div>
                  </div>
                  <div class="varlistentry e446">
                     <div class="term e447">map_string_to_custom_object_object</div>
                     <div class="listitem e448">
                        <div class="para e449">a string-to-customObject map</div>
                     </div>
                  </div>
                  <div class="varlistentry e450">
                     <div class="term e451">map_string_to_custom_object_objects</div>
                     <div class="listitem e452">
                        <div class="para e453">an array of string-to-customObject maps</div>
                     </div>
                  </div>
                  <div class="varlistentry e454">
                     <div class="term e455">nested_map_string_to_custom_object_object</div>
                     <div class="listitem e456">
                        <div class="para e457">a string-to-(string-to-customObject) map</div>
                     </div>
                  </div>
               </div>        
               
            </div>
            <div class="para e458">
               Presently, XQJPLUS allows only those types as custom types which implement the interface
               
               
               <div class="code e459">LoadableFromXML</div>. This interface is defined in the main package of 
               XQJPLUS and contains a single method signature:
               
               <div class="programlisting e460" xml:space="preserve">void loadFromXML(Node source);</div>        
               
            </div>
            <div class="para e461">
               An underlying assumption is that the objects can be built in a two-step way, first
               instantiating them using a 
               parameter-less default constructor, then calling the load method. Later versions of
               XQJPLUS may support 
               other categories of custom types which can be constructed using different interfaces.
               
            </div>
            <div class="para e462">
               The actual custom type is a special construction attribute ( “customType”). This construction
               attribute is 
               always required if the physical type involves custom objects. Example:
               
               <div class="programlisting e463" xml:space="preserve">&lt;xqjp:part name="placeObjects" 
                  type="custom_objects"
                  customType="com.bits_ac.xqjplus.appl.Place"
                  /&gt;,
               </div>        
               
            </div>
            <div class="para e464">
               The query code has to provide the data source in the usual way, that is, either by
               subsequent data items or 
               using the “source” attribute. The XML nodes to be used for loading the custom objects
               must of course provide 
               the XML data structure expected by the particular custom type’s “loadFromXML” method.
               
            </div>
         </div><a name="MetadataANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e465">
            <div class="title e466">Meta data</div>
            <div class="para e467">
               An information unit is associated with meta data, which are a set of named values.
               The names are QNames, and
               the values are strings. The meta data fall into two groups: 
               
               <div class="itemizedlist e468">
                  <div class="listitem e469">
                     <div class="para e470">
                        <div class="emphasis e471" role="ital">standard meta data</div> have XQJPLUS-defined semantics
                     </div>
                  </div>
                  <div class="listitem e472">
                     <div class="para e473">
                        <div class="emphasis e474" role="ital">custom meta data</div> have custom semantics
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e475">
               Most standard meta data are automatically assigned by XQJPLUS. Custom meta data are
               always assigned by the 
               unit-defining control item.
               
            </div>
            <div class="para e476">
               <div class="emphasis e477" role="ital">
                  <div class="emphasis e478" role="bold">Custom meta data</div>
               </div>
            </div>
            <div class="para e479">
               Associating a unit with custom meta data is straightforward: they are specified either
               as attributes or as child 
               elements of the unit-defining control item (
               <div class="code e480">&lt;xqjp:part&gt;</div> or 
               
               <div class="code e481">&lt;xqjp:complexPartBegin&gt;</div>). The name of a meta data item is the respective attribute’s or 
               element’s name; the value is its string value. If a meta data item is specified by
               an attribute, the 
               attribute name must have a non-empty namespace URI. If a meta data item is specified
               as a child element, the 
               element name may or may not be in a namespace.
               
            </div>
            <div class="para e482">
               The following example demonstrates the use of both, attributes and child elements:
               
               <div class="programlisting e483" xml:space="preserve">&lt;xqjp:part name="startDates" 
                  type="string_sortedset_object" 
                  sematype="usgs:activityStartTimes"
                  bi:cr="{current-date()}" &gt;
                  &lt;bi:min&gt;{min($startDates)}&lt;/bi:min&gt;
                  &lt;bi:max&gt;{max($startDates)}&lt;/bi:max&gt;
                  &lt;meta:documentation&gt;The activity start dates, as reported by the NWIS result 
                  service.&lt;/meta:documentation&gt;
                  &lt;/xqjp:part&gt;,)
               </div>        
               
            </div>
            <div class="para e484">
               The definition of unit “startDates” specifies three custom meta data items (“cr”,
               “min” and “max”) and a 
               standard meta data item “documentation”.
               
            </div>
            <div class="para e485">
               <div class="emphasis e486" role="ital">
                  <div class="emphasis e487" role="bold">Standard meta data</div>
               </div>
            </div>
            <div class="para e488">
               Standard meta data have a name in the namespace “http://www.bits-ac.com/xqjplus/meta”.
               With the exception of 
               “documentation”, which is provided by the query in the same way as custom meta data,
               standard meta data are 
               automatically assigned by XQJPLUS when transforming a query result into an info tray.
               Currently, there are four 
               kinds of automatically assigned standard meta data: “length” and the three type specifications
               “ptype”, “stype”, 
               “itype”.
               
            </div>
            <div class="para e489">
               <div class="emphasis e490" role="ital">
                  <div class="emphasis e491" role="bold">Standard meta data item “length”</div>
               </div>
            </div>
            <div class="para e492">
               It contains the number of objects contained by the unit: if the unit has an array
               type, it is the number of array items, 
               otherwise it is “1” or “0” depending on whether the unit actually contains data or
               is empty.
               
            </div>
            <div class="para e493">
               <div class="emphasis e494" role="ital">
                  <div class="emphasis e495" role="bold">Standard meta data “ptype”, “stype”, “itype”</div>
               </div>
            </div>
            <div class="para e496">
               They contain the names of physical type, semantic type and implementation type, respectively.
               So the type information 
               is available as meta data.
               
            </div>
            <div class="para e497">
               
               <div class="emphasis e498" role="ital">
                  <div class="emphasis e499" role="bold">Note.</div>
               </div> The implementation type can be 
               specified by the unit-defining control item, using attribute “impltype”. Strictly
               speaking, this is not meta data 
               information, but assembly control information. Therefore the value of “itype” may
               depend on the query text, 
               although it is automatically assigned.
               
            </div>
         </div>
      </div><a name="Informationtray(infotray)ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e500" xml:id="Information-tray">
         <div class="title e501">Information tray (info tray)</div>
         <div class="para e502">
            When an information unit is created, it is placed on an information tray (info tray).
            
            This section introduces info trays. After defining the concept, the information flow
            into and out of the tray is described: 
            the loading of a tray with information units, and the reading of units contained by
            the tray. The final subsection 
            introduces tray-level meta data.
            
         </div><a name="ConceptANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e503">
            <div class="title e504">Concept</div>
            <div class="para e505">
               An info tray is a collection of information units. Viewed as a component, its only
               properties are 
               
               <div class="itemizedlist e506">
                  <div class="listitem e507">
                     <div class="para e508">
                        a partially ordered list of information units
                        
                     </div>
                  </div>
                  <div class="listitem e509">
                     <div class="para e510">
                        tray-level meta data
                        
                     </div>
                  </div>
                  <div class="listitem e511">
                     <div class="para e512">
                        an optional resource ID
                        
                     </div>
                  </div>
               </div>
               The list of 
               <div class="emphasis e513" role="ital">information units</div> 
               is partially ordered, as the order of two information units is irrelevant if they
               have 
               different names, but relevant if they have the same name. 
               <div class="emphasis e514" role="ital">Meta data</div>
               are a set of named string values providing information about the tray.
               The 
               <div class="emphasis e515" role="ital">resource ID</div> is a QName identifying the tray instance 
               within a set of tray instances.  
               
            </div>
            <div class="para e516">
               The info tray concept is independent of the mechanisms of loading the tray. XQJPLUS
               represents the
               general concept of an info tray by a class 
               <div class="code e517">InfoTray</div>; and it models the loading from 
               an XQuery result by providing a subclass of 
               <div class="code e518">InfoTray</div> implementing such a loading method. Other 
               subclasses of 
               <div class="code e519">InfoTray</div> might be developed which load the tray from, say, an XSLT or XProc result, 
               or a set of delimited files or yet other kinds of data sources. Note that the read
               access methods are all harboured 
               by the 
               <div class="code e520">InfoTray</div> level, as they reference only the assembled information units, never any information
               
               about the assembly process. In consequence, once the tray is loaded the actual loading
               mechanism is 
               invisible from the Java perspective and may be replaced at any time. 
               
            </div>
            <div class="para e521">
               The interface of an info tray contains 
               
               <div class="itemizedlist e522">
                  <div class="listitem e523">
                     <div class="para e524">
                        a method for 
                        <div class="emphasis e525" role="ital">loading</div> the information units from a data source
                        
                     </div>
                  </div>
                  <div class="listitem e526">
                     <div class="para e527">
                        methods for 
                        <div class="emphasis e528" role="ital">adding</div> information units
                        
                     </div>
                  </div>
                  <div class="listitem e529">
                     <div class="para e530">
                        methods for 
                        <div class="emphasis e531" role="ital">reading</div> information units
                        
                     </div>
                  </div>
                  <div class="listitem e532">
                     <div class="para e533">a method for 
                        <div class="emphasis e534" role="ital">validating</div> the info tray against a tray schema
                     </div>
                  </div>
               </div>
               The validation of an info tray will be dealt with in 
               <div class="xref e535" linkend="Tray-validation"></div>.
               
            </div>
         </div><a name="TheloadprocessANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e536">
            <div class="title e537">The load process</div>
            <div class="para e538">
               An info tray is loaded by adding information units one by one. The intended pattern
               is to let subclasses of
               
               <div class="code e539">InfoTray</div> define a data source-specific load method which assembles the units in a source-specific
               
               way and adds them to the tray by calling the base class’s 
               <div class="code e540">add</div> methods.
               
            </div>
            <div class="para e541">
               <div class="emphasis e542" role="ital">
                  <div class="emphasis e543" role="bold">
                     <div class="code e544">add</div> methods
                  </div>
               </div>
            </div>
            <div class="para e545">
               The source-specific loading is made as simple as possible by arming 
               <div class="code e546">InfoTray</div> with a
               comprehensive set of source-independent 
               <div class="code e547">add</div> methods. These methods receive a unit's completely assembled 
               data content, along with meta data and unit name. For each supported physical type,
               there is a 
               special 
               <div class="code e548">add</div> method. Some examples:
               
               <div class="programlisting e549" xml:space="preserve">void addString(String partName, 
                  String content, 
                  Map&lt;String,String&gt; meta);
                  
                  void addStrings(String partName, 
                  String[] content, 
                  Map&lt;String,String&gt; meta);
                  
                  void addMapString2Node(String partName, 
                  Map&lt;String,Node&gt; content, 
                  Map&lt;String,String&gt; meta);
               </div>
               
               <div class="emphasis e550" role="ital">
                  <div class="emphasis e551" role="bold">Note</div>
               </div>: the semantic type is communicated 
               as a meta data item, while the physical type is implied by the choice of the method
               and the implementation type is 
               determined by the actual content.
               
            </div>
            <div class="para e552">
               <div class="emphasis e553" role="ital">
                  <div class="emphasis e554" role="bold">load methods</div>
               </div>
            </div>
            <div class="para e555">
               Source-dependent load methods are defined by subclasses of 
               <div class="code e556">InfoTray</div>. XQJPLUS provides 
               the subclass 
               <div class="code e557">XQueryResponse</div>, defining a method
               
               <div class="programlisting e558" xml:space="preserve">void loadXQuerySequence(XQSequence seq);</div>
               The method iterates over the result sequence, assembling information units as defined
               by the control items 
               and adding them to the tray by calling the base class’s 
               <div class="code e559">add</div> methods.
               
            </div>
         </div><a name="ReadaccessANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e560" xml:id="read-access">
            <div class="title e561">Read access</div>
            <div class="para e562">
               The info tray offers convenient read access to its information units. Access is always
               to one unit at a time. 
               The access to a unit can be grouped as follows:
               
               <div class="itemizedlist e563">
                  <div class="listitem e564">
                     <div class="para e565">reading the unit contents</div>
                  </div>
                  <div class="listitem e566">
                     <div class="para e567">reading the unit type information</div>
                  </div>
                  <div class="listitem e568">
                     <div class="para e569">reading the unit meta data</div>
                  </div>
               </div>
               
            </div>
            <div class="para e570">
               The unit is usually specified by name – see below for details.
               
            </div>
            <div class="para e571">
               <div class="emphasis e572" role="ital">
                  <div class="emphasis e573" role="bold">reading the unit contents</div>
               </div>
            </div>
            <div class="para e574">
               For each supported physical type of information units, there is an access method returning
               an instance 
               of the physical type and accepting as input a unit name. (Use Clark notation for names
               in a namespace.)
               When there are several units with that name, the first is delivered. Examples for
               methods reading unit contents:
               
               <div class="programlisting e575" xml:space="preserve">
                  String        getString(String name);
                  String[]      getStrings(String name);
                  Node          getNode(String name);
                  Node[]        getNodes(String name);
                  Properties    getPropertiesObject(String name);
                  Properties[]  getPropertiesObjects(String name);
                  Object        getCustomObject(String name);
                  InfoTray      getInfoTray(String name);
                  Map&lt;String,String&gt;     getMapString2StringObject(String name);
                  Map&lt;String,String[]&gt;   getMapString2StringsObject(String name);
                  Map&lt;String,String[]&gt;[] getMapString2StringsObjects(String name);
               </div>
               
            </div>
            <div class="para e576">
               A tray may indeed contain several units with the same name. In order to retrieve them,
               first 
               obtain a cursor and then use it to iterate over those units. The code can rely on
               all units with 
               a common name to have the same physical type, as a violation of this constraint would
               be detected during tray 
               loading and generate an exception. In the following example code, the common physical
               type is a single node:
               
               <div class="programlisting e577" xml:space="preserve">
                  InfoTrayCursor cursor = getCursorByPartName("laboratory");
                  while (cursor.hasNext()) {
                  Node currentUnit = getNode(cursor.next());
                  // process the contents …
                  }
               </div>
               
            </div>
            <div class="para e578">
               This pattern is based on the fact that for each physical type there is a second read
               method
               expecting a unit index as input, rather than a unit name. The unit index is a non-negative
               number
               identifying the unit within the tray independently of its name. 
               
            </div>
            <div class="para e579">
               
               <div class="emphasis e580" role="ital">Note:</div> When using a unit name repeatedly, each unit with that name 
               has its own meta data, just like any other unit.
               
            </div>
            <div class="para e581">
               <div class="emphasis e582" role="ital">
                  <div class="emphasis e583" role="bold">reading the unit type information</div>
               </div>
            </div>
            <div class="para e584">
               The info tray offers separate methods for reading a unit’s physical, semantic or implementation
               type. Only name-based 
               access is offered, as the type information must not vary between units which have
               the same name.
               
            </div>
            <div class="para e585">
               <div class="emphasis e586" role="ital">
                  <div class="emphasis e587" role="bold">reading the unit meta data</div>
               </div>
            </div>
            <div class="para e588">
               Unit meta data can be retrieved on bloc as a 
               <div class="code e589">Map&lt;String,String&gt;</div>, on bloc as a 
               
               <div class="code e590">Map&lt;QName,String&gt;</div> or itemwise, specifying the meta data item name as a QName 
               or a Clark string. As when reading unit content, the unit is identified either by
               name or by passing a cursor.
               
            </div>
            <div class="para e591">
               <div class="emphasis e592" role="ital">
                  <div class="emphasis e593" role="bold">reading tray meta data</div>
               </div>
            </div>
            <div class="para e594">
               Tray meta data are retrieved in a similar way as unit meta data. 
               
            </div>
         </div><a name="MetadataANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e595">
            <div class="title e596">Meta data</div>
            <div class="para e597">
               Not only the individual information units are associated with meta data, but also
               the info tray as a whole (and  
               implicitly, also any info shape generated for the info tray). Standard meta data are
               distinguished from custom 
               meta data.
               
            </div>
            <div class="para e598">
               <div class="emphasis e599" role="ital">
                  <div class="emphasis e600" role="bold">Custom meta data</div>
               </div>
            </div>
            <div class="para e601">
               Tray-level custom meta data are specified via a dedicated control item (
               <div class="code e602">&lt;xqjp:trayMeta&gt;</div>). The mapping of attributes and 
               child elements to meta data items is the same as with unit-related meta data.
               
            </div>
            <div class="para e603">
               <div class="emphasis e604" role="ital">
                  <div class="emphasis e605" role="bold">Standard meta data</div>
               </div>
            </div>
            <div class="para e606">
               The namespace of tray-level standard meta data is the same as of unit-level ones.
               Two standard meta data items can be 
               specified by the query – “documentation” and “name”. The latter is meant to identify
               the specific type of a tray created by 
               a specific query, comparable to the name of an XML document’s root element. Other
               standard meta data items are 
               assigned automatically. These are:
               
               <div class="itemizedlist e607">
                  <div class="listitem e608">
                     <div class="para e609">“length” specifies the number of top-level units</div>
                  </div>
                  <div class="listitem e610">
                     <div class="para e611">“unitNames” is the sorted set of top-level unit names, rendered as a white-space separated
                        list
                     </div>
                  </div>
               </div>
               
            </div>
         </div>
      </div><a name="TrayschemaANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e612" xml:id="Tray-schema">
         <div class="title e613">Tray schema</div>
         <div class="para e614">
            Like an XML document, an info tray has a structure that can be described independently
            of the actual data 
            content. XQJPLUS supplies a simple XML vocabulary that can be used to specify a tray
            schema which may 
            (a) constrain the tray structure, (b) control the generation of an 
            <div class="emphasis e615" role="bold">
               
               <div class="emphasis e616" role="ital">info shape</div>
            </div>, which is Java code offering enhanced 
            safety and convenience of data access. An info shape consists of a Java class
            plus interfaces representing an info tray with a specific structure.
            
         </div><a name="PurposeANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e617">
            <div class="title e618">Purpose</div>
            <div class="para e619">
               There are three main purposes for creating a tray schema:
               
               <div class="itemizedlist e620">
                  <div class="listitem e621">
                     <div class="para e622">to facilitate the cooperation between Java developer and XQuery developer</div>
                  </div>
                  <div class="listitem e623">
                     <div class="para e624">to validate a tray instance, e.g. before starting to use it</div>
                  </div>
                  <div class="listitem e625">
                     <div class="para e626">to generate an info shape</div>
                  </div>
               </div>
               
            </div>
            <div class="para e627">
               <div class="emphasis e628" role="ital">
                  <div class="emphasis e629" role="bold">Constraining the tray structure</div>
               </div>
            </div>
            <div class="para e630">
               To constrain the tray structure, the following kinds of information can be expressed:
               
               <div class="itemizedlist e631">
                  <div class="listitem e632">
                     <div class="para e633">the names and types of contained information units</div>
                  </div>
                  <div class="listitem e634">
                     <div class="para e635">cardinality constraints referring to the repeated use of unit names</div>
                  </div>
                  <div class="listitem e636">
                     <div class="para e637">cardinality constraints referring to the contents of units</div>
                  </div>
                  <div class="listitem e638">
                     <div class="para e639">meta data constraints (tray-level and unit-level meta data)</div>
                  </div>
               </div>
               
            </div>
            <div class="para e640">
               <div class="emphasis e641" role="ital">
                  <div class="emphasis e642" role="bold">Controlling the Java binding</div>
               </div>
            </div>
            <div class="para e643">
               If the tray is used as input for generating Java code (or other language code), the
               tray schema must contain further 
               information controlling the language binding. In case of Java code, this consists
               of class and interface names, 
               as well as a distribution of the unit names over the supporting interfaces.
               
            </div>
         </div><a name="AsimpleexampleANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e644" xml:id="Tray-schema-example">
            <div class="title e645">A simple example</div>
            <div class="para e646">
               Here is a minimal schema from which the info shape demonstrated in 
               
               <div class="xref e647" linkend="Obtaining-via-info-shape"></div> was generated:
               
               <div class="programlisting e648" xml:space="preserve">
                  &lt;ts:traySchema xmlns:ts="http://www.bits-ac.com/xqjplus/traySchema"
                  xmlns:java="http://www.bits-ac.com/xqjplus/traySchema/java-binding"&gt;
                  
                  &lt;!-- ============== --&gt;
                  &lt;!-- tray structure --&gt;
                  &lt;!-- ============== --&gt;
                  
                  &lt;ts:tray&gt;
                  &lt;ts:part name="fractionResults" type="nested_map_string_to_strings_object" /&gt;
                  &lt;ts:part name="activityResults" type="map_string_to_custom_objects_object" 
                  customType="com.bits_ac.xqjplus.appl.UsgsResult" /&gt;
                  &lt;ts:part name="projectIds" type="string_sortedset_object" /&gt;      
                  &lt;ts:part name="projectActivities" type="nested_map_string_to_string_object" /&gt;
                  &lt;/ts:tray&gt;
                  
                  &lt;!-- ============ --&gt;
                  &lt;!-- Java binding --&gt;
                  &lt;!-- ============ --&gt;
                  
                  &lt;!-- implementation class --&gt;
                  &lt;java:trayBinding className="ResultReport" 
                  package="com.bits_ac.xqjplus.appl" &gt;
                  
                  &lt;!-- interfaces --&gt;
                  &lt;java:iface name="ResultData" package="com.bits_ac.xqjplus.appl"&gt;
                  &lt;java:part ref="fractionResults"/&gt;
                  &lt;java:part ref="activityResults"/&gt;
                  &lt;/java:iface&gt;
                  
                  &lt;java:iface name="ProjectData" package="com.bits_ac.xqjplus.appl"&gt;
                  &lt;java:part ref="projectIds"/&gt;
                  &lt;java:part ref="projectActivities"/&gt;
                  &lt;/java:iface&gt;
                  &lt;/java:trayBinding&gt;
                  
                  &lt;!-- mapping customType =&gt; className --&gt;
                  &lt;java:customTypeBindings&gt;
                  &lt;java:customTypeBinding customType=".*" className="$1"/&gt;
                  &lt;/java:customTypeBindings&gt;
                  &lt;/ts:traySchema&gt;
               </div>
               
            </div>
         </div><a name="ConstrainingmetadataANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e649">
            <div class="title e650">Constraining meta data</div>
            <div class="para e651">
               The structure part of the tray schema shown above is minimal, as it does not constrain
               the 
               use of meta data. Meta data can be constrained by
               
               <div class="itemizedlist e652">
                  <div class="listitem e653">
                     <div class="para e654">stating names of mandatory meta data</div>
                  </div>
                  <div class="listitem e655">
                     <div class="para e656">constraining the values of meta data items</div>
                  </div>
                  <div class="listitem e657">
                     <div class="para e658">excluding the use of other meta data names apart from the schema-specified names</div>
                  </div>
               </div>
               
            </div>
            <div class="para e659">
               The following example adds more constraints:
               
               <div class="programlisting e660" xml:space="preserve">&lt;ts:part name="projectIds" type="string_sortedset_object" 
                  unitOccurs="+" 
                  contentOccurs="?"&gt;
                  &lt;ts:meta name="bi:priorityRemark" use="required" /&gt;
                  &lt;ts:meta name="bi:projectCodeList" use="required" &gt;
                  &lt;ts:enumeration value="internal"/&gt;
                  &lt;ts:enumeration value="external"/&gt;
                  &lt;/ts:meta&gt;
                  &lt;ts:meta name="bi:source" use="optional"&gt;
                  &lt;ts:pattern value="usgs-..-\d{8}.xml"/&gt;
                  &lt;/ts:meta&gt;
                  &lt;/ts:part&gt;
               </div>
               
            </div>
            <div class="para e661">
               The “unitOccurs” attribute (which defaults to “1”) specifies that the tray may contain
               more than one unit with 
               name “projectIds”. According to “contentOccurs” (also defaulting to “1”), each unit
               may contain zero or 
               one data items. (Note that non-array physical types can have only “?” or “1” as value
               of “contentOccurs”.)  
               Two meta data items are mandatory (“bi:priorityRemark” and “bi:projectCodeList”),
               for one of which 
               value constraints are specified. The meta data item “bi:source” is optional, but when
               it occurs it 
               must match the specified constraint.
               
            </div>
            <div class="para e662">
               By default, meta data are “open” – there may be more meta data than specified in the
               tray schema. To exclude 
               this possibility, use the attribute “metaClosed" with a value of "true" on the 
               <div class="code e663">&lt;ts:part&gt;</div> element.
               
            </div>
         </div><a name="TrayvalidationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e664" xml:id="Tray-validation">
            <div class="title e665">Tray validation</div>
            <div class="para e666">
               The 
               <div class="code e667">InfoTray</div> class offers a method 
               <div class="code e668">validate</div>, which validates the tray contents against a tray 
               schema. Note that this validation ignores all schema parts relating to the language
               binding. If errors are detected, 
               the validation writes one or more 
               <div class="code e669">InfoTrayLoadingException</div> units, so that after validation the
               diagnostics can be read from those units.
               
            </div>
            <div class="para e670">
               The main purpose of validation is to support the development process. When the query
               has reached maturity, 
               it should guarantee to either deliver a tray that conforms to the agreed upon schema,
               or it should itself construct 
               
               <div class="code e671">InfoTrayLoadingException</div> units with appropriate diagnostics. In other words it should not leave the
               construction of exceptions to the validation. Following these steps for tray processing
               will help minimize problems:
               
               <div class="itemizedlist e672">
                  <div class="listitem e673">
                     <div class="para e674">
                        
                        <div class="emphasis e675" role="ital">always</div> check for buffered exceptions before starting to 
                        use the tray
                     </div>
                  </div>
                  <div class="listitem e676">
                     <div class="para e677">in the pre-production phase call 
                        <div class="code e678">validate</div> before checking for buffered exceptions; 
                        later this call can be removed
                        
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e679">
               Suggested sample code:
               
               <div class="programlisting e680" xml:space="preserve">tray.validate();                   // remove this line when the underlying query has
                  matured …
                  if (tray.hasLoadingExceptions()) { // but ALWAYS check for buffered exceptions!
                  for (InfoTrayLoadingException e: tray.getLoadingExceptions()) {
                  // process exception ...
                  } else {
                  // normal processing of tray contents ...
                  }
               </div>
               
            </div>
         </div>
      </div><a name="InfoshapeANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e681">
         <div class="title e682">Info shape</div><a name="CodegenerationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e683">
            <div class="title e684">Code generation</div>
            <div class="para e685">
               Once a tray is constrained by a tray schema, the possible use of the tray is defined
               exactly, and exact 
               answers are implied to the following questions: 
               
               <div class="itemizedlist e686">
                  <div class="listitem e687">
                     <div class="para e688">which unit names are available</div>
                  </div>
                  <div class="listitem e689">
                     <div class="para e690">which physical type belongs to a given unit name</div>
                  </div>
                  <div class="listitem e691">
                     <div class="para e692">which meta data items can be expected</div>
                  </div>
               </div>
               
            </div>
            <div class="para e693">
               If, for example, the tray schema determines that the unit name “projectIds” uses a
               physical type “strings”, then 
               it is clear that data retrieval for this unit name (a) is possible and  (b) must use
               the getter variant which delivers 
               a string array:
               
               <div class="programlisting e694" xml:space="preserve">String[] pnames = tray.getStrings (“projectNames“);</div>
               
            </div>
            <div class="para e695">
               To pass this unit name to a different getter method – say, the variant delivering
               a node – will 
               result in an exception. From here it is a small step to generate a Java class which
               exposes the 
               precise set of possible read methods, making their signatures error-proof by removing
               the name 
               parameter as a parameter and shifting it into the method name:
               
               <div class="programlisting e696" xml:space="preserve">String[] pnames = shape.getProjectNames();</div>
               
            </div>
            <div class="para e697">
               This way, the name and physical type of the unit have become inseparable, excluding
               mismatches. The 
               generated implementation of this method consists in a call of the generic tray method:
               
               <div class="programlisting e698" xml:space="preserve">public String[] getProjectNames() throws XQPException {
                  return dataSource.getStrings("projectNames");
                  }
               </div>
               
            </div>
            <div class="para e699">
               Such code generation is supplied by the code generator of XQJPLUS. The code generator
               takes a tray schema as 
               input and produces an 
               <div class="emphasis e700" role="bold">info shape</div>:
               a  query-specific class which is backed by an 
               <div class="code e701">InfoTray</div> member and defines 
               the specific access methods as described above. Along with this class, interfaces
               are generated according to the 
               directions given in the tray schema.
               
            </div>
         </div><a name="InfoshapeANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e702">
            <div class="title e703">Info shape</div>
            <div class="para e704">
               Whereas an info tray is a generic data container, an 
               
               <div class="emphasis e705" role="ital">info shape</div> is a specific data container, reflecting 
               particular choices concerning the names and types of information units. Hence the
               name -
               it reflects the particular "shape" resulting from those choices. As described in the
               preceding section, info shapes are generated by the code generator of XQJPLUS.
               
            </div>
            <div class="para e706">
               To give an example, the simple tray schema shown in 
               <div class="xref e707" linkend="Tray-schema-example"></div> 
               implies the following info shape:
               
               <div class="programlisting e708" xml:space="preserve">
                  public class ResultReport implements LoadableFromInfoTray, ResultData, ProjectData
                  {
                  protected InfoTray dataSource;
                  ...
                  //data access
                  public Map&lt;String,Map&lt;String,String[]&gt;&gt; getFractionResults()   throws XQPException
                  {...}
                  public Map&lt;String,UsgsResult[]&gt;         getActivityResults()   throws XQPException
                  {...}
                  public SortedSet&lt;String&gt;                getProjectIds()        throws XQPException
                  {...}
                  public Map&lt;String,Map&lt;String,String&gt;&gt;   getProjectActivities() throws XQPException
                  {...}
                  
                  //meta data access
                  public Map&lt;String,String&gt; getFractionResultsMetaData()   throws XQPException {...}
                  public Map&lt;String,String&gt; getActivityResultsMetaData()   throws XQPException {...}
                  public Map&lt;String,String&gt; getProjectIdsMetaData()        throws XQPException {...}
                  public Map&lt;String,String&gt; getProjectActivitiesMetaData() throws XQPException {...}
                  
                  //deliver interfaces  
                  public ResultData getInterfaceResultData() {...}
                  public ProjectData getInterfaceProjectData() {...}
                  ...
                  }
               </div>
               
            </div>
            <div class="para e709">
               The advantages for the Java developer are obvious – compiler-guarded access to the
               information unit with
               no worries about using the right names and the right physical types. Further advantage:
               when 
               a unit’s physical type uses custom objects, the generated method delivers instances
               of the custom type, 
               rather than of type 
               <div class="code e710">Object</div>:
               
               <div class="programlisting e711" xml:space="preserve">    public Map&lt;String,UsgsResult[]&gt; getActivityResults() throws XQPException {...}</div>
               
            </div>
            <div class="para e712">
               The tray schema controls the generation of interfaces which contain only subsets of
               the info shape’s read 
               methods. This approach parcels out the results of complex XQuery processing in such
               a way that Java components 
               can reduce their dependence on the tray design: if the structure of the tray is changed,
               for example a unit is removed 
               or added, the impact is limited to the users of particular interfaces.
               
            </div>
         </div>
      </div><a name="InfopathandinfospaceANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e713">
         <div class="title e714">Info path and info space</div>
         <div class="para e715">
            This section briefly explores how info trays create a new possibility of data integration.
            
            Note that this aspect of info trays does not depend on whether the trays are 
            constructed by XQuery or any other means. Indirectly, however, the possibility of
            loading 
            info trays with XQuery further increases the potential for data integration, as it
            favours 
            the use of XML resources as input, a good approach to integration in the first place
            
            (compare 
            <div class="xref e716" linkend="Introduction"></div>).
            
         </div>
         <div class="para e717">
            The introduction of this paper emphasized the way XML and XPath together create a
            uniform 
            information space encompassing any XML resource accessible via document URI. On the
            other 
            hand, from an application programmer’s point of view it is often desirable to access
            
            information in formats other than XML documents – hence the concepts of information
            units 
            and info trays described in this paper. And, of course, this also explains the popularity
            
            of data binding. So we can ask: do info trays fall out of that uniform information
            space, 
            in a similar way to the products of data binding?
            
         </div>
         <div class="para e718">
            Compared with data binding, the introduction of info tray objects creates a radically
            different 
            situation, as info trays are generic data containers. Trays identify their 
            units by QNames, and so the contents of an info tray can be addressed by path 
            expressions similar to XPath expressions. If we associate info trays as a 
            whole with an identifying QName – call it a “resource ID” – we can collect any number
            of
            info trays into a set so that the content of any one of those 
            trays is addressable in a uniform way.
            
         </div>
         <div class="para e719">
            For this purpose XQJPLUS introduces the concepts of an 
            
            <div class="emphasis e720" role="bold">info path</div> and an 
            
            <div class="emphasis e721" role="bold">info space</div>, and it supplies the definition of an 
            info tray with a property called resourceID, typed as a QName. 
            
         </div>
         <div class="para e722">
            <div class="emphasis e723" role="ital">
               <div class="emphasis e724" role="bold">Info space</div>
            </div>
         </div>
         <div class="para e725">
            An info space is simply a set of info trays. Within the set, the resource IDs must
            be unique, 
            so that an info space is essentially a mapping of resource IDs to owner trays. The
            name 
            “info space” is meant to evoke the notion of navigation and uniform accessibility:
            any content 
            of any member tray can be addressed in a uniform way, using info paths as detailed
            below.
            
         </div>
         <div class="para e726">
            <div class="emphasis e727" role="ital">
               <div class="emphasis e728" role="bold">Info path</div>
            </div>
         </div>
         <div class="para e729">
            An info path is a string expression addressing data within an info space. Like an
            XPath, 
            it is composed of steps, and the trailing part of it can in fact be a real XPath,
            as long as 
            the info path points into an information unit containing nodes. Outwardly, an info
            path 
            looks like an XPath: it is a sequence of steps, and these steps can be grouped into
            three 
            consecutive sections:
            
         </div>
         <div class="para e730">
            
            <div class="itemizedlist e731">
               <div class="listitem e732">
                  <div class="para e733">
                     <div class="emphasis e734" role="bold">(1) tray selection</div>
                  </div>
                  <div class="para e735"> - the first step identifies a particular 
                     info tray within the info space.
                     
                  </div>
               </div>
               <div class="listitem e736">
                  <div class="para e737">
                     <div class="emphasis e738" role="bold">(2) information unit selection</div>
                  </div>
                  <div class="para e739"> - one or more steps identify a particular information unit 
                     within the tray.
                     
                  </div>
               </div>
               <div class="listitem e740">
                  <div class="para e741">
                     <div class="emphasis e742" role="bold">(3) intra-unit navigation</div>
                  </div>
                  <div class="para e743"> - an optional 
                     trailing part of the info path navigates into the particular unit identified by the
                     
                     preceding steps.
                     
                  </div>
               </div>
            </div>  
            
         </div>
         <div class="para e744">
            See 
            <div class="xref e745" linkend="example-infopath"></div> for an example. 
            
         </div>
         <div class="figure e746" xml:id="example-infopath">
            <div class="title e747">Example of an info path</div>
            <div class="mediaobject e748">
               <div class="imageobject e749">
                  <div class="metaBox e750"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1439').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1439" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e750'
                           </span><span class="metaAttribute">fileref='../../../vol5/graphics/Rennau01/Rennau01-002.jpg'
                           </span><span class="metaAttribute">format='jpg'
                           </span><span class="metaAttribute">width='50%'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
            <div class="caption e751">
               <div class="para e752">This info path selects the value of a map entry with key "Ammonium"; the map is
                  selected as a specific information unit found in a specific info tray.
                  
               </div>
            </div>
         </div>
         <div class="para e753">
            The steps selecting info tray and information unit consist of QNames. The trailing
            steps
            defining intra-unit navigation, on the other hand, have a syntax and semantics which
            
            are determined by the physical type of the unit in question. To achieve a precise
            understanding of how an info path is decomposed and evaluated, consider this string:
            
            <div class="programlisting e754" xml:space="preserve">infospace://a/b/c/d</div>
            
         </div>
         <div class="para e755">
            The prefix “infospace://” indicates that the string represents an info path, rather
            than an XPath. 
            The path is evaluated in the context of a specific info space. This 
            space cannot be inferred from the path expression. The step “a” identifies a tray
            within 
            that info space. The next step “b” identifies a unit within that tray. If this unit
            does 
            not contain nested units (in other words, if it is not a tray or an array of trays),
            then 
            the remaining steps “c/d” navigate into that unit. On the other hand, if the unit
            identified 
            by “b” does contain nested units, than “c” identifies a unit within “b”, and the interpretation
            
            of the next step “d” again depends on the type of the unit identified by the preceding
            step. 
            In summary, the unit selection comprises one or more steps, and it ends with the first
            step 
            identifying a “primary unit”, a unit not containing other units. If this step is not
            the last 
            step of the info path, the remaining steps constitute an intra-unit path; otherwise,
            the path 
            identifies that unit as a whole, rather than parts of it.
            
         </div>
         <div class="para e756">
            As already mentioned, the semantics of the intra-unit path depend on the unit’s physical
            
            type. The following table gives a few examples.
            
            
            <div class="table e757">
               <div class="caption e758">
                  <div class="para e759">
                     <div class="emphasis e760" role="bold">
                        <div class="emphasis e761" role="ital">Interpretation of intra-unit paths - examples.</div>
                     </div>
                  </div>
               </div>
               <div class="metaBox e762"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1458').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1458" class="metaSource" style="display:none;">                
                     &lt;col<span class="metaAttribute">align='left'
                        </span><span class="metaAttribute">class='e762'
                        </span><span class="metaAttribute">span='1'
                        </span><span class="metaAttribute">valign='top'
                        </span>
                     &gt;
                     
                  </div>
               </div>
               <div class="metaBox e763"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1459').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1459" class="metaSource" style="display:none;">                
                     &lt;col<span class="metaAttribute">align='left'
                        </span><span class="metaAttribute">class='e763'
                        </span><span class="metaAttribute">span='1'
                        </span><span class="metaAttribute">valign='top'
                        </span>
                     &gt;
                     
                  </div>
               </div>
               <div class="thead e764">
                  <div class="tr e765" valign="top">
                     <div class="th e766" align="left" valign="top">Unit type (physical)</div>
                     <div class="th e767" align="left" valign="top">Interpretation of the intra-unit path</div>
                  </div>
               </div>
               <div class="tbody e768">
                  <div class="tr e769" valign="top">
                     <div class="td e770">
                        <div class="emphasis e771" role="bold">node</div>
                     </div>
                     <div class="td e772">XPath</div>
                  </div>
                  <div class="tr e773" valign="top">
                     <div class="td e774">
                        <div class="emphasis e775" role="bold">string-to-string map</div>
                     </div>
                     <div class="td e776">step 1: map key; no further steps allowed</div>
                  </div>
                  <div class="tr e777" valign="top">
                     <div class="td e778">
                        <div class="emphasis e779" role="bold">string-to-node map</div>
                     </div>
                     <div class="td e780">step 1: map key; remaining steps: XPath</div>
                  </div>
                  <div class="tr e781" valign="top">
                     <div class="td e782">
                        <div class="emphasis e783" role="bold">string-to-(string-to-string map)</div>
                     </div>
                     <div class="td e784">step 1: outer map key; step 2: inner map key</div>
                  </div>
                  <div class="tr e785" valign="top">
                     <div class="td e786">
                        <div class="emphasis e787" role="bold">string-to-(string-to-node map)</div>
                     </div>
                     <div class="td e788">step 1: outer map key; step 2: inner map key; remaining steps: XPath</div>
                  </div>
                  <div class="tr e789" valign="top">
                     <div class="td e790">
                        <div class="emphasis e791" role="bold">properties</div>
                     </div>
                     <div class="td e792">property name</div>
                  </div>
                  <div class="tr e793" valign="top">
                     <div class="td e794">
                        <div class="emphasis e795" role="bold">string</div>
                     </div>
                     <div class="td e796">not applicable</div>
                  </div>
                  <div class="tr e797" valign="top">
                     <div class="td e798">
                        <div class="emphasis e799" role="bold">date</div>
                     </div>
                     <div class="td e800">not applicable</div>
                  </div>
               </div>
            </div>
            
         </div>
         <div class="para e801">
            
            <div class="emphasis e802" role="ital">Note on multiplicity.</div> The unit to which the intra-unit 
            path must be applied can be a sequence of objects, rather than a single object. There
            
            are two sources of multiplicity: (i) several units can have the same name, and (ii)
            
            the physical type may be an object array, rather than a single object. If the intra-unit
            
            path is applied to more than one object, the evaluation is repeated for each one and
            the 
            results are united. 
            
         </div>
         <div class="para e803">
            
            <div class="emphasis e804" role="ital">Note on step indexes and unit selection.</div> For steps dedicated 
            to unit selection, a special index syntax applies (for example: a/b[2.3]/c), allowing
            to target 
            both sources of multiplicity (see above) separately. 
            
         </div>
         <div class="para e805">
            <div class="emphasis e806" role="ital">
               <div class="emphasis e807" role="bold">Class InfoSpace</div>
            </div>
         </div>
         <div class="para e808">
            The XQJPLUS class 
            <div class="code e809">InfoSpace</div> represents an info space. Besides methods for adding 
            and removing trays from the space, it offers several methods for evaluating info paths,
            
            distinguished by the result type (string, string array, node, node array), as well
            as a method 
            for setting/extending the namespace context for info path evaluation. An 
            
            <div class="code e810">InfoSpace</div> object represents a collection of information which combines high flexibility 
            (and possibly great heterogeneity) of information models with a unified, string-based
            access 
            model. This makes 
            <div class="code e811">InfoSpace</div> objects an option for the design of highly configurable software: 
            configurations supply info path strings which connect generic functionality to actual
            input 
            collected from info spaces. As well as this, unified addressability of data supports
            data 
            integration in general. Just as XPath provides this addressability for XML data, info
            path 
            provides this addressability for info space data.
            
         </div>
      </div><a name="ThecooperationofJavaandXQuerydevelopersANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e812">
         <div class="title e813">The cooperation of Java and XQuery developers</div>
         <div class="para e814">
            XQJPLUS is designed to facilitate the cooperation of the Java and XQuery developers.
            Typically, 
            the cooperation between developers is based on interfaces. The “interface” to the
            XQuery 
            developer’s work is a tray design, which can be formally captured by a tray schema.
            Optionally, 
            this tray schema can in turn be compiled into a set of Java interfaces.  A suggested
            workflow is:
            
            <div class="orderedlist e815">
               <div class="listitem e816">
                  <div class="para e817">The Java and XQuery developers discuss the information to be extracted from a set
                     of XML resources.
                  </div>
               </div>
               <div class="listitem e818">
                  <div class="para e819">
                     They design the tray and document it using a 
                     
                     <div class="emphasis e820" role="ital">tray schema</div>.
                     
                  </div>
               </div>
               <div class="listitem e821">
                  <div class="para e822">The tray schema is compiled into an 
                     <div class="emphasis e823" role="ital">
                        info shape
                     </div>, a Java class and interfaces.
                  </div>
               </div>
               <div class="listitem e824">
                  <div class="para e825">The XQuery developer writes a prototype query which produces a valid tray.</div>
               </div>
               <div class="listitem e826">
                  <div class="para e827">The Java developer can begin to code against the info shape.</div>
               </div>
               <div class="listitem e828">
                  <div class="para e829">
                     The XQuery developer produces incremental versions of the query, eventually
                     replacing the prototype with a real implemention.
                     
                  </div>
               </div>
            </div>  
            
         </div>
      </div><a name="ReusingXQJPLUSinotherintegrationinfrastructuresANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e830">
         <div class="title e831">Reusing XQJPLUS in other integration infrastructures</div>
         <div class="para e832">
            XQuery is integrated by XQJPLUS in such a way as to maximize the 
            possibility of reuse when developing other integration software that is based on information
            units. 
            The prospect of reuse exists on three levels: changing the underlying 
            XQuery API (currently: XQJ), changing the type of information resource (currently:
            XQuery) and 
            changing the programming language integrating the information resource (currently:
            Java).
            
         </div>
         <div class="para e833">
            <div class="emphasis e834" role="ital">
               <div class="emphasis e835" role="bold">Replacing the XQJ API</div>
            </div>
         </div>
         <div class="para e836">
            XQJPLUS is based on XQJ. However, it would be easy to create a version based on a
            different XQuery API, e.g. 
            Saxon’s s9api 
            <div class="xref e837" linkend="S9API"></div>. Only the tray loading method would have to be adapted, and in doing so the
            only part that would need to be changed is the “extraction” of a Java data item from
            the Java representation of an XDM item.
            
         </div>
         <div class="para e838">
            <div class="emphasis e839" role="ital">
               <div class="emphasis e840" role="bold">Replacing XQuery</div>
            </div>
         </div>
         <div class="para e841">
            XQJPLUS integrates XQuery. A similar integration of other information resources, e.g.
            XSLT or 
            XProc results, could reuse a major part of the software, namely the 
            <div class="code e842">InfoTray</div> class. In fact, only a 
            new subclass of 
            <div class="code e843">InfoTray</div> would have to be created, which implements the loading of a tray from the
            chosen type of information resource. In particular note that the generation of Java
            code (info shapes) does  
            not need to be changed, as it is independent of the information resource underlying
            the tray. The major problem to 
            be solved would be to control the assembly of information units: the control exerted
            by XQuery result items 
            might prove difficult to attain with other sources. 
            
         </div>
         <div class="para e844">
            <div class="emphasis e845" role="ital">
               <div class="emphasis e846" role="bold">Replacing Java</div>
            </div>
         </div>
         <div class="para e847">
            The integration of XQuery into other languages – e.g. C# or C++ - could be modelled
            on XQJPLUS. First, produce 
            a language-specific version of 
            <div class="code e848">InfoTray</div>. Then implement the loading of the tray from an XQuery 
            result, using the 
            <div class="code e849">InfoTray</div>’s generic 
            <div class="code e850">add</div> methods. Finally, extend the tray schema language 
            by a new language binding vocabulary, and implement the code generation controlled
            by that vocabulary.
            
         </div>
      </div><a name="InformationunitsversusdatabindingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e851">
         <div class="title e852">Information units versus data binding</div>
         <div class="para e853">
            Information units are read from an info tray or an info shape. In both cases, “getter”
            methods 
            are used to obtain data originating from XML resources. This is an apparent similarity
            to data 
            binding. But there are two fundamental differences.
            
         </div>
         <div class="para e854">
            
            <div class="emphasis e855" role="bold">
               <div class="emphasis e856" role="ital">evaluation versus repetition</div>
            </div>
            
         </div>
         <div class="para e857">
            Info trays and shapes represent evaluation results, whereas the objects created by
            data binding 
            represent the original resources, and echo their structure. Data binding essentially
            repeats 
            information, rather than evaluates it.
            
         </div>
         <div class="para e858">
            
            <div class="emphasis e859" role="bold">
               <div class="emphasis e860" role="ital">information units versus items</div>
            </div>
            
         </div>
         <div class="para e861">
            As data binding reflects the original information content, it also reflects its structure
            as a 
            tree of atomic items. Information units, on the other hand, are entities designed
            to support 
            the Java code in an optimal way, free to use alternatives to atomic values and trees.
            
         </div>
         <div class="para e862">
            These differences can be made less obvious by the many forms of customizing which
            different 
            data binding technologies support. They introduce limited possibilities to avoid a
            one-to-one 
            repetition of structure and information content. But this amounts to variations on
            the theme 
            of repetition, rather than a transition from repetition to evaluation. This becomes
            especially 
            clear when considering the price to be paid for any deviation from the structure and
            content 
            implied by the original resource. 
            
         </div>
         <div class="para e863">
            If the main interest lies in accessing single items that can be identified by paths
            known at 
            compile time – for example extracting parameters from a SOAP request or a configuration
            - data 
            binding offers considerable advantages to the Java developer, whereas information
            units are of 
            very limited use. But evaluating the XML resources and creating new information from
            them is an 
            activity data binding is little concerned with. If such evaluation is important, XQuery
            in general, 
            and XQuery-powered information units in particular offer an option that should be
            considered.
            
         </div>
      </div><a name="ConclusionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e864">
         <div class="title e865">Conclusion</div>
         <div class="para e866">
            The integration of XQuery into Java may be viewed as a specimen of a very general
            kind of integration: 
            the integration of “pure information processing” into object-oriented languages. Here,
            “pure information processing” 
            denotes a side-effect free processing of information. As mentioned earlier, the W3C-developed
            XDM is a unified 
            information model applicable to a vast spectrum of information, accessible to processing
            languages marked by 
            precision, conciseness and efficiency. As a matter of fact, “information processing”,
            as it has become possible
            thanks to the work done by W3C, is a new kind of program activity, which can be distinguished
            from other activities 
            conceptually, and structurally factored out. It is a promising perspective to practise
            such separation where feasible, 
            factoring out information processing, delegating it to specialized components – e.g.
            XQuery code – in as large chunks 
            as possible, and integrating the results in a seamless way. This is an architectural
            pattern which XQJPLUS strives to 
            support.
            
         </div>
      </div><a name="AcknowledgementsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e867">
         <div class="title e868">Acknowledgements</div>
         <div class="para e869">
            David A. Lee gave me advice concerning the technical preparation of the manuscript,
            and I-Lin Kuo
            checked my use of the NWIS Water Quality Web Services. Lauren Wood helped me generously
            with the
            English text, sacrificing much time to the elimination of errors and awkward phrasing.
            
            Xia Li helped me in every way: taking part in the technical preparation of the manuscript,
            
            reading drafts, discussing issues, making many valuable suggestions and simply encouraging
            
            me with her vivid, tireless interest. To all of you - thank you!
            
         </div>
      </div><a name="SampleofthedataevaluatedintheexamplesectionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="appendix e870" xml:id="USGS-example-data">
         <div class="title e871">Sample of the data evaluated in the example section</div>
         <div class="para e872">
            The data evaluated in 
            <div class="xref e873" linkend="Getting-started-with-XQJPLUS"></div> were obtained from 
            the Result Service of “National Water Information System (NWIS) Water-Quality Web
            
            Services” 
            <div class="xref e874" linkend="USGS-WS"></div>. They contain water quality sampling results 
            reported for the first three months of 2010, collected in the state of Minnesota,
            
            including both final and preliminary results. The data can be obtained from the 
            following URI:
            
            <div class="programlisting e875" xml:space="preserve">
               http://qwwebservices.usgs.gov/Result/search?organization=USGS-MN&amp;startDateLo=
               01-01-2010&amp;startDateHi=03-31-2010&amp;mimeType=xml
            </div> 
            
         </div>
         <div class="para e876">
            Here comes a small sample of the data. "..." indicate left out parts.
            
         </div>
         <div class="programlisting e877" xml:space="preserve">
            &lt;WQX xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xmlns="http://qwwebservices.usgs.gov/schemas/WQX-Outbound/2_0/"
            xsi:schemaLocation="http://qwwebservices.usgs.gov/schemas/WQX-Outbound/2_0/ 
            http://qwwebservices.usgs.gov/schemas/WQX-Outbound/2_0/index.xsd"&gt;
            &lt;Organization&gt;
            &lt;OrganizationDescription&gt;
            &lt;OrganizationIdentifier&gt;USGS-MN&lt;/OrganizationIdentifier&gt;
            &lt;OrganizationFormalName&gt;USGS Minnesota Water Science Center&lt;/OrganizationFormalName&gt;
            &lt;/OrganizationDescription&gt;
            ...
            &lt;Activity&gt;
            &lt;ActivityDescription&gt;
            &lt;ActivityIdentifier&gt;sun1dmnspl.01.01000101&lt;/ActivityIdentifier&gt;
            &lt;ActivityTypeCode&gt;Sample-Routine&lt;/ActivityTypeCode&gt;
            &lt;ActivityMediaName&gt;Water&lt;/ActivityMediaName&gt;
            &lt;ActivityMediaSubdivisionName&gt;Surface Water&lt;/ActivityMediaSubdivisionName&gt;
            &lt;ActivityStartDate&gt;2010-01-20&lt;/ActivityStartDate&gt;
            &lt;ActivityStartTime&gt;
            &lt;Time&gt;09:20:00&lt;/Time&gt;
            &lt;TimeZoneCode&gt;CST&lt;/TimeZoneCode&gt;
            &lt;/ActivityStartTime&gt;
            &lt;ProjectIdentifier&gt;NAWQA&lt;/ProjectIdentifier&gt;
            &lt;ActivityConductingOrganizationText&gt;U.S. Geological Survey-Water Resources 
            Discipline&lt;/ActivityConductingOrganizationText&gt;
            &lt;MonitoringLocationIdentifier&gt;USGS-05288705&lt;/MonitoringLocationIdentifier&gt;
            &lt;ActivityCommentText&gt;A-0210094 Attention: Charlie Patton TPCN (2) TPCN filters: 50mL
            
            each&lt;/ActivityCommentText&gt;
            &lt;HydrologicCondition&gt;Stable, low stage&lt;/HydrologicCondition&gt;
            &lt;HydrologicEvent&gt;Under ice cover&lt;/HydrologicEvent&gt;
            &lt;/ActivityDescription&gt;
            &lt;SampleDescription&gt;
            &lt;SampleCollectionMethod&gt;
            &lt;MethodIdentifier&gt;15&lt;/MethodIdentifier&gt;
            &lt;MethodIdentifierContext&gt;USGS parameter code 82398&lt;/MethodIdentifierContext&gt;
            &lt;MethodName&gt;Equal width increment, non-isokinetic&lt;/MethodName&gt;
            &lt;/SampleCollectionMethod&gt;
            &lt;SampleCollectionEquipmentName&gt;Open-Mouth Bottle&lt;/SampleCollectionEquipmentName&gt;
            &lt;/SampleDescription&gt;
            &lt;Result&gt;
            &lt;ResultDescription&gt;
            &lt;CharacteristicName&gt;Depth&lt;/CharacteristicName&gt;
            &lt;ResultMeasure&gt;
            &lt;ResultMeasureValue&gt;0.30&lt;/ResultMeasureValue&gt;
            &lt;MeasureUnitCode&gt;ft&lt;/MeasureUnitCode&gt;
            &lt;/ResultMeasure&gt;
            &lt;ResultStatusIdentifier&gt;Preliminary&lt;/ResultStatusIdentifier&gt;
            &lt;ResultValueTypeName&gt;Actual&lt;/ResultValueTypeName&gt;
            &lt;USGSPCode&gt;81903&lt;/USGSPCode&gt;
            &lt;/ResultDescription&gt;
            &lt;ResultLabInformation&gt;
            &lt;LaboratoryName&gt;U.S. Geological Survey-Water Resources Discipline&lt;/LaboratoryName&gt;
            &lt;AnalysisStartDate&gt;--&lt;/AnalysisStartDate&gt;
            &lt;/ResultLabInformation&gt;
            &lt;LabSamplePreparation&gt;
            &lt;PreparationStartDate&gt;--&lt;/PreparationStartDate&gt;
            &lt;/LabSamplePreparation&gt;
            &lt;/Result&gt;
            &lt;Result&gt;
            &lt;ResultDescription&gt;
            &lt;CharacteristicName&gt;Nitrite&lt;/CharacteristicName&gt;
            &lt;ResultSampleFractionText&gt;Dissolved&lt;/ResultSampleFractionText&gt;
            &lt;ResultMeasure&gt;
            &lt;ResultMeasureValue&gt;0.087&lt;/ResultMeasureValue&gt;
            &lt;MeasureUnitCode&gt;mg/l&lt;/MeasureUnitCode&gt;
            &lt;/ResultMeasure&gt;
            &lt;ResultStatusIdentifier&gt;Preliminary&lt;/ResultStatusIdentifier&gt;
            &lt;ResultValueTypeName&gt;Calculated&lt;/ResultValueTypeName&gt;
            &lt;USGSPCode&gt;71856&lt;/USGSPCode&gt;
            &lt;/ResultDescription&gt;
            &lt;ResultLabInformation&gt;
            &lt;AnalysisStartDate&gt;--&lt;/AnalysisStartDate&gt;
            &lt;/ResultLabInformation&gt;
            &lt;LabSamplePreparation&gt;
            &lt;PreparationStartDate&gt;--&lt;/PreparationStartDate&gt;
            &lt;/LabSamplePreparation&gt;
            &lt;/Result&gt;
            &lt;Result&gt;
            &lt;ResultDescription&gt;
            &lt;CharacteristicName&gt;Nitrate&lt;/CharacteristicName&gt;
            &lt;ResultSampleFractionText&gt;Dissolved&lt;/ResultSampleFractionText&gt;
            &lt;ResultMeasure&gt;
            &lt;ResultMeasureValue&gt;1.66&lt;/ResultMeasureValue&gt;
            &lt;MeasureUnitCode&gt;mg/l&lt;/MeasureUnitCode&gt;
            &lt;/ResultMeasure&gt;
            &lt;ResultStatusIdentifier&gt;Preliminary&lt;/ResultStatusIdentifier&gt;
            &lt;ResultValueTypeName&gt;Calculated&lt;/ResultValueTypeName&gt;
            &lt;USGSPCode&gt;71851&lt;/USGSPCode&gt;
            &lt;/ResultDescription&gt;
            &lt;ResultLabInformation&gt;
            &lt;AnalysisStartDate&gt;--&lt;/AnalysisStartDate&gt;
            &lt;/ResultLabInformation&gt;
            &lt;LabSamplePreparation&gt;
            &lt;PreparationStartDate&gt;--&lt;/PreparationStartDate&gt;
            &lt;/LabSamplePreparation&gt;
            &lt;/Result&gt;       
            &lt;Result&gt;
            &lt;ResultDescription&gt;
            &lt;CharacteristicName&gt;Ammonia and ammonium&lt;/CharacteristicName&gt;
            &lt;ResultSampleFractionText&gt;Dissolved&lt;/ResultSampleFractionText&gt;
            &lt;ResultMeasure&gt;
            &lt;ResultMeasureValue&gt;0.49&lt;/ResultMeasureValue&gt;
            &lt;MeasureUnitCode&gt;mg/l NH4&lt;/MeasureUnitCode&gt;
            &lt;/ResultMeasure&gt;
            &lt;ResultStatusIdentifier&gt;Preliminary&lt;/ResultStatusIdentifier&gt;
            &lt;ResultValueTypeName&gt;Calculated&lt;/ResultValueTypeName&gt;
            &lt;USGSPCode&gt;71846&lt;/USGSPCode&gt;
            &lt;/ResultDescription&gt;
            &lt;ResultLabInformation&gt;
            &lt;AnalysisStartDate&gt;--&lt;/AnalysisStartDate&gt;
            &lt;/ResultLabInformation&gt;
            &lt;LabSamplePreparation&gt;
            &lt;PreparationStartDate&gt;--&lt;/PreparationStartDate&gt;
            &lt;/LabSamplePreparation&gt;
            &lt;/Result&gt;
            ...
            ...
            &lt;/Organization&gt;
            &lt;/WQX&gt;
         </div>
      </div><a name="XQuerycodeperformingtheevaluationsdescribedintheexamplesectionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="appendix e878" xml:id="USGS-evaluation-query">
         <div class="title e879">XQuery code performing the evaluations described in the example section</div>
         <div class="para e880">
            The query performed the evaluations described in 
            <div class="xref e881" linkend="Getting-started-with-XQJPLUS"></div>.
            It produces a sequence of control items (
            <div class="code e882">&lt;xqjp:XXX&gt;</div>) and data items, which 
            generic Java code (XQJPLUS) assembles into an info tray.
            
         </div>
         <div class="programlisting e883" xml:space="preserve">
            declare namespace xqjp="http://www.bits-ac.com/xqjplus/control";
            declare namespace meta="http://www.bits-ac.com/xqjplus/meta";
            declare default element namespace "http://qwwebservices.usgs.gov/schemas/WQX-Outbound/2_0/";
            
            declare variable $projectIds := 
            for $n in distinct-values(//ActivityDescription/ProjectIdentifier)
            order by $n return $n;
            
            (: *** namespace context *** 
            : ========================= :)
            &lt;xqjp:setNamespaceContext&gt;
            &lt;xqjp:binding prefix="data" uri="http://qwwebservices.usgs.gov/schemas/WQX-Outbound/2_0/"/&gt;
            &lt;xqjp:binding prefix="meta" uri="http://www.bits-ac.com/xqjplus/meta"/&gt;
            &lt;xqjp:binding prefix="usgs" uri="http://www.bits-ac.com/usgs"/&gt;
            &lt;/xqjp:setNamespaceContext&gt;,
            
            (: *** tray meta data *** 
            : ====================== :)
            &lt;xqjp:trayMeta meta:name="balisageDemoTray"
            meta:documentation="Creates the info tray used in section 'Getting started with XQJPLUS'."/&gt;,
            
            (: *** info unit "projectIds"
            : ========================== :)
            &lt;xqjp:part name="projectIds" 
            type="string_sortedset_object"
            sematype="usgs:projectIds"/&gt;,
            $projectIds,
            
            (: *** info unit "projectActivities"
            : ================================= :)
            &lt;xqjp:part name="projectActivities" 
            type="nested_map_string_to_string_object"
            impltype="java.util.TreeMap"
            sematype="usgs:projectActivities"
            outerEntryPath="data:project"
            outerKeyPath="@id"
            innerEntryPath="data:activity"
            innerKeyPath="@time"
            innerValuePath="@activityId"/&gt;,
            
            &lt;projectData&gt;{
            for $p in $projectIds
            let $myActivities := //Activity[ActivityDescription/ProjectIdentifier eq $p]
            return
            &lt;project id="{$p}"&gt;{
            for $a in $myActivities
            return
            &lt;activity&gt;{
            attribute time {$a/ActivityDescription/concat(ActivityStartDate, "#", ActivityStartTime/Time)},
            attribute activityId {$a/ActivityDescription/ActivityIdentifier}
            }&lt;/activity&gt;
            }&lt;/project&gt;
            }&lt;/projectData&gt;,
            
            (: *** info unit "activityResults"
            : ============================= :)
            &lt;xqjp:part name="activityResults" 
            type="map_string_to_custom_objects_object"
            impltype="java.util.TreeMap"
            customType="com.bits_ac.xqjplus.appl.UsgsResult"
            sematype="usgs:projectActivities"
            entryPath="data:activity"
            keyPath="@id"
            valuePath="data:Result"/&gt;,
            
            &lt;resultObjects&gt;{
            for $a in //Activity
            return
            &lt;activity id="{$a//ActivityIdentifier}"&gt;{$a/Result}&lt;/activity&gt;
            }&lt;/resultObjects&gt;,
            
            (: *** info unit "fractionResults"
            : =============================== :)
            &lt;xqjp:part name="fractionResults" 
            type="nested_map_string_to_strings_object"
            impltype="java.util.TreeMap"
            sematype="usgs:fractionResults"
            outerEntryPath="data:fractionResults"
            outerKeyPath="@name"
            innerEntryPath="data:entry"
            innerKeyPath="@time"
            innerValuePath="data:result/@uvalue"/&gt;,
            
            &lt;allFractionResults&gt;{
            for $f in distinct-values(//ResultDescription/CharacteristicName/string-join((., ../ResultSampleFractionText),
            "/"))
            let $charName := replace($f, "/.*", "")
            let $fractionText := if (contains($f, "/")) then replace($f, ".*/", "") else ()
            let $myResults := //Result[ResultDescription/CharacteristicName eq $charName and (
            not($fractionText) and not(ResultDescription/ResultSampleFractionText)
            or ResultDescription/ResultSampleFractionText eq $fractionText)]
            let $times :=  
            for $t in distinct-values($myResults/../ActivityDescription/concat(ActivityStartDate,
            "#", ActivityStartTime/Time)) 
            order by $t return $t
            order by lower-case($f)
            return
            &lt;fractionResults name="{$f}"&gt;{
            for $time in $times
            let $myTimeResults := 
            $myResults[../ActivityDescription/concat(ActivityStartDate, "#", ActivityStartTime/Time)
            eq $time]
            order by $time
            return
            &lt;entry time="{$time}"&gt;{
            for $r in $myTimeResults
            let $rvalue := $r/ResultDescription/ResultMeasure/(ResultMeasureValue, MeasureUnitCode)
            let $rvalue := 
            if ($rvalue) then $rvalue else $r/ResultLabInformation//(MeasureValue, MeasureUnitCode)
            return
            &lt;result uvalue="{concat($rvalue[1], " [", $rvalue[2], "]")}"/&gt;
            }&lt;/entry&gt;
            }&lt;/fractionResults&gt;
            }&lt;/allFractionResults&gt;
            
         </div>
      </div><a name="ThecontrolitemsdefinedbyXQJPLUSANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="appendix e884" xml:id="The-control-items">
         <div class="title e885">The control items defined by XQJPLUS</div>
         <div class="para e886">
            In 
            <div class="xref e887" linkend="The-assembly-process-basics"></div> and 
            <div class="xref e888" linkend="The-assembly-process-advanced"></div>
            several code examples show how XQuery code controls the construction of an info tray.
            Those sections
            describe the main principles. This appendix provides a brief description of all control
            items 
            defined by XQJPLUS.
            
         </div>
         <div class="para e889">
            <div class="emphasis e890" role="bold">
               <div class="emphasis e891" role="ital">
                  <div class="code e892">xqjp:setNamespaceContext</div>
               </div>
            </div>
         </div>
         <div class="para e893">
            When interpreting namespace-sensitive contents of control items - e.g. construction
            attributes containing XPath
            expressions, or attribute 
            <div class="code e894">sematype</div> which specifies the semantic type - XQJPLUS uses a special namespace context which
            
            is 
            <div class="emphasis e895" role="ital">not</div> the namespace context of the respective control item itself. This 
            second namespace context is set or extended by 
            <div class="code e896">xqjp:setNamespaceContext</div> control items. 
            Example:
            
            <div class="programlisting e897" xml:space="preserve">
               &lt;xqjp:setNamespaceContext&gt;
               &lt;xqjp:binding prefix="meta" uri="http://www.bits-ac.com/xqjplus/meta"/&gt;
               &lt;xqjp:binding prefix="usgs" uri="http://www.bits-ac.com/usgs"/&gt;
               &lt;xqjp:binding prefix="tns" uri="http://qwwebservices.usgs.gov/schemas/WQX-Outbound/2_0/"/&gt;
               &lt;/xqjp:setNamespaceContext&gt;
            </div>
            
         </div>
         <div class="para e898">
            <div class="emphasis e899" role="ital">
               <div class="emphasis e900" role="bold">
                  <div class="code e901">xqjp:part</div>
               </div>
            </div>
         </div>
         <div class="para e902">
            The item defines an information unit. The name and physical type are given by the
            attributes “name” and “type”, and the semantic 
            type and implementation type by “sematype” and “impltype”. Note that the latter can
            be used to control the type 
            actually used to instantiate an interface, for example a collection interface. Construction
            attributes may control the 
            assembly process; the range of construction attributes and their default values are
            specific to each physical type. 
            A “source” attribute may reference the contents of a control variable as a data source.
            Further attributes must be in 
            a namespace and specify the meta data of the unit. Child elements, if present, specify
            further meta data. Example:
            
            <div class="programlisting e903" xml:space="preserve">&lt;xqjp:part xmlns:bi="http://www.bits-ac.com/usgs"
               name="fractionResults" 
               source="$fractionResults"
               type="nested_map_string_to_strings_object"
               sematype="bi:fractionResults"
               impltype="java.util.TreeMap"
               outerEntryPath="d:fractionResults"
               outerKeyPath="@name"
               innerEntryPath="d:entry"
               innerKeyPath="@time"
               innerValuePath="d:result/@uvalue"
               bi:source="mn-20100101-200330"
               bi:cr="{current-date()}"
               &gt;
               &lt;laboratories&gt;{string-join(//LaboratoryName, “; “)&lt;/laboratories&gt;
               &lt;/xqjp:part&gt;
            </div>
            
         </div>
         <div class="para e904">
            The defined unit has the name “fractionResults” (which has no namespace URI), a physical
            type corresponding 
            to the Java type 
            <div class="code e905">Map&lt;String,&lt;String, String[]&gt;&gt;</div>, as well as semantic and implementation types as 
            specified by the attributes “sematype” and “impltype”. The example specifies all five
            construction attributes 
            defined for the actual physical type (“outerEntryPath”, “outerKeyPath”, “innerEntryPath”,
            “innerKeyPath”, 
            “innerValuePath”) . If not specified, they would have defaulted to the values “*”,
            “@outerKey”, 
            “*”, “@key” and “*”, respectively. As meta data, “bi:source”, “bi:cr” and “laboratories”
            are specified. Note
            that a special namespace treatment is applied to namespace-sensitive contents, e.g.
            to construction attributes 
            which are defined to contain an XPath expression - see preceding section.
            
         </div>
         <div class="para e906">
            <div class="emphasis e907" role="ital">
               <div class="emphasis e908" role="bold">
                  <div class="code e909">xqjp:setVar</div>
               </div>
            </div>
         </div>
         <div class="para e910">
            The item defines a control variable. The name and variable type are given by the attributes
            “name” and “vtype”. The variable 
            type must be one of: node, nodes, string, strings. Example:
            
            <div class="programlisting e911" xml:space="preserve">&lt;xqjp:setVar name="fractionResults" vtype="node"/&gt;</div>
            
         </div>
         <div class="para e912">
            <div class="emphasis e913" role="ital">
               <div class="emphasis e914" role="bold">
                  <div class="code e915">xqjp:error</div>
               </div>
            </div>
         </div>
         <div class="para e916">
            The item signals an error which makes normal tray loading impossible. The item specifies
            an error code and detail information, 
            both of which will be used on the Java side when constructing an exception object.
            The details are represented by the control 
            item’s child elements. A special attribute “abort” specifies if the assembly process
            shall be continued or abandoned after 
            processing this control item. (Continuation might be desirable in order to collect
            further error information.) Example:
            
            <div class="programlisting e917" xml:space="preserve">&lt;xqjp:error code="SOURCE_NOT_AVAILABLE" abort=”true”&gt;
               &lt;xqjp:sourceURI&gt;foo.xml&lt;/xqjp:sourceURI&gt;
               &lt;/xqjp:error&gt;
            </div>
            
         </div>
         <div class="para e918">
            <div class="emphasis e919" role="ital">
               <div class="emphasis e920" role="bold">
                  <div class="code e921">xqjp:trayMeta</div>
               </div>
            </div>
         </div>
         <div class="para e922">
            The item provides tray-level meta data. The data can be specified by attributes or
            child elements, 
            just like unit-level meta data are specified by an 
            <div class="code e923">&lt;xqjp:part&gt;</div> element. Note 
            that the standard meta data “name” and “documentation” have names in the namespace
            
            {http://www.bits-ac.com/xqjplus/meta}. Example:
            
            <div class="programlisting e924" xml:space="preserve">
               &lt;xqjp:trayMeta smeta:name="bi:usgsResultEvaluation"
               bi:vsn="0.41"
               xmlns:smeta=”http://www.bits-ac.com/xqjplus/meta”
               xmlns:bi=”http://www.bits-ac.com/xqjplus/usgs”/&gt;
            </div>
            
         </div>
         <div class="para e925">
            <div class="emphasis e926" role="ital">
               <div class="emphasis e927" role="bold">
                  <div class="code e928">xqjp:complexPartBegin</div>
               </div>
            </div>
         </div>
         <div class="para e929">
            The item opens the definition of a unit whose physical type is either a single info
            tray 
            or an array of info trays. The name of the unit is given by attribute “name”, the
            physical 
            type by attribute “type”. (The physical type must be either “infotray” or “infotrays”.)
            
            An attribute 
            <div class="code e930">sematype</div> may specify the semantic type, and further attributes 
            and child elements may specify meta data of the unit in the same way as with 
            
            <div class="code e931">xqjp:part</div> items.
            Examples:
            
            <div class="programlisting e932" xml:space="preserve">&lt;xqjp:complexPartBegin name="msgEvaluations" type="infotrays"/&gt;,
               &lt;xqjp:complexPartBegin name="msgEvaluation" type="infotray" sematype="ws:eval" bi:vsn="1.0"/&gt;,
            </div>        
            
         </div>
         <div class="para e933">
            <div class="emphasis e934" role="ital">
               <div class="emphasis e935" role="bold">
                  <div class="code e936">xqjp:complexPartEnd</div>
               </div>
            </div>
         </div>
         <div class="para e937">
            The item closes the definition of a unit which was opened by a preceding 
            
            <div class="code e938">&lt;xqjp:complexPartBegin&gt;</div> item. The unit closed is the innermost
            unit not yet closed. There are no attributes allowed. Example:
            
            <div class="programlisting e939" xml:space="preserve">&lt;xqjp:complexPartEnd /&gt;</div>
            
         </div>
      </div><a name="BibliographyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e940">
         <div class="title e941">Bibliography</div>
         <div class="bibliomixed e942" xml:id="S9API" xreflabel="S9API">Michael Kay. Technical Documentation.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e943" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.saxonica.com/documentation/using-xquery/api-query.html</div>.
         </div>
         <div class="bibliomixed e944" xml:id="USGS-WS" xreflabel="USGS Web Services">U.S. Geological Survey (USGS).
            Technical Documentation of USGS Water-Quality Web Services. 
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e945" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://qwwebservices.usgs.gov/technical-documentation.html</div> .
         </div>
         <div class="bibliomixed e946" xml:id="W3C-Infoset" xreflabel="W3C Information Set">John Cowan and Richard Tobin, eds. 
            XML Information Set W3C Recommendation 4 February 2004.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e947" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xml-infoset/</div>.
         </div>
         <div class="bibliomixed e948" xml:id="W3C-XDM" xreflabel="W3C XDM">Mary Fernandez et al, eds. 
            XQuery 1.0 and XPath 2.0 Data Model (XDM) W3C Recommendation 23 January 2007.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e949" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xpath-datamodel/</div>.
         </div>
         <div class="bibliomixed e950" xml:id="W3C-XQuery" xreflabel="W3C XQuery">Scott Boag et al, eds. 
            XQuery 1.0: An XML Query Language W3C Recommendation 23 January 2007.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e951" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xquery/</div>.
         </div>
         <div class="bibliomixed e952" xml:id="JSR-XQJ" xreflabel="XQJ Spec">Jim Melton et al, eds. 
            JSR 225: XQuery API for JavaTM (XQJ) 1.0 Specfication.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e953" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://jcp.org/en/jsr/detail?id=225</div>.
         </div>
      </div>
   </div>
</div>