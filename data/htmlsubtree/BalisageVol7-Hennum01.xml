<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#TagLibrariesforXSLTandXQueryANCHOR" name="TagLibrariesforXSLTandXQueryTOC">Tag Libraries for XSLT and XQuery</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#EssentialTermsConceptsandLimitationsANCHOR" name="EssentialTermsConceptsandLimitationsTOC">Essential Terms, Concepts, and Limitations</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#RelatedWorkANCHOR" name="RelatedWorkTOC">Related Work</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#SimilaritiesandDifferencesBetweenXSTagandJavaTagLibrariesANCHOR" name="SimilaritiesandDifferencesBetweenXSTagandJavaTagLibrariesTOC">Similarities and Differences Between XSTag and Java Tag Libraries</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#TagProcessorsANCHOR" name="TagProcessorsTOC">Tag Processors</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#XSTagSyntaxANCHOR" name="XSTagSyntaxTOC">XSTag Syntax</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TopLevelElementsofTagLibrariesANCHOR" name="TopLevelElementsofTagLibrariesTOC">Top-Level Elements of Tag Libraries</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#BasicTagLibrariesANCHOR" name="BasicTagLibrariesTOC">Basic Tag Libraries</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#ExampleofaBasicTagLibraryANCHOR" name="ExampleofaBasicTagLibraryTOC">Example of a Basic Tag Library</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#ProcessorSpecificTagLibrariesANCHOR" name="ProcessorSpecificTagLibrariesTOC">Processor-Specific Tag Libraries</a></div>
               </div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TagDocumentsANCHOR" name="TagDocumentsTOC">Tag Documents</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#TagProcessorImplementationANCHOR" name="TagProcessorImplementationTOC">Tag Processor Implementation</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#PotentialInvestigationsANCHOR" name="PotentialInvestigationsTOC">Potential Investigations</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConclusionANCHOR" name="ConclusionTOC">Conclusion</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#GlossaryANCHOR" name="GlossaryTOC">Glossary</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BibliographyANCHOR" name="BibliographyTOC">Bibliography</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">as</div>
         <div class="singletermTERMS">authors</div>
         <div class="singletermTERMS">a result document</div>
         <div class="singletermTERMS">August 2 - 5, 2011</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">books</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2011</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">efhennum@gmail.com</div>
         <div class="singletermTERMS">Erik</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
         <div class="singletermTERMS">for</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">handler</div>
         <div class="singletermTERMS">handler</div>
         <div class="singletermTERMS">handler definition</div>
         <div class="singletermTERMS">Hennum</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">item()</div>
         <div class="singletermTERMS">implicit</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">myTag</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">name</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">onBook</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">pref</div>
         <div class="singletermTERMS">PhD Student</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">select</div>
         <div class="singletermTERMS">Senior Application Engineer</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">taglib:attendees</div>
         <div class="singletermTERMS">tag</div>
         <div class="singletermTERMS">title</div>
         <div class="singletermTERMS">tag:books</div>
         <div class="singletermTERMS">tag libraries</div>
         <div class="singletermTERMS">tag body</div>
         <div class="singletermTERMS">tag processor</div>
         <div class="singletermTERMS">the time of the call.</div>
         <div class="singletermTERMS">the time of handler processing</div>
         <div class="singletermTERMS">tag document</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
         <div class="singletermTERMS">version</div>
         <div class="singletermTERMS">v.zholudev@jacobs-university.de</div>
         <div class="singletermTERMS">Vyacheslav</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">xst</div>
         <div class="singletermTERMS">xst:taglib</div>
         <div class="singletermTERMS">xslt</div>
         <div class="singletermTERMS">xquery</div>
         <div class="singletermTERMS">xstag</div>
         <div class="singletermTERMS">xst:import</div>
         <div class="singletermTERMS">xst:tag</div>
         <div class="singletermTERMS">xst:param</div>
         <div class="singletermTERMS">xst:for-each</div>
         <div class="singletermTERMS">xslt:for-each</div>
         <div class="singletermTERMS">xst:content, xst:variable</div>
         <div class="singletermTERMS">xsl:copy-of, xsl:sequence, xsl:value-of</div>
         <div class="singletermTERMS">xst:content</div>
         <div class="singletermTERMS">xst:call</div>
         <div class="singletermTERMS">xst:with-param</div>
         <div class="singletermTERMS">xst:with-handler</div>
         <div class="singletermTERMS">xst:tag-lib</div>
         <div class="singletermTERMS">xst:handles</div>
         <div class="singletermTERMS">XSTag</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
         <div class="singletermTERMS">years</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
         <div class="singletermTERMS">Zholudev</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="TagLibrariesforXSLTandXQueryANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3">
      <div class="title e1">Tag Libraries for XSLT and XQuery</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2011</div>
            <div class="confdates e5">August 2 - 5, 2011</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">XML has mature tools for validation, transformation, and query,
               but current tools require a level of programming skills that many users
               who need dynamic documents do not have. Using the organizational pattern
               of tag libraries (borrowed from Java tag libraries), we propose to divide
               responsibilities for dynamic documents between two classes of people.
               Tag-library developers implement query, transformation, or component formatting
               for predefined tags in a library; document authors create dynamic documents
               by embedding elements from the tag library in HTML, XSL-FO, or other documents;
               when the document is processed, elements from the tag library are replaced
               by automatically generated content. A callback mechanism allows the document author
               to pass document fragments to the tag library for parameterization. Document authors
               can use tag libraries in ways not foreseen by the tag library developers and
               can combine tag libraries from different developers. A robust tag-library solution
               will foster better collaboration between XML developers and creators of XML documents.
               
            </div>
         </div>
         <div class="author e8">
            <div class="personname e9">
               <div class="firstname e10">Erik</div>
               <div class="surname e11">Hennum</div>
            </div>
            <div class="personblurb e12">
               <div class="para e13">Erik Hennum is a Senior Engineer at MarkLogic Corporation. He has worked with XML
                  and RDF representations for document repositories and processing over 10 years including
                  projects with taxonomy definition and subject classification. He was a member of the
                  OASIS DITA Technical Committee from inception to the DITA 1.2 specification.
               </div>
            </div>
            <div class="affiliation e14">
               <div class="jobtitle e15">Senior Application Engineer</div>
               <div class="orgname e16">MarkLogic Inc.</div>
            </div>
            <div class="email e17">efhennum@gmail.com</div>
         </div>
         <div class="author e18">
            <div class="personname e19">
               <div class="firstname e20">Vyacheslav</div>
               <div class="surname e21">Zholudev</div>
            </div>
            <div class="personblurb e22">
               <div class="para e23">Vyacheslav Zholudev graduated in May 2007 from Saint-Petersburg State University,
                  Russia with a Master degree
                  in Computer Science.  He is continuing his studies at Jacobs University Bremen as
                  a Ph.D. student.  Since
                  September of 2007 he has been working in the KWARC research group (Knowledge Adaptation
                  and Reasoning for
                  Content) under the supervision of Prof. Michael Kohlhase.
               </div>
            </div>
            <div class="affiliation e24">
               <div class="jobtitle e25">PhD Student</div>
               <div class="orgname e26">Jacobs University Bremen</div>
            </div>
            <div class="email e27">v.zholudev@jacobs-university.de</div>
         </div>
         <div class="legalnotice e28">
            <div class="para e29">Copyright © 2011 Erik Hennum and Vyacheslav Zholudev</div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e30" xml:id="sec-intro">
         <div class="title e31">Introduction</div>
         <div class="para e32">XML provides mature facilities for processing and presenting information.
            The solution developer's toolkit includes
            XSLT (see 
            <div class="xref e33" linkend="XSL2"></div>) to transform XML documents from one vocabulary
            to another, 
            XQuery (see 
            <div class="xref e34" linkend="XQ1"></div>) to retrieve and modify persisted XML documents
            for applications, and
            XHTML (see 
            <div class="xref e35" linkend="XH"></div>) and XSL-FO to present information on the screen or
            in print.
            These standards have become essential tools for web applications,
            publishing pipelines, electronic interchange, and many other challenges.
            Having successfully addressed such fundamental challenges,
            the XML community can now refine the toolkit.
            In particular, the XML community can consider whether lessons learned by other
            communities could have benefits for the XML technology portfolio. 
            
         </div>
         <div class="para e36">The experience of the Java community with tag libraries offers
            one such opportunity.  Java introduced tag libraries to broaden
            the appeal of an existing, successful technology, JSP (Java Server Pages)
            (see 
            <div class="xref e37" linkend="JSP"></div>).
            Widespread adoption exposed a fundamental issue with JSP:  
            JSP required skill levels that limited the set of users who could
            define dynamic documents and, by exposing robust programming capabilities,
            provided for a poor separation of concerns.
            The Java community solved these problems by introducing tag libraries.
         </div>
         <div class="para e38">In the Java technology stack, tag libraries are function libraries
            called by embedding a markup vocabulary (the tags) within documents.
            The approach is open-ended in that each tag library supplies its own
            markup vocabulary.
            
         </div>
         <div class="para e39">The canonical example of a tag library retrieves rows from a database
            for layout and styling in a document. The following example fragment has
            a single 
            <div class="code e40">taglib:attendees</div> tag:
            
         </div>
         <div class="programlisting e41" xml:space="preserve">
            &lt;html:table&gt;
            &lt;taglib:attendees&gt;
            &lt;html:tr&gt;
            &lt;html:td&gt;${last-name}&lt;/html:td&gt;
            &lt;html:td&gt;${first-name}&lt;/html:td&gt;
            &lt;/html:tr&gt;
            &lt;/taglib:attendees&gt;
            &lt;/html:table&gt;
            
         </div>
         <div class="para e42">The 
            <div class="code e43">taglib:attendees</div> tag calls a function in a tag library
            (whose Java implementation is omitted here).  The function implementation retrieves
            attendees from a database and repeats the content of the tag for each attendee.
            When generating output from the tag content, the function replaces the embedded
            
            <div class="code e44">${last-name}</div> and 
            <div class="code e45">${first-name}</div> expressions with the
            last name and first name values for the currently processed attendee.  Thus,
            a generated result document would resemble the following example:
         </div>
         <div class="programlisting e46" xml:space="preserve">
            &lt;html:table&gt;
            ...
            &lt;html:tr&gt;
            &lt;html:td&gt;Fitzgerald&lt;/html:td&gt;
            &lt;html:td&gt;Elena&lt;/html:td&gt;
            &lt;/html:tr&gt;
            &lt;html:tr&gt;
            &lt;html:td&gt;Green&lt;/html:td&gt;
            &lt;html:td&gt;Alfonso&lt;/html:td&gt;
            &lt;/html:tr&gt;
            &lt;html:tr&gt;
            &lt;html:td&gt;Hutz&lt;/html:td&gt;
            &lt;html:td&gt;Egberto&lt;/html:td&gt;
            &lt;/html:tr&gt;
            ...
            &lt;/html:table&gt;
            
         </div>
         <div class="para e47">As the example shows, the tag library approach provides for 
            a useful division of responsibilities.
            The tag library developer is responsible for packaging functionality (often
            information retrieval and manipulation as in the example but also a widget gallery
            or anything else that can be executed with a simple interface) as an embeddable
            vocabulary.
            The tag document author is responsible for assembling the tag library vocabulary
            with static elements (often providing style and layout specifications) to produce
            a dynamic document.
            By fostering collaboration between these audiences, tag libraries extend
            the reach of both participants.
            The Java community has confirmed the value of this collaboration with comprehensive
            toolkits such as JSF (Java Server Faces).
            
         </div>
         <div class="para e48">While XSLT and XQuery have always had the ability to combine
            literal result elements with dynamic content, the XML technology stack
            currently lacks a complete solution for providing this kind of division
            of responsibilities.
            This paper proposes adapting the Java Tag Library approach by implementing
            
            <div class="emphasis e49">tag libraries</div> in XSLT or XQuery and making use
            of tag vocabularies in XHTML, XSL-FO, or other XML documents.
            We use 
            <div class="emphasis e50">XSTag</div> (for XML Style Tags) as the working title
            for this variant on the tag library approach.
            
         </div>
      </div><a name="EssentialTermsConceptsandLimitationsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e51" xml:id="sec-concepts">
         <div class="title e52">Essential Terms, Concepts, and Limitations</div>
         <div class="para e53">The introduction made casual use of several terms that we summarize
            more formally here:
            
         </div>
         <div class="variablelist e54">
            <div class="varlistentry e55">
               <div class="term e56">tag</div>
               <div class="listitem e57">
                  <div class="para e58">An XML element that can be embedded in a document to call
                     a function in a tag library to produce dynamic XML result nodes.
                     
                  </div>
               </div>
            </div>
            <div class="varlistentry e59">
               <div class="term e60">tag vocabulary</div>
               <div class="listitem e61">
                  <div class="para e62">The tag element set that declares the functions
                     exposed by a tag library.
                  </div>
               </div>
            </div>
            <div class="varlistentry e63">
               <div class="term e64">tag library</div>
               <div class="listitem e65">
                  <div class="para e66">A function library (typically implemented in XSLT or XQuery)
                     exposed by means of a tag vocabulary.  (Note that this sense of the term differs
                     from other senses such as the documentation for an XML vocabulary.)
                  </div>
               </div>
            </div>
            <div class="varlistentry e67">
               <div class="term e68">host vocabulary</div>
               <div class="listitem e69">
                  <div class="para e70">A static XML vocabulary for documents; typically a presentation 
                     vocabulary such as XHTML or XSL-FO.
                  </div>
               </div>
            </div>
            <div class="varlistentry e71">
               <div class="term e72">tag document</div>
               <div class="listitem e73">
                  <div class="para e74">A document that mixes a host vocabulary and the tag vocabularies
                     from one or more tag libraries, potentially with other dynamic constructs such as
                     embedded XPath expressions and XSTag statements (a small set of flow control,
                     evaluation, and constructor statements equivalent to the core statements
                     from Java Tag Libraries).  Because the tag vocabularies are not part of the 
                     host vocabulary, tag documents are typically well formed rather than validated.
                     In practice, this limitation is not burdensome because the generated result
                     document should be inspected anyway after most changes to the tag document.
                     
                  </div>
               </div>
            </div>
            <div class="varlistentry e75">
               <div class="term e76">handler</div>
               <div class="listitem e77">
                  <div class="para e78">A document fragment that is supplied by the tag document but 
                     parameterized by the tag library.  The 
                     <div class="xref e79" linkend="sec-intro"></div>
                     gives a handler example in the content of the 
                     <div class="code e80">taglib:attendees</div> tag,
                     which is a document fragment that receives the last-name and first-name parameters
                     from the tag library.
                     A tag library can support handlers for any kind of event that might occur
                     during the execution of the tag including different phases of execution
                     or different element types encountered. 
                     
                  </div>
               </div>
            </div>
            <div class="varlistentry e81">
               <div class="term e82">tag processor</div>
               <div class="listitem e83">
                  <div class="para e84">An engine that reads a tag document and one or more tag libraries and 
                     generates a result document. 
                     
                  </div>
               </div>
            </div>
            <div class="varlistentry e85">
               <div class="term e86">result document</div>
               <div class="listitem e87">
                  <div class="para e88">A document produced by processing the dynamic elements within
                     a tag document. A result document can be validated with the schema of the
                     host vocabulary.
                     
                  </div>
               </div>
            </div>
         </div>
         <div class="para e89">The essential features of the XSTag approach are as follows:
            
         </div>
         <div class="itemizedlist e90">
            <div class="listitem e91">
               <div class="para e92">Simplicity of the tag document.  By constructing documents with
                  special XML elements instead of programming with calls and variable assignments,
                  people with less expertise can successfully generate dynamic documents.
                  In particular, the use of special XML elements puts the emphasis
                  on the semantics of the tag rather than the syntax of the tag call.
                  From the perspective of the tag document author, the XML element
                  effectively is the call to a function (without needing any other annotations).
                  
               </div>
            </div>
            <div class="listitem e93">
               <div class="para e94">Assembly of tag libraries by the tag document.  This feature
                  removes the need for programming expertise to produce new combinations of libraries
                  and
                  thus maximizes the potential reuse of tag libraries.
                  (UNIX pipes provide a good demonstration of the benefitss of assembly by the consumer.)
                  
               </div>
            </div>
            <div class="listitem e95">
               <div class="para e96">Both pull and push processing (see 
                  <div class="xref e97" linkend="PUSHPULL"></div>) in the tag
                  document. Tags let the tag document pull processing defined in a tag library,
                  while handlers let the tag library push processing control to the tag document.
                  Having both pull and push capabilities adds some conceptual complexity but
                  simplifies tag documents for cases similar to the example in the introduction.
                  In particular, handlers give the tag document author the ability
                  to interleave tags from different tag libraries at the fine-grained level in ways
                  unforeseen by the tag library developer.
                  
               </div>
            </div>
         </div>
         <div class="para e98">The XSTag approach is not a solution for every document processing challenge.
            The tag library approach is designed for producing dynamic documents (especially HTML)
            through layout and configuration or styling of components and data provided
            by reusable libraries.
            In particular, handlers are sufficient for push processing of a pre-defined set
            of events that occur during execution of one tag.  
            Handlers don't provide a good tool for transformation of a complex document
            from one large vocabulary into a different vocabulary.
            
         </div>
         <div class="para e99">Before explaining our approach in detail, we review some existing solutions
            for document authors.
            
         </div>
      </div><a name="RelatedWorkANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e100">
         <div class="title e101">Related Work</div>
         <div class="para e102">Several XML initiatives address the challenges of dynamic documents,
            including:
            
         </div>
         <div class="variablelist e103">
            <div class="varlistentry e104">
               <div class="term e105">Simplified Stylesheets</div>
               <div class="listitem e106">
                  <div class="para e107">XSLT provides Simplified Stylesheets (see 
                     <div class="xref e108" linkend="XSL2"></div>) as a method
                     for embedding XSLT statements inside a result element at the root level of a document.
                     Limited to the statements valid within an XSLT template, Simplified Stylesheets
                     cannot include or import other stylesheets and cannot provide matching templates.
                     In addition, template calls in Simplified Stylesheets use the xsl:call statement
                     and thus emphasize the XSLT syntax of the call.
                     
                  </div>
                  <div class="para e109">As a result, Simplified Stylesheets have some key limitations
                     with respect to the simplicity of the document, to assembly of libraries by a document,
                     and to push processing defined in a document.
                     An additional stylesheet can include or import Simplified Stylesheets
                     but this approach requires programming expertise to integrate documents
                     and libraries.
                     
                  </div>
               </div>
            </div>
            <div class="varlistentry e110">
               <div class="term e111">Cocoon XSP</div>
               <div class="listitem e112">
                  <div class="para e113">XSP (see 
                     <div class="xref e114" linkend="XSP"></div>) provides a method for replacing placeholders
                     in XML documents with the results from Java logic using bindings defined with XSLT.
                     Because Cocoon runs in a Java web application environment, the primary focus of XSP
                     is leveraging 
                     Java capabilities for producing content within XML documents.
                     
                  </div>
               </div>
            </div>
            <div class="varlistentry e115">
               <div class="term e116">XBL</div>
               <div class="listitem e117">
                  <div class="para e118">XBL (see 
                     <div class="xref e119" linkend="XBL2"></div>) provides flexible aggregation
                     of content fragments and of client resources such as JavaScript methods.
                     XBL has seen only partial implementation and limited adoption, perhaps because the
                     sophistication of the binding mechanisms is challenging for document authors.
                     
                  </div>
               </div>
            </div>
            <div class="varlistentry e120">
               <div class="term e121">Template placeholder replacement</div>
               <div class="listitem e122">
                  <div class="para e123">The general approach of writing stylesheets to replace placeholders
                     in a template document with dynamically generated content
                     was worked out ten years ago (see 
                     <div class="xref e124" linkend="XSTEMP"></div>).
                     RunDMC (see 
                     <div class="xref e125" linkend="RDMC"></div>) is a more recent XSLT-based framework exemplifying
                     the approach.
                     RunDMC includes the ability to parameterize dynamic generation with content supplied
                     by the placeholder.
                     While encouraging simple documents, template placeholders typically don't address
                     assembly of libraries by a document or push processing defined in a document.
                     These tasks typically remain the responsibility of the template processor,
                     minimizing the potential for a library approach.
                     
                  </div>
               </div>
            </div>
            <div class="varlistentry e126">
               <div class="term e127">XForms</div>
               <div class="listitem e128">
                  <div class="para e129">XForms (see 
                     <div class="xref e130" linkend="XForms"></div>) supports forms interaction
                     with a separation of model, view, and controller.  Such interactions are behaviors
                     of the runtime document.  Thus, XForms solves a fundamentally different
                     problem than dynamic composition of the runtime document.  For instance,
                     a tag library could encapsulate the XForm model, view, and bindings
                     for a form, providing a simpler interface for inserting the form into
                     the document.  As another example, a tag library could encapsulate alternative
                     event handlers, providing a gallery of options of predefined behaviors for a
                     specific form.
                     
                  </div>
               </div>
            </div>
         </div>
      </div><a name="SimilaritiesandDifferencesBetweenXSTagandJavaTagLibrariesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e131">
         <div class="title e132">Similarities and Differences Between XSTag and Java Tag Libraries</div>
         <div class="para e133">While borrowing heavily from Java Tag Libraries, XSTag also differs
            in some important ways:
            
         </div>
         <div class="variablelist e134">
            <div class="varlistentry e135">
               <div class="term e136">Expression language</div>
               <div class="listitem e137">
                  <div class="para e138">Java Tag Libraries can embed a simple expressions in attribute values or
                     element content. Scenarios for use of expressions include:
                     
                  </div>
                  <div class="itemizedlist e139">
                     <div class="listitem e140">
                        <div class="para e141">Evaluating variables</div>
                     </div>
                     <div class="listitem e142">
                        <div class="para e143">Manipulating string, numeric, and date values</div>
                     </div>
                     <div class="listitem e144">
                        <div class="para e145">Extracting values from XML documents</div>
                     </div>
                     <div class="listitem e146">
                        <div class="para e147">Copying portions of XML documents</div>
                     </div>
                  </div>
                  <div class="para e148">XSTag follows XQuery in supporting delimited XPath expressions
                     in both attribute value and element content (thus differing from XSLT,
                     which allows delimited XPath expressions only in attribute values).
                     
                  </div>
               </div>
            </div>
            <div class="varlistentry e149">
               <div class="term e150">Basic Statements</div>
               <div class="listitem e151">
                  <div class="para e152">Java Tag Libraries provide a reserved XML vocabulary for basic statements
                     within a tag document including capturing the result of an expression
                     in a variable, conditional branching, looping and so on.
                     
                  </div>
                  <div class="para e153">These statements have equivalents in the XSLT statements allowed within
                     a template including xsl:choose, xsl:if, and xsl:variable.  
                     While tag libraries can minimize the need for such statements, 
                     the availability of such statements can have practical importance as a workaround.
                     
                  </div>
               </div>
            </div>
            <div class="varlistentry e154">
               <div class="term e155">Function Binding</div>
               <div class="listitem e156">
                  <div class="para e157">Java Tag Libraries use declarations to associate
                     XML elements with Java functions.
                     In an XML processing contexts, such indirection seems potentially confusing 
                     instead of useful.
                     Instead, XSTag binds a tag call in the tag document to a tag definition with the
                     same QName in the tag library.
                     
                  </div>
               </div>
            </div>
            <div class="varlistentry e158">
               <div class="term e159">Handlers and Parameters</div>
               <div class="listitem e160">
                  <div class="para e161">Java Tag Libraries refer to a handler as a 
                     <div class="emphasis e162">tag body</div>.
                     In Java Tag Libraries, a tag can have at most one handler.
                     The Java tag body is also a closure with respect to the tag document
                     in that variables in scope within the tag document can be evaluated
                     in the tag body.
                     
                  </div>
                  <div class="para e163">While the limitation to one handler is adequate for regular relational data,
                     a single handler is not enough to process an XML tree structure or complex
                     XML data vocabularies.
                     XSLT has template match rules and XQuery has typeswitch expressions for this reason.
                     To process XML content with a tag, different dynamic content must be produced
                     for different elements.
                     For that reason, XSTag allows multiple handlers for a single tag
                     and permits atomic values or XML nodes as parameters.
                     
                  </div>
               </div>
            </div>
            <div class="varlistentry e164">
               <div class="term e165">Tag Document Inclusion</div>
               <div class="listitem e166">
                  <div class="para e167">Java Tag Libraries have inclusion statements to insert
                     one tag document inside another tag document.
                     Such inclusion statements resemble a tag call.
                     Rather that introduce two different kinds of tag calls,
                     XSTag supports reuse of document fragments through basic tag libraries
                     with tags that merely return a static document fragment.
                     
                  </div>
               </div>
            </div>
         </div>
         <div class="para e168">Having reviewed alternative strategies and Java Tag Libraries
            background, we now introduce our approach for processing tag libraries.
            
         </div>
      </div><a name="TagProcessorsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e169">
         <div class="title e170">Tag Processors</div>
         <div class="para e171">The 
            <div class="emphasis e172">tag processor</div> is responsible for
            parsing the tag document and imported tag libraries and 
            producing 
            <div class="emphasis e173">a result document</div>.  Whether implemented
            by interpretting the sources or by preprocessing and then executing XSLT, XQuery,
            or
            some other language, the steps for producing a result document are conceptually similar:
            
         </div>
         <div class="orderedlist e174">
            <div class="listitem e175">
               <div class="para e176">The tag processor descends the XML tree of a tag document, defining variables  
                  in scope within a branch. Those variable are outside any tag call and, essentially,
                  are constants.
                  The tag processor also evaluates any expressions outside of a tag call, replacing
                  each expression
                  with its result. 
                  
               </div>
            </div>
            <div class="listitem e177">
               <div class="para e178">When the tag processor reaches a tag call, it performs evaluation and replacement
                  on expressions outside of any handler.  We call this phase 
                  <div class="emphasis e179">the time of the call.</div>
                  Conceptually, for any expression within a handler, the tag processor replaces any
                  variable
                  defined outside the handler with its value at the time of the call.
                  That is, a handler is a closure with respect to the tag document outside
                  the tag call.
                  
               </div>
            </div>
            <div class="listitem e180">
               <div class="para e181">As the tag processor is executing the tag, when the processor 
                  reaches a call to a handler, the processor evaluates the expressions 
                  in the handler, replacing parameters of the handler with their values before
                  replacing each expression with its result.
                  This phase is called 
                  <div class="emphasis e182">the time of handler processing</div>.
                  
               </div>
            </div>
         </div>
         <div class="para e183">As shown in 
            <div class="xref e184" linkend="workflow-illo"></div>, a tag processor can be
            implemented in XSLT as a preprocessor that generates XSLT modules for execution
            by a general-purpose XSLT processor; a parallel approach is possible in XQuery.
            
         </div>
         <div class="figure e185" xml:id="workflow-illo" xreflabel="Workflow">
            <div class="title e186">Tag Processing Workflow</div>
            <div class="mediaobject e187">
               <div class="imageobject e188">
                  <div class="metaBox e189"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e318').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e318" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e189'
                           </span><span class="metaAttribute">fileref='../../../vol7/graphics/Hennum01/Hennum01-001.png'
                           </span><span class="metaAttribute">format='png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
            <div class="caption e190">
               <div class="para e191">Preprocessing a tag document and tag libraries and
                  then executing XSLT or XQuery.
               </div>
            </div>
         </div>
      </div><a name="XSTagSyntaxANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e192">
         <div class="title e193">XSTag Syntax</div>
         <div class="para e194">Due to the division of responsibilities, 
            tag libraries and tag documents have different audiences and thus
            different syntax. 
            
         </div><a name="TopLevelElementsofTagLibrariesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e195" xml:id="sec-xstag-top">
            <div class="title e196">Top-Level Elements of Tag Libraries</div>
            <div class="para e197">The XSTag statements in the tag library and tag document have
               a namespace to distinguish them from other XML vocabularies.   
               (For our prototype, we have used 
               <div class="code e198">http://code.google.com/p/xstag/ns/2011/</div>.)
               Throughout the paper, the XSTag namespace is indicated with the prefix 
               <div class="code e199">xst</div>.
               
            </div>
            <div class="para e200">Tag libraries can be implemented using a basic statement set
               that all XSTag processors must support or using the language
               of the tag processor (either XSLT or XQuery in our prototype) to implement
               the tag.
               Basic and processor-specific tag libraries have similar declarations for
               the root element and its top-level child elements:
               
            </div>
            <div class="variablelist e201">
               <div class="varlistentry e202">
                  <div class="term e203">
                     <div class="code e204">xst:taglib</div>
                  </div>
                  <div class="listitem e205">
                     <div class="para e206">The required root element, which must have an 
                        <div class="code e207">version</div>
                        attribute identifying the level of the tag processor.
                        In addition, a processor-specific tag library must provide a 
                        <div class="code e208">for</div> attribute identifying
                        the tag processor language (such as 
                        <div class="code e209">xslt</div> or 
                        <div class="code e210">xquery</div>).
                        A basic tag library may omit the 
                        <div class="code e211">for</div> attribute or supply the 
                        <div class="code e212">xstag</div> value
                        for the attribute.
                        
                     </div>
                  </div>
               </div>
               <div class="varlistentry e213">
                  <div class="term e214">
                     <div class="code e215">xst:import</div>
                  </div>
                  <div class="listitem e216">
                     <div class="para e217">An optional statement to import other libraries.  The body of tags
                        can call the functions or tags supplied by the imported library.
                        The 
                        <div class="code e218">for</div> attribute identifies the tag processor when the import should only be resolved
                        for that processor.  If the 
                        <div class="code e219">for</div> attribute is set to 
                        <div class="code e220">xstag</div> or omitted,
                        the imported library is a basic tag library, and the import should always be resolved.
                        
                     </div>
                  </div>
               </div>
               <div class="varlistentry e221">
                  <div class="term e222">
                     <div class="code e223">xst:tag</div> and 
                     <div class="code e224">xst:param</div>
                  </div>
                  <div class="listitem e225">
                     <div class="para e226">Declares a tag and its parameters. 
                        The 
                        <div class="code e227">name</div> attribute must supply 
                        a QName, e.g. 
                        <div class="code e228">&lt;xst:tag name="pref:myTag"&gt;...&lt;/xst:tag&gt;</div>, 
                        where prefix 
                        <div class="code e229">pref</div> is bound to some namespace, and 
                        <div class="code e230">myTag</div> is the name of the tag.
                        The tag element should have an 
                        <div class="code e231">as</div> attribute to declare the return type of the tag,
                        using any atomic or node type allowed in XPath.
                        Omitting the 
                        <div class="code e232">as</div> attribute is equivalent to specifying
                        the 
                        <div class="code e233">item()</div> XPath type and thus requiring calls to tolerate any item.
                        
                     </div>
                     <div class="para e234">Similar to XSLT, parameters take a 
                        <div class="code e235">name</div> attribute and
                        can take the 
                        <div class="code e236">as</div> attribute
                        to declare any atomic or node type and a 
                        <div class="code e237">select</div> attribute or content to declare a default value
                        if the tag call does not pass the parameter.
                        In addition, one of the tag parameter can have an 
                        <div class="code e238">implicit</div> attribute set to true,
                        which allows a shortcut in tag calls (please see 
                        <div class="xref e239" linkend="sec_tag-doc"></div>).
                        
                     </div>
                     <div class="para e240">In addition to the standard XPath atomic or node types, parameters can also have a
                        
                        <div class="emphasis e241">handler</div> type. A handler type resembles an XPath 2.1 function signature but requires
                        a name for each parameter of the handler. The handler is required or optional on the
                        tag call
                        based on whether its signature has a required or optional return value.
                        A tag's handler parameter may contain a default handler definition.
                        
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e242">Basic tag libraries and processor-specific tag libraries differ
               in the implementation of the body of the tag definition.
               
            </div><a name="BasicTagLibrariesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e243" xml:id="sec_xstag-tl">
               <div class="title e244">Basic Tag Libraries</div>
               <div class="para e245">Within a basic tag library, tag definitions are implemented with basic tag statements.
                  These statements are modeled on a subset of XSLT instead of introducing a new vocabulary
                  so that XSLT developers can easily write tag libraries and so that advanced document
                  authors
                  who learn how to write basic tag libraries can progress to XSLT.
                  
               </div>
               <div class="variablelist e246">
                  <div class="varlistentry e247">
                     <div class="term e248">branching and looping</div>
                     <div class="listitem e249">
                        <div class="para e250">
                           <div class="code e251">xst:choose/xst:when/xst:otherwise, xst:for-each, xst:if</div>
                           
                        </div>
                        <div class="para e252">The 
                           <div class="code e253">xst:for-each</div> element differs from 
                           <div class="code e254">xslt:for-each</div> in requiring
                           a 
                           <div class="code e255">name</div> attribute for the current iterated item.
                        </div>
                     </div>
                  </div>
                  <div class="varlistentry e256">
                     <div class="term e257">variables and evaluation</div>
                     <div class="listitem e258">
                        <div class="para e259">
                           <div class="code e260">xst:content, xst:variable</div>
                           
                        </div>
                        <div class="para e261">Because XSLT has three alternatives (
                           <div class="code e262">xsl:copy-of, xsl:sequence, xsl:value-of</div>)
                           for inserting the result of an expression, we have introduced a 
                           <div class="code e263">xst:content</div> statement
                           for inserting the result of an expression as content within an element.
                           
                        </div>
                     </div>
                  </div>
                  <div class="varlistentry e264">
                     <div class="term e265">constructors</div>
                     <div class="listitem e266">
                        <div class="para e267">
                           <div class="code e268">xst:attribute, xst:comment, xst:element, xst:namespace,
                              xst:processing-instruction, xst:text
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="varlistentry e269">
                     <div class="term e270">calls</div>
                     <div class="listitem e271">
                        <div class="para e272">
                           <div class="code e273">xst:call</div> with either the 
                           <div class="code e274">name</div> attribute to call a function
                           in an imported function library (such as a callable template in an imported XSLT module
                           or
                           a declared function in an imported XQuery library module), the 
                           <div class="code e275">tag</div> attribute to call
                           a tag in the current library or an imported tag library, or the 
                           <div class="code e276">handler</div> attribute
                           to call a handler passed by the tag call.
                           Similar to XSLT, the call can take 
                           <div class="code e277">xst:with-param</div> subelements to pass
                           parameters.  When calling a tag, the call can also take 
                           <div class="code e278">xst:with-handler</div> subelements
                           	        to pass handlers to the called tag (similar to an XPath 2.1 function object).
                        </div>
                     </div>
                  </div>
               </div>
               <div class="para e279">
                  A tag library can define a handler only as the default implementation for a handler
                  parameter
                  (and not, for instance, as the content of a variable).  
                  
               </div>
               <div class="para e280">Intentionally less powerful than XSLT or XQuery, basic tag libraries provide functionality
                  that can be supported on any tag processor. 
                  Basic tag libraries can support reuse of headers and footers through simple tags
                  that take no parameters and return a document fragment.
                  
               </div>
            </div><a name="ExampleofaBasicTagLibraryANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e281" xml:id="sec_xstag-ex">
               <div class="title e282">Example of a Basic Tag Library</div>
               <div class="para e283">
                  As an example, we will use the typical XML example of a book store. 
                  For simplicity we consider a flat book structure in XML documents. Assume that we
                  have multiple XML documents 
                  that contain  a list of books where each of those may contain the following information:
                  
                  a title, genre, multiple authors, a description, a publish date and price.
                  Some sample data in this structure:
                  
               </div>
               <div class="programlisting e284" xml:space="preserve">
                  
                  &lt;books id="publisherX"&gt;
                  &lt;book id="203"&gt; 
                  &lt;title&gt;XQuery Kick Start&lt;/title&gt; 
                  &lt;author&gt;James McGovern&lt;/author&gt; 
                  &lt;author&gt;...&lt;/author&gt;
                  ...    
                  &lt;genre&gt;Computer&lt;/genre&gt;    
                  &lt;year&gt;2010&lt;/year&gt; 
                  &lt;price&gt;46.99&lt;/price&gt;
                  &lt;description&gt; This book is about ... &lt;/description&gt;    
                  &lt;/book&gt;      
                  &lt;/books&gt;
                  
                  
               </div>
               <div class="para e285">
                  To support a book store use case, a basic tag library with a single tag definition
                  might resemble
                  the following example: 
                  
               </div>
               <div class="programlisting e286" xml:space="preserve">
                  
                  &lt;xst:taglib version="0.2"
                  xmlns:fn  = "http://www.w3.org/2005/xpath-functions"
                  xmlns:xst = "http://code.google.com/p/xstag/ns/2011/"
                  xmlns:tag = "http://code.google.com/p/xstag/ns/demo/tag/books"&gt;
                  
                  &lt;xst:tag name="tag:books" as="element()*"&gt;
                  &lt;!-- tag definition parameters --&gt; 
                  &lt;xst:param name="years" as="xs:gYear*"/&gt;
                  &lt;xst:param name="onBook" implicit="true"
                  as="handler($title as xs:string, $authors as xs:string+) 
                  as element()?"&gt;
                  &lt;!-- default handler implementation --&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;xst:content select="$title"/&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;xst:content select="fn:string-join($authors, '; ')"/&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/xst:param&gt;
                  &lt;!-- The tag definition body --&gt;
                  &lt;!-- getting the books for the requested years --&gt;
                  &lt;xst:variable name="books" as="element()*"
                  select="document('books.xml')/books/book[fn:empty($years) or data(year)=$years]"/&gt;
                  &lt;!-- processing each book by calling the handler --&gt;
                  &lt;xst:for-each name="book" select="$books"&gt;
                  &lt;xst:call handler="$onBook"&gt;
                  &lt;xst:with-param name="title"   select="$book/title/fn:string(.)"/&gt;
                  &lt;xst:with-param name="authors" select="fn:string-join($book/author/fn:string(.), ',
                  ')"/&gt;
                  &lt;/xst:call&gt;
                  &lt;/xst:for-each&gt;
                  &lt;/xst:tag&gt;
                  &lt;/xst:taglib&gt;
                  
                  
               </div>
               <div class="para e287">The above tag library contains only one tag definition that is bound to
                  	namespace 
                  <div class="code e288">http://code.google.com/p/xstag/ns/demo/tag/books</div> 
                  via the prefix 
                  <div class="code e289">tag</div>. The 
                  <div class="code e290">books</div> tag
                  	takes two parameters:  a list of xs:gYear values that denote years
                  	of publications and a handler parameter that, in turn, takes a title and
                  	a list of authors. If a tag caller does not provide
                  	a 
                  <div class="emphasis e291">handler definition</div> then the default implementation within the handler
                  	is used.  In the example, the default
                  	handler implementation returns an HTML table row that contains two columns: a book
                  title and
                  	concatenated list of authors.  The default handler assumes that the tag document
                  will wrap
                  	an HTML table around the call to the 
                  <div class="code e292">books</div> tag.
                  
               </div>
               <div class="para e293">The handler definition body retrieves books based on
                  	supplied years.
                  	Then, for each retrieved book element, the tag definition body calls the
                  	handler definition with the 
                  <div class="code e294">title</div> and 
                  <div class="code e295">authors</div>
                  	parameters of the handler.    
                  
               </div>
            </div><a name="ProcessorSpecificTagLibrariesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e296">
               <div class="title e297">Processor-Specific Tag Libraries</div>
               <div class="para e298">A processor-specific tag library has the same 
                  top-level statements (see 
                  <div class="xref e299" linkend="sec-xstag-top"></div>) as
                  a basic tag library including the tag declaration statements
                  (that is, the 
                  <div class="code e300">xst:tag</div> and 
                  <div class="code e301">xst:param</div> statements).
                  The root 
                  <div class="code e302">xst:tag-lib</div> statement must have a 
                  <div class="code e303">for</div>
                  attribute identifying the processor-specific language
                  of the tag library.
                  The body of the tag definitions must be implemented
                  in the processor-specific language.
                  For instance, an XQuery-specific tag library uses XQuery statements
                  after the 
                  <div class="code e304">xst:param</div> elements inside the 
                  <div class="code e305">xst:tag</div> definition.
                  
               </div>
               <div class="para e306">The only exception applies to calls to handlers. 
                  The tag processor must be able to parse these calls, so calls to handlers must embed
                  the 
                  <div class="code e307">xst:call</div> statement where appropriate within the tag definition.
                  
               </div>
               <div class="para e308">  
                  The example from 
                  <div class="xref e309" linkend="sec_xstag-ex"></div> could be rewritten as an XQuery-specific
                  tag library as follows:
                  
               </div>
               <div class="programlisting e310" xml:space="preserve">
                  
                  &lt;xst:taglib version="0.2"
                  for="xquery"
                  xmlns:fn  = "http://www.w3.org/2005/xpath-functions"
                  xmlns:xst = "http://code.google.com/p/xstag/ns/2011/"
                  xmlns:tag = "http://code.google.com/p/xstag/ns/demo/tag/books"&gt;
                  
                  &lt;xst:tag name="tag:books" as="element()*"&gt;
                  &lt;!-- tag definition parameters --&gt; 
                  &lt;xst:param name="years" as="xs:gYear*"/&gt;
                  &lt;xst:param name="onBook" implicit="true"
                  as="handler($title as xs:string, $authors as xs:string+) 
                  as element()?"&gt;
                  &lt;!-- default handler implementation --&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;xst:content select="$title"/&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;xst:content select="fn:string-join($authors, '; ')"/&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/xst:param&gt;
                  &lt;!-- The tag definition body --&gt;
                  &lt;!-- getting the books for the requested years --&gt;
                  let $books as element()* :=
                  document('books.xml')/books/book[fn:empty($years) or data(year)=$years]
                  &lt;!-- processing each book by calling the handler --&gt;
                  for $book in $books
                  return
                  &lt;xst:call handler="$onBook"&gt;
                  &lt;xst:with-param name="title"   select="$book/title/fn:string(.)"/&gt;
                  &lt;xst:with-param name="authors" select="fn:string-join($book/author/fn:string(.), ',
                  ')"/&gt;
                  &lt;/xst:call&gt;
                  &lt;/xst:tag&gt;
                  &lt;/xst:taglib&gt;
                  
                  
               </div>
               <div class="para e311">The revision above does the same thing as the basic tag library but in XQuery.
                  Reasons for using a processor-specific tag library
                  include familiarity with the language as well as requirements that exceed
                  the limited capabilities of basic tag libraries. 
                  
               </div>
            </div>
         </div><a name="TagDocumentsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e312" xml:id="sec_tag-doc">
            <div class="title e313">Tag Documents</div>
            <div class="para e314">A 
               <div class="emphasis e315">tag document</div> calls a tag provided by a tag library
               by embedding an XML element with the same QName as the tag.
               The element making the tag call can have: 
               <div class="itemizedlist e316">
                  <div class="listitem e317">
                     <div class="para e318">Subelements or attributes that supply parameters of the tag.
                        
                     </div>
                  </div>
                  <div class="listitem e319">
                     <div class="para e320">Subelements that supply handler definitions for handler parameters of the tag.
                        The container subelement must take an 
                        <div class="code e321">xst:handles</div> attribute that lists the parameters
                        received by the handler. 
                        
                     </div>
                     <div class="para e322">If the tag definition passes a parameter to the handler definition
                        that the handler definition does need, the handler definition can simply ignore
                        the parameter.  In particular, the 
                        <div class="code e323">xst:handles</div>
                        attribute does not have to list parameters that aren't used in the handler definition.
                        The order of parameters in the 
                        <div class="code e324">xst:handles</div>
                        attribute does not matter.
                        
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e325">A tag document can only define handlers as part of a tag call. A tag call can be nested
               within a handler.
            </div>
            <div class="para e326">If a tag has an implicit parameter (as explained in 
               <div class="xref e327" linkend="sec-xstag-top"></div>), the
               tag element can omit the subelement container and contain the content of the parameter
               directly. When containing the content of an implicit handler, the tag call must supply
               
               <div class="code e328">xst:handles</div> attribute.
            </div>
            <div class="para e329">Variable scope is limited to following siblings and their descendants. Handlers can
               refer
               to variables in scope. An example of a tag document: 
            </div>
            <div class="programlisting e330" xml:space="preserve">
               
               &lt;html xst:version="0.2"
               xmlns:xst = "http://code.google.com/p/xstag/ns/2011/"
               xmlns:fn  = "http://www.w3.org/2005/xpath-functions"
               xmlns:tag = "http://code.google.com/p/xstag/ns/demo/tag/books"
               &gt;
               &lt;!-- Importing a books tag library --&gt;
               &lt;xst:import href="BooksTaglib.xstag"/&gt;
               &lt;xst:variable name="years" select="(2010, 2009, 2008)"/&gt;
               &lt;head&gt;
               &lt;title&gt;Books for {$years} years&lt;/title&gt;
               &lt;/head&gt;
               &lt;body&gt;
               &lt;table&gt;
               &lt;tag:books years="{$years}" xst:handles="$title, $authors"&gt;
               &lt;tr&gt;
               &lt;td&gt;{$title}&lt;/td&gt;
               &lt;td&gt;{fn:string-join($authors, ', ')}&lt;/td&gt;
               &lt;td&gt;{fn:count($authors)}&gt;&lt;/td&gt;
               &lt;/tr&gt;        
               &lt;/tag:books&gt;
               &lt;/table&gt;
               &lt;/body&gt;
               &lt;/html&gt;
               
               
            </div>
            <div class="para e331">The example above creates an HTML document with a table of
               	books for particular years. This tag document makes use
               	of a tag library presented in 
               <div class="xref e332" linkend="sec_xstag-tl"></div>. 
               	First of all we import the tag library using the import statement:
               
               <div class="code e333">&lt;xst:import href="BooksTaglib.xstag"/&gt;</div>. 
               	In order to use tags from that library, the namespace for
               	the tag call element (
               <div class="code e334">tag:books</div>) 
               	has to match the namespace for the tag definition element but does not have to have
               the
               	same prefix.
               
            </div>
            <div class="para e335">Our tag has two parameters (refer to 
               <div class="xref e336" linkend="sec_xstag-tl"></div>
               	for more details): a sequence of publishing years and
               	a handler parameter that takes a string parameter for a title and a
               	sequence of strings for the list of authors.
               	The 
               <div class="code e337">tag:books</div> tag call contains
               	a 
               <div class="code e338">years</div> attribute to supply the 
               <div class="code e339">years</div> parameter
               	and content to supply the handler definition for the 
               <div class="code e340">onBook</div> handler parameter.
               
            </div>
            <div class="para e341">The 
               <div class="code e342">xst:handles</div> attribute on the tag call identifies the set of parameters
               	that the handler expects the tag definition to pass.
               
            </div>
            <div class="para e343">While a tag processor can check consistency by looking at both a tag
               	library and a tag document,
               	there are some advantages to having the 
               <div class="code e344">xst:handles</div> attribute:
               
            </div>
            <div class="itemizedlist e345">
               <div class="listitem e346">
                  <div class="para e347">By looking for the 
                     <div class="code e348">xst:handles</div> attribute,
                     a document author can find the handlers (for instance, after taking on 
                     maintenance responsibility for someone else's  tag document).
                     
                  </div>
               </div>
               <div class="listitem e349">
                  <div class="para e350">A tag processor can compare the parameters expected by a
                     handler definition with the parameters declared formally for the handler by the tag
                     definition and detect
                     errors if, for instance, a change in the tag library invalidates the tag document.
                     
                  </div>
               </div>
               <div class="listitem e351">
                  <div class="para e352">A tag processor can also check to confirm that every variable reference in
                     the tag document is in scope either within the tag document or as a parameter
                     of the handler definition.
                     
                  </div>
               </div>
            </div>
            <div class="para e353">The 
               <div class="code e354">xst:handles</div> attribute does not control the handler call 
               from the tag definition to the handler definition. 
               Instead, the handles attribute declares the tag document's expecations
               for how the tag definition will call the handler (in this respect, similar
               to a C external function signature for a function defined in a library). 
               
            </div>
            <div class="para e355">Results of tag calls can be bound to some variables and those variables
               	can be reused in other tag calls.
               
            </div>
         </div>
      </div><a name="TagProcessorImplementationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e356">
         <div class="title e357">Tag Processor Implementation</div>
         <div class="para e358">Prototype XSLT and XQuery implementations of XSTag are available
            at 
            <div class="code e359">http://code.google.com/p/xstag/</div>.
            
         </div>
         <div class="para e360">The XSLT implementation makes use of Dimitre Novatchev's technique for 
            dynamic templates (see 
            <div class="xref e361" linkend="FXSL"></div>):
         </div>
         <div class="itemizedlist e362">
            <div class="listitem e363">
               <div class="para e364">A tag call is preprocessed to a call passing a temporary XML document that has a
                  subelement for each handler and a subelement capturing the state of each variable
                  defined outside the call but referenced in a handler. 
               </div>
            </div>
            <div class="listitem e365">
               <div class="para e366">A handler is preprocessed to a match template for the handler subelement, assigning
                  local
                  variables from the state subelements for each out of scope variable that is referenced
                  in the
                  handler. 
               </div>
            </div>
            <div class="listitem e367">
               <div class="para e368"> A tag template is preprocessed to a named template with a single parameter for the
                  temporary XML document and local variables for the handler subelements that (when
                  not provided
                  by the temporary document) default to the content of the handler parameter. 
               </div>
            </div>
            <div class="listitem e369">
               <div class="para e370"> A handler call is preprocessed to an apply on the handler subelement of the call
                  document. 
               </div>
            </div>
         </div>
         <div class="para e371">In the XQuery implementation:</div>
         <div class="itemizedlist e372">
            <div class="listitem e373">
               <div class="para e374"> If the XQuery processor supports closures, a preprocessor can convert a handler into
                  a
                  closure that is passed as part of the tag call. The preprocessor can treat the handlers
                  in a
                  tag library as a function item parameter. 
               </div>
            </div>
            <div class="listitem e375">
               <div class="para e376"> If the XQuery processor supports function items, a preprocessor can convert a handler
                  into function and pass the function to the tag. The preprocessor can also capture
                  the state at
                  the point of call and restore the state within the constructed function by passing
                  a temporary
                  XML document (as in the XSLT implementation). 
               </div>
            </div>
            <div class="listitem e377">
               <div class="para e378"> Otherwise, a preprocessor can generate a copy of the tag library for each tag document,
                  generating a function for each handler from the tag document and passing and restoring
                  the
                  state as a temporary XML document. 
                  
               </div>
            </div>
         </div>
         <div class="para e379">Both the XSLT and XQuery implementations in the prototype have limitations,
            especially in their support for processor-specific tag libraries.
            
         </div>
      </div><a name="PotentialInvestigationsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e380">
         <div class="title e381">Potential Investigations</div>
         <div class="para e382">Tag library developers must provide guidance
            to tag document authors on the use of the library.
            To make that easier and more consistent, a mechanism similar to JavaDoc
            is important for maintaining documentation source within tag libraries
            and generating viewable documentation.
            Existing projects such as XSLTdoc 
            <div class="xref e383" linkend="XSLD"></div>
            or xqDoc 
            <div class="xref e384" linkend="XQD"></div>
            may be adaptable for this purpose.
            
         </div>
         <div class="para e385">All of the examples in this paper focus on events during
            single-pass generation of a result document within an XML processing
            environment.
            Other scenario are equally possible:
            
         </div>
         <div class="itemizedlist e386">
            <div class="listitem e387">
               <div class="para e388">For Client UI scenarios, a tag library could generate HTML documents
                  that use JavaScript to process some handlers in response to UI events
                  such as button clicks.
                  
               </div>
            </div>
            <div class="listitem e389">
               <div class="para e390">For AJAX scenarios, a tag library could generate HTML documents
                  that process some handlers by connecting to a service on a server.
                  
               </div>
            </div>
         </div>
         <div class="para e391">More generally, tag documents and basic tag libraries with a simpler
            expression language than XPath could be converted to JavaScript and executed
            on the client.
            The advent of JavaScript-based XSLT and XQuery implementations also raises
            the possibility of using XPath in the browser.
            The specifics for processing some tag calls on document request, some tag calls
            entirely on the client, and some tags calls through AJAX requests requires
            more investigation.
            
         </div>
         <div class="para e392">Tag libraries benefit from the movement by the current draft
            XQuery and XSLT standards to support function objects.
            Where the processor supports function objects with closure over variables
            in scope for the function definition, handlers become trivial to implement.
            The current XQuery draft envisions such function objects.  The tag library
            approach suggests the value of such function objects for XSLT as well.
            
         </div>
         <div class="para e393">A more interesting possibility would be incorporating a tag library
            capability within the XSLT and XQuery standards as a shared definition (similar
            to XPath).  
            Tag library developers would benefit because (especially in XQuery)
            a more natural syntax could be specified for a processor-specific tag library
            that is difficult to support with a preprocessor.
            Tag document authors would also benefit from direct processing instead of
            preprocessing.
            For instance, type coercion errors during runtime processing could be traced
            directly to the tag document or tag library source for better debugging output.
            
         </div>
      </div><a name="ConclusionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e394">
         <div class="title e395">Conclusion</div>
         <div class="para e396">Java Tag Libraries have seen wide adoption as a strategy
            for dynamic documents
            because of the division of responsibilities between tag document authors
            and tag library developers and because of the ability to combine tag libraries
            as needed for new solutions.
            In particular, the approach removes the need to write binding logic to add or
            change the libraries used in a document.
            
         </div>
         <div class="para e397">This paper demonstrates the feasibility of adapting the Java Tag Libraries
            approach for use with XML technologies.
            Tag libraries can support a set of data retrieval
            and manipulation functions as well as UI components.  Tag documents can support these
            functions by embedding tags within a presentation vocabulary such as XHTML or
            XSL-FO.  In particular, tag documents can pass handlers to tag libraries
            for parameterization of document content by the tag library.
            
         </div>
         <div class="para e398">Tag libraries can be implemented in either XSLT or XQuery, enlarging the
            environments in which tag libraries can be deployed as well as the pool
            of potential tag library developers.
            A tag document can be processed in both environments, allowing
            tag document authors to provide designs for either kind of environment without
            having to learn a new syntax.
            Through the contract of the tag signature -- the parameters and handlers
            and return type passed to the tag -- contributors can apply their distinct
            expertise to collaborate for information processing and presentation. 
            
         </div>
      </div><a name="GlossaryANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e399" xml:id="glossary">
         <div class="title e400">Glossary</div>
         <div class="para e401">Some terms introduced in 
            <div class="xref e402" linkend="sec-concepts"></div>
            also appear here for completeness.
         </div>
         <div class="variablelist e403">
            <div class="varlistentry e404">
               <div class="term e405">tag document</div>
               <div class="listitem e406">
                  <div class="para e407">A document that mixes a static XML vocabulary (such as XHTML or XSL-FO) with XPath
                     expressions, XML Simple Tag statements, and tags from one or more tag libraries to
                     produce
                     dynamic documents.
                  </div>
               </div>
            </div>
            <div class="varlistentry e408">
               <div class="term e409">tag library</div>
               <div class="listitem e410">
                  <div class="para e411">A function library (typically implemented in XSLT or XQuery) that produces XML content
                     for a tag document. 
                  </div>
               </div>
            </div>
            <div class="varlistentry e412">
               <div class="term e413">simple tag statement</div>
               <div class="listitem e414">
                  <div class="para e415"></div>
               </div>
            </div>
            <div class="varlistentry e416">
               <div class="term e417">tag call</div>
               <div class="listitem e418">
                  <div class="para e419">An element in a tag document processed as a function call to a tag definition with
                     the
                     same QName, supplying parameters with its attributes and content and replaced by the
                     return value from the tag definition.
                  </div>
               </div>
            </div>
            <div class="varlistentry e420">
               <div class="term e421">tag definition</div>
               <div class="listitem e422">
                  <div class="para e423">A function provided by a tag library that processes parameters to produce XML content.
                     
                  </div>
               </div>
            </div>
            <div class="varlistentry e424">
               <div class="term e425">tag parameter</div>
               <div class="listitem e426">
                  <div class="para e427">An atomic value, XML node (typically one or more elements), or handler definition
                     passed by a tag call to a tag definition to control production of the XML content
                     or to
                     supply content for insertion into the XML content.
                  </div>
               </div>
            </div>
            <div class="varlistentry e428">
               <div class="term e429">tag definition body</div>
               <div class="listitem e430">
                  <div class="para e431">Content of a tag definition followed after declaration of all tag parameters. 
                     A tag definition body defines the logic how a tag call will be executed.
                     
                  </div>
               </div>
            </div>
            <div class="varlistentry e432">
               <div class="term e433">parameter container</div>
               <div class="listitem e434">
                  <div class="para e435">A subelement of the tag call supplying a tag parameter with its content; the
                     subelement has a namespace prefix that is the same as the prefix of the tag call and
                     a
                     local name that's the same as the name of the tag parameter. 
                  </div>
               </div>
            </div>
            <div class="varlistentry e436">
               <div class="term e437">handler definition</div>
               <div class="listitem e438">
                  <div class="para e439">An XML fragment that is passed as a tag parameter and that is processed with values
                     generated during execution of the tag definition; a callback.
                  </div>
               </div>
            </div>
            <div class="varlistentry e440">
               <div class="term e441">handler definition call</div>
               <div class="listitem e442">
                  <div class="para e443">Processing of a handler definition with values during execution of a tag
                     definition.
                  </div>
               </div>
            </div>
            <div class="varlistentry e444">
               <div class="term e445">handler definition parameter</div>
               <div class="listitem e446">
                  <div class="para e447">A value passed by the tag definition to a handler definition. </div>
               </div>
            </div>
            <div class="varlistentry e448">
               <div class="term e449">tag processor</div>
               <div class="listitem e450">
                  <div class="para e451">
                     An implementation of the tag library and tag document functionality that takes them
                     as an input and 
                     produces 
                     <div class="emphasis e452">a result document</div>. 
                     
                  </div>
               </div>
            </div>
            <div class="varlistentry e453">
               <div class="term e454">result document</div>
               <div class="listitem e455">
                  <div class="para e456">
                     A document produced by a tag processor based on tag libraries and a single tag document
                     that import those libraries. 
                     
                  </div>
               </div>
            </div>
         </div>
      </div><a name="BibliographyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e457">
         <div class="title e458">Bibliography</div>
         <div class="bibliomixed e459" xml:id="FXSL">
            Novatchev, Dimitre, Functional programming in XSLT using the FXSL library, In Proc.
            Of the
            Extreme Markup Languages Conference 2003, seen July 2011.
            Available at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e460" xlink:actuate="onRequest" xlink:href="http://conferences.idealliance.org/extreme/html/2003/Novatchev01/EML2003Novatchev01.html#t2-2" xlink:show="new" xlink:type="simple">http://conferences.idealliance.org/extreme/html/2003/Novatchev01/EML2003Novatchev01.html#t2-2</div>.
            
         </div>
         <div class="bibliomixed e461" xml:id="JSP">
            JavaServer Pages Technology, seen July 2011.
            Available at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e462" xlink:actuate="onRequest" xlink:href="http://www.oracle.com/technetwork/java/javaee/jsp/index.html" xlink:show="new" xlink:type="simple">http://www.oracle.com/technetwork/java/javaee/jsp/index.html</div>.
            
         </div>
         <div class="bibliomixed e463" xml:id="PUSHPULL">
            Push, Pull, Next!, Bob DuCharme, seen July 2011.
            Available at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e464" xlink:actuate="onRequest" xlink:href="http://www.xml.com/pub/a/2005/07/06/tr.html" xlink:show="new" xlink:type="simple">http://www.xml.com/pub/a/2005/07/06/tr.html</div>.
            
         </div>
         <div class="bibliomixed e465" xml:id="RDMC">
            A peek inside RunDMC, seen July 2011.
            Available at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e466" xlink:actuate="onRequest" xlink:href="http://developer.marklogic.com/blog/a-peek-inside-rundmc-part-2" xlink:show="new" xlink:type="simple">http://developer.marklogic.com/blog/a-peek-inside-rundmc-part-2</div>.
            
         </div>
         <div class="bibliomixed e467" xml:id="XBL2">
            XML Binding Language (XBL) 2.0, seen July 2011.
            Available at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e468" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xbl/" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xbl/</div>.
            
         </div>
         <div class="bibliomixed e469" xml:id="XForms">
            XForms 1.1, seen July 2011.
            Available at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e470" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xforms/" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xforms/</div>.
            
         </div>
         <div class="bibliomixed e471" xml:id="XQ1">
            XQuery 1.0: An XML Query Language (Second Edition), seen July 2011.
            Available at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e472" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xquery/" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xquery/</div>.
            
         </div>
         <div class="bibliomixed e473" xml:id="XQ3">
            XQuery 3.0: An XML Query Language (W3C Working Draft 14 June 2011), seen July 2011.
            Available at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e474" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xquery-30/" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xquery-30/</div>.
            
         </div>
         <div class="bibliomixed e475" xml:id="XSL2">
            XSL Transformations (XSLT) Version 2.0, seen July 2011.
            Available at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e476" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xslt20/" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xslt20/</div>.
            
         </div>
         <div class="bibliomixed e477" xml:id="XSP">
            XSP Logicsheet Guide, seen July 2011.
            Available at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e478" xlink:actuate="onRequest" xlink:href="http://cocoon.apache.org/2.1/userdocs/xsp/logicsheet.html" xlink:show="new" xlink:type="simple">http://cocoon.apache.org/2.1/userdocs/xsp/logicsheet.html</div>.
            
         </div>
         <div class="bibliomixed e479" xml:id="XSLD">
            XSLTdoc - A Code Documentation Tool for XSLT, seen July 2011.
            Available at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e480" xlink:actuate="onRequest" xlink:href="http://www.pnp-software.com/XSLTdoc/index.html" xlink:show="new" xlink:type="simple">http://www.pnp-software.com/XSLTdoc/index.html</div>.
            
         </div>
         <div class="bibliomixed e481" xml:id="XQD">
            XSLTdoc - A Code Documentation Tool for XSLT, seen July 2011.
            Available at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e482" xlink:actuate="onRequest" xlink:href="http://xqdoc.org/xqdoc_comments_doc.html" xlink:show="new" xlink:type="simple">http://xqdoc.org/xqdoc_comments_doc.html</div>.
            
         </div>
         <div class="bibliomixed e483" xml:id="XH">
            XHTML 1.0: The Extensible HyperText Markup Language (Second Edition), seen July 2011.
            Available at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e484" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xhtml1/" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xhtml1/</div>.
            
         </div>
         <div class="bibliomixed e485" xml:id="XSTEMP">
            Style-free XSLT Style Sheets, Eric van der Vlist, seen July 2011.
            Available at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e486" xlink:actuate="onRequest" xlink:href="http://www.xml.com/pub/a/2000/07/26/xslt/xsltstyle.html" xlink:show="new" xlink:type="simple">http://www.xml.com/pub/a/2000/07/26/xslt/xsltstyle.html</div>.
            
         </div>
      </div>
   </div>
</div>