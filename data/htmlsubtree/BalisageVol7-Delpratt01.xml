<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#TheEffectsofBytecodeGenerationinXSLTandXQueryANCHOR" name="TheEffectsofBytecodeGenerationinXSLTandXQueryTOC">The Effects of Bytecode Generation in XSLT and XQuery</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#HighlevelOptimizationANCHOR" name="HighlevelOptimizationTOC">High-level Optimization</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BytecodeGenerationANCHOR" name="BytecodeGenerationTOC">Bytecode Generation</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ArchitectureofJavabytecodegeneratorANCHOR" name="ArchitectureofJavabytecodegeneratorTOC">Architecture of Java bytecode generator</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ExperimentalEvaluationANCHOR" name="ExperimentalEvaluationTOC">Experimental Evaluation</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#SetupANCHOR" name="SetupTOC">Setup</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#RunningTimesANCHOR" name="RunningTimesTOC">Running Times</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#EffectofOptimizationRewritesANCHOR" name="EffectofOptimizationRewritesTOC">Effect of Optimization Rewrites</a></div>
               </div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#UsingHandwrittenCodeasaBenchmarkANCHOR" name="UsingHandwrittenCodeasaBenchmarkTOC">Using Hand-written Code as a Benchmark</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConclusionANCHOR" name="ConclusionTOC">Conclusion</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BytecodeofgeneratedJavasourcecodeANCHOR" name="BytecodeofgeneratedJavasourcecodeTOC">Bytecode of generated Java source code</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#Runningtimesofthe20XMarkXQueryqueriesANCHOR" name="Runningtimesofthe20XMarkXQueryqueriesTOC">Running times of the 20 XMark XQuery queries</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ReferencesANCHOR" name="ReferencesTOC">References</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">a/b/c</div>
         <div class="singletermTERMS">Adaptable and extensible component systems</div>
         <div class="singletermTERMS">August 2 - 5, 2011</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">b0</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2009</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2011</div>
         <div class="singletermTERMS">bytecode</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">CompiledExpression</div>
         <div class="singletermTERMS">compileToBoolean</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">docOrder(a!b!c)</div>
         <div class="singletermTERMS">Delpratt</div>
         <div class="singletermTERMS">Davion</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">exists(.)</div>
         <div class="singletermTERMS">Expression Rewriting (Optimization)</div>
         <div class="singletermTERMS">evaluateItem()</div>
         <div class="singletermTERMS">ExpressionCompiler</div>
         <div class="singletermTERMS">exists()</div>
         <div class="singletermTERMS">Extreme Markup Languages 2007</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">iterate()</div>
         <div class="singletermTERMS">iterate</div>
         <div class="singletermTERMS">IEEE Data Engineering Bulletin</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
         <div class="singletermTERMS">javap</div>
         <div class="singletermTERMS">java</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
         <div class="singletermTERMS">Kay</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">mike@saxonica.com</div>
         <div class="singletermTERMS">Michael</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">Normalisation</div>
         <div class="singletermTERMS">NodeTest</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">optimize</div>
         <div class="singletermTERMS">oneil@saxonica.com</div>
         <div class="singletermTERMS">O'Neil</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">pull</div>
         <div class="singletermTERMS">push</div>
         <div class="singletermTERMS">process</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">Receiver</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">simplify</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">translet</div>
         <div class="singletermTERMS">typeCheck</div>
         <div class="singletermTERMS">Type Check</div>
         <div class="singletermTERMS">The Apache XML Project</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">xs:double($i)*xs:double($i);</div>
         <div class="singletermTERMS">XMLPrague 2006&gt;</div>
         <div class="singletermTERMS">XMLPrague 2011</div>
         <div class="singletermTERMS">XSLT</div>
         <div class="singletermTERMS">XQuery</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="TheEffectsofBytecodeGenerationinXSLTandXQueryANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3" xml:id="HR-23632987-8973">
      <div class="title e1">The Effects of Bytecode Generation in XSLT and XQuery</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2011</div>
            <div class="confdates e5">August 2 - 5, 2011</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">This paper attempts to analyze the performance benefits that are achievable by
               adding a code generation phase to an XSLT or XQuery engine. This is not done in
               isolation, but in comparison with the benefits delivered by high-level query
               rewriting. The two techniques are complementary and independent, but can compete for
               resources in the development team, so it is useful to understand their relative
               importance. We use the Saxon XSLT/XQuery processor as a case study, where we can now
               translate the logic of queries into Java bytecode. We provide an experimental
               evaluation of the performance of Saxon with the addition of this feature compared
               to
               the existing Saxon product. Saxon's Enterprise Edition already delivers a
               performance benefit over the open source product using the join optimizer and other
               features. What can we learn from these to achieve further performance gains through
               direct byte code generation?
            </div>
         </div>
         <div class="author e8">
            <div class="personname e9">
               <div class="firstname e10">O'Neil</div>
               <div class="othername e11">Davion</div>
               <div class="surname e12">Delpratt</div>
            </div>
            <div class="personblurb e13">
               <div class="para e14">Dr Delpratt is a software developer at Saxonica. Before joining Saxonica, he
                  completed his post-graduate studies at the University of Leicester. His thesis
                  title was 'In-memory Representations of XML documents', which coincided with a
                  C++ software development of a memory efficient DOM implementation, called
                  Succinct DOM.
               </div>
            </div>
            <div class="affiliation e15">
               <div class="orgname e16">Saxonica</div>
            </div>
            <div class="email e17">oneil@saxonica.com</div>
         </div>
         <div class="author e18">
            <div class="personname e19">
               <div class="firstname e20">Michael</div>
               <div class="surname e21">Kay</div>
            </div>
            <div class="personblurb e22">
               <div class="para e23">Michael Kay has been developing the Saxon product since 1998, initially as a
                  spare-time activity at ICL and then Software AG, but since 2004 within the
                  Saxonica company which he founded. He holds a Ph.D from the University of
                  Cambridge where he studied under the late Maurice Wilkes, and spent 24 years
                  with ICL, mainly on development of database software. He is the editor of the
                  W3C XSLT specification.
               </div>
            </div>
            <div class="affiliation e24">
               <div class="orgname e25">Saxonica</div>
            </div>
            <div class="email e26">mike@saxonica.com</div>
         </div>
         <div class="legalnotice e27">
            <div class="para e28">Copyright © 2011 by the authors. Used with permission.</div>
         </div>
         <div class="keywordset e29" role="author">
            <div class="keyword e30">XSLT</div>
            <div class="keyword e31">XQuery</div>
            <div class="keyword e32">java</div>
            <div class="keyword e33">bytecode</div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e34" xml:id="Introduction">
         <div class="title e35">Introduction</div>
         <div class="para e36">Many modern compilers generate code in an intermediate representation which is then
            interpreted by a virtual machine. One of the best known examples is Java: its
            intermediate code (known simply as bytecode) has proved flexible enough to be used
            as a
            target by many other high-level languages, allowing these languages to be mixed in
            the
            same Java Virtual Machine (JVM). XSLT and XQuery are no different from other languages
            in this respect, and a number of processors for these languages have used code
            generation to boost performance. There are few reports, however, that enable the
            effectiveness of this technique to be assessed, largely because of the difficulty
            in
            attributing performance differences to one particular optimization technique. This
            paper
            attempts to evaluate the impact of introducing code generation into the Saxon processor,
            enabling such a comparison to be made.
         </div>
         <div class="para e37">One well-known XSLT processor that compiles queries to Java bytecode is XSLTC [
            <div class="xref e38" linkend="XSLTC"></div>]. [
            <div class="xref e39" linkend="XSLTC"></div>] at a superficial level works by
            parsing the XSLT into an Abstract Syntax Tree (AST) which then goes through a
            type-checking phase before being compiled into Java bytecode. The output is a so-called
            
            <div class="emphasis e40" role="ital">translet</div> class which can be used for
            transformations or saved to disk for re-use later. For XSLTC (which is distributed
            as
            part of the Apache Xalan-J package), the aim is not only to deliver enhanced performance
            in the runtime execution of queries, but also to produce a compact executable (the
            translet) which can be readily shipped around the network and executed anywhere.
         </div>
         <div class="para e41">Code generation is also believed to be used in a number of proprietary XSLT
            processors, such as the Datapower processor [
            <div class="xref e42" linkend="DataPower"></div>] and
            Microsoft's .NET processor. However, no technical details of these products have been
            published in the literature.
         </div>
         <div class="para e43">Saxon first introduced Java code generation as long ago as version 4.2 [
            <div class="xref e44" linkend="Kay1999"></div>] (some six months before XSLT 1.0 was published in 1999).
            However, this proved to be something of a blind alley, since it became clear that
            much
            greater performance gains could be realized through other optimization techniques,
            and
            that the existence of a code generator actually made these techniques more difficult
            to
            introduce. The architecture of Saxon at this time was to interpret the DOM of the
            source
            stylesheet directly instead of building an expression tree. This design made it
            impossible to do any extensive optimisation rewrites, as it is done now. One of the
            present authors [
            <div class="xref e45" linkend="Kay2006a"></div>] argued that 
            <div class="quote e46"> high-level
               optimizations are more important, and that compiling expressions to bytecode might
               reduce the scope for high-level optimizations, if only by making them more complex
               to implement and debug.
            </div>As a result, the code generation was "shelved" while
            the architecture was changed to introduce tree rewriting. 
         </div>
         <div class="para e47">Eventually code generation re-emerged in version 8.9 (Feb 2007), supporting XQuery
            only. It still took the form of Java source code generation, rather than bytecode
            generation. But it cannot be counted a great success: we are aware of very little
            usage.
            This is for several reasons:
         </div>
         <div class="para e48">
            
            <div class="itemizedlist e49">
               <div class="listitem e50">
                  <div class="para e51">From a user perspective the generation of java source code is cumbersome,
                     requiring three phases: firstly they must generate the Java source code to a
                     file, then the Java source must be compiled, and finally the query can be
                     executed.
                  </div>
               </div>
               <div class="listitem e52">
                  <div class="para e53">The performance gains are modest (typically 25% improvement).</div>
               </div>
               <div class="listitem e54">
                  <div class="para e55">There are numerous restrictions concerning the subset of the language that
                     is supported in this mode.
                  </div>
               </div>
            </div>
            
         </div>
         <div class="para e56">This paper describes a new approach in which we hope to eliminate these problems.
            In
            particular, we believe that a 25% speed-up is not enough to encourage users to go
            to a
            great deal of effort in the way they execute their stylesheets and queries, but it
            will
            be much appreciated if it comes with no effort. There is a commercial factor which
            motivates this: Saxon is distributed in two versions, a free open-source product and
            a
            commercial paid-for version. While the commercial Enterprise Edition already has many
            features that users value, including features that can be used to deliver improved
            performance, users are sometimes disappointed to find it does not always run faster
            "out
            of the box". Code generation is an obvious way to remedy this, and ensure that users
            who
            pay their dues get some immediate benefit, with no need to change a single line of
            code.
         </div>
         <div class="para e57">Our objectives in adding code generation to Saxon are rather different from those
            for
            XSLTC, and this affects the approach we have adopted. In particular, we are not
            primarily interested in producing an executable that can be saved to disk or sent
            around
            the network. Rather, we want to integrate code generation and interpretation closely,
            so
            that we only generate code where there is a performance benefit to be gained, and
            continue to interpret otherwise. This should ensure that there are no language
            restrictions or differences when using code generation; it allows development effort
            to
            be focused where the potential gains are largest; and it limits the extent to which
            the
            existence of a code generation phase working off the expression tree limits our freedom
            to evolve the design of the expression tree itself when implementing new rewrite
            optimizations. 
         </div>
         <div class="para e58">The remainder of this paper is organized as follows. Firstly, we discuss the
            high-level optimization of Saxon. Secondly, we discuss the bytecode generation feature
            of Saxon. Then we give an experimental evalaution of the running time performance
            of
            bytecode generation compared to Saxon interpreted mode. We base our experiments on
            the
            XMark benchmark queries, and conclude our findings.
         </div>
      </div><a name="HighlevelOptimizationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e59">
         <div class="title e60">High-level Optimization</div>
         <div class="para e61">The Saxon XSLT/XQuery processor includes a number of internal processes to compile,
            simplify and execute queries or stylesheets efficiently. In our discussion we will
            only
            make reference to XQuery, however in the Saxon internals very similar processes apply
            to
            XSLT.
         </div>
         <div class="para e62">Queries are parsed by a XSLT/XQuery compiler into a Abstract Syntax Tree (AST), which
            is a in-memory expression tree structure representing the logical structure of the
            query. In the case of XSLT, this tree combines the two sublanguages, XSLT and XPath,
            into a single integrated structure. References to variables and functions are largely
            resolved during parsing, an operation that is only slightly complicated by the fact
            that
            forwards references are permitted. Saxon then perfoms three optimization steps to
            produce the final AST that is interpreted at runtime. The first step is the
            normalisation of the AST, the second step is the type checking of the sub-expressions,
            and the third is expression rewriting. Detail of these are provided in the literature
            [
            <div class="xref e63" linkend="Kay2008"></div>], [
            <div class="xref e64" linkend="Kay2006b"></div>] and [
            <div class="xref e65" linkend="Kay2005"></div>]. We summarize these steps below. 
         </div>
         <div class="para e66">The optimizations require several depth-first traversals of the tree. In Saxon a
            visitor object provides a depth-first navigation of the expression tree. This class
            supports the various optimization steps involved in the processing of an expression
            tree, as it requires a recursive walk visiting each node in turn. A stack is also
            maintained as each node is visited, which holds the current ancestor nodes. The
            expression tree consists of many kinds of expression nodes, each of which implement
            the
            Expression interface. (This is the classic Interpreter design pattern.) The Expression
            class contains three important methods: 
            <div class="emphasis e67">simplify</div>,
            
            <div class="emphasis e68">typeCheck</div> and 
            <div class="emphasis e69">optimize</div>. 
            <div class="orderedlist e70">
               <div class="listitem e71">
                  <div class="para e72">
                     <div class="emphasis e73">Normalisation</div>. As in databases this is an important
                     step, where we minimize redundancies in queries. In Saxon the expression
                     visitor is used to walk the tree. At each expression node the 
                     <div class="emphasis e74" role="ital">simplify</div> method is called on its child
                     sub-expressions before normalisation is applied if required. It is possible
                     that at each node the 
                     <div class="emphasis e75">simplify</div> method may be called
                     several times after the re-writing of sub-expressions. For example, the
                     XPath 
                     <div class="code e76">a/b/c</div> is rewritten to 
                     <div class="code e77">docOrder(a!b!c)</div>, where
                     docOrder is an operator that eliminates duplicates and sorts into document
                     order, and 
                     <div class="code e78">!</div> is a simple mapping operator which evaluates
                     
                     <div class="code e79">c</div> once for each item in 
                     <div class="code e80">b</div>, which in turn is
                     evaluated once for each item in 
                     <div class="code e81">a</div>.
                  </div>
               </div>
               <div class="listitem e82">
                  <div class="para e83">
                     <div class="emphasis e84">Type Check</div>. As we traverse the expression tree each
                     sub-expression node is type checked. Here checks are performed on the
                     operands of the expression, whether the static types of the operands are
                     known to be subtypes of the required type. [
                     <div class="xref e85" linkend="Kay2006b"></div>]
                     details several possible outcomes in the process: The static type is a
                     subtype of the required type, then no further check is required, or some
                     instances only are instances of the required type, here a node is inserted
                     in the tree to indicate run-time type check required. The other possiblility
                     is that the static type and the required type are disjoint, therefore Saxon
                     generates a type error at compile time. Saxon also performs atomization
                     conversions, such as casting of untypedAtomic values. It also removes any
                     redundant conversions, such as casts written by the user. 
                  </div>
               </div>
               <div class="listitem e86">
                  <div class="para e87">
                     <div class="emphasis e88">Expression Rewriting (Optimization)</div>. The optimizing
                     of XSLT stylesheets, XQuery and XPath expressions is a well studied area,
                     which has provided implementations significant performance gains. In [
                     <div class="xref e89" linkend="Kay2007"></div>] and [
                     <div class="xref e90" linkend="Snelson2011"></div>] there is a
                     detailed study of the main optimization techniques, some of which are used
                     in Saxon. The rewrite of expressions is achieved in the
                     
                     <div class="emphasis e91">optimize</div> method, requiring a third pass of the
                     expression tree. Saxon performs join optimization (familar in database
                     languages), by replacing predicate expressions with key indexes. There are
                     other techniques such as function inlining and the optimization of tail
                     recursion, which is familar in functional programming languages. This is
                     another area where Saxon differentiates the commercial product from the free
                     open-source product: many of the more advanced optimizations are available
                     in the Enterprise Edition only.
                  </div>
               </div>
            </div>
         </div>
         <div class="para e92">Each of these phases adds information to the tree. The most obvious information is
            the
            inferred static type of each expression, but there are many other properties that
            play
            an equally important role: for example the dependencies of an expression on variables
            or
            on the dynamic context, and properties of node-sets such as whether they are known
            to be
            sorted and whether they can contain duplicates. 
         </div>
      </div><a name="BytecodeGenerationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e93">
         <div class="title e94">Bytecode Generation</div>
         <div class="para e95">We now discuss a new Java bytecode generation feature in Saxon, which we consider
            as a
            fourth step in the optimization processes discussed in Section 2. It directly replaces
            the java source code generation feature provided in Saxon up to version 9.3. Here
            we are
            now generating the Java bytecode directly when compiling a query after it has been
            optimized. Our approach is different to that in XSLTC because we are generating bytecode
            selectively for expressions that are considered to have potential performance
            improvements, so that interpreted code and compiled code interact freely. The fact
            that
            compiled code exists only transiently in memory means that it can refer to data
            structures on the expression tree, rather than regenerating them at initialization
            time.
            In the longer term, this architecture also leaves the door open to just-in-time
            compilation (or hotspot compilation) based on observed execution patterns at
            run-time.
         </div>
         <div class="para e96">There are a number of Java class manipulation tools available (see 
            <div class="xref e97" linkend="Bruneton2002"></div>). One of the most widely used of these tools is BCEL [
            <div class="xref e98" linkend="Dahm1999"></div>, 
            <div class="xref e99" linkend="Bruneton2002"></div>]. In this tool the class
            modification is achieved in a three part process: The bytecode representing the class
            is
            deserialized into a constructed class structure in memory, with a object created for
            each node, right down to the bytecode instructions. This structure is then manipulated
            in the second phase. The third phase is to serialize the modified object structure
            into
            a new byte array. 
         </div>
         <div class="para e100">We chose instead to use the ASM [
            <div class="xref e101" linkend="Bruneton2002"></div>] framework library
            tool to generate bytecode for queries. ASM [
            <div class="xref e102" linkend="Bruneton2002"></div>] claims to be
            smaller and to give better performance than other tools. Where BCEL builds a DOM-like
            tree representation of the code, ASM works using a series of SAX-like streaming passes
            over it. There are other Java class manipulation tools which we only mention here
            such
            as SERP, JIOE: these are described in [
            <div class="xref e103" linkend="Bruneton2002"></div>]. We have not done
            any experimental anaylsis of the Java class manipulation tools nor is there scope
            in
            this paper to provide an anaysis of these tools. Nevertheless, we have chosen the
            ASM
            library based upon [
            <div class="xref e104" linkend="Bruneton2002"></div>], due to the simplicity of the tool
            and our requirement which only relied upon a small part of the library to dynamically
            generate bytecode in the runtime of queries.
         </div>
         <div class="para e105">The bytecode generation process has as input an AST, optimized to a greater or lesser
            extent in earlier phases depending on the Saxon product that is used. The top-level
            expression in each function or XSLT template is compiled into an equivalent Java
            bytecode class. We call this a 
            <div class="emphasis e106">CompiledExpression</div>: it is
            constructed as we traverse the AST and can be evaluated at runtime. If the expression
            cannot be compiled, perhaps because it uses unusual language constructs, it is simply
            interpreted instead: but its subexpressions can still be compiled. The structure of
            the
            
            <div class="emphasis e107">CompiledExpression</div> is as follows: Firstly we generate static
            variables which have been initialised. As mentioned above, we are generating transient
            bytecode that works interchangably with interpreted code. The static variables in
            the
            generated code contain references to data on the expression tree: either whole
            expressions, or helper classes such as node tests, comparators, converters, and the
            like. For example, the 
            <div class="emphasis e108">NodeTest</div> object, which provides XSLT pattern
            matching, acts as a predicate in axis steps, and also acts as an item type for type
            matching, is stored as a static variable available for use in the bytecode generated.
            
         </div>
         <div class="para e109">As discussed in [
            <div class="xref e110" linkend="Kay2009"></div>] and [
            <div class="xref e111" linkend="Kay2010"></div>], Saxon can
            execute internally in both 
            <div class="emphasis e112">pull</div> and 
            <div class="emphasis e113">push</div> mode.
            In pull mode, an expression iterates over the data supplied by its child expressions;
            child expressions therefore implement an 
            <div class="emphasis e114" role="ital">iterate()</div>
            method which delivers results incrementally to the caller. In push mode, an expression
            writes SAX-like events to an output destination (a 
            <div class="emphasis e115" role="ital">Receiver</div>). Choosing between pull and push mode can make a substantial
            difference to performance: during development, when we have observed situations where
            compiled code was outperformed by interpreted code, it was generally because the
            interpreter was making better decisions on when to pull and when to push. The compiled
            code therefore needs to work in both modes, so each
            
            <div class="emphasis e116">CompiledExpression</div> has two methods: an
            
            <div class="emphasis e117">iterate</div> method to deliver results to its caller, and a
            
            <div class="emphasis e118">process</div> method to write events to a Receiver. A third method,
            
            <div class="emphasis e119" role="ital">evaluateItem()</div>, is provided for single-shot
            evaluation of expressions that always return a singleton result. Of course in many
            cases
            these methods will share common logic.
         </div><a name="ArchitectureofJavabytecodegeneratorANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e120">
            <div class="title e121">Architecture of Java bytecode generator</div>
            <div class="para e122">The 
               <div class="emphasis e123">ExpressionCompiler</div> is an abstract class which represents
               the compiler (that is, Java bytecode generator) for a particular kind of expression
               on the expression tree. The 
               <div class="emphasis e124">ExpressionCompiler</div> classes are used
               to build the 
               <div class="emphasis e125">CompiledExpression</div> class in bytecode, traversing
               the expression tree in depth-first manner: there is a one-to-one correspondence
               between the classes implementing the expression on the expression tree and the
               compiler object used to generate Java code fragments
               <div class="popupBox e126">
                  <div class="popupLabel" onmouseover="$('#d1e258').show('1000');" onmouseout="$('#d1e258').hide('1000');">[ footnote ]</div>
                  <div id="d1e258" style="display: none;">
                     <div class="footnote">
                        <div class="para e127">It would have been possible to use the same class for both purposes: This
                           is a rare example of a distortion to the design caused by Saxon's need to
                           divide open-source from proprietary code.
                        </div>
                     </div>
                  </div>
               </div>. The following methods are supplied to compile expressions; exactly one
               of them is called, depending on the context in which the expression appears:
               
               <div class="programlisting e128" xml:space="preserve">compileToItem    - Generate bytecode to evaluate the expression as an Item
                  compileToIterator - Generate bytecode to evaluate the expression as an Iterator.
                  compileToBoolean  - Generate bytecode to evaluate the expression as a boolean.
                  compileToPush     - Generate bytecode to evaluate the expression in push mode.
                  compileToLoop     - Generate bytecode to evaluate the expression in such a way that
                  the supplied loop body argument is executed once for each Item. 
                  compileToPrimitive - Generate bytecode to evaluate the expression as a plain Java
                  value 
                  (e.g. int, double, String). This method must only be called if the 
                  target type of the expression is known  statically.
               </div>
            </div>
            <div class="para e129">Within each kind of expression one or more of the methods above is implemented.
               For example, the 
               <div class="emphasis e130" role="ital">exists()</div> function delivers a
               boolean value so we implement the 
               <div class="emphasis e131" role="ital">compileToBoolean</div>
               method. To understand why compiled code is sometimes faster than interpreted code,
               it is useful to examine this example in some detail. Essentially, compiled code will
               only be faster than the interpreter if decisions can be made at compile-time than
               would otherwise be made at execution time. There are many cases where this is simply
               not possible: for example, code that is dominated by string-to-number conversion
               will gain no speed-up from compilation, because the actual code executed is
               identical whether it is compiled or interpreted. Making decisions at compile time
               is
               only possible where the information needed to make those decisions is present in the
               expression tree. For example, for the 
               <div class="emphasis e132" role="ital">exists()</div>
               function we compare its 
               <div class="emphasis e133" role="ital">compileToBoolean</div> method to
               the interpreted code and the Java source generation below. The simple query
               
               <div class="code e134">exists(.)</div> generates the following bytecode in push mode (simplified
               only to remove diagnostic information used by the debugger):
            </div>
            <div class="programlisting e135" xml:space="preserve">
               public process(Lnet/sf/saxon/expr/XPathContext;)V
               L0
               // Get the Receiver to which output will be sent
               ALOAD 1    // the XPathContext object
               INVOKEINTERFACE net/sf/saxon/expr/XPathContext.getReceiver ()Lnet/sf/saxon/event/SequenceReceiver;
               ASTORE 2   // local variable holding the current Receiver
               ALOAD 2
               L1
               L2
               // Get the context item (evaluate ".")
               ALOAD 1    // the XPathContext object
               INVOKEINTERFACE net/sf/saxon/expr/XPathContext.getContextItem ()Lnet/sf/saxon/om/Item;
               DUP
               // Generate an error if no context item is defined
               IFNONNULL L3
               NEW net/sf/saxon/trans/XPathException
               DUP
               LDC "Context item for '.' is undefined"
               LDC "XPDY0002"
               INVOKESPECIAL net/sf/saxon/trans/XPathException.&lt;init&gt; (Ljava/lang/String;Ljava/lang/String;)V
               DUP
               GETSTATIC CE_main_671511612.nContextItemExpression0 : Lnet/sf/saxon/expr/ContextItemExpression;
               INVOKEVIRTUAL javax/xml/transform/TransformerException.setLocator (Ljavax/xml/transform/SourceLocator;)V
               ATHROW
               // Load "true" (1) or "false" (0) depending on whether the value is null
               L3
               IFNULL L4_returnFalse
               ICONST_1    //Load true (1)
               GOTO L5
               L4_returnFalse
               ICONST_0    //Load false (0)
               L5_endExists
               // Convert the result to a Saxon BooleanValue object and send it to the Receiver
               INVOKESTATIC net/sf/saxon/value/BooleanValue.get (Z)Lnet/sf/saxon/value/BooleanValue;
               INVOKEVIRTUAL net/sf/saxon/event/SequenceReceiver.append (Lnet/sf/saxon/om/Item;)V
               RETURN
               }
            </div>
            <div class="para e136">It is interesting to compare this with the java source code generated for the same
               query 
               <div class="code e137">exists(.)</div> using Saxon 9.3:
               
               <div class="programlisting e138" xml:space="preserve">public void process(final XPathContext context) throws XPathException {
                  SequenceReceiver out = context.getReceiver();
                  if (context.getContextItem() == null) {
                  dynamicError("The context item is undefined", "XPDY0002", context);
                  }
                  final boolean b0 = (context.getContextItem() != null);
                  out.append(BooleanValue.get(b0), 0, NodeInfo.ALL_NAMESPACES);
                  }
               </div>The
               logic is very similar, and in fact the bytecode generated when this Java source code
               is compiled is very similar too (just fractionally less efficient because of the
               unnecessary boolean variable 
               <div class="emphasis e139">b0</div>). See the bytecode of the Java
               source code in 
               <div class="xref e140" linkend="appendix1"></div>, which can be compared with the generated
               bytcode above. Thus for a typical query, the new bytecode generation feature does
               not provide noticeable performance benefits over the generated java source from
               Saxon 9.3. However from a usability point-of-view, the advantage is that there is
               no
               need to compile and run the java program source code, which makes all the difference
               for a typical user.
            </div>
            <div class="para e141">It's also worth noting that the logic in Saxon to generate the bytecode is not
               significantly more complex than the logic that was used to generate Java bytecode.
               All the complexity is in the ASM library. Debugging the logic when it is incorrect
               can be a little harder however (diagnostics are not ASM's strongest feature). 
            </div>
            <div class="para e142"> </div>
         </div>
      </div><a name="ExperimentalEvaluationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e143">
         <div class="title e144">Experimental Evaluation</div>
         <div class="para e145">In this section we draw comparisons of the running time performance between
            interpreted code and generated bytecode. An important aim is to compare the impact
            of
            code generation with the impact of high-level rewrite optimizations: to this end we
            run
            with four configurations, both features being switched on or off. (In the released
            product, neither feature will be available in the open source Saxon-HE, and by default
            both will be enabled in Saxon-EE).
         </div><a name="SetupANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e146">
            <div class="title e147">Setup</div>
            <div class="para e148">We used Saxon 9.3.0.4 as the baseline. The test machine was a Intel Core i5
               processor 430M laptop with 4GB memory, 2.26Ghz CPU and 3MB L3 cache, running Ubuntu
               10.04LTS Linux. The compiler was Sun/Oracle Java 1.6.0.2. The experiments are based
               on the XMark benchmark [
               <div class="xref e149" linkend="XMark"></div>]. We use the XMark XQuery queries
               numbered q1 to q20, and synthetically generate several XML data files from [
               <div class="xref e150" linkend="XMark"></div>], these being of sizes in the range 1MB to 64MB.
            </div><a name="RunningTimesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e151">
               <div class="title e152">Running Times</div>
               <div class="para e153">The 20 XMark queries are run repeatedly up to 1000 times or until 30 seconds
                  have elapsed, and we record the average time spent to complete the runs, using
                  the system clock in Java. [
                  <div class="xref e154" linkend="appendix3"></div>] shows the complete
                  running times. We show these for Saxon-HE, Saxon-Bytecode, Saxon-EE and
                  Saxon-EE-Bytecode (that is, with weak optimization and no code generation; with
                  weak optimization plus code generation, with strong optimization and no code
                  generation, and with strong optimization followed by code generation). We
                  compare the running times of the Saxon-EE product for the interpreted code and
                  bytecode. We found on average over all files that bytecode generation gave
                  between 14% and 27% improvement.
               </div>
               <div class="figure e155" xml:id="Figure1">
                  <div class="title e156">Scalability test. Running time performance for different file sizes on
                     query 10
                  </div>
                  <div class="mediaobject e157">
                     <div class="imageobject e158">
                        <div class="metaBox e159"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e326').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e326" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e159'
                                 </span><span class="metaAttribute">fileref='../../../vol7/graphics/Delpratt01/Delpratt01-001.png'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="caption e160">
                     <div class="para e161">Scalability test: For Saxon-HE, Saxon-EE and Saxon-EE-Bytecode the
                        timing results of running the XMark benchmark query 10 on XMark
                        generated data files of sizes 2MB, 4MB, 8MB, 16MB, 32MB and 64MB. For
                        Saxon-HE the running time for the 64MB data file is omitted as it goes
                        off the graph.
                     </div>
                  </div>
               </div>
               <div class="para e162">In 
                  <div class="xref e163" linkend="Figure1"></div>, we show a graph of the scalability of running
                  the query 10 on the XMark data files of sizes ranging from 2MB to 64MB with
                  Saxon-HE, Saxon-EE and Saxon-EE-Bytecode. In Saxon-EE and Saxon-EE-bytecode the
                  timing results show a linear growth as files become larger in size. For Saxon-HE
                  we observe a quadratic growth: this shows up the absence of join optimization in
                  the Saxon-HE product.
               </div>
               <div class="para e164">In 
                  <div class="xref e165" linkend="Figure2"></div> and in 
                  <div class="xref e166" linkend="Table3"></div> in 
                  <div class="xref e167" linkend="appendix3"></div> we observe that for certain queries the performance of
                  bytecode generation is well above average. Queries 8, 10, 11 and 12 gave
                  improvements between 35% and 50%. We compare the Saxon-EE products with the
                  feature of Java code generation (Saxon-EE-JavaGen, featured in Saxon 9.3), the
                  interpreted code and bytecode. Again we see an overall improvement over the
                  intepreted code, but we observe similar results for Java code generation and
                  bytecode generation, the difference being approximately 10% on average over all
                  queries. 
               </div>
            </div><a name="EffectofOptimizationRewritesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e168">
               <div class="title e169">Effect of Optimization Rewrites</div>
               <div class="para e170">Comparison of the timings for different data sizes shows that with weak
                  optimization, queries 8, 9, 10, 11 and 12 have performance that is quadratic in
                  the data size; with strong optimization, only query 11 is quadratic. This is
                  because queries 8, 9, 10 and 12 are equijoins, whereas query 11 is a
                  non-equijoin which the Saxon optimizer cannot handle well.
               </div>
               <div class="para e171"></div>
               <div class="para e172">
                  
                  <div class="figure e173" xml:id="Figure2">
                     <div class="title e174">XQuery Queries Running Times (10MB data file)</div>
                     <div class="mediaobject e175">
                        <div class="imageobject e176">
                           <div class="metaBox e177"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e355').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e355" class="metaSource" style="display:none;">                
                                 &lt;imagedata<span class="metaAttribute">class='e177'
                                    </span><span class="metaAttribute">fileref='../../../vol7/graphics/Delpratt01/Delpratt01-002.png'
                                    </span>
                                 &gt;
                                 
                              </div>
                           </div>
                        </div>
                     </div>
                     <div class="caption e178">
                        <div class="para e179">For Saxon-EE-JavaGen (Java Generation in Saxon 9.3), Saxon-EE
                           and Saxon-EE-Bytecode the timing results of running XMark benchmark
                           query 7, 8, 9, 10, 11 and 12 on a 10MB XMark generated data
                           file.
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </div>
      </div><a name="UsingHandwrittenCodeasaBenchmarkANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e180">
         <div class="title e181">Using Hand-written Code as a Benchmark</div>
         <div class="para e182">In the previous sections we've concentrated on comparing the performance of compiled
            queries and stylesheets with the same queries and stylesheets run under the interpreter.
            But there's another technique we have found useful, which is to compare the performance
            of a compiled query with hand-written Java code performing the same task. The
            performance of the hand-written code sets a target to aim for, and provides a measure
            of
            how much room for improvement is available.
         </div>
         <div class="para e183">The results show great variation between different queries, which is useful
            information in itself. Here we'll consider two simple queries.
         </div>
         <div class="para e184">The first computes the average income of buyers recorded in the XMark dataset: we're
            running the query
            
            <div class="programlisting e185" xml:space="preserve">avg(//profile/@income)</div> against the
            10Mb version of the dataset. 
         </div>
         <div class="para e186">The Saxon interpreter runs this in an average of 792ms. Currently, when compiling
            to
            bytecode, the improvement is quite modest: average time is 768ms.
         </div>
         <div class="para e187">The same query coded in Java looks like this:
            
            <div class="programlisting e188" xml:space="preserve">NodeInfo root = doc.getUnderlyingNode();
               AxisIterator descendants = root.iterateAxis
               (net.sf.saxon.om.Axis.DESCENDANT, 
               new NameTest(Type.ELEMENT, profileNC, pool));
               NodeInfo profile;
               double total = 0;
               int count = 0;
               while ((profile = descendants.next()) != null) {
               String income = Navigator.getAttributeValue(profile, "", "income");
               if (income != null) {
               total += Double.valueOf(income);
               count++;
               }
               }
            </div>
         </div>
         <div class="para e189">The execution time for this code is 690ms. So we see that the interpreter is already
            almost as fast as the hand-written Java code. On the assumption that generated bytecode
            will rarely be better than hand-written Java code, there is little headroom available
            for the code generator to make a significant impact. It's easy to see why this should
            be
            the case: the query is spending nearly all its time (a) searching the descendant axis
            for 
            <div class="emphasis e190" role="ital">&lt;profile&gt;</div> elements, and (b) converting
            attribute values from strings to numbers. These two operations are done by library
            routines that execute exactly the same code whether it is run under the XQuery
            interpreter, the XQuery code generator, or the hand-written Java code. Both routines
            have been carefully tuned over the years and there is little scope for improvement;
            neither is doing any work that doesn't absolutely need to be done.
         </div>
         <div class="para e191">Our second query is rather different. This one doesn't in fact process any XML, so
            one
            could argue that it is atypical; but as a fragment within a larger query it is code
            that
            one might well encounter:
            
            <div class="programlisting e192" xml:space="preserve">sum(for $i in 1 to $p return xs:double($i)*xs:double($i))</div>
            Here, with $p set to 100000, the XQuery interpreter executes the query in 29.4ms.
            The
            equivalent hand-written Java code is
            
            <div class="programlisting e193" xml:space="preserve">double j = 0;
               for (int i=1; i&lt;=100000; i++) {
               j += (double)i * (double)i;
               }
            </div>and
            this executes much faster, in just 1.2ms. So this time there is a lot more headroom,
            a
            lot more scope for the code generator to make a difference. Our first version of the
            code generator in fact made no difference at all to the execution time of this query
            (a
            mere 1% improvement, which is within the range of experimental error). It's not
            difficult to see why: the generated code was essentially an inlined version of the
            same
            instructions that the interpreter was executing, except for a very small amount of
            control logic to walk the expression tree. Comparing this with the hand-written code
            in
            this case shows us that we can do a lot better. There is no reason in principle why
            the
            XQuery code should not run just as fast as the Java code. We're not quite there yet,
            but
            we have improved it to around 12ms. One technique that proved useful in achieving
            this
            was to write a Java program that executed the same logic as the XQuery-generated
            bytecode, and to measure the effect of making a variety of improvements to it: this
            exercise showed where it would be worthwhile to invest effort. The two areas that
            account for the improvement are: 
            <div class="orderedlist e194" numeration="loweralpha">
               <div class="listitem e195">
                  <div class="para e196">Removal of unnecessary boxing and unboxing operations. Saxon generally
                     wraps simple values such as integers, strings, and booleans in a wrapper
                     (IntegerValue, StringValue, and BooleanValue, all subclasses of AtomicValue)
                     so they can all be manipulated using polymorphic methods. This means that
                     multiplying two doubles to produce another double involves not only the
                     multiplication, but two unboxing steps and one boxing step. Eliminating
                     these operations accounted for around half the improvement.
                  </div>
               </div>
               <div class="listitem e197">
                  <div class="para e198">Removal of unnecessary mapping iterators. The way this query is executed
                     in the interpreter is to create an iterator over the integers 1 to 100000;
                     the results of this iterator are piped into a mapping iterator which applies
                     a mapping function to each value, this being the expression 
                     <div class="emphasis e199" role="ital">xs:double($i)*xs:double($i);</div> and the resulting
                     doubles are then piped to the sum() function, which reads through the
                     iterator and totals the values. Inverting this structure to a loop where a
                     running total is incremented in the body of the loop, as in the hand-written
                     Java solution, accounts for the other half of the improvement.
                  </div>
               </div>
            </div>
         </div>
         <div class="para e200">The lessons from this exercise are firstly, that there are some execution paths where
            it is very hard to improve performance because it is already very close to optimal;
            but
            that there are other operations that still leave much room for improvement, and one
            good
            way to identify this is to compare the system-generated code with hand-written Java
            code
            that performs the same task.
         </div>
      </div><a name="ConclusionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e201">
         <div class="title e202">Conclusion</div>
         <div class="para e203">The purpose of this paper was to study the performance benefits that can be achieved
            by adding a code-generation phase to an XSLT or XQuery processor. To do so, we examined
            these side-by-side with the benefits achieved by high level optimization rewrites.
            The
            two techniques are orthogonal to each other, in that one can do either or both, but
            it
            is interesting to analyze which delivers better improvements in relation to the
            cost.
         </div>
         <div class="para e204">In the best case (or the worst case, depending on how you look at it), optimization
            rewrites can turn a query with quadratic performance into one with linear performance.
            This is something code generation can never aspire to. This therefore vindicates the
            approach that has been taken in Saxon of putting aside work on code generation until
            the
            high-level optimizer had achieved a sufficient level of maturity.
         </div>
         <div class="para e205">The conclusion of our study is that compiled code can be expected to run about 25%
            faster than code executed under an optimal interpreter, but the improvements can be
            greater (up to 50% in our case) when the interpreter is less than optimal or when
            the
            individual expressions on the expression tree are performing tasks such as arithmetic
            operations or numeric comparisons whose execution time is small in comparison to the
            overhead of the control logic for invoking them.
         </div>
         <div class="para e206">For Saxon, the extra 25% is well worth achieving, since there are many users with
            demanding workloads, and since the business model for the product relies on the
            development being funded by revenue from the small number of users with the most
            demanding requirements. For other products, the trade-off might be different: in
            particular the message from this study is that code-generation is something you should
            do only when all other opportunities for performance improvement have been
            exhausted.
         </div>
      </div><a name="BytecodeofgeneratedJavasourcecodeANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="appendix e207" xml:id="appendix1">
         <div class="title e208">Bytecode of generated Java source code</div>
         <div class="para e209">Using Saxon 9.3.0.4 generated Java code for the simple query 
            <div class="code e210">exists(.)</div> we
            show its byte code using the tool 
            <div class="emphasis e211">javap</div> with option
            
            <div class="emphasis e212">-c</div>:
            
            <div class="programlisting e213" xml:space="preserve"> public void process(net.sf.saxon.expr.XPathContext)   throws net.sf.saxon.trans.XPathException;
               Code:
               0:	aload_1
               1:	invokeinterface	#2,  1; //InterfaceMethod net/sf/saxon/expr/XPathContext.getReceiver:()Lnet/sf/saxon/event/SequenceReceiver;
               6:	astore_2
               7:	aload_1
               8:	invokeinterface	#3,  1; //InterfaceMethod net/sf/saxon/expr/XPathContext.getContextItem:()Lnet/sf/saxon/om/Item;
               13:	ifnonnull	25
               16:	aload_0
               17:	ldc	#4; //String The context item is undefined
               19:	ldc	#5; //String XPDY0002
               21:	aload_1
               22:	invokevirtual	#6; //Method dynamicError:(Ljava/lang/String;Ljava/lang/String;Lnet/sf/saxon/expr/XPathContext;)V
               25:	aload_1
               26:	invokeinterface	#3,  1; //InterfaceMethod net/sf/saxon/expr/XPathContext.getContextItem:()Lnet/sf/saxon/om/Item;
               31:	ifnull	38
               34:	iconst_1
               35:	goto	39
               38:	iconst_0
               39:	istore_3
               40:	aload_2
               41:	iload_3
               42:	invokestatic	#7; //Method net/sf/saxon/value/BooleanValue.get:(Z)Lnet/sf/saxon/value/BooleanValue;
               45:	iconst_0
               46:	iconst_2
               47:	invokevirtual	#8; //Method net/sf/saxon/event/SequenceReceiver.append:(Lnet/sf/saxon/om/Item;II)V
               50:	return
            </div>
            
         </div>
      </div><a name="Runningtimesofthe20XMarkXQueryqueriesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="appendix e214" xml:id="appendix3">
         <div class="title e215">Running times of the 20 XMark XQuery queries</div>
         <div class="para e216">The following three tables show running times of the 20 XMark XQuery queries. Each
            query is executed 1000 or until 30 seconds have elapsed, whichever comes first. The
            average is time reported in micro-seconds. We show results for Saxon-HE (no
            optimization), Saxon-Bytecode (no optimization, with bytecode generation), Saxon-EE
            (with optimization), Saxon-EE-JavaCode (with optimization and java source code
            generation) and Saxon-EE-Bytecode (with optimization and bytecode generation). We
            also
            show the Saxon-EE-Bytecode speedup as percentages with respect to Saxon-EE times.
            The
            fastest Saxon configuration for each result is set in bold font.
            <div class="table e217" border="1" cellpadding="10" xml:id="Table1">
               <div class="caption e218">
                  <div class="para e219">Running Times, with 1MB data file</div>
               </div>
               <div class="thead e220">
                  <div class="tr e221" valign="top">
                     <div class="th e222">Query</div>
                     <div class="th e223">Saxon-HE</div>
                     <div class="th e224">Saxon-Bytecode</div>
                     <div class="th e225">Saxon-EE</div>
                     <div class="th e226">Saxon-EE-Bytecode</div>
                     <div class="th e227">Bytecode speedup (%)</div>
                  </div>
               </div>
               <div class="tbody e228">
                  <div class="tr e229">
                     <div class="td e230">q1</div>
                     <div class="td e231">0.363</div>
                     <div class="td e232">0.394</div>
                     <div class="td e233">0.095</div>
                     <div class="td e234">
                        <div class="emphasis e235" role="bold">0.080</div>
                     </div>
                     <div class="td e236">NEG</div>
                  </div>
                  <div class="tr e237">
                     <div class="td e238">q2</div>
                     <div class="td e239">0.456</div>
                     <div class="td e240">0.452</div>
                     <div class="td e241">0.473</div>
                     <div class="td e242">
                        <div class="emphasis e243" role="bold">0.432</div>
                     </div>
                     <div class="td e244">9%</div>
                  </div>
                  <div class="tr e245">
                     <div class="td e246">q3</div>
                     <div class="td e247">0.547</div>
                     <div class="td e248">0.450</div>
                     <div class="td e249">0.606</div>
                     <div class="td e250">
                        <div class="emphasis e251" role="bold">0.416</div>
                     </div>
                     <div class="td e252">31%</div>
                  </div>
                  <div class="tr e253">
                     <div class="td e254">q4</div>
                     <div class="td e255">0.308</div>
                     <div class="td e256">
                        <div class="emphasis e257" role="bold">0.296</div>
                     </div>
                     <div class="td e258">0.443</div>
                     <div class="td e259">0.380</div>
                     <div class="td e260">14%</div>
                  </div>
                  <div class="tr e261">
                     <div class="td e262">q5</div>
                     <div class="td e263">0.183</div>
                     <div class="td e264">
                        <div class="emphasis e265" role="bold">0.127</div>
                     </div>
                     <div class="td e266">0.176</div>
                     <div class="td e267">0.144</div>
                     <div class="td e268">18%</div>
                  </div>
                  <div class="tr e269">
                     <div class="td e270">q6</div>
                     <div class="td e271">0.181</div>
                     <div class="td e272">0.208</div>
                     <div class="td e273">0.177</div>
                     <div class="td e274">
                        <div class="emphasis e275" role="bold">0.166</div>
                     </div>
                     <div class="td e276">6%</div>
                  </div>
                  <div class="tr e277">
                     <div class="td e278">q7</div>
                     <div class="td e279">0.773</div>
                     <div class="td e280">0.717</div>
                     <div class="td e281">0.773</div>
                     <div class="td e282">
                        <div class="emphasis e283" role="bold">0.626</div>
                     </div>
                     <div class="td e284">19%</div>
                  </div>
                  <div class="tr e285">
                     <div class="td e286">q8</div>
                     <div class="td e287">15.468</div>
                     <div class="td e288">12.630</div>
                     <div class="td e289">0.491</div>
                     <div class="td e290">
                        <div class="emphasis e291" role="bold">0.458</div>
                     </div>
                     <div class="td e292">7%</div>
                  </div>
                  <div class="tr e293">
                     <div class="td e294">q9</div>
                     <div class="td e295">19.401</div>
                     <div class="td e296">15.833</div>
                     <div class="td e297">1.313</div>
                     <div class="td e298">
                        <div class="emphasis e299" role="bold">1.058</div>
                     </div>
                     <div class="td e300">19%</div>
                  </div>
                  <div class="tr e301">
                     <div class="td e302">q10</div>
                     <div class="td e303">4.639</div>
                     <div class="td e304">4.128</div>
                     <div class="td e305">4.180</div>
                     <div class="td e306">
                        <div class="emphasis e307" role="bold">2.329</div>
                     </div>
                     <div class="td e308">44%</div>
                  </div>
                  <div class="tr e309">
                     <div class="td e310">q11</div>
                     <div class="td e311">7.688</div>
                     <div class="td e312">5.984</div>
                     <div class="td e313">7.533</div>
                     <div class="td e314">
                        <div class="emphasis e315" role="bold">4.957</div>
                     </div>
                     <div class="td e316">34%</div>
                  </div>
                  <div class="tr e317">
                     <div class="td e318">q12</div>
                     <div class="td e319">2.926</div>
                     <div class="td e320">2.226</div>
                     <div class="td e321">2.918</div>
                     <div class="td e322">
                        <div class="emphasis e323" role="bold">1.812</div>
                     </div>
                     <div class="td e324">38%</div>
                  </div>
                  <div class="tr e325">
                     <div class="td e326">q13</div>
                     <div class="td e327">0.138</div>
                     <div class="td e328">
                        <div class="emphasis e329" role="bold">0.137</div>
                     </div>
                     <div class="td e330">0.146</div>
                     <div class="td e331">0.152</div>
                     <div class="td e332">-4%</div>
                  </div>
                  <div class="tr e333">
                     <div class="td e334">q14</div>
                     <div class="td e335">1.740</div>
                     <div class="td e336">1.710</div>
                     <div class="td e337">1.698</div>
                     <div class="td e338">
                        <div class="emphasis e339" role="bold">1.654</div>
                     </div>
                     <div class="td e340">3%</div>
                  </div>
                  <div class="tr e341">
                     <div class="td e342">q15</div>
                     <div class="td e343">
                        <div class="emphasis e344" role="bold">0.108</div>
                     </div>
                     <div class="td e345">0.149</div>
                     <div class="td e346">0.123</div>
                     <div class="td e347">0.170</div>
                     <div class="td e348">-39%</div>
                  </div>
                  <div class="tr e349">
                     <div class="td e350">q16</div>
                     <div class="td e351">0.162</div>
                     <div class="td e352">
                        <div class="emphasis e353" role="bold">0.161</div>
                     </div>
                     <div class="td e354">0.262</div>
                     <div class="td e355">0.274</div>
                     <div class="td e356">-5%</div>
                  </div>
                  <div class="tr e357">
                     <div class="td e358">q17</div>
                     <div class="td e359">0.175</div>
                     <div class="td e360">0.140</div>
                     <div class="td e361">0.176</div>
                     <div class="td e362">
                        <div class="emphasis e363" role="bold">0.160</div>
                     </div>
                     <div class="td e364">9%</div>
                  </div>
                  <div class="tr e365">
                     <div class="td e366">q18</div>
                     <div class="td e367">0.343</div>
                     <div class="td e368">0.303</div>
                     <div class="td e369">0.231</div>
                     <div class="td e370">
                        <div class="emphasis e371" role="bold">0.219</div>
                     </div>
                     <div class="td e372">5%</div>
                  </div>
                  <div class="tr e373">
                     <div class="td e374">q19</div>
                     <div class="td e375">1.774</div>
                     <div class="td e376">1.549</div>
                     <div class="td e377">1.633</div>
                     <div class="td e378">
                        <div class="emphasis e379" role="bold">1.483</div>
                     </div>
                     <div class="td e380">9%</div>
                  </div>
                  <div class="tr e381">
                     <div class="td e382">q20</div>
                     <div class="td e383">
                        <div class="emphasis e384" role="bold">0.371</div>
                     </div>
                     <div class="td e385">0.403</div>
                     <div class="td e386">0.454</div>
                     <div class="td e387">0.452</div>
                     <div class="td e388">NEG</div>
                  </div>
               </div>
            </div>
            
            <div class="table e389" border="border" cellpadding="10" xml:id="Table2">
               <div class="caption e390">
                  <div class="para e391">Running Times, with 4MB data file</div>
               </div>
               <div class="thead e392">
                  <div class="tr e393">
                     <div class="th e394">Query</div>
                     <div class="th e395">Saxon-HE</div>
                     <div class="th e396">Saxon-Bytecode</div>
                     <div class="th e397">Saxon-EE</div>
                     <div class="th e398">Saxon-EE-Bytecode</div>
                     <div class="th e399">Bytecode speedup (%)</div>
                  </div>
               </div>
               <div class="tbody e400">
                  <div class="tr e401">
                     <div class="td e402">q1</div>
                     <div class="td e403">0.210</div>
                     <div class="td e404">0.209</div>
                     <div class="td e405">
                        <div class="emphasis e406" role="bold">0.011</div>
                     </div>
                     <div class="td e407">0.012</div>
                     <div class="td e408">-7%</div>
                  </div>
                  <div class="tr e409">
                     <div class="td e410">q2</div>
                     <div class="td e411">0.408</div>
                     <div class="td e412">
                        <div class="emphasis e413" role="bold">0.329</div>
                     </div>
                     <div class="td e414">0.416</div>
                     <div class="td e415">0.417</div>
                     <div class="td e416">NEG</div>
                  </div>
                  <div class="tr e417">
                     <div class="td e418">q3</div>
                     <div class="td e419">1.143</div>
                     <div class="td e420">
                        <div class="emphasis e421" role="bold">0.845</div>
                     </div>
                     <div class="td e422">1.238</div>
                     <div class="td e423">0.962</div>
                     <div class="td e424">22%</div>
                  </div>
                  <div class="tr e425">
                     <div class="td e426">q4</div>
                     <div class="td e427">1.005</div>
                     <div class="td e428">0.926</div>
                     <div class="td e429">1.257</div>
                     <div class="td e430">
                        <div class="emphasis e431" role="bold">0.922</div>
                     </div>
                     <div class="td e432">27%</div>
                  </div>
                  <div class="tr e433">
                     <div class="td e434">q5</div>
                     <div class="td e435">0.418</div>
                     <div class="td e436">
                        <div class="emphasis e437" role="bold">0.268</div>
                     </div>
                     <div class="td e438">0.428</div>
                     <div class="td e439">0.305</div>
                     <div class="td e440">29%</div>
                  </div>
                  <div class="tr e441">
                     <div class="td e442">q6</div>
                     <div class="td e443">0.371</div>
                     <div class="td e444">0.362</div>
                     <div class="td e445">0.369</div>
                     <div class="td e446">
                        <div class="emphasis e447" role="bold">0.306</div>
                     </div>
                     <div class="td e448">17%</div>
                  </div>
                  <div class="tr e449">
                     <div class="td e450">q7</div>
                     <div class="td e451">2.930</div>
                     <div class="td e452">2.908</div>
                     <div class="td e453">2.941</div>
                     <div class="td e454">
                        <div class="emphasis e455" role="bold">2.354</div>
                     </div>
                     <div class="td e456">20%</div>
                  </div>
                  <div class="tr e457">
                     <div class="td e458">q8</div>
                     <div class="td e459">293.398</div>
                     <div class="td e460">207.416</div>
                     <div class="td e461">1.605</div>
                     <div class="td e462">
                        <div class="emphasis e463" role="bold">1.107</div>
                     </div>
                     <div class="td e464">31%</div>
                  </div>
                  <div class="tr e465">
                     <div class="td e466">q9</div>
                     <div class="td e467">333.601</div>
                     <div class="td e468">257.565</div>
                     <div class="td e469">2.992</div>
                     <div class="td e470">
                        <div class="emphasis e471" role="bold">2.750</div>
                     </div>
                     <div class="td e472">8%</div>
                  </div>
                  <div class="tr e473">
                     <div class="td e474">q10</div>
                     <div class="td e475">52.349</div>
                     <div class="td e476">41.815</div>
                     <div class="td e477">19.142</div>
                     <div class="td e478">
                        <div class="emphasis e479" role="bold">9.514</div>
                     </div>
                     <div class="td e480">50%</div>
                  </div>
                  <div class="tr e481">
                     <div class="td e482">q11</div>
                     <div class="td e483">119.141</div>
                     <div class="td e484">90.013</div>
                     <div class="td e485">118.535</div>
                     <div class="td e486">
                        <div class="emphasis e487" role="bold">71.100</div>
                     </div>
                     <div class="td e488">39%</div>
                  </div>
                  <div class="tr e489">
                     <div class="td e490">q12</div>
                     <div class="td e491">37.280</div>
                     <div class="td e492">26.328</div>
                     <div class="td e493">37.029</div>
                     <div class="td e494">
                        <div class="emphasis e495" role="bold">20.050</div>
                     </div>
                     <div class="td e496">46%</div>
                  </div>
                  <div class="tr e497">
                     <div class="td e498">q13</div>
                     <div class="td e499">0.254</div>
                     <div class="td e500">
                        <div class="emphasis e501" role="bold">0.216</div>
                     </div>
                     <div class="td e502">0.262</div>
                     <div class="td e503">0.261</div>
                     <div class="td e504">NEG</div>
                  </div>
                  <div class="tr e505">
                     <div class="td e506">q14</div>
                     <div class="td e507">6.531</div>
                     <div class="td e508">6.181</div>
                     <div class="td e509">6.489</div>
                     <div class="td e510">
                        <div class="emphasis e511" role="bold">6.011</div>
                     </div>
                     <div class="td e512">7%</div>
                  </div>
                  <div class="tr e513">
                     <div class="td e514">q15</div>
                     <div class="td e515">0.325</div>
                     <div class="td e516">
                        <div class="emphasis e517" role="bold">0.294</div>
                     </div>
                     <div class="td e518">0.382</div>
                     <div class="td e519">0.434</div>
                     <div class="td e520">-14%</div>
                  </div>
                  <div class="tr e521">
                     <div class="td e522">q16</div>
                     <div class="td e523">0.536</div>
                     <div class="td e524">
                        <div class="emphasis e525" role="bold">0.453</div>
                     </div>
                     <div class="td e526">0.597</div>
                     <div class="td e527">0.627</div>
                     <div class="td e528">-5%</div>
                  </div>
                  <div class="tr e529">
                     <div class="td e530">q17</div>
                     <div class="td e531">0.632</div>
                     <div class="td e532">
                        <div class="emphasis e533" role="bold">0.501</div>
                     </div>
                     <div class="td e534">0.700</div>
                     <div class="td e535">0.537</div>
                     <div class="td e536">23%</div>
                  </div>
                  <div class="tr e537">
                     <div class="td e538">q18</div>
                     <div class="td e539">0.692</div>
                     <div class="td e540">0.601</div>
                     <div class="td e541">0.577</div>
                     <div class="td e542">
                        <div class="emphasis e543" role="bold">0.517</div>
                     </div>
                     <div class="td e544">10%</div>
                  </div>
                  <div class="tr e545">
                     <div class="td e546">q19</div>
                     <div class="td e547">4.613</div>
                     <div class="td e548">4.164</div>
                     <div class="td e549">4.517</div>
                     <div class="td e550">
                        <div class="emphasis e551" role="bold">3.638</div>
                     </div>
                     <div class="td e552">19%</div>
                  </div>
                  <div class="tr e553">
                     <div class="td e554">q20</div>
                     <div class="td e555">1.428</div>
                     <div class="td e556">
                        <div class="emphasis e557" role="bold">1.397</div>
                     </div>
                     <div class="td e558">1.689</div>
                     <div class="td e559">1.449</div>
                     <div class="td e560">14%</div>
                  </div>
               </div>
            </div>
            
            <div class="table e561" border="border" cellpadding="10" xml:id="Table3">
               <div class="caption e562">
                  <div class="para e563">Running Times, with 10MB data file</div>
               </div>
               <div class="thead e564">
                  <div class="tr e565">
                     <div class="th e566">Query</div>
                     <div class="th e567">Saxon-HE</div>
                     <div class="th e568">Saxon-Bytecode</div>
                     <div class="th e569">Saxon-EE</div>
                     <div class="th e570">Saxon-EE-Bytecode</div>
                     <div class="th e571">Bytecode speedup (%)</div>
                  </div>
               </div>
               <div class="tbody e572">
                  <div class="tr e573">
                     <div class="td e574">q1</div>
                     <div class="td e575">0.597</div>
                     <div class="td e576">0.519</div>
                     <div class="td e577">
                        <div class="emphasis e578" role="bold">0.010</div>
                     </div>
                     <div class="td e579">0.015</div>
                     <div class="td e580">NEG</div>
                  </div>
                  <div class="tr e581">
                     <div class="td e582">q2</div>
                     <div class="td e583">1.067</div>
                     <div class="td e584">
                        <div class="emphasis e585" role="bold">0.820</div>
                     </div>
                     <div class="td e586">1.130</div>
                     <div class="td e587">0.880</div>
                     <div class="td e588">22%</div>
                  </div>
                  <div class="tr e589">
                     <div class="td e590">q3</div>
                     <div class="td e591">3.415</div>
                     <div class="td e592">
                        <div class="emphasis e593" role="bold">2.505</div>
                     </div>
                     <div class="td e594">3.63</div>
                     <div class="td e595">2.54</div>
                     <div class="td e596">30%</div>
                  </div>
                  <div class="tr e597">
                     <div class="td e598">q4</div>
                     <div class="td e599">2.8824</div>
                     <div class="td e600">2.5606</div>
                     <div class="td e601">3.66</div>
                     <div class="td e602">
                        <div class="emphasis e603" role="bold">2.43</div>
                     </div>
                     <div class="td e604">34%</div>
                  </div>
                  <div class="tr e605">
                     <div class="td e606">q5</div>
                     <div class="td e607">1.0686</div>
                     <div class="td e608">
                        <div class="emphasis e609" role="bold">0.6742</div>
                     </div>
                     <div class="td e610">1.08</div>
                     <div class="td e611">0.76</div>
                     <div class="td e612">30%</div>
                  </div>
                  <div class="tr e613">
                     <div class="td e614">q6</div>
                     <div class="td e615">0.9080</div>
                     <div class="td e616">0.8893</div>
                     <div class="td e617">0.90</div>
                     <div class="td e618">
                        <div class="emphasis e619" role="bold">0.76</div>
                     </div>
                     <div class="td e620">16%</div>
                  </div>
                  <div class="tr e621">
                     <div class="td e622">q7</div>
                     <div class="td e623">7.487</div>
                     <div class="td e624">7.403</div>
                     <div class="td e625">7.55</div>
                     <div class="td e626">
                        <div class="emphasis e627" role="bold">6.03</div>
                     </div>
                     <div class="td e628">20%</div>
                  </div>
                  <div class="tr e629">
                     <div class="td e630">q8</div>
                     <div class="td e631">1725.13</div>
                     <div class="td e632">1295.78</div>
                     <div class="td e633">5.00</div>
                     <div class="td e634">
                        <div class="emphasis e635" role="bold">3.26</div>
                     </div>
                     <div class="td e636">35%</div>
                  </div>
                  <div class="tr e637">
                     <div class="td e638">q9</div>
                     <div class="td e639">2081.03</div>
                     <div class="td e640">1534.66</div>
                     <div class="td e641">10.1</div>
                     <div class="td e642">
                        <div class="emphasis e643" role="bold">8.168</div>
                     </div>
                     <div class="td e644">19%</div>
                  </div>
                  <div class="tr e645">
                     <div class="td e646">q10</div>
                     <div class="td e647">325.35</div>
                     <div class="td e648">276.57</div>
                     <div class="td e649">49.74</div>
                     <div class="td e650">
                        <div class="emphasis e651" role="bold">25.16</div>
                     </div>
                     <div class="td e652">49%</div>
                  </div>
                  <div class="tr e653">
                     <div class="td e654">q11</div>
                     <div class="td e655">701.79</div>
                     <div class="td e656">539.59</div>
                     <div class="td e657">708.45</div>
                     <div class="td e658">
                        <div class="emphasis e659" role="bold">421.38</div>
                     </div>
                     <div class="td e660">41%</div>
                  </div>
                  <div class="tr e661">
                     <div class="td e662">q12</div>
                     <div class="td e663">228.34</div>
                     <div class="td e664">162.37</div>
                     <div class="td e665">228.38</div>
                     <div class="td e666">
                        <div class="emphasis e667" role="bold">124.48</div>
                     </div>
                     <div class="td e668">45%</div>
                  </div>
                  <div class="tr e669">
                     <div class="td e670">q13</div>
                     <div class="td e671">0.66</div>
                     <div class="td e672">
                        <div class="emphasis e673" role="bold">0.58</div>
                     </div>
                     <div class="td e674">0.70</div>
                     <div class="td e675">0.59</div>
                     <div class="td e676">16%</div>
                  </div>
                  <div class="tr e677">
                     <div class="td e678">q14</div>
                     <div class="td e679">15.57</div>
                     <div class="td e680">15.23</div>
                     <div class="td e681">16.03</div>
                     <div class="td e682">
                        <div class="emphasis e683" role="bold">14.73</div>
                     </div>
                     <div class="td e684">8%</div>
                  </div>
                  <div class="tr e685">
                     <div class="td e686">q15</div>
                     <div class="td e687">0.77</div>
                     <div class="td e688">
                        <div class="emphasis e689" role="bold">0.72</div>
                     </div>
                     <div class="td e690">0.94</div>
                     <div class="td e691">1.05</div>
                     <div class="td e692">-12%</div>
                  </div>
                  <div class="tr e693">
                     <div class="td e694">q16</div>
                     <div class="td e695">1.28</div>
                     <div class="td e696">
                        <div class="emphasis e697" role="bold">1.11</div>
                     </div>
                     <div class="td e698">1.50</div>
                     <div class="td e699">1.39</div>
                     <div class="td e700">7%</div>
                  </div>
                  <div class="tr e701">
                     <div class="td e702">q17</div>
                     <div class="td e703">1.59</div>
                     <div class="td e704">
                        <div class="emphasis e705" role="bold">1.26</div>
                     </div>
                     <div class="td e706">1.77</div>
                     <div class="td e707">1.27</div>
                     <div class="td e708">28%</div>
                  </div>
                  <div class="tr e709">
                     <div class="td e710">q18</div>
                     <div class="td e711">1.86</div>
                     <div class="td e712">1.62</div>
                     <div class="td e713">1.57</div>
                     <div class="td e714">
                        <div class="emphasis e715" role="bold">1.29</div>
                     </div>
                     <div class="td e716">18%</div>
                  </div>
                  <div class="tr e717">
                     <div class="td e718">q19</div>
                     <div class="td e719">12.85</div>
                     <div class="td e720">12.12</div>
                     <div class="td e721">12.64</div>
                     <div class="td e722">
                        <div class="emphasis e723" role="bold">10.90</div>
                     </div>
                     <div class="td e724">14%</div>
                  </div>
                  <div class="tr e725">
                     <div class="td e726">q20</div>
                     <div class="td e727">5.32</div>
                     <div class="td e728">
                        <div class="emphasis e729" role="bold">3.64</div>
                     </div>
                     <div class="td e730">5.92</div>
                     <div class="td e731">3.74</div>
                     <div class="td e732">37%</div>
                  </div>
               </div>
            </div>
            
         </div>
      </div><a name="ReferencesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e733">
         <div class="title e734">References</div>
         <div class="bibliomixed e735" xml:id="Bruneton2002" xreflabel="Bruneton2002">E. Bruneton et al. ASM: A code
            manipulation tool to implement adaptable systems. In Proceedings 
            <div class="emphasis e736">Adaptable and
               extensible component systems
            </div>, November 2002, Grenoble, France. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e737" xlink:actuate="onRequest" xlink:href="http://asm.ow2.org/current/asm-eng.pdf" xlink:show="new" xlink:type="simple">http://asm.ow2.org/current/asm-eng.pdf</div>
            
         </div>
         <div class="bibliomixed e738" xml:id="Dahm1999" xreflabel="Dahm1999">Dahmm, Markus. Byte Code Engineering.
            1999. doi: 
            <div class="biblioid doi e739">10.1.1.103.8299</div>
            
         </div>
         <div class="bibliomixed e740" xml:id="DataPower" xreflabel="DataPower">WebSphere DataPower SOA Appliances.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e741" xlink:actuate="onRequest" xlink:href="http://www-01.ibm.com/software/integration/datapower/" xlink:show="new" xlink:type="simple">http://www-01.ibm.com/software/integration/datapower/</div>
            
         </div>
         <div class="bibliomixed e742" xml:id="Kay1999" xreflabel="Kay1999">Kay, Michael. SAXON 4.2 - An XSL Compiler.
            23 April 1999. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e743" xlink:actuate="onRequest" xlink:href="http://xml.coverpages.org/saxon42Ann.html" xlink:show="new" xlink:type="simple">http://xml.coverpages.org/saxon42Ann.html</div>
            
         </div>
         <div class="bibliomixed e744" xml:id="Kay2005" xreflabel="Kay2005">Kay, Michael. Saxon: Anatomy of an XSLT
            processor. April 2005. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e745" xlink:actuate="onRequest" xlink:href="http://www.ibm.com/developerworks/library/x-xslt2/" xlink:show="new" xlink:type="simple">http://www.ibm.com/developerworks/library/x-xslt2/</div>
            
         </div>
         <div class="bibliomixed e746" xml:id="Kay2006a" xreflabel="Kay2006a">Kay, Michael. Experiments with
            Compilation, 24 July 2006. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e747" xlink:actuate="onRequest" xlink:href="http://saxonica.blogharbor.com/blog/archives/2006/7/24/2157486.html" xlink:show="new" xlink:type="simple">http://saxonica.blogharbor.com/blog/archives/2006/7/24/2157486.html</div>
            
         </div>
         <div class="bibliomixed e748" xml:id="Kay2006b" xreflabel="Kay2006b">Kay, Michael. Optimization in XSLT and
            XQuery. In Proceeding 
            <div class="emphasis e749">XMLPrague 2006&gt;</div>, June 2006, Prague, Czech
            Republic. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e750" xlink:actuate="onRequest" xlink:href="http://www.xmlprague.cz/2006/images/xmlprague2006.pdf" xlink:show="new" xlink:type="simple">http://www.xmlprague.cz/2006/images/xmlprague2006.pdf</div>
            
         </div>
         <div class="bibliomixed e751" xml:id="Kay2006c" xreflabel="Kay2006c">Kay, Michael. First compiled XMark
            results. 6 November 2006. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e752" xlink:actuate="onRequest" xlink:href="http://saxonica.blogharbor.com/blog/_archives/2006/11/6/2477675.html" xlink:show="new" xlink:type="simple">http://saxonica.blogharbor.com/blog/_archives/2006/11/6/2477675.html</div>
            
         </div>
         <div class="bibliomixed e753" xml:id="Kay2007" xreflabel="Kay2007">Kay, Michael. Writing an XSLT Optimizer in
            XSLT. In Proceeding 
            <div class="emphasis e754">Extreme Markup Languages 2007</div>, 2007, Montreal,
            Canada. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e755" xlink:actuate="onRequest" xlink:href="http://conferences.idealliance.org/extreme/html/2007/Kay01/EML2007Kay01.html" xlink:show="new" xlink:type="simple">http://conferences.idealliance.org/extreme/html/2007/Kay01/EML2007Kay01.html</div>
            
         </div>
         <div class="bibliomixed e756" xml:id="Kay2008" xreflabel="Kay2008">Kay, Michael. Ten Reasons Why Saxon XQuery
            is Fast. In the 
            <div class="emphasis e757">IEEE Data Engineering Bulletin</div>, December 2008.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e758" xlink:actuate="onRequest" xlink:href="http://sites.computer.org/debull/A08dec/saxonica.pdf" xlink:show="new" xlink:type="simple">http://sites.computer.org/debull/A08dec/saxonica.pdf</div>
            
         </div>
         <div class="bibliomixed e759" xml:id="Kay2009" xreflabel="Kay2009">Kay, Michael. You Pull, I’ll Push: on the
            Polarity of Pipelines 
            <div class="emphasis e760">Balisage: The Markup Conference 2009</div>, Aug
            11-14, 2009, Montréal, Canada. doi:
            <div class="biblioid doi e761">10.4242/BalisageVol3.Kay01</div>. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e762" xlink:actuate="onRequest" xlink:href="http://www.balisage.net/Proceedings/vol3/html/Kay01/BalisageVol3-Kay01.html" xlink:show="new" xlink:type="simple">http://www.balisage.net/Proceedings/vol3/html/Kay01/BalisageVol3-Kay01.html</div>
            
         </div>
         <div class="bibliomixed e763" xml:id="Kay2010" xreflabel="Kay2010">Kay, Michael. A Streaming XSLT Processor.
            In Proceeding Balisage: The Markup Conference 2010, August 3-6, 2010. Montreal, Canada.
            doi: 
            <div class="biblioid doi e764">10.4242/BalisageVol5.Kay01</div>. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e765" xlink:actuate="onRequest" xlink:href="http://www.balisage.net/Proceedings/vol5/html/Kay01/BalisageVol5-Kay01.html" xlink:show="new" xlink:type="simple">http://www.balisage.net/Proceedings/vol5/html/Kay01/BalisageVol5-Kay01.html</div>
            
         </div>
         <div class="bibliomixed e766" xml:id="Snelson2011" xreflabel="Snelson2011">Snelson, John. Declarative XQuery
            Rewrites for Profit or Pleasure. An optimization meta language for implementers and
            users alike. In Proceeding 
            <div class="emphasis e767">XMLPrague 2011</div>, March 2011, Prague,
            Czech Republic. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e768" xlink:actuate="onRequest" xlink:href="http://www.xmlprague.cz/2011/files/xmlprague-2011-proceedings.pdf" xlink:show="new" xlink:type="simple">http://www.xmlprague.cz/2011/files/xmlprague-2011-proceedings.pdf</div>
            
         </div>
         <div class="bibliomixed e769" xml:id="XMark" xreflabel="XMark">XMark - XML Benchmark Project. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e770" xlink:actuate="onRequest" xlink:href="http://www.xml-benchmark.org/" xlink:show="new" xlink:type="simple">http://www.xml-benchmark.org/</div>
            
         </div>
         <div class="bibliomixed e771" xml:id="XSLTC" xreflabel="XSLTC">XSLTC, a part of Xalan-J. 
            <div class="emphasis e772">The Apache
               XML Project
            </div>. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e773" xlink:actuate="onRequest" xlink:href="http://xml.apache.org/xalan-j/xsltc/index.html" xlink:show="new" xlink:type="simple">http://xml.apache.org/xalan-j/xsltc/index.html</div>
            
         </div>
      </div>
   </div>
</div>