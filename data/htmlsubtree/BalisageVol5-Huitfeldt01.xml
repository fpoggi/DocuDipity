<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#Extensionofthetype/tokendistinctiontodocumentstructureANCHOR" name="Extensionofthetype/tokendistinctiontodocumentstructureTOC">Extension of the type/token distinction to document structure</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#Thetype/tokendistinctionANCHOR" name="Thetype/tokendistinctionTOC">The type/token distinction</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#Peirce'saccountANCHOR" name="Peirce'saccountTOC">Peirce's account</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#OtherusagesofandANCHOR" name="OtherusagesofandTOC">Other usages of  and </a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#RelateddistinctionsANCHOR" name="RelateddistinctionsTOC">Related distinctions</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TypesandtokensatdifferentlevelsANCHOR" name="TypesandtokensatdifferentlevelsTOC">Types and tokens at different levels</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ExtensionstotheconventionalviewoftypesandtokensANCHOR" name="ExtensionstotheconventionalviewoftypesandtokensTOC">Extensions to the conventional view of types and tokens</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#BasicconceptsANCHOR" name="BasicconceptsTOC">Basic concepts</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#MultiplelevelsoftypesandtokensANCHOR" name="MultiplelevelsoftypesandtokensTOC">Multiple levels of types and tokens</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#Ambiguity:disjunctionandconjunctionANCHOR" name="Ambiguity:disjunctionandconjunctionTOC">Ambiguity:  disjunction, and conjunction</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#TyperepertoiresandtypesystemsANCHOR" name="TyperepertoiresandtypesystemsTOC">Type repertoires and type systems</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#TypestokensandmarkuplanguagesANCHOR" name="TypestokensandmarkuplanguagesTOC">Types, tokens, and markup languages</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConclusionANCHOR" name="ConclusionTOC">Conclusion</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ReferencesANCHOR" name="ReferencesTOC">References</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">AVPair</div>
         <div class="singletermTERMS">ambigram</div>
         <div class="singletermTERMS">ALGOL</div>
         <div class="singletermTERMS">are the same word</div>
         <div class="singletermTERMS">ambigrams</div>
         <div class="singletermTERMS">AVPair</div>
         <div class="singletermTERMS">analog</div>
         <div class="singletermTERMS">all</div>
         <div class="singletermTERMS">August 3 - 6, 2010</div>
         <div class="singletermTERMS">Associate Professor (f√∏rsteamanuensis)</div>
         <div class="singletermTERMS">Associate Professor</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">below</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2010</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">ch_seq : seq Type</div>
         <div class="singletermTERMS">ch_counts</div>
         <div class="singletermTERMS">contrastive units</div>
         <div class="singletermTERMS">compound types</div>
         <div class="singletermTERMS">character</div>
         <div class="singletermTERMS">constituents</div>
         <div class="singletermTERMS">children</div>
         <div class="singletermTERMS">conjunctive</div>
         <div class="singletermTERMS">content</div>
         <div class="singletermTERMS">Communications of the ACM</div>
         <div class="singletermTERMS">Collected papers</div>
         <div class="singletermTERMS">cmsmcq@blackmesatech.com</div>
         <div class="singletermTERMS">Claus</div>
         <div class="singletermTERMS">C. M.</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">Disjunctive_Type</div>
         <div class="singletermTERMS">document</div>
         <div class="singletermTERMS">disjunctive types</div>
         <div class="singletermTERMS">digital</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">elems[sub_seq] = subregions</div>
         <div class="singletermTERMS">elems[ch_seq] = children</div>
         <div class="singletermTERMS">emic</div>
         <div class="singletermTERMS">etic</div>
         <div class="singletermTERMS">either</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
         <div class="singletermTERMS">finitely differentiated</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
         <div class="singletermTERMS">Geheimschrift</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">How many words are in this sentence?</div>
         <div class="singletermTERMS">Huitfeldt</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">in</div>
         <div class="singletermTERMS">inversions</div>
         <div class="singletermTERMS">inversion</div>
         <div class="singletermTERMS">Instance</div>
         <div class="singletermTERMS">instantiate</div>
         <div class="singletermTERMS">inscription</div>
         <div class="singletermTERMS">infinity</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
         <div class="singletermTERMS">Kind</div>
         <div class="singletermTERMS">kind</div>
         <div class="singletermTERMS">Kind</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">language</div>
         <div class="singletermTERMS">logical types</div>
         <div class="singletermTERMS">levels</div>
         <div class="singletermTERMS">lower-level</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">munonyqi</div>
         <div class="singletermTERMS">muuvnyzi</div>
         <div class="singletermTERMS">markup</div>
         <div class="singletermTERMS">Marcoux</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">Natural_number</div>
         <div class="singletermTERMS">no mark may belong to more than one character</div>
         <div class="singletermTERMS">normal</div>
         <div class="singletermTERMS">notational system</div>
         <div class="singletermTERMS">Natural_number</div>
         <div class="singletermTERMS">Numerische Mathematik</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">Ordered_S_Unit</div>
         <div class="singletermTERMS">offenbar</div>
         <div class="singletermTERMS">occurrence</div>
         <div class="singletermTERMS">occurrences</div>
         <div class="singletermTERMS">or</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">Poland</div>
         <div class="singletermTERMS">public, apparent, obvious</div>
         <div class="singletermTERMS">Prolegomena to an apology for pragmaticism</div>
         <div class="singletermTERMS">phones</div>
         <div class="singletermTERMS">phonemes</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">Report on the Algorithmic Language ALGOL 60</div>
         <div class="singletermTERMS">Refrain</div>
         <div class="singletermTERMS">regions</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">sub_seq : seq Token</div>
         <div class="singletermTERMS">S_Unit</div>
         <div class="singletermTERMS">sub_counts</div>
         <div class="singletermTERMS">scottkim.com</div>
         <div class="singletermTERMS">sequence of occurrences of types</div>
         <div class="singletermTERMS">sequence of types.</div>
         <div class="singletermTERMS">secret writing</div>
         <div class="singletermTERMS">sets</div>
         <div class="singletermTERMS">sequences</div>
         <div class="singletermTERMS">S_Units</div>
         <div class="singletermTERMS">subregions</div>
         <div class="singletermTERMS">Sperberg-McQueen</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">type : Type</div>
         <div class="singletermTERMS">type</div>
         <div class="singletermTERMS">type in Ordered_S_Unit</div>
         <div class="singletermTERMS">type.ch_seq = sub_seq.@type</div>
         <div class="singletermTERMS">type.children = subregions.@type</div>
         <div class="singletermTERMS">the</div>
         <div class="singletermTERMS">true copies</div>
         <div class="singletermTERMS">the Aleutian islands</div>
         <div class="singletermTERMS">the Olympic Games</div>
         <div class="singletermTERMS">the text itself</div>
         <div class="singletermTERMS">Types and Tokens</div>
         <div class="singletermTERMS">types</div>
         <div class="singletermTERMS">tokens</div>
         <div class="singletermTERMS">the</div>
         <div class="singletermTERMS">Type</div>
         <div class="singletermTERMS">Token</div>
         <div class="singletermTERMS">type</div>
         <div class="singletermTERMS">token</div>
         <div class="singletermTERMS">Tokens</div>
         <div class="singletermTERMS">Types</div>
         <div class="singletermTERMS">text node</div>
         <div class="singletermTERMS">text</div>
         <div class="singletermTERMS">type repertoires</div>
         <div class="singletermTERMS">type system</div>
         <div class="singletermTERMS">The Monist</div>
         <div class="singletermTERMS">The Stanford Encyclopedia of Philosophy</div>
         <div class="singletermTERMS">Types and tokens: On abstract objects</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
         <div class="singletermTERMS">Unordered_S_Unit</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
         <div class="singletermTERMS">yves.marcoux@umontreal.ca</div>
         <div class="singletermTERMS">Yves</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="Extensionofthetype/tokendistinctiontodocumentstructureANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.2">
      <div class="title e1">Extension of the type/token distinction to document structure</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2010</div>
            <div class="confdates e5">August 3 - 6, 2010</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">
               The type/token distinction introduced by C. S. Peirce and taken
               up by many others is familiar when applied to individual symbols
               or characters in a writing system, and also when applied at a
               higher level to words (and word-like objects).  
               
            </div>
            <div class="para e8">
               Some writers apply the distinction not only at some basic or
               foundational level but also as a description of higher levels of
               organization.  This paper follows their example by outlining a
               concrete extension of the type/token distinction to all levels of
               document organization, specifying that higher-level types may
               contain sequences of lower-level types, and similarly
               for higher- and lower-level tokens. We further extend the usual
               model of types and tokens by allowing higher-level types to
               contain not just sequences of (lower-level) types 
               but also sets, bags, conjunctions and disjunctions of types. 
               This allows the system to
               deal gracefully both with indeterminate documents (e.g., a
               manuscript in which it is not clear whether a given mark on the
               page represents a 'c' or a 't') and with intentionally polyvalent
               documents, in which some marks are to be read as tokens of more
               than one type, as in the 
               <div class="quote e9">ambigram</div>, a sort of
               combination puzzle and calligraphic artwork in which the shapes
               on the page may be read in different ways, or the same way, in
               different directions.
            </div>
            <div class="para e10">
               This account of document structure in terms of types and tokens
               is similar in many ways to that offered by SGML, XML, and other
               systems of descriptive markup.  On this view, SGML and XML
               elements are, strictly speaking, types (and tokens) in Peirce's
               sense of those words.  Some techniques developed in other areas
               to which the type/token distinction is relevant may be useful in
               work on markup languages (and vice versa).
               
            </div>
         </div>
         <div class="author e11">
            <div class="personname e12">
               <div class="firstname e13">Claus</div>
               <div class="surname e14">Huitfeldt</div>
            </div>
            <div class="personblurb e15">
               <div class="para e16">Mag.art. Claus Huitfeldt (born 1957) is Associate Professor (f√∏rsteamanuensis) at
                  the Department of Philosophy of the University  of Bergen since 1994.
                  
               </div>
               <div class="para e17">
                  	He was founding Director (1990-2000) of the Wittgenstein Archives at the University
                  of Bergen, for which he developed the text encoding system MECS as well as the editorial
                  methods for the publication of 
                  <div class="emphasis e18">Wittgenstein's Nachlass ‚Äî The Bergen Electronic Edition</div>
                  (Oxford University Press, 2000).
               </div>
               <div class="para e19">
                  	He was Research Director (2000-2002) of Aksis (Section for Culture, Language and
                  Information Technology at the Bergen University Research Foundation). In 2003 he returned
                  to his position at the Department of Philosophy, where he teaches modern philosophy
                  and philosophy of language, and also gives frequent courses in text technology at
                  the The Department of Humanistic Informatics.
                  
               </div>
               <div class="para e20">
                  	He was active in the Text Encoding Initiative (TEI) since 1991, and was centrally
                  involved in the foundation of the TEI Consortium in 2001. The consortium now counts
                  more than 90 member institutions.
                  
               </div>
               <div class="para e21">
                  	Huitfeldt's research interests are within philosophy of language, philosophy of technology,
                  text theory, editorial philology and markup theory. He is currently leader of the
                  project Markup Languages for Complex Documents (MLCD).
               </div>
            </div>
            <div class="affiliation e22">
               <div class="jobtitle e23">Associate Professor (f√∏rsteamanuensis)</div>
               <div class="orgname e24">Department of Philophy, University of Bergen</div>
            </div>
         </div>
         <div class="author e25">
            <div class="personname e26">
               <div class="firstname e27">Yves</div>
               <div class="surname e28">Marcoux</div>
            </div>
            <div class="personblurb e29">
               <div class="para e30">Yves Marcoux is a faculty member at EBSI, University of Montr√©al,
                  since 1991. He is mainly involved in teaching and research activities in the
                  field of document informatics. Prior to his appointment at EBSI, he has worked
                  for 10 years in systems maintenance and development, in Canada, the U.S., and
                  Europe. He obtained his Ph.D. in theoretical computer science from University
                  of Montr√©al in 1991. His main research interests are document semantics,
                  structured document implementation methodologies, and information retrieval in
                  structured documents. Through GRDS, his research group at EBSI, he has been
                  principal architect for the Governmental Framework for Integrated Document
                  Management, a project funded by the National Archives of Qu√©bec and by the
                  Qu√©bec Treasury Board.
               </div>
            </div>
            <div class="affiliation e31">
               <div class="jobtitle e32">Associate Professor</div>
               <div class="orgname e33">Universit√© de Montr√©al</div>
            </div>
            <div class="email e34">yves.marcoux@umontreal.ca</div>
         </div>
         <div class="author e35">
            <div class="personname e36">
               <div class="firstname e37">C. M.</div>
               <div class="surname e38">Sperberg-McQueen</div>
            </div>
            <div class="personblurb e39">
               <div class="para e40">C. M. Sperberg-McQueen is a consultant specializing
                  in preserving and providing access to cultural and scientific data.
                  He has served as co-editor of the XML 1.0
                  specification, the Guidelines of the Text Encoding Initiative, and the
                  XML Schema Definition Language (XSDL) 1.1 specification.  He holds a
                  doctorate in comparative literature.
                  
               </div>
            </div>
            <div class="affiliation e41">
               <div class="orgname e42">Black Mesa Technologies</div>
            </div>
            <div class="email e43">cmsmcq@blackmesatech.com</div>
         </div>
         <div class="legalnotice e44">
            <div class="para e45">Copyright ¬© 2010 by the authors.</div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e46" xml:id="intro">
         <div class="title e47">Introduction</div>
         <div class="para e48">We propose to extend the familiar type/token distinction in two
            ways.  First, we apply it not only to words or to atomic
            characters but also to higher-level document structures; second,
            we introduce mechanisms for handling tokens whose type identity
            is ambiguous either because of uncertainty or because of
            intentional use of multiple meanings.  In the first point, we
            follow the example of a number of other authors who have
            distinguished at multiple levels what we here call tokens from
            what we here call types; we offer a more explicit and formal
            account than has been usual. Recasting the familiar type/instance
            distinction as a type/token distinction has the helpful
            consequence of providing a unified account of document structure
            at all levels, instead of treating the character and element
            levels as essentially different.
            
         </div>
         <div class="para e49">The ideas presented here originally arose (as some of the
            examples will show) in the context of work on the logical
            structure of transcription, but they concern general questions of
            document structure.
         </div>
         <div class="para e50">The next section (
            <div class="xref e51" linkend="giants"></div>)
            presents a terse survey of the type/token distinction, as we
            believe it is conventionally accepted.  The following section 
            (
            <div class="xref e52" linkend="ttx"></div>) elaborates the conventional view
            and extends it in three ways. First, our account handles not only
            atomic but also compound types; our compound types and compound
            tokens include the structures conventionally recognized and
            marked up in descriptive markup.  Second, we propose a mechanism
            that handles not only the usual case in which a token has a
            single known type, but also less common and more difficult cases
            in which there is uncertainty about which type to assign to a
            token, or in which a token has been intentionally designed to
            belong to multiple types.  Third, we introduce the notions of
            type repertoire and type system to clarify the ways in which
            multi-level types and tokens obey the normal rule stipulating
            that any token instantiates just one type. The penultimate
            section (
            <div class="xref e53" linkend="ttmk"></div>) discusses some of the obvious parallels between
            markup languages like XML and the application of the type/token
            distinction to document structures at levels above the individual
            character or word. The final section (
            <div class="xref e54" linkend="conclusion"></div>) contains some concluding remarks and
            speculations.
            
            
         </div>
      </div><a name="Thetype/tokendistinctionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e55" xml:id="giants">
         <div class="title e56">The type/token distinction</div>
         <div class="para e57">
            The distinction between strings as 
            <div class="emphasis e58">types</div> and strings
            as 
            <div class="emphasis e59">tokens</div> is a familiar one to almost any
            programmer, but what they have in mind is not quite
            the same as was described by Peirce when he introduced the distinction
            [
            <div class="xref e60" linkend="Peirce"></div>].
         </div>
         <div class="para e61">Consider a sequence of words on a page, for example the first
            sentence of the Algol 60 report [
            <div class="xref e62" linkend="Algol"></div>], 
            and the question 
            <div class="quote e63">How many
               words are  in this sentence?
            </div>
            
            <div class="popupBox e64">
               <div class="popupLabel" onmouseover="$('#d1e115').show('1000');" onmouseout="$('#d1e115').hide('1000');">[ blockquote ]</div>
               <div id="d1e115" style="display: none;">
                  <div class="blockquote">
                     <div class="para e65">After the publication of a preliminary report
                        on the algorithmic language ALGOL, as prepared at a conference
                        in Z√ºrich in 1958, much interest in the ALGOL language 
                        developed.
                     </div>
                  </div>
               </div>
            </div>
            In one sense, there are 28 words; the sentence is a sequence of
            words, and the length of the sequence is 28.  In another sense,
            however, the sentence contains only 21 words (assuming that 
            <div class="quote e66">1958</div>
            counts as a word), some of which
            (
            <div class="quote e67">ALGOL</div>, 
            <div class="quote e68">a</div>, 
            <div class="quote e69">in</div>, 
            <div class="quote e70">language</div>, and 
            <div class="quote e71">the</div>)
            appear more than once.  In some contexts, it would be convenient to
            treat these repeated words as distinct, and in other contexts,
            to treat them as identical.
            
            
            
         </div>
         <div class="para e72">Peirce provided a simple way to do this, by distinguishing the
            two senses of 
            <div class="emphasis e73">word</div> at issue here. He
            called words in the first sense 
            <div class="emphasis e74">tokens</div> and in the 
            second sense
            
            <div class="emphasis e75">types</div>.  A token, in Peirce's account, is a 
            <div class="quote e76">thing
               which is in some single place at any one instant of time
            </div>
            ‚Äî this example, the tokens are the physical marks of ink
            on the page (or the physical illumination of the pixels on the
            screen).  Types, meanwhile, are in the usual account the abstract
            objects we identify when we say that the second and ninth words
            (tokens) of the sentence 
            <div class="quote e77">are the same word</div>.
            
         </div><a name="Peirce'saccountANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e78" xml:id="tt_peirce">
            <div class="title e79">Peirce's account</div>
            <div class="para e80">Peirce's account of the distinction runs as follows
               [
               <div class="xref e81" linkend="Peirce"></div>] pp. 423-4:
               
               <div class="popupBox e82">
                  <div class="popupLabel" onmouseover="$('#d1e162').show('1000');" onmouseout="$('#d1e162').hide('1000');">[ blockquote ]</div>
                  <div id="d1e162" style="display: none;">
                     <div class="blockquote">
                        <div class="para e83">A common mode of estimating the amount of
                           matter in a MS. or printed book is to count the number of words.
                           There will ordinarily be about twenty
                           
                           <div class="emphasis e84">the</div>s on a page, and of course they count
                           as twenty words. In another sense of the word 
                           <div class="quote e85">word,</div>
                           however, there is but one word 
                           <div class="quote e86">the</div> in the English
                           language; and it is impossible that this word should lie visibly
                           on a page or be heard in any voice, for the reason
                           that it is not a Single thing or Single event. It does not
                           exist; it only determines things that do exist.  Such a
                           definitely significant Form, I propose to term a
                           
                           <div class="emphasis e87">Type</div>.  A Single event which happens once and whose
                           identity is limited to that one happening or a Single object or
                           thing which is in some single place at any one instant of time,
                           such event or thing being significant only as occurring just
                           when and where it does, such as this or that word on a single
                           line of a single page of a single copy of a book, I will venture
                           to call a 
                           <div class="emphasis e88">Token</div>. [...] In order that a Type may be
                           used, it has to be embodied in a Token which shall be a sign of
                           the Type, and thereby of the object the Type signifies. I
                           propose to call such a Token of a Type an 
                           <div class="emphasis e89">Instance</div>
                           of the Type.  Thus, there may be twenty Instances of the type
                           
                           <div class="quote e90">the</div> on a page.
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e91">As may be seen, Peirce's distinction stresses the opposition
               between the concrete physical existence of the token and the
               abstract nature (and, in Peirce's terminology, the
               non-existence!) of the type.  He also establishes the usage that
               tokens can be said to 
               <div class="emphasis e92">instantiate</div> 
               types.
               <div class="popupBox e93">
                  <div class="popupLabel" onmouseover="$('#d1e193').show('1000');" onmouseout="$('#d1e193').hide('1000');">[ footnote ]</div>
                  <div id="d1e193" style="display: none;">
                     <div class="footnote">
                        <div class="para e94">It may be worth noting that Peirce makes
                           explicitly clear that blank spaces between words are also to be
                           considered tokens of a specific type. The quoted paragraph
                           continues as follows:
                           
                           <div class="quote e95">The term (Existential)
                              	Graph will be taken in the sense of a Type; and the act of
                              	embodying it in a Graph-Instance will be termed scribing the
                              	Graph (not the Instance), whether the Instance be written,
                              	drawn, or incised. A mere blank place is a Graph-Instance, and
                              	the Blank per se is a Graph - but I shall ask you to assume
                              	that it has the peculiarity that it cannot be abolished from
                              	any Area on which it is scribed as long as that Area
                              	exists.
                           </div> 
                        </div>
                     </div>
                  </div>
               </div> 
               To be a token, in fact, is  to instantiate
               a type (and vice versa); there are no tokens without associated
               types.
               <div class="popupBox e96">
                  <div class="popupLabel" onmouseover="$('#d1e200').show('1000');" onmouseout="$('#d1e200').hide('1000');">[ footnote ]</div>
                  <div id="d1e200" style="display: none;">
                     <div class="footnote">
                        <div class="para e97">We remain agnostic on the related
                           question whether there can be types without associated
                           tokens.
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
         </div><a name="OtherusagesofandANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e98" xml:id="nonpar">
            <div class="title e99">Other usages of 
               <div class="emphasis e100">type</div> and 
               <div class="emphasis e101">token</div>
            </div>
            <div class="para e102">There are a number of other usages of the terms 
               <div class="emphasis e103">type</div>
               and 
               <div class="emphasis e104">token</div> which differ from Peirce's, and
               should not be confused with it.
            </div>
            <div class="para e105">Peirce's types have nothing to do with Bertrand Russell's
               
               <div class="quote e106">logical types</div>, which are classes or orders
               of sets and belong to a completely different story.  The
               (data) types of programming languages and XML schema languages
               are similarly distinct concepts.
               
            </div>
            <div class="para e107">
               Some common usages (not only in computing, but particularly
               visible there), employ an opposition between 
               <div class="emphasis e108">token</div>
               and 
               <div class="emphasis e109">type</div> similar to Peirce's, but divorce it more
               or less completely from the opposition of concrete physical
               existence and abstraction; any instance of a particular string
               (more precisely, of a particular string type) is taken as a
               token of that type. In a related usage, 
               <div class="emphasis e110">token</div> is
               also taken simply as one item in the results produced by a
               tokenizer, whose task it is to divide a sequence of characters
               into units. 
               A more careful usage reserves the word
               
               <div class="emphasis e111">token</div> for concrete physical phenomena and
               uses the term 
               <div class="emphasis e112">occurrence</div> for what common
               computing terminology calls tokens, reserving
               
               <div class="emphasis e113">token</div> for particular physical
               realizations of the type.
               <div class="popupBox e114">
                  <div class="popupLabel" onmouseover="$('#d1e246').show('1000');" onmouseout="$('#d1e246').hide('1000');">[ footnote ]</div>
                  <div id="d1e246" style="display: none;">
                     <div class="footnote">
                        <div class="para e115">The concept of
                           occurrences is not without its own complications and
                           subtleties, but we will not detain the reader with a discussion
                           of them.  A helpful discussion of the distinction between
                           tokens and occurrences, and a useful summary of some of the
                           related philosophical issues, may be found in [
                           <div class="xref e116" linkend="Wetzel2008"></div>] and [
                           <div class="xref e117" linkend="Wetzel2009"></div>], and also our discussion further below in
                           section 
                           <div class="xref e118" linkend="ttlevels"></div>.
                        </div>
                     </div>
                  </div>
               </div> 
               
            </div>
            <div class="para e119">
               In this paper, we do distinguish between tokens, types, and occurrences of types.
               
               The latter will be encountered mainly in what we will call 
               
               <div class="emphasis e120">compound types</div>, for example 
               <div class="emphasis e121">sets</div> 
               or 
               <div class="emphasis e122">sequences</div> of (other) types. In those cases, 
               the components of the compound type are implicitly understood to be 
               
               <div class="emphasis e123">occurrences</div> of types, so we will not say, for example, 
               
               <div class="quote e124">sequence of occurrences of types</div> (which would be somewhat 
               pleonastic), but simply 
               <div class="quote e125">sequence of types.</div>
            </div>
         </div><a name="RelateddistinctionsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e126" xml:id="tt_other">
            <div class="title e127">Related distinctions</div>
            <div class="para e128">The type/token distinction is sometimes met with under different
               names (and those who use those different ways of speaking about
               things may or may not agree with our claim that what they
               are speaking about is in fact the type/token distinction).  In
               this section we mention two of the more important, without
               being able to discuss them in the detail they deserve.
               
            </div>
            <div class="para e129">Nelson Goodman describes the constituents of a
               
               <div class="emphasis e130">notational system</div> thus 
               [
               <div class="xref e131" linkend="Goodman"></div>], p. 131: 
               
               <div class="popupBox e132">
                  <div class="popupLabel" onmouseover="$('#d1e288').show('1000');" onmouseout="$('#d1e288').hide('1000');">[ blockquote ]</div>
                  <div id="d1e288" style="display: none;">
                     <div class="blockquote">
                        <div class="para e133">Characters are certain classes of utterances or
                           inscriptions or marks. (‚Ä¶ 
                           an
                           inscription is any mark ‚Äî visual, auditory, etc. ‚Äî
                           that belongs to a character.) 
                           Now the essential feature of a
                           character in a notation is that its members may be freely
                           exchanged for one another without any syntactical effect; or
                           more literally, since actual marks are seldom moved about and
                           exchanged, that all inscriptions of a given character be
                           syntactically equivalent.  In other words, being instances of
                           one character in a notation must constitute a sufficient
                           condition for marks being 
                           <div class="quote e134">true copies</div> or
                           replicas of each other, or being spelled the same way.
                        </div>
                     </div>
                  </div>
               </div>       
               Goodman speaks here of characters being classes of inscriptions,
               but he makes clear elsewhere that this is merely a convenient
               way of expressing himself and is not intended to commit him to
               the existence of classes or sets: in a more careful formulation,
               presumably, Goodman would say that characters are the
               mereological sums of their inscriptions:  complex individuals
               (entities) made of the individual inscriptions of the
               character.
               <div class="popupBox e135">
                  <div class="popupLabel" onmouseover="$('#d1e295').show('1000');" onmouseout="$('#d1e295').hide('1000');">[ footnote ]</div>
                  <div id="d1e295" style="display: none;">
                     <div class="footnote">
                        <div class="para e136">The notion of such spatially and
                           temporally disjoint objects forming a single whole may trouble
                           some readers, but consideration of such noun phrases as 
                           <div class="quote e137">the
                              	Aleutian islands
                           </div>, 
                           <div class="quote e138">the Olympic Games</div>, and
                           
                           <div class="quote e139">Poland</div> may persuade such readers that some cases (at
                           least) of temporal and physical disjointness seem to pass
                           without comment.
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e140">We take Goodman's opposition between 
               <div class="emphasis e141">inscription</div>
               and 
               <div class="emphasis e142">character</div> to be the same as, or very similar
               to, Peirce's opposition of token and type. The properties
               Goodman ascribes to characters and inscriptions are precisely
               those of types and tokens.  Goodman makes explicit some
               properties of types and tokens which are part of the usual
               view of the matter but are not explicit in the passage from 
               Peirce quoted above.  In particular:
               
               <div class="itemizedlist e143">
                  <div class="listitem e144">
                     <div class="para e145">No token is a token of more than one 
                        	type.
                        <div class="popupBox e146">
                           <div class="popupLabel" onmouseover="$('#d1e320').show('1000');" onmouseout="$('#d1e320').hide('1000');">[ footnote ]</div>
                           <div id="d1e320" style="display: none;">
                              <div class="footnote">
                                 <div class="para e147">In Goodman's terms, 
                                    <div class="quote e148">no mark may belong to
                                       	  more than one character
                                    </div> [
                                    <div class="xref e149" linkend="Goodman"></div>] 
                                    	 p. 133.
                                 </div>
                              </div>
                           </div>
                        </div> In consequence, types are
                        	disjoint from each other.
                     </div>
                  </div>
                  <div class="listitem e150">
                     <div class="para e151">Any two types must be 
                        <div class="emphasis e152">finitely differentiated</div>
                        	from each other; it must always be possible, in principle, to
                        	distinguish tokens of one type from tokens of another.
                        	(This does not mean that it will always be easy or possible
                        	in practice, only that in any system of types it is not
                        	possible to have two which are not in principle 
                        	distinguishable from each other.)
                        
                     </div>
                  </div>
               </div>
               The full exploitation of Goodman's work for illumination of
               the type/token distinction remains a desideratum for the future.
               
            </div>
            <div class="para e153">The type/token distinction also resembles the distinction made
               by most phonologists between specific individual sounds 
               or configurations of the vocal organs
               (
               <div class="emphasis e154">phones</div>) and the distinctive units of phonology
               (
               <div class="emphasis e155">phonemes</div>).
               <div class="popupBox e156">
                  <div class="popupLabel" onmouseover="$('#d1e344').show('1000');" onmouseout="$('#d1e344').hide('1000');">[ footnote ]</div>
                  <div id="d1e344" style="display: none;">
                     <div class="footnote">
                        <div class="para e157">One outstanding
                           difference should probably be mentioned:  while Peirce
                           explicitly contrasts the concrete token with the abstract
                           type, the phones discussed by linguists and captured in
                           phonetic transcriptions whether broad or narrow are not
                           concrete sounds but abstract classes of sounds.  This does
                           not, however, seem to us to make the concept of phoneme
                           irrelevant to our topic:  like a type, a phoneme provides 
                           a unit which serves to make identical many things which 
                           would otherwise be distinct.  It does not matter for our
                           purposes whether those things are abstract phones or
                           concrete segments of utterances.
                        </div>
                     </div>
                  </div>
               </div> 
               Goodman's remark about the equivalence
               (at least for syntactic purposes) of the different tokens of a
               type recalls the occasional supposition by phonologists that
               different realizations of the same phoneme may be interchanged
               freely without affecting the acceptability of the utterance.
               
               
            </div>
            <div class="para e158">
               The phone/phoneme distinction allows linguists to treat sounds
               in different utterances (or at different locations in the same
               utterance) as identical for certain purposes, and distinct for
               others.  It thus serves a function analogous to the one we noted
               above for the type/token distinction.  Like types, phonemes
               are instantiated by physical phenomena which can vary widely in
               detail.  Like types, they are taken to be disjoint from each
               other (they serve, in a common description, as 
               <div class="quote e159">contrastive
                  units
               </div>, which we take to mean that one of their functions 
               is to be distinct from each other).
               
            </div>
            <div class="para e160">Much of the machinery of phonology can usefully be applied to
               types and tokens. Just as phonemes can almost always be realized
               by a number of different phonetic variants (allophones), with
               the choice of allophone often determined by the phonetic
               environment, so also do the tokens of a type frequently fall
               into subclasses which may vary depending on environment or other
               factors.  Conventionally minimal pairs (pairs of words which
               differ only in a single sound) are taken as evidence for
               distinctions among phonemes; similarly minimal pairs can be used
               to distinguish different types from each other.  And just as
               phonologists have found it helpful to define phonemes in terms
               of sets of minimally distinctive features, so also it may
               prove helpful to define types in terms of distinctive
               features.  It is interesting to note that defining types
               in terms of finite sets of distinctive features guarantees
               that any type so defined will satisfy Goodman's requirement
               that it be finitely differentiated from other types.
               
            </div>
         </div><a name="TypesandtokensatdifferentlevelsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e161" xml:id="ttlevels">
            <div class="title e162">Types and tokens at different levels</div>
            <div class="para e163">One further topic should be discussed at least briefly before
               we proceed with our elaboration of the type/token distinction.
               As the title of the paper indicates, its central idea is that
               the type/token distinction can be applied not just to words and
               characters, but also to higher-level document structures. Since
               document structures are generally understood to have internal
               structure and to nest within other document structures, we 
               must necessarily consider both types and tokens as capable
               of nesting and having internal structure.
            </div>
            <div class="para e164">This appears not to be the most common view of the type/token
               distinction.  The distinction is sometimes applied at the
               character level, and sometimes at the type level, but not
               (usually) at both levels at the same time. In the passage quoted
               above, for example, Peirce identifies types and tokens only as
               ways of looking at words, without mentioning their relation to
               types or tokens at lower or higher levels of analysis.
            </div>
            <div class="para e165">It is not unknown, however, to apply the type/token
               distinction at multiple levels.
            </div>
            <div class="para e166">Goodman, for example, explicitly applies the term
               
               <div class="emphasis e167">character</div> things which may contain other
               characters, and expects this to be the normal case:
               
               <div class="quote e168">Any symbol scheme consists of characters,
                  usually with modes of combining them to form others.
               </div> 
               
               So in Goodman's sense, the initial 
               <div class="quote e169">A</div> of 
               <div class="quote e170">ALGOL</div> is a
               character, and so is 
               <div class="quote e171">ALGOL</div> itself.  The first sentence of
               the Algol report can be regarded as a character in the same
               sense, as can the paragraph in which it occurs, and after a few
               more combinations at higher and higher levels, the Algol 60
               report itself as a whole.  (Or, in the terminology we prefer as
               less confusing to users of Unicode, the initial 
               <div class="quote e172">A</div> of
               
               <div class="quote e173">ALGOL</div>, the word 
               <div class="quote e174">ALGOL</div> itself, and so on, are all
               types at various levels, instantiated by tokens at similarly
               various levels.)
               
            </div>
            <div class="para e175">The linguistic concept of phone and phoneme does not allow
               phonemes to nest.  But the idea of phonetic/phonemic contrasts
               has been widely applied in other areas of linguistics, perhaps
               most widely and visibly by the linguist Kenneth L. Pike.  Pike
               generalized the distinction between phonetic and phonemic
               phenomena, coining the terms 
               <div class="emphasis e176">emic</div> and
               
               <div class="emphasis e177">etic</div>, and applied the distinction not
               only to other areas of linguistic analysis but also to virtually
               all of human behavior [
               <div class="xref e178" linkend="Pike"></div>]. The
               emic/etic distinction has apparently achieved wide currency in
               some schools of anthropology and sociology.  And when 
               both phonological and other linguistic levels are analysed
               in terms of emic and etic units, it is unavoidable that
               some of those units will have internal structure and nest
               in other emic and etic units.
               
            </div>
            <div class="para e179">Finally, recent discussions of types and tokens by the
               philosopher Linda Wetzel have devoted significant attention to
               questions that arise when considering tokens, or types, at
               multiple levels.  If we consider any concrete realization of the
               sentence from the Algol report quoted above (i.e. any token of
               the sentence), then it is easy enough to see that the sentence
               token can be decomposed into word tokens, and the word tokens
               into character tokens.  But of what, asks Wetzel, is the
               sentence 
               <div class="emphasis e180">type</div> composed? It cannot be composed of
               word tokens, because as a type it is abstract.  It cannot be
               composed simply of word types, because the sentence is 28 words
               long, but there are only 21 word types available for the job.
               Wetzel concludes, after painstaking investigation of
               alternatives, arguments, and counter-arguments, that the
               sentence type consists of 28 occurrences 
               of word types.  She
               elucidates the concept of occurrence with the aid of an appeal
               to sequences, and then generalizes it to situations where the
               parts of a larger whole are not arranged in sequences.
               
            </div>
            <div class="para e181">Another issue raised by Wetzel may be worth mentioning.
               In cases where the containing string is written out in full,
               each 
               <div class="emphasis e182">token</div> in the string will (as always)
               constitute a different occurrence of a type, and each occurrence
               of a type will be signaled by a different token. This has led
               some philosophers to doubt the utility of any distinction
               between occurrences and tokens.  How, they ask, can a type occur
               multiple times in a sequence (or other structure) unless it is
               instantiated by a different token for each occurrence? The
               question takes on a particular interest in the context of SGML
               and XML, where multiple references to an entity can in fact
               easily produce multiple occurrences of a type from a single
               token.  Macros as handled by the C pre-processor have the same
               effect.  Examples outside of mechanical systems appear to
               be less common, but they do exist.  In printed versions of
               ballads and other songs with refrains, it is not uncommon
               for only the first occurrence of the refrain to be printed
               in full, while others are indicated only by the word
               
               <div class="emphasis e183">Refrain</div>, which functions here as a sort
               of macro or entity reference.  And repeat-marks in music
               seem to make the note tokens so marked correspond to 
               multiple note-type occurrences in the music.
               
            </div>
         </div>
      </div><a name="ExtensionstotheconventionalviewoftypesandtokensANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e184" xml:id="ttx">
         <div class="title e185">Extensions to the conventional view of types and tokens</div>
         <div class="para e186">In this section we elaborate and extend the conventional
            type/token distinction, and provide a formal model for it. The
            formal model is expressed using the syntax of Alloy, a modeling
            tool developed by Daniel Jackson and his research team 
            [
            <div class="xref e187" linkend="Jackson"></div>].
            <div class="popupBox e188">
               <div class="popupLabel" onmouseover="$('#d1e421').show('1000');" onmouseout="$('#d1e421').hide('1000');">[ footnote ]</div>
               <div id="d1e421" style="display: none;">
                  <div class="footnote">
                     <div class="para e189">Other
                        notations could serve the purpose as well; we choose Alloy
                        because it has a reasonably clear, easily learnable logical
                        notation and convenient, useful tools for checking the model.
                        We offer no systematic introduction to Alloy syntax here; the
                        reader is directed to the Alloy web site at
                        
                        <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e190" xlink:actuate="onRequest" xlink:href="http://alloy.mit.edu/" xlink:show="new" xlink:type="simple">http://alloy.mit.edu/</div> and to Jackson's book [
                        <div class="xref e191" linkend="Jackson"></div>].  The reader unfamiliar with
                        Alloy notation should be able to follow the essentials of the
                        discussion, since every salient property of the model is stated
                        both in Alloy and in English prose.
                     </div>
                  </div>
               </div>
            </div>  Readers uninterested
            in formalization may skip the Alloy extracts without loss of
            context.
            
         </div>
         <div class="para e192">Our model goes beyond the most common version of the
            type/token distinction in three ways:
            <div class="orderedlist e193">
               <div class="listitem e194">
                  <div class="para e195">We follow Goodman, Pike, Wetzel, and others in 
                     assuming types and tokens on multiple levels.
                  </div>
               </div>
               <div class="listitem e196">
                  <div class="para e197">We introduce disjunction of types to cover cases
                     in which a reader is uncertain which type is instantiated
                     by a given token, and conjunction of types to cover cases
                     in which a token, contrary to the usual rule,
                     instantiates multiple types.
                     
                  </div>
               </div>
               <div class="listitem e198">
                  <div class="para e199">We introduce explicit notions of type repertoires and type
                     systems as a way of resolving the contradictions that otherwise
                     arise from assuming both (a) that several
                     
                     <div class="quote e200">levels</div> of type and token can coexist, and
                     (b) that, as already noted, types are necessarily disjoint.
                     
                  </div>
               </div>
            </div>
            
         </div><a name="BasicconceptsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e201" xml:id="ttx-basic">
            <div class="title e202">Basic concepts</div>
            <div class="para e203">The basic concepts of the model  
               we propose can be summarized
               as follows.
               
            </div>
            <div class="para e204">The key concepts of the model are those of
               
               <div class="emphasis e205">token</div> and of 
               <div class="emphasis e206">type</div>, which are defined
               partly in opposition to each other.
            </div>
            <div class="orderedlist e207">
               <div class="listitem e208">
                  <div class="para e209">
                     <div class="emphasis e210">Tokens</div> are concrete physical phenomena:
                     	marks on paper, magnetic pulses on disk or tape, etc.
                  </div>
               </div>
            </div>
            <div class="para e211">But not all physical marks are tokens:  a mark is recognized
               as a token if and only if it is recognized as being a token of
               some 
               <div class="emphasis e212">type</div>.
               <div class="popupBox e213">
                  <div class="popupLabel" onmouseover="$('#d1e470').show('1000');" onmouseout="$('#d1e470').hide('1000');">[ footnote ]</div>
                  <div id="d1e470" style="display: none;">
                     <div class="footnote">
                        <div class="para e214">For purposes of this
                           paper, the identity of the type is not part of the identity of
                           the token. If a particular mark is either an
                           
                           <div class="emphasis e215">n</div> or a 
                           <div class="emphasis e216">u</div>, then it
                           is a token which is either of type 
                           <div class="emphasis e217">n</div> or
                           of type 
                           <div class="emphasis e218">u</div>; the two different readings
                           are different readings of the same token, not readings positing
                           different tokens in the document.  This allows two readers to
                           disagree about which type is instantiated by a given token
                           without requiring them also to disagree about the identity of
                           the token in question.
                        </div>
                     </div>
                  </div>
               </div> The recognition of
               tokens as instances of particular types requires a competent
               observer (e.g., a human reader, in the case of conventional
               writing), but we do not here address the perceptual and
               psychological processes by which humans recognize a token as
               being of a particular type.
            </div>
            <div class="orderedlist e219">
               <div class="listitem e220">
                  <div class="para e221">
                     <div class="emphasis e222">Types</div> may be regarded as abstract
                     	objects represented or symbolized by tokens.
                  </div>
               </div>
            </div>
            <div class="para e223">Alternatively (in the spirit of Goodman's calculus of
               individuals) they may be regarded as collective individuals
               whose constituent parts are tokens.
               <div class="popupBox e224">
                  <div class="popupLabel" onmouseover="$('#d1e494').show('1000');" onmouseout="$('#d1e494').hide('1000');">[ footnote ]</div>
                  <div id="d1e494" style="display: none;">
                     <div class="footnote">
                        <div class="para e225">Note,
                           however, that the arguments brought forward by Wetzel against
                           the association of types with sets or classes may also
                           apply with equal force to mereological sums 
                           [
                           <div class="xref e226" linkend="Wetzel2009"></div>] (chapter 4, section 5).
                           
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e227">In either case, we will say that tokens
               
               <div class="emphasis e228">instantiate</div> types, and that types are normally
               conveyed or communicated by being instantiated by tokens.
            </div>
            <div class="orderedlist e229">
               <div class="listitem e230">
                  <div class="para e231">Each token instantiates exactly one type.</div>
               </div>
            </div>
            <div class="para e232">It must instantiate at least one type, because a mark that
               does not instantiate a type is not a token.  And it cannot
               instantiate more than one type, because types are mutually
               disjoint and no token can be of multiple types.  (At least, this
               is the simplest way to start out.  But see further the discussion
               of type repertoires and type systems 
               
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e233" xlink:actuate="onRequest" xlink:href="#trts" xlink:show="new" xlink:type="simple">below</div>.)
            </div>
            <div class="para e234">In more formal terms:  types have identity, but we specify
               no other properties for them.
            </div>
            <div class="para e235">
               <div class="programlisting e236" xml:space="preserve">abstract sig Type {}</div>
            </div>
            <div class="para e237">Tokens map to types.  The only salient property of a token,
               and thus the only property we model, is the identity of 
               the type it instantiates.
               <div class="popupBox e238">
                  <div class="popupLabel" onmouseover="$('#d1e521').show('1000');" onmouseout="$('#d1e521').hide('1000');">[ footnote ]</div>
                  <div id="d1e521" style="display: none;">
                     <div class="footnote">
                        <div class="para e239">It is
                           sometimes thought that the tokens of any given type necessarily
                           resemble each other in some way (graphical or visual similarity
                           in the case of written tokens, acoustic similarity in that of
                           phonemes).  But it seems to us unlikely that any measure of 
                           visual similarity could possibly be constructed that would group
                           together all tokens of (for example) lower-case Latin 
                           letter 
                           <div class="emphasis e240">g</div>, and exclude all other objects.
                           As far as we can tell, the only property tokens of a given type
                           are guaranteed to have in common is that they instantiate that
                           type.  (One might indeed speculate that the concept of type was
                           invented precisely to allow us to talk about these tokens as
                           a group, since the instances of a type cannot by identified by
                           appealing to any other property.)  Independently, Goodman
                           and Wetzel have come to the same conclusion; Wetzel devotes much 
                           of her chapter 3 to
                           demolishing the view that tokens of a type must share some
                           properties other than that of instantiating the type;
                           see also [
                           <div class="xref e241" linkend="Goodman"></div>], pp. 131 and 138.
                           
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e242">
               <div class="programlisting e243" xml:space="preserve">abstract sig Token {
                  type : Type
                  }
                  
               </div>
            </div>
            <div class="para e244">The declaration 
               <div class="code e245">type : Type</div> indicates that the 
               
               <div class="code e246">type</div> relation links each Token to exactly one
               Type.  It follows, then, that:
               
            </div>
            <div class="itemizedlist e247">
               <div class="listitem e248">
                  <div class="para e249">Each token instantiates exactly one type.</div>
               </div>
               <div class="listitem e250">
                  <div class="para e251">Any two types are instantiated by disjoint sets 
                     of tokens.
                  </div>
               </div>
            </div>
         </div><a name="MultiplelevelsoftypesandtokensANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e252" xml:id="ttx-levels">
            <div class="title e253">Multiple levels of types and tokens</div>
            <div class="para e254">As noted above, earlier authors have contemplated types and
               tokens which have internal structure and nest; here we take 
               up that principle and formalize it.
               
            </div>
            <div class="orderedlist e255">
               <div class="listitem e256">
                  <div class="para e257">Some tokens are basic, or atomic in the sense that no
                     other tokens are part of them; the types instantiated by them
                     are similarly basic.
                  </div>
               </div>
            </div>
            <div class="para e258">Simple examples are the characters of the Latin alphabet and
               punctuation marks.
            </div>
            <div class="para e259">Formally: basic types are a kind of type, 
               and basic tokens are a kind of token.
               The types to which basic tokens map will normally be basic types,
               but for reasons clarified below this is not required
               by the model.
               
               <div class="programlisting e260" xml:space="preserve">
                  sig Basic_Type extends Type {}
                  sig Basic_Token extends Token {}
                  
               </div>
            </div>
            <div class="orderedlist e261">
               <div class="listitem e262">
                  <div class="para e263">Other tokens are compound:  aggregations or
                     collections of 
                     <div class="quote e264">lower-level</div> tokens; so also
                     with types.
                  </div>
               </div>
            </div>
            <div class="para e265">We refer to the lower-level types or tokens as the
               
               <div class="emphasis e266">constituents</div> of the higher-level one of which they
               form a part.
            </div>
            <div class="para e267">Because in written documents compound tokens typically
               occupy a discernible and possibly large region of the text
               carrier, we call them 
               <div class="emphasis e268">regions</div>. Because compound
               types are, in the usual case, structural units of a kind
               familiar to any user of SGML or XML for document markup, we
               refer to them as 
               <div class="emphasis e269">S_Units</div>.
            </div>
            <div class="para e270">Regions can be decomposed into subregions and S_Units
               have children.  It proves useful to postulate that S_Units
               also have a set of property-value pairs, and are labeled
               as to their type or (to avoid overloading the word
               
               <div class="emphasis e271">type</div> yet again) their 
               <div class="emphasis e272">kind</div>.
               
            </div>
            <div class="para e273">Formally:  compound types and tokens are subsets, respectively, 
               of types and tokens generally.  They have subordinate types
               and tokens, referred to as their 
               <div class="emphasis e274">children</div>
               and 
               <div class="emphasis e275">subregions</div>, respectively.
               
               <div class="programlisting e276" xml:space="preserve">
                  abstract sig Region extends Token {
                  subregions : set Token
                  }{ 
                  type in S_Unit
                  type.children = subregions.@type
                  }
                  abstract sig S_Unit extends Type {
                  kind : lone Kind,
                  props : set AVPair,
                  children : set Type
                  }
                  
               </div>
            </div>
            <div class="orderedlist e277">
               <div class="listitem e278">
                  <div class="para e279">The lower-level items in compounds are frequently arranged in a
                     	sequence, but this is not invariably so.  The constituents
                     	(subregions and children) may also form a set, or a bag.
                  </div>
               </div>
            </div>
            <div class="para e280">Simple examples of sequence include the aggregation of
               sequences of character tokens to form word tokens and similarly
               the aggregation of sequences of character types to form word
               types.  At higher levels, the aggregation of paragraphs to form
               a chapter, or of chapters to form a novel, provide further
               examples.  Sets and bags are less frequent in documentary
               applications, but not unknown; they occur whenever it is
               meaningless or misleading to ask about the order of the
               children, or when the children are represented in some sequence
               of tokens which is explicitly stated to carry no significance.
               
            </div>
            <div class="para e281">Formally:
               
               <div class="programlisting e282" xml:space="preserve">
                  sig Ordered_Region extends Region {
                  sub_seq : seq Token
                  }{
                  elems[sub_seq] = subregions
                  type in Ordered_S_Unit
                  type.ch_seq = sub_seq.@type
                  }
                  sig Ordered_S_Unit extends S_Unit {
                  ch_seq : seq Type
                  }{
                  elems[ch_seq] = children
                  }
                  
               </div>
            </div>
            <div class="para e283">
               The declaration 
               <div class="code e284">sub_seq : seq Token</div> says
               that each Ordered_Region is associated with a sequence of
               (sub)tokens; 
               <div class="code e285">ch_seq : seq Type</div> says the analogous
               thing for Ordered_S_Unites.  The declarations
               
               <div class="code e286">elems[sub_seq] = subregions</div> and 
               <div class="code e287">elems[ch_seq]
                  = children
               </div> specify that the elements of those sequence
               are precisely the constituents of the compound object. The
               declaration 
               <div class="code e288">type in Ordered_S_Unit</div> requires that
               any ordered region instantiate an ordered 
               type.
               <div class="popupBox e289">
                  <div class="popupLabel" onmouseover="$('#d1e629').show('1000');" onmouseout="$('#d1e629').hide('1000');">[ footnote ]</div>
                  <div id="d1e629" style="display: none;">
                     <div class="footnote">
                        <div class="para e290">The model thus disallows the convention mentioned
                           above, in which tokens are ordered but the order is taken as
                           insignificant.  It might be better to require only that ordered
                           regions instantiate compound types.
                        </div>
                     </div>
                  </div>
               </div> The declaration
               
               <div class="code e291">type.ch_seq = sub_seq.@type</div> specifies that for any
               ordered region 
               <div class="emphasis e292">R</div>, the children of
               
               <div class="emphasis e293">R</div>'s type are the types of 
               <div class="emphasis e294">R</div>'s
               subregions.
               
            </div>
            <div class="para e295">Next, we turn to unordered types and tokens (bags and sets):
               
               <div class="programlisting e296" xml:space="preserve">
                  abstract sig Unordered_Region extends Region {}{
                  type in Unordered_S_Unit
                  }
                  abstract sig Unordered_S_Unit extends S_Unit {}
                  
               </div>
            </div>
            <div class="para e297">Note that those definitions make 
               <div class="code e298">Ordered_S_Unit</div>
               and 
               <div class="code e299">Unordered_S_Unit</div> disjoint from each other, as
               expected (an 
               <div class="code e300">S_Unit</div> cannot be both ordered and
               unordered).
            </div>
            <div class="para e301">
               Types and tokens whose constituents are unordered have
               either set structure or bag structure.  Set-structured
               tokens map to set-structured types (and ditto for 
               those with bag structure).  Bag-structured types and
               tokens keep track of the number of occurrences of each
               constituent (modeled here by the functions 
               <div class="code e302">sub_counts</div>
               and 
               <div class="code e303">ch_counts</div>, which map from constituents
               to natural numbers.
            </div>
            <div class="para e304">
               <div class="programlisting e305" xml:space="preserve">
                  abstract sig Set_Structured_Region extends Unordered_Region {}{
                  type in Set_Structured_S_Unit
                  }
                  abstract sig Set_Structured_S_Unit extends Unordered_S_Unit {}
                  
                  abstract sig Bag_Structured_Region extends Unordered_Region {
                  sub_counts : subregions -&gt; Natural_number
                  }{
                  type in Bag_Structured_S_Unit
                  }
                  abstract sig Bag_Structured_S_Unit extends Unordered_S_Unit {
                  ch_counts : children -&gt; Natural_number
                  }
                  
               </div>
            </div>
            <div class="para e306">Normally, basic tokens instantiate basic types; exceptions
               are the disjunctive and conjunctive types defined below.
               Only compound tokens can successfully instantiate most compound
               types, because of the rule 
               <div class="code e307">type.children = subregions.@type</div>
               in the declaration of regions.  Essentially, this requires a
               kind of compositionality:  if the type of a region has child
               types, then those child types must be instantiated by
               subregions of the region.  Since basic tokens have no 
               subregions, they cannot satisfy this constraint.
            </div>
            <div class="para e308">Several observations can be made about compound types and tokens.</div>
            <div class="para e309">The lowest level of compound, consisting of a sequence of
               basic tokens (or types), is frequently an object of special
               interest.  (For example, the 
               <div class="emphasis e310">text node</div> of the XPath
               data model is characterized precisely by being a sequence of
               Unicode characters [here taken as basic] uninterrupted by markup
               and without any further properties or structure.)
               <div class="popupBox e311">
                  <div class="popupLabel" onmouseover="$('#d1e683').show('1000');" onmouseout="$('#d1e683').hide('1000');">[ footnote ]</div>
                  <div id="d1e683" style="display: none;">
                     <div class="footnote">
                        <div class="para e312">It
                           	might be desirable to single these lowest-level compound types
                           	and tokens out with a signature of their own, for example:
                           
                           <div class="programlisting e313" xml:space="preserve">
                              sig Text_Flow extends S_Unit {
                              types : seq Basic_Type
                              }{
                              kind = PCData
                              no children 
                              }
                              sig Token_Sequence extends Region {
                              tokens : seq Basic_Token
                              }{
                              type in Text_Flow
                              type.types = tokens.@type
                              no subregions
                              }
                              one sig PCData extends Kind {}
                              
                           </div>
                           	The overall system seems simpler, however, without this elaboration.
                           
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e314">Basic tokens consist of marks on a text-bearing writing
               medium; compound tokens consist of collections of other tokens
               (basic or compound); not infrequently, these are physically
               proximate and so compound tokens may be identified with
               
               <div class="emphasis e315">regions</div> of the text carrier.
               <div class="popupBox e316">
                  <div class="popupLabel" onmouseover="$('#d1e695').show('1000');" onmouseout="$('#d1e695').hide('1000');">[ footnote ]</div>
                  <div id="d1e695" style="display: none;">
                     <div class="footnote">
                        <div class="para e317">It
                           is tempting to suggest that the regions of a document partition
                           the physical space of the text carrier [
                           <div class="xref e318" linkend="Cayless"></div>], and in some simple cases they do.  In the
                           general case, however, the marks even of basic tokens may
                           overlap with other marks constituting other tokens, and
                           unwritten space in a document does not always constitute a
                           token.
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e319">The compound types instantiated by compound tokens are not
               infrequently structural units of the kind identified by elements
               and attributes in standard markup practice.
            </div>
            <div class="para e320">Among the compound tokens, the 
               <div class="emphasis e321">document</div> itself is
               an important edge case, and similarly the 
               <div class="emphasis e322">text</div>
               among compound types.
               <div class="popupBox e323">
                  <div class="popupLabel" onmouseover="$('#d1e711').show('1000');" onmouseout="$('#d1e711').hide('1000');">[ footnote ]</div>
                  <div id="d1e711" style="display: none;">
                     <div class="footnote">
                        <div class="para e324">We strive to use the
                           term 
                           <div class="emphasis e325">document</div> always and only for physical
                           objects, and the term 
                           <div class="emphasis e326">text</div> for the type
                           instantiated by a document.  This usage is not universal among
                           those who speak and write about texts and documents.
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e327">Finally, some ancillary declarations are needed for the
               
               <div class="code e328">Kind</div>, 
               <div class="code e329">AVPair</div>, and 
               <div class="code e330">Natural_number</div>
               objects appealed to in some of the earlier declarations.
               
            </div>
            <div class="para e331">
               The signatures 
               <div class="emphasis e332">Kind</div> and 
               <div class="emphasis e333">AVPair</div>
               serve purposes analogous to the generic identifiers and
               attribute-value pairs of SGML and related markup languages. We
               do not analyse them further.  
               <div class="emphasis e334">Natural_number</div>
               is just an integer greater than zero.
               
            </div>
            <div class="para e335">
               <div class="programlisting e336" xml:space="preserve">
                  abstract sig Kind {}
                  
                  sig AVPair {
                  att_name : Kind,
                  att_value : Type
                  }
                  
                  sig Natural_number {
                  theNumber : Int
                  }{
                  theNumber &gt; 0
                  }
                  
               </div>
            </div>
         </div><a name="Ambiguity:disjunctionandconjunctionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e337" xml:id="ttx-disj-conj">
            <div class="title e338">Ambiguity:  disjunction, and conjunction</div>
            <div class="para e339">Our model of the type/token distinction goes beyond
               the conventional view in a second way:  we postulate
               disjunctive and conjunctive types, to address some
               cases which are otherwise difficult to handle.
               
            </div>
            <div class="para e340">In some documents it may be difficult to say just what type
               is instantiated by some tokens (e.g., if the document is
               difficult to read).  For example, consider the following
               extract from a manuscript of Ludwig Wittgenstein:
               
               <div class="figure e341">
                  <div class="mediaobject e342">
                     <div class="imageobject e343">
                        <div class="metaBox e344"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e755').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e755" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e344'
                                 </span><span class="metaAttribute">fileref='../../../vol5/graphics/Huitfeldt01/Huitfeldt01-001.png'
                                 </span><span class="metaAttribute">format='png'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="para e345">A word in Wittgenstein's 
                     <div class="quote e346">Geheimschrift</div>
                     	(Item 118, page 8v).
                  </div>
               </div>
               
               Transcribers not yet aware that this word is written in Wittgenstein's 
               so-called 
               <div class="quote e347">secret writing</div> (in which A is
               substituted for Z, B for Y, etc., and vice versa) might have
               difficulty deciphering the token.  Transcriber A might
               render the word as 
               <div class="quote e348">munonyqi</div>, transcriber B as
               
               <div class="quote e349">wunouyqi</div>.  Both might accept the other's transcription
               as just as likely as their own.  How, in this case, should 
               a neutral observer whose knowledge of the original is derived
               only from the transcription, or a transcriber uncertain how
               to read the philosopher's handwriting, characterize the first
               letter of this word?  Is it a 
               <div class="emphasis e350">w</div> or
               an 
               <div class="emphasis e351">m</div>?
               
            </div>
            <div class="para e352">We could of course simply insist that each
               token be mapped to a unique type as a matter of principle, thus
               forcing a choice among the possibilities:  
               <div class="emphasis e353">m</div>
               or 
               <div class="emphasis e354">w</div>.  But it might provide a
               more accurate depiction of the state of affairs if we specified
               not that the first letter is an 
               <div class="emphasis e355">m</div>, or
               that it is a 
               <div class="emphasis e356">w</div>, but specified instead
               that it is 
               <div class="emphasis e357">either</div>
               the one 
               <div class="emphasis e358">or</div> the other.
               <div class="popupBox e359">
                  <div class="popupLabel" onmouseover="$('#d1e799').show('1000');" onmouseout="$('#d1e799').hide('1000');">[ footnote ]</div>
                  <div id="d1e799" style="display: none;">
                     <div class="footnote">
                        <div class="para e360">As the
                           example illustrates, this
                           proposal for disjunctive types arose in the context of work on
                           the logic of transcription, but we believe it to be more
                           generally applicable:  it can be used to describe all cases of
                           uncertainty, whether the document in question is being
                           transcribed or not.
                           The curious reader may wish to know that the correct
                           literal transcription of the example is 
                           <div class="quote e361">muuvnyzi</div>,
                           which is the secret-writing form of the German word
                           
                           <div class="quote e362">offenbar</div> 
                           <div class="quote e363">public, apparent, obvious</div>.
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e364">So we extend the model given above by adding the possibility of
               
               <div class="emphasis e365">disjunctive types</div>.
            </div>
            <div class="orderedlist e366">
               <div class="listitem e367">
                  <div class="para e368">Some compound types represent a disjunction among
                     their constituents.
                  </div>
               </div>
            </div>
            <div class="para e369">In Alloy notation: 
               
               <div class="programlisting e370" xml:space="preserve">sig Disjunctive_Type extends S_Unit {}{
                  kind = Disjunction
                  some children
                  }
                  one sig Disjunction extends Kind {}
               </div>
               
               Here again, note that
               
               <div class="code e371">Disjunctive_Type</div>  is disjoint from both
               
               <div class="code e372">Ordered_S_Unit</div> and 
               <div class="code e373">Unordered_S_Unit</div>.
               
            </div>
            <div class="para e374">
               Note that the mapping from token to type remains a function:
               each token continues to map to a single type, but in cases of
               uncertainty, that single type simply happens to be a
               disjunction. Formally, this state of affairs could be handled
               instead by making the token/type mapping a relation, through
               which any given token would map to one or more types; we choose
               to reify the notion of disjunction for reasons which should
               become clear shortly.
               
            </div>
            <div class="para e375">Uncertainty is not the only reason one might wish to map a
               given token to more than one type.  Just as ambiguity in
               utterance may be either unintentional or intentional, so also
               polyvalence in the token/type mapping may reflect either the
               uncertainty of the reader or the purposeful choice of the
               creator.  Some of the most entertaining instances of this
               phenomenon are the mixtures of calligraphy and puzzle creation
               known as 
               <div class="quote e376">ambigrams</div> or
               
               <div class="quote e377">inversions</div>, in which the marks of a
               document are carefully constructed to instantiate not single
               types but two or even more.  In the following example, 
               
               the marks can be read either clockwise or counter-clockwise
               as tokens of the word 
               <div class="emphasis e378">infinity</div>.
               <div class="popupBox e379">
                  <div class="popupLabel" onmouseover="$('#d1e847').show('1000');" onmouseout="$('#d1e847').hide('1000');">[ footnote ]</div>
                  <div id="d1e847" style="display: none;">
                     <div class="footnote">
                        <div class="para e380">Strictly speaking, in this case even the 
                           individuation of particular marks as constituting tokens
                           differs in the two readings:  the marks constituting a single token
                           of the type 
                           <div class="emphasis e381">y</div> in one reading are,
                           in the other reading, two tokens of 
                           <div class="emphasis e382">f</div>
                           and 
                           <div class="emphasis e383">i</div>.  The word tokens have different
                           boundaries in the two directions.  And so on.  For now, our
                           model ignores these complications; to address them directly 
                           it would seem to be necessary to model explicitly the marks which
                           constitute tokens, and to indicate how different sets of 
                           marks are individuated now as one token and now as another.
                           But it does not seem possible, in the general case, to treat
                           marks as sets of individuals independent of particular readings
                           of the marks:  it is frequently only through being identified as a
                           token of a particular type that marks can successfully be
                           individuated and distinguished from each other.  A similar
                           (albeit aesthetically less interesting)
                           example can be found in
                           [
                           <div class="xref e384" linkend="Goodman"></div>] pp. 138-139.
                           Goodman's example has the property that there is no ambiguity
                           about the organization of marks into tokens, and that the 
                           same token is intentionally written so
                           that it can be assigned to several types.
                           
                        </div>
                     </div>
                  </div>
               </div>      
               
               <div class="figure e385">
                  <div class="mediaobject e386">
                     <div class="imageobject e387">
                        <div class="metaBox e388"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e865').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e865" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e388'
                                 </span><span class="metaAttribute">fileref='../../../vol5/graphics/Huitfeldt01/Huitfeldt01-002.gif'
                                 </span><span class="metaAttribute">format='png'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="para e389">An 
                     <div class="quote e390">inversion</div>. ¬© Scott Kim, 
                     	
                     <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e391" xlink:actuate="onRequest" xlink:href="http://scottkim.com/" xlink:show="new" xlink:type="simple">scottkim.com</div>.  
                     	Reproduced by permission.
                     
                  </div>
               </div>
               
               
            </div>
            <div class="para e392">We extend the model, therefore, to include
               
               <div class="emphasis e393">conjunctive</div> types.
            </div>
            <div class="orderedlist e394">
               <div class="listitem e395">
                  <div class="para e396">Some compound types represent the conjunction of
                     their constituents:  tokens instantiating such types
                     instantiate, at the same time, each constituent of the
                     type.
                  </div>
               </div>
            </div>
            <div class="para e397">In Alloy:
               
               <div class="programlisting e398" xml:space="preserve">
                  sig Conjunctive_Type extends S_Unit {}{
                  kind = Conjunction
                  some children
                  }
                  one sig Conjunction extends Kind {}
                  
               </div>
            </div>
            <div class="para e399">
               As with disjunctive types, no additional fields or machinery are
               needed:  it suffices to classify a type as disjunctive or
               conjunctive to make clear how the constituent types relate to
               each other and to the tokens of the type.
               <div class="popupBox e400">
                  <div class="popupLabel" onmouseover="$('#d1e891').show('1000');" onmouseout="$('#d1e891').hide('1000');">[ footnote ]</div>
                  <div id="d1e891" style="display: none;">
                     <div class="footnote">
                        <div class="para e401">This is not strictly true:  the formulation
                           	above includes constraints that
                           	enforce the parallel compositionality of tokens and types
                           	by requiring the types of a region's subregions to be the
                           	children of the region's type.  These need to be reformulated
                           	to account for the presence of disjunctive and conjunctive
                           	types.  In this paper, we simply
                           ignore this complication.
                        </div>
                     </div>
                  </div>
               </div> 
               
            </div>
            <div class="para e402">
               Other cases of willed polyvalence include acrostics (in which
               individual basic tokens form parts of two compound tokens, not
               just one) and some simple forms of coded communication (e.g.,
               documents where the intended recipient must read every other
               word, or every other line, to glean the secret message).  These
               deviate from the normal case in which each token (except
               the top-most, namely the document) is a constituent of just 
               one higher-level token (and similarly, with appropriate 
               adjustments, for types).  In the normal case, that is, both
               tokens and the types they instantiate can typically be arranged
               in a simple hierarchy.  Violations of this hierarchical 
               assumption do not require a special kind
               of type like a disjunction or a conjunction; it suffices 
               to avoid requiring that no two tokens, and not two types,
               share any constituents.
            </div>
            <div class="para e403">It is not hard to imagine (though it is beyond our ability to
               provide plausible examples of) cases in which the marks of a
               document are clearly intended to be polyvalent and thus appear
               to require a mapping to some conjunctive type, but in which it
               is not clear which conjunctive type is called for.  In such
               situations, the tokens in question may be regarded as
               instantiating a disjunctive type whose constituents are
               conjunctive types. One might also imagine an inversion in which
               the identity of one conjoined type is certain but the other is
               not: that may be described by mapping the token in question to a
               conjunctive type whose constituents are a
               
               <div class="quote e404">normal</div> type (compound or basic) and a
               disjunctive type.
            </div>
         </div>
      </div><a name="TyperepertoiresandtypesystemsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e405" xml:id="trts">
         <div class="title e406">Type repertoires and type systems</div>
         <div class="para e407">It is a fundamental property of types as commonly defined, that
            types are mutually exclusive:  each token instantiates a single
            type.  With the exception of special cases involving accidental
            or willed ambiguity, a given mark is always an
            
            <div class="emphasis e408">a</div>, or a 
            <div class="emphasis e409">b</div>, or a
            
            <div class="emphasis e410">c</div>, etc., and never more than one.
            Essentially, types and tokens form a 
            <div class="emphasis e411">digital</div> rather
            than an 
            <div class="emphasis e412">analog</div> system.
            
         </div>
         <div class="para e413">But if types can nest within other types, it is easy to
            find cases where the same token must instantiate multiple
            types, at different levels.  A token 
            <div class="quote e414">I</div> might at one
            and the same time instantiate several different types:
            
            <div class="itemizedlist e415">
               <div class="listitem e416">
                  <div class="para e417">a character (upper-case Latin letter I)</div>
               </div>
               <div class="listitem e418">
                  <div class="para e419">a letter (as opposed to a punctuation character or
                     other non-letter character)
                  </div>
               </div>
               <div class="listitem e420">
                  <div class="para e421">a word</div>
               </div>
               <div class="listitem e422">
                  <div class="para e423">a pronoun</div>
               </div>
               <div class="listitem e424">
                  <div class="para e425">a noun phrase</div>
               </div>
               <div class="listitem e426">
                  <div class="para e427">a sentence</div>
               </div>
               <div class="listitem e428">
                  <div class="para e429">an utterance</div>
               </div>
            </div>
            
         </div>
         <div class="para e430">This is not a problem for uses of the type/token distinction
            which work with a single level at a time; it is a more serious
            difficulty for a model like ours, in which multiple levels are
            normally present.  In such a multi-level system, it is no longer
            true that 
            <div class="emphasis e431">all</div> types are disjoint or that each token
            instanatiates only a single type.  On the other
            hand, the phenomenon arises only because multiple levels of type
            are present at the same time, in the same view of things. Within
            a given level (for some suitable definition of that construct)
            the conventional rule applies:  all types are pairwise disjoint.
            
         </div>
         <div class="para e432">We postulate that types can be grouped together in 
            <div class="emphasis e433">type
               repertoires
            </div> in such a way that the disjointness rule
            holds true not absolutely, but for all types in a repertoire.
            The token 
            <div class="quote e434">I</div> can be both a character and a word, because
            the character 
            <div class="emphasis e435">I</div> is a member of one 
            type repertoire, and the word 
            <div class="emphasis e436">I</div> is
            a member of a different type repertoire.
            
         </div>
         <div class="para e437">In practice, normal readers reading conventional written
            documents (or listening to normal spoken utterances) apply
            several type repertoires in parallel, with complex interactions
            among them.
         </div>
         <div class="para e438">
            A non-empty finite collection of type repertoires we call a 
            
            <div class="emphasis e439">type system</div>.
         </div>
         <div class="para e440">Any particular reading of a document will involve a type
            system.  Different readings of a document may diverge not because
            of irreconcilable substantive differences, but only because they
            are applying different type systems.  For example, a transcriber
            of eighteenth-century documents who preserves the distinction
            between long s and short s, and a transcriber who levels the
            distinction (perhaps on the grounds that the two forms are in
            complementary distribution and are thus clearly allographs) do
            not in fact disagree on what their common exemplar actually says;
            if they disagree, it is only about the appropriate type system to
            bring to bear on transcriptions of such material.     
            
         </div>
         <div class="para e441">In some cases (as in the case of long and short s), the
            relation between type repertoires is a straightforward
            refinement/abstraction relation:  one repertoire makes finer
            distinctions than the other and contains more information.
            In other cases, the relation will be more complex.
            
         </div>
      </div><a name="TypestokensandmarkuplanguagesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e442" xml:id="ttmk">
         <div class="title e443">Types, tokens, and markup languages</div>
         <div class="para e444">There are noticeable parallels between the structured types
            and tokens we have described and the analysis of documents
            underlying many colloquial SGML and XML vocabularies.
            In both cases, we identify structured units which may
            occur as parts of larger structured units.  In both
            cases, the same abstract units may be instantiated by
            different concrete realizations.
            
         </div>
         <div class="para e445">The model we have presented has been kept rather abstract
            and general; we have not attempted to enforce in it any
            of the structural regularities of SGML and XML, such as
            strict nesting and hierarchical structure.  In fact, as far
            as we can tell, the abstract model of types and tokens we
            have sketched provides a model not only for SGML and XML,
            but for all the other kinds of document markup with which 
            we are familiar:  MECS and Cocoa and TexMecs and 
            various batch-formatting languages (TeX, Script, troff, ..),
            as well as word-processor formats.  That is, we believe
            the model outlined here provides a sort of greatest common
            denominator for markup systems.
            
         </div>
         <div class="para e446">The first implication of our work for markup languages,
            then, appears to be:  element types are types, in the sense
            of the type/token distinction.  Element instances are tokens,
            in the sense of type type/token distinction.  This holds
            at least for the most common cases in colloquial markup
            vocabularies.     
            
         </div>
         <div class="para e447">Since by default, all children are ordered in XML documents,
            XML itself provides no mechanism for signaling that children are
            in fact unordered.  Since such a signal is sometimes necessary,
            it is to be expected that some vocabularies will define such a
            signal ‚Äî as in fact some (e.g., the TEI) do.
            
         </div>
         <div class="para e448">The second implication of our work is that higher-level
            textual objects like paragraphs, sections, chapters, and
            books, are not different in kind from the characters 
            appearing in character data in the document.  The fundamental
            distinction in SGML and XML between 
            <div class="emphasis e449">markup</div>
            and 
            <div class="emphasis e450">content</div> appears, on this account, to be
            a technological artifact which masks the underlying
            reality that characters, paragraphs, sections, and so on
            are all objects of the same fundamental kind.
         </div>
         <div class="para e451">
            It is true that historical writing systems are most complete,
            consistent, and explicit for the character level, while the
            realization of higher-level structures like paragraphs, chapters,
            etc. tends to be more haphazard and inconsistent.  But historical
            writing systems are virtually always incomplete:  they do not
            capture all the relevant linguistic facts, only enough of them to
            make it possible to convey information.  When an existing writing
            system is applied in new contexts, it may become necessary (and
            historically this has often been so) to elaborate the writing
            system so as to make it more explicit.  (The development
            of vowel pointing in Hebrew and Arabic scripts is a case in
            point.)
            
         </div>
         <div class="para e452">This leads us to the third implication of our work:  
            markup languages form nothing other than the extension of
            conventional writing systems in order to make them more explicit.
            That is, the paragraph and chapter types which may be
            marked up by typical vocabularies for descriptive markup
            are neither more nor less part of the text than the
            character data which makes up their content.  It is
            sometimes convenient to regard all markup as a kind of
            annotation, different in nature from the recording of
            
            <div class="quote e453">the text itself</div>.  But if our model
            of types and tokens is correct, then there is no difference
            in essential nature between the 
            <div class="quote e454">A</div> of the word
            
            <div class="quote e455">ALGOL</div>, and the paragraph within which it appears.
            Both are realized in a document by physical phenomena
            which are tokens of corresponding types.
         </div>
         <div class="para e456">
            For a long time, one of the authors of this paper introduced new
            users to SGML and XML by saying that markup languages are a way
            to make explicit (part of) our understanding of a text.  To the
            extent that this suggests a separation between the text and our
            understanding of it and thus encourages the view that markup is a
            kind of annotation separate from and additional to the text
            proper, this formulation now seems misleading.
            Markup languages are a way to make explicit some aspects of the
            text, as we understand it.
            
         </div>
      </div><a name="ConclusionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e457" xml:id="conclusion">
         <div class="title e458">Conclusion</div>
         <div class="para e459">The assertion that all levels of document structure may be
            regarded as exhibiting a form of the type/token distinction 
            may have a number of implications, some of which appear to require
            further elaboration and exploration.
         </div>
         <div class="para e460">If basic and compound tokens and types form a logical
            continuum rather than entirely separate levels of representation
            with entirely different rules, then conceptual models which
            treat documents as consisting of one or more sequences of
            characters and a set of character ranges would seem to be
            imposing a radical distinction in methods of representation
            between the two levels
            which has no analogue in the phenomena being modeled.
            
         </div>
         <div class="para e461">
            This view may shed a new light on the practice of some XML
            vocabularies of using empty elements to represent character types not
            present in (the current version of) the Unicode /ISO 10646 universal
            character set.  Instead of being an ad hoc solution, 
            practically necessary but conceptually awkward, this 
            approach becomes (on the view outlined here) a natural
            application of the fundamental fact that UCS characters
            and XML elements are essentially similar:  concrete
            tokens instantiating types of some writing system.
         </div>
         <div class="para e462">
            Just as the phonemic units of a language's sound system
            can be defined in terms of distinctive features, 
            and specific phones are regarded as instantiating particular
            phonemes whenever they exhibit the requisite pattern of
            distinctive features, so also it is possible to define
            the basic types (graphemes) of a writing system in terms
            of distinctive features.  It would be illuminating to 
            extend the analogy further and define distinctive features
            for the elements and attributes of markup vocabularies.
         </div>
         <div class="para e463">
            The realization of phonemes as phones is subject to variation
            of many kinds:  different regional accents may systematically 
            affect the realization of many phonemes in the system,
            different speakers have different qualities of voice tone,
            and individual utterances by the same speaker may vary in 
            many ways either systematically or (as far as analysis
            can tell) randomly.  The realization of graphemes is similarly
            various:  different fonts (in printed books and electronic
            display), different handwriting styles, different hands,
            different letter formation at different places.  And
            of course the possibility of systematic changes in realization
            was historically one of the motive forces impelling
            the development of descriptive markup in the first place.
            The parallels and possible differences among these phenomena
            merit consideration at greater length than is possible here.
            
         </div>
      </div><a name="ReferencesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e464">
         <div class="title e465">References</div>
         <div class="bibliomixed e466" xml:id="Cayless" xreflabel="Cayless 2009">
            Cayless, Hugh.
            2009.
            
            <div class="quote e467">Image as markup:  Adding semantics to manuscript images</div>.
            Paper given at Digital Humanities 2009, College Park, Maryland, June 2009.
         </div>
         <div class="bibliomixed e468" xml:id="Goodman" xreflabel="Goodman 1976">
            Goodman, Nelson. 1976.
            
            <div class="emphasis e469">Languages of art:
               An approach to the theory of symbols
            </div>.
            Indianapolis, Cambridge:  Hackett, 1976.
            
         </div>
         <div class="bibliomixed e470" xml:id="Jackson" xreflabel="Jackson 2006">
            Jackson, Daniel.  
            
            <div class="emphasis e471">Software abstractions: Logic, language, and
               analysis
            </div>.  Cambridge: MIT Press, 2006.
            
         </div>
         <div class="bibliomixed e472" xml:id="Algol" xreflabel="Naur et al. 1960">
            Naur, Peter, ed., et al.
            
            <div class="quote e473">Report on the Algorithmic Language ALGOL 60</div>.
            
            <div class="emphasis e474">Numerische Mathematik</div>
            2 (1960): 106-136.
            Also 
            
            <div class="emphasis e475">Communications of the ACM</div>
            3.5 (1960): 299-314. doi: 
            <div class="biblioid doi e476">10.1145/367236.367262</div>.
            
         </div>
         <div class="bibliomixed e477" xml:id="Peirce" xreflabel="Peirce 1906">
            Peirce, Charles Santiago Sanders.  
            
            <div class="quote e478">Prolegomena to an apology for pragmaticism</div>.  
            
            <div class="emphasis e479">The Monist</div>
            16 (1906): 492-546.
            Reprinted vol. 4 of C. S. Peirce,
            
            <div class="emphasis e480">Collected papers</div>, 
            ed. Charles Hartshorne and Paul Weiss
            (Cambridge, MA: Harvard University Press, 1931-58).
            
         </div>
         <div class="bibliomixed e481" xml:id="Pike" xreflabel="Pike 1967">
            Pike, Kenneth L.
            
            <div class="emphasis e482">Language in relation to a unified theory of the structure of human behavior</div>.
            The Hague, Paris: Mouton, 1967.
            
         </div>
         <div class="bibliomixed e483" xml:id="Wetzel2008" xreflabel="Wetzel 2008">
            Wetzel, Linda.
            2008.
            
            <div class="quote e484">Types and Tokens</div>, 
            in
            
            <div class="emphasis e485">The Stanford Encyclopedia of Philosophy</div> 
            (Winter 2008 Edition), 
            ed. Edward N. Zalta.
            Available on the Web at 
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e486" xlink:actuate="onRequest" xlink:href="http://plato.stanford.edu/archives/win2008/entries/types-tokens/" xlink:show="new" xlink:type="simple">http://plato.stanford.edu/archives/win2008/entries/types-tokens/</div>.
            
         </div>
         <div class="bibliomixed e487" xml:id="Wetzel2009" xreflabel="Wetzel 2009">
            Wetzel, Linda.
            2009.
            
            <div class="emphasis e488">Types and tokens:  On abstract objects</div>. 
            Cambridge, Mass., London:  MIT Press, 2009.
            
         </div>
      </div>
   </div>
</div>