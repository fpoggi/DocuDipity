<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#UsingXMLtoImplementXMLANCHOR" name="UsingXMLtoImplementXMLTOC">Using XML to Implement XML</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#TheProblemANCHOR" name="TheProblemTOC">The Problem</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TheProcessManagerANCHOR" name="TheProcessManagerTOC">The Process Manager</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#OverviewANCHOR" name="OverviewTOC">Overview</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#URNsRatherThanURLsANCHOR" name="URNsRatherThanURLsTOC">URNs Rather Than URLs</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#ProcessDetailsANCHOR" name="ProcessDetailsTOC">Process Details</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#CopyingConfigurationsandXMLANCHOR" name="CopyingConfigurationsandXMLTOC">Copying Configurations and XML</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#PublishingProcessesANCHOR" name="PublishingProcessesTOC">Publishing Processes</a></div>
               </div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ProblemsANCHOR" name="ProblemsTOC">Problems</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AFirstAttemptatXProcANCHOR" name="AFirstAttemptatXProcTOC">A First Attempt at XProc</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#RequirementsANCHOR" name="RequirementsTOC">Requirements</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#DescribingProcesseswithXMLANCHOR" name="DescribingProcesseswithXMLTOC">Describing Processes with XML</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#XProcandCalabashCommandLinesANCHOR" name="XProcandCalabashCommandLinesTOC">XProc and Calabash Command Lines</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#PackagesANCHOR" name="PackagesTOC">Packages</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#PuttingItAllTogetherANCHOR" name="PuttingItAllTogetherTOC">Putting It All Together</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ImplementationandExamplesANCHOR" name="ImplementationandExamplesTOC">Implementation and Examples</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#WritingThisPaperANCHOR" name="WritingThisPaperTOC">Writing This Paper</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#GeneratingGUIsANCHOR" name="GeneratingGUIsTOC">Generating GUIs</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#GeneratingbatFilesANCHOR" name="GeneratingbatFilesTOC">Generating .bat Files</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#WritingProcessXMLANCHOR" name="WritingProcessXMLTOC">Writing Process XML</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#LimitationsandOtherConsiderationsANCHOR" name="LimitationsandOtherConsiderationsTOC">Limitations and Other Considerations</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#EducatingUsersANCHOR" name="EducatingUsersTOC">Educating Users</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AndMoreANCHOR" name="AndMoreTOC">And More</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConclusionsANCHOR" name="ConclusionsTOC">Conclusions</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#AcknowledgmentsANCHOR" name="AcknowledgmentsTOC">Acknowledgments</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BibliographyANCHOR" name="BibliographyTOC">Bibliography</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">allowed</div>
         <div class="singletermTERMS">all</div>
         <div class="singletermTERMS">a blueprint for possible ways to use the pipeline</div>
         <div class="singletermTERMS">approved</div>
         <div class="singletermTERMS">almost</div>
         <div class="singletermTERMS">August 7 - 10, 2012</div>
         <div class="singletermTERMS">ari.nordstrom@condesign.se</div>
         <div class="singletermTERMS">Ari</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">base</div>
         <div class="singletermTERMS">Back</div>
         <div class="singletermTERMS">black-boxes</div>
         <div class="singletermTERMS">Back</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2012</div>
         <div class="singletermTERMS">Black-boxing feature sets</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">cmdline</div>
         <div class="singletermTERMS">configuration</div>
         <div class="singletermTERMS">Calabash</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">eXtensible Filter Objects (XFO).</div>
         <div class="singletermTERMS">educating</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
         <div class="singletermTERMS">fork</div>
         <div class="singletermTERMS">from the CMS</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">import</div>
         <div class="singletermTERMS">include</div>
         <div class="singletermTERMS">input</div>
         <div class="singletermTERMS">implement</div>
         <div class="singletermTERMS">in</div>
         <div class="singletermTERMS">if</div>
         <div class="singletermTERMS">Implementing XProc pipelines using XML</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">link tree</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">metadata</div>
         <div class="singletermTERMS">main</div>
         <div class="singletermTERMS">more</div>
         <div class="singletermTERMS">main-fo.xsl</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">narrowed down</div>
         <div class="singletermTERMS">Nordstr√∂m</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">option</div>
         <div class="singletermTERMS">outside</div>
         <div class="singletermTERMS">optional</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">pipeline</div>
         <div class="singletermTERMS">processes</div>
         <div class="singletermTERMS">power</div>
         <div class="singletermTERMS">Process Manager</div>
         <div class="singletermTERMS">packages</div>
         <div class="singletermTERMS">package</div>
         <div class="singletermTERMS">processes</div>
         <div class="singletermTERMS">packages.xml</div>
         <div class="singletermTERMS">Printed</div>
         <div class="singletermTERMS">Previous</div>
         <div class="singletermTERMS">Pipeline processing</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">root</div>
         <div class="singletermTERMS">reviewing</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">style</div>
         <div class="singletermTERMS">style guide</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">type="ti"</div>
         <div class="singletermTERMS">type</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
         <div class="singletermTERMS">urn:x-example:packages:123456:en-GB:1</div>
         <div class="singletermTERMS">urn:x-example:xslfo:0012:3</div>
         <div class="singletermTERMS">uri</div>
         <div class="singletermTERMS">Undo</div>
         <div class="singletermTERMS">Undo</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">xsl:import</div>
         <div class="singletermTERMS">xsl:include</div>
         <div class="singletermTERMS">XProc: An XML Pipeline Language.</div>
         <div class="singletermTERMS">XML Calabash (also known as Stop Censorship).</div>
         <div class="singletermTERMS">XProc</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="UsingXMLtoImplementXMLANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3">
      <div class="title e1">Using XML to Implement XML</div>
      <div class="subtitle e2">Or, Since XProc Is XML, Shouldn't Everything Else Be, Too?</div>
      <div class="info e3">
         <div class="confgroup e4">
            <div class="conftitle e5">Balisage: The Markup Conference 2012</div>
            <div class="confdates e6">August 7 - 10, 2012</div>
         </div>
         <div class="abstract e7">
            <div class="para e8">This paper discusses implementing XProc-based publishing and processing in a
               				document management system that is currently very difficult to expand because
               even
               				though it handles and processes XML, the system is currently implemented in a
               way
               				that makes any changes to publishing and processing difficult. The author currently
               				depends on C# developers without XML knowledge for any changes.
            </div>
            <div class="para e9">The paper suggests using XML to 
               <div class="emphasis e10" role="ital">implement</div> the
               				XProc pipelines with, handling everything from the 
               <div class="emphasis e11">.bat</div> files
               				for the XProc engine to the GUI that makes the pipelines available to the end
               user.
               				This XML can be used to generate both, but is also useful as an abstraction layer
               				that black-boxes not only the XProc but everything surrounding it, providing a
               				blueprint for the processes, simplifying development and, for the author,
               				eliminating an unwanted dependency to C# developers.
            </div>
         </div>
         <div class="author e12">
            <div class="personname e13">
               <div class="firstname e14">Ari</div>
               <div class="surname e15">Nordstr√∂m</div>
            </div>
            <div class="personblurb e16">
               <div class="para e17">Ari Nordstr√∂m is the resident XML guy at Condesign AB in G√∂teborg, Sweden. His
                  					information structures and solutions are used by Volvo Cars, Ericsson, and many
                  					others, with more added every year. His favourite XML specification remains
                  					XLink so quite a few of his frequent talks and presentations on XML focus on
                  					linking. 
               </div>
               <div class="para e18">Ari spends some of his spare time projecting films at the Draken Cinema in
                  					G√∂teborg, which should explain why he wants to automate cinemas using XML. He
                  					now realises it's too late, however.
               </div>
            </div>
            <div class="affiliation e19">
               <div class="orgname e20">Condesign AB</div>
            </div>
            <div class="email e21">ari.nordstrom@condesign.se</div>
         </div>
         <div class="legalnotice e22">
            <div class="para e23">Copyright ¬© 2012 Ari Nordstr√∂m, Condesign AB.</div>
         </div>
         <div class="keywordset e24" role="author">
            <div class="keyword e25">Pipeline processing</div>
            <div class="keyword e26">XProc</div>
            <div class="keyword e27">Implementing XProc pipelines using XML</div>
            <div class="keyword e28">Black-boxing feature sets</div>
            <div class="keyword e29">XProc pipeline processes described in XML blueprints</div>
         </div>
      </div><a name="TheProblemANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e30" xml:id="section-2012-2-22-12-44-1-184541-">
         <div class="title e31">The Problem</div>
         <div class="para e32">My company develops and markets a document management system. It does what these
            			things do; there is an XML editor, there is a database, and there is middleware
            for
            			version handling, workflows, modularisation, reuse, etc. Something we call the
            
            <div class="emphasis e33" role="bold">Process Manager</div> processes XML documents, for example, outputs
            			them in PDF. Unfortunately, it is currently difficult to add new processes for
            new
            			formats or media, something that such a system should handle without difficulty.
         </div><a name="TheProcessManagerANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e34" xml:id="section-2012-2-22-14-18-20-72491660-1">
            <div class="title e35">The Process Manager</div><a name="OverviewANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e36" xml:id="section-2012-3-11-12-48-9-97934954-">
               <div class="title e37">Overview</div>
               <div class="para e38">Most documents in the system are modularised, with a root XML file linking to
                  					other XML and images. The linked XML, in turn, often link to further XML and
                  					images, effectively creating a 
                  <div class="quote e39">link tree</div>.
               </div>
               <div class="figure e40" xml:id="figure-2012-5-26-13-3-42-452828-">
                  <div class="mediaobject e41">
                     <div class="imageobject e42">
                        <div class="metaBox e43"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e75').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e75" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e43'
                                 </span><span class="metaAttribute">fileref='../../../vol8/graphics/Nordstrom01/Nordstrom01-001.png'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="caption e44">
                     <div class="para e45">A Link Tree</div>
                  </div>
               </div>
               <div class="para e46">The 
                  <div class="emphasis e47" role="bold">Process Manager</div> points out the root XML
                  <div class="popupBox e48">
                     <div class="popupLabel" onmouseover="$('#d1e84').show('1000');" onmouseout="$('#d1e84').hide('1000');">[ footnote ]</div>
                     <div id="d1e84" style="display: none;">
                        <div class="footnote">
                           <div class="para e49">And lists some metadata about the process.</div>
                        </div>
                     </div>
                  </div> and maps the linked resources in a link tree representation, with
                  					status information, target IDs, versions, etc (see 
                  <div class="xref e50" linkend="figure-2012-3-13-10-19-12-34575458-"></div>). This info is stored in a
                  						
                  <div class="emphasis e51" role="ital">configuration</div>.
               </div>
               <div class="figure e52" xml:id="figure-2012-3-13-10-19-12-34575458-">
                  <div class="mediaobject e53">
                     <div class="imageobject e54">
                        <div class="metaBox e55"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e96').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e96" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e55'
                                 </span><span class="metaAttribute">fileref='../../../vol8/graphics/Nordstrom01/Nordstrom01-002.jpg'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="caption e56">
                     <div class="para e57">A Tree View of the Master-Language Document</div>
                  </div>
               </div>
               <div class="para e58">The link tree is the same, regardless of document language, and therefore
                  					useful when handling translations. It can show what translations exist, help
                  					create new translation packages, etc.
               </div>
               <div class="figure e59" xml:id="figure-2012-3-13-10-19-12-34575458-1">
                  <div class="mediaobject e60">
                     <div class="imageobject e61">
                        <div class="metaBox e62"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e105').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e105" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e62'
                                 </span><span class="metaAttribute">fileref='../../../vol8/graphics/Nordstrom01/Nordstrom01-003.jpg'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="caption e63">
                     <div class="para e64">Managing Translations</div>
                  </div>
               </div>
               <div class="para e65">More importantly, the 
                  <div class="emphasis e66" role="bold">Process Manager</div> uses
                  					the configuration to publish the link tree. It starts a process that fetches
                  the
                  					necessary XML and images, and normalises them to one big XML file. It then
                  					applies a FO stylesheet to output PDF using Apache FOP. Here's the basic process
                  					handled by the 
                  <div class="emphasis e67" role="bold">Process Manager</div> today to publish
                  					a modularised document.
               </div>
               <div class="figure e68" xml:id="figure-2012-5-26-15-52-49-56637183-">
                  <div class="mediaobject e69">
                     <div class="imageobject e70">
                        <div class="metaBox e71"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e120').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e120" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e71'
                                 </span><span class="metaAttribute">fileref='../../../vol8/graphics/Nordstrom01/Nordstrom01-004.jpg'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="caption e72">
                     <div class="para e73">Publishing Using the Current Process Manager</div>
                  </div>
               </div>
               <div class="para e74"> The four numbered steps at the top show what is actually exposed to the user.
                  					They hide a lot of background processing, including several XSLT conversions,
                  					DOM manipulation, etc. Everything is glued together using C#. The GUI itself
                  is
                  					static and always more or less the same.
               </div>
               <div class="para e75">Other processes might output, say, HTML or ePUB, or simply a report, but
                  					currently, only copying the original process, translation handling and PDF
                  					publishing, all of which depend heavily on C# code, are supported.
               </div>
            </div><a name="URNsRatherThanURLsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e76" xml:id="section-2012-3-12-11-16-5-31278444-">
               <div class="title e77">URNs Rather Than URLs</div>
               <div class="para e78">Everything is identified, handled and linked to using URNs. Whether a link
                  					points out XML or an image, the pointer is a URN. The URNs are unique and
                  					include language/country and version information, so there's full traceability;
                  					link trees can always be recreated later, regardless of what's been done to a
                  					module or image since.
               </div>
               <div class="para e79">This works well. The URNs define basic semantic documents (with
                  						
                  <div class="quote e80">base</div> URNs), master language documents (base URN plus the
                  					master language/country) and their translations (the base URNs plus the target
                  language/country)
                  <div class="popupBox e81">
                     <div class="popupLabel" onmouseover="$('#d1e138').show('1000');" onmouseout="$('#d1e138').hide('1000');">[ footnote ]</div>
                     <div id="d1e138" style="display: none;">
                        <div class="footnote">
                           <div class="para e82">The system only uses URLs when publishing‚Äîthe URNs are replaced with
                              							temp URLs in a temp location, thrown away afterwards.
                           </div>
                        </div>
                     </div>
                  </div>.
               </div>
               <div class="figure e83" xml:id="figure-2012-5-26-13-3-42-452828-1">
                  <div class="mediaobject e84">
                     <div class="imageobject e85">
                        <div class="metaBox e86"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e145').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e145" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e86'
                                 </span><span class="metaAttribute">fileref='../../../vol8/graphics/Nordstrom01/Nordstrom01-005.png'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="caption e87">
                     <div class="para e88">Everything Is Identified Using URNs</div>
                  </div>
               </div>
               <div class="para e89">Stylesheet modules, while handled 
                  <div class="emphasis e90" role="ital">in</div> the
                  					system in the same way as any other XML, using URNs, are developed 
                  <div class="emphasis e91" role="ital">outside</div> the system and use relative URLs to refence
                  					each other. Thus, the current 
                  <div class="emphasis e92" role="bold">Process Manager</div>
                  					can only use them in the temp location when publishing, because otherwise the
                  					relative URLs would break.
               </div>
            </div><a name="ProcessDetailsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e93" xml:id="section-2012-3-11-12-48-9-97934954-1">
               <div class="title e94">Process Details</div>
               <div class="para e95">The 
                  <div class="emphasis e96" role="bold">Process Manager</div> can currently do the following:
                  <div class="itemizedlist e97">
                     <div class="listitem e98">
                        <div class="para e99">Create and save new configs, with titles, descriptions and other
                           								metadata, and point out the exact version and language of a root XML
                           								document using its URN. 
                        </div>
                     </div>
                     <div class="listitem e100">
                        <div class="para e101">Open and edit an existing config.</div>
                     </div>
                     <div class="listitem e102">
                        <div class="para e103">Copy an existing configuration and the root XML pointed out by it,
                           								that is, create a 
                           <div class="quote e104">fork</div> of the XML
                           <div class="popupBox e105">
                              <div class="popupLabel" onmouseover="$('#d1e181').show('1000');" onmouseout="$('#d1e181').hide('1000');">[ footnote ]</div>
                              <div id="d1e181" style="display: none;">
                                 <div class="footnote">
                                    <div class="para e106">This is done to change the profile used to publish the
                                       										document.
                                    </div>
                                 </div>
                              </div>
                           </div>.
                        </div>
                     </div>
                  </div>
               </div>
               <div class="figure e107" xml:id="figure-2012-3-13-10-19-12-34575458-2">
                  <div class="mediaobject e108">
                     <div class="imageobject e109">
                        <div class="metaBox e110"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e188').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e188" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e110'
                                 </span><span class="metaAttribute">fileref='../../../vol8/graphics/Nordstrom01/Nordstrom01-006.jpg'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="caption e111">
                     <div class="para e112">A Saved Configuration</div>
                  </div>
               </div>
               <div class="para e113">A configuration is used by the 
                  <div class="emphasis e114" role="bold">Process
                     						Manager
                  </div> to process the document it identifies:
                  <div class="itemizedlist e115">
                     <div class="listitem e116">
                        <div class="para e117">View the document as a link tree, including any linked
                           								resources.
                        </div>
                     </div>
                     <div class="listitem e118">
                        <div class="para e119">Create a translation package of the document, selecting the target
                           								language and the modules to be included.
                        </div>
                     </div>
                     <div class="listitem e120">
                        <div class="para e121">Publish the document. Currently, only PDF.</div>
                     </div>
                     <div class="listitem e122">
                        <div class="para e123">Profile
                           <div class="popupBox e124">
                              <div class="popupLabel" onmouseover="$('#d1e210').show('1000');" onmouseout="$('#d1e210').hide('1000');">[ footnote ]</div>
                              <div id="d1e210" style="display: none;">
                                 <div class="footnote">
                                    <div class="para e125">That is, identify product variants and such.</div>
                                 </div>
                              </div>
                           </div> a copy (
                           <div class="quote e126">fork</div>) of the document, setting
                           								conditions that include or exclude content from the output
                           <div class="popupBox e127">
                              <div class="popupLabel" onmouseover="$('#d1e217').show('1000');" onmouseout="$('#d1e217').hide('1000');">[ footnote ]</div>
                              <div id="d1e217" style="display: none;">
                                 <div class="footnote">
                                    <div class="para e128">Modules include pre-defined profiles in attribute values
                                       										inside them; a string comparison is made between these and a
                                       										profile context defined in the root element.
                                    </div>
                                 </div>
                              </div>
                           </div>.
                        </div>
                     </div>
                  </div>
               </div>
            </div><a name="CopyingConfigurationsandXMLANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e129" xml:id="section-2012-3-11-12-48-9-97934954-2">
               <div class="title e130">Copying Configurations and XML</div>
               <div class="para e131">In terms of pipeline processing, this is what happens when copying and
                  					profiling a configuration:
                  <div class="itemizedlist e132">
                     <div class="listitem e133">
                        <div class="para e134">Copy the root XML
                           <div class="popupBox e135">
                              <div class="popupLabel" onmouseover="$('#d1e230').show('1000');" onmouseout="$('#d1e230').hide('1000');">[ footnote ]</div>
                              <div id="d1e230" style="display: none;">
                                 <div class="footnote">
                                    <div class="para e136">Any descendants linked to from the root XML remain
                                       										unchanged.
                                    </div>
                                 </div>
                              </div>
                           </div>.
                        </div>
                     </div>
                     <div class="listitem e137">
                        <div class="para e138">Copy the configuration (copied config points to copied
                           								XML).
                        </div>
                     </div>
                     <div class="listitem e139">
                        <div class="para e140">Change the filenames of the copied XML and config.</div>
                     </div>
                     <div class="listitem e141">
                        <div class="para e142">Generate new URNs for the copied config and XML
                           <div class="popupBox e143">
                              <div class="popupLabel" onmouseover="$('#d1e243').show('1000');" onmouseout="$('#d1e243').hide('1000');">[ footnote ]</div>
                              <div id="d1e243" style="display: none;">
                                 <div class="footnote">
                                    <div class="para e144">The database tracks the relations between the old and the
                                       										new URNs.
                                    </div>
                                 </div>
                              </div>
                           </div>.
                        </div>
                     </div>
                     <div class="listitem e145">
                        <div class="para e146">Profile the root XML copy using a GUI in the 
                           <div class="emphasis e147" role="bold">Process Manager</div>, adding and removing values
                           								controlled by the CMS.
                        </div>
                     </div>
                     <div class="listitem e148">
                        <div class="para e149"> Insert the selected profiles as attribute values in the copied
                           								XML's root element.
                        </div>
                     </div>
                     <div class="listitem e150">
                        <div class="para e151">Store both copies in the CMS.</div>
                     </div>
                  </div>
               </div>
               <div class="figure e152" xml:id="figure-2012-3-13-10-19-12-34575458-3">
                  <div class="mediaobject e153">
                     <div class="imageobject e154">
                        <div class="metaBox e155"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e262').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e262" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e155'
                                 </span><span class="metaAttribute">fileref='../../../vol8/graphics/Nordstrom01/Nordstrom01-007.jpg'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="caption e156">
                     <div class="para e157">A Forked Configuration</div>
                  </div>
               </div>
               <div class="para e158">The copied XML is then processed.</div>
            </div><a name="PublishingProcessesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e159" xml:id="section-2012-3-11-12-48-9-97934954-3">
               <div class="title e160">Publishing Processes</div>
               <div class="para e161">Even with the limited processing available today, there are quite a few steps
                  					involved, as shown in 
                  <div class="xref e162" linkend="figure-2012-5-26-15-52-49-56637183-"></div>,
                  					above.
               </div>
               <div class="para e163">Here's how to start the actual process after pointing out a root XML and
                  					possibly profiling a copy of it:
                  <div class="orderedlist e164">
                     <div class="listitem e165">
                        <div class="para e166">Select the workflow status of the publication (temp, preview,
                           								delivery).
                        </div>
                     </div>
                     <div class="listitem e167">
                        <div class="para e168">Add any mandatory metadata to the configuration
                           <div class="popupBox e169">
                              <div class="popupLabel" onmouseover="$('#d1e284').show('1000');" onmouseout="$('#d1e284').hide('1000');">[ footnote ]</div>
                              <div id="d1e284" style="display: none;">
                                 <div class="footnote">
                                    <div class="para e170">This metadata is used to identify the configuration rather
                                       										than the XML, so that the process can be found and repeated
                                       										later.
                                    </div>
                                 </div>
                              </div>
                           </div>.
                        </div>
                     </div>
                     <div class="listitem e171">
                        <div class="para e172">Start the publishing itself.</div>
                     </div>
                  </div>
               </div>
               <div class="para e173">The publishing process does this:
                  <div class="orderedlist e174">
                     <div class="listitem e175">
                        <div class="para e176">Use the root XML URN to fetch the file to a temp folder. Map the
                           								URN to a temporary URL for later use.
                        </div>
                     </div>
                     <div class="listitem e177">
                        <div class="para e178">Parse the root XML for links (URNs, possibly followed by fragment
                           								IDs). 
                        </div>
                     </div>
                     <div class="listitem e179">
                        <div class="para e180">Fetch the URNs and place the files in the temp folder. Map the
                           								URNs to temp URLs.
                        </div>
                     </div>
                     <div class="listitem e181">
                        <div class="para e182">Parse every URN that is an XML file for further links and repeat
                           								until there are no more links to parse.
                        </div>
                        <div class="note e183">
                           <div class="para e184">Currently, this is all written in C#, with whatever methods C#
                              									provides to manipulate XML.
                           </div>
                        </div>
                     </div>
                     <div class="listitem e185">
                        <div class="para e186">Replace every URN link with corresponding URLs in every
                           								resource.
                        </div>
                     </div>
                     <div class="listitem e187">
                        <div class="para e188">Use XSLT to normalise and profile the root XML, producing a single
                           								large XML file. Name it for use in the 
                           <div class="emphasis e189">.bat</div>
                           								file for FOP, below.
                        </div>
                     </div>
                     <div class="listitem e190">
                        <div class="para e191">Copy the XSL-FO stylesheets from the CMS to the temp
                           								folder.
                        </div>
                        <div class="para e192">Currently, the CMS can only identify and use one
                           									
                           <div class="quote e193">main</div> FO stylesheet file at a time
                           <div class="popupBox e194">
                              <div class="popupLabel" onmouseover="$('#d1e326').show('1000');" onmouseout="$('#d1e326').hide('1000');">[ footnote ]</div>
                              <div id="d1e326" style="display: none;">
                                 <div class="footnote">
                                    <div class="para e195">Admin-based system configuration is required to point out
                                       										another main FO file.
                                    </div>
                                 </div>
                              </div>
                           </div>. The FO stylesheets use 
                           <div class="code e196">xsl:import</div> and
                           									
                           <div class="code e197">xsl:include</div> with relative URLs, but the system is
                           								not aware of any of this. It simply copies 
                           <div class="emphasis e198" role="ital">all</div> FO files in the same physical folder ID'd by the
                           								CMS to the temp location.
                        </div>
                     </div>
                     <div class="listitem e199">
                        <div class="para e200">Generate a 
                           <div class="emphasis e201">.bat</div> file to run the print engine
                           								(Apache FOP).
                        </div>
                     </div>
                     <div class="listitem e202">
                        <div class="para e203">Transform the large XML file to XSL-FO.</div>
                     </div>
                     <div class="listitem e204">
                        <div class="para e205">Convert the FO file to PDF.</div>
                     </div>
                     <div class="listitem e206">
                        <div class="para e207">Depending on the workflow status for the publishing job, name the
                           								PDF file and generate a new URN for it, storing the file in the
                           								database according to relevant workflow instructions.
                        </div>
                     </div>
                  </div>
               </div>
               <div class="para e208">Clearly, most if not all of the above steps would be far more effective to
                  					express as XProc pipelines.
               </div>
            </div>
         </div><a name="ProblemsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e209" xml:id="section-2012-2-22-15-1-36-41520962-">
            <div class="title e210">Problems</div>
            <div class="para e211">The 
               <div class="emphasis e212" role="bold">Process Manager</div> is written in a non-XML way
               				in C#, by developers who understand C# but not all that much XML. It uses XSLT
               for
               				the transforms, but if I want to use more than one set of stylesheets, say for
               HTML
               				or just a different-looking PDF, I need developers to write more C# to put it
               all
               				together because I don't speak C#. I speak XML.
            </div>
            <div class="para e213">The GUI is static, too. While it is sufficient when presenting PDF publishing
               				options, any other processing, be it validation, HTML output or something else,
               				requires changing it, meaning more C# code and (for me) a dependency to
               				developers.
            </div>
            <div class="para e214">Any additional steps, for example, cross-reference validation of the normalised
               				XML document before publication, also require coding.
            </div>
            <div class="para e215">All sorts of things (XSLT, DOM APIs, etc) are used to manipulate XML, of course,
               				but all is glued together using C# code, called using C# code, and changed using
               C#
               				code, with whatever methods there are in that language for manipulating XML.
            </div>
            <div class="para e216">Suffice to say, most changes require C#.</div>
            <div class="para e217">Some less obvious problems become apparent when handling XSLT:
               <div class="itemizedlist e218">
                  <div class="listitem e219">
                     <div class="para e220">The XSLT files are modularised and developed offline, outside the
                        							system. They use 
                        <div class="code e221">import</div> and 
                        <div class="code e222">include</div>
                        							instructions with relative URLs to reference each other. Obviously, they
                        							are handled together, as packages.
                     </div>
                  </div>
                  <div class="listitem e223">
                     <div class="para e224">The CMS can currently not identify them as packages, however. XSLT
                        							files belong together in the system only by proxy, by being stored in
                        							the same place.
                     </div>
                  </div>
                  <div class="listitem e225">
                     <div class="para e226">A working set of stylesheets in (and outside) the CMS always consists
                        							of specific versions of the included modules. One module might require
                        							uploading a dozen versions before release while another only two (see
                        							below; note the versions to the left).
                     </div>
                     <div class="mediaobject e227">
                        <div class="imageobject e228">
                           <div class="metaBox e229"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e392').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e392" class="metaSource" style="display:none;">                
                                 &lt;imagedata<span class="metaAttribute">class='e229'
                                    </span><span class="metaAttribute">fileref='../../../vol8/graphics/Nordstrom01/Nordstrom01-008.jpg'
                                    </span>
                                 &gt;
                                 
                              </div>
                           </div>
                        </div>
                     </div>
                     <div class="para e230">Unfortunately the CMS can currently only use the latest versions of
                        							the stylesheets, partly because of the above problems with identifying
                        							packages, but also because the relative URLs in the 
                        <div class="code e231">import</div>
                        							and 
                        <div class="code e232">include</div> instructions do not include version
                        							information, URN or otherwise.
                     </div>
                  </div>
                  <div class="listitem e233">
                     <div class="para e234">The relative URLs, of course, are only usable in the temp publishing
                        							folder.
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e235">This applies to any set of XML files that needs to be handled as a package by a
               				process in the CMS.
            </div>
         </div><a name="AFirstAttemptatXProcANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e236" xml:id="section-2012-2-22-14-18-20-72491660-">
            <div class="title e237">A First Attempt at XProc</div>
            <div class="para e238">The 
               <div class="emphasis e239" role="bold">Process Manager</div>, of course, should be a
               				showcase for XProc. Replace the current functionality with an XProc engine that
               runs
               				pipelines for publishing and an admin interface to add and manipulate pipelines
               and
               				stylesheets with, without having to resort to more C# code. And, of course, a
               GUI
               				for the end users to select pipelines from. 
            </div>
            <div class="para e240">The developers agreed. Their lives would be easier, too. If XProc pipelines can
               				take care of any XML processing while leaving the non-XML stuff to the middleware,
               				everybody wins.
            </div>
            <div class="para e241">Manipulating pipelines efficiently was far more complex than we first thought,
               				however. We needed a GUI for the XProc engine, ways to add parameters and input
               to
               				it, including pointing out modularised stylesheets and other XML, etc. This required
               					
               <div class="emphasis e242" role="ital">more</div> C#, not less. 
            </div>
            <div class="para e243">Also, XML pipelines are only as flexible as the user interfaces to run them with.
               				I could think of using and reusing pipelines in more ways than would be practical
               to
               				present in any GUI. The time estimate for the admin functionality alone was far
               				bigger than our initial guesses, but the end user interface added enough hours
               to
               				the point where the project was turned down.
            </div>
            <div class="para e244">So I started thinking about ways to generalise all this, to accomplish it all
               				without admin GUIs and a million lines of new C# code. This paper presents what
               I
               				came up with.
            </div>
         </div>
      </div><a name="RequirementsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e245" xml:id="section-2012-2-22-16-35-35-33447766-">
         <div class="title e246">Requirements</div>
         <div class="para e247">Let's take a brief look at my wish list:
            <div class="itemizedlist e248">
               <div class="listitem e249">
                  <div class="para e250">Less need for C# development when manipulating XML.</div>
                  <div class="para e251">For me, more C# means a more complex and less flexible solution. It makes
                     						little sense to solve what is essentially an XML domain problem with
                     						something else than XML, using C# developers without XML expertise.
                  </div>
               </div>
               <div class="listitem e252">
                  <div class="para e253">Easier-to-implement XML-based processing.</div>
                  <div class="para e254">To implement new XML-based processes without C#, I need to handle them in
                     						some other way.
                  </div>
               </div>
               <div class="listitem e255">
                  <div class="para e256">A more dynamic GUI for end users.</div>
                  <div class="para e257">The publishing process is by nature flexible and changes with the task.
                     						Therefore the GUI should change, too.
                  </div>
               </div>
            </div>
         </div>
      </div><a name="DescribingProcesseswithXMLANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e258" xml:id="section-2012-2-26-11-28-16-53652616-">
         <div class="title e259">Describing Processes with XML</div>
         <div class="para e260">XProc is XML, of course, so I think the processes surrounding it should be XML, too:
            <div class="itemizedlist e261">
               <div class="listitem e262">
                  <div class="para e263">The XProc engine command line, from input to output, parameters, options,
                     						etc, would be useful to handle in XML.
                  </div>
               </div>
               <div class="listitem e264">
                  <div class="para e265">The command line needs to reference 
                     <div class="emphasis e266" role="ital">packages</div> in the CMS (sets of XSLT or XML modules) rather
                     						than individual files, so the packages would be useful to express in
                     						XML.
                  </div>
               </div>
               <div class="listitem e267">
                  <div class="para e268">A pipeline can reference different packages and use different options,
                     						parameters, etc, which means that a single pipeline can be used with
                     						different sets of command line options by the engine. On the other hand, one
                     						such set of options might be useful to several different pipelines. A
                     						pipeline and its assciated command lines should therefore be separated in
                     						the XML.
                  </div>
               </div>
               <div class="listitem e269">
                  <div class="para e270">The pipeline is part of a process in the 
                     <div class="emphasis e271" role="bold">Process
                        							Manager
                     </div>. It would make sense to express that whole process in
                     						XML, because it would then be far easier for me to define such a
                     						process.
                  </div>
               </div>
               <div class="listitem e272">
                  <div class="para e273">A GUI presenting the processes to an end user should be as dynamic as the
                     						processes themselves. With the processes expressed in XML,why not generate
                     						the GUI from the XML?
                  </div>
               </div>
            </div>
         </div><a name="XProcandCalabashCommandLinesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e274" xml:id="section-2012-2-26-11-28-16-53652616-1">
            <div class="title e275">XProc and Calabash Command Lines</div>
            <div class="para e276">Here's an example Calabash command line to handle a simple publishing process in
               				the CMS's temp location:
            </div>
            <div class="programlisting e277" xml:space="preserve">java com.xmlcalabash.drivers.Main 
               -isource=[runtime URN/URL] 
               -istylesheet-fo=[URN/URL for FO main stylesheet] 
               normalize-stylesheet=[URN/URL string for normalize]
               pdf=[runtime PDF URN/URL]
               [URN/URL for FO XPL]
            </div>
            <div class="para e278">Most inputs are URNs mapped to temp URLs as part of the publishing process, but
               				others are generated at runtime. Generating a 
               <div class="emphasis e279">.bat</div> file
               				directly from today's system is doable, but since XProc allows writing pipelines
               in
               				many ways, it is hard to do consistently. For example, input to the pipeline can
               be
               				handled in several ways. Note how the normalize stylesheet is defined using an
               XProc
               					
               <div class="code e280">option</div> rather than the usual 
               <div class="code e281">input</div> port:
            </div>
            <div class="programlisting e282" xml:space="preserve">...
               &lt;p:input port="stylesheet-fo"/&gt;
               &lt;p:option name="normalize-stylesheet" required="true"/&gt;
               ...
            </div>
            <div class="para e283">Taking this kind of variation into account when creating an admin interface for
               				handling pipelines would cause problems, as would, for example, 
               <div class="emphasis e284" role="ital">optional</div> parameters. User-selectable options (such as
               				stylesheets) would further complicate things. Etc.
            </div>
            <div class="para e285">If we expressed the command line options in XML, generating the
               					
               <div class="emphasis e286">.bat</div> file would be far more straight-forward:
            </div>
            <div class="programlisting e287" xml:space="preserve">&lt;pipeline&gt;
               
               &lt;!-- XProc script for PDF --&gt;
               &lt;script href="[URN/URL for FO XPL]"/&gt;
               
               &lt;!-- Calabash command line --&gt;
               &lt;cmdlines&gt;
               &lt;cmdline&gt;
               &lt;inputs&gt;
               &lt;input&gt;
               &lt;port&gt;source&lt;/port&gt;
               &lt;value type="ti"&gt;[runtime URN/URL]&lt;/value&gt;
               &lt;/input&gt;
               &lt;input&gt;
               &lt;port&gt;stylesheet-fo&lt;/port&gt;
               &lt;value type="uri"&gt;[URN/URL for FO main stylesheet]&lt;/value&gt;
               &lt;/input&gt;
               &lt;/inputs&gt;
               &lt;options&gt;
               &lt;option&gt;
               &lt;name&gt;normalize&lt;/name&gt;
               &lt;value type="uri"&gt;[URN/URL for normalize main stylesheet]&lt;/value&gt;
               &lt;/option&gt;
               &lt;option&gt;
               &lt;name&gt;pdf&lt;/name&gt;
               &lt;value type="ti"&gt;[runtime PDF URN/URL]&lt;/value&gt;
               &lt;/option&gt;
               &lt;/options&gt;
               &lt;/cmdline&gt;
               &lt;/cmdlines&gt;
               &lt;/pipeline&gt;
            </div>
            <div class="para e288">This describes a single command line for one specific script. Other command lines
               				for that same script might use other stylesheets, optional input, XProc engine
               				options, etc. My basic DTD can easily include such variations:
            </div>
            <div class="figure e289" xml:id="figure-2012-3-17-14-29-0-29249958-">
               <div class="mediaobject e290">
                  <div class="imageobject e291">
                     <div class="metaBox e292"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e510').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e510" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e292'
                              </span><span class="metaAttribute">fileref='../../../vol8/graphics/Nordstrom01/Nordstrom01-009.jpg'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="caption e293">
                  <div class="para e294">The Pipeline Structure</div>
               </div>
            </div>
            <div class="para e295">The 
               <div class="code e296">pipeline</div> element allows for different command line alternatives
               				to be inserted or linked to
               <div class="popupBox e297">
                  <div class="popupLabel" onmouseover="$('#d1e519').show('1000');" onmouseout="$('#d1e519').hide('1000');">[ footnote ]</div>
                  <div id="d1e519" style="display: none;">
                     <div class="footnote">
                        <div class="para e298">Which means that they can be used by other pipelines.</div>
                     </div>
                  </div>
               </div>. A GUI could easily present them as user-selectable options. Note the
               				extension mechanism to provide some support for changes to XProc (perhaps a step
               				imported from another namespace) and the engine (see 
               <div class="xref e299" linkend="figure-2012-3-19-11-39-51-91905995-"></div>). The extension capabilities are
               				limited, however; any addition requiring preconfiguring or input beyond the basics
               				will cause problems (see 
               <div class="xref e300" linkend="section-2012-3-13-15-49-52-87255322-"></div>.
            </div>
            <div class="figure e301" xml:id="figure-2012-3-19-11-39-51-91905995-">
               <div class="mediaobject e302">
                  <div class="imageobject e303">
                     <div class="metaBox e304"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e531').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e531" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e304'
                              </span><span class="metaAttribute">fileref='../../../vol8/graphics/Nordstrom01/Nordstrom01-010.jpg'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="caption e305">
                  <div class="para e306">Extensions</div>
               </div>
            </div>
            <div class="para e307">Here's an example with several command lines:</div>
            <div class="programlisting e308" xml:space="preserve">&lt;pipeline&gt;
               &lt;metadata&gt;
               &lt;title&gt;PDF Output&lt;/title&gt;
               &lt;description&gt;This process outputs PDF.&lt;/description&gt;
               &lt;/metadata&gt;
               &lt;!-- XProc script for PDF --&gt;
               &lt;script href="[URN/URL for FO XPL]"/&gt;
               &lt;cmdlines&gt;
               &lt;cmdline id="cmd1"&gt;
               ...
               &lt;/cmdline&gt;
               &lt;cmdline id="cmd2"&gt;
               ...
               &lt;/cmdline&gt;
               &lt;cmdline id="cmd3"&gt;
               ...
               &lt;/cmdline&gt;
               &lt;/cmdlines&gt;
               &lt;/pipeline&gt;
            </div>
            <div class="para e309">A command line alternative is easily expressed as
               					
               <div class="code e310">/pipeline//cmdline[@id='cmd1']</div> and so easily transformed to a
               					
               <div class="emphasis e311">.bat</div> file once selected. Also, the alternatives are easy to
               				represent in a GUI, for example, with check boxes
               <div class="popupBox e312">
                  <div class="popupLabel" onmouseover="$('#d1e547').show('1000');" onmouseout="$('#d1e547').hide('1000');">[ footnote ]</div>
                  <div id="d1e547" style="display: none;">
                     <div class="footnote">
                        <div class="para e313">To generate a process run in batch.</div>
                     </div>
                  </div>
               </div> or a list of choices. The pipeline's 
               <div class="code e314">metadata</div> element
               				contents can be used to add labels and help texts to the GUI
               <div class="popupBox e315">
                  <div class="popupLabel" onmouseover="$('#d1e554').show('1000');" onmouseout="$('#d1e554').hide('1000');">[ footnote ]</div>
                  <div id="d1e554" style="display: none;">
                     <div class="footnote">
                        <div class="para e316">The command line alternatives also include metadata for the same
                           						purpose.
                        </div>
                     </div>
                  </div>
               </div>.
            </div>
            <div class="para e317">A pipeline structure instance with its associated command lines
               <div class="popupBox e318">
                  <div class="popupLabel" onmouseover="$('#d1e560').show('1000');" onmouseout="$('#d1e560').hide('1000');">[ footnote ]</div>
                  <div id="d1e560" style="display: none;">
                     <div class="footnote">
                        <div class="para e319">And the packages, as defined in the next section.</div>
                     </div>
                  </div>
               </div> is 
               <div class="emphasis e320" role="ital">a blueprint for possible ways to use the
                  					pipeline
               </div>. There is no one-to-one correspondence with an actual XProc
               				script; rather, the XML represents the available choices. For example, several
               				command line alternatives might exist for a pipeline, a command line might include
               				several alternative input stylesheets, etc. A user would have to make choices
               for
               				each option before running the pipeline.
            </div>
            <div class="para e321">The GUI needs to reflect this by only offering such choices once the prerequisite
               				choices have been made (for example, you'd have to select a command line before
               				selecting a stylesheet).
            </div>
            <div class="note e322">
               <div class="para e323">Why not use the XProc script itself to generate the 
                  <div class="emphasis e324">.bat</div>
                  					file and the GUI to handle the process with? First of all, XProc scripts do not
                  					easily offer the kind of modularity suggested above, nor can one XProc script
                  					express all possible variations. More importantly, XProc cannot handle
                  					referencing packages (see the next section) or the kind of runtime naming we
                  					need.
               </div>
            </div>
            <div class="para e325">The 
               <div class="code e326">input</div> step in the below example points out the root XML, but the
               				value is not known until runtime. The attribute 
               <div class="code e327">type="ti"</div> means that
               				the system is expected to provide the content
               <div class="popupBox e328">
                  <div class="popupLabel" onmouseover="$('#d1e583').show('1000');" onmouseout="$('#d1e583').hide('1000');">[ footnote ]</div>
                  <div id="d1e583" style="display: none;">
                     <div class="footnote">
                        <div class="para e329">Other possible values include 
                           <div class="quote e330">uri</div> to point out referenced
                           						packages, described in the next section.
                        </div>
                     </div>
                  </div>
               </div>.
            </div>
            <div class="programlisting e331" xml:space="preserve">&lt;input&gt;
               &lt;port&gt;source&lt;/port&gt;
               &lt;value type="ti"&gt;
               &lt;!-- Runtime URN/URL --&gt;
               &lt;/value&gt;
               &lt;/input&gt;
            </div>
         </div><a name="PackagesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e332" xml:id="section-2012-3-9-10-29-19-89702477-">
            <div class="title e333">Packages</div>
            <div class="para e334">A 
               <div class="emphasis e335" role="ital">package</div> is a collection of resources (XML,
               				XSLT, etc) identified with URNs. As the URNs identify specific versions (and
               				languages), a package can identify an arbitrary but well-defined set of files
               in the
               				database. Usually but not always
               <div class="popupBox e336">
                  <div class="popupLabel" onmouseover="$('#d1e600').show('1000');" onmouseout="$('#d1e600').hide('1000');">[ footnote ]</div>
                  <div id="d1e600" style="display: none;">
                     <div class="footnote">
                        <div class="para e337">Standard texts for stylesheets, for example, could be stored in separate
                           						modules, without a 
                           <div class="quote e338">main</div> module.
                        </div>
                     </div>
                  </div>
               </div>, there will be a main file that links to the others. Here's an example
               				FO stylesheet package:
            </div>
            <div class="programlisting e339" xml:space="preserve">&lt;package id="id-fo-package"&gt;
               &lt;metadata&gt;
               &lt;title&gt;XSL-FO Stylesheet Package&lt;/title&gt;
               &lt;description&gt;FO stylesheets for
               Company X.&lt;/description&gt;
               &lt;/metadata&gt;
               &lt;locator href="urn:x-example:xslfo:0012:3" type="root"/&gt;
               &lt;locator href="urn:x-example:xslfo:0019:10"/&gt;
               &lt;locator href="urn:x-example:xslfo:0117:21"/&gt;
               &lt;locator href="urn:x-example:xslfo:0010:1"/&gt;
               &lt;/package&gt;
            </div>
            <div class="para e340">The package consists of URN-based links to the stylesheet files, plus some
               				metadata for the GUI. Also, the main stylesheet file is identified with a
               					
               <div class="code e341">type</div> attribute with the value 
               <div class="quote e342">root</div>.
            </div>
            <div class="figure e343" xml:id="figure-2012-3-17-14-29-0-29249958-1">
               <div class="mediaobject e344">
                  <div class="imageobject e345">
                     <div class="metaBox e346"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e620').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e620" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e346'
                              </span><span class="metaAttribute">fileref='../../../vol8/graphics/Nordstrom01/Nordstrom01-011.jpg'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="caption e347">
                  <div class="para e348">A Package Is Basically A Set of Links</div>
               </div>
            </div>
            <div class="para e349">If the package XML is identified with
               					
               <div class="code e350">urn:x-example:packages:123456:en-GB:1</div> in the CMS (the last part
               				identifies the package version, 
               <div class="quote e351">1</div>), the relevant 
               <div class="code e352">input</div>
               				in the initial pipeline processing XML from the last section is this:
            </div>
            <div class="programlisting e353" xml:space="preserve">&lt;input&gt;
               &lt;port&gt;stylesheet-fo&lt;/port&gt;
               &lt;value type="uri"&gt;urn:x-example:packages:123456:en-GB:1&lt;/value&gt;
               &lt;/input&gt;
            </div>
            <div class="para e354">When generating the pipeline's 
               <div class="emphasis e355">.bat</div> file, the whole package,
               				including the package XML, is copied to the temp location, with URNs in the package
               				XML replaced with corresponding URLs (for example,
               					
               <div class="code e356">urn:x-example:xslfo:0012:3</div> with 
               <div class="emphasis e357">main-fo.xsl</div>) .
               				Each user-selectable stylesheet alternative in a pipeline's command line (see
               
               <div class="xref e358" linkend="section-2012-2-26-11-28-16-53652616-1"></div>) would reference a different
               				such package.
            </div>
            <div class="para e359">Packages, then, provide the necessary abstraction layer to define input 
               <div class="emphasis e360" role="ital">from the CMS</div> to XProc pipeline processes.
            </div>
            <div class="para e361">As we've seen, the XML that describes the packages is fairly static, easily
               				definable beforehand. With more frequent package updates, however, it might be
               				useful to call the package with a wildcard in place of the URN version
               				string:
            </div>
            <div class="programlisting e362" xml:space="preserve">urn:x-example:packages:123456:en-GB:*</div>
            <div class="para e363">The wildcard means 
               <div class="quote e364">use latest version with workflow status 
                  <div class="emphasis e365" role="ital">approved</div>
               </div> for a user with technical author
               				permissions, but 
               <div class="quote e366">use latest version with workflow status 
                  <div class="emphasis e367" role="ital">reviewing</div>
               </div> for someone with test privileges.
               				The permissions control how URNs are processed, significantly lessening the need
               to
               				change or update system behaviour for small updates
               <div class="popupBox e368">
                  <div class="popupLabel" onmouseover="$('#d1e672').show('1000');" onmouseout="$('#d1e672').hide('1000');">[ footnote ]</div>
                  <div id="d1e672" style="display: none;">
                     <div class="footnote">
                        <div class="para e369">It also allows 
                           <div class="quote e370">power</div> users with specific privileges to test
                           						new features without having access to a test setup or affecting the normal,
                           						day-to-day work.
                        </div>
                     </div>
                  </div>
               </div>.
            </div>
            <div class="para e371">Finally, the package abstraction very neatly separates offline versioning (in
               				subversion, in my case) of the participating files from their online versioning.
               The
               				latter are a conscious decision from the developer to release a set of files,
               while
               				the former is simply work in progress.
            </div>
         </div><a name="PuttingItAllTogetherANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e372" xml:id="section-2012-3-9-10-29-19-89702477-1">
            <div class="title e373">Putting It All Together</div>
            <div class="para e374">The 
               <div class="emphasis e375" role="bold">Process Manager</div> is meant to handle 
               <div class="emphasis e376" role="ital">processes</div> (the name sort of gives it away). Normally, a
               				complete process and the primary action that process performs (such as outputting
               a
               				PDF) are largely the same, but until now, it has not been possible to produce
               				variants of the process in any case.
            </div>
            <div class="para e377">It should be. For example, two different sites sharing the same CMS might use
               					
               <div class="emphasis e378" role="ital">almost</div> the same basic process to publish
               				documents with, with the same basic pipeline and options, but use different
               				stylesheets for their respective brands. It would be useful to glue the pipelines
               				and packages together to describe such variations.
            </div>
            <div class="para e379">Here's a basic XML structure defining two processes A and B that use more or less
               				the same pipelines, command lines and packages:
            </div>
            <div class="programlisting e380" xml:space="preserve">&lt;processes&gt;
               &lt;!-- Process for A --&gt;
               &lt;process id="id-process-A"&gt;
               &lt;metadata&gt;
               &lt;!-- Metadata for A Process --&gt;
               &lt;/metadata&gt;
               &lt;!-- Pipelines for A --&gt;
               &lt;pipelines&gt;
               &lt;pipeline&gt;
               &lt;metadata&gt;
               &lt;!-- Metadata for pipeline for A --&gt;
               &lt;/metadata&gt;
               &lt;!-- XProc script for A FO --&gt;
               &lt;script href="a.xpl"/&gt;           
               &lt;cmdlines&gt;
               &lt;cmdline&gt;
               &lt;!-- Command line for A FO --&gt;
               &lt;/cmdline&gt;
               &lt;cmdline id="id-cmdline-fo-a-and-b"&gt;
               &lt;!-- Command line for A and B --&gt;
               &lt;/cmdline&gt;
               &lt;/cmdlines&gt;
               &lt;/pipeline&gt;
               &lt;/pipelines&gt;
               &lt;!-- Packages available for A --&gt;
               &lt;packages&gt;
               &lt;!-- Normalize stylesheet reference --&gt;
               &lt;locator href="packages.xml#id-norm"/&gt;
               &lt;package id="id-fo-a"&gt;
               &lt;!-- FO stylesheet package for A --&gt;
               &lt;/package&gt;
               &lt;!-- Link to A and B FO stylesheet package --&gt;
               &lt;locator href="packages.xml#id-fo-a-b"/&gt;
               &lt;/packages&gt;
               &lt;/process&gt;
               
               &lt;!-- Process for B --&gt;
               &lt;process id="id-process-b"&gt;
               &lt;metadata&gt;
               &lt;!-- Metadata for B Process --&gt;
               &lt;/metadata&gt;
               &lt;!-- Pipelines available for B --&gt;
               &lt;pipelines&gt;
               &lt;pipeline&gt;
               &lt;metadata&gt;
               &lt;!-- Metadata for B pipeline --&gt;
               &lt;/metadata&gt;
               &lt;!-- XProc script for B FO --&gt;
               &lt;script href="b.xpl"/&gt;
               &lt;!-- Links to command lines --&gt;
               &lt;cmdlines&gt;
               &lt;!-- Link to A and B FO cmdline (above) --&gt;
               &lt;locator href="#id-cmdline-fo-a-and-b"/&gt;
               &lt;/cmdlines&gt;
               &lt;/pipeline&gt;
               &lt;/pipelines&gt;
               &lt;!-- Packages available for B --&gt;
               &lt;packages&gt;
               &lt;!-- Normalize package ref --&gt;
               &lt;locator href="#id-norm"/&gt;
               &lt;!-- Link to A and B FO package --&gt;
               &lt;locator href="packages.xml#id-fo-a-b"/&gt;
               &lt;/packages&gt;
               &lt;/process&gt;
               &lt;/processes&gt;
            </div>
            <div class="para e381">Both A and B link to 
               <div class="emphasis e382">packages.xml</div> that defines common
               				packages:
            </div>
            <div class="programlisting e383" xml:space="preserve">&lt;packages&gt;
               &lt;package id="id-norm"&gt;
               				&lt;!-- Normalize stylesheet package  --&gt;
               &lt;/package&gt;
               &lt;package id="id-fo-a-b"&gt;
               				&lt;!-- FO stylesheet package for A and B --&gt;
               &lt;/package&gt;
               &lt;/packages&gt;
            </div>
            <div class="para e384">A 
               <div class="code e385">processes</div> instance is a blueprint for every possible
               					
               <div class="quote e386">allowed</div> process, each of which is associated with one or more
               				possible pipelines. The user has to select a process before selecting from the
               				pipelines for that process.
            </div>
            <div class="figure e387" xml:id="figure-2012-3-17-14-29-0-29249958-2">
               <div class="mediaobject e388">
                  <div class="imageobject e389">
                     <div class="metaBox e390"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e719').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e719" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e390'
                              </span><span class="metaAttribute">fileref='../../../vol8/graphics/Nordstrom01/Nordstrom01-012.jpg'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="caption e391">
                  <div class="para e392">Putting It All Together</div>
               </div>
            </div>
            <div class="para e393">The design is modular, so everything from command lines to packages can be reused.
               				The modules are identified with URNs, just as everything else in the system,
               				offering traceability and allowing whole processes to be repeated when
               				required.
            </div>
         </div>
      </div><a name="ImplementationandExamplesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e394" xml:id="section-2012-3-9-10-29-19-89702477-2">
         <div class="title e395">Implementation and Examples</div>
         <div class="para e396">The process XML is not a reality yet, partly because I have to deal with paying
            			customers and other inconveniences, but also because my XForms/HTML5 skills really
            			aren't on par with what I need. Nevertheless, below are some comments and ideas
            about an
            			implementation.
         </div><a name="WritingThisPaperANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e397" xml:id="section-2012-3-13-11-15-27-15906474-">
            <div class="title e398">Writing This Paper</div>
            <div class="para e399">This whitepaper, written in our system, provided me with further motivation:
               <div class="itemizedlist e400">
                  <div class="listitem e401">
                     <div class="para e402">The paper uses our basic XML format. It's straight-forward to convert
                        							it to the conference XML
                        <div class="popupBox e403">
                           <div class="popupLabel" onmouseover="$('#d1e739').show('1000');" onmouseout="$('#d1e739').hide('1000');">[ footnote ]</div>
                           <div id="d1e739" style="display: none;">
                              <div class="footnote">
                                 <div class="para e404">I have a DocBook script that does the job.</div>
                              </div>
                           </div>
                        </div>, but currently I have to do it outside the system.
                     </div>
                  </div>
                  <div class="listitem e405">
                     <div class="para e406">The conversion means replacing URN-based links (cross-references and
                        							images) with relative URLs. Again, I have to do this outside the
                        							system.
                     </div>
                  </div>
                  <div class="listitem e407">
                     <div class="para e408">The paper and images are zipped together before they are sent to
                        							Balisage. Yes, I have to do that outside the system, too.
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e409">The additional processes (URN/URL conversion, export to DocBook, zip) are simple
               				enough to implement, but right now I'd need a C# developer to do it. I'd have
               to
               				explain what I want done and why, and the GUI would need changing. And it would
               all
               				have to be done again if I wanted to add some other processing.
            </div>
         </div><a name="GeneratingGUIsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e410" xml:id="section-2012-3-13-11-15-27-15906474-2">
            <div class="title e411">Generating GUIs</div>
            <div class="para e412">The 
               <div class="code e413">processes</div> structure is a blueprint describing every available
               				process to manipulate XML documents with. Every process is associated with one
               or
               				more pipelines, run using one or more command lines, and each command line may
               allow
               				for one or more stylesheets.
            </div>
            <div class="para e414">An XForms (or HTML5) GUI generated from the process XML blueprint can help a user
               				visualise these choices. 
               <div class="xref e415" linkend="figure-2012-3-19-13-29-37-70038244-"></div>
               				provides a blueprint example. The Delivery process, for example, can use three
               				pipelines but Validation only one. The 
               <div class="emphasis e416" role="ital">Printed</div>
               				pipeline can only use one command line, but the 
               <div class="emphasis e417" role="ital">Web</div>
               				pipeline four. Etc.
            </div>
            <div class="figure e418" xml:id="figure-2012-3-19-13-29-37-70038244-">
               <div class="mediaobject e419">
                  <div class="imageobject e420">
                     <div class="metaBox e421"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e772').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e772" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e421'
                              </span><span class="metaAttribute">fileref='../../../vol8/graphics/Nordstrom01/Nordstrom01-013.png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="caption e422">
                  <div class="para e423">Process Selection Relations</div>
               </div>
            </div>
            <div class="para e424">Using XSLT for GUI generation is the obvious choice as the underlying database is
               				relational, SQL rather than XML, and there's no XQuery implementation
               <div class="popupBox e425">
                  <div class="popupLabel" onmouseover="$('#d1e778').show('1000');" onmouseout="$('#d1e778').hide('1000');">[ footnote ]</div>
                  <div id="d1e778" style="display: none;">
                     <div class="footnote">
                        <div class="para e426">Doing this in a system based on, say, eXist or MarkLogic would probably be
                           						much easier.
                        </div>
                     </div>
                  </div>
               </div>.
            </div>
            <div class="para e427">The process XML requires input from the system for pointing out the root XML
               				document to be processed. My knowledge of the JScript-based tree controls we use
               to
               				select XML in a web browser is limited, but it is supposedly easy to query the
               tree
               				and get lists of the XML (as URNs) and other resources, including translations
               and
               				older versions of the listed XML.
            </div>
            <div class="figure e428" xml:id="figure-2012-3-19-10-11-40-31495103-1">
               <div class="mediaobject e429">
                  <div class="imageobject e430">
                     <div class="metaBox e431"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e787').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e787" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e431'
                              </span><span class="metaAttribute">fileref='../../../vol8/graphics/Nordstrom01/Nordstrom01-014.jpg'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="caption e432">
                  <div class="para e433">Selecting the Root XML Document</div>
               </div>
            </div>
            <div class="para e434">The root XML selection is used as a starting point for pipeline processing. The
               				next step is to generate a GUI from the process XML blueprint. 
               <div class="xref e435" linkend="figure-2012-3-19-10-11-40-31495103-"></div> shows a GUI example that follows
               				the logic in 
               <div class="xref e436" linkend="figure-2012-3-19-13-29-37-70038244-"></div>.
            </div>
            <div class="figure e437" xml:id="figure-2012-3-19-10-11-40-31495103-">
               <div class="mediaobject e438">
                  <div class="imageobject e439">
                     <div class="metaBox e440"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e800').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e800" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e440'
                              </span><span class="metaAttribute">fileref='../../../vol8/graphics/Nordstrom01/Nordstrom01-015.png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="caption e441">
                  <div class="para e442">Process Selection Page Generated From XML</div>
               </div>
            </div>
            <div class="para e443">Apologies for the crude mock-up. Generating new selection lists based on a
               				previous selection can probably be represented better, but hopefully the principle
               				is clear. The labels are fetched from the process metadata, as are help texts.
               Also,
               				note the checkbox to enable logging; this is a command line alternative
               <div class="popupBox e444">
                  <div class="popupLabel" onmouseover="$('#d1e806').show('1000');" onmouseout="$('#d1e806').hide('1000');">[ footnote ]</div>
                  <div id="d1e806" style="display: none;">
                     <div class="footnote">
                        <div class="para e445">Other such options can be similarly handled.</div>
                     </div>
                  </div>
               </div>.
            </div>
            <div class="para e446">The selections provide data to refine the process instance. I'm not enough of a
               				programmer, nor sufficiently familar with XForms, to tell you exactly how this
               is
               				handled best. For example, the GUI needs to handle a 
               <div class="emphasis e447" role="bold">Back</div> or 
               <div class="emphasis e448" role="bold">Previous</div> button, 
               <div class="emphasis e449" role="ital">Undo</div>, and more, and I don't know what the best way to
               				implement those would be. Here, I work from the assumption that the user's choices
               				can be stored in a temporary process XML instance, used to generate the batch
               file
               				to run the actual pipeline.
            </div>
         </div><a name="GeneratingbatFilesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e450" xml:id="section-2012-3-13-11-15-27-15906474-1">
            <div class="title e451">Generating .bat Files</div>
            <div class="note e452">
               <div class="para e453">My current markup started life assuming that 
                  <div class="emphasis e454" role="ital">Calabash</div> is used for XProc processing. It should handle other
                  					XProc engines, but this is outside the scope of this paper.
               </div>
            </div>
            <div class="para e455">Pipelines are run using batch files generated from the process XML using XSLT, but
               				first, the process XML must be 
               <div class="quote e456">narrowed down</div> to an instance defining
               				only a specific pipeline and options, as described above.
            </div>
            <div class="para e457">Generating the batch file:
               <div class="itemizedlist e458">
                  <div class="listitem e459">
                     <div class="para e460">Select an XML root document URN from a list in the 
                        <div class="emphasis e461" role="bold">Process Manager</div> GUI. Use it as input to the
                        							pipeline command line input in the process XML blueprint
                        <div class="popupBox e462">
                           <div class="popupLabel" onmouseover="$('#d1e844').show('1000');" onmouseout="$('#d1e844').hide('1000');">[ footnote ]</div>
                           <div id="d1e844" style="display: none;">
                              <div class="footnote">
                                 <div class="para e463">How do we know which input? The pipeline input values to be
                                    									provided by the system are identified as such using a
                                    										
                                    <div class="code e464">type</div> attribute.
                                 </div>
                              </div>
                           </div>
                        </div>.
                     </div>
                  </div>
                  <div class="listitem e465">
                     <div class="para e466">Create a temp location for the process.</div>
                  </div>
                  <div class="listitem e467">
                     <div class="para e468">Convert the process XML blueprint into a GUI (see the previous
                        							section) to handle the rest of the selection.
                     </div>
                  </div>
                  <div class="listitem e469">
                     <div class="para e470">Select a process from the GUI.</div>
                  </div>
                  <div class="listitem e471">
                     <div class="para e472">Select a pipeline from the available choices for that process.</div>
                  </div>
                  <div class="listitem e473">
                     <div class="para e474">Select command line options for the pipeline.</div>
                  </div>
                  <div class="listitem e475">
                     <div class="para e476">Select an XSL package. The package is fetched from the system and
                        							placed in the temp location. The main stylesheet temp URL is used as
                        							further input.
                     </div>
                  </div>
                  <div class="listitem e477">
                     <div class="para e478">Save the choices that are made in a process XML instance.</div>
                  </div>
                  <div class="listitem e479">
                     <div class="para e480">Convert that instance to a batch file.</div>
                  </div>
               </div>
            </div>
            <div class="para e481">The batch file then runs the selected pipeline and its options, parsing the root
               				XML document and any linked resources for URNs, downloads the associated resources,
               				eventually replacing URNs in links with temp URLs, and runs any XSL and other
               				processing as specified by the pipeline.
            </div>
         </div><a name="WritingProcessXMLANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e482" xml:id="section-2012-3-13-11-15-27-15906474-3">
            <div class="title e483">Writing Process XML</div>
            <div class="para e484">When writing a new pipeline script (or editing an existing one), it is useful to
               				simultaneously edit the process XML blueprint that will include the pipeline.
               				Command line options might require updating or a new XSLT stylesheet might be
               needed
               				with the pipeline. It makes sense to put the new pipeline in context so whatever
               				options it has are handled.
            </div>
            <div class="para e485">The process XML is edited in the same authoring environment that is used to write
               				documents. The markup uses the same linking mechanism as the XML documents‚ÄîXLink
               				with URN-based links‚Äîso only some additional CSS styling and macros for editing
               are
               				required; the rest is already in place. The results can be checked into the CMS,
               				just as any other XML, with very few modifications
               <div class="popupBox e486">
                  <div class="popupLabel" onmouseover="$('#d1e884').show('1000');" onmouseout="$('#d1e884').hide('1000');">[ footnote ]</div>
                  <div id="d1e884" style="display: none;">
                     <div class="footnote">
                        <div class="para e487">Most have to do with giving the XML editor access to the template storage
                           						area in the CMS.
                        </div>
                     </div>
                  </div>
               </div>.
            </div>
         </div><a name="LimitationsandOtherConsiderationsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e488" xml:id="section-2012-3-13-15-49-52-87255322-">
            <div class="title e489">Limitations and Other Considerations</div>
            <div class="para e490">Some notable problem areas:
               <div class="itemizedlist e491">
                  <div class="listitem e492">
                     <div class="para e493"> Script 
                        <div class="quote e494">style</div>. Some decisions need to be made, such as
                        							which options to support and which XProc script designs to allow (such
                        							as what kinds of input to expect for stylesheets). These decisions need
                        							to be documented in a 
                        <div class="quote e495">style guide</div> for writing process XML
                        							to avoid breaking the conversions.
                     </div>
                  </div>
                  <div class="listitem e496">
                     <div class="para e497">XProc engine configuration. Setting Calabash configuration options,
                        							system properties, etc
                        								(
                        <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e498" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://xmlcalabash.com/docs/reference/configuration.html</div>)
                        							are not supported as of yet (see below).
                     </div>
                  </div>
                  <div class="listitem e499">
                     <div class="para e500">GUI design. A GUI that allows for the dynamics of the process XML,
                        							including 
                        <div class="quote e501">Undo</div>, 
                        <div class="quote e502">Back</div> and such, requires
                        							temporarily storing the choices made in the various stages during the
                        							process, including identifying what 
                        <div class="quote e503">Back</div> means as opposed
                        							to 
                        <div class="quote e504">Undo</div>, but also to use the temp information for
                        							immediate feedback in the GUI during processing.
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e505">Other parts are easier:
               <div class="itemizedlist e506">
                  <div class="listitem e507">
                     <div class="para e508">The XSLT for the conversions, both to (and from) the GUI and to a
                        								
                        <div class="emphasis e509">.bat</div> file, should be fairly straight-forward,
                        							once the above is clear.
                     </div>
                  </div>
                  <div class="listitem e510">
                     <div class="para e511">Hooking the process XML functionality to the current root XML document
                        							selection in the system should also be straight-forward. The queries to
                        							handle and fetch URNs are already in place, as are creating and handling
                        							temp locations
                        <div class="popupBox e512">
                           <div class="popupLabel" onmouseover="$('#d1e936').show('1000');" onmouseout="$('#d1e936').hide('1000');">[ footnote ]</div>
                           <div id="d1e936" style="display: none;">
                              <div class="footnote">
                                 <div class="para e513">It might be preferable to handle the 
                                    <div class="emphasis e514" role="bold">Process Manager</div> steps that invoke the process
                                    									XML itself as an XProc pipeline.
                                 </div>
                              </div>
                           </div>
                        </div>.
                     </div>
                  </div>
                  <div class="listitem e515">
                     <div class="para e516">Additions to the XML editor for the basic styling and handling of
                        							process XML are needed, but also permissions and web services to allow
                        							admins to write and check in the process XML. Both of these changes are
                        							trivial to implement.
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e517">Many extensions (see 
               <div class="xref e518" linkend="ref-item-2012-6-4-9-15-58-33787595-1"></div>,
               					
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e519" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://xmlcalabash.com/docs/reference/extensions.html</div>) fall into
               				the engine domain as they happen completely behind the scenes; if the engine
               				supports it, the process XML will, too, 
               <div class="emphasis e520" role="ital">if</div> they can
               				be run transparently, without having to preconfigure the engine in some way. If
               they
               				require engine configuration, setting system properties or specific input on the
               				command line, they will fail as anything depending on setting a Calabash system
               				property or configuration on the command line is currently not supported.
            </div>
         </div><a name="EducatingUsersANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e521" xml:id="section-2012-3-19-10-11-40-31495103-">
            <div class="title e522">Educating Users</div>
            <div class="para e523">The final point I want to make is perhaps the most important one. The process XML
               				is very useful when 
               <div class="emphasis e524" role="ital">educating</div> users about a
               				process, without requiring detailed knowledge about XProc, XSLT, or some other
               				processing. It allows us to represent the process with just enough information
               for
               				an overview because it 
               <div class="quote e525">black-boxes</div> every component.
            </div>
            <div class="para e526">For example:
               <div class="itemizedlist e527">
                  <div class="listitem e528">
                     <div class="para e529">My developers today know a lot about C# and SQL, but processing XML
                        							today requires a lot of effort, for them to understand what I want to do
                        							and for me to understand what they can help me with, and how.
                     </div>
                     <div class="para e530">The process XML allows me to do the XML parts cleanly, without lengthy
                        							explanations or compromises, but also for the developers to query the
                        							process XML for their purposes, for example, to understand how to handle
                        							process data in the database. The process XML is a clean interface
                        							between me and them.
                     </div>
                  </div>
                  <div class="listitem e531">
                     <div class="para e532">The process XML can be visualised as a tree mapping process choices
                        							and options. If user permission handling is added to the process XML,
                        							user category-specific descriptions can be included.
                     </div>
                  </div>
                  <div class="listitem e533">
                     <div class="para e534">The process XML can be used to simulate a process without actually
                        							processing anything. This is very useful when training new users.
                     </div>
                  </div>
                  <div class="listitem e535">
                     <div class="para e536">Of course, the process XML can be converted to SVG or other formats
                        							for more flexibility.
                     </div>
                  </div>
               </div>
            </div>
         </div><a name="AndMoreANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e537" xml:id="section-2012-3-13-11-15-27-15906474-4">
            <div class="title e538">And More</div>
            <div class="para e539">I'm thinking about adding:
               <div class="itemizedlist e540">
                  <div class="listitem e541">
                     <div class="para e542">A more generic XProc engine 
                        <div class="code e543">cmdline</div> structure. The
                        							current one is not feature-complete.
                     </div>
                  </div>
                  <div class="listitem e544">
                     <div class="para e545">Better support for reshaped or restyled GUIs for different
                        							requirements. Some of these might be user-controlled while others might
                        							result from the user's document types, product variants, etc.
                     </div>
                  </div>
                  <div class="listitem e546">
                     <div class="para e547">Markup support for workflow status and user permission information,
                        							providing workflow- or user-based conditionality when selecting
                        							processes, pipelines, etc.
                     </div>
                  </div>
                  <div class="listitem e548">
                     <div class="para e549">And, of course, I'm working on a demo implementation.</div>
                  </div>
               </div>
            </div>
         </div>
      </div><a name="ConclusionsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e550" xml:id="section-2012-3-9-10-29-19-89702477-3">
         <div class="title e551">Conclusions</div>
         <div class="para e552">They say that there is nothing quite as practical as a good theory. I'm not a
            			programmer and cannot describe the specifics of a good XForms or HTML5 GUI integrated
            in
            			the 
            <div class="emphasis e553" role="bold">Process Manager</div>, but I can describe the markup
            			handling the GUI's semantics. The process XML happened because of a practical problem,
            			namely that we had a static GUI and system, requiring coding for everything, but
            I
            			wanted something more flexible, something I could change without having to ask
            for help
            			all the time.
         </div>
         <div class="para e554">In other words, I created a theory that I believe is practical:
            <div class="itemizedlist e555">
               <div class="listitem e556">
                  <div class="para e557">Expressing the processes, pipelines, etc as XML is a useful abstraction,
                     						providing the black-boxing of feature sets. The XML provides a blueprint for
                     						the total features available without having to go into specifics.
                  </div>
               </div>
               <div class="listitem e558">
                  <div class="para e559">It's easy to add new output media and formats, extra steps, etc, just as
                     						it should be with XProc, but it is also easy for me to write new processes
                     						with new pipelines and options, thereby changing the whole feature set of
                     						the 
                     <div class="emphasis e560" role="bold">Process Manager</div>, and do this in XML,
                     						using an XML editor.
                  </div>
               </div>
               <div class="listitem e561">
                  <div class="para e562">The process XML solves the problem with identifying 
                     <div class="emphasis e563" role="ital">packages</div> rather than single files for the pipelines, but
                     						also handling URNs and URLs for online and offline use, respectively,
                     						without compromising.
                  </div>
               </div>
               <div class="listitem e564">
                  <div class="para e565">The process XML is dynamic so the GUI needs to be, too. Generating the GUI
                     						from it offers the exact same dynamics.
                  </div>
               </div>
               <div class="listitem e566">
                  <div class="para e567">The process XML can visualise and describe the feature sets for any user
                     						category, without requiring detailed knowledge of the underlying
                     						mechanics.
                  </div>
               </div>
            </div>
         </div>
      </div><a name="AcknowledgmentsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e568" xml:id="section-2012-6-4-9-15-58-33787595-">
         <div class="title e569">Acknowledgments</div>
         <div class="para e570">I'd like to thank Stefan Tisell and Daniel Jonsson, both at Condesign, for their
            			invaluable insights and input. Also, my thanks need to go to Henrik M√•rtensson.
            His
            			ideas on pipeline processing (see 
            <div class="xref e571" linkend="ref-item-2012-6-4-9-15-58-33787595-2"></div>) have certainly affected mine.
         </div>
         <div class="para e572">Any errors and omissions in this paper, however, are purely mine.</div>
      </div><a name="BibliographyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e573">
         <div class="title e574">Bibliography</div>
         <div class="bibliomixed e575" xml:id="ref-item-2012-6-4-9-15-58-33787595-" xreflabel="XProc: An XML Pipeline&#xA;&#x9;&#x9;&#x9; Language">
            <div class="quote e576">XProc: An XML
               				Pipeline Language.
               				
            </div>
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e577" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/2010/REC-xproc-20100511/</div>
         </div>
         <div class="bibliomixed e578" xml:id="ref-item-2012-6-4-9-15-58-33787595-1" xreflabel="XML Calabash (also known&#xA;&#x9;&#x9;&#x9; as Stop Censorship)">
            <div class="quote e579">XML
               				Calabash (also known as Stop Censorship). 
            </div>Calabash web page, at
            				
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e580" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://xmlcalabash.com/</div>. For the purposes of this paper, especially
            			interesting are the sections on extensions
            				(
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e581" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://xmlcalabash.com/docs/reference/extensions.html</div>) and engine
            			configuration
            			(
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e582" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://xmlcalabash.com/docs/reference/configuration.html</div>).
         </div>
         <div class="bibliomixed e583" xml:id="ref-item-2012-6-4-9-15-58-33787595-2" xreflabel="eXtensible Filter Objects&#xA;&#x9;&#x9;&#x9; (XFO)">
            <div class="quote e584">eXtensible Filter
               				Objects (XFO). 
            </div>Whitepaper by Henrik M√•rtensson about pipeline-based
            			processing of XML, presented at XML Scandinavia 2001. XFO was implemented in Perl
            but
            			the black-boxing of arbitrary feature sets was a useful abstraction in any context.
            			Unfortunately, the paper no longer seems to be available online.
         </div>
      </div>
   </div>
</div>