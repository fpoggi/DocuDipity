<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.3"><title class="po-block e1 e1"><textual class="po-textual">Marking up changes to ISO standards: A case study</textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">Balisage: The Markup Conference 2013</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 6 - 9, 2013</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual">The ISO Standards Tags Set (ISOSTS) is a customization of NISO’s Journal Article Tag Suite (JATS) developed for the International Standards Organization for authoring standards
        documents.</textual></para><para class="po-block e8 e8"><textual class="po-textual">As part of the authoring workflow used at ISO, they required the capability to produce </textual><emphasis class="po-inline e9 e9" role="ital"><textual class="po-textual">redline</textual></emphasis><textual class="po-textual"> publications of a document in order to show
        changes between different versions of a given standard. Alongside Typefi, who provided the functionality for publishing the marked XML into PDF with redlining, we provided our XML
        comparison toolset to detect and mark the changes as required.</textual></para><para class="po-block e10 e10"><textual class="po-textual">This paper discusses some of the issues we faced while completing this work, including the representation of changes in the XML, comparison of tables, ignoring text formatting
        changes, and the use of processing instructions. The paper also looks at the pros and cons of various format design decisions that can have an impact on the suitability of that
        format to support good comparison.</textual></para></abstract><author class="po-record e11 e11"><personname class="po-record e12 e12"><firstname class="po-field e13 e13"><textual class="po-textual">Tristan</textual></firstname><surname class="po-field e14 e14"><textual class="po-textual">Mitchell</textual></surname></personname><personblurb class="po-container e15 e15"><para class="po-block e16 e16"><textual class="po-textual">Tristan joined DeltaXML after graduating with an MEng from Aberystwyth University in 2004. Since then he has been involved in improving the performance of DeltaXML’s comparison
          software as well as developing new ways of representing change to XML. </textual></para><para class="po-block e17 e17"><textual class="po-textual">Tristan lives in Salisbury, UK, with his wife and two young daughters. Outside of work he enjoys reading about and watching movies and he is also a keen runner.</textual></para></personblurb><affiliation class="po-record e18 e18"><jobtitle class="po-field e19 e19"><textual class="po-textual">Senior Software Engineer</textual></jobtitle><orgname class="po-block e20 e20"><textual class="po-textual">DeltaXML Ltd.</textual></orgname></affiliation><email class="po-field e21 e21"><textual class="po-textual">tristan.mitchell@deltaxml.com</textual></email></author><author class="po-record e22 e22"><personname class="po-record e23 e23"><firstname class="po-field e24 e24"><textual class="po-textual">Nigel</textual></firstname><surname class="po-field e25 e25"><textual class="po-textual">Whitaker</textual></surname></personname><personblurb class="po-container e26 e26"><para class="po-block e27 e27"><textual class="po-textual">Nigel Whitaker is Chief Architect of DeltaXML and has driven the development of their XML comparison and merge products, their APIs and products related to DITA and
          DocBook.</textual></para></personblurb><affiliation class="po-record e28 e28"><jobtitle class="po-field e29 e29"><textual class="po-textual">Chief Architect</textual></jobtitle><orgname class="po-block e30 e30"><textual class="po-textual">DeltaXML Ltd.</textual></orgname></affiliation><email class="po-field e31 e31"><textual class="po-textual">nigel.whitaker@deltaxml.com</textual></email></author><legalnotice class="po-container e32 e32"><para class="po-block e33 e33"><textual class="po-textual">Copyright © 2013 DeltaXML Ltd.</textual></para></legalnotice></info><section class="po-hcontainer e34 e34" xml:id="intro"><title class="po-block e35 e35"><textual class="po-textual">Introduction</textual></title><para class="po-block e36 e36"><textual class="po-textual">The ISO Standards Tags Set (ISOSTS) </textual><citation class="po-atom e37 e37" linkend="isosts"><textual class="po-textual">[isosts]</textual></citation><textual class="po-textual"> is a customization of NISO’s Journal Article Tag Suite (JATS) developed by Mulberry Technologies
        </textual><citation class="po-atom e38 e38" linkend="mulberry"><textual class="po-textual">[mulberry]</textual></citation><textual class="po-textual"> for the International Standards Organization for authoring standards documents. Documents authored in this format can then be
      converted into multiple publishing formats such as Adobe InDesign, PDF, HTML or EPUB, using a solution from Typefi called Typefi Publish </textual><citation class="po-atom e39 e39" linkend="typefi-publish"><textual class="po-textual">[typefi-publish]</textual></citation><textual class="po-textual">. As part of the authoring workflow used at ISO, there was a requirement to produce documents in these published formats that displayed changes between
      different versions of a standard using redlining. Redlining is a technique for marking changes in a document, typically using text styling to highlight deleted and/or added content.
      For example, all deleted text could be highlighted by colouring it red and striking through the text. Added content could be highlighted with an underline. It is also common practice
      to highlight only added content and mark the position of deleted content using a caret such as ‸ or ⁁.</textual></para><para class="po-block e40 e40"><textual class="po-textual">Typefi approached us and asked us to be involved in producing a proof of concept, building on top of their existing solution for ISO. Our expertise in XML comparison and change
      representation matches perfectly with Typefi’s expertise in content layout and document publishing to provide a solution to this new requirement for ISO. Our contribution included
      producing a tailored comparison of ISOSTS documents, ignoring certain types of change that were not important to ISO. The result from this is fed into Typefi Publish which handles the
      DeltaXML change representation format, DeltaV2, to produce the redlined final output. As an alternative, we also provided modifications to ISO XSLT stylesheets that convert ISOSTS into
      XHTML directly. These modifications used CSS to provide the redline change highlighting.</textual></para></section><section class="po-hcontainer e41 e41" xml:id="comparison"><title class="po-block e42 e42"><textual class="po-textual">Document Comparison Overview</textual></title><para class="po-block e43 e43"><textual class="po-textual">Comparison is a key component of any system that is dealing with documents that change during their lifetime. Understanding the differences between different versions of a document
      is absolutely vital and, in some industries, can even be a legal requirement. It is therefore important to understand the implications for document comparison when those documents are
      stored in an XML format such as ISOSTS.</textual></para><para class="po-block e44 e44"><textual class="po-textual">Because of the structure and syntax of XML, line based comparison tools can often produce incorrect comparison results. Line based tools are often unaware of XML syntax, and
      changes which can usually be ignored, such as indentation, namespace prefixes, and attribute ordering can lead to false notification of changes. Consider the following two XML
      documents and the line-based comparison provided by a UNIX diff.</textual></para><figure class="po-container e45 e45" xml:id="docA"><title class="po-block e46 e46"><textual class="po-textual">Document A</textual></title><programlisting class="po-block e47 e47" xml:space="preserve"><textual class="po-textual">&lt;document xmlns="demo-namespace"&gt;
  &lt;title&gt;This is the document title&lt;/title&gt;
  &lt;p&gt;An example paragraph&lt;/p&gt;
  &lt;p&gt;Lack of namespace awareness makes line based diff ineffective&lt;/p&gt;
&lt;/document&gt;</textual></programlisting></figure><figure class="po-container e48 e48" xml:id="docB"><title class="po-block e49 e49"><textual class="po-textual">Document B</textual></title><programlisting class="po-block e50 e50" xml:space="preserve"><textual class="po-textual">&lt;demo:document xmlns:demo="demo-namespace"&gt;
  &lt;demo:title&gt;This is the document title&lt;/demo:title&gt;
  &lt;demo:p&gt;An example paragraph&lt;/demo:p&gt;
  &lt;demo:p&gt;Lack of namespace awareness makes line-based diff ineffective&lt;/demo:p&gt;
&lt;/demo:document&gt;</textual></programlisting></figure><figure class="po-container e51 e51"><title class="po-block e52 e52"><textual class="po-textual">Result of comparing </textual><xref class="po-milestone e53 e53" linkend="docA"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and </textual><xref class="po-milestone e54 e54" linkend="docB"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> with UNIX diff</textual></title><programlisting class="po-block e55 e55" xml:space="preserve"><textual class="po-textual">1,5c1,5
&lt; &lt;document xmlns="demo-namespace"&gt;
&lt;   &lt;title&gt;This is the document title&lt;/title&gt;
&lt;   &lt;p&gt;An example paragraph&lt;/p&gt;
&lt;   &lt;p&gt;Lack of namespace awareness makes line based diff ineffective&lt;/p&gt;
&lt; &lt;/document&gt;
---
&gt; &lt;demo:document xmlns:demo="demo-namespace"&gt;
&gt;   &lt;demo:title&gt;This is the document title&lt;/demo:title&gt;
&gt;   &lt;demo:p&gt;An example paragraph&lt;/demo:p&gt;
&gt;   &lt;demo:p&gt;Lack of namespace awareness makes line-based diff ineffective&lt;/demo:p&gt;
&gt; &lt;/demo:document&gt;</textual></programlisting></figure><para class="po-block e56 e56"><textual class="po-textual">The result of this particular line based comparison gives no advantage over visually inspecting the two documents to detect the differences. The tool’s lack of understanding of XML
      syntax means that it detects far too much difference in the two documents. </textual></para><para class="po-block e57 e57"><textual class="po-textual">It is possible to improve the results of a line based comparison by canonicalizing the documents to be compared to ensure consistent use of namespace prefixes, defined attribute
      ordering, and consistent indentation. This will go some way to reducing the amount of false differences identified by line based tools but there are still limitations with what can be
      achieved. Change identification at the word level is potentially still problematic and if the documents reference a DTD for example, correct parsing of the documents is necessary for a
      comprehensive comparison since parsing may actually affect the content of the document itself (this is covered in more detail in </textual><xref class="po-milestone e58 e58" linkend="infoset-aug"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).</textual></para><para class="po-block e59 e59"><textual class="po-textual">An XML aware tool has the advantage of being able to parse the document, taking into account any references to external content (e.g. DTDs, XIncludes) where necessary. As well as
      parsing, it is then a simple task to add pre-processing of documents using various XSLT steps to perform tasks such as segmenting sentences into individual words. If we use an XML
      aware tool such as DeltaXML Core to compare the two documents, we get a result more like that shown in </textual><xref class="po-milestone e60 e60" linkend="deltaxml-result"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. This is an HTML rendering of the underlying
      result format produced by DeltaXML Core.</textual></para><figure class="po-container e61 e61" xml:id="deltaxml-result"><title class="po-block e62 e62"><textual class="po-textual">Result of comparing </textual><xref class="po-milestone e63 e63" linkend="docA"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and </textual><xref class="po-milestone e64 e64" linkend="docB"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> with DeltaXML Core</textual></title><mediaobject class="po-container e65 e65"><imageobject class="po-container e66 e66"><imagedata class="po-meta e67 e67" fileref="../../../vol10/graphics/Mitchell01/Mitchell01-001.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><section class="po-hcontainer e68 e68" xml:id="change-representation"><title class="po-block e69 e69"><textual class="po-textual">Change representation</textual></title><para class="po-block e70 e70"><textual class="po-textual">Identifying change to XML documents is just the first part of a solution. Once these changes have been discovered, there needs to be a way of representing those changes. This
        does not necessarily need to be in a result document; in some use cases it may be appropriate to produce a report on the changes that have been made. However, in the context of
        producing redline documents, it will be necessary to represent the changes within the context of the documents themselves. In the case of ISOSTS, this marked document is an
        intermediate result file which can subsequently be rendered either as a redlined PDF, using Typefi Publish, or as a redlined XHTML document, using the XSLT stylesheet extension
        mentioned in </textual><xref class="po-milestone e71 e71" linkend="html-output"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><para class="po-block e72 e72"><textual class="po-textual">There are several options for representing change within the document context, each of which has its own benefits and drawbacks.</textual></para><section class="po-hcontainer e73 e73" xml:id="track-changes"><title class="po-block e74 e74"><textual class="po-textual">Tracked Changes</textual></title><para class="po-block e75 e75"><textual class="po-textual">Although tracked change representations are usually intended to be generated during live editing of a document, it is perfectly possible to generate the relevant syntax from
          changes identified during a comparison. The actual syntax varies depending on the consuming application but many editors use processing instructions to mark changes.</textual></para><para class="po-block e76 e76"><textual class="po-textual">The advantage of processing instructions as a representation is that they do not break the validity of the content they are tracking and they do not require modification to a
          format to enable tracking of change. A major disadvantage is that there is no standard syntax defined; each editor typically uses its own syntax to represent change. This means
          that, if visualisation of changes is required in multiple editors, changes identified will need to be converted into multiple result formats. There is also the chance that it is
          not possible to represent specific types of change, e.g. attribute changes, using the syntax provided by a specific editor.</textual></para><para class="po-block e77 e77"><textual class="po-textual">This type of change representation was not appropriate in the ISO solution as the final document needed to be a published document that was not viewed in an editing
          application. In order for changes to be displayed in hard copies of a document, they needed to be represented by styling of the text and, while it is technically possible to
          convert these processing instructions into styling as part of a publishing process, other representations were deemed more suitable. </textual></para></section><section class="po-hcontainer e78 e78" xml:id="format-syntax"><title class="po-block e79 e79"><textual class="po-textual">Format-specific syntax</textual></title><para class="po-block e80 e80"><textual class="po-textual">Some document formats, e.g. DocBook, DITA, and OpenDocument, define elements and/or attributes specifically for marking changes. DocBook, for example, includes a
            </textual><code class="po-atom e81 e81"><textual class="po-textual">revisionflag</textual></code><textual class="po-textual"> attribute on most elements that can take the values </textual><code class="po-atom e82 e82"><textual class="po-textual">changed</textual></code><textual class="po-textual">, </textual><code class="po-atom e83 e83"><textual class="po-textual">added</textual></code><textual class="po-textual">, </textual><code class="po-atom e84 e84"><textual class="po-textual">deleted</textual></code><textual class="po-textual">, and </textual><code class="po-atom e85 e85"><textual class="po-textual">off</textual></code><textual class="po-textual">. DITA includes
          a CDATA </textual><code class="po-atom e86 e86"><textual class="po-textual">rev</textual></code><textual class="po-textual"> attribute and a </textual><code class="po-atom e87 e87"><textual class="po-textual">status</textual></code><textual class="po-textual"> attribute that can take the values </textual><code class="po-atom e88 e88"><textual class="po-textual">changed</textual></code><textual class="po-textual">, </textual><code class="po-atom e89 e89"><textual class="po-textual">new</textual></code><textual class="po-textual">, </textual><code class="po-atom e90 e90"><textual class="po-textual">deleted</textual></code><textual class="po-textual">, and
            </textual><code class="po-atom e91 e91"><textual class="po-textual">unchanged</textual></code><textual class="po-textual">. These attributes can be used to represent change, and the relevant tools for publishing documents to formats such as HTML and PDF can use them to add
          styling for change highlighting.</textual></para><para class="po-block e92 e92"><textual class="po-textual">The advantage of using this type of syntax is that it is built directly into the language specification. This means that there is often support for making use of such syntax in
          existing publishing tools. Again, one disadvantage is that the syntax may not be valid on every element that has been changed. In DocBook and DITA, it is not possible to mark
          attribute changes using the aforementioned syntax. </textual></para><para class="po-block e93 e93"><textual class="po-textual">Of course, not all documentation formats include such syntax in their specification and in this case, we must either amend the specification where possible, or use another
          approach. This was the case for ISOSTS but as we were not able to edit the specification we opted to use our own generic change representation.</textual></para></section><section class="po-hcontainer e94 e94" xml:id="generic"><title class="po-block e95 e95"><textual class="po-textual">Generic change representation</textual></title><para class="po-block e96 e96"><textual class="po-textual">Both options listed above are specific to particular formats or editors and, while they are useful ways of representing change, they do require the use of specific tools or
          languages. A generic way of representing change in XML is a more preferable solution as it can be applied to any XML format, whether change marking is specified in the language or
          not and, with appropriate support, could be visualised in any editor.</textual></para><para class="po-block e97 e97"><textual class="po-textual">A generic solution should be able to represent change to any part of an XML document including addition/deletion/modification of attributes, and addition/deletion of elements
          and text. Ideally, it should not cause the XML document to be invalid and it should be simple to process the document to obtain the ‘latest’ version. To ensure consistency across
          different document formats and editors, such a solution lends itself well to becoming a standard and the W3C has created a Change Tracking Markup Community Group </textual><citation class="po-atom e98 e98" linkend="w3c-change"><textual class="po-textual">[w3c-change]</textual></citation><textual class="po-textual"> in order to discuss ideas that could potentially lead to a standard.</textual></para><para class="po-block e99 e99"><textual class="po-textual">In the meantime, we continue to use our own generic markup format, DeltaV2 </textual><citation class="po-atom e100 e100" linkend="deltav2"><textual class="po-textual">[deltav2]</textual></citation><textual class="po-textual">, to represent changes to XML documents. This markup
          uses elements and attributes in a separate namespace to show the input documents in which each element occurred. In the case where an element occurs in both documents, attributes
          are used to show whether there have been modifications. It is possible to represent attribute changes by converting an element’s changed attributes into an XML subtree containing
          the relevant information. Text changes are also represented by wrapping different versions of text strings inside elements. An example result representing the changes between the
          documents defined above (</textual><xref class="po-milestone e101 e101" linkend="docA"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and </textual><xref class="po-milestone e102 e102" linkend="docB"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) is shown below.</textual></para><figure class="po-container e103 e103"><title class="po-block e104 e104"><textual class="po-textual">DeltaV2 Result</textual></title><programlisting class="po-block e105 e105" xml:space="preserve"><textual class="po-textual">&lt;document xmlns:deltaxml="http://www.deltaxml.com/ns/well-formed-delta-v1"
          </textual><emphasis class="po-inline e106 e106" role="bold"><textual class="po-textual">deltaxml:deltaV2="A!=B"</textual></emphasis><textual class="po-textual"> deltaxml:version="2.0" deltaxml:content-type="full-context"&gt;
  &lt;title </textual><emphasis class="po-inline e107 e107" role="bold"><textual class="po-textual">deltaxml:deltaV2="A=B"</textual></emphasis><textual class="po-textual">&gt;This is the document title&lt;/title&gt;
  &lt;p </textual><emphasis class="po-inline e108 e108" role="bold"><textual class="po-textual">deltaxml:deltaV2="A=B"</textual></emphasis><textual class="po-textual">&gt;An example paragraph&lt;/p&gt;
  &lt;p </textual><emphasis class="po-inline e109 e109" role="bold"><textual class="po-textual">deltaxml:deltaV2="A!=B"</textual></emphasis><textual class="po-textual">&gt;Lack of namespace awareness makes line
  </textual><emphasis class="po-inline e110 e110" role="bold"><textual class="po-textual">&lt;deltaxml:textGroup deltaxml:deltaV2="A!=B"&gt;
    &lt;deltaxml:text deltaxml:deltaV2="A"&gt; &lt;/deltaxml:text&gt;
    &lt;deltaxml:text deltaxml:deltaV2="B"&gt;-&lt;/deltaxml:text&gt;
  &lt;/deltaxml:textGroup&gt;</textual></emphasis><textual class="po-textual">
  based diff ineffective&lt;/p&gt;
&lt;/document&gt;</textual></programlisting></figure></section></section></section><section class="po-hcontainer e111 e111" xml:id="dtd-use"><title class="po-block e112 e112"><textual class="po-textual">Making use of DTDs and schema</textual></title><para class="po-block e113 e113"><textual class="po-textual">We encountered issues with some of the ISO documents we tested as the use of DOCTYPE instructions was not consistent. For a given pair of documents, for example, one included a
      DOCTYPE instruction but the other did not. This led to issues, particularly with infoset augmentation, described below. The ISOSTS standard does not explicitly state the intended use
      of the DTD and whether it should be included in instance files in a DOCTYPE instruction. This could lead to different behaviour for documents provided by different implementers. Many
      specifications, for example the XHTML specification </textual><citation class="po-atom e114 e114" linkend="xhtml-spec"><textual class="po-textual">[xhtml-spec]</textual></citation><textual class="po-textual">, explicitly state that a conforming document MUST include a DOCTYPE
      instruction.</textual></para><para class="po-block e115 e115"><textual class="po-textual">While many XML authors will understand that a DOCTYPE instruction has “something to do with validating” the XML they are writing, they will not always be clear about the full
      implications of this instruction. While it is true that a DTD provides validation of the document being authored, it also has implications on the meaning of whitespace in a document
      and on the appearance and/or value of certain attributes.</textual></para><section class="po-hcontainer e116 e116" xml:id="whitespace"><title class="po-block e117 e117"><textual class="po-textual">Whitespace</textual></title><para class="po-block e118 e118"><textual class="po-textual">Prior to comparison, it is recommended practice to ‘normalize’ whitespace within the input documents. This is because differences in whitespace are not usually significant to
        authors and in fact cannot always be represented once a document has been rendered in a publishing format. Whitespace normalization, in its simplest sense, converts each whitespace
        sequence into a single space character. This means that all indentation and occurrences of multiple contiguous spaces are removed, being replaced by a single space. More typically
        though, normalization also involves the complete removal of </textual><emphasis class="po-inline e119 e119" role="ital"><textual class="po-textual">inter-element whitespace</textual></emphasis><textual class="po-textual">. This is whitespace that is used purely for indentation and
        readability and has no textual meaning at all. A simplistic approach to normalizing this kind of whitespace is to remove all PCDATA nodes that contain only whitespace characters.
        This leads to problems in mixed content, as can be seen in the example below.</textual></para><figure class="po-container e120 e120"><programlisting class="po-block e121 e121" xml:space="preserve"><textual class="po-textual">&lt;document&gt;•
••&lt;p&gt;This◦text◦contains◦&lt;b&gt;bold◦and&lt;/b&gt;*&lt;i&gt;italic&lt;/i&gt;◦text&lt;/p&gt;•
&lt;/document&gt;</textual></programlisting></figure><para class="po-block e122 e122"><textual class="po-textual">The example includes three types of whitespace nodes: inter-element whitespace within a PCDATA node that contains only whitespace (marked with a •) that can safely be removed
        entirely, whitespace within a PCDATA node that also contains non-whitespace characters (marked with a ◦) that can be normalized to a single space character but should not be removed,
        and whitespace within a PCDATA node that contains purely whitespace (marked with a *) that should NOT be removed. The difference between the whitespace marked * and that marked • is
        not obvious when subsequently processing the XML but the use of a DOCTYPE instruction will cause the different types of whitespace to be reported differently by an XML parser.</textual></para><para class="po-block e123 e123"><textual class="po-textual">Consider a possible DTD for this document, shown below.</textual></para><figure class="po-container e124 e124"><programlisting class="po-block e125 e125" xml:space="preserve"><textual class="po-textual">&lt;!ELEMENT document  (p)* &gt;
&lt;!ELEMENT p         (#PCDATA | b | i)* &gt;
&lt;!ELEMENT b         (#PCDATA) &gt;
&lt;!ELEMENT i         (#PCDATA) &gt;</textual></programlisting></figure><para class="po-block e126 e126"><textual class="po-textual">With the inclusion of this DTD, the parser can now differentiate between the different types of whitespace. Whitespace marked in the previous example as • can now be reported as
          </textual><emphasis class="po-inline e127 e127" role="ital"><textual class="po-textual">ignorable whitespace</textual></emphasis><textual class="po-textual"> as the DTD states that no PCDATA can be present as a child of the </textual><code class="po-atom e128 e128"><textual class="po-textual">document</textual></code><textual class="po-textual"> element. All other whitespace is
        reported using the </textual><emphasis class="po-inline e129 e129" role="ital"><textual class="po-textual">characters</textual></emphasis><textual class="po-textual"> event and should be treated as ‘normal’ PCDATA. It could still be normalized to a single space character but should not
        be removed entirely.</textual></para></section><section class="po-hcontainer e130 e130" xml:id="infoset-aug"><title class="po-block e131 e131"><textual class="po-textual">Infoset Augmentation</textual></title><para class="po-block e132 e132"><textual class="po-textual">Another important implication of DTD or schema use is infoset augmentation. Infoset augmentation means adding data from the DTD or schema to the resulting parsed representation.
        It is often used to specify values of attributes, for example that a table by default will have a 1 pixel border.</textual></para><para class="po-block e133 e133"><textual class="po-textual">If DOCTYPE instructions are not used consistently in documents to be compared, it is quite possible that one of the inputs will undergo infoset augmentation while the other one
        does not. This causes misleading comparison results to appear because attributes that were added during parsing in one document but not in the other appear as added or deleted in the
        result. Such problems can be avoided by consistent use of DOCTYPE instructions.</textual></para></section></section><section class="po-hcontainer e134 e134" xml:id="tables"><title class="po-block e135 e135"><textual class="po-textual">Table Comparison</textual></title><para class="po-block e136 e136"><textual class="po-textual">The ISOSTS specification uses the XHTML table model to define how tables are declared. While not as complex as the CALS table model, there are still significant issues with this
      model if tables are compared as ‘plain’ XML, without knowledge of the table structure. One example of this is adding row spanning to a cell.</textual></para><figure class="po-container e137 e137"><title class="po-block e138 e138"><textual class="po-textual">Original Table</textual></title><programlisting class="po-block e139 e139" xml:space="preserve"><textual class="po-textual">&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;td&gt;Cell 1&lt;/td&gt;&lt;td&gt;Cell 2&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Cell 3&lt;/td&gt;&lt;td&gt;Cell 4&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Cell 5&lt;/td&gt;&lt;td&gt;Cell 6&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</textual></programlisting><table border="1" class="po-container e140 e140"><caption class="po-container e141 e141"><para class="po-block e142 e142"><textual class="po-textual">Original Table, rendered</textual></para></caption><tbody class="po-table e143 e143"><tr class="po-table e144 e144"><td class="po-block e145 e145"><textual class="po-textual">Cell 1</textual></td><td class="po-block e146 e146"><textual class="po-textual">Cell 2</textual></td></tr><tr class="po-table e147 e147"><td class="po-block e148 e148"><textual class="po-textual">Cell 3</textual></td><td class="po-block e149 e149"><textual class="po-textual">Cell 4</textual></td></tr><tr class="po-table e150 e150"><td class="po-block e151 e151"><textual class="po-textual">Cell 5</textual></td><td class="po-block e152 e152"><textual class="po-textual">Cell 6</textual></td></tr></tbody></table></figure><figure class="po-container e153 e153"><title class="po-block e154 e154"><textual class="po-textual">Modified Table</textual></title><programlisting class="po-block e155 e155" xml:space="preserve"><textual class="po-textual">&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;td rowspan="2"&gt;Cell 1&lt;/td&gt;&lt;td&gt;Cell 2&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Cell 4&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Cell 5&lt;/td&gt;&lt;td&gt;Cell 6&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</textual></programlisting><table border="1" class="po-container e156 e156"><caption class="po-container e157 e157"><para class="po-block e158 e158"><textual class="po-textual">Modified Table, rendered</textual></para></caption><tbody class="po-table e159 e159"><tr class="po-table e160 e160"><td class="po-block e161 e161" rowspan="2"><textual class="po-textual">Cell 1</textual></td><td class="po-block e162 e162"><textual class="po-textual">Cell 2</textual></td></tr><tr class="po-table e163 e163"><td class="po-block e164 e164"><textual class="po-textual">Cell 4</textual></td></tr><tr class="po-table e165 e165"><td class="po-block e166 e166"><textual class="po-textual">Cell 5</textual></td><td class="po-block e167 e167"><textual class="po-textual">Cell 6</textual></td></tr></tbody></table></figure><figure class="po-container e168 e168"><title class="po-block e169 e169"><textual class="po-textual">Table Comparison Result</textual></title><programlisting class="po-block e170 e170" xml:space="preserve"><textual class="po-textual">&lt;table deltaxml:deltaV2="A!=B" ...&gt;
  &lt;tbody deltaxml:deltaV2="A!=B"&gt;
    &lt;tr deltaxml:deltaV2="A!=B"&gt;
      &lt;td deltaxml:deltaV2="A!=B"&gt;
        &lt;deltaxml:attributes deltaxml:deltaV2="B"&gt;
          &lt;dxa:rowspan deltaxml:deltaV2="B"&gt;
            &lt;deltaxml:attributeValue deltaxml:deltaV2="B"&gt;2&lt;/deltaxml:attributeValue&gt;
          &lt;/dxa:rowspan&gt;
        &lt;/deltaxml:attributes&gt;
        Cell 1
      &lt;/td&gt;
      &lt;td deltaxml:deltaV2="A=B"&gt;Cell 2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr deltaxml:deltaV2="A!=B"&gt;
      &lt;td deltaxml:deltaV2="A"&gt;Cell 3&lt;/td&gt;
      &lt;td deltaxml:deltaV2="A=B"&gt;Cell 4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr deltaxml:deltaV2="A=B"&gt;
      &lt;td&gt;Cell 5&lt;/td&gt;
      &lt;td&gt;Cell 6&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</textual></programlisting><table border="1" class="po-container e171 e171"><caption class="po-container e172 e172"><para class="po-block e173 e173"><textual class="po-textual">Rendered result table, using </textual><emphasis class="po-inline e174 e174" role="bital"><textual class="po-textual">bold italics</textual></emphasis><textual class="po-textual"> to show deletion</textual></para></caption><tbody class="po-table e175 e175"><tr class="po-table e176 e176"><td class="po-block e177 e177" rowspan="2"><textual class="po-textual">Cell 1</textual></td><td class="po-block e178 e178"><textual class="po-textual">Cell 2</textual></td></tr><tr class="po-table e179 e179"><td class="po-block e180 e180"><emphasis class="po-inline e181 e181" role="bital"><textual class="po-textual">Cell 3</textual></emphasis></td><td class="po-block e182 e182"><textual class="po-textual">Cell 4</textual></td></tr><tr class="po-table e183 e183"><td class="po-block e184 e184"><textual class="po-textual">Cell 5</textual></td><td class="po-block e185 e185"><textual class="po-textual">Cell 6</textual></td></tr></tbody></table></figure><para class="po-block e186 e186"><textual class="po-textual">As can be seen, the resultant table does not render well as the second row now includes too many cells, thus pushing Cell 4 too far to the right. A better result would be to handle
      the change to row spanning by including the problematic rows from the original table, marked as deleted, followed by the matching rows from the modified table, marked as added. This
      can be seen in the example below.</textual></para><figure class="po-container e187 e187"><title class="po-block e188 e188"><textual class="po-textual">An improved table result</textual></title><programlisting class="po-block e189 e189" xml:space="preserve"><textual class="po-textual">&lt;table deltaxml:deltaV2="A!=B" ...&gt;
  &lt;tbody deltaxml:deltaV2="A!=B"&gt;
    &lt;tr deltaxml:deltaV2="A"&gt;
      &lt;td&gt;Cell 1&lt;/td&gt;
      &lt;td&gt;Cell 2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr deltaxml:deltaV2="A"&gt;
      &lt;td&gt;Cell 3&lt;/td&gt;
      &lt;td&gt;Cell 4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr deltaxml:deltaV2="B"&gt;
      &lt;td rowspan="2"&gt;Cell 1&lt;/td&gt;
      &lt;td&gt;Cell 2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr deltaxml:deltaV2="B"&gt;
      &lt;td&gt;Cell 4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr deltaxml:deltaV2="A=B"&gt;
      &lt;td&gt;Cell 5&lt;/td&gt;
      &lt;td&gt;Cell 6&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</textual></programlisting><table border="1" class="po-container e190 e190"><caption class="po-container e191 e191"><para class="po-block e192 e192"><textual class="po-textual">Rendered result table, using </textual><emphasis class="po-inline e193 e193" role="bital"><textual class="po-textual">bold italics</textual></emphasis><textual class="po-textual"> to show deletion and </textual><emphasis class="po-inline e194 e194" role="under"><textual class="po-textual">underline</textual></emphasis><textual class="po-textual"> to show addition</textual></para></caption><tbody class="po-table e195 e195"><tr class="po-table e196 e196"><td class="po-block e197 e197"><emphasis class="po-inline e198 e198" role="bital"><textual class="po-textual">Cell 1</textual></emphasis></td><td class="po-block e199 e199"><emphasis class="po-inline e200 e200" role="bital"><textual class="po-textual">Cell 2</textual></emphasis></td></tr><tr class="po-table e201 e201"><td class="po-block e202 e202"><emphasis class="po-inline e203 e203" role="bital"><textual class="po-textual">Cell 3</textual></emphasis></td><td class="po-block e204 e204"><emphasis class="po-inline e205 e205" role="bital"><textual class="po-textual">Cell 4</textual></emphasis></td></tr><tr class="po-table e206 e206"><td class="po-block e207 e207" rowspan="2"><emphasis class="po-inline e208 e208" role="under"><textual class="po-textual">Cell 1</textual></emphasis></td><td class="po-block e209 e209"><emphasis class="po-inline e210 e210" role="under"><textual class="po-textual">Cell 2</textual></emphasis></td></tr><tr class="po-table e211 e211"><td class="po-block e212 e212"><emphasis class="po-inline e213 e213" role="under"><textual class="po-textual">Cell 4</textual></emphasis></td></tr><tr class="po-table e214 e214"><td class="po-block e215 e215"><textual class="po-textual">Cell 5</textual></td><td class="po-block e216 e216"><textual class="po-textual">Cell 6</textual></td></tr></tbody></table></figure><para class="po-block e217 e217"><textual class="po-textual">This is one example of the way that tables are handled intelligently during the comparison phase. As mentioned above, the XHTML table model is simpler than the CALS table model
      leading to fewer potential issues during comparison, but there were still a number of problems that needed to be solved.</textual></para></section><section class="po-hcontainer e218 e218" xml:id="formatting"><title class="po-block e219 e219"><textual class="po-textual">Text formatting changes</textual></title><para class="po-block e220 e220"><textual class="po-textual">Changing the format of specific pieces of text, e.g. highlighting a word by making it bold or italic, is common during text editing but should this constitute a change in a redline
      document? The answer will depend on the context of the change, whether the subject domain places meaning on such formatting, and whether or not there is a requirement to see these kind
      of changes in the redline document. In the case that it should be highlighted, there may be different ways of doing so. The document reviewer may wish to see the text with its old
      formatting marked as deleted and the text with its new formatting marked as added so that a complete view of the change is present. In other situations, it may be sufficient to mark
      the text with some other kind of highlighting to show that there has been a formatting change but not include details of how the formatting has changed.</textual></para><para class="po-block e221 e221"><textual class="po-textual">Many content authors may not even understand that there is an XML structure underlying their document and that a format change actually constitutes a structural change. Thus, when
      they make a word bold and the resultant comparison result shows the word deleted and then added again, they see this as a mistake.</textual></para><figure class="po-container e222 e222"><title class="po-block e223 e223"><textual class="po-textual">A result file showing a formatting change</textual></title><programlisting class="po-block e224 e224" xml:space="preserve"><textual class="po-textual">&lt;p deltaxml:deltaV2="A!=B" ... &gt;The addition of
  &lt;deltaxml:textGroup deltaxml:deltaV2="A"&gt;
    &lt;deltaxml:text deltaxml:deltaV2="A"&gt;bold&lt;/deltaxml:text&gt;
  &lt;/deltaxml:textGroup&gt;
  &lt;b deltaxml:deltaV2="B"&gt;bold&lt;/b&gt;
  formatting.
&lt;/p&gt;</textual></programlisting></figure><para class="po-block e225 e225"><textual class="po-textual">In order to have the ability of marking formatting changes in a different way, or in fact ignoring them completely, we need to have some way of detecting the structural change
      without having to mark the underlying text as changed as well. One technique we have utilised for this is to pre-process the documents to flatten the structure of formatting elements.
      The following example shows a document with a bold word that has had its formatting flattened.</textual></para><figure class="po-container e226 e226"><title class="po-block e227 e227"><textual class="po-textual">A pre-processed input with flattened formatting</textual></title><programlisting class="po-block e228 e228" xml:space="preserve"><textual class="po-textual">&lt;p xmlns:deltaxml="..."&gt;
  The addition of 
  &lt;deltaxml:format-start&gt;
    &lt;deltaxml:element&gt;&lt;b/&gt;&lt;/deltaxml:element&gt;
  &lt;/deltaxml:format-start&gt;
  bold
  &lt;deltaxml:format-end/&gt;
  formatting.
&lt;/p&gt;</textual></programlisting></figure><para class="po-block e229 e229"><textual class="po-textual">This flattened structure can handle formatting elements that are a simple tag, e.g. </textual><code class="po-atom e230 e230"><textual class="po-textual">&lt;b/&gt;</textual></code><textual class="po-textual"> or </textual><code class="po-atom e231 e231"><textual class="po-textual">&lt;i/&gt;</textual></code><textual class="po-textual"> and also more complex formatting such as
        </textual><code class="po-atom e232 e232"><textual class="po-textual">&lt;span style="font-size:14; font-weight:bold;"/&gt;</textual></code><textual class="po-textual">. Processing the input documents in this way then allows the text to be compared more intuitively, as it is all at the
      same level in the XML structure. Format changes are detected as changes to the </textual><code class="po-atom e233 e233"><textual class="po-textual">&lt;deltaxml:format-start/&gt;</textual></code><textual class="po-textual"> and </textual><code class="po-atom e234 e234"><textual class="po-textual">&lt;deltaxml:format-end/&gt;</textual></code><textual class="po-textual"> elements and the
      structured formatting can be reconstructed after comparison. There is the potential for overlapping structures in the result when formatting is flattened; to solve this problem, the
      formatting from one of the input documents, typically the latest or ‘B’ document, is given priority when reconstructing.</textual></para><para class="po-block e235 e235"><textual class="po-textual">ISO’s requirement was to ignore formatting changes completely and, for content that was in both input documents, to include the formatting from the latest or ‘B’ document. This
      makes reconstructing the formatting elements a lot simpler because in the case where formatting has changed it is possible to ignore all of the elements marked as being only in
      document ‘A’.</textual></para></section><section class="po-hcontainer e236 e236" xml:id="ids"><title class="po-block e237 e237"><textual class="po-textual">ID and IDREF attributes</textual></title><para class="po-block e238 e238"><textual class="po-textual">ID attributes and their associated IDREFs are typically used for internal cross-referencing in documents. It is important that the target of a cross-reference is declared as an
      attribute having type ID in order to ensure uniqueness within the document. Unfortunately, this uniqueness constraint can cause problems in the result file, which must be overcome.
      Imagine the situation where an image, e.g. an </textual><code class="po-atom e239 e239"><textual class="po-textual">&lt;img/&gt;</textual></code><textual class="po-textual"> element, is used to display a diagram and defines an ID, e.g. </textual><code class="po-atom e240 e240"><textual class="po-textual">&lt;img xml:id="widget"/&gt;</textual></code><textual class="po-textual">. An editor of
      the document decides that this should have been defined using a figure element but, to avoid having to update references to the diagram, uses the same id: </textual><code class="po-atom e241 e241"><textual class="po-textual">&lt;fig
        xml:id="widget"/&gt;</textual></code><textual class="po-textual">. This is all perfectly valid because each document maintains uniqueness of its IDs. However, the comparison result file will contain the following content
      because of the requirement to view both added and deleted content in the same document.</textual></para><figure class="po-container e242 e242"><programlisting class="po-block e243 e243" xml:space="preserve"><textual class="po-textual">...
&lt;img deltaxml:deltaV2="A" xml:id="widget" /&gt;
&lt;fig deltaxml:deltaV2="B" xml:id="widget" /&gt;
...</textual></programlisting></figure><para class="po-block e244 e244"><textual class="po-textual">The document now contains two elements with the same ID value, which makes it invalid. This situation can be resolved by renaming the IDs on any deleted, or ‘A’ document elements
      and also updating any references to that element (these will be elements in the ‘A’ document only, that contain an IDREF whose value is the ID in question). The following figure shows
      an example of a fixed result file.</textual></para><figure class="po-container e245 e245"><title class="po-block e246 e246"><textual class="po-textual">An example fixed result file</textual></title><programlisting class="po-block e247 e247" xml:space="preserve"><textual class="po-textual">&lt;document deltaxml:deltaV2="A!=B" ... &gt;
  &lt;img deltaxml:deltaV2="A" xml:id="widget_deleted_1" /&gt;
  &lt;fig deltaxml:deltaV2="B" xml:id="widget" /&gt;
  &lt;p deltaxml:deltaV2="A"&gt;This reference to the img will be deleted &lt;xref linkend="widget_deleted_1" /&gt;&lt;/p&gt;
  &lt;p deltaxml:deltaV2="A=B"&gt;This reference will be kept in the new document &lt;xref linkend="widget" /&gt;&lt;/p&gt;
&lt;/document&gt;</textual></programlisting></figure><para class="po-block e248 e248"><textual class="po-textual">This document is now valid in respect of its ID uniqueness. The deleted first paragraph contains a reference to the old diagram as that is what it was referencing. The remaining
      second paragraph now points to the new version of the diagram. The naming scheme for updating deleted ID attributes can ensure uniqueness by using a number suffix that does not exist
      in the document. This can be checked against all existing IDs in the document.</textual></para><para class="po-block e249 e249"><textual class="po-textual">Another potential use of ID values is to use them during comparison to align elements of the same type with matching IDs. This can improve comparison results, particularly for
      documents that include repeated sentences and phrases as can be typical in legal documents for example. For this technique to work, an element must maintain its ID value across
      different versions of the document so that its identity is consistent. Many XML documents are auto-generated from some other format and part of this process will involve the generation
      of ID values. If these are randomly generated, they will not be suitable for this use as equivalent elements in different versions of a document will not have the same ID. Even if they
      are not random and use a naming scheme, e.g. fig1, fig2, fig3 etc., removal of an element in this sequence could have a ripple effect on the ID values for all subsequent elements,
      again making them unsuitable for use during comparison. This was the case for the ISO documents and the ripple effect of ID values changing caused a large amount of change to ID
      attributes that had to be handled using the technique above.</textual></para></section><section class="po-hcontainer e250 e250" xml:id="pis"><title class="po-block e251 e251"><textual class="po-textual">Processing Instructions</textual></title><para class="po-block e252 e252"><textual class="po-textual">Processing instructions are used to supply a consuming application with information. One thing they are increasingly used for is to insert data and/or content into a document
      format that does not allow for that content in its model. This is a way of providing a customized extension to a document format but is often used as a quick fix when a more
      appropriate solution would be to add the required functionality to the language specification. An example of this is the use of a processing instruction to specify the size at which a
      table should be rendered on a page. In the ISOSTS documents we tested, we saw the use of processing instructions to specify an external image location that </textual><emphasis class="po-inline e253 e253" role="ital"><textual class="po-textual">could</textual></emphasis><textual class="po-textual"> have been included as an attribute, e.g. </textual><code class="po-atom e254 e254"><textual class="po-textual">&lt;img&gt;&lt;?img-id D09291AZ.PNG?&gt;&lt;/img&gt;</textual></code><textual class="po-textual"> instead of </textual><code class="po-atom e255 e255"><textual class="po-textual">&lt;img href="D09291Az.PNG"/&gt;</textual></code><textual class="po-textual">.</textual></para><para class="po-block e256 e256"><textual class="po-textual">One of the problems this causes is that if you compare documents containing such processing instructions and you want the result file to include the processing instructions, there
      is no sensible way of representing change to them as they are not XML elements. It is possible to preserve processing instructions, and even detect change in them by first converting
      them into an XML structure, comparing documents, and then converting the XML structure back into processing instructions. A potential solution to representing change is to duplicate
      the containing element whenever a change is detected in a processing instruction. For example, and </textual><code class="po-atom e257 e257"><textual class="po-textual">&lt;img/&gt;</textual></code><textual class="po-textual"> containing a processing instruction as above with a change to
      the external location of that image could be represented as an image deletion and addition e.g. </textual><figure class="po-container e258 e258"><programlisting class="po-block e259 e259" xml:space="preserve"><textual class="po-textual">...
  &lt;img deltaxml:deltaV2="A"&gt;&lt;?img-id old-image.png?&gt;&lt;/img&gt;
  &lt;img deltaxml:deltaV2="B"&gt;&lt;?img-id new-image.png?&gt;&lt;/img&gt;
...</textual></programlisting></figure></para><para class="po-block e260 e260"><textual class="po-textual">This solution is not as good as being able to represent change to an </textual><code class="po-atom e261 e261"><textual class="po-textual">href</textual></code><textual class="po-textual"> attribute as it is not as easily processed but it provides a reasonable result. This can,
      however, be problematic if the element containing the processing instruction is very large, e.g. a table containing a processing instruction that gives information on how it should be
      rendered. Including two versions of the whole table in order to represent the processing instruction change does not give a sensible result.</textual></para></section><section class="po-hcontainer e262 e262" xml:id="word-case"><title class="po-block e263 e263"><textual class="po-textual">Word Capitalization</textual></title><para class="po-block e264 e264"><textual class="po-textual">Word capitalization, like formatting change, is often viewed as an insignificant change that should not be highlighted in a redline document. This was indeed the case with ISO’s
      requirements. Like formatting, the result document needed to include the version of the text that was in the latest, or ‘B’ document.</textual></para><para class="po-block e265 e265"><textual class="po-textual">A potential solution to this problem is to pre-process the input documents to ensure that all text uses only lower case. For documents whose text is mainly prose, this is not
      appropriate as upper case letters are an important feature of the text and should be preserved during comparison. Because pre-processing the inputs in this way does not make sense for
      the ISOSTS documents, the solution was to post-process the result file to detect those text changes where the only difference between the two versions was letter case. The following
      figure gives an example of the kind of change that can be detected.</textual></para><figure class="po-container e266 e266"><title class="po-block e267 e267"><textual class="po-textual">An example of a text change involving capitalization</textual></title><programlisting class="po-block e268 e268" xml:space="preserve"><textual class="po-textual">&lt;p deltaxml:deltaV2="A!=B" ... &gt;
  Word capitalization is often seen as an
  &lt;deltaxml:textGroup deltaxml:deltaV2="A!=B"&gt;
    &lt;deltaxml:text deltaxml:deltaV2="A"&gt;insignificant&lt;/deltaxml:text&gt;
    &lt;deltaxml:text deltaxml:deltaV2="B"&gt;Insignificant&lt;/deltaxml:text&gt;
  &lt;/deltaxml:textGroup&gt;
  change.
&lt;/p&gt;</textual></programlisting></figure><para class="po-block e269 e269"><textual class="po-textual">A text-based comparison of the ‘A’ and ‘B’ branches of the </textual><code class="po-atom e270 e270"><textual class="po-textual">&lt;deltaxml:textGroup/&gt;</textual></code><textual class="po-textual"> element after converting both strings to all lower-case, shows that there is no
      change. In this situation, we can remove the marked changes and include only the text from the ‘B’ document.</textual></para><para class="po-block e271 e271"><textual class="po-textual">This technique works well for the cases where a text change is purely a capitalization change. More complex changes that involve capitalization in conjunction with addition and/or
      deletion of surrounding words will still include the capitalization change in the final output. As the capitalization is part of a larger change which will need to be reviewed anyway,
      this is not likely to be a significant inconvenience.</textual></para></section><section class="po-hcontainer e272 e272" xml:id="html-output"><title class="po-block e273 e273"><textual class="po-textual">HTML change visualization</textual></title><para class="po-block e274 e274"><textual class="po-textual">As well as the ISOSTS specification, ISO provide XSLT stylesheets that convert an ISOSTS document into standalone XHTML.  These stylesheets provide a useful and simple way of
      producing a published version of standards documents for previewing during authoring. They can also be used to publish an online version of a standard.</textual></para><para class="po-block e275 e275"><textual class="po-textual">As well as providing the intermediate change representation for input into Typefi Publish, we were able to extend the XSLT stylesheets to provide some redline functionality in the
      XHTML output.  In the simplest cases, this involved first categorizing the elements in ISOSTS as either block-level or inline elements and then extending the output templates to wrap
      block-level elements in a </textual><code class="po-atom e276 e276"><textual class="po-textual">&lt;div/&gt;</textual></code><textual class="po-textual"> and inline elements in a </textual><code class="po-atom e277 e277"><textual class="po-textual">&lt;span/&gt;</textual></code><textual class="po-textual"> with these wrappers defining a </textual><code class="po-atom e278 e278"><textual class="po-textual">class</textual></code><textual class="po-textual"> attribute containing the value of
      the intermediate result’s </textual><code class="po-atom e279 e279"><textual class="po-textual">deltaV2</textual></code><textual class="po-textual"> attribute where it was ‘A’ or ‘B’. These classes were then styled using CSS to highlight deletions with a red background and additions
      with a green background.</textual></para><para class="po-block e280 e280"><textual class="po-textual">Other cases were more complicated and involved the overriding of whole processing templates in the original XSLT but the final result was a useful rendering of redlining in
      XHTML.</textual></para></section><section class="po-hcontainer e281 e281" xml:id="results"><title class="po-block e282 e282"><textual class="po-textual">Results</textual></title><para class="po-block e283 e283"><textual class="po-textual">The following figures show an excerpt from each of the different types of redline result that were produced. The PDF result was produced using the intermediate result delta,
      published through Typefi Publish and the HTML result was produced by transforming the intermediate delta file using our XSLT extension to the ISO stylesheets. Unfortunately, images
      were not available for the HTML output at the time of writing.</textual></para><figure class="po-container e284 e284"><title class="po-block e285 e285"><textual class="po-textual">A PDF rendering of the redline result</textual></title><mediaobject class="po-container e286 e286"><imageobject class="po-container e287 e287"><imagedata class="po-meta e288 e288" fileref="../../../vol10/graphics/Mitchell01/Mitchell01-002.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><figure class="po-container e289 e289"><title class="po-block e290 e290"><textual class="po-textual">An HTML rendering of the redline result</textual></title><mediaobject class="po-container e291 e291"><imageobject class="po-container e292 e292"><imagedata class="po-meta e293 e293" fileref="../../../vol10/graphics/Mitchell01/Mitchell01-003.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure></section><section class="po-hcontainer e294 e294" xml:id="summary"><title class="po-block e295 e295"><textual class="po-textual">Summary</textual></title><para class="po-block e296 e296"><textual class="po-textual">Document comparison is a key part of any workflow involving changing documents and, with more and more documents being stored as XML, it is important to provide tools that
      understand the XML structure and the implications that it has on comparison results. As we have demonstrated, there are many subtle areas to consider when looking at XML comparison and
      change representation and many of the problems we have encountered could have been made simpler by designing the document formats with comparison and change representation in mind.
      This case study shows that the problems arising during comparison of structured content are not insurmountable and those considering moving to an XML representation for their document
      storage should not be reluctant to do so based on any of issues seen here.</textual></para><para class="po-block e297 e297"><textual class="po-textual">Structured content offers huge benefits, not least of which is the processability of content to multiple published formats. This case study has shown that the production of an
      intermediate document containing change representation can be used to produce redline documents in both PDF and XHTML. This intermediate file can quite easily be further processed to
      select the types of change which should be highlighted and those which should be ignored. </textual></para><para class="po-block e298 e298"><textual class="po-textual">Coupling this technology with Typefi Publish, which provides the flexibility of multiple output formats and professional layout and design capabilities provided ISO with a
      comprehensive solution to their requirements for published redline documents.</textual></para></section><bibliography class="po-hcontainer e299 e299"><title class="po-block e300 e300"><textual class="po-textual">Bibliography</textual></title><bibliomixed class="po-block e301 e301" xml:id="deltav2"><textual class="po-textual">DeltaXML, “DeltaV2 Format”, </textual><link class="po-inline e302 e302" xlink:actuate="onRequest" xlink:href="http://www.deltaxml.com/support/documents/deltav2" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.deltaxml.com/support/documents/deltav2</textual></link><textual class="po-textual"> (accessed July 15 2013) </textual></bibliomixed><bibliomixed class="po-block e303 e303" xml:id="isosts"><textual class="po-textual">ISO, "ISO Standards Tag Set", </textual><link class="po-inline e304 e304" xlink:actuate="onRequest" xlink:href="http://www.iso.org/schema/isosts/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.iso.org/schema/isosts/</textual></link><textual class="po-textual"> (accessed July 15 2013)</textual></bibliomixed><bibliomixed class="po-block e305 e305" xml:id="mulberry"><textual class="po-textual">Mulberry Technologies, "Mulberry Technologies Inc", </textual><link class="po-inline e306 e306" xlink:actuate="onRequest" xlink:href="http://www.mulberrytech.com" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.mulberrytech.com</textual></link><textual class="po-textual"> (accessed July 15 2013)</textual></bibliomixed><bibliomixed class="po-block e307 e307" xml:id="typefi-publish"><textual class="po-textual">Typefi, "Typefi Publish", </textual><link class="po-inline e308 e308" xlink:actuate="onRequest" xlink:href="http://www.typefi.com/typefi-publish" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.typefi.com/typefi-publish</textual></link><textual class="po-textual"> (accessed July 15 2013)</textual></bibliomixed><bibliomixed class="po-block e309 e309" xml:id="w3c-change"><textual class="po-textual">W3C, “Change Tracking Markup Community Group”, </textual><link class="po-inline e310 e310" xlink:actuate="onRequest" xlink:href="http://www.w3.org/community/change/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/community/change/&gt;</textual></link><textual class="po-textual"> (accessed July 15 2013)</textual></bibliomixed><bibliomixed class="po-block e311 e311" xml:id="xhtml-spec"><textual class="po-textual">W3C, “XHTML 1.1 - Conformance Definition”, </textual><link class="po-inline e312 e312" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xhtml11/conformance.html#s_conform" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xhtml11/conformance.html#s_conform</textual></link><textual class="po-textual"> (accessed July 15 2013)</textual></bibliomixed></bibliography></article></classedDocument>