<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.3"><title class="po-block e1 e1"><textual class="po-textual">How to survive the coming namespace winter</textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">Balisage: The Markup Conference 2014</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 5 - 8, 2014</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual">Is XML condemned to be an orphaned syntax with a dimly lit future within the Web
            browser? What can information providers with rich sources of XML do, other than
            down-translate to HTML? The evolving Web Components environment may provide a solution!
            With some simple translations, stylesheets and scripts, it will be possible to wrap
            custom XML in a minimum amount of HTML and serve it over the Web. The browsers will
            never know they’re being tricked into delivering XML.</textual></para></abstract><author class="po-record e8 e8"><personname class="po-record e9 e9"><firstname class="po-field e10 e10"><textual class="po-textual">R. Alexander</textual></firstname><surname class="po-field e11 e11"><textual class="po-textual">Miłowski</textual></surname></personname><personblurb class="po-container e12 e12"><para class="po-block e13 e13"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></para></personblurb><affiliation class="po-record e14 e14"><orgname class="po-block e15 e15"><textual class="po-textual">University of Edinburgh, School of Informatics</textual></orgname></affiliation><email class="po-field e16 e16"><textual class="po-textual">alex@milowski.com</textual></email></author><author class="po-record e17 e17"><personname class="po-record e18 e18"><firstname class="po-field e19 e19"><textual class="po-textual">Norman</textual></firstname><surname class="po-field e20 e20"><textual class="po-textual">Walsh</textual></surname></personname><personblurb class="po-container e21 e21"><para class="po-block e22 e22"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></para></personblurb><affiliation class="po-record e23 e23"><orgname class="po-block e24 e24"><textual class="po-textual">MarkLogic Corporation</textual></orgname></affiliation><email class="po-field e25 e25"><textual class="po-textual">norman.walsh@marklogic.com</textual></email></author><legalnotice class="po-container e26 e26"><para class="po-block e27 e27"><textual class="po-textual">Copyright © 2014 R. Alexander Miłowski and Norman Walsh</textual></para></legalnotice></info><blockquote class="po-container e28 e28"><para class="po-block e29 e29"><textual class="po-textual">It was a late night, again, at XML Prague, and Norm Walsh,
         John Snelson, Charles Greer, and I were walking along attempting
         to find dinner. We had been discussing the Web Components
         session that had occurred earlier in the day. We expressed our
         dismay and depression that we couldn't just have XML. Then it
         occurred to us, like a light being turned on (or being
         whacked on the back of the head with a ruler), Web Components
         are just markup and pretty close to XML. All we needed to do was
         use a hypen rather than a colon, and all was well. It is a
         compromise and likely the best we will get anytime soon. We get
         to put our own pointy brackets into the browser and give it
         semantics—accept it and move on.</textual></para><attribution class="po-block e30 e30"><textual class="po-textual">Alex Miłowski recounting XML Prague 2014</textual></attribution></blockquote><section class="po-hcontainer e31 e31"><title class="po-block e32 e32"><textual class="po-textual">Forward from Failure</textual></title><para class="po-block e33 e33"><textual class="po-textual">A publisher that has a large amount of information in XML documents has little
         recourse in today's world but to transform this information into HTML for delivery on the
         Web or within EPUB ebooks. The ability for the common Web browser to load and process XML
         information, with similar processing semantics to HTML, isn't available; links will not be
         identified, styles and local transformations are fraught with problems, media will not be
         loaded or rendered, and scripts will not execute to provide extensible behaviors.</textual></para><para class="po-block e34 e34"><textual class="po-textual">At the 2009 Balisage Conference, in </textual><emphasis class="po-inline e35 e35" role="ital"><textual class="po-textual">XML in the Browser: the Next
            Decade</textual></emphasis><textual class="po-textual">
         </textual><citation class="po-atom e36 e36"><textual class="po-textual">balisage-2009</textual></citation><textual class="po-textual">, Miłowski enumerated the issues with delivering XML to
         the browser and many, if not all, of those issues remain unsolved in 2014. The various
         browser vendors have since all but abandoned processing XML except as a legacy format. In
         many ways, it only remains as a serialization format for HTML5 </textual><citation class="po-atom e37 e37"><textual class="po-textual">html5</textual></citation><textual class="po-textual">
         and as a mechanism for receiving data within a Web application.</textual></para><para class="po-block e38 e38"><textual class="po-textual">It was argued that there are intrinsic and non-intrinsic formats for the Web.  In terms
         of markup languages, HTML, SVG, and MathML were identified as the triad of intrinsic markup
         languages.  This assessment is somewhat validated by the integration of SVG and MathML into
         the HTML5 specification.</textual></para><para class="po-block e39 e39"><textual class="po-textual">This leaves generic XML as an orphaned syntax with dimly lit future within the Web
         browser. If the writings on the walls of various mailing lists are any indication, there is
         a strong desire for less or complete removal of the native XML processing that remains
         within the browser. While current applications and backlash have prevented such removal,
         the days of XML in the browser feel numbered.</textual></para><para class="po-block e40 e40"><textual class="po-textual">Meanwhile, XML has served a purpose for many information publishers. Tag sets, both
         custom and standardized, have been developed to encode enormous amounts of data. Within
         enterprises, processing pipelines that produce, validate, manipulate, and otherwise consume
         this data have had their benefits. It has become </textual><emphasis class="po-inline e41 e41"><textual class="po-textual">very normal</textual></emphasis><textual class="po-textual"> to
         transform these documents into the appropriate HTML markup for delivery to whatever
         consumer is on the other end of that HTTP connection.</textual></para><para class="po-block e42 e42"><textual class="po-textual">Yet, as Web developers and browser vendors seem to be moving away from custom markup,
         they seem to realize they are missing something.  Making the </textual><emphasis class="po-inline e43 e43" role="ital"><textual class="po-textual">Open Web
            Platform</textual></emphasis><textual class="po-textual"> extensible means that behaviors that need to accompany information
         need to packaged as reusable components.  That is, information needs to have markup that
         identifies it as a specific kind of information whose scripts, templates, and styling are
         identifiable and loadable over the Web.</textual></para></section><section class="po-hcontainer e44 e44"><title class="po-block e45 e45"><textual class="po-textual">Hyphens to the Rescue</textual></title><para class="po-block e46 e46"><textual class="po-textual">Once the desire for extensible markup, outside of the direct control of either the W3C
         or browser vendors, was recognized, the concept of custom elements was introduced and
         eventually formalized </textual><citation class="po-atom e47 e47"><textual class="po-textual">custom-elements</textual></citation><textual class="po-textual">. For HTML parsing purposes, the
         essential distinction is that a custom element's name contains a hyphen—not a colon. This
         allows custom element names to be distinguished from those within HTML itself and the only
         notable exceptions are the handful of element names in SVG and MathML that contain a
         hyphen.</textual></para><para class="po-block e48 e48"><textual class="po-textual">In common usage, custom elements of the same origin share a common
            </textual><emphasis class="po-inline e49 e49"><textual class="po-textual">prefix</textual></emphasis><textual class="po-textual"> followed by a hyphen (see </textual><xref class="po-milestone e50 e50" linkend="custom-ex"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">). That
         prefix currently has no registration or association with any URI. As such, it is unlike XML
         namespace prefixes which must be declared before being used.</textual></para><figure class="po-container e51 e51" xml:id="custom-ex"><title class="po-block e52 e52"><textual class="po-textual">Custom Element Example</textual></title><programlisting class="po-block e53 e53" xml:space="preserve"><textual class="po-textual">&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
  &lt;head&gt;...&lt;/head&gt;
  &lt;body&gt;
    </textual><emphasis class="po-inline e54 e54" role="bold"><textual class="po-textual">&lt;db-article version="5.0"&gt;</textual></emphasis><textual class="po-textual">
    </textual><emphasis class="po-inline e55 e55" role="bold"><textual class="po-textual">&lt;db-title&gt;</textual></emphasis><textual class="po-textual">Foreshadowing</textual><emphasis class="po-inline e56 e56" role="bold"><textual class="po-textual">&lt;/db-title&gt;</textual></emphasis><textual class="po-textual">
    </textual><emphasis class="po-inline e57 e57" role="bold"><textual class="po-textual">&lt;db-section&gt;</textual></emphasis><textual class="po-textual">
      </textual><emphasis class="po-inline e58 e58" role="bold"><textual class="po-textual">&lt;db-title&gt;</textual></emphasis><textual class="po-textual">Wondering</textual><emphasis class="po-inline e59 e59" role="bold"><textual class="po-textual">&lt;/db-title&gt;</textual></emphasis><textual class="po-textual">
      </textual><emphasis class="po-inline e60 e60" role="bold"><textual class="po-textual">&lt;db-para&gt;</textual></emphasis><textual class="po-textual">I wonder where is this paper is going?</textual><emphasis class="po-inline e61 e61" role="bold"><textual class="po-textual">&lt;/db-para&gt;</textual></emphasis><textual class="po-textual">
    </textual><emphasis class="po-inline e62 e62" role="bold"><textual class="po-textual">&lt;/db-section&gt;</textual></emphasis><textual class="po-textual">
    </textual><emphasis class="po-inline e63 e63" role="bold"><textual class="po-textual">&lt;/db-article&gt;</textual></emphasis><textual class="po-textual">
  &lt;/body&gt;
&lt;/html&gt; </textual></programlisting></figure><para class="po-block e64 e64"><textual class="po-textual">The use of custom elements goes beyond just syntax as it also provides an API for
         registering behaviors with the browser for the markup. During parsing, the DOM construction
         process assigns certain classes to recognized markup (e.g.
            </textual><code class="po-atom e65 e65"><textual class="po-textual">HTMLParagraphElement</textual></code><textual class="po-textual"> is used for the </textual><code class="po-atom e66 e66"><textual class="po-textual">p</textual></code><textual class="po-textual"> element). When an
         unrecognized element is encountered (i.e. a custom element), it is initially constructed as
            </textual><code class="po-atom e67 e67"><textual class="po-textual">HTMLUnknownElement</textual></code><textual class="po-textual">.</textual></para><para class="po-block e68 e68"><textual class="po-textual">A script can register with the document a prototype that defines a new behavior or
         assigns an existing HTML behavior to a custom element. For example, the
            </textual><code class="po-atom e69 e69"><textual class="po-textual">db-para</textual></code><textual class="po-textual"> could simply be registered as an HTML paragraph as shown in </textual><xref class="po-milestone e70 e70" linkend="register-ex"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. The DOM object for the element is subsequently replaced with a
         new instance of the appropriate type and the behaviors of that element are now
         accessible.</textual></para><figure class="po-container e71 e71" xml:id="register-ex"><title class="po-block e72 e72"><textual class="po-textual">Registering a Custom Element</textual></title><programlisting class="po-block e73 e73" xml:space="preserve"><textual class="po-textual">document.register("db-para",{ prototype: HTMLParagraphElement.prototype });
document.register("db-title",{ prototype: HTMLHeadingElement.prototype });
document.register("db-programlisting",{ prototype: HTMLPreElement.prototype });</textual></programlisting></figure><para class="po-block e74 e74"><textual class="po-textual">In simple cases, an element registered as a custom element with one of the available
         HTML prototypes inherits some of the custom behaviors. In testing, it is unlikely that
         default styling will automatically be applied (e.g. using
            </textual><code class="po-atom e75 e75"><textual class="po-textual">HTMLPreElement.prototype</textual></code><textual class="po-textual"> doesn't guarantee </textual><code class="po-atom e76 e76"><textual class="po-textual">pre</textual></code><textual class="po-textual"> element
         styling). Yet, in some cases, styling does occur and so the behavior is inconsistent and
         seems to be implementation defined.  One can imagine that a consistent, reliable behavior
         is the goal and this will sort itself with time.</textual></para><para class="po-block e77 e77"><textual class="po-textual">Moreover, registration can go far beyond such simple associations of name to pre-defined
         prototypes. A script can register a custom prototype to provide specific behaviors. The
         prototype provided must contain a function via a </textual><code class="po-atom e78 e78"><textual class="po-textual">createdCallback</textual></code><textual class="po-textual"> property that
         will perform any additional initialization of the element. Other similar mechanism are
         available for maintaining the element throughout its life cycle.</textual></para><para class="po-block e79 e79"><textual class="po-textual">For example, in </textual><xref class="po-milestone e80 e80" linkend="highlight-ex"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, the callback applies a JavaScript-based
         syntax highlighter (</textual><emphasis class="po-inline e81 e81" role="ital"><textual class="po-textual">highlight.js</textual></emphasis><textual class="po-textual">
         </textual><citation class="po-atom e82 e82"><textual class="po-textual">highlightjs</textual></citation><textual class="po-textual">) to the contents of the element. Once the element is
         re-created within the DOM with this prototype, the callback function executes with the
         value of </textual><code class="po-atom e83 e83"><textual class="po-textual">this</textual></code><textual class="po-textual"> assigned to the element. In this particular example, this means
         the </textual><code class="po-atom e84 e84"><textual class="po-textual">db-programlisting</textual></code><textual class="po-textual"> element is constructed with the prototype and the
         callback adds the syntax highlighting.</textual></para><figure class="po-container e85 e85" xml:id="highlight-ex"><title class="po-block e86 e86"><textual class="po-textual">Auto-highlighting Code</textual></title><programlisting class="po-block e87 e87" xml:space="preserve"><textual class="po-textual">document.registerElement(
   "db-programlisting",
   { prototype:  
       Object.create(HTMLPreElement.prototype, {
          createdCallback: {
             value: function() {
                hljs.highlightBlock(this);
             }
          }
       })
   }
);</textual></programlisting></figure><para class="po-block e88 e88"><textual class="po-textual">Often, the structured information of an element doesn't directly match the desired
         rendering.  The use of HTML Templates (part of the HTML5 specification) provides the
         ability to package and use structured layouts for the display of custom elements. A
         template is a portion of markup that is wrapped by a </textual><code class="po-atom e89 e89"><textual class="po-textual">template</textual></code><textual class="po-textual"> element that can
         be used to construct new content programmatically. One main use for templating is to avoid
         manual construction of elements by either parsing or direct DOM method calls.</textual></para><para class="po-block e90 e90"><textual class="po-textual">For example, in </textual><xref class="po-milestone e91 e91" linkend="reordering-ex"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, the template for a figure is listed.
         The </textual><code class="po-atom e92 e92"><textual class="po-textual">content</textual></code><textual class="po-textual"> element specifies where contained content should be placed. In
         this example, the </textual><code class="po-atom e93 e93"><textual class="po-textual">select</textual></code><textual class="po-textual"> attribute is used to specify which child elements
         should be used. The result of this example is reordering the children of
            </textual><code class="po-atom e94 e94"><textual class="po-textual">db-figure</textual></code><textual class="po-textual"> so that the title is last.</textual></para><figure class="po-container e95 e95" xml:id="reordering-ex"><title class="po-block e96 e96"><textual class="po-textual">Reordering via Templates</textual></title><programlisting class="po-block e97 e97" xml:space="preserve"><textual class="po-textual">&lt;template id="db-figure"&gt;
  &lt;content select="db-mediaobject"&gt;&lt;/content&gt;
  &lt;content select="db-title"&gt;&lt;/content&gt;
&lt;/template&gt;</textual></programlisting></figure><para class="po-block e98 e98"><textual class="po-textual">The registered prototype must use the template and the </textual><emphasis class="po-inline e99 e99" role="ital"><textual class="po-textual">Shadow DOM</textual></emphasis><textual class="po-textual">
         </textual><citation class="po-atom e100 e100"><textual class="po-textual">shadowdom</textual></citation><textual class="po-textual"> to affect the rendering of the element. The Shadow DOM
         provides the ability to create a rendering based on elements not shown to the user. When
         the user inspects the displayed element (or its source), they will only see the custom
         element. Inside the browser, a "shadow element" is used to structure and render the same
         information where the shadow element is only accessible via scripting or styling embedded
         within the template.</textual></para><para class="po-block e101 e101"><textual class="po-textual">An example of using a template for the </textual><code class="po-atom e102 e102"><textual class="po-textual">db-figure</textual></code><textual class="po-textual"> element is shown in </textual><xref class="po-milestone e103 e103" linkend="using-templates"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. The callback constructs a Shadow DOM for the current
         element and appends content. The content is structured via the template shown in </textual><xref class="po-milestone e104 e104" linkend="reordering-ex"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. The consequence is the current sub-tree for
            </textual><code class="po-atom e105 e105"><textual class="po-textual">db-figure</textual></code><textual class="po-textual"> is rendered using the newly constructed Shadow DOM.</textual></para><figure class="po-container e106 e106" xml:id="using-templates"><title class="po-block e107 e107"><textual class="po-textual">Using Templates</textual></title><programlisting class="po-block e108 e108" xml:space="preserve"><textual class="po-textual">var componentDocument = document.currentScript.ownerDocument;
document.registerElement(
   "db-figure",
   { prototype:  
       Object.create(HTMLDivElement.prototype, {
          createdCallback: {
             value: function() {
                var t = componentDocument.getElementById("db-figure");
                var clone = document.importNode(t.content, true);
                this.createShadowRoot().appendChild(clone);
             }
          }
      })
   }
);</textual></programlisting></figure><para class="po-block e109 e109"><textual class="po-textual">Finally, we can package our script, templates, and any styling via </textual><emphasis class="po-inline e110 e110" role="ital"><textual class="po-textual">HTML
            Imports</textual></emphasis><textual class="po-textual">
         </textual><citation class="po-atom e111 e111"><textual class="po-textual">html-imports</textual></citation><textual class="po-textual">.  The imported document is simply another HTML document
         whose scripts, styles, and templates become available to the current document.  The import
         is invoked by a simple </textual><code class="po-atom e112 e112"><textual class="po-textual">link</textual></code><textual class="po-textual"> element with </textual><code class="po-atom e113 e113"><textual class="po-textual">rel</textual></code><textual class="po-textual"> attribute value of
               </textual><quote class="po-inline e114 e114"><code class="po-atom e115 e115"><textual class="po-textual">import</textual></code></quote><textual class="po-textual"> in the importing document (see </textual><xref class="po-milestone e116 e116" linkend="import-ex"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).</textual></para><para class="po-block e117 e117"><textual class="po-textual">The imported document packages the Web Component by linking to the necessary scripts and
         stylesheets while containing any templates that are used by those scripts. The example in
            </textual><xref class="po-milestone e118 e118" linkend="packaged-ex"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> shows the structure used to package the previous examples.
         The scripts and stylesheets for the highlighter are included using the same mechanism
         already known to Web developers.</textual></para><para class="po-block e119 e119"><textual class="po-textual">As a nuance, the script registering the custom elements and the templates are in
         collusion within this imported document.  At the very start of the example in </textual><xref class="po-milestone e120 e120" linkend="using-templates"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, the expression
            </textual><code class="po-atom e121 e121"><textual class="po-textual">document.currentScript.ownerDocument</textual></code><textual class="po-textual"> is used to obtain the correct document
         for retrieving the templates.  If the component is packaged differently, retrieving the
         template might be more difficult or impossible.</textual></para><figure class="po-container e122 e122" xml:id="import-ex"><title class="po-block e123 e123"><textual class="po-textual">Importing a Document</textual></title><programlisting class="po-block e124 e124" xml:space="preserve"><textual class="po-textual">&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
  &lt;head&gt;
     &lt;link rel="import" href="db-component.xhtml"/&gt;
  &lt;/head&gt;
  &lt;body&gt;
  ...
  &lt;/body&gt;
&lt;/html&gt;</textual></programlisting></figure><figure class="po-container e125 e125" xml:id="packaged-ex"><title class="po-block e126 e126"><textual class="po-textual">Packaged Component</textual></title><programlisting class="po-block e127 e127" xml:space="preserve"><textual class="po-textual">&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
  &lt;head&gt;
    &lt;title&gt;DocBook Component&lt;/title&gt;
    &lt;link rel="stylesheet" type="text/css" href="db-component.css"/&gt;
    &lt;link rel="stylesheet" href="http://yandex.st/highlightjs/8.0/styles/default.min.css"/&gt;
    &lt;script type="text/javascript" 
            src="http://yandex.st/highlightjs/8.0/highlight.min.js"&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
     &lt;template id="db-article"&gt;
     ...
     &lt;/template&gt;
     ...
  &lt;/body&gt;
&lt;/html&gt;</textual></programlisting></figure><para class="po-block e128 e128"><textual class="po-textual">In summary, Web Components relies on four essential features:</textual></para><orderedlist class="po-table e129 e129"><listitem class="po-container e130 e130"><para class="po-block e131 e131"><emphasis class="po-inline e132 e132" role="ital"><textual class="po-textual">Custom Elements</textual></emphasis><textual class="po-textual"> — a specification that is in </textual><quote class="po-inline e133 e133"><textual class="po-textual">Last
                  Call</textual></quote><textual class="po-textual"> and may enter CR in 2014.</textual></para></listitem><listitem class="po-container e134 e134"><para class="po-block e135 e135"><emphasis class="po-inline e136 e136" role="ital"><textual class="po-textual">HTML Templates</textual></emphasis><textual class="po-textual"> — part of HTML5 (see </textual><link class="po-inline e137 e137" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/html/scripting-1.html#the-template-element" xlink:show="new" xlink:type="simple"><textual class="po-textual">§4.12.3 The template element</textual></link><textual class="po-textual">) that is in CR as of February 04,
               2014.</textual></para></listitem><listitem class="po-container e138 e138"><para class="po-block e139 e139"><emphasis class="po-inline e140 e140" role="ital"><textual class="po-textual">Shadow DOM</textual></emphasis><textual class="po-textual"> — a specification that is a working
               draft.</textual></para></listitem><listitem class="po-container e141 e141"><para class="po-block e142 e142"><emphasis class="po-inline e143 e143" role="ital"><textual class="po-textual">HTML Imports</textual></emphasis><textual class="po-textual"> — a specification that is a working draft and
               volatile.</textual></para></listitem></orderedlist></section><section class="po-hcontainer e144 e144"><title class="po-block e145 e145"><textual class="po-textual">Pandora's Box?</textual></title><para class="po-block e146 e146"><textual class="po-textual">As the features of Web Components coalesce and become part of the commonly deployed
         browser, there is little anyone can do to prevent their use. An author can simply import a
         Web Component of their choice, custom or shared, and the browser can do little more than
         execute the associated semantics within the bounds of the Open Web Platform. That allows
         anyone to develop custom markup to encapsulate their information in much the same way was
         hoped for with XML.</textual></para><para class="po-block e147 e147"><textual class="po-textual">There are two notable differences between now (2014) and 1998:</textual></para><orderedlist class="po-table e148 e148"><listitem class="po-container e149 e149"><para class="po-block e150 e150"><textual class="po-textual">The browser, as a component of the Open Web Platform, is much more stable,
               technologically advanced, and well understood.</textual></para></listitem><listitem class="po-container e151 e151"><para class="po-block e152 e152"><textual class="po-textual">Web Components utilize the Open Web Platform to package semantics in a much more
               extensive way that is compatible with </textual><emphasis class="po-inline e153 e153"><textual class="po-textual">how browsers actually
               work</textual></emphasis><textual class="po-textual">.</textual></para></listitem></orderedlist><para class="po-block e154 e154"><textual class="po-textual">An unscientific look at the current opinions of the use of Web Components indicates it
         may become hugely popular. While only time will actually determine the outcome, the Shadow
         DOM and HTML Templates are very useful. Accessing them within Custom Elements provides
         needed encapsulation to Web applications and so their intended use in that context makes a
         lot of sense.</textual></para><para class="po-block e155 e155"><textual class="po-textual">Yet, we don't have to use Web Components to package semantics for custom markup that is
         limited to specialized uses. That is, with relative ease, we can transliterate whole XML
         documents into custom elements, wrap them with a few lines of HTML markup, and the browser
         will load and process the custom elements as specified. Is this abuse, a practice that
         isn't recommended, or should a thousand custom elements bloom?</textual></para><para class="po-block e156 e156"><textual class="po-textual">Let's open Pandora's box and see whether what is inside is truly evil. We will take
         DocBook, a known vocabulary for documents (books, articles, etc.), and turn the markup into
         a set of Web Components. We will demonstrate how easy the transliteration is to perform and
         show a few interesting results.</textual></para></section><section class="po-hcontainer e157 e157"><title class="po-block e158 e158"><textual class="po-textual">The DocBook Web Component</textual></title><para class="po-block e159 e159"><textual class="po-textual">Turning any arbitrary XML document into an HTML document as a Web Component requires on
         three essential steps:</textual></para><orderedlist class="po-table e160 e160"><listitem class="po-container e161 e161"><para class="po-block e162 e162"><textual class="po-textual">Prefix every element with a constant prefix and hyphen that can be associated with
               the element's namespace.</textual></para></listitem><listitem class="po-container e163 e163"><para class="po-block e164 e164"><textual class="po-textual">Develop stylesheets, templates, and scripts that encapsulate the desired
               behavior.</textual></para></listitem><listitem class="po-container e165 e165"><para class="po-block e166 e166"><textual class="po-textual">Wrap the document in the minimum amount of HTML bootstrapping necessary to deliver
               the Web Component to the browser.</textual></para></listitem></orderedlist><figure class="po-container e167 e167" xml:id="transform-xproc"><title class="po-block e168 e168"><textual class="po-textual">Transformation Pipeline</textual></title><programlisting class="po-block e169 e169" xml:space="preserve"><textual class="po-textual">&lt;p:declare-step xmlns:p="http://www.w3.org/ns/xproc"
   xmlns:h="http://www.w3.org/1999/xhtml"
   version="1.0"
   name="top"&gt;

   &lt;p:input port="source"/&gt;
   &lt;p:output port="result"/&gt;

   &lt;!-- directly process the wrapper and replace the content
        element with the translated DocBook elements --&gt;
   &lt;p:viewport </textual><emphasis class="po-inline e170 e170"><textual class="po-textual">match="h:content"</textual></emphasis><textual class="po-textual">&gt;
      &lt;p:viewport-source&gt;
         &lt;p:document </textual><emphasis class="po-inline e171 e171"><textual class="po-textual">href="wrapper.xhtml"</textual></emphasis><textual class="po-textual">/&gt;
      &lt;/p:viewport-source&gt;

      &lt;!-- transliterate the DocBook elements --&gt;
      &lt;p:xslt&gt;
         &lt;p:input port="source"&gt;
            &lt;p:pipe port="source" step="top"/&gt;
         &lt;/p:input&gt;
         &lt;p:input port="parameters"&gt;&lt;p:empty/&gt;&lt;/p:input&gt;
         &lt;p:input port="stylesheet"&gt;
            &lt;p:document </textual><emphasis class="po-inline e172 e172"><textual class="po-textual">href="db-content.xsl"</textual></emphasis><textual class="po-textual">/&gt;
         &lt;/p:input&gt;
      &lt;/p:xslt&gt;

   &lt;/p:viewport&gt;
    
&lt;/p:declare-step&gt;</textual></programlisting></figure><para class="po-block e173 e173"><textual class="po-textual">For example, in the specific case of DocBook, we would do the follow:</textual></para><orderedlist class="po-table e174 e174"><listitem class="po-container e175 e175"><para class="po-block e176 e176"><textual class="po-textual">Transform the document by changing every DocBook element name to a name with
                     </textual><quote class="po-inline e177 e177"><code class="po-atom e178 e178"><textual class="po-textual">db-</textual></code></quote><textual class="po-textual"> prefix with no namespace. Also, copy any MathML
               or SVG to the output and pay specific attention to the serialization (HTML without a
               namespace or XHTML with a namespace). </textual></para></listitem><listitem class="po-container e179 e179"><para class="po-block e180 e180"><textual class="po-textual">Implement Web Components for common constructions like xref,
               mediaobject/imageobject/imagedata, link, etc. and develop CSS stylesheets for the
               rest. Package this component as a single document (see </textual><xref class="po-milestone e181 e181" linkend="packaged-ex"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).</textual></para></listitem><listitem class="po-container e182 e182"><para class="po-block e183 e183"><textual class="po-textual">Wrap the document in the minimum markup (see </textual><xref class="po-milestone e184 e184" linkend="import-ex"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).</textual></para></listitem></orderedlist><para class="po-block e185 e185"><textual class="po-textual">In addition, we'd like to retain some aspect of identity of the namespace from the
         original XML. To do so, we will add an RDFa </textual><citation class="po-atom e186 e186"><textual class="po-textual">rdfa</textual></citation><textual class="po-textual">
         </textual><code class="po-atom e187 e187"><textual class="po-textual">typeof</textual></code><textual class="po-textual"> attribute on the root element whose value is the namespace URI. This
         will allow a consuming application to identify the custom element by type rather than a
         fixed prefix. Hence, on the root custom element for DocBook (e.g. </textual><code class="po-atom e188 e188"><textual class="po-textual">db-article</textual></code><textual class="po-textual">),
         a </textual><code class="po-atom e189 e189"><textual class="po-textual">typeof</textual></code><textual class="po-textual"> attribute will contain the value
               </textual><quote class="po-inline e190 e190"><code class="po-atom e191 e191"><textual class="po-textual">http://docbook.org/ns/docbook</textual></code></quote><textual class="po-textual">.</textual></para><para class="po-block e192 e192"><textual class="po-textual">This process was implemented using the simple XProc </textual><citation class="po-atom e193 e193"><textual class="po-textual">xproc</textual></citation><textual class="po-textual"> pipeline
         shown in </textual><xref class="po-milestone e194 e194" linkend="transform-xproc"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> where the transformed document is inserted in
         the wrapper (see </textual><xref class="po-milestone e195 e195" linkend="wrapper"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) as a replacement for the </textual><code class="po-atom e196 e196"><textual class="po-textual">content</textual></code><textual class="po-textual">
         element. The transformation is simply a set of renaming rules with the main two rules shown
         in </textual><xref class="po-milestone e197 e197" linkend="main-xslt"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><figure class="po-container e198 e198" xml:id="wrapper"><title class="po-block e199 e199"><textual class="po-textual">Wrapper Document</textual></title><programlisting class="po-block e200 e200" xml:space="preserve"><textual class="po-textual">&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
  &lt;head&gt;
     &lt;link rel="import" href="db-component.xhtml"/&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;content/&gt;
  &lt;/body&gt;
&lt;/html&gt;</textual></programlisting></figure><figure class="po-container e201 e201" xml:id="main-xslt"><title class="po-block e202 e202"><textual class="po-textual">Main XSLT Rules</textual></title><programlisting class="po-block e203 e203" xml:space="preserve"><textual class="po-textual">&lt;xsl:template match="/db:*"&gt;
   &lt;xsl:element name="db-{local-name()}" namespace="http://www.w3.org/1999/xhtml"&gt;
      &lt;xsl:attribute name="typeof"&gt;&lt;xsl:value-of select="namespace-uri()"/&gt;&lt;/xsl:attribute&gt;
      &lt;xsl:apply-templates select="@*|node()"/&gt;
   &lt;/xsl:element&gt;
&lt;/xsl:template&gt;
   
&lt;xsl:template match="db:*"&gt;
   &lt;xsl:element name="db-{local-name()}" namespace="http://www.w3.org/1999/xhtml"&gt;
      &lt;xsl:apply-templates select="@*|node()"/&gt;
   &lt;/xsl:element&gt;
&lt;/xsl:template&gt;</textual></programlisting></figure><para class="po-block e204 e204"><textual class="po-textual">In terms of what these custom elements might provide to a user, some behaviors for
         DocBook that require scripting are:</textual></para><itemizedlist class="po-table e205 e205"><listitem class="po-container e206 e206"><para class="po-block e207 e207"><textual class="po-textual">Links (e.g. link or xref).</textual></para></listitem><listitem class="po-container e208 e208"><para class="po-block e209 e209"><textual class="po-textual">Auto-numbering of sections, figures, etc.</textual></para></listitem><listitem class="po-container e210 e210"><para class="po-block e211 e211"><textual class="po-textual">Display of media objects (e.g. imageobject/imagedata).</textual></para></listitem><listitem class="po-container e212 e212"><para class="po-block e213 e213"><textual class="po-textual">Generated text for cross references (e.g. turn xref into "Figure 2.1 ...").</textual></para></listitem><listitem class="po-container e214 e214"><para class="po-block e215 e215"><textual class="po-textual">Auto-generation of a table of contents and other navigation.</textual></para></listitem><listitem class="po-container e216 e216"><para class="po-block e217 e217"><textual class="po-textual">Syntax highlighting in programlistings and other code.</textual></para></listitem></itemizedlist><para class="po-block e218 e218"><textual class="po-textual">These features were implemented</textual><footnote class="po-popup e219 e219" xml:id="github-fn"><para class="po-block e220 e220"><textual class="po-textual">The implementation is available at </textual><link class="po-inline e221 e221" xlink:actuate="onRequest" xlink:href="https://github.com/alexmilowski/db-component" xlink:show="new" xlink:type="simple"><textual class="po-textual">github / alexmilowski /
                  db-component</textual></link><textual class="po-textual">.</textual></para></footnote><textual class="po-textual"> and tested in Chrome (the only browser currently implementing Web
            Components</textual><footnote class="po-popup e222 e222" xml:id="flags-fn"><para class="po-block e223 e223"><textual class="po-textual">It is necessary to turn on experimental features in Chrome to use Web Components.
               The flags that need to be enabled are: </textual><itemizedlist class="po-table e224 e224"><listitem class="po-container e225 e225"><para class="po-block e226 e226"><emphasis class="po-inline e227 e227" role="ital"><textual class="po-textual">Enable experimental Web Platform
                           features</textual></emphasis><textual class="po-textual"> - required for Custom Elements and the Shadow
                        DOM.</textual></para></listitem><listitem class="po-container e228 e228"><para class="po-block e229 e229"><emphasis class="po-inline e230 e230" role="ital"><textual class="po-textual">Enable HTML Imports</textual></emphasis><textual class="po-textual"> - required to use
                        imports for importing the component definitions and various code or
                        stylesheets.</textual></para></listitem></itemizedlist></para></footnote><textual class="po-textual">). In total, the implementation was 235 lines of JavaScript, 76 lines of CSS,
         and a 67 line HTML document with none of these resources having been compressed or
         otherwise optimized. The implementation also includes </textual><code class="po-atom e231 e231"><textual class="po-textual">highlight.js</textual></code><textual class="po-textual"> via the
         HTML import and programmatically adds MathJax </textual><citation class="po-atom e232 e232"><textual class="po-textual">mathjax</textual></citation><textual class="po-textual"> for rendering
         MathML.</textual></para><para class="po-block e233 e233"><textual class="po-textual">At present, there are some notable issues implementing a set of Web Components and using
         HTML Imports:</textual></para><itemizedlist class="po-table e234 e234"><listitem class="po-container e235 e235"><para class="po-block e236 e236"><textual class="po-textual">MathJax was not able to be included via the import. The method it uses to
               determine the base URI cannot find the script reference in the imported document.
               MathJax isn't </textual><quote class="po-inline e237 e237"><textual class="po-textual">HTML import aware</textual></quote><textual class="po-textual"> at this point in time. As such,
               MathJax added scripts and stylesheets aren't hidden in the imported document but,
               instead, are programmatically added to the importing document.</textual></para></listitem><listitem class="po-container e238 e238"><para class="po-block e239 e239"><textual class="po-textual">Implementing links was harder than expected. Just associating the prototype
                  </textual><code class="po-atom e240 e240"><textual class="po-textual">HTMLAnchorElement</textual></code><textual class="po-textual"> with the element does not induce some minimal
               linking behavior. Further, using a template that wraps the content with an HTML
               anchor in the Shadow DOM is more complicate as there is no way to automatically copy
               attributes (e.g. the URI in the </textual><code class="po-atom e241 e241"><textual class="po-textual">href</textual></code><textual class="po-textual"> attribute) and some default
               behaviors (e.g. a mouse pointer) aren't automatic. Further, clicking had no effect
               and a custom event handler had to be added.</textual></para></listitem><listitem class="po-container e242 e242"><para class="po-block e243 e243"><textual class="po-textual">The division between the stylesheet within each template and the overall
               stylesheet is a bit tricky.</textual></para></listitem><listitem class="po-container e244 e244"><para class="po-block e245 e245"><textual class="po-textual">There is a lot more to be done to handle the full life cycle of the elements. That
               is, if other scripts manipulate the custom elements </textual><emphasis class="po-inline e246 e246" role="ital"><textual class="po-textual">in
                  situ</textual></emphasis><textual class="po-textual">, the components (e.g. the auto-generated navigation) may need
               to update themselves.</textual></para></listitem></itemizedlist><para class="po-block e247 e247"><textual class="po-textual">Web components can also be used within other browsers by using the Polymer Platform
            </textual><quote class="po-inline e248 e248"><textual class="po-textual">polyfill</textual></quote><textual class="po-textual">
         </textual><citation class="po-atom e249 e249"><textual class="po-textual">platform</textual></citation><textual class="po-textual">. This JavaScript library provides implementations of various
         Web Components specifications for the Firefox, Safari, and IE browsers. Unfortunately, at
         this time (July 2014), this library fails to work with the DocBook example:</textual></para><itemizedlist class="po-table e250 e250"><listitem class="po-container e251 e251"><para class="po-block e252 e252"><textual class="po-textual">Firefox crashes almost immediately.  This seems to have something to do with the
               generation of the table of contents navigation.</textual></para></listitem><listitem class="po-container e253 e253"><para class="po-block e254 e254"><textual class="po-textual">Safari fails with an JavaScript error.</textual></para></listitem></itemizedlist></section><section class="po-hcontainer e255 e255"><title class="po-block e256 e256"><textual class="po-textual">The Evolving Web</textual></title><para class="po-block e257 e257"><textual class="po-textual">Web Components is a promising technology for delivering packaged semantics for general
         markup.  It succeeds in many places where previous attempts with XML in the browser have
         failed.  That it is somewhat of a reality today is ever more exciting.</textual></para><para class="po-block e258 e258"><textual class="po-textual">Yet, the mechanisms for which a browser or resource consumer can recognize the use of a
         particular set of custom elements is fraught with problems. The inability to identify the
         prefix used in constructing the element names, associate that prefix with some URI, or to
         protect content from collisions with other custom elements is going to be an immediately
         painful experience. Authors and publishers will want to mix content from different sources
         outside of their control and custom elements will make that increasingly harder.</textual></para><para class="po-block e259 e259"><textual class="po-textual">XML has a partial solution for identifying and uniquely naming elements to avoid
         collisions. Yet, that solution allows arbitrary complexity without sufficient gains in
         functionality and was rejected by many in the various Web developer communities. Yet, one
         can't help but feel like a colon was swapped for a hyphen and we lost something in the
         exchange.</textual></para><para class="po-block e260 e260"><textual class="po-textual">In the end, Web Components lets us deliver XML documents, transliterated, and packaged
         with their semantics. The mechanisms of the Shadow DOM and scripting allow the markup used
         for rendering to have a interactive and integrated mechanism for live manipulation within
         the browser. HTML imports and templates enabling packaging of these semantics into a single
         resource.</textual></para><para class="po-block e261 e261"><textual class="po-textual">Even though Web Components, HTML5, and scripting isn't necessarily how we all may have
         imagined XML on the Web in 1998, their combination is sufficient to accomplish real work
         with markup within the Open Web Platform. The Web has evolved and XML may be evolving along
         with it. It is a reality that we affectionately call the </textual><quote class="po-inline e262 e262"><textual class="po-textual">Prague
         Compromise</textual></quote><textual class="po-textual">.</textual></para><blockquote class="po-container e263 e263"><para class="po-block e264 e264"><textual class="po-textual">He put on his skis, straightened himself up, and remained standing there for some
            time; as he pulled on his mittens he took one glance homeward. He could just make out
            the house in the dim distance. Then the whiteness all around it thickened—rose up in a
            cloud—seemed to be piling in. ... Perhaps it wasn't so dangerous, after all. The wind
            had been steady all day, had held in the same quarter, and would probably keep on ...
            Oh, well—here goes!</textual></para><para class="po-block e265 e265"><textual class="po-textual">...</textual></para><para class="po-block e266 e266"><textual class="po-textual">On one of the hillsides stood an old haystack which a settler had left there when he
            found out that the coarse bottom hay wasn't much good for fodder. One day during the
            spring after Hans Olsa had died, a troop of young boys were ranging the prairies, in
            search of some yearling cattle that had gone astray. They came upon the haystack, and
            stood transfixed. On the west side of the stack sat a man, with his back to the
            mouldering hay. This was in the middle of a warm day in May, yet the man had two pairs
            of skis along with him; one pair lay beside him on the ground, the other was tied to his
            back. He had a heavy stocking cap pulled well down over his forehead, and large mittens
            on his hands; in each hand he clutched a staff ... To the boys, it looked as though the
            man were sitting there resting while he waited for better skiing ... His face was ashen
            and drawn. His eyes were set toward the west.</textual></para><attribution class="po-block e267 e267"><textual class="po-textual">Giants in the Earth: A Saga of the Prairie, O. E. Rölvaag (1924)</textual></attribution></blockquote></section><bibliography class="po-hcontainer e268 e268"><title class="po-block e269 e269"><textual class="po-textual">Bibliography</textual></title><bibliomixed class="po-block e270 e270" xml:id="balisage-2009"><textual class="po-textual">
         </textual><quote class="po-inline e271 e271"><textual class="po-textual">XML in the Browser: the Next Decade</textual></quote><textual class="po-textual">, R. Alexander Milowski, Balisage: The Markup Conference 2009, 2009-08; see also </textual><link class="po-inline e272 e272" xlink:actuate="onRequest" xlink:href="http://www.balisage.net/Proceedings/vol3/html/Milowski01/BalisageVol3-Milowski01.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.balisage.net/Proceedings/vol3/html/Milowski01/BalisageVol3-Milowski01.html</textual></link><textual class="po-textual">. doi:</textual><biblioid class="po-atom e273 doi e273"><textual class="po-textual">10.4242/BalisageVol3.Milowski01</textual></biblioid><textual class="po-textual">
      </textual></bibliomixed><bibliomixed class="po-block e274 e274" xml:id="html5"><textual class="po-textual">
         </textual><quote class="po-inline e275 e275"><textual class="po-textual">HTML5</textual></quote><textual class="po-textual">, W3C, 2013-09-06, Robin Berjon, Steve Faulkner, Travis Leithead, Erika Doyle Navara, Edward O'Connor, Silvia Pfeiffer, and Ian Hickson; see also </textual><link class="po-inline e276 e276" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/html/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/html/</textual></link><textual class="po-textual">
      </textual></bibliomixed><bibliomixed class="po-block e277 e277" xml:id="custom-elements"><textual class="po-textual">
         </textual><quote class="po-inline e278 e278"><textual class="po-textual">Custom Elements</textual></quote><textual class="po-textual">, W3C, 2014-04-28, Dimitri Glazkov; see also </textual><link class="po-inline e279 e279" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/custom-elements/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/custom-elements/</textual></link><textual class="po-textual">
      </textual></bibliomixed><bibliomixed class="po-block e280 e280" xml:id="highlightjs"><textual class="po-textual">
         </textual><quote class="po-inline e281 e281"><textual class="po-textual">highlight.js</textual></quote><textual class="po-textual">, Ivan Sagalaev, Jeremy Hull, Oleg Efimov; see also </textual><link class="po-inline e282 e282" xlink:actuate="onRequest" xlink:href="http://highlightjs.org" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://highlightjs.org</textual></link><textual class="po-textual">
      </textual></bibliomixed><bibliomixed class="po-block e283 e283" xml:id="shadowdom"><textual class="po-textual">
         </textual><quote class="po-inline e284 e284"><textual class="po-textual">Shadow DOM</textual></quote><textual class="po-textual">, W3C, 2014-04-25, Dimitri Glazkov; see also </textual><link class="po-inline e285 e285" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/shadow-dom/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/shadow-dom/</textual></link><textual class="po-textual">
      </textual></bibliomixed><bibliomixed class="po-block e286 e286" xml:id="html-imports"><textual class="po-textual">
         </textual><quote class="po-inline e287 e287"><textual class="po-textual">HTML Imports</textual></quote><textual class="po-textual">, W3C, 2014-03-11, Dimitri Glazkov and Hajime Morrita; see also </textual><link class="po-inline e288 e288" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/html-imports/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/html-imports/</textual></link><textual class="po-textual">
      </textual></bibliomixed><bibliomixed class="po-block e289 e289" xml:id="rdfa"><textual class="po-textual">
         </textual><quote class="po-inline e290 e290"><textual class="po-textual">RDFa Core 1.1</textual></quote><textual class="po-textual">, W3C, 2012-06-07, Ben Adida, Mark Birbeck, Shane McCarron, and Ivan Herman; see also </textual><link class="po-inline e291 e291" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/rdfa-core/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/rdfa-core/</textual></link><textual class="po-textual">
      </textual></bibliomixed><bibliomixed class="po-block e292 e292" xml:id="xproc"><textual class="po-textual">
         </textual><quote class="po-inline e293 e293"><textual class="po-textual">XProc: An XML Pipeline Language</textual></quote><textual class="po-textual">, W3C, 2010-05-11, Norman Walsh, Alex Miłowski, and Henry S. Thompson; see also </textual><link class="po-inline e294 e294" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xproc/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xproc/</textual></link><textual class="po-textual">
      </textual></bibliomixed><bibliomixed class="po-block e295 e295" xml:id="mathjax"><textual class="po-textual">
         </textual><quote class="po-inline e296 e296"><textual class="po-textual">MathJax</textual></quote><textual class="po-textual">, Davide Cervone, Christian Perfect, and Peter Krautzberger; see also </textual><link class="po-inline e297 e297" xlink:actuate="onRequest" xlink:href="http://www.mathjax.org/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.mathjax.org/</textual></link><textual class="po-textual">
      </textual></bibliomixed><bibliomixed class="po-block e298 e298" xml:id="platform"><textual class="po-textual">
         </textual><quote class="po-inline e299 e299"><textual class="po-textual">Polymer Project</textual></quote><textual class="po-textual">; see also </textual><link class="po-inline e300 e300" xlink:actuate="onRequest" xlink:href="https://github.com/polymer" xlink:show="new" xlink:type="simple"><textual class="po-textual">https://github.com/polymer</textual></link><textual class="po-textual">
      </textual></bibliomixed></bibliography></article></classedDocument>