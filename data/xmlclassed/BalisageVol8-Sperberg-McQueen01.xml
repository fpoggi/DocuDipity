<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.3"><title class="po-block e1 e1"><textual class="po-textual">XiBIT</textual></title><subtitle class="po-block e2 e2"><textual class="po-textual">XML-in-the-browser interoperability tests</textual></subtitle><info class="po-record e3 e3"><confgroup class="po-record e4 e4"><conftitle class="po-field e5 e5"><textual class="po-textual">Balisage: The Markup Conference 2012</textual></conftitle><confdates class="po-field e6 e6"><textual class="po-textual">August 7 - 10, 2012</textual></confdates></confgroup><abstract class="po-container e7 e7"><para class="po-block e8 e8"><textual class="po-textual">
The XiBIT (XML-in-the-browser interoperability tests) Project seeks
to provide a systematic collection of interoperability tests to
characterize the behavior of current Web browsers in the display and
processing of XML.  It is not a collection of conformance tests;
conformance tests must cover an entire specification and must not
address behaviors not constrained by the specification, while
interoperability tests will tend to focus on areas where different
implementations behave differently, whether those behaviors are
constrained by any specification or not.  Conformance tests have
right and wrong answers; interoperability tests do not.  XiBIT 
will produce both a collection of test cases and documentation of
the results of running those test cases on a selection of current
browsers.
</textual></para></abstract><author class="po-record e9 e9"><personname class="po-record e10 e10"><firstname class="po-field e11 e11"><textual class="po-textual">C. M.</textual></firstname><surname class="po-field e12 e12"><textual class="po-textual">Sperberg-McQueen</textual></surname></personname><personblurb class="po-container e13 e13"><para class="po-block e14 e14"><textual class="po-textual">
C. M. Sperberg-McQueen is the founder of Black Mesa Technologies LLC,
a consultancy specializing in the use of descriptive markup to help
memory institutions preserve cultural heritage information for the
long haul.  He has served as co-editor of the XML 1.0 specification,
the Guidelines of the Text Encoding Initiative, and the XML Schema
Definition Language (XSD) 1.1 specification.  He holds a doctorate in
comparative literature.
</textual></para></personblurb><affiliation class="po-record e15 e15"><orgname class="po-block e16 e16"><textual class="po-textual">Black Mesa Technologies LLC</textual></orgname></affiliation></author><legalnotice class="po-container e17 e17"><para class="po-block e18 e18"><textual class="po-textual">Copyright Â© 2012 by the author</textual></para></legalnotice></info><para class="po-block e19 e19"><textual class="po-textual">Most current Web browsers support the retrieval of XML from Web
hosts, the application of CSS and XSLT stylesheets to that XML, and
the display of XML documents in the browser.  But publication of XML
on the Web is not always a straightforward task.  Does the browser
validate the document?  If the document is invalid, will the browser
display it anyway or display only an error message? Will the browser
expand entity references?  Will it process the DTD?  Will it process
the internal DTD subset but not the external subset?  Will it refuse
under certain circumstances to fetch the appropriate stylesheet or DTD
files?</textual></para><para class="po-block e20 e20"><textual class="po-textual">These are not questions of specification conformance: the XML
specification does not impose answers to these or similar questions as
requirements of XML conformance.  But they and others like them are
important questions for anyone who would like to publish XML documents
on the Web in a way that works with a broad variety of current
browsers.</textual></para><para class="po-block e21 e21"><textual class="po-textual">The XiBIT project aims to help.  The name XiBIT (pronounced like
the English word </textual><emphasis class="po-inline e22 e22"><textual class="po-textual">exhibit</textual></emphasis><textual class="po-textual">) stands for
</textual><quote class="po-inline e23 e23"><textual class="po-textual">XML-in-the-browser interoperability tests</textual></quote><textual class="po-textual">; the goal of the
project is to investigate and document the behavior of current Web
browsers in the processing and display of XML.  It is hoped that the
results of XiBIT will be helpful to anyone who wishes to use XML on
the Web, by tabulating usages that work consistently across browsers
(or conversely by identifying usages or constructs which lead to
different behavior in different browsers).
</textual></para><para class="po-block e24 e24"><textual class="po-textual">This paper describes the current state and plans of XiBIT. An
introductory section includes some remarks on related work, a
discussion of the difference between interoperability testing and
conformance testing, and a brief discussion of some relevant
historical background.  This is followed by a description of the
project, covering aims, expected work products, and work methods, and
by some sample test cases and results.  A list of tasks for future
work and a brief conclusion complete the paper.
</textual></para><section class="po-hcontainer e25 e25" xml:id="intro"><title class="po-block e26 e26"><textual class="po-textual">Introduction</textual></title><section class="po-hcontainer e27 e27" xml:id="relwork"><title class="po-block e28 e28"><textual class="po-textual">Related work</textual></title><para class="po-block e29 e29"><textual class="po-textual">Much of the obviously related work consists of
confomance tests.</textual></para><para class="po-block e30 e30"><textual class="po-textual">Conformance and other test suites already exist for many of
the technologies involved in displaying XML on the Web.</textual></para><para class="po-block e31 e31"><textual class="po-textual">Shortly after the XML specification was published, the
Organization for Organization for the Advancement of Structured
Information Standards (OASIS) chartered a technical committee
to develop an XML conformance test suite on the basis of a 
earlier efforts by XML implementors and others; the committee's
report mentions contributions from James Clark, Fuji Xerox,
Sun Microsystems, IBM, and a joint effort by OASIS and the U.S.
National Institute of Standards and Technology (NIST)
[</textual><xref class="po-milestone e32 e32" linkend="oasis-tc-v1se"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].  After a revision
of the test suite for XML 1.0 Second Edition, the Oasis work
was transferred to the XML Core working group of W3C (the World
Wide Web Consortium); the current version of the test suite,
released in 2008, 
covers XML 1.0 Fifth Edition, XML 1.1, and the corresponding
editions of the </textual><emphasis class="po-inline e33 e33"><textual class="po-textual">Namespaces in XML</textual></emphasis><textual class="po-textual"> recommendation
[</textual><xref class="po-milestone e34 e34" linkend="w3c-xml-testsuites"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].</textual></para><para class="po-block e35 e35"><textual class="po-textual">A test suite for XSLT 1.0 was developed by the W3C XSL 
working group and used to provide evidence of implementation
(which is required by the W3C process before specifications
are published as W3C Recommendations), but it is accessible
to W3C members only and has not been made publicly available.
(The same is true of the W3C's test suite for XSLT 2.0.)
</textual></para><para class="po-block e36 e36"><textual class="po-textual">Another strain of related endeavor includes the work done by the
W3C's HTML 5 and Web Applications working groups, which has done a
great deal to clarify the behavior of existing server and browser
software. XiBIT differs from that work partly in its exclusive focus
on XML rather than HTML, partly in its current focus on serving
human-readable documents directly and styling them using XSLT rather
than on serving XML data for use by Javascript code running in the
browser and manipulating it via the DOM; and partly in that XiBIT is
aimed solely at documentation of existing practice and not at the
development of any new specifications.
</textual></para><para class="po-block e37 e37"><textual class="po-textual">As the XiBIT project develops, it may integrate or adapt material
both from conformance test suites for the relevant specifications
and from test collections like those used by the HTML5 and Web
Applications working groups to document existing practice.</textual></para><para class="po-block e38 e38"><textual class="po-textual">A third line of related work may be found in the investigations of
Alex Milowski over the last few years into the possibilities for
augmenting and improving XML support in Web browsers [</textual><xref class="po-milestone e39 e39" linkend="milowski-2009"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], [</textual><xref class="po-milestone e40 e40" linkend="milowski-2011"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].  Milowski's work overlaps with XiBIT in part; at
least, like XiBIT, he records some interoperability issues with recent
and current browsers.  He raises those issues, however, as a way of
making rhetorical points about the need for more aggressive action by
the XML community; XiBIT's aims are less hortatory and more
systematic.  Milowski is interested in possiblities for extending Web
browsers and improving their XML support; XiBIT restricts itself for
the moment to recording their status quo behavior.</textual></para></section><section class="po-hcontainer e41 e41" xml:id="interop"><title class="po-block e42 e42"><textual class="po-textual">Interoperability testing vs. conformance testing</textual></title><para class="po-block e43 e43"><textual class="po-textual">The collection of tests developed by the XiBIT project differs
from conformance test suites in several ways.</textual></para><para class="po-block e44 e44"><textual class="po-textual">First and foremost, XiBIT focuses on </textual><emphasis class="po-inline e45 e45"><textual class="po-textual">interoperability
testing</textual></emphasis><textual class="po-textual"> or documentation of behavior, not conformance.</textual></para><para class="po-block e46 e46"><textual class="po-textual">Note that strictly speaking,
</textual><emphasis class="po-inline e47 e47"><textual class="po-textual">interoperability</textual></emphasis><textual class="po-textual"> denotes the ability of client-
and server-side implementations of network protocols to communicate
successfully with each other. Its application to specifications like
XML and XSLT, which define data formats or operations on data which
can be and usually are performed by individual implementations acting
alone, requires that the term be given a different meaning.  In the
implementation of communications protocols, interoperability helps to
establish both that the specification is clearly enough defined to be
implemented consistently (thus providing a quality check on the
specification itself) and also that users of the technology can switch
from one implementation to another without (excessive) loss of
functionality.  
As [</textual><xref class="po-milestone e48 e48" linkend="iso-iec-2382-01"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] defines the term,
interoperability is
</textual><quote class="po-inline e49 e49"><textual class="po-textual">The capability to communicate, execute programs, or transfer data
among various functional units in a manner that requires the user to
have little or no knowledge of the unique characteristics of those
units</textual></quote><textual class="po-textual">.
In the case of single-processor specifications like XML and XSLT, it
is consistency among independent implementations that helps establish
these properties.</textual><footnote class="po-popup e50 e50"><para class="po-block e51 e51"><textual class="po-textual">
In the light of the concern with the user's ability to exchange one
imlementation for another, perhaps the area of concern should be
called </textual><emphasis class="po-inline e52 e52"><textual class="po-textual">interchangeability testing</textual></emphasis><textual class="po-textual">, but this
paper stays with the conventional term </textual><emphasis class="po-inline e53 e53"><textual class="po-textual">interoperability
testing</textual></emphasis><textual class="po-textual">.</textual></para></footnote><textual class="po-textual">
</textual></para><para class="po-block e54 e54"><textual class="po-textual">XiBIT's focus on interoperability testing rather than conformance
testing means it differs from conformance tests in several ways:
</textual><itemizedlist class="po-table e55 e55"><listitem class="po-container e56 e56"><para class="po-block e57 e57"><textual class="po-textual">Serious conformance tests need thorough coverage of the
specification(s) being implemented; they often include thousands or
tens of thousands of tests.  At least in its initial versions,
XiBIT does not aim at that kind of coverage.</textual></para></listitem><listitem class="po-container e58 e58"><para class="po-block e59 e59"><textual class="po-textual">Conformance tests have right and wrong answers; XiBIT tests do
not have right or wrong answers. They seek only to find out what
processors actually do under the tested circumstances.  (If the
behavior in question is clearly governed by a particular specification
which clearly prescribes a particular behavior, then the demands
of the specification are of some interest to most users interested
in open standards, as well as to most implementors.  But strictly
speaking the relation of XiBIT tests to conformance is a side 
issue.)</textual></para></listitem><listitem class="po-container e60 e60"><para class="po-block e61 e61"><textual class="po-textual">Almost all specifications leave some aspects of behavior
unspecified, to avoid over-constraining implementations, to leave some
conceptual space clear for implementations to compete against each
other, and/or to leave flexibility for implementations to adapt to
their expected users and operating environments.</textual></para><para class="po-block e62 e62"><textual class="po-textual">Conformance tests should not, and typically do not, test behavior
in these areas, which stands to reason: testing behaviors not
constrained by a specification cannot in principle provide information
about the conformance or non-conformance of the software under
test. For interoperability as defined here, however, behaviors not
constrained by the controlling specifications can be just as
interesting and relevant as behaviors that are constrained.  Indeed,
whenever most implementations are reasonably conformant,
interoperability testing is likely to focus all the more on behaviors
which are not constrained by conformance to the specifications,
because that is where variation among implementations will be found.
And for the same reasons, when not all implementations are reasonably
conformant, interoperability testing will in practice need to devote
more attention to areas where conformance is weak in some
implementations.</textual></para></listitem><listitem class="po-container e63 e63"><para class="po-block e64 e64"><textual class="po-textual">Those who want to publish XML on the web will need to attend
to browser and server behavior which is not in fact governed by any de
jure or de facto standard, or sometimes by any written specification
at all.</textual></para></listitem></itemizedlist><textual class="po-textual">
</textual></para></section><section class="po-hcontainer e65 e65" xml:id="history"><title class="po-block e66 e66"><textual class="po-textual">Historical background</textual></title><para class="po-block e67 e67"><textual class="po-textual">When in the early 1990s the World Wide Web exploded in popularity,
it placed the SGML community in a delicate, slightly awkward position.
HTML was manifestly an application of descriptive markup:  its syntax
was the reference concrete syntax of SGML, its element set clearly
modeled on (and in part identical with) the </textual><quote class="po-inline e68 e68"><textual class="po-textual">starter
set</textual></quote><textual class="po-textual"> of IBM DCF, Waterloo Script, and Annexe E.1 of ISO
8879.  The HTML spec paid lip service to the ideas of descriptive
markup.  So the success of HTML and the World Wide Web could, with 
a little effort, be interpreted as reflecting well on descriptive
markup and SGML.
But at the same time, the Web had characteristics which many SGML 
users found troubling, even distasteful.  Web browsers were 
limited to a single vocabulary which few SGML users much liked,
they did not follow the standard rules of SGML parsing, and
the HTML specification prescribed behavior in
the presence of invalid input which was foreign to SGML practice.
Some SGML users found it hard to like an application which
deviated so markedly from what they regarded as good practice,
and some found it frustrating that the Web found 
wider uptake than other SGML applications they regarded as better
designed.
</textual></para><para class="po-block e69 e69"><textual class="po-textual">It did not take very long for some in the SGML community to
conceive of a World Wide Web that accommodated their SGML data
without requiring a down-translation into HTML.  Through a history
that does not need to be rehearsed in detail here, this idea led
to the formation of a working group at the World Wide Web Consortium
(W3C) chartered to formulate a version of SGML that would be 
suitable for use on the Web.  The end result of this SGML on the Web
Working Group was 
a subset of SGML called (so as to differentiate it from any 
markup system with a fixed single vocabulary, like HTML) the 
</textual><emphasis class="po-inline e70 e70"><textual class="po-textual">Extensible</textual></emphasis><textual class="po-textual"> Markup Language, XML.</textual></para><para class="po-block e71 e71"><textual class="po-textual">One stated goal of the </textual><quote class="po-inline e72 e72"><textual class="po-textual">SGML on the Web</textual></quote><textual class="po-textual"> working group was to
make it possible to deploy XML documents on the Web; this
intended application led in turn to the development of some other
specifications (e.g. for the XML stylesheet instruction
</textual><xref class="po-milestone e73 e73" linkend="w3c-xml-stylesheet"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) and affected
the direction taken by others:  Cascading Stylesheets (CSS)
was reformulated to enable CSS to work with any vocabulary, not
only with HTML, and XSLT 1.0 was designed to be lightweight enough
to be implementable in a Web browser.
</textual></para><para class="po-block e74 e74"><textual class="po-textual">If one of the goals of the work that led to XML was to 
make it possible to deploy XML documents on the Web, then it
makes sense to ask how far that goal has been achieved, and
under what circumstances it's possible.  That is one of
the rationales for XiBIT.
</textual></para></section></section><section class="po-hcontainer e75 e75" xml:id="project"><title class="po-block e76 e76"><textual class="po-textual">Project description</textual></title><section class="po-hcontainer e77 e77" xml:id="aims"><title class="po-block e78 e78"><textual class="po-textual">Aims</textual></title><para class="po-block e79 e79"><textual class="po-textual">The goal of XiBIT is to investigate and document
the behavior of existing Web browsers in the processing
and display of XML.</textual></para></section><section class="po-hcontainer e80 e80" xml:id="output"><title class="po-block e81 e81"><textual class="po-textual">Expected work products</textual></title><para class="po-block e82 e82"><textual class="po-textual">XiBIT will generate several work products:</textual><itemizedlist class="po-table e83 e83"><listitem class="po-container e84 e84"><para class="po-block e85 e85"><textual class="po-textual">a set of tests, available from a Web server</textual></para></listitem><listitem class="po-container e86 e86"><para class="po-block e87 e87"><textual class="po-textual">a tabulation of browser behavior on those tests</textual></para></listitem><listitem class="po-container e88 e88"><para class="po-block e89 e89"><textual class="po-textual">a public interface to allow volunteers to submit
data recording behavior of specific browsers in specific
environments</textual></para></listitem><listitem class="po-container e90 e90"><para class="po-block e91 e91"><textual class="po-textual">prose documentation of XML browser behaviors</textual></para></listitem><listitem class="po-container e92 e92"><para class="po-block e93 e93"><textual class="po-textual">a diagnostic tool to read XML documents and issue
warnings of potential interoperability issues</textual></para></listitem></itemizedlist><textual class="po-textual">
</textual></para><para class="po-block e94 e94"><textual class="po-textual">Some of these exist now (samples and screen shots below); others
will be developed as the project continues.  All materials developed
by XiBIT will be made publicly available under the GNU Public License
at the project's Web site, </textual><link class="po-inline e95 e95" xlink:actuate="onRequest" xlink:href="http://xibit.blackmesatech.com/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://xibit.blackmesatech.com/</textual></link><textual class="po-textual">.
</textual></para></section><section class="po-hcontainer e96 e96" xml:id="methods"><title class="po-block e97 e97"><textual class="po-textual">Methods</textual></title><section class="po-hcontainer e98 e98" xml:id="axes"><title class="po-block e99 e99"><textual class="po-textual">Identifying axes of variation</textual></title><para class="po-block e100 e100"><textual class="po-textual">XiBIT tests are written to explore browser behaviors that may
affect interoperability.</textual></para><para class="po-block e101 e101"><textual class="po-textual">Each set of tests explores one or more dimensions along which XML
documents can vary, so as to see how that variation affects browser
behavior.  The set of dimensions explored by a test set may be
referred to as a </textual><emphasis class="po-inline e102 e102"><textual class="po-textual">space of variation</textual></emphasis><textual class="po-textual">.</textual></para><para class="po-block e103 e103"><textual class="po-textual">The dimensions or axes of variation to be tested are found
in several ways.  
</textual><itemizedlist class="po-table e104 e104"><listitem class="po-container e105 e105"><para class="po-block e106 e106"><textual class="po-textual">
The project will perform a systematic search of the Web for documents
describing pitfalls of XML publication and techniques for avoiding
them.
</textual></para></listitem><listitem class="po-container e107 e107"><para class="po-block e108 e108"><textual class="po-textual">Even without a survey of existing literature on the 
subject, some axes suggest themselves to introspection based
on practical experience serving XML documents on the Web.  For
example: browser behavior has in the past been affected by the
validity or invalidity of the XML document, by the location of DTD
files and stylesheets, by the presence or absence of document-type
declarations in XSLT stylesheets, etc., etc.  Some failures of
interoperability among browser-based XSLT implementations reflect
conformance issues in the browsers' implementations of XSLT:
Mozilla-based browsers do not support the namespace axis, several
browsers have (different) bugs in their handling of the XSLT
</textual><code class="po-atom e109 e109"><textual class="po-textual">unparsed-entity-uri()</textual></code><textual class="po-textual"> function, and so on.
</textual></para></listitem><listitem class="po-container e110 e110"><para class="po-block e111 e111"><textual class="po-textual">
Once the first version of XiBIT is made public, the project site will
solicit input from the public.  Any problem that arises for anyone in
publishing XML documents on the Web may point to some relevant
variations in browser behavior, so any war story about things going
wrong in XML publishing may help XiBIT improve its coverage.
</textual></para></listitem><listitem class="po-container e112 e112"><para class="po-block e113 e113"><textual class="po-textual">
Other areas of variation can be identified by systematic examination
of the relevant specifications: XML, Namespaces in XML, XSLT 1.0, XML
Base, Associating Style Sheets with XML documents, Cross-origin
resource sharing, the Document Object Model, etc.  For the reasons
described earlier, particular attention will be paid to areas left
unconstrained by the relevant specifications.
</textual></para></listitem><listitem class="po-container e114 e114"><para class="po-block e115 e115"><textual class="po-textual">
Finally, the project will (time permitting) review relevant conformance
test suites and the work of relevant working groups; many questions
addressed for HTML documents by the HTML5 work may also arise with
respect to XML documents.  Because of the way current browsers are
constructed, they may behave differently for HTML and XML documents.
</textual></para></listitem></itemizedlist><textual class="po-textual">
</textual></para></section><section class="po-hcontainer e116 e116" xml:id="varspace-size"><title class="po-block e117 e117"><textual class="po-textual">Size of the space of variation</textual></title><para class="po-block e118 e118"><textual class="po-textual">Each axis of variation will have at least two possible values 
and may have more.  For example, processor variation in the handling
of DTDs may be affected by:
</textual><itemizedlist class="po-table e119 e119"><listitem class="po-container e120 e120"><para class="po-block e121 e121"><textual class="po-textual">whether the document is valid or invalid;</textual></para></listitem><listitem class="po-container e122 e122"><para class="po-block e123 e123"><textual class="po-textual">whether the document type definition has an internal
subset (declarations in the document entity itself), 
an external subset (declarations in other resources), or 
both;</textual></para></listitem><listitem class="po-container e124 e124"><para class="po-block e125 e125"><textual class="po-textual">whether any external document type definition resources
are pointed to in a way that violates the browser's
same-origin policy; in different contexts, browsers
may behave differently for relative references that 
point downward in the virtual directory structure of
URIs, relative references that point upward in that
structure, relative references that appear to point upward
(i.e. they begin with </textual><quote class="po-inline e126 e126"><code class="po-atom e127 e127"><textual class="po-textual">..</textual></code></quote><textual class="po-textual">) but in 
fact do not (they re-descend to the original location),
absolute references that refer to the same
host, absolute references that refer to a different host,
and references which use a different URI scheme, different
port number, etc.  For purposes of the examples below,
it is supposed that there are six relevant variants
for the form of the URI.</textual></para></listitem></itemizedlist><textual class="po-textual">
The retrieval of stylesheets may be affected by the same
variations in location of the stylesheet.
</textual></para><para class="po-block e128 e128"><textual class="po-textual">In principle, these variables can interact in a browser, so a 
complete survey will require testing all possible combinations.
In simple cases, the number of test cases required
is the product of the number of possible values on each
dimension, and the set of test cases to be constructed
for a given space of variation is the Cartesian product
of the dimensions.  In most cases, however, not all combinations
of values are logically possible, so the actual number of
cases will be lower (and may be difficult to calculate
</textual><emphasis class="po-inline e129 e129"><textual class="po-textual">a priori</textual></emphasis><textual class="po-textual">).  An example may serve to
illustrate the point.
In the case of XML documents with and without a DTD and
with and without a single CSS or XSLT stylesheet, the
exhaustive approach would require all combinations of
validity, DTD composition, external DTD location, CSS
location, and XSLT location, for 
2 (valid vs. invalid) 
Ã 2 (external subset with or without and internal subset)
Ã 6 (variations in relative and absolute URIs for the DTD)
Ã 6 (variations in relative and absolute URIs for the stylesheet)
Ã 2 (CSS vs. XSLT stylesheet)
or 288 cases for documents with an external DTD and one stylesheet,
plus another 
36 (= 2 forms of validity Ã 2 forms of DTD structure Ã 6
forms of URI) for those with an external DTD and no stylesheet,
plus 24 (= 2 forms of validity Ã 6 forms of URI Ã 2 kinds
of stylesheet)
for those with no DTD and one stylesheet, 
plus 1 for those with neither DTD nor stylesheet,
for a total of 349 tests.</textual></para><para class="po-block e130 e130"><textual class="po-textual">In practice, many of the theoretically possible interactions among
variables do not arise.  If a browser shows the user an error message
instead of the document, when the document is invalid and has no
stylesheet, it is unlikely though not impossible that the browser will
show the invalid document to the user if only the document has an XSLT
or CSS stylesheet.  To reduce the overall number of tests, then,
and make it easier to examine the behavior of a browser on all tests,
the XiBIT project works on the assumption that different axes of 
variation should be assumed to be independent unless evidence arises
that suggests that they interact.
Browser behavior with respect to location of DTDs and
browser behavior with respect to location of CSS and XSLT stylesheets 
are tested independently, with 39 tests, rather than 349:
24 documents with external DTDs (= 2 forms of validity Ã 6 forms
of URI Ã 2 for the presence or absence of an internal subset),
2 with internal DTDs only (valid and invalid),
1 with no DTD at all and no stylesheet,
plus 6 tests each for various forms of URI pointing to an XSLT
or CSS stylesheet.</textual><footnote class="po-popup e131 e131"><para class="po-block e132 e132"><textual class="po-textual">Actually, even this reduced set
of test cases is probably more than is needed:  browsers which do not
read the DTD at all do not check to see whether the DTD is served
from the same origin as the document instance, and in practice it
is not necessary to test them for each of the possible forms that
a violation of the same-source policy can take.  To keep the size
of the active test suite within bounds and make it feasible to 
run at least a core portion of the test suite casually and without a
large investment of time, the core part of the test suite really
should be restricted to axes of variation which actually exhibit
some variation among some defined set of browsers.  Tests on which 
all browsers behave identically produce relatively little information
when run; axes of variation that do not distinguish among browsers
will be recorded and documented (after all, the axis might become
important if some new browser breaks the pattern), but will not be
part of the core of XiBIT.
</textual></para></footnote><textual class="po-textual">
</textual></para></section><section class="po-hcontainer e133 e133" xml:id="gen"><title class="po-block e134 e134"><textual class="po-textual">Generating tests</textual></title><para class="po-block e135 e135"><textual class="po-textual">For a given space of variation, XiBIT tests are generated
automatically using a two-step process:  first a program generates an
XML description of the set of test cases, and then a second program
generates from this description both the individual files needed for
the test cases and a list of the tests in the form of a catalog. (In
the current version of XiBIT, the first program is written in XQuery
and the second in XSLT.)</textual></para><para class="po-block e136 e136"><textual class="po-textual">Samples of the test-case generator code and test cases are given
below.</textual></para></section><section class="po-hcontainer e137 e137" xml:id="testing"><title class="po-block e138 e138"><textual class="po-textual">Testing browsers</textual></title><para class="po-block e139 e139"><textual class="po-textual">Test cases take the form of XML documents which may have references
to a DTD and/or stylesheets.  The simplest way to run a given test
case in a given browser is just to dereference that test case using
that browser, and see what the browser does with it.  Possible
behaviors include styling the document with the given stylesheet,
displaying the document in tagged form (as most browsers now do with
data recognized as XML that has no XML stylesheet processing
instruction), treating the document as if it were HTML (i.e. ignoring
all tags unless they have the same names as HTML elements and
displaying the #PCDATA content of the document), displaying a blank
screen, and displaying an error message.</textual></para><para class="po-block e140 e140"><textual class="po-textual">For this kind of testing, the simplest presentation of a 
set of test cases is just a directory listing, as shown in figure
1.
</textual><figure class="po-container e141 e141"><mediaobject class="po-container e142 e142"><imageobject class="po-container e143 e143"><imagedata class="po-meta e144 e144" fileref="../../../vol8/graphics/Sperberg-McQueen01/Sperberg-McQueen01-001.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><textual class="po-textual">
</textual></para><para class="po-block e145 e145"><textual class="po-textual">If a set of tests has more than a handful of test cases, however,
dereferencing each test case individually is tedious (one click to
navigate to the test case, one click to navigate back or to 
close the separate tab or window), and the temptation to skip a few
tests rapidly becomes overpowering.</textual></para><para class="po-block e146 e146"><textual class="po-textual">For some kinds of software and test suite, it's possible to build a
test harness to run all the tests automatically and record the
results, comparing them automatically to the expected result of the
test.  For interactive software, however, the result of the test often
consists not in output that could be written to a file and checked
automatically, but in this or that rendering of the XML document on
the screen; a human is required to evaluate the result.  (The browser
window could in principle be captured in an image file and then
analysed automatically, but that kind of automated image analysis goes
far beyond the resources available to XiBIT.)  So there is a limit
to the possible automation.</textual></para><para class="po-block e147 e147"><textual class="po-textual">It's possible, however, to use the HTML </textual><code class="po-atom e148 e148"><textual class="po-textual">iframe</textual></code><textual class="po-textual"> 
and </textual><code class="po-atom e149 e149"><textual class="po-textual">object</textual></code><textual class="po-textual"> elements to embed test cases in another 
document; within some limits, this makes it possible to inspect 
the results of many tests in a single page, as shown in 
figure 2.</textual><footnote class="po-popup e150 e150"><para class="po-block e151 e151"><textual class="po-textual">The figure shows stylesheets with 
various forms of relative-reference URI and absolute URI 
successfully applied, and a blank screen for the test
</textual><code class="po-atom e152 e152"><textual class="po-textual">xsl.abs.diffhost.xml</textual></code><textual class="po-textual">, which has in its XML stylesheet
processing instruction a URI for a stylesheet on a different host.</textual></para><para class="po-block e153 e153"><textual class="po-textual">As may be seen, each stylesheet produces different text and
has a different color scheme to make it easier to see at a glance
which stylesheet applies to which test case.  This is less
important in a test of different URI forms than in a test 
investigating which stylesheet is used by a browser when several
XML stylesheet instructions are included.</textual></para></footnote><textual class="po-textual">
</textual><figure class="po-container e154 e154"><mediaobject class="po-container e155 e155"><imageobject class="po-container e156 e156"><imagedata class="po-meta e157 e157" fileref="../../../vol8/graphics/Sperberg-McQueen01/Sperberg-McQueen01-002.png" format="png" width="60%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><textual class="po-textual">
</textual></para></section><section class="po-hcontainer e158 e158" xml:id="tabulation"><title class="po-block e159 e159"><textual class="po-textual">Tabulation of results</textual></title><para class="po-block e160 e160"><textual class="po-textual">The raw results will be stored in an XML database and
made available via a search interface so that the set of
results can be filtered by operating system, browser, and
test case.  Details are not yet worked out.</textual></para></section></section></section><section class="po-hcontainer e161 e161" xml:id="samples"><title class="po-block e162 e162"><textual class="po-textual">Some sample tests</textual></title><para class="po-block e163 e163"><textual class="po-textual">The more complicated a test case, the more different things there
are that might conceivably affect the way it is treated by a browser.
To simplify interpretation of the results, therefore, XiBIT tries
where possible to keep the test cases as simple as possible.</textual></para><para class="po-block e164 e164"><textual class="po-textual">To test the effect of DTD location and validity, for example,
test cases of the following form are used.  The external DTD has 
a single declaration:
</textual><programlisting class="po-block e165 e165" xml:space="preserve"><textual class="po-textual">&lt;!ELEMENT valid-document (#PCDATA) &gt;</textual></programlisting><textual class="po-textual">
Valid documents take the following form; the form of the
system identifier is the only thing that varies.
</textual><programlisting class="po-block e166 e166" xml:space="preserve"><textual class="po-textual">&lt;!DOCTYPE valid-document SYSTEM "lib/wabash.dtd"&gt;
&lt;valid-document&gt;
  This test document is part of XiBIT:
  XML in the browser interface tests.
&lt;/valid-document&gt;</textual></programlisting><textual class="po-textual">
Invalid documents differ only in the element's generic identifier:
</textual><programlisting class="po-block e167 e167" xml:space="preserve"><textual class="po-textual">&lt;!DOCTYPE valid-document SYSTEM "lib/wabash.dtd"&gt;
&lt;invalid-document&gt;
  This test document is part of XiBIT:
  XML in the browser interface tests.
&lt;/invalid-document&gt;</textual></programlisting><textual class="po-textual">
</textual></para><para class="po-block e168 e168"><textual class="po-textual">Tests involving stylesheets are similarly simple
in structure and have no DTD (on the assumption described
above that DTD processing and stylesheet processing 
can be described independently, unless we encounter
evidence that they interact).  The following test
applies a stylesheet whose URI is a downward-pointing
relative reference:
</textual><programlisting class="po-block e169 e169" xml:space="preserve"><textual class="po-textual">&lt;?xml-stylesheet type="text/xsl" href="lib/down.xsl" ?&gt;
&lt;wf-document&gt;
  This test document is part of XiBIT:
  XML in the browser interface tests.
&lt;/wf-document&gt;</textual></programlisting><textual class="po-textual">
</textual></para><para class="po-block e170 e170"><textual class="po-textual">As mentioned earlier, the tests are produced systematically
by an XQuery module, which defines a function for each
space of variation.  An example may illustrate the construction
of these functions.</textual></para><para class="po-block e171 e171"><textual class="po-textual">For testing the effect of location and stylesheet language
on stylesheet processing, the relevant function begins by
defining the relevant axes of variation:  XSL vs. CSS,
</textual><programlisting class="po-block e172 e172" xml:space="preserve"><textual class="po-textual">
(: define yesno so we can iterate over it conveniently :)
    let $yesno := (true(), false())
    
(: Define the major axes so we can iterate over them :)
(: Axis 1:  XSL or CSS? :)
    for $lang in ('xsl', 'css')
    
(: Axis 2:  location of the stylesheet:  
            absolute or relative?
            Same host or different?  same scheme?
            Downward path? Upward? Deceptive path?
:)
    for 
        (: Is the URI absolute or relative? :)
        $uritype in ('relative', 'absolute'),
        $reltype in ('', 'down', 'up', 'deceptive'),
        $abstype in ('', 'abs', 'diffhost', 'diffscheme')
</textual></programlisting><textual class="po-textual">
These axes are not orthogonal; a </textual><code class="po-atom e173 e173"><textual class="po-textual">where</textual></code><textual class="po-textual"> clause
is used to filter out tuples</textual><footnote class="po-popup e174 e174"><para class="po-block e175 e175"><textual class="po-textual">I.e.,
sets of bindings for the variables </textual><emphasis class="po-inline e176 e176"><textual class="po-textual">$lang</textual></emphasis><textual class="po-textual">, 
</textual><emphasis class="po-inline e177 e177"><textual class="po-textual">$uritype</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e178 e178"><textual class="po-textual">$reltype</textual></emphasis><textual class="po-textual">, 
and </textual><emphasis class="po-inline e179 e179"><textual class="po-textual">$abstype</textual></emphasis><textual class="po-textual">.</textual></para></footnote><textual class="po-textual"> whose values form a
nonsensical combination (like a relative URI reference
pointing to a different host).</textual><footnote class="po-popup e180 e180"><para class="po-block e181 e181"><textual class="po-textual">This
is nonsensical because by definition a relative reference
omits the host name and it defaults to the host of 
the base URI, in this case that of the test case 
itself.</textual></para></footnote><textual class="po-textual">
</textual><programlisting class="po-block e182 e182" xml:space="preserve"><textual class="po-textual">     
(: Specify consistency constraints :)
  where (: only relative URIs have relative types :) 
        ($uritype eq 'relative' or not($reltype))
    and (: only absolute URIs can have abstype :)
        ($uritype eq 'absolute' or not($abstype))
    and (: one or the other, please :)
        ( ($reltype) or ($abstype) or not($uritype))
</textual></programlisting><textual class="po-textual">
For each tuple of bindings satisfying the </textual><code class="po-atom e183 e183"><textual class="po-textual">where</textual></code><textual class="po-textual">
clause, the function then returns a test case description
element.  (It would be possible to generate the test 
case directly, but it proved simpler to separate the
tasks of formulating a description and actually writing
out the test case.)
</textual><programlisting class="po-block e184 e184" xml:space="preserve"><textual class="po-textual">
 return element test-case {
          attribute id { 
            concat($lang, '.',
              if ($uritype) then
                 concat(substring($uritype,1,3), '.',
                        $reltype, $abstype)
              else '')	
          },
          element stylesheet-link {
             attribute type {$lang},
             if ($uritype eq 'relative') then
                attribute uri {$reltype}
             else 
                attribute uri {$abstype}
          },
          &lt;wf-document/&gt;
        }
</textual></programlisting></para><para class="po-block e185 e185"><textual class="po-textual">The query produces elements like the following two,
which describe test cases which call an XSLT stylesheet
with two forms of relative URI:
</textual><programlisting class="po-block e186 e186" xml:space="preserve"><textual class="po-textual">  &lt;test-case id="xsl.rel.down"&gt;
    &lt;trace lang="xsl" uri="relative" reltype="down"/&gt;
    &lt;stylesheet-link type="xsl" uri="down"/&gt;
    &lt;wf-document/&gt;
  &lt;/test-case&gt;
  &lt;test-case id="xsl.rel.up"&gt;
    &lt;trace lang="xsl" uri="relative" reltype="up"/&gt;
    &lt;stylesheet-link type="xsl" uri="up"/&gt;
    &lt;wf-document/&gt;</textual></programlisting><textual class="po-textual">
In the next step, these descriptions are processed
to produce the actual test cases; the first of these 
two descriptions produces the XSLT test case shown
above.</textual></para><para class="po-block e187 e187"><textual class="po-textual">For testing the effect of DTD location and validity on 
processing, the relevant function has the same 
structure, though there are more axes of variation:  
whether an internal subset exists,
whether an external subset exists, the nature of the URI
for an external subset, and validity:
</textual><programlisting class="po-block e188 e188" xml:space="preserve"><textual class="po-textual">
(: define yesno so we can iterate over it conveniently :)
    let $yesno := (true(), false())
    
(: Define the major axes so we can iterate over them :)
(: Axis 1:  internal DTD?  external DTD? :)
    for $intdtd in $yesno,
        $extdtd in $yesno,
         
        (: Subvariation:  if $extdtd, 
           then URI is absolute or relative :)
        $uritype in ('', 'relative', 'absolute'),
        $reltype in ('', 'down', 'up', 'deceptive'),
        $abstype in ('', 'abs', 'diffhost', 'diffscheme'),
        
(: Axis 2:  valid or invalid :)
        $valid in $yesno
</textual></programlisting><textual class="po-textual"> 
The consistency constraints are also more complex: 
</textual><programlisting class="po-block e189 e189" xml:space="preserve"><textual class="po-textual">
(: Specify consistency constraints :)
  where (: only documents with DTDs can be valid or invalid :)
        (($extdtd or $intdtd) or not($valid))
        
    and (: only documents with external DTDs have URIs
           for their DTDs :)
        (($extdtd and ($uritype)) 
         or (not($extdtd) and not($uritype)) )
        
    and (: only relative URIs have relative types :) 
        ($uritype eq 'relative' or not($reltype))
    and (: only absolute URIs can have abstype :)
        ($uritype eq 'absolute' or not($abstype))
    and (: one or the other, please :)
        ( ($reltype) or ($abstype) or not($uritype))
</textual></programlisting><textual class="po-textual">
</textual></para></section><section class="po-hcontainer e190 e190" xml:id="preliminary"><title class="po-block e191 e191"><textual class="po-textual">Preliminary results</textual></title><para class="po-block e192 e192"><textual class="po-textual">The initial version of the XiBIT includes three
test sets.  The first set tests a space of variation
concerned with document validity and DTD location;
its axes are:
</textual><itemizedlist class="po-table e193 e193"><listitem class="po-container e194 e194"><para class="po-block e195 e195"><textual class="po-textual">location of the DTD: internal subset, external
subset, both, or none</textual></para></listitem><listitem class="po-container e196 e196"><para class="po-block e197 e197"><textual class="po-textual">location of the external DTD subset, if any:
</textual><itemizedlist class="po-table e198 e198"><listitem class="po-container e199 e199"><para class="po-block e200 e200"><textual class="po-textual">relative URI pointing down (e.g.
</textual><code class="po-atom e201 e201"><textual class="po-textual">lib/test.dtd</textual></code><textual class="po-textual">)</textual></para></listitem><listitem class="po-container e202 e202"><para class="po-block e203 e203"><textual class="po-textual">relative URI pointing up (e.g.
</textual><code class="po-atom e204 e204"><textual class="po-textual">../lib/test.dtd</textual></code><textual class="po-textual">)</textual></para></listitem><listitem class="po-container e205 e205"><para class="po-block e206 e206"><textual class="po-textual">relative URI pointing first up then down (e.g.
</textual><code class="po-atom e207 e207"><textual class="po-textual">../tests/lib/test.dtd</textual></code><textual class="po-textual">, for a test case which is itself
located in the </textual><code class="po-atom e208 e208"><textual class="po-textual">tests</textual></code><textual class="po-textual"> directory)</textual></para></listitem><listitem class="po-container e209 e209"><para class="po-block e210 e210"><textual class="po-textual">absolute URI with the same host name (etc.) as the test
case</textual></para></listitem><listitem class="po-container e211 e211"><para class="po-block e212 e212"><textual class="po-textual">absolute URI with a different host name</textual><footnote class="po-popup e213 e213"><para class="po-block e214 e214"><textual class="po-textual">In 
principle, the test set should also test
the effect of using a different URI scheme (e.g. </textual><code class="po-atom e215 e215"><textual class="po-textual">ftp</textual></code><textual class="po-textual"> or
</textual><code class="po-atom e216 e216"><textual class="po-textual">https</textual></code><textual class="po-textual"> instead of </textual><code class="po-atom e217 e217"><textual class="po-textual">http</textual></code><textual class="po-textual">).  The 
test-case generation code shown above includes 
</textual><code class="po-atom e218 e218"><textual class="po-textual">diffscheme</textual></code><textual class="po-textual"> as a value, but that line of
testing has run into technical difficulties.</textual></para></footnote></para></listitem></itemizedlist><textual class="po-textual"> 
</textual></para></listitem><listitem class="po-container e219 e219"><para class="po-block e220 e220"><textual class="po-textual">validity of the document</textual></para></listitem></itemizedlist><textual class="po-textual">
</textual></para><para class="po-block e221 e221"><textual class="po-textual">The second and third test sets concern the effect of
stylesheet location on processing, for XSLT and for CSS
stylesheets.  The same variations on relative and absolute
URIs are tested for stylesheets as are listed above
for DTDs.</textual></para><para class="po-block e222 e222"><textual class="po-textual">As may be seen, this initial version of XiBIT tests simple situations
and the results are unlikely to surprise readers familiar
with developing and deploying Web sites.  
(But the author confesses to being surprised by 
some of them, despite having been deploying XML
on the Web successfully for several years.)
</textual><itemizedlist class="po-table e223 e223"><listitem class="po-container e224 e224"><para class="po-block e225 e225"><textual class="po-textual">All browsers tested displayed XML documents without regard to
the validity of the document.  (Most browsers, of course, do not
validate XML documents in any case and so are not in a position to
make any distinction. Internet Explorer did once issue error messages
instead of displaying invalid documents, but this appears not to be
true for current versions of IE, at least since IE 7.)
</textual></para></listitem><listitem class="po-container e226 e226"><para class="po-block e227 e227"><textual class="po-textual">All browsers tested displayed XML documents without regard to
the location of the DTD.  That is, none of them enforced a same-origin
policy against the DTD.  Since non-validating browsers typically do
not read the external DTD subset at all, this may have a certain
logic.  Only one browser tested (Internet Explorer) issued an
error message of the DTD referred to was unavailable.</textual></para></listitem><listitem class="po-container e228 e228"><para class="po-block e229 e229"><textual class="po-textual">For documents retrieved using HTTP, all browsers tested enforced
the same-origin policy on XSLT stylesheets:  stylesheets were
retrieved and applied when they were pointed to using relative
references or using absolute URIs pointing to the host from which the
test case was obtained.  Stylesheets located on a different host were
not retrieved; some browsers (IE, Firefox) gave error messages for
those test cases, others simply displayed a blank screen (as shown
for the final case in the screen shot above).
Stylesheets located in fact on the same host but referred to
using a variant name (e.g. </textual><code class="po-atom e230 e230"><textual class="po-textual">example.org</textual></code><textual class="po-textual"> 
instead of </textual><code class="po-atom e231 e231"><textual class="po-textual">www.example.org</textual></code><textual class="po-textual">, or vice versa) were
treated (as is usual for the same-origin policy) as coming from
a different domain.
</textual></para></listitem><listitem class="po-container e232 e232"><para class="po-block e233 e233"><textual class="po-textual">For documents retrieved from the file system (i.e. using a
</textual><code class="po-atom e234 e234"><textual class="po-textual">file:///</textual></code><textual class="po-textual"> URI), some browsers enforced the same-origin
policy on XSLT stylesheets and some did not.  Some that did
enforce a same-origin policy (e.g. Opera) retrieved and applied any stylesheet
available in the file system, while others (e.g. Firefox) retrieved
only stylesheets located in the same directory as the test case, or
in a subdirectory.  (Firefox also refused to retrieve documents
by following symbolic links, which makes it extremely difficult to
use stylesheets located in a common library directory.)  Chrome
did not apply XSLT stylesheets to any XML document retrieved
from the file system.</textual></para></listitem><listitem class="po-container e235 e235"><para class="po-block e236 e236"><textual class="po-textual">None of the browsers tested enforced a same-origin policy
on CSS stylesheets.</textual><footnote class="po-popup e237 e237"><para class="po-block e238 e238"><textual class="po-textual">The level of CSS
conformance turned out to vary dramatically among the browsers
tested, but no one interested in CSS needs XiBIT to document
that fact.</textual></para></footnote></para></listitem></itemizedlist><textual class="po-textual">
</textual></para><para class="po-block e239 e239"><textual class="po-textual">Some practical implications for users of XML may be inferred from
these facts.  Referring to URIs by way of relative references is more
likely to work than referring to them by means of absolute URIs (for
the browsers tested so far). Users of Firefox and Chrome, however,
will find it impossible to view XML documents from the file system in
those browsers, if the documents use stylesheets located outside the
directory holding the XML document (and thus referred to using URIs of
the form </textual><code class="po-atom e240 e240"><textual class="po-textual">../lib/house-style.xsl</textual></code><textual class="po-textual">).</textual><footnote class="po-popup e241 e241"><para class="po-block e242 e242"><textual class="po-textual"> This
problem can be avoided by running an HTTP server on one's personal
computer and retrieving a document using an
</textual><code class="po-atom e243 e243"><textual class="po-textual">http://localhost</textual></code><textual class="po-textual"> URI instead of a </textual><code class="po-atom e244 e244"><textual class="po-textual">file:</textual></code><textual class="po-textual"> URI,
for those willing to set up a Web server on their local
machine.</textual></para></footnote><textual class="po-textual">
</textual></para></section><section class="po-hcontainer e245 e245" xml:id="further"><title class="po-block e246 e246"><textual class="po-textual">Further work</textual></title><para class="po-block e247 e247"><textual class="po-textual">XiBIT is still in an early stage of its development. The main work
to be done in the immediate future is to make its core set of tests
and test results bigger and better: more test cases, exploring more
axes of variation, more test results from more versions of browsers on
more operating systems, and better tabulation of the raw results.</textual></para><para class="po-block e248 e248"><textual class="po-textual">After a larger core set of tests and test results has been
gathered, it should be possible to perform deeper analysis and gain
better understanding of the results, resulting in better practical
advice for users of XML who would like to publish XML on the Web.
A diagnostic tool to test for and warn about interoperability
issues will be built to make the information gained by testing
practically useful to individual XML publishers.
</textual></para></section><bibliography class="po-hcontainer e249 e249"><title class="po-block e250 e250"><textual class="po-textual">References</textual></title><bibliomixed class="po-block e251 e251" xml:id="iso-iec-2382-01" xreflabel="ISO/IEC 2381-01"><textual class="po-textual">
ISO (International Organization for Standardization),
IEC (International Electro-technical Commission).
</textual><emphasis class="po-inline e252 e252"><textual class="po-textual">ISO/IEC 2382-1:1993
Information technology â Vocabulary â Part 1: Fundamental
terms</textual></emphasis><textual class="po-textual">.
Geneva:  ISO, 1993.
(Cited from Wikipedia article on 
</textual><emphasis class="po-inline e253 e253"><textual class="po-textual">Interoperability</textual></emphasis><textual class="po-textual"> at
</textual><link class="po-inline e254 e254" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/Interoperability" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://en.wikipedia.org/wiki/Interoperability</textual></link><textual class="po-textual">.)
</textual></bibliomixed><bibliomixed class="po-block e255 e255" xml:id="milowski-2009" xreflabel="Milowski 2009"><textual class="po-textual">
Milowski, R. Alexander.
</textual><quote class="po-inline e256 e256"><textual class="po-textual">XML in the Browser: the Next Decade</textual></quote><textual class="po-textual">.
Presented at 
Balisage: The Markup Conference 2009 (MontrÃ©al, Canada, 11-14 August 2009). 
In </textual><emphasis class="po-inline e257 e257"><textual class="po-textual">Proceedings of Balisage: 
The Markup Conference 2009</textual></emphasis><textual class="po-textual">.
Balisage Series on Markup Technologies, vol. 3 (2009). 
</textual><link class="po-inline e258 e258" xlink:actuate="onRequest" xlink:href="http://www.balisage.net/Proceedings/vol3/html/Milowski01/BalisageVol3-Milowski01.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">doi:10.4242/BalisageVol3.Milowski01</textual></link><textual class="po-textual">. 
  doi:</textual><biblioid class="po-atom e259 doi e259"><textual class="po-textual">10.4242/BalisageVol3.Milowski01</textual></biblioid><textual class="po-textual">. 
</textual></bibliomixed><bibliomixed class="po-block e260 e260" xml:id="milowski-2011" xreflabel="Milowski 2011"><textual class="po-textual">
Milowski, R. Alexander.
</textual><quote class="po-inline e261 e261"><textual class="po-textual">Efficient XML Processing in Browsers</textual></quote><textual class="po-textual">.
Presented at 
XML Prague 2011 (Prague, 26-27 March 2011).
Slides on the Web at
</textual><link class="po-inline e262 e262" xlink:actuate="onRequest" xlink:href="http://www.xmlprague.cz/2011/presentations/alex-milowski-efficient-xml.pdf" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.xmlprague.cz/2011/presentations/alex-milowski-efficient-xml.pdf</textual></link><textual class="po-textual">.
</textual></bibliomixed><bibliomixed class="po-block e263 e263" xml:id="oasis-tc-v1se" xreflabel="OASIS 2001"><textual class="po-textual">
OASIS XML Conformance Subcommittee.
</textual><emphasis class="po-inline e264 e264"><textual class="po-textual">XML 1.0 Test Suite, Second Edition</textual></emphasis><textual class="po-textual">.
Working Draft,
15 March 2001.
</textual><link class="po-inline e265 e265" xlink:actuate="onRequest" xlink:href="http://www.oasis-open.org/committees/xml-conformance/suite-v1se/xmlconf-20010315.htm" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.oasis-open.org/committees/xml-conformance/suite-v1se/xmlconf-20010315.htm</textual></link><textual class="po-textual">.
The actual tests are linked from
</textual><link class="po-inline e266 e266" xlink:actuate="onRequest" xlink:href="http://www.oasis-open.org/committees/xml-conformance/xml-test-suite.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.oasis-open.org/committees/xml-conformance/xml-test-suite.html</textual></link><textual class="po-textual">.
</textual></bibliomixed><bibliomixed class="po-block e267 e267" xml:id="w3c-xsl-testsuite" xreflabel="W3C 2001"><textual class="po-textual">
World Wide Web Consortium.  XSL Working Group.
</textual><emphasis class="po-inline e268 e268"><textual class="po-textual">XSL 1.0 Test Suite</textual></emphasis><textual class="po-textual">.
[Ed. Max Froumentin.]
[Cambridge, Sophia-Antipolis, Tokyo]: W3C, 28 August 2001.
</textual><link class="po-inline e269 e269" xlink:actuate="onRequest" xlink:href="http://www.w3.org/Style/XSL/TestSuite/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/Style/XSL/TestSuite/</textual></link><textual class="po-textual">.
</textual></bibliomixed><bibliomixed class="po-block e270 e270" xml:id="w3c-xml-testsuites" xreflabel="W3C 2008[?]"><textual class="po-textual">
World Wide Web Consortium.  XML Core Working Group.
</textual><emphasis class="po-inline e271 e271"><textual class="po-textual">Extensible Markup Language (XML) Conformance Test
Suites</textual></emphasis><textual class="po-textual">.
[Ed. Henry S. Thompson.]
[Cambridge, Sophia-Antipolis, Tokyo]: W3C, [n.d.; 2008?].
</textual><link class="po-inline e272 e272" xlink:actuate="onRequest" xlink:href="http://www.w3.org/XML/Test/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/XML/Test/</textual></link><textual class="po-textual">.
</textual></bibliomixed><bibliomixed class="po-block e273 e273" xml:id="w3c-xml-stylesheet" xreflabel="W3C 2010"><textual class="po-textual">
World Wide Web Consortium.  XML Core Working Group.
</textual><emphasis class="po-inline e274 e274"><textual class="po-textual">Associating Style Sheets with XML documents 1.0 (Second
Edition)</textual></emphasis><textual class="po-textual">.
W3C Proposed Edited Recommendation 09 September 2010.
Ed. James Clark (First Edition), 
Simon Pieters (Second Edition), 
Henry S. Thompson (Second Edition).
[Cambridge, Sophia-Antipolis, Tokyo]: W3C, 2010.	    
</textual><link class="po-inline e275 e275" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/2010/PER-xml-stylesheet-20100909/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/2010/PER-xml-stylesheet-20100909/</textual></link><textual class="po-textual">.
</textual></bibliomixed></bibliography></article></classedDocument>