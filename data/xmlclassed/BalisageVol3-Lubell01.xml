<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.2"><title class="po-block e1 e1"><textual class="po-textual">Documenting and Implementing Guidelines with
  Schematron</textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">Balisage: The Markup Conference 2009</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 11 - 14, 2009</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual">

Data exchange specifications must be broad and general in order to
achieve acceptance, yet they must also be customizable in a controlled
and interoperable manner in order to be useful. This paper describes
an approach employing the Schematron language and literate programming
ideas for developing the guidelines needed to effectively use data
exchange specifications.

      </textual></para></abstract><author class="po-record e8 e8"><personname class="po-record e9 e9"><firstname class="po-field e10 e10"><textual class="po-textual">Joshua</textual></firstname><surname class="po-field e11 e11"><textual class="po-textual">Lubell</textual></surname></personname><personblurb class="po-container e12 e12"><para class="po-block e13 e13"><textual class="po-textual">

Josh Lubell uses information technology to solve manufacturing
engineering and e-business software interoperability problems. He is
particularly interested in long-term retention of digital data and was
awarded the Department of Commerce Silver Medal for his leadership in
developing ISO 10303-203:2008, a standard for representation and
exchange of computer-aided designs.

	</textual></para></personblurb><email class="po-field e14 e14"><textual class="po-textual">lubell@nist.gov</textual></email></author><legalnotice class="po-container e15 e15"><para class="po-block e16 e16"><textual class="po-textual">Official contribution of the National Institute of Standards and Technology; not subject to copyright in the United States.</textual></para></legalnotice></info><section class="po-hcontainer e17 e17"><title class="po-block e18 e18"><textual class="po-textual">Why Guidelines?</textual></title><para class="po-block e19 e19"><textual class="po-textual">

Data exchange specifications for electronic business (e-business)
applications describe in a computer-interpretable fashion the
information to be transferred between systems. Thanks to the ubiquity
and success of the Extensible Markup Language [</textual><xref class="po-milestone e20 e20" linkend="xml"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]
as an implementation technology, these specifications are often
encoded using XML schemas [</textual><xref class="po-milestone e21 e21" linkend="xsd"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. XML's approval as a
World Wide Web Consortium (W3C) Recommendation in 1998 precipitated a
deluge of proposed XML schemas for data exchange [</textual><xref class="po-milestone e22 e22" linkend="cover"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], many of them rigidly designed for a specific
vertical area of application. Most of these schemas were subsequently
abandoned as developers learned that having too many non-interoperable
languages hinders rather than enables systems integration.

    </textual></para><para class="po-block e23 e23"><textual class="po-textual">

Recognition of the need for interoperability led to a drive to
standardize XML schemas meeting two
requirements: </textual><itemizedlist class="po-table e24 e24"><listitem class="po-container e25 e25"><para class="po-block e26 e26"><textual class="po-textual">

</textual><emphasis class="po-inline e27 e27"><textual class="po-textual">Customizability</textual></emphasis><textual class="po-textual"> – to enable
interoperable extensions to be added,

</textual></para></listitem><listitem class="po-container e28 e28"><para class="po-block e29 e29"><textual class="po-textual">

</textual><emphasis class="po-inline e30 e30"><textual class="po-textual">Inclusiveness</textual></emphasis><textual class="po-textual"> – to facilitate use in
multiple contexts.

</textual></para></listitem></itemizedlist><textual class="po-textual"> These customizable and inclusive
schemas are more horizontal in nature and fewer in number than the
first generation of proposed schemas. Examples from the e-business and
e-government domains include the Universal Business Language [</textual><xref class="po-milestone e31 e31" linkend="ubl"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], the Open Applications Group Integration
Specification [</textual><xref class="po-milestone e32 e32" linkend="oagis"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], and the National Information
Exchange Model [</textual><xref class="po-milestone e33 e33" linkend="niem"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] standards.

    </textual></para><para class="po-block e34 e34"><textual class="po-textual">

Unlike e-business and e-government, where the use of markup language
for data exchange is a relatively recent phenomenon, customizable and
inclusive standards for textual documentation have been around for
decades and predate the advent of XML. Examples of widely used
horizontal and extensible XML schema standards for text documentation
include DocBook [</textual><xref class="po-milestone e35 e35" linkend="docbook"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], Darwin Information Typing
Architecture [</textual><xref class="po-milestone e36 e36" linkend="dita"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], the Text Encoding Initiative
[</textual><xref class="po-milestone e37 e37" linkend="tei"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], and S1000D [</textual><xref class="po-milestone e38 e38" linkend="s1000d"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. These
documentation standards (with the exception of DITA) have been in
existence longer than UBL, OAGIS, and NIEM.

    </textual></para><para class="po-block e39 e39"><textual class="po-textual">

Whether they apply to e-business or text processing applications,
interoperable data exchange specifications must be both inclusive
enough to appeal to a broad community of developers and customizable
enough to allow developers to add new elements when needed. This is
where </textual><emphasis class="po-inline e40 e40"><textual class="po-textual">guidelines</textual></emphasis><textual class="po-textual"> — or rules — come
into play. A schema that is inclusive is typically loosely specified
in order to make it acceptable to the community at large. This means
heavy use of optional elements, optional attributes, unrestricted data
types and, possibly, unconstrained content models. The result is a
schema that often needs to be more tightly constrained for specific
use cases, by mutual agreement of the actors involved. Such guidelines
are commonly called </textual><emphasis class="po-inline e41 e41"><textual class="po-textual">business rules</textual></emphasis><textual class="po-textual">.

    </textual></para><para class="po-block e42 e42"><textual class="po-textual">

As a simple example of a business rule adding an additional constraint
to a schema, consider a data exchange schema with an element
</textual><code class="po-atom e43 e43"><textual class="po-textual">policy</textual></code><textual class="po-textual">, where </textual><code class="po-atom e44 e44"><textual class="po-textual">policy</textual></code><textual class="po-textual"> has an attribute
</textual><code class="po-atom e45 e45"><textual class="po-textual">status</textual></code><textual class="po-textual"> whose type is a string. Now suppose that a group
implementing the schema adds a business rule to further constrain
</textual><code class="po-atom e46 e46"><textual class="po-textual">status</textual></code><textual class="po-textual"> to be one of an enumerated set of
values. Validating an XML instance is now a two-step process. First,
the instance is validated against the original schema. If the instance
is schema-valid, it is then validated against the business rule. </textual><xref class="po-milestone e47 e47" linkend="br-example"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> shows the validation steps.

    </textual></para><figure class="po-container e48 e48" xml:id="br-example"><mediaobject class="po-container e49 e49"><imageobject class="po-container e50 e50"><imagedata class="po-meta e51 e51" fileref="../../../vol3/graphics/Lubell01/Lubell01-001.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e52 e52"><para class="po-block e53 e53"><textual class="po-textual">Validation of an instance against a schema with an
	  added business rule.</textual></para></caption></mediaobject></figure><para class="po-block e54 e54"><textual class="po-textual">

XML schema Naming and Design Rules [</textual><xref class="po-milestone e55 e55" linkend="ndr"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] are a
noteworthy special case of business rules. An NDR is a set of
guidelines for developing a new XML schema or extending an existing
schema.  NDRs are useful both for promoting good design practice and
for ensuring that schema developers follow consistent naming
conventions. NDR validation is similar to the general case shown
in </textual><xref class="po-milestone e56 e56" linkend="br-example"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, except that the XML schema is a
schema defining the syntax of the XML schema definition language, the
XML instance is a schema specified in that definition language, and
the business rules are an NDR. </textual><xref class="po-milestone e57 e57" linkend="ndr-example"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> shows an
example where an XML schema containing a complex type definition
containing an </textual><code class="po-atom e58 e58"><textual class="po-textual">all</textual></code><textual class="po-textual"> group is validated against an NDR with
a rule forbidding the use of </textual><code class="po-atom e59 e59"><textual class="po-textual">all</textual></code><textual class="po-textual">.

    </textual></para><figure class="po-container e60 e60" xml:id="ndr-example"><mediaobject class="po-container e61 e61"><imageobject class="po-container e62 e62"><imagedata class="po-meta e63 e63" fileref="../../../vol3/graphics/Lubell01/Lubell01-002.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e64 e64"><para class="po-block e65 e65"><textual class="po-textual">Validation of an XML schema against an NDR.</textual></para></caption></mediaobject></figure><para class="po-block e66 e66"><textual class="po-textual">

The NDR approach is applicable to any schema language with an XML
syntax and a “schema for schemas” defining the grammar
of the schema language. However, NDRs are most often used to promote
quality and interoperability of schemas written in the W3C XML schema
definition language. This is because many large-scale data exchange
specifications are defined using W3C XML schemas, and standards
developers have found that the W3C XML schema definition language's
many features must be used judiciously to ensure that extensions are
compatible with one another and with the base schema.

    </textual></para></section><section class="po-hcontainer e67 e67"><title class="po-block e68 e68"><textual class="po-textual">Implementing Guidelines with Schematron</textual></title><para class="po-block e69 e69"><textual class="po-textual">

To summarize the previous section, XML data exchange schemas need to
be both inclusive and customizable, guidelines known as
</textual><emphasis class="po-inline e70 e70"><textual class="po-textual">business rules</textual></emphasis><textual class="po-textual"> are used to make an inclusive
schema more restrictive to a subset of the exchange schema's users,
and guidelines known as </textual><emphasis class="po-inline e71 e71"><textual class="po-textual">NDRs</textual></emphasis><textual class="po-textual"> are used to control
the use of the exchange schema's definition language for the purpose
of ensuring that schema extensions are interoperable. Many data
exchange standards allow both for the addition of constraints via
business rules and for the addition of extensions as permitted by an
NDR.

    </textual></para><para class="po-block e72 e72"><textual class="po-textual">

But guidelines in and of themselves are of only limited value unless
they are implemented in software. Without automated enforcement,
guidelines may be subject to multiple human interpretations. Also, a
set of guidelines may be inconsistent, making it impossible for an XML
document to satisfy one guideline without violating another. While
implementing guidelines does not prevent these problems, the
implementation process often makes ambiguities and inconsistencies
more obvious and thus more likely to be discovered and remedied. Most
important, automating guideline enforcement makes it more likely that
the guidelines will actually be followed as opposed to relying on
human diligence alone.

    </textual></para><para class="po-block e73 e73"><textual class="po-textual">

Because NDRs are a special case of business rules, any implementation
method for business rules is also applicable for NDRs. Although just
about any computer-interpretable language is a potential guideline
implementation method, a popular choice is Schematron [</textual><xref class="po-milestone e74 e74" linkend="schematron"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], a schema language for XML. Schematron differs
from other schema languages in that it is rule-based and uses XPath
[</textual><xref class="po-milestone e75 e75" linkend="xpath"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] expressions instead of grammars. Instead of
imposing a grammar on an XML document, a Schematron processor applies
assertions to specific context paths within the document. If the XML
document fails to meet an assertion, a diagnostic message supplied by
the author of the Schematron schema is displayed. Because Schematron
supports assertions about arbitrary patterns in XML documents,
Schematron can enforce constraints that would be hard to enforce using
grammar-based schema languages. Also, Schematron's modular, rule-based
syntax and author-supplied diagnostic messages make it an attractive
method for implementing guidelines</textual><footnote class="po-popup e76 e76"><para class="po-block e77 e77"><textual class="po-textual">Version 1.1 of the
W3C XML Schema standard [</textual><xref class="po-milestone e78 e78" linkend="xsd11"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], a Candidate
Recommendation at the time of this writing, adds Schematron-like
capabilities to the XML Schema Definition Language. Once
implementations become available, XML Schema 1.1 might be worth
considering as an alternative to Schematron.</textual></para></footnote><textual class="po-textual">.

    </textual></para><para class="po-block e79 e79"><textual class="po-textual">

</textual><xref class="po-milestone e80 e80" linkend="exchange-spec"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> shows how NDRs, business rules, and
Schematron fit together in the context of data exchange schema
interoperability. The NDR controls how the schema is extended should
new definitions need to be added. The business rules facilitate
inclusiveness by allowing a broad-based consensus standard to coexist
alongside additional constraints required by exchange partners. Both
the business rules and the NDR (which is effectively a set of business
rules restricting the language — typically the W3C XML schema
definition language — used to specify the exchange schema) may
be implemented in Schematron. This implementation scenario sets the
stage for the next section's discussion of implementing guidelines using
a literate programming approach.

    </textual></para><figure class="po-container e81 e81" xml:id="exchange-spec"><mediaobject class="po-container e82 e82"><imageobject class="po-container e83 e83"><imagedata class="po-meta e84 e84" fileref="../../../vol3/graphics/Lubell01/Lubell01-003.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e85 e85"><para class="po-block e86 e86"><textual class="po-textual">Using NDR, business rules and Schematron to ensure
	  exchange schema interoperability.</textual></para></caption></mediaobject></figure></section><section class="po-hcontainer e87 e87"><title class="po-block e88 e88"><textual class="po-textual">A Literate Programming Approach</textual></title><para class="po-block e89 e89"><textual class="po-textual">

Literate programming [</textual><xref class="po-milestone e90 e90" linkend="knuth"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, </textual><xref class="po-milestone e91 e91" linkend="litprog"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], a software development method invented by Donald
Knuth, seeks to free implementers from the confines of computer
language syntax — allowing them to code in a manner more
consistent with human thought processes than traditional programming
paradigms. Literate programming elevates human narrative to the same
status as computer-interpretable code by allowing them to be
co-mingled together in a “web.” A literate programming
system includes tools for “weaving” formatted
human-readable documentation from the source and
“tangling” (i.e., rearranging) the source to produce
compilable code.

    </textual></para><para class="po-block e92 e92"><textual class="po-textual">

In traditional approaches, documentation for human consumption such as
source code comments, algorithm descriptions, requirements, and design
rationale has second class status relative to computer-interpretable
code. Even when source code in traditionally-developed software is
well-documented with comments, the comments serve as an aid to
understanding the code rather than something from which the code
evolves. Because XML is well suited both for data exchange between
software applications and for producing human-readable documentation
in numerous formats, XML and literate programming are a good
fit. Therefore, it is no surprise that a number of literate
programming-inspired XML applications have been developed [</textual><xref class="po-milestone e93 e93" linkend="reiss"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. One of the more well-known of these is “One
Document Does it all” (ODD) [</textual><xref class="po-milestone e94 e94" linkend="ODD"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], a literate
programming XML vocabulary from which TEI schemas and documentation
can be generated [</textual><xref class="po-milestone e95 e95" linkend="Roma"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].

    </textual></para><para class="po-block e96 e96"><textual class="po-textual">

Schematron is a particularly useful literate programming tool for
documenting and implementing guidelines. Schematron's syntax mimics an
itemized list of guidelines. Schematron gives authors full flexibility
in specifying diagnostic messages triggered upon an assertion passing
or failing. And Schematron allows for “always-true”
assertions, enabling guidelines that are untestable or unimplemented
to nevertheless be included in the Schematron schema. Consider the
following rule, adapted from [</textual><xref class="po-milestone e97 e97" linkend="jelliffe"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]:

</textual><programlisting class="po-block e98 e98" xml:space="preserve"><textual class="po-textual">
&lt;sch:rule context="/"&gt;
   &lt;sch:assert test="true()"  role="Untestable" &gt;The document shall 
be maintainable&lt;/sch:assert&gt;
   &lt;sch:assert test="true()"  role="UnImplemented" &gt;All terms must be
standard English words.&lt;/sch:assert&gt;
&lt;/sch:rule&gt;
</textual></programlisting><textual class="po-textual">

A Schematron processor will not check for these two
constraints. However, the Schematron language not only allows for
expressing text describing the constraints, but also provides
constructs such as the </textual><code class="po-atom e99 e99"><textual class="po-textual">role</textual></code><textual class="po-textual"> attribute for metadata.
Additionally, Schematron processors ignore foreign markup and child
elements inside foreign markup, making it easy to intersperse the
Schematron syntax with content marked up in a text documentation
language such as DocBook or the Extensible HyperText Markup Language
[</textual><xref class="po-milestone e100 e100" linkend="xhtml"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].

    </textual></para><para class="po-block e101 e101"><textual class="po-textual">

Consider the following Schematron schema containing two business
rules. The first rule, from </textual><xref class="po-milestone e102 e102" linkend="br-example"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, restricts a
policy's status to an enumerated set of values. The second rule, a
co-occurrence constraint, requires an “approved” policy
to have an effective date.

</textual><programlisting class="po-block e103 e103" xml:space="preserve"><textual class="po-textual">
&lt;sch:schema xmlns:sch="http://purl.oclc.org/dsdl/schematron"
	    xmlns="http://www.w3.org/1999/xhtml"&gt;
  &lt;sch:title&gt;Business Rules&lt;/sch:title&gt;
  &lt;sch:pattern&gt;
    &lt;sch:rule context="policy"&gt;
      &lt;h3&gt;Rule 1&lt;/h3&gt;
      &lt;p&gt;A policy's status must be either &lt;strong&gt;draft&lt;/strong&gt;,
&lt;strong&gt;approved&lt;/strong&gt;, or &lt;strong&gt;deprecated&lt;/strong&gt;.&lt;/p&gt;
      &lt;sch:assert test=
"@status = 'draft' or @status = 'approved' or @status = 'deprecated'"&gt;
Value for attribute 'status' of element 'policy' is not one of
'draft', 'approved', 'deprecated'.&lt;/sch:assert&gt;
    &lt;/sch:rule&gt;
    &lt;sch:rule context="policy/@status[. = 'approved']"&gt;
      &lt;h3&gt;Rule 2&lt;/h3&gt;
      &lt;p&gt;An approved policy must specify an effective date.&lt;/p&gt;
      &lt;sch:assert test="../@effectiveDate"&gt;
Value for attribute 'status' of element 'policy' is 'approved', but
attribute 'effectiveDate' is not present.&lt;/sch:assert&gt;
    &lt;/sch:rule&gt;
  &lt;/sch:pattern&gt;
&lt;/sch:schema&gt;
</textual></programlisting><textual class="po-textual">

This is a perfectly valid Schematron schema, even though it contains
XHTML markup. The XHTML-enhanced Schematron exemplifies the literate
programming ideal of a single source co-mingling processable code with
documentation, where the code and documentation have equal status. The
Schematron-valid source can be used as-is by a Schematron processor to
validate an XML instance against the business rules — no
literate programming “tangling” operation is needed. The
formatted web page shown in </textual><xref class="po-milestone e104 e104" linkend="formatted-rules"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> is
generated using a very simple transformation accomplishing the
literate programming “weaving” operation.

    </textual></para><figure class="po-container e105 e105" xml:id="formatted-rules"><mediaobject class="po-container e106 e106"><imageobject class="po-container e107 e107"><imagedata class="po-meta e108 e108" fileref="../../../vol3/graphics/Lubell01/Lubell01-004.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e109 e109"><para class="po-block e110 e110"><textual class="po-textual">Documentation generated using a simple transformation
	  of the Schematron schema.</textual></para></caption></mediaobject></figure><para class="po-block e111 e111"><textual class="po-textual">

Although the example uses XHTML rather than DocBook for enhancing the
Schematron, DocBook may actually be more suitable since the DocBook
data model is designed specifically for representing technical
documentation. I choose XHTML over DocBook for the examples in this
paper purely as a convenience to myself and to readers. Generating
formatted output from XHTML is easy. And anyone familiar with XML
technologies has seen XHTML syntax.

    </textual></para></section><section class="po-hcontainer e112 e112"><title class="po-block e113 e113"><textual class="po-textual">The NDRProfile Experience</textual></title><para class="po-block e114 e114"><textual class="po-textual">

The previous section presented the case for implementing guidelines
using a Schematron-based literate programming approach. This section
discusses a recent effort employing a non-literate programming
approach to guidelines (specifically NDR) development.

    </textual></para><para class="po-block e115 e115"><textual class="po-textual">

The National Institute of Standards and Technology (NIST) Quality of
Design (QOD) application [</textual><xref class="po-milestone e116 e116" linkend="morris"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] provides a
mechanism for checking XML schema design quality against NDRs in a
collaborative environment.  Recognizing the need for an XML vocabulary
to represent NDRs, NIST created NDRProfile [</textual><xref class="po-milestone e117 e117" linkend="harvey"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]
— an XML schema providing a common format in which NDRs can be
exchanged, managed and reused. Although the NDRProfile schema's
development was inspired by QOD, the schema can be used independently
of QOD, either as a means of authoring an NDR document or as a vehicle
for sharing rules between NDRProfile schema-compliant software
applications.

    </textual></para><para class="po-block e118 e118"><textual class="po-textual">

Unlike the previous section's example co-mingling Schematron and
XHTML, NDRProfile represents a set of guidelines using its own
specialized vocabulary. Implementations of each guideline are
specified using a </textual><code class="po-atom e119 e119"><textual class="po-textual">script</textual></code><textual class="po-textual"> element whose content is
computer-interpretable code, most commonly Schematron code. The
following is an example of an NDRProfile instance containing a single
NDR rule for UBL prohibiting the use of the XML Schema
</textual><code class="po-atom e120 e120"><textual class="po-textual">all</textual></code><textual class="po-textual"> element.

    </textual></para><programlisting class="po-block e121 e121" xml:space="preserve"><textual class="po-textual">
&lt;NDRProfile NDRProfileID="prd-UBL-NDR-2.0"&gt;
  &lt;NDRTitle&gt;Universal Business Language Naming and Design Rules&lt;/NDRTitle&gt;
  &lt;OrganizationInformation&gt;
    &lt;OrganizationName&gt;OASIS&lt;/OrganizationName&gt;
    &lt;ContactURI&gt;http://www.oasis-open.org&lt;/ContactURI&gt;
  &lt;/OrganizationInformation&gt;
  &lt;Guidance guidanceID="UBL-2.0-GXS-8"&gt;
    &lt;Classification&gt;General&lt;/Classification&gt;
    &lt;EnforcementLevel&gt;Mandatory&lt;/EnforcementLevel&gt;
    &lt;Status&gt;Draft&lt;/Status&gt;
    &lt;Testability&gt;Fully-Testable&lt;/Testability&gt;
    &lt;GuidanceText&gt;xsd:all MUST NOT be used.&lt;/GuidanceText&gt;
    &lt;TestCases&gt;
      &lt;TestCase testCaseID="UBL-2.0-GXS-8-1" ruleType="ISO-Schematron"&gt;
	&lt;TestName&gt;GXS8&lt;/TestName&gt;
	&lt;Script&gt;&lt;![CDATA[
&lt;?xml version="1.0" encoding="UTF-8"?&gt; 
&lt;schema xmlns="http://purl.oclc.org/dsdl/schematron"&gt; 
  &lt;ns uri="http://www.w3.org/3301/XMLSchema" prefix="xsd"/&gt; 
  &lt;pattern id="UBL-2.0-GSX-8"&gt; 
    &lt;rule context="xsd:all"&gt;
      &lt;report test="true()"&gt;Error: The xsd:all element MUST
NOT be used.&lt;/report&gt;&lt;/rule&gt;&lt;/pattern&gt;&lt;/schema&gt;
]]&gt;&lt;/Script&gt;&lt;/TestCase&gt;&lt;/TestCases&gt;&lt;/Guidance&gt;&lt;/NDRProfile&gt;
    </textual></programlisting><para class="po-block e122 e122"><textual class="po-textual">

This example illustrates a number of disadvantages of the NDRProfile
schema design relative to the approach discussed in the previous
section. Because NDRProfile does not permit foreign markup, the
Schematron code in the </textual><code class="po-atom e123 e123"><textual class="po-textual">script</textual></code><textual class="po-textual"> element must be either
enclosed in a CDATA section, or the left angle brackets must be
escaped. This not only makes the instance uglier, but also requires
extraction of the Schematron code before it can be executed by a
Schematron processor. In the previous section's example, no extraction
is necessary because the document is already a valid Schematron
schema.

    </textual></para><para class="po-block e124 e124"><textual class="po-textual">

Another disadvantage is that NDRProfile lacks the elegance of the
literate programming approach. The code is a second class citizen
relative to the documentation, so the documentation and code do not
share equal status. In fact, an NDRProfile developer is likely to
write the Schematron code as a separate endeavor from authoring the
NDRProfile instance and paste it into the instance after the
fact. This is contrary to literate programming, where the code and
documentation are created in concert with one another.

    </textual></para><para class="po-block e125 e125"><textual class="po-textual">

Finally, because the NDRProfile schema defines its own vocabulary
rather than maximizing reuse of existing XML languages, custom tools
must be developed for authoring, validating, and processing it. Thus
NDRProfile shares the barriers to success of other newly-invented
languages. And it is usually a bad idea to invent a new XML language
[</textual><xref class="po-milestone e126 e126" linkend="bray"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].

    </textual></para><para class="po-block e127 e127"><textual class="po-textual">

So why was NDRProfile designed the way it was? The main reason was
that the normative form of most NDRs is an unstructured document in a
proprietary word processor format. This caused us to think of an
NDRProfile as a text document foremost, rather than as an application
of literate programming. A second reason was that we wanted to allow
for other implementation languages besides Schematron. However, by
using “always-true” assertions, </textual><code class="po-atom e128 e128"><textual class="po-textual">role</textual></code><textual class="po-textual">
metadata, and foreign markup, one can use a Schematron-based
vocabulary while at the same time allowing for other implementation
methods.

    </textual></para><para class="po-block e129 e129"><textual class="po-textual">

The following example shows how an NDRProfile can be represented using
a variant of the previous section's literate programming approach,
with XHTML </textual><code class="po-atom e130 e130"><textual class="po-textual">class</textual></code><textual class="po-textual"> attributes added to provide NDR-specific
annotations.

    </textual></para><programlisting class="po-block e131 e131" xml:space="preserve"><textual class="po-textual">
&lt;sch:schema xmlns:sch="http://purl.oclc.org/dsdl/schematron"
	    xmlns="http://www.w3.org/1999/xhtml" id="prd-UBL-NDR-2.0"&gt;
  &lt;sch:title&gt;Universal Business Language Naming and Design Rules&lt;/sch:title&gt;
  &lt;sch:ns uri="http://www.w3.org/2001/XMLSchema" prefix="xsd"/&gt; 
  &lt;sch:p class="schemaType"&gt;NDRProfile&lt;/sch:p&gt;
  &lt;p class="OrganizationInformation"&gt;
    &lt;span class="OrganizationName"&gt;OASIS&lt;/span&gt;
    &lt;a class="ContactURI" href="http://www.oasis-open.org"&gt;
http://www.oasis-open.org&lt;/a&gt;&lt;/p&gt;
  &lt;sch:pattern id="UBL-2.0-GXS-8"&gt;
    &lt;sch:rule context="xsd:all" id="UBL-2.0-GXS-8-1"&gt;
      &lt;p class="Classification"&gt;General&lt;/p&gt;
      &lt;p class="EnforcementLevel"&gt;Mandatory&lt;/p&gt;
      &lt;p class="Status"&gt;Draft&lt;/p&gt;
      &lt;p class="Testability"&gt;Fully-Testable&lt;/p&gt;
      &lt;p class="GuidanceText"&gt;&lt;strong&gt;GXS8&lt;/strong&gt;: xsd:all MUST NOT
be used.&lt;/p&gt;
      &lt;sch:report test="true()"&gt;Error: The xsd:all element MUST
NOT be used.&lt;/sch:report&gt;&lt;/sch:rule&gt;&lt;/sch:pattern&gt;&lt;/sch:schema&gt;
    </textual></programlisting><para class="po-block e132 e132"><textual class="po-textual">

This approach has neither of the NDRProfile schema's first two
disadvantages. The third disadvantage is minimized by reusing
existing, well-established XML vocabularies as much as possible.

    </textual></para></section><section class="po-hcontainer e133 e133"><title class="po-block e134 e134"><textual class="po-textual">Discussion</textual></title><para class="po-block e135 e135"><textual class="po-textual">

In this paper, I first introduced two kinds of guidelines needed for
effective use of data exchange schemas: business rules for further
constraining a schema, and NDR for controlling the design of schema
extensions. Next I illustrated how Schematron can be used in
conjunction with literate programming principles to simultaneously
document and implement guidelines. I then discussed past experience
with NDRProfile, an approach to encoding guidelines that at the time
seemed intuitive and sensible, but in retrospect is more convoluted
and less efficient than the literate programming approach.

    </textual></para><para class="po-block e136 e136"><textual class="po-textual">

My approach emphasizes Schematron because Schematron is an appropriate
language for implementing NDRs and business rules as well as (with
annotations added) a suitable guideline documentation language. This
is not to imply that all XML-based literate programming systems should
use Schematron. For applications such as ODD, where the underlying TEI
data model is more complex, hierarchical, and harder to represent as a
set of independent rules, Schematron's benefits as a literate
programming tool may not be as great.

    </textual></para><para class="po-block e137 e137"><textual class="po-textual">

A key enabler of the Schematron-based literate programming approach
advocated in this paper is the ability of a single XML document to
incorporate multiple vocabularies. This is distinct from the more
conventional notion of a single-vocabulary XML document that can be
processed multiple ways. An XML document having multiple vocabularies
is not a new idea. Back in the mid-1990s, ISO standardized the
Architectural Form Definition Requirements [</textual><xref class="po-milestone e138 e138" linkend="afdr"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">,
</textual><xref class="po-milestone e139 e139" linkend="lubell"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. Unlike a Document Type Definition (DTD), an
“architecture” as defined by the AFDR need not specify a
complete document type. Instead, an architecture defines rules known
as “architectural forms” that developers can apply in
defining their vocabularies. A document can use multiple
architectures, and architectures themselves can inherit grammar rules
from other architectures.

    </textual></para><para class="po-block e140 e140"><textual class="po-textual">

Although the AFDR never gained widespread traction among XML
developers, the AFDR authors were incredibly forward-thinking in
foreseeing the need to decouple vocabularies from document
types. Software applications today are moving off of desktops and are
increasingly being provided as services over the Internet. XML
developers are coming to realize that XML documents and vocabularies
should mimic the characteristics of the World Wide Web. Since the Web
is a decentralized network of chunks of interconnected information,
XML document designs should maximize the use of small,
independently-developed vocabularies [</textual><xref class="po-milestone e141 e141" linkend="costello"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].

    </textual></para><para class="po-block e142 e142"><textual class="po-textual">

The newly-standardized Namespace-based Validation Dispatching Language
[</textual><xref class="po-milestone e143 e143" linkend="nvdl"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] provides a method for validating XML
documents containing multiple vocabularies defined using different
schema languages. NVDL supports a variety of schema languages
including the XML Schema Definition Language, DTDs, Schematron and
RELAX NG [</textual><xref class="po-milestone e144 e144" linkend="rng"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. NVDL thus enables the validation of
a document such as the previous section's example of a literate
programming approach to NDRProfile. Consider the following NVDL
document describing the validation of a Schematron schema with
embedded XHTML paragraph elements:

    </textual></para><programlisting class="po-block e145 e145" xml:space="preserve"><textual class="po-textual">
&lt;rules xmlns="http://purl.oclc.org/dsdl/nvdl/ns/structure/1.0"
       xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
       startMode="sch"&gt;
  &lt;mode name="sch"&gt;&lt;namespace ns="http://purl.oclc.org/dsdl/schematron"&gt;
      &lt;validate schema="iso-schematron.rng" useMode="xhtmlpara"/&gt;
    &lt;/namespace&gt;&lt;/mode&gt;
  &lt;mode name="xhtmlpara"&gt;&lt;namespace ns="http://www.w3.org/1999/xhtml"&gt;
      &lt;validate schema="p.rng"/&gt;&lt;/namespace&gt;&lt;/mode&gt;&lt;/rules&gt;
    </textual></programlisting><para class="po-block e146 e146"><textual class="po-textual">

This NVDL document specifies that the Schematron schema with embedded
XHTML is validated by initially checking all Schematron elements
against the normative RELAX NG schema (assumed to be in the file
</textual><code class="po-atom e147 e147"><textual class="po-textual">iso-schematron.rng</textual></code><textual class="po-textual">) for the Schematron language. Whenever
an XHTML element is encountered, the XHTML is validated against
</textual><code class="po-atom e148 e148"><textual class="po-textual">p.rng</textual></code><textual class="po-textual">, assumed to be a customization of the normative
RELAX NG schema for XHTML allowing </textual><code class="po-atom e149 e149"><textual class="po-textual">p</textual></code><textual class="po-textual"> as a starting
element. The NVDL document does not validate syntactic correctness of
NDRProfile annotations. NDRProfile annotation checking could be done
by further customization of </textual><code class="po-atom e150 e150"><textual class="po-textual">iso-schematron.rng</textual></code><textual class="po-textual"> and
</textual><code class="po-atom e151 e151"><textual class="po-textual">p.rng</textual></code><textual class="po-textual">, or alternatively by writing a separate Schematron
schema specifically for NDRProfile annotation checking and adding an
“NDRProfile” mode to the NVDL document.

    </textual></para></section><bibliography class="po-hcontainer e152 e152"><title class="po-block e153 e153"><textual class="po-textual">References</textual></title><bibliomixed class="po-block e154 e154" xml:id="afdr" xreflabel="AFDR"><textual class="po-textual">
ISO/IEC 10744:1997. Information processing — Time-based
Structuring Language (HyTime)- 2d edition. Annex A.3 Architectural
Form Definition Requirements (AFDR). [cited 08 Jun
2009]. </textual><link class="po-inline e155 e155" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www1.y12.doe.gov/capabilities/sgml/wg8/document/n1920</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e156 e156" xml:id="bray" xreflabel="Bray"><textual class="po-textual">Tim
    Bray. </textual><emphasis class="po-inline e157 e157"><textual class="po-textual">Don't Invent XML
    Languages</textual></emphasis><textual class="po-textual">. 2006-01-09. [cited 24 Apr
    2009]. </textual><link class="po-inline e158 e158" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.tbray.org/ongoing/When/200x/2006/01/08/No-New-XML-Languages</textual></link></bibliomixed><bibliomixed class="po-block e159 e159" xml:id="costello" xreflabel="Costello"><textual class="po-textual">
Roger Costello. </textual><emphasis class="po-inline e160 e160"><textual class="po-textual">XML Designers: Take Cue from the
Web</textual></emphasis><textual class="po-textual">. xFront. [citied 09 Jun
2009]. </textual><link class="po-inline e161 e161" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://xfront.com/xml-designers-take-cue-from-the-web/index.html</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e162 e162" xml:id="cover" xreflabel="Cover"><textual class="po-textual">
Cover Pages. </textual><emphasis class="po-inline e163 e163"><textual class="po-textual">XML Applications and
Initiatives</textual></emphasis><textual class="po-textual">. [cited 21 May 2009].
</textual><link class="po-inline e164 e164" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://xml.coverpages.org/xmlApplications.html</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e165 e165" xml:id="dita" xreflabel="DITA"><textual class="po-textual">
OASIS. </textual><emphasis class="po-inline e166 e166"><textual class="po-textual">DITA Version 1.1 Specification
Overview</textual></emphasis><textual class="po-textual">. 1 August 2007. [cited 08 May
2009]. </textual><link class="po-inline e167 e167" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://docs.oasis-open.org/dita/v1.1/overview/overview.html</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e168 e168" xml:id="docbook" xreflabel="DocBook"><textual class="po-textual">
Norman Walsh. </textual><emphasis class="po-inline e169 e169"><textual class="po-textual">DocBook 5.0: The Definitive
Guide</textual></emphasis><textual class="po-textual">. ISBN: 156592-580-7. O'Reilly &amp; Associates, Inc. Version
0.0.25. [cited 08 May 2009]. </textual><link class="po-inline e170 e170" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://docbook.org</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e171 e171" xml:id="harvey" xreflabel="Harvey"><textual class="po-textual">Betty Harvey,
Joshua Lubell, Puja Goyal, KC Morris. </textual><emphasis class="po-inline e172 e172"><textual class="po-textual">NDRProfile Schema
Version 1.0 User Guide</textual></emphasis><textual class="po-textual">. National Institute of Standards and
Technology. NISTIR 7547. December 2008. [cited 24 Apr 2009]. </textual><link class="po-inline e173 e173" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://qod.sourceforge.net/ndrprofile/</textual></link></bibliomixed><bibliomixed class="po-block e174 e174" xml:id="jelliffe" xreflabel="Jelliffe"><textual class="po-textual">Rick
Jelliffe. </textual><emphasis class="po-inline e175 e175"><textual class="po-textual">Expressing untested and untestable constraints in
Schematron</textual></emphasis><textual class="po-textual">. [cited 23 Apr
2009]. </textual><link class="po-inline e176 e176" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.oreillynet.com/xml/blog/2007/03/expressing_untested_and_untest.html</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e177 e177" xml:id="knuth" xreflabel="Knuth"><textual class="po-textual">
D.E. Knuth. </textual><emphasis class="po-inline e178 e178"><textual class="po-textual">Literate Programming</textual></emphasis><textual class="po-textual">. The Computer
      Journal 1984 27(2):97-111; doi:</textual><biblioid class="po-atom e179 doi e179"><textual class="po-textual">10.1093/comjnl/27.2.97</textual></biblioid><textual class="po-textual">.
      British Computer Society. [cited 11 May 2009]. </textual><link class="po-inline e180 e180" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.literateprogramming.com/knuthweb.pdf</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e181 e181" xml:id="litprog" xreflabel="LitProg"><textual class="po-textual">Wikipedia. 
</textual><emphasis class="po-inline e182 e182"><textual class="po-textual">Literate programming</textual></emphasis><textual class="po-textual">. [cited 23 Apr 2009]. 
</textual><link class="po-inline e183 e183" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://en.wikipedia.org/wiki/Literate_programming</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e184 e184" xml:id="lubell" xreflabel="Lubell"><textual class="po-textual">
Joshua Lubell. </textual><emphasis class="po-inline e185 e185"><textual class="po-textual">Architectures in an XML World</textual></emphasis><textual class="po-textual">. 
</textual><emphasis class="po-inline e186 e186"><textual class="po-textual">Markup Languages: Theory and
Practice</textual></emphasis><textual class="po-textual">. Vol. 3. No. 4. Fall
      2001. doi:</textual><biblioid class="po-atom e187 doi e187"><textual class="po-textual">10.1162/109966202760152167</textual></biblioid><textual class="po-textual">. [cited 08 Jun 2009]. 
</textual><link class="po-inline e188 e188" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.mel.nist.gov/div826/staff/lubell/xsltoolbox/apex/</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e189 e189" xml:id="morris" xreflabel="Morris"><textual class="po-textual">K.C. Morris et al. 
</textual><emphasis class="po-inline e190 e190"><textual class="po-textual">User's Guide for the Quality of Design Testing Tool and the 
Content Checker</textual></emphasis><textual class="po-textual">. National Institute of Standards and
Technology. NISTIR 7538. October 2008. [cited 11 May 2009]. 
      </textual><link class="po-inline e191 e191" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.mel.nist.gov/publications/view_pub.cgi?pub_id=824715</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e192 e192" xml:id="niem" xreflabel="NIEM"><textual class="po-textual">
National Information Exchange Model. [cited 08 May
2009]. </textual><link class="po-inline e193 e193" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.niem.gov</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e194 e194" xml:id="ndr" xreflabel="NDR"><textual class="po-textual">Cover
Pages. </textual><emphasis class="po-inline e195 e195"><textual class="po-textual">Naming and Design Rules</textual></emphasis><textual class="po-textual">. [cited 24 Apr
2009]. 
</textual><link class="po-inline e196 e196" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://xml.coverpages.org/ndr.html</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e197 e197" xml:id="nvdl" xreflabel="NVDL"><textual class="po-textual">
ISO/IEC 19757-4. </textual><emphasis class="po-inline e198 e198"><textual class="po-textual">Information technology — Document
Schema Definition Languages (DSDL) — Part 4: Namespace-based
Validation Dispatching Language (NVDL)</textual></emphasis><textual class="po-textual">. First edition
2006-06-01. [cited 04 Jun
2009]. </textual><link class="po-inline e199 e199" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.iso.org/PubliclyAvailableStandards</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e200 e200" xml:id="rng" xreflabel="RelaxNG"><textual class="po-textual">
ISO/IEC 19757-2. </textual><emphasis class="po-inline e201 e201"><textual class="po-textual">Information technology — Document
Schema Definition Languages (DSDL) — Part 2:
Regular-grammar-based validation — RELAX NG</textual></emphasis><textual class="po-textual">. First edition
2003-12-01. [cited 09 Jun
2009]. </textual><link class="po-inline e202 e202" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.iso.org/PubliclyAvailableStandards</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e203 e203" xml:id="oagis" xreflabel="OAGIS"><textual class="po-textual">
Open Applications Group Integration Specification (OAGIS) Release
9.3. [cited 07 May 2009]. </textual><link class="po-inline e204 e204" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.oagi.org</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e205 e205" xml:id="ODD" xreflabel="Burnard"><textual class="po-textual">
Lou Burnard and Sebastian Rahtz. </textual><emphasis class="po-inline e206 e206"><textual class="po-textual">RelaxNG with Son of
ODD</textual></emphasis><textual class="po-textual">. Proceedings of </textual><emphasis class="po-inline e207 e207"><textual class="po-textual">Extreme Markup
Languages 2004</textual></emphasis><textual class="po-textual"> conference (Montreal, Quebec). August
2004. [cited 05 Jun
2009]. </textual><link class="po-inline e208 e208" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://conferences.idealliance.org/extreme</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e209 e209" xml:id="reiss" xreflabel="Reiss"><textual class="po-textual">Kevin
Reiss. </textual><emphasis class="po-inline e210 e210"><textual class="po-textual">Literate Documentation for XML
Schema</textual></emphasis><textual class="po-textual">. Digital Humanities 2007 poster materials. [cited 24
Apr 2009]. 
</textual><link class="po-inline e211 e211" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://kreisscas.blogspot.com/2007/06/digital-humanities-materials.html</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e212 e212" xml:id="Roma" xreflabel="Roma"><textual class="po-textual">
Roma: generating validators for the TEI. [cited 05 Jun
2009]. </textual><link class="po-inline e213 e213" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.tei-c.org/Roma</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e214 e214" xml:id="s1000d" xreflabel="S1000D"><textual class="po-textual">
AeroSpace and Defence Industries Association of
Europe. </textual><emphasis class="po-inline e215 e215"><textual class="po-textual">S1000D International specification for technical
publications</textual></emphasis><textual class="po-textual">. Issue 4.0. 2008-08-01. [cited 08 May
2009]. </textual><link class="po-inline e216 e216" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.s1000d.org</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e217 e217" xml:id="schematron" xreflabel="Schematron"><textual class="po-textual">
ISO/IEC 19757-3. </textual><emphasis class="po-inline e218 e218"><textual class="po-textual">Information technology — Document
Schema Definition Languages (DSDL) — Part 3: Rule-based
validation — Schematron</textual></emphasis><textual class="po-textual">. First edition
2006-06-01. [cited 23 Apr
2009]. </textual><link class="po-inline e219 e219" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.iso.org/PubliclyAvailableStandards</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e220 e220" xml:id="tei" xreflabel="TEI"><textual class="po-textual">
Text Encoding Initiative Consortium. </textual><emphasis class="po-inline e221 e221"><textual class="po-textual">TEI P5: Guidelines for
Electronic Text Encoding and Interchange</textual></emphasis><textual class="po-textual">. edited by Lou
Burnard and Syd Bauman. Version 1.3.0. Last updated on February 1,
2009. </textual><link class="po-inline e222 e222" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.tei-c.org</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e223 e223" xml:id="ubl" xreflabel="UBL"><textual class="po-textual">
OASIS. </textual><emphasis class="po-inline e224 e224"><textual class="po-textual">Universal Business Language 1.0</textual></emphasis><textual class="po-textual">. 15
September 2004. [cited 07 May
2009]. </textual><link class="po-inline e225 e225" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://docs.oasis-open.org/ubl/cd-UBL-1.0/</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e226 e226" xml:id="xhtml" xreflabel="XHTML"><textual class="po-textual">
World Wide Web Consortium. </textual><emphasis class="po-inline e227 e227"><textual class="po-textual">XHTML™ 1.0 The Extensible
HyperText Markup Language (Second Edition)</textual></emphasis><textual class="po-textual">. W3C
Recommendation 26 January 2000, revised 1 August 2002. [cited 21 May
2009]. </textual><link class="po-inline e228 e228" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xhtml1/</textual></link><textual class="po-textual">
</textual></bibliomixed><bibliomixed class="po-block e229 e229" xml:id="xml" xreflabel="XML"><textual class="po-textual">
World Wide Web Consortium. </textual><emphasis class="po-inline e230 e230"><textual class="po-textual">Extensible Markup Language (XML)
1.0 (Fifth Edition)</textual></emphasis><textual class="po-textual">. W3C Recommendation 26 November
2008. [cited 15 Apr
2009]. </textual><link class="po-inline e231 e231" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xml/</textual></link></bibliomixed><bibliomixed class="po-block e232 e232" xml:id="xpath" xreflabel="XPath"><textual class="po-textual">
World Wide Web Consortium. </textual><emphasis class="po-inline e233 e233"><textual class="po-textual">XML Path Language (XPath) Version
1.0</textual></emphasis><textual class="po-textual">. W3C Recommendation 16 November 1999. [cited 23 Apr
2009]. </textual><link class="po-inline e234 e234" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xpath</textual></link></bibliomixed><bibliomixed class="po-block e235 e235" xml:id="xsd" xreflabel="XSchema"><textual class="po-textual">
World Wide Web Consortium. </textual><emphasis class="po-inline e236 e236"><textual class="po-textual">XML Schema Part 0: Primer Second
Edition</textual></emphasis><textual class="po-textual">. W3C Recommendation 28 October 2004. [cited 15 Apr
2009]. </textual><link class="po-inline e237 e237" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xmlschema-0/</textual></link></bibliomixed><bibliomixed class="po-block e238 e238" xml:id="xsd11" xreflabel="XSchema1.1"><textual class="po-textual">
World Wide Web Consortium. </textual><emphasis class="po-inline e239 e239"><textual class="po-textual">W3C XML Schema Definition
Language (XSD) 1.1 Part 1: Structures</textual></emphasis><textual class="po-textual">. W3C Candidate
Recommendation 30 April 2009. [cited 11 Jun
2009]. </textual><link class="po-inline e240 e240" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xmlschema11-1/</textual></link><textual class="po-textual">
    </textual></bibliomixed></bibliography></article></classedDocument>