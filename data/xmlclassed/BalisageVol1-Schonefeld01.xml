<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.2" xml:id="Bal20081102"><title class="po-block e1 e1"><textual class="po-textual">A Simple API for XCONCUR</textual></title><subtitle class="po-block e2 e2"><textual class="po-textual">Processing concurrent markup using an event-centric API</textual></subtitle><info class="po-record e3 e3"><confgroup class="po-record e4 e4"><conftitle class="po-field e5 e5"><textual class="po-textual">Balisage: The Markup Conference 2008</textual></conftitle><confdates class="po-field e6 e6"><textual class="po-textual">August 12 - 15, 2008</textual></confdates></confgroup><abstract class="po-container e7 e7"><para class="po-block e8 e8"><textual class="po-textual">
        Programmers can basically choose from two different types APIs
        when working with XML documents. On provides an event-centric
        view (SAX) on the document, while the offers an object-centric
        view (DOM). This contribution introduces an event-centric
        programming interface to work with XCONCUR documents which is
        inspired by the XML's SAX-API. It provides a very easy to use
        API for parsing XCONCUR documents.
      </textual></para></abstract><author class="po-record e9 e9"><personname class="po-record e10 e10"><firstname class="po-field e11 e11"><textual class="po-textual">Oliver</textual></firstname><surname class="po-field e12 e12"><textual class="po-textual">Schonefeld</textual></surname></personname><personblurb class="po-container e13 e13"><para class="po-block e14 e14"><textual class="po-textual">
	  Oliver Schonefeld works in University of Tübingen's
          collaborative research centre Linguistic Data Structures in
          a project that develops the foundations for sustainable
          linguistic resources. He studied computer science at
          University of Bielefeld until 2005. This contribution
          deals with aspects of his forthcoming PhD thesis.
        </textual></para></personblurb><affiliation class="po-record e15 e15"><orgname class="po-block e16 e16"><textual class="po-textual">University of Tübingen</textual></orgname></affiliation><email class="po-field e17 e17"><textual class="po-textual">oliver.schonefeld (AT) uni-tuebingen (DOT) de</textual></email></author><legalnotice class="po-container e18 e18"><para class="po-block e19 e19"><textual class="po-textual">Copyright © 2008 Oliver Schonefeld</textual></para></legalnotice><keywordset class="po-table e20 e20" role="author"><keyword class="po-field e21 e21"><textual class="po-textual">processing XCONCUR</textual></keyword></keywordset></info><section class="po-hcontainer e22 e22" xml:id="sec-intro" xreflabel="1"><title class="po-block e23 e23"><textual class="po-textual">Introduction</textual></title><para class="po-block e24 e24"><textual class="po-textual">
      To process XML documents using a programming language, one can
      basically choose from two different application programming
      interfaces (APIs). The </textual><emphasis class="po-inline e25 e25" role="ital"><textual class="po-textual">Simple API for XML
      processing</textual></emphasis><textual class="po-textual"> (SAX)  is an event-centric interface, while the
      </textual><emphasis class="po-inline e26 e26" role="ital"><textual class="po-textual">Document Object Model</textual></emphasis><textual class="po-textual"> (DOM) provides
      a sophisticated object structure to work with XML
      documents.
      This contribution introduces an event-centric API to work
      with XCONCUR documents, which is inspired by the XML's SAX-API.
    </textual></para><para class="po-block e27 e27"><textual class="po-textual">
      Section </textual><xref class="po-milestone e28 e28" linkend="sec-xconcur"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> gives a brief overview of
      the XCONCUR document syntax, in section </textual><xref class="po-milestone e29 e29" linkend="sec-api"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> an event-centric XCONCUR API is described
      and in section </textual><xref class="po-milestone e30 e30" linkend="sec-conclude"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> contains an
      outlook on further work.
    </textual></para></section><section class="po-hcontainer e31 e31" xml:id="sec-xconcur" xreflabel="2"><title class="po-block e32 e32"><textual class="po-textual">XCONCUR</textual></title><para class="po-block e33 e33"><textual class="po-textual">
      XCONCUR is an extension to XML with major goal to
      provide an convenient method for expressing concurrent
      hierarchies. An XCONCUR document may contain an arbitrary number
      of annotation layers. Each layer can be transformed to a
      well-formed XML document by a simple filtering
      process. Therefore, an XCONCUR document can be seen as set of
      inter-woven XML documents. Figure </textual><xref class="po-milestone e34 e34" linkend="fig-sample"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">
      shows an XCONCUR example document with two annotation
      layers. Each tag is prefixed by an annotation layer id and thus
      assigned to a layer. The XCONCUR schema declarations
      allow to assign an annotation schema to each layer. The
      annotation schema may be written in any of the current XML
      schema languages, e.g. DTD, XML Schema or RELAX NG. If an
      annotation schema has been assigned to an annotation layer, the
      layer is validated using this schema. While the use of
      annotation schemas is optional, an XCONCUR document is required
      to be well-formed: each XCONCUR document can be decomposed in a
      set of XML documents, by selecting one layer and removing the
      tags from other annotation layers and the annotation layer
      prefixes. The resulting XML documents are required to be
      well-formed. Additionally, an XCONCUR constraint declaration can
      optionally be used to associate an XCONCUR-CL constraint set to
      the document, which allows cross-tree validation. For details
      see </textual><xref class="po-milestone e35 e35" linkend="Schonefeld2007"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and </textual><xref class="po-milestone e36 e36" linkend="Witt2007"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.
    </textual></para><figure class="po-container e37 e37" xml:id="fig-sample" xreflabel="1"><title class="po-block e38 e38"><textual class="po-textual">XCONCUR example</textual></title><programlisting class="po-block e39 e39" xml:space="preserve"><textual class="po-textual">&lt;?xconcur version="1.1" encoding="iso-8859-1"?&gt;
&lt;?xconcur-schema layer="l1" root="div" system="teispok2.dtd"?&gt;
&lt;?xconcur-schema layer="l2" root="text" system="teiana2.dtd"?&gt;
&lt;?xconcur-constraint system="peterandpaul.xcs" xconcur:l1="L1" xconcur:l2="L2"?&gt;
&lt;(l1)div type="dialog" org="uniform"&gt;
  &lt;(l2)text&gt;
      &lt;(l1)u who="Peter"&gt;
    &lt;(l2)s&gt;Hey Paul!&lt;/(l2)s&gt;
      &lt;(l2)s&gt;Would you give me
    &lt;/(l1)u&gt;
    &lt;(l1)u who="Paul"&gt;
      the hammer?&lt;/(l2)s&gt;
    &lt;/(l1)u&gt;
  &lt;/(l2)text&gt;
&lt;/(l1)div&gt;</textual></programlisting></figure></section><section class="po-hcontainer e40 e40" xml:id="sec-api" xreflabel="3"><title class="po-block e41 e41"><textual class="po-textual">An event-centric application programming interface</textual></title><para class="po-block e42 e42"><textual class="po-textual">
      The event-centric API for processing XCONCUR documents is
      heavily inspired by XML's SAX API (see </textual><xref class="po-milestone e43 e43" linkend="SaxAPI"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">). It provides a very low-level approach for
      working with XCONCUR documents. While processing a document, the
      parser emits a series of events. An application may receive
      those events and perform custom actions, e.g. build an in-memory
      representation of the document. Since the application ultimately
      decides which events to accept and how to handle them, the
      parser only has to build up a very minimal in-memory
      representation to perform it's work. This streaming approach is
      therefore quite memory-efficient.
    </textual></para><para class="po-block e44 e44"><textual class="po-textual">
      The API basically defines a number of start events, which
      signal the beginning of an entity in the parsed document (e.g. a
      start tag) and their corresponding counterparts. The event signaling
      character data is an exception, since only a sole character data
      event exists without any start or end event. The following list
      contains the events, which are defined by the API. All events
      marked with an asterisk are unique the XCONCUR API, all others
      have been adapted to cope with more than one annotation
      layer.
    </textual><variablelist class="po-table e45 e45"><varlistentry class="po-record e46 e46"><term class="po-block e47 e47"><textual class="po-textual">Start Document ()</textual></term><listitem class="po-container e48 e48"><para class="po-block e49 e49"><textual class="po-textual">
            The beginning of the document has been detected. This event
            is sent after the XCONCUR declaration has been read.
        </textual></para></listitem></varlistentry><varlistentry class="po-record e50 e50"><term class="po-block e51 e51"><textual class="po-textual">End Document ()</textual></term><listitem class="po-container e52 e52"><para class="po-block e53 e53"><textual class="po-textual">
            The end of the document has been detected. This
            event is sent, when the document has been processed completely.
          </textual></para></listitem></varlistentry><varlistentry class="po-record e54 e54"><term class="po-block e55 e55"><textual class="po-textual">Start Layer (layer)</textual><superscript class="po-atom e56 e56"><textual class="po-textual">*</textual></superscript></term><listitem class="po-container e57 e57"><para class="po-block e58 e58"><textual class="po-textual">
            A new annotation layer has been detected. This is event is
            sent, either if an XCONCUR layer declaration has been
            processed or if the root tag of a new annotation layer has
            been found. The name of the annotation layer prefix is
            provided.
          </textual></para></listitem></varlistentry><varlistentry class="po-record e59 e59"><term class="po-block e60 e60"><textual class="po-textual">End Layer (layer)</textual><superscript class="po-atom e61 e61"><textual class="po-textual">*</textual></superscript></term><listitem class="po-container e62 e62"><para class="po-block e63 e63"><textual class="po-textual">
            The end of an annotation layer has been detected, This
            event is send after the matching end tag for the
            annotation layer's root element has been processed. The
            name of the annotation layer prefix is provided.
          </textual></para></listitem></varlistentry><varlistentry class="po-record e64 e64"><term class="po-block e65 e65"><textual class="po-textual">Start Primary Data ()</textual><superscript class="po-atom e66 e66"><textual class="po-textual">*</textual></superscript></term><listitem class="po-container e67 e67"><para class="po-block e68 e68"><textual class="po-textual">
            This events signals the beginning of the character data of
            the document. It is sent, after the root element for all
            annotation layers in the document have been processed.
          </textual></para></listitem></varlistentry><varlistentry class="po-record e69 e69"><term class="po-block e70 e70"><textual class="po-textual">End Primary Data ()</textual><superscript class="po-atom e71 e71"><textual class="po-textual">*</textual></superscript></term><listitem class="po-container e72 e72"><para class="po-block e73 e73"><textual class="po-textual">
            This events signals the end of the actual character data
            of the document. It is sent, right before the first end
            tag of a root element for any annotation has been
            processed.
          </textual></para></listitem></varlistentry><varlistentry class="po-record e74 e74"><term class="po-block e75 e75"><textual class="po-textual">Start Prefix Mapping (layer, prefix, uri)</textual></term><listitem class="po-container e76 e76"><para class="po-block e77 e77"><textual class="po-textual">
            This event signals the beginning of the scope of a
            namespace prefix mapping on a layer. It is sent
            just before start tag event of the element, which declares
            the prefix mapping, is emitted. The event carries
            information about the annotation layer, the namespace
            prefix and the namespace URI is provided. If an element
            defines more than one prefix mapping, the start prefix
            mapping events may occur in any order.
          </textual></para></listitem></varlistentry><varlistentry class="po-record e78 e78"><term class="po-block e79 e79"><textual class="po-textual">End Prefix Mapping (layer, prefix, uri)</textual></term><listitem class="po-container e80 e80"><para class="po-block e81 e81"><textual class="po-textual">
            This event signals the end of the scope of a
            namespace prefix mapping on a layer. It is sent just after
            the end element event for the element, which declared the
            mapping, was emitted. The event carries information about
            the annotaion layer, the namespace prefix and the
            namespace URI is provided. If an element defined more than
            one prefix mapping, the end prefix mapping events may
            occur in any order.
          </textual></para></listitem></varlistentry><varlistentry class="po-record e82 e82"><term class="po-block e83 e83"><textual class="po-textual">Characters (characters)</textual></term><listitem class="po-container e84 e84"><para class="po-block e85 e85"><textual class="po-textual">
            This event signals the character data. More then one
            character data events my be emitted for one chunk of
            character data in the document.
          </textual></para></listitem></varlistentry><varlistentry class="po-record e86 e86"><term class="po-block e87 e87"><textual class="po-textual">Start Element (layer, uri, localname,
        qname, attributes)</textual></term><listitem class="po-container e88 e88"><para class="po-block e89 e89"><textual class="po-textual">
            A start tag has been detected. The event carries the
            annotation layer prefix, the namespace URI, the local
            name and the qualified name of the tag. Furthermore, a list of
            attributes is available. This list is either empty, if the
            element has no attributes or contains the namespace URI,
            local name, qualified name and value for each attribute.
          </textual></para></listitem></varlistentry><varlistentry class="po-record e90 e90"><term class="po-block e91 e91"><textual class="po-textual">End Element (layer, uri, localname, qname)</textual></term><listitem class="po-container e92 e92"><para class="po-block e93 e93"><textual class="po-textual">
            A end tag has been detected. The event carries the
            annotation layer prefix, the namespace URI, the local
            name and the qualified name of the tag.
          </textual></para></listitem></varlistentry></variablelist><textual class="po-textual">
  </textual></para><para class="po-block e94 e94"><textual class="po-textual">
    The major difference to XML's SAX-API is that all events, except
    the characters event, have been modified to also carry the
    annotation layer id, so an application can also take this
    information into account. Furthermore, the start/end layer and
    start/end primary data events have been added. The start/end layer
    events provide an easy mechanism for the application to determine
    which annotation layers exist in an XCONCUR document and perform
    actions, e.g. allocating memory for each layer. Strictly speaking,
    one could derive this information from other events
    (e.g. checking, if the just received start element event carries
    an yet unknown annotation layer id), but by providing the
    start/end layer events, the API eases writing the application,
    since the programmer can rely upon these events. The same hold for
    the start/end primary data events. They signal the start and end
    of the actual character data for a document.
  </textual></para><para class="po-block e95 e95"><textual class="po-textual">
    The XCONCUR SAX-API provides various classes and interfaces. The
    most important entities of the XCONCUR SAX-API are the
    </textual><code class="po-atom e96 e96"><textual class="po-textual">XConcurReader</textual></code><textual class="po-textual"> and </textual><code class="po-atom e97 e97"><textual class="po-textual">ContentHandler</textual></code><textual class="po-textual">
    classes. The </textual><code class="po-atom e98 e98"><textual class="po-textual">XConcurReader</textual></code><textual class="po-textual"> class encapsulates the
    underlying parser</textual><footnote class="po-popup e99 e99" xml:id="fn-parser"><para class="po-block e100 e100"><textual class="po-textual">The parser
    implementation is not part if the API. Different vendors could
    supply their own implementation. The reference implementation of
    the XCONCUR SAX-API currently provides a non-validating
    parser.</textual></para></footnote><textual class="po-textual">. The </textual><code class="po-atom e101 e101"><textual class="po-textual">ContentHandler</textual></code><textual class="po-textual"> defines
    an interface, which needs to be implemented by user's program and
    acts as the message sink for the events generated by the
    parser. The whole API consists of various other auxiliary classes,
    e.g. provide abstract input sources for reading XCONCUR documents
    or error reporting classes.
  </textual></para><para class="po-block e102 e102"><textual class="po-textual">
    Figure </textual><xref class="po-milestone e103 e103" linkend="fig-handler"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> shows an excerpt of a class
    implementing the </textual><code class="po-atom e104 e104"><textual class="po-textual">ContentHandler</textual></code><textual class="po-textual"> interface. Given this
    class, a typical sequence for parsing an XCONCUR document is shown
    in Figure </textual><xref class="po-milestone e105 e105" linkend="fig-invoke"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.
  </textual></para><figure class="po-container e106 e106" xml:id="fig-handler" xreflabel="2"><title class="po-block e107 e107"><textual class="po-textual">An example implementation of </textual><code class="po-atom e108 e108"><textual class="po-textual">ContentHandler</textual></code><textual class="po-textual">
    interface</textual></title><programlisting class="po-block e109 e109" xml:space="preserve"><textual class="po-textual">class MyContentHandler : public ContentHandler {
public:
  virtual void StartElement(const char* const layer,
                            const char* const uri,
                            const char* const localname,
                            const char* const qname,
                            const Attributes &amp;attrs) {
    if (strcmp(layer, "l1")) {
      // do something for start element events on layer "l1"
    }
  }

  virtual void EndElement(const char* const layer,
                          const char* const uri,
                          const char* const localname,
                          const char* const qname) {
    if (strcmp(layer, "l1")) {
      // do something for end elements events on layer "l1"
    }
  }

  // ...
}; // class MyContentHandler</textual></programlisting></figure><figure class="po-container e110 e110" xml:id="fig-invoke" xreflabel="3"><title class="po-block e111 e111"><textual class="po-textual">Typical sequence to invoke the parser</textual></title><programlisting class="po-block e112 e112" xml:space="preserve"><textual class="po-textual">try {
  // create reader instance
  XConcurReader *reader = XConcurReaderFactory::CreateReader();

  // class 'MyContentHandler' extends the ContentHandler interface
  MyContentHandler handler;

  // register content handler with reader
  reader-&gt;SetContentHandler(handler);

  // create input source
  // NOTE: 'input' is an InputStream object which points to an XCONCUR file
  InputSource source(input);

  // parse document
  reader-&gt;parse(&amp;source);
} catch (XConcurException &amp;e) {
  // handle exception
}</textual></programlisting></figure><para class="po-block e113 e113"><textual class="po-textual">
    The C++ reference implementation of the XCONCUR SAX-API contains a
    program called </textual><code class="po-atom e114 e114"><textual class="po-textual">xconcurlint</textual></code><textual class="po-textual">. It uses the API to read
    an XCONCUR document and prints the events, which are emitted by
    the parser. Figure </textual><xref class="po-milestone e115 e115" linkend="fig-xconcurlint"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> shows a
    transcript of the parse of the XCONCUR document from figure </textual><xref class="po-milestone e116 e116" linkend="fig-sample"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. The event types are printed in curly
    brackets. Other event specific information, like annotation layer
    prefix or element name are also printed.
  </textual></para><figure class="po-container e117 e117" xml:id="fig-xconcurlint" xreflabel="4"><title class="po-block e118 e118"><textual class="po-textual">Output created by the </textual><code class="po-atom e119 e119"><textual class="po-textual">xconcurlint</textual></code><textual class="po-textual"> utility</textual></title><programlisting class="po-block e120 e120" xml:space="preserve"><textual class="po-textual">{START LAYER} l1
{START ELEMENT} l1, div
                 type = dialog
                 org = uniform
{START LAYER} l2
{START ELEMENT} l2, text
{START PRIMARY DATA}
{CHARACTERS} "\n      "
{START ELEMENT} l1, u
                 who = Peter
{CHARACTERS} "\n    "
{START ELEMENT} l2, s
{CHARACTERS} "Hey Paul!"
{END ELEMENT} l2, s
{CHARACTERS} "\n      "
{START ELEMENT} l2, s
{CHARACTERS} "Would you give me\n    "
{END ELEMENT} l1, u
{CHARACTERS} "\n    "
{START ELEMENT} l1, u
                 who = Paul
{CHARACTERS} "\n      "
{CHARACTERS} "the hammer?"
{END ELEMENT} l2, s
{CHARACTERS} "\n    "
{END ELEMENT} l1, u
{CHARACTERS} "\n  "
{END PRIMARY DATA}
{END ELEMENT} l2, text
{END LAYER} l2
{END ELEMENT} l1, div
{END LAYER} l1</textual></programlisting></figure></section><section class="po-hcontainer e121 e121" xml:id="sec-conclude" xreflabel="4"><title class="po-block e122 e122"><textual class="po-textual">Conclusion</textual></title><para class="po-block e123 e123"><textual class="po-textual">
      The XCONCUR SAX-API provides a very low-level, yet powerful,
      interface for processing XCONCUR documents. It is a relatively
      simple and easy interface to work with XCONCUR
      documents. Programmers, who are familiar with XML's SAX-API,
      should feel at ease with XCONCUR API really quickly. The API
      makes very few assumptions about the underlying parser and
      provides a uniform interface for using parser implementations
      from different vendors. Furthermore, the API can easily be
      ported to different programming languages. A C++ and a Java
      reference implementation is available</textual><footnote class="po-popup e124 e124" xml:id="fn-request"><para class="po-block e125 e125"><textual class="po-textual">The author provides the software for
      evaluation and academic purposes upon
      request.</textual></para></footnote><textual class="po-textual">. For the Java language bindings, the
      API is implemented in plain Java, while parser uses the C++
      implementation of the parser.
    </textual></para><para class="po-block e126 e126"><textual class="po-textual">
      Future work involves creating a object based API similar to
      XML's DOM-API. Conceptional work for this is currently underway
      and the XCONCUR-DOM parser will be built upon the XCONCUR-SAX
      parser. Furthermore, the Mascarpone XCONCUR editor needs to be
      overhauled to use the new APIs.
    </textual></para></section><appendix class="po-hcontainer e127 e127"><title class="po-block e128 e128"><textual class="po-textual">API interfaces</textual></title><para class="po-block e129 e129"><textual class="po-textual">
      This appendix lists the most fundamental interfaces of the
      XCONCUR SAX-API. The full API contains a few more interfaces and
      classes.
    </textual></para><figure class="po-container e130 e130"><title class="po-block e131 e131"><code class="po-atom e132 e132"><textual class="po-textual">XConcurReader</textual></code><textual class="po-textual"> interface</textual></title><programlisting class="po-block e133 e133" xml:space="preserve"><textual class="po-textual">class XConcurReader {
public:
  virtual ContentHandler* GetContentHandler() const = 0;

  virtual void SetContentHandler(ContentHandler *handler) = 0;

  virtual ErrorHandler* GetErrorHandler() const = 0;

  virtual void SetErrorHandler(ErrorHandler *handler) = 0;

  virtual void Parse(InputSource *source) = 0;

  virtual void SetFeature(const char* const name, const bool value) = 0;

  virtual bool GetFeature(const char* const name) = 0;

  virtual ~XConcurReader();
}; // class XConcurReader</textual></programlisting></figure><figure class="po-container e134 e134"><title class="po-block e135 e135"><code class="po-atom e136 e136"><textual class="po-textual">ContentHandler</textual></code><textual class="po-textual"> interface</textual></title><programlisting class="po-block e137 e137" xml:space="preserve"><textual class="po-textual">class ContentHandler {
public:
  virtual ~ContentHandler();

  virtual void StartDocument() = 0;

  virtual void EndDocument() = 0;

  virtual void StartLayer(const char* const prefix) = 0;

  virtual void EndLayer(const char* const prefix) = 0;

  virtual void StartPrimaryData() = 0;

  virtual void EndPrimaryData() = 0;

  virtual void StartPrefixMapping(const char* const layer,
                                  const char* const prefix,
                                  const char* const uri) = 0;

  virtual void EndPrefixMapping(const char* const layer,
                                const char* const prefix) = 0;

  virtual void Characters(const char* const chars,
                          const size_t offset,
                          const size_t len) = 0;

  virtual void StartElement(const char* const layer,
                            const char* const uri,
                            const char* const localname,
                            const char* const qname,
                            const Attributes &amp;attrs) = 0;

  virtual void EndElement(const char* const layer,
                          const char* const uri,
                          const char* const localname,
                          const char* const qname) = 0;
}; // interface ContentHandler</textual></programlisting></figure><figure class="po-container e138 e138"><title class="po-block e139 e139"><code class="po-atom e140 e140"><textual class="po-textual">Attributes</textual></code><textual class="po-textual"> interface</textual></title><programlisting class="po-block e141 e141" xml:space="preserve"><textual class="po-textual">class Attributes {
public:

  virtual int GetLength() const = 0;

  virtual int GetIndex(const char* const qname) const = 0;

  virtual int GetIndex(const char* const uri,
                       const char* const localname) const = 0;

  virtual const char* const GetQName(const int idx) const = 0;

  virtual const char* const GetURI(const int idx) const = 0;

  virtual const char* const GetLocalName(const int idx) const = 0;

  virtual const char* const GetType(const char* const qname) const = 0;

  virtual const char* const GetType(const char* const uri,
                                    const char* const localname) const = 0;

  virtual const char* const GetType(const int idx) const = 0;

  virtual const char* const GetValue(const char* const qname) const = 0;

  virtual const char* const GetValue(const char* const uri,
                                     const char* const localname) const = 0;

  virtual const char* const GetValue(const int idx) const = 0;

  virtual bool IsDeclared(const char* const qname) const = 0;

  virtual bool IsDeclared(const char* const uri,
                          const char* const localname) const = 0;

  virtual bool IsDeclared(const int idx) const = 0;

  virtual bool IsSpecified(const char* const qname) const = 0;

  virtual bool IsSpecified(const char* const uri,
                           const char* const localname) const = 0;

  virtual bool IsSpecified(const int idx) const = 0;

protected:
  virtual ~Attributes();
}; // interface Attributes</textual></programlisting></figure></appendix><bibliography class="po-hcontainer e142 e142"><title class="po-block e143 e143"><textual class="po-textual">References</textual><footnote class="po-popup e144 e144"><para class="po-block e145 e145"><textual class="po-textual">All online resources have last been
    checked on 2008/08/31.</textual></para></footnote></title><bibliomixed class="po-block e146 e146" xml:id="SaxAPI" xreflabel="Megginson et al. (2002)"><textual class="po-textual">
      David Megginson, </textual><emphasis class="po-inline e147 e147" role="ital"><textual class="po-textual">“Simple API for XML
      processing”</textual></emphasis><textual class="po-textual">. Available online at
      </textual><link class="po-inline e148 e148" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.saxproject.org/quickstart.html</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e149 e149" xml:id="DomAPI" xreflabel="Le Hors et al. (2004)"><textual class="po-textual">
      Arnaud Le Hors, Philippe Le Hégaret, Lauren Wood, Gavin Nicol,
      Jonathan Robie, Mike Champion, Steve Byrne: </textual><emphasis class="po-inline e150 e150" role="ital"><textual class="po-textual">“Document Object Model (DOM) Level 3 Core
      Specification”</textual></emphasis><textual class="po-textual">. World Wide Web Consortium,
      2006. Available online at
      </textual><link class="po-inline e151 e151" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e152 e152" xml:id="Schonefeld2007" xreflabel="Schonefeld (2007)"><textual class="po-textual">
      Oliver Schonefeld: </textual><emphasis class="po-inline e153 e153" role="ital"><textual class="po-textual">“XCONCUR and
      XCONCUR-CL: A constraint-based approach for the validation of
      concurrent markup”</textual></emphasis><textual class="po-textual">. In: Datenstrukturen für
      linguistische Ressourcen und ihre Anwendungen / Data structures
      for linguistic resources and applications: Proceedings of the
      Biennial GLDV Conference 2007, Georg Rehm, Andreas Witt, Lothar
      Lemnitzer (eds), Tübingen Verlag, Germany, 2007. Pp. 347–356.
    </textual></bibliomixed><bibliomixed class="po-block e154 e154" xml:id="Witt2007" xreflabel="Witt at al. (2007)"><textual class="po-textual">
      Andreas Witt, Oliver Schonefeld, Georg Rehm, Jonathan Khoo,
      Kilian Evang: </textual><emphasis class="po-inline e155 e155" role="ital"><textual class="po-textual">“On the Lossless
      Transformation of Single-File, Multi-Layer Annotations into
      Multi-Rooted Trees”</textual></emphasis><textual class="po-textual">. In: Proceedings of Extreme
      Markup Languages 2007, Montréal, Canada, 2007. Available online
      at
      </textual><link class="po-inline e156 e156" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.idealliance.org/papers/extreme/proceedings/html/2007/Witt01/EML2007Witt01.xml</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e157 e157" xml:id="Bray2006" xreflabel="Bray et al. (2006)"><textual class="po-textual">
      Tim Bray, Jean Paoli, C. M. Sperberg-McQueen, Eve Maler,
      Francois Yergeau, John Cowan: </textual><emphasis class="po-inline e158 e158" role="ital"><textual class="po-textual">“Extensible Markup Language (XML)
      1.1”</textual></emphasis><textual class="po-textual">. World Wide Web Consortium, 2006, 2nd
      edition. Available online at </textual><link class="po-inline e159 e159" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/2006/REC-xml11-20060816/</textual></link><textual class="po-textual">
    </textual></bibliomixed></bibliography></article></classedDocument>