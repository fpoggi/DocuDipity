<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.2"><title class="po-block e1 e1"><textual class="po-textual">XML in the Browser: the Next Decade</textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">Balisage: The Markup Conference 2009</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 11 - 14, 2009</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual">At the 1999 XTech conference in San Jose, Netscape demonstrated
      their web browser natively rendering an XML document for the first time.
      It is now a decade later, browsers have changed, and there has possibly
      been forward progress. This paper briefly describes the demonstration
      from 1999 and then questions whether current browsers can or cannot 
      handle what was demonstrated in 1999. It also details how new XML 
      vocabularies can be integrated into the browser to provide a new way 
      forward for XML in the browser.</textual></para></abstract><author class="po-record e8 e8"><personname class="po-record e9 e9"><firstname class="po-field e10 e10"><textual class="po-textual">R.</textual></firstname><othername class="po-field e11 e11"><textual class="po-textual">Alexander</textual></othername><surname class="po-field e12 e12"><textual class="po-textual">Milowski</textual></surname></personname><personblurb class="po-container e13 e13"><para class="po-block e14 e14"><textual class="po-textual">Alex Milowski is a technologist, entrepreneur, developer, and
        mathematician who has worked on markup technologies and their use
        since 1990. Mr. Milowski is also an active and past participant on a
        number of different standards efforts at the W3C: he is currently a
        co-editor of XProc and has been involved in XSLT and XML Schema in
        the past.</textual></para><para class="po-block e15 e15"><textual class="po-textual">Mr. Milowski is also an advocate of open source software and 
          its use for accessible content. He's an avid Firefox extension
        developer--several of which are open source. He is currently working
        on contract for Benetech to produce a Firefox extension that is a
        DAISY e-book reader for the visually disabled.</textual></para></personblurb><affiliation class="po-record e16 e16"><jobtitle class="po-field e17 e17"><textual class="po-textual">Head Geek</textual></jobtitle><orgname class="po-block e18 e18"><textual class="po-textual">Appolux, Inc</textual></orgname></affiliation><email class="po-field e19 e19"><textual class="po-textual">alex.milowski@appolux.com</textual></email></author><legalnotice class="po-container e20 e20"><para class="po-block e21 e21"><textual class="po-textual">Copyright Â© 2009 R. Alexander Milowski. Used by permission.</textual></para></legalnotice><keywordset class="po-table e22 e22" role="author"><keyword class="po-field e23 e23"><textual class="po-textual">browser</textual></keyword><keyword class="po-field e24 e24"><textual class="po-textual">xml applications</textual></keyword><keyword class="po-field e25 e25"><textual class="po-textual">browser extensions</textual></keyword></keywordset></info><section class="po-hcontainer e26 e26"><title class="po-block e27 e27"><textual class="po-textual">"First Hand" XML History</textual></title><para class="po-block e28 e28"><textual class="po-textual">It was Thursday, March 11th and the last day of XTech 1999 in San
    Jose, California, just before lunch. We'd just heard a presentation from
    Microsoft about their vision for client and server XML and what we should
    expect in IE (Internet Explorer) 5. I and few of my colleagues were
    standing in the back, arms crossed, ready for the session to be over. The
    next presentation [</textual><xref class="po-milestone e29 e29" linkend="xtech-slides-1999"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] was from Netscape
    about their new Gecko rendering engine and what came next was going to
    make our day.</textual></para><para class="po-block e30 e30"><textual class="po-textual">The first six slides went through more technical information than
    most wanted about how it was all going to work together and on the seventh
    slide was a demo. The demo consisted of a simple XML document listing six
    books, their titles, authors, and ISBN numbers that had been rendered via
    CSS natively for the first time in a widely used, open-source, commercial
    web browser [</textual><xref class="po-milestone e31 e31" linkend="xtech-books-1999"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. For some of us, that
    was delivery on the promise of rendering XML on the web and surprise to
    many in the room. It deserved and received a standing ovation.</textual></para><para class="po-block e32 e32"><textual class="po-textual">The demo continued in that not only was the document able to be
    rendered, but Javascript was used to add semantics to a set of buttons
    that toggled the sort order (via title, author, or ISBN) and the style (as
    a simple list or boxes). The style changes were simply enabling and
    disabling of different CSS stylesheets with a dramatic effect on the
    document. This again deserved applause.</textual></para><para class="po-block e33 e33"><textual class="po-textual">They could have stopped there with some success but there was more
    to be seen. A few slides later was a final demo that demonstrated
    client-side harvesting of information [</textual><xref class="po-milestone e34 e34" linkend="xtech-tocdemo-1999"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. An IRS document in XML was presented
    that contained a small box with a button labeled "Contents" on the right.
    When this button was pressed, TOC items were harvested from the document
    and a collapsible table of contents was displayed on the left side of the
    document. When a TOC item was clicked, the document navigated to the
    item's location in the document. Unbeknownst to the users at the
    conference, this was accomplished via Simple XLinks [</textual><xref class="po-milestone e35 e35" linkend="simple-link"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] embedded in the TOC.</textual></para><para class="po-block e36 e36"><textual class="po-textual">Elated and hungry we all went to lunch with "success" on our minds.
    We had just stood witness to the start of an avalanche, or so we thought,
    of delivery of XML content to users. We were no longer bound to the
    perceived limitations of HTML.</textual></para></section><section class="po-hcontainer e37 e37"><title class="po-block e38 e38"><textual class="po-textual">The Status Quo</textual></title><para class="po-block e39 e39"><textual class="po-textual">Given the demos from 1999, the simple question is where are we today
    after a decade of "progress". Testing with IE 6, IE7, IE 8, Firefox,
    Safari, and Andriod's WebKit-based mobile browser, we get these
    results:</textual></para><table class="po-container e40 e40"><tr class="po-table e41 e41"><th class="po-field e42 e42"><textual class="po-textual">Browser</textual></th><th class="po-field e43 e43"><textual class="po-textual">Books Demo</textual></th><th class="po-field e44 e44"><textual class="po-textual">TOC Demo</textual></th></tr><tr class="po-table e45 e45"><th class="po-field e46 e46"><textual class="po-textual">Firefox 3.x</textual></th><td class="po-block e47 e47"><textual class="po-textual">Yes</textual></td><td class="po-block e48 e48"><textual class="po-textual">Yes</textual></td></tr><tr class="po-table e49 e49"><th class="po-field e50 e50"><textual class="po-textual">Safari 4.x</textual></th><td class="po-block e51 e51"><textual class="po-textual">Yes</textual></td><td class="po-block e52 e52"><textual class="po-textual">Partial</textual></td></tr><tr class="po-table e53 e53"><th class="po-field e54 e54"><textual class="po-textual">Andriod (WebKit)</textual></th><td class="po-block e55 e55"><textual class="po-textual">Yes</textual></td><td class="po-block e56 e56"><textual class="po-textual">Partial</textual></td></tr><tr class="po-table e57 e57"><th class="po-field e58 e58"><textual class="po-textual">IE 6</textual></th><td class="po-block e59 e59"><textual class="po-textual">No - Blank Page</textual></td><td class="po-block e60 e60"><textual class="po-textual">No - Errors</textual></td></tr><tr class="po-table e61 e61"><th class="po-field e62 e62"><textual class="po-textual">IE 7</textual></th><td class="po-block e63 e63"><textual class="po-textual">No - Blank Page</textual></td><td class="po-block e64 e64"><textual class="po-textual">No - Errors</textual></td></tr><tr class="po-table e65 e65"><th class="po-field e66 e66"><textual class="po-textual">IE 8</textual></th><td class="po-block e67 e67"><textual class="po-textual">No - Blank Page</textual></td><td class="po-block e68 e68"><textual class="po-textual">No - Errors</textual></td></tr></table><para class="po-block e69 e69"><textual class="po-textual">The books demo uses CSS for rendering and Javascript via a
    "borrowed" HTML </textual><code class="po-atom e70 e70"><textual class="po-textual">script</textual></code><textual class="po-textual"> element. The CSS is provided by three
    separate stylesheets. In the case of all the "recent" versions of IE, the
    browser fails to render the document and provides no indication of what
    failed. All the other browsers give a consistent rendering and user
    experience--including the loading and execution of the Javascript.</textual></para><para class="po-block e71 e71"><textual class="po-textual">As for the TOC demo, since this demo uses XLink and only Firefox
    completely implements simple links, only Firefox can display this demo
    correctly. WebKit and all WebKit based browsers have some ability to
    detect simple links and provide the hover/click semantics for rendering
    display, but the show/replace semantics are not implemented. For this
    demo, all versions of IE have the same Javascript error related to
    unimplemented parts of the DOM level 2 specification [</textual><xref class="po-milestone e72 e72" linkend="dom2"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].</textual></para><para class="po-block e73 e73"><textual class="po-textual">Based on browser usage statistics [</textual><xref class="po-milestone e74 e74" linkend="usage"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] and
    grouping all WebKit based browser together, we get a penetration of 32.74%
    of browsers that can render XML (excluding XLink handling) as of July 9th,
    2009. Given that IE fails for both demos and consists of around 65.5% on
    that same date, that leaves roughly 1.76% in an unknown state of whether
    they can render and manipulate XML documents. That's not a very good
    result for a decade of browser development--mainly due to IE's dominance
    and failures.</textual></para><para class="po-block e75 e75"><textual class="po-textual">The question remains as to where the decade has gone. One large
    factor has been the stagnation of browser development due to the demise of
    Netscape and the resulting reluctance of Microsoft to really implement the
    W3C's recommendations. Only recently has the public--either general or
    developers--understood the need for conformance to these W3C
    recommendations and how failing to do so affects both the bottom line and
    the user's experience.</textual></para><para class="po-block e76 e76"><textual class="po-textual">Nevertheless, the open source community has emerged strong with two
    viable contenders for core browser technology--Firefox [</textual><xref class="po-milestone e77 e77" linkend="mozilla"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] and WebKit [</textual><xref class="po-milestone e78 e78" linkend="webkit"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. While
    readers are probably more familiar with Mozilla Firefox, the WebKit
    project is the core technology inside Safari, Chrome, the iPhone's web
    browser, and Andriod's web browser. Also, the WebKit project is both open
    source and supported by large companies such as Google and Apple.</textual></para></section><section class="po-hcontainer e79 e79"><title class="po-block e80 e80"><textual class="po-textual">Browser Application Delivery</textual></title><figure class="po-container e81 e81"><mediaobject class="po-container e82 e82"><imageobject class="po-container e83 e83"><imagedata class="po-meta e84 e84" fileref="../../../vol3/graphics/Milowski01/Milowski01-001.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e85 e85"><para class="po-block e86 e86"><textual class="po-textual">The Current Model of Application Delivery</textual></para></caption></figure><para class="po-block e87 e87"><textual class="po-textual">Over the last decade the browser's intrinsic ability to handle
    deliver of complex applications based on some combination of HTML,
    Javascript (ECMAScript), and CSS has dramatically increased such that it
    is an economic force. Delivery of goods and services via browser based
    applications have become not only common but critical to a company's
    continued success. In addition, new kinds of services have been enabled by
    the flexibility provided by the browser as a semi-consistent network-based
    thin client.</textual></para><para class="po-block e88 e88"><textual class="po-textual">This success has been driven by the fact that HTML, not XML, in
    conjunction with CSS and ECMAScript has been spiraling towards a
    consistent target platform--dragging Microsoft kicking and screaming along
    the way. The </textual><emphasis class="po-inline e89 e89"><textual class="po-textual">Application Provider</textual></emphasis><textual class="po-textual"> is then responsible
    for bridging the gap between any </textual><emphasis class="po-inline e90 e90"><textual class="po-textual">Content Providers</textual></emphasis><textual class="po-textual">
    and the target application that will properly render and present their
    content intertwined with an application. Many creative and resourceful
    developers have found ways around browser quirks and lack-of-conformance
    issues to provide consistent toolkits for use by the application
    provider.</textual></para><para class="po-block e91 e91"><textual class="po-textual">The result is the </textual><emphasis class="po-inline e92 e92"><textual class="po-textual">Web User</textual></emphasis><textual class="po-textual"> receives the
    application and content intertwined as unrecognizable HTML from whatever
    source received from the </textual><emphasis class="po-inline e93 e93"><textual class="po-textual">Content Provider</textual></emphasis><textual class="po-textual">. The
    unfortunate consequence is that they cannot necessarily re-purpose the
    information they receive. For many this is not an issue but, depending on
    user's needs, such lack of information repurpose means they may not be
    able to even read or use the application due to accessibility or other
    human constraints. Further, the user may be unable to use augmentation
    tools--such as browser extensions--to extract additional information or
    enhance their user experience from the same lack of the original
    content.</textual></para><para class="po-block e94 e94"><textual class="po-textual">Even with these restrictions, this model has been wildly successful
    and has delivered, on both the business and user sides, a web with some
    aspect of ubiquity. All of this is without much XML involved in the
    client-side delivery of content to the browser. XML has largely been
    hidden on the server-side of the application.</textual></para><section class="po-hcontainer e95 e95"><title class="po-block e96 e96"><textual class="po-textual">Intrinsic Vocabularies</textual></title><para class="po-block e97 e97"><textual class="po-textual">Any markup that a web browser can natively process with some
      well-defined non-trivial semantic without the aid of additional
      constructs (e.g. stylesheets) we'll call an </textual><emphasis class="po-inline e98 e98"><textual class="po-textual">Intrinsic
      Vocabulary</textual></emphasis><textual class="po-textual">. By that definition, HTML is an intrinsic
      vocabulary. Notably, XML is not an intrinsic vocabulary as some
      semantics--at least via something like CSS--are needed to give the
      browser some instructions as what to do with a specific XML
      document.</textual></para><para class="po-block e99 e99"><textual class="po-textual">An application provider can rely upon an intrinsic vocabulary to
      have some baseline semantic. They can still enhance the semantics by
      using additional augmentations such as a stylesheet or ECMAScript. In
      some cases, like SVG or MathML, while a stylesheet may enhance the
      rendering, the vocabulary itself is self-contained and the mere act of
      delivering the vocabulary invokes the intended result.</textual></para><para class="po-block e100 e100"><textual class="po-textual">Given a sufficient set of intrinsic vocabularies for linking,
      diagramming, and specialized communications like Mathematics, an
      application developer can deliver content to the browser with some
      expected result and semantics for the user. In the case of domains like
      Mathematics, by having MathML as an intrinsic vocabulary, augmentation
      by tools or accessibility can be achieved by the simple fact that the
      markup is there instead of a representation (e.g like an image of the
      mathematics).</textual></para><para class="po-block e101 e101"><textual class="po-textual">Unfortunately, the set of currently available intrinsic vocabularies 
        is across the different browsers is limited to a subset of HTML
      4. MathML [</textual><xref class="po-milestone e102 e102" linkend="mathml"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], SVG [</textual><xref class="po-milestone e103 e103" linkend="svg"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], and
      other possible intrinsic vocabularies are limited to specific browsers
      and their implementations are incomplete.</textual></para></section><section class="po-hcontainer e104 e104"><title class="po-block e105 e105"><textual class="po-textual">The Core Intrinsic Vocabularies</textual></title><para class="po-block e106 e106"><textual class="po-textual">There are many choices for core intrinsic vocabularies but it is
      clear that the likely near-term outcomes are the following:</textual></para><itemizedlist class="po-table e107 e107"><listitem class="po-container e108 e108"><para class="po-block e109 e109"><emphasis class="po-inline e110 e110"><textual class="po-textual">HTML5</textual></emphasis><textual class="po-textual"> - provides needed enhancements to
          HTML while providing a standard way of including other vocabularies
          like MathML or SVG and, at the same time, provides an option for an
          XML syntax.</textual></para></listitem><listitem class="po-container e111 e111"><para class="po-block e112 e112"><emphasis class="po-inline e113 e113"><textual class="po-textual">SVG</textual></emphasis><textual class="po-textual"> - provides interactive diagrams that
          can be affected by stylesheets and/or ECMAScript much like
          HTML.</textual></para></listitem><listitem class="po-container e114 e114"><para class="po-block e115 e115"><emphasis class="po-inline e116 e116"><textual class="po-textual">MathML</textual></emphasis><textual class="po-textual"> - provides essential content
          models for mathematical, scientific, or education content.</textual></para></listitem></itemizedlist><para class="po-block e117 e117"><textual class="po-textual">While HTML5 is currently under development, the promise of the
      ability to mix MathML and SVG into an HTML document is very powerful.
      Add to that the ability to deliver an HTML document in XML syntax
      without it being thought of as a separate vocabulary means we can
      utilize all the work that has gone into making XML
      internationalized.</textual></para><para class="po-block e118 e118"><textual class="po-textual">Also, SVG has shown up recently in several browsers. The support
      for this essential vocabulary will certainly grow over time in the
      open-source community. Whether commercial browser vendors like Microsoft
      will support SVG is unknown.</textual></para><para class="po-block e119 e119"><textual class="po-textual">Finally, MathML support is currently only native to Firefox. While
      MathML was the first XML vocabulary produced by the W3C in April 1998,
      only the Mozilla developers have chosen to integrate it into their
      browser--which is, unfortunately, an incomplete implementation. While
      Mathematics is a universal human language with a long history,
      intertwined into so many subjects, and involved in so many
      communications, MathML support has been largely ignored by browser
      vendors.</textual></para><para class="po-block e120 e120"><textual class="po-textual">Nevertheless, what separates an intrinsic vocabulary from a
      non-intrinsic vocabulary is the ability to map from one to the other. A
      non-intrinsic vocabulary can be composed out of intrinsic vocabulary
      components via some kind of mapping. In contrast, an intrinsic
      vocabulary is difficult to implement correctly and efficiently. We need
      our browser vendors to build-in support for intrinsic vocabularies as
      the average developer cannot do so.</textual></para></section><section class="po-hcontainer e121 e121"><title class="po-block e122 e122"><textual class="po-textual">Firefox Extensions for Non-Intrinsic Vocabularies</textual></title><para class="po-block e123 e123"><textual class="po-textual">Unlike many other desktop browsers, Firefox provides the ability
      to write "extensions" [</textual><xref class="po-milestone e124 e124" linkend="extensions"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] in addition to
      "plugins". A plugin typically provides:</textual></para><itemizedlist class="po-table e125 e125"><listitem class="po-container e126 e126"><para class="po-block e127 e127"><textual class="po-textual">the ability to handle a specific media type,</textual></para></listitem><listitem class="po-container e128 e128"><para class="po-block e129 e129"><textual class="po-textual">the ability to render that media type via an HTML
          </textual><code class="po-atom e130 e130"><textual class="po-textual">object</textual></code><textual class="po-textual"> element.</textual></para></listitem></itemizedlist><para class="po-block e131 e131"><textual class="po-textual">In contrast, Firefox has a very successful extensions model that
      provides augmentations to the browser. Extensions can provide what a plugin
      provides as well as add UI elements (menus, sidebars, etc.) and other
      internal components. These augmentations can be used in concert to
      provide a completely new experience for specific tasks or
      services.</textual></para><para class="po-block e132 e132"><textual class="po-textual">An extension is installed by the user and always present, unlike 
        plugins which are invoked as necessary by the browser to handle a 
        specific media type.  Accordingly, the user can add extensions that they 
        rely upon for their "every day" experience when using the browser.</textual></para><para class="po-block e133 e133"><textual class="po-textual">The user can find new extensions by visiting a registry provided
      by Mozilla. Within Firefox, a user can search and access an application
      registry (addons.mozilla.org) where developers have uploaded extensions.
      These extensions have been put through a basic approval process by which
      a user has a minimum level of confidence that the extension isn't
      malicious. Afterwards, the same services are used to allow the developer
      to upload and distribute updates to their extensions.</textual></para><figure class="po-container e134 e134"><mediaobject class="po-container e135 e135"><imageobject class="po-container e136 e136"><imagedata class="po-meta e137 e137" fileref="../../../vol3/graphics/Milowski01/Milowski01-002.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e138 e138"><para class="po-block e139 e139"><textual class="po-textual">Firefox Extensions</textual></para></caption></figure><para class="po-block e140 e140"><textual class="po-textual">Somewhat unique to Firefox is the ability to register new internal
      components via an extension that can be used by other extensions or web
      pages. These components become part of the browser's ecosystem. As such,
      an extension developer can truly "extend" the basic core of the browser
      and add the ability to process new XML vocabularies.</textual></para><para class="po-block e141 e141"><textual class="po-textual">Firefox's extension architecture enables a new application model
      for developing and deploying markup semantics. Previously, had we wanted
      to deliver XML content directly the browser, either it was one of the
      browser's intrinsic vocabularies or it was delegated to a plugin and 
      accessible only as a standalone or via a HTML 'object' element. Within
      this new model, we can develop an extension to the browser that
      understands the XML media type and delegates to our own components using
      the browser's ecosystem and intrinsic capabilities to render the
      document.</textual></para><para class="po-block e142 e142"><textual class="po-textual">With this architecture we can extend Firefox such that it can
      handle any XML vocabulary we choose to send to it as long as it can be
      uniquely identified either by namespace or media type (preferably by
      media type). The basic process by which the extension does this is by
      registering a media type handler component with Firefox's internal
      registry. This component is responsible for handling, parsing, and
      otherwise processing the XML data stream coming across any transport
      Firefox supports (e.g. files, http/https, ftp, etc.).</textual></para><para class="po-block e143 e143"><textual class="po-textual">Since we have a non-intrinsic vocabulary, the extension can
      provide whatever internal semantics to translate, transform, other
      otherwise orchestrate the use of intrinsic vocabularies like HTML,
      MathML, SVG, etc. to render the document and provide user interface
      components to the browser user. From the perspective of the browser
      user, ultimately, the XML document received is just another tab in their
      browser window. From the perspective of the developer, the user
      interface provided can be much more rich in UI widgets, semantics, and
      privileges than what a typical HTML document provides. The end result is
      a merged view of the application and the document's rendering within the
      Firefox user interface.</textual></para><figure class="po-container e144 e144"><mediaobject class="po-container e145 e145"><imageobject class="po-container e146 e146"><imagedata class="po-meta e147 e147" fileref="../../../vol3/graphics/Milowski01/Milowski01-003.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e148 e148"><para class="po-block e149 e149"><textual class="po-textual">Firefox Extensions</textual></para></caption></figure></section><section class="po-hcontainer e150 e150"><title class="po-block e151 e151"><textual class="po-textual">Mobile Applications</textual></title><para class="po-block e152 e152"><textual class="po-textual">Mobile applications as architected by Google for their Andriod OS
      and Apple for their iPhone OS are both remarkably similar to each other
      as well as similar, in a limited way, to Firefox extensions. A mobile
      application is essentially a program that runs on the mobile OS platform
      with access to certain system services. On both the Andriod and iPhone
      platforms, one of these system services is the ability to construct a
      web browser environment based on WebKit.</textual></para><para class="po-block e153 e153"><textual class="po-textual">Much like Firefox's addon registry, the developer uploads the
      application to the "marketplace" where users can download it and add it
      to their mobile phone's environment. Unlike a Firefox browser extension,
      it isn't really merged into the browser and does not augment the general
      web browser's capability. Instead, it provides a separate launching icon
      where the user must go to initiate the application.</textual></para><figure class="po-container e154 e154"><mediaobject class="po-container e155 e155"><imageobject class="po-container e156 e156"><imagedata class="po-meta e157 e157" fileref="../../../vol3/graphics/Milowski01/Milowski01-004.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e158 e158"><para class="po-block e159 e159"><textual class="po-textual">Mobile Application Markets</textual></para></caption></figure><para class="po-block e160 e160"><textual class="po-textual">Even given the limitations in augmenting the general web browser
      on these platforms, the mobile application can do remarkably similar
      things. Within the environment a developer can instantiate a browser
      instance, load content, and manipulate the browser's environment. To
      some extent, the mobile developer can mimic some of the Firefox browser
      extension environment by building their own application.</textual></para><para class="po-block e161 e161"><textual class="po-textual">What a developer cannot do is change the browser's handling of
      media types. If a document is requested that uses some specialized XML
      vocabulary, it will get rendered using the same rules as if the user
      were using the platforms browser application. As such, the application
      developer needs to understand and control what is being given to the
      browser much more so than within Firefox.</textual></para><para class="po-block e162 e162"><textual class="po-textual">In addition, once the application has rendered an XML document
      into some kind of HTML/Intrinsic vocabulary application being displayed
      by the WebKit instance, there are platform-specific limitations as to
      what kinds of interactions between the application and document can
      occur. This can be broken down further into these useful application
      categories:</textual></para><orderedlist class="po-table e163 e163"><listitem class="po-container e164 e164"><para class="po-block e165 e165"><textual class="po-textual">Affect Global Environment: Can the application provide global
          objects accessibly by any document loaded by the browser
          instance?</textual></para></listitem><listitem class="po-container e166 e166"><para class="po-block e167 e167"><textual class="po-textual">Execute Inside: Can the application execute ECMAScript within
          the browser's document?</textual></para></listitem><listitem class="po-container e168 e168"><para class="po-block e169 e169"><textual class="po-textual">Execute Outside: Can the document execute scripts or access
          objects within the application's environment?</textual></para></listitem></orderedlist><table class="po-container e170 e170"><tr class="po-table e171 e171"><th class="po-field e172 e172"><textual class="po-textual">OS/Browser</textual></th><th class="po-field e173 e173"><textual class="po-textual">Affect Global Environment</textual></th><th class="po-field e174 e174"><textual class="po-textual">Execute Inside</textual></th><th class="po-field e175 e175"><textual class="po-textual">Execute Outside</textual></th></tr><tr class="po-table e176 e176"><th class="po-field e177 e177"><textual class="po-textual">Andriod/WebKit</textual></th><td class="po-block e178 e178"><textual class="po-textual">Yes</textual></td><td class="po-block e179 e179"><textual class="po-textual">No</textual></td><td class="po-block e180 e180"><textual class="po-textual">Yes</textual></td></tr><tr class="po-table e181 e181"><th class="po-field e182 e182"><textual class="po-textual">iPhone OS/WebKit</textual></th><td class="po-block e183 e183"><textual class="po-textual">No</textual></td><td class="po-block e184 e184"><textual class="po-textual">Yes</textual></td><td class="po-block e185 e185"><textual class="po-textual">No</textual></td></tr><tr class="po-table e186 e186"><th class="po-field e187 e187"><textual class="po-textual">Firefox</textual></th><td class="po-block e188 e188"><textual class="po-textual">Yes</textual></td><td class="po-block e189 e189"><textual class="po-textual">Yes</textual></td><td class="po-block e190 e190"><textual class="po-textual">Yes</textual></td></tr></table><para class="po-block e191 e191"><textual class="po-textual">The result of this analysis is that Andriod applications cannot
      affect their documents once loaded but their documents can initiate a
      request causing such a change. As such, an Andriod application can work
      around this limitation by a few clever bootstrapping tricks where there
      is always an internal document which proxies subsequently loaded
      documents in an </textual><code class="po-atom e192 e192"><textual class="po-textual">iframe</textual></code><textual class="po-textual">.</textual></para><para class="po-block e193 e193"><textual class="po-textual">Conversely, an iPhone OS application can affect their documents by
      executing scripts within their documents but the document cannot
      interact with the application and the application cannot affect the
      global environment in which the document exists. This severely limits a
      browser based application because the document cannot tell the
      application about an event unless the application regularly inquires
      about its status. Similarly, there is no ability to pass continuous data
      streams (e.g. Accelerometer events) to an application without constant
      execution of scripts.</textual></para><para class="po-block e194 e194"><textual class="po-textual">Nevertheless, in both these mobile application platforms you can
      build an application that loads, intercepts, and understands XML
      vocabularies while utilizing the intrinsic abilities of the mobile
      browser to handle the rendering and UI semantics. The application has to do
      a lot more of the "heavy lifting" than in the case of a Firefox
      extension and it also cannot integrate quite seamlessly into the
      browser's internals.</textual></para></section><section class="po-hcontainer e195 e195"><title class="po-block e196 e196"><textual class="po-textual">The Unified Application Model</textual></title><para class="po-block e197 e197"><textual class="po-textual">Common between Firefox extensions and applications on the iPhone
      or Andriod platforms is:</textual></para><itemizedlist class="po-table e198 e198"><listitem class="po-container e199 e199"><para class="po-block e200 e200"><textual class="po-textual">an "application registry" or "store" where users can readily
          get new functionality,</textual></para></listitem><listitem class="po-container e201 e201"><para class="po-block e202 e202"><textual class="po-textual">the use of the browser as a core application user interface
          component,</textual></para></listitem><listitem class="po-container e203 e203"><para class="po-block e204 e204"><textual class="po-textual">the reliance on HTML and associated intrinsic capability of
          the browser for application functionality.</textual></para></listitem></itemizedlist><para class="po-block e205 e205"><textual class="po-textual">Unfortunately, in the case of both the mobile platforms, the
      browser's integration into the application is limited. While we can
      possibly write an application that interacts with our XML content, we
      can only do so within the confines of our application. The regular
      browser on the mobile platform remains ignorant of what to do with such
      XML content.</textual></para><para class="po-block e206 e206"><textual class="po-textual">What we want is for the browser itself to be augmented to handle our
      media type so that the user experience inside and outside of any mobile
      or desktop application is the same. We don't want to duplicate the
      browser's architecture for handling transports, media types, and linking
      that it already does well. Instead, we want to augment the existing
      known media type handlers and insert a portion (if not all) of our
      application.</textual></para><figure class="po-container e207 e207"><mediaobject class="po-container e208 e208"><imageobject class="po-container e209 e209"><imagedata class="po-meta e210 e210" fileref="../../../vol3/graphics/Milowski01/Milowski01-005.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e211 e211"><para class="po-block e212 e212"><textual class="po-textual">Unified Model</textual></para></caption></figure><para class="po-block e213 e213"><textual class="po-textual">A simplified scenario for how this works internally can be
      described as this sequence of events:</textual></para><orderedlist class="po-table e214 e214"><listitem class="po-container e215 e215"><para class="po-block e216 e216"><textual class="po-textual">A XML media type is recognized at the transport layer.</textual></para></listitem><listitem class="po-container e217 e217"><para class="po-block e218 e218"><textual class="po-textual">The media type is associated with our embedded application's
          media type handler for that XML vocabulary.</textual></para></listitem><listitem class="po-container e219 e219"><para class="po-block e220 e220"><textual class="po-textual">The XML data stream and metadata is transferred to our
          application component registered for that media type.</textual></para></listitem><listitem class="po-container e221 e221"><para class="po-block e222 e222"><textual class="po-textual">From the XML content received, our embedded application
          component constructs user interface elements and/or web content
          documents in the browser's intrinsic vocabularies.</textual></para></listitem><listitem class="po-container e223 e223"><para class="po-block e224 e224"><textual class="po-textual">The unified experience of our application facade and the web
          content documents are presented to the user.</textual></para></listitem></orderedlist><para class="po-block e225 e225"><textual class="po-textual">The end result is the user's experience is much like that of any
      other HTML application they might use a browser to access. The
      difference is that over the transport they received the XML content
      rather than some single-purpose rendition of that content. As such, they
      can choose the embedded application appropriate to the experience that
      they desire.</textual></para></section></section><section class="po-hcontainer e226 e226"><title class="po-block e227 e227"><textual class="po-textual">The DAISY Book Example</textual></title><para class="po-block e228 e228"><textual class="po-textual">The DAISY/NISO standard, ANSI/NISO Z39.86 [</textual><xref class="po-milestone e229 e229" linkend="daisy3"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], commonly known as DAISY 3, is an e-book
    specification developed with accessibility for the visually disabled in
    mind. While the specification itself is not limited to only such special
    purpose software environments, the focus of development has been around
    the such special needs users. In the end, the e-book specification is a
    collection of XML vocabularies that work together to form a single
    e-book.</textual></para><figure class="po-container e230 e230"><mediaobject class="po-container e231 e231"><imageobject class="po-container e232 e232"><imagedata class="po-meta e233 e233" fileref="../../../vol3/graphics/Milowski01/Milowski01-006.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e234 e234"><para class="po-block e235 e235"><textual class="po-textual">A DAISY Book</textual></para></caption></figure><para class="po-block e236 e236"><textual class="po-textual">The anatomy of a DAISY 3 book starts with a manifest document called
    a "OEB Package File". This XML document type was developed by the Open
    E-Book Forum/International Digital Publishing Forum [</textual><xref class="po-milestone e237 e237" linkend="idpf"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] and provides a manifest of all the parts of the DAISY
    e-book. From such a manifest you can access:</textual></para><itemizedlist class="po-table e238 e238"><listitem class="po-container e239 e239"><para class="po-block e240 e240"><textual class="po-textual">The DAISY DTBook XML instance which contains the e-book
        content,</textual></para></listitem><listitem class="po-container e241 e241"><para class="po-block e242 e242"><textual class="po-textual">The DAISY NCX XML instance which contains navigation information
        about the e-book (e.g. table of contents),</textual></para></listitem><listitem class="po-container e243 e243"><para class="po-block e244 e244"><textual class="po-textual">SMIL XML documents used to provide playback scripts for the
        e-book content,</textual></para></listitem><listitem class="po-container e245 e245"><para class="po-block e246 e246"><textual class="po-textual">Any ancillary media objects used by the playback or book.</textual></para></listitem></itemizedlist><para class="po-block e247 e247"><textual class="po-textual">For a browser to open and display such an e-book, assuming we start
    with the OEB Packaging, the browser must first collect all the related
    parts and then decide what to render. The starting point of the packaging
    file gives the typical XML rendering very little to display. As such, just
    associating a CSS stylesheet or an XSLT transformation for rendering is
    insufficient.</textual></para><para class="po-block e248 e248"><textual class="po-textual">Solving this requires a browser extension that understands the OEB
    Packaging file's media type, </textual><code class="po-atom e249 e249"><textual class="po-textual">application/oebps-package+xml</textual></code><textual class="po-textual">,
    and invokes a DAISY browser extension. This component is the responsible
    for locating the different documents linked by the manifest in the OEB
    Packaging document. The collection of document located is then used to
    assemble an appropriate UI within the browser.</textual></para><figure class="po-container e250 e250"><mediaobject class="po-container e251 e251"><imageobject class="po-container e252 e252"><imagedata class="po-meta e253 e253" fileref="../../../vol3/graphics/Milowski01/Milowski01-007.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e254 e254"><para class="po-block e255 e255"><textual class="po-textual">A DAISY Browser Extension</textual></para></caption></figure><para class="po-block e256 e256"><textual class="po-textual">The DAISY NCX document is used to provide a navigation aid, such as
    a table of contents, to the user. This document has links into the DAISY
    DTBook instance, which is the e-book content. These documents are used to
    present the user with a browser tab with e-book content via some XSLT
    transformation.</textual></para><para class="po-block e257 e257"><textual class="po-textual">The book itself can be "played" to the user via the linked SMIL
    documents. These XML documents describe how the content from the original
    DAISY DTBook instance should be sequenced. As such, care must be taken in
    the transformations to preserve the identity of content elements so the
    SMIL references will work. In the end, the user is presented with playback
    options that sequence the book's content.</textual></para><para class="po-block e258 e258"><textual class="po-textual">The end result is the user "opens" a DAISY book just like they do any
    other web document. They just follow a link or type in a URL to a DAISY
    book's packaging document and read the content. They don't need to know
    that there is some more complicated processing going on behind the
    interface presented to them.</textual></para><para class="po-block e259 e259"><textual class="po-textual">The crucial point here is that for accessibility, since DAISY was
    started as an e-book format for blind and otherwise visually disabled
    people and since the DTBook content is translated into an intrinsic
    vocabulary (HTML) that the browser already understands, the tools used by
    these people to read web documents still work. The vendors of such tools
    like screen readers do not need to add specialized support for the DAISY
    book reader because, to them, the user is just reading a regular HTML web
    document. The combination of standardized intrinsic vocabularies and
    widespread software supported by these vendors means that specialized
    software like the DAISY browser extension can "hide" in the background and
    allow the user the same experience they are used to when they browse the
    web.</textual></para><para class="po-block e260 e260"><textual class="po-textual">This DAISY book extension has been implemented as a Firefox
    extension and is now open-source. It is available for download from
    launchpad.net [</textual><xref class="po-milestone e261 e261" linkend="daisyextension"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].</textual></para></section><section class="po-hcontainer e262 e262"><title class="po-block e263 e263"><textual class="po-textual">A Peek Into the Future</textual></title><para class="po-block e264 e264"><textual class="po-textual">Making predictions is certainly risky business. Many of us at that
    1999 XTech presentation thought we were at the start of the ability to
    deliver high quality XML content to users over the web and into their
    browsers. What we didn't understand was the complexity of the
    interactivity model being developed within HTML, the explosion of
    sufficiency from "regular HTML" based web applications, and the relative
    high complexity of delivering a true XML application to a client-side
    browser.</textual></para><para class="po-block e265 e265"><textual class="po-textual">In 2009, we've found ourselves at another crossroad where high
    quality browser technology is now simultaneously scalable to the mobile
    platform and open-source as WebKit or Firefox. The promise of WebKit
    provides the unique ability to contribute to open-source efforts and
    bridge the gap between the ultimate flexibility of the Firefox Mozilla
    platform and the streamlined and compliant nature of WebKit. That is, we
    can make WebKit what we need simply by actively contributing or otherwise
    supporting its development.</textual></para><para class="po-block e266 e266"><textual class="po-textual">In the past, we waited for the browser vendors to do "the right
    thing". Now we can make what we want to happen by embracing our
    open-source browser technologies and have them do "the right thing"
    because we implemented the code to do so. That's our choice: to contribute
    or let our ideas fail.</textual></para><para class="po-block e267 e267"><textual class="po-textual">In the spirit of this, I present these challenges for the
    reader:</textual></para><orderedlist class="po-table e268 e268"><listitem class="po-container e269 e269"><para class="po-block e270 e270"><textual class="po-textual">We need intrinsic vocabularies and semantics we can rely upon.
        We must have HTML5, SVG, and MathML.</textual></para></listitem><listitem class="po-container e271 e271"><para class="po-block e272 e272"><textual class="po-textual">We won't wait for "someone else" to develop our browser
        enhancements.</textual></para></listitem><listitem class="po-container e273 e273"><para class="po-block e274 e274"><textual class="po-textual">We will embrace the idea of intrinsic vocabularies, like HTML,
        because such things take an inordinate amount of time to
        develop.</textual></para></listitem><listitem class="po-container e275 e275"><para class="po-block e276 e276"><textual class="po-textual">We will replicate the browser extension model championed by
        Firefox because it enables direct delivery of XML vocabularies without
        obscene acts.</textual></para></listitem><listitem class="po-container e277 e277"><para class="po-block e278 e278"><textual class="po-textual">We will support open-source and make it easy to use because it
        is our "big stick" we use to get what we want.</textual></para></listitem></orderedlist><para class="po-block e279 e279"><textual class="po-textual">Commercial vendors of browser technologies need to catch up or perish.
    The drag that has been created by certain browsers not implementing the
    most basic of recommendations from the W3C has caused enormous delay as
    well as economic consequences. While it is the user who suffers, they also
    often have a choice and can choose one that works.</textual></para><para class="po-block e280 e280"><textual class="po-textual">The ability to deliver XML content paired with applications directly
    to users has existed for quite awhile--but only in Firefox. That ability
    has been buried inside Firefox and delegated to the brave souls who want
    to dig through the source code. We need to bring that ability to the
    surface and make it easy to use.</textual></para><para class="po-block e281 e281"><textual class="po-textual">Having only one browser that does "cool things" is not enough. We
    need to propagate the ability to extend a web browser by extending it at
    its core. We need the ability to do serious work along side other
    components inside the browser in addition to augmenting the user interface
    to add in our "gadgets". It is really our choice to propagate a new model
    based on this knowledge and experience for the next decade.</textual></para></section><bibliography class="po-hcontainer e282 e282"><title class="po-block e283 e283"><textual class="po-textual">Bibliography</textual></title><bibliomixed class="po-block e284 e284" xml:id="xtech-slides-1999" xreflabel="apparao1999-1"><textual class="po-textual">V.
    Apparao .</textual><emphasis class="po-inline e285 e285" role="ital"><textual class="po-textual">XML and Related Standards in
    Gecko</textual></emphasis><textual class="po-textual"> - slides from XTech 1999 - </textual><link class="po-inline e286 e286" xlink:actuate="onRequest" xlink:href="http://www.mozilla.org/newlayout/xml/slides/slide1.xml" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.mozilla.org/newlayout/xml/slides/slide1.xml</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e287 e287" xml:id="xtech-books-1999" xreflabel="apparao1999-2"><textual class="po-textual">V.
    Apparao .</textual><emphasis class="po-inline e288 e288" role="ital"><textual class="po-textual">Book Demo</textual></emphasis><textual class="po-textual"> - from XTech 1999 -
    </textual><link class="po-inline e289 e289" xlink:actuate="onRequest" xlink:href="http://www.mozilla.org/newlayout/xml/books/books.xml" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.mozilla.org/newlayout/xml/books/books.xml</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e290 e290" xml:id="xtech-tocdemo-1999" xreflabel="apparao1999-3"><textual class="po-textual">V.
    Apparao .</textual><emphasis class="po-inline e291 e291" role="ital"><textual class="po-textual">TOC Demo</textual></emphasis><textual class="po-textual"> - from XTech 1999 -
    </textual><link class="po-inline e292 e292" xlink:actuate="onRequest" xlink:href="http://www.mozilla.org/newlayout/xml/tocdemo/rights.xml" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.mozilla.org/newlayout/xml/tocdemo/rights.xml</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e293 e293" xml:id="simple-link" xreflabel="xlink"><textual class="po-textual">S. Derose, E. Maler,
    D. Orchard. </textual><emphasis class="po-inline e294 e294" role="ital"><textual class="po-textual">XML Linking Language (XLink) Version
    1.0</textual></emphasis><textual class="po-textual"> - </textual><link class="po-inline e295 e295" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xlink/#simple-links" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xlink/#simple-links</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e296 e296" xml:id="svg" xreflabel="svg"><textual class="po-textual">J. Ferraiolo, è¤æ²¢ æ·³, D. Jackson.
    </textual><emphasis class="po-inline e297 e297" role="ital"><textual class="po-textual">Scalable Vector Graphics (SVG) 1.1
    Specification</textual></emphasis><textual class="po-textual"> - </textual><link class="po-inline e298 e298" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/SVG11/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/SVG11/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e299 e299" xml:id="mathml" xreflabel="mathml"><textual class="po-textual">D. Carlisle et al.
    </textual><emphasis class="po-inline e300 e300" role="ital"><textual class="po-textual">Mathematical Markup Language (MathML) Version 2.0
    (Second Edition)</textual></emphasis><textual class="po-textual"> - </textual><link class="po-inline e301 e301" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/MathML2/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/MathML2/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e302 e302" xml:id="dom2" xreflabel="dom2"><textual class="po-textual">A. Le Hors et al. </textual><emphasis class="po-inline e303 e303" role="ital"><textual class="po-textual">Document Object Model (DOM) Level 2 Core
    Specification</textual></emphasis><textual class="po-textual"> - </textual><link class="po-inline e304 e304" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/DOM-Level-2-Core/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/DOM-Level-2-Core/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e305 e305" xml:id="usage" xreflabel="usage"><textual class="po-textual">Wikipedia </textual><emphasis class="po-inline e306 e306" role="ital"><textual class="po-textual">Usage share of web browsers</textual></emphasis><textual class="po-textual"> - </textual><link class="po-inline e307 e307" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/Usage_share_of_web_browsers" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://en.wikipedia.org/wiki/Usage_share_of_web_browsers</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e308 e308" xml:id="mozilla" xreflabel="mozilla"><emphasis class="po-inline e309 e309" role="ital"><textual class="po-textual">Mozilla Firefox</textual></emphasis><textual class="po-textual"> - </textual><link class="po-inline e310 e310" xlink:actuate="onRequest" xlink:href="http://www.mozilla.org/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.mozilla.org/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e311 e311" xml:id="webkit" xreflabel="webkit"><emphasis class="po-inline e312 e312" role="ital"><textual class="po-textual">WebKit</textual></emphasis><textual class="po-textual"> - </textual><link class="po-inline e313 e313" xlink:actuate="onRequest" xlink:href="http://www.webkit.org/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.webkit.org/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e314 e314" xml:id="extensions" xreflabel="extensions"><textual class="po-textual">Firefox Extensions
    - </textual><link class="po-inline e315 e315" xlink:actuate="onRequest" xlink:href="http://www.webkit.org/" xlink:show="new" xlink:type="simple"><textual class="po-textual">https://developer.mozilla.org/en/Extensions</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e316 e316" xml:id="daisy3" xreflabel="daisy3"><textual class="po-textual">DAISY/NISO Standard,
    officially, the ANSI/NISO Z39.86, Specifications for the Digital Talking
    Book - </textual><link class="po-inline e317 e317" xlink:actuate="onRequest" xlink:href="http://www.niso.org/standards/resources/Z39-86-2005.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.niso.org/standards/resources/Z39-86-2005.html</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e318 e318" xml:id="idpf" xreflabel="idpf"><emphasis class="po-inline e319 e319" role="ital"><textual class="po-textual">International Digital Publishing Forum</textual></emphasis><textual class="po-textual"> - </textual><link class="po-inline e320 e320" xlink:actuate="onRequest" xlink:href="http://www.webkit.org/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.idpf.org/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e321 e321" xml:id="daisyextension" xreflabel="daisyextension"><emphasis class="po-inline e322 e322" role="ital"><textual class="po-textual">DAISY Firefox Extension</textual></emphasis><textual class="po-textual"> - </textual><link class="po-inline e323 e323" xlink:actuate="onRequest" xlink:href="https://launchpad.net/daisyextension" xlink:show="new" xlink:type="simple"><textual class="po-textual">https://launchpad.net/daisyextension</textual></link><textual class="po-textual">.</textual></bibliomixed></bibliography></article></classedDocument>