<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.3"><title class="po-block e1 e1"><textual class="po-textual">The Case for Authoring and Producing Books in (X)HTML5</textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">Balisage: The Markup Conference 2013</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 6 - 9, 2013</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual">In this paper, I argue that HTML5 offers unique advantages to
      authors and publishers in comparison to both traditional word processing
      and desktop publishing tools like Microsoft Word and Adobe InDesign, as
      well as other markup vocabularies like DocBook and AsciiDoc. I also
      consider the drawbacks currently inherent in the HTML5 standard with
      respect to representing long-form, structured text content, and the
      challenges faced in adopting HTML5 as the source format for book
      authoring and publishing workflows. Finally, I discuss the development
      of HTMLBook, a new open, HTML5-based XML standard expressly designed to
      surmount these challenges and facilitate the use of HTML5 for the
      authoring and production of both print and digital book content.</textual></para></abstract><author class="po-record e8 e8"><personname class="po-record e9 e9"><firstname class="po-field e10 e10"><textual class="po-textual">Sanders</textual></firstname><surname class="po-field e11 e11"><textual class="po-textual">Kleinfeld</textual></surname></personname><personblurb class="po-container e12 e12"><para class="po-block e13 e13"><textual class="po-textual">Sanders Kleinfeld has been employed at O’Reilly Media since 2004
        and has held a variety of positions, including roles on O’Reilly’s
        Production, Editorial, and Tools teams. Currently, he works as
        Publishing Technology Engineer, maintaining O’Reilly’s toolchain for
        generating digital formats of both frontlist and backlist titles. He
        also helps coordinate O’Reilly’s digital distribution efforts to
        electronic sales channels, and is currently assisting in R&amp;D
        efforts surrounding HTML5 and EPUB 3, helping to develop
        next-generation workflows and ebook content for O’Reilly and its
        publishing partners. Sanders is the author of </textual><link class="po-inline e14 e14" xlink:actuate="onRequest" xlink:href="http://shop.oreilly.com/product/0636920022473.do" xlink:show="new" xlink:type="simple"><emphasis class="po-inline e15 e15"><textual class="po-textual">HTML5
        for Publishers</textual></emphasis></link><textual class="po-textual"> (O’Reilly, 2011).</textual></para></personblurb></author><legalnotice class="po-container e16 e16"><para class="po-block e17 e17"><textual class="po-textual">Copyright © 2013 Sanders Kleinfeld.  All rights reserved.</textual></para></legalnotice></info><section class="po-hcontainer e18 e18"><title class="po-block e19 e19"><textual class="po-textual">Introduction</textual></title><para class="po-block e20 e20"><textual class="po-textual">For the past seven years, DocBook XML has been the cornerstone of
    tech publisher O’Reilly Media’s book authoring and publishing toolchain.
    As a richly semantic markup language, DocBook provides a single
    maintainable source format for book content that can be readily
    transformed and output to a variety of formats, allowing the construction
    of a highly automated production infrastracture. However, as the digital
    book has continued to rise in importance, so has the need to architect
    faster, more efficient, and more lightweight workflows for book creation.
    O’Reilly found that there was another markup format even better suited to
    this paradigm: (X)HTML5.</textual></para><para class="po-block e21 e21"><textual class="po-textual">In this paper, I argue that HTML5 offers unique advantages to
    authors and publishers in comparison to both traditional word processing
    and desktop publishing tools like Microsoft Word and Adobe InDesign, as
    well as other markup vocabularies like DocBook and AsciiDoc. I also
    consider the drawbacks currently inherent in the HTML5 standard with
    respect to representing long-form, structured text content, and the
    challenges O’Reilly has faced in adopting the standard as the new source
    format for its toolchain. Finally, I discuss how O’Reilly has surmounted
    these challenges by developing </textual><link class="po-inline e22 e22" xlink:actuate="onRequest" xlink:href="http://github.com/oreillymedia/HTMLBook" xlink:show="new" xlink:type="simple"><textual class="po-textual">HTMLBook</textual></link><textual class="po-textual">, a
    new open, HTML5-based XML standard expressly designed for the authoring
    and production of both print and digital book content.</textual></para></section><section class="po-hcontainer e23 e23"><title class="po-block e24 e24"><textual class="po-textual">Why HTML?</textual></title><para class="po-block e25 e25"><textual class="po-textual">As the primary markup language for both the Web and two ebook
    formats (EPUB and Mobi), HTML offers several key advantages over both
    standard book source document formats (e.g., Word
    </textual><emphasis class="po-inline e26 e26"><textual class="po-textual">.doc</textual></emphasis><textual class="po-textual"> and InDesign </textual><emphasis class="po-inline e27 e27"><textual class="po-textual">.indd</textual></emphasis><textual class="po-textual">) as well
    as other XML vocabularies. Authoring and producing books in HTML5 offers
    the potential of standardized semantics, a streamlined workflow for
    generating print and digital outputs, the ability to think “digital-first”
    when developing content, and the opportunity for Web-based, WYSIWYG
    authoring. In the following sections, I discuss the advances afforded by
    HTML5 in greater depth.</textual></para><section class="po-hcontainer e28 e28"><title class="po-block e29 e29"><textual class="po-textual">New and Improved Semantics!</textual></title><para class="po-block e30 e30"><textual class="po-textual">Prior to HTML5, structural semantics were largely absent from the
      HTML vocabulary, and rich tagging of content entailed liberal use of two
      all-purpose elements: the </textual><code class="po-atom e31 e31"><textual class="po-textual">&lt;div&gt;</textual></code><textual class="po-textual"> and
      </textual><code class="po-atom e32 e32"><textual class="po-textual">&lt;span&gt;</textual></code><textual class="po-textual">. Compared to markup languages like DocBook,
      which standardized elements for both high-level book components
      (chapter, appendix, glossary) and lower-level blocks (section, sidebar,
      footnote), as shown below:</textual></para><programlisting class="po-block e33 e33" xml:space="preserve"><textual class="po-textual">&lt;article&gt;
  &lt;title&gt;Rich semantics in DocBook&lt;/title&gt;
  &lt;sect1&gt;
    &lt;title&gt;Mathematical elements&lt;/title&gt;
    &lt;para&gt;The "mathphrase" element&lt;footnote&gt;&lt;para&gt;Introduced in DocBook 4.5&lt;/para&gt;&lt;/footnote&gt; is used to tag mathematical expressions
    that are readily representable in plaintext.&lt;/para&gt;
  &lt;/sect1&gt;
&lt;/article&gt;</textual></programlisting><para class="po-block e34 e34"><textual class="po-textual">HTML’s vocabulary was severely lacking, and forced reliance on
      nonstandardized </textual><code class="po-atom e35 e35"><textual class="po-textual">class</textual></code><textual class="po-textual"> attributes to inject the missing
      semantic context:</textual></para><programlisting class="po-block e36 e36" xml:space="preserve"><textual class="po-textual">&lt;div class="article"&gt;
  &lt;h1&gt;Rich semantics in DocBook&lt;/h1&gt;
  &lt;div class="top_level_section"&gt;
    &lt;h1&gt;Mathematical elements&lt;/h1&gt;
    &lt;p&gt;The "mathphrase" element&lt;span class="footnote"&gt;Introduced in DocBook 4.5&lt;/span&gt; is used to tag mathematical expressions
    that are readily representable in plaintext.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</textual></programlisting><para class="po-block e37 e37"><textual class="po-textual">HTML5 adds a whole new category of elements used for </textual><link class="po-inline e38 e38" xlink:actuate="onRequest" xlink:href="http://www.w3.org/html/wg/drafts/html/master/dom.html#sectioning-content" xlink:show="new" xlink:type="simple"><textual class="po-textual">“sectioning
      content”</textual></link><xref class="po-milestone e39 e39" linkend="h13"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, which can be used to
      mark divisions of books, journals, and other long-form content:
      </textual><code class="po-atom e40 e40"><textual class="po-textual">&lt;article&gt;</textual></code><textual class="po-textual"> for complete, self-contained articles;
      </textual><code class="po-atom e41 e41"><textual class="po-textual">&lt;section&gt;</textual></code><textual class="po-textual"> for subsections of a larger book or article
      (both chapters/appendices, and their subsections);
      </textual><code class="po-atom e42 e42"><textual class="po-textual">&lt;aside&gt;</textual></code><textual class="po-textual"> for tangential remarks (e.g., sidebars or
      footnotes), and </textual><code class="po-atom e43 e43"><textual class="po-textual">&lt;nav&gt;</textual></code><textual class="po-textual"> for navigational components
      (such as a table of contents or an index).</textual></para><para class="po-block e44 e44"><textual class="po-textual">Also new to HTML5 are elements for representing formal (titled)
      images (</textual><code class="po-atom e45 e45"><textual class="po-textual">&lt;figure&gt;</textual></code><textual class="po-textual"> and
      </textual><code class="po-atom e46 e46"><textual class="po-textual">&lt;figcaption&gt;</textual></code><textual class="po-textual">), as well as headers/footers (the aptly
      named </textual><code class="po-atom e47 e47"><textual class="po-textual">&lt;header&gt;</textual></code><textual class="po-textual"> and
      </textual><code class="po-atom e48 e48"><textual class="po-textual">&lt;footer&gt;</textual></code><textual class="po-textual">)</textual></para><para class="po-block e49 e49"><textual class="po-textual">With the addition of these elements, the previous example can now
      be written as:</textual></para><programlisting class="po-block e50 e50" xml:space="preserve"><textual class="po-textual">&lt;article&gt;
  &lt;h1&gt;Rich semantics in DocBook&lt;/h1&gt;
  &lt;section&gt;
    &lt;h1&gt;Mathematical elements&lt;/h1&gt;
    &lt;p&gt;The "mathphrase" element&lt;aside&gt;Introduced in DocBook 4.5&lt;/aside&gt; is used to tag mathematical expressions
    that are readily representable in plaintext.&lt;/p&gt;
  &lt;/section&gt;
&lt;/article&gt;</textual></programlisting><para class="po-block e51 e51"><textual class="po-textual">These new structural elements greatly enhance the
      ability to semantically mark up an entire book manuscript in
      HTML5.</textual></para></section><section class="po-hcontainer e52 e52"><title class="po-block e53 e53"><textual class="po-textual">No Conversions Necessary!</textual></title><para class="po-block e54 e54"><textual class="po-textual">Books don’t remain manuscripts forever. The goal—which hopefully
      is achieved—is to publish</textual><footnote class="po-popup e55 e55"><para class="po-block e56 e56"><textual class="po-textual">Traditionally, “publishing” a manuscript has meant reifying
          its textual content through the act of printing its words in ink on
          reams of paper that are sliced and bound to create a physical book.
          In the digital age, the distintiction between a “manuscript” and
          “published book” is more nebulous, given that both typically refer
          to an electronic document. As such, I’m defining “publish” here to
          mean the act of packaging manuscript content (either physically or
          digitally) such that it is suitable for distribution to and
          consumption by readers.</textual></para></footnote><textual class="po-textual"> them. Thus, the purpose of manuscript authoring tools is
      not only to facilitate writing and formatting of text, but to do so in a
      fashion in which it can be output as a final print and/or digital
      product.</textual></para><para class="po-block e57 e57"><textual class="po-textual">Traditional word processing applications like Microsoft Word are
      actually far from ideally suited to this last output stage, the actual
      </textual><emphasis class="po-inline e58 e58"><textual class="po-textual">production</textual></emphasis><textual class="po-textual"> of a manuscript. Because they are not
      primarily designed as compositing tools for generating printer-ready
      PDFs, word processors don’t offer as robust a suite of layout and
      prepress features as provided by desktop publishing applications like
      Adobe InDesign. So while it’s trivial to export a Word or Pages document
      to PDF, it’s not quite as trivial to export a PDF that would be
      considered “print-ready.” As a result, it’s common for workflows for
      producing manuscripts for print to entail first converting binary
      word-processor documents (e.g., Word </textual><emphasis class="po-inline e59 e59"><textual class="po-textual">.doc</textual></emphasis><textual class="po-textual"> files) to
      binary desktop-publishing documents (InDesign </textual><emphasis class="po-inline e60 e60"><textual class="po-textual">.indd</textual></emphasis><textual class="po-textual">
      files), and then outputting the final print-ready PDF from the second
      set of files. In other words, the manuscript transitions through three
      distinct file formats: one for writing/editing, one for compositing, and
      one for distribution.</textual><footnote class="po-popup e61 e61"><para class="po-block e62 e62"><textual class="po-textual">Historically, dividing the book lifecycle into distinct phases
          that employed specialized software applications made perfect sense,
          because there was just one desired output format (a print product)
          and two actors needed to bring it to fruition: the author who did
          the writing and the publisher who did the production. The rise of
          digital publishing and self-publishing has effectively detonated the
          assumptions undergirding ths model, as contemporary publishing
          rewards a much more lightweight, flexible workflow, which can
          produce multiple output formats quickly.</textual></para></footnote><textual class="po-textual"> The paradigm is similar for digital production to output
      ebook formats of a manuscript. The two main digital formats in which
      ebooks are sold, </textual><link class="po-inline e63 e63" xlink:actuate="onRequest" xlink:href="http://idpf.org/epub" xlink:show="new" xlink:type="simple"><textual class="po-textual">EPUB</textual></link><textual class="po-textual"> and
      </textual><link class="po-inline e64 e64" xlink:actuate="onRequest" xlink:href="http://www.amazon.com/gp/feature.html?ie=UTF8&amp;docId=1000729511" xlink:show="new" xlink:type="simple"><textual class="po-textual">Kindle
      Mobi KF8</textual></link><textual class="po-textual">,</textual><footnote class="po-popup e65 e65"><para class="po-block e66 e66"><textual class="po-textual">The largest U.S. ebook sales channels (per O’Reilly’s “Global
          eBook Market” report</textual><xref class="po-milestone e67 e67" linkend="w13"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, Amazon, Barnes
          &amp; Noble, and the Apple iBookstore) all sell ebook content in
          either EPUB or Mobi format. However, many other digital channels
          (such as </textual><link class="po-inline e68 e68" xlink:actuate="onRequest" xlink:href="http://www.scribd.com/" xlink:show="new" xlink:type="simple"><textual class="po-textual">Scribd</textual></link><textual class="po-textual">) sell ebook
          content in PDF format, either exclusively or in addition to other
          formats. Producing PDF for digital consumption entails generally the
          same process as preparing a PDF for print, with the exception that
          more effort can and should be paid to providing rich intradocument
          navigation (e.g., a hyperlinked Table of Contents and Index,
          bookmarks for key sections, and clickable cross-references between
          chapters).</textual></para></footnote><textual class="po-textual"> are both </textual><emphasis class="po-inline e69 e69"><textual class="po-textual">reflowable</textual></emphasis><textual class="po-textual"> formats, where
      content does not have fixed pagination like a print book but instead
      spreads to fill the dimensions of the ereader screen. Here, compositing
      is much less of a concern, but there’s still a conversion step that must
      be navigated to produce the ebook output. Exporting to EPUB/Mobi from a
      format like Word or InDesign is not typically a process that produces
      high-quality results out of the box without extensive configuration,
      troubleshooting, and possibly even post-conversion cleanup, as is
      evidenced by a burgeoning industry of </textual><link class="po-inline e70 e70" xlink:actuate="onRequest" xlink:href="https://kdp.amazon.com/self-publishing/help?topicId=A3RRQXI478DDG7" xlink:show="new" xlink:type="simple"><textual class="po-textual">third-party
      firms</textual></link><textual class="po-textual"> offering ebook conversion and consulting services.</textual></para><para class="po-block e71 e71"><textual class="po-textual">An alternative to the Word-to-InDesign-to-(e)book shuffle is to
      design a </textual><emphasis class="po-inline e72 e72"><textual class="po-textual">single-source workflow</textual></emphasis><textual class="po-textual">, where there is
      just one set of document files used both for writing/editing the book
      manuscript and for completing the necessary production work for
      generating both print and electronic outputs. Here is where an XML
      format like DocBook shines, as its rich semantic vocabulary makes it
      highly transformable to a variety of output formats. The </textual><link class="po-inline e73 e73" xlink:actuate="onRequest" xlink:href="http://docbook.sourceforge.net/" xlink:show="new" xlink:type="simple"><textual class="po-textual">DocBook Project’s open
      source XSL stylesheets</textual></link><textual class="po-textual"> were developed to facilitate this very
      task, and provide transformations from DocBook to a variety of key
      document formats, including PDF (via FO), HTML (both XHTML1.1 and
      XHTML5), and EPUB (versions 2 and 3). This is the workflow that </textual><link class="po-inline e74 e74" xlink:actuate="onRequest" xlink:href="http://oreilly.com/" xlink:show="new" xlink:type="simple"><textual class="po-textual">O’Reilly Media</textual></link><textual class="po-textual"> has used for the
      past seven years, which Andrew Savikas describes in his essay
      “Distribution Everywhere”:</textual></para><blockquote class="po-container e75 e75"><para class="po-block e76 e76"><textual class="po-textual">That large ecosystem of tools and users meant that there was
        already a very mature and robust set of </textual><link class="po-inline e77 e77" xlink:actuate="onRequest" xlink:href="http://docbook.sourceforge.net/release/xsl/1.75.1/doc/" xlink:show="new" xlink:type="simple"><textual class="po-textual">open-source
        stylesheets</textual></link><textual class="po-textual"> intended to do exactly what we wanted: to take a
        set of DocBook source files and create multiple outputs, each with its
        own formatting rules. We could even create multiple versions of the
        same output format; for example, a PDF intended for printing (with
        crop marks and high-resolution images) and a PDF designed for viewing
        digitally (with color images and hyperlinks). By customizing the
        stylesheets with our branding, we could deliver three different
        “final” outputs (print PDF, web PDF, and Safari) from the same source
        file at the same time, while retaining the flexibility to modify the
        presentation formatting independently of the content.</textual></para><para class="po-block e78 e78"><textual class="po-textual">When </textual><link class="po-inline e79 e79" xlink:actuate="onRequest" xlink:href="http://www.idpf.org" xlink:show="new" xlink:type="simple"><textual class="po-textual">EPUB</textual></link><textual class="po-textual"> emerged
        as the standard for the growing ebook market, we partnered with Adobe
        to contribute changes to those open source </textual><link class="po-inline e80 e80" xlink:actuate="onRequest" xlink:href="http://oreil.ly/5B6Kc9" xlink:show="new" xlink:type="simple"><textual class="po-textual">stylesheets</textual></link><textual class="po-textual"> to support
        output as EPUB (and with some additional processing, in
        Kindle-compatible Mobi format as well). That meant that as long as our
        production workflow resulted in a high-quality DocBook XML version of
        a book, we could deliver multiple print and digital versions at the
        same time from the same source.</textual><xref class="po-milestone e81 e81" linkend="s11"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref></para></blockquote><para class="po-block e82 e82"><textual class="po-textual">The conversions in this type of workflow are optimal: all operate
      on a single, highly and consistently structured source format, and are
      wholly automated—ensuring fast, accurate results. But no matter how
      efficient the production infrastructure, every conversion built into
      one’s processses still incurs a cost. If conversions are outsourced to
      another vendor, the cost is in both dollars and time. If conversions are
      automated in-house, the cost comes in the form of the human resources on
      staff required to maintain the codebase. As such, the ultimate goal in
      creating streamlined publishing workflows isn’t solely to lower the
      costs of conversions whenever possible; the aim should also be to
      </textual><emphasis class="po-inline e83 e83"><textual class="po-textual">eliminate the need for conversions</textual></emphasis><textual class="po-textual"> whenever
      possible.</textual></para><section class="po-hcontainer e84 e84" xml:id="html5_source_and_output"><title class="po-block e85 e85"><textual class="po-textual">HTML5: Both Source Format and Output Format</textual></title><para class="po-block e86 e86"><textual class="po-textual">A huge asset that HTML5 offers as a book authoring format is
        that unlike Microsoft Word or DocBook, it is not just an authoring
        format: it is a hugely popular output format. Aside from the fact that
        HTML is inarguably the dominant markup for content published on the
        Web, it is also at the core of both the EPUB and Mobi ebook
        formats.</textual><footnote class="po-popup e87 e87"><para class="po-block e88 e88"><textual class="po-textual">The latest versions of EPUB (3.0) and Mobi (KF8) both
            support HTML5 as a core content-document format. The </textual><link class="po-inline e89 e89" xlink:actuate="onRequest" xlink:href="http://www.idpf.org/epub/30/spec/" xlink:show="new" xlink:type="simple"><textual class="po-textual">EPUB 3
            specification</textual></link><textual class="po-textual"> largely supports the full </textual><link class="po-inline e90 e90" xlink:actuate="onRequest" xlink:href="http://www.idpf.org/epub/30/spec/epub30-contentdocs.html#refHTML5" xlink:show="new" xlink:type="simple"><textual class="po-textual">HTML5</textual></link><textual class="po-textual">
            document model (provided XHTML syntax is used), with just a
            handful of </textual><link class="po-inline e91 e91" xlink:actuate="onRequest" xlink:href="http://www.idpf.org/epub/30/spec/epub30-contentdocs.html#sec-xhtml-deviations" xlink:show="new" xlink:type="simple"><textual class="po-textual">minor
            exceptions</textual></link><textual class="po-textual">. KF8 currently supports only a </textual><link class="po-inline e92 e92" xlink:actuate="onRequest" xlink:href="http://www.amazon.com/gp/feature.html/ref=amb_link_357754562_1?ie=UTF8&amp;docId=1000729901&amp;pf_rd_m=ATVPDKIKX0DER&amp;pf_rd_s=center-10&amp;pf_rd_r=1DWZJVJ6VWJQDK7AJS0G&amp;pf_rd_t=1401&amp;pf_rd_p=1343223442&amp;pf_rd_i=1000729511" xlink:show="new" xlink:type="simple"><textual class="po-textual">subset
            of elements</textual></link><textual class="po-textual"> new to HTML5, but this subset encompasses the
            majority of new semantic elements, including
            </textual><code class="po-atom e93 e93"><textual class="po-textual">&lt;section&gt;</textual></code><textual class="po-textual">, </textual><code class="po-atom e94 e94"><textual class="po-textual">&lt;aside&gt;</textual></code><textual class="po-textual">, and
            </textual><code class="po-atom e95 e95"><textual class="po-textual">&lt;figure&gt;</textual></code><textual class="po-textual">.</textual></para></footnote><textual class="po-textual">As a result, if HTML5 is used as the source manuscript
        format, the task of producing ebook outputs is reduced to one of
        styling the content (with CSS) and packaging it as appropriate for
        distribution. In the case of EPUB, creating a valid file entails
        creating a ZIP archive of book assets (HTML, CSS, images, script
        documents) with an embedded mimetype, config settings (e.g., DRM),
        and </textual><link class="po-inline e96 e96" xlink:actuate="onRequest" xlink:href="http://www.idpf.org/epub/30/spec/epub30-publications.html#sec-package-def" xlink:show="new" xlink:type="simple"><textual class="po-textual">Package
        Document</textual></link><textual class="po-textual"> that contains a full manifest and metadata about the
        ebook. In the case of Mobi, packaging entails processing either an
        EPUB file or an HTML document with Amazon’s </textual><link class="po-inline e97 e97" xlink:actuate="onRequest" xlink:href="http://www.amazon.com/gp/feature.html?ie=UTF8&amp;docId=1000765211" xlink:show="new" xlink:type="simple"><textual class="po-textual">KindleGen</textual></link><textual class="po-textual">
        tool.</textual></para><para class="po-block e98 e98"><textual class="po-textual">And what about producing print books? It may be
        counterintuitive, but HTML5 is actually an excellent source format for
        producing paginated content, as the </textual><link class="po-inline e99 e99" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/css3-page/" xlink:show="new" xlink:type="simple"><textual class="po-textual">CSS3 Paged Media Module
        </textual></link><textual class="po-textual">can be utilized to design the eqiuivalent of a standard book
        template for print. Features supported in CSS3 Paged Media include
        page headers, footers, folios, crop marks, font selection,
        distinct master pages for verso/recto/chapter-opener pages, and even a
        good deal of control over pagebreaking via both explicit instructions
        and widow/orphan controls. The process for writing the CSS for these
        elements is well documented in “Building Books with CSS3” by Nellie
        McKesson</textual><xref class="po-milestone e100 e100" linkend="m12"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><para class="po-block e101 e101"><textual class="po-textual">While the Paged Media Module is still in W3C Working Draft
        status, two major commercial tools already support its feature set for
        generating PDF documents: </textual><link class="po-inline e102 e102" xlink:actuate="onRequest" xlink:href="http://www.antennahouse.com/" xlink:show="new" xlink:type="simple"><textual class="po-textual">Antenna House
        Formatter</textual></link><textual class="po-textual"> and </textual><link class="po-inline e103 e103" xlink:actuate="onRequest" xlink:href="http://www.princexml.com/" xlink:show="new" xlink:type="simple"><textual class="po-textual">Prince</textual></link><textual class="po-textual">. It’s now
        possible to take an HTML5 manuscript and a CSS3 stylesheet including
        paged-media rules, and run it through either tool to get a
        high-quality, print-ready PDF file. </textual><xref class="po-milestone e104 e104" linkend="paged_media_pdfs"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> shows a side-by-side comparison of a PDF
        page excerpted from the O’Reilly Media title </textual><link class="po-inline e105 e105" xlink:actuate="onRequest" xlink:href="http://shop.oreilly.com/product/0636920026938.do" xlink:show="new" xlink:type="simple"><emphasis class="po-inline e106 e106"><textual class="po-textual">Interactive
        Data Visualization for the Web</textual></emphasis></link><textual class="po-textual"> (2013), generated
        from a single HTML5 file using two different CSS3 stylesheets.</textual></para><figure class="po-container e107 e107" xml:id="paged_media_pdfs"><title class="po-block e108 e108"><textual class="po-textual">The same HTML5 file used to generate PDF content in two
          different templates using distinct CSS stylesheets; note the
          differences in styling of headers, footers, and figure images in the
          PDF at left versus the PDF at right.</textual></title><mediaobject class="po-container e109 e109"><imageobject class="po-container e110 e110"><imagedata class="po-meta e111 e111" fileref="../../../vol10/graphics/Kleinfeld01/Kleinfeld01-001.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e112 e112"><textual class="po-textual">It’s worth noting that while at first glance, a DocBook-source
        and HTML5-source production toolchain seem quite similar―a single
        input format from which multiple output formats are automatically
        generated―there’s a key difference between the two models. As
        previously stated, in an HTML5 workflow, the source format and the
        ready-to-package output format are identical, which means that
        both the toolchain and the people creating books with it only need to
        concern themselves with one markup language, not two. In a
        DocBook-based workflow, there are two problems to solve:</textual></para><itemizedlist class="po-table e113 e113"><listitem class="po-container e114 e114"><para class="po-block e115 e115"><textual class="po-textual">How do we convert DocBook markup into a corresponding HTML
            representation that is faithful to the original semantics?</textual></para></listitem><listitem class="po-container e116 e116"><para class="po-block e117 e117"><textual class="po-textual">How do we style the HTML representation with CSS to achieve
            the desired formatting and aesthetics?</textual></para></listitem></itemizedlist><para class="po-block e118 e118"><textual class="po-textual">Such a system thus has two points of failure</textual><footnote class="po-popup e119 e119"><para class="po-block e120 e120"><textual class="po-textual">It’s certainly possible to have a single-source workflow
            that has more than two points of failure, if the toolchain permits
            intermediate formats used between source and output.
            For example, if authors write their manuscript in a lightweight
            markup language that exports to DocBook (e.g., </textual><link class="po-inline e121 e121" xlink:actuate="onRequest" xlink:href="http://www.methods.co.nz/asciidoc/" xlink:show="new" xlink:type="simple"><textual class="po-textual">AsciiDoc</textual></link><textual class="po-textual">),
            then there are two transformations built into the system—AsciiDoc
            to DocBook, and DocBook to HTML—which means two opportunities for
            problems to be introduced before the markup is even styled.</textual></para></footnote><textual class="po-textual"> that can result in problems in the final EPUB, Mobi, or
        PDF output: there can be issues with the transformation engine
        (XSL-based or otherwise) that converts DocBook to HTML, or there can
        be a problem with the CSS stylesheets applied to the HTML.
        Troubleshooting problems in the former category requires a high level
        of expertise,</textual><footnote class="po-popup e122 e122"><para class="po-block e123 e123"><textual class="po-textual">It’s true that the open source DocBook XSL stylesheets
            available in the </textual><link class="po-inline e124 e124" xlink:actuate="onRequest" xlink:href="http://docbook.sourceforge.net" xlink:show="new" xlink:type="simple"><textual class="po-textual">DocBook project</textual></link><textual class="po-textual">
            are quite mature and robust, as they have been refined over the
            course of the past eleven years, but that does not eliminate the
            need for expert-level knowledge to both maintain the toolchain as
            additional requirements arise (e.g., add support for new EPUB 3
            features in HTML5 output) or customize the DocBook-to-HTML
            mappings to meet publisher-specific style conventions. Performing
            translations between two markup languages is not all that
            different from translating between two spoken languages: to do it
            well, you need to be fluent in both vocabularies and be able to
            effectively map and pattern words to meet the specific syntax
            demands of each. Even for the most knowledgeable and capable
            engineers, that level of complexity is likely to slow down the
            software development process.</textual></para></footnote><textual class="po-textual"> as one needs to have extensive knowledge of both source
        and output markup languages just to determine how best to rectify the
        problem. This usually entails either modifying the transformation
        logic used to convert from source to output, or recommending
        alterations to the source format to achieve the desired output with
        the existing transformations.</textual></para><para class="po-block e125 e125"><textual class="po-textual">When HTML5 is used as both source and output format, this first
        point of failure is completely removed from the production system. If
        you review the output and find that it contains an unordered list
        where you were expecting an ordered list, you simply crack open the
        HTML file and change the </textual><code class="po-atom e126 e126"><textual class="po-textual">&lt;ul&gt;</textual></code><textual class="po-textual"> element to an
        </textual><code class="po-atom e127 e127"><textual class="po-textual">&lt;ol&gt;</textual></code><textual class="po-textual"> element; you don’t need to audit the
        transformation logic used for conversion of DocBook
        </textual><code class="po-atom e128 e128"><textual class="po-textual">&lt;itemizedlist&gt;</textual></code><textual class="po-textual"> and </textual><code class="po-atom e129 e129"><textual class="po-textual">&lt;orderedlist&gt;</textual></code><textual class="po-textual">
        elements. The only thing you have to worry about is the CSS. Such a
        system is much simpler and easier to maintain.</textual></para></section></section><section class="po-hcontainer e130 e130"><title class="po-block e131 e131"><textual class="po-textual">We Don’t Need Your Validator!</textual></title><para class="po-block e132 e132"><textual class="po-textual">When you’re in the process of drafting your manuscript, you want
      to focus on expressing your thoughts in writing; you don’t want to worry
      about having to regularly validate your document to ensure that it
      conforms to a preset template or schema. There are few things more
      irritating than having the writing rhythm be interrupted to troubleshoot
      a template error (e.g., </textual><xref class="po-milestone e133 e133" linkend="word_error_screenshot"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">), or a
      DTD error like the following:</textual></para><programlisting class="po-block e134 e134" xml:space="preserve"><textual class="po-textual">ch01.xml:4: element chapter: validity error : Element chapter content does not follow the DTD, expecting (beginpage? , chapterinfo? , 
(title , subtitle? , titleabbrev?) , (toc | lot | index | glossary | bibliography)* , tocchap? , (((calloutlist | glosslist | bibliolist | 
itemizedlist | orderedlist | segmentedlist | simplelist | variablelist | caution | important | note | tip | warning | literallayout | 
programlisting | programlistingco | screen | screenco | screenshot | synopsis | cmdsynopsis | funcsynopsis | classsynopsis | fieldsynopsis | 
constructorsynopsis | destructorsynopsis | methodsynopsis | formalpara | para | simpara | address | blockquote | graphic | graphicco | 
mediaobject | mediaobjectco | informalequation | informalexample | informalfigure | informaltable | equation | example | figure | table | 
msgset | procedure | sidebar | qandaset | task | anchor | bridgehead | remark | highlights | abstract | authorblurb | epigraph | indexterm | beginpage)+ , 
(sect1* | refentry* | simplesect* | section*)) | sect1+ | refentry+ | simplesect+ | section+) , (toc | lot | index | glossary | bibliography)*), 
got (title para sect1 figure para sect1 sect1 sect1 )
Document book.xml does not validate
</textual></programlisting><figure class="po-container e135 e135" xml:id="word_error_screenshot"><title class="po-block e136 e136"><textual class="po-textual">Why does Word hate me?</textual></title><mediaobject class="po-container e137 e137"><imageobject class="po-container e138 e138"><imagedata class="po-meta e139 e139" fileref="../../../vol10/graphics/Kleinfeld01/Kleinfeld01-002.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e140 e140"><textual class="po-textual">Document validity should not be considered to be inherently
      valuable: validation is a means toward an end. We validate to confirm
      that necessary constraints are met to achieve a specific goal. In the
      case of book production, that goal is producing a PDF to be printed
      and/or an ebook to be distributed digitally.</textual></para><para class="po-block e141 e141"><textual class="po-textual">When a book-production workflow is conversion-heavy, robust
      validation is crucial, as it’s a key mechanism to prevent formatting
      mistakes in source documents from propagating to output documents, or
      from causing the conversion process to fail entirely. If a Word
      manuscript document isn’t properly tagged with its template’s paragraph
      styles, it likely won’t convert to InDesign cleanly, which means extra
      QA and cleanup work for the compositor. Similarly, if a DocBook document
      doesn’t meet the requirements specified in the </textual><link class="po-inline e142 e142" xlink:actuate="onRequest" xlink:href="http://docbook.org/xml/4.5/docbookx.dtd" xlink:show="new" xlink:type="simple"><textual class="po-textual">DocBook DTD</textual></link><textual class="po-textual">, the XSL transformations in the
      toolchain may not properly convert it to HTML or </textual><link class="po-inline e143 e143" xlink:actuate="onRequest" xlink:href="http://www.w3schools.com/xslfo/" xlink:show="new" xlink:type="simple"><textual class="po-textual">FO</textual></link><textual class="po-textual">, which again
      means more troubleshooting. When offered a choice between placing effort
      on validation or on ex post facto damage control, validation is rightly
      seen as the lesser of two evils.</textual></para><para class="po-block e144 e144"><textual class="po-textual">But the balance of the tradeoff between validation and cleanup
      shifts dramatically when conversions are eliminated from the production
      workflow. As </textual><link class="po-inline e145 e145" linkend="html5_source_and_output" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">discussed
      previously</textual></link><textual class="po-textual">, when HTML5 is used as both source and output format,
      there’s one less failure point in the process, which means fewer
      opportunities for something to go wrong. That doesn’t mean that all
      problems will disappear. Books are written by humans,</textual><footnote class="po-popup e146 e146"><para class="po-block e147 e147"><textual class="po-textual">Still true in 2013, although artificial intelligence is
          clearly already making </textual><link class="po-inline e148 e148" xlink:actuate="onRequest" xlink:href="http://narrativescience.com/" xlink:show="new" xlink:type="simple"><textual class="po-textual">inroads into the field of
          journalism</textual></link><textual class="po-textual">.</textual></para></footnote><textual class="po-textual">and humans make mistakes. What changes when conversions are
      eliminated from the workflow is a decrease in the difficulty of
      troubleshooting and rectifying these mistakes. When the output format is
      identical to the source format, there’s no longer a need to retrace
      one’s steps to identify the source of a problem. If there’s a problem
      with the </textual><code class="po-atom e149 e149"><textual class="po-textual">&lt;ol&gt;</textual></code><textual class="po-textual"> markup in your EPUB, you find the
      </textual><code class="po-atom e150 e150"><textual class="po-textual">&lt;ol&gt;</textual></code><textual class="po-textual"> and fix it; you don’t need to backtrack to the
      corresponding numbered list in Word or </textual><code class="po-atom e151 e151"><textual class="po-textual">&lt;orderedlist&gt;</textual></code><textual class="po-textual">
      in DocBook and attempt to figure out why your numeration settings
      weren’t converted to the proper </textual><link class="po-inline e152 e152" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/html-markup/ol.html#ol.attrs.start" xlink:show="new" xlink:type="simple"><code class="po-atom e153 e153"><textual class="po-textual">start</textual></code></link><textual class="po-textual">
      attribute.</textual></para><para class="po-block e154 e154"><textual class="po-textual">Even better, HTML5 rendering systems are generally reasonably
      fault-tolerant. As Liza Daly, VP of Engineering at </textual><link class="po-inline e155 e155" xlink:actuate="onRequest" xlink:href="http://www.safaribooksonline.com/" xlink:show="new" xlink:type="simple"><textual class="po-textual">Safari Books
      Online</textual></link><textual class="po-textual">, notes in her article “The unXMLing of digital books,”
      it’s not necessary to have perfect, XHTML-compliant syntax to get your
      HTML5 to render as expected in a Web browser:</textual></para><blockquote class="po-container e156 e156"><para class="po-block e157 e157"><textual class="po-textual">I can throw just about anything even resembling an EPUB book at
        our reading system — even if it’s completely invalid with HTML tag
        soup — and it’ll load. We have very little preprocessing necessary;
        XSLT, which is hard to learn and harder to master, is almost absent
        from our workflow.</textual><xref class="po-milestone e158 e158" linkend="d13"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref></para></blockquote><para class="po-block e159 e159"><textual class="po-textual">As an example, if a book manuscript did contain poorly formed HTML
      with poor semantics like the following:</textual></para><programlisting class="po-block e160 e160" xml:space="preserve"><textual class="po-textual">&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
  &lt;body&gt;
    &lt;h1&gt;Basic formatting&lt;/h1&gt;
    &lt;p&gt;Here’s a paragraph with the last word in &lt;b&gt;bold.&lt;/b&gt;&lt;br&gt;&lt;br&gt;
    Here’s another paragraph with &lt;i&gt;some italics.&lt;/i&gt;
  &lt;/body&gt;
&lt;/html&gt;</textual></programlisting><para class="po-block e161 e161"><textual class="po-textual">Instead of well-formed, more semantic XHTML syntax like
      this:</textual></para><programlisting class="po-block e162 e162" xml:space="preserve"><textual class="po-textual">&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
  &lt;body&gt;
    &lt;section class="chapter" title="Basic formatting"&gt;
      &lt;h1&gt;Basic formatting&lt;/h1&gt;
      &lt;p&gt;Here’s a paragraph with the last word in &lt;strong&gt;bold.&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;Here’s another paragraph with &lt;em&gt;some italics.&lt;/em&gt;&lt;/p&gt;
    &lt;/section&gt;
  &lt;/body&gt;
&lt;/html&gt;</textual></programlisting><para class="po-block e163 e163"><textual class="po-textual">The HTML will still render largely the same in most modern Web
      browsers. AntennaHouse Formatter will also render identical PDF output
      from both syntaxes.</textual><footnote class="po-popup e164 e164"><para class="po-block e165 e165"><textual class="po-textual">The EPUB format, however, requires that content be well-formed
          XHTML, and many EPUB ereaders (including iBooks, Adobe Digital
          Editions, and Kobo) will not be able to properly render HTML that is
          not well-formed XML (e.g., no </textual><code class="po-atom e166 e166"><textual class="po-textual">&lt;br&gt;</textual></code><textual class="po-textual"> instead of
          </textual><code class="po-atom e167 e167"><textual class="po-textual">&lt;br/&gt;</textual></code><textual class="po-textual"> or </textual><code class="po-atom e168 e168"><textual class="po-textual">&lt;br&gt;&lt;/br&gt;</textual></code><textual class="po-textual">).
          Additionally, even if these readers did render EPUBs with non-XHTML
          content properly, these files would still not conform to the EPUB
          specification and would fail </textual><link class="po-inline e169 e169" xlink:actuate="onRequest" xlink:href="http://code.google.com/p/epubcheck/" xlink:show="new" xlink:type="simple"><textual class="po-textual">epubcheck</textual></link><textual class="po-textual">,
          the official EPUB validation tool. However, given that non-XHTML
          HTML5 content is good enough for the Web, and modern browsers can
          handle “tag soup” just fine, I tend to agree with Daly’s argument in
          “The unXMLing of digital books”</textual><link class="po-inline e170 e170" linkend="d13" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">[d13]</textual></link><textual class="po-textual"> that
          it’s excessively restrictive to impose higher standards on EPUB
          content documents.</textual></para></footnote></para><para class="po-block e171 e171"><textual class="po-textual">That’s not to say that every instance of sloppy HTML tagging will
      be so benign as to have no perceptible side effects on rendering. The
      point is that there is a fair amount of leeway, which can potentially be
      augmented by well-crafted CSS that accounts for potential variation in
      expected markup.</textual></para><para class="po-block e172 e172"><textual class="po-textual">If your markup is relatively flexible, doesn’t need to be
      converted/transformed into another format, and problems are easy to
      correct, do you really need to focus on validation?</textual></para></section><section class="po-hcontainer e173 e173"><title class="po-block e174 e174"><textual class="po-textual">Digital-First Content Development!</textual></title><para class="po-block e175 e175"><textual class="po-textual">When crafting a book that will be released in both print and ebook
      formats, there’s an opportunity to think “digital first,” and develop
      content that takes advantage of the features offered by a digital
      medium, such as audio/video, adaptive quizzes, games, etc.</textual></para><para class="po-block e176 e176"><textual class="po-textual">If you opt to use traditional word-processing and
      desktop-publishing tools to author a book with special digital features,
      you’ll be faced with questions like, “How do I embed a Canvas in my Word
      doc?”, “How do I change all those image placeholders into video files
      for the ebook version?”, and so on. The answer: more scripting or manual
      markup rework, either as part of the conversion or as a postprocessing
      step.</textual></para><para class="po-block e177 e177"><textual class="po-textual">Rich semantic markup languages like DocBook XML and AsciiDoc are a
      bit better suited to the goals of representing and converting multimedia
      content. DocBook in particular contains elements designated for
      representing audio and video media: </textual><code class="po-atom e178 e178"><textual class="po-textual">&lt;audiodata&gt;</textual></code><textual class="po-textual"> and
      </textual><code class="po-atom e179 e179"><textual class="po-textual">&lt;videodata&gt;</textual></code><textual class="po-textual">, respectively. Similarly, the HTML5
      backend toolchain for AsciiDoc comes with a configuration file with
      </textual><code class="po-atom e180 e180"><textual class="po-textual">audio::</textual></code><textual class="po-textual"> and </textual><code class="po-atom e181 e181"><textual class="po-textual">video::</textual></code><textual class="po-textual"> macros you can use to
      embed audio/video references into your documents. But there’s still no
      out of the box analog to the </textual><code class="po-atom e182 e182"><textual class="po-textual">&lt;canvas&gt;</textual></code><textual class="po-textual"> element, so
      some custom modeling and handling may still be in order for interactive
      features.</textual></para><para class="po-block e183 e183"><textual class="po-textual">In contrast, HTML5 was expressly designed for the purpose of
      marking up digital media, and the ebooks you produce will use HTML5 to
      render it. Choosing to author the entire book in HTML5 just makes sense,
      because it will then be trivial to integrate these digital-first
      elements directly into the manuscript.</textual></para></section><section class="po-hcontainer e184 e184"><title class="po-block e185 e185"><textual class="po-textual">Web-Based, WYSIWYG Authoring</textual></title><para class="po-block e186 e186"><textual class="po-textual">Two increasingly important features for authoring tools in the age
      of ebooks and self-publishing are having a Web-based platform and a
      WYSIWYG editing interface.</textual></para><para class="po-block e187 e187"><textual class="po-textual">It’s not much of an overstatement to say that in recent years,
      cloud computing has revolutionized the whole realm of document
      production (not just books, but also articles, spreadsheets, and
      correspondence). The two key advances a platform like </textual><link class="po-inline e188 e188" xlink:actuate="onRequest" xlink:href="https://drive.google.com" xlink:show="new" xlink:type="simple"><textual class="po-textual">Google Docs</textual></link><textual class="po-textual"> offers over
      desktop word processors are “access everywhere” and live, versioned
      collaboration.</textual><footnote class="po-popup e189 e189"><para class="po-block e190 e190"><textual class="po-textual">Google is really doubling down on its stake on the cloud being
          the future of business computing with </textual><link class="po-inline e191 e191" xlink:actuate="onRequest" xlink:href="http://www.chromium.org/chromium-os" xlink:show="new" xlink:type="simple"><textual class="po-textual">Chrome OS</textual></link><textual class="po-textual">
          and its line of </textual><link class="po-inline e192 e192" xlink:actuate="onRequest" xlink:href="http://www.google.com/intl/en/chrome/devices/" xlink:show="new" xlink:type="simple"><textual class="po-textual">Chromebooks</textual></link><textual class="po-textual">,
          which effectively turn the computer’s entire OS into a web
          app.</textual></para></footnote><textual class="po-textual"> Documents stored in the cloud can be retrieved from any
      Internet enabled device—desktop, laptop, tablet, smartphone—which
      completely obviates the need to traffic and sync files among machines
      via email or FTP. Cloud storage platforms like </textual><link class="po-inline e193 e193" xlink:actuate="onRequest" xlink:href="https://www.dropbox.com/" xlink:show="new" xlink:type="simple"><textual class="po-textual">Dropbox</textual></link><textual class="po-textual"> also offer that
      functionality, but what they don’t provide is the ability to collaborate
      on documents in real-time and track the history of changes made by
      different users. If more than one person is going to be accessing the
      book manuscript as it’s being developed (co-authors, editors,
      copyeditors, reviewers), a Web-based platform with cloud storage is a
      huge boon in facilitating the logistics so that all parties can focus at
      the task at hand, instead of worrying about file management.</textual><footnote class="po-popup e194 e194"><para class="po-block e195 e195"><textual class="po-textual">Whenever the virtues of a Web-based authoring tool are touted,
          there’s always one objection that is raised: online editing
          environments are no good because you can’t use them if you lack
          internet connectivity. Obviously that’s true, but you could equally
          well make the argument that computer-based authoring tools are also
          no good because they’re dependent on electricity or battery power.
          The utility of any given tool is context-dependent, and given that
          our modern infrastructure continues to come closer and closer to
          delivering on the promise of constant, ubiquitous internet access,
          it seems prudent to take full advantage of this connectivity when
          developing modern collaboration tools—with fallback offline functionality
          added as feasible.</textual></para></footnote><textual class="po-textual"> A Web app also greatly reduces the risks of hiccups being
      introduced into the process when collaborators are working on machines
      running different operating systems and/or different versions of desktop
      apps—no more “Could you resave as </textual><emphasis class="po-inline e196 e196"><textual class="po-textual">.doc</textual></emphasis><textual class="po-textual"> instead of
      </textual><emphasis class="po-inline e197 e197"><textual class="po-textual">.docx</textual></emphasis><textual class="po-textual">” or “Your template doesn’t work in Word 2008
      for Mac.”</textual><footnote class="po-popup e198 e198"><para class="po-block e199 e199"><textual class="po-textual">Of course, there’s still the risk of “Your webapp won’t run in
          IE6,” but in general, these sorts of issues are much easier to deal
          with. It’s much easier to say “Download another free Web browser”
          than it is to say “Please buy the latest version of this expensive
          software suite” or “Please stop using Windows.”</textual></para></footnote></para><para class="po-block e200 e200"><textual class="po-textual">Equally valuable to a lightweight authoring model (e.g.,
      self-publishing) is the ability to instantly get feedback while writing
      as to how the content renders. By WYSIWYG authoring, I not only mean
      that when content is tagged to be rendered in italics, the content
      onscreen actually appears </textual><emphasis class="po-inline e201 e201"><textual class="po-textual">in italics</textual></emphasis><textual class="po-textual"> (as opposed to
      being displayed as </textual><code class="po-atom e202 e202"><textual class="po-textual">_in italics_</textual></code><textual class="po-textual"> or </textual><code class="po-atom e203 e203"><textual class="po-textual">&lt;emphasis&gt;in
      italics&lt;/emphasis&gt;</textual></code><textual class="po-textual">). WYSIWYG should mean that the onscreen
      display mirrors as closely as possible what the final product will
      actually look like. In a model where a book manuscript is written in
      Microsoft Word and then composited in Adobe InDesign, this is rarely the
      case. At best, the onscreen display in Word is usually a rough
      </textual><emphasis class="po-inline e204 e204"><textual class="po-textual">approximation</textual></emphasis><textual class="po-textual"> of how the content will end up
      looking when the </textual><emphasis class="po-inline e205 e205"><textual class="po-textual">real</textual></emphasis><textual class="po-textual"> template is applied in
      InDesign. That’s not a great model when you’re looking to quickly
      iterate on both content development and typesetting.</textual></para><para class="po-block e206 e206"><textual class="po-textual">HTML5 offers an elegant path forward toward constructing both a
      Web-based and WYSIWYG authoring environment. If you need to construct an
      authoring frontend in HTML5, CSS, and JavaScript to get it on the Web,
      why not just accept the manuscript files in HTML5, CSS, and JavaScript
      as well? That means no additional interpreters are needed to render the
      source content in the editor for WYSIWYG display.</textual></para><para class="po-block e207 e207"><textual class="po-textual">The cornerstone of the WYSIWYG HTML5 editor is the </textual><link class="po-inline e208 e208" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/2008/WD-html5-20080610/editing.html#contenteditable0" xlink:show="new" xlink:type="simple"><code class="po-atom e209 e209"><textual class="po-textual">contenteditable</textual></code><textual class="po-textual">
      attribute</textual></link><textual class="po-textual">, which, when set on any element in a HTML5 document,
      allows the interior content of that element to be dynamically edited in
      real time by the end user who loads that document in her Web browser.
      With the help of some JavaScript to allow manipulation of
      </textual><code class="po-atom e210 e210"><textual class="po-textual">contenteditable</textual></code><textual class="po-textual"> elements via a GUI interface (formatting
      buttons, etc.), and CSS to provide the appropriate styling of the added
      content, it is possible to create the analog of an InDesign template
      right in the Web browser, where the user can write and composite a
      manuscript without having to manually modify the HTML source or CSS
      stylesheets.</textual></para><para class="po-block e211 e211"><textual class="po-textual">A plethora of </textual><link class="po-inline e212 e212" xlink:actuate="onRequest" xlink:href="http://www.aloha-editor.org/" xlink:show="new" xlink:type="simple"><textual class="po-textual">open
      source</textual></link><textual class="po-textual">, </textual><link class="po-inline e213 e213" xlink:actuate="onRequest" xlink:href="http://www.raptor-editor.com/" xlink:show="new" xlink:type="simple"><code class="po-atom e214 e214"><textual class="po-textual">contenteditable</textual></code><textual class="po-textual">-based</textual></link><textual class="po-textual">
      </textual><link class="po-inline e215 e215" xlink:actuate="onRequest" xlink:href="http://ckeditor.com/" xlink:show="new" xlink:type="simple"><textual class="po-textual">GUI HTML5 web editors</textual></link><textual class="po-textual">
      have been created in this fashion. </textual><xref class="po-milestone e216 e216" linkend="mercury_editor_screenshot"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> shows a screenshot of </textual><link class="po-inline e217 e217" xlink:actuate="onRequest" xlink:href="http://jejacks0n.github.io/mercury/" xlink:show="new" xlink:type="simple"><textual class="po-textual">Mercury Editor’s</textual></link><textual class="po-textual">
      </textual><code class="po-atom e218 e218"><textual class="po-textual">contenteditable</textual></code><textual class="po-textual"> interface in action.</textual></para><figure class="po-container e219 e219" xml:id="mercury_editor_screenshot"><title class="po-block e220 e220"><textual class="po-textual">The open source Mercury Editor has a GUI </textual><code class="po-atom e221 e221"><textual class="po-textual">contenteditable</textual></code><textual class="po-textual">
        interface that can be used to dynamicallly update Web content</textual></title><mediaobject class="po-container e222 e222"><imageobject class="po-container e223 e223"><imagedata class="po-meta e224 e224" fileref="../../../vol10/graphics/Kleinfeld01/Kleinfeld01-003.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e225 e225"><textual class="po-textual">The fact that so many </textual><code class="po-atom e226 e226"><textual class="po-textual">contenteditable</textual></code><textual class="po-textual"> editors are available right
      now is strong evidence that it is relatively easy to code this type of
      interface into an HTML5 app. But the fact that so many </textual><code class="po-atom e227 e227"><textual class="po-textual">contenteditable</textual></code><textual class="po-textual">
      editors are available right now is also strong evidence that no one’s
      really completely nailed the right feature set yet for this kind of app.
      The WYSIWYG part is there, but many of the features folks have grown
      accustomed to expect from suites like Google Docs aren’t baked in yet:
      collaborative editing, versioning, spellcheck, and so on. But it’s just
      a matter of time before that happens, as Web-based self-publishing
      platforms like </textual><link class="po-inline e228 e228" xlink:actuate="onRequest" xlink:href="http://pressbooks.com/" xlink:show="new" xlink:type="simple"><textual class="po-textual">PressBooks</textual></link><textual class="po-textual"> and </textual><link class="po-inline e229 e229" xlink:actuate="onRequest" xlink:href="https://www.inkling.com/habitat/" xlink:show="new" xlink:type="simple"><textual class="po-textual">Inkling Habitat</textual></link><textual class="po-textual"> have already embraced HTML as
      source format and have built their own Web editing interfaces.</textual></para></section></section><section class="po-hcontainer e230 e230"><title class="po-block e231 e231"><textual class="po-textual">Where HTML5 Falls Flat</textual></title><para class="po-block e232 e232"><textual class="po-textual">Between the potential benefits available in terms of streamlining
    production workflows to eliminate costly conversions, mitigate the
    overhead of validation, and construct a truly WYSIWYG Web authoring
    platform, O’Reilly Media has aggressively been pursuing a switch from a
    single-source workflow based on DocBook XML to one based on HTML5. But
    effecting this shift has not been without its challenges, and ironically,
    some of the issues we’ve faced in attempting to implement authoring and
    production in HTML5 are directly related to the markup format’s key
    strengths.</textual></para><section class="po-hcontainer e233 e233"><title class="po-block e234 e234"><textual class="po-textual">New-and-Improved Semantics?</textual></title><para class="po-block e235 e235"><textual class="po-textual">Yes, as discussed previously, HTML5 introduces a collection of
      semantic sectioning elements that greatly facilitate one’s ability to
      structure long-form textual content. However, HTML5’s sectioning
      vocabulary still pales in comparison to that of an XML vocabulary like
      DocBook, which was specificallly designed to support semantic tagging of
      book content. So, while HTML5 now offers </textual><code class="po-atom e236 e236"><textual class="po-textual">&lt;article&gt;</textual></code><textual class="po-textual">,
      </textual><code class="po-atom e237 e237"><textual class="po-textual">&lt;aside&gt;</textual></code><textual class="po-textual">, </textual><code class="po-atom e238 e238"><textual class="po-textual">&lt;nav&gt;</textual></code><textual class="po-textual">, and
      </textual><code class="po-atom e239 e239"><textual class="po-textual">&lt;section&gt;</textual></code><textual class="po-textual"> for blocking off book subsections, some key
      omissions include analogs to the following DocBook elements:
      </textual><code class="po-atom e240 e240"><textual class="po-textual">&lt;appendix&gt;</textual></code><textual class="po-textual">, </textual><code class="po-atom e241 e241"><textual class="po-textual">&lt;bibliography&gt;</textual></code><textual class="po-textual">,
      </textual><code class="po-atom e242 e242"><textual class="po-textual">&lt;chapter&gt;</textual></code><textual class="po-textual">, </textual><code class="po-atom e243 e243"><textual class="po-textual">&lt;glossary&gt;</textual></code><textual class="po-textual">,
      </textual><code class="po-atom e244 e244"><textual class="po-textual">&lt;index&gt;</textual></code><textual class="po-textual">, and </textual><code class="po-atom e245 e245"><textual class="po-textual">&lt;part&gt;</textual></code><textual class="po-textual">. Without
      standardized semantics for these book components, it’s left to
      individuals to improvise their own custom semantics within the
      constraints of the HTML5 specification. But when the tagging for a book
      chapter can fairly accurately be represented as:</textual></para><programlisting class="po-block e246 e246" xml:space="preserve"><textual class="po-textual">&lt;div class="chapter"&gt;</textual></programlisting><para class="po-block e247 e247"><textual class="po-textual">Or:</textual></para><programlisting class="po-block e248 e248" xml:space="preserve"><textual class="po-textual">&lt;section class="chapter"&gt;</textual></programlisting><para class="po-block e249 e249"><textual class="po-textual">Or maybe:</textual></para><programlisting class="po-block e250 e250" xml:space="preserve"><textual class="po-textual">&lt;section data-book-division="chapter"&gt;</textual></programlisting><para class="po-block e251 e251"><textual class="po-textual">Or if you’re not a native English speaker, perhaps:</textual></para><programlisting class="po-block e252 e252" xml:space="preserve"><textual class="po-textual">&lt;section class="chapitre"&gt;</textual></programlisting><para class="po-block e253 e253"><textual class="po-textual">Then the vocabulary really isn’t precise enough to serve the
      intended purpose. Just as many HTML 4.01 Web developers felt that
      </textual><code class="po-atom e254 e254"><textual class="po-textual">&lt;div&gt;</textual></code><textual class="po-textual"> was insufficient to meet their needs, many
      HTML5 book authors will likely feel the same way about the relatively
      small set of sectioning elements available.</textual></para></section><section class="po-hcontainer e255 e255" xml:id="no_conversions_necessary_question_mark"><title class="po-block e256 e256"><textual class="po-textual">No Conversions Necessary?</textual></title><para class="po-block e257 e257"><textual class="po-textual">It’s true that when HTML5 is used as both source format and output
      format that no mappings are needed between markup types, but that
      doesn’t necessarily mean that no document transformations are needed. In
      a DocBook single-source workflow, the conversion of book files to the
      desired output format typically serves two functions. One purpose is
      indeed the markup translation, but the other is the autogeneration of
      book content that is implicit in the structure of the source files: the
      Table of Contents, the Index (if present), and intrabook
      cross-references. These elements are generally not hardcoded into the
      document because doing so is both tedious and redundant.</textual></para><para class="po-block e258 e258"><textual class="po-textual">A standard Table of Contents simply lists chronologically the
      titles of each major division of the book (chapters, subsections, etc.)
      with hyperlinks and/or page numbers that reference the corresponding
      content in the body of the book. It makes little sense to manually mark
      up the Table of Contents by hand when the process can be automated,
      which is faster and less error-prone. The </textual><link class="po-inline e259 e259" xlink:actuate="onRequest" xlink:href="http://sourceforge.net/projects/docbook/files/" xlink:show="new" xlink:type="simple"><textual class="po-textual">DocBook XSL
      stylesheets</textual></link><textual class="po-textual"> contain logic to handle TOC generation, as do
      Microsoft Word and Adobe InDesign.</textual></para><para class="po-block e260 e260"><textual class="po-textual">Similarly, it’s desirable to have an Index that is autogenerated
      based on tags embedded in proper context in body text, rather than one
      hardcoded at the end of the book that is alphabetized by hand. A manual
      indexing process is typically so labor-intensive and not amenable to
      ongoing maintenance that it’s left to the very end of the production
      process to ensure that it won’t need to be repeated if text is added,
      deleted, or shuffled about). And for the same maintenance reasons,
      albeit on a smaller scale, “softcoded” cross references are preferable
      to their hardcoded counterparts. Hardcoding text in the manuscript like
      “See Chapter 7 for more details” opens the door to mistakes if at a
      later point in the writing/editing process, a decision is made to
      flip-flop Chapters 7 and 8 in the book. Much better to mark up the
      reference by linking to an anchor, as in the DocBook syntax “See
      </textual><code class="po-atom e261 e261"><textual class="po-textual">&lt;xref linkend="chapter_about_xml"/&gt;</textual></code><textual class="po-textual"> for more
      details”, and leave the work of generating the proper chapter number in
      the output to a script.</textual></para><para class="po-block e262 e262"><textual class="po-textual">Any robust, agile production workflow based on HTML5 is going to
      need to have the capability to autogenerate tables of contents, indices,
      and cross-reference text when appropriate</textual><footnote class="po-popup e263 e263"><para class="po-block e264 e264"><textual class="po-textual">If you’re also aiming to produce ebook outputs like EPUB and
          Mobi, some additional transformations may be desirable for these
          output formats to account for the vagaries of HTML rendering on
          different ereader devices. O’Reilly maintains a set of XSL
          stylesheets that preprocess HTML targeted for the Kindle before
          generating Mobi output to achieve better rendering results on
          devices that are not compatible with the KF8 format.</textual></para></footnote><textual class="po-textual">—whether via XSL, JavaScript, or another set of tools. So
      while it’s a good thing that no formal </textual><emphasis class="po-inline e265 e265"><textual class="po-textual">conversions</textual></emphasis><textual class="po-textual">
      are needed in this model, HTML5-to-HTML5 document transformations are
      still very much on the table. Unfortunately, it’s not especially
      realistic to presume that it will be possible to just apply some CSS to
      the HTML manuscript and call it a day.</textual></para></section><section class="po-hcontainer e266 e266" xml:id="no_validator_question_mark"><title class="po-block e267 e267"><textual class="po-textual">We Don’t Need Your Validator?</textual></title><para class="po-block e268 e268"><textual class="po-textual">Once transformations are back in the mix, the scale starts tilting
      back in favor of validation again. At minimum, most XML parsers are
      going to require well-formed markup, which means you don’t just need
      HTML5; you need XHTML5. Additionally, if automated Table of Contents,
      Index, or cross-reference generation are part of the toolchain, you may
      also want to validate against some additional requirements such as the
      following:</textual></para><itemizedlist class="po-table e269 e269"><listitem class="po-container e270 e270"><para class="po-block e271 e271"><textual class="po-textual">All major book divisions must have titles (e.g., every chapter
          must have a corresponding nonempty </textual><code class="po-atom e272 e272"><textual class="po-textual">&lt;h1&gt;</textual></code><textual class="po-textual">)</textual></para></listitem><listitem class="po-container e273 e273"><para class="po-block e274 e274"><textual class="po-textual">Book-division nesting and headings must follow a sensible
          hierarchy (e.g., no </textual><code class="po-atom e275 e275"><textual class="po-textual">&lt;h1&gt;</textual></code><textual class="po-textual"> elements lower in the
          hierarchy than </textual><code class="po-atom e276 e276"><textual class="po-textual">&lt;h2&gt;</textual></code><textual class="po-textual"> elements)</textual></para></listitem><listitem class="po-container e277 e277"><para class="po-block e278 e278"><textual class="po-textual">All softcoded cross-references must reference ids that are
          present in the markup (e.g., an anchor like </textual><code class="po-atom e279 e279"><textual class="po-textual">&lt;a
          href="#chapter_2"&gt;</textual></code><textual class="po-textual"> must point to a corresponding element
          with </textual><code class="po-atom e280 e280"><textual class="po-textual">id="chapter_2"</textual></code><textual class="po-textual">)</textual></para></listitem></itemizedlist><para class="po-block e281 e281"><textual class="po-textual">The effort expended in catching these sorts of issues up front may
      pay dividends in terms of less cleanup required when producing the final
      product.</textual></para></section></section><section class="po-hcontainer e282 e282"><title class="po-block e283 e283"><textual class="po-textual">Bridging the Gap</textual></title><para class="po-block e284 e284"><textual class="po-textual">To make HTML5 a truly viable markup format for authoring and
    producing long-form text content, it needs to be augmented with a semantic
    vocabulary for book-specific components. Once that’s in place, validation
    rules can be formulated to ensure conformance, and code can be written to
    script generation of navigation elements (table of contents, index, etc.).
    While it’s certainly possible for individual authors and publishers to
    create their own custom schemas and toolsets for HTML5 to fill this void,
    there are standard, universal semantics for book sectioning (e.g.,
    chapter, glossary, afterword), which means there’s a clear opportunity and
    need for an open HTML5-based standard geared toward book authoring so that
    there’s not a constant reinventing of the wheel by each entrant into the
    HTML5-based publishing space. When O’Reilly Media started exploring the
    options for HTML5-based book markup, the first standard we looked at was
    the EPUB ebook format, which added a new semantic vocabulary for book
    components in version 3.0 of the specification.</textual></para><section class="po-hcontainer e285 e285"><title class="po-block e286 e286"><textual class="po-textual">EPUB 3 and the Structural Semantics Vocabulary</textual></title><para class="po-block e287 e287"><textual class="po-textual">The </textual><link class="po-inline e288 e288" xlink:actuate="onRequest" xlink:href="http://idpf.org/about-us" xlink:show="new" xlink:type="simple"><textual class="po-textual">International
      Digital Publishing Forum (IDPF)</textual></link><textual class="po-textual">, the organization that developed
      and maintains the EPUB standard, recognized the need for richer
      semantics in HTML-based ebook content. In version 3.0 of the EPUB
      standard, they added a new EPUB-specific attribute to the format’s
      supported HTML5 markup called </textual><link class="po-inline e289 e289" xlink:actuate="onRequest" xlink:href="http://www.idpf.org/epub/30/spec/epub30-contentdocs.html#attrdef-epub-type" xlink:show="new" xlink:type="simple"><code class="po-atom e290 e290"><textual class="po-textual">epub:type</textual></code></link><xref class="po-milestone e291 e291" linkend="e11"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. The </textual><code class="po-atom e292 e292"><textual class="po-textual">epub:type</textual></code><textual class="po-textual"> attribute can be
      applied to any element in any content document,</textual><footnote class="po-popup e293 e293"><para class="po-block e294 e294"><textual class="po-textual">This includes any HTML5 element, but also any SVG or MathML
          elements embedded in the document, as these vocabularies are also
          supported in EPUB 3 content documents.</textual></para></footnote><textual class="po-textual">and its supported values include any terms defined in the
      “EPUB 3 Structural Semantics Vocabulary”</textual><xref class="po-milestone e295 e295" linkend="e11_2"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. Also drafted by the IDPF, the Structural
      Semantics Vocabulary is a companion spec that standardarizes a set of
      semantics for book components. It encompasses a broad lexicon with which
      most in the publishing industry should be familiar, including terms such
      as “chapter”, “appendix”, “part”, “copyright-page”, “errata”,
      “pagebreak”, and “sidebar”.</textual><footnote class="po-popup e296 e296"><para class="po-block e297 e297"><textual class="po-textual">If needed, the default value set offered by the Structural
          Semantics Vocabulary can be extended with terms from other
          vocabularies by using prefixes and the </textual><code class="po-atom e298 e298"><textual class="po-textual">prefix</textual></code><textual class="po-textual">
          attribute. See </textual><link class="po-inline e299 e299" xlink:actuate="onRequest" xlink:href="http://www.idpf.org/epub/30/spec/epub30-publications.html#sec-metadata-assoc" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.idpf.org/epub/30/spec/epub30-publications.html#sec-metadata-assoc</textual></link><textual class="po-textual">
          for more details.</textual></para></footnote></para><para class="po-block e300 e300"><textual class="po-textual">Using </textual><code class="po-atom e301 e301"><textual class="po-textual">epub:type</textual></code><textual class="po-textual">, content creators can inflect
      existing HTML5 elements with the additional proper book semantics. For
      example, the following markup:</textual></para><programlisting class="po-block e302 e302" xml:space="preserve"><textual class="po-textual">&lt;section epub:type="chapter"&gt;</textual></programlisting><para class="po-block e303 e303"><textual class="po-textual">Indicates a section of the document that corresponds to a book
      chapter.</textual></para><para class="po-block e304 e304"><textual class="po-textual">While </textual><code class="po-atom e305 e305"><textual class="po-textual">epub:type</textual></code><textual class="po-textual"> in conjunction with the Structural
      Semantics Vocabulary does provide a standard mechanism for tagging book
      components, it was not intended to serve the needs of content authoring
      and production; it was designed for consumption by ereader software. Per
      </textual><link class="po-inline e306 e306" xlink:actuate="onRequest" xlink:href="http://www.idpf.org/epub/30/spec/epub30-contentdocs.html#sec-xhtml-content-type-attribute" xlink:show="new" xlink:type="simple"><textual class="po-textual">the
      EPUB 3 specification</textual></link><textual class="po-textual">, </textual><code class="po-atom e307 e307"><textual class="po-textual">epub:type</textual></code><textual class="po-textual"> “provides a
      controlled way for Reading Systems and other User Agents to learn more
      about the structure and content of a document, providing them the
      opportunity to enhance the reading experience for Users.” As such, there
      are a couple key shortcomings that arise when using
      </textual><code class="po-atom e308 e308"><textual class="po-textual">epub:type</textual></code><textual class="po-textual"> as a semantic authoring solutions:</textual></para><variablelist class="po-table e309 e309"><varlistentry class="po-record e310 e310"><term class="po-block e311 e311"><textual class="po-textual">It’s EPUB-specific</textual></term><listitem class="po-container e312 e312"><para class="po-block e313 e313"><textual class="po-textual">The </textual><code class="po-atom e314 e314"><textual class="po-textual">epub:type</textual></code><textual class="po-textual"> attribute is not a formal part of
            the HTML5 specification at this time; it’s an add-on that’s
            specific to the EPUB 3 specification and that is a part of the
            EPUB namespace (</textual><code class="po-atom e315 e315"><textual class="po-textual">http://www.idpf.org/2007/ops</textual></code><textual class="po-textual">). Using
            </textual><code class="po-atom e316 e316"><textual class="po-textual">epub:type</textual></code><textual class="po-textual"> in your source documents implicitly
            associates them with a specific output format (EPUB) and may
            necessitate additional postprocessing for other formats. For
            example, if the same HTML source content is to be published on the
            Web, you’ll probably want to transform </textual><code class="po-atom e317 e317"><textual class="po-textual">epub:type</textual></code><textual class="po-textual"> into
            an attribute supported by the HTML5 spec (e.g., </textual><code class="po-atom e318 e318"><textual class="po-textual">class</textual></code><textual class="po-textual">
            or a custom </textual><code class="po-atom e319 e319"><textual class="po-textual">data</textual></code><textual class="po-textual"> attribute), which might also
            necessitate some corresponding CSS tweaks.</textual></para><para class="po-block e320 e320"><textual class="po-textual">Having semantics that were valid against the HTML5 spec and
            thus output-format-agnostic would be a cleaner, more elegant
            solution for content creators.</textual></para></listitem></varlistentry><varlistentry class="po-record e321 e321"><term class="po-block e322 e322"><textual class="po-textual">It doesn’t specify any content model restrictions</textual></term><listitem class="po-container e323 e323"><para class="po-block e324 e324"><textual class="po-textual">Having proper semantics for HTML elements is likely not
            enough to support more robust validation of the type described in
            </textual><xref class="po-milestone e325 e325" linkend="no_validator_question_mark"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. In EPUB 3, the
            following markup for a chapter and subsection:</textual></para><programlisting class="po-block e326 e326" xml:space="preserve"><textual class="po-textual">&lt;section epub:type="chapter"&gt;
  </textual><emphasis class="po-inline e327 e327" role="bold"><textual class="po-textual">&lt;h2&gt;This is the chapter heading&lt;/h2&gt;</textual></emphasis><textual class="po-textual">
  &lt;p&gt;I am now going to include a subsection here:&lt;/p&gt;
  &lt;section&gt;
    </textual><emphasis class="po-inline e328 e328" role="bold"><textual class="po-textual">&lt;p&gt;It would be odd to put a body-text paragraph before the main section heading&lt;/p&gt;
    &lt;h1&gt;Book Markup Best Practices&lt;/h1&gt;</textual></emphasis><textual class="po-textual">
  &lt;/section&gt;
&lt;/section&gt;</textual></programlisting><para class="po-block e329 e329"><textual class="po-textual">Is as equally acceptable as this markup:</textual></para><programlisting class="po-block e330 e330" xml:space="preserve"><textual class="po-textual">&lt;section epub:type="chapter"&gt;
  </textual><emphasis class="po-inline e331 e331" role="bold"><textual class="po-textual">&lt;h1&gt;This is the chapter heading&lt;/h1&gt;</textual></emphasis><textual class="po-textual">
  &lt;p&gt;I am now going to include a subsection here:&lt;/p&gt;
  &lt;section&gt;
</textual><emphasis class="po-inline e332 e332" role="bold"><textual class="po-textual">    &lt;h2&gt;Book Markup Best Practices&lt;/h2&gt;
    &lt;p&gt;It would be odd to put a body-text paragraph before the main section heading&lt;/p&gt; </textual></emphasis><textual class="po-textual">   
  &lt;/section&gt;
&lt;/section&gt;</textual></programlisting><para class="po-block e333 e333"><textual class="po-textual">However, it’s hard not to argue that the latter markup is
            far superior to the former markup in terms of clean, sensible
            representation of hierarchical book components, as it conforms to
            two rules: a formal section begins with a heading, and subheadings
            should be of lesser importance than their parent headings</textual><footnote class="po-popup e334 e334"><para class="po-block e335 e335"><textual class="po-textual">THe HTML5 specification does </textual><link class="po-inline e336 e336" xlink:actuate="onRequest" xlink:href="http://www.w3.org/html/wg/drafts/html/master/sections.html#headings-and-sections" xlink:show="new" xlink:type="simple"><textual class="po-textual">formally
                encourage this practice</textual></link><textual class="po-textual">: “Sections may contain headings
                of any </textual><link class="po-inline e337 e337" xlink:actuate="onRequest" xlink:href="http://www.w3.org/html/wg/drafts/html/master/sections.html#rank" xlink:show="new" xlink:type="simple"><textual class="po-textual">rank</textual></link><textual class="po-textual">,
                and authors are strongly encouraged to use headings of the
                appropriate </textual><link class="po-inline e338 e338" xlink:actuate="onRequest" xlink:href="http://www.w3.org/html/wg/drafts/html/master/sections.html#rank" xlink:show="new" xlink:type="simple"><textual class="po-textual">rank</textual></link><textual class="po-textual">
                for the section’s nesting level.” But it’s not a requirement,
                and the EPUB 3 </textual><link class="po-inline e339 e339" xlink:actuate="onRequest" xlink:href="http://code.google.com/p/epubcheck/" xlink:show="new" xlink:type="simple"><textual class="po-textual">epubcheck</textual></link><textual class="po-textual">
                validator doesn’t enforce it.</textual></para></footnote><textual class="po-textual"> (i.e., it’s bad practice to nest a
            </textual><code class="po-atom e340 e340"><textual class="po-textual">&lt;h1&gt;</textual></code><textual class="po-textual"> under an </textual><code class="po-atom e341 e341"><textual class="po-textual">&lt;h2&gt;</textual></code><textual class="po-textual">).</textual></para><para class="po-block e342 e342"><textual class="po-textual">I’m not arguing that EPUB 3 should be enforcing these kinds
            of restrictions; as an output format meant for HTML rendering, I
            think it’s an asset that any valid XHTML is acceptable. But as an
            authoring format, these additional restrictions are valuable, as
            consistent, high-quality source markup ensures high-quality
            output.</textual></para></listitem></varlistentry></variablelist><para class="po-block e343 e343"><textual class="po-textual">It’s not the EPUB specification’s mission to address either of
      these content-authoring concerns, and as such, I feel it’s misguided to
      consider EPUB 3 to be an appropriate HTML authoring format.</textual></para></section><section class="po-hcontainer e344 e344"><title class="po-block e345 e345"><textual class="po-textual">HTMLBook: A New HTML5 Authoring Standard</textual></title><para class="po-block e346 e346"><textual class="po-textual">If EPUB 3 isn’t a good fit as an HTML5 authoring format, what
      should be used instead? Since we weren’t aware of another existing open
      standard for authoring in HTML5, my colleagues and I at O’Reilly
      developed our own: HTMLBook. The first Working Draft of the HTMLBook
      specification was </textual><link class="po-inline e347 e347" xlink:actuate="onRequest" xlink:href="https://github.com/oreillymedia/HTMLBook" xlink:show="new" xlink:type="simple"><textual class="po-textual">released
      publicly</textual></link><textual class="po-textual"> in April 2013, along with an XML Schema that can be used
      for validation.</textual></para><para class="po-block e348 e348"><textual class="po-textual">Unlike EPUB 3, the HTMLBook specification does not include any
      custom add-on elements or attributes that cannot be found in standard
      HTML5. Instead, HTMLBook subsets the content model defined in the HTML5
      specification to add additional requirements and restrictions that apply
      specifically to book components such as chapters, figures, and sidebars.
      This means that documents that are valid HTMLBook documents are also
      valid against the standard HTML5 specification</textual><footnote class="po-popup e349 e349"><para class="po-block e350 e350"><textual class="po-textual">However, the converse is not necessarily true. Just as not all
          rectangles are squares, not all HTML5 documents will meet the
          additional requirements of HTMLBook.</textual></para></footnote><textual class="po-textual"> and can be used as is in all HTML5-based output
      formats.</textual></para><para class="po-block e351 e351"><textual class="po-textual">The key supplemental requirements imposed by HTMLBook are semantic
      inflections on all structural book elements, as well as some additional
      restrictions in the content models of these elements.</textual></para><para class="po-block e352 e352"><textual class="po-textual">Whenever possible, the values for semantic inflections were drawn
      from those available in the EPUB 3 Structural Semantics Vocabulary, but
      when appropriate terms did not exist in this corpus, values were drawn
      from the DocBook XML vocabulary. In contrast to EPUB 3, the
      </textual><code class="po-atom e353 e353"><textual class="po-textual">data-type</textual></code><textual class="po-textual"> attribute is used for semantic inflection instead of </textual><code class="po-atom e354 e354"><textual class="po-textual">epub:type</textual></code><textual class="po-textual">, which
      serves to maintain conformity with the HTML5 spec.</textual></para><para class="po-block e355 e355"><textual class="po-textual">In a standard HTMLBook document, the </textual><code class="po-atom e356 e356"><textual class="po-textual">&lt;body&gt;</textual></code><textual class="po-textual">
      element is the root element for book content, and requires a
      </textual><code class="po-atom e357 e357"><textual class="po-textual">data-type</textual></code><textual class="po-textual"> value of </textual><code class="po-atom e358 e358"><textual class="po-textual">book</textual></code><textual class="po-textual"> (any book-related
      metadata―such as ISBN or price—can be captured in
      </textual><code class="po-atom e359 e359"><textual class="po-textual">&lt;meta&gt;</textual></code><textual class="po-textual"> elements in the document
      </textual><code class="po-atom e360 e360"><textual class="po-textual">&lt;head&gt;</textual></code><textual class="po-textual">). Nested in the </textual><code class="po-atom e361 e361"><textual class="po-textual">&lt;body&gt;</textual></code><textual class="po-textual"> must
      be one or more </textual><code class="po-atom e362 e362"><textual class="po-textual">&lt;section&gt;</textual></code><textual class="po-textual">, </textual><code class="po-atom e363 e363"><textual class="po-textual">&lt;nav&gt;</textual></code><textual class="po-textual">,
      and/or </textual><code class="po-atom e364 e364"><textual class="po-textual">&lt;div&gt;</textual></code><textual class="po-textual"> elements that represent standard book
      divisions and that must be inflected accordingly. Here is an example of
      a standard HTMLBook skeleton for a book that has a titlepage, table of
      contents, preface, several chapters, and an appendix:</textual></para><programlisting class="po-block e365 e365" xml:space="preserve"><textual class="po-textual">&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.w3.org/1999/xhtml ../htmlbook.xsd"
      xmlns="http://www.w3.org/1999/xhtml"&gt;
  &lt;head&gt;
    &lt;title&gt;This is the book title&lt;/title&gt;
  &lt;/head&gt;
  &lt;body data-type="book"&gt;
    &lt;section data-type="titlepage"&gt;
      &lt;!-- Titlepage content here --&gt;
    &lt;/section&gt;
    &lt;nav data-type="toc"&gt;
      &lt;!-- Table of Contents content here --&gt;
    &lt;/nav&gt;
    &lt;section data-type="preface"&gt;
      &lt;!-- Preface content here --&gt;
    &lt;/section&gt;
    &lt;section data-type="chapter"&gt;
      &lt;!-- Chapter 1 content here --&gt;
    &lt;/section&gt;
    &lt;section data-type="chapter"&gt;
      &lt;!-- Chapter 2 content here --&gt;
    &lt;/section&gt;
    &lt;section data-type="chapter"&gt;
      &lt;!-- Chapter 3 content here --&gt;
    &lt;/section&gt;
    &lt;section data-type="appendix"&gt;
      &lt;!-- Appendix content here --&gt;
    &lt;/section&gt;
  &lt;/body&gt;
&lt;/html&gt;</textual></programlisting><para class="po-block e366 e366"><textual class="po-textual">Each of these main book divisions can have subdivisions of their
      own, which are </textual><code class="po-atom e367 e367"><textual class="po-textual">&lt;section&gt;</textual></code><textual class="po-textual"> elements inflected with a
      data-type value of </textual><code class="po-atom e368 e368"><textual class="po-textual">sect1</textual></code><textual class="po-textual">, </textual><code class="po-atom e369 e369"><textual class="po-textual">sect2</textual></code><textual class="po-textual">,
      </textual><code class="po-atom e370 e370"><textual class="po-textual">sect3</textual></code><textual class="po-textual">, or </textual><code class="po-atom e371 e371"><textual class="po-textual">sect4</textual></code><footnote class="po-popup e372 e372"><para class="po-block e373 e373"><textual class="po-textual">Borrowed from DocBook XML</textual></para></footnote><textual class="po-textual">, the appropriate value enforced based on position in the
      overall hierarchy. Additional requirements imposed on book divisions
      that are both direct children of </textual><code class="po-atom e374 e374"><textual class="po-textual">&lt;body&gt;</textual></code><textual class="po-textual"> and
      lower-level descendants:</textual></para><itemizedlist class="po-table e375 e375"><listitem class="po-container e376 e376"><para class="po-block e377 e377"><textual class="po-textual">Each division’s first child must be a heading using a heading
          element (</textual><code class="po-atom e378 e378"><textual class="po-textual">&lt;h1&gt;</textual></code><textual class="po-textual">–</textual><code class="po-atom e379 e379"><textual class="po-textual">&lt;h6&gt;</textual></code><textual class="po-textual">) that is
          appropriate to the hierarchy level.</textual></para></listitem><listitem class="po-container e380 e380"><para class="po-block e381 e381"><textual class="po-textual">Each division can only contain children that belong to a
          predefined set of Block elements (no raw text nodes). HTMLBook’s
          classification of Block elements is largely consistent with the
          HTML5 specification’s classification of </textual><link class="po-inline e382 e382" xlink:actuate="onRequest" xlink:href="http://www.w3.org/html/wg/drafts/html/master/dom.html#flow-content" xlink:show="new" xlink:type="simple"><textual class="po-textual">Flow
          Content</textual></link><textual class="po-textual">, minus elements that can also be found in the HTML5
          categories of </textual><link class="po-inline e383 e383" xlink:actuate="onRequest" xlink:href="http://www.w3.org/html/wg/drafts/html/master/dom.html#heading-content" xlink:show="new" xlink:type="simple"><textual class="po-textual">Heading
          Content</textual></link><textual class="po-textual">, </textual><link class="po-inline e384 e384" xlink:actuate="onRequest" xlink:href="http://www.w3.org/html/wg/drafts/html/master/dom.html#phrasing-content" xlink:show="new" xlink:type="simple"><textual class="po-textual">Phrasing
          Content</textual></link><textual class="po-textual">, and </textual><link class="po-inline e385 e385" xlink:actuate="onRequest" xlink:href="http://www.w3.org/html/wg/drafts/html/master/dom.html#sectioning-content" xlink:show="new" xlink:type="simple"><textual class="po-textual">Sectioning
          Content</textual></link><textual class="po-textual">.</textual></para></listitem><listitem class="po-container e386 e386"><para class="po-block e387 e387"><textual class="po-textual">The Table of Contents content in a </textual><code class="po-atom e388 e388"><textual class="po-textual">&lt;nav&gt;</textual></code><textual class="po-textual">
          element must contain </textual><code class="po-atom e389 e389"><textual class="po-textual">&lt;ol&gt;</textual></code><textual class="po-textual"> markup that is
          consistent with the requirements for the </textual><link class="po-inline e390 e390" xlink:actuate="onRequest" xlink:href="http://www.idpf.org/epub/30/spec/epub30-contentdocs-20111011.html#sec-xhtml-nav" xlink:show="new" xlink:type="simple"><textual class="po-textual">Navigation
          Document</textual></link><textual class="po-textual"> specified in the EPUB 3 standard.</textual></para></listitem></itemizedlist><para class="po-block e391 e391"><textual class="po-textual">The goal of HTMLBook is not to overlay a panoply of burdensome
      supplemental requirements on top of the HTML5 standard; rather, it’s to
      add the </textual><emphasis class="po-inline e392 e392"><textual class="po-textual">minimum requirements necessary </textual></emphasis><textual class="po-textual">to support
      consistant, semantic tagging of book content to facilitate templating
      and styling with CSS3—as well as </textual><link class="po-inline e393 e393" linkend="no_conversions_necessary_question_mark" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">auto-generation of
      navigation content</textual></link><textual class="po-textual"> and any requisite postprocessing via XSL or
      other scripting language—to produce high-quality outputs in multiple
      formats (both print and digital). Within this general framework, users
      of HTMLBook can employ whatever HTML5 markup they wish, including MathML
      and SVG content.</textual></para><para class="po-block e394 e394"><textual class="po-textual">Along with the formal specification and Schema document, the
      HTMLBook project contains some sample CSS stylesheets, which authors can
      either use wholesale as design templates for their ebook outputs, or
      adapt to create their own custom styling. It also contains a set of XSL
      stylesheets that can be used to autogenerate Table of Contents, Indices,
      and cross-references for HTMLBook content, as well as assist in
      packaging it as PDF, EPUB, and Mobi.</textual><footnote class="po-popup e395 e395"><para class="po-block e396 e396"><textual class="po-textual">These stylesheets are modeled after the </textual><link class="po-inline e397 e397" xlink:actuate="onRequest" xlink:href="http://sourceforge.net/projects/docbook/files/docbook-xsl/" xlink:show="new" xlink:type="simple"><textual class="po-textual">docbook-xsl
          stylesheets</textual></link><textual class="po-textual">, but with a focus placed solely on postprocessing
          and packaging HTML5 content, not on translating it.</textual></para></footnote><textual class="po-textual"> We are currently in the early phases of developing this
      toolchain, but we hope over the coming months to continue to extend and
      refine this open source software to support the growing community of
      authors and publishers who are looking toward HTML5 and Web technologies
      for developing and producing book content.</textual></para></section></section><section class="po-hcontainer e398 e398"><title class="po-block e399 e399"><textual class="po-textual">Conclusion</textual></title><para class="po-block e400 e400"><textual class="po-textual">HTML5 is better suited than any other document format to the unique
    demands of next-generation book authoring workflows, where creating both
    print and digital products is the aim, and the value lies in having a
    lightweight, low-cost, efficient toolset. While we’re still in the early
    stages of book authoring platforms and ebook tooling for HTML5-as-source,
    I expect that in a few years, drafting a book manuscript in HTML5 will be
    as commonplace as drafting a manuscript in Microsoft Word is today, and
    that the tools available for both editing and producing books in HTML5
    will continue to grow and evolve.</textual></para></section><bibliography class="po-hcontainer e401 e401"><title class="po-block e402 e402"><textual class="po-textual">Bibliography/References</textual></title><bibliomixed class="po-block e403 e403" xml:id="d13"><textual class="po-textual">Daly, Liza. “The unXMLing of digital
    books,” February 1, 2013, </textual><link class="po-inline e404 e404" xlink:actuate="onRequest" xlink:href="http://techblog.safaribooksonline.com/2013/02/01/the-unxmling-of-digital-books/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://techblog.safaribooksonline.com/2013/02/01/the-unxmling-of-digital-books/</textual></link></bibliomixed><bibliomixed class="po-block e405 e405" xml:id="e11"><textual class="po-textual">“EPUB Content Documents 3.0,” IDPF, </textual><link class="po-inline e406 e406" xlink:actuate="onRequest" xlink:href="http://www.idpf.org/epub/30/spec/epub30-contentdocs.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.idpf.org/epub/30/spec/epub30-contentdocs.html</textual></link></bibliomixed><bibliomixed class="po-block e407 e407" xml:id="e11_2"><textual class="po-textual">“EPUB 3 Structural Semantics
    Vocabulary,” IDPF, </textual><link class="po-inline e408 e408" xlink:actuate="onRequest" xlink:href="http://www.idpf.org/epub/vocab/structure/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.idpf.org/epub/vocab/structure/
    </textual></link></bibliomixed><bibliomixed class="po-block e409 e409" xml:id="m12"><textual class="po-textual">McKesson, Nellie. “Building Books with
    CSS3,” June 12, 2012, </textual><link class="po-inline e410 e410" xlink:actuate="onRequest" xlink:href="http://alistapart.com/article/building-books-with-css3" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://alistapart.com/article/building-books-with-css3</textual></link></bibliomixed><bibliomixed class="po-block e411 e411" xml:id="s11"><textual class="po-textual">Savikas, Andrew. “Distribution
    Everywhere,” </textual><emphasis class="po-inline e412 e412"><textual class="po-textual">Book: A Futurist’s Manifesto</textual></emphasis><textual class="po-textual">: O’Reilly
    Media, Inc, pp 21-34</textual></bibliomixed><bibliomixed class="po-block e413 e413" xml:id="h13"><textual class="po-textual">“Sectioning content,” HTML 5.1 Nightly, A
    vocabulary and associated APIs for HTML and XHTML, Editor’s Draft 8 April
    2013, </textual><link class="po-inline e414 e414" xlink:actuate="onRequest" xlink:href="http://www.w3.org/html/wg/drafts/html/master/dom.html#sectioning-content-0" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/html/wg/drafts/html/master/dom.html#sectioning-content-0</textual></link></bibliomixed><bibliomixed class="po-block e415 e415" xml:id="w13"><textual class="po-textual">Wischenbart, Rüdiger, Carlo Carrerho,
    Veronika Licher, and Vinutha Mallya. “The Global eBook Market: Current
    Conditions &amp; Future Projections”: O’Reilly Media, Inc.,
    2013.</textual></bibliomixed></bibliography></article></classedDocument>