<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.3" xml:id="Bal2014pero0429"><title class="po-block e1 e1"><textual class="po-textual">Overlapproaches in documents: a definitive classification (in OWL, 2!)</textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">Balisage: The Markup Conference 2014</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 5 - 8, 2014</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual">Several different types of overlap exist and different strategies are needed to detect
        them. In particular, there is a clear difference between ranges of text that overlap and
        markup items that overlap (that is, elements and attributes), and how these types of
        overlapping affect dominance and containment relations of nodes is of some relevance, too.
        In order to provide a complete definition and description of these overlapping patterns, we
        introduce the </textual><emphasis class="po-inline e8 e8" role="ital"><textual class="po-textual">EARMARK Overlapping Ontology</textual></emphasis><textual class="po-textual"> (</textual><emphasis class="po-inline e9 e9" role="ital"><textual class="po-textual">EOO</textual></emphasis><textual class="po-textual">), i.e., an OWL 2 DL ontology that extends </textual><emphasis class="po-inline e10 e10" role="ital"><textual class="po-textual">EARMARK</textual></emphasis><textual class="po-textual"> (an OWL-based markup meta-language compliant with extended GODDAGs) to
        define properties describing dominance and containment relations as well as a complete
        characterisation of the different kinds of overlap that can happen to nodes. In addition, we
        also present some inference rules for the automatic retrieval (by means of a reasoner) of all the
        overlapping instances in a given input markup document.</textual></para></abstract><author class="po-record e11 e11"><personname class="po-record e12 e12"><firstname class="po-field e13 e13"><textual class="po-textual">Silvio</textual></firstname><surname class="po-field e14 e14"><textual class="po-textual">Peroni</textual></surname></personname><personblurb class="po-container e15 e15"><para class="po-block e16 e16"><textual class="po-textual">Silvio Peroni holds a Ph.D. degree in Computer Science and he is a post-doc at the University of Bologna. He is an expert in document markup and semantic descriptions of bibliographic entities using OWL ontologies. He is one of the main developers of SPAR (Semantic Publishing and Referencing) Ontologies (http://purl.org/spar) that permit RDF descriptions of bibliographic entities, citations, reference collections and library catalogues, the structural and rhetorical components of documents, and roles, statuses and workflows in publishing. Among his research interests are Semantic Web technologies, markup languages for complex documents, design patterns for digital documents and ontology modelling, and automatic processes of analysis and segmentation. In particular, his recent works concern the empirical analysis of the nature of citations, the study of visualisation and browsing interfaces for semantic data, and the development of ontologies to manage, integrate and query bibliographic information according to temporal and contextual constraints.</textual></para></personblurb><affiliation class="po-record e17 e17"><orgname class="po-block e18 e18"><textual class="po-textual">Department of Computer Science and Engineering, University of Bologna, Bologna,
          Italy</textual></orgname></affiliation><email class="po-field e19 e19"><textual class="po-textual">silvio.peroni@unibo.it</textual></email></author><author class="po-record e20 e20"><personname class="po-record e21 e21"><firstname class="po-field e22 e22"><textual class="po-textual">Francesco</textual></firstname><surname class="po-field e23 e23"><textual class="po-textual">Poggi</textual></surname></personname><personblurb class="po-container e24 e24"><para class="po-block e25 e25"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></para></personblurb><affiliation class="po-record e26 e26"><orgname class="po-block e27 e27"><textual class="po-textual">Department of Computer Science and Engineering, University of Bologna, Bologna,
          Italy</textual></orgname></affiliation><email class="po-field e28 e28"><textual class="po-textual">fpoggi@cs.unibo.it</textual></email></author><author class="po-record e29 e29"><personname class="po-record e30 e30"><firstname class="po-field e31 e31"><textual class="po-textual">Fabio</textual></firstname><surname class="po-field e32 e32"><textual class="po-textual">Vitali</textual></surname></personname><personblurb class="po-container e33 e33"><para class="po-block e34 e34"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></para></personblurb><affiliation class="po-record e35 e35"><orgname class="po-block e36 e36"><textual class="po-textual">Department of Computer Science and Engineering, University of Bologna, Bologna,
          Italy</textual></orgname></affiliation><email class="po-field e37 e37"><textual class="po-textual">fabio@cs.unibo.it</textual></email></author><legalnotice class="po-container e38 e38"><para class="po-block e39 e39"><textual class="po-textual">Copyright Â© 2014 by the authors.</textual></para></legalnotice><keywordset class="po-table e40 e40" role="author"><keyword class="po-field e41 e41"><textual class="po-textual">EARMARK Overlapping Ontology</textual></keyword><keyword class="po-field e42 e42"><textual class="po-textual">EARMARK</textual></keyword><keyword class="po-field e43 e43"><textual class="po-textual">overlapping with range and markup item</textual></keyword><keyword class="po-field e44 e44"><textual class="po-textual">dominance vs. containment</textual></keyword></keywordset></info><section class="po-hcontainer e45 e45"><title class="po-block e46 e46"><textual class="po-textual">Introduction</textual></title><para class="po-block e47 e47"><textual class="po-textual">At the Balisage 2009 Conference we presented for the first time a new approach to overlapping markup called
			EARMARK, or "Extremely Annotational RDF Markup". It provided a point of view over something that is
			quintessentially Balisagean, overlapping markup, by using a number of suspicious techniques for this community,
			such as standoff markup, RDF, OWL, reasoners. </textual></para><para class="po-block e48 e48"><textual class="po-textual">In brief, an EARMARK document is a collection of RDF statements about fragments of a text (a plain text or
			even an XML document), that describe the fragments' characteristics and features regardless of whether the
			fragments contain, are disjoint, or overlap with each other. Each fragment is associated to a formal concept
			called Range, which can (but does not have to) be associated to one or more Markup Items, which in turn may, or
			may not, refer to each other in some form. Since these annotations (and the objects they represent) are never
			embedded in the text, there are no implicit properties to consider, in particular no properties indirectly
			provided by the fragments' position in the text, relative to each other, according to document's order, etc. Thus
			in an EARMARK document a property exists (e.g., A contains B) if and only if it has been explicitly stated in the
			ontology, and not just because they happen to refer to the same text fragment.
		  </textual><footnote class="po-popup e49 e49"><para class="po-block e50 e50"><textual class="po-textual">This non-implicitness of properties in EARMARK results, of course, in having a linearisation of standard documents (i.e., those that do not contain any overlap) that is more verbose than that obtained by using other markup languages such as XML or TexMecs, both in terms of bytes [</textual><xref class="po-milestone e51 e51" linkend="PeroniChangeTracking"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] as well as in terms of comparing RDF statements in an EARMARK document vs. number of markup nodes in an XML document [</textual><xref class="po-milestone e52 e52" linkend="DiIorioEARMARK"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. However, while the gap in bytes between XML-based formats (e.g., ODT used by OpenOffice and OOXML used by Microsoft Word) and EARMARK (linearised in Turtle) seems to be proportional when additional overlapping elements are introduced in documents [</textual><xref class="po-milestone e53 e53" linkend="PeroniChangeTracking"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], the gap between number of statements and number of nodes changes in favour of EARMARK [</textual><xref class="po-milestone e54 e54" linkend="DiIorioEARMARK"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] the more overlapping markup item are added to the document.</textual></para><para class="po-block e55 e55"><textual class="po-textual">As introduced in [</textual><xref class="po-milestone e56 e56" linkend="DiIorioEARMARK"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], from a pure syntactical point of view, EARMARK is nothing but yet another standoff notation, where the markup speciï¬cations point to, rather than contain, the relevant substructure and text fragments. Thus it is affect of all the usual problems of any standoff notations:
		      </textual><orderedlist class="po-table e57 e57"><listitem class="po-container e58 e58"><para class="po-block e59 e59"><textual class="po-textual">very difficult to read for humans;</textual></para></listitem><listitem class="po-container e60 e60"><para class="po-block e61 e61"><textual class="po-textual">the information, although included, is difficult to access using generic methods;</textual></para></listitem><listitem class="po-container e62 e62"><para class="po-block e63 e63"><textual class="po-textual">limited software support as standard parsing or editing software cannot be employed;</textual></para></listitem><listitem class="po-container e64 e64"><para class="po-block e65 e65"><textual class="po-textual">standard document grammars can only be used for the level which contains both markup and textual data;</textual></para></listitem><listitem class="po-container e66 e66"><para class="po-block e67 e67"><textual class="po-textual">new layers require a separate interpretation;</textual></para></listitem><listitem class="po-container e68 e68"><para class="po-block e69 e69"><textual class="po-textual">layers, although separate, often depend on each other.</textual></para></listitem></orderedlist><textual class="po-textual">
		    </textual></para><para class="po-block e70 e70"><textual class="po-textual">However, EARMARK provides also a number of workarounds to most of the above-mentioned issues, as discussed in [</textual><xref class="po-milestone e71 e71" linkend="DiIorioEARMARK"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].</textual></para></footnote><textual class="po-textual">
		</textual></para><para class="po-block e72 e72"><textual class="po-textual">In doing so, EARMARK manages not only to be the only overlapping approach that fully expresses and makes use
		  of unrestricted GODDAG, the formal model introduced in [</textual><xref class="po-milestone e73 e73" linkend="SperbergGoddag04"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] by Sperberg-McQueen and Huitfeldt, but actually
			corresponds to a non-trivial extension of it, e-GODDAG, that supports repetitions of the same node in different
			contexts, in addition to self-overlap, discontinuous overlap, anonymous nodes, decoupling of containment and
			dominance, etc.</textual></para><para class="po-block e74 e74"><textual class="po-textual">The conjunction of stand-off as a referencing approach, and RDF as the assertion syntax, allows EARMARK to
			bypass completely the usual dichothomy of embedded markup, that of either hiding overlapping situations inside a
			traditional, hierarchical XML markup, tricky but conservatively transparent with respect to the most common XML
			tools and services, or inventing a completely new syntax and having to deal with the lack of the usual validation
			tools, transformation tools, storage systems, etc. On the contrary, an EARMARK document is just a collection of
			RDF statements, and plain and usual RDF and OWL tools can be used to manage it: inference engines, rule-based
			systems, query languages, and triple stores work transparently with overlapping data, and any existing and future
			tool for RDF and OWL will be available for use transparently when managing EARMARK documents, too
		  </textual><footnote class="po-popup e75 e75"><para class="po-block e76 e76"><textual class="po-textual">In our past works on EARMARK, we show how a correct use of Semantic Web technologies can allow us to query and validate EARMARK documents in a proper way, even simplifying some of these tasks when overlapping scenarios exist in a document. In particular, in [</textual><xref class="po-milestone e77 e77" linkend="DiIorioEARMARK"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] and [</textual><xref class="po-milestone e78 e78" linkend="PeroniChangeTracking"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] we show how a simple natural language query like "give me the textual content of all paragraphs inserted by John Smith" is very complex to handle by using XPath on XML documents (stored according to both ODT and OOXML formats) while it is quite trivial by applying SPARQL on EARMARK documents. Similarly, the syntactic validation of documents with overlapping markup is not so straightforward to check in XML documents, since it is not easy to retrieve each hierarchy that a document defines by means of overlapping workarounds (e.g., milestones and fragmentation elements). However, in EARMARK this task is simplified since all the hierarchies are explicitly defined without using any workaround and the document validity can be verified easily through a reasoner against a grammar implemented as an OWL ontology, as we show in [</textual><xref class="po-milestone e79 e79" linkend="DiIorioEARMARKValidation"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. In addition, the use of OWL allows us to perform also the semantic validation of the markup in EARMARK documents, with several application in real-case scenarios such as semantic search in digital libraries and the quality evaluation of legal drafting [</textual><xref class="po-milestone e80 e80" linkend="PeroniMarkupSemantics"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].</textual></para></footnote><textual class="po-textual">.</textual></para><para class="po-block e81 e81"><textual class="po-textual">But in our 2009 paper, we actually and quite conventienly avoided to discuss a rather relevant issue: EARMARK,
			then, did not really allow to describe overlapping markup situations, but rather it allowed to describe traditional
			markup situations that could refer to overlapping content. Since each markup statement is independent of the
			others, it can refer to partially or totally overlapping ranges and children with no need (and no possibility) to
			determine that such overlap has actually happened. </textual></para><para class="po-block e82 e82"><textual class="po-textual">But if you really want to be able to determine whether and where overlapping has happened in an EARMARK
			document, you need a few more tools, that luckily can and have been realized using standard and well-known RDF and
			OWL tools. In this paper, we present the </textual><emphasis class="po-inline e83 e83" role="ital"><textual class="po-textual">EARMARK Overlapping Ontology</textual></emphasis><textual class="po-textual">
				(</textual><emphasis class="po-inline e84 e84" role="ital"><textual class="po-textual">EOO</textual></emphasis><textual class="po-textual">), an ontology that uses OWL 2 and SWRL to provide a complete
			characterization of overlapping situations in EARMARK documents, allowing queries and representations that
			discovers and manages explicitly (instead of simply allowing and ignoring) all overlaps in the markup. This
			characterization takes the form of definitions of the overlapping patterns of the basic EARMARK ontology, and is
			therefore a </textual><emphasis class="po-inline e85 e85" role="ital"><textual class="po-textual">definitive classification</textual></emphasis><textual class="po-textual">
			</textual><footnote class="po-popup e86 e86" xml:id="ftnfv1"><para class="po-block e87 e87"><textual class="po-textual">as per meaning #3 of the entry on </textual><emphasis class="po-inline e88 e88" role="ital"><textual class="po-textual">definitive</textual></emphasis><textual class="po-textual"> in the Merriam-Webster
					Dictionary at </textual><link class="po-inline e89 e89" xlink:actuate="onRequest" xlink:href="http://www.merriam-webster.com/dictionary/definitive" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.merriam-webster.com/dictionary/definitive</textual></link><textual class="po-textual">. </textual></para></footnote><textual class="po-textual">of the overlapping approaches of EARMARK documents.</textual></para><para class="po-block e90 e90"><textual class="po-textual">Of particular relevance for the EOO ontology is being able to distinguish between different aspects/manifestations of the overlap phenomenom, such as, for example:</textual></para><itemizedlist class="po-table e91 e91"><listitem class="po-container e92 e92"><para class="po-block e93 e93"><emphasis class="po-inline e94 e94" role="bold"><textual class="po-textual">total vs. partial overlap:</textual></emphasis><textual class="po-textual"> we talk about total overlap to refer to those situations where one item is completely contained by the other, without breaking the rules imposed by the tree hierarchy, while we use partial overlap to indicate cases where no hierarchy can exist, as only part of the content is shared by the items;</textual></para></listitem><listitem class="po-container e95 e95"><para class="po-block e96 e96"><emphasis class="po-inline e97 e97" role="bold"><textual class="po-textual">dominance vs. containment:</textual></emphasis><textual class="po-textual"> we use these terms to distinguish and discern between cases where there really is a hierarchical relation between items that overlap (dominance), from situations in which items just happen to refer to the same content (containment);</textual></para></listitem><listitem class="po-container e98 e98"><para class="po-block e99 e99"><emphasis class="po-inline e100 e100" role="bold"><textual class="po-textual">range overlap vs. markup overlap:</textual></emphasis><textual class="po-textual"> we can also distinguish between items that overlap by sharing the same textual content (range overlap) from situations in which items overlap by insisting either partially or totally on the same elements (markup overlap).</textual></para></listitem></itemizedlist><para class="po-block e101 e101"><textual class="po-textual">The paper is organized as follows: in the next section, we present a brief overview of the topics, results and languages
		  that have been proposed to handle overlaps in markup documents. In </textual><xref class="po-milestone e102 e102" linkend="SectionEARMARK"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">,  EARMARK is (re-)introduced with
		  its main classes and concepts. In </textual><xref class="po-milestone e103 e103" linkend="SectionEOO"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, the EARMARK Overlapping Ontology is presented and described, as well
			as how it can be used to identify and characterize the overlapping situations of an EARMARK document. The
			following section contains our conclusions and hints at future works. </textual></para></section><section class="po-hcontainer e104 e104" xml:id="SectionRelated"><title class="po-block e105 e105"><textual class="po-textual">Overlapping markup: a summary for the absent and the distracted</textual></title><para class="po-block e106 e106"><textual class="po-textual">When marking up text documents it might be necessary to represent features that do not fit
      into the tree structure conveyed by an XML document. In fact, there are many situations in
      which authors may need to annotate the same piece of text with different markup descriptors
      (e.g. when a page spans from the middle of one paragraph to the middle of another, or when
      speeches span multiple verses, etc.): in such cases, the markup descriptors sometimes nest
      correctly into a single tree-hierarchy, sometimes not. In general, this issue may arises
      whenever an author wants to maintain two or more views of a document (e.g. metrical,
      syntactical, layout, etc.), and consequently multiple and incompatible hierarchies insists on
      the same textual content. This problem is referred to in the literature as the </textual><emphasis class="po-inline e107 e107" role="ital"><textual class="po-textual">overlapping problem.</textual></emphasis></para><para class="po-block e108 e108"><textual class="po-textual">After a first period in which the deficiencies of markup languages that concerns the
      overlapping problem were overlooked [</textual><xref class="po-milestone e109 e109" linkend="FirstOverlapBarnard88"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]</textual><footnote class="po-popup e110 e110" xml:id="ftn4"><para class="po-block e111 e111"><textual class="po-textual">In the first paper that deals with overlap in digital texts, in 1988 Barnard </textual><emphasis class="po-inline e112 e112" role="ital"><textual class="po-textual">et
						al</textual></emphasis><textual class="po-textual"> argue that âSGML can successfully cope with the problem of maintaining multiple structural
					viewsâ, and that the solutions âcan be made practicalâ by means of simple mechanisms, such as by exploiting
					the CONCUR feature of SGML [</textual><xref class="po-milestone e113 e113" linkend="FirstOverlapBarnard88"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].</textual></para></footnote><textual class="po-textual"> or even suppressed [</textual><xref class="po-milestone e114 e114" linkend="DeRoseOHCO90"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]</textual><footnote class="po-popup e115 e115" xml:id="ftn5"><para class="po-block e116 e116"><textual class="po-textual">In a famous paper [</textual><xref class="po-milestone e117 e117" linkend="DeRoseOHCO90"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], Renear </textual><emphasis class="po-inline e118 e118" role="ital"><textual class="po-textual">et al.
          </textual></emphasis><textual class="po-textual">defend their OCHO thesis stating that âIf you treat texts as ordered
          hierarchies of content objects many pratical advantages follows, but not otherwise.
          Therefore texts are ordered hierarchies of content objectsâ. </textual></para></footnote><textual class="po-textual">, the digital humanities community started to put an increasing effort in trying to
      define and develop solution to this issue. The essence of the problem can be summarized as
      follows: âoverlap can be presented by graphs that are very like trees, but in which nodes may
      have multiple parents. Overlap is multiple parentageâ [</textual><xref class="po-milestone e119 e119" linkend="SperbergGoddag04"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].
      While trying to represent non-hierarchical structures using a markup language whose model is
      a tree, such as SGML or XML, authors run into different manifestations of the
      problem, referred to using different terminology in the literature:</textual></para><itemizedlist class="po-table e120 e120"><listitem class="po-container e121 e121"><para class="po-block e122 e122"><emphasis class="po-inline e123 e123" role="bold"><textual class="po-textual">classic overlap:</textual></emphasis><textual class="po-textual"> this is the most common case of
          overlap, that consists in two markup elements with different general identifiers that share
          a part of their textual content. This situation occurs whenever two document fragments
          that need to be annotated with different markup descriptors overlap each other. Typically
          this scenarios arises when authors want to merge multiple concurrent hierarchies over the
          same document, e.g. phonetical, grammatical and typographical structures.</textual></para></listitem><listitem class="po-container e124 e124"><para class="po-block e125 e125"><emphasis class="po-inline e126 e126" role="bold"><textual class="po-textual">self overlap:</textual></emphasis><textual class="po-textual"> the term âselfâ overlap is used to
          refer to that situations in which two components of the same structure, and with the same
          name, overlap each other. A typical example is a document that should be commented by two
          different reviewers: whenever they need to annotate two text fragments that overlap,
          two elements of the same structure (the comment structure) and with the same name overlap
          each other.</textual></para></listitem><listitem class="po-container e127 e127"><para class="po-block e128 e128"><emphasis class="po-inline e129 e129" role="bold"><textual class="po-textual">out-of-order elements:</textual></emphasis><textual class="po-textual"> there are also cases in which
          the content of an element is a reordering of information present elsewhere in the
          document. For example, sometimes it would be useful to define elements whose content is
          not a continuous text region (we refer to such cases as </textual><emphasis class="po-inline e130 e130" role="ital"><textual class="po-textual">discontinuous
            elements</textual></emphasis><textual class="po-textual">), or to express more complex features, such as out-of-order or
          repeated uses of the same text fragment, etc. The general approach used by embedded markup
          languages to deal with such cases is to use a technique called </textual><emphasis class="po-inline e131 e131" role="ital"><textual class="po-textual">virtual elements</textual></emphasis><textual class="po-textual">: the information needed to convey such features is encoded
          by using an ad-hoc mechanism, such as a linking system by means of elements' attributes.
          The term âvirtualâ is used because these elements are not explicitly present in the
          document, but their presence may be inferred by an external application from the specific
          encoding mechanism supplied [</textual><xref class="po-milestone e132 e132" linkend="TEIP5"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].</textual></para></listitem><listitem class="po-container e133 e133"><para class="po-block e134 e134"><emphasis class="po-inline e135 e135" role="bold"><textual class="po-textual">containment/dominance decoupling:</textual></emphasis><textual class="po-textual"> Most of the solutions to the problem of
					overlapping markup implicitly leave unwanted relations between the concurrent hierarchies. The best known is
					the identity between dominance and containment. Dominance is a relation between document parts where one is
					said to dominate another if it is one of its ancestors in the document structure. Containment is rather a look
					at two document parts from the point of view of which slices of the actual character content of the document
					they enclose; a document part contains another one if it encloses all the character content of that other
					part. Tree-based markup languages such as XML have the (implicit) property that containment implies dominance,
					but in general this is neither desiderable nor correct. Consequently, most of the approaches to the overlapping
					problem that forces multiple hierarchies (i.e. graphs) into a single tree structure reflects this limitation.
					Moreover, most of the complexity in the process of managing these document is due to this reason, since it
					requires an external and often conceptual effort to understand, interpret and correctly manage dominance as
					separated from containment.  </textual></para></listitem></itemizedlist><para class="po-block e136 e136"><textual class="po-textual">Since the document model of XML is inherently a tree, there is no simple way to cover such complex situations
			when handling multiple hierarchies. In order to overcome these limitations, many different solutions have been
			proposed. In general, we can identify two different approaches to the problem. The first consists in devising
			techniques to encode the information about overlapping situations by using specific XML features (e.g.
			empty elements to specify the boundary of overlapping elements, attributes to link elements that don't nest
			properly, etc.) or technologies (e.g. XPath [</textual><xref class="po-milestone e137 e137" linkend="XPath"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], XQuery [</textual><xref class="po-milestone e138 e138" linkend="XQuery"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], etc.).
			The second approach is to abandon XML altogether and with it the benefits of its tree-based data model, and devise
			a new formalism and notation based on a more general and expressive abstract structure, such as a directed graph. </textual></para><section class="po-hcontainer e139 e139"><title class="po-block e140 e140"><textual class="po-textual">Forcing overlaps in plain XML</textual></title><para class="po-block e141 e141"><textual class="po-textual">Documents in XML-based formats have the advantage that any existing application, tool
        and technology can be used to process them, at the cost of a post-parsing processing in
        order to reconstruct and correctly handle the not tree-based structures coerced using these
        conventions. The main drawback of this approach is that the overlapping situations encoded
        in XML-based formats are neither easy to read, write and understand by humans without the
        help of specific tools, since these techniques considerably increase the complexity of the
        resulting XML document. Moreover, the process of forcing multiple hierarchies (i.e. a graph)
        into a single tree structure used by most of these techniques often introduces unwanted
        dominance relations between elements belonging to different hierarchies, and these
        situations need a further (and usually manual) effort in order to be identified, properly
        interpreted and managed.</textual></para><para class="po-block e142 e142"><textual class="po-textual">The universe of the XML-based techniques to manage overlapping situations is quite ample. We summarize the
				four most used mechanisms [</textual><xref class="po-milestone e143 e143" linkend="MVZ08"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]:</textual></para><itemizedlist class="po-table e144 e144"><listitem class="po-container e145 e145"><para class="po-block e146 e146"><emphasis class="po-inline e147 e147" role="bold"><textual class="po-textual">TEI-style milestones:</textual></emphasis><textual class="po-textual"> this approach is to represent
            a vocabulary as primary by using a standard XML structure, and to use pairs of empty
            elements to mark the boundaries of elements that belong to secondary vocabularies. In
            order to make explicit the relation between corresponding opening and closing empty
            tags, a co-indexing mechanism may be implemented by means of special linking
            attributes[</textual><xref class="po-milestone e148 e148" linkend="TEIP5"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]</textual><footnote class="po-popup e149 e149" xml:id="ftn5bis"><para class="po-block e150 e150"><textual class="po-textual"> It's worth noting
            that many slightly different types of milestones have been proposed: for example, another 
            (more general) type of milestone consists in using milestone elements to mark the boundary
            between sections of a text, as indicated by changes in a standard reference system
            (e.g. the structure of pages in a standard codex). In those cases, each milestone element 
            (except the first and the last) represents both the end of the previous feature and the
            beginning of the next one.</textual></para></footnote><textual class="po-textual">;</textual></para></listitem><listitem class="po-container e151 e151"><para class="po-block e152 e152"><emphasis class="po-inline e153 e153" role="bold"><textual class="po-textual">fragmentation: </textual></emphasis><textual class="po-textual">is another technique that
            envisions/prescribes to break the elements belonging to secondary hierarchies in as many
            smaller fragments (also called </textual><emphasis class="po-inline e154 e154" role="ital"><textual class="po-textual">partial elements</textual></emphasis><textual class="po-textual">) as
            needed to nest properly into the primary hierarchy. Also in this case overlapping
            elements are linked using special attributes (e.g. id-idref or next-previous
            pairs).</textual></para></listitem><listitem class="po-container e155 e155"><para class="po-block e156 e156"><emphasis class="po-inline e157 e157" role="bold"><textual class="po-textual">stand-off markup:</textual></emphasis><textual class="po-textual"> the key idea is to represent hierarchical and possibly incompatible structures separately from their actual content. Infact, the real content is present elsewhere, for example within the same document or in separate ones, and included by means of links implemented through a pointer mechanism such as XPointer [</textual><xref class="po-milestone e158 e158" linkend="XPointer"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. In this way, it is possible to represent multiple conflicting structures as stratifications of different layers, at the cost of a overhead to manage and keep up-to-date the referenced content not directly embedded within these structures.</textual></para></listitem><listitem class="po-container e159 e159"><para class="po-block e160 e160"><emphasis class="po-inline e161 e161" role="bold"><textual class="po-textual">twin documents:</textual></emphasis><textual class="po-textual"> overlapping hierarchies may also be
            encoded by using multiple documents that share the same textual content, but each one
            denoting its own tree structure. </textual></para></listitem></itemizedlist><para class="po-block e162 e162"><textual class="po-textual">In order to describe the expressiveness power of these techniques, in </textual><xref class="po-milestone e163 e163" linkend="TableWorkaroundsExpressiveness"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> we summarises their capability to manage the
        complex overlapping features introduced in the previous section.</textual></para><table border="1" class="po-container e164 e164" xml:id="TableWorkaroundsExpressiveness"><caption class="po-container e165 e165"><para class="po-block e166 e166"><textual class="po-textual">Expressiveness
            power of the XML-based techniques to manage overlap with respect of the complex document
            features described in the previous section [* true only if the vocabularies of the
            structures in overlap are disjoint].</textual></para></caption><tbody class="po-table e167 e167"><tr class="po-table e168 e168"><th class="po-field e169 e169"><para class="po-block e170 e170"><textual class="po-textual">XML techniques / </textual></para><para class="po-block e171 e171"><textual class="po-textual">complex document features</textual></para></th><th class="po-field e172 e172"><para class="po-block e173 e173"><textual class="po-textual">Classic overlap</textual></para></th><th class="po-field e174 e174"><para class="po-block e175 e175"><textual class="po-textual">Self overlap</textual></para></th><th class="po-field e176 e176"><para class="po-block e177 e177"><textual class="po-textual">out-of-order elements</textual></para></th><th class="po-field e178 e178"><para class="po-block e179 e179"><textual class="po-textual">Containment/dominance decoupling</textual></para></th></tr><tr class="po-table e180 e180"><td class="po-block e181 e181"><para class="po-block e182 e182"><textual class="po-textual">Milestones</textual></para></td><td class="po-block e183 e183"><para class="po-block e184 e184"><textual class="po-textual">Yes</textual></para></td><td class="po-block e185 e185"><para class="po-block e186 e186"><textual class="po-textual">Yes</textual></para></td><td class="po-block e187 e187"><para class="po-block e188 e188"><textual class="po-textual">No</textual></para></td><td class="po-block e189 e189"><para class="po-block e190 e190"><textual class="po-textual">No</textual></para></td></tr><tr class="po-table e191 e191"><td class="po-block e192 e192"><para class="po-block e193 e193"><textual class="po-textual">Fragmentation</textual></para></td><td class="po-block e194 e194"><para class="po-block e195 e195"><textual class="po-textual">Yes</textual></para></td><td class="po-block e196 e196"><para class="po-block e197 e197"><textual class="po-textual">Yes</textual></para></td><td class="po-block e198 e198"><para class="po-block e199 e199"><textual class="po-textual">Yes</textual></para></td><td class="po-block e200 e200"><para class="po-block e201 e201"><textual class="po-textual">No</textual></para></td></tr><tr class="po-table e202 e202"><td class="po-block e203 e203"><para class="po-block e204 e204"><textual class="po-textual">Stand-off markup</textual></para></td><td class="po-block e205 e205"><para class="po-block e206 e206"><textual class="po-textual">Yes*</textual></para></td><td class="po-block e207 e207"><para class="po-block e208 e208"><textual class="po-textual">Yes</textual></para></td><td class="po-block e209 e209"><para class="po-block e210 e210"><textual class="po-textual">Yes</textual></para></td><td class="po-block e211 e211"><para class="po-block e212 e212"><textual class="po-textual">Yes</textual></para></td></tr><tr class="po-table e213 e213"><td class="po-block e214 e214"><para class="po-block e215 e215"><textual class="po-textual">Twin documents</textual></para></td><td class="po-block e216 e216"><para class="po-block e217 e217"><textual class="po-textual">Yes*</textual></para></td><td class="po-block e218 e218"><para class="po-block e219 e219"><textual class="po-textual">Yes</textual></para></td><td class="po-block e220 e220"><para class="po-block e221 e221"><textual class="po-textual">Yes</textual></para></td><td class="po-block e222 e222"><para class="po-block e223 e223"><textual class="po-textual">Yes</textual></para></td></tr></tbody></table><para class="po-block e224 e224"><textual class="po-textual">In order to overcome the limitations of XML, many different solutions have been
        proposed:</textual></para><itemizedlist class="po-table e225 e225"><listitem class="po-container e226 e226"><para class="po-block e227 e227"><emphasis class="po-inline e228 e228" role="bold"><textual class="po-textual">CONCUR</textual></emphasis><textual class="po-textual"> [</textual><xref class="po-milestone e229 e229" linkend="CONCUR90"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] is an SGML option that allows
						multiple DTDs for the same content: all these structures live in the same document, and it is up to the
						parser to either consider the structure of only one DTD, or parse them simultaneously but keeping separate
						track of what elements are open in each. The main advantage of this technique is that documents are quite
						legible and maintainable, but there are many drawbacks: for example, it is not possible to constrain
						relationships across DTDs, it is not possible to express self-overlap situations, and there is little
						software support for this technique;</textual></para></listitem><listitem class="po-container e230 e230"><para class="po-block e231 e231"><emphasis class="po-inline e232 e232" role="bold"><textual class="po-textual">JITT (Just In Time Trees):</textual></emphasis><textual class="po-textual"> another syntax very
            close to XML have been proposed [</textual><xref class="po-milestone e233 e233" linkend="JITT02a"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] [</textual><xref class="po-milestone e234 e234" linkend="JITT02b"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].
            The basic idea is similar to CONCUR in that it requires the parser to filter and take in
            consideration only some tags: multiple overlapping hierarchies may coexist into
            documents, but only those which the filter selects are returned to the application as
            real start or end tags. JITTsâ main contribution is that a document need not be
            well-formed until the moment it is being processed, at the cost of a very small change
            to an XML parser. Unfortunately, JITTs does not provide a way to correlate and validate
            across structures, and it is not possible to express cases of self-overlap</textual><emphasis class="po-inline e235 e235" role="bold"><textual class="po-textual">.</textual></emphasis></para></listitem><listitem class="po-container e236 e236"><para class="po-block e237 e237"><emphasis class="po-inline e238 e238" role="bold"><textual class="po-textual">MuLaX:</textual></emphasis><textual class="po-textual"> another document syntax similar to SGML
            CONCUR for XML called MuLaX has been developed [</textual><xref class="po-milestone e239 e239" linkend="XCONCUR05"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] together
            with a constraint based validation language [</textual><xref class="po-milestone e240 e240" linkend="XCONCUR-CL07a"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] [</textual><xref class="po-milestone e241 e241" linkend="XCONCUR-CL07b"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. Each overlapping hierarchy represents a layer identified
            by an ID prefixing each tag name, and multiple layers may coexist into one MuLaX
            document. An external software can parse a MuLaX document and project
            each layer into well formed XML documents. Standard XML tools can only be used
            on these separate XML projections. A drawback of this technique is that these documents
            can get very complex when dealing with a large number of annotation layers : for
            example, updates are difficult since working on MuLaX documents requires frequent
            projections into XML projections. Moreover, the project is still at the state of
            experimental markup languages, lacking the support of tools and technologies as that
            available for XML-based solutions.</textual></para></listitem><listitem class="po-container e242 e242"><para class="po-block e243 e243"><emphasis class="po-inline e244 e244" role="bold"><textual class="po-textual">Multi-colored trees:</textual></emphasis><textual class="po-textual"> another extension of the XML
            model that is able to represent overlapping structures are the Multi-colored trees
              [</textual><xref class="po-milestone e245 e245" linkend="MultiCOloredTree04"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. The basic idea is to associate a color to each
            concurrent tree, and to allow each node to have multiple colors. Navigation inside the multicolored 
            nodes is possible by using an Xpath [</textual><xref class="po-milestone e246 e246" linkend="XPath"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] extension that implements a color 
            selector, and an extension of XQuery [</textual><xref class="po-milestone e247 e247" linkend="XQuery"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] has also been proposed for 
            the creation of nodes.</textual></para></listitem></itemizedlist></section><section class="po-hcontainer e248 e248"><title class="po-block e249 e249"><textual class="po-textual">Non-XML syntaxes for overlaps</textual></title><para class="po-block e250 e250"><textual class="po-textual">An alternative approach to overcome the limitations of tree-based meta-languages in
        representing complex documents is to use alternative and more expressive data models, such
        as graphs. The more general is the model (acyclic vs. cyclic graphs, ordered vs. unordered
        graphs, etc.), the more expressive is the meta-language in terms of overlapping features
        that can be convenientely managed, at the cost of an increased computational complexity.
        Moreover, since this abstract model may be represented with different concrete
        syntaxes (embedded markup languages, stand-off annotations, etc.), the chosen linearisation
        format may place limits in terms of expressiveness, support provided by standard
        technologies and related tools, etc. A summary of the most eminent solutions is presented
        below:</textual></para><itemizedlist class="po-table e251 e251"><listitem class="po-container e252 e252"><para class="po-block e253 e253"><emphasis class="po-inline e254 e254" role="bold"><textual class="po-textual">GODDAG and TexMECS:</textual></emphasis><textual class="po-textual"> Sperberg-McQueen and Huitfeld
            proposed to manage overlapping hierarchies using a directed acyclic graph structure with
            no transitive arcs named GODDAG (General Ordered Descendant Directed Acyclic
              Graph)[</textual><xref class="po-milestone e255 e255" linkend="SperbergGoddag04"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. Arcs denotes containment relationships,
            and multi-parentage is allowed, thus making it possible to represent overlapping
            situations. Several kinds of GODDAG have been defined in order to explore their
            expressive power and their mutual relation: generalized, restricted and clean in [</textual><xref class="po-milestone e256 e256" linkend="SperbergGoddag04"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], normalized and colored in [</textual><xref class="po-milestone e257 e257" linkend="Goddagb06"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], node-ordered (noDAG) in [</textual><xref class="po-milestone e258 e258" linkend="Goddagc08"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], child-arc-ordered in [</textual><xref class="po-milestone e259 e259" linkend="Goddagd13"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. The authors of GODDAG also developed a markup meta-language
            named TexMECS [</textual><xref class="po-milestone e260 e260" linkend="TexMECS01"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] as the natural linearisation format for the
            GODDAG structure. As XML, TexMECS is an embedded meta-markup language where elements are
            delimited by start and end tags, but it also allows to represent graph structures by
            allowing tags to not nest properly. TexMECS supports complex document features, such as
            self overlap (using a co-indexing scheme) and discontinuous, virtual and unordered
            elements (using special attributes and elements' delimiters). Since TexMECS documents
            are not isomorphic to XML documents, the standard XML tools cannot be used and, as far
            as we know, no query mechanisms have been developed.</textual></para></listitem><listitem class="po-container e261 e261"><para class="po-block e262 e262"><emphasis class="po-inline e263 e263" role="bold"><textual class="po-textual">LMNL</textual></emphasis><textual class="po-textual">: the Layered Markup and Annotaion Language [</textual><xref class="po-milestone e264 e264" linkend="LMNL"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] defines a specific syntax based on layered ranges which can overlap each other. A LMNL document is a
						set of layers containing either a sequence of Unicode characters (</textual><emphasis class="po-inline e265 e265" role="ital"><textual class="po-textual">text
							layer</textual></emphasis><textual class="po-textual">) or a sequence of ranges. A layer can be based on a single other layer, but can also be
						the base of several other layers. LMNL is able to capture classic and self overlap cases and virtual
						elements (via a pointers' mechanism), but since a range spans over continuous sequences of characters, there
						is no way to represent discontinuous text fragments and element with mixed content (i.e. characters and
						other ranges). Despite the main contribution of LMNL is a data model, at least three syntaxes have been
						proposed: two are XML-based (ECLIX [</textual><xref class="po-milestone e266 e266" linkend="ECLIX"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] and CLIX [</textual><xref class="po-milestone e267 e267" linkend="DeRose"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], both
						based on the milestone technique), and a non-XML syntax known as the LMNL syntax. XSLT stylesheets have been
						developed to deal with the XML representation of a LMNL document.</textual></para></listitem></itemizedlist></section></section><section class="po-hcontainer e268 e268" xml:id="SectionEARMARK"><title class="po-block e269 e269"><textual class="po-textual">EARMARK</textual></title><para class="po-block e270 e270"><textual class="po-textual">The Extremely Annotational RDF Markup, or EARMARK [</textual><xref class="po-milestone e271 e271" linkend="DiIorioEARMARK"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], is an OWL 2 DL
				ontology</textual><footnote class="po-popup e272 e272" xml:id="ftn6"><para class="po-block e273 e273"><textual class="po-textual">EARMARK Ontology: </textual><link class="po-inline e274 e274" xlink:actuate="onRequest" xlink:href="http://www.essepuntato.it/2008/12/earmark" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.essepuntato.it/2008/12/earmark</textual></link><textual class="po-textual">. The prefix </textual><emphasis class="po-inline e275 e275" role="ital"><textual class="po-textual">earmark</textual></emphasis><textual class="po-textual">
					refers to entities defined in it, while the prefix </textual><emphasis class="po-inline e276 e276" role="ital"><textual class="po-textual">co</textual></emphasis><textual class="po-textual"> refers to entities â
					used in the EARMARK Ontology â defined in the old version of the Collections Ontology [</textual><xref class="po-milestone e277 e277" linkend="CiccareseCO"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].</textual></para></footnote><textual class="po-textual">that defines document meta-markup. It is an ontologically precise definition of markup that
			instantiates the markup of a text document as an independent OWL document outside of the text strings it
			annotates, and through appropriate OWL and SWRL characterisations it can define structures such as trees or graphs
			(in particular, extended GODDAGs [</textual><xref class="po-milestone e278 e278" linkend="DiIorioEARMARKGODDAG"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]) and can be used to generate validity
			constraints (including co-constraints) [</textual><xref class="po-milestone e279 e279" linkend="DiIorioEARMARKValidation"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], to make explicit the semantics of markup [</textual><xref class="po-milestone e280 e280" linkend="PeroniMarkupSemantics"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], to annotate text or other markup documents [</textual><xref class="po-milestone e281 e281" linkend="BarabucciEARMARKFairyTale"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], to keep track of changes in markup [</textual><xref class="po-milestone e282 e282" linkend="PeroniChangeTracking"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], and as interchange format to enable conversions between different kinds of
			XML vocabularies embedding overlap [</textual><xref class="po-milestone e283 e283" linkend="BarabucciFRETTA"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. The whole ontological description of
			EARMARK is summarised in the Graffoo diagram</textual><footnote class="po-popup e284 e284" xml:id="ftn7"><para class="po-block e285 e285"><textual class="po-textual">Graffoo is a graphical notation for OWL ontologies and it is available at </textual><link class="po-inline e286 e286" xlink:actuate="onRequest" xlink:href="http://www.essepuntato.it/graffoo" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.essepuntato.it/graffoo</textual></link><textual class="po-textual">. </textual></para></footnote><textual class="po-textual"> [</textual><xref class="po-milestone e287 e287" linkend="FalcoGraffoo"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] shown in </textual><xref class="po-milestone e288 e288" linkend="FigureEARMARK"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><figure class="po-container e289 e289" xml:id="FigureEARMARK" xreflabel="Figure 1"><title class="po-block e290 e290"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></title><mediaobject class="po-container e291 e291"><imageobject class="po-container e292 e292"><imagedata class="po-meta e293 e293" fileref="../../../vol13/graphics/Peroni01/Peroni01-001.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e294 e294"><para class="po-block e295 e295"><textual class="po-textual">Figure 1: a Graffoo diagram summarising the EARMARK Ontology.</textual></para></caption></mediaobject></figure><para class="po-block e296 e296"><textual class="po-textual">The core classes of our model describe three disjoint base concepts: </textual><emphasis class="po-inline e297 e297" role="ital"><textual class="po-textual">docuverses</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e298 e298" role="ital"><textual class="po-textual">ranges</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e299 e299" role="ital"><textual class="po-textual">markup
				items</textual></emphasis><textual class="po-textual">.</textual></para><para class="po-block e300 e300"><textual class="po-textual">The textual content of an EARMARK document is conceptually separated from its annotations, and is referred to
			through the </textual><emphasis class="po-inline e301 e301" role="ital"><textual class="po-textual">earmark:Docuverse</textual></emphasis><textual class="po-textual"> class. The individuals of this class represent the
			objects of discourse, i.e. all the containers of text from an EARMARK document. Any individual of the </textual><emphasis class="po-inline e302 e302" role="ital"><textual class="po-textual">earmark:Docuverse</textual></emphasis><textual class="po-textual"> class â commonly called a </textual><emphasis class="po-inline e303 e303" role="ital"><textual class="po-textual">docuverse</textual></emphasis><textual class="po-textual">
			(lowercase to distinguish it from the class) â specifies its actual content through the property </textual><emphasis class="po-inline e304 e304" role="ital"><textual class="po-textual">earmark:hasContent</textual></emphasis><textual class="po-textual">. There exist two different kinds of docuverses, those that specify all
			its content in form of a string (defined through the class </textual><emphasis class="po-inline e305 e305" role="ital"><textual class="po-textual">earmark:StringDocuverse</textual></emphasis><textual class="po-textual">) and those that refer to a document containing the string to be marked up
			(defined through the class </textual><emphasis class="po-inline e306 e306" role="ital"><textual class="po-textual">earmark:URIDocuverse</textual></emphasis><textual class="po-textual">).</textual></para><para class="po-block e307 e307"><textual class="po-textual">We define the class </textual><emphasis class="po-inline e308 e308" role="ital"><textual class="po-textual">earmark:Range</textual></emphasis><textual class="po-textual"> for any text lying between two locations of
			a docuverse. A </textual><emphasis class="po-inline e309 e309" role="ital"><textual class="po-textual">range</textual></emphasis><textual class="po-textual">, i.e, an individual of the class </textual><emphasis class="po-inline e310 e310" role="ital"><textual class="po-textual">earmark:Range</textual></emphasis><textual class="po-textual">, is defined by a starting and an ending location (any literal) of a specific docuverse
			through the functional properties </textual><emphasis class="po-inline e311 e311" role="ital"><textual class="po-textual">earmark:begins</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e312 e312" role="ital"><textual class="po-textual">eamark:ends</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e313 e313" role="ital"><textual class="po-textual">earmark:refersTo</textual></emphasis><textual class="po-textual"> respectively. There exist two main
			types of ranges: those (i.e., </textual><emphasis class="po-inline e314 e314" role="ital"><textual class="po-textual">earmark:PointerRange</textual></emphasis><textual class="po-textual">) that refer to text lying
			between two non-negative integer locations that identify precise positions within a docuverse, and those (defined
			through the class </textual><emphasis class="po-inline e315 e315" role="ital"><textual class="po-textual">earmark:XPathPointerRange</textual></emphasis><textual class="po-textual">) that refer to any text, obtained
			from a particular XPath context (specified through the property </textual><emphasis class="po-inline e316 e316" role="ital"><textual class="po-textual">earmark:hasXPathContext</textual></emphasis><textual class="po-textual">) starting from a docuverse content, lying between two non-negative integer
			locations that identify precise positions.</textual></para><para class="po-block e317 e317"><textual class="po-textual">The class </textual><emphasis class="po-inline e318 e318" role="ital"><textual class="po-textual">earmark:MarkupItem</textual></emphasis><textual class="po-textual"> is the superclass defining artefacts to be
			interpreted as markup such as elements (i.e., the class </textual><emphasis class="po-inline e319 e319" role="ital"><textual class="po-textual">earmark:Element</textual></emphasis><textual class="po-textual">),
			attributes (i.e., the class </textual><emphasis class="po-inline e320 e320" role="ital"><textual class="po-textual">earmark:Attribute</textual></emphasis><textual class="po-textual">) and comments (i.e., the class
				</textual><emphasis class="po-inline e321 e321" role="ital"><textual class="po-textual">earmark:Comment</textual></emphasis><textual class="po-textual">). A </textual><emphasis class="po-inline e322 e322" role="ital"><textual class="po-textual">markupitem</textual></emphasis><textual class="po-textual"> individual is a
				collection</textual><footnote class="po-popup e323 e323" xml:id="ftn8"><para class="po-block e324 e324"><textual class="po-textual">In the following descriptions the prefix </textual><emphasis class="po-inline e325 e325" role="ital"><textual class="po-textual">co</textual></emphasis><textual class="po-textual"> is used to indicate entities taken
					from version 1.2 of the Collections Ontology [</textual><xref class="po-milestone e326 e326" linkend="CiccareseCO"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], an imported ontology used for
					handling collections, available at </textual><link class="po-inline e327 e327" xlink:actuate="onRequest" xlink:href="http://swan.mindinformatics.org/ontologies/1.2/collections.owl" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://swan.mindinformatics.org/ontologies/1.2/collections.owl</textual></link><textual class="po-textual">.</textual></para></footnote><textual class="po-textual"> (</textual><emphasis class="po-inline e328 e328" role="ital"><textual class="po-textual">co:Set</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e329 e329" role="ital"><textual class="po-textual">co:Bag</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e330 e330" role="ital"><textual class="po-textual">co:List</textual></emphasis><textual class="po-textual">, where the latter is a subclass of the second one and all of them are subclasses
			of </textual><emphasis class="po-inline e331 e331" role="ital"><textual class="po-textual">co:Collection</textual></emphasis><textual class="po-textual">) of individuals belonging to the classes </textual><emphasis class="po-inline e332 e332" role="ital"><textual class="po-textual">earmark:MarkupItem</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e333 e333" role="ital"><textual class="po-textual">earmark:Range</textual></emphasis><textual class="po-textual">. Through these collections it
			is possible:</textual></para><itemizedlist class="po-table e334 e334"><listitem class="po-container e335 e335"><para class="po-block e336 e336"><textual class="po-textual">to define a markup item as a set of other markup items and ranges by using the property </textual><emphasis class="po-inline e337 e337" role="ital"><textual class="po-textual">co:element</textual></emphasis><textual class="po-textual">;</textual></para></listitem><listitem class="po-container e338 e338"><para class="po-block e339 e339"><textual class="po-textual">to define a markup item as a bag of items (defined by individuals belonging to the class </textual><emphasis class="po-inline e340 e340" role="ital"><textual class="po-textual">co:Item</textual></emphasis><textual class="po-textual">), each of them containing a markup item or a range, by using the properties
						</textual><emphasis class="po-inline e341 e341" role="ital"><textual class="po-textual">c:item</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e342 e342" role="ital"><textual class="po-textual">co:itemContent</textual></emphasis><textual class="po-textual">
					respectively;</textual></para></listitem><listitem class="po-container e343 e343"><para class="po-block e344 e344"><textual class="po-textual">to define a markup item as a list of items (defined by individuals belonging to the class </textual><emphasis class="po-inline e345 e345" role="ital"><textual class="po-textual">co:ListItem</textual></emphasis><textual class="po-textual">), each of them containing a markup item or a range, in which we can also
					specify a particular order among the items themselves by using the property </textual><emphasis class="po-inline e346 e346" role="ital"><textual class="po-textual">co:nextItem</textual></emphasis><textual class="po-textual">.</textual></para></listitem></itemizedlist><para class="po-block e347 e347"><textual class="po-textual">A </textual><emphasis class="po-inline e348 e348" role="ital"><textual class="po-textual">markupitem</textual></emphasis><textual class="po-textual"> might also have a name, specified in the functional property
				</textual><emphasis class="po-inline e349 e349" role="ital"><textual class="po-textual">earmark:hasGeneralIdentifier</textual></emphasis><footnote class="po-popup e350 e350" xml:id="ftn9"><para class="po-block e351 e351"><emphasis class="po-inline e352 e352" role="ital"><textual class="po-textual">General identifier</textual></emphasis><textual class="po-textual"> actually refers to the SGML </textual><emphasis class="po-inline e353 e353"><textual class="po-textual">generic identifier</textual></emphasis><textual class="po-textual">, i.e., the SGML term for the local name of the markup
					item, e.g., âpâ for markup element â&lt;p&gt;...&lt;/p&gt;â.</textual></para></footnote><textual class="po-textual">, and a namespace specified using the functional property </textual><emphasis class="po-inline e354 e354" role="ital"><textual class="po-textual">earmark:hasNamespace</textual></emphasis><textual class="po-textual">.</textual></para><para class="po-block e355 e355"><textual class="po-textual">In order to understand how EARMARK is used to describe markup hierarchies, let us consider the markup
			structures shown in </textual><xref class="po-milestone e356 e356" linkend="FigureOverlapping"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><figure class="po-container e357 e357" xml:id="FigureOverlapping" xreflabel="Figure 2"><title class="po-block e358 e358"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></title><mediaobject class="po-container e359 e359"><imageobject class="po-container e360 e360"><imagedata class="po-meta e361 e361" fileref="../../../vol13/graphics/Peroni01/Peroni01-002.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e362 e362"><para class="po-block e363 e363"><textual class="po-textual">Figure 2: an example of three different markup hierarchies (light-blue rectangles with solid border, light-green
						rectangles with dashed border, and pink rectangles with dotted borders) involving six different ranges (the
						five empty rhomboids with solid red border and the one with blue dashed border).</textual></para></caption></mediaobject></figure><para class="po-block e364 e364"><textual class="po-textual">First of all, we define the whole textual content of the document â i.e., the first three lines of the
				</textual><emphasis class="po-inline e365 e365" role="ital"><textual class="po-textual">Paradise Lost</textual></emphasis><textual class="po-textual"> by John Milton â by creating an instance of the class </textual><emphasis class="po-inline e366 e366" role="ital"><textual class="po-textual">earmark:StringDocuverse</textual></emphasis><footnote class="po-popup e367 e367" xml:id="ftn10"><para class="po-block e368 e368"><textual class="po-textual">This and all the following excerpts are defined in Turtle [</textual><xref class="po-milestone e369 e369" linkend="TurtlePrudhommeaux"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].</textual></para></footnote><textual class="po-textual">:</textual></para><programlisting class="po-block e370 e370" xml:space="preserve"><textual class="po-textual">@prefix : &lt;http://www.essepuntato.it/2014/balisage/example/&gt;
:doc a earmark:StringDocuverse ;
  earmark:hasContent 
    "Of Mans First Disobedience, and the Fruit
    Of that Forbidden Tree, whose mortal tast
    Brought Death into the World" .</textual></programlisting><para class="po-block e371 e371"><textual class="po-textual">Then, we can define all the six different ranges (as individuals of </textual><emphasis class="po-inline e372 e372" role="ital"><textual class="po-textual">earmark:PointerRange</textual></emphasis><textual class="po-textual">) that are introduced in the figure, i.e.:</textual></para><programlisting class="po-block e373 e373" xml:space="preserve"><textual class="po-textual"># The string 'Of Mans First Disobedience, and the Fruit'
:r1 a earmark:PointerRange ;
  earmark:refersTo :doc ;
  earmark:begins "0"^^xsd:nonNegativeInteger ;
  earmark:ends "41"^^xsd:nonNegativeInteger .

# The string 'the Fruit Of that Forbidden Tree,'
:r2 a earmark:PointerRange ;
  earmark:refersTo :doc ;
  earmark:begins "32"^^xsd:nonNegativeInteger ;
  earmark:ends "65"^^xsd:nonNegativeInteger .

# The string 'Of that Forbidden Tree,'
:r3 a earmark:PointerRange ;
  earmark:refersTo :doc ;
  earmark:begins "42"^^xsd:nonNegativeInteger ;
  earmark:ends "65"^^xsd:nonNegativeInteger .

â¦ </textual></programlisting><para class="po-block e374 e374"><textual class="po-textual">Finally, we can built the three markup hierarchies shown in upon these ranges, as shown in the follwing
			excerpt:</textual></para><programlisting class="po-block e375 e375" xml:space="preserve"><textual class="po-textual">:lg a earmark:MarkupItem , co:List ;
  earmark:hasGeneralIdentifier "lg" ;
  co:firstItem [
    a co:ListItem ;
    co:itemContent :l1 ;
  co:nextItem [ 
    a co:ListItem ;
    co:itemContent :l2 ;
  co:nextItem [ 
    a co:ListItem ;
    co:itemContent :l3 ] ] ] .

:q a earmark:MarkupItem , co:List ;
  earmark:hasGeneralIdentifier "q" ;
  co:firstItem [
    a co:ListItem ;
    co:itemContent :l1 ] .

:l1 a earmark:MarkupItem , co:List ;
  earmark:hasGeneralIdentifier "l" ;
  co:firstItem [
    a co:ListItem ;
    co:itemContent :r1 ] .

â¦ </textual></programlisting></section><section class="po-hcontainer e376 e376" xml:id="SectionEOO"><title class="po-block e377 e377"><textual class="po-textual">Characterizing overlaps by way of an ontology</textual></title><para class="po-block e378 e378"><textual class="po-textual">Different types of overlap exist â according to the subset of EARMARK nodes involved (i.e., ranges or markup
			items) â and different strategies are needed to detect them. In particular, there is a clear distinction between
			overlapping ranges and overlapping markup items, and in the ways these overlapping scenarios affect the dominance
			and containment relations between nodes â as shown in figure </textual><xref class="po-milestone e379 e379" linkend="FigureOverlapping"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, that will be
			used  to illustrate the different kinds of overlapping scenarios.</textual></para><para class="po-block e380 e380"><textual class="po-textual">In this section, we introduce the </textual><emphasis class="po-inline e381 e381" role="ital"><textual class="po-textual">EARMARK Overlapping Ontology</textual></emphasis><textual class="po-textual"> (</textual><emphasis class="po-inline e382 e382" role="ital"><textual class="po-textual">EOO</textual></emphasis><textual class="po-textual">)</textual><footnote class="po-popup e383 e383" xml:id="ftn11"><para class="po-block e384 e384"><textual class="po-textual">EARMARK Overlapping Ontology: </textual><link class="po-inline e385 e385" xlink:actuate="onRequest" xlink:href="http://www.essepuntato.it/2011/05/overlapping" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.essepuntato.it/2011/05/overlapping</textual></link><textual class="po-textual">. The prefix </textual><emphasis class="po-inline e386 e386" role="ital"><textual class="po-textual">eoo</textual></emphasis><textual class="po-textual">
					refers to entities defined in it.</textual></para></footnote><textual class="po-textual">, which is an OWL 2 DL ontology [MotikOWL2] that extends the EARMARK Ontology by adding support for
			overlapping scenarios and for inferences relative to them. In particular, in the following subsections we describe
			how the ontology models all possible overlapping scenarios between nodes by means of description logic
				formulas</textual><footnote class="po-popup e387 e387" xml:id="ftn12"><para class="po-block e388 e388"><textual class="po-textual">OWL 2 DL [MotikOWL2] is based on a particular description logic (DL), i.e., SROIQ [</textual><xref class="po-milestone e389 e389" linkend="HorrocksSROIQ"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. In this paper, we decided to use DL notation for the sake of clarity, instead
					of adopting one of the possible linearisation of OWL made available by the W3C. We recommend the reading of
						[</textual><xref class="po-milestone e390 e390" linkend="KrotzschDL"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] for more information about DL notation. As an extension of common DL
					notation, we are using â¤ and â¤op to indicate the top class and the top object property respectively.</textual></para></footnote><textual class="po-textual"> and SWRL rules [</textual><xref class="po-milestone e391 e391" linkend="HorrocksSWRL"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] (if needed)</textual><footnote class="po-popup e392 e392" xml:id="ftn13"><para class="po-block e393 e393"><textual class="po-textual">Any OWL 2 DL ontology can be accompanied by SWRL rules so as to guarantee additional inferences that are
					not directly handled by current ontological definitions. All these rules will be defined using an informal
					human readable syntax as introduced in [</textual><xref class="po-milestone e394 e394" linkend="HorrocksSWRL"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], where each rule is represented in
					the form of âantecedent â consequentâ statements, meaning that if the </textual><emphasis class="po-inline e395 e395" role="ital"><textual class="po-textual">antecedent</textual></emphasis><textual class="po-textual"> is true, then the </textual><emphasis class="po-inline e396 e396" role="ital"><textual class="po-textual">consequent</textual></emphasis><textual class="po-textual"> can be inferred. Both
						</textual><emphasis class="po-inline e397 e397" role="ital"><textual class="po-textual">antecedent</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e398 e398" role="ital"><textual class="po-textual">consequent</textual></emphasis><textual class="po-textual"> are a list of
					ontological assertions separated by â^â. Each assertion can be composed by an atomic entity (e.g., a class or
					a property) containing zero, one or two variables (each beginning with a â?â) depending on the kinds of unary
					(i.e., class) or binary (i.e., property) entity used, or by a (boolean, cardinality, etc.) restriction of
					multiple entities.</textual></para></footnote><textual class="po-textual">. A summary of the taxonomy of possible overlapping scenarios is provided in figure </textual><xref class="po-milestone e399 e399" linkend="FigureOverlappingTaxonomy"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><figure class="po-container e400 e400" xml:id="FigureOverlappingTaxonomy" xreflabel="Figure 3"><title class="po-block e401 e401"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></title><mediaobject class="po-container e402 e402"><imageobject class="po-container e403 e403"><imagedata class="po-meta e404 e404" fileref="../../../vol13/graphics/Peroni01/Peroni01-003.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e405 e405"><para class="po-block e406 e406"><textual class="po-textual">Figure 3: the taxonomy of all the different kinds of overlapping scenarios that are
            introduced in this paper.</textual></para></caption></mediaobject></figure><section class="po-hcontainer e407 e407"><title class="po-block e408 e408"><textual class="po-textual">Properties of overlapping</textual></title><para class="po-block e409 e409"><textual class="po-textual">The most important property in EOO is the generic property, </textual><emphasis class="po-inline e410 e410" role="ital"><textual class="po-textual">eoo:overlapsWith</textual></emphasis><textual class="po-textual">, that describes when an EARMARK node overlaps with another EARMARK node of the
				same type. This means that markup items can overlap only with other markup items, and ranges can overlap only
				with ranges. In addition, this property is symmetric (i.e., if A overlaps with B, then B overlaps with A) and
				irreflexive (i.e., if A overlaps with B, then A is different from B</textual><footnote class="po-popup e411 e411" xml:id="ftn14"><para class="po-block e412 e412"><textual class="po-textual">Note that OWL 2 DL does not support the unique name assumption typical of database systems. Among the
						various consequences of this choice, in this case it means that two different IRIs cannot be guaranteed to
						refer to two different resources. </textual></para></footnote><textual class="po-textual">). This property is defined formally as follows:</textual></para><programlisting class="po-block e413 e413" xml:space="preserve"><textual class="po-textual"># Declaration as an object property
eoo:overlapsWith â â¤op

# Domain
âeoo:overlapsWith.â¤ â 
  (earmark:Range â âeoo:overlapsWith.Range) â 
  (earmark:MarkupItem â âeoo:overlapsWith.MarkupItem)

# Range
â¤ â âeoo:overlapsWith.(
  (earmark:Range â âeoo:overlapsWith.Range) â 
  (earmark:MarkupItem â âeoo:overlapsWith.MarkupItem))

# Symmetry
eoo:overlapsWith â¡ eoo:overlapsWith-

# Irreflexivity 
â¤ â Â¬âeoo:overlapsWith.Self</textual></programlisting><para class="po-block e414 e414"><textual class="po-textual">All the properties presented in the following sections are sub-properties of the
        generic relation </textual><emphasis class="po-inline e415 e415" role="ital"><textual class="po-textual">eoo:overlapsWith</textual></emphasis><textual class="po-textual">.</textual></para><section class="po-hcontainer e416 e416" xml:id="SectionRangeOverlapping"><title class="po-block e417 e417"><textual class="po-textual">Overlapping of ranges</textual></title><para class="po-block e418 e418"><textual class="po-textual">By definition, overlapping ranges (i.e., linked through the symmetric property </textual><emphasis class="po-inline e419 e419" role="ital"><textual class="po-textual">eoo:overlapsWithRange</textual></emphasis><textual class="po-textual">) are two ranges of the same type that refer to the same docuverse and so
					that at least one of the end points of the first range is contained in the interval described by the locations
					of the second range (end-points excluded). The property </textual><emphasis class="po-inline e420 e420" role="ital"><textual class="po-textual">eoo:overlapsWithRange</textual></emphasis><textual class="po-textual">
					is defined as follows:</textual></para><programlisting class="po-block e421 e421" xml:space="preserve"><textual class="po-textual"># Sub-property declaration
eoo:overlapsWithRange â eoo:overlapsWith

# Domain
âeoo:overlapsWithRange.â¤ â earmark:Range

# Range
â¤ â âeoo:overlapsWithRange.earmark:Range

# Symmetry
eoo:overlapsWithRange â¡ eoo:overlapsWithRange-</textual></programlisting><para class="po-block e422 e422"><textual class="po-textual">Specifically, </textual><emphasis class="po-inline e423 e423" role="ital"><textual class="po-textual">totally</textual></emphasis><textual class="po-textual"> overlapping ranges (defined through the property
						</textual><emphasis class="po-inline e424 e424" role="ital"><textual class="po-textual">eoo:overlapsTotallyWithRange</textual></emphasis><textual class="po-textual">) have the locations of the first range
					completely contained in the interval of the second range or vice versa, i.e., the range is fully contained
					inside the second range. For instance, in the example in </textual><xref class="po-milestone e425 e425" linkend="FigureOverlapping"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, the range âthe
					Fruit Of that Forbidden Treeâ overlaps totally with the range âOf that Forbidden Treeâ.</textual></para><para class="po-block e426 e426"><textual class="po-textual">On the other hand, partially overlapping ranges (defined through the property </textual><emphasis class="po-inline e427 e427" role="ital"><textual class="po-textual">eoo:overlapsPartiallyWithRange</textual></emphasis><textual class="po-textual">) have exactly one location inside the interval and the other
					outside. For instance, considering the example in </textual><xref class="po-milestone e428 e428" linkend="FigureOverlapping"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, the range âOf Mans
					First Disobedience, and the Fruitâ overlaps partially with âthe Fruit Of that Forbidden Treeâ. These two
					properties are disjoint, meaning that two ranges cannot overlap totally and partially between them.
					Additionally, this property also handles the situation in which the two locations are complety identical, but
					the end points have reversed roles (i.e., the starting point of the first range is the ending point of the
					second one, and vice versa). They are formally defined as follows:</textual></para><programlisting class="po-block e429 e429" xml:space="preserve"><textual class="po-textual"># Sub-property declarations
eoo:overlapsTotallyWithRange â eoo:overlapsWithRange
eoo:overlapsPartiallyWithRange â eoo:overlapsWithRange

# Disjointness
eoo:overlapsTotallyWithRange â eoo:overlapsPartialelyWithRange â â¥

# Symmetry
eoo: overlapsTotallyWithRange â¡ eoo:overlapsTotallyWithRange-
eoo: overlapsPartiallyWithRange â¡ eoo:overlapsPartiallyWithRange-</textual></programlisting><para class="po-block e430 e430"><textual class="po-textual">The following SWRL rules allows us to catch the constraints of this kind of overlap by
          inferring the overlapping relation between the two different kinds of (concrete) ranges,
          i.e., </textual><emphasis class="po-inline e431 e431" role="ital"><textual class="po-textual">earmark:PointerRange</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e432 e432" role="ital"><textual class="po-textual">earmark:XPathPonterRange</textual></emphasis><footnote class="po-popup e433 e433" xml:id="ftn15"><para class="po-block e434 e434"><textual class="po-textual">In the following examples, we introduce some generic SWRL rules for ranges that
              actually work fully only with instances of the class </textual><emphasis class="po-inline e435 e435" role="ital"><textual class="po-textual">earmark:PointerRange</textual></emphasis><textual class="po-textual">, which is one kind of range defined in EARMARK. In
              particular, note that if we consider individuals of the class </textual><emphasis class="po-inline e436 e436" role="ital"><textual class="po-textual">earmark:XPathRange</textual></emphasis><textual class="po-textual">, the XPath context (defined through the property
                </textual><emphasis class="po-inline e437 e437" role="ital"><textual class="po-textual">earmark:hasXPathContext</textual></emphasis><textual class="po-textual">) must be taken into account
              to identify when such ranges overlap between them. Even if the SWRL rules for XPath
              ranges are not introduced in this paper for the sake of clarity, in EOO the issue of
              using also the property </textual><emphasis class="po-inline e438 e438" role="ital"><textual class="po-textual">earmark:hasXPathContext</textual></emphasis><textual class="po-textual"> in
              such rules has been approached in the most lazy way, saying that two XPath ranges have
              the same context when the XPath expressions specified are exactly the same. However,
              currently EOO does not handle the cases of having different XPath expressions that are
              either semantically-equivalent (i.e., â//pâ and â//element()[name() = 'p']â) or
              functionally-equivalent (i.e., they return the same sequence of items).</textual></para></footnote><textual class="po-textual">:</textual></para><programlisting class="po-block e439 e439" xml:space="preserve"><textual class="po-textual"># Overlaps partially with range
RANGE_IDENTIFICATION ^
earmark:refersTo(?x,?d) ^ earmark:refersTo(?y,?d) ^ 
earmark:begins(?x,?b1) ^ earmark:begins(?y,?b2) ^
earmark:ends(?x,?e1) ^ earmark:ends(?y,?e2) ^ 
(?b1 &lt; ?b2 &lt; ?e1 &lt; ?e2) or (?b1 &lt; ?e2 &lt; ?e1 &lt; ?b2) or
(?e1 &lt; ?b2 &lt; ?b1 &lt; ?e2) or (?e1 &lt; ?e2 &lt; ?b1 &lt; ?b2) or
(?b1 = ?b2 and ?e1 = ?e2) or (?b1 = ?e2 and ?e1 = ?b2) ^
?x != ?y
  â eoo:overlapsPartiallyWithRange(?x,?y)

# Overlaps totally with range
RANGE_IDENTIFICATION ^
earmark:refersTo(?x,?d) ^ earmark:refersTo(?y,?d) ^ 
earmark:begins(?x,?b1) ^ earmark:begins(?y,?b2) ^
earmark:ends(?x,?e1) ^ earmark:ends(?y,?e2) ^ 
(?b1 &lt;= ?b2 &lt; ?e2 &lt; ?e1) or (?e1 &lt;= ?b2 &lt; ?e2 &lt; ?b1) ^
(?b1 &lt; ?b2 &lt; ?e2 &lt;= ?e1) or (?e1 &lt; ?b2 &lt; ?e2 &lt;= ?b1) ^
(?b1 &lt;= ?e2 &lt; ?b2 &lt; ?e1) or (?e1 &lt;= ?e2 &lt; ?b2 &lt; ?b1) ^
(?b1 &lt; ?e2 &lt; ?b2 &lt;= ?e1) or (?e1 &lt; ?e2 &lt; ?b2 &lt;= ?b1) ^
?x != ?y
  â eoo:overlapsTotallyWithRange(?x,?y)</textual></programlisting><para class="po-block e440 e440"><textual class="po-textual">Here, âRANGE_IDENTIFICATIONâ is a placeholder for the different antecedents to use in case we want to deal
					with pointer ranges or with XPath pointer ranges. In particular, for the pointer range we have:</textual></para><programlisting class="po-block e441 e441" xml:space="preserve"><textual class="po-textual">earmark:PointerRange(?x) ^ earmark:PointerRange(?y)</textual></programlisting><para class="po-block e442 e442"><textual class="po-textual">, and for XPath pointer ranges we have:</textual></para><programlisting class="po-block e443 e443" xml:space="preserve"><textual class="po-textual">earmark:XPathPointerRange(?x) ^ earmark:XPathPointerRange(?y) ^
earmark:hasXPathContext(?x,?c) ^ earmark:hasXPathContext(?y,?c) </textual></programlisting></section><section class="po-hcontainer e444 e444"><title class="po-block e445 e445"><textual class="po-textual">Dominance vs. Containment in EARMARK</textual></title><para class="po-block e446 e446"><textual class="po-textual">In this section we introduce how dominance and containment relations are implemented
          in EOO, since their intrinsic relation with any kind of overlapping scenario we discuss in
          the following subsections.</textual></para><para class="po-block e447 e447"><textual class="po-textual">The dominance relation is actually defined by two different and related concepts that
          have always markup items as subject of dominance assertions. In particular, we say that a
          markup item A </textual><emphasis class="po-inline e448 e448" role="ital"><textual class="po-textual">dominates directly</textual></emphasis><textual class="po-textual"> (i.e., </textual><emphasis class="po-inline e449 e449" role="ital"><textual class="po-textual">eoo:dominatesDirectly</textual></emphasis><textual class="po-textual">) an EARMARK node B if A has B as child.
          This relation is formally defined as follows:</textual></para><programlisting class="po-block e450 e450" xml:space="preserve"><textual class="po-textual"># Declaration as an object property
eoo:dominatesDirectly â â¤op

# Domain
âeoo:dominatesDirectly.â¤ â earmark:MarkupItem

# Range
â¤ â âeoo:dominatesDirectly.(earmark:Range â earmark:MarkupItem)</textual></programlisting><para class="po-block e451 e451"><textual class="po-textual">The relation between </textual><emphasis class="po-inline e452 e452" role="ital"><textual class="po-textual">eoo:dominatesDirectly</textual></emphasis><textual class="po-textual"> and the
          parent-child relation in EARMARK</textual><footnote class="po-popup e453 e453" xml:id="ftn16"><para class="po-block e454 e454"><textual class="po-textual">As anticipated in </textual><xref class="po-milestone e455 e455" linkend="SectionEARMARK"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, note that in EARMARK any
              parent-child relationship between a markup item and a node is defined through the
              property </textual><emphasis class="po-inline e456 e456" role="ital"><textual class="po-textual">co:element</textual></emphasis><textual class="po-textual"> in case the markup item is
              defined as a set (i.e., </textual><emphasis class="po-inline e457 e457" role="ital"><textual class="po-textual">co:Set</textual></emphasis><textual class="po-textual">) or a bag (i.e.,
                </textual><emphasis class="po-inline e458 e458" role="ital"><textual class="po-textual">co:Bag</textual></emphasis><textual class="po-textual">), while it is defined by the chain </textual><emphasis class="po-inline e459 e459" role="ital"><textual class="po-textual">co:item o co:itemContent</textual></emphasis><textual class="po-textual"> if the markup item is defined as a
              list (i.e., a </textual><emphasis class="po-inline e460 e460" role="ital"><textual class="po-textual">co:List</textual></emphasis><textual class="po-textual">). However, the new version of
              the Collections Ontology [</textual><xref class="po-milestone e461 e461" linkend="CiccareseCO"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], available at </textual><link class="po-inline e462 e462" xlink:actuate="onRequest" xlink:href="http://purl.org/co" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://purl.org/co</textual></link><textual class="po-textual">, defines the property
                </textual><emphasis class="po-inline e463 e463" role="ital"><textual class="po-textual">co:element</textual></emphasis><textual class="po-textual"> as sub-property of the aforementioned
              property chain, meaning that if we have âA co:item Iâ and âI co:itemContent Bâ, then
              âA co:elements Bâ holds as well. Even if EARMARK is still using the old version of the
              Collection ontology, that does not includes the above sub-property axiom, we have
              added such axiom in EOO in order to map </textual><emphasis class="po-inline e464 e464" role="ital"><textual class="po-textual">co:element</textual></emphasis><textual class="po-textual">
              assertions between markup items and nodes as parent-child relationships.</textual></para></footnote><textual class="po-textual"> is defined by means of the following SWRL rule:</textual></para><programlisting class="po-block e465 e465" xml:space="preserve"><textual class="po-textual">earmark:MarkupItem(?x) ^ co:element(?x,?y) 
  â eoo:dominatesDirectly(?x,?y)</textual></programlisting><para class="po-block e466 e466"><textual class="po-textual">Generalising </textual><emphasis class="po-inline e467 e467" role="ital"><textual class="po-textual">eoo:dominatesDirectly</textual></emphasis><textual class="po-textual">, we say that a
          markup item A </textual><emphasis class="po-inline e468 e468" role="ital"><textual class="po-textual">dominates</textual></emphasis><textual class="po-textual"> (i.e., </textual><emphasis class="po-inline e469 e469" role="ital"><textual class="po-textual">eoo:dominates</textual></emphasis><textual class="po-textual">) an EARMARK node B if B is a descendant of A. This property is
          transitive and is also a super-property of </textual><emphasis class="po-inline e470 e470" role="ital"><textual class="po-textual">eoo:dominatesDirectly</textual></emphasis><textual class="po-textual"> (i.e., </textual><emphasis class="po-inline e471 e471" role="ital"><textual class="po-textual">eoo:dominatesDirectly</textual></emphasis><textual class="po-textual"> entails </textual><emphasis class="po-inline e472 e472" role="ital"><textual class="po-textual">eoo:dominates</textual></emphasis><textual class="po-textual">), as defined as follows:</textual></para><programlisting class="po-block e473 e473" xml:space="preserve"><textual class="po-textual"># Declaration as an object property
eoo:dominates â â¤op

# Sub-property declaration
eoo:dominatesDirectly â eoo:dominates

# Transitivity
eoo:dominates o eoo:dominates â eoo:dominates</textual></programlisting><para class="po-block e474 e474"><textual class="po-textual">The containment is a transitive relation (i.e., </textual><emphasis class="po-inline e475 e475" role="ital"><textual class="po-textual">eoo:contains</textual></emphasis><textual class="po-textual">) that is defined on the basis of the dominance relation and
          applies among any EARMARK node (either markup item or range). In particular, we say that
          an EARMARK node </textual><emphasis class="po-inline e476 e476" role="ital"><textual class="po-textual">A</textual></emphasis><textual class="po-textual"> contains another EARMARK node </textual><emphasis class="po-inline e477 e477" role="ital"><textual class="po-textual">B</textual></emphasis><textual class="po-textual"> when one of the following conditions holds:</textual></para><orderedlist class="po-table e478 e478"><listitem class="po-container e479 e479"><para class="po-block e480 e480"><textual class="po-textual">A dominates B;</textual></para></listitem><listitem class="po-container e481 e481"><para class="po-block e482 e482"><textual class="po-textual">if A and B are markup items, the leaf nodes dominated by A are a super-set of the
              leaf nodes dominated by B;</textual></para></listitem><listitem class="po-container e483 e483"><para class="po-block e484 e484"><textual class="po-textual">if A and B are ranges, A overlaps totally with B (cf. </textual><xref class="po-milestone e485 e485" linkend="SectionRangeOverlapping"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) and the interval defined by A contains
              completely the locations of B.</textual></para></listitem></orderedlist><para class="po-block e486 e486"><textual class="po-textual">This relation is thus formally defined as follows:</textual></para><programlisting class="po-block e487 e487" xml:space="preserve"><textual class="po-textual"># Declaration as an object property
eoo:contains â â¤op

# Domain
âeoo:contains.â¤ â earmark:Range â earmark:MarkupItem

# Range
â¤ â âeoo:contains.(earmark:Range â earmark:MarkupItem)

# Transitivity
eoo:contains o eoo:contains â eoo:contains</textual></programlisting><para class="po-block e488 e488"><textual class="po-textual">In addition to that, by means of rule 1, we can also state that the dominance relation
          is actually a sub-relation of the containment relation (meaning that if </textual><emphasis class="po-inline e489 e489" role="ital"><textual class="po-textual">A eoo:dominates B</textual></emphasis><textual class="po-textual">, then </textual><emphasis class="po-inline e490 e490" role="ital"><textual class="po-textual">A eoo:contains
            B</textual></emphasis><textual class="po-textual"> holds as well), as shown as follows:</textual></para><programlisting class="po-block e491 e491" xml:space="preserve"><textual class="po-textual"># Sub-property declaration
eoo:dominates â eoo:contains</textual></programlisting><para class="po-block e492 e492"><textual class="po-textual">While we cannot specify in any way (neither in OWL nor SWRL) the constraint introduced
          in rule 2, we can define a particular SWRL rule to handle the constraint introduced in
          rule 3:</textual></para><programlisting class="po-block e493 e493" xml:space="preserve"><textual class="po-textual">eoo:overlapsTotallyWithRange(?x,?y) ^ 
earmark:begins(?x,?b1) ^ earmark:begins(?y,?b2) ^ 
earmark:ends(?x,?e1) ^ earmark:ends(?y,?e2) ^ 
(?b1 &lt; ?b2 &lt; ?e1) or (?b1 &lt; ?e2 &lt; ?e1) or
(?e1 &lt; ?b2 &lt; ?b1) or (?e1 &lt; ?e2 &lt; ?b1)
  â eoo:contains(?x,?y)</textual></programlisting></section><section class="po-hcontainer e494 e494"><title class="po-block e495 e495"><textual class="po-textual">Overlapping of markup items</textual></title><para class="po-block e496 e496"><textual class="po-textual">The case of overlapping markup items (i.e., linked through the symmetric property </textual><emphasis class="po-inline e497 e497" role="ital"><textual class="po-textual">eoo:overlapsWithMarkupItem</textual></emphasis><textual class="po-textual">) is slightly more complicated than range overlaps. We define that two
					markup items A and B overlap when at least one of the following scenarios holds:</textual></para><orderedlist class="po-table e498 e498"><listitem class="po-container e499 e499"><para class="po-block e500 e500"><textual class="po-textual">a markup item </textual><emphasis class="po-inline e501 e501" role="ital"><textual class="po-textual">A</textual></emphasis><textual class="po-textual"> contains a range that overlaps
              with another range contained by a markup item </textual><emphasis class="po-inline e502 e502" role="ital"><textual class="po-textual">B</textual></emphasis><textual class="po-textual">;</textual></para></listitem><listitem class="po-container e503 e503"><para class="po-block e504 e504"><textual class="po-textual">two markup items </textual><emphasis class="po-inline e505 e505" role="ital"><textual class="po-textual">A</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e506 e506" role="ital"><textual class="po-textual">B</textual></emphasis><textual class="po-textual"> contain at least a range in common;</textual></para></listitem><listitem class="po-container e507 e507"><para class="po-block e508 e508"><textual class="po-textual">two markup items </textual><emphasis class="po-inline e509 e509" role="ital"><textual class="po-textual">A</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e510 e510" role="ital"><textual class="po-textual">B</textual></emphasis><textual class="po-textual"> contain at least a markup item in common.</textual></para></listitem></orderedlist><para class="po-block e511 e511"><textual class="po-textual">The property </textual><emphasis class="po-inline e512 e512" role="ital"><textual class="po-textual">eoo:overlapsWithMarkupItem</textual></emphasis><textual class="po-textual"> is defined as
          follows:</textual></para><programlisting class="po-block e513 e513" xml:space="preserve"><textual class="po-textual"># Sub-property declaration
eoo:overlapsWithMarkupItem â eoo:overlapsWith

# Domain
âeoo:overlapsWithMarkupItem.â¤ â earmark:MarkupItem

# Range
â¤ â âeoo:overlapsWithMarkupItem.earmark:MarkupItem

# Symmetry
eoo:overlapsWithMarkupItem â¡ eoo:overlapsWithMarkupItem-</textual></programlisting><para class="po-block e514 e514"><textual class="po-textual">The three aforementioned scenarios correspond to three different symmetric sub-properties of </textual><emphasis class="po-inline e515 e515" role="ital"><textual class="po-textual">eoo:overlapsWIthMarkupItem</textual></emphasis><textual class="po-textual">. </textual></para><para class="po-block e516 e516"><textual class="po-textual">The first scenario â i.e., </textual><emphasis class="po-inline e517 e517" role="ital"><textual class="po-textual">A</textual></emphasis><textual class="po-textual"> contains a range that overlaps with another
					range contained by </textual><emphasis class="po-inline e518 e518" role="ital"><textual class="po-textual">B</textual></emphasis><textual class="po-textual"> â refers to markup items </textual><emphasis class="po-inline e519 e519" role="ital"><textual class="po-textual">overlapping by range</textual></emphasis><textual class="po-textual">.In the example in </textual><xref class="po-milestone e520 e520" linkend="FigureOverlapping"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, the element
						</textual><emphasis class="po-inline e521 e521" role="ital"><textual class="po-textual">l1</textual></emphasis><textual class="po-textual"> overlaps by range with the element </textual><emphasis class="po-inline e522 e522" role="ital"><textual class="po-textual">unit1</textual></emphasis><textual class="po-textual">. This is captured by a subproperty of </textual><emphasis class="po-inline e523 e523" role="ital"><textual class="po-textual">eoo:overlapsWIthMarkupItem</textual></emphasis><textual class="po-textual">, property </textual><emphasis class="po-inline e524 e524" role="ital"><textual class="po-textual">eoo:overlapsByRange</textual></emphasis><textual class="po-textual">, that
					is formally described as follows:</textual></para><programlisting class="po-block e525 e525" xml:space="preserve"><textual class="po-textual"># Sub-property declaration
eoo:overlapsByRange â eoo:overlapsWithWithMarkupItem

# Domain
âeoo:overlapsByRange.â¤ â 
  earmark:MarkupItem â
  âeoo:dominatesDirectly.(âeoo:overlapsWithRange.earmark:Range)

# Range
â¤ â âeoo:overlapsByRange.(
  earmark:MarkupItem â
  âeoo:dominatesDirectly.(âeoo:overlapsWithRange.earmark:Range))

# Symmetry
eoo:overlapsByRange â¡ eoo:overlapsByRange-</textual></programlisting><para class="po-block e526 e526"><textual class="po-textual">The second scenario â i.e., </textual><emphasis class="po-inline e527 e527" role="ital"><textual class="po-textual">A</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e528 e528" role="ital"><textual class="po-textual">B</textual></emphasis><textual class="po-textual">
					contain at least one shared range â refers to markup items </textual><emphasis class="po-inline e529 e529" role="ital"><textual class="po-textual">overlapping by content
						hierarchy</textual></emphasis><textual class="po-textual">. In the example in </textual><xref class="po-milestone e530 e530" linkend="FigureOverlapping"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, the element </textual><emphasis class="po-inline e531 e531" role="ital"><textual class="po-textual">l2</textual></emphasis><textual class="po-textual"> overlaps by content hierarchy with the element </textual><emphasis class="po-inline e532 e532" role="ital"><textual class="po-textual">unit2</textual></emphasis><textual class="po-textual">. The corresponding subproperty </textual><emphasis class="po-inline e533 e533" role="ital"><textual class="po-textual">eoo:overlapsByContentHierarchy</textual></emphasis><textual class="po-textual"> is formally described as follows:</textual></para><programlisting class="po-block e534 e534" xml:space="preserve"><textual class="po-textual"># Sub-property declaration
eoo:overlapsByContentHierarchy â eoo:overlapsWithWithMarkupItem

# Domain
âeoo:overlapsByContentHierarchy.â¤ â 
  earmark:MarkupItem â âeoo:dominatesDirectly.earmark:Range

# Range
â¤ â âeoo:overlapsByContentHierarchy.(
  earmark:MarkupItem â âeoo:dominatesDirectly.earmark:Range)

# Symmetry
eoo:overlapsByContentHierarchy â¡ eoo:overlapsByContentHierarchy-</textual></programlisting><para class="po-block e535 e535"><textual class="po-textual">The third scenario â i.e., </textual><emphasis class="po-inline e536 e536" role="ital"><textual class="po-textual">A</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e537 e537" role="ital"><textual class="po-textual">B</textual></emphasis><textual class="po-textual">
					contain at least another markup item in common â refers to markup items </textual><emphasis class="po-inline e538 e538" role="ital"><textual class="po-textual">overlapping by
						markup hierarchy</textual></emphasis><textual class="po-textual">. In the example in </textual><xref class="po-milestone e539 e539" linkend="FigureOverlapping"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, the element </textual><emphasis class="po-inline e540 e540" role="ital"><textual class="po-textual">lg</textual></emphasis><textual class="po-textual"> overlaps by markup hierarchy with the element </textual><emphasis class="po-inline e541 e541" role="ital"><textual class="po-textual">q</textual></emphasis><textual class="po-textual">.
					The related subproperty </textual><emphasis class="po-inline e542 e542" role="ital"><textual class="po-textual">eoo:overlapsByMarkupHierarchy</textual></emphasis><textual class="po-textual"> is formally described
					as follows:</textual></para><programlisting class="po-block e543 e543" xml:space="preserve"><textual class="po-textual"># Sub-property declaration
eoo:overlapsByMarkupHierarchy â eoo:overlapsWithWithMarkupItem

# Domain
âeoo:overlapsByMarkupHierarchy.â¤ â 
  earmark:MarkupItem â âeoo:dominatesDirectly.earmark:MarkupItem

# Range
â¤ â âeoo:overlapsByMarkupHierarchy.(
  earmark:MarkupItem â âeoo:dominatesDirectly.earmark:MarkupItem)

# Symmetry
eoo:overlapsByMarkupHierarchy â¡ eoo:overlapsByMarkupHierarchy-</textual></programlisting><para class="po-block e544 e544"><textual class="po-textual">The following SWRL rules allows us to catch the constraints of this kind of overlap by
          inferring the right overlapping relation according to the aforementioned three
          scenarios:</textual></para><programlisting class="po-block e545 e545" xml:space="preserve"><textual class="po-textual"># overlaps by range
earmark:MarkupItem(?a) ^ earmark:MarkupItem(?b) ^ 
earmark:Range(?r1) ^ earmark:Range(?r2) ^ 
eoo:dominatesDirectly(?a,?r1) ^ eoo:dominatesDirectly(?b,?r2) ^ 
eoo:overlapsWithRange(?r1,?r2) ^ 
?a != ?b ^ ?r1 != ?r2
  â eoo:overlapsByRange(?a,?b)

# overlaps by content hierarchy
earmark:MarkupItem(?a) ^ earmark:MarkupItem(?b) ^ earmark:Range(?r) ^ 
eoo:dominatesDirectly(?a,?r) ^ eoo:dominatesDirectly(?b,?r) ^ 
?a != ?b
  â eoo:overlapsByContentHierarchy(?a,?b)

# overlaps by markup hierarchy
earmark:MarkupItem(?a) ^ earmark:MarkupItem(?b) ^ earmark:MarkupItem(?x) ^ 
eoo:dominatesDirectly(?a,?x) ^ eoo:dominatesDirectly(?b,?x) ^ 
?a != ?b != ?x
  â eoo:overlapsByMarkupHierarchy(?a,?b)</textual></programlisting></section></section><section class="po-hcontainer e546 e546"><title class="po-block e547 e547"><textual class="po-textual">Approaching inferences through reasoners</textual></title><para class="po-block e548 e548"><textual class="po-textual">The EARMARK Overlapping Ontology can be used by OWL reasoners such as Pellet</textual><footnote class="po-popup e549 e549" xml:id="ftn17"><para class="po-block e550 e550"><textual class="po-textual">Pellet, OWL 2 reasoner for Java: </textual><link class="po-inline e551 e551" xlink:actuate="onRequest" xlink:href="http://clarkparsia.com/pellet/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://clarkparsia.com/pellet/</textual></link><textual class="po-textual">. </textual></para></footnote><textual class="po-textual"> [</textual><xref class="po-milestone e552 e552" linkend="SirinPellet"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] in order to identify all the possible kinds of
        overlapping scenarios that happen within any EARMARK document. As an example, running such
        reasoner according to EOO on the EARMARK file describing the document in </textual><xref class="po-milestone e553 e553" linkend="FigureOverlapping"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><footnote class="po-popup e554 e554" xml:id="ftn18"><para class="po-block e555 e555"><textual class="po-textual">Available online at </textual><link class="po-inline e556 e556" xlink:actuate="onRequest" xlink:href="http://www.essepuntato.it/2014/balisage/earmark-document.ttl" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.essepuntato.it/2014/balisage/earmark-document.ttl</textual></link><textual class="po-textual">. </textual></para></footnote><textual class="po-textual">, we obtain a full and complete description of all kinds of overlaps existing in
        such document</textual><footnote class="po-popup e557 e557" xml:id="ftn19"><para class="po-block e558 e558"><textual class="po-textual">An OWL file containing all the assertions about overlaps inferred by the reasoner is
            available online at </textual><link class="po-inline e559 e559" xlink:actuate="onRequest" xlink:href="http://www.essepuntato.it/2014/balisage/earmark-overlapping.ttl" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.essepuntato.it/2014/balisage/earmark-overlapping.ttl</textual></link><textual class="po-textual">. </textual></para></footnote><textual class="po-textual">.</textual></para><para class="po-block e560 e560"><textual class="po-textual">In particular, the reasoner identified:</textual></para><itemizedlist class="po-table e561 e561"><listitem class="po-container e562 e562"><para class="po-block e563 e563"><textual class="po-textual">all the dominance relations among elements that exist in the document, as well as all the related
						containment relations entailed by dominance;</textual></para></listitem><listitem class="po-container e564 e564"><para class="po-block e565 e565"><textual class="po-textual">that the range âOf Mans First Disobedience, and the Fruitâ (</textual><emphasis class="po-inline e566 e566" role="ital"><textual class="po-textual">r1</textual></emphasis><textual class="po-textual"> from now on) overlaps with the range âthe Fruit Of that Forbidden Treeâ
              (</textual><emphasis class="po-inline e567 e567" role="ital"><textual class="po-textual">r2</textual></emphasis><textual class="po-textual"> from now on), and </textual><emphasis class="po-inline e568 e568" role="ital"><textual class="po-textual">r2</textual></emphasis><textual class="po-textual"> overlaps with the range âOf that Forbidden Treeâ (</textual><emphasis class="po-inline e569 e569" role="ital"><textual class="po-textual">r3</textual></emphasis><textual class="po-textual"> from now on). Specifically, </textual><emphasis class="po-inline e570 e570" role="ital"><textual class="po-textual">r1</textual></emphasis><textual class="po-textual">
            overlaps partially with </textual><emphasis class="po-inline e571 e571" role="ital"><textual class="po-textual">r2</textual></emphasis><textual class="po-textual">, and </textual><emphasis class="po-inline e572 e572" role="ital"><textual class="po-textual">r2</textual></emphasis><textual class="po-textual"> overlaps totally with </textual><emphasis class="po-inline e573 e573" role="ital"><textual class="po-textual">r3</textual></emphasis><textual class="po-textual">;</textual></para></listitem><listitem class="po-container e574 e574"><para class="po-block e575 e575"><textual class="po-textual">about the last total range overlap, that </textual><emphasis class="po-inline e576 e576" role="ital"><textual class="po-textual">r2</textual></emphasis><textual class="po-textual"> actually contains </textual><emphasis class="po-inline e577 e577" role="ital"><textual class="po-textual">r3</textual></emphasis><textual class="po-textual"> and, consequently, the markup items </textual><emphasis class="po-inline e578 e578" role="ital"><textual class="po-textual">syntax</textual></emphasis><textual class="po-textual"> and
							</textual><emphasis class="po-inline e579 e579" role="ital"><textual class="po-textual">unit1</textual></emphasis><textual class="po-textual"> contain </textual><emphasis class="po-inline e580 e580" role="ital"><textual class="po-textual">r3</textual></emphasis><textual class="po-textual">;</textual></para></listitem><listitem class="po-container e581 e581"><para class="po-block e582 e582"><textual class="po-textual">that the markup items in the pairs </textual><emphasis class="po-inline e583 e583" role="ital"><textual class="po-textual">l1</textual></emphasis><textual class="po-textual"> - </textual><emphasis class="po-inline e584 e584" role="ital"><textual class="po-textual">unit1</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e585 e585" role="ital"><textual class="po-textual">l2</textual></emphasis><textual class="po-textual"> - </textual><emphasis class="po-inline e586 e586" role="ital"><textual class="po-textual">unit1</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e587 e587" role="ital"><textual class="po-textual">l2</textual></emphasis><textual class="po-textual"> - </textual><emphasis class="po-inline e588 e588" role="ital"><textual class="po-textual">unit2</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e589 e589" role="ital"><textual class="po-textual">l3</textual></emphasis><textual class="po-textual"> -
							</textual><emphasis class="po-inline e590 e590" role="ital"><textual class="po-textual">unit2</textual></emphasis><textual class="po-textual">, and </textual><emphasis class="po-inline e591 e591" role="ital"><textual class="po-textual">lg</textual></emphasis><textual class="po-textual"> - </textual><emphasis class="po-inline e592 e592" role="ital"><textual class="po-textual">q</textual></emphasis><textual class="po-textual"> overlap between them. Specifically, the markup items in the first two pairs overlap by
						range, while those in the following two pairs overlap by content hierarchy, and the last two overlap by
						markup hierarchy.</textual></para></listitem></itemizedlist><para class="po-block e593 e593"><textual class="po-textual">Of course, this inference process can be run on any EARMARK document. However, the bigger the document (in
				terms of the number of OWL assertions that specify the markup structure), the longer it takes for the reasoner
				to infer those data. For this reason, in some cases, it could be prefereable to express as SPARQL 1.1 inserts
					[</textual><xref class="po-milestone e594 e594" linkend="GearonSPARQLUpdate"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] some of the inference rules that we have shown here as OWL logical
				axioms and SWRL rules. For instance, the rule specified for identifying the overlaps by markup hierarchy could
				improve the efficiency of the system if expressed in SPARQL as follows:</textual></para><programlisting class="po-block e595 e595" xml:space="preserve"><textual class="po-textual"># Rule 'overlaps by markup hierarchy' in SPARQL
CONSTRUCT { ?a eoo:overlapsByMarkupHierarchy ?b }
WHERE {
  ?a a earmark:MarkupItem ;
    eoo:dominatesDirectly ?x .
  ?b a earmark:MarkupItem ;
    eoo:dominatesDirectly ?x .
  ?x a earmark:MarkupItem .
}</textual></programlisting><para class="po-block e596 e596"><textual class="po-textual">According to our experience, this approach considerably reduces the time to infer the existing overlapping
				scenarios in an EARMARK document, even if it needs to implement manually all the inferences that are needed,
				including those derived from any ontological axiom, e.g., subsumption, property characteristic (transitivity,
				irreflexivity, symmetry, etc.), and so on.</textual></para></section></section><section class="po-hcontainer e597 e597"><title class="po-block e598 e598"><textual class="po-textual">Conclusions</textual></title><para class="po-block e599 e599"><textual class="po-textual">For EARMARK to be able to claim to be a one-stop answer to overlapping needs of markup authors, we still
			needed a way to identify when, indeed, ranges and markup items actually overlap. EARMARK </textual><emphasis class="po-inline e600 e600" role="ital"><textual class="po-textual">per se</textual></emphasis><textual class="po-textual">, in fact, does not have a way to identify overlapping situations, simply allowing them to
			exist and each overlapping item to ignore the others. With the EARMARK Overlapping Ontology, on the other hand, it
			is now possible to identify and qualify explicitly every overlapping situation we encounter. For instance in
			[</textual><xref class="po-milestone e601 e601" linkend="BarabucciEARMARKFairyTale"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] we provide a brief overview of situations and contexts where EARMARK 
    	can and has been used, especially in the domain of Digital Humanities. </textual></para><para class="po-block e602 e602"><textual class="po-textual">Also, technically, EARMARK is a stand-off notation, and as such it suffers from the same limitations that all
			stand-off notations suffer: namely, whenever the source document (the </textual><emphasis class="po-inline e603 e603" role="ital"><textual class="po-textual">docuverse</textual></emphasis><textual class="po-textual">)
			is modified outside of the control of the author of the EARMARK annotations, they may (and often will) have the
			pointers become outdated and wrong. Also in [</textual><xref class="po-milestone e604 e604" linkend="BarabucciEARMARKFairyTale"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] we provide some
			mechanisms through which EARMARK pointers can be resynchronized with a modified source, that should be able to
			handle some of the possible situations. </textual></para><para class="po-block e605 e605"><textual class="po-textual">EARMARK still has not finished evolving. The FRETTA parser [</textual><xref class="po-milestone e606 e606" linkend="BarabucciFRETTA"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], that provides a
			way for converting EARMARK documents into XML, and expressing overlapping situations choosing parametrically one
			of the many existing XML tricks such as fragmentation, milestones or twin documents, is working and complete, but
			the opposite converter, the one that generates an EARMARK document from an XML file that uses XML tricks to
			express overlaps, is still to be completed. Once this is finished, we will have a complete solution to the problem
			of expressing any markup document with Semantic Web technologies, and we will be able to cover all possible
			situations of conversion of overlapping documents. </textual></para></section><bibliography class="po-hcontainer e607 e607"><title class="po-block e608 e608"><textual class="po-textual">Bibliography</textual></title><bibliomixed class="po-block e609 e609" xml:id="BarabucciEARMARKFairyTale" xreflabel="1"><textual class="po-textual">Barabucci, G., Di Iorio, A.,
      Peroni, S., Poggi, F., &amp; Vitali, F. (2013). Annotations with EARMARK in practice: a fairy
      tale. In F. Tomasi &amp; F. Vitali (Eds.), Proceedings of the 2013 Workshop on Collaborative
      Annotations in Shared Environments: metadata, vocabularies and techniques in the Digital
      Humanities (DH-CASE 2013). New York, New York, US: ACM Press. doi:</textual><biblioid class="po-atom e610 doi e610"><textual class="po-textual">10.1145/2517978.2517990</textual></biblioid><textual class="po-textual">
      </textual></bibliomixed><bibliomixed class="po-block e611 e611" xml:id="BarabucciFRETTA" xreflabel="2"><textual class="po-textual">Barabucci, G., Peroni, S., Poggi, F., &amp;
      Vitali, F. (2012). Embedding semantic annotations within texts: the FRETTA approach. In
      Proceedings of the 2012 ACM Symposium on Applied Computing (SAC 2012): 658â663. New York, New
      York, US: ACM Press. doi:</textual><biblioid class="po-atom e612 doi e612"><textual class="po-textual">10.1145/2245276.2245403</textual></biblioid></bibliomixed><bibliomixed class="po-block e613 e613" xml:id="FirstOverlapBarnard88" xreflabel="3"><textual class="po-textual">Barnard, D., Hayter, R., Karababa, M.,
      Logan, G., &amp; McFadden, J. (1988). SGML-based markup for literary texts: Two problems and
      some solutions. Computers and the Humanities, 22(4), 265-276.</textual></bibliomixed><bibliomixed class="po-block e614 e614" xml:id="XPath" xreflabel="4"><textual class="po-textual">Berglund, A., Boag, S., Chamberlin, D., FernÃ¡ndez, M.
      F., Kay, M., Robie, J., SimÃ©on, J. (2010). XML Path Language (XPath) 2.0 (Second Edition). W3C
      Recommendation 14 December 2010. World Wide Web Consortium. 
      â</textual><link class="po-inline e615 e615" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xpath20/</textual></link><textual class="po-textual">â.</textual></bibliomixed><bibliomixed class="po-block e616 e616" xml:id="XQuery" xreflabel="5"><textual class="po-textual">Boag, S., Chamberlin, D., FernÃ¡ndez, M. F., Florescu,
      D., Robie, J., SimÃ©on, J. (2010). XQuery 1.0: An XML Query Language (Second Edition). W3C
      Recommendation 14 December 2010. World Wide Web Consortium. 
      â</textual><link class="po-inline e617 e617" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xquery/</textual></link><textual class="po-textual">â.</textual></bibliomixed><bibliomixed class="po-block e618 e618" xml:id="CiccareseCO" xreflabel="6"><textual class="po-textual">Ciccarese, P., &amp; Peroni, S. (2013). The
      Collections Ontology: creating and handling collections in OWL 2 DL frameworks. Semantic Web â
      Interoperability, Usability, Applicability. doi:</textual><biblioid class="po-atom e619 doi e619"><textual class="po-textual">10.3233/SW-130121</textual></biblioid></bibliomixed><bibliomixed class="po-block e620 e620" xml:id="ECLIX" xreflabel="7"><textual class="po-textual">Cowan, J., Tennison, J. ECLIX: reading XML as
      LMNL. LMNL wiki â</textual><link class="po-inline e621 e621" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://lmnl-markup.org/specs/</textual></link><textual class="po-textual">â.</textual></bibliomixed><bibliomixed class="po-block e622 e622" xml:id="DeRose" xreflabel="8"><textual class="po-textual">DeRose, S. J. (2004). Markup Overlap: A Review and a
      Horse. In Extreme Markup Languages.</textual></bibliomixed><bibliomixed class="po-block e623 e623" xml:id="DeRoseOHCO90" xreflabel="9"><textual class="po-textual">DeRose, S. J., Durand, D. G., Mylonas, E.,
      Renear, A. H. (1990). What is text, really? In Journal of Computing in Higher Education, 1(2), 3-26.</textual></bibliomixed><bibliomixed class="po-block e624 e624" xml:id="XPointer" xreflabel="10"><textual class="po-textual">DeRose, S., Daniel, R., Grosso, P., Maler, E.,
      Marsh, J., Walsh, N. (2002). XML Pointer Language (XPointer). W3C Working Draft 16 August
      2002. World Wide Web Consortium. â</textual><link class="po-inline e625 e625" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xptr/</textual></link><textual class="po-textual">â.</textual></bibliomixed><bibliomixed class="po-block e626 e626" xml:id="DiIorioEARMARKGODDAG" xreflabel="11"><textual class="po-textual">Di Iorio, A., Peroni, S., &amp;
      Vitali, F. (2009). Towards markup support for full GODDAGs and beyond: the EARMARK approach.
      In Proceedings of Balisage: The Markup Conference 2009, Balisage Series on Markup Technologies
      3. Rockville, Maryland, US: Mulberry Technologies, Inc. doi:</textual><biblioid class="po-atom e627 doi e627"><textual class="po-textual">10.4242/BalisageVol3.Peroni01</textual></biblioid></bibliomixed><bibliomixed class="po-block e628 e628" xml:id="DiIorioEARMARK" xreflabel="12"><textual class="po-textual">Di Iorio, A., Peroni, S., &amp; Vitali, F.
      (2011). A Semantic Web approach to everyday overlapping markup. Journal of the American
      Society for Information Science and Technology, 62(9): 1696â1716. doi:</textual><biblioid class="po-atom e629 doi e629"><textual class="po-textual">10.1002/asi.21591</textual></biblioid></bibliomixed><bibliomixed class="po-block e630 e630" xml:id="DiIorioEARMARKValidation" xreflabel="13"><textual class="po-textual">Di Iorio, A., Peroni, S., &amp;
      Vitali, F. (2011). Using semantic web technologies for analysis and validation of structural
      markup. International Journal of Web Engineering and Technology, 6(4): 375â398. doi:</textual><biblioid class="po-atom e631 doi e631"><textual class="po-textual">10.1504/IJWET.2011.043439</textual></biblioid></bibliomixed><bibliomixed class="po-block e632 e632" xml:id="JITT02a" xreflabel="14"><textual class="po-textual">Durusau, P., O'Donnell, M. B. (2002). Coming down
      from the trees: Next step in the evolution of markup? In Extreme Markup
      LanguagesÂ®.</textual></bibliomixed><bibliomixed class="po-block e633 e633" xml:id="JITT02b" xreflabel="15"><textual class="po-textual">Durusau, P., O'Donnell, M. B. (2002).
      Just-In-Time-Trees (JITTs): Next Step in the Evolution of Markup. In Proceedings of 2002
      Extreme Markup Languages Conference, MontrÃ©al, Canada.</textual></bibliomixed><bibliomixed class="po-block e634 e634" xml:id="FalcoGraffoo" xreflabel="16"><textual class="po-textual">Falco, R., Gangemi, A., Peroni, S., &amp;
      Vitali, F. (2014). Modelling OWL ontologies with Graffoo. In ESWC 2014 Satellite Events -
      Revised Selected Papers, Lecture Notes in Computer Science. Berlin, Germany: Springer.
      Postprint available at 
      </textual><link class="po-inline e635 e635" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://speroni.web.cs.unibo.it/publications/falco-in-press-modelling-ontologies-graffoo.pdf</textual></link></bibliomixed><bibliomixed class="po-block e636 e636" xml:id="GearonSPARQLUpdate" xreflabel="17"><textual class="po-textual">Gearon, P., Passant, A., &amp; Polleres,
      A. (2013). SPARQL 1.1 Update. W3C Recommendation, 21 March 2013. World Wide Web Consortium.
      Retrieved from </textual><link class="po-inline e637 e637" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/sparql11-update/</textual></link></bibliomixed><bibliomixed class="po-block e638 e638" xml:id="CONCUR90" xreflabel="18"><textual class="po-textual">Goldfarb, C. F., Rubinsky, Y. (1990). The SGML
      handbook. Oxford University Press.</textual></bibliomixed><bibliomixed class="po-block e639 e639" xml:id="XCONCUR05" xreflabel="19"><textual class="po-textual">Hilbert, M., Schonefeld, O., Witt, A. (2005,
      August). Making CONCUR work. In Extreme Markup Languages.</textual></bibliomixed><bibliomixed class="po-block e640 e640" xml:id="HorrocksSROIQ" xreflabel="20"><textual class="po-textual">Horrocks, I., Kutz, O., &amp; Sattler, U.
      (2006). The Even More Irresistible SROIQ. In P. Doherty, J. Mylopoulos, &amp; C. A. Welty
      (Eds.), Proceedings of the 10th International Conference on Principles of Knowledge
      Representation and Reasoning (KR 2006): 57â67. Palo Alto, California, USA: AAAI
      Press.</textual></bibliomixed><bibliomixed class="po-block e641 e641" xml:id="HorrocksSWRL" xreflabel="21"><textual class="po-textual">Horrocks, I., Patel-Schneider, P. F., Boley,
      H., Tabet, S., Grosof, B., &amp; Dean, M. (2004). SWRL: A Semantic Web Rule Language Combining
      OWL and RuleML. W3C Member Submission, 21 May 2004. World Wide Web Consortium. Retrieved from 
      </textual><link class="po-inline e642 e642" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/Submission/SWRL/</textual></link></bibliomixed><bibliomixed class="po-block e643 e643" xml:id="TexMECS01" xreflabel="22"><textual class="po-textual">Huitfeldt, C., Sperberg-McQueen, C. M. (2001).
      TexMECS: An experimental markup meta-language for complex documents. 
      â</textual><link class="po-inline e644 e644" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://mlcd.blackmesatech.com/mlcd/2003/Papers/texmecs.html</textual></link><textual class="po-textual">â.(DAG, noDAG, child-arch-ordered
      direct graph (CODG), overlap-only (oo) TexMECS, etc.)</textual></bibliomixed><bibliomixed class="po-block e645 e645" xml:id="Goddagb06" xreflabel="23"><textual class="po-textual">Huitfeldt, C.,Sperberg-McQueen, C. M. (2006).
      Representation and processing of goddag structures: implementation strategies and progress
      report. In Extreme Markup Languages.</textual></bibliomixed><bibliomixed class="po-block e646 e646" xml:id="MultiCOloredTree04" xreflabel="24"><textual class="po-textual">Jagadish, H. V., Lakshmanan, L. V.,
      Scannapieco, M., Srivastava, D., Wiwatwattana, N. (2004). Colorful XML: one hierarchy isn't
      enough. In Proceedings of the 2004 ACM SIGMOD international conference on Management of data.
      (pp. 251-262). ACM.</textual></bibliomixed><bibliomixed class="po-block e647 e647" xml:id="KrotzschDL" xreflabel="25"><textual class="po-textual">KrÃ¶tzsch, M., Simancik, F., &amp; Horrocks, I.
      (2013). A Description Logic Primer. No. arXiv:1201.4089, 2013, The Computing Research
      Repository. Retrieved from </textual><link class="po-inline e648 e648" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://arxiv.org/abs/1201.4089</textual></link></bibliomixed><bibliomixed class="po-block e649 e649" xml:id="Goddagc08" xreflabel="26"><textual class="po-textual">Marcoux, Y. (2008). Graph characterization of
      overlap-only TexMECS and other overlapping markup formalisms. In Proceedings of Balisage: The
      Markup Conference (Vol. 1). doi:</textual><biblioid class="po-atom e650 doi e650"><textual class="po-textual">10.4242/BalisageVol1.Marcoux01</textual></biblioid></bibliomixed><bibliomixed class="po-block e651 e651" xml:id="Goddagd13" xreflabel="27"><textual class="po-textual">Marcoux, Y., Sperberg-McQueen, M., Huitfeldt, C.
      (2013). Modeling overlapping structures. Graphs and serializability. In Balisage: The Markup
      Conference, 2013. doi:</textual><biblioid class="po-atom e652 doi e652"><textual class="po-textual">10.4242/BalisageVol10.Marcoux01</textual></biblioid></bibliomixed><bibliomixed class="po-block e653 e653" xml:id="MVZ08" xreflabel="28"><textual class="po-textual">Marinelli, P., Vitali, F., Zacchiroli, S. (2008). 
  		Towards the unification of formats for overlapping markup. In New Review of Hypermedia and 
  		Multimedia 14, 1 (January 2008), pages 57-94. doi:</textual><biblioid class="po-atom e654 doi e654"><textual class="po-textual">10.1080/13614560802316145</textual></biblioid></bibliomixed><bibliomixed class="po-block e655 e655" xml:id="XCONCUR-CL07a" xreflabel="29"><textual class="po-textual">O. Schonefeld. (2007). XCONCUR and
      XCONCUR-CL: A constraint-based approach for the validation of concurrent markup. In Data
      Structures for Linguistic Resources and Applications. Proceedings of the Biennial GLDV
      Conference 2007, TÃ¼bingen, Germany, 2007. Gunter Narr Verlag.</textual></bibliomixed><bibliomixed class="po-block e656 e656" xml:id="PeroniMarkupSemantics" xreflabel="30"><textual class="po-textual">Peroni, S., Gangemi, A., &amp;
      Vitali, F. (2011). Dealing with markup semantics. In Proceedings the 7th International
      Conference on Semantic Systems (I-SEMANTICS 2011): 111â118. New York, New York, US: ACM Press.
      doi:</textual><biblioid class="po-atom e657 doi e657"><textual class="po-textual">10.1145/2063518.2063533</textual></biblioid></bibliomixed><bibliomixed class="po-block e658 e658" xml:id="PeroniChangeTracking" xreflabel="31"><textual class="po-textual">Peroni, S., Poggi, F., &amp; Vitali,
      F. (2013). Tracking changes through EARMARK: a theoretical perspective and an implementation.
      In G. Barabucci, U. Burghoff, A. Di Iorio, &amp; S. Maier (Eds.), Proceedings of 1st
      International Workshop on (Document) Changes: modeling, detection, storage and visualization
      (DChanges 2013), CEUR Workshop Proceedings 1008. Aachen, Germany: CEUR-WS.org. Retrieved from 
      </textual><link class="po-inline e659 e659" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://ceur-ws.org/Vol-1008/paper6.pdf</textual></link></bibliomixed><bibliomixed class="po-block e660 e660" xml:id="TurtlePrudhommeaux" xreflabel="32"><textual class="po-textual">Prudâhommeaux, E., &amp; Carothers, G.
      (2013). Turtle - Terse RDF Triple Language. W3C Candidate Recommendation, 19 February 2013.
      World Wide Web Consortium. Retrieved from </textual><link class="po-inline e661 e661" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/turtle/</textual></link></bibliomixed><bibliomixed class="po-block e662 e662" xml:id="SirinPellet" xreflabel="33"><textual class="po-textual">Sirin, E., Parsia, B., Grau, B. C., Kalyanpur,
      A., &amp; Katz, Y. (2007). Pellet: A practical OWL-DL reasoner. Web Semantics: Science,
      Services and Agents on the World Wide Web, 5(2): 51â53. doi:</textual><biblioid class="po-atom e663 doi e663"><textual class="po-textual">10.1016/j.websem.2007.03.004</textual></biblioid></bibliomixed><bibliomixed class="po-block e664 e664" xml:id="SperbergGoddag04" xreflabel="34"><textual class="po-textual">Sperberg-McQueen, C. M., &amp; Huitfeldt,
      C. (2004). Goddag: A data structure for overlapping hierarchies. In Digital Documents: Systems
      and Principles (pp. 139-160). Springer Berlin Heidelberg.</textual></bibliomixed><bibliomixed class="po-block e665 e665" xml:id="TEIP5" xreflabel="35"><textual class="po-textual">TEI Consortium (2008). TEI P5: Guidelines for
      electronic text encoding and interchange. Eds. Lou Burnard, and Syd Bauman. TEI Consortium,
      2008.</textual></bibliomixed><bibliomixed class="po-block e666 e666" xml:id="LMNL" xreflabel="36"><textual class="po-textual">Tennison, J., Piez, W. (2002). The Layered Markup and
      Annotation Language (LMNL). In Extreme Markup Languages, 2002.</textual></bibliomixed><bibliomixed class="po-block e667 e667" xml:id="XCONCUR-CL07b" xreflabel="37"><textual class="po-textual">Witt, A., Schonefeld, O., Rehm, G., Khoo, J.
      Evang, K. (2007). On the lossless transformation of single-file, multi-layer annotations into
      multi-rooted trees. In Proceedings of Extreme Markup Languages, MontrÃ©al, QuÃ©bec,
      2007.</textual></bibliomixed></bibliography></article></classedDocument>