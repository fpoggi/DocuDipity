<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.3" xml:id="HR-23632987-8973"><title class="po-block e1 e1"><textual class="po-textual">Processing XForms in HTML5-Enabled Browsers</textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">Balisage: The Markup Conference 2013</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 6 - 9, 2013</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual">Forms technology for the World Wide Web has developed along two lines. The XForms
                strain has worked for a cleaner separation of concerns and supports more complex
                bindings between user interface and data. The HTML strain has focused on the user
                interface, defining new widgets and in HTML5 adding type definitions to form
                elements to enable native in-form validation. Some XForms implementations translate
                XForms elements into HTML widgets plus executable code. But HTML5 also defines new
                Javascript APIs browsers should support. The new facilities of HTML5-enabled
                browsers can be used to support XForms near-natively. We explain how.</textual></para></abstract><author class="po-record e8 e8"><personname class="po-record e9 e9"><firstname class="po-field e10 e10"><textual class="po-textual">Tobias</textual></firstname><surname class="po-field e11 e11"><textual class="po-textual">Niedl</textual></surname></personname><personblurb class="po-container e12 e12"><para class="po-block e13 e13"><textual class="po-textual">Has studied computer science at the TU München and works today as Software
                    Engineer in Munich. XML was one of his major field of study during his Master
                    course. The introduced XForms processor was developed as part of his Master
                    Thesis. </textual></para></personblurb><affiliation class="po-record e14 e14"><jobtitle class="po-field e15 e15"><textual class="po-textual">Software Engineer</textual></jobtitle></affiliation><email class="po-field e16 e16"><textual class="po-textual">niedl@in.tum.de</textual></email></author><author class="po-record e17 e17"><personname class="po-record e18 e18"><firstname class="po-field e19 e19"><textual class="po-textual">Anne</textual></firstname><surname class="po-field e20 e20"><textual class="po-textual">Brüggemann-Klein</textual></surname></personname><personblurb class="po-container e21 e21"><para class="po-block e22 e22"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></para></personblurb><affiliation class="po-record e23 e23"><jobtitle class="po-field e24 e24"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></jobtitle><orgname class="po-block e25 e25"><textual class="po-textual">Technische Universität München</textual></orgname></affiliation><email class="po-field e26 e26"><textual class="po-textual">brueggem@in.tum.de</textual></email></author><legalnotice class="po-container e27 e27"><para class="po-block e28 e28"><textual class="po-textual">Copyright ©  2013 by the authors. Used with permission.</textual></para></legalnotice><keywordset class="po-table e29 e29" role="author"><keyword class="po-field e30 e30"><textual class="po-textual">xf.js</textual></keyword><keyword class="po-field e31 e31"><textual class="po-textual">XForms</textual></keyword><keyword class="po-field e32 e32"><textual class="po-textual">HTML5</textual></keyword><keyword class="po-field e33 e33"><textual class="po-textual">Forms</textual></keyword></keywordset></info><section class="po-hcontainer e34 e34"><title class="po-block e35 e35"><textual class="po-textual">Introduction</textual></title><para class="po-block e36 e36"><textual class="po-textual">Forms offer a structured interface to users for entering or editing information which
            is eventually submitted to some system for further processing. Forms play a crucial role
            on the Web. Early form technology enables interactivity on the Web beyond hyperlinking:
            With forms in a Web browser, users can activate services on the Web, after setting
            service parameters, and they will receive service results in the browser in a
            request-response cycle. Another use case is data entry, with forms in a Web browser
            acting as masks for database input. Recently, Sperberg-McQueen in personal discussion
            and workshop announcements has framed forms on the Web as padded-cell editors that
            allow for specialized editing of XML documents and data in a Web browser in a safe and
            easy-to-learn manner.</textual></para><para class="po-block e37 e37"><textual class="po-textual">How has forms technology for the Web evolved over time? There are two lines of
            development:</textual></para><para class="po-block e38 e38"><textual class="po-textual">The HTML strain has focused on the user interface. The forms module of HTML defines a
            set of widget or control elements; an HTML form contains a number of widgets and a
            target URL to which form data are to be submitted. HTML browsers display form widgets,
            support data entry and encode form data, transferring them to the form's target URL when
            submission of a form is activated.</textual></para><para class="po-block e39 e39"><textual class="po-textual">The most recent version of HTML, namely HTML5, has expanded the set of widgets and has
            added type definitions to form elements, enabling native in-form data validation.</textual></para><para class="po-block e40 e40"><textual class="po-textual">The XForms strain has brought data into focus. XForms separates the data of a form
            from its user interface; form data in XForms are XML documents that can be loaded into a
            form, edited via widgets and submitted to external services. An XForms processor
            supports the binding between a form's widgets and data, handles form events and executes
            form actions including load and submit of data.</textual></para><para class="po-block e41 e41"><textual class="po-textual">XForms needs to be embedded into a host language, which most commonly is HTML.
            Nevertheless, in contrast to HTML forms, which are part of the W3C HTML Recommendation,
            Web browsers are not obliged to support XForms natively. Attempts to make XForms a true
            part of HTML in XHTML 2 have been abandoned by the W3C together with XHTML 2
            in favor of HTML5. In fact, none of the current mainstream browsers support XForms
            natively. Browser plug-ins come closest to native XForms support. There used to be a
            Firefox plug-in Mozilla XForms that has no developer's support any more and is no longer
            compatible with current versions of Firefox. FormsPlayer, a plug-in XForms processor for
            Internet Explorer, is also no longer supported. Current XForms implementations
            (XSLTForms, BetterForms, Orbeon Forms) translate an XForms form into an HTML form and
            JavaScript code. There are purely client-side, purely server-side and distributed
            architectures for both the translator and the form execution code.</textual></para><para class="po-block e42 e42"><textual class="po-textual">Tobias Niedl, the first author of this paper, has explored under supervision of the
            second author, as part of his Master Thesis at TU München, JavaScript and the new
            APIs that an HTML5-enabled Web browser provides as an implementation platform for an
            XForms processor. It turns out that the new facilities of HTML5-enabled browsers can be
            used to support XForms more natively. In a similar way as the plug-in solutions the code
            which executes the form is programmed directly, not generated. This removes a level of
            indirection in the interest of clarity and maintenance. But in contrast to plug-in
            solutions, it is platform independent, relying only on the APIs and the JavaScript that
            an HTML5-conformant browser supplies. For its reach, it capitalizes on the market power
            of the major browser vendors in the WHATWG</textual><footnote class="po-popup e43 e43"><para class="po-block e44 e44"><textual class="po-textual">Web Hypertext Application Technology Working Group
                        </textual><link class="po-inline e45 e45" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.whatwg.org/</textual></link></para></footnote><textual class="po-textual">, who stand behind HTML5.</textual></para><para class="po-block e46 e46"><textual class="po-textual">Tobias Niedl has designed and implemented an XForms processor on the platform of an
            HTML5-enabled Web browser. A JavaScript program called xf.js sets up some data
            structures when an HTML page with an embedded XForms form is loaded and acts as an
            XForms processor during the lifetime of the document in the browser, making use of APIs
            that an HTML5-enabled Web browser must support.</textual></para><para class="po-block e47 e47"><textual class="po-textual">The remainder of this paper is organized as follows: First, we derive the requirements
            for an XForms processor from the core features of XForms in </textual><xref class="po-milestone e48 e48" linkend="s1-requirements"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. Since our target implementation platforms are Web
            browsers, we relate XForms features and XForms processor requirements to HTML
            forms.</textual></para><para class="po-block e49 e49"><textual class="po-textual">In </textual><xref class="po-milestone e50 e50" linkend="s2-building-blocks"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> we discuss which building blocks an
            HTML5-enabled Web browser does or does not provide, in view of our requirements.</textual></para><para class="po-block e51 e51"><textual class="po-textual">Finally, we discuss in </textual><xref class="po-milestone e52 e52" linkend="s3-xf.js"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> core principles, architecture and
            limitations of our implementation, illustrated with examples and screenshots.</textual></para></section><section class="po-hcontainer e53 e53" xml:id="s1-requirements"><title class="po-block e54 e54"><textual class="po-textual">Requirements for an XForms processor</textual></title><para class="po-block e55 e55"><textual class="po-textual">Form systems share core functionality: A form offers a structured interface to users
            for entering or editing information which may then be further processed outside the
            form. In the realm of the Web, HTML has enabled data capture and interactivity beyond
            hyperlinking via forms since version 2. As its name implies, XForms leverages XML
            and related technologies. XForms extends HTML forms in providing essential innovations
            (cf. </textual><xref class="po-milestone e56 e56" linkend="XFormsEssentials"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">):</textual></para><itemizedlist class="po-table e57 e57"><listitem class="po-container e58 e58"><para class="po-block e59 e59"><emphasis class="po-inline e60 e60" role="bold"><textual class="po-textual">Data model:</textual></emphasis><textual class="po-textual"> An XForms form holds its data in
                    an explicitly defined, XML encoded data container, which is called the form's
                    data model. A key point of XForms is that a form's data model is independent of
                    its user interface.</textual></para></listitem><listitem class="po-container e61 e61"><para class="po-block e62 e62"><emphasis class="po-inline e63 e63" role="bold"><textual class="po-textual">Data types:</textual></emphasis><textual class="po-textual"> Textual values in the data model
                    can be declared to be of specific data types; XML Schema's predefined or
                    user-defined data types (simple types) may be used.</textual></para></listitem><listitem class="po-container e64 e64"><para class="po-block e65 e65"><emphasis class="po-inline e66 e66" role="bold"><textual class="po-textual">Events:</textual></emphasis><textual class="po-textual"> XForms builds on the W3C
                    Recommendation XML Events. Form events, their targets and associated actions are
                    declaratively represented by XML elements and attributes.</textual></para></listitem><listitem class="po-container e67 e67"><para class="po-block e68 e68"><emphasis class="po-inline e69 e69" role="bold"><textual class="po-textual">Widgets:</textual></emphasis><textual class="po-textual"> XForms defines a rich set of widgets
                    that has only recently been matched by the newest version of HTML, namely
                    HTML5.</textual></para></listitem><listitem class="po-container e70 e70"><para class="po-block e71 e71"><emphasis class="po-inline e72 e72" role="bold"><textual class="po-textual">Repetitions:</textual></emphasis><textual class="po-textual"> XForms has a number of container
                    form controls, for repetitions, groupings and switching. XForms is the only
                    forms technology on the Web that natively supports repeating groups of widgets
                    under action control.</textual></para></listitem></itemizedlist><para class="po-block e73 e73"><textual class="po-textual">These innovations, whose value is discussed elsewhere
            </textual><xref class="po-milestone e74 e74" linkend="w3.xforms"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><xref class="po-milestone e75 e75" linkend="XFormsEssentials"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><xref class="po-milestone e76 e76" linkend="FormsNG"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">
            imply requirements for any XForms processor. We discuss these
            implications in detail below, contrasting them with the lesser requirements of HTML
            forms.</textual></para><section class="po-hcontainer e77 e77"><title class="po-block e78 e78"><textual class="po-textual">Data model</textual></title><para class="po-block e79 e79"><textual class="po-textual">Form systems deal with data that initialize a form, are edited using the form and
                are eventually submitted to external systems for further processing. </textual></para><para class="po-block e80 e80"><textual class="po-textual">XForms distinguishes between a data model, which carries the form's information,
                and the user interface, which makes the data model accessible to an XForms user. On
                submission, the data model (or a part of it) is transferred to an external service.
                The data model itself is encoded in XML. It can be seen as a structure of nodes
                carrying data (text nodes and attribute nodes in the XDM data model for XML).</textual></para><para class="po-block e81 e81"><textual class="po-textual">XForms facilitates editing of data in the model in two alternative ways: The
                obvious first possibility is to use widget elements that are connected to nodes in
                the data model. Changing a widget's value in the user interface changes the value of
                the corresponding node in the model. The XForms processor propagates value changes
                to all widgets that might be connected to the same node, in Model-View-Controller
                fashion. The second and less obvious possibility to change the data model is by
                action elements which act as event handlers for form events. An action element is
                connected to a node (or a set of nodes) in the data model in the same way as a
                widget element. In both cases the connection to a node in the model, called a
                reference, is expressed by an XPath expression.</textual></para><para class="po-block e82 e82"><textual class="po-textual">In contrast, HTML forms do not have explicit, separate data models. The model of
                an HTML form is implicitly defined by the widget elements in the form. It is a flat
                set of name-value pairs, implicitly ordered by the sequence of the widgets in the
                form. The model is generated on the fly when the form is submitted.</textual></para><para class="po-block e83 e83"><textual class="po-textual">Hence, HTML forms do not separate data and input facilities the way XForms does.
                In addition, further processing of form data that originate from an HTML form
                usually necessitates data translation, whereas XForms data can be directly processed
                using XML technologies as in the zero-translation XRX</textual><footnote class="po-popup e84 e84"><para class="po-block e85 e85"><textual class="po-textual">XForms REST XQuery</textual></para></footnote><textual class="po-textual"> architecture.</textual></para><para class="po-block e86 e86"><textual class="po-textual">It is immediately apparent that an XForms processor needs to support building,
                changing and serializing of XML structures and dynamic evaluation of XPath
                expressions.</textual></para></section><section class="po-hcontainer e87 e87"><title class="po-block e88 e88"><textual class="po-textual">Data types and data model validation</textual></title><para class="po-block e89 e89"><textual class="po-textual">Form systems that support data types can offer type-specific data entry support
                such as date pickers and data validation without custom scripting. XForms offers a
                small number of proprietary data types and supports the built-in simple types of XML
                Schema. On top of that, the data model of a form can be constrained by an external
                schema with XML Schema custom data types (simple types) and also complex types. This
                ensures that not only updates to data values but also changes in the structure of
                the data model via actions are schema conformant.</textual></para><para class="po-block e90 e90"><textual class="po-textual">Earlier versions of HTML forms did not provide type support. All data values were
                considered as text, for which custom validation rules could be scripted. HTML5 knows
                a small number of pre-defined data types, which can be customized declaratively by a
                few parameters and regular expressions, similar to restricting XML Schema simple
                types with facets. HTML5 data types are validated in conformant browsers. This is
                the big advantage of HTML5 over earlier versions of HTML with respect to
                forms.</textual></para><para class="po-block e91 e91"><textual class="po-textual">A fully conformant XForms processor must be able to do XML Schema validation
                dynamically, also selectively for parts of the document.</textual></para></section><section class="po-hcontainer e92 e92"><title class="po-block e93 e93"><textual class="po-textual">Events</textual></title><para class="po-block e94 e94"><textual class="po-textual">Form systems handle events or signals that are activated in a form internally or
                under user control. For example, events can cause parts of a form to expand or
                collapse or value changes to be propagated to formulas that need to be re-evaluated,
                spreadsheet-like.</textual></para><para class="po-block e95 e95"><textual class="po-textual">As to events, both HTML forms and XForms are based on the DOM Events W3C Recommendation</textual><footnote class="po-popup e96 e96"><para class="po-block e97 e97"><link class="po-inline e98 e98" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/DOM-Level-3-Events/</textual></link></para></footnote><textual class="po-textual">. DOM Events defines the structure of and processing rules for browser
                events. XForms goes beyond HTML forms in that it utilizes an XML encoding layer for
                DOM events, according to the W3C Recommendation XML Events</textual><footnote class="po-popup e99 e99"><para class="po-block e100 e100"><link class="po-inline e101 e101" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/2003/REC-xml-events-20031014/</textual></link></para></footnote><textual class="po-textual">.</textual></para><para class="po-block e102 e102"><textual class="po-textual">A form reacts to an event by executing an action. In HTML forms, actions are
                custom-programmed pieces of script, often JavaScript; actions are associated with
                events by HTML-specific attributes (such as </textual><code class="po-atom e103 e103"><textual class="po-textual">onclick</textual></code><textual class="po-textual">) or by registration
                mechanisms that are specific to the scripting language in use. In contrast, XForms
                has predefined actions (such as </textual><code class="po-atom e104 e104"><textual class="po-textual">message</textual></code><textual class="po-textual">, </textual><code class="po-atom e105 e105"><textual class="po-textual">setvalue</textual></code><textual class="po-textual"> or
                    </textual><code class="po-atom e106 e106"><textual class="po-textual">delete</textual></code><textual class="po-textual">). XForms also specifies events beyond DOM Events. Most
                importantly, it uses the standardized XML encoding of XML Events to associate events
                with actions. XML Events defines how to encode event-related information in XML.
                With XML Events and XForms' predefined actions, the processing of specific events
                can be defined declaratively, reducing the need for scripting.</textual></para><para class="po-block e107 e107"><textual class="po-textual">Consequently, an XForms processor needs to implement the predefined XForms actions
                and specific XForms events, and it must be able to interprete XML Event definitions,
                in addition to supporting DOM events and their processing model.</textual></para></section><section class="po-hcontainer e108 e108" xml:id="innovations.widgets"><title class="po-block e109 e109"><textual class="po-textual">Widgets</textual></title><para class="po-block e110 e110"><textual class="po-textual">The most prominent feature of a form system is the set of widgets that is
                available for data entry. In this respect, XForms and HTML5 are basically
                equivalent, while earlier versions of HTML are slightly weaker [</textual><xref class="po-milestone e111 e111" linkend="w3.pemberton"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].</textual></para></section><section class="po-hcontainer e112 e112"><title class="po-block e113 e113"><textual class="po-textual">Repetitions</textual></title><para class="po-block e114 e114"><textual class="po-textual">Forms need to display repeated data that can be manipulated with actions, such as
                repeating rows in a database table view. XForms provides the user-interface element
                    </textual><code class="po-atom e115 e115"><textual class="po-textual">repeat</textual></code><textual class="po-textual">, which contains a template of inner widgets that will be
                instantiated for each portion of the block of data in the form's data that the
                    </textual><code class="po-atom e116 e116"><textual class="po-textual">repeat</textual></code><textual class="po-textual"> is connected with. Early versions of HTML do not support
                repetitions natively. Interestingly enough, repetition functionality has been a part
                of Webforms 2</textual><footnote class="po-popup e117 e117"><para class="po-block e118 e118"><link class="po-inline e119 e119" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.whatwg.org/specs/web-forms/current-work/</textual></link></para></footnote><textual class="po-textual">, a tributary to HTML5 that has been inspired by XForms, but has not made
                it into HTML5. Hence, no version of HTML forms supports repetitions, but XForms
                processors must support the </textual><code class="po-atom e120 e120"><textual class="po-textual">repeat</textual></code><textual class="po-textual"> element.</textual></para><para class="po-block e121 e121"><textual class="po-textual">To summarize, an XForms processor needs to satisfy the following requirements
                beyond those of a simple HTML forms processor:</textual></para><itemizedlist class="po-table e122 e122"><listitem class="po-container e123 e123"><para class="po-block e124 e124"><textual class="po-textual">Handling of XML data, including load and transmit.</textual></para></listitem><listitem class="po-container e125 e125"><para class="po-block e126 e126"><textual class="po-textual">Dynamic evaluation of XPath expressions.</textual></para></listitem><listitem class="po-container e127 e127"><para class="po-block e128 e128"><textual class="po-textual">Dynamic evaluation of (parts of) XML data against XML Schema.</textual></para></listitem><listitem class="po-container e129 e129"><para class="po-block e130 e130"><textual class="po-textual">Support for XForms widgets.</textual></para></listitem><listitem class="po-container e131 e131"><para class="po-block e132 e132"><textual class="po-textual">Support for the </textual><code class="po-atom e133 e133"><textual class="po-textual">repeat</textual></code><textual class="po-textual"> element.</textual></para></listitem><listitem class="po-container e134 e134"><para class="po-block e135 e135"><textual class="po-textual">Implementation of XForms actions.</textual></para></listitem><listitem class="po-container e136 e136"><para class="po-block e137 e137"><textual class="po-textual">Support for XForms events.</textual></para></listitem><listitem class="po-container e138 e138"><para class="po-block e139 e139"><textual class="po-textual">Interpretation of XML Event definitions.</textual></para></listitem></itemizedlist></section></section><section class="po-hcontainer e140 e140" xml:id="s2-building-blocks"><title class="po-block e141 e141"><textual class="po-textual">XForms building blocks on a Web browser</textual></title><para class="po-block e142 e142"><textual class="po-textual">The implementation platform for our XForms processor xf.js is the HTML5-enabled
            browser. Referring back to the requirements for an XForms processor, we discuss in this
            section, which building blocks of an XForms processor an HTML5-enabled browser provides
            and what needs to be built in xf.js from scratch.</textual></para><section class="po-hcontainer e143 e143"><title class="po-block e144 e144"><textual class="po-textual">XML</textual></title><para class="po-block e145 e145"><textual class="po-textual">Today's Web browsers can parse XML files and translate them into data structures
                of a higher level of abstraction. Web browsers make these data structures available
                to programming languages via the standardized Document Object Model (DOM) interface.
                Furthermore, new DOM objects can be created in a Web browser under JavaScript
                control. JavaScript programs that run in the browser can read, modify and extend XML
                data in the browser via DOM. HTML5-enabled browsers support an advanced version of
                DOM that is specified by WHATWG and also addresses parsing and serialization of XML
                documents to and from DOM</textual><footnote class="po-popup e146 e146"><para class="po-block e147 e147"><link class="po-inline e148 e148" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://domparsing.spec.whatwg.org/</textual></link></para></footnote><textual class="po-textual">. The XMLHttpRequest specification</textual><footnote class="po-popup e149 e149"><para class="po-block e150 e150"><link class="po-inline e151 e151" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/XMLHttpRequest/</textual></link></para></footnote><textual class="po-textual"> enables modern Web browsers to transfer DOM objects or XML-encoded
                strings.</textual></para></section><section class="po-hcontainer e152 e152"><title class="po-block e153 e153"><textual class="po-textual">XPath</textual></title><para class="po-block e154 e154"><textual class="po-textual">With Document Object Model (DOM) Level 3 XPath Specification</textual><footnote class="po-popup e155 e155"><para class="po-block e156 e156"><link class="po-inline e157 e157" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/DOM-Level-3-XPath/</textual></link></para></footnote><textual class="po-textual">, W3C defines an interface to query a DOM object with an XPath 1.0
                expression. The interface provides, among others, the following two methods:</textual></para><itemizedlist class="po-table e158 e158"><listitem class="po-container e159 e159"><para class="po-block e160 e160"><textual class="po-textual">The method </textual><code class="po-atom e161 e161"><textual class="po-textual">evaluate()</textual></code><textual class="po-textual"> evaluates an XPath expression against a
                        DOM node.</textual></para></listitem><listitem class="po-container e162 e162"><para class="po-block e163 e163"><textual class="po-textual">The method </textual><code class="po-atom e164 e164"><textual class="po-textual">createNSResolver()</textual></code><textual class="po-textual"> generates a namespace resolver
                        object for all namespace definitions that are in scope at a specific DOM
                        node.</textual></para></listitem></itemizedlist><para class="po-block e165 e165"><textual class="po-textual">Modern Web browsers support this specification and its JavaScript binding.</textual></para></section><section class="po-hcontainer e166 e166"><title class="po-block e167 e167"><textual class="po-textual">XML Events and XML Schema</textual></title><para class="po-block e168 e168"><textual class="po-textual">Current Web browsers support neither XML Events nor XML Schema.</textual></para></section><section class="po-hcontainer e169 e169"><title class="po-block e170 e170"><textual class="po-textual">Documents and XML submission</textual></title><para class="po-block e171 e171"><textual class="po-textual">In a Web browser new DOM document objects can be created on the fly using
                JavaScript. As XForms requires to handle each data model as an independent document,
                browsers meet the requirements of XForms here. </textual></para><para class="po-block e172 e172"><textual class="po-textual">A data model (or rather the document representing it) can be submitted as a XML
                string according to the XForms specification. Most Web browsers implement the XMLHttpRequest</textual><footnote class="po-popup e173 e173"><para class="po-block e174 e174"><link class="po-inline e175 e175" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/XMLHttpRequest/</textual></link></para></footnote><textual class="po-textual"> interface which provides (a)synchronous communication to a Web server
                out of a JavaScript program. The data to be sent can be a String, a Document object
                or another type according to XMLHttpRequest specification. As each data model is
                handled as an independent DOM Document, and the XMLHttpRequest specification enables
                a browser to transfer such a Document without conversion, the combination of
                Document and XMLHttpRequest fits well for the mentioned XForms requirements.</textual></para></section><section class="po-hcontainer e176 e176"><title class="po-block e177 e177"><textual class="po-textual">Widgets</textual></title><para class="po-block e178 e178"><textual class="po-textual">Widgets in XForms and HTML5 have the same functional range but different names.
                Thus, an XForms processor can utilize HTML5 widgets after mapping, as shown in the
                following table. It can also utilize the data entry support and validation
                facilities of an HTML5-enabled browser, compensating at least partially for lacking
                XML Schema support.</textual></para><table class="po-container e179 e179" xml:id="widgets-mapping"><col align="left" class="po-meta e180 e180" span="1" valign="top"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></col><col align="left" class="po-meta e181 e181" span="1" valign="top"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></col><col align="left" class="po-meta e182 e182" span="1" valign="top"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></col><thead class="po-container e183 e183"><tr class="po-table e184 e184" valign="top"><th class="po-field e185 e185"><textual class="po-textual">XForms</textual></th><th class="po-field e186 e186"><textual class="po-textual">HTML5</textual></th><th class="po-field e187 e187"><textual class="po-textual">Details</textual></th></tr></thead><tbody class="po-table e188 e188"><tr class="po-table e189 e189"><td class="po-block e190 e190"><code class="po-atom e191 e191"><textual class="po-textual">input</textual></code></td><td class="po-block e192 e192"><code class="po-atom e193 e193"><textual class="po-textual">input</textual></code></td><td class="po-block e194 e194"><textual class="po-textual">At default the XForms input widget </textual><quote class="po-inline e195 e195"><textual class="po-textual">enables free-form data
                                entry</textual></quote><textual class="po-textual"> (cf. </textual><xref class="po-milestone e196 e196" linkend="w3.xforms"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">). The same is
                            provided in HTML5 when the type attribute is not set or set to </textual><emphasis class="po-inline e197 e197" role="ital"><textual class="po-textual">text</textual></emphasis><textual class="po-textual">.</textual></td></tr><tr class="po-table e198 e198"><td class="po-block e199 e199"><code class="po-atom e200 e200"><textual class="po-textual">output</textual></code></td><td class="po-block e201 e201"><code class="po-atom e202 e202"><textual class="po-textual">output</textual></code></td><td class="po-block e203 e203"><textual class="po-textual">-</textual></td></tr><tr class="po-table e204 e204"><td class="po-block e205 e205"><code class="po-atom e206 e206"><textual class="po-textual">label</textual></code></td><td class="po-block e207 e207"><code class="po-atom e208 e208"><textual class="po-textual">label</textual></code></td><td class="po-block e209 e209"><textual class="po-textual">-</textual></td></tr><tr class="po-table e210 e210"><td class="po-block e211 e211"><code class="po-atom e212 e212"><textual class="po-textual">trigger</textual></code></td><td class="po-block e213 e213"><code class="po-atom e214 e214"><textual class="po-textual">input</textual></code><textual class="po-textual">, </textual><code class="po-atom e215 e215"><textual class="po-textual">button</textual></code></td><td class="po-block e216 e216"><textual class="po-textual">In HTML5: The type attribute on the </textual><code class="po-atom e217 e217"><textual class="po-textual">input</textual></code><textual class="po-textual"> element has to be
                            set to </textual><emphasis class="po-inline e218 e218" role="ital"><textual class="po-textual">button</textual></emphasis><textual class="po-textual">.</textual></td></tr><tr class="po-table e219 e219"><td class="po-block e220 e220"><code class="po-atom e221 e221"><textual class="po-textual">submit</textual></code></td><td class="po-block e222 e222"><code class="po-atom e223 e223"><textual class="po-textual">input</textual></code></td><td class="po-block e224 e224"><textual class="po-textual">In HTML5: The type attribute has to be set to </textual><emphasis class="po-inline e225 e225" role="ital"><textual class="po-textual">submit</textual></emphasis><textual class="po-textual">.</textual></td></tr><tr class="po-table e226 e226"><td class="po-block e227 e227"><code class="po-atom e228 e228"><textual class="po-textual">secret</textual></code></td><td class="po-block e229 e229"><code class="po-atom e230 e230"><textual class="po-textual">input</textual></code></td><td class="po-block e231 e231"><textual class="po-textual">In HTML5: The type attribute has to be set to </textual><emphasis class="po-inline e232 e232" role="ital"><textual class="po-textual">password</textual></emphasis><textual class="po-textual">.</textual></td></tr><tr class="po-table e233 e233"><td class="po-block e234 e234"><code class="po-atom e235 e235"><textual class="po-textual">textarea</textual></code></td><td class="po-block e236 e236"><code class="po-atom e237 e237"><textual class="po-textual">textarea</textual></code></td><td class="po-block e238 e238"><textual class="po-textual">-</textual></td></tr><tr class="po-table e239 e239"><td class="po-block e240 e240"><code class="po-atom e241 e241"><textual class="po-textual">upload</textual></code></td><td class="po-block e242 e242"><code class="po-atom e243 e243"><textual class="po-textual">input</textual></code></td><td class="po-block e244 e244"><textual class="po-textual">In HTML5: The type attribute has to be set to </textual><emphasis class="po-inline e245 e245" role="ital"><textual class="po-textual">file</textual></emphasis><textual class="po-textual">. But see restrictions in xf.js below.</textual></td></tr><tr class="po-table e246 e246"><td class="po-block e247 e247"><code class="po-atom e248 e248"><textual class="po-textual">range</textual></code></td><td class="po-block e249 e249"><code class="po-atom e250 e250"><textual class="po-textual">input</textual></code></td><td class="po-block e251 e251"><textual class="po-textual">This is the only widget that needs HTML5 beyond earlier HTML versions.
                            In HTML5: The type attribute has to be set to </textual><emphasis class="po-inline e252 e252" role="ital"><textual class="po-textual">range</textual></emphasis><textual class="po-textual">. The values of additional attributes can be mapped
                            as follows: </textual><itemizedlist class="po-table e253 e253"><listitem class="po-container e254 e254"><para class="po-block e255 e255"><emphasis class="po-inline e256 e256" role="ital"><textual class="po-textual">start</textual></emphasis><textual class="po-textual"> (HTML5) to
                                            </textual><emphasis class="po-inline e257 e257" role="ital"><textual class="po-textual">min</textual></emphasis><textual class="po-textual"> (XForms)</textual></para></listitem><listitem class="po-container e258 e258"><para class="po-block e259 e259"><emphasis class="po-inline e260 e260" role="ital"><textual class="po-textual">end</textual></emphasis><textual class="po-textual"> (HTML5) to </textual><emphasis class="po-inline e261 e261" role="ital"><textual class="po-textual">max</textual></emphasis><textual class="po-textual"> (XForms)</textual></para></listitem><listitem class="po-container e262 e262"><para class="po-block e263 e263"><emphasis class="po-inline e264 e264" role="ital"><textual class="po-textual">step</textual></emphasis><textual class="po-textual"> (HTML5) to </textual><emphasis class="po-inline e265 e265" role="ital"><textual class="po-textual">step</textual></emphasis><textual class="po-textual"> (XForms)</textual></para></listitem></itemizedlist><textual class="po-textual">
                        </textual></td></tr><tr class="po-table e266 e266"><td class="po-block e267 e267"><code class="po-atom e268 e268"><textual class="po-textual">select1</textual></code><textual class="po-textual"> (full)</textual></td><td class="po-block e269 e269"><code class="po-atom e270 e270"><textual class="po-textual">input</textual></code></td><td class="po-block e271 e271"><textual class="po-textual">In HTML5: The type attribute has to be set to </textual><emphasis class="po-inline e272 e272" role="ital"><textual class="po-textual">radio</textual></emphasis><textual class="po-textual">. In XForms there is one </textual><code class="po-atom e273 e273"><textual class="po-textual">select1</textual></code><textual class="po-textual">
                            containing a list of options. In HTML5 there must be one
                                </textual><code class="po-atom e274 e274"><textual class="po-textual">input</textual></code><textual class="po-textual"> element per option.</textual></td></tr><tr class="po-table e275 e275"><td class="po-block e276 e276"><code class="po-atom e277 e277"><textual class="po-textual">select1</textual></code><textual class="po-textual"> (compact)</textual></td><td class="po-block e278 e278"><code class="po-atom e279 e279"><textual class="po-textual">option</textual></code></td><td class="po-block e280 e280"><textual class="po-textual">In HTML5: The size attribute has to be set to a value greater than "1".
                            A browser will display it as a listbox.</textual></td></tr><tr class="po-table e281 e281"><td class="po-block e282 e282"><code class="po-atom e283 e283"><textual class="po-textual">select1</textual></code><textual class="po-textual"> (minimal)</textual></td><td class="po-block e284 e284"><code class="po-atom e285 e285"><textual class="po-textual">option</textual></code></td><td class="po-block e286 e286"><textual class="po-textual">In HTML5: The size attribute has to be set to "1". A browser will
                            display it as a drop down selection box.</textual></td></tr><tr class="po-table e287 e287"><td class="po-block e288 e288"><code class="po-atom e289 e289"><textual class="po-textual">select</textual></code><textual class="po-textual"> (full)</textual></td><td class="po-block e290 e290"><code class="po-atom e291 e291"><textual class="po-textual">input</textual></code></td><td class="po-block e292 e292"><textual class="po-textual">In HTML5: The type attribute has to be set to </textual><emphasis class="po-inline e293 e293" role="ital"><textual class="po-textual">checkbox</textual></emphasis><textual class="po-textual">. In XForms there is one </textual><code class="po-atom e294 e294"><textual class="po-textual">select</textual></code><textual class="po-textual">
                            containing a list of options. In HTML5 there must be one
                                </textual><code class="po-atom e295 e295"><textual class="po-textual">input</textual></code><textual class="po-textual"> element per option.</textual></td></tr><tr class="po-table e296 e296"><td class="po-block e297 e297"><code class="po-atom e298 e298"><textual class="po-textual">select</textual></code><textual class="po-textual"> (compact)</textual></td><td class="po-block e299 e299"><code class="po-atom e300 e300"><textual class="po-textual">option</textual></code></td><td class="po-block e301 e301"><textual class="po-textual">In HTML5: The size attribute has to be set to a value greater than "1".
                            Additional the multiple attribute has to be set. </textual></td></tr><tr class="po-table e302 e302"><td class="po-block e303 e303"><code class="po-atom e304 e304"><textual class="po-textual">select</textual></code><textual class="po-textual"> (minimal)</textual></td><td class="po-block e305 e305"><code class="po-atom e306 e306"><textual class="po-textual">option</textual></code></td><td class="po-block e307 e307"><textual class="po-textual">In HTML5: The size attribute has to be set "1". Additional the multiple
                            attribute has to be set.</textual></td></tr></tbody></table></section><section class="po-hcontainer e308 e308"><title class="po-block e309 e309"><textual class="po-textual">Repetitions</textual></title><para class="po-block e310 e310"><textual class="po-textual">HTML5-enabled browsers have no native support for repetitions in forms.</textual></para><para class="po-block e311 e311"><textual class="po-textual">In conclusion, on the positive side, HTML5-enabled Web browsers have a good
                support for XML via the DOM interface. An XML document is made accessible through a
                DOM interface and nodes in the DOM can be accessed using XPath expressions. New DOM
                document objects can be created and edited. Browsers also provide widget elements
                which cover the functionality required by XForms.</textual></para><para class="po-block e312 e312"><textual class="po-textual">On the negative side, even HTML5-enabled Web browsers do not support XML Events
                nor XML Schema nor repetitions in the user interface. An XForms processor running on
                the HTML5-enabled bowser platform either has to implement its own support for these
                technologies or has to neglect them, giving up some required functionality.</textual></para></section></section><section class="po-hcontainer e313 e313" xml:id="s3-xf.js"><title class="po-block e314 e314"><textual class="po-textual">The XForms processor xf.js</textual></title><para class="po-block e315 e315"><textual class="po-textual">This section describes the implementation of the prototypical pure JavaScript XForms
            processor called xf.js. The goal of the implementation was not to provide full support
            for XForms but to evaluate the capabilities of Web browsers with HTML5 as platform for a
            XForms processor.</textual></para><section class="po-hcontainer e316 e316"><title class="po-block e317 e317"><textual class="po-textual">Principles</textual></title><para class="po-block e318 e318"><textual class="po-textual">As the goal was to discover browser capabilities, an easy to handle architecture
                was chosen. The xf.js processor implements a class for every supported XForms
                element (except the </textual><code class="po-atom e319 e319"><textual class="po-textual">label</textual></code><textual class="po-textual"> element). These classes provide methods and
                class members for the specified attributes of the corresponding XForms element. When
                an object is instantiated, these members are initialized with the default values
                according to the XForms specification.</textual></para><para class="po-block e320 e320"><textual class="po-textual">As Web browsers do not know the semantics of XForms widget elements, the DOM nodes
                of these elements are replaced by their HTML5 counterparts as shown in </textual><xref class="po-milestone e321 e321" linkend="widgets-mapping"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><para class="po-block e322 e322"><textual class="po-textual">The initialization of all objects, their relationships and the replacement of the
                widgets is done in a general parsing function, which is called after the browser has
                finished loading the document. </textual></para></section><section class="po-hcontainer e323 e323"><title class="po-block e324 e324"><textual class="po-textual">Architecture</textual></title><para class="po-block e325 e325"><textual class="po-textual">The following section introduces the architecture of the xf.js processor by
                introducing the class model.</textual></para><para class="po-block e326 e326"><textual class="po-textual">The following image shows the underlaying class model of the xf.js processor. For
                simplicity the classes in the image do not contain method identifiers.</textual></para><figure class="po-container e327 e327" xml:id="class-model"><title class="po-block e328 e328"><textual class="po-textual">The class model of the xf.js processor</textual></title><mediaobject class="po-container e329 e329"><imageobject class="po-container e330 e330"><imagedata class="po-meta e331 e331" fileref="../../../vol10/graphics/Niedl01/Niedl01-001.png" format="png" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><para class="po-block e332 e332"><textual class="po-textual">The functionality of the more important classes is described in the following
                    sections.</textual></para></figure><section class="po-hcontainer e333 e333"><title class="po-block e334 e334"><textual class="po-textual">xfModel class</textual></title><para class="po-block e335 e335"><textual class="po-textual">The core of the processor is the xfModel object which belongs to a
                        </textual><code class="po-atom e336 e336"><textual class="po-textual">model</textual></code><textual class="po-textual"> element in the document. The object has connections to
                    all objects of elements which are related to the </textual><code class="po-atom e337 e337"><textual class="po-textual">model</textual></code><textual class="po-textual"> node in the
                    document. This relations can be expressed in different ways. Child elements of
                    the </textual><code class="po-atom e338 e338"><textual class="po-textual">model</textual></code><textual class="po-textual"> element are related in a direct way (e.g.
                        </textual><code class="po-atom e339 e339"><textual class="po-textual">instance</textual></code><textual class="po-textual"> or </textual><code class="po-atom e340 e340"><textual class="po-textual">bind</textual></code><textual class="po-textual">). Widget and action elements can
                    point to a </textual><code class="po-atom e341 e341"><textual class="po-textual">model</textual></code><textual class="po-textual"> element by usage of the </textual><emphasis class="po-inline e342 e342" role="ital"><textual class="po-textual">model</textual></emphasis><textual class="po-textual"> attribute which contains the ID of a corresponding
                        </textual><code class="po-atom e343 e343"><textual class="po-textual">model</textual></code><textual class="po-textual"> element. Finally Widget and action elements can be
                    implicit related to the first </textual><code class="po-atom e344 e344"><textual class="po-textual">model</textual></code><textual class="po-textual"> element defined in the
                    document, if they have no </textual><emphasis class="po-inline e345 e345"><textual class="po-textual">model</textual></emphasis><textual class="po-textual"> attribute defined. </textual></para><para class="po-block e346 e346"><textual class="po-textual">The xfModel class holds a reference to the DOM node of the corresponding
                        </textual><code class="po-atom e347 e347"><textual class="po-textual">model</textual></code><textual class="po-textual"> element and to the HTML5 </textual><code class="po-atom e348 e348"><textual class="po-textual">form</textual></code><textual class="po-textual"> element which
                    is generated during the parsing process. </textual></para><para class="po-block e349 e349"><textual class="po-textual">The class also provides methods for operations on the model. The most
                    important method is evaluate(), a central interface to evaluate XPath
                    expressions concerning the data models hold by dedicated </textual><code class="po-atom e350 e350"><textual class="po-textual">instance</textual></code><textual class="po-textual">
                    elements. XForms augments the XPath specification with its own functions. These
                    XForms specific functions are of course not provided by the Web browser's XPath
                    interface. Thus the xf.js processor has to handle them by itself and can not
                    pass it through. Therefore a central evaluation method provides a good place to
                    implement these additional XForms functions. The processor supports the
                    additional functions instance() and index(). The evaluation method is also a
                    well fitting place for another XPath related feature which is still not
                    implemented: the implicit data model. If a node in the data model is referenced,
                    which does not exist, it is created by the XForms processor according to the
                    specification. The XPath interface of Web browsers does not provide such
                    functionality. But the evaluate method of xfModel could easily provide this
                    feature. If a XPath evaluation does not return any value, the next step should
                    be to check on every part of that expression if a corresponding node exists. If
                    this is not the case, the corresponding node could be generated by using the DOM
                    interface.</textual></para><para class="po-block e351 e351"><textual class="po-textual">For each xfModel object an HTML5 </textual><code class="po-atom e352 e352"><textual class="po-textual">form</textual></code><textual class="po-textual"> element is created in the
                    document. This form is an anchor to all HTML5 widgets which are created to
                    replace the XForms widget elements. Each xfModel object holds a reference to its
                        </textual><code class="po-atom e353 e353"><textual class="po-textual">form</textual></code><textual class="po-textual"> element.</textual></para></section><section class="po-hcontainer e354 e354"><title class="po-block e355 e355"><textual class="po-textual">xfInstance class</textual></title><para class="po-block e356 e356"><textual class="po-textual">The xfInstance class is used to handle </textual><code class="po-atom e357 e357"><textual class="po-textual">instance</textual></code><textual class="po-textual"> elements which
                    carry the data model of a form. In the processor one xfInstance object is
                    generated for every </textual><code class="po-atom e358 e358"><textual class="po-textual">instance</textual></code><textual class="po-textual"> element. At the current state of the
                    implementation each xfInstance object holds a reference to the DOM node of the
                        </textual><code class="po-atom e359 e359"><textual class="po-textual">instance</textual></code><textual class="po-textual"> element to perform read and write operations on the
                    data model. The XForms specification requests to handle all data models as
                    independent documents. Thus operations should not take place in the main
                    document itself. This feature would also be possible in a Web browser based
                    XForms implementation, as browsers implement the createDocument() interface as
                    defined in DOM Level 3 specification</textual><footnote class="po-popup e360 e360"><para class="po-block e361 e361"><link class="po-inline e362 e362" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/DOM-Level-3-Core/</textual></link></para></footnote><textual class="po-textual">. Thus a new XML document could be created and filled with the nodes
                    defined inside the instance node. The xfInstance class provides also methods to
                    serialize the data model. For the submission of the data model as XML, the
                    implementation utilizes the XMLSerializer</textual><footnote class="po-popup e363 e363"><para class="po-block e364 e364"><link class="po-inline e365 e365" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://domparsing.spec.whatwg.org/#the-xmlserializer-interface</textual></link></para></footnote><textual class="po-textual"> to generate a XML string. For submission as name-value pairs the
                    getDataAsHashMap() method flattens the model data down as specified by XForms
                    before submission.</textual></para></section><section class="po-hcontainer e366 e366"><title class="po-block e367 e367"><textual class="po-textual">xfSubmission and xfWidgetSubmit</textual></title><para class="po-block e368 e368"><textual class="po-textual">A xfSubmission object is responsible for the transmission of a data model.
                    Each xfSubmission object is bidirectional attached to one xfModel object and
                    thus has indirect access to the xfInstance objects holding the data to send. The
                    main method is doSubmit() which performs the submission according to the
                    parameters set. A data model can be submitted as XML document, or as name-value
                    pairs according to HTML forms. The submission can be done using the methods
                        </textual><emphasis class="po-inline e369 e369" role="ital"><textual class="po-textual">POST</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e370 e370" role="ital"><textual class="po-textual">GET</textual></emphasis><textual class="po-textual">,
                        </textual><emphasis class="po-inline e371 e371" role="ital"><textual class="po-textual">PUT</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e372 e372" role="ital"><textual class="po-textual">DELETE</textual></emphasis><textual class="po-textual"> or </textual><emphasis class="po-inline e373 e373" role="ital"><textual class="po-textual">URLENCODED-POST</textual></emphasis><textual class="po-textual"> as
                    defined by XForms. To control which part of a data model should be submitted and
                    which one should be replaced the processor implements the attributes </textual><emphasis class="po-inline e374 e374" role="ital"><textual class="po-textual">ref</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e375 e375" role="ital"><textual class="po-textual">replace</textual></emphasis><textual class="po-textual"> and
                        </textual><emphasis class="po-inline e376 e376" role="ital"><textual class="po-textual">targetref</textual></emphasis><textual class="po-textual">.</textual></para><para class="po-block e377 e377"><textual class="po-textual">To start a submission a xfWidgetSubmit object is needed which is connected to
                    a xfSubmission object. The object is created for a XForms </textual><code class="po-atom e378 e378"><textual class="po-textual">submit</textual></code><textual class="po-textual">
                    element and represented to the user as HTML5 button. When the user clicks the
                    button, the event of that click is handled at the xfWidgetSubmit object which
                    calls the doSubmit() method of the connected xfSubmission object.</textual></para></section><section class="po-hcontainer e379 e379"><title class="po-block e380 e380"><textual class="po-textual">xfBind</textual></title><para class="po-block e381 e381"><textual class="po-textual">The xfBind class represents the XForms </textual><code class="po-atom e382 e382"><textual class="po-textual">bind</textual></code><textual class="po-textual"> element. As XML
                    Schema is not supported by browsers (and not implemented in the processor
                    neither) xfBind allows type checking based on the HTML5 form check interface.
                    The </textual><emphasis class="po-inline e383 e383" role="ital"><textual class="po-textual">type</textual></emphasis><textual class="po-textual"> attribute can be set to one of the
                    following values as defined in HTML5: </textual><emphasis class="po-inline e384 e384" role="ital"><textual class="po-textual">text</textual></emphasis><textual class="po-textual">,
                        </textual><emphasis class="po-inline e385 e385" role="ital"><textual class="po-textual">number</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e386 e386" role="ital"><textual class="po-textual">url</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e387 e387" role="ital"><textual class="po-textual">email</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e388 e388" role="ital"><textual class="po-textual">tel</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e389 e389" role="ital"><textual class="po-textual">date</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e390 e390" role="ital"><textual class="po-textual">time</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e391 e391" role="ital"><textual class="po-textual">datetime</textual></emphasis><textual class="po-textual">,
                        </textual><emphasis class="po-inline e392 e392" role="ital"><textual class="po-textual">datetime-local</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e393 e393" role="ital"><textual class="po-textual">month</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e394 e394" role="ital"><textual class="po-textual">week</textual></emphasis><textual class="po-textual"> or </textual><emphasis class="po-inline e395 e395" role="ital"><textual class="po-textual">color</textual></emphasis><textual class="po-textual">.</textual></para><para class="po-block e396 e396"><textual class="po-textual">If a XForms input widget refers to a </textual><code class="po-atom e397 e397"><textual class="po-textual">bind</textual></code><textual class="po-textual"> element with one of
                    these type values, the </textual><emphasis class="po-inline e398 e398" role="ital"><textual class="po-textual">type</textual></emphasis><textual class="po-textual"> attribute of the
                    generated HTML5 widget replacing the XForms widget will be set to this value
                    leading to a deeper integration of XForms into HTML5. Before a data model is
                    submitted, a check of the user input is done according to the type settings by
                    usage of the checkValidity</textual><footnote class="po-popup e399 e399"><para class="po-block e400 e400"><link class="po-inline e401 e401" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.whatwg.org/specs/web-apps/current-work/multipage/forms.html#dom-form-checkvalidity</textual></link></para></footnote><textual class="po-textual"> interface which was introduced in HTML5 on the </textual><code class="po-atom e402 e402"><textual class="po-textual">form</textual></code><textual class="po-textual">
                    element.</textual></para></section><section class="po-hcontainer e403 e403"><title class="po-block e404 e404"><textual class="po-textual">Widgets</textual></title><para class="po-block e405 e405"><textual class="po-textual">For every XForms widget element an appropriate xfWidget object is created,
                    e.g. a xfWidgetTrigger object for a </textual><code class="po-atom e406 e406"><textual class="po-textual">trigger</textual></code><textual class="po-textual"> element. As the browser
                    does not know the semantics of the XForms widget elements they are replaced by
                    their HTML5 counterparts according to </textual><xref class="po-milestone e407 e407" linkend="widgets-mapping"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. Every
                    xfWidget object holds a reference to the corresponding HTML5 widget.</textual></para><para class="po-block e408 e408"><textual class="po-textual">To ensure a widget shows the actual value of the referenced node in the data
                    model, the processor uses the </textual><quote class="po-inline e409 e409"><textual class="po-textual">Mutation observer</textual></quote><footnote class="po-popup e410 e410"><para class="po-block e411 e411"><link class="po-inline e412 e412" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://dom.spec.whatwg.org/#mutation-observers</textual></link></para></footnote><textual class="po-textual"> interface. The Mutation observer is going to be introduced in DOM 4
                    to replace the DOM Mutation Events. Every xfWidget object owns a mutation
                    observer and a callback function which is executed by the observer. The observer
                    is set to the referenced node in the data model and the callback function
                    updates the widgets state to the current value of the node in the data
                    model.</textual></para><para class="po-block e413 e413"><textual class="po-textual">For simplicity the XForms label element is not handled as a own class. As a
                    label element belongs to another widget element, the label's value is stored as
                    attribute in the corresponding xfWidget object. Depending on the widget element
                    the label's value is displayed as HTML5 </textual><code class="po-atom e414 e414"><textual class="po-textual">label</textual></code><textual class="po-textual"> element, or on the
                    widget element itself, e.g. as caption of a button.</textual></para></section><section class="po-hcontainer e415 e415"><title class="po-block e416 e416"><textual class="po-textual">xfRepeat and xfRepeatGroup</textual></title><para class="po-block e417 e417"><textual class="po-textual">XForms provides the </textual><code class="po-atom e418 e418"><textual class="po-textual">repeat</textual></code><textual class="po-textual"> element to display all child elements
                    inside it multiple times. This functionality is given in the processor with the
                    xfRepeat and xfRepeatGroup classes. The xfRepeat class represents the repeat
                    element itself. </textual></para><para class="po-block e419 e419"><textual class="po-textual">The </textual><code class="po-atom e420 e420"><textual class="po-textual">repeat</textual></code><textual class="po-textual"> element refers to a nodeset in a data model. For every
                    node in this set the elements inside the </textual><code class="po-atom e421 e421"><textual class="po-textual">repeat</textual></code><textual class="po-textual"> element will be
                    repeated. The xfRepeatGroup object is used to represent such a repeat. It
                    contains a copy of all elements which are defined inside the </textual><code class="po-atom e422 e422"><textual class="po-textual">repeat</textual></code><textual class="po-textual">
                    element of the superior xfRepeat object. Every xfRepeatGroup object also refers
                    to one node of the repeat element's nodeset. </textual></para><para class="po-block e423 e423"><textual class="po-textual">The processor supports the </textual><emphasis class="po-inline e424 e424" role="ital"><textual class="po-textual">add</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e425 e425" role="ital"><textual class="po-textual">remove</textual></emphasis><textual class="po-textual"> operations of such groups. When a new node is
                    added to the nodeset, a new group is created and displayed. When a node is
                    removed from the nodeset, the corresponding group is deleted and removed from
                    the user interface.</textual></para></section><section class="po-hcontainer e426 e426"><title class="po-block e427 e427"><textual class="po-textual">Actions and events</textual></title><para class="po-block e428 e428"><textual class="po-textual">The processor supports the action elements </textual><code class="po-atom e429 e429"><textual class="po-textual">insert</textual></code><textual class="po-textual">,
                        </textual><code class="po-atom e430 e430"><textual class="po-textual">setvalue</textual></code><textual class="po-textual">, </textual><code class="po-atom e431 e431"><textual class="po-textual">delete</textual></code><textual class="po-textual"> and </textual><code class="po-atom e432 e432"><textual class="po-textual">message</textual></code><textual class="po-textual"> and the
                    superior element </textual><code class="po-atom e433 e433"><textual class="po-textual">action</textual></code><textual class="po-textual"> to group the others. Each element is
                    represented by a xfAction class, e.g. xfActionMessage. Each object owns a class
                    member </textual><emphasis class="po-inline e434 e434" role="ital"><textual class="po-textual">event</textual></emphasis><textual class="po-textual"> which contains the name of the
                    event on which the object should react. In addition each object has a method
                    perform() which implements the desired actions.</textual></para><para class="po-block e435 e435"><textual class="po-textual">As Action elements belong to another XForms element, each xf class is able to
                    hold references to one or more action objects. Each xf class also implements a
                    method handleEvent(), a generic event handler for the underlying XForms element.
                    When an event reaches the XForms element, the event handler is called which
                    compares the event's name with the event name of each registered xfAction
                    object. If the names match, the perform() method of the corresponding xfAction
                    object is called. </textual></para></section></section><section class="po-hcontainer e436 e436"><title class="po-block e437 e437"><textual class="po-textual">Evaluation</textual></title><para class="po-block e438 e438"><textual class="po-textual">As we have demonstrated, most of the XForms concepts can be implemented in a
                browser native XForms processor. But some concepts can not be covered. The
                restrictions can be divided into the following classes:</textual></para><itemizedlist class="po-table e439 e439"><listitem class="po-container e440 e440"><para class="po-block e441 e441"><textual class="po-textual">Missing technology in an HTML5-enabled Web browser.</textual></para></listitem><listitem class="po-container e442 e442"><para class="po-block e443 e443"><textual class="po-textual">Limitations of the platform (browsers and HTML5).</textual></para></listitem></itemizedlist><section class="po-hcontainer e444 e444"><title class="po-block e445 e445"><textual class="po-textual">Missing technology</textual></title><para class="po-block e446 e446"><textual class="po-textual">First of all, XML Schema support is missing completely as Web browsers today
                    do not implement it. A solution for a browser based XForms processor would be to
                    use a JavaScript based XML Schema implementation, as provided by
                        </textual><quote class="po-inline e447 e447"><textual class="po-textual">xml.js</textual></quote><footnote class="po-popup e448 e448"><para class="po-block e449 e449"><link class="po-inline e450 e450" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://syssgx.github.com/xml.js/</textual></link></para></footnote><textual class="po-textual">.</textual></para><para class="po-block e451 e451"><textual class="po-textual">The same holds for the support of XML Events. Mozilla seems to have had a XML
                    Events implementation but it was rejected from core in 2012</textual><footnote class="po-popup e452 e452"><para class="po-block e453 e453"><link class="po-inline e454 e454" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">https://bugzilla.mozilla.org/show_bug.cgi?id=656311</textual></link></para></footnote><textual class="po-textual">. Therefore a XForms processor also has to implement the XML Events
                    specification itself. The xf.js processor partially implements XML Events
                    itself.</textual></para></section><section class="po-hcontainer e455 e455"><title class="po-block e456 e456"><textual class="po-textual">Limitations of the platform</textual></title><para class="po-block e457 e457"><textual class="po-textual">To evaluate an XPath expression, a namespace resolver is needed which provides
                    a mapping from namespace prefixes to their corresponding name. A namespace
                    resolver can be build manually or by using the createNSResolver() method. It
                    takes a DOM node </textual><emphasis class="po-inline e458 e458" role="ital"><textual class="po-textual">n</textual></emphasis><textual class="po-textual"> and builds a resolver which
                    knows the namespaces and prefixes of all nodes from the document's root to the
                    given node </textual><emphasis class="po-inline e459 e459" role="ital"><textual class="po-textual">n</textual></emphasis><textual class="po-textual">. It is not possible to
                    automatically generate a namespace resolver which knows the namespaces of the
                    whole document (and not just a part of it). For the processor implementation
                    this rises the question which node should be taken? It should be a node, at a
                    very deep position in the document tree (to get as much namespace definitions as
                    possible) and on a branch which will be evaluated by the XPath expression in the
                    next step. But such a node can not be chosen without evaluating the XPath
                    expression first. Therefore only the node of the instance element itself (or its
                    first and only child node) can be taken as input for the createNSResolver
                    function. This leads to the problem, that namespaces which are defined inside
                    the data model can not be used and evaluating a XPath expression which contains
                    such namespace prefixes will fail. </textual></para><para class="po-block e460 e460"><textual class="po-textual">Another limitation is given at the document submission. XForms specifies both:
                    synchronous and asynchronous submissions, whereas a synchronous submission means
                    that the document holding the XForms is replaced by the server response. To
                    provide the submission of XML data, the processor has to use the XMLHttpRequest
                    interface. The interface is well suited for asynchronous data transfer (meaning
                    that the document remains in the browser after a submit). But it does not
                    provide functionality to replace the whole document with a server
                    response.</textual></para><para class="po-block e461 e461"><textual class="po-textual">As the xf.js processor is implemented in JavaScript all restrictions of the
                    JavaScript interpreter in a Web browser also apply for the xf.js processor
                    itself. </textual></para><para class="po-block e462 e462"><textual class="po-textual">First, Web browsers do not permit access to the local file system to
                    JavaScript programs. Thus saving a data model on the computer or opening an
                    existing one cannot be implemented without using additional technologies, like
                    Adobe Flash or another browser plug-in which is able to access the local file
                    system. HTML5 defines the Web storage</textual><footnote class="po-popup e463 e463"><para class="po-block e464 e464"><link class="po-inline e465 e465" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.whatwg.org/specs/web-apps/current-work/multipage/webstorage.html#webstorage</textual></link></para></footnote><textual class="po-textual"> interface which allows the storage of data on the local system in a
                    key-value pair manner. But Web storage meets the requirements of XForms only
                    partially as XForms allows the specification of a URL pointing into the local
                    file system for storing the data model. Browsers providing the Web storage
                    interface act as a simple database, but do not allow the user to choose the
                    destination of the stored information.</textual></para><para class="po-block e466 e466"><textual class="po-textual">Second, Web browsers prevent scripts from accessing other sites (with
                    different host name, port, etc.). Thus the submission of data to an URL
                    different from the one the current loaded document is not possible for security
                    reasons.</textual></para><para class="po-block e467 e467"><textual class="po-textual">The JavaScript restrictions also prevent a working upload widget element. In
                    XForms the content of a file, which was selected using the upload widget, can be
                    embedded into the data model as binary content. The HTML5 counterpart widget has
                    no interface to fetch the file content via JavaScript. As the access to local
                    files is not possible in general, a pure JavaScript based XForms processor lacks
                    this feature. </textual></para></section></section></section><section class="po-hcontainer e468 e468" xml:id="s4-conclusion"><title class="po-block e469 e469"><textual class="po-textual">Summary</textual></title><para class="po-block e470 e470"><textual class="po-textual">The xf.js processor uses a straight forward architecture. Each XForms element is
            represented by a corresponding object. After loading the document, a parser instantiates
            the needed objects and connects them in the desired way. In a second step each widget
            element is replaced by its HTML5 counterpart. </textual></para><para class="po-block e471 e471"><textual class="po-textual">The xf.js processor supports multiple </textual><code class="po-atom e472 e472"><textual class="po-textual">model</textual></code><textual class="po-textual"> elements in a document and
            multiple instances inside a </textual><code class="po-atom e473 e473"><textual class="po-textual">model</textual></code><textual class="po-textual"> element. Nodes in the data model can
            either be referenced directly with a XPath expression by using the appropriate attribute
                (</textual><emphasis class="po-inline e474 e474" role="ital"><textual class="po-textual">ref</textual></emphasis><textual class="po-textual"> or </textual><emphasis class="po-inline e475 e475" role="ital"><textual class="po-textual">nodeset</textual></emphasis><textual class="po-textual">)
            or by using </textual><code class="po-atom e476 e476"><textual class="po-textual">bind</textual></code><textual class="po-textual"> elements in the data model. A data model can be submitted
            as XML or as name-value pairs according to form submission in HTML. </textual></para><para class="po-block e477 e477"><textual class="po-textual">For this purposes the xf.js processor supports the following elements:
                </textual><code class="po-atom e478 e478"><textual class="po-textual">model</textual></code><textual class="po-textual">, </textual><code class="po-atom e479 e479"><textual class="po-textual">instance</textual></code><textual class="po-textual">, </textual><code class="po-atom e480 e480"><textual class="po-textual">bind</textual></code><textual class="po-textual"> and
                </textual><code class="po-atom e481 e481"><textual class="po-textual">submission</textual></code><textual class="po-textual">. For the user interface, the elements </textual><code class="po-atom e482 e482"><textual class="po-textual">label</textual></code><textual class="po-textual">,
                </textual><code class="po-atom e483 e483"><textual class="po-textual">input</textual></code><textual class="po-textual">, </textual><code class="po-atom e484 e484"><textual class="po-textual">output</textual></code><textual class="po-textual">, </textual><code class="po-atom e485 e485"><textual class="po-textual">trigger</textual></code><textual class="po-textual">, </textual><code class="po-atom e486 e486"><textual class="po-textual">submit</textual></code><textual class="po-textual">
            and </textual><code class="po-atom e487 e487"><textual class="po-textual">repeat</textual></code><textual class="po-textual"> are supported. To show the capabilities of Web browsers towards
            events, the xf.js processor implements the Action elements </textual><code class="po-atom e488 e488"><textual class="po-textual">insert</textual></code><textual class="po-textual">,
                </textual><code class="po-atom e489 e489"><textual class="po-textual">setvalue</textual></code><textual class="po-textual">, </textual><code class="po-atom e490 e490"><textual class="po-textual">delete</textual></code><textual class="po-textual">, </textual><code class="po-atom e491 e491"><textual class="po-textual">message</textual></code><textual class="po-textual"> and the element
                </textual><code class="po-atom e492 e492"><textual class="po-textual">action</textual></code><textual class="po-textual"> itself to group multiple other Action elements. These elements
            can react on events generated by the Web browser (implementation currently supports
                </textual><emphasis class="po-inline e493 e493" role="ital"><textual class="po-textual">DOMActivate</textual></emphasis><textual class="po-textual">) and on XForms specific events
                (</textual><emphasis class="po-inline e494 e494" role="ital"><textual class="po-textual">xforms-ready</textual></emphasis><textual class="po-textual"> is implemented), which are generated
            by the processor itself.</textual></para><para class="po-block e495 e495"><textual class="po-textual">To validate user inputs the xf.js processor uses some of the types defined by HTML5,
            e.g. </textual><emphasis class="po-inline e496 e496" role="ital"><textual class="po-textual">number</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e497 e497" role="ital"><textual class="po-textual">text</textual></emphasis><textual class="po-textual">,
                </textual><emphasis class="po-inline e498 e498" role="ital"><textual class="po-textual">datetime</textual></emphasis><textual class="po-textual">, etc. These types can be used with a
                </textual><code class="po-atom e499 e499"><textual class="po-textual">bind</textual></code><textual class="po-textual"> element, like XML Schema types in other processors.</textual></para></section><section class="po-hcontainer e500 e500"><title class="po-block e501 e501"><textual class="po-textual">Outlook</textual></title><para class="po-block e502 e502"><textual class="po-textual">As already mentioned, the xf.js processor has an easy to implement architecture where
            each supported XForms element is represented as a class. Such a class is instantiated
            for every XForms element used in a document. The members of the objects are filled with
            the values given in the element attributes. This architecture has the draw back of
            creating a shadow model of all information which are already present in the loaded
            document and accessible via the DOM.</textual></para><para class="po-block e503 e503"><textual class="po-textual">Therefore a new version of the processor is going to be implemented with a different
            architecture. Instead of creating an object for every XForms node in the DOM the
            existing DOM nodes should be used directly. This includes the enhancement of the DOM
            nodes with a set of JavaScript functions which provide the needed functionality for
            every node. E.g. the DOM node of a XForms </textual><code class="po-atom e504 e504"><textual class="po-textual">message</textual></code><textual class="po-textual"> element node gets a
            function perform() associated which displays the defined message to the user when
            called.</textual></para><para class="po-block e505 e505"><textual class="po-textual">An important functionality is the support of XML Schema which is not given at the
            moment. It has to be checked if JavaScript implementations for XML Schema can be used
            for the xf.js processor. </textual></para><para class="po-block e506 e506"><textual class="po-textual">We plan to make the source code of the new version public as soon as it has reached
            some kind of maturity.</textual></para></section><appendix class="po-hcontainer e507 e507" xml:id="appendix.screenshots"><title class="po-block e508 e508"><textual class="po-textual">Examples and screenshots</textual></title><para class="po-block e509 e509"><textual class="po-textual">Finally we want to show the results of the implementation with a set of examples and
            screenshots. The XForms source is given on each example.</textual></para><section class="po-hcontainer e510 e510"><title class="po-block e511 e511"><textual class="po-textual">Widget replacement</textual></title><para class="po-block e512 e512"><textual class="po-textual">The first example shows how the document is modified when the XForms widget
                elements are replaced by HTML5 widgets.</textual></para><para class="po-block e513 e513"><textual class="po-textual">This XForms code:
                </textual><programlisting class="po-block e514 e514" xml:space="preserve"><textual class="po-textual">&lt;body&gt;
  &lt;xf:input ref="data"&gt; 
    &lt;xf:label&gt;Input: &lt;/xf:label&gt;
  &lt;/xf:input&gt; &lt;br /&gt;
  &lt;xf:output value="data"&gt;
    &lt;xf:label&gt;Result: &lt;/xf:label&gt; 
  &lt;/xf:output&gt; 
&lt;/body&gt;</textual></programlisting><textual class="po-textual">
                Will result in the following XHTML5 code:
                </textual><programlisting class="po-block e515 e515" xml:space="preserve"><textual class="po-textual">&lt;body&gt;
  &lt;label&gt;Input: &lt;/label&gt;
  &lt;input type="text" name="FNinput_Input" value="Back to the Future" form="FN_model1" /&gt;
  &lt;br /&gt;	
  &lt;label&gt;Output: &lt;/label&gt;
  &lt;output name="output" form="FN_model1"&gt;Back to the Future&lt;/output&gt;
  &lt;form id="FN_model1"&gt;&lt;/form&gt;
&lt;/body&gt;</textual></programlisting><textual class="po-textual">
            </textual></para><para class="po-block e516 e516"><textual class="po-textual">It will be displayed as follows: </textual></para><figure class="po-container e517 e517" xml:id="input-output"><title class="po-block e518 e518"><textual class="po-textual">The user interface in the browser</textual></title><mediaobject class="po-container e519 e519"><imageobject class="po-container e520 e520"><imagedata class="po-meta e521 e521" fileref="../../../vol10/graphics/Niedl01/Niedl01-002.png" format="png" width="50%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure></section><section class="po-hcontainer e522 e522"><title class="po-block e523 e523"><textual class="po-textual">Changes in the data model</textual></title><para class="po-block e524 e524"><textual class="po-textual">The data model can be changed using widget elements as in the previous example or
                using action elements. The following shows the XForms code to set a value in the
                data model after the user has clicked on a button:
                </textual><programlisting class="po-block e525 e525" xml:space="preserve"><textual class="po-textual">&lt;head&gt;
 ...         
&lt;xf:model id="model2"&gt;
  &lt;xf:instance&gt;
    &lt;timeTravellers xmlns=""&gt;
      &lt;name&gt;Marty McFly&lt;/name&gt;
      &lt;name&gt;Dr. Emmet Brown&lt;/name&gt;
      &lt;name&gt;Jennifer Parker&lt;/name&gt;
    &lt;/timeTravellers&gt;
  &lt;/xf:instance&gt;

  &lt;xf:instance id="inst2"&gt;
    &lt;timeMachine xmlns=""&gt;
      &lt;name&gt;&lt;/name&gt;
    &lt;/timeMachine&gt;
  &lt;/xf:instance&gt;     
&lt;/xf:model&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;xf:trigger&gt;
    &lt;xf:label&gt;Click me&lt;/xf:label&gt;
    &lt;xf:setvalue ev:event="DOMActivate" ref="instance('inst2')/name" model="model2"&gt;DeLorean DMC-12&lt;/xf:setvalue&gt;
  &lt;/xf:trigger&gt;
  &lt;br /&gt;
  &lt;xf:output ref="instance('inst2')/name" model="model2"&gt;
    &lt;xf:label&gt;Time machine: &lt;/xf:label&gt;
  &lt;/xf:output&gt;
&lt;/body&gt;</textual></programlisting><textual class="po-textual">This
                code will lead to the following behaviour in the browser:</textual></para><figure class="po-container e526 e526" xml:id="trigger-1"><title class="po-block e527 e527"><textual class="po-textual">Updating the data model with events: Before the click</textual></title><mediaobject class="po-container e528 e528"><imageobject class="po-container e529 e529"><imagedata class="po-meta e530 e530" fileref="../../../vol10/graphics/Niedl01/Niedl01-003.png" format="png" width="75%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><figure class="po-container e531 e531" xml:id="trigger-2"><title class="po-block e532 e532"><textual class="po-textual">Updating the data model with events: After the click</textual></title><mediaobject class="po-container e533 e533"><imageobject class="po-container e534 e534"><imagedata class="po-meta e535 e535" fileref="../../../vol10/graphics/Niedl01/Niedl01-004.png" format="png" width="75%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure></section><section class="po-hcontainer e536 e536"><title class="po-block e537 e537"><textual class="po-textual">Repeating groups</textual></title><para class="po-block e538 e538"><textual class="po-textual">The xf.js processor also provides support for the XForms </textual><code class="po-atom e539 e539"><textual class="po-textual">repeat</textual></code><textual class="po-textual">
                element. We use the following XForms code as
                example:</textual><programlisting class="po-block e540 e540" xml:space="preserve"><textual class="po-textual">&lt;body&gt;
  &lt;div&gt;
    &lt;xf:repeat id="carRepeat" nodeset="car"&gt;
      &lt;xf:input ref="."&gt;
        &lt;xf:label&gt;Car &lt;/xf:label&gt;
      &lt;/xf:input&gt;
      &lt;br /&gt;
    &lt;/xf:repeat&gt;
        
    &lt;xf:trigger&gt;
      &lt;xf:label&gt;Insert new car at beginning&lt;/xf:label&gt;
      &lt;xf:action ev:event="DOMActivate"&gt;
        &lt;xf:insert nodeset="car" at="1" position="before"/&gt;
        &lt;xf:setvalue ref="car[1]/text()"&gt;Porsche&lt;/xf:setvalue&gt;
      &lt;/xf:action&gt;  
    &lt;/xf:trigger&gt;
              
    &lt;xf:trigger&gt;
      &lt;xf:label&gt;Delete last car&lt;/xf:label&gt;
      &lt;xf:delete ev:event="DOMActivate" nodeset="car" at="last()"/&gt;
    &lt;/xf:trigger&gt;
  &lt;/div&gt;  
&lt;/body&gt;</textual></programlisting></para><para class="po-block e541 e541"><textual class="po-textual">The following images show the website after initialization, after a click on the
                    </textual><quote class="po-inline e542 e542"><textual class="po-textual">insert</textual></quote><textual class="po-textual"> button and after a click on the </textual><quote class="po-inline e543 e543"><textual class="po-textual">delete</textual></quote><textual class="po-textual">
                button:</textual></para><figure class="po-container e544 e544" xml:id="repeat-1"><title class="po-block e545 e545"><textual class="po-textual">The repeat group after initialization</textual></title><mediaobject class="po-container e546 e546"><imageobject class="po-container e547 e547"><imagedata class="po-meta e548 e548" fileref="../../../vol10/graphics/Niedl01/Niedl01-005.png" format="png" width="75%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><figure class="po-container e549 e549" xml:id="repeat-2"><title class="po-block e550 e550"><textual class="po-textual">The repeat group after an insert operation</textual></title><mediaobject class="po-container e551 e551"><imageobject class="po-container e552 e552"><imagedata class="po-meta e553 e553" fileref="../../../vol10/graphics/Niedl01/Niedl01-006.png" format="png" width="75%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><figure class="po-container e554 e554" xml:id="repeat-3"><title class="po-block e555 e555"><textual class="po-textual">The repeat group after a delete operation</textual></title><mediaobject class="po-container e556 e556"><imageobject class="po-container e557 e557"><imagedata class="po-meta e558 e558" fileref="../../../vol10/graphics/Niedl01/Niedl01-007.png" format="png" width="75%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure></section></appendix><bibliography class="po-hcontainer e559 e559"><title class="po-block e560 e560"><textual class="po-textual">Bibliography</textual></title><bibliomixed class="po-block e561 e561" xml:id="XFormsEssentials"><textual class="po-textual">Micah Dubinko: XForms Essentials. O'Reilly
            2003.</textual></bibliomixed><bibliomixed class="po-block e562 e562" xml:id="FormsNG"><textual class="po-textual">Hofmann/Liebermann: XForms: The Next Generation of Internet
            Interfaces. Augsburg 2004.</textual></bibliomixed><bibliomixed class="po-block e563 e563" xml:id="w3.pemberton" xreflabel="Pemberton 2003"><textual class="po-textual"> Steven Pemberton.
                </textual><quote class="po-inline e564 e564"><textual class="po-textual">XForms for HTML Authors</textual></quote><textual class="po-textual">. [last accessed 24. Mar 2013].
                </textual><link class="po-inline e565 e565" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/MarkUp/Forms/2003/xforms-for-html-authors.html</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e566 e566" xml:id="w3.xforms" xreflabel="XForms 1.1"><textual class="po-textual"> John M. Boyer [Editor].
                </textual><quote class="po-inline e567 e567"><textual class="po-textual">XForms 1.1 W3C Recommendation 20 October 2009</textual></quote><textual class="po-textual">. [last accessed 24. Mar
            2013]. </textual><link class="po-inline e568 e568" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xforms/#ui-input</textual></link><textual class="po-textual">
        </textual></bibliomixed></bibliography></article></classedDocument>