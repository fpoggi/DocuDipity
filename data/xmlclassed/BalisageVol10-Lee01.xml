<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.3"><title class="po-block e1 e1"><textual class="po-textual">Fat Markup: Trimming the Fat Markup Myth one calorie at a time</textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">Balisage: The Markup Conference 2013</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 6 - 9, 2013</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual">We all know that XML is "fat" and JSON is the "thinner", "faster", "smaller",
                "better" markup. We know this to be true because we've been told it over and over.
                It's "obvious" and "inherently true" because XML has redundant end tags,
                namespaces, entities and other extra "pounds of fat" that JSON doesn't have. But
                where is the science supporting this? What are the facts and what is myth? When
                people make design and architecture decisions it should be supported by facts not
                speculation. In this paper I show the results of an ongoing series of real world
                tests of Markup performance in browsers across a wide variety of devices, browsers
                and operating systems and attempt to quantify markup performance with experimental
                results and maybe trim the fat myth one calorie at a time.</textual></para></abstract><author class="po-record e8 e8"><personname class="po-record e9 e9"><firstname class="po-field e10 e10"><textual class="po-textual">David</textual></firstname><surname class="po-field e11 e11"><textual class="po-textual">Lee</textual></surname></personname><personblurb class="po-container e12 e12"><para class="po-block e13 e13"><textual class="po-textual">David Lee has over 30 years' experience in the software industry responsible
                    for many major projects in small and large companies including Sun Microsystems,
                    IBM, Centura Software (formerly Gupta.), Premenos, Epiphany (formerly
                    RightPoint), WebGain, Nexstra, Epocrates, MarkLogic. As Lead Engineer at
                    MarkLogic, Inc., Mr. Lee is responsible for maintaining and enhancing the core
                    XML Database server.</textual></para></personblurb><affiliation class="po-record e14 e14"><jobtitle class="po-field e15 e15"><textual class="po-textual">Lead Engineer</textual></jobtitle><orgname class="po-block e16 e16"><textual class="po-textual">MarkLogic, Inc.</textual></orgname></affiliation><email class="po-field e17 e17"><textual class="po-textual">dlee@marklogic.com</textual></email></author><legalnotice class="po-container e18 e18"><para class="po-block e19 e19"><textual class="po-textual">Copyright © 2013 David A. Lee</textual></para></legalnotice></info><section class="po-hcontainer e20 e20"><title class="po-block e21 e21"><textual class="po-textual">The Myth</textual></title><para class="po-block e22 e22"><textual class="po-textual">JSON is lean and XML is fat. We know this to be true. Here is a typical quote stated
            as an undisputed fact. </textual><blockquote class="po-container e23 e23"><para class="po-block e24 e24"><textual class="po-textual">JSON’s lightweight payload allows for reduced bandwidth needs and faster
                    transfers. </textual><xref class="po-milestone e25 e25" linkend="JSONLIGHT"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref></para></blockquote><textual class="po-textual"> Douglas Crockford boldly titles his paper </textual><blockquote class="po-container e26 e26"><para class="po-block e27 e27"><textual class="po-textual">JSON: The Fat-Free Alternative to XML </textual><xref class="po-milestone e28 e28" linkend="XMLFAT"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">
                </textual></para></blockquote><textual class="po-textual">
            </textual><footnote class="po-popup e29 e29"><para class="po-block e30 e30"><textual class="po-textual">Although interestingly he claims that JSON is neither a document format nor a
                    markup language.</textual><quote class="po-inline e31 e31"><textual class="po-textual">JSON is not a document format. It is not a markup
                        language.</textual></quote></para></footnote><textual class="po-textual">
        </textual></para><para class="po-block e32 e32"><textual class="po-textual">Simply search the web or ask your friends and except for a few evangelist's </textual><xref class="po-milestone e33 e33" linkend="XMLJSON1"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> they will tell you the same thing. For people who want to
            promote and use JSON they often use this "fact" to support their cause. For people who
            want to use and promote XML they usually accept this and point to XML's other features
            that are more important.</textual></para><para class="po-block e34 e34"><textual class="po-textual">Yet few dispute this fact or attempt a systematic measurement to validate or disprove
            it.  And when they do it's usually a very constrained test with a single corpus </textual><xref class="po-milestone e35 e35" linkend="AJAX1"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. It's just true. </textual></para><blockquote class="po-container e36 e36"><para class="po-block e37 e37"><textual class="po-textual">The worst misconceptions are those which everyone knows to be true, and yet are completely false. Once a false idea gets into the public consciousness, however, they are very difficult to expunge, and rarely go away completely.</textual></para></blockquote><para class="po-block e38 e38"><textual class="po-textual">Dr. Steven Novella </textual><xref class="po-milestone e39 e39" linkend="MISCONCEPTION"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> </textual></para></section><section class="po-hcontainer e40 e40"><title class="po-block e41 e41"><textual class="po-textual">What is "Fat Markup"?</textual></title><para class="po-block e42 e42"><textual class="po-textual">When used to describe Markup, "Fat" has many factors and connotations. For the
            purposes of this paper the following attributes are investigated - size, shape, speed
            and looks.</textual></para><section class="po-hcontainer e43 e43"><title class="po-block e44 e44"><textual class="po-textual">Size Matters</textual></title><para class="po-block e45 e45"><textual class="po-textual">The total size of a marked up document matters for some purposes. The larger the size
                of the document, generally the more memory it consumes when parsed, the more space
                it takes in storage and the more time it takes to transfer over a network. However,
                a single measurement of size is misleading.</textual></para><para class="po-block e46 e46"><textual class="po-textual">Size can be measured in bytes, characters, nodes and other metrics - both on
                storage and in memory. Encoding and compression can affect the byte size given the
                same character size in storage (and often memory). Choices of particular markup style
                representing the same document data can affect the number of characters; for example
                choosing shorter element names can produce a document with less characters. Markup
                choices can also affect node structure and size; for example using attributes in XML
                instead of elements for some data produces a different representation of the node
                tree itself which in turn affects the number of characters and bytes. There are many
                other considerations such as numeric precision, ignorable and boundary whitespace,
                defaulted attributes, use of namespaces etc. While some specifics are particular to
                the markup language the concept is valid in both XML and JSON formats.</textual></para><para class="po-block e47 e47"><textual class="po-textual">Thus given the same document as an abstract object, it is meaningless to attempt
                to provide a single measurement of its size as expressed in a particular markup
                format. However, one can measure specific sizes of a particular representation of a
                document.</textual></para><para class="po-block e48 e48"><textual class="po-textual">But even given a specific metric for the size of a document, does it matter? That
                would depend on what one cares about. Size is at best an indirect measurement of
                some other quantity one is interested in such as time to transmit over a network or
                disk space used. General intuition is that probably smaller is "better". However, to
                get a more definitive answer then that we need to ask "better for what and whom?" A
                binary compressed document may be smallest and better at conserving disk space but
                not better at readability, usability or parsing speed.</textual></para></section><section class="po-hcontainer e49 e49"><title class="po-block e50 e50"><textual class="po-textual">Shape Matters</textual></title><para class="po-block e51 e51"><textual class="po-textual">The "Shape" or particular structure of a document matters for some purposes. For
                example, readability and ease of authoring by humans or machines may be important.
                The "shape" also affects the design of parsers, data models and programming
                API's.</textual></para><para class="po-block e52 e52"><textual class="po-textual">A particular shape may be better for some uses then others - an exact mapping to a
                particular programming language object structure may be useful in that language but
                cumbersome in another. Even in a single language some models may be better suited
                for direct access and others for searching.</textual></para><para class="po-block e53 e53"><textual class="po-textual">Shape of a document is hard to quantify, but I suggest that one can use "ease of
                use" as a proxy. A shape that doesn’t fit your use case is hard to use and could be
                considered "Fat" in terms of the difficulty of using it.</textual></para></section><section class="po-hcontainer e54 e54"><title class="po-block e55 e55"><textual class="po-textual">Speed Matters</textual></title><para class="po-block e56 e56"><textual class="po-textual">When something is considered "Fat" it's generally implied that its "Slow". Speed
                matters. The time it takes to transfer a document from disk to memory, the time it
                takes to transfer across a network, the time it takes to parse and query a document
                - all matter. There is also developer time. How long does it take a developer to
                learn a language and write code to process a document?</textual></para><para class="po-block e57 e57"><textual class="po-textual">Sometimes speed in the small doesn’t mean speed in the large. The story of the
                Tortoise and the Hare can provide good reflection on this. As a practical example,
                imagine a document which is very fast to load into a programming language but the
                data format produced doesn’t lend itself for some use cases so extra processing,
                internal transformations to other models or use of complex and slow libraries may be
                required to access the document. For example it is common practice in JSON to embed
                HTML snippets as strings. If you want to search, combine or reformat them you may
                then have to construct an HTML document and parse it with an HTML parser to produce
                an object model which useful. The leanness of the original markup is lost in the
                overhead of having to perform multiple layers of parsing. </textual></para></section><section class="po-hcontainer e58 e58"><title class="po-block e59 e59"><textual class="po-textual">Looks Matter</textual></title><para class="po-block e60 e60"><textual class="po-textual">Fat is generally considered "Ugly". A "Fat Markup" often implies an ugly one. If a
                document format is so ugly you can't stand looking it, you will try to avoid
                it.</textual></para><para class="po-block e61 e61"><textual class="po-textual">Fortunately "Beauty is in the eyes of the Beholder". This is true in markup as
                well as the humanities. As time, exposure, and fashion change so can the subjective
                beauty of a markup format.</textual></para></section><section class="po-hcontainer e62 e62"><title class="po-block e63 e63"><textual class="po-textual">What's it all mean?</textual></title><para class="po-block e64 e64"><textual class="po-textual">Sweeping statements of technologies like "Fat", "Slow", "Bloated" have  imprecise
                meaning. Worse they are often chosen to pull in emotional associations which may not apply to
                the specific cases. So even if it were considered true, what does it mean by saying
                "XML Is Fat"? I suggest it means very little, actually of negative usefulness. A
                markup itself is not used in isolation; it is used in the context of complex
                work-flows including editing, distribution and processing. So what should one do to
                characterize a Markup Language in a meaningful and useful way? </textual></para><para class="po-block e65 e65"><textual class="po-textual">I suggest a path lies in defining tests that measure specific use cases and
                provide reproducible metrics. These metrics can be used to get a better
                understanding of the performance of markup in a meaningful way.</textual></para><para class="po-block e66 e66"><textual class="po-textual">In short, An Experiment.</textual></para></section></section><section class="po-hcontainer e67 e67"><title class="po-block e68 e68"><textual class="po-textual">The Experiment</textual></title><para class="po-block e69 e69"><textual class="po-textual">I designed an experiment to attempt to quantify some of the attributes attributed to
            "Fat Markup". In particular I focused on what is generally considered an already
            answered question in particular because I would like to validate that the "common
            wisdom" is in fact based on fact, and if so or not, to what degree and in what exact
            cases. The Experiment focuses on performance of JSON and XML in the use case of being
            delivered by a standard web Server and being parsed and queried in a Browser.
            Furthermore, mobile devices are becoming vastly more prevalent then in the recent past
            and little research addresses Mobile Browsers so I attempt to include them as much as
            possible in the tested scenarios.</textual></para><para class="po-block e70 e70"><textual class="po-textual">The Experiment I developed attempts to test the following attributes of XML and JSON
            processing.</textual></para><section class="po-hcontainer e71 e71"><title class="po-block e72 e72"><textual class="po-textual">Multiple Document Corpuses</textual></title><para class="po-block e73 e73"><textual class="po-textual">Most of the past publications I have found focus on a single corpus of documents and usually attempt to derive a single metric.
                These are often very artificial, focused on a single domain or structurally similar.
                For this experiment I take 6 very different documents and a baseline to attempt to
                cover a range of document uses 'in the wild'.</textual></para><para class="po-block e74 e74"><textual class="po-textual">Subsets of larger corpus and duplication of smaller datasets were chosen so the
                resultant XML and JSON sizes ranged from 100 KB to 1 MB. These limits were chosen so
                the size was large enough to take noticeable time to load, parse and query but not so
                large as to break most reasonable browsers even on mobile devices.</textual></para><para class="po-block e75 e75"><textual class="po-textual">The Document corpus used is as follows</textual></para><itemizedlist class="po-table e76 e76"><listitem class="po-container e77 e77"><para class="po-block e78 e78"><textual class="po-textual">base</textual></para><para class="po-block e79 e79"><textual class="po-textual">This is a very basic baseline document. It consists of a root object and a
                        child object with 3 properties. This baseline is used to sanity check the
                        test to make sure proper counting of size and nodes could be easily manually
                        validated.</textual></para></listitem><listitem class="po-container e80 e80"><para class="po-block e81 e81"><textual class="po-textual">books</textual></para><para class="po-block e82 e82"><textual class="po-textual">This is an expanded sample of the BOOKS sample distributed with Saxon </textual><xref class="po-milestone e83 e83" linkend="Saxon"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. It
                        contains 600 book items, with 300 categories.</textual></para></listitem><listitem class="po-container e84 e84"><para class="po-block e85 e85"><textual class="po-textual">epa</textual></para><para class="po-block e86 e86"><textual class="po-textual">A portion of the EPA  Geospatial  data at </textual><link class="po-inline e87 e87" xlink:actuate="onRequest" xlink:href="http://www.epa.gov/enviro/geo_data.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.epa.gov/enviro/geo_data.html</textual></link><textual class="po-textual"> containing a collection
                        of 100 FacilitySite records.</textual></para></listitem><listitem class="po-container e88 e88"><para class="po-block e89 e89"><textual class="po-textual">ndc</textual></para><para class="po-block e90 e90"><textual class="po-textual">A subset of the National Drug Code Directory at </textual><link class="po-inline e91 e91" xlink:actuate="onRequest" xlink:href="http://www.fda.gov/drugs/informationondrugs/ucm142438.htm" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.fda.gov/drugs/informationondrugs/ucm142438.htm</textual></link><textual class="po-textual">
                        containing a collection of 1000 FORMULATRION records.</textual></para></listitem><listitem class="po-container e92 e92"><para class="po-block e93 e93"><textual class="po-textual">snomed</textual></para><para class="po-block e94 e94"><textual class="po-textual">A subset of the SNOMED concept database from </textual><link class="po-inline e95 e95" xlink:actuate="onRequest" xlink:href="http://www.nlm.nih.gov/research/umls/Snomed/snomed_main.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.nlm.nih.gov/research/umls/Snomed/snomed_main.html</textual></link><textual class="po-textual">
                        containing a collection of 100 SNOMED concept records.</textual></para></listitem><listitem class="po-container e96 e96"><para class="po-block e97 e97"><textual class="po-textual">spl</textual></para><para class="po-block e98 e98"><textual class="po-textual">A single SPL document from the FDA as provided by DailyMed, a website
                        run by the National Institute of Health </textual><link class="po-inline e99 e99" xlink:actuate="onRequest" xlink:href="http://dailymed.nlm.nih.gov/dailymed/downloadLabels.cfm" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://dailymed.nlm.nih.gov/dailymed/downloadLabels.cfm</textual></link><textual class="po-textual">
                    </textual></para></listitem><listitem class="po-container e100 e100"><para class="po-block e101 e101"><textual class="po-textual">twitter</textual></para><para class="po-block e102 e102"><textual class="po-textual">A collection of 1000 random tweets from a search of Super Bowl and
                        advertiser terms.   Identifying data from the collection was anonymized by
                        randomizing the user names and ID's.</textual></para></listitem></itemizedlist></section><section class="po-hcontainer e103 e103"><title class="po-block e104 e104"><textual class="po-textual">Document Size and shape</textual></title><para class="po-block e105 e105"><textual class="po-textual">Most research I have found makes the incorrect assumption that there is a single
                representation of a document in a particular markup. I take a different approach.
                Starting with seven (7) different documents I produce 2 variants in JSON and 3
                variants in XML that all represent the same abstract document. These documents span
                several data styles including simple tabular, highly structured and document format.
                Some of the corpus is synthetic and some taken from real world data. In addition I
                test the support for HTTP gzip compression on these documents.</textual></para><section class="po-hcontainer e106 e106"><title class="po-block e107 e107"><textual class="po-textual">JSON Formats</textual></title><para class="po-block e108 e108"><textual class="po-textual">For JSON documents I produced 2 variants. </textual></para><para class="po-block e109 e109"><textual class="po-textual">One variant similar to the default XML to JSON transformation from json.org (</textual><link class="po-inline e110 e110" xlink:actuate="onRequest" xlink:href="http://www.json.org/java/index.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.json.org/java/index.html</textual></link><textual class="po-textual">). This variant, while fully
                    expressive is generally not what a JSON developer would expect. However, it is
                    what a naive XML to JSON transformation may produce.</textual></para><para class="po-block e111 e111"><textual class="po-textual">The second JSON variant is a custom transformation informed by the specific
                    data structures and is close to what a JSON programmer might expect from a JSON
                    format.</textual></para><para class="po-block e112 e112"><textual class="po-textual">In both cases extraneously white-spaces are removed.</textual></para><section class="po-hcontainer e113 e113"><title class="po-block e114 e114"><textual class="po-textual">JSON Examples</textual></title><section class="po-hcontainer e115 e115"><title class="po-block e116 e116"><textual class="po-textual">Twitter 1 Full</textual></title><para class="po-block e117 e117"><textual class="po-textual">The following is an example of a single JSON object in the twiter-1full.json.  This is representative of a naive conversion from XML using code similar to that at json.org.  Whitespace, newlines and indentation was added for presentation only; it does not exist in the actual document.</textual></para><figure class="po-container e118 e118" xml:id="Twitter1"><title class="po-block e119 e119"><textual class="po-textual">Twitter 1 full example</textual></title><para class="po-block e120 e120"><textual class="po-textual">
                        </textual><code class="po-atom e121 e121"><textual class="po-textual">

{
    "status": {
        "_attributes": {
            "id": "303239543170138114"
        },
        "_children": [
            "\n      ",
            {
                "created-at": {
                    "_children": [
                        "2013-02-17T15:28:35"
                    ]
                }
            },
            "\n      ",
            {
                "user": {
                    "_attributes": {
                        "created-at": "2012-05-30T01:40:04",
                        "description": "No regrets im blessed to say the old me dead and gone away",
                        "favorites-count": "1079",
                        "id": "6674089274671724277",
                        "lang": "en",
                        "name": "AqmtidAkSesSZ",
                        "screen-name": "ITQMiAqmti"
                    },
                    "_children": [
                        "\n         ",
                        {
                            "location": {
                                "_children": [
                                    "Hartselle "
                                ]
                            }
                        },
                        "\n      "
                    ]
                }
            },
            "\n      ",
            {
                "hash-tags": {
                    "_children": [
                        "\n         ",
                        {
                            "hash-tag": {
                                "_attributes": {
                                    "start": "65",
                                    "end": "78"
                                },
                                "_children": [
                                    "coolranchdlt"
                                ]
                            }
                        },
                        "\n      "
                    ]
                }
            },
            "\n      ",
            {
                "source": {
                    "_children": [
                        "&amp;lt;a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\"&amp;gt;Twitter for iPhone&amp;lt;/a&amp;gt;"
                    ]
                }
            },
            "\n      ",
            {
                "text": {
                    "_children": [
                        "Taco Bell has cooler ranch Doritos tacos my life just got better #coolranchdlt"
                    ]
                }
            },
            "\n      ",
            {
                "url-entities": {}
            },
            "\n      ",
            {
                "user-mention-entities": {}
            },
            "\n   "
        ]
    }
                            
                            
                        </textual></code></para></figure><para class="po-block e122 e122"><textual class="po-textual">This is an example of the same record represented in a format that a
                            native JSON developer may expect. Whitespace, newlines and indentation
                            was added for presentation only; it does not exist in the actual
                            document.</textual></para><figure class="po-container e123 e123" xml:id="Twitter2"><title class="po-block e124 e124"><textual class="po-textual">Twitter 2 custom example</textual></title><para class="po-block e125 e125"><textual class="po-textual">
                        
                        </textual><code class="po-atom e126 e126"><textual class="po-textual">

 {
    "status": {
        "id": "303239543170138114",
        "created-at": "2013-02-17T15:28:35",
        "user": {
            "created-at": "2012-05-30T01:40:04",
            "description": "No regrets im blessed to say the old me dead and gone away",
            "favorites-count": "1079",
            "id": "6674089274671724277",
            "lang": "en",
            "name": "AqmtidAkSesSZ",
            "screen-name": "ITQMiAqmti",
            "location": "Hartselle "
        },
        "hash-tags": {
            "hash-tag": [
                {
                    "start": "65",
                    "end": "78",
                    "_value": "coolranchdlt"
                }
            ]
        },
        "source": "&amp;lt;a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\"&amp;gt;Twitter for iPhone&amp;lt;/a&amp;gt;",
        "text": "Taco Bell has cooler ranch Doritos tacos my life just got better #coolranchdlt",
        "url-entities": "",
        "user-mention-entities": ""
    }
},

                            
                            
                            
                        </textual></code><textual class="po-textual">
                            </textual></para></figure></section></section></section><section class="po-hcontainer e127 e127"><title class="po-block e128 e128"><textual class="po-textual">XML Formats</textual></title><para class="po-block e129 e129"><textual class="po-textual">For the first format I used the "native" XML format (if the document
                    originated as XML) or a naive transformation from the object model to
                    XML.</textual></para><para class="po-block e130 e130"><textual class="po-textual">For the second format I took the first format and simply removed boundary and
                    ignorable whitespace</textual></para><para class="po-block e131 e131"><textual class="po-textual">For the third XML format I transformed the XML into an attribute centric
                    format. This was accomplished by taking all XML elements which contained only
                    text content, no attributes, and is not repeating and transformed that element
                    into an attribute. </textual></para><section class="po-hcontainer e132 e132"><title class="po-block e133 e133"><textual class="po-textual">XML Examples</textual></title><para class="po-block e134 e134"><textual class="po-textual">What follows are 3 examples of the same twitter record as used for the XML
                        documents.</textual></para><figure class="po-container e135 e135" xml:id="TwitterXML1"><title class="po-block e136 e136"><textual class="po-textual">XML 1 example - base xml with whitespace and indentation</textual></title><para class="po-block e137 e137"><textual class="po-textual">
                        
                    </textual><code class="po-atom e138 e138"><textual class="po-textual">
  
                        
 &lt;status id="303239543170138114"&gt;
      &lt;created-at&gt;2013-02-17T15:28:35&lt;/created-at&gt;
      &lt;user created-at="2012-05-30T01:40:04" description="No regrets im blessed to say the old me dead and gone away" favorites-count="1079" id="6674089274671724277" lang="en" name="AqmtidAkSesSZ" screen-name="ITQMiAqmti"&gt;
         &lt;location&gt;Hartselle &lt;/location&gt;
      &lt;/user&gt;
      &lt;hash-tags&gt;
         &lt;hash-tag start="65" end="78"&gt;coolranchdlt&lt;/hash-tag&gt;
      &lt;/hash-tags&gt;
      &lt;source&gt;&amp;lt;a href="http://twitter.com/download/iphone" rel="nofollow"&amp;gt;Twitter for iPhone&amp;lt;/a&amp;gt;&lt;/source&gt;
      &lt;text&gt;Taco Bell has cooler ranch Doritos tacos my life just got better #coolranchdlt&lt;/text&gt;
      &lt;url-entities/&gt;
      &lt;user-mention-entities/&gt;
 &lt;/status&gt;

                    </textual></code><textual class="po-textual"> </textual></para></figure><figure class="po-container e139 e139" xml:id="TwitterXML2"><title class="po-block e140 e140"><textual class="po-textual">XML 2 example - All whitespace and indentation removed</textual></title><para class="po-block e141 e141"><textual class="po-textual">
                    </textual><code class="po-atom e142 e142"><textual class="po-textual">

&lt;status id="303239543170138114"&gt;&lt;created-at&gt;2013-02-17T15:28:35&lt;/created-at&gt;&lt;user created-at="2012-05-30T01:40:04" description="No regrets im blessed to say the old me dead and gone away" favorites-count="1079" id="6674089274671724277" lang="en" name="AqmtidAkSesSZ" screen-name="ITQMiAqmti"&gt;&lt;location&gt;Hartselle &lt;/location&gt;&lt;/user&gt;&lt;hash-tags&gt;&lt;hash-tag start="65" end="78"&gt;coolranchdlt&lt;/hash-tag&gt;&lt;/hash-tags&gt;&lt;source&gt;&amp;lt;a href="http://twitter.com/download/iphone" rel="nofollow"&amp;gt;Twitter for iPhone&amp;lt;/a&amp;gt;&lt;/source&gt;&lt;text&gt;Taco Bell has cooler ranch Doritos tacos my life just got better #coolranchdlt&lt;/text&gt;&lt;url-entities/&gt;&lt;user-mention-entities/&gt;&lt;/status&gt;                        
                        
                    </textual></code><textual class="po-textual">
                            </textual></para></figure><figure class="po-container e143 e143" xml:id="TwitterXML3"><title class="po-block e144 e144"><textual class="po-textual">XML 3 example - All non-repeating leaf elements pulled up into
                            attributes</textual></title><para class="po-block e145 e145"><textual class="po-textual">
                    </textual><code class="po-atom e146 e146"><textual class="po-textual">
                        
&lt;status id="303239543170138114" created-at="2013-02-17T15:28:35" source="&amp;lt;a href=&amp;#34;http://twitter.com/download/iphone&amp;#34; rel=&amp;#34;nofollow&amp;#34;&amp;gt;Twitter for iPhone&amp;lt;/a&amp;gt;" text="Taco Bell has cooler ranch Doritos tacos my life just got better #coolranchdlt" url-entities="" user-mention-entities=""&gt;&lt;user created-at="2012-05-30T01:40:04" description="No regrets im blessed to say the old me dead and gone away" favorites-count="1079" id="6674089274671724277" lang="en" name="AqmtidAkSesSZ" screen-name="ITQMiAqmti" location="Hartselle "/&gt;&lt;hash-tags&gt;&lt;hash-tag start="65" end="78"&gt;coolranchdlt&lt;/hash-tag&gt;&lt;/hash-tags&gt;&lt;/status&gt;&lt;/twitter&gt;                   

                    </textual></code><textual class="po-textual">
                        </textual></para></figure></section></section><section class="po-hcontainer e147 e147"><title class="po-block e148 e148"><textual class="po-textual">Sizes of corpus</textual></title><para class="po-block e149 e149"><textual class="po-textual"> The following table lists the corpus documents, types, and sizes (raw and
                    compressed). This data is stored as a resource (index) and is available to the
                    client on start-up. </textual><table class="po-container e150 e150" xml:id="FileSizeTable"><caption class="po-container e151 e151"><para class="po-block e152 e152"><textual class="po-textual">Corpus documents with sizes</textual></para></caption><tr class="po-table e153 e153"><th class="po-field e154 e154"><textual class="po-textual">group</textual></th><th class="po-field e155 e155"><textual class="po-textual">type</textual></th><th class="po-field e156 e156"><textual class="po-textual">name</textual></th><th class="po-field e157 e157"><textual class="po-textual">size</textual></th><th class="po-field e158 e158"><textual class="po-textual">compress-size</textual></th></tr><tr class="po-table e159 e159"><td class="po-block e160 e160"><textual class="po-textual">base</textual></td><td class="po-block e161 e161"><textual class="po-textual">json</textual></td><td class="po-block e162 e162"><textual class="po-textual">base-custom.json</textual></td><td align="right" class="po-block e163 e163"><textual class="po-textual">56</textual></td><td align="right" class="po-block e164 e164"><textual class="po-textual">83</textual></td></tr><tr class="po-table e165 e165"><td class="po-block e166 e166"><textual class="po-textual">base</textual></td><td class="po-block e167 e167"><textual class="po-textual">json</textual></td><td class="po-block e168 e168"><textual class="po-textual">base-full.json</textual></td><td align="right" class="po-block e169 e169"><textual class="po-textual">93</textual></td><td align="right" class="po-block e170 e170"><textual class="po-textual">107</textual></td></tr><tr class="po-table e171 e171"><td class="po-block e172 e172"><textual class="po-textual">base</textual></td><td class="po-block e173 e173"><textual class="po-textual">xml</textual></td><td class="po-block e174 e174"><textual class="po-textual">base.xml</textual></td><td align="right" class="po-block e175 e175"><textual class="po-textual">45</textual></td><td align="right" class="po-block e176 e176"><textual class="po-textual">69</textual></td></tr><tr class="po-table e177 e177"><td class="po-block e178 e178"><textual class="po-textual">books</textual></td><td class="po-block e179 e179"><textual class="po-textual">json</textual></td><td class="po-block e180 e180"><textual class="po-textual">books1-custom.json</textual></td><td align="right" class="po-block e181 e181"><textual class="po-textual">204832</textual></td><td align="right" class="po-block e182 e182"><textual class="po-textual">1933</textual></td></tr><tr class="po-table e183 e183"><td class="po-block e184 e184"><textual class="po-textual">books</textual></td><td class="po-block e185 e185"><textual class="po-textual">json</textual></td><td class="po-block e186 e186"><textual class="po-textual">books1-full.json</textual></td><td align="right" class="po-block e187 e187"><textual class="po-textual">438133</textual></td><td align="right" class="po-block e188 e188"><textual class="po-textual">3758</textual></td></tr><tr class="po-table e189 e189"><td class="po-block e190 e190"><textual class="po-textual">books</textual></td><td class="po-block e191 e191"><textual class="po-textual">xml</textual></td><td class="po-block e192 e192"><textual class="po-textual">books1.xml</textual></td><td align="right" class="po-block e193 e193"><textual class="po-textual">256030</textual></td><td align="right" class="po-block e194 e194"><textual class="po-textual">2412</textual></td></tr><tr class="po-table e195 e195"><td class="po-block e196 e196"><textual class="po-textual">books</textual></td><td class="po-block e197 e197"><textual class="po-textual">xml</textual></td><td class="po-block e198 e198"><textual class="po-textual">books2.xml</textual></td><td align="right" class="po-block e199 e199"><textual class="po-textual">226430</textual></td><td align="right" class="po-block e200 e200"><textual class="po-textual">2169</textual></td></tr><tr class="po-table e201 e201"><td class="po-block e202 e202"><textual class="po-textual">books</textual></td><td class="po-block e203 e203"><textual class="po-textual">xml</textual></td><td class="po-block e204 e204"><textual class="po-textual">books3.xml</textual></td><td align="right" class="po-block e205 e205"><textual class="po-textual">186230</textual></td><td align="right" class="po-block e206 e206"><textual class="po-textual">1819</textual></td></tr><tr class="po-table e207 e207"><td class="po-block e208 e208"><textual class="po-textual">epa</textual></td><td class="po-block e209 e209"><textual class="po-textual">json</textual></td><td class="po-block e210 e210"><textual class="po-textual">epa1-custom.json</textual></td><td align="right" class="po-block e211 e211"><textual class="po-textual">140914</textual></td><td align="right" class="po-block e212 e212"><textual class="po-textual">13024</textual></td></tr><tr class="po-table e213 e213"><td class="po-block e214 e214"><textual class="po-textual">epa</textual></td><td class="po-block e215 e215"><textual class="po-textual">json</textual></td><td class="po-block e216 e216"><textual class="po-textual">epa1-full.json</textual></td><td align="right" class="po-block e217 e217"><textual class="po-textual">199025</textual></td><td align="right" class="po-block e218 e218"><textual class="po-textual">14862</textual></td></tr><tr class="po-table e219 e219"><td class="po-block e220 e220"><textual class="po-textual">epa</textual></td><td class="po-block e221 e221"><textual class="po-textual">xml</textual></td><td class="po-block e222 e222"><textual class="po-textual">epa1.xml</textual></td><td align="right" class="po-block e223 e223"><textual class="po-textual">195201</textual></td><td align="right" class="po-block e224 e224"><textual class="po-textual">14591</textual></td></tr><tr class="po-table e225 e225"><td class="po-block e226 e226"><textual class="po-textual">epa</textual></td><td class="po-block e227 e227"><textual class="po-textual">xml</textual></td><td class="po-block e228 e228"><textual class="po-textual">epa2.xml</textual></td><td align="right" class="po-block e229 e229"><textual class="po-textual">192449</textual></td><td align="right" class="po-block e230 e230"><textual class="po-textual">14528</textual></td></tr><tr class="po-table e231 e231"><td class="po-block e232 e232"><textual class="po-textual">epa</textual></td><td class="po-block e233 e233"><textual class="po-textual">xml</textual></td><td class="po-block e234 e234"><textual class="po-textual">epa3.xml</textual></td><td align="right" class="po-block e235 e235"><textual class="po-textual">136813</textual></td><td align="right" class="po-block e236 e236"><textual class="po-textual">12729</textual></td></tr><tr class="po-table e237 e237"><td class="po-block e238 e238"><textual class="po-textual">ndc</textual></td><td class="po-block e239 e239"><textual class="po-textual">json</textual></td><td class="po-block e240 e240"><textual class="po-textual">ndc1-custom.json</textual></td><td align="right" class="po-block e241 e241"><textual class="po-textual">95093</textual></td><td align="right" class="po-block e242 e242"><textual class="po-textual">8503</textual></td></tr><tr class="po-table e243 e243"><td class="po-block e244 e244"><textual class="po-textual">ndc</textual></td><td class="po-block e245 e245"><textual class="po-textual">json</textual></td><td class="po-block e246 e246"><textual class="po-textual">ndc1-full.json</textual></td><td align="right" class="po-block e247 e247"><textual class="po-textual">235603</textual></td><td align="right" class="po-block e248 e248"><textual class="po-textual">9621</textual></td></tr><tr class="po-table e249 e249"><td class="po-block e250 e250"><textual class="po-textual">ndc</textual></td><td class="po-block e251 e251"><textual class="po-textual">xml</textual></td><td class="po-block e252 e252"><textual class="po-textual">ndc1.xml</textual></td><td align="right" class="po-block e253 e253"><textual class="po-textual">176157</textual></td><td align="right" class="po-block e254 e254"><textual class="po-textual">9140</textual></td></tr><tr class="po-table e255 e255"><td class="po-block e256 e256"><textual class="po-textual">ndc</textual></td><td class="po-block e257 e257"><textual class="po-textual">xml</textual></td><td class="po-block e258 e258"><textual class="po-textual">ndc2.xml</textual></td><td align="right" class="po-block e259 e259"><textual class="po-textual">153157</textual></td><td align="right" class="po-block e260 e260"><textual class="po-textual">8952</textual></td></tr><tr class="po-table e261 e261"><td class="po-block e262 e262"><textual class="po-textual">ndc</textual></td><td class="po-block e263 e263"><textual class="po-textual">xml</textual></td><td class="po-block e264 e264"><textual class="po-textual">ndc3.xml</textual></td><td align="right" class="po-block e265 e265"><textual class="po-textual">96087</textual></td><td align="right" class="po-block e266 e266"><textual class="po-textual">8295</textual></td></tr><tr class="po-table e267 e267"><td class="po-block e268 e268"><textual class="po-textual">snomed</textual></td><td class="po-block e269 e269"><textual class="po-textual">json</textual></td><td class="po-block e270 e270"><textual class="po-textual">snomed1-custom.json</textual></td><td align="right" class="po-block e271 e271"><textual class="po-textual">230371</textual></td><td align="right" class="po-block e272 e272"><textual class="po-textual">22665</textual></td></tr><tr class="po-table e273 e273"><td class="po-block e274 e274"><textual class="po-textual">snomed</textual></td><td class="po-block e275 e275"><textual class="po-textual">json</textual></td><td class="po-block e276 e276"><textual class="po-textual">snomed1-full.json</textual></td><td align="right" class="po-block e277 e277"><textual class="po-textual">501577</textual></td><td align="right" class="po-block e278 e278"><textual class="po-textual">25757</textual></td></tr><tr class="po-table e279 e279"><td class="po-block e280 e280"><textual class="po-textual">snomed</textual></td><td class="po-block e281 e281"><textual class="po-textual">xml</textual></td><td class="po-block e282 e282"><textual class="po-textual">snomed1.xml</textual></td><td align="right" class="po-block e283 e283"><textual class="po-textual">405294</textual></td><td align="right" class="po-block e284 e284"><textual class="po-textual">24484</textual></td></tr><tr class="po-table e285 e285"><td class="po-block e286 e286"><textual class="po-textual">snomed</textual></td><td class="po-block e287 e287"><textual class="po-textual">xml</textual></td><td class="po-block e288 e288"><textual class="po-textual">snomed2.xml</textual></td><td align="right" class="po-block e289 e289"><textual class="po-textual">355195</textual></td><td align="right" class="po-block e290 e290"><textual class="po-textual">23853</textual></td></tr><tr class="po-table e291 e291"><td class="po-block e292 e292"><textual class="po-textual">snomed</textual></td><td class="po-block e293 e293"><textual class="po-textual">xml</textual></td><td class="po-block e294 e294"><textual class="po-textual">snomed3.xml</textual></td><td align="right" class="po-block e295 e295"><textual class="po-textual">221409</textual></td><td align="right" class="po-block e296 e296"><textual class="po-textual">22237</textual></td></tr><tr class="po-table e297 e297"><td class="po-block e298 e298"><textual class="po-textual">spl</textual></td><td class="po-block e299 e299"><textual class="po-textual">json</textual></td><td class="po-block e300 e300"><textual class="po-textual">spl1-custom.json</textual></td><td align="right" class="po-block e301 e301"><textual class="po-textual">55762</textual></td><td align="right" class="po-block e302 e302"><textual class="po-textual">10857</textual></td></tr><tr class="po-table e303 e303"><td class="po-block e304 e304"><textual class="po-textual">spl</textual></td><td class="po-block e305 e305"><textual class="po-textual">json</textual></td><td class="po-block e306 e306"><textual class="po-textual">spl1-full.json</textual></td><td align="right" class="po-block e307 e307"><textual class="po-textual">135948</textual></td><td align="right" class="po-block e308 e308"><textual class="po-textual">12398</textual></td></tr><tr class="po-table e309 e309"><td class="po-block e310 e310"><textual class="po-textual">spl</textual></td><td class="po-block e311 e311"><textual class="po-textual">xml</textual></td><td class="po-block e312 e312"><textual class="po-textual">spl1.xml</textual></td><td align="right" class="po-block e313 e313"><textual class="po-textual">99571</textual></td><td align="right" class="po-block e314 e314"><textual class="po-textual">11974</textual></td></tr><tr class="po-table e315 e315"><td class="po-block e316 e316"><textual class="po-textual">spl</textual></td><td class="po-block e317 e317"><textual class="po-textual">xml</textual></td><td class="po-block e318 e318"><textual class="po-textual">spl2.xml</textual></td><td align="right" class="po-block e319 e319"><textual class="po-textual">97965</textual></td><td align="right" class="po-block e320 e320"><textual class="po-textual">11927</textual></td></tr><tr class="po-table e321 e321"><td class="po-block e322 e322"><textual class="po-textual">spl</textual></td><td class="po-block e323 e323"><textual class="po-textual">xml</textual></td><td class="po-block e324 e324"><textual class="po-textual">spl3.xml</textual></td><td align="right" class="po-block e325 e325"><textual class="po-textual">87755</textual></td><td align="right" class="po-block e326 e326"><textual class="po-textual">11262</textual></td></tr><tr class="po-table e327 e327"><td class="po-block e328 e328"><textual class="po-textual">twitter</textual></td><td class="po-block e329 e329"><textual class="po-textual">json</textual></td><td class="po-block e330 e330"><textual class="po-textual">twitter1-custom.json</textual></td><td align="right" class="po-block e331 e331"><textual class="po-textual">715005</textual></td><td align="right" class="po-block e332 e332"><textual class="po-textual">196939</textual></td></tr><tr class="po-table e333 e333"><td class="po-block e334 e334"><textual class="po-textual">twitter</textual></td><td class="po-block e335 e335"><textual class="po-textual">xml</textual></td><td class="po-block e336 e336"><textual class="po-textual">twitter1-full.json</textual></td><td align="right" class="po-block e337 e337"><textual class="po-textual">1056212</textual></td><td align="right" class="po-block e338 e338"><textual class="po-textual">207340</textual></td></tr><tr class="po-table e339 e339"><td class="po-block e340 e340"><textual class="po-textual">twitter</textual></td><td class="po-block e341 e341"><textual class="po-textual">xml</textual></td><td class="po-block e342 e342"><textual class="po-textual">twitter1.xml</textual></td><td align="right" class="po-block e343 e343"><textual class="po-textual">809469</textual></td><td align="right" class="po-block e344 e344"><textual class="po-textual">198325</textual></td></tr><tr class="po-table e345 e345"><td class="po-block e346 e346"><textual class="po-textual">twitter</textual></td><td class="po-block e347 e347"><textual class="po-textual">xml</textual></td><td class="po-block e348 e348"><textual class="po-textual">twitter2.xml</textual></td><td align="right" class="po-block e349 e349"><textual class="po-textual">718016</textual></td><td align="right" class="po-block e350 e350"><textual class="po-textual">195197</textual></td></tr><tr class="po-table e351 e351"><td class="po-block e352 e352"><textual class="po-textual">twitter</textual></td><td class="po-block e353 e353"><textual class="po-textual">xml</textual></td><td class="po-block e354 e354"><textual class="po-textual">twitter3.xml</textual></td><td align="right" class="po-block e355 e355"><textual class="po-textual">700412</textual></td><td align="right" class="po-block e356 e356"><textual class="po-textual">194971</textual></td></tr></table><textual class="po-textual">
                </textual></para></section></section><section class="po-hcontainer e357 e357"><title class="po-block e358 e358"><textual class="po-textual">Methodology and Architecture</textual></title><para class="po-block e359 e359"><textual class="po-textual">The experiment contains a Server, Browser, and Analysis components. The components
                were created using standard open source software and as much as possible designed to
                focus on the attributes being tested and eliminating introduction of bias from
                components which are not related to the test goals.</textual></para><section class="po-hcontainer e360 e360"><title class="po-block e361 e361"><textual class="po-textual">Server</textual></title><para class="po-block e362 e362"><textual class="po-textual">The Server component provides two roles. It serves the source data used by the
                    Client and collects the results submitted by the client.</textual></para><para class="po-block e363 e363"><textual class="po-textual">The Server software used is Apache HTTP server</textual><xref class="po-milestone e364 e364" linkend="Apache"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. Client
                    documents (HTML, CSS, JavaScript and corpus data) are served as static resources
                    to minimize server side variations.  The server is running on an Amazon EC2
                    instance in Virginia, US.</textual></para><para class="po-block e365 e365"><textual class="po-textual">Results from the client are sent back to the server via an HTTP POST. The
                    server runs a CGI script which formats the results and queues them to a message queue.</textual><footnote class="po-popup e366 e366"><para class="po-block e367 e367"><textual class="po-textual">Amazon SQS service was used for the messaging queue </textual><link class="po-inline e368 e368" xlink:actuate="onRequest" xlink:href="http://aws.amazon.com/sqs/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://aws.amazon.com/sqs/</textual></link></para></footnote></para><para class="po-block e369 e369"><textual class="po-textual">A data collection script periodically polls the queue for new results and when
                    it receives one enriches the results by expanding the UserAgent string into
                    sub-components for easier identification of browser and OS versions.</textual><footnote class="po-popup e370 e370"><para class="po-block e371 e371"><textual class="po-textual">The service "user agent info" </textual><link class="po-inline e372 e372" xlink:actuate="onRequest" xlink:href="http://user-agent-string.info/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://user-agent-string.info/</textual></link><textual class="po-textual"> was used for this enrichment.</textual></para></footnote><textual class="po-textual">   The
                    results are then stored locally as an XML file and also published to a database
                    for future analysis.</textual></para><para class="po-block e373 e373"><textual class="po-textual">The mechanism used to report results is independent of the tests themselves,
                    do not affect the test data and could be replaced by other analogous
                    methods.</textual></para><para class="po-block e374 e374"><textual class="po-textual">The only Server component that could affect the tests is the serving of static
                    JSON and XML corpus documents. These are exposed as static resources with HTTP
                    GET, with and without gzip compression enabled.</textual></para></section><section class="po-hcontainer e375 e375"><title class="po-block e376 e376"><textual class="po-textual">Client</textual></title><para class="po-block e377 e377"><textual class="po-textual">The Client is a Browser based JavaScript application. The GUI components of
                    the client were developed using GWT </textual><xref class="po-milestone e378 e378" linkend="GWT"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. The code which performs the measured parts
                    of the tests are hand written JavaScript, with the exception that jQuery</textual><xref class="po-milestone e379 e379" linkend="JQUERY"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> is used
                    for part of the test as indicated.</textual></para><para class="po-block e380 e380"><textual class="po-textual">
                    </textual><figure class="po-container e381 e381" xml:id="ClientApp"><title class="po-block e382 e382"><textual class="po-textual">Client Application</textual></title><mediaobject class="po-container e383 e383"><imageobject class="po-container e384 e384"><imagedata class="po-meta e385 e385" fileref="../../../vol10/graphics/Lee01/Lee01-001.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><textual class="po-textual">
                </textual></para><para class="po-block e386 e386"><textual class="po-textual">On start-up the client requests an index document and shows a list of all files
                    in the corpus, their types and sizes. The user can choose to run tests
                    individually or as a whole.</textual></para><para class="po-block e387 e387"><textual class="po-textual">There is one button which when tapped runs all tests then submits the results
                    to the server via an HTTP POST. The time it takes to load, initialize and update
                    the GUI, and to send the results is not included in the results.</textual></para><para class="po-block e388 e388"><textual class="po-textual">Publicly available data available to the client program (browser) is also
                    included in the results. This data is used to identify the browser and OS of the
                    client.</textual></para><section class="po-hcontainer e389 e389"><title class="po-block e390 e390"><textual class="po-textual">Tests</textual></title><para class="po-block e391 e391"><textual class="po-textual">When the "Run All Tests" button is tapped the following procedure is run.
                        For each of the files in the index the following is performed and
                        individually timed. </textual><itemizedlist class="po-table e392 e392"><listitem class="po-container e393 e393"><para class="po-block e394 e394"><textual class="po-textual">The data file is fetched from the server in raw (not
                                    compressed) format and stored as a string. Where possible the
                                    actual Content-Length is used to update the data size metric for
                                    this file.</textual></para></listitem><listitem class="po-container e395 e395"><para class="po-block e396 e396"><textual class="po-textual">The data file is fetched from the server in compressed (gzip)
                                    format and uncompressed and stored as a string. Where possible
                                    the actual Content-Length is used to update the compressed size
                                    metric for this file.</textual></para></listitem><listitem class="po-container e397 e397"><para class="po-block e398 e398"><textual class="po-textual">The data is parsed into an in memory object. For JSON files
                                    this uses the JavaScript eval() method. For XML files standard
                                    browser methods are used to parse the XML file.</textual></para></listitem><listitem class="po-container e399 e399"><para class="po-block e400 e400"><textual class="po-textual">The object is "Queried". To simulate a consistent query across
                                    the variety of the corpus all nodes of the document are
                                    recursively descended and counted. The number of nodes visited
                                    is recorded along with the elapsed time.</textual></para></listitem><listitem class="po-container e401 e401"><para class="po-block e402 e402"><textual class="po-textual">The data is again parsed into an in memory object. For both
                                    JSON and XML files, jQuery is used to parse the document and
                                    produce a jQuery object.</textual></para></listitem><listitem class="po-container e403 e403"><para class="po-block e404 e404"><textual class="po-textual">The object is "Queried". To simulate a consistent query across
                                    the variety of the corpus all nodes of the jQuery document are
                                    recursively descended and evaluated. The number of nodes visited
                                    is recorded along with the elapsed time.</textual></para></listitem></itemizedlist><textual class="po-textual">
                    </textual></para></section></section></section></section><section class="po-hcontainer e405 e405"><title class="po-block e406 e406"><textual class="po-textual">Results</textual></title><section class="po-hcontainer e407 e407"><title class="po-block e408 e408"><textual class="po-textual">Test Coverage</textual></title><para class="po-block e409 e409"><textual class="po-textual">In addition to a variety of data sources and formats, the experiment attempts to
                cover a range of devices, operating systems, browsers and networks. This is achieved
                by "crowd sourcing". The URL to the test was made public and distributed to a range
                of mailing lists and social media sites including Amazon Mechanical Turk</textual><xref class="po-milestone e410 e410" linkend="TURK"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. Ideally
                this experiment can continue for a long duration so that trends over time can be
                measured.</textual></para><para class="po-block e411 e411"><textual class="po-textual">It is expected that performance varies considerably across devices, especially
                mobile devices, and prior research has largely ignored differences across
                devices.</textual></para><para class="po-block e412 e412"><textual class="po-textual">Only the browser "User Agent" string is used to distinguish browsers, devices and
                operating systems. This makes some measurements impossible such as distinguishing
                between broadband, wifi, 3G, LTE and other networks.</textual></para><para class="po-block e413 e413"><textual class="po-textual">However, even lacking some measurements and precision, seeing the range of
                performance across platforms is still educational and useful.</textual></para><para class="po-block e414 e414"><textual class="po-textual">At the time of this paper approximately 1200 distinct successful tests results
                were collected.</textual></para><section class="po-hcontainer e415 e415"><title class="po-block e416 e416"><textual class="po-textual">Browser Coverage</textual></title><para class="po-block e417 e417"><textual class="po-textual">
                
                </textual><table class="po-container e418 e418"><tr class="po-table e419 e419"><th class="po-field e420 e420" colspan="1" rowspan="1"><textual class="po-textual">name</textual></th><th class="po-field e421 e421" colspan="1" rowspan="1"><textual class="po-textual">count</textual></th></tr><tr class="po-table e422 e422"><td class="po-block e423 e423" colspan="1" rowspan="1"><textual class="po-textual">Chrome</textual></td><td align="right" class="po-block e424 e424" colspan="1" rowspan="1"><textual class="po-textual">423</textual></td></tr><tr class="po-table e425 e425"><td class="po-block e426 e426" colspan="1" rowspan="1"><textual class="po-textual">Firefox</textual></td><td align="right" class="po-block e427 e427" colspan="1" rowspan="1"><textual class="po-textual">277</textual></td></tr><tr class="po-table e428 e428"><td class="po-block e429 e429" colspan="1" rowspan="1"><textual class="po-textual">Mobile Safari</textual></td><td align="right" class="po-block e430 e430" colspan="1" rowspan="1"><textual class="po-textual">148</textual></td></tr><tr class="po-table e431 e431"><td class="po-block e432 e432" colspan="1" rowspan="1"><textual class="po-textual">IE</textual></td><td align="right" class="po-block e433 e433" colspan="1" rowspan="1"><textual class="po-textual">75</textual></td></tr><tr class="po-table e434 e434"><td class="po-block e435 e435" colspan="1" rowspan="1"><textual class="po-textual">Android Webkit</textual></td><td align="right" class="po-block e436 e436" colspan="1" rowspan="1"><textual class="po-textual">75</textual></td></tr><tr class="po-table e437 e437"><td class="po-block e438 e438" colspan="1" rowspan="1"><textual class="po-textual">Safari</textual></td><td align="right" class="po-block e439 e439" colspan="1" rowspan="1"><textual class="po-textual">72</textual></td></tr><tr class="po-table e440 e440"><td class="po-block e441 e441" colspan="1" rowspan="1"><textual class="po-textual">Chrome Mobile</textual></td><td align="right" class="po-block e442 e442" colspan="1" rowspan="1"><textual class="po-textual">57</textual></td></tr><tr class="po-table e443 e443"><td class="po-block e444 e444" colspan="1" rowspan="1"><textual class="po-textual">Opera</textual></td><td align="right" class="po-block e445 e445" colspan="1" rowspan="1"><textual class="po-textual">15</textual></td></tr><tr class="po-table e446 e446"><td class="po-block e447 e447" colspan="1" rowspan="1"><textual class="po-textual">Chromium</textual></td><td align="right" class="po-block e448 e448" colspan="1" rowspan="1"><textual class="po-textual">7</textual></td></tr><tr class="po-table e449 e449"><td class="po-block e450 e450" colspan="1" rowspan="1"><textual class="po-textual">Mobile Firefox</textual></td><td align="right" class="po-block e451 e451" colspan="1" rowspan="1"><textual class="po-textual">4</textual></td></tr><tr class="po-table e452 e452"><td class="po-block e453 e453" colspan="1" rowspan="1"><textual class="po-textual">IceWeasel</textual></td><td align="right" class="po-block e454 e454" colspan="1" rowspan="1"><textual class="po-textual">4</textual></td></tr><tr class="po-table e455 e455"><td class="po-block e456 e456" colspan="1" rowspan="1"><textual class="po-textual">IE Mobile</textual></td><td align="right" class="po-block e457 e457" colspan="1" rowspan="1"><textual class="po-textual">3</textual></td></tr><tr class="po-table e458 e458"><td class="po-block e459 e459" colspan="1" rowspan="1"><textual class="po-textual">Opera Mobile</textual></td><td align="right" class="po-block e460 e460" colspan="1" rowspan="1"><textual class="po-textual">3</textual></td></tr><tr class="po-table e461 e461"><td class="po-block e462 e462" colspan="1" rowspan="1"><textual class="po-textual">Avant Browser</textual></td><td align="right" class="po-block e463 e463" colspan="1" rowspan="1"><textual class="po-textual">2</textual></td></tr><tr class="po-table e464 e464"><td class="po-block e465 e465" colspan="1" rowspan="1"><textual class="po-textual">SeaMonkey</textual></td><td align="right" class="po-block e466 e466" colspan="1" rowspan="1"><textual class="po-textual">2</textual></td></tr><tr class="po-table e467 e467"><td class="po-block e468 e468" colspan="1" rowspan="1"><textual class="po-textual">Epiphany</textual></td><td align="right" class="po-block e469 e469" colspan="1" rowspan="1"><textual class="po-textual">1</textual></td></tr><tr class="po-table e470 e470"><td class="po-block e471 e471" colspan="1" rowspan="1"><textual class="po-textual">Netscape Navigator</textual></td><td align="right" class="po-block e472 e472" colspan="1" rowspan="1"><textual class="po-textual">1</textual></td></tr><tr class="po-table e473 e473"><td class="po-block e474 e474" colspan="1" rowspan="1"><textual class="po-textual">Rekonq</textual></td><td align="right" class="po-block e475 e475" colspan="1" rowspan="1"><textual class="po-textual">1</textual></td></tr><tr class="po-table e476 e476"><td class="po-block e477 e477" colspan="1" rowspan="1"><textual class="po-textual">Konqueror</textual></td><td align="right" class="po-block e478 e478" colspan="1" rowspan="1"><textual class="po-textual">1</textual></td></tr></table><textual class="po-textual">
            </textual></para><para class="po-block e479 e479"><textual class="po-textual">
                </textual><figure class="po-container e480 e480" xml:id="Browsers"><title class="po-block e481 e481"><textual class="po-textual">Browsers Covered</textual></title><mediaobject class="po-container e482 e482"><imageobject class="po-container e483 e483"><imagedata class="po-meta e484 e484" fileref="../../../vol10/graphics/Lee01/Lee01-002.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e485 e485"><para class="po-block e486 e486"><textual class="po-textual">Number of tests suites run on specific browsers</textual></para></caption></figure><textual class="po-textual">
            </textual></para></section><section class="po-hcontainer e487 e487"><title class="po-block e488 e488"><textual class="po-textual">Operating System Coverage</textual></title><para class="po-block e489 e489"><textual class="po-textual">
                </textual><table class="po-container e490 e490"><tr class="po-table e491 e491"><th class="po-field e492 e492" colspan="1" rowspan="1"><textual class="po-textual">OS</textual></th><th class="po-field e493 e493" colspan="1" rowspan="1"><textual class="po-textual">count</textual></th></tr><tr class="po-table e494 e494"><td class="po-block e495 e495" colspan="1" rowspan="1"><textual class="po-textual">Windows 7</textual></td><td align="right" class="po-block e496 e496" colspan="1" rowspan="1"><textual class="po-textual">402</textual></td></tr><tr class="po-table e497 e497"><td class="po-block e498 e498" colspan="1" rowspan="1"><textual class="po-textual">iOS 6</textual></td><td align="right" class="po-block e499 e499" colspan="1" rowspan="1"><textual class="po-textual">138</textual></td></tr><tr class="po-table e500 e500"><td class="po-block e501 e501" colspan="1" rowspan="1"><textual class="po-textual">OS X 10.8 Mountain Lion</textual></td><td align="right" class="po-block e502 e502" colspan="1" rowspan="1"><textual class="po-textual">136</textual></td></tr><tr class="po-table e503 e503"><td class="po-block e504 e504" colspan="1" rowspan="1"><textual class="po-textual">Windows XP</textual></td><td align="right" class="po-block e505 e505" colspan="1" rowspan="1"><textual class="po-textual">70</textual></td></tr><tr class="po-table e506 e506"><td class="po-block e507 e507" colspan="1" rowspan="1"><textual class="po-textual">Linux</textual></td><td align="right" class="po-block e508 e508" colspan="1" rowspan="1"><textual class="po-textual">69</textual></td></tr><tr class="po-table e509 e509"><td class="po-block e510 e510" colspan="1" rowspan="1"><textual class="po-textual">Android 4.1.x Jelly Bean</textual></td><td align="right" class="po-block e511 e511" colspan="1" rowspan="1"><textual class="po-textual">48</textual></td></tr><tr class="po-table e512 e512"><td class="po-block e513 e513" colspan="1" rowspan="1"><textual class="po-textual">Linux (Ubuntu)</textual></td><td align="right" class="po-block e514 e514" colspan="1" rowspan="1"><textual class="po-textual">46</textual></td></tr><tr class="po-table e515 e515"><td class="po-block e516 e516" colspan="1" rowspan="1"><textual class="po-textual">Android 4.2 Jelly Bean</textual></td><td align="right" class="po-block e517 e517" colspan="1" rowspan="1"><textual class="po-textual">39</textual></td></tr><tr class="po-table e518 e518"><td class="po-block e519 e519" colspan="1" rowspan="1"><textual class="po-textual">Windows 8</textual></td><td align="right" class="po-block e520 e520" colspan="1" rowspan="1"><textual class="po-textual">38</textual></td></tr><tr class="po-table e521 e521"><td class="po-block e522 e522" colspan="1" rowspan="1"><textual class="po-textual">OS X 10.7 Lion</textual></td><td align="right" class="po-block e523 e523" colspan="1" rowspan="1"><textual class="po-textual">36</textual></td></tr><tr class="po-table e524 e524"><td class="po-block e525 e525" colspan="1" rowspan="1"><textual class="po-textual">OS X 10.6 Snow Leopard</textual></td><td align="right" class="po-block e526 e526" colspan="1" rowspan="1"><textual class="po-textual">33</textual></td></tr><tr class="po-table e527 e527"><td class="po-block e528 e528" colspan="1" rowspan="1"><textual class="po-textual">Android 4.0.x Ice Cream Sandwich</textual></td><td align="right" class="po-block e529 e529" colspan="1" rowspan="1"><textual class="po-textual">32</textual></td></tr><tr class="po-table e530 e530"><td class="po-block e531 e531" colspan="1" rowspan="1"><textual class="po-textual">iOS 5</textual></td><td align="right" class="po-block e532 e532" colspan="1" rowspan="1"><textual class="po-textual">20</textual></td></tr><tr class="po-table e533 e533"><td class="po-block e534 e534" colspan="1" rowspan="1"><textual class="po-textual">Android 2.3.x Gingerbread</textual></td><td align="right" class="po-block e535 e535" colspan="1" rowspan="1"><textual class="po-textual">18</textual></td></tr><tr class="po-table e536 e536"><td class="po-block e537 e537" colspan="1" rowspan="1"><textual class="po-textual">Windows Vista</textual></td><td align="right" class="po-block e538 e538" colspan="1" rowspan="1"><textual class="po-textual">17</textual></td></tr><tr class="po-table e539 e539"><td class="po-block e540 e540" colspan="1" rowspan="1"><textual class="po-textual">Android</textual></td><td align="right" class="po-block e541 e541" colspan="1" rowspan="1"><textual class="po-textual">8</textual></td></tr><tr class="po-table e542 e542"><td class="po-block e543 e543" colspan="1" rowspan="1"><textual class="po-textual">Android 2.2.x Froyo</textual></td><td align="right" class="po-block e544 e544" colspan="1" rowspan="1"><textual class="po-textual">5</textual></td></tr><tr class="po-table e545 e545"><td class="po-block e546 e546" colspan="1" rowspan="1"><textual class="po-textual">FreeBSD</textual></td><td align="right" class="po-block e547 e547" colspan="1" rowspan="1"><textual class="po-textual">3</textual></td></tr><tr class="po-table e548 e548"><td class="po-block e549 e549" colspan="1" rowspan="1"><textual class="po-textual">Windows Phone 8</textual></td><td align="right" class="po-block e550 e550" colspan="1" rowspan="1"><textual class="po-textual">3</textual></td></tr><tr class="po-table e551 e551"><td class="po-block e552 e552" colspan="1" rowspan="1"><textual class="po-textual">Windows RT</textual></td><td align="right" class="po-block e553 e553" colspan="1" rowspan="1"><textual class="po-textual">2</textual></td></tr><tr class="po-table e554 e554"><td class="po-block e555 e555" colspan="1" rowspan="1"><textual class="po-textual">OS X 10.5 Leopard</textual></td><td align="right" class="po-block e556 e556" colspan="1" rowspan="1"><textual class="po-textual">2</textual></td></tr><tr class="po-table e557 e557"><td class="po-block e558 e558" colspan="1" rowspan="1"><textual class="po-textual">iOS</textual></td><td align="right" class="po-block e559 e559" colspan="1" rowspan="1"><textual class="po-textual">1</textual></td></tr><tr class="po-table e560 e560"><td class="po-block e561 e561" colspan="1" rowspan="1"><textual class="po-textual">Linux (CentOS)</textual></td><td align="right" class="po-block e562 e562" colspan="1" rowspan="1"><textual class="po-textual">1</textual></td></tr><tr class="po-table e563 e563"><td class="po-block e564 e564" colspan="1" rowspan="1"><textual class="po-textual">Linux (Fedora)</textual></td><td align="right" class="po-block e565 e565" colspan="1" rowspan="1"><textual class="po-textual">1</textual></td></tr><tr class="po-table e566 e566"><td class="po-block e567 e567" colspan="1" rowspan="1"><textual class="po-textual">iOS 7</textual></td><td align="right" class="po-block e568 e568" colspan="1" rowspan="1"><textual class="po-textual">1</textual></td></tr><tr class="po-table e569 e569"><td class="po-block e570 e570" colspan="1" rowspan="1"><textual class="po-textual">OS X</textual></td><td align="right" class="po-block e571 e571" colspan="1" rowspan="1"><textual class="po-textual">1</textual></td></tr><tr class="po-table e572 e572"><td class="po-block e573 e573" colspan="1" rowspan="1"><textual class="po-textual">Solaris</textual></td><td align="right" class="po-block e574 e574" colspan="1" rowspan="1"><textual class="po-textual">1</textual></td></tr></table><textual class="po-textual">
            </textual></para><para class="po-block e575 e575"><textual class="po-textual">
                </textual><figure class="po-container e576 e576" xml:id="OSs"><title class="po-block e577 e577"><textual class="po-textual">Operating Systems Covered</textual></title><mediaobject class="po-container e578 e578"><imageobject class="po-container e579 e579"><imagedata class="po-meta e580 e580" fileref="../../../vol10/graphics/Lee01/Lee01-003.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e581 e581"><para class="po-block e582 e582"><textual class="po-textual">Number of tests suites run on specific Operating Systems</textual></para></caption></figure><textual class="po-textual">
            </textual></para></section></section><section class="po-hcontainer e583 e583"><title class="po-block e584 e584"><textual class="po-textual">Data Sizes</textual></title><para class="po-block e585 e585"><textual class="po-textual">XML is inherently larger then than JSON. This is known as 'obviously true' due to
                several factors inherent to XML markup. </textual><itemizedlist class="po-table e586 e586"><listitem class="po-container e587 e587"><para class="po-block e588 e588"><textual class="po-textual">The end tags of XML duplicate data in the start tags making the total
                            text longer.</textual></para></listitem><listitem class="po-container e589 e589"><para class="po-block e590 e590"><textual class="po-textual">Namespaces, prefixes, entities, comments, PI's and other XML features
                            add bloat not present in JSON.</textual></para></listitem><listitem class="po-container e591 e591"><para class="po-block e592 e592"><textual class="po-textual">JSON has a direct concise representation for arrays which XML does
                            not.</textual></para></listitem></itemizedlist><textual class="po-textual"> These are all reasonable presumptions, but how much do these things
                contribute to data sizes? In real use how much difference does it make? One of the
                features of modern markup is that we sacrifice some compactness in exchange for
                readability and usability.  If the most important goal was compact size we would be
                using specialized binary formats.   In any case let's look at the actual
                measurements from the corpus. For the most part size is a static feature of the data
                files themselves, although this can be affected somewhat by the transmission
                protocol. Experimentation has shown that overwhelmingly the static data size is very
                close to the HTTP transmitted size of anything but very tiny documents. HTTP does
                add a little variable overhead such as chunked encoding and headers, but this is
                very small. The gzip compression available in HTTP 1.1 has been shown to be equal in
                size to using the "gzip" command. For the purposes of Data Size we shall examine the
                static size of the documents on disk. All documents are stored in UTF-8 encoding as
                plain text files. </textual></para><para class="po-block e593 e593"><textual class="po-textual">As we can see from </textual><xref class="po-milestone e594 e594" linkend="FileSizeFigure"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and </textual><xref class="po-milestone e595 e595" linkend="FileSizeTable"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, for each data set the XML and JSON file size can vary
                significantly depending on the formatting choices used. However, if one carefully
                chooses a formatting style to minimize size then XML and JSON come very close with
                XML smaller in some cases and JSON in others. Looking at the compressed sizes of the
                files in </textual><xref class="po-milestone e596 e596" linkend="FileSizeCompressFigure"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> we can see that the file sizes are
                very close </textual><emphasis class="po-inline e597 e597" role="ital"><textual class="po-textual">regardless</textual></emphasis><textual class="po-textual"> of formatting style.</textual></para><para class="po-block e598 e598"><textual class="po-textual">
                </textual><figure class="po-container e599 e599" xml:id="FileSizeFigure"><title class="po-block e600 e600"><textual class="po-textual">Corpus File Sizes </textual></title><mediaobject class="po-container e601 e601"><imageobject class="po-container e602 e602"><imagedata class="po-meta e603 e603" fileref="../../../vol10/graphics/Lee01/Lee01-004.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e604 e604"><para class="po-block e605 e605"><textual class="po-textual">Compressed and uncompressed file sizes</textual></para></caption></figure><textual class="po-textual">
            </textual></para><para class="po-block e606 e606"><textual class="po-textual">
                </textual><figure class="po-container e607 e607" xml:id="FileSizeCompressFigure"><title class="po-block e608 e608"><textual class="po-textual">Compressed File Sizes </textual></title><mediaobject class="po-container e609 e609"><imageobject class="po-container e610 e610"><imagedata class="po-meta e611 e611" fileref="../../../vol10/graphics/Lee01/Lee01-005.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e612 e612"><para class="po-block e613 e613"><textual class="po-textual">Compressed file sizes (excluding twitter data)</textual></para></caption></figure><textual class="po-textual">
            </textual></para></section><section class="po-hcontainer e614 e614"><title class="po-block e615 e615"><textual class="po-textual">Data Transmission Speed</textual></title><para class="po-block e616 e616"><textual class="po-textual">The predominant factors influencing data transmission speed are the size of the
                data transmitted and the network speed. In addition, processing speed of the client
                (browser) and server have some influence as well as packet losses and other internet
                related issues. Mobile networks generally have significantly higher latency so are
                more affected by packet loss and retransmission.</textual></para><para class="po-block e617 e617"><textual class="po-textual">This experiment focuses on measuring end to end speeds of HTTP from server to
                browser using uncompressed and HTTP gzip compression across a range of devices and
                browsers. It does not attempt to examine the root causes of network bandwidth and
                traffic.</textual></para><para class="po-block e618 e618"><textual class="po-textual">The range of devices and networks produces a large scatter of transmission speeds.
                While the trend is that uncompressed and compressed data are fairly linear with
                respect to bytes transferred there are a lot of outliers. Note that each mark
                represents the same base document requested uncompressed then compressed via HTTP.
                If network speed was identical for both then the marks would have x and y values
                equal, forming a tight line.  Rather we see significant amount of outliers.</textual></para><para class="po-block e619 e619"><textual class="po-textual">Transmission Speed</textual><figure class="po-container e620 e620" xml:id="NetSpeed"><mediaobject class="po-container e621 e621"><imageobject class="po-container e622 e622"><imagedata class="po-meta e623 e623" fileref="../../../vol10/graphics/Lee01/Lee01-006.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e624 e624"><para class="po-block e625 e625"><textual class="po-textual">Transmission time in bytes/sec for Compressed (x) vs Raw (y)</textual></para></caption></figure></para></section><section class="po-hcontainer e626 e626"><title class="po-block e627 e627"><textual class="po-textual">Parsing Speed</textual></title><para class="po-block e628 e628"><textual class="po-textual">So far we have dealt with markup agnostic metrics. It doesn’t take any more or less
                time to transfer the same number of JSON bytes as XML bytes. Parsing is a different
                matter. This experiment tests two variants of parsing for each JSON and XML. The
                first variant is to use standard low level JavaScript methods for parsing. The other
                variant is to use a common library (jQuery). The code for parsing was hand written
                JavaScript and corresponds to what seems "best practice" in web programming
                today.</textual></para><figure class="po-container e629 e629" xml:id="jsonparse1"><title class="po-block e630 e630"><textual class="po-textual">JSON Parsing using native JavaScript</textual></title><programlisting class="po-block e631 e631" xml:space="preserve"><textual class="po-textual">          
  eval('(' + responseString + ')');
</textual></programlisting></figure><figure class="po-container e632 e632" xml:id="jsonparse2"><title class="po-block e633 e633"><textual class="po-textual">JSON Parsing using jQuery</textual></title><programlisting class="po-block e634 e634" xml:space="preserve"><textual class="po-textual">	            
   $wnd.jQuery.parseJSON( responseString );
</textual></programlisting></figure><figure class="po-container e635 e635" xml:id="xmlparse1"><title class="po-block e636 e636"><textual class="po-textual">XML Parsing using native JavaScript</textual></title><programlisting class="po-block e637 e637" xml:space="preserve"><textual class="po-textual">function getIEParser() {
    try { return new ActiveXObject("Msxml2.DOMDocument"); } catch (e) { }
    try { return new ActiveXObject("MSXML.DOMDocument"); } catch (e) { }
    try { return new ActiveXObject("MSXML3.DOMDocument"); } catch (e) { }
    try { return new ActiveXObject("Microsoft.XmlDom"); } catch (e) { }
    try { return new ActiveXObject("Microsoft.DOMDocument"); } catch (e) { }
            
    throw new Error("XMLParserImplIE6.createDocumentImpl: Could not find appropriate version of DOMDocument.");
};
if ($wnd.DOMParser){
    parser=new DOMParser();
    xmlDoc=parser.parseFromString(responseString,"text/xml");
}
else // Internet Explorer
{
    xmlDoc=  getIEParser();
    xmlDoc.async=false;
    xmlDoc.loadXML(txt); 
}
return xmlDoc ;
</textual></programlisting></figure><figure class="po-container e638 e638" xml:id="xmlparse2"><title class="po-block e639 e639"><textual class="po-textual">XML Parsing using jQuery</textual></title><programlisting class="po-block e640 e640" xml:space="preserve"><textual class="po-textual">	            
 $wnd.jQuery.parseXML( responseString );
</textual></programlisting></figure><para class="po-block e641 e641"><textual class="po-textual">
                </textual><figure class="po-container e642 e642" xml:id="JavascriptParse"><title class="po-block e643 e643"><textual class="po-textual">Parsing speed using JavaScript in seconds vs file size</textual></title><mediaobject class="po-container e644 e644"><imageobject class="po-container e645 e645"><imagedata class="po-meta e646 e646" fileref="../../../vol10/graphics/Lee01/Lee01-007.png" format="png" width="75%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e647 e647"><para class="po-block e648 e648"><textual class="po-textual">Parses time in seconds for native JavaScript (y) vs size of raw
                            document in bytes (x).</textual></para></caption></figure><textual class="po-textual">
            </textual></para><para class="po-block e649 e649"><textual class="po-textual">
                </textual><figure class="po-container e650 e650" xml:id="JQueryParse"><title class="po-block e651 e651"><textual class="po-textual">Parsing speed using jQuery in seconds vs file size</textual></title><mediaobject class="po-container e652 e652"><imageobject class="po-container e653 e653"><imagedata class="po-meta e654 e654" fileref="../../../vol10/graphics/Lee01/Lee01-008.png" format="png" width="75%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e655 e655"><para class="po-block e656 e656"><textual class="po-textual">Parses time in seconds for jQuery (y) vs size of raw document in bytes
                            (x).</textual></para></caption></figure><textual class="po-textual">
            </textual></para></section><section class="po-hcontainer e657 e657"><title class="po-block e658 e658"><textual class="po-textual">Query Speed</textual></title><para class="po-block e659 e659"><textual class="po-textual">Testing query across markup languages and a diverse corpus is tricky to achieve
                without bias. For the purposes of this experiment I postulate that the purpose of
                loading the document (JSON or XML) is to use all of it's data in some form.</textual></para><para class="po-block e660 e660"><textual class="po-textual">Therefore to simulate a fair "query" I perform a recursive decent of the parsed
                object's document model and count every node. There are certainly many other equally
                good definitions of "query" but I wanted to have a similar test across all the
                corpus that has a reasonable relevance to typical use cases.</textual></para><para class="po-block e661 e661"><textual class="po-textual">The following listings show the JavaScript code for a recursive decent query of
                all nodes in the document. It is very interesting to the author that despite popular
                opinion the code for JSON and XML are extremely similar. XML has attributes which
                adds a few lines of code but otherwise it's effectively the same amount of
                programming to recurse and examine a JSON object and an XML object in JavaScript and
                jQuery. XML adds about 4 lines of JavaScript to handle attributes in both the
                JavaScript and jQuery case, but other than that the code is nearly identical.</textual></para><figure class="po-container e662 e662" xml:id="jsonquery1"><title class="po-block e663 e663"><textual class="po-textual">JSON Query using native JavaScript</textual></title><programlisting class="po-block e664 e664" xml:space="preserve"><textual class="po-textual">	            
var n = 0;
var walk = function(o){
  if( o == null || typeof(o) == "undefined" ) 
     return;
  n++;
 
  for(var prop in o){
    n++;
    if(o.hasOwnProperty(prop)){
      var val = o[prop];

      if(typeof val == 'object'){
          walk(val);
      }            
    }
     else
        var val = o ;
  }
};

walk( this );
return n; 
</textual></programlisting></figure><figure class="po-container e665 e665" xml:id="jsonquery2"><title class="po-block e666 e666"><textual class="po-textual">JSON Query using jQuery</textual></title><programlisting class="po-block e667 e667" xml:space="preserve"><textual class="po-textual">	            
var n = 0;
var walk = function( o )
{
    if( o == null || typeof(o) == "undefined")
        return ;
    n++;
    $wnd.jQuery.each(o, function(key, value) {
      if( value != null &amp;&amp; typeof(value) == "object" )
           walk( value )
}
walk(this);
return n;
        
 </textual></programlisting></figure><figure class="po-container e668 e668" xml:id="xmlquery1"><title class="po-block e669 e669"><textual class="po-textual">XML Query using native JavaScript</textual></title><programlisting class="po-block e670 e670" xml:space="preserve"><textual class="po-textual">	            
var n =0;
var walk = function( o )
{
    if( o == null || typeof(o) == "undefined" )
       return ;  
    n++;
    if( o.attributes != null &amp;&amp; typeof(  o.attributes) != "undefined" )
        for( var x = 0; x &lt;  o.attributes.length; x++ ) {
            n++;
        }
    if(  o.childNodes != null &amp;&amp; typeof(  o.childNodes) != "undefined" )
        for( var x = 0; x &lt;  o.childNodes.length; x++ ) {
            walk(  o.childNodes[x] ); 
        }
}
walk(this);
return n;
 </textual></programlisting></figure><figure class="po-container e671 e671" xml:id="xmlquery2"><title class="po-block e672 e672"><textual class="po-textual">XML Query using jQuery</textual></title><programlisting class="po-block e673 e673" xml:space="preserve"><textual class="po-textual">	            
var n = 0;
var walk = function( o )
{
    if( o == null || typeof(o) == "undefined" )
       return ;
    n++;
    $wnd.jQuery( o).children().each( function( ) {
        n++ ;
        walk( this );      
    })
    var a = o.attributes;
    if( a != null &amp;&amp; typeof(a) != "undefined" )
        $wnd.jQuery(a).each( function() {
         n++;
    })
}
walk(this);
return n;       
 </textual></programlisting></figure><para class="po-block e674 e674"><textual class="po-textual">Taking a look at the query times however, JSON clearly has an advantage over XML
                in pure query times. jQuery clearly imposes a significant penalty on XML query but
                it also imposes a huge penalty on JSON query.</textual></para><para class="po-block e675 e675"><textual class="po-textual">
                </textual><figure class="po-container e676 e676" xml:id="JavascriptQuery2"><title class="po-block e677 e677"><textual class="po-textual">Query speed using JavaScript in seconds vs file size</textual></title><mediaobject class="po-container e678 e678"><imageobject class="po-container e679 e679"><imagedata class="po-meta e680 e680" fileref="../../../vol10/graphics/Lee01/Lee01-009.png" format="png" width="75%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e681 e681"><para class="po-block e682 e682"><textual class="po-textual">Query speed in seconds (y) using pure JavaScript vs file size
                            (x).</textual></para></caption></figure><textual class="po-textual">
            </textual></para><para class="po-block e683 e683"><textual class="po-textual">
                </textual><figure class="po-container e684 e684" xml:id="JQueryParse2"><title class="po-block e685 e685"><textual class="po-textual">Query speed using jQuery in seconds vs file size</textual></title><mediaobject class="po-container e686 e686"><imageobject class="po-container e687 e687"><imagedata class="po-meta e688 e688" fileref="../../../vol10/graphics/Lee01/Lee01-010.png" format="png" width="75%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e689 e689"><para class="po-block e690 e690"><textual class="po-textual">Query speed in seconds using jQuery (y) vs file size (x).</textual></para></caption></figure><textual class="po-textual">
            </textual></para></section><section class="po-hcontainer e691 e691"><title class="po-block e692 e692"><textual class="po-textual">Putting it together</textual></title><para class="po-block e693 e693"><textual class="po-textual">So far we have looked at pieces of the entire work-flow - network speed, parsing
                and query. Putting it all together what does it look like? Lets assume the developer
                has chosen the most compact form for each document (JSON and XML), presuming that
                would also be the most efficient form. What performance can we see across all
                devices, OS's and browsers tested ? The following figures show the full time for
                each test using only the most compact form of each document, tested using pure
                JavaScript and jQuery, both compressed and uncompressed HTTP transfers.</textual></para><para class="po-block e694 e694"><textual class="po-textual">The results are somewhat surprising. It's not a great surprise that jQuery adds a
                significant performance penalty, but it is a surprise that across all ranges of
                platforms that the total time for JSON and XML using native JavaScript is
                effectively identical. Compare </textual><xref class="po-milestone e695 e695" linkend="FullJS"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and </textual><xref class="po-milestone e696 e696" linkend="FullJSCompress"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. This is still looking at the whole forest and not
                the trees, but it is surprising to the author that there appears to be no
                significant performance penalty using XML over JSON in pure JavaScript. However,
                jQuery does impose a significant performance penalty to both JSON and XML, much more
                so for XML.</textual></para><para class="po-block e697 e697"><textual class="po-textual">
                </textual><figure class="po-container e698 e698" xml:id="FullJS"><title class="po-block e699 e699"><textual class="po-textual">Complete time uncompressed in pure JavaScript in seconds vs file
                        size</textual></title><mediaobject class="po-container e700 e700"><imageobject class="po-container e701 e701"><imagedata class="po-meta e702 e702" fileref="../../../vol10/graphics/Lee01/Lee01-011.png" format="png" width="75%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e703 e703"><para class="po-block e704 e704"><textual class="po-textual">Total time uncompressed in seconds. (transmission + parse + query) in
                            pure Javascript (y) vs raw document size (x)</textual></para></caption></figure><textual class="po-textual">
            </textual></para><para class="po-block e705 e705"><textual class="po-textual">
                </textual><figure class="po-container e706 e706" xml:id="FullJQ"><title class="po-block e707 e707"><textual class="po-textual">Complete time uncompressed in jQuery in seconds vs file size</textual></title><mediaobject class="po-container e708 e708"><imageobject class="po-container e709 e709"><imagedata class="po-meta e710 e710" fileref="../../../vol10/graphics/Lee01/Lee01-012.png" format="png" width="75%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e711 e711"><para class="po-block e712 e712"><textual class="po-textual">Total time uncompressed in seconds (transmission + parse + query) in
                            jQuery (y) vs raw document size (x)</textual></para></caption></figure><textual class="po-textual">
            </textual></para><para class="po-block e713 e713"><textual class="po-textual">
                </textual><figure class="po-container e714 e714" xml:id="FullJSCompress"><title class="po-block e715 e715"><textual class="po-textual">Complete time gzip in JavaScript in seconds vs file size</textual></title><mediaobject class="po-container e716 e716"><imageobject class="po-container e717 e717"><imagedata class="po-meta e718 e718" fileref="../../../vol10/graphics/Lee01/Lee01-013.png" format="png" width="75%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e719 e719"><para class="po-block e720 e720"><textual class="po-textual">Total time gzip compressed in seconds (transmission + parse + query)
                            in pure JavaScript (y) vs raw document size (x)</textual></para></caption></figure><textual class="po-textual">
            </textual></para><para class="po-block e721 e721"><textual class="po-textual">
                </textual><figure class="po-container e722 e722" xml:id="FullJQCompress"><title class="po-block e723 e723"><textual class="po-textual">Complete time gzip in jQuery in seconds vs file size</textual></title><mediaobject class="po-container e724 e724"><imageobject class="po-container e725 e725"><imagedata class="po-meta e726 e726" fileref="../../../vol10/graphics/Lee01/Lee01-014.png" format="png" width="75%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e727 e727"><para class="po-block e728 e728"><textual class="po-textual">Total time gzip compressed in seconds (transmission + parse + query)
                            in jQuery (y) vs raw document size (x)</textual></para></caption></figure><textual class="po-textual">
            </textual></para></section><section class="po-hcontainer e729 e729"><title class="po-block e730 e730"><textual class="po-textual">Pulling it apart</textual></title><para class="po-block e731 e731"><textual class="po-textual">It is interesting to see how everything adds up, but so far we've seen the forest
                not the trees. What does it look like for a particular user? Where is time spent for
                a specific document on a particular browser and OS?</textual></para><para class="po-block e732 e732"><textual class="po-textual">Since the experiment collects data from such a wide variety of systems it's
                difficult to show a meaningful view of this. Averages and even percentiles mean very
                little when looking at data that spans orders of magnitude. Instead lets look at a
                couple typical test results which might help make sense of the big picture.</textual></para><para class="po-block e733 e733"><textual class="po-textual">The following are the total of median times (median(data transfer) + median(parse)
                + median(query)) for the most compact form of the Twitter document in both JSON and
                XML using both pure JavaScript and jQuery across all browsers. These results span
                across a variety of devices, some browsers are obvious if they are mobile or desktop
                and some are not obvious.</textual></para><para class="po-block e734 e734"><textual class="po-textual">In the following charts, the vertical axis is time in seconds (more is slower),
                and the horizontal axis represents one combination of  "User Agent" + either JSON or
                XML (for every user agent there is two columns of data).    Network transfer time is
                indicated as blue.  Parsing time is indicated as red. Query time is indicated as
                green.</textual></para><para class="po-block e735 e735"><textual class="po-textual">
                </textual><figure class="po-container e736 e736" xml:id="TwitterJS_Raw"><title class="po-block e737 e737"><textual class="po-textual">Browser Processing Speed, Uncompressed, JavaScript</textual></title><mediaobject class="po-container e738 e738"><imageobject class="po-container e739 e739"><imagedata class="po-meta e740 e740" fileref="../../../vol10/graphics/Lee01/Lee01-015.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e741 e741"><para class="po-block e742 e742"><textual class="po-textual">Median total times in seconds (y) for Twitter document, raw file using
                            JavaScript vs. user agent (y). User Agent is often a proxy for device type.</textual></para></caption></figure><textual class="po-textual">
            </textual></para><para class="po-block e743 e743"><textual class="po-textual">In </textual><xref class="po-milestone e744 e744" linkend="TwitterJS_Raw"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> we can see that the total time is dominated by
                network transmission time.   Mobile browsers such as Android Webkit, IE Mobile  and
                Opera Mobile take more time in the parsing and query layer probably due to their
                slower CPU.</textual></para><para class="po-block e745 e745"><textual class="po-textual">
                </textual><figure class="po-container e746 e746" xml:id="TwitterJQ_Raw"><title class="po-block e747 e747"><textual class="po-textual">Browser Processing Speed, Uncompressed, jQuery</textual></title><mediaobject class="po-container e748 e748"><imageobject class="po-container e749 e749"><imagedata class="po-meta e750 e750" fileref="../../../vol10/graphics/Lee01/Lee01-016.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e751 e751"><para class="po-block e752 e752"><textual class="po-textual">Median total times in seconds (y) for Twitter document, raw file using
                            jQuery vs. user agent (y).   User Agent is often a proxy for device
                            type.</textual></para></caption></figure><textual class="po-textual">
            </textual></para><para class="po-block e753 e753"><textual class="po-textual"> In </textual><xref class="po-milestone e754 e754" linkend="TwitterJQ_Raw"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">  notice the change in the vertical access to
                accomidate for large time spent in query and parse on some devices.   Network time
                remains the same but in many more cases are parse and query time a larger
                contributor.</textual></para><para class="po-block e755 e755"><textual class="po-textual">
                </textual><figure class="po-container e756 e756" xml:id="TwitterJS_Compressed"><title class="po-block e757 e757"><textual class="po-textual">Browser Processing Speed, Compressed, JavaScript</textual></title><mediaobject class="po-container e758 e758"><imageobject class="po-container e759 e759"><imagedata class="po-meta e760 e760" fileref="../../../vol10/graphics/Lee01/Lee01-017.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e761 e761"><para class="po-block e762 e762"><textual class="po-textual">Median total times in seconds (y) for Twitter document, compressed
                            using JavaScript vs User Agent (y). User Agent is often a proxy for device type.</textual></para></caption></figure><textual class="po-textual">
            </textual></para><para class="po-block e763 e763"><textual class="po-textual">In </textual><xref class="po-milestone e764 e764" linkend="TwitterJS_Compressed"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> notice the change in vertical axis.  The total time is dramatically smaller revealing the relative times for parse and query being a larger portion of the total time, especially on mobile devices.</textual></para><para class="po-block e765 e765"><textual class="po-textual">
                </textual><figure class="po-container e766 e766" xml:id="TwitterJQ_Compressed"><title class="po-block e767 e767"><textual class="po-textual">Browser Processing Speed, Compressed, jQuery</textual></title><mediaobject class="po-container e768 e768"><imageobject class="po-container e769 e769"><imagedata class="po-meta e770 e770" fileref="../../../vol10/graphics/Lee01/Lee01-018.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e771 e771"><para class="po-block e772 e772"><textual class="po-textual">Median total times in seconds (y) for Twitter document, compressed using jQuery vs User Agent (y). User Agent is often a proxy for device type.</textual></para></caption></figure><textual class="po-textual">
            </textual></para><para class="po-block e773 e773"><textual class="po-textual">In </textual><xref class="po-milestone e774 e774" linkend="TwitterJQ_Compressed"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> we can see the impact of using jQuery on mobile devices especially for XML.</textual></para></section></section><section class="po-hcontainer e775 e775"><title class="po-block e776 e776"><textual class="po-textual">Problems and Issues</textual></title><para class="po-block e777 e777"><textual class="po-textual">The topic in general and the experiment in particular are difficult issues to address.
            The topic itself is "slippery". How does one address a generalized concept where the
            basis is ill defined and the generalization is hazy?  What is trying to be proved? The
            experiment only addresses a few questions from a huge range of possibilities.</textual></para><para class="po-block e778 e778"><textual class="po-textual">Focusing on the experiment itself there are many specific issues which could be improved and should be addressed in future experiments.</textual></para><para class="po-block e779 e779"><itemizedlist class="po-table e780 e780"><listitem class="po-container e781 e781"><para class="po-block e782 e782"><textual class="po-textual">Browser Focused</textual></para><para class="po-block e783 e783"><textual class="po-textual">The experiments and this paper focus specifically on the use case of data
                        sent from a "Server" and parsed and queried in a "Browser".  There is no
                        testing of server based processing of data. The language in the browser is
                        limited to JavaScript which has very limited choice of technologies so there
                        was no testing of different libraries, languages and technologies.</textual></para><para class="po-block e784 e784"><textual class="po-textual">Additional experiments involving server to server communications would be
                        useful to collaborate the findings and expand on the range of
                        analysis.</textual></para></listitem><listitem class="po-container e785 e785"><para class="po-block e786 e786"><textual class="po-textual">Browser Errors</textual></para><para class="po-block e787 e787"><textual class="po-textual">The nature of the client program is such that server errors are not
                        reported. If things go wrong in the client then no record is reported. Only
                        by out of band information have I discovered issues such as individuals who
                        were not able to run the test. For example IE versions 8 and below were
                        particularly problematic and reports indicate it would stop part way through
                        the test. Future experiments should have a means of better reporting of
                        errors.   </textual></para><para class="po-block e788 e788"><textual class="po-textual">In addition approximately 1% of the results showed meaningless data most
                        likely a result of a browser error.  An example is tests that report
                        negative times or file sizes.  These tests were excluded from the
                        analysis.</textual></para></listitem><listitem class="po-container e789 e789"><para class="po-block e790 e790"><textual class="po-textual">Limited Corpus</textual></para><para class="po-block e791 e791"><textual class="po-textual">The Corpus was designed to span a wide range of use cases, but ultimately any sample set of data is limited and biased.  Future experiments could improve on the variety and focus on if different types of data perform differently.</textual></para></listitem><listitem class="po-container e792 e792"><para class="po-block e793 e793"><textual class="po-textual">Simplistic parsing tests</textual></para><para class="po-block e794 e794"><textual class="po-textual">The parsing test does not attempt to do very much with the data besides
                        walk the parsed tree. More complex tests could be performed that attempt to
                        do something with the data such as create new objects or search for specific
                        values. I choose this test as a bare minimum that could be universally
                        applied to the entire corpus but acknowledge that it could be biased in that
                        it does very little with the parsed data so may not reflective of real world
                        use cases.</textual></para></listitem><listitem class="po-container e795 e795"><para class="po-block e796 e796"><textual class="po-textual">Too Much Data</textual></para><para class="po-block e797 e797"><textual class="po-textual">This experiment produced a lot of data. Compared to many scientific
                        experiments the data size is trivial, but for the purposes of distilling
                        down a few basic principles the amount and variety of test results is
                        daunting especially in its variety. On the other hand, more data is better
                        than less and this experiment improves on many attempts to categorize markup
                        performance in browsers. I am hopeful that the experiment can run for a long
                        duration so that ongoing analysis can be performed. The raw data will be
                        provided for those who wish to analyze it themselves.</textual></para></listitem><listitem class="po-container e798 e798"><para class="po-block e799 e799"><textual class="po-textual">Statistical Analysis</textual></para><para class="po-block e800 e800"><textual class="po-textual">This paper focuses more on showing the range of results with visualizations and trends rather
                        than traditional statistical analysis. However this seems less scientific
                        and exact then ideal. Many more visualizations and analysis would be useful
                        but are limited by forum of publication and time, imagination and skills of
                        the author. Suggestions on improvement of the analytics and visualizations
                        are greatly welcome. </textual></para></listitem><listitem class="po-container e801 e801"><para class="po-block e802 e802"><textual class="po-textual">Crowd Sourcing</textual></para><para class="po-block e803 e803"><textual class="po-textual">Due to a lack of an army of volunteers and a vast personal collection of
                        hardware, crowd-sourcing was used to enlist participation. This produced a
                        good number of responses (about 650 as of this writing) but is likely to
                        include self-selected bias. The distribution channel for the solicitation
                        and people who volunteered to run the tests may well not be a statistically
                        good sample set. Future experiments should focus on getting a wider range of
                        people to perform tests.</textual></para></listitem><listitem class="po-container e804 e804"><para class="po-block e805 e805"><textual class="po-textual">Mechanical Turk</textual></para><para class="po-block e806 e806"><textual class="po-textual">In order to acquire more test samples, Amazon "Mechanical Turk"</textual><xref class="po-milestone e807 e807" linkend="TURK"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> was employed to hire additional testers focusing on
                        mobile devices. This added about 500 additional responses in a 3 day period
                        at an average cost of 15 cents (USD) / test. </textual></para></listitem></itemizedlist></para></section><section class="po-hcontainer e808 e808"><title class="po-block e809 e809"><textual class="po-textual">Conclusions</textual></title><para class="po-block e810 e810"><textual class="po-textual">We have shown that many of the presumptions of "Fat XML", while well imagined, do not
            hold up to experiment. Given the same document object, one can produce nearly identical
            sized JSON and XML representations. Network transfer speed is directly related to the
            document size so is unaffected by the markup given similar size. Compressed documents in
            all formats even very "Fat" representations of JSON or XML compress to nearly identical
            size which is an indicator that they contain approximately the same entropy or
            information content and transferring these documents to a wide variety of devices takes
            effectively the same time per device. Parsing speed varies on the technique used. Pure
            JavaScript parsing generally performs better with XML then with JSON but not always,
            while Query speed generally is faster for JSON, but again, not always. Overall using
            native JavaScript the use of XML and JSON is essentially identical performance for total
            user experience (transfer plus parse plus query), however use of the popular JavaScript
            library jQuery imposes a steep penalty on both JSON and XML, more-so for XML. </textual><footnote class="po-popup e811 e811"><para class="po-block e812 e812"><textual class="po-textual">Experiments comparing different JavaScript libraries would be useful to see if
                    jQuery is unique or is representative of JavaScript query libraries in
                    general.</textual></para></footnote></para><para class="po-block e813 e813"><textual class="po-textual">From a programming perspective accessing both JSON and XML in a generic fashion, using
            either pure JavaScript or jQuery is very similar in complexity and difficulty. Not shown
            is the advantage of accessing JSON objects as JavaScript objects using "dot notation"
            which provides a programming advantage, however the evolution towards using query
            languages to access JSON (or XML) such as jQuery largely negates that advantage. Future
            enhancements in JavaScript libraries and cross compilation technologies (such as
                CoffeeScript</textual><xref class="po-milestone e814 e814" linkend="COFFEESCRIPT"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, GWT and Dart</textual><xref class="po-milestone e815 e815" linkend="DART"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) may
            well equalize these discrepancies but that is yet to be seen. The fact that hand-coded
            JavaScript query of XML can perform as well as query over JSON does suggest that
            libraries such as jQuery could be optimized for similar performance and especially cross
            compilers should be able to achieve similar performance. On the other-hand, the wide
            adoption of JavaScript libraries even in the face of significant performance degradation
            even for JSON suggests that developers are not as concerned about performance
            considerations over ease of programming.  This may be because the data layer of the
            application is small compared to the other components of the application such as GUI and
            business logic.</textual></para><para class="po-block e816 e816"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></para><section class="po-hcontainer e817 e817"><title class="po-block e818 e818"><textual class="po-textual">Suggestions to Architects and Developers</textual></title><para class="po-block e819 e819"><textual class="po-textual">Architects and developers who are seriously interested in maximizing performance should consider the following.</textual></para><itemizedlist class="po-table e820 e820"><listitem class="po-container e821 e821"><para class="po-block e822 e822"><textual class="po-textual">Use HTTP Compression</textual></para><para class="po-block e823 e823"><textual class="po-textual">The use of HTTP compression, regardless of the device, operating system, browser or markup
                        language is the biggest factor in total performance, and by inference, user
                        experience. Use of HTTP Compression should be used in most cases where large
                        amounts of data is being transferred from server to client. The exception is
                        that in some cases under powered devices can actually perform slower with
                        compressed data then uncompressed data. If you are targeting low end mobile
                        devices then using your own tests to validate customer experience is
                        suggested.</textual></para></listitem><listitem class="po-container e824 e824"><para class="po-block e825 e825"><textual class="po-textual">Optimize your markup</textual></para><para class="po-block e826 e826"><textual class="po-textual">Optimizing markup for transmission and query provides a second order
                        performance enhancement. Sometimes this is at the cost of usability.
                        Compression effectively eliminates the advantages of optimized markup for
                        transmission purposes, but parsing and query times are affected by the
                        particulars of the markup form. Choosing the right balance between ease of
                        programming and transmission should be seriously considered. If your target
                        is specific known devices then optimizing for those devices may be
                        beneficial. How you intend to use the data once it is turned into JavaScript
                        objects is also an important consideration. Using a library like jQuery
                        eliminates the preconceived advantage of native "dot notation" for
                        JavaScript (using JSON) but adds loose binding, query, search and often
                        performance degradation.</textual></para></listitem><listitem class="po-container e827 e827"><para class="po-block e828 e828"><textual class="po-textual">Use optimized libraries or hand coded JavaScript.</textual></para><para class="po-block e829 e829"><textual class="po-textual">Use of libraries to ease development effort can have a significant
                        performance penalty. This penalty is in general much greater than the
                        penalty of which markup format you are using. If performance is your most
                        important factor then avoiding unoptimized libraries will be your biggest
                        performance gain regardless of the markup format. Look to the future for
                        this issue to be improved. If more developers prioritize performance then
                        library and cross compilation vendors are likely to focus more on
                        performance. In any case your choice of a parsing and query library are by
                        far the biggest performance factor beyond compression, much more so than the
                        markup format. Look to Cross Compilation technologies such as GWT and Blink
                        to provide machine optimized JavaScript code much like the compilers for C,
                        C++ and Java do for non browser environments. </textual></para></listitem><listitem class="po-container e830 e830"><para class="po-block e831 e831"><textual class="po-textual">Know your users.</textual></para><para class="po-block e832 e832"><textual class="po-textual">Performance varies *vastly* across browsers, operating systems and
                        devices. If you know your users and their platforms you can make better
                        choices about which technologies and formats to use. But be aware that
                        implementations change frequently and what is efficient today may be slow
                        tomorrow and visa-versa so optimizing too tightly for particular devices may
                        be detrimental in the future.  Mobile devices are particularly prone to
                        differences in performance but are often hard to optimize because the
                        biggest hit is network speed which is usually not under the programmers
                        control. However programming for minimum network usage will provide the best
                        advantage for mobile devices. Use of HTML local storage, JavaScript based
                        applications which avoid passing page markup and instead pass data and allow
                        page transitions to be performed without a round trip to the server are
                        likely going to provide good user experience. </textual></para></listitem><listitem class="po-container e833 e833"><para class="po-block e834 e834"><textual class="po-textual">Markup doesn’t matter.</textual></para><para class="po-block e835 e835"><textual class="po-textual">The choice of JSON vs XML is nearly indistinguishable from a performance
                        perspective. There are a few outliers (such as Mobile and Desktop Firefox
                        using jQuery) where there is a notable difference but as time goes on and
                        vendors pay attention to user feedback I expect these differences to be
                        reduced. But for most uses the difference in markup choice will result in
                        little or no user noticeable difference in performance and end user
                        experience. There are significant browser architectural changes coming such
                        as HTML5 and Chrome Blink </textual><xref class="po-milestone e836 e836" linkend="BLINK"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. We don’t know what
                        performance changes these will incur but evidence suggests that performance
                        in the browser is a main goal of new browser technologies.  Looking to the
                        future the landscape may change.</textual></para></listitem><listitem class="po-container e837 e837"><para class="po-block e838 e838"><textual class="po-textual">Markup Matters</textual></para><para class="po-block e839 e839"><textual class="po-textual">Contrary to myth, performance varies very little with different markup formats in current
                        devices and software. However the shape and ease of use of markup formats
                        can matter for developers (both client and server). As can be seen with the
                        use of libraries such as jQuery, performance is often trivially tossed away
                        in exchange for ease of programming - even with JSON. Sometimes that is a
                        reasonable tradeoff.  </textual><footnote class="po-popup e840 e840"><para class="po-block e841 e841"><textual class="po-textual"> It is interesting to the author that the use of libraries like
                                jQuery entirely eliminate the native advantage in JavaScript of
                                using JSON as the data format ("dot notation"), add significant
                                processing overhead and yet is strongly promoted while XML usage is
                                discouraged under the guise of it not mapping well to native
                                JavaScript data structures and its slow performance. Compare the
                                jQuery code for JSON and XML and you can see the programming
                                difference is nearly indistinguishable. </textual></para></footnote><textual class="po-textual">
                    </textual></para><para class="po-block e842 e842"><textual class="po-textual">Engineering is about balancing compromises. Make the compromise that
                        maters to you, your product, your business and your customers. If
                        performance matters to you and your applications - do what it takes to
                        achieve maximum performance. If it doesn’t matter then use whatever
                        technology is easiest for you. Often the "you" is many people in an
                        organization or across organizations. If its harder for the producer of data
                        to change formats then work with them to use their format. If its harder for
                        the consumer to change formats then work with the producers to produce the
                        format the consumer needs.</textual></para><para class="po-block e843 e843"><textual class="po-textual">In any case make this decision based on facts not myth. </textual></para></listitem><listitem class="po-container e844 e844"><para class="po-block e845 e845"><textual class="po-textual">Is Data really your problem ?</textual></para><para class="po-block e846 e846"><textual class="po-textual">This paper focuses exclusively on data transmission, parsing and querying.
                        It may well be that in your application that component is a small piece
                        compared to display and business logic. If the data layer is not a
                        significant part of your performance or development problem then it may not
                        be worth the effort to optimize it. As your application evolves your data
                        use may change so always be open to re-evaluating decisions made early in
                        the design process.</textual></para></listitem><listitem class="po-container e847 e847"><para class="po-block e848 e848"><textual class="po-textual">Don’t Trust Anyone</textual></para><para class="po-block e849 e849"><textual class="po-textual">Don’t believe blindly what you are told. Perform experiments, test your
                        own data and code with your own users and devices.  What "seems obvious" is
                        not always true.</textual></para><para class="po-block e850 e850"><textual class="po-textual">As always with engineering; experiment, develop, test. And test
                        again.</textual></para><para class="po-block e851 e851"><textual class="po-textual">The source code and data corpus is published at </textual><link class="po-inline e852 e852" xlink:actuate="onRequest" xlink:href="https://code.google.com/p/jsonxmlspeed/" xlink:show="new" xlink:type="simple"><textual class="po-textual">https://code.google.com/p/jsonxmlspeed/</textual></link><textual class="po-textual">. The raw results for
                        this experiment will be published along with this paper for peer review.
                        Test it. Dispute it. Come up with better tests and publish the
                        results.</textual></para><para class="po-block e853 e853"><textual class="po-textual"> It is hoped that an ongoing interactive web site will be developed to
                        continue to track, analyze, and monitor this research.</textual></para></listitem></itemizedlist></section></section><bibliography class="po-hcontainer e854 e854"><title class="po-block e855 e855"><textual class="po-textual">References</textual></title><bibliomixed class="po-block e856 e856" xml:id="AJAX1" xreflabel="AJAX Performance"><textual class="po-textual">AJAX - JSON vs. XML </textual><link class="po-inline e857 e857" xlink:actuate="onRequest" xlink:href="http://www.navioo.com/ajax/ajax_json_xml_Benchmarking.php" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.navioo.com/ajax/ajax_json_xml_Benchmarking.php</textual></link></bibliomixed><bibliomixed class="po-block e858 e858" xml:id="XMLJSON1" xreflabel="XML vs JSON"><textual class="po-textual">Edward A. Webb, XML vs JSON </textual><link class="po-inline e859 e859" xlink:actuate="onRequest" xlink:href="http://www.edwardawebb.com/tips/xml-json" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.edwardawebb.com/tips/xml-json</textual></link></bibliomixed><bibliomixed class="po-block e860 e860" xml:id="JSONLIGHT" xreflabel="JSONLIGHT"><textual class="po-textual">janu bajaj, My Open Source Initiative </textual><link class="po-inline e861 e861" xlink:actuate="onRequest" xlink:href="http://bajajblog123.blogspot.com/2012/07/json.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://bajajblog123.blogspot.com/2012/07/json.html</textual></link></bibliomixed><bibliomixed class="po-block e862 e862" xml:id="XMLFAT" xreflabel="XMLFAT"><textual class="po-textual">Douglas Crockford, 2006; JSON: The Fat-Free Alternative to XML </textual><link class="po-inline e863 e863" xlink:actuate="onRequest" xlink:href="http://www.json.org/fatfree.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.json.org/fatfree.html</textual></link></bibliomixed><bibliomixed class="po-block e864 e864" xml:id="MISCONCEPTION" xreflabel="MISCONCEPTION"><textual class="po-textual">Dr. Steven Novella; </textual><link class="po-inline e865 e865" xlink:actuate="onRequest" xlink:href="http://tech.groups.yahoo.com/group/skeptic/message/30893" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://tech.groups.yahoo.com/group/skeptic/message/30893</textual></link></bibliomixed><bibliomixed class="po-block e866 e866" xml:id="Saxon" xreflabel="Saxon"><textual class="po-textual">Saxon XSLT and XQuery Processor </textual><link class="po-inline e867 e867" xlink:actuate="onRequest" xlink:href="http://www.saxonica.com" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.saxonica.com</textual></link></bibliomixed><bibliomixed class="po-block e868 e868" xml:id="BLINK" xreflabel="Blink"><textual class="po-textual">Chrome Blink </textual><link class="po-inline e869 e869" xlink:actuate="onRequest" xlink:href="http://www.theverge.com/2013/4/3/4180260/google-forks-webkit-with-new-blink-rendering-engine-for-chrome" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.theverge.com/2013/4/3/4180260/google-forks-webkit-with-new-blink-rendering-engine-for-chrome
        </textual></link></bibliomixed><bibliomixed class="po-block e870 e870" xml:id="GWT" xreflabel="GWT"><textual class="po-textual">Google Web Toolkit </textual><link class="po-inline e871 e871" xlink:actuate="onRequest" xlink:href="https://developers.google.com/web-toolkit/" xlink:show="new" xlink:type="simple"><textual class="po-textual">https://developers.google.com/web-toolkit/</textual></link></bibliomixed><bibliomixed class="po-block e872 e872" xml:id="JQUERY" xreflabel="jQuery"><textual class="po-textual">jQueryt </textual><link class="po-inline e873 e873" xlink:actuate="onRequest" xlink:href="http://jquery.com/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://jquery.com/</textual></link></bibliomixed><bibliomixed class="po-block e874 e874" xml:id="COFFEESCRIPT" xreflabel="CoffeScript"><textual class="po-textual">CoffeeScript </textual><link class="po-inline e875 e875" xlink:actuate="onRequest" xlink:href="http://coffeescript.org/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://coffeescript.org/</textual></link></bibliomixed><bibliomixed class="po-block e876 e876" xml:id="DART" xreflabel="DART"><textual class="po-textual">DART </textual><link class="po-inline e877 e877" xlink:actuate="onRequest" xlink:href="http://www.dartlang.org/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.dartlang.org/</textual></link></bibliomixed><bibliomixed class="po-block e878 e878" xml:id="TURK" xreflabel="Mechanical Turk"><textual class="po-textual">Mechanical Turk </textual><link class="po-inline e879 e879" xlink:actuate="onRequest" xlink:href="https://www.mturk.com/mturk/" xlink:show="new" xlink:type="simple"><textual class="po-textual">https://www.mturk.com/mturk/</textual></link></bibliomixed><bibliomixed class="po-block e880 e880" xml:id="Apache" xreflabel="Apache"><textual class="po-textual">Apache HTTPD server </textual><link class="po-inline e881 e881" xlink:actuate="onRequest" xlink:href="http://httpd.apache.org/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://httpd.apache.org/</textual></link></bibliomixed></bibliography></article></classedDocument>