<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.3"><title class="po-block e1 e1"><textual class="po-textual">Modeling overlapping structures</textual></title><subtitle class="po-block e2 e2"><textual class="po-textual">Graphs and serializability</textual></subtitle><info class="po-record e3 e3"><confgroup class="po-record e4 e4"><conftitle class="po-field e5 e5"><textual class="po-textual">Balisage: The Markup Conference 2013</textual></conftitle><confdates class="po-field e6 e6"><textual class="po-textual">August 6 - 9, 2013</textual></confdates></confgroup><abstract class="po-container e7 e7"><para class="po-block e8 e8"><textual class="po-textual">The problem of overlapping structures has long been familiar to the
      structured document community. In a poem, for example, the verse and line
      structures overlap, and having them both available simultaneously is
      convenient, and sometimes necessary (for example for automatic analyses).
      However, only structures that embed nicely can be represented directly in
      XML. Proposals to address this problem include XML solutions (based
      essentially on a layer of semantics) and non-XML ones. Among the latter is
      TexMecs </textual><xref class="po-milestone e9 e9" linkend="HS2003"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, a markup language that allows overlap
      (and many other features).</textual></para><para class="po-block e10 e10"><textual class="po-textual">XML documents, when viewed as graphs, correspond to trees. Marcoux </textual><xref class="po-milestone e11 e11" linkend="M2008"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> characterized overlap-only TexMecs documents by
      showing that they correspond exactly to </textual><emphasis class="po-inline e12 e12" role="ital"><textual class="po-textual">completion-acyclic node-ordered directed acyclic graphs</textual></emphasis><textual class="po-textual">.
      In this paper, we elaborate on that result in two ways.</textual></para><para class="po-block e13 e13"><textual class="po-textual">First, we cast it in the setting of a strictly larger class of graphs,
      </textual><emphasis class="po-inline e14 e14" role="ital"><textual class="po-textual">child-arc-ordered directed graphs</textual></emphasis><textual class="po-textual">, that
      includes multi-graphs and non-acyclic graphs, and show that —
      somewhat surprisingly — it does not hold in general for graphs with
      multiple roots. Second, we formulate a stronger condition, </textual><emphasis class="po-inline e15 e15" role="ital"><textual class="po-textual">full-completion-acyclicity</textual></emphasis><textual class="po-textual">, that guarantees
      correspondence with an overlap-only document, even for graphs that have
      multiple roots.</textual></para><para class="po-block e16 e16"><textual class="po-textual">The definition of fully-completion-acyclic graph does not in itself
      suggest an efficient algorithm for checking the condition, nor for
      computing a corresponding overlap-only document when the condition is
      satisfied. We present basic polynomial-time upper bounds on the complexity
      of accomplishing those tasks.</textual></para></abstract><author class="po-record e17 e17"><personname class="po-record e18 e18"><firstname class="po-field e19 e19"><textual class="po-textual">Yves</textual></firstname><surname class="po-field e20 e20"><textual class="po-textual">Marcoux</textual></surname></personname><personblurb class="po-container e21 e21"><para class="po-block e22 e22"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></para></personblurb><affiliation class="po-record e23 e23"><jobtitle class="po-field e24 e24"><textual class="po-textual">Associate professor</textual></jobtitle><orgname class="po-block e25 e25"><textual class="po-textual">Université de Montréal, Canada</textual></orgname></affiliation><email class="po-field e26 e26"><textual class="po-textual">yves.marcoux@umontreal.ca</textual></email></author><author class="po-record e27 e27"><personname class="po-record e28 e28"><firstname class="po-field e29 e29"><textual class="po-textual">Michael</textual></firstname><surname class="po-field e30 e30"><textual class="po-textual">Sperberg-McQueen</textual></surname></personname><personblurb class="po-container e31 e31"><para class="po-block e32 e32"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></para></personblurb><affiliation class="po-record e33 e33"><jobtitle class="po-field e34 e34"><textual class="po-textual">Senior consultant</textual></jobtitle><orgname class="po-block e35 e35"><textual class="po-textual">Black Mesa
      Technologies</textual></orgname></affiliation><email class="po-field e36 e36"><textual class="po-textual">cmsmcq@blackmesatech.com</textual></email></author><author class="po-record e37 e37"><personname class="po-record e38 e38"><firstname class="po-field e39 e39"><textual class="po-textual">Claus</textual></firstname><surname class="po-field e40 e40"><textual class="po-textual">Huitfeldt</textual></surname></personname><personblurb class="po-container e41 e41"><para class="po-block e42 e42"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></para></personblurb><affiliation class="po-record e43 e43"><jobtitle class="po-field e44 e44"><textual class="po-textual">Associate professor</textual></jobtitle><orgname class="po-block e45 e45"><textual class="po-textual">University of Bergen, Norway</textual></orgname></affiliation><email class="po-field e46 e46"><textual class="po-textual">claus.huitfeldt@uib.no</textual></email></author><legalnotice class="po-container e47 e47"><para class="po-block e48 e48"><textual class="po-textual">Copyright © 2013 by the authors.  Used with permission.</textual></para></legalnotice></info><section class="po-hcontainer e49 e49"><title class="po-block e50 e50"><textual class="po-textual">1. Motivation and related work</textual></title><section class="po-hcontainer e51 e51"><title class="po-block e52 e52"><textual class="po-textual">1.1. Graphs and documents</textual></title><para class="po-block e53 e53"><textual class="po-textual">Many operations are more conveniently performed on a graph
	representation than on a linear representation of a marked up
	document, and vice versa. One of the strengths of XML is that
	XML documents in serial form are readily deserialized into
	ordered trees, which form a convenient data structure for many
	useful operations.</textual><footnote class="po-popup e54 e54"><para class="po-block e55 e55"><textual class="po-textual">The authors thank Deborah A. Lapeyre and several 
	    anonymous Balisage peer reviewers for their extensive
	    help in improving the presentation of this paper.
	  </textual></para></footnote><textual class="po-textual">
      </textual></para><para class="po-block e56 e56"><textual class="po-textual">So-called “XML trees” are directed acyclic
	graphs with single parenthood and a total ordering on leaf
	nodes. While this constitutes an intuitively natural and
	generally suitable model for the representation of the
	structure of most documents, and for most purposes, it also
	poses a challenge for the representation of complex structures
	such as overlapping, fragmented or disordered document
	elements, and multiple co-existing alternative structures,
	which allow for a more natural representation of complex
	documents in a wide range of situations.</textual></para><para class="po-block e57 e57"><textual class="po-textual">For such purposes, a different kind of graph
	representation has been proposed, the so-called Goddag </textual><xref class="po-milestone e58 e58" linkend="SH2004"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. Roughly, Goddags (</textual><emphasis class="po-inline e59 e59" role="ital"><textual class="po-textual">General Ordered-Descendant Directed Acyclic
	  Graphs</textual></emphasis><textual class="po-textual">) are like XML trees except that they allow
	multiple parenthood and do not require a total ordering on
	leaf nodes. (Thus, XML trees constitute a subset of
	Goddags.)</textual></para><para class="po-block e60 e60"><textual class="po-textual">Documents using different techniques for representing such
	structures in XML form (e.g., milestones, fragmentation,
	virtual elements, etc.  </textual><xref class="po-milestone e61 e61" linkend="B1995"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> </textual><xref class="po-milestone e62 e62" linkend="SH1999"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> </textual><xref class="po-milestone e63 e63" linkend="W2005"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) can be mapped onto
	Goddags, though not without application-specific mechanisms
	typically involving levels of indirection which may appear
	cumbersome. The experimental markup system TexMecs </textual><xref class="po-milestone e64 e64" linkend="HS2003"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> offers mechanisms for the representation of
	complex structures which can be mapped on to Goddags
	independently of such knowledge.</textual></para><para class="po-block e65 e65"><textual class="po-textual">Since its introduction, the Goddag data structure has
	frequently been cited, and it is used as a reference in
	various works on overlap. (For example, Moore </textual><xref class="po-milestone e66 e66" linkend="M2012"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">
	studied Goddags in the context of access control, and
	introduced the notion of </textual><emphasis class="po-inline e67 e67"><textual class="po-textual">globally ordered
	  Goddag</textual></emphasis><textual class="po-textual">.) However, the original description of
	Goddags is rather informal, and exhibits the kinds of gaps,
	vaguenesses, and ambiguities that have, over time, given
	informality a bad name among mathematicians and others
	interested in firm results.</textual></para><para class="po-block e68 e68"><textual class="po-textual">For example, it was </textual><textual class="po-textual"> conjectured that a
	linearized document which made use, in addition to the
	mechanisms of XML, only of markup for overlapping elements,
	could be represented by a Goddag with a total order on leaf
	nodes (so-called </textual><emphasis class="po-inline e69 e69" role="ital"><textual class="po-textual">restricted</textual></emphasis><textual class="po-textual">
	Goddags), but no proofs were given of this fact. The paper was
	silent and its authors agnostic about the serializability of
	graphs with multiple roots, and the relationship between Goddags
	and markup in terms of serializability was not systematically
	investigated. In </textual><xref class="po-milestone e70 e70" linkend="HS2003"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, it was assumed, but
	no attempt was made to prove, that all TexMecs documents could
	be represented as Goddags, or that all Goddags could be
	serialized as TexMecs documents. The present paper is a modest
	contribution towards straightening up the situation, by way of a
	systematic study of the fine point of the complex relationship
	between markup formalisms like TexMecs and graph structures like
	Goddags.</textual></para></section><section class="po-hcontainer e71 e71"><title class="po-block e72 e72"><textual class="po-textual">1.2. The problem of serialization</textual></title><para class="po-block e73 e73"><textual class="po-textual">The general problem is this: whenever a markup system (be it
	XML, TexMecs, or another system) provides more than one way to
	represent a given abstract structure,</textual><footnote class="po-popup e74 e74"><para class="po-block e75 e75"><textual class="po-textual">We focus here exclusively on graphs as the abstract
	    structures conveyed by marked up documents.</textual></para></footnote><textual class="po-textual"> 
	that same abstract structure can be written out again
	(serialized) in more than one way.  Can we control the
	serialization process to provide the marked-up forms we find
	easiest to work with at a given moment?  Can we tell, by
	inspection of a given graph, what serialization formats are
	possible for the graph?  In many cases, a marked up form using
	overlapping elements, seems to at least some observers to be the
	most </textual><quote class="po-inline e76 e76"><textual class="po-textual">natural</textual></quote><textual class="po-textual"> representation of a given document;
	when can a graph be serialized using overlap alone, and when
	does it require use of the more powerful mechanisms of virtual
	or discontinuous elements?
      </textual></para><para class="po-block e77 e77"><textual class="po-textual">A concrete example may help illustrate the point.</textual></para><para class="po-block e78 e78"><textual class="po-textual">

	In the following fragment (adapted from </textual><xref class="po-milestone e79 e79" linkend="D2004"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">), the </textual><code class="po-atom e80 e80"><textual class="po-textual">verse</textual></code><textual class="po-textual"> elements are
	empty milestones marking the beginning and end of verses, in
	</textual><quote class="po-inline e81 e81"><textual class="po-textual">Trojan Horse</textual></quote><textual class="po-textual"> style markup.  A Goddag structure
	representing this fragment would have nodes for the verses,
	but those nodes do not correspond one to one with XML elements
	in this serialization:</textual><footnote class="po-popup e82 e82"><para class="po-block e83 e83"><textual class="po-textual">A number of other equivalent encodings are of
	    course possible.  The </textual><code class="po-atom e84 e84"><textual class="po-textual">q</textual></code><textual class="po-textual"> elements can be fragmented
	    in TEI style to signal that multiple XML elements together
	    make up a single logical unit.  In a Goddag structure built
	    from this example, one would expect to find one node in the
	    graph for each logical </textual><code class="po-atom e85 e85"><textual class="po-textual">q</textual></code><textual class="po-textual"> element, rather one for
	    each </textual><code class="po-atom e86 e86"><textual class="po-textual">q</textual></code><textual class="po-textual"> element in the XML.
	    
      </textual><programlisting class="po-block e87 e87" xml:space="preserve"><textual class="po-textual">&lt;div xmlns="http://www.tei-c.org/ns/1.0"&gt;
  &lt;p&gt;
    &lt;verse n="Jer.2.1"&gt;Moreover the word 
      of the LORD came to me, saying,&lt;/verse&gt;
    &lt;verse n="Jer.2.2"&gt;
      &lt;q xml:id="Q-Jer.2.2-A" part="I"&gt;
	Go and cry in the hearing of 
	Jerusalem, saying, 
        &lt;q xml:id="Q-Jer.2.2-B" part="I"&gt;
	  Thus says the LORD:
          &lt;q xml:id="Q-Jer.2.2-C" part="I"&gt;
	    I remember you, 
            The kindness of your youth, 
	    The love of your betrothal, 
	    When you went after Me in the wilderness, 
	    In a land not sown. 
	  &lt;/q&gt;
        &lt;/q&gt;
      &lt;/q&gt;
    &lt;/verse&gt;
    &lt;verse n="Jer.2.3"&gt;
      &lt;q part="M" prev="#Q-Jer.2.2-A"&gt;
        &lt;q part="F" prev="#Q-Jer.2.2-B"&gt;
          &lt;q part="F" prev="#Q-Jer.2.2-C"&gt;
	    Israel [was] holiness to the LORD, 
	    The firstfruits of His increase.  
	    All that devour him will offend;
	    Disaster will come upon them,
	  &lt;/q&gt;
	  says the LORD.
	&lt;/q&gt;
      &lt;/q&gt;
    &lt;/verse&gt;
  &lt;/p&gt;
&lt;/div&gt;
</textual></programlisting></para><para class="po-block e88 e88"><textual class="po-textual">Or the </textual><code class="po-atom e89 e89"><textual class="po-textual">verse</textual></code><textual class="po-textual"> elements can be fragmented.
	    Or TEI virtual elements can be used to represent parts of
	    the document structure that do not fit neatly into a 
	    hierarchy.</textual></para></footnote><textual class="po-textual">

      </textual><programlisting class="po-block e90 e90" xml:space="preserve"><textual class="po-textual">&lt;div xmlns="http://www.tei-c.org/ns/1.0"&gt;
  &lt;p&gt;
    &lt;verse xml:id="Jer.2.1"/&gt;
    Moreover the word of the LORD 
    came to me, saying,
    &lt;verse eID="#Jer.2.1"/&gt;
    &lt;q n="Q-Jer.2.2-A"&gt;
      &lt;verse xml:id="Jer.2.2"/&gt;
      Go and cry in the
      hearing of Jerusalem, saying,
      &lt;q n="Q-Jer.2.2-B"&gt;
	Thus says the LORD:
	&lt;q n="Q-Jer.2.2-C"&gt;
	  I remember you, 
	  The kindness of your youth, 
	  The love of your betrothal, 
	  When you went after Me in the wilderness, 
	  In a land not sown.
	  &lt;verse eID="#Jer.2.2"/&gt;
	  &lt;verse xml:id="Jer.2.3"/&gt;
	  Israel [was] holiness to the LORD, 
	  The firstfruits of His increase.  
	  All that devour him will offend; 
	  Disaster will come upon them,
	&lt;/q&gt;
	&lt;!--True Close Q-Jer.2.2-C--&gt;
      says the LORD.&lt;/q&gt;
      &lt;verse eID="#Jer.2.3"/&gt;
      &lt;!--* ... *--&gt;
    &lt;/q&gt;
  &lt;/p&gt;
&lt;/div&gt;</textual></programlisting><textual class="po-textual">      
      </textual></para><para class="po-block e91 e91"><textual class="po-textual">The same Goddag structure can also be serialized in an extended
	form of TexMecs notation.</textual><footnote class="po-popup e92 e92"><para class="po-block e93 e93"><textual class="po-textual">Readers who have not recently reviewed the definition
	    of TexMecs may need to be reminded of some basics of 
	    TexMecs notation.  The conventions used here are these;
	    most are adopted from </textual><xref class="po-milestone e94 e94" linkend="HS2003"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> but
	    bilocation tags are new; they are introduced in order to
	    allow the serialization of a larger class of graphs.
	    </textual><itemizedlist class="po-table e95 e95"><listitem class="po-container e96 e96"><para class="po-block e97 e97"><textual class="po-textual">Start-, end-, and sole-tags for an element 
		  of type </textual><code class="po-atom e98 e98"><textual class="po-textual">e</textual></code><textual class="po-textual"> take the
		  forms </textual><code class="po-atom e99 e99"><textual class="po-textual">&lt;e|</textual></code><textual class="po-textual">, </textual><code class="po-atom e100 e100"><textual class="po-textual">|e&gt;</textual></code><textual class="po-textual">
		  </textual><code class="po-atom e101 e101"><textual class="po-textual">&lt;e&gt;</textual></code><textual class="po-textual">.</textual></para></listitem><listitem class="po-container e102 e102"><para class="po-block e103 e103"><textual class="po-textual">Elements may overlap.</textual></para></listitem><listitem class="po-container e104 e104"><para class="po-block e105 e105"><textual class="po-textual">A unique identifier may be assigned to an
		  element by following its generic identifier immediately
		  with </textual><code class="po-atom e106 e106"><textual class="po-textual">@</textual></code><textual class="po-textual"> and an ID value.  These IDs are
		  recognized and handled at the TexMecs level; they do 
		  not require declaration or application-level
		  semantics.
		</textual></para></listitem><listitem class="po-container e107 e107"><para class="po-block e108 e108"><textual class="po-textual">The generic identifier may be omitted from
		  start- and end-tags, in which case they mark a
		  pseduo-element: an arbitrary portion of the
		  document, typically marked this way in order to
		  assign an identifier to that segment of the text.
		  In the examples in this paper, we assume a
		  convention that wrapping a text node in such an
		  </textual><quote class="po-inline e109 e109"><textual class="po-textual">anonymous</textual></quote><textual class="po-textual"> element does not create a
		  new node but merely gives an identifier for the text
		  node.  (This is not stated normatively in the
		  definition of TexMecs.)
		</textual></para></listitem><listitem class="po-container e110 e110"><para class="po-block e111 e111"><textual class="po-textual">
		  The notation </textual><code class="po-atom e112 e112"><textual class="po-textual">&lt;^e^xyz&gt;</textual></code><textual class="po-textual"> marks a
		  </textual><quote class="po-inline e113 e113"><textual class="po-textual">virtual element</textual></quote><textual class="po-textual">, whose type is
		  </textual><code class="po-atom e114 e114"><textual class="po-textual">e</textual></code><textual class="po-textual"> and whose children are those of the element
		  whose ID is </textual><code class="po-atom e115 e115"><textual class="po-textual">xyz</textual></code><textual class="po-textual">.  Virtual elements thus
		  serve as additional parents to nodes already
		  present with other parents.
		</textual></para><para class="po-block e116 e116"><textual class="po-textual">
		  The analogous notation </textual><code class="po-atom e117 e117"><textual class="po-textual">&lt;^^xyz&gt;</textual></code><textual class="po-textual"> is
		  used to refer to the pseudo-element whose ID is
		  </textual><code class="po-atom e118 e118"><textual class="po-textual">xyz</textual></code><textual class="po-textual">.  
		</textual></para></listitem><listitem class="po-container e119 e119"><para class="po-block e120 e120"><textual class="po-textual">
		  The notation </textual><code class="po-atom e121 e121"><textual class="po-textual">&lt;=xyz=&gt;</textual></code><textual class="po-textual"> is a 
		  </textual><quote class="po-inline e122 e122"><textual class="po-textual">bilocation tag</textual></quote><textual class="po-textual">, used to signal
		  that the element whose ID is </textual><code class="po-atom e123 e123"><textual class="po-textual">xyz</textual></code><textual class="po-textual">
		  appears as a child of the immediately open
		  elements, at the location indicated.  </textual></para><para class="po-block e124 e124"><textual class="po-textual">
		  Bilocation tags are not defined in </textual><xref class="po-milestone e125 e125" linkend="HS2003"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">; they are defined here in order
		  to have a convenient notation for the graphs in this
		  paper.  When a bilocation tag appears in a TexMecs
		  document, all the same parent-child arcs are created
		  in the document graph as would be created were there
		  a sole-tag at that location. But the target of the
		  parent-child arcs is not a new element represented
		  by a sole tag, but the element whose ID appears in
		  the bilocation tag.
		</textual></para></listitem></itemizedlist><textual class="po-textual">
	  </textual></para><para class="po-block e126 e126"><textual class="po-textual">The example given here could be represented without
	    bilocation tags, by adopting the convention that neither
	    pseudo-elements nor virtual-element references to
	    pseudo-elements create new nodes during parsing.  Verse 3
	    would look like this using this convention.
	</textual><programlisting class="po-block e127 e127" xml:space="preserve"><textual class="po-textual">      &lt;verse@Jer.2.3|
        &lt;^^Jer.2.3a&gt;
        says the LORD.
      |verse&gt;</textual></programlisting></para></footnote><textual class="po-textual">
	</textual><programlisting class="po-block e128 e128" xml:space="preserve"><textual class="po-textual">&lt;div|
  &lt;p|
    &lt;verse@Jer.2.1|Moreover the word 
    of the LORD came to me, saying,|verse&gt;
    &lt;q n="Q-Jer.2.2-A"|
      &lt;verse@Jer.2.2|
	Go and cry in the
	hearing of Jerusalem, saying, 
        &lt;~@Jer.2.2b|
          Thus says the LORD:|~&gt;
        &lt;~@Jer.2.2c|
	    I remember you, 
	    The kindness of your youth, 
	    The love of your betrothal, 
	    When you went after Me in the wilderness, 
	    In a land not sown.|~&gt;
      |verse&gt;	
      &lt;q n="Q-Jer.2.2-B"|
        &lt;=@Jer.2.2b=&gt;
	  &lt;q n="Q-Jer.2.2-C"|
            &lt;=Jer.2.2c=&gt;
            &lt;~@Jer.2.3a|
	    Israel [was] holiness to the LORD, 
	    The firstfruits of His increase.  
	    All that devour him will offend; 
	    Disaster will come upon them,
            |~&gt;
          |q&gt;
      |q&gt;
      &lt;verse@Jer.2.3|
        &lt;=Jer.2.3a=&gt;
        says the LORD.
    |verse&gt;
    &lt;* ... *&gt;
    |q&gt;
  |p&gt;
|div&gt;</textual></programlisting><textual class="po-textual">
      </textual></para><para class="po-block e129 e129"><textual class="po-textual">
	This particular Goddag structure can also be
	serialized without virtual elements, just by allowing
	the </textual><code class="po-atom e130 e130"><textual class="po-textual">q</textual></code><textual class="po-textual"> and </textual><code class="po-atom e131 e131"><textual class="po-textual">verse</textual></code><textual class="po-textual"> elements
	to overlap:
	</textual><programlisting class="po-block e132 e132" xml:space="preserve"><textual class="po-textual">&lt;div|
  &lt;p|
    &lt;verse@Jer.2.1|
    Moreover the word of the LORD 
    came to me, saying,
    |verse&gt;
    &lt;q n="Q-Jer.2.2-A"|
      &lt;verse@Jer.2.2|
      Go and cry in the
      hearing of Jerusalem, saying,
      &lt;q n="Q-Jer.2.2-B"|
	Thus says the LORD:
	&lt;q n="Q-Jer.2.2-C"|
	  I remember you, 
	  The kindness of your youth, 
	  The love of your betrothal, 
	  When you went after Me in the wilderness, 
	  In a land not sown.
	  |verse&gt;
	  &lt;verse@Jer.2.3|
	  Israel [was] holiness to the LORD, 
	  The firstfruits of His increase.  
	  All that devour him will offend; 
	  Disaster will come upon them,
	|q&gt;
	  says the LORD.
	|verse&gt;
      |q&gt;
      &lt;* ... etc. ... *&gt;
    |q&gt;
  |p&gt;
|div&gt;</textual></programlisting><textual class="po-textual">

	Intuitively, many readers find the overlap-only version of the
	document simpler and more natural than the version using
	bilocation tags. But (as demonstrated by </textual><xref class="po-milestone e133 e133" linkend="M2008"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">), not all Goddag structures can be 
	written out using only overlap, without virtual elements,
	discontinuous elements, or bilocation tags. </textual></para><para class="po-block e134 e134"><textual class="po-textual">
	This leads directly and obviously to the questions
	</textual><quote class="po-inline e135 e135"><textual class="po-textual">When </textual><emphasis class="po-inline e136 e136"><textual class="po-textual">can</textual></emphasis><textual class="po-textual"> graphs be serialized
	  using overlap only?  And conversely, when are other
	  markup mechanisms necessary?</textual></quote><textual class="po-textual">
      </textual></para><para class="po-block e137 e137"><textual class="po-textual">Marcoux </textual><xref class="po-milestone e138 e138" linkend="M2008"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> introduced the notions of
	</textual><emphasis class="po-inline e139 e139" role="ital"><textual class="po-textual">noDAG</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e140 e140" role="ital"><textual class="po-textual">overlap-only
	  (oo) TexMecs</textual></emphasis><textual class="po-textual"> as a first step towards answering these
	questions.
	A noDAG is a node-ordered directed acyclic graph,
	i.e., a slight variation on the Goddag, where there is a strict partial
	ordering on nodes. As a markup language, oo-TexMecs is the subset of TexMecs that
	allows multiple roots and overlapping elements, but not virtual or interrupted
	elements. Marcoux established that a noDAG is serializable if and only if it is
	</textual><emphasis class="po-inline e141 e141" role="ital"><textual class="po-textual">completion-acyclic</textual></emphasis><textual class="po-textual">, and that
	“round-tripping” is possible, in that there is essentially a
	bijective correspondence between noDAGs and oo-TexMecs documents.</textual></para></section><section class="po-hcontainer e142 e142"><title class="po-block e143 e143"><textual class="po-textual">1.3 The approach of this paper</textual></title><para class="po-block e144 e144"><textual class="po-textual">In order to investigate whether and how the results of 
	</textual><xref class="po-milestone e145 e145" linkend="M2008"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">	apply to other classes
	of graphs, we introduce here the more general notion of a </textual><emphasis class="po-inline e146 e146" role="ital"><textual class="po-textual">child-arc-ordered directed graph</textual></emphasis><textual class="po-textual"> (CODG), and
	demonstrate that the results from </textual><xref class="po-milestone e147 e147" linkend="M2008"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> hold also for CODGs,
	with the somewhat surprising exception of </textual><emphasis class="po-inline e148 e148" role="ital"><textual class="po-textual">some</textual></emphasis><textual class="po-textual"> CODGs with multiple roots. By defining the stronger
	notion of “fully completion-acyclic” graphs, we succeed in
	identifying this subset: the oo-serializable CODGs are exactly the
	fully-completion-acyclic ones. We also give basic polynomial-time upper bounds
	on the complexity of checking full-completion-acyclicity and of actually
	computing an oo-serialization of fully-completion-acyclic
	CODGs.</textual></para></section></section><section class="po-hcontainer e149 e149"><title class="po-block e150 e150"><textual class="po-textual">2. Child-arc-ordered directed graphs</textual></title><para class="po-block e151 e151"><emphasis class="po-inline e152 e152" role="bold"><textual class="po-textual">2.1 Definition</textual></emphasis><textual class="po-textual"> A </textual><emphasis class="po-inline e153 e153" role="ital"><textual class="po-textual">child-arc-ordered directed graph</textual></emphasis><textual class="po-textual"> (CODG for short) G = (V, ch) is a
    directed graph over a
    finite</textual><textual class="po-textual">
    non-empty set of </textual><emphasis class="po-inline e154 e154" role="ital"><textual class="po-textual">vertices</textual></emphasis><textual class="po-textual"> (or </textual><emphasis class="po-inline e155 e155" role="ital"><textual class="po-textual">nodes</textual></emphasis><textual class="po-textual">) V, where ch (for </textual><emphasis class="po-inline e156 e156" role="ital"><textual class="po-textual">children</textual></emphasis><textual class="po-textual">) is a total mapping from V to finite (and possibly
    empty) sequences of nodes from V. The set of </textual><emphasis class="po-inline e157 e157" role="ital"><textual class="po-textual">arcs</textual></emphasis><textual class="po-textual"> (or </textual><emphasis class="po-inline e158 e158" role="ital"><textual class="po-textual">edges</textual></emphasis><textual class="po-textual">) of G, noted
    E(G), comprises exactly those ordered pairs (v, w) for which</textual></para><blockquote class="po-container e159 e159"><para class="po-block e160 e160"><textual class="po-textual">(∃n ∈ N)[ ch(v, n) = w ],</textual></para></blockquote><para class="po-block e161 e161"><textual class="po-textual">where N represents the set of non-negative integers. The notation
    ch(v, n) is used as a shorthand for (ch(v))(n), that is, for the element with
    index n in the sequence ch(v). We use 0-origin indexing; thus, for all v
    ∈ V, ch(v, 0) denotes the first child of v (or is undefined, if v has no child).</textual></para><para class="po-block e162 e162"><emphasis class="po-inline e163 e163" role="bold"><textual class="po-textual">Note:</textual></emphasis><textual class="po-textual"> Throughout this paper, the
    “parent” relation must be understood to be the exact inverse of
    the “child” relation (we bother to make this explicit because it
    is </textual><emphasis class="po-inline e164 e164" role="ital"><textual class="po-textual">not</textual></emphasis><textual class="po-textual"> the case in some other models, such as
    the XPath 1.0 data model).</textual></para><para class="po-block e165 e165"><textual class="po-textual">It is possible for the same child to show up at more than one place
    in a sequence of children; that is, ch(v, n) = ch(v, m) with m ≠ n is
    possible. Loops are allowed; that is, ch(v, n) = v for a given n is possible.</textual></para><para class="po-block e166 e166"><textual class="po-textual">Note that (v, w) ∈ E(G) for given v and w tells only part of the story: There
    could be many distinct values of n for which ch(v, n) = w. Also note that the
    length of ch(v), i.e., the smallest value of n (≥ 0) for which ch(v, n) is undefined,
    is greater than or equal to the number of distinct children of v (if v has no child,
    ch(v) = ∅, which, as a sequence, is of length 0).</textual></para><para class="po-block e167 e167"><textual class="po-textual">CODGs are very loose structures: they can be
    “multi-graphs,” in that more than one arc can link any given
    pair of nodes. They can have cycles and loops (i.e., cycles of length one).
    There can be both a direct (length one) and indirect path between any two given
    nodes.</textual></para><para class="po-block e168 e168"><textual class="po-textual">The rationale for the adjective </textual><quote class="po-inline e169 e169"><textual class="po-textual">child-arc-ordered</textual></quote><textual class="po-textual"> is that for all
      v ∈ V, ch(v) can be seen as inducing an ordering on the arcs </textual><quote class="po-inline e170 e170"><textual class="po-textual">going out of</textual></quote><textual class="po-textual"> v (the
      </textual><quote class="po-inline e171 e171"><textual class="po-textual">child-arcs</textual></quote><textual class="po-textual"> of v).</textual></para><para class="po-block e172 e172"><emphasis class="po-inline e173 e173" role="bold"><textual class="po-textual">Examples</textual></emphasis><textual class="po-textual"> We present examples of
    CODGs illustrating some of their features.</textual></para><para class="po-block e174 e174"><mediaobject class="po-container e175 e175"><imageobject class="po-container e176 e176"><imagedata class="po-meta e177 e177" fileref="../../../vol10/graphics/Marcoux01/Marcoux01-001.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e178 e178"><para class="po-block e179 e179"><textual class="po-textual">Example 2.1</textual></para></caption></mediaobject></para><para class="po-block e180 e180"><textual class="po-textual">Example 2.1 illustrates that CODGs can be disconnected, and that, in a
    CODG:</textual></para><itemizedlist class="po-table e181 e181"><listitem class="po-container e182 e182"><para class="po-block e183 e183"><textual class="po-textual">A node can have more than one parent (here most simply
	  node </textual><emphasis class="po-inline e184 e184" role="ital"><textual class="po-textual">d</textual></emphasis><textual class="po-textual">, with parents </textual><emphasis class="po-inline e185 e185" role="ital"><textual class="po-textual">a</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e186 e186" role="ital"><textual class="po-textual">c</textual></emphasis><textual class="po-textual">, but also node </textual><emphasis class="po-inline e187 e187" role="ital"><textual class="po-textual">b</textual></emphasis><textual class="po-textual"> [with
	  parents </textual><emphasis class="po-inline e188 e188" role="ital"><textual class="po-textual">a</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e189 e189" role="ital"><textual class="po-textual">b</textual></emphasis><textual class="po-textual">]). This is a significant departure from
	  the rule of single parenthood in XML.</textual></para></listitem><listitem class="po-container e190 e190"><para class="po-block e191 e191"><textual class="po-textual">There can be cycles and loops (cycles of length 1); here
	  the only example is the loop on node </textual><emphasis class="po-inline e192 e192" role="ital"><textual class="po-textual">b</textual></emphasis><textual class="po-textual">.</textual></para></listitem><listitem class="po-container e193 e193"><para class="po-block e194 e194"><textual class="po-textual">The same node can occur more than once as a child of
	  some parent (here node </textual><emphasis class="po-inline e195 e195" role="ital"><textual class="po-textual">c</textual></emphasis><textual class="po-textual">, which is both second and fourth
	  among the children of node </textual><emphasis class="po-inline e196 e196" role="ital"><textual class="po-textual">a</textual></emphasis><textual class="po-textual">).</textual></para></listitem><listitem class="po-container e197 e197"><para class="po-block e198 e198"><textual class="po-textual">There can be both direct and indirect paths between two
	  nodes (here node </textual><emphasis class="po-inline e199 e199" role="ital"><textual class="po-textual">a</textual></emphasis><textual class="po-textual"> dominates node </textual><emphasis class="po-inline e200 e200" role="ital"><textual class="po-textual">d</textual></emphasis><textual class="po-textual"> both directly and
	  via node </textual><emphasis class="po-inline e201 e201" role="ital"><textual class="po-textual">c</textual></emphasis><textual class="po-textual">).</textual></para></listitem></itemizedlist><para class="po-block e202 e202"><textual class="po-textual">Note that the </textual><emphasis class="po-inline e203 e203" role="ital"><textual class="po-textual">order</textual></emphasis><textual class="po-textual"> of the
      outgoing arcs is usually not shown explicitly in the visual representation of a CODG.
      We adopt the convention of drawing
      the arcs going out of any node in order from left to right (even if
      the arcs must cross each other further down, in order to reach
      the child node they point to).  So the leftmost arc leaving any
      parent is pointing to that parent's first child, and the
      rightmost arc points to that parent's last child.</textual><footnote class="po-popup e204 e204"><para class="po-block e205 e205"><textual class="po-textual">This
	  may sound like a fragile or error-prone convention, but it
	  turns out to work well most of the time, and it makes the
	  diagrams easier to read than attaching numbers to the arcs
	  and drawing them with fewer crossings but out of order.</textual></para></footnote><textual class="po-textual">
      Thus, in Example 1, ch(a) = (b, c, d, c).</textual></para><para class="po-block e206 e206"><textual class="po-textual">On the rare occasions that this convention is not practical, we use
    explicit </textual><emphasis class="po-inline e207 e207" role="ital"><textual class="po-textual">green arrows</textual></emphasis><textual class="po-textual"> between the outgoing
    arcs to indicate their order, as in the next example.
    </textual></para><para class="po-block e208 e208"><mediaobject class="po-container e209 e209"><imageobject class="po-container e210 e210"><imagedata class="po-meta e211 e211" fileref="../../../vol10/graphics/Marcoux01/Marcoux01-002.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e212 e212"><para class="po-block e213 e213"><textual class="po-textual">Example 2.2</textual></para></caption></mediaobject></para><para class="po-block e214 e214"><textual class="po-textual">In Example 2.2, ch(a) = (b, c) and ch(d) = (e, c). Right-pointing
    arrows, though superfluous, are sometimes shown as a reminder of the implicit
    convention.</textual></para><para class="po-block e215 e215"><emphasis class="po-inline e216 e216" role="bold"><textual class="po-textual">Sibling precedence</textual></emphasis><textual class="po-textual"> For all v, ch(v) 
      induces a </textual><quote class="po-inline e217 e217"><textual class="po-textual">sibling-precedence</textual></quote><textual class="po-textual"> relation sp(v) among
      the children of v, defined by:
      </textual><blockquote class="po-container e218 e218"><para class="po-block e219 e219"><textual class="po-textual">sp(v) =</textual><subscript class="po-atom e220 e220"><textual class="po-textual">def</textual></subscript><textual class="po-textual"> { (w, x) ∈ V × V
          | (∃m, n ∈ N)[ m &lt; n &amp; ch(v, m) = w &amp; ch(v, n) = x ]
          }.</textual></para></blockquote><textual class="po-textual">
      This relation may or may not be a strict order relation. When it is, we say that v
      </textual><emphasis class="po-inline e221 e221"><textual class="po-textual">orders its children</textual></emphasis><textual class="po-textual">.</textual></para><para class="po-block e222 e222"><mediaobject class="po-container e223 e223"><imageobject class="po-container e224 e224"><imagedata class="po-meta e225 e225" fileref="../../../vol10/graphics/Marcoux01/Marcoux01-003.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e226 e226"><para class="po-block e227 e227"><textual class="po-textual">Example 2.3</textual></para></caption></mediaobject></para><para class="po-block e228 e228"><textual class="po-textual">Example 2.3 illustrates that parents may order the same nodes
    differently as children. Thus, note that ch(a) = (b, c), which induces the 
    strict order relation b
    &lt; c, and ch(d) = (c, b), which induces the strict order relation c &lt; b.</textual></para><para class="po-block e229 e229"><textual class="po-textual">In examples in which no pair of nodes is ordered differently by different
    parents, we will usually place the green arrows between nodes, rather than between
    arcs:</textual></para><para class="po-block e230 e230"><mediaobject class="po-container e231 e231"><imageobject class="po-container e232 e232"><imagedata class="po-meta e233 e233" fileref="../../../vol10/graphics/Marcoux01/Marcoux01-004.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e234 e234"><para class="po-block e235 e235"><textual class="po-textual">Example 2.4</textual></para></caption></mediaobject></para><para class="po-block e236 e236"><emphasis class="po-inline e237 e237" role="bold"><textual class="po-textual">Auxiliary concepts</textual></emphasis><textual class="po-textual"> We now define a
    number of auxiliary concepts useful in discussions of CODGs.  All
    of them are secondary concepts in the sense that they are entirely and uniquely
    determined by the set of vertices and the sequences of children of the
    graph.</textual></para><para class="po-block e238 e238"><emphasis class="po-inline e239 e239" role="bold"><textual class="po-textual">2.2 Definition</textual></emphasis><textual class="po-textual"> Let G = (V, ch) be a
    CODG. Then:</textual></para><orderedlist class="po-table e240 e240"><listitem class="po-container e241 e241"><para class="po-block e242 e242"><textual class="po-textual">⇒</textual><subscript class="po-atom e243 e243"><textual class="po-textual">G</textual></subscript><textual class="po-textual"> denotes the (positive)
        transitive closure of E(G).</textual></para><para class="po-block e244 e244"><textual class="po-textual">Note that ⇒</textual><subscript class="po-atom e245 e245"><textual class="po-textual">G</textual></subscript><textual class="po-textual"> is not necessarily
        antireflexive, as E(G) may contain cycles.</textual></para></listitem><listitem class="po-container e246 e246"><para class="po-block e247 e247"><textual class="po-textual">⇒</textual><superscript class="po-atom e248 e248"><textual class="po-textual">*</textual></superscript><subscript class="po-atom e249 e249"><textual class="po-textual">G</textual></subscript><textual class="po-textual">
        denotes the reflexive transitive closure of E(G), that is:</textual></para><blockquote class="po-container e250 e250"><para class="po-block e251 e251"><textual class="po-textual">⇒</textual><subscript class="po-atom e252 e252"><textual class="po-textual">G</textual></subscript><textual class="po-textual"> ∪ { (v, v) | v ∈
          V }.</textual></para></blockquote></listitem><listitem class="po-container e253 e253"><para class="po-block e254 e254"><textual class="po-textual">sp(G) =</textual><subscript class="po-atom e255 e255"><textual class="po-textual">def</textual></subscript><textual class="po-textual"> { (v, w, x) ∈ V × V × V
        | (∃m, n ∈ N)[ m &lt; n &amp; ch(v, m) = w &amp; ch(v, n) = x ]
        }.</textual></para><para class="po-block e256 e256"><textual class="po-textual">The name “sp” stands for “sibling
        precedence.” Note that, iff w occurs more than once in the sequence of
        children of v, then (v, w, w) ∈ sp(G). Note also that it is entirely
        possible for both (v, w, x) and and (v, x, w) to be members of sp(G).
        Finally note that sp(G) is the union over all v ∈ V of ({v} × sp(v)),
        where sp(v) is the sibling-precedence relation induced by ch(v), as defined above 
        at </textual><emphasis class="po-inline e257 e257" role="bold"><textual class="po-textual">Sibling precedence</textual></emphasis><textual class="po-textual">.</textual></para></listitem><listitem class="po-container e258 e258"><para class="po-block e259 e259"><textual class="po-textual">gsp(G) =</textual><subscript class="po-atom e260 e260"><textual class="po-textual">def</textual></subscript><textual class="po-textual"> { (w, x) ∈ V × V |
        (∃v ∈ V)[ (v, w, x) ∈ sp(G) ] }.</textual></para><para class="po-block e261 e261"><textual class="po-textual">The name “gsp” stands for “global sibling
        precedence.” It is the projection of sp(G) onto the last two components.
        It follows from the observations in the preceding point that there can be loops
        and cycles in gsp(G).</textual></para></listitem></orderedlist><para class="po-block e262 e262"><emphasis class="po-inline e263 e263" role="bold"><textual class="po-textual">2.3 Notation</textual></emphasis><textual class="po-textual"> Let G = (V, ch) be a CODG.
    Unless otherwise stated:</textual></para><orderedlist class="po-table e264 e264"><listitem class="po-container e265 e265"><para class="po-block e266 e266"><textual class="po-textual">V can also be denoted by V(G),</textual></para></listitem><listitem class="po-container e267 e267"><para class="po-block e268 e268"><textual class="po-textual">E denotes E(G),</textual></para></listitem><listitem class="po-container e269 e269"><para class="po-block e270 e270"><textual class="po-textual">⇒ denotes ⇒</textual><subscript class="po-atom e271 e271"><textual class="po-textual">G</textual></subscript><textual class="po-textual">,</textual></para></listitem><listitem class="po-container e272 e272"><para class="po-block e273 e273"><textual class="po-textual">⇒</textual><superscript class="po-atom e274 e274"><textual class="po-textual">*</textual></superscript><textual class="po-textual"> denotes
        ⇒</textual><superscript class="po-atom e275 e275"><textual class="po-textual">*</textual></superscript><subscript class="po-atom e276 e276"><textual class="po-textual">G</textual></subscript><textual class="po-textual">,</textual></para></listitem><listitem class="po-container e277 e277"><para class="po-block e278 e278"><textual class="po-textual">sp denotes sp(G),</textual></para></listitem><listitem class="po-container e279 e279"><para class="po-block e280 e280"><textual class="po-textual">gsp denotes gsp(G).</textual></para></listitem></orderedlist></section><section class="po-hcontainer e281 e281"><title class="po-block e282 e282"><textual class="po-textual">3. Overlap-only documents</textual></title><para class="po-block e283 e283"><textual class="po-textual">The phenomenon we wish to study in this paper is how the structural
    properties of a CODG relate to the fact that it mimics the containment and
    precedence relationships among elements in some marked-up document. More
    specifically, we want to consider documents expressed in markup languages that
    allow overlapping elements, such as TexMecs </textual><xref class="po-milestone e284 e284" linkend="HS2003"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. Thus, we
    need to define a model for such documents.</textual></para><para class="po-block e285 e285"><textual class="po-textual">TexMecs allows many more constructs than element embedding and
    overlap. However, in this paper, we concentrate on those two, ignoring the
    others, such as virtual elements, interrupted elements, empty elements,
    attribute specifications, entity references, generic identifier co-indexing
    (for handling self-overlap), unordered contents, and comments. This is why we
    speak of “overlap-only” (or “oo”) documents. When
    the structure of a CODG corresponds to the containment and precedence
    relationships of some oo-document (to be defined precisely in a moment), we say
    the CODG is “oo-serializable,” because the oo-document can be
    viewed as a </textual><emphasis class="po-inline e286 e286" role="ital"><textual class="po-textual">serialization</textual></emphasis><textual class="po-textual"> (a representation in
    serial form) of the CODG.</textual></para><para class="po-block e287 e287"><textual class="po-textual">Instead of defining documents as character strings with syntactic
    constraints, we use a more abstract approach that avoids some complications and
    leads to results that are simpler to formulate. More constraints on the
    definition of document could later be added to suit specific markup languages
    if and when desired.</textual></para><para class="po-block e288 e288"><textual class="po-textual">Intuitively, we adopt a tokenized view of the document, where tokens
    are tags and leaves. Tokens are represented by their (integer) position in the
    sequence of tokens that make up the document.</textual></para><para class="po-block e289 e289"><textual class="po-textual">The tags in our model of oo-documents correspond, in the XML
      world, to start- and end-tags for non-empty elements.</textual></para><para class="po-block e290 e290"><textual class="po-textual">The leaves in our model of oo-documents correspond, in the
      XML world, to text nodes (#PCDATA) and empty elements. Note that
      our model abstracts away from the actual textual content of
      elements and documents, and also ignores the differences among
      different element types. We claim, however, that our abstraction
      captures the essential structural aspects of marked-up documents
      with possible element overlap.</textual></para><para class="po-block e291 e291"><emphasis class="po-inline e292 e292" role="bold"><textual class="po-textual">3.1 Definition</textual></emphasis><textual class="po-textual"> An </textual><emphasis class="po-inline e293 e293" role="ital"><textual class="po-textual">oo-document</textual></emphasis><textual class="po-textual"> is a finite set of pairs of
    the form (x, y), where x, y ∈ N (the set of non-negative
    natural numbers) and x ≤ y, additionally satisfying a number of
    “well-formedness” constraints (stated below).</textual></para><para class="po-block e294 e294"><textual class="po-textual">The pairs in a document are called </textual><emphasis class="po-inline e295 e295" role="ital"><textual class="po-textual">ranges</textual></emphasis><textual class="po-textual">. If r = (x, y) is a
    range, then r</textual><subscript class="po-atom e296 e296"><textual class="po-textual">1</textual></subscript><textual class="po-textual"> and r</textual><subscript class="po-atom e297 e297"><textual class="po-textual">2</textual></subscript><textual class="po-textual"> denote
    respectively x and y.</textual></para><para class="po-block e298 e298"><textual class="po-textual">Intuitively, a range gives the position of a start-tag and of the
    corresponding end-tag, or the position of a leaf, in which case, x =
    y. Formally, if D is an oo-document:</textual></para><blockquote class="po-container e299 e299"><itemizedlist class="po-table e300 e300"><listitem class="po-container e301 e301"><para class="po-block e302 e302"><textual class="po-textual">leaves(D) =</textual><subscript class="po-atom e303 e303"><textual class="po-textual">def</textual></subscript><textual class="po-textual"> { x ∈ N | (x, x)
          ∈ D },</textual></para></listitem><listitem class="po-container e304 e304"><para class="po-block e305 e305"><textual class="po-textual">stags(D) =</textual><subscript class="po-atom e306 e306"><textual class="po-textual">def</textual></subscript><textual class="po-textual"> domain(D) -
          leaves(D),</textual></para></listitem><listitem class="po-container e307 e307"><para class="po-block e308 e308"><textual class="po-textual">etags(D) =</textual><subscript class="po-atom e309 e309"><textual class="po-textual">def</textual></subscript><textual class="po-textual"> image(D) -
          leaves(D).</textual></para></listitem></itemizedlist></blockquote><para class="po-block e310 e310"><textual class="po-textual">Note that, as usual:</textual></para><blockquote class="po-container e311 e311"><itemizedlist class="po-table e312 e312"><listitem class="po-container e313 e313"><para class="po-block e314 e314"><textual class="po-textual">domain(D) =</textual><subscript class="po-atom e315 e315"><textual class="po-textual">def</textual></subscript><textual class="po-textual"> { x ∈ N | ( ∃ y ∈ N | (x,
            y) ∈ D ) }, and</textual></para></listitem><listitem class="po-container e316 e316"><para class="po-block e317 e317"><textual class="po-textual">image(D) =</textual><subscript class="po-atom e318 e318"><textual class="po-textual">def</textual></subscript><textual class="po-textual"> { y ∈ N | ( ∃ x ∈ N | (x,
            y) ∈ D ) }, and</textual></para></listitem></itemizedlist></blockquote><para class="po-block e319 e319"><textual class="po-textual">Oo-documents are subject to the following well-formedness
    constraints.</textual></para><blockquote class="po-container e320 e320"><para class="po-block e321 e321"><textual class="po-textual">For all oo-document D:</textual></para><orderedlist class="po-table e322 e322"><listitem class="po-container e323 e323"><para class="po-block e324 e324"><textual class="po-textual">D is a partial function over N, i.e., for all x ∈ N,
          there is at most one y such that (x, y) ∈ D.</textual></para></listitem><listitem class="po-container e325 e325"><para class="po-block e326 e326"><textual class="po-textual">D</textual><superscript class="po-atom e327 e327"><textual class="po-textual">-1</textual></superscript><textual class="po-textual"> (that is, the inverse
	    of D) is also a partial function over N, i.e., for all y
	    ∈ N, there is at most one x such that (x, y)
	    ∈ D.</textual></para></listitem><listitem class="po-container e328 e328"><para class="po-block e329 e329"><textual class="po-textual">stags(D) ∩ etags(D) = ∅.</textual></para><para class="po-block e330 e330"><textual class="po-textual">Put less formally: No token is both a start-tag and an
          end-tag.</textual></para></listitem></orderedlist></blockquote><para class="po-block e331 e331"><textual class="po-textual">It must also be remembered that (as stated at the beginning of the
    definition) for all range r, r</textual><subscript class="po-atom e332 e332"><textual class="po-textual">1</textual></subscript><textual class="po-textual"> ≤
    r</textual><subscript class="po-atom e333 e333"><textual class="po-textual">2</textual></subscript><textual class="po-textual">, which corresponds to the normal
      rule of syntax that start-tag must precede its matching end-tag.</textual></para><para class="po-block e334 e334"><textual class="po-textual">Note that we do not require the numbering of token positions to be
    gap-free, nor do we forbid consecutive leaves without intervening
    tags. There is also no requirement of an element spanning the whole
    document: this is of course crucial for oo-documents to be able to
    correspond to graphs with multiple roots.</textual></para><para class="po-block e335 e335"><emphasis class="po-inline e336 e336" role="bold"><textual class="po-textual">3.2 Definition</textual></emphasis><textual class="po-textual"> Let D be an oo-document,
    and r, s ∈ D:</textual></para><itemizedlist class="po-table e337 e337"><listitem class="po-container e338 e338"><para class="po-block e339 e339"><textual class="po-textual">r is said to </textual><emphasis class="po-inline e340 e340" role="ital"><textual class="po-textual">contain</textual></emphasis><textual class="po-textual"> s iff
        (r</textual><subscript class="po-atom e341 e341"><textual class="po-textual">1</textual></subscript><textual class="po-textual"> &lt; s</textual><subscript class="po-atom e342 e342"><textual class="po-textual">1</textual></subscript><textual class="po-textual"> and
        s</textual><subscript class="po-atom e343 e343"><textual class="po-textual">2</textual></subscript><textual class="po-textual"> &lt; r</textual><subscript class="po-atom e344 e344"><textual class="po-textual">2</textual></subscript><textual class="po-textual">).</textual></para></listitem><listitem class="po-container e345 e345"><para class="po-block e346 e346"><textual class="po-textual">r is said to </textual><emphasis class="po-inline e347 e347" role="ital"><textual class="po-textual">precede</textual></emphasis><textual class="po-textual"> s iff
        (r</textual><subscript class="po-atom e348 e348"><textual class="po-textual">1</textual></subscript><textual class="po-textual"> &lt; s</textual><subscript class="po-atom e349 e349"><textual class="po-textual">1</textual></subscript><textual class="po-textual"> and
        r</textual><subscript class="po-atom e350 e350"><textual class="po-textual">2</textual></subscript><textual class="po-textual"> &lt; s</textual><subscript class="po-atom e351 e351"><textual class="po-textual">2</textual></subscript><textual class="po-textual">).</textual></para></listitem></itemizedlist><para class="po-block e352 e352"><textual class="po-textual">Note that in the latter case, r and s may or may not overlap. Also
    note that r cannot both contain </textual><emphasis class="po-inline e353 e353" role="ital"><textual class="po-textual">and</textual></emphasis><textual class="po-textual"> precede
    s.</textual></para></section><section class="po-hcontainer e354 e354"><title class="po-block e355 e355"><textual class="po-textual">4. Correspondence between a graph and a document</textual></title><para class="po-block e356 e356"><textual class="po-textual">Intuitively, a CODG and an oo-document </textual><emphasis class="po-inline e357 e357" role="ital"><textual class="po-textual">correspond</textual></emphasis><textual class="po-textual"> to each other when the nodes of the graph and
    the ranges of the document can be put in correspondence in such a way that node
    reachability corresponds to range containment, and gsp corresponds to range
    precedence.</textual></para><para class="po-block e358 e358"><emphasis class="po-inline e359 e359" role="bold"><textual class="po-textual">4.1 Definition</textual></emphasis><textual class="po-textual"> A CODG G and an
    oo-document D </textual><emphasis class="po-inline e360 e360" role="ital"><textual class="po-textual">correspond</textual></emphasis><textual class="po-textual"> to each other iff
    there exists a bijective mapping g from V(G) to D, such that all of the
    following conditions hold:</textual></para><orderedlist class="po-table e361 e361"><listitem class="po-container e362 e362"><para class="po-block e363 e363"><textual class="po-textual">(∀ b, c ∈ V(G)) [(b ⇒ c) iff g(b) contains
        g(c)]</textual></para></listitem><listitem class="po-container e364 e364"><para class="po-block e365 e365"><textual class="po-textual">(∀ b, c ∈ V(G)) [if (b, c) ∈ gsp(G), then
        g(b) precedes g(c)]</textual></para></listitem></orderedlist><para class="po-block e366 e366"><textual class="po-textual">We then say that G and D correspond to each other
    </textual><emphasis class="po-inline e367 e367" role="ital"><textual class="po-textual">through</textual></emphasis><textual class="po-textual"> g.</textual></para><para class="po-block e368 e368"><emphasis class="po-inline e369 e369" role="bold"><textual class="po-textual">4.2 Definition</textual></emphasis><textual class="po-textual"> A CODG G is said to
    be </textual><emphasis class="po-inline e370 e370" role="ital"><textual class="po-textual">oo-serializable</textual></emphasis><textual class="po-textual"> iff there exists an
    oo-document that corresponds to G.</textual></para><para class="po-block e371 e371"><textual class="po-textual">It is clear that every oo-document has a corresponding CODG: use
    ranges as nodes, and the transitive reduction of range containment as
    parent-child relation. Then, order all sets of siblings in range precedence
    order.</textual></para><para class="po-block e372 e372"><textual class="po-textual">It is also clear that </textual><emphasis class="po-inline e373 e373" role="ital"><textual class="po-textual">some</textual></emphasis><textual class="po-textual"> CODGs are
    not oo-serializable: for example, a CODG with cycles would imply (by
    transitivity) a range containing itself, which is impossible. But are all
    acyclic CODGs oo-serializable? The following examples, inspired from
    </textual><xref class="po-milestone e374 e374" linkend="M2008"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, show that the question is at best not trivial:</textual></para><para class="po-block e375 e375"><mediaobject class="po-container e376 e376"><imageobject class="po-container e377 e377"><imagedata class="po-meta e378 e378" fileref="../../../vol10/graphics/Marcoux01/Marcoux01-005.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e379 e379"><para class="po-block e380 e380"><textual class="po-textual">Example 4</textual></para></caption></mediaobject><textual class="po-textual"> 
    </textual><mediaobject class="po-container e381 e381"><imageobject class="po-container e382 e382"><imagedata class="po-meta e383 e383" fileref="../../../vol10/graphics/Marcoux01/Marcoux01-006.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e384 e384"><para class="po-block e385 e385"><textual class="po-textual">Example 5</textual></para></caption></mediaobject></para><para class="po-block e386 e386"><textual class="po-textual">Both graphs are acyclic and they differ by just the presence/absence
    of one arc. Yet, only the first one is oo-serializable </textual><xref class="po-milestone e387 e387" linkend="M2008"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual><footnote class="po-popup e388 e388"><para class="po-block e389 e389"><textual class="po-textual">Example 4 is oo-serializable in the TexMecs form
	  </textual><code class="po-atom e390 e390"><textual class="po-textual">&lt;poem| &lt;verse| &lt;quote~1| leaves &lt;quote~2| fall |verse&gt;
	    |quote~1&gt; |quote~2&gt; |poem&gt;</textual></code><textual class="po-textual">.</textual></para><para class="po-block e391 e391"><textual class="po-textual">Example 5 is not oo-serializable, in brief, because
	  its EA (ends-after) relation has a cycle among the first
	  </textual><code class="po-atom e392 e392"><textual class="po-textual">quote</textual></code><textual class="po-textual"> element, the </textual><code class="po-atom e393 e393"><textual class="po-textual">verse</textual></code><textual class="po-textual"> element,
	  and the text node containing the word </textual><code class="po-atom e394 e394"><textual class="po-textual">fall</textual></code><textual class="po-textual">.
	  Let us refer to them as </textual><emphasis class="po-inline e395 e395" role="ital"><textual class="po-textual">q</textual></emphasis><subscript class="po-atom e396 e396"><textual class="po-textual">1</textual></subscript><textual class="po-textual">, </textual><emphasis class="po-inline e397 e397" role="ital"><textual class="po-textual">v</textual></emphasis><textual class="po-textual">, and </textual><emphasis class="po-inline e398 e398" role="ital"><textual class="po-textual">f</textual></emphasis><textual class="po-textual"> for short.
	  </textual><itemizedlist class="po-table e399 e399"><listitem class="po-container e400 e400"><para class="po-block e401 e401"><emphasis class="po-inline e402 e402" role="ital"><textual class="po-textual">q</textual></emphasis><subscript class="po-atom e403 e403"><textual class="po-textual">1</textual></subscript><textual class="po-textual"> follows </textual><emphasis class="po-inline e404 e404" role="ital"><textual class="po-textual">v</textual></emphasis><textual class="po-textual"> among the children of the
		</textual><code class="po-atom e405 e405"><textual class="po-textual">poem</textual></code><textual class="po-textual"> element, and thus </textual><emphasis class="po-inline e406 e406" role="ital"><textual class="po-textual">q</textual></emphasis><subscript class="po-atom e407 e407"><textual class="po-textual">1</textual></subscript><textual class="po-textual"> must end
		after </textual><emphasis class="po-inline e408 e408" role="ital"><textual class="po-textual">v</textual></emphasis><textual class="po-textual">.
	      </textual></para></listitem><listitem class="po-container e409 e409"><para class="po-block e410 e410"><emphasis class="po-inline e411 e411" role="ital"><textual class="po-textual">v</textual></emphasis><textual class="po-textual"> dominates </textual><emphasis class="po-inline e412 e412" role="ital"><textual class="po-textual">f</textual></emphasis><textual class="po-textual">, and thus </textual><emphasis class="po-inline e413 e413" role="ital"><textual class="po-textual">v</textual></emphasis><textual class="po-textual"> must end after
		</textual><emphasis class="po-inline e414 e414" role="ital"><textual class="po-textual">f</textual></emphasis><textual class="po-textual">.
	      </textual></para></listitem><listitem class="po-container e415 e415"><para class="po-block e416 e416"><emphasis class="po-inline e417 e417" role="ital"><textual class="po-textual">f</textual></emphasis><textual class="po-textual"> is not dominated by </textual><emphasis class="po-inline e418 e418" role="ital"><textual class="po-textual">q</textual></emphasis><subscript class="po-atom e419 e419"><textual class="po-textual">1</textual></subscript><textual class="po-textual">, but it
		</textual><emphasis class="po-inline e420 e420"><textual class="po-textual">is</textual></emphasis><textual class="po-textual"> dominated by a following
		sibling of </textual><emphasis class="po-inline e421 e421" role="ital"><textual class="po-textual">q</textual></emphasis><subscript class="po-atom e422 e422"><textual class="po-textual">1</textual></subscript><textual class="po-textual"> (namely, the second </textual><code class="po-atom e423 e423"><textual class="po-textual">quote</textual></code><textual class="po-textual">
		element), and thus </textual><emphasis class="po-inline e424 e424" role="ital"><textual class="po-textual">f</textual></emphasis><textual class="po-textual"> must end after </textual><emphasis class="po-inline e425 e425" role="ital"><textual class="po-textual">q</textual></emphasis><subscript class="po-atom e426 e426"><textual class="po-textual">1</textual></subscript><textual class="po-textual">.
	      </textual></para></listitem></itemizedlist><textual class="po-textual">
	  It is the third constraint, not present in Example 4,
	  which makes the difference between the oo-serializability
	  of the two examples.
	</textual></para></footnote><textual class="po-textual">
    </textual></para><para class="po-block e427 e427"><textual class="po-textual">In </textual><xref class="po-milestone e428 e428" linkend="M2008"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, Marcoux defined noDAGs, or
    </textual><emphasis class="po-inline e429 e429" role="ital"><textual class="po-textual">node-ordered DAGs</textual></emphasis><textual class="po-textual">, as (essentially) directed
    acyclic graphs (DAGs) in which the nodes are partially ordered in such a way
    that siblings (children of a common parent), </textual><emphasis class="po-inline e430 e430" role="ital"><textual class="po-textual">as well as
    distinct roots</textual></emphasis><textual class="po-textual">, are totally ordered. He then defined the property of
    </textual><emphasis class="po-inline e431 e431" role="ital"><textual class="po-textual">completion-acyclicity</textual></emphasis><textual class="po-textual"> for noDAGs, and showed
    that oo-serializable noDAGs are exactly the completion-acyclic ones.</textual></para><para class="po-block e432 e432"><textual class="po-textual">In order to investigate whether the same is true of CODGs, we must
    define an analogous property for CODGs. The following definition is the natural
    adaptation of completion-acyclicity to CODGs.</textual></para><para class="po-block e433 e433"><emphasis class="po-inline e434 e434" role="bold"><textual class="po-textual">4.3 Definition</textual></emphasis><textual class="po-textual"> Let G = (V, ch) be a
    CODG. Then:</textual></para><orderedlist class="po-table e435 e435"><listitem class="po-container e436 e436"><para class="po-block e437 e437"><textual class="po-textual">ssba(G) =</textual><subscript class="po-atom e438 e438"><textual class="po-textual">def</textual></subscript><textual class="po-textual"> { (w, x) ∈ V × V |
        (∃v ∈ V)[ v ⇒ w &amp; (v, x) ∈ gsp &amp; x
        ⇏ w ] }.</textual></para><para class="po-block e439 e439"><textual class="po-textual">The name “ssba” stands for
        “should-start-before additions.”</textual></para></listitem><listitem class="po-container e440 e440"><para class="po-block e441 e441"><textual class="po-textual">ssb(G) denotes the transitive closure of (E ∪ gsp ∪
        ssba).</textual></para><para class="po-block e442 e442"><textual class="po-textual">The relation “ssb” is called the
        “should-start-before completion” of G.</textual></para></listitem><listitem class="po-container e443 e443"><para class="po-block e444 e444"><textual class="po-textual">seaa(G) =</textual><subscript class="po-atom e445 e445"><textual class="po-textual">def</textual></subscript><textual class="po-textual"> { (w, x) ∈ V × V |
        (∃v ∈ V)[ v ⇒ w &amp; (v, x) ∈
        gsp</textual><superscript class="po-atom e446 e446"><textual class="po-textual">-1</textual></superscript><textual class="po-textual"> &amp; x ⇏ w
        ] }.</textual></para><para class="po-block e447 e447"><textual class="po-textual">The name “seaa” stands for “should-end-after
        additions.” The relation gsp</textual><superscript class="po-atom e448 e448"><textual class="po-textual">-1</textual></superscript><textual class="po-textual"> is
	the inverse of relation gsp.</textual></para></listitem><listitem class="po-container e449 e449"><para class="po-block e450 e450"><textual class="po-textual">sea(G) denotes the transitive closure of (E ∪
        gsp</textual><superscript class="po-atom e451 e451"><textual class="po-textual">-1</textual></superscript><textual class="po-textual"> ∪ seaa).</textual></para><para class="po-block e452 e452"><textual class="po-textual">The relation “sea” is called the
        “should-end-after completion” of G.</textual></para></listitem></orderedlist><para class="po-block e453 e453"><emphasis class="po-inline e454 e454" role="bold"><textual class="po-textual">4.4 Notation</textual></emphasis><textual class="po-textual"> Let G = (V, ch) be a CODG.
    Unless otherwise stated:</textual></para><orderedlist class="po-table e455 e455"><listitem class="po-container e456 e456"><para class="po-block e457 e457"><textual class="po-textual">ssba denotes ssba(G),</textual></para></listitem><listitem class="po-container e458 e458"><para class="po-block e459 e459"><textual class="po-textual">ssb denotes ssb(G),</textual></para></listitem><listitem class="po-container e460 e460"><para class="po-block e461 e461"><textual class="po-textual">seaa denotes seaa(G),</textual></para></listitem><listitem class="po-container e462 e462"><para class="po-block e463 e463"><textual class="po-textual">sea denotes sea(G).</textual></para></listitem></orderedlist><para class="po-block e464 e464"><textual class="po-textual">The relations ssb and sea can be understood as meaning:
    “should &lt;</textual><emphasis class="po-inline e465 e465" role="ital"><textual class="po-textual">something</textual></emphasis><textual class="po-textual">&gt;
    </textual><emphasis class="po-inline e466 e466" role="ital"><emphasis class="po-inline e467 e467" role="bold"><textual class="po-textual">in any oo-serialization of the
    CODG</textual></emphasis></emphasis><textual class="po-textual">,” for example “should
    </textual><emphasis class="po-inline e468 e468" role="ital"><textual class="po-textual">end after</textual></emphasis><textual class="po-textual"> in any oo-serialization of the
    CODG.” Thus, “(v, w) ∈ ssb” can be read out as:
    “v should start before w in any oo-serialization of the CODG.” In
    other words, ssb (respectively, sea) represents the start- (respectively, end-)
    tag-precedence relations that can be deduced from the topology of the CODG,
    supposing parent-child relations are interpreted as element containment, and
    sibling-precedence relations as start- and end-tag-precedence.</textual></para><para class="po-block e469 e469"><textual class="po-textual">The relations ssba and seaa represent the “additional”
    arcs (over and above those in E and gsp or gsp</textual><superscript class="po-atom e470 e470"><textual class="po-textual">-1</textual></superscript><textual class="po-textual">)
    that must be considered to compute </textual><emphasis class="po-inline e471 e471" role="ital"><textual class="po-textual">all</textual></emphasis><textual class="po-textual"> the
    possible ssb and sea pairs that can be deduced from the CODG topology.</textual></para><para class="po-block e472 e472"><emphasis class="po-inline e473 e473" role="bold"><textual class="po-textual">4.5 Definition</textual></emphasis><textual class="po-textual"> A CODG G = (V, ch) is
    said to be </textual><emphasis class="po-inline e474 e474" role="ital"><textual class="po-textual">completion-acyclic</textual></emphasis><textual class="po-textual"> (CA) iff each of
    ssb(G) and sea(G) is acyclic.</textual></para></section><section class="po-hcontainer e475 e475"><title class="po-block e476 e476"><textual class="po-textual">5. Main results</textual></title><para class="po-block e477 e477"><textual class="po-textual">Things are not as simple with CODGs as with noDAGs. There
    are, it turns out, CODGs that are completion-acyclic, yet not oo-serializable. Our
    first result is to show that Example 2.2 above, as well as the following CODG,
    are in that situation:</textual></para><para class="po-block e478 e478"><mediaobject class="po-container e479 e479"><imageobject class="po-container e480 e480"><imagedata class="po-meta e481 e481" fileref="../../../vol10/graphics/Marcoux01/Marcoux01-007.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e482 e482"><para class="po-block e483 e483"><textual class="po-textual">Example 6</textual></para></caption></mediaobject></para><para class="po-block e484 e484"><textual class="po-textual">Since the number of structurally distinct documents that can
    possibly correspond to a 5-node graph is finite, we could
    exhaustively enumerate them and verify that none of them correspond
    to either Example 2.2 or to
    Example 6. 
      However, that would not be very
      insightful.</textual><footnote class="po-popup e485 e485"><para class="po-block e486 e486"><textual class="po-textual">The curious reader may, however, be interested in the
	  enumeration.  We cannot give it in full, but we can sketch
	  it here.</textual></para><para class="po-block e487 e487"><textual class="po-textual">In Example 6, nodes </textual><emphasis class="po-inline e488 e488" role="ital"><textual class="po-textual">a</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e489 e489" role="ital"><textual class="po-textual">e</textual></emphasis><textual class="po-textual"> are non-terminals
	  (which means they must correspond to elements in TexMecs)
	  and nodes </textual><emphasis class="po-inline e490 e490" role="ital"><textual class="po-textual">b</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e491 e491" role="ital"><textual class="po-textual">c</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e492 e492" role="ital"><textual class="po-textual">d</textual></emphasis><textual class="po-textual"> are childless (which means they may
	  correspond either to empty elements or to spans of character
	  data in TexMecs, that is, to leaf nodes).  
	  One way to begin the enumeration is to
	  observe that in overlap-only TexMecs the elements </textual><emphasis class="po-inline e493 e493" role="ital"><textual class="po-textual">a</textual></emphasis><textual class="po-textual"> and
	  </textual><emphasis class="po-inline e494 e494" role="ital"><textual class="po-textual">e</textual></emphasis><textual class="po-textual"> will each have one start- and one end-tag.  There are
	  six possible orders for these four tags:
	  </textual><orderedlist class="po-table e495 e495"><listitem class="po-container e496 e496"><para class="po-block e497 e497"><code class="po-atom e498 e498"><textual class="po-textual">&lt;a| &lt;e| |a&gt; |e&gt;</textual></code></para></listitem><listitem class="po-container e499 e499"><para class="po-block e500 e500"><code class="po-atom e501 e501"><textual class="po-textual">&lt;a| &lt;e| |e&gt; |a&gt;</textual></code></para></listitem><listitem class="po-container e502 e502"><para class="po-block e503 e503"><code class="po-atom e504 e504"><textual class="po-textual">&lt;a| |a&gt; &lt;e| |e&gt;</textual></code></para></listitem><listitem class="po-container e505 e505"><para class="po-block e506 e506"><code class="po-atom e507 e507"><textual class="po-textual">&lt;e| &lt;a| |a&gt; |e&gt;</textual></code></para></listitem><listitem class="po-container e508 e508"><para class="po-block e509 e509"><code class="po-atom e510 e510"><textual class="po-textual">&lt;e| &lt;a| |e&gt; |a&gt;</textual></code></para></listitem><listitem class="po-container e511 e511"><para class="po-block e512 e512"><code class="po-atom e513 e513"><textual class="po-textual">&lt;e| |e&gt; &lt;a| |a&gt;</textual></code></para></listitem></orderedlist><textual class="po-textual">
	  Note that the possible number of orderings for any </textual><emphasis class="po-inline e514 e514" role="ital"><textual class="po-textual">n</textual></emphasis><textual class="po-textual"> items is
	  </textual><emphasis class="po-inline e515 e515" role="ital"><textual class="po-textual">n</textual></emphasis><textual class="po-textual">! (</textual><emphasis class="po-inline e516 e516" role="ital"><textual class="po-textual">n</textual></emphasis><textual class="po-textual"> factorial), so the total number of orderings for
	  the four tags involved here is 24 (= 4!).  Of those 24, half
	  are ill-formed because in them the end-tag for </textual><emphasis class="po-inline e517 e517" role="ital"><textual class="po-textual">a</textual></emphasis><textual class="po-textual">
	  precedes its end-tag; of the remaining 12, half are
	  ill-formed because the end-tag of </textual><emphasis class="po-inline e518 e518" role="ital"><textual class="po-textual">e</textual></emphasis><textual class="po-textual"> precedes the start-tag.
	</textual></para><para class="po-block e519 e519"><textual class="po-textual">To each of these six patterns for the representation of
	  nodes </textual><emphasis class="po-inline e520 e520" role="ital"><textual class="po-textual">a</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e521 e521" role="ital"><textual class="po-textual">e</textual></emphasis><textual class="po-textual"> there correspond 210 possible TexMecs
	  documents with nodes </textual><emphasis class="po-inline e522 e522" role="ital"><textual class="po-textual">b</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e523 e523" role="ital"><textual class="po-textual">c</textual></emphasis><textual class="po-textual">, and </textual><emphasis class="po-inline e524 e524" role="ital"><textual class="po-textual">d</textual></emphasis><textual class="po-textual"> interleaved among the
	  tags for </textual><emphasis class="po-inline e525 e525" role="ital"><textual class="po-textual">a</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e526 e526" role="ital"><textual class="po-textual">e</textual></emphasis><textual class="po-textual">.  (Node </textual><emphasis class="po-inline e527 e527" role="ital"><textual class="po-textual">b</textual></emphasis><textual class="po-textual"> can be situated in any of
	  five locations:  before the first tag, after the first tag,
	  after the second, after the third, after the fourth.  The
	  tag for node </textual><emphasis class="po-inline e528 e528" role="ital"><textual class="po-textual">c</textual></emphasis><textual class="po-textual"> can be placed in any of six locations
	  (before or after any of the four start- and end-tags and
	  node </textual><emphasis class="po-inline e529 e529" role="ital"><textual class="po-textual">b</textual></emphasis><textual class="po-textual">); the
	  tag for node </textual><emphasis class="po-inline e530 e530" role="ital"><textual class="po-textual">d</textual></emphasis><textual class="po-textual"> can be placed in any of seven locations.
	  210 = 5 × 6 × 7.)  The beginning of the
	  enumeration might look like this:</textual><itemizedlist class="po-table e531 e531"><listitem class="po-container e532 e532"><para class="po-block e533 e533"><emphasis class="po-inline e534 e534" role="ital"><textual class="po-textual">d</textual></emphasis><textual class="po-textual"> </textual><emphasis class="po-inline e535 e535" role="ital"><textual class="po-textual">c</textual></emphasis><textual class="po-textual"> </textual><emphasis class="po-inline e536 e536" role="ital"><textual class="po-textual">b</textual></emphasis><textual class="po-textual"> &lt;a| &lt;e| |a&gt; |e&gt;</textual></para></listitem><listitem class="po-container e537 e537"><para class="po-block e538 e538"><emphasis class="po-inline e539 e539" role="ital"><textual class="po-textual">c</textual></emphasis><textual class="po-textual"> </textual><emphasis class="po-inline e540 e540" role="ital"><textual class="po-textual">d</textual></emphasis><textual class="po-textual"> </textual><emphasis class="po-inline e541 e541" role="ital"><textual class="po-textual">b</textual></emphasis><textual class="po-textual"> &lt;a| &lt;e| |a&gt; |e&gt;</textual></para></listitem><listitem class="po-container e542 e542"><para class="po-block e543 e543"><emphasis class="po-inline e544 e544" role="ital"><textual class="po-textual">c</textual></emphasis><textual class="po-textual"> </textual><emphasis class="po-inline e545 e545" role="ital"><textual class="po-textual">b</textual></emphasis><textual class="po-textual"> </textual><emphasis class="po-inline e546 e546" role="ital"><textual class="po-textual">d</textual></emphasis><textual class="po-textual"> &lt;a| &lt;e| |a&gt; |e&gt;</textual></para></listitem><listitem class="po-container e547 e547"><para class="po-block e548 e548"><emphasis class="po-inline e549 e549" role="ital"><textual class="po-textual">c</textual></emphasis><textual class="po-textual"> </textual><emphasis class="po-inline e550 e550" role="ital"><textual class="po-textual">b</textual></emphasis><textual class="po-textual"> &lt;a| </textual><emphasis class="po-inline e551 e551" role="ital"><textual class="po-textual">d</textual></emphasis><textual class="po-textual"> &lt;e| |a&gt; |e&gt;</textual></para></listitem><listitem class="po-container e552 e552"><para class="po-block e553 e553"><emphasis class="po-inline e554 e554" role="ital"><textual class="po-textual">c</textual></emphasis><textual class="po-textual"> </textual><emphasis class="po-inline e555 e555" role="ital"><textual class="po-textual">b</textual></emphasis><textual class="po-textual"> &lt;a| &lt;e| </textual><emphasis class="po-inline e556 e556" role="ital"><textual class="po-textual">d</textual></emphasis><textual class="po-textual"> |a&gt; |e&gt;</textual></para></listitem><listitem class="po-container e557 e557"><para class="po-block e558 e558"><emphasis class="po-inline e559 e559" role="ital"><textual class="po-textual">c</textual></emphasis><textual class="po-textual"> </textual><emphasis class="po-inline e560 e560" role="ital"><textual class="po-textual">b</textual></emphasis><textual class="po-textual"> &lt;a| &lt;e| |a&gt; </textual><emphasis class="po-inline e561 e561" role="ital"><textual class="po-textual">d</textual></emphasis><textual class="po-textual"> |e&gt;</textual></para></listitem><listitem class="po-container e562 e562"><para class="po-block e563 e563"><emphasis class="po-inline e564 e564" role="ital"><textual class="po-textual">c</textual></emphasis><textual class="po-textual"> </textual><emphasis class="po-inline e565 e565" role="ital"><textual class="po-textual">b</textual></emphasis><textual class="po-textual"> &lt;a| &lt;e| |a&gt; |e&gt; </textual><emphasis class="po-inline e566 e566" role="ital"><textual class="po-textual">d</textual></emphasis></para></listitem><listitem class="po-container e567 e567"><para class="po-block e568 e568"><emphasis class="po-inline e569 e569" role="ital"><textual class="po-textual">d</textual></emphasis><textual class="po-textual"> </textual><emphasis class="po-inline e570 e570" role="ital"><textual class="po-textual">b</textual></emphasis><textual class="po-textual"> </textual><emphasis class="po-inline e571 e571" role="ital"><textual class="po-textual">c</textual></emphasis><textual class="po-textual"> &lt;a| &lt;e| |a&gt; |e&gt;</textual></para></listitem><listitem class="po-container e572 e572"><para class="po-block e573 e573"><emphasis class="po-inline e574 e574" role="ital"><textual class="po-textual">b</textual></emphasis><textual class="po-textual"> </textual><emphasis class="po-inline e575 e575" role="ital"><textual class="po-textual">d</textual></emphasis><textual class="po-textual"> </textual><emphasis class="po-inline e576 e576" role="ital"><textual class="po-textual">c</textual></emphasis><textual class="po-textual"> &lt;a| &lt;e| |a&gt; |e&gt;</textual></para></listitem><listitem class="po-container e577 e577"><para class="po-block e578 e578"><emphasis class="po-inline e579 e579" role="ital"><textual class="po-textual">b</textual></emphasis><textual class="po-textual"> </textual><emphasis class="po-inline e580 e580" role="ital"><textual class="po-textual">c</textual></emphasis><textual class="po-textual"> </textual><emphasis class="po-inline e581 e581" role="ital"><textual class="po-textual">d</textual></emphasis><textual class="po-textual"> &lt;a| &lt;e| |a&gt; |e&gt;</textual></para></listitem><listitem class="po-container e582 e582"><para class="po-block e583 e583"><emphasis class="po-inline e584 e584" role="ital"><textual class="po-textual">b</textual></emphasis><textual class="po-textual"> </textual><emphasis class="po-inline e585 e585" role="ital"><textual class="po-textual">c</textual></emphasis><textual class="po-textual"> &lt;a| </textual><emphasis class="po-inline e586 e586" role="ital"><textual class="po-textual">d</textual></emphasis><textual class="po-textual"> &lt;e| |a&gt; |e&gt;</textual></para></listitem><listitem class="po-container e587 e587"><para class="po-block e588 e588"><textual class="po-textual"> … </textual></para></listitem><listitem class="po-container e589 e589"><para class="po-block e590 e590"><emphasis class="po-inline e591 e591" role="ital"><textual class="po-textual">d</textual></emphasis><textual class="po-textual"> </textual><emphasis class="po-inline e592 e592" role="ital"><textual class="po-textual">b</textual></emphasis><textual class="po-textual"> &lt;a| </textual><emphasis class="po-inline e593 e593" role="ital"><textual class="po-textual">c</textual></emphasis><textual class="po-textual"> &lt;e| |a&gt; |e&gt;</textual></para></listitem><listitem class="po-container e594 e594"><para class="po-block e595 e595"><emphasis class="po-inline e596 e596" role="ital"><textual class="po-textual">b</textual></emphasis><textual class="po-textual"> </textual><emphasis class="po-inline e597 e597" role="ital"><textual class="po-textual">d</textual></emphasis><textual class="po-textual"> &lt;a| </textual><emphasis class="po-inline e598 e598" role="ital"><textual class="po-textual">c</textual></emphasis><textual class="po-textual"> &lt;e| |a&gt; |e&gt;</textual></para></listitem><listitem class="po-container e599 e599"><para class="po-block e600 e600"><emphasis class="po-inline e601 e601" role="ital"><textual class="po-textual">b</textual></emphasis><textual class="po-textual"> &lt;a| </textual><emphasis class="po-inline e602 e602" role="ital"><textual class="po-textual">d</textual></emphasis><textual class="po-textual"> </textual><emphasis class="po-inline e603 e603" role="ital"><textual class="po-textual">c</textual></emphasis><textual class="po-textual"> &lt;e| |a&gt; |e&gt;</textual></para></listitem><listitem class="po-container e604 e604"><para class="po-block e605 e605"><emphasis class="po-inline e606 e606" role="ital"><textual class="po-textual">b</textual></emphasis><textual class="po-textual"> &lt;a| </textual><emphasis class="po-inline e607 e607" role="ital"><textual class="po-textual">c</textual></emphasis><textual class="po-textual"> </textual><emphasis class="po-inline e608 e608" role="ital"><textual class="po-textual">d</textual></emphasis><textual class="po-textual"> &lt;e| |a&gt; |e&gt;</textual></para></listitem><listitem class="po-container e609 e609"><para class="po-block e610 e610"><emphasis class="po-inline e611 e611" role="ital"><textual class="po-textual">b</textual></emphasis><textual class="po-textual"> &lt;a| </textual><emphasis class="po-inline e612 e612" role="ital"><textual class="po-textual">c</textual></emphasis><textual class="po-textual"> &lt;e| </textual><emphasis class="po-inline e613 e613" role="ital"><textual class="po-textual">d</textual></emphasis><textual class="po-textual"> |a&gt; |e&gt;</textual></para></listitem><listitem class="po-container e614 e614"><para class="po-block e615 e615"><textual class="po-textual"> … </textual></para></listitem></itemizedlist><textual class="po-textual">
	</textual></para><para class="po-block e616 e616"><textual class="po-textual">To each of these 210 interleavings of </textual><emphasis class="po-inline e617 e617" role="ital"><textual class="po-textual">b</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e618 e618" role="ital"><textual class="po-textual">c</textual></emphasis><textual class="po-textual">, and </textual><emphasis class="po-inline e619 e619" role="ital"><textual class="po-textual">d</textual></emphasis><textual class="po-textual">
	into the four start- and end-tags for </textual><emphasis class="po-inline e620 e620" role="ital"><textual class="po-textual">a</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e621 e621" role="ital"><textual class="po-textual">e</textual></emphasis><textual class="po-textual">, there
	correspond eight TexMecs documents.  Each of nodes </textual><emphasis class="po-inline e622 e622" role="ital"><textual class="po-textual">b</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e623 e623" role="ital"><textual class="po-textual">c</textual></emphasis><textual class="po-textual">,
	and </textual><emphasis class="po-inline e624 e624" role="ital"><textual class="po-textual">d</textual></emphasis><textual class="po-textual"> may be either a text node or an empty element, so
	there are eight (two to the third power) combinations.  The
	first pattern in the preceding list corresponds to the
	following eight TexMecs documents, and each of the other 210
	  expands similarly.</textual><itemizedlist class="po-table e625 e625"><listitem class="po-container e626 e626"><para class="po-block e627 e627"><textual class="po-textual">d c b &lt;a| &lt;e| |a&gt; |e&gt;</textual></para></listitem><listitem class="po-container e628 e628"><para class="po-block e629 e629"><textual class="po-textual">&lt;d&gt; c b &lt;a| &lt;e| |a&gt; |e&gt;</textual></para></listitem><listitem class="po-container e630 e630"><para class="po-block e631 e631"><textual class="po-textual">d &lt;c&gt; b &lt;a| &lt;e| |a&gt; |e&gt;</textual></para></listitem><listitem class="po-container e632 e632"><para class="po-block e633 e633"><textual class="po-textual">&lt;d&gt; &lt;c&gt; b &lt;a| &lt;e| |a&gt; |e&gt;</textual></para></listitem><listitem class="po-container e634 e634"><para class="po-block e635 e635"><textual class="po-textual">d c &lt;b&gt; &lt;a| &lt;e| |a&gt; |e&gt;</textual></para></listitem><listitem class="po-container e636 e636"><para class="po-block e637 e637"><textual class="po-textual">&lt;d&gt; c &lt;b&gt; &lt;a| &lt;e| |a&gt; |e&gt;</textual></para></listitem><listitem class="po-container e638 e638"><para class="po-block e639 e639"><textual class="po-textual">d &lt;c&gt; &lt;b&gt; &lt;a| &lt;e| |a&gt; |e&gt;</textual></para></listitem><listitem class="po-container e640 e640"><para class="po-block e641 e641"><textual class="po-textual">&lt;d&gt; &lt;c&gt; &lt;b&gt; &lt;a| &lt;e| |a&gt; |e&gt;</textual></para></listitem></itemizedlist><textual class="po-textual">
	</textual></para><para class="po-block e642 e642"><textual class="po-textual">In total, then, there are 6 patterns for the start- and
	  end-tags of </textual><emphasis class="po-inline e643 e643" role="ital"><textual class="po-textual">a</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e644 e644" role="ital"><textual class="po-textual">e</textual></emphasis><textual class="po-textual">, 210 ways to interleave </textual><emphasis class="po-inline e645 e645" role="ital"><textual class="po-textual">b</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e646 e646" role="ital"><textual class="po-textual">c</textual></emphasis><textual class="po-textual">,
	  and </textual><emphasis class="po-inline e647 e647" role="ital"><textual class="po-textual">d</textual></emphasis><textual class="po-textual"> into those patterns, and 8 ways to realize each
	  interleaving, for 10,080 (6 × 210 × 8)
	  structurally possible oo-TexMecs documents for this
	  configuration of five nodes.  Since each of the five nodes
	  can be either a leaf node or a non-terminal, there are 32
	  possible configurations.  These vary in their number of
	  possible realizations, but we hope it is now clear why
	  enumerating the distinct documents for five-node graphs
	  seems unlikely to be a helpful approach.
	</textual></para></footnote><textual class="po-textual">
We will thus rather proceed by way of a lemma (5.9) that
    provides a general characterization of oo-serializable CODGs, and
    will be useful for our second main result.</textual></para><para class="po-block e648 e648"><emphasis class="po-inline e649 e649" role="bold"><textual class="po-textual">5.1 Definition</textual></emphasis><textual class="po-textual"> Let G = (V, ch) be a
    CODG. The </textual><emphasis class="po-inline e650 e650" role="ital"><textual class="po-textual">ancestral precedence</textual></emphasis><textual class="po-textual"> relation of G,
    denoted ap(G), is defined as:</textual></para><blockquote class="po-container e651 e651"><para class="po-block e652 e652"><textual class="po-textual">ap(G) =</textual><subscript class="po-atom e653 e653"><textual class="po-textual">def</textual></subscript><textual class="po-textual"> { (v, w) ∈ V × V | (v
      ⇒ w) &amp; (w ⇏ v) }.</textual></para></blockquote><para class="po-block e654 e654"><textual class="po-textual">It is easy to show that ap(G) is always a strict partial-order on V.
    Informally, we could say that ap(G) gets rid of the cycles in G by contracting
    its (maximal) strongly-connected components, then re-expanding them to an equal
      number of </textual><emphasis class="po-inline e655 e655" role="ital"><textual class="po-textual">disconnected</textual></emphasis><textual class="po-textual">
    vertices.</textual><textual class="po-textual">
    </textual></para><para class="po-block e656 e656"><emphasis class="po-inline e657 e657" role="bold"><textual class="po-textual">5.2 Definition</textual></emphasis><textual class="po-textual"> Let G = (V, ch) be a
    CODG. A </textual><emphasis class="po-inline e658 e658" role="ital"><textual class="po-textual">root</textual></emphasis><textual class="po-textual"> in G is a vertex r ∈ V for
    which:</textual></para><blockquote class="po-container e659 e659"><para class="po-block e660 e660"><textual class="po-textual">(∄w ∈ V)[ (w, r) ∈ ap(G) ].</textual></para></blockquote><para class="po-block e661 e661"><emphasis class="po-inline e662 e662" role="bold"><textual class="po-textual">5.3 Notation</textual></emphasis><textual class="po-textual"> Let G = (V, ch) be a CODG.
    Unless otherwise stated, ap denotes ap(G).</textual></para><para class="po-block e663 e663"><textual class="po-textual">The next result establishes that for any distinct roots v and w,
    either v and w are in the same strongly-connected component, or else v and w
    are unordered in each of ssb and sea.</textual></para><para class="po-block e664 e664"><emphasis class="po-inline e665 e665" role="bold"><textual class="po-textual">5.4 Lemma</textual></emphasis><textual class="po-textual"> Let G = (V, ch) be a CODG,
    and v and w two distinct roots in G. Then, either:</textual></para><blockquote class="po-container e666 e666"><para class="po-block e667 e667"><textual class="po-textual">(v ⇒ w) &amp; (w ⇒ v)</textual></para></blockquote><para class="po-block e668 e668"><textual class="po-textual">or</textual></para><blockquote class="po-container e669 e669"><para class="po-block e670 e670"><textual class="po-textual">{ (v, w), (w, v) } ∩ ((ssb ∪ sea) − ⇒) = ∅.</textual></para></blockquote><para class="po-block e671 e671"><emphasis class="po-inline e672 e672" role="bold"><textual class="po-textual">Note:</textual></emphasis><textual class="po-textual"> For space consideration, most
    proofs are omitted. </textual></para><para class="po-block e673 e673"><textual class="po-textual">Thus, an important difference between noDAGs and CODGs is that the
    latter can have unordered root pairs, whereas noDAGs have (by definition) their
    roots totally-ordered.</textual></para><para class="po-block e674 e674"><emphasis class="po-inline e675 e675" role="bold"><textual class="po-textual">5.5 Definition</textual></emphasis><textual class="po-textual"> A CODG G = (V, ch) is
    said to be </textual><emphasis class="po-inline e676 e676" role="ital"><textual class="po-textual">sp-consistent</textual></emphasis><textual class="po-textual"> iff gsp is an acyclic
    relation, i.e., iff:</textual></para><blockquote class="po-container e677 e677"><para class="po-block e678 e678"><textual class="po-textual">(∀v ∈ V)[(v, v) ∉ transitive-closure(gsp)].</textual></para></blockquote><para class="po-block e679 e679"><textual class="po-textual">Note that if G is truly a multi-graph, i.e., if some node occurs more
    than once as a child of the same parent, then G is certainly
    </textual><emphasis class="po-inline e680 e680" role="ital"><textual class="po-textual">not</textual></emphasis><textual class="po-textual"> sp-consistent. However, G could fail to be
    sp-consistent without being a true multi-graph, for example if two siblings are
    ordered differently by two distinct parents.</textual></para><para class="po-block e681 e681"><emphasis class="po-inline e682 e682" role="bold"><textual class="po-textual">5.6 Definition</textual></emphasis><textual class="po-textual"> A CODG G = (V, ch) is
    said to be </textual><emphasis class="po-inline e683 e683" role="ital"><textual class="po-textual">reduced</textual></emphasis><textual class="po-textual"> iff no node is both
    directly and indirectly reachable from some other node, i.e., iff:</textual></para><blockquote class="po-container e684 e684"><para class="po-block e685 e685"><textual class="po-textual">(∄v, w, x ∈ V)[ {(v, w), (v, x)} ⊆ E(G) &amp;
      w ⇒ x].</textual></para></blockquote><para class="po-block e686 e686"><textual class="po-textual">Note that if there is a cycle in G, then it is </textual><emphasis class="po-inline e687 e687" role="ital"><textual class="po-textual">not</textual></emphasis><textual class="po-textual"> reduced.</textual></para><para class="po-block e688 e688"><emphasis class="po-inline e689 e689" role="bold"><textual class="po-textual">5.7 Lemma</textual></emphasis><textual class="po-textual"> If a CODG is
    sp-consistent, is reduced, and has a single root, then it is isomorphic to a
    noDAG; thus, by </textual><xref class="po-milestone e690 e690" linkend="M2008"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, it is oo-serializable iff it is
    completion-acyclic.</textual></para><para class="po-block e691 e691"><emphasis class="po-inline e692 e692" role="bold"><textual class="po-textual">5.8 Definition</textual></emphasis><textual class="po-textual"> Let G be a CODG. A
    </textual><emphasis class="po-inline e693 e693" role="ital"><textual class="po-textual">single-rooted extension</textual></emphasis><textual class="po-textual"> (sre) of a G, is
    identical to G with an added root that has as children the roots of the
    original CODG, in </textual><emphasis class="po-inline e694 e694" role="ital"><textual class="po-textual">some</textual></emphasis><textual class="po-textual"> ordering, without
    repetition.</textual></para><para class="po-block e695 e695"><textual class="po-textual">Note that, in general, a CODG has more than one sre (in effect, n!,
    where n is the number of roots in the original CODG, i.e., one for each
    possible ordering of the original roots).</textual></para><para class="po-block e696 e696"><emphasis class="po-inline e697 e697" role="bold"><textual class="po-textual">5.9 Lemma</textual></emphasis><textual class="po-textual"> A CODG is oo-serializable
    iff it has an sre that is oo-serializable.</textual></para><para class="po-block e698 e698"><emphasis class="po-inline e699 e699" role="ital"><textual class="po-textual">Proof sketch.</textual></emphasis><textual class="po-textual"> (←): Let G be a
    CODG, and H an oo-serializable sre of G. Let D be any serialization of H.
    Because H has only one root, and D corresponds to H, there must be a range in D
    that contains all the others. Thus, the first and last tag of H must be
    matching tags. By “removing” those tags from D, we obtain an
    oo-serialization of G.</textual></para><para class="po-block e700 e700"><textual class="po-textual">(→): Let G be an oo-serializable CODG, and D any serialization
    of G. By “adding” a start-tag and a matching end- tag at
    (respectively) the beginning and end of D, we obtain a document that can be
    shown to correspond to some sre of G.</textual></para><para class="po-block e701 e701"><textual class="po-textual">We are now ready to state our first main result:</textual></para><para class="po-block e702 e702"><emphasis class="po-inline e703 e703" role="bold"><textual class="po-textual">5.10 Theorem</textual></emphasis><textual class="po-textual"> There exist CODGs that
    are completion-acyclic but not oo-serializable.</textual></para><para class="po-block e704 e704"><emphasis class="po-inline e705 e705" role="ital"><textual class="po-textual">Proof sketch.</textual></emphasis><textual class="po-textual"> The theorem follows
    from the observations that:</textual></para><itemizedlist class="po-table e706 e706"><listitem class="po-container e707 e707"><para class="po-block e708 e708"><textual class="po-textual">Each of Examples 2.2 and 6 is completion-acyclic.</textual></para></listitem><listitem class="po-container e709 e709"><para class="po-block e710 e710"><textual class="po-textual">Each of Examples 2.2 and 6 has exactly two sres, each of which is
        sp-consistent, reduced, and (by definition of sre) has a single root.</textual></para></listitem><listitem class="po-container e711 e711"><para class="po-block e712 e712"><textual class="po-textual">Each sre of each of Examples 2.2 and 6 is completion-</textual><emphasis class="po-inline e713 e713" role="ital"><textual class="po-textual">cyclic</textual></emphasis><textual class="po-textual">.</textual></para></listitem></itemizedlist><para class="po-block e714 e714"><textual class="po-textual">By Lemma 5.7, none of Examples 2.2 and 6 has an sre that is
    oo-serializable. Thus, by Lemma 5.9, none of Examples 2.2 and 6 is
    oo-serializable.</textual></para><para class="po-block e715 e715"><textual class="po-textual">Our second main result is easiest seen as a corollary to the proof of
    the preceding theorem. First, we define:</textual></para><para class="po-block e716 e716"><emphasis class="po-inline e717 e717" role="bold"><textual class="po-textual">5.11 Definition</textual></emphasis><textual class="po-textual"> A CODG is said to be
    </textual><emphasis class="po-inline e718 e718" role="ital"><textual class="po-textual">fully-completion-acyclic</textual></emphasis><textual class="po-textual"> (FCA) iff it has an sre
    that is completion-acyclic.</textual></para><para class="po-block e719 e719"><emphasis class="po-inline e720 e720" role="bold"><textual class="po-textual">5.12 Theorem</textual></emphasis><textual class="po-textual"> A CODG is
    oo-serializable iff it is fully-completion-acyclic.</textual></para><para class="po-block e721 e721"><emphasis class="po-inline e722 e722" role="ital"><textual class="po-textual">Proof sketch.</textual></emphasis><textual class="po-textual"> The theorem follows
    from the proof of the preceding theorem and the following lemma:</textual></para><para class="po-block e723 e723"><emphasis class="po-inline e724 e724" role="bold"><textual class="po-textual">5.13 Lemma</textual></emphasis><textual class="po-textual"> If a CODG is not
    sp-consistent or is not reduced, then it is not completion-acyclic.</textual></para></section><section class="po-hcontainer e725 e725"><title class="po-block e726 e726"><textual class="po-textual">6. Checking full-completion-acyclicity</textual></title><para class="po-block e727 e727"><textual class="po-textual">An obvious way to check whether a CODG is fully-completion-acyclic is to try
    out all possible sres and see if at least one is completion-acyclic. From a
    completion-acyclic sre, it would be easy to derive an oo-serialization
    of the CODG. However, since there are n! different sres to check (where n is
    the number of roots in the CODG), this can be very inefficient. It would be
    nice to be able to check whether a CODG is fully-completion-acyclic without
    having to generate all possible sres.</textual></para><para class="po-block e728 e728"><textual class="po-textual">It turns out it suffices to check each pair of roots for a particular
    condition which is verifiable in polynomial time. Since there are n × (n - 1)
    / 2 root-pairs and checking the condition can be done in polynomial time, it
    follows that full-completion-acyclicity can in fact be checked in polynomial
    time.</textual></para><para class="po-block e729 e729"><textual class="po-textual">The condition to be checked is as follows.</textual></para><para class="po-block e730 e730"><emphasis class="po-inline e731 e731" role="bold"><textual class="po-textual">6.1 Definition</textual></emphasis><textual class="po-textual"> Let r and s be two roots of
    some CODG G = (V, ch) that are unordered with respect to ssb(G). We say that r
    </textual><emphasis class="po-inline e732 e732" role="ital"><textual class="po-textual">must precede</textual></emphasis><textual class="po-textual"> s, noted r ↝ s, iff there
    exist vertices x and y standing in either (or both) of the following configurations with
    respect to r and s:</textual></para><para class="po-block e733 e733"><textual class="po-textual">
      </textual><mediaobject class="po-container e734 e734"><imageobject class="po-container e735 e735"><imagedata class="po-meta e736 e736" fileref="../../../vol10/graphics/Marcoux01/Marcoux01-008.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e737 e737"><para class="po-block e738 e738"><textual class="po-textual">Root-pair configuration 1</textual></para></caption></mediaobject><textual class="po-textual">
      </textual><mediaobject class="po-container e739 e739"><imageobject class="po-container e740 e740"><imagedata class="po-meta e741 e741" fileref="../../../vol10/graphics/Marcoux01/Marcoux01-009.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e742 e742"><para class="po-block e743 e743"><textual class="po-textual">Root-pair configuration 2</textual></para></caption></mediaobject><textual class="po-textual">
    </textual></para><para class="po-block e744 e744"><textual class="po-textual">Here, the double-arrows represent the reachability (⇒) relation, not just
    parent-child relationships. The red double-arrow (with a stroke through it)
    means the complement of ⇒ (thus, in Configuration 1, s ⇏ x). It does not
    matter whether or not r ⇒ y (resp. s ⇒ x) in Configuration 1 (resp.
    Configuration 2). In other words, </textual><emphasis class="po-inline e745 e745"><textual class="po-textual">at least</textual></emphasis><textual class="po-textual"> one of r
    ⇏ y and s ⇏ x must be the case. The dotted green arrow means that (x, y) ∈
    (ssb − ⇒), in other words, that x precedes y without being an ancestor of
    it.</textual></para><para class="po-block e746 e746"><textual class="po-textual">An instance of at least one of those configurations is found in each of the following
    CODGs:</textual></para><para class="po-block e747 e747"><mediaobject class="po-container e748 e748"><imageobject class="po-container e749 e749"><imagedata class="po-meta e750 e750" fileref="../../../vol10/graphics/Marcoux01/Marcoux01-010.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e751 e751"><para class="po-block e752 e752"><textual class="po-textual">Example 7</textual></para></caption></mediaobject><textual class="po-textual">
    </textual><mediaobject class="po-container e753 e753"><imageobject class="po-container e754 e754"><imagedata class="po-meta e755 e755" fileref="../../../vol10/graphics/Marcoux01/Marcoux01-011.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e756 e756"><para class="po-block e757 e757"><textual class="po-textual">Example 8</textual></para></caption></mediaobject><textual class="po-textual">
    </textual><mediaobject class="po-container e758 e758"><imageobject class="po-container e759 e759"><imagedata class="po-meta e760 e760" fileref="../../../vol10/graphics/Marcoux01/Marcoux01-012.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e761 e761"><para class="po-block e762 e762"><textual class="po-textual">Example 9</textual></para></caption></mediaobject></para><para class="po-block e763 e763"><emphasis class="po-inline e764 e764" role="bold"><textual class="po-textual">6.2 Lemma</textual></emphasis><textual class="po-textual"> Let G be a CODG, and r and s be
    two roots in G such that r ↝ s. Then, for each H that is a CA sre of G, (r, s)
    ∈ gsp(H).</textual></para><para class="po-block e765 e765"><emphasis class="po-inline e766 e766"><textual class="po-textual">Proof sketch.</textual></emphasis><textual class="po-textual"> If there exists no CA sre of G, or if
    there are no two roots r and s in G such that r ↝ s, then the lemma is
    vacuously verified. Let thus H be any CA sre of G and, for the sake of
    contradiction, suppose r and s are two G-roots such that r ↝ s and such that
    (r, s) ∉ gsp(H). Suppose x and y are two vertices as in Configuration 1
    above (we prove only the case of Configuration 1; that of
    Configuration 2 is proved similarly).</textual></para><para class="po-block e767 e767"><textual class="po-textual">By the definition of sre, if (r, s) ∉ gsp(H), then it must be the case that
    (s, r) ∈ gsp(H), and thus, by construction of ssb(H) (Definition 4.3-2),
    that (s, r) ∈ ssb(H). Hence, it follows by Lemma 4 of </textual><xref class="po-milestone e768 e768" linkend="M2008"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and the fact that r and s do not stand in
    ancestor-descendant relationship (being both G-roots, they are
    ⇒-incomparable), that (r, s) ∈ sea(H). Similarly, from (x, y) ∈ ssb(H) and x ⇏
    y, and y ⇏ x (because (x, y) ∈ ssb(H)), we conclude that (y, x) ∈
    sea(H).</textual></para><para class="po-block e769 e769"><textual class="po-textual">Now, by construction of sea(H) (Definition 4.3-4), and from the facts
    that r ⇒ x, that (r, s) ∈ gsp</textual><superscript class="po-atom e770 e770"><textual class="po-textual">-1</textual></superscript><textual class="po-textual">(H), and that s ⇏ x,
    we conclude that (x, s) ∈ sea(H). So, we have (y, x) ∈ sea(H) (established
    earlier), and (x, s) ∈ sea(H), and (s, y) ∈ sea(H) (because s ⇒ y). Thus,
    sea(H) is cyclic, contrary to our hypothesis that H is CA, and so we must
    reject the hypothesis that (r, s) ∉ gsp(H), and conclude that (r, s) ∈
    gsp(H).</textual></para><para class="po-block e771 e771"><textual class="po-textual">QED</textual></para><para class="po-block e772 e772"><emphasis class="po-inline e773 e773" role="bold"><textual class="po-textual">6.3 Theorem</textual></emphasis><textual class="po-textual"> A CODG is FCA iff it is CA and
    it does not have any two roots r and s such that r ↝ s and s ↝ r.</textual></para><para class="po-block e774 e774"><emphasis class="po-inline e775 e775"><textual class="po-textual">Proof sketch.</textual></emphasis></para><para class="po-block e776 e776"><textual class="po-textual">(⇒) Any FCA CODG is CA. If a CODG had roots r and s such that r ↝ s and s ↝
    r, then by Lemma 6.2, it would have a cycle in ssb, and thus could not be
    CA.</textual></para><para class="po-block e777 e777"><textual class="po-textual">(⇐) Let G be a CA CODG in which no two roots r and s are such that r ↝ s and
    s ↝ r. Note that by Lemma 5.13 and the fact that G is CA, we know that G
    is sp-consistent and reduced, and will thus take this for granted.</textual></para><para class="po-block e778 e778"><textual class="po-textual">We give an algorithm for constructing an ordering of the roots of G that can
    be used as the root-order in a sre H of G which will be shown to be FCA. In
    the algorithm, ssb(G, ROR) denotes the result of building ssb as per
    Definitions 4.3-1 and 4.3-2, but using gsp(G) ∪ ROR instead of
    gsp(G)</textual></para><para class="po-block e779 e779"><emphasis class="po-inline e780 e780" role="bold"><textual class="po-textual">Algorithm:</textual></emphasis><textual class="po-textual">
    </textual><orderedlist class="po-table e781 e781"><listitem class="po-container e782 e782"><para class="po-block e783 e783"><textual class="po-textual">Let ROR = { (r, s) | r and s are roots in G and r ↝ s }.</textual></para></listitem><listitem class="po-container e784 e784"><para class="po-block e785 e785"><textual class="po-textual">Let SSB = ssb(G, ROR).</textual></para></listitem><listitem class="po-container e786 e786"><para class="po-block e787 e787"><textual class="po-textual">WHILE (∃ x, y ∈ V)[ch(x) = ch(y) &amp; {(x, y), (y, x)} ∩ SSB =
        ∅] </textual><orderedlist class="po-table e788 e788"><listitem class="po-container e789 e789"><para class="po-block e790 e790"><textual class="po-textual">Pick any x and y satisfying the WHILE clause, and
          let X = x, and Y = y.</textual></para></listitem><listitem class="po-container e791 e791"><para class="po-block e792 e792"><textual class="po-textual">Let ROR = ROR ∪ {(r, s) | r and s are roots in G,
          and r ⇒</textual><superscript class="po-atom e793 e793"><textual class="po-textual">*</textual></superscript><textual class="po-textual"> X, and s
          ⇒</textual><superscript class="po-atom e794 e794"><textual class="po-textual">*</textual></superscript><textual class="po-textual"> Y}.</textual></para></listitem><listitem class="po-container e795 e795"><para class="po-block e796 e796"><textual class="po-textual">Let SSB = ssb(G, ROR).</textual></para></listitem></orderedlist><textual class="po-textual">
        </textual></para></listitem></orderedlist><textual class="po-textual"> When the algorithm stops, ROR is the root-order to be used for
    constructing H.</textual></para><para class="po-block e797 e797"><textual class="po-textual">The intuition behind the algorithm is best conveyed with examples.
    Essentially, the algorithm goes like this: start with the root-orderings that
    are imposed by the topology of the CODG, i.e., those pairs of roots (r, s) for
    which r ↝ s. Then, for the other root-pairs, they can basically be ordered
    randomly, as long as no </textual><quote class="po-inline e798 e798"><textual class="po-textual">silly decision</textual></quote><textual class="po-textual"> is taken.</textual></para><para class="po-block e799 e799"><textual class="po-textual">To see what </textual><quote class="po-inline e800 e800"><textual class="po-textual">silly decisions</textual></quote><textual class="po-textual"> would be, consider
    Example 10. A silly decision would be to stick root r between s and t. To
    avoid such decisions, the root-ordering must be built gradually, considering
    one by one (the order does not matter) the unordered pairs of parents of the
    same children. For each such pair (x, y), decide of an arbitrary order, then,
    make sure all roots reachable upwards from x come before all those reachable
    upwards from y (there can be no root reachable both ways, otherwise, x and y
    would have been ordered to start with).</textual></para><para class="po-block e801 e801"><textual class="po-textual">Each time such root-orderings are added, the consequences on the global ordering
    of the CODG are recomputed and propagated down from the roots.</textual></para><para class="po-block e802 e802"><textual class="po-textual">Example 11 provides a more intricate example, in which eight possible
    pairs of unordered parents of the same children exist: (u, w), (u, x), (v, w),
    and (v, x), and their inverse. Whichever pair is chosen, it will result in roots r and s
    being ordered at step 3b, and then, in all eight pairs being ordered at 
    step 3c.</textual></para><para class="po-block e803 e803"><textual class="po-textual">Examples 12 and 13 show that the addition of a leaf can cause some
      root-pairs to be ordered from the start: (r ↝ s) and (r ↝ t) in
      Example 12; (r ↝ s) in Example 13.</textual></para><para class="po-block e804 e804"><textual class="po-textual">
      </textual><mediaobject class="po-container e805 e805"><imageobject class="po-container e806 e806"><imagedata class="po-meta e807 e807" fileref="../../../vol10/graphics/Marcoux01/Marcoux01-013.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e808 e808"><para class="po-block e809 e809"><textual class="po-textual">Example 10</textual></para></caption></mediaobject><textual class="po-textual">
      </textual><mediaobject class="po-container e810 e810"><imageobject class="po-container e811 e811"><imagedata class="po-meta e812 e812" fileref="../../../vol10/graphics/Marcoux01/Marcoux01-014.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e813 e813"><para class="po-block e814 e814"><textual class="po-textual">Example 11</textual></para></caption></mediaobject><textual class="po-textual">
      </textual><mediaobject class="po-container e815 e815"><imageobject class="po-container e816 e816"><imagedata class="po-meta e817 e817" fileref="../../../vol10/graphics/Marcoux01/Marcoux01-015.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e818 e818"><para class="po-block e819 e819"><textual class="po-textual">Example 12</textual></para></caption></mediaobject><textual class="po-textual">
      </textual><mediaobject class="po-container e820 e820"><imageobject class="po-container e821 e821"><imagedata class="po-meta e822 e822" fileref="../../../vol10/graphics/Marcoux01/Marcoux01-016.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e823 e823"><para class="po-block e824 e824"><textual class="po-textual">Example 13</textual></para></caption></mediaobject><textual class="po-textual">
    </textual></para><para class="po-block e825 e825"><emphasis class="po-inline e826 e826"><textual class="po-textual">Proof sketch of termination:</textual></emphasis><textual class="po-textual"> At each turn, at least one
    pair of the kind sought for in (3) is ordered. Indeed, it can be shown that
    the chosen pair (x, y) causes arcs to be added to ROR that will necessarily
    order the pair (x, y) itself. Thus, eventually, no pair satisfying the WHILE
    clause will remain.</textual></para><para class="po-block e827 e827"><emphasis class="po-inline e828 e828"><textual class="po-textual">Proof sketch that ROR orders all pairs of roots:</textual></emphasis><textual class="po-textual"> The
    existence of an unordered root-pair </textual><textual class="po-textual">
    implies that there is a pair satisfying the WHILE clause. Thus, when no more
    such pair exists, all the roots </textual><textual class="po-textual">
    have been ordered.
    </textual></para><para class="po-block e829 e829"><emphasis class="po-inline e830 e830"><textual class="po-textual">Proof sketch that ssb(G, ROR) is acyclic:</textual></emphasis><textual class="po-textual"> Any condition
    that might cause a cycle would also cause a cycle in { (r, s) | r and s are
    roots in G and r ↝ s }, a contradiction.</textual></para><para class="po-block e831 e831"><textual class="po-textual">A rough analysis of the algorithm shows that its running time is polynomial
    (probably with degree at most 3 or 4). Obviously, it could be used to actually
    build a CA sre of any FCA CODG, and thus an oo-serialization of the CODG. This
    establishes a polynomial upper-bound on the task of verifying
    full-completion-acyclicity and of generating an oo-serialization of a FCA
    CODG. While interesting, we do not believe these upper-bounds to be tight, and
    hence consider the exact complexity of these tasks to be open
    questions.</textual></para></section><section class="po-hcontainer e832 e832"><title class="po-block e833 e833"><textual class="po-textual">7. Conclusion and future work</textual></title><para class="po-block e834 e834"><textual class="po-textual">In this paper, we defined a class of graphs, </textual><emphasis class="po-inline e835 e835" role="ital"><textual class="po-textual">child-arc-ordered directed graphs</textual></emphasis><textual class="po-textual"> (CODGs), that includes
    multi-graphs and non-acyclic graphs, and investigated the conditions under
    which a CODG is “oo-serializable”, i.e., has a structure which
    corresponds to that of an overlap-only marked-up document. We found that the
    property of completion-acyclicity does </textual><emphasis class="po-inline e836 e836" role="ital"><textual class="po-textual">not</textual></emphasis><textual class="po-textual">
    guarantee oo-serializability in general for CODGs, by showing that there exist
    completion-acyclic CODGs that are not oo-serializable. By contrast, Marcoux
    has shown that for the less general class of </textual><emphasis class="po-inline e837 e837" role="ital"><textual class="po-textual">node-ordered-DAGs</textual></emphasis><textual class="po-textual"> (noDAGs), completion-acyclicity does
    guarantee oo-serializability </textual><xref class="po-milestone e838 e838" linkend="M2008"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><para class="po-block e839 e839"><textual class="po-textual">We then defined a condition strictly stronger than
    completion-acyclicity, </textual><emphasis class="po-inline e840 e840" role="ital"><textual class="po-textual">full-completion-acyclicity</textual></emphasis><textual class="po-textual">, and showed that it does
    guarantee oo-serializability for all CODGs.</textual></para><para class="po-block e841 e841"><textual class="po-textual">Finally, we presented polynomial-time algorithms for checking
    full-completion-acyclicity and for computing an oo-serialization of
    fully-completion-acyclic CODGs. However, we do not believe these algorithms to
    be optimal. Thus, open questions include determining the exact complexity of
    — and finding optimal algorithms for — checking
    completion-acyclicity, full-completion-acyclicity, and of actually computing
    an oo-serialization of a CODG once it is found to be serializable.</textual></para><para class="po-block e842 e842"><textual class="po-textual">Another area of research we hope to pursue in the near future is
    investigating whether and how some forms of interrupted and virtual elements,
    as found in TexMecs, can be characterized in terms of graphs.</textual></para></section><appendix class="po-hcontainer e843 e843"><title class="po-block e844 e844"><textual class="po-textual">Notation and symbols</textual></title><para class="po-block e845 e845"><textual class="po-textual">For the convenience of readers who find the notation used
      here unfamiliar, we list here the symbols and conventional
      variable names used in this paper.</textual></para><variablelist class="po-table e846 e846"><varlistentry class="po-record e847 e847"><term class="po-block e848 e848"><textual class="po-textual">↝</textual></term><listitem class="po-container e849 e849"><para class="po-block e850 e850"><textual class="po-textual">the must-precede relation on roots of a graph
	  G:  r ↝ s if and only if there exist vertices x and y standing in some
	  specific configurations with respect to r and s (see Definition 6.1).
	  </textual></para></listitem></varlistentry><varlistentry class="po-record e851 e851"><term class="po-block e852 e852"><textual class="po-textual">⇒</textual><subscript class="po-atom e853 e853"><textual class="po-textual">G</textual></subscript></term><listitem class="po-container e854 e854"><para class="po-block e855 e855"><textual class="po-textual">the positive transitive closure of
	    E(G), for any graph G; sometimes known as the 
	    reachability relation of G; often abbreviated
	    to ⇒ when the identity of G is understood.
	  </textual></para></listitem></varlistentry><varlistentry class="po-record e856 e856"><term class="po-block e857 e857"><textual class="po-textual">⇒</textual><superscript class="po-atom e858 e858"><textual class="po-textual">*</textual></superscript><subscript class="po-atom e859 e859"><textual class="po-textual">G</textual></subscript></term><listitem class="po-container e860 e860"><para class="po-block e861 e861"><textual class="po-textual">the reflexive transitive closure of
	    E(G), for any graph G; often abbreviated
	    to ⇒</textual><superscript class="po-atom e862 e862"><textual class="po-textual">*</textual></superscript><textual class="po-textual"> when 
	    the identity of G is understood.
	  </textual></para></listitem></varlistentry><varlistentry class="po-record e863 e863"><term class="po-block e864 e864"><textual class="po-textual">∈</textual></term><listitem class="po-container e865 e865"><para class="po-block e866 e866"><textual class="po-textual">is an element of.  So </textual><quote class="po-inline e867 e867"><textual class="po-textual">x ∈
	      y</textual></quote><textual class="po-textual"> means that x is an element in the 
	    set y.
	  </textual></para></listitem></varlistentry><varlistentry class="po-record e868 e868"><term class="po-block e869 e869"><textual class="po-textual">∪</textual></term><listitem class="po-container e870 e870"><para class="po-block e871 e871"><textual class="po-textual">set union.  So </textual><quote class="po-inline e872 e872"><textual class="po-textual">x ∪ y</textual></quote><textual class="po-textual">
	    denotes the set of all elements which are members either
	    of set x or of set y or both.
	  </textual></para></listitem></varlistentry><varlistentry class="po-record e873 e873"><term class="po-block e874 e874"><textual class="po-textual">∩</textual></term><listitem class="po-container e875 e875"><para class="po-block e876 e876"><textual class="po-textual">set intersection.  So </textual><quote class="po-inline e877 e877"><textual class="po-textual">x ∩ y</textual></quote><textual class="po-textual">
	    denotes the set of all elements which are members of
	    both set x and set y.
	  </textual></para></listitem></varlistentry><varlistentry class="po-record e878 e878"><term class="po-block e879 e879"><textual class="po-textual">ap(G)</textual></term><listitem class="po-container e880 e880"><para class="po-block e881 e881"><textual class="po-textual">the ancestral-precedence relation of a graph G;
	    abbreviated ap when G is understood.  This is a binary
	    relation consisting of all node pairs (v, w) for which
	    (informally) v is an ancestor of w and not vice-versa.
	  </textual></para></listitem></varlistentry><varlistentry class="po-record e882 e882"><term class="po-block e883 e883"><textual class="po-textual">ch</textual></term><listitem class="po-container e884 e884"><para class="po-block e885 e885"><textual class="po-textual">(core meaning) a unary function that maps each
	    node of a graph to a sequence of nodes of that
	    graph.</textual></para><para class="po-block e886 e886"><textual class="po-textual">(secondary meaning) a two-argument function that 
	    maps from a pair (v, n) (where v is a node and n is
	    an integer) to at most one node among the children of v.
	  </textual></para></listitem></varlistentry><varlistentry class="po-record e887 e887"><term class="po-block e888 e888"><textual class="po-textual">ch(v)</textual></term><listitem class="po-container e889 e889"><para class="po-block e890 e890"><textual class="po-textual">for any node v in a graph G,
	    </textual><quote class="po-inline e891 e891"><textual class="po-textual">ch(v)</textual></quote><textual class="po-textual"> denotes a sequence of nodes in
	    G.</textual></para><para class="po-block e892 e892"><textual class="po-textual">Note that sequences are typically modeled as
	    sets of pairs (n, e) where n is a number and e an 
	    element of the sequence.  The set of pairs
	    denoted by ch(v) can thus be treated as a function 
	    from non-negative integers to nodes in the graph:
	    for any node v and any suitable integer
	    n, </textual><quote class="po-inline e893 e893"><textual class="po-textual">ch(v)(n)</textual></quote><textual class="po-textual"> denotes the nth child of v;
	    ch(v)(0) denotes the first child, ch(v)(1) denotes
	    the second, etc. To reduce the need for parentheses,
	    </textual><quote class="po-inline e894 e894"><textual class="po-textual">ch(v)(n)</textual></quote><textual class="po-textual"> is normally written in the
	    simpler form </textual><quote class="po-inline e895 e895"><textual class="po-textual">ch(v,n)</textual></quote><textual class="po-textual">.
	  </textual></para></listitem></varlistentry><varlistentry class="po-record e896 e896"><term class="po-block e897 e897"><textual class="po-textual">ch(v, n)</textual></term><listitem class="po-container e898 e898"><para class="po-block e899 e899"><textual class="po-textual">denotes the nth child (counting from 0)
	    of node v.  This is a short-hand form for the
	    expression ch(v)(n).
	  </textual></para></listitem></varlistentry><varlistentry class="po-record e900 e900"><term class="po-block e901 e901"><textual class="po-textual">E(G)</textual></term><listitem class="po-container e902 e902"><para class="po-block e903 e903"><textual class="po-textual">the set of arcs in a graph G</textual></para></listitem></varlistentry><varlistentry class="po-record e904 e904"><term class="po-block e905 e905"><textual class="po-textual">G</textual></term><listitem class="po-container e906 e906"><para class="po-block e907 e907"><textual class="po-textual">the conventional variable for a graph (here
	invariably a CODG)</textual></para></listitem></varlistentry><varlistentry class="po-record e908 e908"><term class="po-block e909 e909"><textual class="po-textual">gsp</textual></term><listitem class="po-container e910 e910"><para class="po-block e911 e911"><textual class="po-textual">a shorthand form of gsp(G) when the identity of
	    the graph G is understood.
	  </textual></para></listitem></varlistentry><varlistentry class="po-record e912 e912"><term class="po-block e913 e913"><textual class="po-textual">gsp(G)</textual></term><listitem class="po-container e914 e914"><para class="po-block e915 e915"><textual class="po-textual">the global sibling-precedence relation of a graph G;
	    written as </textual><quote class="po-inline e916 e916"><textual class="po-textual">sp</textual></quote><textual class="po-textual"> when G is understood.
	    This is (speaking informally) a relation consisting of all
	    node pairs (v, w) which share a parent, and for which v
	    precedes w among the children of that parent. Note that
	    the same pair of children may share more than one parent,
	    occurring in one order for one parent and in the other
	    order for the other parent.  So gsp(Example 2.3)
	    includes both (</textual><emphasis class="po-inline e917 e917" role="ital"><textual class="po-textual">b</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e918 e918" role="ital"><textual class="po-textual">c</textual></emphasis><textual class="po-textual">) and (</textual><emphasis class="po-inline e919 e919" role="ital"><textual class="po-textual">c</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e920 e920" role="ital"><textual class="po-textual">b</textual></emphasis><textual class="po-textual">).
	  </textual></para></listitem></varlistentry><varlistentry class="po-record e921 e921"><term class="po-block e922 e922"><textual class="po-textual">N</textual></term><listitem class="po-container e923 e923"><para class="po-block e924 e924"><textual class="po-textual">the natural numbers (0, 1, 2, ...)</textual></para></listitem></varlistentry><varlistentry class="po-record e925 e925"><term class="po-block e926 e926"><textual class="po-textual">n, m</textual></term><listitem class="po-container e927 e927"><para class="po-block e928 e928"><textual class="po-textual">conventional variables used to represent
	    individual natural numbers</textual></para></listitem></varlistentry><varlistentry class="po-record e929 e929"><term class="po-block e930 e930"><textual class="po-textual">r</textual></term><listitem class="po-container e931 e931"><para class="po-block e932 e932"><textual class="po-textual">conventional variable used to denote an
	    arbitrary range.</textual></para></listitem></varlistentry><varlistentry class="po-record e933 e933"><term class="po-block e934 e934"><textual class="po-textual">r</textual><subscript class="po-atom e935 e935"><textual class="po-textual">1</textual></subscript></term><listitem class="po-container e936 e936"><para class="po-block e937 e937"><textual class="po-textual">for a given range r, 
	    r</textual><subscript class="po-atom e938 e938"><textual class="po-textual">1</textual></subscript><textual class="po-textual"> denotes the first
	    element of r.</textual></para></listitem></varlistentry><varlistentry class="po-record e939 e939"><term class="po-block e940 e940"><textual class="po-textual">r</textual><subscript class="po-atom e941 e941"><textual class="po-textual">2</textual></subscript></term><listitem class="po-container e942 e942"><para class="po-block e943 e943"><textual class="po-textual">for a given range r, 
	    r</textual><subscript class="po-atom e944 e944"><textual class="po-textual">2</textual></subscript><textual class="po-textual"> denotes the second
	    element of r.</textual></para></listitem></varlistentry><varlistentry class="po-record e945 e945"><term class="po-block e946 e946"><textual class="po-textual">r, s</textual></term><listitem class="po-container e947 e947"><para class="po-block e948 e948"><textual class="po-textual">conventional variables used to denote two
	    roots of a CODG.</textual></para></listitem></varlistentry><varlistentry class="po-record e949 e949"><term class="po-block e950 e950"><textual class="po-textual">sea(G)</textual></term><listitem class="po-container e951 e951"><para class="po-block e952 e952"><textual class="po-textual">the </textual><quote class="po-inline e953 e953"><textual class="po-textual">should-end-after</textual></quote><textual class="po-textual"> relation
	    of a graph G; abbreviated </textual><quote class="po-inline e954 e954"><textual class="po-textual">sea</textual></quote><textual class="po-textual"> when G is
	    understood</textual></para></listitem></varlistentry><varlistentry class="po-record e955 e955"><term class="po-block e956 e956"><textual class="po-textual">seaa(G)</textual></term><listitem class="po-container e957 e957"><para class="po-block e958 e958"><textual class="po-textual">the </textual><quote class="po-inline e959 e959"><textual class="po-textual">should-end-after additions</textual></quote><textual class="po-textual">
	    relation of a graph G; abbreviated </textual><quote class="po-inline e960 e960"><textual class="po-textual">seaa</textual></quote><textual class="po-textual">
	    when G is understood</textual></para></listitem></varlistentry><varlistentry class="po-record e961 e961"><term class="po-block e962 e962"><textual class="po-textual">sp</textual></term><listitem class="po-container e963 e963"><para class="po-block e964 e964"><textual class="po-textual">a shorthand form of sp(G) when the identity of
	    the graph G is understood.
	  </textual></para></listitem></varlistentry><varlistentry class="po-record e965 e965"><term class="po-block e966 e966"><textual class="po-textual">sp(G)</textual></term><listitem class="po-container e967 e967"><para class="po-block e968 e968"><textual class="po-textual">the sibling-precedence relation of a graph G; this is
	    a ternary relation consisting of all node triples (v, w,
	    x) for which (informally) w precedes x among the children
	    of v; note that if w occurs more than once among the
	    children of v, then the triple (v, w, w) appears in
	    sp.  If some node x occurs between the two occurrences of
	    w, then (v, w, x) and (v, x, w) are both in sp.</textual></para></listitem></varlistentry><varlistentry class="po-record e969 e969"><term class="po-block e970 e970"><textual class="po-textual">sre</textual></term><listitem class="po-container e971 e971"><para class="po-block e972 e972"><textual class="po-textual">single-rooted extension of some graph G.  Note that
	    any multi-rooted graph G has many single-rooted extensions
	    (one for each possible ordering of the roots of G).
	  </textual></para></listitem></varlistentry><varlistentry class="po-record e973 e973"><term class="po-block e974 e974"><textual class="po-textual">ssb(G)</textual></term><listitem class="po-container e975 e975"><para class="po-block e976 e976"><textual class="po-textual">the </textual><quote class="po-inline e977 e977"><textual class="po-textual">should-start-before</textual></quote><textual class="po-textual">
	    relation of a graph G; abbreviated </textual><quote class="po-inline e978 e978"><textual class="po-textual">ssb</textual></quote><textual class="po-textual"> when
	    G is understood</textual></para></listitem></varlistentry><varlistentry class="po-record e979 e979"><term class="po-block e980 e980"><textual class="po-textual">ssba(G)</textual></term><listitem class="po-container e981 e981"><para class="po-block e982 e982"><textual class="po-textual">the </textual><quote class="po-inline e983 e983"><textual class="po-textual">should-start-before
	      additions</textual></quote><textual class="po-textual"> relation of a graph G; abbreviated
	    </textual><quote class="po-inline e984 e984"><textual class="po-textual">ssba</textual></quote><textual class="po-textual"> when G is understood</textual></para></listitem></varlistentry><varlistentry class="po-record e985 e985"><term class="po-block e986 e986"><textual class="po-textual">V</textual></term><listitem class="po-container e987 e987"><para class="po-block e988 e988"><textual class="po-textual">the set of nodes (or vertices) in a graph; 
	  a short-hand for V(G)</textual></para></listitem></varlistentry><varlistentry class="po-record e989 e989"><term class="po-block e990 e990"><textual class="po-textual">V(G)</textual></term><listitem class="po-container e991 e991"><para class="po-block e992 e992"><textual class="po-textual">the set of vertices in a graph G</textual></para></listitem></varlistentry><varlistentry class="po-record e993 e993"><term class="po-block e994 e994"><textual class="po-textual">V × V</textual></term><listitem class="po-container e995 e995"><para class="po-block e996 e996"><textual class="po-textual">the Cartesian product of V, the set of nodes;
	    that is, the set of pairs (v, w) where v ∈ V and w
	    ∈ V</textual></para></listitem></varlistentry><varlistentry class="po-record e997 e997"><term class="po-block e998 e998"><textual class="po-textual">V × V × V</textual></term><listitem class="po-container e999 e999"><para class="po-block e1000 e1000"><textual class="po-textual">the set of triples (v, w, x) where v, w and x
	are all ∈ V.</textual></para></listitem></varlistentry><varlistentry class="po-record e1001 e1001"><term class="po-block e1002 e1002"><textual class="po-textual">v, w, x, u</textual></term><listitem class="po-container e1003 e1003"><para class="po-block e1004 e1004"><textual class="po-textual">variables conventionally used
	    for individual nodes in a graph (by convention, all of 
	    v, w, x, u ∈ V)</textual></para></listitem></varlistentry></variablelist></appendix><bibliography class="po-hcontainer e1005 e1005"><title class="po-block e1006 e1006"><textual class="po-textual">References</textual></title><bibliomixed class="po-block e1007 e1007" xml:id="B1995"><textual class="po-textual">David Barnard, Lou Burnard, Jean-Pierre
    Gaspart, Lynne A. Price, C. M. Sperberg-McQueen, and Giovanni Battista Varile.
    “Hierarchical Encoding of Text: Technical Problems and SGML
    Solutions”, in </textual><emphasis class="po-inline e1008 e1008" role="ital"><textual class="po-textual">Computers and the
    Humanities</textual></emphasis><textual class="po-textual">, 29/3 1995, pp. 211-231. 
    </textual><link class="po-inline e1009 e1009" xlink:actuate="onRequest" xlink:href="http://www.springerlink.com/content/p7775247276v88h3/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.springerlink.com/content/p7775247276v88h3/</textual></link><textual class="po-textual">,  </textual><link class="po-inline e1010 e1010" xlink:actuate="onRequest" xlink:href="http://xml.coverpages.org/barnardHier-ps.gz" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://xml.coverpages.org/barnardHier-ps.gz</textual></link><textual class="po-textual">. doi:</textual><biblioid class="po-atom e1011 doi e1011"><textual class="po-textual">10.1007/BF01830617</textual></biblioid></bibliomixed><bibliomixed class="po-block e1012 e1012" xml:id="D2004"><textual class="po-textual">Steven DeRose. “Markup Overlap: A
      Review and a Horse”.  Paper delivered at Extreme Markup
      Languages, 2004, Montréal.
       </textual><link class="po-inline e1013 e1013" xlink:actuate="onRequest" xlink:href="http://conferences.idealliance.org/extreme/html/2004/DeRose01/EML2004DeRose01.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://conferences.idealliance.org/extreme/html/2004/DeRose01/EML2004DeRose01.html</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e1014 e1014" xml:id="HS2003"><textual class="po-textual">Claus Huitfeldt and C. M. Sperberg-McQueen.
    </textual><emphasis class="po-inline e1015 e1015" role="ital"><textual class="po-textual">TexMECS: An experimental markup meta-language for complex
    documents.</textual></emphasis><textual class="po-textual"> University of Bergen, January 2001, rev. October 2003. 
    </textual><link class="po-inline e1016 e1016" xlink:actuate="onRequest" xlink:href="http://mlcd.blackmesatech.com/mlcd/2003/Papers/texmecs.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://mlcd.blackmesatech.com/mlcd/2003/Papers/texmecs.html</textual></link></bibliomixed><bibliomixed class="po-block e1017 e1017" xml:id="M2008"><textual class="po-textual">Yves Marcoux. </textual><emphasis class="po-inline e1018 e1018" role="ital"><textual class="po-textual">Graph
    characterization of overlap-only TexMECS and other overlapping markup
    formalisms</textual></emphasis><textual class="po-textual">. Proceedings of the </textual><emphasis class="po-inline e1019 e1019" role="ital"><textual class="po-textual">Balisage
    2008</textual></emphasis><textual class="po-textual"> conference, 12-15 august 2008, Montréal (Canada). 
    doi:</textual><biblioid class="po-atom e1020 doi e1020"><textual class="po-textual">10.4242/BalisageVol1.Marcoux01</textual></biblioid></bibliomixed><bibliomixed class="po-block e1021 e1021" xml:id="M2012"><textual class="po-textual">Moore, Neil. </textual><emphasis class="po-inline e1022 e1022"><textual class="po-textual">Multihierarchical documents
    and fine-grained access control</textual></emphasis><textual class="po-textual"> (2012). Theses and
    Dissertations--Computer Science. Paper 6. </textual><link class="po-inline e1023 e1023" xlink:actuate="onRequest" xlink:href="http://uknowledge.uky.edu/cs_etds/6" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://uknowledge.uky.edu/cs_etds/6</textual></link></bibliomixed><bibliomixed class="po-block e1024 e1024" xml:id="SH2004"><textual class="po-textual">C. M. Sperberg-McQueen and Claus Huitfeldt.
    </textual><emphasis class="po-inline e1025 e1025" role="ital"><textual class="po-textual">GODDAG: A Data Structure for Overlapping
    Hierarchies.</textual></emphasis><textual class="po-textual"> Springer-Verlag (2004).
      Preprint at 
      </textual><link class="po-inline e1026 e1026" xlink:actuate="onRequest" xlink:href="http://cmsmcq.com/2000/poddp2000.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://cmsmcq.com/2000/poddp2000.html</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e1027 e1027" xml:id="SH1999"><textual class="po-textual">C. M. Sperberg-McQueen and Claus Huitfeldt:
    “Concurrent Document Hierarchies in MECS and SGML”, in
    </textual><emphasis class="po-inline e1028 e1028" role="ital"><textual class="po-textual">Literary and Linguistic Computing</textual></emphasis><textual class="po-textual">, 14 1999,
    pp. 29-42. 
    </textual><link class="po-inline e1029 e1029" xlink:actuate="onRequest" xlink:href="http://llc.oxfordjournals.org/cgi/content/abstract/14/1/29" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://llc.oxfordjournals.org/cgi/content/abstract/14/1/29</textual></link><textual class="po-textual">. doi:</textual><biblioid class="po-atom e1030 doi e1030"><textual class="po-textual">10.1093/llc/14.1.29</textual></biblioid></bibliomixed><bibliomixed class="po-block e1031 e1031" xml:id="W2005"><textual class="po-textual">Andreas Witt. “Multiple Hierarchies: New
    Aspects of an Old Solution”, in: Stefanie Dipper, Michael Götze, and
    Manfred Stede (eds.), </textual><emphasis class="po-inline e1032 e1032" role="ital"><textual class="po-textual">Heterogeneity in Focus: Creating
    and Using Linguistic Databases</textual></emphasis><textual class="po-textual">, vol. 2 of Interdisciplinary
    Studies on Information Structure (ISIS), Working Papers of the SFB 632.
    University of Potsdam, Germany, 2005. (Corrected reprint of an Extreme Markup
    2004 paper.) 
    </textual><link class="po-inline e1033 e1033" xlink:actuate="onRequest" xlink:href="http://www.sfb632.uni-potsdam.de/publications/isis02_4witt.pdf" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.sfb632.uni-potsdam.de/publications/isis02_4witt.pdf</textual></link></bibliomixed></bibliography></article></classedDocument>