<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.3"><title class="po-block e1 e1"><textual class="po-textual">Carrot</textual></title><subtitle class="po-block e2 e2"><textual class="po-textual">An appetizing hybrid of XQuery and XSLT</textual></subtitle><info class="po-record e3 e3"><confgroup class="po-record e4 e4"><conftitle class="po-field e5 e5"><textual class="po-textual">Balisage: The Markup Conference 2011</textual></conftitle><confdates class="po-field e6 e6"><textual class="po-textual">August 2 - 5, 2011</textual></confdates></confgroup><abstract class="po-container e7 e7"><para class="po-block e8 e8"><textual class="po-textual">On the surface, XQuery and XSLT are very different languages. Users tend to prefer one language or the other. XSLT users are loath to give up the power of template rules; on the other hand, users of XQuery prefer its concise, composable syntax and perhaps wouldn't dare writing code in XML. There are good historical reasons why they are not the same language. For one thing, XSLT came first, and XQuery was designed more with SQL users in mind. However, the two languages share the same data model and a large syntactic subset (XPath 2.0), which raises the question: Is there a way to yield the unique benefits of both languages without having to continually decide between the two? The answer is yes. Carrot, an appetizing hybrid of XQuery and XSLT, lets you have your cake and eat it too.</textual></para><para class="po-block e9 e9"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></para></abstract><author class="po-record e10 e10"><personname class="po-record e11 e11"><firstname class="po-field e12 e12"><textual class="po-textual">Evan</textual></firstname><surname class="po-field e13 e13"><textual class="po-textual">Lenz</textual></surname></personname><personblurb class="po-container e14 e14"><para class="po-block e15 e15"><textual class="po-textual">Evan Lenz has been a specialist in XML technologies since 1999, having served on the W3C XSL Working Group, written XML-related books and articles, and spoken at numerous conferences. He is currently working for MarkLogic Corporation.</textual></para></personblurb><affiliation class="po-record e16 e16"><jobtitle class="po-field e17 e17"><textual class="po-textual">Software Developer, Community</textual></jobtitle><orgname class="po-block e18 e18"><textual class="po-textual">MarkLogic Corporation</textual></orgname></affiliation><email class="po-field e19 e19"><textual class="po-textual">evan.lenz@marklogic.com</textual></email><link class="po-inline e20 e20" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://developer.marklogic.com/blog</textual></link></author><legalnotice class="po-container e21 e21"><para class="po-block e22 e22"><textual class="po-textual">Copyright © 2011 MarkLogic Corporation</textual></para></legalnotice></info><section class="po-hcontainer e23 e23"><title class="po-block e24 e24"><textual class="po-textual">Introduction</textual></title><para class="po-block e25 e25"><textual class="po-textual">Carrot combines the best that XQuery and XSLT have to offer:</textual></para><itemizedlist class="po-table e26 e26"><listitem class="po-container e27 e27"><para class="po-block e28 e28"><textual class="po-textual">
the friendly
syntax and composability of XQuery expressions, plus</textual></para></listitem><listitem class="po-container e29 e29"><para class="po-block e30 e30"><textual class="po-textual">
the power and
flexibility of template rules in XSLT.</textual></para></listitem></itemizedlist><para class="po-block e31 e31"><textual class="po-textual">
Carrot can also be (loosely) thought of as an alternative, more
composable syntax for XSLT.</textual></para></section><section class="po-hcontainer e32 e32"><title class="po-block e33 e33"><textual class="po-textual">Background and
influences</textual></title><para class="po-block e34 e34"><textual class="po-textual">
Carrot is not the first XSLT-inspired project to provide a shorter
syntax than XSLT itself. Syntax shorthands have included Paul
Tchistopolskii's </textual><link class="po-inline e35 e35" xlink:actuate="onRequest" xlink:href="http://markmail.org/message/niumiluelzho6bmt" xlink:show="new" xlink:type="simple"><textual class="po-textual">XSLScript</textual></link><textual class="po-textual">, Sam
Wilmott's </textual><link class="po-inline e36 e36" xlink:actuate="onRequest" xlink:href="http://www.wilmott.ca/rxslt/rxslt.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">RXSLT</textual></link><textual class="po-textual">, and another
project called </textual><link class="po-inline e37 e37" xlink:actuate="onRequest" xlink:href="http://savannah.nongnu.org/projects/xsltxt" xlink:show="new" xlink:type="simple"><textual class="po-textual">XSLTXT</textual></link><textual class="po-textual">. Although
none of these projects provided direct inspiration for Carrot, they
all address one of the same desires that Carrot addresses: being
able to program in XSLT more concisely. However, unlike these
projects, Carrot addresses more than XSLT's verbosity. It also
addresses XSLT's limited composability. For example, in XSLT you
can't include an element constructor in a path expression (like you
can in XQuery and Carrot) or apply templates inside a path
expression (which you can uniquely do in Carrot).</textual></para><para class="po-block e38 e38"><textual class="po-textual">A
more direct inspiration was James Clark's proposal for </textual><link class="po-inline e39 e39" xlink:actuate="onRequest" xlink:href="http://www.jclark.com/xml/construct.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">Unifying XSLT and XQuery
element construction</textual></link><textual class="po-textual">. Written during the early days of
the W3C activity on XQuery, that proposal suggested that XQuery and
XSLT language constructs could be used interchangeably if XQuery
used an XML-based syntax (via a simple document element wrapper).
As we now know, things didn't turn out that way. Carrot takes
essentially the opposite approach. Rather than make XQuery use an
XML-based syntax like XSLT's, make XSLT (Carrot, actually) use a
non-XML-based syntax like XQuery's.</textual></para><para class="po-block e40 e40"><textual class="po-textual">
Carrot is also inspired by Haskell's syntax, which defines
functions using pattern-matching and an equation-like syntax.</textual></para></section><section class="po-hcontainer e41 e41"><title class="po-block e42 e42"><textual class="po-textual">Introduction by example</textual></title><para class="po-block e43 e43"><textual class="po-textual">
Carrot is best understood by example. Here's an example of XSLT's
syntax for a template rule (henceforth "rule"):</textual></para><programlisting class="po-block e44 e44" xml:space="preserve"><textual class="po-textual">&lt;xsl:template match="para"&gt;
  &lt;p&gt;
    &lt;xsl:apply-templates/&gt;
  &lt;p&gt;
&lt;/xsl:template&gt;</textual></programlisting><para class="po-block e45 e45"><textual class="po-textual">
In Carrot, you'd write the above rule like this:</textual></para><programlisting class="po-block e46 e46" xml:space="preserve"><textual class="po-textual">^(para) := &lt;p&gt;{^()}&lt;/p&gt;;</textual></programlisting><para class="po-block e47 e47"><textual class="po-textual">There are a few things to note
about the above. To define a rule in Carrot, you use the same
operator that XQuery uses for binding variables
(:=).
Everything on the right-hand side up to the semi-colon is an
expression in Carrot. An expression in Carrot is simply an XQuery
expression, plus some extensions. In this case, the expression is
using the extended syntax for invoking rules:</textual></para><programlisting class="po-block e48 e48" xml:space="preserve"><textual class="po-textual">^()</textual></programlisting><para class="po-block e49 e49"><textual class="po-textual">
which is short for:</textual></para><programlisting class="po-block e50 e50" xml:space="preserve"><textual class="po-textual">^(node())</textual></programlisting><para class="po-block e51 e51"><textual class="po-textual">
just as:</textual></para><programlisting class="po-block e52 e52" xml:space="preserve"><textual class="po-textual">&lt;xsl:apply-templates/&gt;</textual></programlisting><para class="po-block e53 e53"><textual class="po-textual">
is short for:</textual></para><programlisting class="po-block e54 e54" xml:space="preserve"><textual class="po-textual">&lt;xsl:apply-templates select="node()"/&gt;</textual></programlisting><para class="po-block e55 e55"><textual class="po-textual">
All rules belong to a </textual><emphasis class="po-inline e56 e56" role="ital"><textual class="po-textual">ruleset</textual></emphasis><textual class="po-textual"> (equivalent to a "mode" in
XSLT). The above examples use the unnamed ruleset (there's just one
of these). Here's an example that belongs to a ruleset named
"toc":</textual></para><programlisting class="po-block e57 e57" xml:space="preserve"><textual class="po-textual">^toc(section) := &lt;li&gt;{ ^toc() }&lt;/li&gt;;</textual></programlisting><para class="po-block e58 e58"><textual class="po-textual">
The above is short for:</textual></para><programlisting class="po-block e59 e59" xml:space="preserve"><textual class="po-textual">&lt;xsl:template match="section" mode="toc"&gt;
  &lt;li&gt;
    &lt;xsl:apply-templates mode="toc"/&gt;
  &lt;/li&gt;
&lt;/xsl:template&gt;</textual></programlisting><para class="po-block e60 e60"><textual class="po-textual">
Here's the identity transform in Carrot:</textual></para><programlisting class="po-block e61 e61" xml:space="preserve"><textual class="po-textual">^(@*|node()) := copy{ ^(@*|node()) };</textual></programlisting><para class="po-block e62 e62"><textual class="po-textual">
This recursively copies the input to the output, one node at a
time.</textual></para><para class="po-block e63 e63"><textual class="po-textual">Here's a Carrot script that
creates an HTML document with dynamic content for its title and
body, converting &lt;para&gt; elements
in the input to &lt;p&gt; elements
in the output:</textual></para><programlisting class="po-block e64 e64" xml:space="preserve"><textual class="po-textual">^(/) :=
 &lt;html&gt;
   &lt;head&gt;
     { /doc/title }
   &lt;/head&gt;
   &lt;body&gt;
     { ^(/doc/para) }
   &lt;/body&gt;
 &lt;/html&gt;;

^(para) := &lt;p&gt;{ ^() }&lt;/p&gt;;</textual></programlisting><para class="po-block e65 e65"><textual class="po-textual">
As a comparison, here's what you'd have to write if you were using
regular XSLT:</textual></para><programlisting class="po-block e66 e66" xml:space="preserve"><textual class="po-textual">&lt;xsl:transform version="2.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:template match="/"&gt;
    &lt;html&gt;
      &lt;head&gt;
        &lt;xsl:copy-of select="/doc/title"/&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;xsl:apply-templates select="/doc/para"/&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="para"&gt;
    &lt;p&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/p&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</textual></programlisting><para class="po-block e67 e67"><textual class="po-textual">Just
as in XSLT, rules in Carrot can be associated with more than one
mode. In XSLT, this template rule belongs to two modes:</textual></para><programlisting class="po-block e68 e68" xml:space="preserve"><textual class="po-textual">&lt;xsl:template mode="foo bar" match="bang"/&gt;</textual></programlisting><para class="po-block e69 e69"><textual class="po-textual">Here's the equivalent rule in
Carrot, belonging to two rulesets:</textual></para><programlisting class="po-block e70 e70" xml:space="preserve"><textual class="po-textual">^foo|bar(bang) := ();</textual></programlisting></section><section class="po-hcontainer e71 e71"><title class="po-block e72 e72"><textual class="po-textual">Carrot definitions</textual></title><para class="po-block e73 e73"><textual class="po-textual">A
Carrot module consists of a set of unordered </textual><emphasis class="po-inline e74 e74" role="ital"><textual class="po-textual">definitions</textual></emphasis><textual class="po-textual">. Unlike XQuery, there is
no distinction between main modules and library modules. Likewise, a Carrot module has no "body." Instead, there are only definitions.
Carrot is more like XSLT in this regard. Also unlike XQuery, Carrot modules need not be associated with a namespace.</textual></para><para class="po-block e75 e75"><textual class="po-textual">There are three kinds of
definitions in Carrot:</textual></para><itemizedlist class="po-table e76 e76"><listitem class="po-container e77 e77"><para class="po-block e78 e78"><textual class="po-textual">global variables,</textual></para></listitem><listitem class="po-container e79 e79"><para class="po-block e80 e80"><textual class="po-textual">functions, and</textual></para></listitem><listitem class="po-container e81 e81"><para class="po-block e82 e82"><textual class="po-textual">rules.</textual></para></listitem></itemizedlist><section class="po-hcontainer e83 e83"><title class="po-block e84 e84"><textual class="po-textual">Global variables</textual></title><para class="po-block e85 e85"><textual class="po-textual">A global
variable definition is very similar to a variable declaration in
XQuery, except that you don't need the "declare variable" verbiage.
Whereas in XQuery you would write:</textual></para><programlisting class="po-block e86 e86" xml:space="preserve"><textual class="po-textual">declare variable $foo := "a string value";</textual></programlisting><para class="po-block e87 e87"><textual class="po-textual">In
Carrot you would instead write:</textual></para><programlisting class="po-block e88 e88" xml:space="preserve"><textual class="po-textual">$foo := "a string value";</textual></programlisting></section><section class="po-hcontainer e89 e89"><title class="po-block e90 e90"><textual class="po-textual">Functions</textual></title><para class="po-block e91 e91"><textual class="po-textual">A
function definition is just like a function declaration in XQuery
except that you don't need the "declare function" verbiage and,
instead of curly braces, you use the same binding operator (:=) as
a variable definition. For example, whereas in XQuery, you would
declare functions like this:</textual></para><programlisting class="po-block e92 e92" xml:space="preserve"><textual class="po-textual">declare function my:foo() { "return value" };
declare function my:bar($str as xs:string) as xs:string { upper-case($str) };</textual></programlisting><para class="po-block e93 e93"><textual class="po-textual">In
Carrot, you would instead write:</textual></para><programlisting class="po-block e94 e94" xml:space="preserve"><textual class="po-textual">my:foo() := "return value";
my:bar($str as xs:string) as xs:string := upper-case($str);</textual></programlisting><para class="po-block e95 e95"><textual class="po-textual">Why
not just use the regular XQuery syntax? Two reasons: conciseness
(lower signal-to-noise ratio) and consistency (with the other two
types of definitions).</textual></para></section><section class="po-hcontainer e96 e96"><title class="po-block e97 e97"><textual class="po-textual">Rules</textual></title><para class="po-block e98 e98"><textual class="po-textual">The third type of definition is a rule. This
corresponds to a template rule in XSLT. For example, this rule
matches any element node (*):</textual></para><programlisting class="po-block e99 e99" xml:space="preserve"><textual class="po-textual">^foo(*) := "return value";</textual></programlisting><para class="po-block e100 e100"><textual class="po-textual">
Unlike a function definition, the "argument"  of a rule definition ("*" in the above case)
is </textual><emphasis class="po-inline e101 e101" role="ital"><textual class="po-textual">not</textual></emphasis><textual class="po-textual"> an (optional) formal
parameter list; instead it is a required pattern (as XSLT defines a
pattern). Thus, it's illegal to have an empty set of parentheses in
a rule definition:</textual></para><programlisting class="po-block e102 e102" xml:space="preserve"><textual class="po-textual">^foo() := "return value"; (: NOT LEGAL :)</textual></programlisting><para class="po-block e103 e103"><textual class="po-textual">Note
the asymmetry with ruleset invocations, where it </textual><emphasis class="po-inline e104 e104" role="ital"><textual class="po-textual">is</textual></emphasis><textual class="po-textual"> legal to call </textual><code class="po-atom e105 e105"><textual class="po-textual">^foo()</textual></code><textual class="po-textual">, which is short
for </textual><code class="po-atom e106 e106"><textual class="po-textual">^foo(node())</textual></code><textual class="po-textual">.</textual></para><para class="po-block e107 e107"><textual class="po-textual">Of
course, rules can also have parameters (just as template rules can
have parameters in XSLT). The syntax for declaring these is very similar to an XQuery function parameter list, except that it comes after the pattern and is
separated from the pattern by a semicolon:</textual></para><programlisting class="po-block e108 e108" xml:space="preserve"><textual class="po-textual">^foo(* ; $str as xs:string) := concat($str, .);</textual></programlisting><para class="po-block e109 e109"><textual class="po-textual">Carrot also supports tunnel parameters, as in XSLT. To indicate a tunnel parameter, you add the keyword "tunnel" before the parameter:</textual></para><programlisting class="po-block e110 e110" xml:space="preserve"><textual class="po-textual">^foo(* ; tunnel $str as xs:string) := concat($str, .);</textual></programlisting><para class="po-block e111 e111"><textual class="po-textual">Unlike XQuery functions, parameters in a rule are identified by name, not position. Thus the syntax for passing them looks very similar to how they are declared, and the order of parameters is insignificant. The following expression applies the "foo" ruleset to the context node, passing the tunnel parameter $str with the value "Hello":</textual></para><programlisting class="po-block e112 e112" xml:space="preserve"><textual class="po-textual">^foo(. ; tunnel $str := "Hello")</textual></programlisting><para class="po-block e113 e113"><textual class="po-textual">What about conflict resolution among multiple matching rules? Carrot behaves the same as XSLT: rules with higher import precedence win, followed by rules with higher priority. Default priority is based on the syntax of the pattern, just as in XSLT. You can also specify the priority explicitly (right before the binding operator :=), as in the first rule of this example, which explicitly sets the priority to 1:</textual></para><programlisting class="po-block e114 e114" xml:space="preserve"><textual class="po-textual">^author-listing( author[1]      ) 1 :=           ^();
^author-listing( author         )   := ", "    , ^();
^author-listing( author[last()] )   := " and " , ^();</textual></programlisting></section></section><section class="po-hcontainer e115 e115"><title class="po-block e116 e116"><textual class="po-textual">Carrot expressions</textual></title><para class="po-block e117 e117"><textual class="po-textual">The
right-hand side of a Carrot definition, whether it be a variable,
function, or rule, is a Carrot expression. The context for the
expression evaluation is the same as it is for sequence
constructors within a template rule in XSLT. For example, the
context node is the node matched by the rule's pattern.</textual></para><para class="po-block e118 e118"><textual class="po-textual">A
Carrot expression is an XQuery expression with some extensions:</textual></para><itemizedlist class="po-table e119 e119"><listitem class="po-container e120 e120"><para class="po-block e121 e121"><textual class="po-textual">
ruleset
invocations — </textual><code class="po-atom e122 e122"><textual class="po-textual">^mode(nodes)</textual></code></para></listitem><listitem class="po-container e123 e123"><para class="po-block e124 e124"><textual class="po-textual">
shallow </textual><code class="po-atom e125 e125"><textual class="po-textual">copy{…}</textual></code><textual class="po-textual">
constructors</textual></para></listitem><listitem class="po-container e126 e126"><para class="po-block e127 e127"><textual class="po-textual">
text node
literals — </textual><code class="po-atom e128 e128"><textual class="po-textual">`my text node`</textual></code></para></listitem></itemizedlist><para class="po-block e129 e129"><textual class="po-textual">Let's
look at each of these extensions in turn and the rationale behind
each one.</textual></para><section class="po-hcontainer e130 e130"><title class="po-block e131 e131"><textual class="po-textual">Ruleset invocations</textual></title><para class="po-block e132 e132"><textual class="po-textual">
Ruleset invocations (i.e., "apply-templates" in XSLT) are largely
Carrot's </textual><emphasis class="po-inline e133 e133"><textual class="po-textual">raison d'etre</textual></emphasis><textual class="po-textual">. They are not possible in XQuery; thus, the
extension is required. Not only that, but XSLT can't invoke rules
(apply templates) in an expression either. In Carrot, all
definitions are bound to an expression, so the only way to "do"
anything is to write an expression. (Unlike XSLT, Carrot does not
make a distinction between "instructions" and "expressions";
everything is an expression.)</textual></para></section><section class="po-hcontainer e134 e134"><title class="po-block e135 e135"><textual class="po-textual">Shallow copy
constructors</textual></title><para class="po-block e136 e136"><textual class="po-textual">
Shallow copy constructors are possible in XSLT but not XQuery. The
difference between a copy constructor and using an XQuery element
constructor is that, in the latter case, the namespace context
comes from the query rather than the source document. XQuery allows
you to perform deep element copies from the source document, but
not shallow copies. Without this ability, modified identity
transforms are impractical in XQuery. The semantics of Carrot's
copy constructor are essentially the same as XSLT's
&lt;xsl:copy&gt; instruction. For example, when the context node is
not an element node, it behaves the same as if a deep copy were
being performed.</textual></para><note class="po-container e137 e137"><para class="po-block e138 e138"><textual class="po-textual">XSLT 2.1/3.0 promises to add a "select" attribute to &lt;xsl:copy&gt; to make it convenient to perform a shallow copy of a node other than the context node. This is largely unnecessary in Carrot, since copy constructors can be easily composed within an expression, making it convenient to write, for example, </textual><code class="po-atom e139 e139"><textual class="po-textual">foo/copy{…}</textual></code><textual class="po-textual">.</textual></para></note></section><section class="po-hcontainer e140 e140"><title class="po-block e141 e141"><textual class="po-textual">Text node literals</textual></title><para class="po-block e142 e142"><textual class="po-textual">
Carrot also adds text node literals, using the back-tick (`) for
 the delimiter. This extension may at first seem to be of minimal
value, since XQuery already allows you to construct text nodes
using </textual><code class="po-atom e143 e143"><textual class="po-textual">text{…}</textual></code><textual class="po-textual">, and strings using quotes (or apostrophes).
However, in practice, text node literals will often be the
preferred syntax, as the following examples should make clear.
Consider the following template rules in XSLT:</textual></para><programlisting class="po-block e144 e144" xml:space="preserve"><textual class="po-textual">&lt;xsl:template mode="file-name" match="doc"&gt;doc&lt;/xsl:template&gt;
&lt;xsl:template mode="file-ext" match="doc"&gt;.xml&lt;/xsl:template&gt;
 
&lt;xsl:template match="/doc"&gt;
  &lt;result&gt;
    &lt;xsl:apply-templates mode="file-name" select="."/&gt;
    &lt;xsl:apply-templates mode="file-ext" select="."/&gt;
  &lt;/result&gt;
&lt;/xsl:template&gt;</textual></programlisting><para class="po-block e145 e145"><textual class="po-textual">In
Carrot, you might naturally rewrite the above as follows:</textual></para><programlisting class="po-block e146 e146" xml:space="preserve"><textual class="po-textual">^file-name(doc) := "doc";
^file-ext (doc) := ".xml";
^(/doc)         := &lt;result&gt;{ ^file-name(.), ^file-ext(.) }&lt;/result&gt;</textual></programlisting><para class="po-block e147 e147"><textual class="po-textual">The
problem is that this will produce an undesired result:</textual></para><programlisting class="po-block e148 e148" xml:space="preserve"><textual class="po-textual">&lt;result&gt;doc .xml&lt;/result&gt;</textual></programlisting><para class="po-block e149 e149"><textual class="po-textual">The
extra space results because of the way in which sequences of atomic
values are combined to make a text node in XQuery. Contiguous sequences of text nodes, on
the other hand, are merged together without any intervening spaces,
so you could fix things by using explicit text node
constructors:</textual></para><programlisting class="po-block e150 e150" xml:space="preserve"><textual class="po-textual">^file-name(doc) := text{"doc"};
^file-ext (doc) := text{".xml"};</textual></programlisting><para class="po-block e151 e151"><textual class="po-textual">The
problem here is that it may be an edge case with a large syntactic
cost if you want to cover your bases (six extra characters for
every text node). If in 90% of cases, using a string will result in
the exact same behavior as if you had used a text node, you will be
strongly tempted as a user to use quotes instead of </textual><code class="po-atom e152 e152"><textual class="po-textual">text{…}</textual></code><textual class="po-textual">
everywhere. However, you will get bugs in the remaining 10% of your
code because of the way sequences of strings are concatenated to
make a text node in XQuery.</textual></para><para class="po-block e153 e153"><textual class="po-textual">
Whereas it's more verbose in XQuery to construct a text node (using
</textual><code class="po-atom e154 e154"><textual class="po-textual">text{…}</textual></code><textual class="po-textual">) than it is to return a string (using quotes), it's more verbose in
XSLT to return a string (using &lt;xsl:sequence&gt;) than it is to
return a text node (using a literal text node in the stylesheet). Text node literals in Carrot address this imbalance by
making it equally convenient to create text nodes and strings.
Thus, we naturally rewrite our Carrot definitions to get the
desired result, without having to think about whether this is an
edge case or not:</textual></para><programlisting class="po-block e155 e155" xml:space="preserve"><textual class="po-textual">^file-name(doc) := `doc`;
^file-ext (doc) := `.xml`;</textual></programlisting><para class="po-block e156 e156"><textual class="po-textual">The existence of text
node literals makes it easy to follow a simple rule: use text node
literals when you are constructing part of a result document; use
string literals when you know you want to return a string.</textual></para></section><section class="po-hcontainer e157 e157"><title class="po-block e158 e158"><textual class="po-textual">Expression semantics</textual></title><para class="po-block e159 e159"><textual class="po-textual">
Expressions in Carrot, unless otherwise noted here, are assumed to
have the same semantics as in XQuery. Carrot operates on exactly
the same data model as XQuery 1.0 and XPath 2.0.</textual></para><para class="po-block e160 e160"><textual class="po-textual">One
exception is that namespace attribute declarations on element
constructors in Carrot do not affect the default element namespace
for XPath expressions. Carrot is more like XSLT in this regard, in
that it makes a distinction between the default namespace for input
documents and the default namespace for output documents
("xpath-default-namespace" in XSLT), thereby correcting what is
arguably a design bug in XQuery.</textual></para></section><section class="po-hcontainer e161 e161"><title class="po-block e162 e162"><textual class="po-textual">What about xsl:for-each,
xsl:for-each-group, etc.?</textual></title><para class="po-block e163 e163"><textual class="po-textual">Given
that XQuery expressions do not include everything that it's
possible to do in an XSLT template rule, that begs the question:
What do all the XSLT instructions get mapped to in Carrot? In many
cases, Carrot simply does not have an analogue. In some cases,
that's because XQuery already provides a different way to achieve
the same use case. For example, &lt;xsl:for-each&gt; does not have
a direct analogue in Carrot. For iteration over a sequence, you can
use "for" expressions, or even just "/" when applicable. The
following Carrot (and XQuery) expression constructs a new
&lt;bar&gt; element for each &lt;foo&gt; element, rendering
&lt;xsl:for-each&gt; unnecessary for this case: </textual><code class="po-atom e164 e164"><textual class="po-textual">foo/&lt;bar/&gt;</textual></code><textual class="po-textual">. Similarly,
Carrot does not support &lt;xsl:sort&gt;. For sorting sequences in
Carrot, you would instead use "order by", as in XQuery. Local
variables are defined using "let" expressions. Etc.</textual></para><para class="po-block e165 e165"><textual class="po-textual">The
biggest area not currently addressed by Carrot—and which remains
an open question—is how to perform grouping. There are a few
answers to this question, not all mutually exclusive:</textual></para><orderedlist class="po-table e166 e166"><listitem class="po-container e167 e167"><para class="po-block e168 e168"><textual class="po-textual">
Extend Carrot to support grouping.</textual></para></listitem><listitem class="po-container e169 e169"><para class="po-block e170 e170"><textual class="po-textual">
Import an XSLT
2.0 stylesheet when you need grouping.</textual></para></listitem><listitem class="po-container e171 e171"><para class="po-block e172 e172"><textual class="po-textual">
Wait for
grouping to be added to XQuery 3.0 expressions and use
those.</textual></para></listitem></orderedlist><para class="po-block e173 e173"><textual class="po-textual">At
this stage, the operative answers to this question are #2 and
#3.</textual></para><para class="po-block e174 e174"><textual class="po-textual">
Designing support for multiple output documents (corresponding to
&lt;xsl:result-document&gt; in XSLT) and how it interacts with
document{} node constructors is on my TODO list. (If you have ideas, I'd be happy to hear them.)</textual></para></section></section><section class="po-hcontainer e175 e175"><title class="po-block e176 e176"><textual class="po-textual">Implementation strategy</textual></title><para class="po-block e177 e177"><textual class="po-textual">
Carrot is being implemented by compilation to XSLT 2.0. Several
things are worth noting about this:</textual></para><itemizedlist class="po-table e178 e178"><listitem class="po-container e179 e179"><para class="po-block e180 e180"><textual class="po-textual">
Each Carrot
module compiles to an XSLT 2.0 module.</textual></para></listitem><listitem class="po-container e181 e181"><para class="po-block e182 e182"><textual class="po-textual">
Carrot can
include and import other Carrot modules or XSLT
modules.</textual></para></listitem><listitem class="po-container e183 e183"><para class="po-block e184 e184"><textual class="po-textual">
Carrot can also
import XQuery modules, but since this is not supported directly in
XSLT 2.0, the semantics depend on your target XSLT processor (e.g.,
&lt;saxon:import-query&gt; in Saxon and &lt;xdmp:import-module&gt;
in MarkLogic Server)</textual></para></listitem></itemizedlist><para class="po-block e185 e185"><textual class="po-textual">
Carrot is still in the process of being defined more formally. The
current strategy for defining and implementing Carrot is as
follows:</textual></para><orderedlist class="po-table e186 e186"><listitem class="po-container e187 e187"><para class="po-block e188 e188"><textual class="po-textual">
Create a BNF grammar for Carrot</textual></para><orderedlist class="po-table e189 e189" numeration="loweralpha"><listitem class="po-container e190 e190"><para class="po-block e191 e191"><textual class="po-textual">
Hand-convert the EBNF grammar for XQuery expressions to
BNF</textual></para></listitem><listitem class="po-container e192 e192"><para class="po-block e193 e193"><textual class="po-textual">
Extend the
resulting BNF to support Carrot definitions and
expressions</textual></para></listitem></orderedlist></listitem><listitem class="po-container e194 e194"><para class="po-block e195 e195"><textual class="po-textual">
Use </textual><link class="po-inline e196 e196" xlink:actuate="onRequest" xlink:href="http://www.o-xml.org/yapp/" xlink:show="new" xlink:type="simple"><textual class="po-textual">yapp-xslt</textual></link><textual class="po-textual">

to generate the Carrot parser from the Carrot BNF</textual></para></listitem><listitem class="po-container e197 e197"><para class="po-block e198 e198"><textual class="po-textual">
Write a
compiler in XSLT 2.0 to convert parsed Carrot modules to XSLT 2.0
modules</textual></para></listitem></orderedlist><para class="po-block e199 e199"><textual class="po-textual">The
syntax for other top-level constructs, such as namespace
declarations, serialization options, and parameter definitions are
still being worked out. Some mock-up examples can be found at the
project's home page: </textual><link class="po-inline e200 e200" xlink:actuate="onRequest" xlink:href="http://github.com/evanlenz/carrot" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://github.com/evanlenz/carrot</textual></link></para></section><section class="po-hcontainer e201 e201"><title class="po-block e202 e202"><textual class="po-textual">Future directions</textual></title><para class="po-block e203 e203"><textual class="po-textual">
Carrot is both a practical tool and a research project. I'm trying
to find the right balance between innovation and sticking to the
syntax and/or semantics of XPath, XSLT, and XQuery. I'm excited by
the future possibility of using XML-oriented scripting languages in
the browser, as made possible by projects like </textual><link class="po-inline e204 e204" xlink:actuate="onRequest" xlink:href="http://saxonica.com/ce/doc/contents.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">Saxon-CE</textual></link><textual class="po-textual">
and </textual><link class="po-inline e205 e205" xlink:actuate="onRequest" xlink:href="http://www.xqib.org/" xlink:show="new" xlink:type="simple"><textual class="po-textual">XQIB</textual></link><textual class="po-textual">. I'm convinced that
XSLT's syntax is an obstacle to mainstream adoption as a browser
scripting language. Carrot, or something like it, could help
overcome such obstacles.</textual></para><para class="po-block e206 e206"><textual class="po-textual">As a
research project, the ideas at the heart of Carrot may possibly
influence the longer-term W3C work, as XQuery and XSLT continue to
move closer to each other. I'm already quite satisfied by the
composability that Carrot provides in contrast to XSLT. That said,
I'm always itching for more features in the XPath/XQuery/XSLT
triumvirate. As a sample, here are two.</textual></para><section class="po-hcontainer e207 e207"><title class="po-block e208 e208"><textual class="po-textual">Simple mapping operator</textual></title><para class="po-block e209 e209"><textual class="po-textual">I
think XPath needs a "</textual><link class="po-inline e210 e210" xlink:actuate="onRequest" xlink:href="http://lists.w3.org/Archives/Public/public-qt-comments/2003Dec/0061.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">simple
mapping operator</textual></link><textual class="po-textual">" that behaves similarly to "/" except without
its restrictions and special behavior with regard to node
sequences. This is one possible extension that could be added to
Carrot, without having to wait for XSLT/XQuery 3.0 (if it's
even being considered for inclusion).</textual></para></section><section class="po-hcontainer e211 e211"><title class="po-block e212 e212"><textual class="po-textual">Mode merging</textual></title><para class="po-block e213 e213"><textual class="po-textual">
Another more recent idea (which would be straightforward to
implement in Carrot) would be "mode merging."</textual></para><para class="po-block e214 e214"><textual class="po-textual">In XSLT, a single template rule can declare
itself to be a part of more than one mode. However, a single call
to apply-templates cannot invoke rules in more than one mode. The
ability to merge modes would provide a static mode extension
mechanism, the chief benefit of course being that you wouldn't have
to go add a new mode to each template rule's list of modes (and in
the case when it's in the default mode, go add </textual><code class="po-atom e215 e215"><textual class="po-textual">mode="#default new-mode"</textual></code><textual class="po-textual"> to each
rule).</textual></para><para class="po-block e216 e216"><textual class="po-textual">In
XSLT:</textual></para><programlisting class="po-block e217 e217" xml:space="preserve"><textual class="po-textual">&lt;xsl:apply-templates mode="foo bar"/&gt;</textual></programlisting><para class="po-block e218 e218"><textual class="po-textual">
In Carrot:</textual></para><programlisting class="po-block e219 e219" xml:space="preserve"><textual class="po-textual">^foo|bar()</textual></programlisting><para class="po-block e220 e220"><textual class="po-textual">This
would be especially handy in multi-stage transformations where each
stage of processing makes an incremental change to its input, but
some stages need to handle things slightly differently, for
example, to avoid transforming an already-converted element more
than once. Mode merging would allow you to invoke statically
determined subsets and supersets of rules.</textual></para></section><section class="po-hcontainer e221 e221"><title class="po-block e222 e222"><textual class="po-textual">Underlying language
development</textual></title><para class="po-block e223 e223"><textual class="po-textual">
Finally, Carrot is a project that can grow with the languages it is
based on. As various features are added in XSLT/XQuery 3.0, such as
JSON support or the ability to apply templates to sequences of
atomic values, Carrot will (happily) be updated accordingly.</textual></para></section></section></article></classedDocument>