<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.3" xml:id="Bal2013Dubi0214"><title class="po-block e1 e1"><textual class="po-textual">Transcending Triples</textual></title><subtitle class="po-block e2 e2"><textual class="po-textual">Modeling semantic applications that go beyond just triples</textual></subtitle><info class="po-record e3 e3"><confgroup class="po-record e4 e4"><conftitle class="po-field e5 e5"><textual class="po-textual">Balisage: The Markup Conference 2013</textual></conftitle><confdates class="po-field e6 e6"><textual class="po-textual">August 6 - 9, 2013</textual></confdates></confgroup><abstract class="po-container e7 e7"><para class="po-block e8 e8"><textual class="po-textual">Semantic modeling to date has been largely an exercise in considering the whole world as
        triples (or at least, n-way tuples). Efforts to bridge the XML gap such as XSPARQL have
        focused on low-hanging syntactic fruit, and have not had much effect on deeper layers of the
        architecture.</textual></para><para class="po-block e9 e9"><textual class="po-textual">In semantic modeling, common situations that are supposedly bread-and-butter for RDF,
        for example tracking provenance or recording facts known to a certain probability, give rise
        to complexity such as the much reviled RDF reification, or statements about statements. Even
        the W3C RDF Primer doesn't seem altogether comfortable with it:</textual></para><para class="po-block e10 e10"><textual class="po-textual">
        </textual><blockquote class="po-container e11 e11"><para class="po-block e12 e12"><textual class="po-textual">While there are applications that successfully use reification, they do so by
            following some conventions, and making some assumptions, that are in addition to the
            actual meaning that RDF defines for the reification vocabulary, and the actual
            facilities that RDF provides to support it.</textual></para></blockquote><textual class="po-textual">
      </textual></para><para class="po-block e13 e13"><textual class="po-textual">In a similar vein, inference is commonly viewed in the semantic world as something that
        produces (only) triples from (only) triples. A broader view of inference encompassing XML
        documents and values as inputs and outputs can make many common use cases far more
        straightforward. This paper discusses a (hypothetical?) world where triples and documents
        get along better with each other, and speculates about what future products fusing these
        technologies might look like.</textual></para></abstract><author class="po-record e14 e14"><personname class="po-record e15 e15"><firstname class="po-field e16 e16"><textual class="po-textual">Micah</textual></firstname><surname class="po-field e17 e17"><textual class="po-textual">Dubinko</textual></surname></personname><personblurb class="po-container e18 e18"><para class="po-block e19 e19"><textual class="po-textual">Micah Dubinko has worked on diverse projects, from portable heart monitors to mobile
          applications to search engines. He was the data engineer for Yahoo! SearchMonkey, a
          project that influenced his outlook toward semantic technologis. He is currently Lead
          Engineer for semantics and applications at MarkLogic.</textual></para></personblurb><affiliation class="po-record e20 e20"><jobtitle class="po-field e21 e21"><textual class="po-textual">Lead Engineer</textual></jobtitle><orgname class="po-block e22 e22"><textual class="po-textual">MarkLogic</textual></orgname></affiliation><email class="po-field e23 e23"><textual class="po-textual">Micah.Dubinko@marklogic.com</textual></email></author><legalnotice class="po-container e24 e24"><para class="po-block e25 e25"><textual class="po-textual">Copyright © 2013 Micah Dubinko</textual></para></legalnotice><keywordset class="po-table e26 e26" role="author"><keyword class="po-field e27 e27"><textual class="po-textual">metadata</textual></keyword><keyword class="po-field e28 e28"><textual class="po-textual">provenance</textual></keyword><keyword class="po-field e29 e29"><textual class="po-textual">RDF</textual></keyword><keyword class="po-field e30 e30"><textual class="po-textual">XML</textual></keyword><keyword class="po-field e31 e31"><textual class="po-textual">modeling</textual></keyword><keyword class="po-field e32 e32"><textual class="po-textual">formalism</textual></keyword></keywordset></info><section class="po-hcontainer e33 e33"><title class="po-block e34 e34"><textual class="po-textual">Introduction</textual></title><para class="po-block e35 e35"><textual class="po-textual">Q: How many designers does it take to change a light bulb?</textual></para><para class="po-block e36 e36"><textual class="po-textual">A: What makes you think a light bulb is the best solution?</textual></para><para class="po-block e37 e37"><textual class="po-textual">There's no shortage of works expounding on the obvious impedance mismatch between trees
      and graphs. The same goes for failed XML syntaxes for RDF. This paper isn't about
      those.</textual></para><para class="po-block e38 e38"><textual class="po-textual">There's also plenty out there on extensions to either XML or RDF or SPARQL to broaden the
      field of use cases covered by the technology. (XSPARQL for example is an elegant solution.)
      This paper isn't about any of those either.</textual></para><para class="po-block e39 e39"><textual class="po-textual">This paper outlines a number of common problems that application developers frequently
      encounter, and are normally associated with RDF and triple-based solutions, and yet prove to
      be complicated in practice to solve entirely with triples. This paper concludes with some
      initial thoughts and observations on the relative simplicity of treating triples and documents
      as part of a unified whole.</textual></para><para class="po-block e40 e40"><textual class="po-textual">.</textual></para></section><section class="po-hcontainer e41 e41"><title class="po-block e42 e42"><textual class="po-textual">Asserting facts in XML</textual></title><para class="po-block e43 e43"><textual class="po-textual">Consider a web-crawling application that encounters statements encoded in web pages, in
      two different cases:
      </textual><programlisting class="po-block e44 e44" xml:space="preserve"><textual class="po-textual">&lt;html&gt;
   &lt;head&gt;
       &lt;meta name="author" content="Micah Dubinko"/&gt;
…</textual></programlisting><textual class="po-textual">
      vs
      </textual><programlisting class="po-block e45 e45" xml:space="preserve"><textual class="po-textual">&lt;div typeof="rdf:Statement"&gt;
   &lt;div property="rdf:subject" href=""/&gt;
   &lt;div property="rdf:predicate" resource="dc:author"/&gt;
   &lt;div property="rdf:object"&gt;Micah Dubinko&lt;/div&gt;
&lt;/div&gt;</textual></programlisting></para><para class="po-block e46 e46"><textual class="po-textual">One way to ask about the meaning of these cases is to ask what the consuming application
      would do with them. In the former case, it's clear that the entity that controls the web page
      is asserting a statement of authorship, and that can be modeled as a triple. But in the latter
      case, absent additional statements-about-statements, it's not clear that the consuming
      application can do anything useful with the mere existence of an unasserted statement. That is
      to say, the latter case is less meaningful to the application.</textual></para><para class="po-block e47 e47"><textual class="po-textual">True, this sort of capital-R Reification has been long damned through disuse, for example
        </textual><xref class="po-milestone e48 e48" linkend="Hellman09"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, but it's still serves an important role in discussion. The
      original designers of RDF had particular use cases in mind, and application developers should
      either repudiate those use cases themselves, or figure out how to actually implement
      them.</textual></para><para class="po-block e49 e49"><textual class="po-textual">Next, consider:
      </textual><programlisting class="po-block e50 e50" xml:space="preserve"><textual class="po-textual">&lt;FactSet likelihoodPercent="50"&gt;
   &lt;meta name="author" content="Micah Dubinko"/&gt;
…</textual></programlisting></para><para class="po-block e51 e51"><textual class="po-textual">Can a consuming application consider this statement to have been asserted? Well, if you
      take the intent of the element and attribute names at face value, yes. By extension, the same
      document could have different </textual><code class="po-atom e52 e52"><textual class="po-textual">FactSet</textual></code><textual class="po-textual"> elements each with different degrees of
      assertionness. Presumably the document head in the first example asserts at a full strength of
      100%, while the opposite
      extreme</textual><programlisting class="po-block e53 e53" xml:space="preserve"><textual class="po-textual">&lt;FactSet likelihoodPercent="0"&gt;
   &lt;meta name="author" content="James Bond"/&gt;</textual></programlisting><textual class="po-textual">
      outright asserts the falsehood of the given statement.</textual></para><para class="po-block e54 e54"><textual class="po-textual">Can this use case be discredited? Probably not. A great deal of ongoing thought has gone
      into representing conditional knowledge in triples, for example </textual><xref class="po-milestone e55 e55" linkend="Fukushige05"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">,
      but again, the solution here shown in </textual><xref class="po-milestone e56 e56" linkend="turtle"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> syntax, ends up looking an
      awful lot like capital-R Reification:
      </textual><programlisting class="po-block e57 e57" xml:space="preserve"><textual class="po-textual">[a prob:Partition;
   prob:condition :cond0;
   prob:case
      [a prob:ProbabilisticStatement;
       prob:about :case1;
       prob:hasProbability :prob1],
      [a prob:ProbabilisticStatement;
       prob:about :case2;
       prob:hasProability :prob2].
].</textual></programlisting></para><para class="po-block e58 e58"><textual class="po-textual">It turns out thehe real world is messy, and modeling that messiness as triples adds a huge
      amount of complexity.</textual></para><para class="po-block e59 e59"><textual class="po-textual">What does it mean for a fact to be embedded in an XML element? The short answer is 'pretty
      much anything'. A more nuanced answer has been discussed here before, for example </textual><xref class="po-milestone e60 e60" linkend="Dombrowski10"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and others.</textual></para><para class="po-block e61 e61"><textual class="po-textual">Bug or feature? Let's dig deeper.</textual></para></section><section class="po-hcontainer e62 e62"><title class="po-block e63 e63"><textual class="po-textual">Asserting facts over time</textual></title><para class="po-block e64 e64"><textual class="po-textual">Another common set of use cases involves the represtation facts in time in triples.
      Consider something obvious, like</textual></para><para class="po-block e65 e65"><textual class="po-textual">
      </textual><programlisting class="po-block e66 e66" xml:space="preserve"><textual class="po-textual">:BarackObama :presidentOf :UnitedStatesOfAmerica .</textual></programlisting><textual class="po-textual">
    </textual></para><para class="po-block e67 e67"><textual class="po-textual">If a consuming application encountered this fact, say during a web crawl performed in
      2013, and found this statement embedded in a page as RDFa, few developers would question the
      truth of the asserted statement or their ability to do something useful with the fact as it
      stands. But what about this?</textual></para><para class="po-block e68 e68"><textual class="po-textual">
      </textual><programlisting class="po-block e69 e69" xml:space="preserve"><textual class="po-textual">:RonaldReagan :presidentOf :UnitedStatesOfAmerica .</textual></programlisting><textual class="po-textual">
    </textual></para><para class="po-block e70 e70"><textual class="po-textual">In this case, few developers would dispute the truth of that statement during the mid-80s,
      but asserting that fact in the same manner as the prior in is clearly problematic. This
      highlights a deficiency in the treatment of the first triple, and more broadly any such
      discovered statements. Facts change, and anything beyond the most simplistic models needs to
      reflect this. These include questions of the form "what was Martin's address on 1 Jul 1999"
      and "what did we think Martin's address was on 1 Jul 1999 when we sent him a bill on 12 Aug
      1999" as discussed in </textual><xref class="po-milestone e71 e71" linkend="FowlerTime"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. In order to model reality, the facts of
      which change over time, a model needs to take into account various aspects of time. But the
      consequences of modeling to this level of detail are significant--in short, the simple
      examples above are insufficient. An average web-page-creator may be hard pressed to put
      well-formed temporal facts in their pages. A brief look at some proposals will show why this
      is the case:</textual></para><para class="po-block e72 e72"><xref class="po-milestone e73 e73" linkend="Gutierrez07"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> has this to say:</textual><blockquote class="po-container e74 e74"><para class="po-block e75 e75"><textual class="po-textual">There is a blank node connected to the components of the triple, in a sort of
          “temporal reification” scheme (using the vocabulary tsubj, tpred, and tobj). The remainder
          of the graph are statements about the timestamps at which the triple was valid. </textual></para></blockquote></para><para class="po-block e76 e76"><xref class="po-milestone e77 e77" linkend="Henson09"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> outlines a similar approach, though more ontology-driven.
      Here's enough to give the flavor of the approach: </textual><blockquote class="po-container e78 e78"><para class="po-block e79 e79"><textual class="po-textual">Therefore, om-owl:TimeSeriesObservation inherits properties from both
          om-owl:Observation and om-owl:ObservationCollection</textual></para></blockquote></para><para class="po-block e80 e80"><xref class="po-milestone e81 e81" linkend="Rodriguez09"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> offers yet another approach, extending both RDF and SPARQL.
      Timestamps can be embedded in subjects, predicates, objects, or some cases subject/object in
      the same statement. The query language is likewise extended, for example finding the most
      recent reading with a syntax reminiscent of XPath
      predicates:</textual><programlisting class="po-block e82 e82" xml:space="preserve"><textual class="po-textual">SELECT ?temp ?s.t
WHERE {
   &lt;urn:Chicago&gt; &lt;urn:hasSensor&gt; ?s .
   ?s[LAST] &lt;urn:hasValue&gt; ?temp .
}</textual></programlisting></para><para class="po-block e83 e83"><xref class="po-milestone e84 e84" linkend="Williams09"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> also outlines a similar approach with both anonymous named
      graphs and a SPARQL extension, using data in this
      form:</textual><programlisting class="po-block e85 e85" xml:space="preserve"><textual class="po-textual">_:kanzaki a foaf:Person _:Always .
_:kanzaki whois:place "Tokyo, Japan" _:Interval1 .
_:kanzaki whois:place "Mie, Japan" _:Interval2 .
…
_:Interval1 a time:Interval .
_:Interval1 time:begins "1982" .
…
_:Interval2 a time:Interval .
_:Interval2 time:begins "1968" .
_:Interval2 time:ends "1978" .</textual></programlisting><textual class="po-textual">and
      queries in this
      form</textual><programlisting class="po-block e86 e86" xml:space="preserve"><textual class="po-textual">SELECT ?name WHERE {
   TIME [ time:inside "2007"^^xsd:dateTime ] {
      [ a foaf:Person;
        foaf:name ?name;
        whois:place "Tokyo, Japan" .
      ]
   }
}</textual></programlisting></para><para class="po-block e87 e87"><textual class="po-textual">Note that as in the previous section, this solution makes use of a bnode identifer to name
      a graph.</textual></para><para class="po-block e88 e88"><textual class="po-textual">Is this a case of XML to the rescue? Possibly. Representation of time values, or ranges of
      time values, is already commonplace in XML application models. Embedding a triple in XML is a
      possible way out. This also supports a convenient query processing model as follows</textual><orderedlist class="po-table e89 e89"><listitem class="po-container e90 e90"><para class="po-block e91 e91"><textual class="po-textual">restrict the universe of documents down to those representing a temporal range of
            interest, using a document-centric query language such as XQuery</textual></para></listitem><listitem class="po-container e92 e92"><para class="po-block e93 e93"><textual class="po-textual">then run SPARQL over the triples associated with the documents in step one</textual></para></listitem></orderedlist></para><para class="po-block e94 e94"><textual class="po-textual">But these are the simple cases. Temporal queries can get much more complicated. Take, for
      example, a query that expresses this: On Dec 31, 2012, what did the official records show that
      John Doe's address was? Facts change over time, but so do official records of facts. This is
      known as a bi-temporal query, and there's significant existing work in the RDBMS world on
      supporting this class of query. In general, the solution involves keeping track of multiple
      timestamps for each fact, one for when the fact was considered valid in the real world, and
      one for when our knowledge of the fact (official record) is in force.</textual></para><para class="po-block e95 e95"><textual class="po-textual">If one-dimensional time is complicated for casual users to express, say in RDFa, how much
      more so are these kinds of data and corresponding queries? One can imagine a proliferation of
      unnamed graphs, each containing two (or more) time axes, with a corresponding increase in
      necessary plumbing and query complexity. Isn't this the kind of thing that XML databases
      already excel at? Just because something can be done entirely with triples doesn't mean it's a
      good idea to do so.</textual></para></section><section class="po-hcontainer e96 e96"><title class="po-block e97 e97"><textual class="po-textual">Trust, Security, and Provenance</textual></title><para class="po-block e98 e98"><textual class="po-textual">Returning to use cases, one often associated with semantic technologies is tracking the
      provenance of statements. Any given statement may have an arbitrarily complicated network of
      facts that contribute to the given statement. In some cases, certain statements may have
      different levels of access permissions depending on which user is accessing the
      database.</textual></para><para class="po-block e99 e99"><textual class="po-textual">For example, a financial services company needs to make legally-binding reports for
      regulatory purposes. Certain users need the ability to justify any published statement upon
      request, including which systems data flowed through on a particular date (even after said
      system change or no longer exist). Like the earlier, bi-temporal case, this can be
      accomplished by tracking more state at the level of named (or anonymous) graphs--which
      subsystems were involved in producing a fact (even if a certain subsystem no longer exists),
      which schemas were in force at the time (even if they no longer exist in the present), and so
      on. Such information may or may not be amenable to representation as triples.</textual></para><para class="po-block e100 e100"><xref class="po-milestone e101 e101" linkend="trustSPARQL"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">
      </textual><footnote class="po-popup e102 e102"><para class="po-block e103 e103"><textual class="po-textual">Commonly called tSPARQL, though I refer to it by a longer moniker in order to
          distinguish it from </textual><xref class="po-milestone e104 e104" linkend="Williams09"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, which also is commonly called
          tSPARQL.</textual></para></footnote><textual class="po-textual">offers a partial approach to this. Again, the solution involves an extension to the
      SPARQL langauge and looks very similar to examples  the earlier
      sections:</textual><programlisting class="po-block e105 e105" xml:space="preserve"><textual class="po-textual">PREFIX ub: &lt;http://www.lehigh.edu/.../univ-bench.owl#&gt;
PREFIX rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;
SELECT ?n ?c ?t
WHERE {
    { ?s rdf:type ub:Student .
      ?s ub:name ?n }
    { ?s ub:takesCourse ?c .
      TRUST AS ?t }
}</textual></programlisting></para><para class="po-block e106 e106"><textual class="po-textual">In this example, the 'coefficient of trustworthiness' is stored for each triple and
      returned in a variable </textual><code class="po-atom e107 e107"><textual class="po-textual">?t</textual></code><textual class="po-textual">. Different implemenations have partially solved this
      problem by extending the triple model to include quads, quints, hexes, and so on.</textual></para><para class="po-block e108 e108"><textual class="po-textual">Another form of metadata that can conceptually be applied at the triple level is security
      access, for example Access Control Lists, which would not be implemented as triples
      themselves, thus breaking the model of statements-about-statements. Much of the work done in
      this area is unlikely to ever be standardized.</textual></para><para class="po-block e109 e109"><textual class="po-textual">Security in particular has been more ofen implemented in document-oriented technologies
      than triple-oriented technologies, which begs the question of how to think about semantic
      modeling for applications.</textual></para></section><section class="po-hcontainer e110 e110"><title class="po-block e111 e111"><textual class="po-textual">How to think about embedded RDF, and thereby named graph inference</textual></title><para class="po-block e112 e112"><textual class="po-textual">Previous sections have hinted at the possibility of explicitly modeling triples as
      statements contained within documents. This section makes it explicit and examines the
      consequences. What does it mean for a triple to be embedded in a document? Consider some
      possible interpretations, as they relate to application modeling:</textual><orderedlist class="po-table e113 e113"><listitem class="po-container e114 e114"><para class="po-block e115 e115"><textual class="po-textual">Nothing at all. Documents are mere conveyences to be disposed of as quickly as
            possible. (This attitude is implied in the term 'semantic lifting')</textual></para></listitem><listitem class="po-container e116 e116"><para class="po-block e117 e117"><textual class="po-textual">If a document is in one or more collections (in the XQuery sense) consider embedded
            triples to be in equivalent named graphs where the collection name is the graph
            name.</textual></para></listitem><listitem class="po-container e118 e118"><para class="po-block e119 e119"><textual class="po-textual">Triples embedded in a document are considered to be in a named graph, where the
            document name is the graph name.</textual></para></listitem><listitem class="po-container e120 e120"><para class="po-block e121 e121"><textual class="po-textual">Like 3, but even more tightly-scoped. The particular element-scope of where the
            triple occurs is relevant, as seen in the introduction, where different triples embedded
            in the same document had different </textual><code class="po-atom e122 e122"><textual class="po-textual">likelihoodPercent</textual></code><textual class="po-textual"> values.</textual></para></listitem></orderedlist></para><para class="po-block e123 e123"><textual class="po-textual">Other than the first interpretation, none of these are mutually exclusive.</textual></para><para class="po-block e124 e124"><textual class="po-textual">Named graphs, which seem at first conceptually simple, underly more power and complexity
      than might be readily apparent. For one thing, they have multiple associated URIs and/or
      points of access:</textual><itemizedlist class="po-table e125 e125"><listitem class="po-container e126 e126"><para class="po-block e127 e127"><textual class="po-textual">The URI that names the graph (which may not exist in cases of blank-node-identified
            graphs)</textual></para></listitem><listitem class="po-container e128 e128"><para class="po-block e129 e129"><textual class="po-textual">The URI that can be used to dereference the graph (for example, in the </textual><xref class="po-milestone e130 e130" linkend="GraphStore"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> the named graph URI is composed into a longer URI for purposes
            of dereference as a HTTP GET request.)</textual></para></listitem><listitem class="po-container e131 e131"><para class="po-block e132 e132"><textual class="po-textual">The means by which machine-readable </textual><emphasis class="po-inline e133 e133"><textual class="po-textual">conditions</textual></emphasis><textual class="po-textual"> that apply to
            this graph can be extracted. As previously mentioned, these conditions may not be
            conveniently representable as triples.</textual><footnote class="po-popup e134 e134"><para class="po-block e135 e135"><textual class="po-textual">This is an important distinction, as it can greatly complicate matters, for
                example in a bi-temporal update when you mark certain records as obsolete (by adding
                a effective end-date to the record) you raise the spectre of identity of blank-node
                issues in the course of the update.</textual></para></footnote><textual class="po-textual">.</textual></para></listitem></itemizedlist></para><para class="po-block e136 e136"><textual class="po-textual">What do we mean by conditions of a graph? It may be useful to borrow an older term, that
      of a </textual><quote class="po-inline e137 e137"><textual class="po-textual">conceptual graph</textual></quote><textual class="po-textual"> as defined to in</textual><xref class="po-milestone e138 e138" linkend="Sowa76"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> . Perhaps the
      important thing about a named graph isn't that it is named (and increasingly, they are not)
      but what a statement within </textual><quote class="po-inline e139 e139"><textual class="po-textual">means to the people who use it or how it relates to the
        overall operations of a business enterprise</textual></quote><textual class="po-textual">, three common examples of which earlier
      sections of this paper has examined.</textual></para><para class="po-block e140 e140"><textual class="po-textual">Thus, we can define conditions as follows: a condition is an assumption that holds for an
      entire graph and applies to any statements within the graph. It fulfills much the same purpose
      as capital-R Reification, but instead of forming statements about single statements, addresses
      an entire graph. This includes whether or to what degree the facts are trustworthy, their time
      of validity either in the real-world or as recorded in an official record, any relevant facts
      about the provenance or history of coming to know these facts, and anything else deemed
      necessary by your application. Furthermore, we will call these graphs conceptual graphs to
      highlight their unique standing as opposed to regular named graphs. This definition is
      admittedly fuzzy, but that is a reflection of the fuzziness of the real world, something that
      XMLcomes closer to embracing than does RDF.</textual></para><para class="po-block e141 e141"><textual class="po-textual">Conceptual graph conditions can just as easily be encoded in XML as triples, and in many
      cases, XML is more convenient and straightfoward to process and query. If interpretations 3 or
      4 above are in force, an XML document that embeds triples can straightforwardly record the
      conditions that apply to those triples within.</textual></para><para class="po-block e142 e142"><textual class="po-textual">The meaning of inference in light of named graphs doesn't seem to be a solved issue</textual><footnote class="po-popup e143 e143"><para class="po-block e144 e144"><textual class="po-textual">For example:</textual><link class="po-inline e145 e145" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">
            http://answers.semanticweb.com/questions/1315/the-semantics-of-named-graphs</textual></link></para></footnote><textual class="po-textual"> but thinking in terms of conditions might begin to point toward an answer. When
      statement C is logically inferred from statements A and B, a materialized statement C must end
      up as part of a graph that has conditions compatible with both of the graphs that A and B
      respectively reside in. In many cases this is a logical intersection, but given the broad
      definition of what can comprise a condition, it may need to be figured out on a case-by-case
      basis.</textual></para><para class="po-block e146 e146"><textual class="po-textual">For example, if statement A is deemed to be valid only in the years 2000-2010, and
      statement B is valid only in the years 2008-2013, you'd expect statement C to be valid only
      2008-2010 (and be treated as part of a conceptual graph that says as much). Other conditions
      including likelihood are potentially less straightforward. For example if statement A has a
      likelihood of 40% and statement B a likelihood of 50%, does the likelihood of statement C
      amount to prob(A) * prob(B) = 20% or would fuzzy set logic </textual><xref class="po-milestone e147 e147" linkend="Zadeh65"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> be more
      applicable, in which case the answer is min(prob(A), prob(B)) = 40%? In many cases more
      complex Bayesian techniques would be required as part of inference.</textual></para><para class="po-block e148 e148"><textual class="po-textual">A further complication arises with intepretation 4 above, where element-level scope is
      significant. In these cases materialized triples from inference need to exist in a particular
      element scope, which may not exist outside of the inference. Does this imply that part of
      inference is to construct new conceptual graph conditions in the form of new documents?</textual></para></section><section class="po-hcontainer e149 e149"><title class="po-block e150 e150"><textual class="po-textual">The Future</textual></title><para class="po-block e151 e151"><textual class="po-textual">Anything that can be modeled with purely triples can also be modeled in part or in whole
      in XML. And anything that can be modeled in XML can (with enough layers of abstraction) be
      modeled as triples, though perhaps not elegantly. Combining the two can play to the strenghts
      of each, and open the way toward elegantly solving interesting real-world problems.</textual></para><para class="po-block e152 e152"><textual class="po-textual">For example: Look through software reviews to see that on &lt;Date&gt; &lt;SoftwarePackageX&gt;
      was shown to work on OSX. From this infer
      </textual><programlisting class="po-block e153 e153" xml:space="preserve"><textual class="po-textual">&lt;SoftwarePackageX&gt; :compatibleWith &lt;OSX:ParticularVersion&gt;</textual></programlisting><textual class="po-textual">.</textual></para><para class="po-block e154 e154"><textual class="po-textual">But more mundane solutions should not be dismissed out of hand. I've seen many instances
      of this: Based on a set of trusted facts about &lt;topic X&gt; assemble (infer?) an XML document,
      which is made available to full-text search engines. Often times this goes beyond mere
      assembly, and includes some amount of rules-driven processing. In search applications,
      Infoboxes (assembled by mechanical rules) in search results could be considered an example of
      this.</textual></para><para class="po-block e155 e155"><textual class="po-textual">The real world is messy, and a formal models can only express this via additional
      complexity in themselves. Purists and partisans for a particular technology don't do well on
      the forward-deployed frontlines of technology. Perhaps a mixed approach, leveraging different
      technologies in their respective sweet spots isn't such a bad starting point for thinking
      about the relationship between an application and the facts is makes use of.</textual></para><para class="po-block e156 e156"><textual class="po-textual">To conclude, a call to action: Every time you see a paper or proposal for some complicated
      extension to the RDF data model and possibly the SPARQL language, think back to the opening
      line of this paper, and ponder whether a lightbulb is actually the right solution.</textual></para></section><bibliography class="po-hcontainer e157 e157"><title class="po-block e158 e158"><textual class="po-textual">Bibliography</textual></title><bibliomixed class="po-block e159 e159" xml:id="Hellman09" xreflabel="Reification Considered Harmful"><textual class="po-textual">Eric Hellman,
        </textual><quote class="po-inline e160 e160"><textual class="po-textual">Reification Considered Harmful</textual></quote><textual class="po-textual"> [online]. [cited 17th August, 2013]. 
        </textual><link class="po-inline e161 e161" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://go-to-hellman.blogspot.com/2009/05/part-3-reification-considered-harmful.html</textual></link></bibliomixed><bibliomixed class="po-block e162 e162" xml:id="Fukushige05" xreflabel="Fukushige 2005"><textual class="po-textual">Yoshio Fukushige,
        </textual><quote class="po-inline e163 e163"><textual class="po-textual">Representing Probabilistic Relations in RDF</textual></quote><textual class="po-textual"> Proceedings of the ISWC Workshop
      on Uncertainty Reasoning for the Semantic Web, 2005.
        </textual><link class="po-inline e164 e164" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://ceur-ws.org/Vol-173/pos_paper5.pdf</textual></link></bibliomixed><bibliomixed class="po-block e165 e165" xml:id="Dombrowski10" xreflabel="Dombrowski 2010"><textual class="po-textual">Andrew Dombrowski, and Quinn
      Dombrowski. </textual><quote class="po-inline e166 e166"><textual class="po-textual">A formal approach to XML semantics: implications for archive
        standards.</textual></quote><textual class="po-textual"> Presented at International Symposium on XML for the Long Haul: Issues in
      the Long-term Preservation of XML, Montréal, Canada, August 2, 2010. In Proceedings of the
      International Symposium on XML for the Long Haul: Issues in the Long-term Preservation of XML.
      Balisage Series on Markup Technologies, vol. 6 (2010).
        </textual><link class="po-inline e167 e167" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.balisage.net/Proceedings/vol6/html/Dombrowski01/BalisageVol6-Dombrowski01.html</textual></link><textual class="po-textual">. doi:</textual><biblioid class="po-atom e168 doi e168"><textual class="po-textual">10.4242/BalisageVol6.Dombrowski01</textual></biblioid><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e169 e169" xml:id="FowlerTime" xreflabel="Fowler Temporal Patterns"><textual class="po-textual">Martin Fowler,
        </textual><quote class="po-inline e170 e170"><textual class="po-textual">Temporal Patterns</textual></quote><textual class="po-textual"> [online]. [cited 12th July, 2013].
        </textual><link class="po-inline e171 e171" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://martinfowler.com/eaaDev/timeNarrative.html</textual></link></bibliomixed><bibliomixed class="po-block e172 e172" xml:id="Gutierrez07" xreflabel="Gutierrez 2007"><textual class="po-textual">Claudio Gutierrez, Carlos A.
      Hurtado, and Alejandro Vaisman </textual><quote class="po-inline e173 e173"><textual class="po-textual">Introducting Time into RDF</textual></quote><textual class="po-textual"> IEEE Transactions on
      Knowledge and Data Engineering, 2007.
        </textual><link class="po-inline e174 e174" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://doi.ieeecomputersociety.org/10.1109/TKDE.2007.34</textual></link><textual class="po-textual">. doi:</textual><biblioid class="po-atom e175 doi e175"><textual class="po-textual">10.1109/TKDE.2007.34</textual></biblioid><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e176 e176" xml:id="Henson09" xreflabel="Henson 2009"><textual class="po-textual">Cory A. Henson, Holger Neuhaus, Amit P.
      Sheth, Krishnaprasad Thirunarayan, and Rajkumar Buyya </textual><quote class="po-inline e177 e177"><textual class="po-textual">An Ontological Representation of
        Time Series Observations on the Semantic Sensor Web</textual></quote><textual class="po-textual"> 1st International Workshop on
      theSemantic Sensor Web, 2009; Informal Proceedings.
        </textual><link class="po-inline e178 e178" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.academia.edu/2174123/An_ontological_representation_of_time_series_observations_on_the_Semantic_Sensor_Web</textual></link></bibliomixed><bibliomixed class="po-block e179 e179" xml:id="Rodriguez09" xreflabel="Rodríguez 2009"><textual class="po-textual">Alejandro Rodríguez, Robert
      McGrath, Yong Liu, and James Myers </textual><quote class="po-inline e180 e180"><textual class="po-textual">Semantic management of streaming data.</textual></quote><textual class="po-textual">
      International Workshop on Semantic Sensor Networks at ISWC, 2009
        </textual><link class="po-inline e181 e181" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://cet.ncsa.illinois.edu/publications/SemanticSN2009streaming.pdf</textual></link></bibliomixed><bibliomixed class="po-block e182 e182" xml:id="Williams09" xreflabel="Temporal SPARQL"><textual class="po-textual">Gregory Todd Williams
        </textual><quote class="po-inline e183 e183"><textual class="po-textual">tSPARQL: Using Quadstores for Temporal Querying of RDF</textual></quote><textual class="po-textual"> [online]. [cited 12th
      July, 2013] </textual><link class="po-inline e184 e184" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://tw.rpi.edu/2007/11/tsparql-poster.pdf</textual></link></bibliomixed><bibliomixed class="po-block e185 e185" xml:id="trustSPARQL" xreflabel="Trust-Aware SPARQL"><textual class="po-textual">Olaf Hartig </textual><quote class="po-inline e186 e186"><textual class="po-textual">tSPARQL - A
        Trust-Aware Query Language</textual></quote><textual class="po-textual"> [online]. [cited 12th July, 2013].
        </textual><link class="po-inline e187 e187" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://trdf.sourceforge.net/tsparql.shtml</textual></link></bibliomixed><bibliomixed class="po-block e188 e188" xml:id="Carroll05" xreflabel="Carroll 2005"><textual class="po-textual">Jeremy J. Carroll, Christian Bizer, Pat
      Hayes, and Patrick Sticker </textual><quote class="po-inline e189 e189"><textual class="po-textual">Named Graphs, Provenance, and Trust</textual></quote><textual class="po-textual"> WWW 2005
      Proceedings of the 14th international conference on World Wide Web.
        </textual><link class="po-inline e190 e190" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.59.4871</textual></link><textual class="po-textual">. doi:</textual><biblioid class="po-atom e191 doi e191"><textual class="po-textual">10.1145/1060745.1060835</textual></biblioid><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e192 e192" xml:id="GraphStore" xreflabel="SPARQL 1.1 Graph Store HTTP Protocol"><textual class="po-textual">Chimezie Ogbuji (editor), 
      </textual><quote class="po-inline e193 e193"><textual class="po-textual">SPARQL 1.1 Graph Store HTTP Protocol</textual></quote><textual class="po-textual"> [online]. [cited 1st September, 2013].
      </textual><link class="po-inline e194 e194" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/sparql11-http-rdf-update/</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e195 e195" xml:id="Sowa76" xreflabel="Sowa 1976"><textual class="po-textual">John F. Sowa </textual><quote class="po-inline e196 e196"><textual class="po-textual">Conceptual Graphs for a
        Data Base Interface</textual></quote><textual class="po-textual">
      </textual><link class="po-inline e197 e197" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.jfsowa.com/pubs/cg1976.pdf</textual></link></bibliomixed><bibliomixed class="po-block e198 e198" xml:id="Zadeh65" xreflabel="Fuzzy Sets"><textual class="po-textual">L.A. Zadeh </textual><quote class="po-inline e199 e199"><textual class="po-textual">Fuzzy Sets</textual></quote><textual class="po-textual">
      </textual><link class="po-inline e200 e200" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www-bisc.cs.berkeley.edu/Zadeh-1965.pdf</textual></link></bibliomixed><bibliomixed class="po-block e201 e201" xml:id="turtle" xreflabel="Turtle 2013"><textual class="po-textual">David Beckett, and Tim Berners-Lee
      (editors) </textual><quote class="po-inline e202 e202"><textual class="po-textual">Turtle - Terse RDF Triple Language</textual></quote><textual class="po-textual"> [online]. [cited 12th July, 2013].
        </textual><link class="po-inline e203 e203" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TeamSubmission/turtle/</textual></link></bibliomixed></bibliography></article></classedDocument>