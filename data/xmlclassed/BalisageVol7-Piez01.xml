<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.3"><title class="po-block e1 e1"><textual class="po-textual">Abstract generic microformats for coverage, comprehensiveness, and adaptability</textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">Balisage: The Markup Conference 2011</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 2 - 5, 2011</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual">Markup languages that attempt not only to support particular applications, but to
        provide encoding standards for decentralized communities, face a particular problem: how do
        they adapt to new requirements for data description? The most usual approach is a schema
        extensibility mechanism, but many projects avoid them, since they fork the local application
        from the core tag set, complicating implementation, maintenance, and document interchange
        and thus undermining many of the advantages of using a standard. Yet the easy alternative,
        creatively reusing and abusing available elements and attributes, is even worse: it
        introduces signal disguised as noise, degrades the semantics of repurposed elements and
        hides the interchange problem without solving it.</textual></para><para class="po-block e8 e8"><textual class="po-textual">This dilemma follows from the way we have conceived of our models for text. If designing
        an encoding format for one work must compromise its fitness for any other – because
        the clean and powerful descriptive markup for one kind of text is inevitably unsuitable for
        another – we will always be our own worst enemies. Yet texts </textual><quote class="po-inline e9 e9"><textual class="po-textual">in the
          wild</textual></quote><textual class="po-textual"> are purposefully divergent in the structures, features and affordances of
        their design at both micro and macro levels. This suggests that at least in tag sets
        intended for wide use across decentralized communities, we must support design innovation
        not only in the schema, but in the instance – in particular documents and sets of
        documents. By defining, in the schema, a set of abstract generic elements for microformats,
        we can appropriate tag abuse (at one time making it unnecessary and capturing the initiative
        it represents), expose significant and useful semantic variation, and support bottom-up
        development of new semantic types.</textual></para></abstract><author class="po-record e10 e10"><personname class="po-record e11 e11"><firstname class="po-field e12 e12"><textual class="po-textual">Wendell</textual></firstname><surname class="po-field e13 e13"><textual class="po-textual">Piez</textual></surname></personname><personblurb class="po-container e14 e14"><para class="po-block e15 e15"><textual class="po-textual">Lead developer of the Proceedings of Balisage: The Markup Conference, Wendell Piez has
          worked at Mulberry Technologies, Inc., since 1998, where he provides advice, assistance
          and training in XML, XSLT, and related technologies.</textual></para></personblurb><affiliation class="po-record e16 e16"><jobtitle class="po-field e17 e17"><textual class="po-textual">Senior Consultant</textual></jobtitle><orgname class="po-block e18 e18"><textual class="po-textual">Mulberry Technologies, Inc.</textual></orgname></affiliation><email class="po-field e19 e19"><textual class="po-textual">wapiez@mulberrytech.com</textual></email></author><legalnotice class="po-container e20 e20"><para class="po-block e21 e21"><textual class="po-textual">Copyright © 2011 by Wendell Piez</textual></para></legalnotice></info><section class="po-hcontainer e22 e22"><title class="po-block e23 e23"><textual class="po-textual">XML document types and their discontents</textual></title><para class="po-block e24 e24"><textual class="po-textual">The power and utility of descriptive markup has been well understood and widely
      demonstrated for years and now decades; so it doesn't need to be defended here. However, for
      all the demonstrable usefulness of descriptive formats, and of standards that propose
      particular descriptions for documents (in the form of XML element and attribute sets) such as
      Docbook, TEI, NISO/NLM and DITA, a number of problems continue to inhibit their adoption for
      the widest applications of text encoding, including (significantly) that large and open-ended
      set of documents we loosely designate as </textual><quote class="po-inline e25 e25"><textual class="po-textual">books</textual></quote><textual class="po-textual">. One of the most vexing of these
      is in how we define and manage the boundaries of application of a particular markup language
      – what does it seek to do, for what sorts of documents. We can identify this problem
      with the terms </textual><emphasis class="po-inline e26 e26" role="bold"><textual class="po-textual">coverage</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e27 e27" role="bold"><textual class="po-textual">comprehensiveness</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e28 e28" role="bold"><textual class="po-textual">adaptability</textual></emphasis><textual class="po-textual">:</textual><variablelist class="po-table e29 e29"><varlistentry class="po-record e30 e30"><term class="po-block e31 e31"><textual class="po-textual">Coverage</textual></term><listitem class="po-container e32 e32"><para class="po-block e33 e33"><textual class="po-textual">What are the limits of description? What sorts of documents can be described using
              the tag set? Is the set bounded in advance (as for example when converting a defined
              set of extant historical documents), or unbounded?</textual></para><para class="po-block e34 e34"><textual class="po-textual">For example, the coverage of NISO/NLM JATS (the Journal Article Tag Set) is
              defined as journal articles, especially (though not exclusively) for STM
              (scientific/technical/medical) journals. It does not seek to encode musical
              scores.</textual></para><para class="po-block e35 e35"><textual class="po-textual">Document types and tag sets (families of related document types such as NLM/NISO
              or TEI) vary in how much coverage they attempt and in how open-ended that coverage
              is.</textual></para></listitem></varlistentry><varlistentry class="po-record e36 e36"><term class="po-block e37 e37"><textual class="po-textual">Comprehensiveness</textual></term><listitem class="po-container e38 e38"><para class="po-block e39 e39"><textual class="po-textual">This is the complement to coverage: not how broadly a tag set seeks to describe
              texts, but how deeply. Given a set of documents to be encoded, what are the purposes
              of their description? Are there processing requirements to be addressed, either
              directly or indirectly? To what extent must variations among the texts be registered;
              how detailed, exact and complete must the description be? What is the scope of
              description? For example, can two blocks of text separated by vertical whitespace in
              rendition both be called </textual><quote class="po-inline e40 e40"><textual class="po-textual">paragraph</textual></quote><textual class="po-textual">, or are there cases and conditions
              in which this is not sufficient, and further distinctions to be made?</textual></para><para class="po-block e41 e41"><textual class="po-textual">The comprehensiveness problem might come up for NISO/NLM JATS if a journal article
              were to turn up that contained a segment of musical notation. Without a requirement to
              treat the notation in any particular way, owners or publishers of this information
              might choose to encode it as something they do recognize, such as an ordinary
              graphic.</textual></para><para class="po-block e42 e42"><textual class="po-textual">It is natural to consider coverage and comprehensiveness together as a problem of
              scoping. If a document type, formalized by a schema, does not explicitly define its
              scope of application (what the documents are, and how and for what purposes elements
              within them are to be distinguished), it will do so implicitly, in its
              application.</textual></para></listitem></varlistentry><varlistentry class="po-record e43 e43"><term class="po-block e44 e44"><textual class="po-textual">Adaptability</textual></term><listitem class="po-container e45 e45"><para class="po-block e46 e46"><textual class="po-textual">If an encoding format is adequate to the description of a well-defined (bounded)
              document set for the purposes of a known and well-understood set of applications, it
              does not have to be adaptable: we will never have to introduce new elements,
              attributes or tag semantics, as these can all be distinguished and defined up front.
              But most schemas in actual use need to be able to stretch, either to describe new
              documents, or to identify new structures and features of documents already considered
              in scope. That is, they need to adapt, in both their coverage and their
              comprehensiveness.</textual></para><para class="po-block e47 e47"><textual class="po-textual">Adaptability will be a problem to the extent that it is needed (that is, coverage
              and comprehensiveness are problems) and available mechanisms are not adequate to meet
              the need.</textual></para></listitem></varlistentry></variablelist></para><para class="po-block e48 e48"><textual class="po-textual">We now have enough experience with XML encoding to have a good sense of how well our
      mechanisms work in the face of these issues. Whether they work well enough for you depends on
      who you are; more generally, it depends on the scope of control exerted by schema designers
      (either directly or by proxy) over documents.</textual><footnote class="po-popup e49 e49"><para class="po-block e50 e50"><textual class="po-textual">In passing, it is worth noting that none of these problems arise in XML document types
          or formats that are designed to face applications (such as, say, XSL formatting objects or
          SVG), rather than describe information directly without regard to how it may be processed.
          This is because an application format, as opposed to a descriptive format, defines its
          coverage and comprehensiveness in the design of the application. From this, we can reason
          backwards and see that the problems discussed here are inherent in the very idea of
          descriptive markup, since to posit a description of a text that is not bound to a
          particular application is to raise the question of how we define that description's
          coverage and comprehensiveness.</textual></para></footnote></para><section class="po-hcontainer e51 e51"><title class="po-block e52 e52"><textual class="po-textual">When descriptive schemas work</textual></title><para class="po-block e53 e53"><textual class="po-textual">The short answer is that how well a descriptive schema works in operation depends not
        only on its fitness for the data and task (i.e., whether its coverage is appropriate and it
        is adequately comprehensive), but also to the extent that document encoders have editorial
        control over the information, both in its content and organization. This should not come as
        a surprise, since indeed the roots of XML technologies are in publishing systems in which it
        is more or less imperative to exercise such control, and the promise of externalizing,
        rationalizing and simplifying these control mechanisms is much of the point of descriptive
        markup. The classic application of this principle, of course, is in the publishing of a
        manual, technical series or periodical, in which authors or contributors (on the one hand)
        and production staff and designers (on the other) assent to creative decisions of editors,
        and document markup can serve transparently to represent </textual><quote class="po-inline e54 e54"><textual class="po-textual">editorial intent</textual></quote><textual class="po-textual">.
        When control is centralized in this way, the circle is complete: once an encoding format is
        defined, content can be selected, composed and modified to conform to its capabilities.
        Requirements for change and adaptability are managed in balance against other needs for
        consistency and stability. System operators resort, when necessary, to editorial
        policy-making to forestall, prioritize, and schedule any innovations likely to have a
        destabilizing effect.</textual></para></section><section class="po-hcontainer e55 e55"><title class="po-block e56 e56"><textual class="po-textual">The limits of description: the case of </textual><quote class="po-inline e57 e57"><textual class="po-textual">the book</textual></quote></title><para class="po-block e58 e58"><textual class="po-textual">The inverse is also true. Descriptive schemas work well to the extent that control over
        the data is centralized and consistency in the application of markup can be enforced. But
        when it is not so centralized, they do not work so well. This can happen anywhere, but it
        happens most notably and inescapably in a community of use which shares a common schema or
        tag set (using that term to identify a family of related schemas) without sharing local
        goals and objectives. Maybe they have an interest in a common encoding standard for purposes
        ostensibly of document interchange; similarly, they may wish to take advantage of common
        knowledge and a shared tool base. Of course, this is exactly the case with the
          </textual><quote class="po-inline e59 e59"><textual class="po-textual">big</textual></quote><textual class="po-textual"> general-purpose document encoding standards and community initiatives,
        such as TEI, Docbook, and NLM/NISO.</textual></para><para class="po-block e60 e60"><textual class="po-textual">The limits of a descriptive encoding can be readily illustrated by considering
        information artifacts in the wild – that is, as actually found, and apart from any
        considerations of how they may be encoded electronically (or not) by the authors, editors,
        designers and publishers who have composed and produced them. Texts in the wild – even
        if we limit consideration to those texts we are content to designate as </textual><quote class="po-inline e61 e61"><textual class="po-textual">books</textual></quote><textual class="po-textual">
        – are not perfectly regular, but only mostly so. Indeed this semi-regularity is an
        important (perhaps the most important) general feature of books, inasmuch as </textual><emphasis class="po-inline e62 e62" role="bold"><textual class="po-textual">significant variation within pattern</textual></emphasis><textual class="po-textual"> might serve as a definition of
          </textual><quote class="po-inline e63 e63"><textual class="po-textual">information</textual></quote><textual class="po-textual"> itself: the structures of books cannot be entirely regularized
        without sometimes destroying the book. Sometimes this works at a very granular level.</textual></para><figure class="po-container e64 e64"><title class="po-block e65 e65"><textual class="po-textual">Specialized structures across a series of books</textual></title><mediaobject class="po-container e66 e66"><imageobject class="po-container e67 e67"><imagedata class="po-meta e68 e68" fileref="../../../vol7/graphics/Piez01/Piez01-001.jpg" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e69 e69"><para class="po-block e70 e70"><textual class="po-textual">Michael Kay's </textual><emphasis class="po-inline e71 e71" role="ital"><textual class="po-textual">XSLT 2.0 and XPath 2.0 Programmer's
              Reference</textual></emphasis><textual class="po-textual"> is a convenient example of a book whose internal structures are
            more elaborate than may be typical of a </textual><quote class="po-inline e72 e72"><textual class="po-textual">generic</textual></quote><textual class="po-textual"> book. Yet unless we wish
            to say this book is not a book, but something else, a viable book model has to support
            such structures either natively or by means of extensions to be introduced by the author
            or publisher. It is possible that the markup needed here could be useful across all the
            books of the series to which this book belongs; in any case, it might be useful to the 
            publisher and to application designers who wished to design interfaces to this content 
            if it were.</textual></para></caption></figure><figure class="po-container e73 e73" xml:id="fig2"><title class="po-block e74 e74"><textual class="po-textual">Specialized structures across a single book</textual></title><mediaobject class="po-container e75 e75"><imageobject class="po-container e76 e76"><imagedata class="po-meta e77 e77" fileref="../../../vol7/graphics/Piez01/Piez01-002.jpg" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><mediaobject class="po-container e78 e78"><imageobject class="po-container e79 e79"><imagedata class="po-meta e80 e80" fileref="../../../vol7/graphics/Piez01/Piez01-003.jpg" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><mediaobject class="po-container e81 e81"><imageobject class="po-container e82 e82"><imagedata class="po-meta e83 e83" fileref="../../../vol7/graphics/Piez01/Piez01-004.jpg" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e84 e84"><para class="po-block e85 e85"><textual class="po-textual">Stafford Beer's </textual><emphasis class="po-inline e86 e86" role="ital"><textual class="po-textual">Platform for Change</textual></emphasis><textual class="po-textual"> (1975), like
            many other literary or quasi-literary productions, is a fascinating example of a book
            whose structure is peculiar to itself. Beer's volume is not unusual in having figures
            and diagrams, although one appears on the inside of the dust jacket; but it does have
            structured prose (it is not verse, or so the author asserts), and its chapters are
            differentiated by type, as indicated by page colors.</textual></para><para class="po-block e87 e87"><textual class="po-textual">Does a generic book model need to be able to accommodate works of this kind? We can
            agree to say no, this book is out of scope: the coverage problem again. Or say that
            although it is a book, we will force-fit it within available semantics (risking tag
            abuse to deal with inadequate comprehensiveness). Or we have to find a way of dealing
            with its special requirements: the adaptability problem.</textual></para><para class="po-block e88 e88"><textual class="po-textual">For what it's worth, even unextended TEI does not provide elements directly capable
            of marking up this text, as it has no elements for lineated (structured) prose, only
            verse.</textual></para></caption></figure><figure class="po-container e89 e89"><title class="po-block e90 e90"><textual class="po-textual">Specialized structures within a single book</textual></title><mediaobject class="po-container e91 e91"><imageobject class="po-container e92 e92"><imagedata class="po-meta e93 e93" fileref="../../../vol7/graphics/Piez01/Piez01-005.jpg"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><mediaobject class="po-container e94 e94"><imageobject class="po-container e95 e95"><imagedata class="po-meta e96 e96" fileref="../../../vol7/graphics/Piez01/Piez01-006.jpg"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e97 e97"><para class="po-block e98 e98"><textual class="po-textual">Thomas Carlyle's </textual><emphasis class="po-inline e99 e99" role="ital"><textual class="po-textual">Sartor Resartus</textual></emphasis><textual class="po-textual"> (1833) should be
            required reading for all students of semiology. It is mostly conventional in structure;
            or at least, much of its point is in how it observes some of the more elaborate
            conventions of nineteenth-century scholarship. But an epitaph pops up in the middle.
            Students of literature know that such things are less uncommon than you might think,
            even leaving aside </textual><emphasis class="po-inline e100 e100" role="ital"><textual class="po-textual">Tristram Shandy</textual></emphasis><textual class="po-textual">. (Illustration from
            Google Books.)</textual></para><para class="po-block e101 e101"><textual class="po-textual">Again, we have either to extend our coverage of what's a book (or what's in a book),
            or provide a way for a markup language to be adapted to purposes like this.</textual></para></caption></figure><para class="po-block e102 e102"><textual class="po-textual">Three examples appear in Figures 1-3, showing this phenomenon at the level of the series
        (the Wrox </textual><emphasis class="po-inline e103 e103" role="ital"><textual class="po-textual">Programmer to Programmer</textual></emphasis><textual class="po-textual"> series, shown here by
        Michael Kay's </textual><emphasis class="po-inline e104 e104" role="ital"><textual class="po-textual">XSLT 2.0 and XPath 2.0: Programmer's
          Reference</textual></emphasis><footnote class="po-popup e105 e105"><para class="po-block e106 e106"><textual class="po-textual">I offer this example without being able to confirm that the design of Kay's book
            actually shares its structures exactly with other books in the series. But even if it
            does not, we all know of cases like this.</textual></para></footnote><textual class="po-textual">); the level of the book (Stafford Beer's </textual><emphasis class="po-inline e107 e107" role="ital"><textual class="po-textual">Platform for
          Change</textual></emphasis><textual class="po-textual">); and within the book (the epitaph appearing in </textual><emphasis class="po-inline e108 e108" role="ital"><textual class="po-textual">Sartor Resartus</textual></emphasis><textual class="po-textual">). Of course, many more examples could be shown to demonstrate
        how every book – and every structure within a book – is potentially a one-off, a
        thing unique unto itself. In part, this reflects the fact that books as functioning
        information objects can and must be designed to serve sometimes very distinct and peculiar
        purposes, which may even be intended specifically to differentiate them from other books.
        One of the core requirements addressed by book design, that is, is that a particular design
        may be distinctive, at least in part, not only in its features but even in the requirements
        it addresses, which will be different from the requirements addressed by any generalized
        design. This reflects a different balance of power in book publishing from journal
        publishing: the center of gravity for design decisions shifts from publisher to author
        – which is why, as a class, </textual><quote class="po-inline e109 e109"><textual class="po-textual">books</textual></quote><textual class="po-textual"> are less tractable for descriptive
        markup than journals that maintain a consistent structure (expressed in their design, layout
        and page formatting) across articles.</textual></para><para class="po-block e110 e110"><textual class="po-textual">Of course, the irony here is that this will be true of books </textual><emphasis class="po-inline e111 e111" role="ital"><textual class="po-textual">as a
          class</textual></emphasis><textual class="po-textual"> even while individual books or certain genres, types or formal series of
        books might well be suitable and profitable objects for description. (And so we generally
        deal with this problem by limiting our coverage to particular books, leaving
          </textual><quote class="po-inline e112 e112"><textual class="po-textual">books</textual></quote><textual class="po-textual"> in the abstract out of scope.) Because coverage – what,
        exactly, constitutes a </textual><quote class="po-inline e113 e113"><textual class="po-textual">book</textual></quote><textual class="po-textual">, and what sorts of documents are not books
        – is not well defined, the comprehensiveness of any markup applied to nominal books
        will also be at issue. In practice this means that descriptive encoding hits a wall, since
        to whatever extent we try and provide appropriate handling of every structure we see, our
        markup language grows into a Tower of Babel: a single megalo-description supporting this
        differentiation ultimately fragments under its own weight, since any instance may have
        structures peculiar to it, while no instance includes all (or even many of) the structures
        necessary for the others. While this may be a fascinating state of affairs to a media critic
        or markup language designer, it is no basis for a common information standard that needs to
        normalize description at some level, if only to enable and regulate processing.</textual></para><para class="po-block e114 e114"><textual class="po-textual">This paradox results from the foundational insight of descriptive encoding. The
        operative dogma is that we can and should clearly distinguish presentation from content,
        where the organization of content is regular and in some way normative, even while the
        presentation and indeed application of that content may vary. (In effect, this is a
        model/view/controller paradigm applied to documents, in which the document itself is a model
        that can be subjected to multiple views in one or more applications as controllers.) As
        noted earlier, this tends to be the case within collections of documents that can have such
        regularity imposed on them – consistently designed works such as journal articles or
        technical manuals, that is, where control of both content and composition is top-down and centralized.</textual><footnote class="po-popup e115 e115"><para class="po-block e116 e116"><textual class="po-textual">I know a publisher that forbids formatted lists, either numbered or bulleted. Markup
            designers like this sort of thing: no lists to worry about. The onus is on the authors
            to do without them.</textual></para></footnote><textual class="po-textual"> So the design of markup languages is focused on defining that regularity and
        normativity, in a sense leveling the differentiation into those classes of things (we try to
        identify these with </textual><quote class="po-inline e117 e117"><textual class="po-textual">element types</textual></quote><textual class="po-textual">) that can be adequately, if not always
        comprehensively, distinguished with an encoding system.</textual></para><para class="po-block e118 e118"><textual class="po-textual">Yet in order to do this, we have to pretend that some distinctions between things which
        we choose to identify as the same type are not, and cannot be, significant. And we never
        know which one or another of the distinctions to which a particular markup system has a
        blind spot will turn out to be important as soon as we turn the page of a book or of any
        work outside our controlled set. In other words, depending on the type of work, anomalous
        structures may be more or less unusual, and regarded as more or less anomalous; but when
        they occur, they can be very anomalous. The structures of actual books, that is, have a
        fractal quality, inasmuch as what constitutes an anomaly (as opposed to merely another
        regular if unusual feature) depends on the level of scale – and yet there is no level
        at which anomalies disappear.</textual><footnote class="po-popup e119 e119"><para class="po-block e120 e120"><textual class="po-textual">Take epitaphs in prose fiction as an example. Among Menippean satires, the genre to
            which </textual><emphasis class="po-inline e121 e121" role="ital"><textual class="po-textual">Sartor Resartus</textual></emphasis><textual class="po-textual"> belongs, they are perhaps not
            uncommon. But shift the scope to nineteenth-century fictional monographs, in a corpus of
            one or a dozen or a hundred instances including </textual><emphasis class="po-inline e122 e122" role="ital"><textual class="po-textual">Sartor
              Resartus</textual></emphasis><textual class="po-textual">, we may find just the one epitaph, an anomaly. Yet in a thousand,
            maybe there are three or four epitaphs, in ten thousand, thirty or forty – still
            unusual, but no longer quite anomalies. But now we discover a dinner menu. If we had
            randomly picked the single work with the dinner menu earlier, we would have seen this
            anomaly earlier – but in smaller samples, it is more likely not to find dinner
            menus at all.</textual></para></footnote></para><para class="po-block e123 e123"><textual class="po-textual">Different markup languages deal with this problem differently, depending on the extent
        to which their design targets a distinct </textual><quote class="po-inline e124 e124"><textual class="po-textual">genre</textual></quote><textual class="po-textual"> or application domain. But in
        every markup language, we can see this stress between coverage and comprehensiveness on the
        one hand, and adaptability on the other. To whatever extent coverage is well defined and
        comprehensiveness is achieved within it – by virtue of the meaningful distinctions
        being made and the incidental ones elided – adaptability also becomes important
        – because a distinction never made in one context, or made only incidentally, becomes
        meaningful in another. (In contrast, precisely because it is relatively uncomprehensive
        across a very wide coverage, a markup language such as HTML needs to adapt less; the price
        for this, of course, is that its semantics are weak.) But adaptability by its nature
        threatens the integrity of the boundaries (the coverage) that make the semantic labeling
        function of a markup language useful.</textual></para><para class="po-block e125 e125"><textual class="po-textual">The root of the problem here is in a question not often asked about descriptive markup
        (except, possibly, at Balisage), namely what is it that markup should be intended to
        describe. Sometimes, naïve proponets of descriptive markup have been content to argue that
        what is being described is the </textual><quote class="po-inline e126 e126"><textual class="po-textual">thing itself</textual></quote><textual class="po-textual">, but this of course begs the
        question. A successful markup application works precisely because it does not seek to
        capture every distinguishable feature or detail of anything it describes, but instead
        represents and abstracts from it. The model it offers is an optimization: more accessible,
        tractable and useful, at least for certain purposes (including automation), than the thing
        itself. This reduction of differences to (supposed) essentials reflects the way, in
        information processing systems, everything we do is on the basis of the </textual><emphasis class="po-inline e127 e127" role="ital"><textual class="po-textual">differences</textual></emphasis><textual class="po-textual"> and differentiations (and similarities) we can register
        and retain within and between different data objects, as is well established in information
        theory from Saussure [</textual><xref class="po-milestone e128 e128" linkend="saussure1916"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] to Shannon [</textual><xref class="po-milestone e129 e129" linkend="shannon1948"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].</textual><footnote class="po-popup e130 e130"><para class="po-block e131 e131"><textual class="po-textual">Shannon puts this mathematically as our ability to select which of a possible set of
            messages we have in front of us. To select correctly from among possibilities is to
            differentiate. See also </textual><xref class="po-milestone e132 e132" linkend="spencerbrown1969"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para></footnote><textual class="po-textual"> And this means that we necessarily make assertions (by our names and labels)
        that erase some distinctions between things, precisely so that we can assert others. It is
        in recognition of this that in SGML terminology, an element name is called a </textual><quote class="po-inline e133 e133"><textual class="po-textual">generic
          identifier</textual></quote><textual class="po-textual">.</textual><footnote class="po-popup e134 e134"><para class="po-block e135 e135"><textual class="po-textual">This is not to argue that we do not rely frequently or even always on information
            whose transmission is not perfectly reliable, such as the expectation that the term
              </textual><quote class="po-inline e136 e136"><textual class="po-textual">para</textual></quote><textual class="po-textual"> will be taken to assert something particular to a recipient. It is
            only to point out that from the machine's point of view, all we have said by labeling
            something a </textual><code class="po-atom e137 e137"><textual class="po-textual">para</textual></code><textual class="po-textual"> is that it is like other things with the markup
              </textual><code class="po-atom e138 e138"><textual class="po-textual">para</textual></code><textual class="po-textual">, and unlike things marked </textual><code class="po-atom e139 e139"><textual class="po-textual">div</textual></code><textual class="po-textual"> or </textual><code class="po-atom e140 e140"><textual class="po-textual">span</textual></code><textual class="po-textual"> or
            anything else not </textual><code class="po-atom e141 e141"><textual class="po-textual">para</textual></code><textual class="po-textual">. Whether this likeness or unlikeness will have any
            consequences in processing is again a different matter.</textual></para></footnote></para><para class="po-block e142 e142"><textual class="po-textual">This erasure of distinctions by calling different things by the same names, as long as
        they are alike in certain crucial aspects – </textual><quote class="po-inline e143 e143"><textual class="po-textual">crucial</textual></quote><textual class="po-textual"> being defined in
        the relation between an information type and its application domains – is the
        balancing factor that prevents descriptive markup from going out of control and failing in
        its mission </textual><emphasis class="po-inline e144 e144" role="ital"><textual class="po-textual">sine qua non</textual></emphasis><textual class="po-textual">, namely the automatability that
        follows on our ability to know in advance the limits we will work within. For a markup
        application to be viable, in other words, it must have a fairly limited set of elements,
        whose semantics are known and respected and whose structural arrangements are predictable
        (indeed this is the entire point of a schema).</textual><footnote class="po-popup e145 e145"><para class="po-block e146 e146"><textual class="po-textual">See my 2001 paper on this topic, </textual><quote class="po-inline e147 e147"><textual class="po-textual">Beyond the ‘Descriptive vs
              Procedural’ Distinction</textual></quote><textual class="po-textual">
            [</textual><xref class="po-milestone e148 e148" linkend="piez2001"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].</textual></para></footnote><textual class="po-textual"> To the extent this set grows and changes (either because new elements and
        attributes are added or because the semantics of old ones are elaborated), viability is
        endangered, to the point where (if the rate of change outstrips the capability of the rest
        of the system to change with it) applications of the language become unsustainable and the
        language itself becomes, at best, a literary artifact.</textual></para><para class="po-block e149 e149"><textual class="po-textual">Of course, this limitation inhibits adaptability, insofar as an element set defined in
        advance will (</textual><emphasis class="po-inline e150 e150" role="ital"><textual class="po-textual">ipso facto</textual></emphasis><textual class="po-textual">) fail to account for any semantic
        features of the information type that are newly defined or recognized, whether accounting
        for new phenomena to be described, addressing new applications, or for any other reason. And
        this is the crux of the paradox, the precise dilemma on whose horns the problem of
        descriptive markup is stuck.</textual></para></section></section><section class="po-hcontainer e151 e151"><title class="po-block e152 e152"><textual class="po-textual">The problem with schema extensibility</textual></title><para class="po-block e153 e153"><textual class="po-textual">The usual way of providing an encoding format with adaptability is to allow that a schema
      may be extended and customized for local use. </textual><quote class="po-inline e154 e154"><textual class="po-textual">If you need new element types, this is
        how to add them</textual></quote><textual class="po-textual"> etc., sometimes with elaborations in the form of class systems,
      metalanguages (TEI ODD), architectural forms, and so forth. Such mechanisms can be ingenious;
      they can also be useful – especially for publishers who can exert top-down control. Yet
      this solution often works less well in the real world than it should, as it has problems of
      its own. Extensions to a tag set, even as they successfully address new requirements, raise
      interoperability issues with systems that do not know about them. When we address this problem
      in turn by allowing extensions to make it back into the development trunk of the markup
      language, we end up making the entire system more complex, more unwieldy, and more expensive
      to develop with, use and maintain. In effect, we have a devil's choice: fork, or bloat. In the
      one case, having extended the schema I find my documents will no longer be interchangeable,
      even nominally, with yours. In the other, we will reconcile and merge my extensions back into
      the main schema, where you and everyone else who works with it will have to live with them
      (even if you will never need them), and all our common tools must be larger and more complex
      to accommodate them.</textual></para><para class="po-block e155 e155"><textual class="po-textual">Schema extensibility also gets it wrong in another way: it assumes that adapting a tag set
      to meet new requirements for data description is properly the task of a schema designer, and
      not of the content creator, editor or owner who is actually responsible for the document.
      Again, this differentiation in roles is less of a problem for organizations with strong
      top-down control, where coordination between the different parties can be expected, and a
      schema designer is available either to give or to take orders. But many tag sets aim to
      support wide deployment across a user community with a greater variation in needs, goals and
      available resources, where project principals may have neither expertise, nor resources, nor
      the inclination to take on the task of schema modification, especially as it distracts from
      the immediate and more important task of producing the document itself.</textual><footnote class="po-popup e156 e156"><para class="po-block e157 e157"><textual class="po-textual">To provide for an optimized method for schema extension as Docbook and NLM/NISO do
          through modular design, and TEI and DITA through their more specialized mechanisms, does
          not actually alleviate this problem, inasmuch as it demands familiarity with a whole new
          set of technical arcana in order to make things </textual><quote class="po-inline e158 e158"><textual class="po-textual">easier</textual></quote><textual class="po-textual">. This is not to say
          that such measures are without advantage or value, just that their value is not in making
          schema modification more accessible to non-experts.</textual></para></footnote><textual class="po-textual"> In other words, to customize a community standard for local uses works best, as a
      solution, for those organizations who need it least – who are best able to exert
      top-down centralized control, who have schema developers on call, and who are probably able
      (if they do not see other benefits to using a standard) to manage completely on their
      own.</textual></para><para class="po-block e159 e159"><textual class="po-textual">And finally, there is a simple cost issue whenever we consider cases that are,
      effectively, one-offs. Even in an organization with the resources to do so, it may be too much
      of an effort to introduce customizations to accommodate a single book, or a single interesting
      textual artifact appearing on a single page in a single book.</textual></para><para class="po-block e160 e160"><textual class="po-textual">We commonly assume that this means the game is over, since how can a content creator
      introduce new descriptions to the data without schema extension, at least not without
      resorting to tag abuse, forcibly attempting to carry new semantics on elements provided for
      other purposes? In effect, what is needed is an extension mechanism that happens in the
      instance, not in the schema – and yet in a way that enables authors, editors and
      production (not markup) designers without compromising the integrity of the markup language as
      a whole (which is what happens when tag abuse becomes rampant). This implies not that we have
      more elements or more easy ways to add new elements, but rather a smaller set of elements that
      are nevertheless, paradoxically, capable of more expressiveness and wider application.</textual></para></section><section class="po-hcontainer e161 e161"><title class="po-block e162 e162"><textual class="po-textual">Extension in the instance with abstract generic microformats</textual></title><para class="po-block e163 e163"><textual class="po-textual">The mechanism we need to do this is already in front of us. We routinely permit content
      creators to introduce exactly such </textual><emphasis class="po-inline e164 e164" role="ital"><textual class="po-textual">ad hoc</textual></emphasis><textual class="po-textual"> semantic extensions
      to the language, whenever we invite them to qualify their element types with attributes. TEI
        </textual><code class="po-atom e165 e165"><textual class="po-textual">@type</textual></code><textual class="po-textual">, HTML </textual><code class="po-atom e166 e166"><textual class="po-textual">@class</textual></code><textual class="po-textual">, Docbook </textual><code class="po-atom e167 e167"><textual class="po-textual">@role</textual></code><textual class="po-textual">, the various
      NLM/NISO subtyping attributes: these are there specifically so that we can identify particular
      instances of elements such as </textual><code class="po-atom e168 e168"><textual class="po-textual">div</textual></code><textual class="po-textual">, </textual><code class="po-atom e169 e169"><textual class="po-textual">p</textual></code><textual class="po-textual">, </textual><code class="po-atom e170 e170"><textual class="po-textual">figure</textual></code><textual class="po-textual">,
        </textual><code class="po-atom e171 e171"><textual class="po-textual">table</textual></code><textual class="po-textual">, </textual><code class="po-atom e172 e172"><textual class="po-textual">seg</textual></code><textual class="po-textual">, </textual><code class="po-atom e173 e173"><textual class="po-textual">sec</textual></code><textual class="po-textual">, </textual><code class="po-atom e174 e174"><textual class="po-textual">span</textual></code><textual class="po-textual"> and so forth with
      particular semantics over and above the generic semantics of the parent element. The practice
      has come to be an essential feature in HTML, inasmuch as </textual><code class="po-atom e175 e175"><textual class="po-textual">@class</textual></code><textual class="po-textual"> attributes as
      much as element types provide the semantic hooks for display and behavior in the browser, in
      the preferred fashion (as supported by CSS). It is the recommended solution also in TEI for
      handing chapters, parts, books, sections, cantos or what have you as arbitrary text-segmenting
      elements, which are all unified as </textual><code class="po-atom e176 e176"><textual class="po-textual">div</textual></code><textual class="po-textual"> (or </textual><code class="po-atom e177 e177"><textual class="po-textual">lg</textual></code><textual class="po-textual"> or what have you) with
      a </textual><code class="po-atom e178 e178"><textual class="po-textual">@type</textual></code><textual class="po-textual"> attribute available for the subtyping.</textual></para><para class="po-block e179 e179"><textual class="po-textual">Indeed, successful documentary markup languages commonly have elements whose native
      semantics are especially loose, as if specifically to allow </textual><quote class="po-inline e180 e180"><textual class="po-textual">escape-hatch</textual></quote><textual class="po-textual"> markup
      for ad-hoc inclusion of structures not naturally described otherwise.</textual><footnote class="po-popup e181 e181"><para class="po-block e182 e182"><textual class="po-textual">I described this sort of mechanism in my 2009 Balisage paper, </textual><quote class="po-inline e183 e183"><textual class="po-textual">How to Play XML:
            Markup technologies as nomic game</textual></quote><textual class="po-textual">
          [</textual><xref class="po-milestone e184 e184" linkend="piez2009"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].</textual></para></footnote><textual class="po-textual"> TEI: </textual><code class="po-atom e185 e185"><textual class="po-textual">div</textual></code><textual class="po-textual">, </textual><code class="po-atom e186 e186"><textual class="po-textual">floatingText</textual></code><textual class="po-textual">, </textual><code class="po-atom e187 e187"><textual class="po-textual">ab</textual></code><textual class="po-textual">,
        </textual><code class="po-atom e188 e188"><textual class="po-textual">seg</textual></code><textual class="po-textual">. NLM/NISO JATS: </textual><code class="po-atom e189 e189"><textual class="po-textual">sec</textual></code><textual class="po-textual">, </textual><code class="po-atom e190 e190"><textual class="po-textual">app</textual></code><textual class="po-textual">,
        </textual><code class="po-atom e191 e191"><textual class="po-textual">named-content</textual></code><textual class="po-textual">, </textual><code class="po-atom e192 e192"><textual class="po-textual">custom-meta</textual></code><textual class="po-textual">. Docbook: </textual><code class="po-atom e193 e193"><textual class="po-textual">blockquote</textual></code><textual class="po-textual">,
        </textual><code class="po-atom e194 e194"><textual class="po-textual">informalTable</textual></code><textual class="po-textual">, </textual><code class="po-atom e195 e195"><textual class="po-textual">note</textual></code><textual class="po-textual">, </textual><code class="po-atom e196 e196"><textual class="po-textual">phrase</textual></code><textual class="po-textual">. HTML: </textual><code class="po-atom e197 e197"><textual class="po-textual">div</textual></code><textual class="po-textual">
      and </textual><code class="po-atom e198 e198"><textual class="po-textual">span</textual></code><textual class="po-textual">. While using such elements in this way is not always officially
      encouraged, in any widely used markup system it soon enough becomes a widespread practice, if
      only informally. Sometimes an element that supposedly has a strong semantic comes to serve
      this way simply by having been widely abused: no one actually assumes that an HTML
        </textual><code class="po-atom e199 e199"><textual class="po-textual">blockquote</textual></code><textual class="po-textual"> must always be a quotation, or that </textual><code class="po-atom e200 e200"><textual class="po-textual">dl</textual></code><textual class="po-textual">, </textual><code class="po-atom e201 e201"><textual class="po-textual">dt</textual></code><textual class="po-textual">
      and </textual><code class="po-atom e202 e202"><textual class="po-textual">dd</textual></code><textual class="po-textual"> must always be terms and definitions. Such a two-tier description is a way
      of evading the problem of constraining the markup too stringently in the schema, by allowing
      the balance between generic and specific to be struck in the instance, where the
        </textual><quote class="po-inline e203 e203"><textual class="po-textual">same</textual></quote><textual class="po-textual"> things (</textual><code class="po-atom e204 e204"><textual class="po-textual">p</textual></code><textual class="po-textual"> or </textual><code class="po-atom e205 e205"><textual class="po-textual">div</textual></code><textual class="po-textual"> elements, for example) can be
      differentiated by different class assignments. Descriptive semantics are provided to tabular
      data by this mechanism probably more often than by providing content-oriented elements in a
      schema, if only because tables are so often peculiar or one-of-a-kind that it is the only
      practical way to do it.</textual><footnote class="po-popup e206 e206"><para class="po-block e207 e207"><textual class="po-textual">That is, the issue is not that more properly descriptive markup is not possible or
          useful for tables (see </textual><xref class="po-milestone e208 e208" linkend="birnbaum2007"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">), but that to design, deploy and
          support </textual><quote class="po-inline e209 e209"><textual class="po-textual">correct</textual></quote><textual class="po-textual">, descriptive markup </textual><emphasis class="po-inline e210 e210" role="ital"><textual class="po-textual">ad hoc</textual></emphasis><textual class="po-textual">
          for every table (or even most sets of tables) is simply impractical. The related workflow
          problem – that insofar as it separates description from presentation, markup tends
          to take the design of a table's presentation out of the hands of people who are properly
          responsible for it (that is, authors or editors who understand the information's
          intellectual structure, which that presentation must reflect not just generically but in
          the particular instance) – is related to this.</textual></para><para class="po-block e211 e211"><textual class="po-textual">It should be added, however, that information that is presented in tabular form might
          well be marked up using more abstract structures, leaving presentational issues to a
          processing step, without having particular elements devoted to the particular semantics of
          every particular table.</textual></para></footnote></para><para class="po-block e212 e212"><textual class="po-textual">Nor does this have to mean any loss of control or normalization, since we have learned to
      validate constraints on attribute assignments, using means such as Schematron. On the
      contrary, it means that we can assert levels of validity: a basic level of schema validation
      can be supplemented by a profile validation that is defined locally and peculiarly for only a
      subset of all documents valid to the schema. This exact strategy is in fact happening more and
      more commonly, as a way of balancing a requirement for standards conformance (to TEI or
      NLM/NISO JATS, for example) with more particular local requirements being addressed by local
      schema subsetting and profiling.</textual></para><para class="po-block e213 e213"><textual class="po-textual">Another way of putting it is that we should look not to schema extensibility but to
      microformats defined locally as the primary means of providing specialized semantics for local
      processing. (There is a more or less coherent movement to codify HTML microformats at
        </textual><link class="po-inline e214 e214" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.microformats.org</textual></link><textual class="po-textual">; but as the TEI among others demonstrates, the
      basic idea of carrying primary semantics in attributes predates the web and is more general
      than HTML.</textual><footnote class="po-popup e215 e215"><para class="po-block e216 e216"><textual class="po-textual">To be sure, the application of microformats I suggest here, and its rationale, is
          somewhat different from microformats (at least as usually promoted) in HTML, where they
          are all about implicit application binding by way of semantic labels, as opposed to
          description in the stricter sense. Yet there is a wide spectrum between these two
          extremes, which can and should be filled as much by users addressing their local problems
          as by engineers building a system out: in both cases, the promise is that applications can
          be built on top of the standard without having to modify and extend the standard
          itself.</textual></para></footnote><textual class="po-textual">) The only thing remaining to complete this picture is to provide scaffolding for
      such a mechanism, in the form of a set of elements defined neutrally enough (that is, with
      generic enough semantics of their own) that they can readily be devoted to such a use, without
      compromising the stronger semantics of more properly descriptive elements. Such a built-in
      adaptability mechanism would implicitly address issues of both coverage and comprehensiveness.</textual><footnote class="po-popup e217 e217"><para class="po-block e218 e218"><textual class="po-textual">In paraphrasing this talk at Balisage 2011, Michael Sperberg-McQueen helpfully
          described this mechanism as </textual><quote class="po-inline e219 e219"><textual class="po-textual">control points for extensibility in the
            instance</textual></quote><textual class="po-textual">. This is a nice way of indicating that far from being an allowance for
          less control over content, the essence of the proposal is to make it possible for both
          schema designers and document creators to assert </textual><emphasis class="po-inline e220 e220" role="ital"><textual class="po-textual">more</textual></emphasis><textual class="po-textual">
          control, by asserting it gently when it cannot be asserted strongly.</textual></para></footnote></para><para class="po-block e221 e221"><textual class="po-textual">It is also feasible, since even across hypermedia, the basic display and functional
      elements of text media are fairly well known and stable: they are inline objects (the very
      fact that I don't have to explain to the Balisage audience what I mean by this term makes my
      point here); blocks; conceptual containers (</textual><quote class="po-inline e222 e222"><textual class="po-textual">wrappers</textual></quote><textual class="po-textual">) for blocks allowing them
      to be grouped and for common features to be inherited together; tabular layout objects;
      perhaps lists (which might be considered a special kind of table); and links and images
      (allowing that an image element can be thought of as a transcluding link). Along these lines,
      a comprehensive taxonomy can be derived by identifying basic common formatting properties of
      elements in relation to other elements.</textual></para><para class="po-block e223 e223"><textual class="po-textual">This fact suggests that a set of abstract structural elements be defined that map directly
      straightforwardly to the semantics of known result formats of transformation, including CSS
      and XSL-FO. Elements as generic as </textual><code class="po-atom e224 e224"><textual class="po-textual">div</textual></code><textual class="po-textual">, </textual><code class="po-atom e225 e225"><textual class="po-textual">block</textual></code><textual class="po-textual">, and
        </textual><code class="po-atom e226 e226"><textual class="po-textual">inline</textual></code><textual class="po-textual"> allowing </textual><code class="po-atom e227 e227"><textual class="po-textual">@class</textual></code><textual class="po-textual"> or </textual><code class="po-atom e228 e228"><textual class="po-textual">@type</textual></code><textual class="po-textual"> attributes to specify
      semantics for applications further downstream, would provide strong enough semantics at a base
      line, supporting presentation, to be useful, while nevertheless alerting developers, by their
      use, that more particular kinds of handling might also be called for. In effect, the implicit
      contract offered by element typing mechanisms (that all elements will be handled downstream in
      ways appropriate to them) would be suspended for these </textual><quote class="po-inline e229 e229"><textual class="po-textual">abstract generics</textual></quote><textual class="po-textual"> in
      favor of another, allowing and encouraging local developers to take advantage of them for
      local purposes. Even without specialized functionalities (including very strong validation)
      for these elements by default, they could nonetheless be differentiated enough from one
      another and from the main set of elements to do something reasonable in display and in other
      applications – up to and including useful generic functionalities, such as simply
      exposing the values of their </textual><code class="po-atom e230 e230"><textual class="po-textual">@type</textual></code><textual class="po-textual"> or </textual><code class="po-atom e231 e231"><textual class="po-textual">@class</textual></code><textual class="po-textual"> assignments in the HTML
      results of a transformation, where they would be available for mapping to display semantics in
      CSS.</textual></para><section class="po-hcontainer e232 e232"><title class="po-block e233 e233"><textual class="po-textual">A proposal</textual></title><para class="po-block e234 e234"><textual class="po-textual">So here is a straw-man proposal for a set of such elements and attributes:</textual><variablelist class="po-table e235 e235"><varlistentry class="po-record e236 e236"><term class="po-block e237 e237"><code class="po-atom e238 e238"><textual class="po-textual">div</textual></code><textual class="po-textual"> (division)</textual></term><listitem class="po-container e239 e239"><para class="po-block e240 e240"><textual class="po-textual">Named after </textual><code class="po-atom e241 e241"><textual class="po-textual">div</textual></code><textual class="po-textual"> in HTML and TEI. Permitted to appear anywhere a
                block may appear (like HTML </textual><code class="po-atom e242 e242"><textual class="po-textual">div</textual></code><textual class="po-textual">, more like TEI
                  </textual><code class="po-atom e243 e243"><textual class="po-textual">floatingText</textual></code><textual class="po-textual"> than TEI </textual><code class="po-atom e244 e244"><textual class="po-textual">div</textual></code><textual class="po-textual">). Unlike NLM/NISO
                  </textual><code class="po-atom e245 e245"><textual class="po-textual">sec</textual></code><textual class="po-textual">, Docbook </textual><code class="po-atom e246 e246"><textual class="po-textual">section</textual></code><textual class="po-textual"> or TEI </textual><code class="po-atom e247 e247"><textual class="po-textual">div</textual></code><textual class="po-textual">, a title is
                not required, although generic metadata may be permitted. </textual><code class="po-atom e248 e248"><textual class="po-textual">div</textual></code><textual class="po-textual"> is
                permitted to contain any block-level object, such as paragraphs, figures or tables,
                display quotes, </textual><code class="po-atom e249 e249"><textual class="po-textual">div</textual></code><textual class="po-textual"> or </textual><code class="po-atom e250 e250"><textual class="po-textual">ab</textual></code><textual class="po-textual"> elements.</textual></para><para class="po-block e251 e251"><textual class="po-textual">In general, </textual><code class="po-atom e252 e252"><textual class="po-textual">div</textual></code><textual class="po-textual"> may be expected to map to HTML </textual><code class="po-atom e253 e253"><textual class="po-textual">div</textual></code><textual class="po-textual"> or
                XSL-FO </textual><code class="po-atom e254 e254"><textual class="po-textual">fo:block</textual></code><textual class="po-textual"> for display. For conversion, given sufficient
                constraints imposed on </textual><code class="po-atom e255 e255"><textual class="po-textual">div</textual></code><textual class="po-textual"> or on attribute-qualifed families of
                  </textual><code class="po-atom e256 e256"><textual class="po-textual">div</textual></code><textual class="po-textual">, they may become TEI </textual><code class="po-atom e257 e257"><textual class="po-textual">div</textual></code><textual class="po-textual"> or
                  </textual><code class="po-atom e258 e258"><textual class="po-textual">floatingText</textual></code><textual class="po-textual">, NLM/NISO </textual><code class="po-atom e259 e259"><textual class="po-textual">sec</textual></code><textual class="po-textual">, </textual><code class="po-atom e260 e260"><textual class="po-textual">display-quote</textual></code><textual class="po-textual">,
                or </textual><code class="po-atom e261 e261"><textual class="po-textual">boxed-text</textual></code><textual class="po-textual">, Docbook </textual><code class="po-atom e262 e262"><textual class="po-textual">section</textual></code><textual class="po-textual">, </textual><code class="po-atom e263 e263"><textual class="po-textual">blockquote</textual></code><textual class="po-textual"> or
                  </textual><code class="po-atom e264 e264"><textual class="po-textual">informalTable</textual></code><textual class="po-textual">, or the like. </textual></para></listitem></varlistentry><varlistentry class="po-record e265 e265"><term class="po-block e266 e266"><code class="po-atom e267 e267"><textual class="po-textual">ab</textual></code><textual class="po-textual"> (abstract block)</textual></term><listitem class="po-container e268 e268"><para class="po-block e269 e269"><textual class="po-textual">Named after TEI </textual><code class="po-atom e270 e270"><textual class="po-textual">ab</textual></code><textual class="po-textual">, an </textual><quote class="po-inline e271 e271"><textual class="po-textual">abstract block</textual></quote><textual class="po-textual">. This element
                is an analogue for a paragraph or a list item. It is permitted to contain any mixed
                content or any block-level item (and not only the other abstract generics, but any
                inline content permitted in the host language), but it will not have its own
                metadata.</textual></para><para class="po-block e272 e272"><textual class="po-textual">For display, </textual><code class="po-atom e273 e273"><textual class="po-textual">ab</textual></code><textual class="po-textual"> will become HTML </textual><code class="po-atom e274 e274"><textual class="po-textual">div</textual></code><textual class="po-textual"> or
                </textual><code class="po-atom e275 e275"><textual class="po-textual">p</textual></code><textual class="po-textual">, or XSL-FO </textual><code class="po-atom e276 e276"><textual class="po-textual">fo:block</textual></code><textual class="po-textual">. For conversion, </textual><code class="po-atom e277 e277"><textual class="po-textual">ab</textual></code><textual class="po-textual">
                will often become a paragraph or paragraph-like object.</textual></para></listitem></varlistentry><varlistentry class="po-record e278 e278"><term class="po-block e279 e279"><code class="po-atom e280 e280"><textual class="po-textual">ap</textual></code><textual class="po-textual">, </textual><code class="po-atom e281 e281"><textual class="po-textual">pair</textual></code><textual class="po-textual"> (abstract pairing, pair)</textual></term><listitem class="po-container e282 e282"><para class="po-block e283 e283"><code class="po-atom e284 e284"><textual class="po-textual">ap</textual></code><textual class="po-textual"> or </textual><quote class="po-inline e285 e285"><textual class="po-textual">abstract pairing</textual></quote><textual class="po-textual">, along with
                </textual><code class="po-atom e286 e286"><textual class="po-textual">pair</textual></code><textual class="po-textual">, can serve to represent all kinds of labeled lists, paired lists
                such as glossaries, definition lists and indexes. Such a generic element does not
                carry the semantic baggage of any particular kind of list or associated array, all
                of which are especially liable to tag abuse in the wild.</textual></para><para class="po-block e287 e287"><code class="po-atom e288 e288"><textual class="po-textual">pair</textual></code><textual class="po-textual"> could be validated as </textual><code class="po-atom e289 e289"><textual class="po-textual">((ab | line | span), (ab | line |
                  span))</textual></code><textual class="po-textual"> in order to enforce the pairings. (Additionally, RelaxNG or
                Schematron could validate </textual><code class="po-atom e290 e290"><textual class="po-textual">ap</textual></code><textual class="po-textual"> to see that every enclosed
                  </textual><code class="po-atom e291 e291"><textual class="po-textual">pair</textual></code><textual class="po-textual"> has the same content model.) Of course, any of these constituent
                elements could be qualified with </textual><code class="po-atom e292 e292"><textual class="po-textual">@class</textual></code><textual class="po-textual"> or </textual><code class="po-atom e293 e293"><textual class="po-textual">@type</textual></code><textual class="po-textual"> of their
                own (which might similarly be validated across pairs within an
                </textual><code class="po-atom e294 e294"><textual class="po-textual">ap</textual></code><textual class="po-textual">).</textual></para><para class="po-block e295 e295"><textual class="po-textual">Both </textual><code class="po-atom e296 e296"><textual class="po-textual">ap</textual></code><textual class="po-textual"> and </textual><code class="po-atom e297 e297"><textual class="po-textual">pair</textual></code><textual class="po-textual"> will also become </textual><code class="po-atom e298 e298"><textual class="po-textual">div</textual></code><textual class="po-textual"> or
                  </textual><code class="po-atom e299 e299"><textual class="po-textual">p</textual></code><textual class="po-textual"> in HTML and </textual><code class="po-atom e300 e300"><textual class="po-textual">fo:block</textual></code><textual class="po-textual"> in FO, when they do not map
                directly to especially formatted lists (</textual><code class="po-atom e301 e301"><textual class="po-textual">ul</textual></code><textual class="po-textual">, </textual><code class="po-atom e302 e302"><textual class="po-textual">ol</textual></code><textual class="po-textual">,
                  </textual><code class="po-atom e303 e303"><textual class="po-textual">dl</textual></code><textual class="po-textual"> with </textual><code class="po-atom e304 e304"><textual class="po-textual">li</textual></code><textual class="po-textual">, </textual><code class="po-atom e305 e305"><textual class="po-textual">fo:list-block</textual></code><textual class="po-textual"> with
                  </textual><code class="po-atom e306 e306"><textual class="po-textual">fo:list-item</textual></code><textual class="po-textual">), or even to tables.</textual></para><para class="po-block e307 e307"><textual class="po-textual">And </textual><code class="po-atom e308 e308"><textual class="po-textual">pair</textual></code><textual class="po-textual"> might additionally be allowed to appear anywhere
                  </textual><code class="po-atom e309 e309"><textual class="po-textual">ab</textual></code><textual class="po-textual">, </textual><code class="po-atom e310 e310"><textual class="po-textual">line</textual></code><textual class="po-textual">, or any block-level element appears – or
                even (at any rate when it contains only </textual><code class="po-atom e311 e311"><textual class="po-textual">span</textual></code><textual class="po-textual"> elements) in line, as a
                proxy for structures such as TEI </textual><code class="po-atom e312 e312"><textual class="po-textual">choice</textual></code><textual class="po-textual">.</textual></para></listitem></varlistentry><varlistentry class="po-record e313 e313"><term class="po-block e314 e314"><code class="po-atom e315 e315"><textual class="po-textual">line</textual></code></term><listitem class="po-container e316 e316"><para class="po-block e317 e317"><textual class="po-textual">A </textual><code class="po-atom e318 e318"><textual class="po-textual">line</textual></code><textual class="po-textual"> element is a block that may contain inline elements, but not
                other block elements. This is much like TEI </textual><code class="po-atom e319 e319"><textual class="po-textual">l</textual></code><textual class="po-textual">, except that
                  </textual><code class="po-atom e320 e320"><textual class="po-textual">l</textual></code><textual class="po-textual"> is restricted in TEI usage to lines of verse or poetry, and this
                element should be available for any use, any time a new line is required. (It should
                not preclude an element for a line break in tag sets that need it.)</textual></para><para class="po-block e321 e321"><textual class="po-textual">Like </textual><code class="po-atom e322 e322"><textual class="po-textual">ab</textual></code><textual class="po-textual">, </textual><code class="po-atom e323 e323"><textual class="po-textual">line</textual></code><textual class="po-textual"> will usually become </textual><code class="po-atom e324 e324"><textual class="po-textual">div</textual></code><textual class="po-textual"> or
                  </textual><code class="po-atom e325 e325"><textual class="po-textual">p</textual></code><textual class="po-textual"> in HTML, although not necessarily with vertical white space; and
                its indenting may vary. Occasionally, sequences of </textual><code class="po-atom e326 e326"><textual class="po-textual">line</textual></code><textual class="po-textual"> elements within
                a </textual><code class="po-atom e327 e327"><textual class="po-textual">div</textual></code><textual class="po-textual"> (and without other siblings) may map to </textual><code class="po-atom e328 e328"><textual class="po-textual">dl/dt</textual></code><textual class="po-textual"> or
                  </textual><code class="po-atom e329 e329"><textual class="po-textual">ul/li</textual></code><textual class="po-textual">, as a simple (unmarked) list item. In XSL-FO, </textual><code class="po-atom e330 e330"><textual class="po-textual">line</textual></code><textual class="po-textual">
                will become </textual><code class="po-atom e331 e331"><textual class="po-textual">fo:block</textual></code><textual class="po-textual">.</textual></para><para class="po-block e332 e332"><textual class="po-textual">For modeling purposes, we could use </textual><code class="po-atom e333 e333"><textual class="po-textual">ab</textual></code><textual class="po-textual"> everywhere we might want
                this element; but </textual><code class="po-atom e334 e334"><textual class="po-textual">line</textual></code><textual class="po-textual"> may feel more appropriate than </textual><code class="po-atom e335 e335"><textual class="po-textual">ab</textual></code><textual class="po-textual">
                for isolable units of text such as headings or titles; and because it cannot contain
                block structures (such as </textual><code class="po-atom e336 e336"><textual class="po-textual">ab</textual></code><textual class="po-textual">), it also comes with a useful constraint
                for conversion and formatting.</textual></para></listitem></varlistentry><varlistentry class="po-record e337 e337"><term class="po-block e338 e338"><code class="po-atom e339 e339"><textual class="po-textual">span</textual></code></term><listitem class="po-container e340 e340"><para class="po-block e341 e341"><textual class="po-textual">Of course, this is the inline object, analogous to HTML </textual><code class="po-atom e342 e342"><textual class="po-textual">span</textual></code><textual class="po-textual">, TEI
                  </textual><code class="po-atom e343 e343"><textual class="po-textual">seg</textual></code><textual class="po-textual">, Docbook </textual><code class="po-atom e344 e344"><textual class="po-textual">phrase</textual></code><textual class="po-textual"> and NLM/NISO
                  </textual><code class="po-atom e345 e345"><textual class="po-textual">named-content</textual></code><textual class="po-textual">. For display, </textual><code class="po-atom e346 e346"><textual class="po-textual">span</textual></code><textual class="po-textual"> would generally become
                  </textual><code class="po-atom e347 e347"><textual class="po-textual">fo:inline</textual></code><textual class="po-textual"> or HTML </textual><code class="po-atom e348 e348"><textual class="po-textual">span</textual></code><textual class="po-textual">, when not a more specific inline
                element. Similarly, in conversion, given suitable qualification, a </textual><code class="po-atom e349 e349"><textual class="po-textual">span</textual></code><textual class="po-textual">
                might map to any inline element in the target language. Given sufficient control, a
                sequence of </textual><code class="po-atom e350 e350"><textual class="po-textual">span</textual></code><textual class="po-textual"> elements within a </textual><code class="po-atom e351 e351"><textual class="po-textual">line</textual></code><textual class="po-textual"> or </textual><code class="po-atom e352 e352"><textual class="po-textual">ab</textual></code><textual class="po-textual">
                enclosed in a </textual><code class="po-atom e353 e353"><textual class="po-textual">div</textual></code><textual class="po-textual"> may sometimes become table cells in a table. </textual></para></listitem></varlistentry><varlistentry class="po-record e354 e354"><term class="po-block e355 e355"><code class="po-atom e356 e356"><textual class="po-textual">link</textual></code></term><listitem class="po-container e357 e357"><para class="po-block e358 e358"><textual class="po-textual">Analogous to general-purpose inline linking elements. We might simply allow the
                full panoply of XLink attributes on this element to make it a general-purpose
                element suitable for arbitrary linking.</textual></para><para class="po-block e359 e359"><textual class="po-textual">As noted above, images and other media objects are really special-purpose links
                (which may imply transclusion of their targets on rendering), so they can be
                accommodated by </textual><code class="po-atom e360 e360"><textual class="po-textual">link</textual></code><textual class="po-textual">.</textual></para></listitem></varlistentry><varlistentry class="po-record e361 e361"><term class="po-block e362 e362"><code class="po-atom e363 e363"><textual class="po-textual">@type</textual></code></term><listitem class="po-container e364 e364"><para class="po-block e365 e365"><textual class="po-textual">Let </textual><code class="po-atom e366 e366"><textual class="po-textual">@type</textual></code><textual class="po-textual"> assert (implicitly and when possible explicitly, by means
                of documentation) a class or type assignment whose value is controlled across a
                document collection.</textual></para><para class="po-block e367 e367"><textual class="po-textual">Multiple values of @type can be provided as space-delimited values of this
                attribute. Explicit mappings to known tag sets, such as </textual><code class="po-atom e368 e368"><textual class="po-textual">docbook:para</textual></code><textual class="po-textual">,
                  </textual><code class="po-atom e369 e369"><textual class="po-textual">tei:p</textual></code><textual class="po-textual">, </textual><code class="po-atom e370 e370"><textual class="po-textual">html:p</textual></code><textual class="po-textual"> and so forth might be provided by using
                the namespace-qualified type names of appropriate elements.</textual></para></listitem></varlistentry><varlistentry class="po-record e371 e371"><term class="po-block e372 e372"><code class="po-atom e373 e373"><textual class="po-textual">@class</textual></code></term><listitem class="po-container e374 e374"><para class="po-block e375 e375"><textual class="po-textual">Let </textual><code class="po-atom e376 e376"><textual class="po-textual">@class</textual></code><textual class="po-textual"> identify subtypes of elements within a single document
                instance, in a more ad hoc way than does </textual><code class="po-atom e377 e377"><textual class="po-textual">@type</textual></code><textual class="po-textual">. The expectation would
                be that when </textual><code class="po-atom e378 e378"><textual class="po-textual">@type</textual></code><textual class="po-textual"> is also present, </textual><code class="po-atom e379 e379"><textual class="po-textual">@class</textual></code><textual class="po-textual"> offers a
                subtype. Like </textual><code class="po-atom e380 e380"><textual class="po-textual">@type</textual></code><textual class="po-textual">, and like </textual><code class="po-atom e381 e381"><textual class="po-textual">@class</textual></code><textual class="po-textual"> in HTML (where it
                provides bindings for CSS selectors), multiple values can be provided with space
                delimiters.</textual></para><para class="po-block e382 e382"><textual class="po-textual">Of course, the distinction offered here between </textual><code class="po-atom e383 e383"><textual class="po-textual">@type</textual></code><textual class="po-textual"> and
                  </textual><code class="po-atom e384 e384"><textual class="po-textual">@class</textual></code><textual class="po-textual"> is not absolute nor even enforceable in the general case. It
                is up to particular systems and implementations of abstract generic elements to
                enforce the constraints over these attributes they need. Offering both allows a
                local system to constrain </textual><code class="po-atom e385 e385"><textual class="po-textual">@type</textual></code><textual class="po-textual">, for example, while leaving
                  </textual><code class="po-atom e386 e386"><textual class="po-textual">@class</textual></code><textual class="po-textual"> free for use.</textual></para></listitem></varlistentry><varlistentry class="po-record e387 e387"><term class="po-block e388 e388"><code class="po-atom e389 e389"><textual class="po-textual">@which</textual></code></term><listitem class="po-container e390 e390"><para class="po-block e391 e391"><code class="po-atom e392 e392"><textual class="po-textual">@which</textual></code><textual class="po-textual"> is intended to serve as a general-purpose pointer, either to
                another element or to an implicit or explicit taxonomy, local or general. Its
                lexical form is unconstrained, and it may have as many values as a local application
                may need.</textual></para><para class="po-block e393 e393"><textual class="po-textual">For example, in an abstract rendition of information intended to be represented in
              tabular form, a single value given to two or more places (to be rendered as spanning
              cells) might show its multiple placement using </textual><code class="po-atom e394 e394"><textual class="po-textual">@which</textual></code><textual class="po-textual">.</textual></para></listitem></varlistentry><varlistentry class="po-record e395 e395"><term class="po-block e396 e396"><code class="po-atom e397 e397"><textual class="po-textual">@xml:id</textual></code></term><listitem class="po-container e398 e398"><para class="po-block e399 e399"><textual class="po-textual">For generalized purposes of cross-reference, we will potentially need a unique
              identifier for any element.</textual></para></listitem></varlistentry><varlistentry class="po-record e400 e400"><term class="po-block e401 e401"><code class="po-atom e402 e402"><textual class="po-textual">@style</textual></code></term><listitem class="po-container e403 e403"><para class="po-block e404 e404"><textual class="po-textual">Finally, I suggest we allow any of the abstract generic elements to include
              explicit styling information, in the form of a widely recognized syntax such as CSS3.
              Of course, this clearly breaches the content/format divide, but it does so in a
              strategic way. By allowing this attribute on the abstract generics, we relieve the
              design stress on other elements in the markup language to provide their own styling
              overrides – the fact that a name, say, needs specialized styling by itself
              suggests it is a special kind of name and might be described with an abstract
              generic.</textual></para><para class="po-block e405 e405"><textual class="po-textual">It should be noted that a number of industry-standard schemas for documents
                allow this kind of thing already, either as an escape hatch on a few elements, or on
                a wider basis. Indeed, TEI P5 has </textual><emphasis class="po-inline e406 e406" role="ital"><textual class="po-textual">two</textual></emphasis><textual class="po-textual"> attributes
                with the sole purpose of specifying rendition, namely </textual><code class="po-atom e407 e407"><textual class="po-textual">@rend</textual></code><textual class="po-textual"> and
                  </textual><code class="po-atom e408 e408"><textual class="po-textual">@rendition</textual></code><textual class="po-textual">. (</textual><code class="po-atom e409 e409"><textual class="po-textual">@rendition</textual></code><textual class="po-textual"> is supposed to carry CSS while
                  </textual><code class="po-atom e410 e410"><textual class="po-textual">@rend</textual></code><textual class="po-textual"> is more free-form.) And at least one of the NLM/NISO tag sets
                similarly permits an inline element called </textual><code class="po-atom e411 e411"><textual class="po-textual">styled-content</textual></code><textual class="po-textual">.</textual></para><para class="po-block e412 e412"><textual class="po-textual">Some purist systems might choose to ignore this attribute, to deprecate its use
              and validate against it, and/or to recognize patterns of usage and promote the
              elements that show them into other representations of the information they
              carry.</textual></para></listitem></varlistentry></variablelist></para><para class="po-block e413 e413"><textual class="po-textual">It is important to stress that this element set would be intended to supplement, not
        replace, the basic core elements of a capable document-oriented tag set – although it
        is also conceivable that a valid (and useful) document might contain nothing but these
        element types.</textual></para><para class="po-block e414 e414"><textual class="po-textual">One limitation of abstract generic elements is if they cannot be provided with arbitrary
        attributes. How severe an encumbrance this would on the general use of abstract generics for
        ordinary purposes can only be known by trying it.</textual></para><para class="po-block e415 e415"><textual class="po-textual">But at least two possible workarounds can be imagined: (1) where attributes are needed
        to provide subclassing, either or both the </textual><code class="po-atom e416 e416"><textual class="po-textual">@class</textual></code><textual class="po-textual"> or </textual><code class="po-atom e417 e417"><textual class="po-textual">@type</textual></code><textual class="po-textual">
        assignment of the abstract generic can be overloaded. (2) In general, child elements or
        element structures can be recruited for use to carry values that might otherwise be given in
        attributes.</textual></para></section><section class="po-hcontainer e418 e418"><title class="po-block e419 e419"><textual class="po-textual">An example: an approach to drama</textual></title><para class="po-block e420 e420"><textual class="po-textual">An example in TEI markup:</textual></para><programlisting class="po-block e421 e421" xml:space="preserve"><textual class="po-textual">&lt;stage&gt;Enter EGEUS, HERMIA, LYSANDER, and DEMETRIUS&lt;/stage&gt;
&lt;sp&gt;
  &lt;speaker&gt;EGEUS&lt;/speaker&gt;
  &lt;l&gt;Happy be Theseus, our renowned duke!&lt;/l&gt;
&lt;/sp&gt;
&lt;sp&gt;
  &lt;speaker&gt;THESEUS&lt;/speaker&gt;
  &lt;l&gt;Thanks, good Egeus: what's the news with thee?&lt;/l&gt;
&lt;/sp&gt;
&lt;sp&gt;
  &lt;speaker&gt;EGEUS&lt;/speaker&gt;
  &lt;l&gt;Full of vexation come I, with complaint&lt;/l&gt;
  &lt;l&gt;Against my child, my daughter Hermia....&lt;/l&gt;
&lt;/sp&gt;</textual></programlisting><para class="po-block e422 e422"><textual class="po-textual">The same example could be tagged as follows in a schema that supported abstract generic
        elements:</textual></para><programlisting class="po-block e423 e423" xml:space="preserve"><textual class="po-textual">&lt;div type="drama"&gt;
&lt;line type="stage"&gt;Enter EGEUS, HERMIA, LYSANDER, and DEMETRIUS&lt;/line&gt;
&lt;pair type="sp"&gt;
  &lt;line type="speaker"&gt;EGEUS&lt;/line&gt;
  &lt;ab type="speech"&gt;
    &lt;line&gt;Happy be Theseus, our renowned duke!&lt;/line&gt;
  &lt;/ab&gt;
&lt;/pair&gt;
&lt;pair type="sp"&gt;
  &lt;line type="speaker"&gt;THESEUS&lt;/line&gt;
  &lt;ab type="speech"&gt;
    &lt;line&gt;Thanks, good Egeus: what's the news with thee?&lt;/line&gt;
  &lt;/ab&gt;
&lt;/pair&gt;
&lt;pair type="sp"&gt;
  &lt;line type="speaker"&gt;EGEUS&lt;/line&gt;
  &lt;ab type="speech"&gt;
    &lt;line&gt;Full of vexation come I, with complaint&lt;/line&gt;
    &lt;line&gt;Against my child, my daughter Hermia....&lt;/line&gt;
  &lt;/ab&gt;
&lt;/pair&gt;
&lt;/div&gt;</textual></programlisting><para class="po-block e424 e424"><textual class="po-textual">It is important to note here that stylesheets or display engines that don't know what to
        do with these attributes could nevertheless do something reasonable with the elements. For
        processes that need the more specific semantics, they are available – as they are
        available to be validated using Schematron or by way of a transformation into a more tightly
        defined schema.</textual></para><note class="po-container e425 e425"><para class="po-block e426 e426"><textual class="po-textual">A more fully worked example, with stylesheets for display, is provided as a
          demonstration with the Slides and Materials attached to this paper.</textual></para></note></section></section><section class="po-hcontainer e427 e427"><title class="po-block e428 e428"><textual class="po-textual">Issues and ideas</textual></title><para class="po-block e429 e429"><textual class="po-textual">Let's say we proceed to implement a small tag set of this sort and integrate it into a
      known schema (or perhaps better, a relatively lightweight subset of one). What issues and
      objections might be raised against this design idea? What questions remain as to how to
      engineer and deploy such a system, and what do we have to know before we can answer them? What
      problems can we expect if it should be widely used, and what opportunities might it
      present?</textual></para><section class="po-hcontainer e430 e430"><title class="po-block e431 e431"><textual class="po-textual">Merging with a host language: tight or loose?</textual></title><para class="po-block e432 e432"><textual class="po-textual">At least two different ways of integrating a set of abstract generics with a host
        language can be considered:</textual></para><variablelist class="po-table e433 e433"><varlistentry class="po-record e434 e434"><term class="po-block e435 e435"><textual class="po-textual">Tight</textual></term><listitem class="po-container e436 e436"><para class="po-block e437 e437"><textual class="po-textual">Since most host languages already have families of elements in their architecture
              corresponding to the different abstract generics – section-level, block-level,
              and inline – it should in most cases be relatively straightforward to integrate
              the abstract generics into them.</textual></para><para class="po-block e438 e438"><textual class="po-textual">In this design, an abstract generic </textual><code class="po-atom e439 e439"><textual class="po-textual">div</textual></code><textual class="po-textual"> element, say, could contain
              the host language's own block-level elements along with the generic </textual><code class="po-atom e440 e440"><textual class="po-textual">div</textual></code><textual class="po-textual">,
                </textual><code class="po-atom e441 e441"><textual class="po-textual">ab</textual></code><textual class="po-textual">, </textual><code class="po-atom e442 e442"><textual class="po-textual">ap</textual></code><textual class="po-textual"> and </textual><code class="po-atom e443 e443"><textual class="po-textual">line</textual></code><textual class="po-textual">. The advantage here is that
              the stronger semantics of elements from the host language will be available to the
              contents of the abstract generics.</textual></para><para class="po-block e444 e444"><textual class="po-textual">Of course, a system that does this would need abstract generic elements and
              attributes consistent with the semantics of other element and attribute types in the
              host language.</textual></para></listitem></varlistentry><varlistentry class="po-record e445 e445"><term class="po-block e446 e446"><textual class="po-textual">Loose</textual></term><listitem class="po-container e447 e447"><para class="po-block e448 e448"><textual class="po-textual">It is also tempting to consider deploying abstract generics as a relatively
              discrete set of tags, whose use would provide a clean </textual><quote class="po-inline e449 e449"><textual class="po-textual">escape hatch</textual></quote><textual class="po-textual"> from
              a host language, in a way more or less entirely divorced from it.</textual></para><para class="po-block e450 e450"><textual class="po-textual">The way to do this would be to restrict the content of the abstract generics to
              other abstract generics. The abstract </textual><code class="po-atom e451 e451"><textual class="po-textual">span</textual></code><textual class="po-textual">, for example, would contain
              only text and/or the abstract </textual><code class="po-atom e452 e452"><textual class="po-textual">span</textual></code><textual class="po-textual">, without permitting any inline
              elements from the host language.</textual></para><para class="po-block e453 e453"><textual class="po-textual">The advantages of doing this would be that it would simplify deployment, and that
              subtrees of abstract generics would be readily portable without modification.</textual></para><para class="po-block e454 e454"><textual class="po-textual">A family of abstract generics designed to work like this could be given its own
              namespace, allowing it to be integrated into more than one host language.</textual></para></listitem></varlistentry></variablelist><para class="po-block e455 e455"><textual class="po-textual">It seems reasonable to suppose that both these approaches could be useful for different
        reasons and in different contexts.</textual></para></section><section class="po-hcontainer e456 e456"><title class="po-block e457 e457"><textual class="po-textual">Validation and validibility</textual></title><para class="po-block e458 e458"><textual class="po-textual">Introducing custom semantics in a secondary layer using attribute values raises the
        problem of how to validate them. Obvious alternatives for validation of microformats include
        RelaxNG and Schematron. Additionally, transformation pipelines can be used to formalize the
        relation between a microformat defined using abstract generic elements, and more tightly
        defined elements in target markup languages.</textual></para><variablelist class="po-table e459 e459"><varlistentry class="po-record e460 e460"><term class="po-block e461 e461"><textual class="po-textual">RelaxNG</textual></term><listitem class="po-container e462 e462"><para class="po-block e463 e463"><textual class="po-textual">As demonstrated in </textual><xref class="po-milestone e464 e464" linkend="clark2003"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> (section 15: Non-restrictions),
              RelaxNG can be used to specify microformats by asserting attribute bindings along with
              element types.</textual></para></listitem></varlistentry><varlistentry class="po-record e465 e465"><term class="po-block e466 e466"><textual class="po-textual">Schematron</textual></term><listitem class="po-container e467 e467"><para class="po-block e468 e468"><textual class="po-textual">As it is based on XPath, which can freely interrogate and test attribute values,
              Schematron is well-suited for testing the kinds of complex co-occurrences to be
              expected between attribute values in the semantic layer, as a supplement to or
              replacement for RelaxNG.</textual></para></listitem></varlistentry><varlistentry class="po-record e469 e469"><term class="po-block e470 e470"><textual class="po-textual">Pipelines</textual></term><listitem class="po-container e471 e471"><para class="po-block e472 e472"><textual class="po-textual">Another strategy for validation will be to map microformats into more highly
              controlled target formats for validation. XProc pipelines provide a capable framework
              for this: an XSLT transformation can convert an instance containing microformats into
              one in which they are expressed more formally, and validated by traditional means.
              While this approach will not, ordinarily, provide much in the way of useful feedback
              when data in a microformat is invalid (since it will not found to be invalid until
              after conversion into something different), this could nonetheless be a useful way of
              validating the design of a microformat intended as a </textual><quote class="po-inline e473 e473"><textual class="po-textual">mirror</textual></quote><textual class="po-textual"> of a target
              format whose semantics are expressed in element types.</textual></para></listitem></varlistentry></variablelist><para class="po-block e474 e474"><textual class="po-textual">Of possibly greater importance, however, than the means of validation, might be the
        shift in emphasis on stages of validation necessitated by the presence of abstract generics
        in the model – since the very idea is to relax both the demand and the expectation for
        uniformity and consistency of element usage across system boundaries. Validation will no
        longer, in other words, be as simple as thumbs-up vs thumbs-down against a common schema,
        but will also entail more nuanced specifications and tests.</textual></para></section><section class="po-hcontainer e475 e475"><title class="po-block e476 e476"><textual class="po-textual">Interchange and interoperability</textual></title><para class="po-block e477 e477"><textual class="po-textual">Isn't this an invitation to chaos, as users are encouraged to introduce their own
        idiosyncratic usages of the abstract generic elements?</textual></para><para class="po-block e478 e478"><textual class="po-textual">Whether allowing microformats based on abstract generic elements would in fact make it
        harder than it presently is to achieve interoperability or even interchange across
        organizational boundaries depends on what we take that baseline to be. To the extent that
        stronger typing of schema-validated element types now supports interchange, obviously to
        rely on labeling abstract generics to assert the same semantics in the instance would be a
        step backwards. However, it should be considered whether experience has not shown that
        beyond a very basic level (hardly beyond the level of XML well-formedness), interchange
        cannot be guaranteed by schema validation alone in any case, at least for properly </textual><emphasis class="po-inline e479 e479" role="ital"><textual class="po-textual">descriptive</textual></emphasis><textual class="po-textual"> markup languages, not markup applications that are
        essentially serializations of object models bound to applications (such as XSL-FO or SVG).</textual><footnote class="po-popup e480 e480"><para class="po-block e481 e481"><textual class="po-textual">See in particular </textual><xref class="po-milestone e482 e482" linkend="Bauman2011"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and </textual><xref class="po-milestone e483 e483" linkend="Kimber2011"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> on
            this topic. Also see </textual><xref class="po-milestone e484 e484" linkend="piez2001"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> for more on the distinction between
            descriptive tagging and applications of markup to application-centric data
            modeling.</textual></para></footnote></para><para class="po-block e485 e485"><textual class="po-textual">There is, in other words, a difference between the mythic ideal of interchange, and the
        actual fact of it; and in fact, when it is achieved at all, data interchange at scale
        happens as a deliberate outcome of a negotiated process, in which a shared tag set may be a
        useful starting point, but will not by itself be a guarantor of success. It might be better
        if we considered transparent or </textual><quote class="po-inline e486 e486"><textual class="po-textual">blind</textual></quote><textual class="po-textual"> interchange to be a functional
        requirement to be considered among others – and considered in its particulars as they
        apply to specific parties to interchange rather than simply asserted as an abstract
        principle that remains unrealized. Doing so would mean that we would be free not only to
        consider the actual costs and benefits of achieving interchange, but also to balance this
        requirement against others, such as the need for expressiveness and adaptability simply so a
        tag set can address local goals that are, after all, sometimes more pressing.</textual></para><para class="po-block e487 e487"><textual class="po-textual">In view of this, allowing document creators and editors the means to extend the
        semantics of their markup openly would be better than the status quo, in which they do this
        anyway, but hide their practices behind the premises of interchange offered by standard
        semantic tagging. When standard semantic tagging is used in non-standard ways, in other
        words, it is not standard any more. This is why we call it </textual><quote class="po-inline e488 e488"><textual class="po-textual">tag abuse</textual></quote><textual class="po-textual">, because
        such practice not only mislabels the contents with elements designed for other purposes; it
        also degrades the semantics of the misused element type even where it is used
        properly.</textual></para><para class="po-block e489 e489"><textual class="po-textual">Since abstract generic elements are designed to accommodate the very behaviors that
        constitute abuse when used on properly descriptive elements, they would (at least to the
        extent they are used) should relieve the pressure to do so. And to the extent problems with
        interchange and interoperability will exist across systems that use the abstract generics
        differently, it is reasonable to wonder whether it does not actually reflect the
        requirements for description itself, which would otherwise have been hidden behind
          </textual><quote class="po-inline e490 e490"><textual class="po-textual">creative</textual></quote><textual class="po-textual"> tag use and misuse. That is, to the extent a system uses abstract
        elements instead of abusing other elements, its tag usage will be more open and transparent
        – while the abstract generics provide a base level of interoperability even without
        any implementation of their local semantics.</textual></para><para class="po-block e491 e491"><textual class="po-textual">Thus, when parties to interchange find that they don't know how to handle the semantics
        of one another's abstract generics, they will have a basis for identifying, isolating and
        analyzing the issues. Already, markup systems engineers who are not deploying their own
        schemas or schema customizations are doing this all the time, and successfully, with HTML.
        (The success does not come without effort; the point is that it is possible at all.) To
        introduce abstract generic elements and encourage the development of microformats on that
        basis would not be to license bad behavior so much as it is to adopt and appropriate the
        good motivations that might, under too strict a regiment, lead to it.</textual></para></section><section class="po-hcontainer e492 e492"><title class="po-block e493 e493"><textual class="po-textual">Addressing production workflow concerns</textual></title><para class="po-block e494 e494"><textual class="po-textual">One of the virtues of abstract generic elements with microformatting is that it fits
        well within a production model in which XML encoding happens later, after authors and
        designers have made commitments to structures in their content that serve expressive and
        rhetorical purposes rather than the goals of any technology as such. In other words, if a
        tag set is to be a suitable target format for upconversion of arbitrary content (such as is
        produced in word processors or derived by OCR from page images), it needs to be arbitrarily
        flexible, if only to capture structures at the edges of </textual><quote class="po-inline e495 e495"><textual class="po-textual">normal</textual></quote><textual class="po-textual">. Then too (and
        for the same reason), most authors who have worked in XML have also had to confront limits
        in the expressiveness of the tag set in use, and would welcome an opportunity to use more
        abstract tagging, with attributes to signal semantics for possible application downstream,
        when the situation warrants it.</textual></para><para class="po-block e496 e496"><textual class="po-textual">Yet both these scenarios raise the question of what should happen in a production system
        when these elements are encountered: clearly, these capabilities are somewhat at odds with
        processing requirements, since to </textual><quote class="po-inline e497 e497"><textual class="po-textual">hide</textual></quote><textual class="po-textual"> semantics in attributes is in no way
        the same as extending an application framework to support them. Yet (as noted above) there
        is a great advantage in having a set of elements designated especially for this purpose, as
        opposed to the present state of affairs, in which this already happens, but in a way much
        less amenable to improvement, because the elements being appropriated are already designated
        for other purposes.</textual></para><para class="po-block e498 e498"><textual class="po-textual">Again, layered validation, where only the basic structures are validated in the core
        schema, and supplementary validation logic is provided elsewhere (in schemas, Schematron,
        XSLT or custom logic), provides a way to negotiate the challenges here. The abstract generic
        elements are already provided with a baseline of functionality by virtue of their mappings
        to common display types. Provide for alerts in the system when unknown labels or
        combinations are used, and developers can then address them more specifically, whether by
        extending processing, retagging, or pushing the questions they raise back for editorial
        consideration.</textual></para></section><section class="po-hcontainer e499 e499"><title class="po-block e500 e500"><textual class="po-textual">Microformats as a driver for evolutionary change</textual></title><para class="po-block e501 e501"><textual class="po-textual">A set of abstract generic elements can offer a way for users to mark up structures of
        arbitrary description and complexity as they are encountered. But if this concept works in
        the field, it will be due to the willingness of users and application developers to work to
        support it. Is half a loaf really better than none?</textual></para><para class="po-block e502 e502"><textual class="po-textual">Experience with HTML shows that local users are able, and eager, to take good advantage
        of such capabilities, given the right level of support by generic tools. Furthermore, this
        reservation has its counter-argument built into it: anything that rewards users for taking
        such responsibility – confronting practical issues of schema design and document
        modeling and getting hands-on experience with transformations – will be a good
        thing.</textual></para><para class="po-block e503 e503"><textual class="po-textual">While good design is accomplished by design, markup technologies do not develop in a
        technological or cultural vacuum, and no design can foresee exactly the ways in which it can
        be put to use. In this kind of world, we can rely also on evolutionary mechanisms –
        selecting and promulgating the most successful from among those attempted – to help us
        distinguish the best available solutions to any set of problems. But this requires
        alternatives from which we can select.</textual></para><para class="po-block e504 e504"><textual class="po-textual">In a widely deployed tag set, variations in tagging practices are certain to occur; and
        in an environment in which many different approaches can be tried, some will persist and
        spread. While including a set of abstract generic elements will make any tag set better
        fitted for use across a disparate community, the argument for fitness does not end with
        this. Abstract generic elements may also serve as useful laboratories for tagging practice;
        and on this basis, common microformats for common kinds of data and common markup problems
        may emerge, and even micro-standards, perhaps, maintained much like the core standards
        although across more localized application domains within and across organizations.</textual></para><para class="po-block e505 e505"><textual class="po-textual">It should be stressed that the aim here is to serve bottom-up as well as top-down design
        for XML applications in use – not because XML schemas don't work, but because they do.
        Precisely </textual><emphasis class="po-inline e506 e506" role="ital"><textual class="po-textual">because</textual></emphasis><textual class="po-textual">, and insofar as, communities are able to
        take advantage of shared practices and tools, the needs of authors, editors and publishers
        to design their own models will continue to be felt. Giving them the means to do this will
        enable and empower them, while maintaining the integrity of the community standards they
        share.</textual></para></section></section><bibliography class="po-hcontainer e507 e507"><title class="po-block e508 e508"><textual class="po-textual">References</textual></title><bibliomixed class="po-block e509 e509"><textual class="po-textual">Beer, Stafford. </textual><emphasis class="po-inline e510 e510" role="ital"><textual class="po-textual">Platform for change: A message from Stafford
      Beer.</textual></emphasis><textual class="po-textual"> New York: John Wiley and Sons, 1975.</textual></bibliomixed><bibliomixed class="po-block e511 e511" xml:id="Bauman2011" xreflabel="Bauman 2011"><textual class="po-textual">Bauman, Syd. “Interchange vs.
      Interoperability.” Presented at Balisage: The Markup Conference 2011, Montréal, Canada, August
      2 - 5, 2011. In </textual><emphasis class="po-inline e512 e512" role="ital"><textual class="po-textual">Proceedings of Balisage: The Markup Conference
        2011</textual></emphasis><textual class="po-textual">. Balisage Series on Markup Technologies, vol. 7 (2011). doi:</textual><biblioid class="po-atom e513 doi e513"><textual class="po-textual">10.4242/BalisageVol7.Bauman01</textual></biblioid><textual class="po-textual">. At
        </textual><link class="po-inline e514 e514" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://balisage.net/Proceedings/vol7/html/Bauman01/BalisageVol7-Bauman01.html</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e515 e515" xml:id="birnbaum2007" xreflabel="Birnbaum 2007"><textual class="po-textual">Birnbaum, David J. </textual><quote class="po-inline e516 e516"><textual class="po-textual">Sometimes
        a table is only a table: And sometimes a row is a column</textual></quote><textual class="po-textual">.  </textual><emphasis class="po-inline e517 e517" role="ital"><textual class="po-textual">Proceedings of Extreme Markup Languages 2007</textual></emphasis><textual class="po-textual">. See
        </textual><link class="po-inline e518 e518" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://conferences.idealliance.org/extreme/html/2007/Birnbaum01/EML2007Birnbaum01.html</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e519 e519"><textual class="po-textual">Carlyle, Thomas. </textual><emphasis class="po-inline e520 e520" role="ital"><textual class="po-textual">Sartor Resartus</textual></emphasis><textual class="po-textual">. Second edition.
      Boston: James Munroe and co., 1834.</textual></bibliomixed><bibliomixed class="po-block e521 e521" xml:id="clark2003" xreflabel="Clark, Cowan and Murata 2003"><textual class="po-textual">Clark, James, John
      Cowan and Murata Makoto. 2003. </textual><emphasis class="po-inline e522 e522" role="ital"><textual class="po-textual">RELAX NG Compact Syntax
        Tutorial</textual></emphasis><textual class="po-textual">
      </textual><link class="po-inline e523 e523" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://relaxng.org/compact-tutorial-20030326.html</textual></link></bibliomixed><bibliomixed class="po-block e524 e524"><textual class="po-textual">Docbook. </textual><link class="po-inline e525 e525" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.docbook.org/</textual></link></bibliomixed><bibliomixed class="po-block e526 e526"><textual class="po-textual">Hillesund, Terje.</textual><quote class="po-inline e527 e527"><textual class="po-textual">Many Outputs — Many Inputs: XML for Publishers and E-book
      Designers</textual></quote><textual class="po-textual">. Journal of Digital Information, Vol 3, No 1 (2002).
      </textual><link class="po-inline e528 e528" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://journals.tdl.org/jodi/article/view/76</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e529 e529"><textual class="po-textual">Journal Article Tag Suite (JATS). National Center for Biotechnology Information,
      National Library of Medicine (NCBI/NLM).
      </textual><link class="po-inline e530 e530" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://jats.nlm.nih.gov/index.html</textual></link></bibliomixed><bibliomixed class="po-block e531 e531"><textual class="po-textual">Kay, Michael. </textual><emphasis class="po-inline e532 e532" role="ital"><textual class="po-textual">XSLT 2.0 and XPath 2.0 Programmer's
      Reference.</textual></emphasis><textual class="po-textual"> New York: John Wiley and Sons, 2008.</textual></bibliomixed><bibliomixed class="po-block e533 e533" xml:id="Kimber2011" xreflabel="Kimber 2011"><textual class="po-textual">Kimber, Eliot. “DITA Document Types:
      Enabling Blind Interchange Through Modular Vocabularies and Controlled Extension.” Presented
      at Balisage: The Markup Conference 2011, Montréal, Canada, August 2-5, 2011. In </textual><emphasis class="po-inline e534 e534" role="ital"><textual class="po-textual">Proceedings of Balisage: The Markup Conference 2011</textual></emphasis><textual class="po-textual">. Balisage Series
      on Markup Technologies, vol. 7 (2011). doi:</textual><biblioid class="po-atom e535 doi e535"><textual class="po-textual">10.4242/BalisageVol7.Kimber01</textual></biblioid><textual class="po-textual">. At
        </textual><link class="po-inline e536 e536" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://balisage.net/Proceedings/vol7/html/Kimber01/BalisageVol7-Kimber01.html</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e537 e537"><textual class="po-textual">OASIS Darwin Information Typing Architecture (DITA).
      </textual><link class="po-inline e538 e538" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.oasis-open.org/committees/dita/</textual></link></bibliomixed><bibliomixed class="po-block e539 e539" xml:id="piez2001" xreflabel="Piez 2001"><textual class="po-textual">Piez, Wendell.  </textual><quote class="po-inline e540 e540"><textual class="po-textual">Beyond the
        ‘Descriptive vs Procedural’ Distinction</textual></quote><textual class="po-textual">
      </textual><emphasis class="po-inline e541 e541" role="ital"><textual class="po-textual">Markup Languages: Theory and Practice</textual></emphasis><textual class="po-textual">, Vol. 3 no. 2 (Spring
      2001). Also at </textual><link class="po-inline e542 e542" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.piez.org/wendell/papers/beyonddistinction.pdf</textual></link><textual class="po-textual">. </textual></bibliomixed><bibliomixed class="po-block e543 e543" xml:id="piez2009" xreflabel="Piez 2009"><textual class="po-textual"> Piez, Wendell. </textual><quote class="po-inline e544 e544"><textual class="po-textual">How to Play XML:
        Markup Technologies as Nomic Game.</textual></quote><textual class="po-textual"> Presented at Balisage: The Markup Conference
      2009, Montréal, Canada, August 11-14, 2009. In </textual><emphasis class="po-inline e545 e545" role="ital"><textual class="po-textual">Proceedings of Balisage:
        The Markup Conference 2009</textual></emphasis><textual class="po-textual">. Balisage Series on Markup Technologies, vol. 3
      (2009). doi:</textual><biblioid class="po-atom e546 doi e546"><textual class="po-textual">10.4242/BalisageVol3.Piez01</textual></biblioid><textual class="po-textual">. </textual></bibliomixed><bibliomixed class="po-block e547 e547" xml:id="saussure1916" xreflabel="Saussure 1916"><textual class="po-textual">Saussure, Ferdinand de. </textual><emphasis class="po-inline e548 e548" role="ital"><textual class="po-textual">Course in General Linguistics</textual></emphasis><textual class="po-textual">. 1916. Trans. Wade Baskin. The
      Philosophical Library, 1955. Reprint New York: McGraw-Hill, 1966. </textual></bibliomixed><bibliomixed class="po-block e549 e549" xml:id="shannon1948" xreflabel="Shannon 1948"><textual class="po-textual">Shannon, Claude F. </textual><quote class="po-inline e550 e550"><textual class="po-textual">A
      Mathematical Theory of Communication</textual></quote><textual class="po-textual">. </textual><emphasis class="po-inline e551 e551" role="ital"><textual class="po-textual">Bell System Technical
      Journal</textual></emphasis><textual class="po-textual">, July and October, 1948. Reprint available on line at </textual><link class="po-inline e552 e552" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://cm.bell-labs.com/cm/ms/what/shannonday/paper.html</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e553 e553" xml:id="shipman1999" xreflabel="Shipman 1999"><textual class="po-textual">Shipman, Frank M. and Catherine C.
      Marshall. </textual><quote class="po-inline e554 e554"><textual class="po-textual">Formality Considered Harmful: Experiences, Emerging Themes, and
        Directions</textual></quote><textual class="po-textual">. </textual><emphasis class="po-inline e555 e555" role="ital"><textual class="po-textual">Computer Supported Cooperative Work</textual></emphasis><textual class="po-textual">,
      Vol 8 no 4 (October 1999). On line at
        </textual><link class="po-inline e556 e556" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.csdl.tamu.edu/~shipman/formality-paper/harmful.html</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e557 e557" xml:id="spencerbrown1969" xreflabel="Spencer-Brown 1969"><textual class="po-textual">Spencer-Brown, G.
      </textual><emphasis class="po-inline e558 e558" role="ital"><textual class="po-textual">Laws of Form</textual></emphasis><textual class="po-textual">. 1969. Reprint Portland, OR: Cognizer,
      1994.</textual></bibliomixed><bibliomixed class="po-block e559 e559"><textual class="po-textual">Text Encoding Initiative (TEI).
      </textual><link class="po-inline e560 e560" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.tei-c.org/index.xml</textual></link></bibliomixed></bibliography></article></classedDocument>