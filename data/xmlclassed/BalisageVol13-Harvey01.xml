<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.3"><title class="po-block e1 e1"><textual class="po-textual">Methodology For Providing National Information Exchange Model (NIEM) Model Understanding
        to XML and NIEM Novices </textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">Balisage: The Markup Conference 2014</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 5 - 8, 2014</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual">NIEM is a U.S. government initiative to enable the sharing of data. NIEM consists
                of many domains. The NIEM model relies heavily on the use of references to create
                relationships between data. It also relies on different namespaces for each domain.
                Many large government projects have mandated that NIEM be used for exchange of data
                between the government agencies, states and other trading partners. NIEM data models
                are very complex. One of the challenges with using NIEM is how to provide a
                mechanism to present a complex data model in a way that will provide  business
                analysts, SMEs,  programmers and testers the ability to understand the complexity of
                elements, relationships and bi-directional linkages between pieces of information
                that can be understood by both technical and non-technical individuals. </textual></para><para class="po-block e8 e8"><textual class="po-textual">Most of the projects have software development lifecycle (SDLC) artifacts, i.e.,
                UML models, data dictionaries, business analysis documents etc. However, these
                artifacts do not provide the clarity of schema design needed from a NIEM and XML
                perspective. This paper will describe a '</textual><emphasis class="po-inline e9 e9" role="bold"><textual class="po-textual">crazy</textual></emphasis><textual class="po-textual">'
                mechanism (out of the norm) for providing an understandable artifact of the a very
                large NIEM schema that that was provided to possibly thousands of diverse trading
                partners for very large federal and state government program </textual></para></abstract><author class="po-record e10 e10"><personname class="po-record e11 e11"><firstname class="po-field e12 e12"><textual class="po-textual">Betty </textual></firstname><surname class="po-field e13 e13"><textual class="po-textual">Harvey</textual></surname></personname><personblurb class="po-container e14 e14"><para class="po-block e15 e15"><textual class="po-textual"> As President of Electronic Commerce Connection, Inc. since 1995, Ms. Harvey
                    has led many federal government and commercial enterprises in planning and
                    executing their migration to the use of structured information for their
                    critical functions.  She has helped develop strategic XML solutions for her
                    clients. Ms. Harvey has been instrumental in developing industry XML standards.
                    She is the co-author of "Professional ebXML Foundations" published by Wrox. Ms.
                    Harvey founded the Washington, DC Area SGML/XML Users Group. Ms. Harvey is a
                    member of "The XML Guild" and was a coauthor of the book "Advanced XML
                    Applications From the Experts at The XML Guild" published by Thomson. </textual></para></personblurb><affiliation class="po-record e16 e16"><orgname class="po-block e17 e17"><link class="po-inline e18 e18" xlink:actuate="onRequest" xlink:href="http://www.eccnet.com" xlink:show="new" xlink:type="simple"><textual class="po-textual">Electronic Commerce Connection,
                    Inc.</textual></link></orgname></affiliation></author><legalnotice class="po-container e19 e19"><para class="po-block e20 e20"><textual class="po-textual">Copyright Â© 2014 Electronic Commerce Connection, Inc.</textual></para></legalnotice></info><section class="po-hcontainer e21 e21"><title class="po-block e22 e22"><textual class="po-textual">Introduction</textual></title><para class="po-block e23 e23"><textual class="po-textual">Every large project has to create and maintain documentation that conveys information
            about every aspect of that project. These include but are not limited to:</textual></para><itemizedlist class="po-table e24 e24"><listitem class="po-container e25 e25"><para class="po-block e26 e26"><emphasis class="po-inline e27 e27" role="bold"><textual class="po-textual">Data models</textual></emphasis></para></listitem><listitem class="po-container e28 e28"><para class="po-block e29 e29"><emphasis class="po-inline e30 e30" role="bold"><textual class="po-textual">Information consumers</textual></emphasis></para></listitem><listitem class="po-container e31 e31"><para class="po-block e32 e32"><textual class="po-textual">Data flows</textual></para></listitem><listitem class="po-container e33 e33"><para class="po-block e34 e34"><textual class="po-textual">Information transformations</textual></para></listitem><listitem class="po-container e35 e35"><para class="po-block e36 e36"><textual class="po-textual">Information storage</textual></para></listitem><listitem class="po-container e37 e37"><para class="po-block e38 e38"><textual class="po-textual">Etc.</textual></para></listitem></itemizedlist><para class="po-block e39 e39"><textual class="po-textual">In a recent large project we were faced with all of these issues.  The data model that
            was used was a customized National Information Exchange Model (NIEM) data model.  The
            NIEM data model is very complex.  NIEM uses redirection and references that on the
            surface makes the data model hard to understand and navigate.  We were faced with the
            prospect of trying to convey the data model to literally hundreds, possibly thousands,
            of business analysts and developers (mostly JAVA) in an efficient and understandable
            way.  The consumers of the data model were unknown to us.  Their skill level and
            understanding of NIEM were unknown, although we suspected that this understanding was
            low, especially where NIEM was concerned.</textual></para><para class="po-block e40 e40"><textual class="po-textual">This paper will describe an approach that I developed for conveying the complexities
            of the data model.  Although, at first I thought it was a 'crazy' idea, it proved to be
            very useful and much more efficient in understanding the data model. </textual></para></section><section class="po-hcontainer e41 e41"><title class="po-block e42 e42"><textual class="po-textual">Challenges</textual></title><para class="po-block e43 e43"><textual class="po-textual">NIEM is an XML vocabulary for describing information. NEIM creates profiles based on
            specific business domains. NIEM was designed as an exchange model. The XML schemas and
            information artifacts are packaged into what NIEM calls an Information Exchange Package
            Documentation (IEPD). The directory structure of an IEPD is complex. At the leaf of
            every directory are one or more schemas that is referenced by another schema.
            Individuals that have worked with XML are able to pick up a W3C Schema, DTD or RelaxNG
            schema and obtain an understanding of the schema. The fragmentation and referencing used
            in NIEM makes it virtually impossible to gain knowledge by reading the schemas. </textual></para><para class="po-block e44 e44"><textual class="po-textual">The project that this paper concerns was and continues to be a very large project.
            There are hundreds of organizations (federal government, state governments, local
            governments and commercial) that were required to use the IEPD to exchange information
            between the various organizations.</textual></para><para class="po-block e45 e45"><textual class="po-textual">There are also hundreds, maybe thousands of consumers of the information. The actual
            consumers of the IEPD were unknown at the project level, except at a high level. We knew
            that the types of consumers would be:</textual></para><itemizedlist class="po-table e46 e46"><listitem class="po-container e47 e47"><para class="po-block e48 e48"><textual class="po-textual">Business Analysts</textual></para></listitem><listitem class="po-container e49 e49"><para class="po-block e50 e50"><textual class="po-textual">Programmers (JAVA, C++, possibly COBOL)</textual></para></listitem><listitem class="po-container e51 e51"><para class="po-block e52 e52"><textual class="po-textual">Technical Writers</textual></para></listitem><listitem class="po-container e53 e53"><para class="po-block e54 e54"><textual class="po-textual">Relational Database Developers/Administrators</textual></para></listitem><listitem class="po-container e55 e55"><para class="po-block e56 e56"><textual class="po-textual">Testers</textual></para></listitem><listitem class="po-container e57 e57"><para class="po-block e58 e58"><textual class="po-textual">XML Professionals (XQuery, XSLT, Transformations)</textual></para></listitem></itemizedlist><para class="po-block e59 e59"><textual class="po-textual">We were faced with the challenge of how to provide documentation that would convey
            information about 460+ elements in a meaningful way to prospective consumers. Even with
            a constraint schema, most of the elements were optional and used based on specific
            scenarios of the data. </textual></para><section class="po-hcontainer e60 e60"><title class="po-block e61 e61"><textual class="po-textual">NIEM Directory Structure</textual></title><para class="po-block e62 e62"><textual class="po-textual">The structure of the schema is rigidly controlled by NIEM and the IEPD
                specification. Below is an example of an IEPD that was used to support this
                methodology. </textual></para><figure class="po-container e63 e63"><title class="po-block e64 e64"><textual class="po-textual">IEPD Directory Structure</textual></title><mediaobject class="po-container e65 e65"><imageobject class="po-container e66 e66"><imagedata class="po-meta e67 e67" fileref="../../../vol13/graphics/Harvey01/Harvey01-001.jpg"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure></section><section class="po-hcontainer e68 e68"><title class="po-block e69 e69"><textual class="po-textual">NIEM Directory Structure</textual></title><para class="po-block e70 e70"><textual class="po-textual">The IEPD in the above directory structure contains a total of 30 schemas.
                </textual></para></section><section class="po-hcontainer e71 e71"><title class="po-block e72 e72"><textual class="po-textual">NIEM Flexibility</textual></title><para class="po-block e73 e73"><textual class="po-textual">NIEM by default has no constraints. What this means is that the structure is
                somewhat rigorous but all the elements, except the root element are optional. Most
                organizations cannot sustain a data model without constraints. NIEM has a concept of
                'unconstrained' and 'constrained' data model. If an organization decides to
                constrain its data model it must maintain 2 copies of the schema (constrained and
                unconstrained) and provide both in the IEPD. </textual></para></section><section class="po-hcontainer e74 e74"><title class="po-block e75 e75"><textual class="po-textual">NIEM and Substitution Groups</textual></title><para class="po-block e76 e76"><textual class="po-textual">NIEM uses substitution groups instead for choices in the schema. Substitution
                groups are choices. The element that is included in the root model is not valid in
                the XML instance but can be substituted by other elements. The use of substitution
                groups is useful but can be very confusing to both business analysts and
                programmers. Also, many web services software could not consume the schemas with
                included substitution groups.  We were never able to determine the exact reason but
                my hypothesis is that many of the substitution groups are cyclical and the software
                cannot handle the recursion. Substitution groups and software consumption of
                schema's that contain substitution groups is possibly a subject for another paper
                and not part of this paper!</textual></para></section><section class="po-hcontainer e77 e77"><title class="po-block e78 e78"><textual class="po-textual">NIEM and Referencing</textual></title><para class="po-block e79 e79"><textual class="po-textual">Although NIEM is an XML exchange model, in actuality you can envision it more
                as a relational database model. Instead of a true hierarchical model where
                relationships can be construed by ancestor or descendant components, NIEM uses XML
                ID/IDREF constructs to provide relationships between different components. For
                example, in the model we were working with there were several major structures that
                belonged to a person. In other models you might embed all the information related a
                person with the person information. In NIEM, these components are separate and the
                information is 'tied' together by using a reference element:</textual></para><programlisting class="po-block e80 e80" xml:space="preserve"><textual class="po-textual">   
&lt;md-ee:PrimaryTaxFiler&gt;
       &lt;md-core:TINIdentification&gt;
             &lt;nc:IdentificationID&gt;326603914&lt;/nc:IdentificationID&gt;
       &lt;/md-core:TINIdentification&gt;
       &lt;md-core:RoleOfPersonReference s:ref="Dad"/&gt;
&lt;/md-ee:PrimaryTaxFiler&gt;</textual></programlisting><para class="po-block e81 e81"><textual class="po-textual">In the above example, this piece of information is referring back to the 'Dad'
                    person. One of the sample XML documents that were provided as part of the
                    documentation package for the IEPD had over 70 reference elements.</textual></para></section><section class="po-hcontainer e82 e82"><title class="po-block e83 e83"><textual class="po-textual">Namespaces</textual></title><para class="po-block e84 e84"><textual class="po-textual">In the IEPD that was developed, there were a total of 15 namespaces. The more
                namespaces that you have, the more complicated the developing processes against the
                XML can be. Using 15 namespaces became challenging, not only for us but for
                developers with exchange partners. The 15 namespace prefixes that are used in the
                IEPD are: exch, ext, fips_6-4, i, i2, iso_3166, nc, niem-xsd, s, scr, usps, and 3
                custom namespaces used by the project.</textual></para></section><section class="po-hcontainer e85 e85"><title class="po-block e86 e86"><textual class="po-textual">Nillable Elements</textual></title><para class="po-block e87 e87"><textual class="po-textual">Nillable elements are elements that are allowed to be empty. This is true even
                when the element has required children elements. Nillable elements are slightly
                different than true empty elements.  Elements can be defined as having no content,
                or empty.  For example, HTML elements &lt;br/&gt; and &lt;hr/&gt; elements are empty
                because they are using to define either a line break or a horizontal rule.  Content
                would be meaningless for these elements.  Whereas, nillable elements are designed to
                have content but the schema says they can be empty. </textual></para><para class="po-block e88 e88"><textual class="po-textual">NIEM elements, by default, allow elements to be nillable.  The NIEM specification
                was the first XML vocabulary that I have used that has actually used the 'nillable'
                capability of the XML schema.  The use of nillable elements caused problems with
                both understanding the model and with software.   Let's say you have the following
                model for a Person.  In this model, the &lt;PersonName&gt; is required.  The
                &lt;PersonName&gt; requires a &lt;FirstName&gt; and &lt;LastName&gt;.  &lt;MiddleName&gt; is
                optional.</textual></para><figure class="po-container e89 e89"><title class="po-block e90 e90"><textual class="po-textual">Person Name is Nillable</textual></title><mediaobject class="po-container e91 e91"><imageobject class="po-container e92 e92"><imagedata class="po-meta e93 e93" fileref="../../../vol13/graphics/Harvey01/Harvey01-002.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e94 e94"><textual class="po-textual">Normally you would look at this model and see that the following XML tagging is
                valid:</textual></para><programlisting class="po-block e95 e95" xml:space="preserve"><textual class="po-textual">
&lt;Person&gt;
    &lt;PersonName&gt;
        &lt;FirstName&gt;Fannie&lt;/FirstName&gt;
        &lt;MiddleName&gt;Mae&lt;/MiddleName&gt;
        &lt;LastName&gt;Ryan&lt;/LastName&gt;
    &lt;/PersonName&gt;
&lt;/Person&gt;

Or

&lt;Person&gt;
    &lt;PersonName&gt;
        &lt;FirstName&gt;Fannie&lt;/FirstName&gt;
        &lt;LastName&gt;Ryan&lt;/LastName&gt;
    &lt;/PersonName&gt;
&lt;/Person&gt;
</textual></programlisting><para class="po-block e96 e96"><textual class="po-textual">However, when the "nillable='true'" attribute is set on the element declaration
                than the entire element is allowed to be null.  By default, most NIEM elements are
                set as nillable.  Therefore, the following is allowed for a Person described
                above:</textual></para><programlisting class="po-block e97 e97" xml:space="preserve"><textual class="po-textual">
&lt;Person&gt;
   &lt;PersonName xsi:nil="true"/&gt;
&lt;/Person&gt;
</textual></programlisting></section></section><section class="po-hcontainer e98 e98"><title class="po-block e99 e99"><textual class="po-textual">Approach</textual></title><para class="po-block e100 e100"><textual class="po-textual">Considering the challenges that we had and the reality that we weren't in a position
            where we could adequately document and convey the challenges of the complex model, it
            was necessary to '</textual><emphasis class="po-inline e101 e101" role="ital"><textual class="po-textual">think out of the box</textual></emphasis><textual class="po-textual">'.  The model was
            complex and different components were required for different scenarios.  These various
            scenarios were provided as XML documents as part of the IEPD documentation.  Also,
            Schematron was developed to ensure that the XML validated against the various scenarios.  </textual></para><para class="po-block e102 e102"><textual class="po-textual">We understood that looking at the XML itself would only only provide a limited
            understanding of what the data actually means.  The sample documents were heavily
            commented but traversing and understanding 3,000 + lines of XML would be difficult.  In
            order to achieve success, the exchange partners had to understand the underlying XML to
            ensure that the exchange of information between partners was understandable.</textual></para><para class="po-block e103 e103"><textual class="po-textual">I came up with an approach that would take the XML, turn it into PDF that looked like
            the XML, including 'pointy brackets' using XSLT and XSL-FO.  The approach provided the
            following functionality:  </textual></para><itemizedlist class="po-table e104 e104"><listitem class="po-container e105 e105"><para class="po-block e106 e106"><textual class="po-textual">The XML was kept intact.</textual></para></listitem><listitem class="po-container e107 e107"><para class="po-block e108 e108"><textual class="po-textual">Cross-references were 'live' hyperlinks.  This allowed the reader to see how
                    the cross-references worked.</textual></para></listitem><listitem class="po-container e109 e109"><para class="po-block e110 e110"><textual class="po-textual">A navigation bar was added to allow traversing the model and visualizing the
                    structure of the XML.</textual></para></listitem><listitem class="po-container e111 e111"><para class="po-block e112 e112"><textual class="po-textual">Comments were included in the text and highlighted as comments.</textual></para></listitem><listitem class="po-container e113 e113"><para class="po-block e114 e114"><textual class="po-textual">A table was included at the end of the XML to show all the cross-references,
                    by element and by ID.</textual></para></listitem><listitem class="po-container e115 e115"><para class="po-block e116 e116"><textual class="po-textual">A data dictionary of all the elements was included at the end of the PDF file.
                    This provided documentation in a single file. </textual></para></listitem></itemizedlist><section class="po-hcontainer e117 e117"><title class="po-block e118 e118"><textual class="po-textual">Default XML Template</textual></title><para class="po-block e119 e119"><textual class="po-textual">Surprisingly, it is relatively easy to display the XML as  XML, including pointy
                brackets and attributes.  The default template took care of the bulk of the
                conversion.  Below is the code for the default template:</textual></para><programlisting class="po-block e120 e120" xml:space="preserve"><textual class="po-textual">
 &lt;xsl:template match="*"&gt;
            &lt;xsl:if test="@xsi:nil='true'"&gt;
                  &lt;fo:block&gt;Element allowed to be nil (empty).&lt;/fo:block&gt;
            &lt;/xsl:if&gt;
            &lt;fo:block margin-left="15pt" margin-top="2pt" linefeed-treatment="preserve"&gt;
                  &lt;xsl:choose&gt;
                        &lt;xsl:when test="@s:id"&gt;
                              &lt;xsl:attribute name="id"&gt;
                                    &lt;xsl:value-of select="@s:id"/&gt;
                              &lt;/xsl:attribute&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="contains(substring-after(name(), 'md-ee'), 'Eligibility')"&gt;
                              &lt;xsl:attribute name="id"&gt;
                                    &lt;xsl:value-of select="substring-after(name(), 'md-ee:')"/&gt;
                              &lt;/xsl:attribute&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise/&gt;
                  &lt;/xsl:choose&gt;
                  &lt;fo:inline color="maroon" font-weight="bold"&gt; &amp;lt;&lt;xsl:value-of select="name()"
                              /&gt;&lt;xsl:if test="@*"&gt;&lt;xsl:call-template name="createAttributes"
                              /&gt;&lt;/xsl:if&gt;
                        &lt;xsl:if test="@xsi:nil"&gt; xsi:nil="&lt;xsl:value-of select="@xsi:nil"/&gt;&lt;/xsl:if&gt;
                        &lt;xsl:if test="@xsi:nil"&gt;/&lt;/xsl:if&gt;&amp;gt;&lt;fo:inline color="black"&gt;&lt;xsl:apply-templates/&gt;&lt;/fo:inline&gt;&lt;/fo:inline&gt;
                  &lt;xsl:if test="@s:metadata"&gt;
                        &lt;xsl:call-template name="createMetadata"/&gt;
                  &lt;/xsl:if&gt;
                 &lt;xsl:choose&gt;
                       &lt;xsl:when test="@xsi:nil='true'"&gt;&lt;/xsl:when&gt;
                       &lt;xsl:otherwise&gt; &lt;fo:inline color="maroon" font-weight="bold"&gt; &amp;lt;/&lt;xsl:value-of select="name()"
                       /&gt;&amp;gt;&lt;/fo:inline&gt;&lt;/xsl:otherwise&gt;
                 &lt;/xsl:choose&gt;
            &lt;/fo:block&gt;
      &lt;/xsl:template&gt;

</textual></programlisting><para class="po-block e121 e121"><textual class="po-textual">Below is the resulting PDF output from the default template.</textual></para><figure class="po-container e122 e122"><title class="po-block e123 e123"><textual class="po-textual">Resulting Display from PDF File</textual></title><mediaobject class="po-container e124 e124"><imageobject class="po-container e125 e125"><imagedata class="po-meta e126 e126" fileref="../../../vol13/graphics/Harvey01/Harvey01-003.jpg"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure></section><section class="po-hcontainer e127 e127"><title class="po-block e128 e128"><textual class="po-textual">Headers and Footers</textual></title><para class="po-block e129 e129"><textual class="po-textual">I felt it was important to provide both headers and footers in the PDF file.  The
                headers provided information about which element you were viewing.  The footer
                contained page numbers.  Both the recto (right-hand) and verso (left-hand) pages
                were formatted appropriately.   The header information shows the hierarchy of the
                elements on the page. </textual></para><para class="po-block e130 e130"><emphasis class="po-inline e131 e131" role="bold"><textual class="po-textual">NOTE:</textual></emphasis><textual class="po-textual">  Part of the header is redacted.</textual></para><figure class="po-container e132 e132"><title class="po-block e133 e133"><textual class="po-textual">Example Header</textual></title><mediaobject class="po-container e134 e134"><imageobject class="po-container e135 e135"><imagedata class="po-meta e136 e136" fileref="../../../vol13/graphics/Harvey01/Harvey01-004.jpg"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><figure class="po-container e137 e137"><title class="po-block e138 e138"><textual class="po-textual">Footer Example</textual></title><mediaobject class="po-container e139 e139"><imageobject class="po-container e140 e140"><imagedata class="po-meta e141 e141" fileref="../../../vol13/graphics/Harvey01/Harvey01-005.jpg"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure></section><section class="po-hcontainer e142 e142"><title class="po-block e143 e143"><textual class="po-textual">Comments</textual></title><para class="po-block e144 e144"><textual class="po-textual">The sample XML documents had many comments.  These were used to convey important
                information and insight into the model for the users of the XML. It was important
                that these comments be included in the resulting PDF.  In the XML instance the
                scenario was described as an XML comment.  Below is an example of a comment that is
                in the XML instance. </textual></para><figure class="po-container e145 e145"><title class="po-block e146 e146"><textual class="po-textual">Comment Example</textual></title><mediaobject class="po-container e147 e147"><imageobject class="po-container e148 e148"><imagedata class="po-meta e149 e149" fileref="../../../vol13/graphics/Harvey01/Harvey01-006.jpg"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure></section><section class="po-hcontainer e150 e150"><title class="po-block e151 e151"><textual class="po-textual">Dealing with Attributes</textual></title><para class="po-block e152 e152"><textual class="po-textual">There are only 3 attributes that are used in the XML.  The default template called
                another template to create the attributes.</textual></para><programlisting class="po-block e153 e153" xml:space="preserve"><textual class="po-textual">
  &lt;xsl:template name="createAttributes"&gt;
            &lt;xsl:if test="@s:id"&gt;&amp;#160;s:id="&lt;xsl:value-of select="@s:id"/&gt;"&lt;/xsl:if&gt;
            &lt;xsl:if test="@s:ref"&gt;&amp;#160;s:ref="&lt;xsl:value-of select="@s:ref"/&gt;"&lt;/xsl:if&gt;
            &lt;xsl:if test="@s:metadata"&gt;&amp;#160;s:metadata="&lt;xsl:value-of select="@s:metadata"
                  /&gt;"&lt;/xsl:if&gt;
      &lt;/xsl:template&gt;
</textual></programlisting><figure class="po-container e154 e154"><title class="po-block e155 e155"><textual class="po-textual">Example of Attribute Output</textual></title><mediaobject class="po-container e156 e156"><imageobject class="po-container e157 e157"><imagedata class="po-meta e158 e158" fileref="../../../vol13/graphics/Harvey01/Harvey01-007.jpg"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure></section><section class="po-hcontainer e159 e159"><title class="po-block e160 e160"><textual class="po-textual">Major Sections</textual></title><para class="po-block e161 e161"><textual class="po-textual">I wanted the ability to differentiate the different sections.  A separate template
                was made for major sections.  This provided the ability to have titles and have the
                sections start on new pages.  This enabled better readability of the XML.  Below is
                an example of a template for a person section.  </textual></para><figure class="po-container e162 e162"><title class="po-block e163 e163"><textual class="po-textual">Person Major Section</textual></title><mediaobject class="po-container e164 e164"><imageobject class="po-container e165 e165"><imagedata class="po-meta e166 e166" fileref="../../../vol13/graphics/Harvey01/Harvey01-008.jpg"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure></section><section class="po-hcontainer e167 e167"><title class="po-block e168 e168"><textual class="po-textual">Navigation Bar/Bookmarks</textual></title><para class="po-block e169 e169"><textual class="po-textual">A navigation bar was created to allow the reader to navigate the hierarchy.   It
                included expanding and collapsing of the hierarchy.  The navigation bar proved to be
                one of the most useful features of the PDF.  Business Analysts do not have XML tools
                and to our surprise, neither do programmers.  Navigating the schema in a graphical
                representation with tools such as Oxygen, XML Spy and Stylus Studio are really
                beneficial.  With NIEM it is almost essential.  To our surprise we found that most
                organizations to not provide XML tools to their programmers.  They only have access
                to tools available in JAVA toolkits.  Most programmers were using SOAPUI for
                development and testing.  Therefore, the navigation bar became quite useful.  </textual></para><figure class="po-container e170 e170"><title class="po-block e171 e171"><textual class="po-textual">Snippet of Navigation Bar</textual></title><mediaobject class="po-container e172 e172"><imageobject class="po-container e173 e173"><imagedata class="po-meta e174 e174" fileref="../../../vol13/graphics/Harvey01/Harvey01-009.jpg"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure></section><section class="po-hcontainer e175 e175"><title class="po-block e176 e176"><textual class="po-textual">Cross-References</textual></title><para class="po-block e177 e177"><textual class="po-textual">As stated previously NIEM relies heavily on cross-references.  In one sample there
                were over 70 cross-references.  In the PDF, cross-references are 'hot'.  This
                enables the user to link to the location where the information is located.  We used
                'meaningful' identifiers in the samples, just to make it easier to understand and
                navigate the XML.  However, in practice the id's are normally not human ingestible.
                As a standard all blue text in the PDF are active links.</textual></para><para class="po-block e178 e178"><textual class="po-textual">The PDF created a table of cross-references which provided just another look at
                how the cross-references actually worked.</textual></para><figure class="po-container e179 e179"><title class="po-block e180 e180"><textual class="po-textual">Active Cross-references</textual></title><mediaobject class="po-container e181 e181"><imageobject class="po-container e182 e182"><imagedata class="po-meta e183 e183" fileref="../../../vol13/graphics/Harvey01/Harvey01-010.jpg"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><figure class="po-container e184 e184"><title class="po-block e185 e185"><textual class="po-textual">Cross-Reference Table</textual></title><mediaobject class="po-container e186 e186"><imageobject class="po-container e187 e187"><imagedata class="po-meta e188 e188" fileref="../../../vol13/graphics/Harvey01/Harvey01-011.jpg"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e189 e189"><textual class="po-textual">The last column of the table is a hyperlink to the location in the PDF where the
                id attribute is located. </textual></para></section><section class="po-hcontainer e190 e190"><title class="po-block e191 e191"><textual class="po-textual">Data Dictionary</textual></title><para class="po-block e192 e192"><textual class="po-textual">The final component in the PDF included a Data Dictionary of the schema.  The NIEM
                specification requires that all elements are documented.  The XSLT traversed the
                schema and created a data dictionary that contained all the elements, sorted
                alphabetically, and their definition.  This provided a mechanism for the user to
                quickly find the definition for an element.  In most cases the elements were
                self-describing, i.e., &lt;PersonAmericanIndianOrAlaskaNativeIndicator&gt;, but there
                were elements that were named ambiguously.</textual></para><para class="po-block e193 e193"><textual class="po-textual">The navigation bar provided an expansion to link to an individual alphabetic
                location. </textual></para><figure class="po-container e194 e194"><title class="po-block e195 e195"><textual class="po-textual">Data Dictionary Navigation Bar</textual></title><mediaobject class="po-container e196 e196"><imageobject class="po-container e197 e197"><imagedata class="po-meta e198 e198" fileref="../../../vol13/graphics/Harvey01/Harvey01-012.jpg"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure></section></section><section class="po-hcontainer e199 e199"><title class="po-block e200 e200"><textual class="po-textual">Benefits</textual></title><para class="po-block e201 e201"><textual class="po-textual">I believe that the benefits to this approach are many.  The users very quickly became
            dependent on the PDF to help them understand the model.   Most developers and testers
            used the PDF version of the XML as a guideline instead of the native XML sample that was
            provided to them.  Before the PDF was developed internal testers had many questions and
            misunderstandings of the model.  Although the PDF didn't completely alleviate questions,
            the amount of questions were reduced in number. </textual></para><para class="po-block e202 e202"><textual class="po-textual">The PDF file was understandable to any discipline in the business and development
            process.  The result of the PDF was:</textual></para><itemizedlist class="po-table e203 e203"><listitem class="po-container e204 e204"><para class="po-block e205 e205"><textual class="po-textual">Quicker understanding of data model</textual></para></listitem><listitem class="po-container e206 e206"><para class="po-block e207 e207"><textual class="po-textual">More accurate understanding of data model</textual></para></listitem><listitem class="po-container e208 e208"><para class="po-block e209 e209"><textual class="po-textual">Faster development</textual></para></listitem><listitem class="po-container e210 e210"><para class="po-block e211 e211"><textual class="po-textual">Easier validation and testing by independent testers</textual></para></listitem><listitem class="po-container e212 e212"><para class="po-block e213 e213"><textual class="po-textual">Less coding errors</textual></para></listitem></itemizedlist><para class="po-block e214 e214"><textual class="po-textual">Although there isn't any way to quantitatively evaluate the cost-savings, I believe
            that the PDF did result in cost savings through the entire life-cycle.</textual></para></section><section class="po-hcontainer e215 e215"><title class="po-block e216 e216"><textual class="po-textual">Conclusion</textual></title><para class="po-block e217 e217"><textual class="po-textual">Although this approach may seem a little 'extreme', I believe that it is very
            beneficial to providing information on complex data models.  It proved invaluable for
            our project.  I also believe that this approach would be useful to any complex XML
            project.  It provides clarity of the model that may not be available otherwise.  The XML
            schema (especially NIEM) can only provide so much information about how to knit the data
            together.   </textual></para><para class="po-block e218 e218"><textual class="po-textual">It also amazes me how many organizations do not provide XML tools to their developers
            and other individuals working with XML.  The cost benefits they would reap by providing
            adequate tools would far outweigh the cost of the software.  Without these tools
            navigating and understanding complex models are difficult at best.  I don't have a
            scientific analysis of how many of the programmers on this project did not have adequate
            XML tools but I guess that at least 75% did not.</textual></para><para class="po-block e219 e219"><textual class="po-textual">If faced with the same challenges in the future, would I take this same approach.
            Unequivocally </textual><emphasis class="po-inline e220 e220" role="bold"><textual class="po-textual">yes</textual></emphasis><textual class="po-textual">!</textual></para></section><bibliography class="po-hcontainer e221 e221"><title class="po-block e222 e222"><textual class="po-textual">Bibliography</textual></title><bibliomixed class="po-block e223 e223"><textual class="po-textual">NIEM Website: </textual><link class="po-inline e224 e224" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">https://www.niem.gov/</textual></link></bibliomixed></bibliography></article></classedDocument>