<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.2" xml:id="Bal2008poul0610"><title class="po-block e1 e1"><textual class="po-textual">Properties of schema mashups: dynamicity, semantic, mixins, hyperschemas</textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">Balisage: The Markup Conference 2008</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 12 - 15, 2008</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual">W3C XML Schemas specifications were published in 2001, but a large community still uses DTDs.
Perhaps they didn't adopt new schema technologies because they are still awaiting some missing features ?
What kind of feature would be useful to DTD users and schema practitioners ?</textual></para><para class="po-block e8 e8"><textual class="po-textual">Let's transpose the buzzword "mashups" to schema technologies: mashups of several schema languages and mashups of schema languages with non-schema languages.
From this bazaar, we'll discuss some of the emerging features that could make what would be the next generation of schema languages:
dynamicity, semantic, mixins, and hyperschemas.</textual></para></abstract><author class="po-record e9 e9"><personname class="po-record e10 e10"><firstname class="po-field e11 e11"><textual class="po-textual">Philippe</textual></firstname><surname class="po-field e12 e12"><textual class="po-textual">Poulard</textual></surname></personname><personblurb class="po-container e13 e13"><para class="po-block e14 e14"><textual class="po-textual">Philippe Poulard is a software engineer at INRIA (french national institute for
research in computer science and control) where he is involved in Web-oriented
problematics. He has been specialized in XML technologies and e-documentation
for 10 years. During this period, he has developed XML and SGML-based solutions
and prototypes on behalf of the French Army and INRIA. More recently he has
designed and implemented a set of XML technologies named "Active Tags"
(http://ns.inria.org/active-tags/). He also teaches
XML and Java at Nice/Sophia-Antipolis university and Aix/Marseille university.
He has an engineer degree (M.Sc) from the Conservatoire National des Arts et
Metiers.</textual></para></personblurb><affiliation class="po-record e15 e15"><orgname class="po-block e16 e16"><textual class="po-textual">INRIA</textual></orgname></affiliation><email class="po-field e17 e17"><textual class="po-textual">philippe.poulard@sophia.inria.fr</textual></email></author><legalnotice class="po-container e18 e18"><para class="po-block e19 e19"><textual class="po-textual">Copyright Â© 2008 Philippe Poulard. Used by permission.</textual></para></legalnotice><keywordset class="po-table e20 e20" role="author"><keyword class="po-field e21 e21"><textual class="po-textual">Schemas</textual></keyword><keyword class="po-field e22 e22"><textual class="po-textual">Active Tags</textual></keyword><keyword class="po-field e23 e23"><textual class="po-textual">Active Schema Language</textual></keyword><keyword class="po-field e24 e24"><textual class="po-textual">Active Catalog</textual></keyword><keyword class="po-field e25 e25"><textual class="po-textual">W3C XML Schema</textual></keyword><keyword class="po-field e26 e26"><textual class="po-textual">Relx NG</textual></keyword><keyword class="po-field e27 e27"><textual class="po-textual">Schematron</textual></keyword><keyword class="po-field e28 e28"><textual class="po-textual">DTD</textual></keyword><keyword class="po-field e29 e29"><textual class="po-textual">Hyperschema</textual></keyword><keyword class="po-field e30 e30"><textual class="po-textual">data types</textual></keyword></keywordset></info><section class="po-hcontainer e31 e31"><title class="po-block e32 e32"><textual class="po-textual">Introduction</textual></title><para class="po-block e33 e33"><textual class="po-textual">The </textual><xref class="po-milestone e34 e34" linkend="WXS-11"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> specification is in a "last call working draft" status.
One of the most significant change is perhaps the support of co-occurrence constraints that was missing in 1.0 and expected by the community.
For the other missing stuffs -who knows what they are- we have to wait for W3C XML Schema 1.2 and so on.
In this paper, we'll have a prospective approach: we examine some features that the author has already implemented as a demonstration,
and imagine others that lead us to consider new usages of schema technologies.</textual></para><para class="po-block e35 e35"><textual class="po-textual">For this purpose, we introduce an experimental but innovative schema technology: the Active Schema Language, or </textual><xref class="po-milestone e36 e36" linkend="ASL"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.
The strength of ASL comes from its runtime environment: the </textual><xref class="po-milestone e37 e37" linkend="ActiveTags"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> engine that was presented last year at Extreme Markup Languages in Montreal (</textual><xref class="po-milestone e38 e38" linkend="Poulard"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).
Active Tags can host several runnable tag libraries and a schema language like ASL is just another library like other tag libraries,
but built on top of this framework that offers to ASL lots of valuable services that make it much more simple, powerful and expressive than
the serie of W3C XML Schema 1.x as well as other schema technologies.</textual></para><para class="po-block e39 e39"><textual class="po-textual">Firstly, we will expose the foundations of the system. In the next chapters, we will explore 4 simple use cases:</textual></para><itemizedlist class="po-table e40 e40"><listitem class="po-container e41 e41"><para class="po-block e42 e42"><textual class="po-textual">Since an Active Tags engine can make cohabit several tag libraries, even declarative languages like schema languages,
we'll see hereafter how to design a schema that can build dynamically its content models (named active content model)
by interweaving imperative instructions with declarative ones, in order to solve issues that other schema technologies can't address.</textual></para></listitem><listitem class="po-container e43 e43"><para class="po-block e44 e44"><textual class="po-textual">Next, we'll focus on XML data types and the lack of support of semantic data types in schema languages.
A simple example will show how ASL can define simply such a data type, and the advantage got for applications that have to deal with XML datas.</textual></para></listitem><listitem class="po-container e45 e45"><para class="po-block e46 e46"><textual class="po-textual">We'll go on with the concept of mixins (borrowed to other kind of languages) adapted to schema languages.
Here, we'll mix several schema technologies for extending an attribute definition of a DTD with a data type (other than CDATA, of course).</textual></para></listitem><listitem class="po-container e47 e47"><para class="po-block e48 e48"><textual class="po-textual">Finally, we'll discuss about the validation of software components represented with declarative XML languages.
Although schemas languages can validate the static representation of an assembly of components, they are not designed to validate pieces of components assembled at runtime.
An hyperschema would act at this higher level.</textual></para></listitem></itemizedlist><para class="po-block e49 e49"><textual class="po-textual">We will conclude that designing XML languages in a framework such as Active Tags is extremely valuable.
Even (or especially) for declarative languages such as ASL.</textual></para></section><section class="po-hcontainer e50 e50"><title class="po-block e51 e51"><textual class="po-textual">Foundations of the system</textual></title><para class="po-block e52 e52"><textual class="po-textual">In this section, we present an overview of the system and its basic functioning.</textual></para><para class="po-block e53 e53"><textual class="po-textual">Basically, an </textual><xref class="po-milestone e54 e54" linkend="XSLT"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> processor or a schema validator are doing the same things:
first, since they are languages that rely on XML, instances are parsed, then unmarshalled
to instances of some classes and assembled, and finally processed according to the intended
semantic of the tags encountered. This is where the differences occurs.
Processing those steps in a pipeline mode or generating some code in a target language are only implementation details.
We can simply consider XSLT, </textual><xref class="po-milestone e55 e55" linkend="WXS"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, </textual><xref class="po-milestone e56 e56" linkend="RelaxNG"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, </textual><xref class="po-milestone e57 e57" linkend="SCXML"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, </textual><xref class="po-milestone e58 e58" linkend="XMLCatalogs"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">
and other markup languages designed for processing purpose as tag libraries,
but none of them rely on a common system.
Yet, some systems are based on tag libraries such as </textual><xref class="po-milestone e59 e59" linkend="JSP"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">/</textual><xref class="po-milestone e60 e60" linkend="JSTL"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and </textual><xref class="po-milestone e61 e61" linkend="Jelly"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> but the former
is runnable exclusively within a Web server and both are very far from XML problematics: for example, instead of using XPath
they rely on the </textual><xref class="po-milestone e62 e62" linkend="UEL"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and are tightly coupled to Java.</textual></para><para class="po-block e63 e63"><textual class="po-textual">Active Tags is a system that considers that XML languages designed for processing purpose like those mentionned are tag libraries
runnable in an XML-based environment.
Active Tags offers to runnable XML languages a set of basic services such as handling XML datas
and non-XML datas with </textual><xref class="po-milestone e64 e64" linkend="XPath"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, using templates, defining macros, and mapping tags to their
implementations. This allows a programmer to focus on its implementation without worrying about the plumbing details.</textual></para><para class="po-block e65 e65"><textual class="po-textual">In the same way that XSLT scripts are called "</textual><emphasis class="po-inline e66 e66"><textual class="po-textual">stylesheets</textual></emphasis><textual class="po-textual">", Active Tags ones are called "</textual><emphasis class="po-inline e67 e67"><textual class="po-textual">active sheets</textual></emphasis><textual class="po-textual">".
Like XSLT, it is XPath centric, and </textual><emphasis class="po-inline e68 e68"><textual class="po-textual">active sheets</textual></emphasis><textual class="po-textual"> will contain both instructions (the so-called </textual><emphasis class="po-inline e69 e69"><textual class="po-textual">active tags</textual></emphasis><textual class="po-textual">) and XML litterals.
The main difference is that instead of having a single instruction set, an </textual><emphasis class="po-inline e70 e70"><textual class="po-textual">active sheet</textual></emphasis><textual class="po-textual"> may contain severals, each bound to a namespace URI.
One of the core module of the system is the XML Control Language, or </textual><xref class="po-milestone e71 e71" linkend="XCL"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, that supplies a set of tags that covers many common features:</textual></para><itemizedlist class="po-table e72 e72"><listitem class="po-container e73 e73"><para class="po-block e74 e74"><textual class="po-textual">Usual control structure actions, such as alternative (</textual><code class="po-atom e75 e75"><textual class="po-textual">&lt;xcl:if&gt;</textual></code><textual class="po-textual"> </textual><code class="po-atom e76 e76"><textual class="po-textual">&lt;xcl:then&gt;</textual></code><textual class="po-textual"> </textual><code class="po-atom e77 e77"><textual class="po-textual">&lt;xcl:else&gt;</textual></code><textual class="po-textual">)
    or iterative actions (</textual><code class="po-atom e78 e78"><textual class="po-textual">&lt;xcl:for-each&gt;</textual></code><textual class="po-textual">).</textual></para></listitem><listitem class="po-container e79 e79"><para class="po-block e80 e80"><textual class="po-textual">XML oriented actions, such as XML parsing (</textual><code class="po-atom e81 e81"><textual class="po-textual">&lt;xcl:parse&gt;</textual></code><textual class="po-textual">) and XSLT transforming (</textual><code class="po-atom e82 e82"><textual class="po-textual">&lt;xcl:parse-stylesheet&gt;</textual></code><textual class="po-textual"> and </textual><code class="po-atom e83 e83"><textual class="po-textual">&lt;xcl:transform&gt;</textual></code><textual class="po-textual">);
    these actions deal with entity and URI resolving, passing parameters (</textual><code class="po-atom e84 e84"><textual class="po-textual">&lt;xcl:param&gt;</textual></code><textual class="po-textual">),
    error handling and many other options used to tune XML processes.</textual></para></listitem><listitem class="po-container e85 e85"><para class="po-block e86 e86"><textual class="po-textual">XML document creation (</textual><code class="po-atom e87 e87"><textual class="po-textual">&lt;xcl:document&gt;</textual></code><textual class="po-textual">, </textual><code class="po-atom e88 e88"><textual class="po-textual">&lt;xcl:element&gt;</textual></code><textual class="po-textual">, </textual><code class="po-atom e89 e89"><textual class="po-textual">&lt;xcl:attribute&gt;</textual></code><textual class="po-textual"> etc)
    and high level Active Update implementation, that allow to perform update operations on XML objects and X-operable objects</textual><footnote class="po-popup e90 e90"><para class="po-block e91 e91"><textual class="po-textual">X-operable objects are objects that are exposing their inherent properties as XML properties (name, attributes, children, parent...) and can be processed
    with XML-related operations and traversed with XPath. For example, one can apply </textual><code class="po-atom e92 e92"><textual class="po-textual">//*</textual></code><textual class="po-textual"> on a directory of a file system
    to get all the files and directories under the tree.</textual></para></footnote><textual class="po-textual">
    (</textual><code class="po-atom e93 e93"><textual class="po-textual">&lt;xcl:delete&gt;</textual></code><textual class="po-textual">, </textual><code class="po-atom e94 e94"><textual class="po-textual">&lt;xcl:append&gt;</textual></code><textual class="po-textual">, </textual><code class="po-atom e95 e95"><textual class="po-textual">&lt;xcl:update&gt;</textual></code><textual class="po-textual"> etc).</textual></para></listitem></itemizedlist><para class="po-block e96 e96"><textual class="po-textual">The reader is sent back to </textual><xref class="po-milestone e97 e97" linkend="RefleX"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, a Java implementation of Active Tags,
where numbers examples are available and runnable. RefleX supplies a command line interface and
a servlet, and offer means to query relational databases with SQL, XML databases with </textual><xref class="po-milestone e98 e98" linkend="XQuery"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, or LDAP repositories.
Moreover, he will find in RefleX all the standard modules that go along with Active Tags (I/O, System, Web, etc) and specific modules
for designing XML-based test suites (</textual><xref class="po-milestone e99 e99" linkend="XUnit"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) and test suites for Web applications (</textual><xref class="po-milestone e100 e100" linkend="WUnit"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).</textual></para><para class="po-block e101 e101"><textual class="po-textual">In this first example, XCL is used in a sequence of three operations for parsing a file and transforming it with XSLT:</textual></para><programlisting class="po-block e102 e102" xml:space="preserve"><textual class="po-textual">
&lt;xcl:active-sheet xmlns:xcl="http://ns.inria.org/active-tags/xcl"&gt;
    &lt;xcl:parse name="input" source="file:///path/to/document.xml"/&gt;
    &lt;xcl:parse-stylesheet name="xslt" source="file:///path/to/stylesheet.xsl"/&gt;
    &lt;!--XPath expressions appear in curly braces--&gt;
    &lt;xcl:transform output="file:///path/to/result.html" source="{ $input }"
    stylesheet="{ $xslt }"/&gt;
&lt;/xcl:active-sheet&gt;</textual></programlisting><para class="po-block e103 e103"><emphasis class="po-inline e104 e104"><textual class="po-textual">Active sheets</textual></emphasis><textual class="po-textual"> can use a single module (like above) or several ones, can be procedural (like above once again) or declarative or both like we'll see in the next section.</textual></para><para class="po-block e105 e105"><textual class="po-textual">Other core modules include means to bind an implementation to an active tag (i.e. which is not an XML litteral):</textual></para><programlisting class="po-block e106 e106" xml:space="preserve"><textual class="po-textual">
    &lt;!--bind a Java class to an active tag of the XCL module--&gt;
    &lt;exp:element name="xcl:transform"
    source="res:org.inria.ns.reflex.processor.xcl.TransformAction"/&gt;
    &lt;!--the "res" URI scheme refers to resources found in the classpath;
            this is specific to the RefleX implementation in Java--&gt;
</textual></programlisting><para class="po-block e107 e107"><textual class="po-textual">...and means to lookup for resources such as the actual modules:</textual></para><programlisting class="po-block e108 e108" xml:space="preserve"><textual class="po-textual">
    &lt;!--declare 2 entries related to XCL in the main catalog--&gt;
    &lt;cat:group xml:base="res:///org/inria/ns/reflex/processor/"&gt;
        &lt;!--where to find the XCL module--&gt;
        &lt;cat:resource name="http://ns.inria.org/active-tags/xcl" uri="xcl/module.exp"
        selector="exp:module"/&gt;
        &lt;!--where to find the XCL schema--&gt;
        &lt;cat:resource name="http://ns.inria.org/active-tags/xcl" uri="xcl/schema.asl"
        selector="asl:schema"/&gt;
    &lt;/cat:group&gt;</textual></programlisting><para class="po-block e109 e109"><textual class="po-textual">When an </textual><emphasis class="po-inline e110 e110"><textual class="po-textual">active sheet</textual></emphasis><textual class="po-textual"> is launched, the engine will look in the main catalog (and custom catalogs if any)
if there is a module for each XML tag it encounters, and load the implementation provided by the relevant module, otherwise the actual tag
stands for a litteral.</textual></para><para class="po-block e111 e111"><textual class="po-textual">The so-called </textual><xref class="po-milestone e112 e112" linkend="ActiveCatalog"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> used in Active Tags like shown above is a compatible extension to OASIS XML Catalog: the former is designed
to retrieve resources whereas the latter just to map an URI to another URI. When the engine launches a "module request", the reference specified by the entry in the catalog, tagged with the
appropriate role (</textual><code class="po-atom e113 e113"><textual class="po-textual">selector="exp:module"</textual></code><textual class="po-textual">), will be unmarshalled to the relevant component (the module expected).</textual></para><para class="po-block e114 e114"><textual class="po-textual">Other core modules and custom modules can be declared and registered to the engine as well.
So far, nothing about schemas were mentionned; in the same way, there is a module definition for ASL
that bind ASL elements to their implementation, and an entry in the main catalog so that ASL is ready to use
by the engine. Therefore, we are able to design schema instances with ASL, and write </textual><emphasis class="po-inline e115 e115"><textual class="po-textual">active sheets</textual></emphasis><textual class="po-textual">
for validating XML instances with our schema. We'll see hereafter how to combine XCL and ASL to express dynamic content models in a schema.</textual></para></section><section class="po-hcontainer e116 e116"><title class="po-block e117 e117"><textual class="po-textual">Dynamicity, or building active content models</textual></title><para class="po-block e118 e118"><textual class="po-textual">Schema processors are building an abstract tree from a schema instance. With a traditional grammar-based schema (DTD, W3C XML Schema, Relax NG),
as the schema instance is hard-coded, the abstract tree is static, making the expressiveness of the schema limited to what is allowed by the grammar.
The flaw with grammars in XML is that they only allow to constraint content models in a declarative manner,
which is in essence very concise and expressive, but when the limits of the declarative syntax are reached, there is no way out;
it is still possible to add a new tag to express the missing declarative tag, but the limit still exists a single step further, at the cost of upgrading the language.</textual></para><para class="po-block e119 e119"><textual class="po-textual">ASL has been designed in order to be much more expressive without adding tags again and again.
The immediate benefit is to avoid to compromise a user's XML structure just because some constraints can't be expressed by grammar-based schemata,
which happens often with traditional schema languages.
ASL contains similar constructs than others schema languages: an element declaration is still made of sequences (</textual><code class="po-atom e120 e120"><textual class="po-textual">&lt;asl:sequence&gt;</textual></code><textual class="po-textual">) or choices
(</textual><code class="po-atom e121 e121"><textual class="po-textual">&lt;asl:choice&gt;</textual></code><textual class="po-textual">) of element references (</textual><code class="po-atom e122 e122"><textual class="po-textual">&lt;asl:element ref-name="..."&gt;</textual></code><textual class="po-textual">),
texts (</textual><code class="po-atom e123 e123"><textual class="po-textual">&lt;asl:text value="..."&gt;</textual></code><textual class="po-textual">) or attributes (</textual><code class="po-atom e124 e124"><textual class="po-textual">&lt;asl:attribute&gt;</textual></code><textual class="po-textual">), but they can be mixed with imperative constructs.
As the content models are computed at runtime while validating, the result abstract tree becomes dynamic,
increasing dramatically the expressiveness of the schema: the content models can adapt themselves to the incoming data to validate in an extreme flexible way.
Additionally, ASL allows to compute dynamically thanks to XPath expressions occurrence constraints, that are at best hard-coded in existing schema languages.</textual></para><para class="po-block e125 e125"><textual class="po-textual">The following document is an instance of a purchase-order:</textual></para><programlisting class="po-block e126 e126" xml:space="preserve"><textual class="po-textual">
&lt;purchase-order
    xmlns="http://www.example.com/purchase-order"
    ship-date="2008-08-14"&gt;

  &lt;items total="188.93"&gt;

    &lt;item partNum="872-AA"&gt;
      &lt;productName&gt;Lawnmower&lt;/productName&gt;
      &lt;quantity&gt;1&lt;/quantity&gt;
      &lt;USPrice&gt;148.95&lt;/USPrice&gt;
    &lt;/item&gt;

    &lt;item partNum="926-AA"&gt;
      &lt;productName&gt;Baby Monitor&lt;/productName&gt;
      &lt;quantity&gt;1&lt;/quantity&gt;
      &lt;USPrice&gt;39.98&lt;/USPrice&gt;
    &lt;/item&gt;

    &lt;free-item partNum="261-ZZ"&gt;
      &lt;productName&gt;Kamasutra for dummies&lt;/productName&gt;
      &lt;quantity&gt;1&lt;/quantity&gt;
    &lt;/free-item&gt;

  &lt;/items&gt;

&lt;/purchase-order&gt;
</textual></programlisting><para class="po-block e127 e127"><textual class="po-textual">It is constrained by structual rules and business rules, in the circumstances a </textual><code class="po-atom e128 e128"><textual class="po-textual">&lt;free-item&gt;</textual></code><textual class="po-textual"> element is allowed only if the total amount exceeds 500$
(which makes the above document invalid).
Due to the lack of expressiveness of existing schema languages, the best we can do is to relax some constraints and ignore the business rule.
The content model of the </textual><code class="po-atom e129 e129"><textual class="po-textual">&lt;items&gt;</textual></code><textual class="po-textual"> element would be expressed like this in a DTD:</textual></para><programlisting class="po-block e130 e130" xml:space="preserve"><textual class="po-textual">&lt;!ELEMENT items (item+,free-item?)&gt;</textual></programlisting><para class="po-block e131 e131"><textual class="po-textual">Unfortunately, an instance like the previous one violates our business rule although it is valid regarding the DTD.
Other schema languages can't do much more better, except </textual><xref class="po-milestone e132 e132" linkend="Schematron"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> that we will talk about hereinafter.</textual></para><para class="po-block e133 e133"><textual class="po-textual">ASL allows to write the business rule exactly as it has been expressed, by injecting imperative instructions from the XML Control Language within the content model definition:</textual></para><programlisting class="po-block e134 e134" xml:space="preserve"><textual class="po-textual">
&lt;asl:active-schema
    xmlns:xcl="http://ns.inria.org/active-tags/xcl"
    xmlns:asl="http://ns.inria.org/active-schema"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:po="http://www.example.com/purchase-order"
    target="po"
&gt;

  &lt;!--the root element of a purchase order--&gt;
  &lt;asl:element name="po:purchase-order" root="always"&gt;
    &lt;asl:attribute name="ship-date" type="xs:date"/&gt;
    &lt;asl:sequence&gt;
      &lt;asl:element ref-elem="po:items"/&gt;
    &lt;/asl:sequence&gt;
  &lt;/asl:element&gt;

  &lt;!--a dynamic content model--&gt;
  &lt;asl:element name="po:items" root="never"&gt;
    &lt;asl:attribute name="total" type="xs:decimal"/&gt;
    &lt;!--a variable sequence--&gt;
    &lt;asl:sequence&gt;
      &lt;asl:element
          ref-elem="po:item"
          min-occurs="1"
          max-occurs="unbounded"/&gt;
      &lt;!--the test that introduces variability
          asl:element() refers to the current element, actually a &lt;po:items&gt;--&gt;
      &lt;xcl:if test="{ asl:element()/@total &amp;gt; 500 }"&gt;
        &lt;xcl:then&gt;
          &lt;asl:element
              ref-elem="po:free-item"
              min-occurs="0"
              max-occurs="1"/&gt;
        &lt;/xcl:then&gt;
      &lt;/xcl:if&gt;
    &lt;/asl:sequence&gt;
  &lt;/asl:element&gt;

  &lt;asl:element name="po:item" root="never"&gt;
    &lt;!--content model here--&gt;
  &lt;/asl:element&gt;

  &lt;asl:element name="po:free-item" root="never"&gt;
    &lt;!--content model here--&gt;
  &lt;/asl:element&gt;

  &lt;!--other element definitions here--&gt;

&lt;/asl:active-schema&gt;
</textual></programlisting><para class="po-block e135 e135"><textual class="po-textual">This schema demonstrates that an imperative operation is used to build the content model during the validation.
The content model of the </textual><code class="po-atom e136 e136"><textual class="po-textual">&lt;items&gt;</textual></code><textual class="po-textual"> element will vary according to the total amount found in the incoming document.
Each of the "realizations" or "instanciations" of the element definition and illustrated by the picture below leads to a different abstract tree of the grammar.
But all are expressed in a single self-adaptative schema.
A program that would generate a schema wouldn't have the same expressiveness:
a content model designed on the fly won't necessary produce the same result each time it is traversed.
In fact, the system works like if it was a program that locally build fragments of content models while it is traversed during the validation.
The injection of imperative instructions doesn't change the nature of ASL which is declarative.</textual></para><mediaobject class="po-container e137 e137"><imageobject class="po-container e138 e138"><imagedata class="po-meta e139 e139" fileref="../../../vol1/graphics/Poulard01/Poulard01-001.jpg" format="jpg" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><para class="po-block e140 e140"><textual class="po-textual">Schematron (as well as assertions in W3C XML Schema 1.1) is a technology that offers similar services;
however, there is a fundamental difference: Schematron act outside content models whereas ASL defines them.
Schematron will report constraints violations after grammar-based validation.
A tool such as an editor will propose to the user to insert a </textual><code class="po-atom e141 e141"><textual class="po-textual">&lt;free-item&gt;</textual></code><textual class="po-textual"> whereas Schematron will reject it after the insertion !
ASL will introduce it in the content model only when the conditions are fulfilled, and the editor won't propose it to the user if it doesn't have to.</textual></para><para class="po-block e142 e142"><textual class="po-textual">The reader is encouraged to experiment himself dynamic content models by referring to the RefleX web site:
for example how an algorithmic rule can act on a content model and other various use cases that are available in RefleX.</textual></para></section><section class="po-hcontainer e143 e143"><title class="po-block e144 e144"><textual class="po-textual">Semantic, or enhancing the meaning of data types</textual></title><para class="po-block e145 e145"><xref class="po-milestone e146 e146" linkend="DTLL"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, a language for the creation of data type libraries,
provides a rather good support for data types. But neither DTLL nor W3C XML Schema nor XML technologies in general
offer means to design semantic data types.
The semantic of a data type is related to its level of abstractions: </textual><xref class="po-milestone e147 e147" linkend="Murata"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> defines the following 4 models with different levels of abstractions (we add a 5th at the bottom):</textual></para><itemizedlist class="po-table e148 e148"><listitem class="po-container e149 e149"><para class="po-block e150 e150"><textual class="po-textual">Model 4: semantic view: 68Â° Fahrenheit</textual></para></listitem><listitem class="po-container e151 e151"><para class="po-block e152 e152"><textual class="po-textual">Model 3: data type view: </textual><code class="po-atom e153 e153"><textual class="po-textual">#xs:decimal temp=68</textual></code></para></listitem><listitem class="po-container e154 e154"><para class="po-block e155 e155"><textual class="po-textual">Model 2: XML view:</textual></para><mediaobject class="po-container e156 e156"><imageobject class="po-container e157 e157"><imagedata class="po-meta e158 e158" fileref="../../../vol1/graphics/Poulard01/Poulard01-002.jpg" format="jpg" width="80%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></listitem><listitem class="po-container e159 e159"><para class="po-block e160 e160"><textual class="po-textual">Model 1: string view: </textual><code class="po-atom e161 e161"><textual class="po-textual">&lt;?xml version="1.0"?&gt;&lt;weather-report temp="68" unit="Â°F"&gt;</textual></code></para></listitem><listitem class="po-container e162 e162"><para class="po-block e163 e163"><textual class="po-textual">Model 0: byte view: </textual><code class="po-atom e164 e164"><textual class="po-textual">3C 3F 78 6D 6C 20 76 65 72 73 69 6F 6E 3D 22 31 2E 30 22 3F 3E 3C 77 65 61 74 68 65 72 2D 72 65 70 6F 72 74 20 74 65 6D 70 3D 22 36 38 22 20 75 6E 69 74 3D 22 B0 46 22 3E</textual></code></para></listitem></itemizedlist><para class="po-block e165 e165"><textual class="po-textual">The Model 4 is of course the closest to the concerns of a human being. It is available for systems like Active Tags that can express reliationships between datas.</textual></para><para class="po-block e166 e166"><textual class="po-textual">Unfortunately, XML technologies stop at Model 3, got thanks to a schema; what's happenned if we have to sort the following weather report by temperature ?</textual></para><programlisting class="po-block e167 e167" xml:space="preserve"><textual class="po-textual">
&lt;weather-report&gt;
    &lt;city name="Paris"  temp="19" unit="Â°C"/&gt;
    &lt;city name="Rome"   temp="22" unit="Â°C"/&gt;
    &lt;city name="Berlin" temp="32" unit="Â°F"/&gt;&lt;!-- 32Â°F = 0Â°C --&gt;
    &lt;city name="Madrid" temp="23" unit="Â°C"/&gt;
    &lt;city name="London" temp="68" unit="Â°F"/&gt;&lt;!-- 68Â°F = 20Â°C --&gt;
&lt;/weather-report&gt;
</textual></programlisting><para class="po-block e168 e168"><textual class="po-textual">In Java, a simple class with a compator interface would convert the temperature units properly.
With XML technologies you won't be able to get the right result;
an inadmissible fact face to other technologies that are able to address this issue.
Actually, although there are classes of applications where XML is unmarshalled to objects of another language that takes the relay to address
this issue, other classes of applications that relies on the XML data model (</textual><xref class="po-milestone e169 e169" linkend="XDM"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) such as XSLT and XQuery can't go without such data types</textual><footnote class="po-popup e170 e170"><para class="po-block e171 e171"><textual class="po-textual">It might be possible to create the target XML result with XQuery, but not to operate the input XDM properly as expected
if it doesn't support such data types. Such a query would be like a procedure aside from the typed data, whereas ASL can define
a type where the datas and the behaviour are bundled together, like in OO designs.</textual></para></footnote><textual class="po-textual">.
The environment where typed datas are exposed in surface has to play a fundamental role: if OO languages are able to process them,
native XML languages (XSLT, XQuery, Active Tags) should support them as well.</textual></para><para class="po-block e172 e172"><textual class="po-textual">The Active Schema Language supplies means to define data types.
As expected after validation, an </textual><emphasis class="po-inline e173 e173"><textual class="po-textual">active sheet</textual></emphasis><textual class="po-textual"> will be able to process the actual typed datas.
With the help of XCL, we are able to augment the amount of informations of an XML document the way we like:</textual></para><programlisting class="po-block e174 e174" xml:space="preserve"><textual class="po-textual">
&lt;asl:active-schema
    xmlns:xcl="http://ns.inria.org/active-tags/xcl"
    xmlns:asl="http://ns.inria.org/active-schema"
    xmlns:xs="http://www.w3.org/2001/XMLSchema-datatypes"
    target=""
&gt;

  &lt;!--the root element of a weather report--&gt;
  &lt;asl:element name="weather-report" root="always"&gt;
    &lt;asl:sequence&gt;
      &lt;asl:element
          ref-elem="city"
          min-occurs="1"
          max-occurs="unbounded"/&gt;
    &lt;/asl:sequence&gt;
  &lt;/asl:element&gt;

  &lt;!--a &lt;city&gt; contains only attributes--&gt;
  &lt;asl:element name="city"&gt;
    &lt;asl:attribute name="name" ref-type="xs:string"/&gt;
    &lt;!--the @temp attribute refers to our custom type--&gt;
    &lt;asl:attribute name="temp" ref-type="temperature"/&gt;
    &lt;asl:attribute name="unit"&gt;
      &lt;asl:text value="Â°C"/&gt;
      &lt;asl:text value="Â°F"/&gt;
    &lt;/asl:attribute&gt;
  &lt;/asl:element&gt;

  &lt;!--#temperature is our custom type
         it will build a typed data based on a #xs:decimal--&gt;
  &lt;asl:type name="temperature" base="xs:decimal" init="{.}"&gt;
    &lt;!--asl:element() refers to the current element, actually a &lt;city&gt;--&gt;
    &lt;xcl:if test="{ asl:element()/@unit='Â°F' }"&gt;
      &lt;xcl:then&gt;
        &lt;!--if @unit="Â°F", the value of the typed data is updated
            $asl:data is the structure bound to the attribute that handles
            the current typed data
            "." is the current data, an #xs:decimal--&gt;
        &lt;xcl:update
            referent="{ $asl:data }"
            operand="{ (value(.) - 32) * 5 div 9 }"/&gt;
      &lt;/xcl:then&gt;
    &lt;/xcl:if&gt;
  &lt;/asl:type&gt;

&lt;/asl:active-schema&gt;
</textual></programlisting><para class="po-block e175 e175"><textual class="po-textual">The Active Schema Language (ASL) can defines content models and data types like other schema technologies, and also unlike them !
In the above instance, the typed data that will be bound to the attribute will vary according to the temperature unit used in the XML input document.
The following </textual><emphasis class="po-inline e176 e176"><textual class="po-textual">active sheet</textual></emphasis><textual class="po-textual"> will sort our weather report correctly:</textual></para><programlisting class="po-block e177 e177" xml:space="preserve"><textual class="po-textual">
&lt;xcl:active-sheet
    xmlns:xcl="http://ns.inria.org/active-tags/xcl"
    xmlns:asl="http://ns.inria.org/active-schema"&gt;

  &lt;xcl:parse
      name="wr"
      source="weather-report.xml"/&gt;
  &lt;asl:parse-schema
      name="wr-schema"
      source="weather-report.asl"/&gt;
  &lt;!--the "augment" attribute indicates to bind typed datas to XML items in the XDM--&gt;
  &lt;asl:validate
      schema="{ $wr-schema }"
      node="{ $wr }"
      augment="yes"
      deep="yes"/&gt;
  &lt;xcl:echo
      value="List of cities, sorted in temperature order:"/&gt;
  &lt;xcl:for-each
      name="city"
      select="{ xcl:sort( $wr/*/city, @temp ) }"&gt;
    &lt;xcl:echo
        value="{ $city/@temp }{ $city/@unit } { $city/@name }"/&gt;
  &lt;/xcl:for-each&gt;

&lt;/xcl:active-sheet&gt;
</textual></programlisting><para class="po-block e178 e178"><textual class="po-textual">In the result, we notice that the attribute value remains the same, whereas the bound typed data was involved in the sort operation:</textual></para><programlisting class="po-block e179 e179" xml:space="preserve"><textual class="po-textual">
List of cities, sorted in temperature order:
32Â°F Berlin
19Â°C Paris
68Â°F London
22Â°C Rome
23Â°C Madrid
</textual></programlisting><para class="po-block e180 e180"><textual class="po-textual">Notice that as explained in the foundations of the system, the engine could also be launched with a custom catalog that refer to our schema;
the </textual><code class="po-atom e181 e181"><textual class="po-textual">&lt;asl:parse-schema&gt;</textual></code><textual class="po-textual"> instruction would then be discarded,
and the </textual><code class="po-atom e182 e182"><textual class="po-textual">&lt;asl:validate&gt;</textual></code><textual class="po-textual"> instruction wouldn't refer to it.</textual></para><para class="po-block e183 e183"><textual class="po-textual">To go further, we could also imagine another semantic data type that would handle a temperature followed immediately with its scale:</textual></para><programlisting class="po-block e184 e184" xml:space="preserve"><textual class="po-textual">&lt;city name="London" temp="68Â°F"/&gt;</textual></programlisting><para class="po-block e185 e185"><textual class="po-textual">...and why not allow a mix of the 2 formats in the same document ? ASL support as well this type and types expressed in terms of a choice between several other candidate types.</textual></para><para class="po-block e186 e186"><textual class="po-textual">Those variants are also available at the RefleX web site. The reader is invited to consult the Active Schema Language specification for further informations about semantic data types and polymorphic data types.</textual></para></section><section class="po-hcontainer e187 e187"><title class="po-block e188 e188"><textual class="po-textual">Mixins, or collecting schema flavors</textual></title><para class="po-block e189 e189"><textual class="po-textual">Schema mixins can be understand as the ability to mix several schemas. Several solutions, tools, and techniques are already available:</textual></para><itemizedlist class="po-table e190 e190"><listitem class="po-container e191 e191"><para class="po-block e192 e192"><xref class="po-milestone e193 e193" linkend="NVDL"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> (Namespace-based Validation Dispatching Language) consist on separating the input document to validate
according to the namespaces encountered and validating each chunk with the appropriate schema.
Although several different schema technologies can be involved, for example Relax NG + W3C XML Schema,
each will act on a single namespace URI separately.</textual></para></listitem><listitem class="po-container e194 e194"><para class="po-block e195 e195"><textual class="po-textual">W3C XML Schema has a mechanism for importing and including other pieces of schema.
But those external parts must be themselves W3C XML Schema.</textual></para></listitem><listitem class="po-container e196 e196"><para class="po-block e197 e197"><textual class="po-textual">Schematron can be embedded inside a W3C XML Schema, but they are not helping each other.
Each does its job independently of the other.</textual></para></listitem><listitem class="po-container e198 e198"><para class="po-block e199 e199"><xref class="po-milestone e200 e200" linkend="MSV"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> is a Java tool that makes various schema languages converging to a common representation.
This allows the same engine to work with DTD, W3C XML Schema, and Relax NG.</textual></para></listitem><listitem class="po-container e201 e201"><para class="po-block e202 e202"><xref class="po-milestone e203 e203" linkend="DSDLp9"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> is a draft that brings data types and namespace URIs to DTD. But it is an extension to the DTD language.</textual></para></listitem><listitem class="po-container e204 e204"><para class="po-block e205 e205"><textual class="po-textual">Relax NG and ASL (as shown in the previous sections) can use W3C XML Schema datatypes.</textual></para></listitem></itemizedlist><para class="po-block e206 e206"><textual class="po-textual">In all that cases, schemas mixins are partially supported. We can't in the same namespace design two parts of a schema with two different schema technologies. What does it serves for ? Well, some people are addicted to DTDs that after all are part of the XML specifications, and DTD content models are in some cases powerful enough. So why moving to W3C XML Schema ? Perhaps to gain a little in expressivity, or to take the benefits of data types. However, even for this last reason, DTD are still used, the more often simply because they are already written. So, we expect from schema mixins a deeper entanglement of several schema technologies.</textual></para><para class="po-block e207 e207"><textual class="po-textual">Let's take back our previous example: a compatible schema could be also expressed with a DTD:</textual></para><programlisting class="po-block e208 e208" xml:space="preserve"><textual class="po-textual">
&lt;!--FILE: weather-report-legacy.dtd--&gt;
&lt;!ELEMENT weather-report (city)+&gt;
&lt;!ELEMENT city EMPTY&gt;
&lt;!ATTLIST city name CDATA #REQUIRED
               temp CDATA #REQUIRED
               unit CDATA #REQUIRED&gt;
</textual></programlisting><para class="po-block e209 e209"><textual class="po-textual">The constraints that has been relaxed in this DTD are:</textual></para><itemizedlist class="po-table e210 e210"><listitem class="po-container e211 e211"><para class="po-block e212 e212"><textual class="po-textual">the temperature is not numeric</textual></para></listitem><listitem class="po-container e213 e213"><para class="po-block e214 e214"><textual class="po-textual">the unit can't be expressed with an enumeration of values because Â°C and Â°F are not valid XML tokens</textual></para></listitem><listitem class="po-container e215 e215"><para class="po-block e216 e216"><textual class="po-textual">the relationship between Â°C and Â°F can't be expressed</textual></para></listitem></itemizedlist><para class="po-block e217 e217"><textual class="po-textual">As seen previously, we can design apart with ASL the expected types:</textual></para><programlisting class="po-block e218 e218" xml:space="preserve"><textual class="po-textual">
&lt;!--FILE: weather-report-datatypes.asl--&gt;
&lt;asl:active-schema
    xmlns:xcl="http://ns.inria.org/active-tags/xcl"
    xmlns:asl="http://ns.inria.org/active-schema"
    xmlns:xs="http://www.w3.org/2001/XMLSchema-datatypes"
    target=""
&gt;

  &lt;!--#temp-units is the type for temperature units--&gt;
  &lt;asl:type name="temp-units"&gt;
    &lt;asl:choice&gt;
      &lt;asl:text value="Â°C"/&gt;
      &lt;asl:text value="Â°F"/&gt;
    &lt;/asl:choice&gt;
  &lt;/asl:element&gt;

  &lt;!--#temperature is the type introduced in the previous section--&gt;
  &lt;asl:type name="temperature" base="xs:decimal" init="{.}"&gt;
    &lt;!--asl:element() refers to the current element, actually a &lt;city&gt;--&gt;
    &lt;xcl:if test="{ asl:element()/@unit='Â°F' }"&gt;
      &lt;xcl:then&gt;
        &lt;!--if @unit="Â°F", the value of the typed data is updated
            $asl:data is the structure bound to the attribute that handles
            the current typed data
            "." is the current data, an #xs:decimal--&gt;
        &lt;xcl:update
            referent="{ $asl:data }"
            operand="{ (value(.) - 32) * 5 div 9 }"/&gt;
      &lt;/xcl:then&gt;
    &lt;/xcl:if&gt;
  &lt;/asl:type&gt;

&lt;/asl:active-schema&gt;
</textual></programlisting><para class="po-block e219 e219"><textual class="po-textual">The last piece of the puzzle is to "patch" the DTD with ASL. For this purpose, a third schema specifies how to override the definitions of the DTD:</textual></para><programlisting class="po-block e220 e220" xml:space="preserve"><textual class="po-textual">
&lt;!--FILE: weather-report-master.asl--&gt;
&lt;asl:active-schema
    xmlns:xcl="http://ns.inria.org/active-tags/xcl"
    xmlns:asl="http://ns.inria.org/active-schema"
    xmlns:xs="http://www.w3.org/2001/XMLSchema-datatypes"
    target=""
&gt;

  &lt;!--redefine only what needed--&gt;
  &lt;asl:element name="city"&gt;
    &lt;asl:attribute name="temp" ref-type="temperature"/&gt;
    &lt;asl:attribute name="unit" ref-type="temp-units"/&gt;
    &lt;!--other definitions are preserved--&gt;
    &lt;asl:apply-definition/&gt;
  &lt;/asl:element&gt;

&lt;/asl:active-schema&gt;
</textual></programlisting><para class="po-block e221 e221"><textual class="po-textual">Of course, the two ASL schemas could be merged in a single schema,
but having two shemas allow a rather good independence between the definitions of the custom types and their usages (the patch operation).</textual></para><para class="po-block e222 e222"><textual class="po-textual">As explained previously, an Active Catalog is used to declare the relevant schemas:</textual></para><programlisting class="po-block e223 e223" xml:space="preserve"><textual class="po-textual">&lt;cat:catalog
    xmlns:cat="http://ns.inria.org/active-catalog"
    xmlns:asl="http://ns.inria.org/active-schema"&gt;
    &lt;!--if our XML structure had a namespace URI,
        the name attribute below would contain it litteraly--&gt;
    &lt;cat:resource name="" uri="weather-report-master.asl" selector="asl:schema"/&gt;
    &lt;cat:resource name="" uri="weather-report-datatypes.asl" selector="asl:schema"/&gt;
    &lt;!--asl:schema is the selector for all kind of schemas: DTD, ASL, W3C XML Schema,
    Relax NG, others --&gt;
    &lt;cat:resource name="" uri="weather-report-legacy.dtd" selector="asl:schema"/&gt;
&lt;/cat:catalog&gt;
</textual></programlisting><para class="po-block e224 e224"><textual class="po-textual">We have already seen that an </textual><emphasis class="po-inline e225 e225"><textual class="po-textual">active sheet</textual></emphasis><textual class="po-textual"> that performs a
validation don't need to refer to a parsed schema: the engine will lookup in its catalogs for
the relevant resources. With RefleX, the command line interface and the servlet allow to run
an </textual><emphasis class="po-inline e226 e226"><textual class="po-textual">active sheets</textual></emphasis><textual class="po-textual"> with a given set of catalogs.
Notice that the order where the resources appear is important: the definitions in the master
schema mask those in the legacy DTD. This is a strategy proper to schema lookup, and other
kind of resources (modules) have their own lookup strategy. Details are available in the
Active Catalog specification.</textual></para><para class="po-block e227 e227"><textual class="po-textual">Other features are available: for example, before applying or after applying the definitions of the DTD,
some content models might be prepend or append to the content model of the DTD if needed.
But a more complex refactorisation of the content model expressed in the DTD wouldn't be possible without overwriting it entirely.</textual></para><para class="po-block e228 e228"><textual class="po-textual">Unlike the previous examples, mixins are in progress in ASL and are not covered by the implementation.</textual></para><para class="po-block e229 e229"><textual class="po-textual">Basically, they work like imports and includes in W3C XML Schema but it demonstrates clearly that a system based on schema cooperation allow to deal with legacy schemas.
Moreover, this is a not intrusive technique unlike ISO/DSDL part 9 mentioned earlier that require to rewrite DTD interpreters.
Additionally, with the help of catalogs, we have a schema machinery that prefer to rely on dedicated components rather than trying to do everything itself.</textual></para></section><section class="po-hcontainer e230 e230"><title class="po-block e231 e231"><textual class="po-textual">Hyperschemas, or validating high-level XML components</textual></title><para class="po-block e232 e232"><textual class="po-textual">In the same way that there is a Relax NG schema for Relax NG, a W3C XML Schema schema for W3C XML Schema, let's try to write the ASL schema of ASL.</textual></para><para class="po-block e233 e233"><textual class="po-textual">An element definition is composed of attribute definitions or references, choices, sequences, etc. Let's start to write it:</textual></para><programlisting class="po-block e234 e234" xml:space="preserve"><textual class="po-textual">
&lt;asl:active-schema
    xmlns:asl="http://ns.inria.org/active-schema"
    xmlns:xs="http://www.w3.org/2001/XMLSchema-datatypes"
    target="asl"
&gt;

  &lt;asl:element name="asl:element"&gt;
    &lt;asl:attribute name="name" ref-type="xs:string"/&gt;
    &lt;asl:choice min-occurs="0" max-occurs="unbounded"&gt;
      &lt;asl:element ref-elem="asl:attribute"/&gt;
      &lt;asl:element ref-elem="asl:choice"/&gt;
      &lt;asl:element ref-elem="asl:sequence"/&gt;
      &lt;!--other stuff here--&gt;
    &lt;/asl:choice&gt;
  &lt;/asl:element&gt;

&lt;/asl:active-schema&gt;
</textual></programlisting><para class="po-block e235 e235"><textual class="po-textual">However, we have seen that ASL doesn't work alone: we can inject foreign instructions that the engine will use to build the content model.
We could then append in the </textual><code class="po-atom e236 e236"><textual class="po-textual">&lt;asl:choice&gt;</textual></code><textual class="po-textual"> a reference to the XCL namespace, which can be written like this:</textual></para><programlisting class="po-block e237 e237" xml:space="preserve"><textual class="po-textual">
      &lt;!--any element in the XCL namespace--&gt;
      &lt;asl:element ref-ns="xcl"
                      xmlns:xcl="http://ns.inria.org/active-tags/xcl"/&gt;
</textual></programlisting><para class="po-block e238 e238"><textual class="po-textual">...but it is not enough. In fact, since we don't know how the user will define its content model, almost anything should be allowed:
we can't make assumptions about which tag will help him and which one won't. The content model would become:</textual></para><programlisting class="po-block e239 e239" xml:space="preserve"><textual class="po-textual">
  &lt;asl:element name="asl:element"&gt;
    &lt;asl:attribute name="name" ref-type="xs:string"/&gt;
    &lt;asl:choice min-occurs="0" max-occurs="unbounded"&gt;
      &lt;asl:element ref-ns="#any"/&gt;
    &lt;/asl:choice&gt;
  &lt;/asl:element&gt;
</textual></programlisting><para class="po-block e240 e240"><textual class="po-textual">...which means basically: well, everything is accepted. Not so useful.
This is the downside of the system: since almost everything is dynamic, we can't predict which tag will come.
Yet some are acceptable, others aren't.</textual></para><para class="po-block e241 e241"><textual class="po-textual">On the opposite, we do know after running the content model (not this one but those with the if-then-else statement shown in the chapter about dynamicity) that the realization of the schema must conform to the schema that we started to write above (not those with ref-ns="#any", but the one before). Unfortunately, it is designed to validate XML (its static representation), not to validate the underlying software components (its dynamic representation): element definitions, sequences, choices are software components whose relationships are expressed with XML tags. We know how to express constraints on XML tags, but we don't know how to express constraints on such pluggable components because although they are exposed as XML tags they are no longer XML tags at runtime.</textual></para><para class="po-block e242 e242"><textual class="po-textual">ASL doesn't face this kind of validation. We could imagine schemas that would act on a higher dimension of validation -hyperschemas- and schemas that would act on both level, multidimensional schemas. This is a funny thought that was encountered while designing Active Tags, and that of course can be generalized for components that are not related to schemas: in many cases, the author had to express components contents in terms of parts that are static and validable with a schema, and parts that are dynamic and validable with an hyperschema.</textual></para><para class="po-block e243 e243"><textual class="po-textual">So far, no acceptable solution was found.</textual></para></section><section class="po-hcontainer e244 e244"><title class="po-block e245 e245"><textual class="po-textual">Conclusion and perspectives</textual></title><para class="po-block e246 e246"><textual class="po-textual">Hyperschemas don't have obviously a practical field of application out of the scope of Active Tags. However, they pose the right questions to similar systems that would need more flexibility and dynamicity in software components assembly.</textual></para><para class="po-block e247 e247"><textual class="po-textual">On the opposite, the other use cases exposed (dynamic content models, semantic typed data, and mixins) are more pragmatic since they address elegantly and efficiently common issues in schema technologies.</textual></para><para class="po-block e248 e248"><textual class="po-textual">We have seen that active content models enhance the expressiveness of schemas, that if a data has some meaning for you, it should have some meaning too for the applications that process it, and that mixins allow DTD-nostalgic people to leverage their usage.</textual></para><para class="po-block e249 e249"><textual class="po-textual">Through those few manifestations of "schemas mashups", we have to admit that there are better solutions than running schemas alone. Actually, ASL is not so different from other schema technologies (DTD, W3C XML Schema, Relax NG, Schematron) but immensely more powerful. By extension, ASL should opens the perspective for declarative languages in general: Active Tags combine a bunch of XML technologies that would help significantly the designers of runnable markup languages.</textual></para></section><bibliography class="po-hcontainer e250 e250"><title class="po-block e251 e251"><textual class="po-textual">Bibliography</textual></title><bibliomixed class="po-block e252 e252" xml:id="ActiveCatalog" xreflabel="Active Catalog"><textual class="po-textual">Poulard, P. </textual><emphasis class="po-inline e253 e253"><textual class="po-textual">Active Catalog</textual></emphasis><textual class="po-textual">.</textual><link class="po-inline e254 e254" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://ns.inria.fr/active-tags/active-catalog/active-catalog.html</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e255 e255" xml:id="ActiveTags" xreflabel="Active Tags"><textual class="po-textual">Poulard, P. </textual><emphasis class="po-inline e256 e256"><textual class="po-textual">Active Tags technologies</textual></emphasis><textual class="po-textual">.</textual><link class="po-inline e257 e257" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://ns.inria.org/active-tags/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e258 e258" xml:id="ASL" xreflabel="ASL"><textual class="po-textual">Poulard, P. </textual><emphasis class="po-inline e259 e259"><textual class="po-textual">The Active Schema Language</textual></emphasis><textual class="po-textual">.</textual><link class="po-inline e260 e260" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://ns.inria.fr/active-tags/active-schema/active-schema.html</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e261 e261" xml:id="DSDLp9" xreflabel="ISO/DSDL part 9"><emphasis class="po-inline e262 e262"><textual class="po-textual">DSDL (Document Schema Definition Languages) â Part 9: Namespace- and datatype-aware DTDs</textual></emphasis><textual class="po-textual">, ISO/IEC CD 19757-9.</textual><link class="po-inline e263 e263" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://dsdl.org/dsdl-9-rev061103.pdf</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e264 e264" xml:id="DTLL" xreflabel="DTLL"><textual class="po-textual">Tennison J. (2006). </textual><emphasis class="po-inline e265 e265"><textual class="po-textual">Datatypes for XML: the Datatyping Library Language (DTLL)</textual></emphasis><textual class="po-textual">. In Proceedings of Extreme Markup Languages, MontrÃ©al, Canada. </textual><link class="po-inline e266 e266" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.idealliance.org/papers/extreme/proceedings/html/2006/Tennison01/EML2006Tennison01.html</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e267 e267" xml:id="Jelly" xreflabel="Jelly"><emphasis class="po-inline e268 e268"><textual class="po-textual">Jelly: Executable XML</textual></emphasis><textual class="po-textual">. </textual><link class="po-inline e269 e269" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://jakarta.apache.org/commons/jelly/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e270 e270" xml:id="JSP" xreflabel="JSP"><emphasis class="po-inline e271 e271"><textual class="po-textual">JSP: JavaServer Pages Technology</textual></emphasis><textual class="po-textual">. </textual><link class="po-inline e272 e272" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://java.sun.com/products/jsp/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e273 e273" xml:id="JSTL" xreflabel="JSTL"><emphasis class="po-inline e274 e274"><textual class="po-textual">JSTL: JavaServer Pages Standard Tag Library</textual></emphasis><textual class="po-textual">. </textual><link class="po-inline e275 e275" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://java.sun.com/products/jsp/jstl/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e276 e276" xml:id="Murata" xreflabel="Murata"><textual class="po-textual">Murata, M. (2002). </textual><emphasis class="po-inline e277 e277"><textual class="po-textual">Principles of Schema Languages</textual></emphasis><textual class="po-textual">. In H. Maruyama (Ed.), </textual><emphasis class="po-inline e278 e278"><textual class="po-textual">XML and Java (2nd ed.)</textual></emphasis><textual class="po-textual"> (pp. 592-601). Boston, MA: Pearson Education.</textual></bibliomixed><bibliomixed class="po-block e279 e279" xml:id="MSV" xreflabel="MSV"><textual class="po-textual">Kawaguchi, K. </textual><emphasis class="po-inline e280 e280"><textual class="po-textual">Sun Multi-Schema Validator</textual></emphasis><textual class="po-textual">. </textual><link class="po-inline e281 e281" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">https://msv.dev.java.net/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e282 e282" xml:id="NVDL" xreflabel="NVDL"><emphasis class="po-inline e283 e283"><textual class="po-textual">NVDL: Namespace-based Validation Dispatching Language</textual></emphasis><textual class="po-textual">, ISO/IEC 19757-4 NVDL. </textual><link class="po-inline e284 e284" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.nvdl.org/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e285 e285" xml:id="XMLCatalogs" xreflabel="OASIS XML Catalogs"><textual class="po-textual">Walsh, N. (2005). </textual><emphasis class="po-inline e286 e286"><textual class="po-textual">XML Catalogs</textual></emphasis><textual class="po-textual">, OASIS Standard V1.1.</textual><link class="po-inline e287 e287" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.oasis-open.org/committees/download.php/14809/xml-catalogs.html</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e288 e288" xml:id="Poulard" xreflabel="Poulard"><textual class="po-textual">Poulard, P. (2007). </textual><emphasis class="po-inline e289 e289"><textual class="po-textual">Active Tags: Mastering XML with XML</textual></emphasis><textual class="po-textual">. In Proceedings of Extreme Markup Languages, MontrÃ©al, Canada. </textual><link class="po-inline e290 e290" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.idealliance.org/papers/extreme/proceedings/html/2007/Poulard01/EML2007Poulard01.html</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e291 e291" xml:id="RefleX" xreflabel="RefleX"><textual class="po-textual">Poulard, P. </textual><emphasis class="po-inline e292 e292"><textual class="po-textual">RefleX: An Active Tags engine in Java</textual></emphasis><textual class="po-textual">.</textual><link class="po-inline e293 e293" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://reflex.gforge.inria.fr/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e294 e294" xml:id="RelaxNG" xreflabel="Relax NG"><emphasis class="po-inline e295 e295"><textual class="po-textual">Relax NG: Regular-grammar-based validation</textual></emphasis><textual class="po-textual">, ISO/IEC FDIS 19757-2.</textual><link class="po-inline e296 e296" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.y12.doe.gov/sgml/sc34/document/0362_files/relaxng-is.pdf</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e297 e297" xml:id="SCXML" xreflabel="SCXML"><emphasis class="po-inline e298 e298"><textual class="po-textual">SCXML: State Machine Notation for Control Abstraction</textual></emphasis><textual class="po-textual">, W3C Working Draft. </textual><link class="po-inline e299 e299" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/scxml/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e300 e300" xml:id="Schematron" xreflabel="Schematron"><textual class="po-textual">Jelliffe, R. </textual><emphasis class="po-inline e301 e301"><textual class="po-textual">Schematron: A language for making assertions about patterns found in XML documents</textual></emphasis><textual class="po-textual">.</textual><link class="po-inline e302 e302" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.schematron.com/spec.html</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e303 e303" xml:id="UEL" xreflabel="UEL"><emphasis class="po-inline e304 e304"><textual class="po-textual">UEL: Unified Expression Language</textual></emphasis><textual class="po-textual">. </textual><link class="po-inline e305 e305" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://java.sun.com/products/jsp/reference/techart/unifiedEL.html</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e306 e306" xml:id="WUnit" xreflabel="WUnit"><textual class="po-textual">Poulard, P. </textual><emphasis class="po-inline e307 e307"><textual class="po-textual">WUnit: Unit tests for Web applications</textual></emphasis><textual class="po-textual">. </textual><link class="po-inline e308 e308" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://reflex.gforge.inria.fr/wunit.html</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e309 e309" xml:id="WXS" xreflabel="W3C XML Schema"><emphasis class="po-inline e310 e310"><textual class="po-textual">XML Schema Part 1: Structures Second Edition</textual></emphasis><textual class="po-textual">, W3C Recommendation.</textual><link class="po-inline e311 e311" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xmlschema-1/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e312 e312" xml:id="WXS-D" xreflabel="W3C XML Schema: Datatypes"><emphasis class="po-inline e313 e313"><textual class="po-textual">XML Schema Part 2: Datatypes (2nd ed.)</textual></emphasis><textual class="po-textual">, W3C Recommendation. </textual><link class="po-inline e314 e314" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xmlschema-2/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e315 e315" xml:id="WXS-11" xreflabel="W3C XML Schema 1.1"><emphasis class="po-inline e316 e316"><textual class="po-textual">W3C XML Schema Definition Language (XSD) 1.1 Part 1: Structures</textual></emphasis><textual class="po-textual">, W3C Working Draft.</textual><link class="po-inline e317 e317" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xmlschema11-1/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e318 e318" xml:id="XCL" xreflabel="XCL"><textual class="po-textual">Poulard, P. </textual><emphasis class="po-inline e319 e319"><textual class="po-textual">The XML Control Language</textual></emphasis><textual class="po-textual">.</textual><link class="po-inline e320 e320" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://ns.inria.org/active-tags/xcl/xcl.html</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e321 e321" xml:id="XDM" xreflabel="XDM"><emphasis class="po-inline e322 e322"><textual class="po-textual">XQuery/XPath Data Model (XDM) 1.0</textual></emphasis><textual class="po-textual">, W3C Recommendation. </textual><link class="po-inline e323 e323" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xpath-datamodel/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e324 e324" xml:id="XPath" xreflabel="XPath"><emphasis class="po-inline e325 e325"><textual class="po-textual">XML Path Language</textual></emphasis><textual class="po-textual">, W3C Recommendation. </textual><link class="po-inline e326 e326" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xpath</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e327 e327" xml:id="XProc" xreflabel="XProc"><emphasis class="po-inline e328 e328"><textual class="po-textual">XProc: An XML Pipeline Language</textual></emphasis><textual class="po-textual">, W3C Working Draft.</textual><link class="po-inline e329 e329" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/2006/WD-xproc-20061117/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e330 e330" xml:id="XQuery" xreflabel="XQuery"><emphasis class="po-inline e331 e331"><textual class="po-textual">XQuery 1.0: An XML Query Language</textual></emphasis><textual class="po-textual">, W3C Recommendation. </textual><link class="po-inline e332 e332" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xquery/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e333 e333" xml:id="XSLT" xreflabel="XSLT"><textual class="po-textual">Clark, J. (1999). </textual><emphasis class="po-inline e334 e334"><textual class="po-textual">XSL Transformations (XSLT) 1.0</textual></emphasis><textual class="po-textual">, W3C Recommendation.</textual><link class="po-inline e335 e335" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xslt</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e336 e336" xml:id="XUnit" xreflabel="XUnit"><textual class="po-textual">Poulard, P. </textual><emphasis class="po-inline e337 e337"><textual class="po-textual">XUnit: XML-based unit tests</textual></emphasis><textual class="po-textual">. </textual><link class="po-inline e338 e338" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://reflex.gforge.inria.fr/xunit.html</textual></link><textual class="po-textual">.</textual></bibliomixed></bibliography></article></classedDocument>