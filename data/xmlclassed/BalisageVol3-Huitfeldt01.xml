<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.2"><title class="po-block e1 e1"><textual class="po-textual">Markup Meaning and Mereology</textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">Balisage: The Markup Conference 2009</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 11 - 14, 2009</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual"> When marking up a document we chop it up into elements. Elements are parts of the
        document, some of which contain further elements, i.e., have parts of their own. Thus, the
        part-whole relation is central to the way markup works.</textual></para><para class="po-block e8 e8"><textual class="po-textual">Mereology is precisely the theory of part-whole relationships, but has not yet found
        much application in markup theory. In this paper we provide a sketch of how mereology, in
        the form more specifically of Nelson Goodman's Calculus of Individuals, might be applied to
        markup.</textual></para><para class="po-block e9 e9"><textual class="po-textual">We discuss ways of identifying the individuals of marked-up documents and of referencing
        these individuals, and we sketch some ways of applying the calculus to the problem of
        propagation of properties in documents. </textual></para></abstract><author class="po-record e10 e10"><personname class="po-record e11 e11"><firstname class="po-field e12 e12"><textual class="po-textual">Claus</textual></firstname><surname class="po-field e13 e13"><textual class="po-textual">Huitfeldt</textual></surname></personname><personblurb class="po-container e14 e14"><para class="po-block e15 e15"><textual class="po-textual">Claus Huitfeldt is Associate Professor at the Department of Philosophy of the
          University of Bergen. His research interests are within philosophy of language, philosophy
          of technology, text theory, editorial philology and markup theory. He was founding
          Director (1990-2000) of the Wittgenstein Archives at the University of Bergen, for which
          he developed the text encoding system MECS as well as the editorial methods for the
          publication of Wittgenstein's Nachlass - The Bergen Electronic Edition (Oxford University
          Press, 2000). He was active in the Text Encoding Initiative (TEI) since 1991, and was
          centrally involved in the foundation of the TEI Consortium. Huitfeldt was Research
          Director (2000-2002) of Aksis (Section for Culture, Language and Information Technology at
          the Bergen University Research Foundation). </textual></para></personblurb><affiliation class="po-record e16 e16"><jobtitle class="po-field e17 e17"><textual class="po-textual">Associate professor</textual></jobtitle><orgname class="po-block e18 e18"><textual class="po-textual">University of Bergen, Norway</textual></orgname></affiliation><email class="po-field e19 e19"><textual class="po-textual">claus.huitfeldt@fof.uib.no</textual></email></author><author class="po-record e20 e20"><personname class="po-record e21 e21"><firstname class="po-field e22 e22"><textual class="po-textual">C. M.</textual></firstname><surname class="po-field e23 e23"><textual class="po-textual">Sperberg-McQueen</textual></surname></personname><personblurb class="po-container e24 e24"><para class="po-block e25 e25"><textual class="po-textual">Sperberg-McQueen, C. M. is an independent consultant for Black Mesa Technologies LLC.
          He currently serves as an editor of the W3C XML Schema Definition Language (XSD)
        1.1.</textual></para></personblurb><affiliation class="po-record e26 e26"><orgname class="po-block e27 e27"><textual class="po-textual">Black Mesa Technologies LLC</textual></orgname></affiliation><email class="po-field e28 e28"><textual class="po-textual">cmsmcq@blackmesatech.com</textual></email></author><author class="po-record e29 e29"><personname class="po-record e30 e30"><firstname class="po-field e31 e31"><textual class="po-textual">Yves</textual></firstname><surname class="po-field e32 e32"><textual class="po-textual">Marcoux</textual></surname></personname><personblurb class="po-container e33 e33"><para class="po-block e34 e34"><textual class="po-textual">Yves Marcoux is a faculty member at EBSI, University of Montréal, since 1991. He is
          mainly involved in teaching and research activities in the field of document informatics.
          Prior to his appointment at EBSI, he has worked for 10 years in systems maintenance and
          development, in Canada, the U.S., and Europe. He obtained his Ph.D. in theoretical
          computer science from University of Montréal in 1991. His main research interests are
          document semantics, structured document implementation methodologies, and information
          retrieval in structured documents. Through GRDS, his research group at EBSI, he has been
          principal architect for the Governmental Framework for Integrated Document Management, a
          project funded by the National Archives of Québec and by the Québec Treasury Board.</textual></para></personblurb><affiliation class="po-record e35 e35"><jobtitle class="po-field e36 e36"><textual class="po-textual">Associate professor</textual></jobtitle><orgname class="po-block e37 e37"><textual class="po-textual">Université a Montréal, Canada</textual></orgname></affiliation><email class="po-field e38 e38"><textual class="po-textual">yves.marcoux@umontreal.ca</textual></email></author><legalnotice class="po-container e39 e39"><para class="po-block e40 e40"><textual class="po-textual">Copyright © 2009 by the authors.  Used with
  			permission.</textual></para></legalnotice></info><section class="po-hcontainer e41 e41" xml:id="intro"><title class="po-block e42 e42"><textual class="po-textual">Introduction</textual></title><para class="po-block e43 e43"><textual class="po-textual">XML documents consist of marked elements, which may in turn contain sequences of marked
      elements, etc. This hierarchy of elements is conveniently represented as a tree in which each
      node stands for an element, in which each arc between elements stand for a parent-child
      relationship, and in which the children of each node are ordered sequentially in accordance
      with their document order.</textual></para><para class="po-block e44 e44"><textual class="po-textual">While it is commonly the case that the generic identifier of an element is understood to
      ascribe a property to the element's content, that elements represented by nodes dominated by
      that element's node in the document tree are also understood to be contained by it, and that
      these nodes are understood to inherit the properties ascribed to their ancestor elements, none
      of this is always or necessarily the case. </textual></para><para class="po-block e45 e45"><textual class="po-textual">As we have pointed out elsewhere [</textual><xref class="po-milestone e46 e46" linkend="bielefeld"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], the parent-child
      relationship may be taken to indicate either a containment relationship, or a dominance
      relationship. Frequently these relationships coincide, and no harm is caused by not
      distinguishing them. When they do not coincide, however, the result may easily be confusing. </textual></para><para class="po-block e47 e47"><textual class="po-textual">One view of the structure of XML documents emphasizing the part-whole relationship is
      this: A document contains elements, i.e., parts. Some of these parts contain further elements,
      i.e., have parts of their own. The generic identifiers of elements ascribe properties to their
      own content and/or to the content of elements related to them by part-whole relationships. </textual></para><para class="po-block e48 e48"><textual class="po-textual">Mereology is precisely the theory of part-whole relationships. Even so, mereology does not
      seem to have found much application in markup theory until now. It may therefore be
      interesting to investigate whether the application of mereology may give insights relevant to
      the understanding of interpretation and processing of marked-up documents. </textual></para><para class="po-block e49 e49"><textual class="po-textual">It is sometimes said that XML provides a formal syntax for document representation, but no
      formal semantics for the interpretation or processing of this syntax. If mereology can be
      brought to bear on the ascription and propagation of properties and relations between parts of
      marked-up documents, it may help in providing a general approach to markup semantics. For
      example, the work presented here may turn out to be of direct relevance for the work on formal
      tag set descriptions and intertextual semantics specifications presented in [</textual><xref class="po-milestone e50 e50" linkend="balisage2009"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] and [</textual><xref class="po-milestone e51 e51" linkend="dh2009"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].</textual></para><para class="po-block e52 e52"><textual class="po-textual">Before we proceed, some words on the limitations of this paper are in place. First,
      although our focus is on XML, and although we mention other markup languages in passing, we
      believe that mereology deserves to be studied in relation to markup languages in general (such
      as XML, SGML, TexMecs, LMNL, and others) rather than XML only. We think so partly because
      application of mereology may be equally or more profitable when it comes to some non-XML
      markup systems, and partly because such broader studies might inspire modifications of
      — or alternatives to — any or all of these. We hope to come back to
      applications of mereology to markup more generally in future work. </textual></para><para class="po-block e53 e53"><textual class="po-textual">Second, the concept </textual><quote class="po-inline e54 e54"><textual class="po-textual">XML document</textual></quote><textual class="po-textual"> as used in this paper refers almost
      exclusively to XML in its serialized form. We do not explicitly attempt to apply mereology to
      XML documents considered as graphs of xPath nodes, Infoset items, or the like. </textual></para><para class="po-block e55 e55"><textual class="po-textual">Finally, we limit ourselves to an attempt to apply the so-called Calculus of Individuals,
      a mereological system worked out by Nelson Goodman [</textual><xref class="po-milestone e56 e56" linkend="Goodman1977"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] (initially
      in cooperation with Henry S. Leonard [</textual><xref class="po-milestone e57 e57" linkend="LeonardandGoodman1940"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]). As a further
      simplification, and in order to ensure focus, we will ignore XML attributes, entities,
      declarations, comments, processing instructions, and marked sections; in short, we will regard
      XML documents as consisting of elements and their content only . </textual></para></section><section class="po-hcontainer e58 e58" xml:id="coi"><title class="po-block e59 e59"><textual class="po-textual">The Calculus of Individuals</textual></title><para class="po-block e60 e60"><textual class="po-textual">The origins of mereology go back to ancient Greece, but it was taken up as a formal study
      and developed mathematically only early in the 20th century. Today, it is a well developed
      formal discipline, and there are a number of different mereological systems. The term
      mereology is sometimes used to refer to these formal calculi in particular, sometimes to
      formal as well as non-formalized theories of part-whole relationships in general [</textual><xref class="po-milestone e61 e61" linkend="Libardi1994"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, pp. 13–15].</textual></para><para class="po-block e62 e62"><textual class="po-textual">Early developments of formal mereology were largely motivated by scepticism towards set
      theory and the calculus of classes, and a desire to translate or </textual><quote class="po-inline e63 e63"><textual class="po-textual">reduce</textual></quote><textual class="po-textual"> all
      talk of abstract classes and their members to talk of concrete individuals and their parts.
      Mereology therefore came to be associated with a particular ontological stance, nominalism,
      and to be shunned by most adherents of other ontological views.</textual><footnote class="po-popup e64 e64"><para class="po-block e65 e65"><textual class="po-textual">Goodman, whose work we will take as our basis here, was a well known nominalist,
          however of a peculiar kind. For Goodman, nominalism did not consist in the rejection of
          abstract entities, or even of universals, but in the refusal to admit anything but
          individuals as values of variables.</textual></para><para class="po-block e66 e66"><textual class="po-textual">He strongly repudiated all talk of classes as </textual><quote class="po-inline e67 e67"><textual class="po-textual">incomprehensible</textual></quote><textual class="po-textual"> [</textual><xref class="po-milestone e68 e68" linkend="Goodman1977"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, pp. 25-26, </textual><xref class="po-milestone e69 e69" linkend="Goodman1972"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">,
          p. 156] and therefore philosophically suspect. He also worked hard to establish a
          foundation for mathematics replacing set theory with the calculus of individuals. But at
          the same time he had no qualms taking abstract objects such as </textual><quote class="po-inline e70 e70"><textual class="po-textual">qualia</textual></quote><textual class="po-textual"> as
          basic constituents of his own ontology [</textual><xref class="po-milestone e71 e71" linkend="Goodman1977"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, chapters IV
        ff].</textual></para></footnote></para><para class="po-block e72 e72"><textual class="po-textual">Such ontological considerations may or may not motivate, but do not in any way need to
      concern, our attempt to apply mereology to markup languages, however: later work in the field
      is generally taken to demonstrate that mereology and set theory may live merrily together,
      that in fact the one may be seen as an extension of the other, and that the adoption of
      mereology does not by itself commit one to any particular ontological stance.</textual><footnote class="po-popup e73 e73"><para class="po-block e74 e74"><quote class="po-inline e75 e75"><textual class="po-textual">...there is no necessary internal link between mereology and the philosophical
            position of nominalism. We may simply think of the former as a theory concerned with the
            analysis of parthood relations among whatever entities are allowed into the domain of
            discourse (including sets and other abstract entities, if one will).</textual></quote><textual class="po-textual"> [</textual><xref class="po-milestone e76 e76" linkend="CasatiVarzi1999"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]</textual></para></footnote><textual class="po-textual">
    </textual></para><para class="po-block e77 e77"><textual class="po-textual">The part-whole relationships that mereology studies are relationships between entities
      that are, in Goodman's terminology, called </textual><emphasis class="po-inline e78 e78"><textual class="po-textual">individuals</textual></emphasis><textual class="po-textual">. Generally
      speaking an individual may be any </textual><quote class="po-inline e79 e79"><textual class="po-textual">thing</textual></quote><textual class="po-textual"> in a very wide sense of the word
      — a concrete, an abstract, a universal or a particular — i.e., any object
      or entity of which something can be predicated. This is admittedly still pretty general, and
      more specific talk may be in order: As examples of individuals we may take stones, tables,
      chairs, animals and other medium-sized everyday objects; but if we like we may also populate
      our world with individuals such as molecules, atoms, electrons, quarks; or planets, stars and
      galaxies; or for that matter persons, visual after-images, mental images or sense data. If we
      believe in abstract objects we may include numbers, geometrical objects, concepts, etc., and
      according to some applications of mereology there may also be </textual><quote class="po-inline e80 e80"><textual class="po-textual">temporal</textual></quote><textual class="po-textual">
      individuals such as processes, events, and snippets of time. </textual></para><para class="po-block e81 e81"><textual class="po-textual"> Individuals need not be contiguous, neither in space nor in time. This is one of the
      principles of the Calculus of Individuals which has provoked some discussion. In its defence
      one may point to the fact that we actually do employ the notion of at least some such
      disconnected wholes in everyday language. Thus, to treat </textual><quote class="po-inline e82 e82"><textual class="po-textual">the land mass of Japan</textual></quote><textual class="po-textual">
      (or any geographic entity which includes two or more islands) as an individual may seem
      unobjectionable. However, according to another principle, the sum of any two individuals is
      always also an individual. This seems to force us to accept as individuals, i.e.,
        </textual><quote class="po-inline e83 e83"><textual class="po-textual">wholes</textual></quote><textual class="po-textual">, sums of randomly scattered parts such as </textual><quote class="po-inline e84 e84"><textual class="po-textual">Caesar's nose and the
        state of Utah</textual></quote><textual class="po-textual"> [</textual><xref class="po-milestone e85 e85" linkend="Goodman1972"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, p. 37].</textual><footnote class="po-popup e86 e86"><para class="po-block e87 e87"><textual class="po-textual">For an entertaining collection of other candidate sum individuals, see [</textual><xref class="po-milestone e88 e88" linkend="Fitzgerald"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].</textual></para></footnote><textual class="po-textual"> Goodman bites that bullet, while much of the ensuing debate has been concerned
      with attempts to find ways of distinguishing such scattered and arbitrary sums from more
        </textual><quote class="po-inline e89 e89"><textual class="po-textual">cohesive</textual></quote><textual class="po-textual"> or </textual><quote class="po-inline e90 e90"><textual class="po-textual">integral</textual></quote><textual class="po-textual"> individuals as wholes consisting of parts
      in a more intuitively satisfactory sense. </textual></para><para class="po-block e91 e91"><textual class="po-textual">A formal mereological theory takes conventional first-order predicate logic as its basis.
      We will use conventional modern logical notation for quantifiers, operators, predicates,
      variables and constants. More specifically, we will use (x) for universal and
      (∃x) for existential quantification over x; ¬ for negation, →
      for implication, ∨ for inclusive disjunction, ∧ for conjunction, ⇔ for
      equivalence, and = for identity. We use the small roman letters a, b, c... for constants, x,
      y, z... for variables, and upper roman letters A, B, C... for predicates. We will occasionally
      use the conventional abbreviation </textual><quote class="po-inline e92 e92"><textual class="po-textual">iff</textual></quote><textual class="po-textual"> for </textual><quote class="po-inline e93 e93"><textual class="po-textual">if and only if</textual></quote><textual class="po-textual">.</textual></para><para class="po-block e94 e94"><textual class="po-textual">The extension which mereology makes to this basis is very modest: In fact the extension
      consists in adding only one single primitive relation to the first-order system. This
      specifically </textual><quote class="po-inline e95 e95"><textual class="po-textual">mereological</textual></quote><textual class="po-textual">, primitive relation may be chosen from among the
      relations </textual><quote class="po-inline e96 e96"><textual class="po-textual">part of</textual></quote><textual class="po-textual">, </textual><quote class="po-inline e97 e97"><textual class="po-textual">proper part of</textual></quote><textual class="po-textual">, </textual><quote class="po-inline e98 e98"><textual class="po-textual">discrete from</textual></quote><textual class="po-textual">
      or </textual><quote class="po-inline e99 e99"><textual class="po-textual">overlapping with</textual></quote><textual class="po-textual">. As each of these relations may be defined in terms of any
      of the others, it does not matter much which one we chose as our undefined primitive.</textual><footnote class="po-popup e100 e100"><para class="po-block e101 e101"><textual class="po-textual">Equivalent systems (or rather, systems with only minimal and trivial differences) may
          be built whichever we choose as the primitive relation.</textual></para></footnote><textual class="po-textual"> With a hopefully obvious appeal to markup theorists, we will follow [</textual><xref class="po-milestone e102 e102" linkend="Goodman1977"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] in choosing </textual><quote class="po-inline e103 e103"><textual class="po-textual">overlap</textual></quote><textual class="po-textual"> for our primitive relation.</textual><footnote class="po-popup e104 e104"><para class="po-block e105 e105"><textual class="po-textual"> In [</textual><xref class="po-milestone e106 e106" linkend="LeonardandGoodman1940"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], Leonard and Goodman chose
            </textual><quote class="po-inline e107 e107"><textual class="po-textual">discrete from</textual></quote><textual class="po-textual"> as the primitive relation. A more common practice seems to
          be the choice of </textual><quote class="po-inline e108 e108"><textual class="po-textual">part</textual></quote><textual class="po-textual"> or </textual><quote class="po-inline e109 e109"><textual class="po-textual">proper part.</textual></quote></para></footnote><textual class="po-textual">
    </textual></para><para class="po-block e110 e110"><textual class="po-textual">Variables are taken to range over individuals only, and predicates are taken to ascribe
      properties of or relations between individuals. </textual></para><para class="po-block e111 e111"><textual class="po-textual">From a mereological point of view, two individuals </textual><emphasis class="po-inline e112 e112"><textual class="po-textual">overlap</textual></emphasis><textual class="po-textual"> iff they
      have some content in common. One consequence of this definition may briefly confuse markup
      specialists: since in an XML document a child element and its parent element have some content
      in common (everything contained by the child is also contained by the parent), it follows that
      in the sense introduced here the child and the parent </textual><emphasis class="po-inline e113 e113"><textual class="po-textual">overlap</textual></emphasis><textual class="po-textual">. That is,
      the term </textual><emphasis class="po-inline e114 e114"><textual class="po-textual">overlap</textual></emphasis><textual class="po-textual">, as used in the calculus of individuals, includes proper
      nesting or normal part/whole relations. </textual></para><para class="po-block e115 e115"><textual class="po-textual">Thus, if we think of XML elements as individuals consisting of stretches of consecutive
      character occurrences, and if we consider the following four cases (strictly speaking, the
      first line is not well formed XML and is included only for purposes of illustration):
      </textual><programlisting class="po-block e116 e116" xml:space="preserve"><textual class="po-textual">            &lt;s&gt;  &lt;q&gt;   &lt;/s&gt; &lt;/q&gt;
            &lt;s&gt;  &lt;q&gt;   &lt;/q&gt; &lt;/s&gt;
            &lt;q&gt;  &lt;s&gt;   &lt;/s&gt; &lt;/q&gt;
            &lt;s&gt;  &lt;/s&gt;  &lt;q&gt;  &lt;/q&gt;</textual></programlisting><textual class="po-textual">
      the first three cases exhibit an overlap between elements </textual><code class="po-atom e117 e117"><textual class="po-textual">s</textual></code><textual class="po-textual"> and </textual><code class="po-atom e118 e118"><textual class="po-textual">q</textual></code><textual class="po-textual">.
      Only in the last case do the two elements not overlap, i.e., they are discrete. In contrast,
      markup theorists would probably consider only the first case to be one of overlap.</textual></para><para class="po-block e119 e119"><textual class="po-textual">The </textual><emphasis class="po-inline e120 e120"><textual class="po-textual">overlap</textual></emphasis><textual class="po-textual"> operator is written </textual><code class="po-atom e121 e121"><textual class="po-textual">∘</textual></code><textual class="po-textual">. The following
      condition on </textual><code class="po-atom e122 e122"><textual class="po-textual">∘</textual></code><textual class="po-textual"> captures the intuitive notion of “having some content in
      common,” and we thus take it as an axiom:</textual><footnote class="po-popup e123 e123"><para class="po-block e124 e124"><textual class="po-textual">Numbers in the left margin give references to theorem and definition numbers in [</textual><xref class="po-milestone e125 e125" linkend="Goodman1977"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. Note that Goodman used a notation slightly different from
          ours, but that we have retained Goodman's use of implicit universal quantification.</textual></para></footnote><textual class="po-textual">
      </textual><programlisting class="po-block e126 e126" xml:space="preserve"><textual class="po-textual">2.41  x ∘ y  ⇔ (∃z)(w)((w ∘ z) → ((w ∘ x) ∧ (w ∘ y)))</textual></programlisting><textual class="po-textual">
      Any relation satisfying this condition is necessarily reflexive and symmetric (but not
      necessarily transitive).</textual></para><para class="po-block e127 e127"><textual class="po-textual">We now state further relation and operator definitions, theorems and axioms. Note that not
      all of them belong to all variants of mereological systems; they do, however, belong to ours.</textual></para><para class="po-block e128 e128"><textual class="po-textual">As already mentioned, the relations </textual><quote class="po-inline e129 e129"><textual class="po-textual">part of,</textual></quote><textual class="po-textual">
      </textual><quote class="po-inline e130 e130"><textual class="po-textual">proper part,</textual></quote><textual class="po-textual"> and </textual><quote class="po-inline e131 e131"><textual class="po-textual">discrete</textual></quote><textual class="po-textual"> may all be defined in terms of the
      overlap relation.</textual></para><para class="po-block e132 e132"><textual class="po-textual">Iff x is a </textual><emphasis class="po-inline e133 e133"><textual class="po-textual">part</textual></emphasis><textual class="po-textual"> of y, then everything that overlaps x also overlaps
      y:
      </textual><programlisting class="po-block e134 e134" xml:space="preserve"><textual class="po-textual">D2.042 x &lt; y =</textual><subscript class="po-atom e135 e135"><textual class="po-textual">df</textual></subscript><textual class="po-textual"> (z)((z ∘ x) → (z ∘ y))</textual></programlisting><textual class="po-textual">
      The part relation is reflexive, anti-symmetric and transitive. </textual></para><para class="po-block e136 e136"><textual class="po-textual"> Iff x is a </textual><emphasis class="po-inline e137 e137"><textual class="po-textual">proper part</textual></emphasis><textual class="po-textual"> of y, then x is a part of y but y is not a
      part of x:
      </textual><programlisting class="po-block e138 e138" xml:space="preserve"><textual class="po-textual">D2.043 x ≪ y =</textual><subscript class="po-atom e139 e139"><textual class="po-textual">df</textual></subscript><textual class="po-textual"> (x &lt; y) ∧ ¬(y &lt; x)</textual></programlisting><textual class="po-textual">
      The proper part relation is irreflexive, anti-symmetric and transitive.</textual></para><para class="po-block e140 e140"><textual class="po-textual"> Iff x and y are </textual><emphasis class="po-inline e141 e141"><textual class="po-textual">discrete</textual></emphasis><textual class="po-textual">, then they have no part in common, i.e.,
      they do not overlap</textual><footnote class="po-popup e142 e142"><para class="po-block e143 e143"><textual class="po-textual">Leonard and Goodman use for the </textual><quote class="po-inline e144 e144"><textual class="po-textual">discrete from</textual></quote><textual class="po-textual"> relation a symbol we have
          not been able to locate in Unicode; we use here a fairly close approximation, the symbol
            “ </textual><code class="po-atom e145 e145"><textual class="po-textual">ʅ</textual></code><textual class="po-textual"> ”, which usually means
          </textual><quote class="po-inline e146 e146"><textual class="po-textual">caution.</textual></quote></para></footnote><textual class="po-textual">:
      </textual><programlisting class="po-block e147 e147" xml:space="preserve"><textual class="po-textual">D2.041 x ʅ y =</textual><subscript class="po-atom e148 e148"><textual class="po-textual">df</textual></subscript><textual class="po-textual"> ¬(x o y) </textual></programlisting><textual class="po-textual"> The
      discrete relation is irreflexive and symmetric (and thus, non-transitive).</textual></para><para class="po-block e149 e149"><textual class="po-textual"> It is worth noting that </textual><emphasis class="po-inline e150 e150"><textual class="po-textual">identity</textual></emphasis><textual class="po-textual"> can be defined in terms of the
      primitive relation:
      </textual><programlisting class="po-block e151 e151" xml:space="preserve"><textual class="po-textual">D2.044 x = y =</textual><subscript class="po-atom e152 e152"><textual class="po-textual">df</textual></subscript><textual class="po-textual">  (z)((z o x) ⇔ (z o y))</textual></programlisting><textual class="po-textual">
    </textual></para><para class="po-block e153 e153"><textual class="po-textual">The </textual><emphasis class="po-inline e154 e154"><textual class="po-textual">product</textual></emphasis><textual class="po-textual"> of x and y is the individual which exactly contains their
      common part: </textual><programlisting class="po-block e155 e155" xml:space="preserve"><textual class="po-textual">D2.045 x · y =</textual><subscript class="po-atom e156 e156"><textual class="po-textual">df</textual></subscript><textual class="po-textual"> (℩z)(w)((w &lt; z) ⇔ ((w &lt; x) ∧ (w &lt; y)))</textual></programlisting><textual class="po-textual">
      </textual><textual class="po-textual">
    </textual></para><para class="po-block e157 e157"><textual class="po-textual">The </textual><emphasis class="po-inline e158 e158"><textual class="po-textual">sum</textual></emphasis><textual class="po-textual"> of x and y is the individual which contains exactly and
      exhaustively both of them, or, in other words, the individual which overlaps all and only
      those individuals which overlap any of them: </textual><programlisting class="po-block e159 e159" xml:space="preserve"><textual class="po-textual">D2.047 x + y =</textual><subscript class="po-atom e160 e160"><textual class="po-textual">df</textual></subscript><textual class="po-textual"> (℩z)(w)((w ∘ z) ⇔ ((w ∘ x) ∨ (w ∘ y)))</textual></programlisting><textual class="po-textual">
      </textual><textual class="po-textual">
    </textual></para><para class="po-block e161 e161"><textual class="po-textual"> The </textual><emphasis class="po-inline e162 e162"><textual class="po-textual">negate</textual></emphasis><textual class="po-textual"> of an individual includes everything which does not
      overlap with that individual (i.e., what is often called its </textual><quote class="po-inline e163 e163"><textual class="po-textual">complement</textual></quote><textual class="po-textual">, or
        </textual><quote class="po-inline e164 e164"><textual class="po-textual">the rest of the world</textual></quote><textual class="po-textual">): </textual><programlisting class="po-block e165 e165" xml:space="preserve"><textual class="po-textual">D2.046 –x =</textual><subscript class="po-atom e166 e166"><textual class="po-textual">df</textual></subscript><textual class="po-textual"> (℩z)(y)((y ʅ x) ⇔ (y &lt; z))</textual></programlisting><textual class="po-textual">
      </textual><textual class="po-textual">
    </textual></para><para class="po-block e167 e167"><textual class="po-textual">The </textual><emphasis class="po-inline e168 e168"><textual class="po-textual">difference</textual></emphasis><textual class="po-textual"> between x and y is what remains of x after we
      eliminate the parts it has in common with y:
      </textual><programlisting class="po-block e169 e169" xml:space="preserve"><textual class="po-textual">x – y =</textual><subscript class="po-atom e170 e170"><textual class="po-textual">df</textual></subscript><textual class="po-textual"> (x · –y)</textual></programlisting><textual class="po-textual">
    </textual></para><para class="po-block e171 e171"><textual class="po-textual"> There is considerable controversy in the literature over the </textual><emphasis class="po-inline e172 e172"><textual class="po-textual">nil</textual></emphasis><textual class="po-textual">
      individual. The </textual><emphasis class="po-inline e173 e173" role="ital"><textual class="po-textual">nil</textual></emphasis><textual class="po-textual"> individual is the mereological analogue
      of the empty class. If accepted, it is part of any individual. Most mereological systems
      reject its existence, and we will do the same in this paper.</textual><footnote class="po-popup e174 e174"><para class="po-block e175 e175"><textual class="po-textual">This may be seen simply as a reflection of the fact that most mereologists have been
          nominalists (in Goodman's sense). But the topic also has other far-reaching repercussions
          — see [</textual><xref class="po-milestone e176 e176" linkend="Varzi"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].</textual></para></footnote></para><para class="po-block e177 e177"><textual class="po-textual">There is less controversy over the existence of the </textual><emphasis class="po-inline e178 e178"><textual class="po-textual">universal</textual></emphasis><textual class="po-textual">
      individual, i.e., the one individual of which every other is a part — the
        </textual><quote class="po-inline e179 e179"><textual class="po-textual">world</textual></quote><textual class="po-textual"> or the </textual><quote class="po-inline e180 e180"><textual class="po-textual">universe</textual></quote><textual class="po-textual"> as an individual. In our case, we are
      not applying the Calculus of Individuals as a </textual><quote class="po-inline e181 e181"><textual class="po-textual">Grand Theory of Everything,</textual></quote><textual class="po-textual"> but
      limit its application to domains consisting of a single document, to collections (not to say
      sets or classes) of documents, or perhaps to documents and whatever else we may need to take
      into consideration to make sense of what these documents say. So we, too, will endorse the
      existence of a universal individual, customarily denoted by the letter </textual><quote class="po-inline e182 e182"><textual class="po-textual">W</textual></quote><textual class="po-textual">:
      </textual><programlisting class="po-block e183 e183" xml:space="preserve"><textual class="po-textual">W =</textual><subscript class="po-atom e184 e184"><textual class="po-textual">df</textual></subscript><textual class="po-textual"> (℩x)(y)(y &lt; x)</textual></programlisting><textual class="po-textual">
    </textual></para><para class="po-block e185 e185"><textual class="po-textual">Note that, because there is no </textual><emphasis class="po-inline e186 e186" role="ital"><textual class="po-textual">nil</textual></emphasis><textual class="po-textual"> individual:</textual></para><itemizedlist class="po-table e187 e187"><listitem class="po-container e188 e188"><para class="po-block e189 e189"><textual class="po-textual">the product of </textual><code class="po-atom e190 e190"><textual class="po-textual">x</textual></code><textual class="po-textual"> and </textual><code class="po-atom e191 e191"><textual class="po-textual">y</textual></code><textual class="po-textual"> can possibly exist only if
          </textual><code class="po-atom e192 e192"><textual class="po-textual">x</textual></code><textual class="po-textual"> and </textual><code class="po-atom e193 e193"><textual class="po-textual">y</textual></code><textual class="po-textual"> overlap,</textual></para></listitem><listitem class="po-container e194 e194"><para class="po-block e195 e195"><textual class="po-textual">the difference between </textual><code class="po-atom e196 e196"><textual class="po-textual">x</textual></code><textual class="po-textual"> and </textual><code class="po-atom e197 e197"><textual class="po-textual">y</textual></code><textual class="po-textual"> can possibly exist only if
            </textual><code class="po-atom e198 e198"><textual class="po-textual">x</textual></code><textual class="po-textual"> is not a part of </textual><code class="po-atom e199 e199"><textual class="po-textual">y</textual></code><textual class="po-textual">, and</textual></para></listitem><listitem class="po-container e200 e200"><para class="po-block e201 e201"><textual class="po-textual">W (the universe) does not have a negate.</textual></para></listitem></itemizedlist><para class="po-block e202 e202"><textual class="po-textual">However, the following statements hold, either as axioms or theorems, depending on how one
      elaborates the system:</textual></para><itemizedlist class="po-table e203 e203"><listitem class="po-container e204 e204"><para class="po-block e205 e205"><code class="po-atom e206 e206"><textual class="po-textual">(x)(y)(∃z)(z = x + y)</textual></code><textual class="po-textual">, i.e., the sum of any
          two individual exists (that is, is an individual),</textual></para></listitem><listitem class="po-container e207 e207"><para class="po-block e208 e208"><code class="po-atom e209 e209"><textual class="po-textual">(x)(y)((x ∘ y) ⇔ (∃z)(z = x
            · y))</textual></code><textual class="po-textual">, i.e., the product of any two individuals exists iff they
        overlap,</textual></para></listitem><listitem class="po-container e210 e210"><para class="po-block e211 e211"><code class="po-atom e212 e212"><textual class="po-textual">(x)(¬(x = W) ⇔ (∃z)(z = –x))</textual></code><textual class="po-textual">,
          i.e., the negate of an individual exists iff the individual is not the universe,
        and</textual></para></listitem><listitem class="po-container e213 e213"><para class="po-block e214 e214"><code class="po-atom e215 e215"><textual class="po-textual">(x)(y)((¬x &lt; y) ⇔ (∃z)(z = x
            – y))</textual></code><textual class="po-textual">, i.e., the difference between any individual </textual><code class="po-atom e216 e216"><textual class="po-textual">x</textual></code><textual class="po-textual"> and any
          individual </textual><code class="po-atom e217 e217"><textual class="po-textual">y</textual></code><textual class="po-textual"> exists iff </textual><code class="po-atom e218 e218"><textual class="po-textual">x</textual></code><textual class="po-textual"> is not a part of
        </textual><code class="po-atom e219 e219"><textual class="po-textual">y</textual></code><textual class="po-textual">.</textual></para></listitem></itemizedlist><para class="po-block e220 e220"><textual class="po-textual">Do all individuals have parts, or are there some individuals which are not further
      divisible into parts? Whether we take the one or the other position may have wide-reaching
      consequences for other properties of a mereological system, and the literature abounds with
      discussion on the subject. Given our domain of application, however, we believe that any
      system will have to be </textual><emphasis class="po-inline e221 e221"><textual class="po-textual">atomistic</textual></emphasis><textual class="po-textual"> — on none of our analyses will
      documents have parts below character-level, or at least we foresee no need to talk about parts
      of characters.
      </textual><textual class="po-textual">
      So we may simply add the axiom of atomicity to our system right away:
      </textual><programlisting class="po-block e222 e222" xml:space="preserve"><textual class="po-textual">(x)(∃y)((y &lt; x) ∧ ¬(∃z)(z ≪ y)) </textual></programlisting><textual class="po-textual">
        [</textual><xref class="po-milestone e223 e223" linkend="CasatiVarzi1999"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, p. 61] </textual></para></section><section class="po-hcontainer e224 e224" xml:id="coi-xml"><title class="po-block e225 e225"><textual class="po-textual">The Calculus applied to XML</textual></title><para class="po-block e226 e226"><textual class="po-textual">What might it mean to apply the Calculus of Individuals to XML documents (or, for short,
        </textual><quote class="po-inline e227 e227"><textual class="po-textual">to XML</textual></quote><textual class="po-textual">) and what purpose might such an application of the calculus serve? A
      preliminary answer to the first question is that an application of the Calculus of Individuals
      to XML would require us to decide which entities to count as individuals, to decide which of
      these are to count as atomic individuals, as well as which properties they can have and which
      relations hold between them. Given the Calculus of Individual's rules of composition,
      different decisions on these issues will bring us to recognize the existence of individuals
      which may or may not coincide with established ways of viewing the structure of XML documents.
      Identifying rules which replicate such conventional views is, if possible, in itself of
      interest. Identifying rules which provide alternative views of XML documents may be of even
      greater interest, at least if they also suggest alternate and useful ways of analysing the
      parts of a document, of addressing them, and of how to ascribe properties of and relations
      between parts of a document. </textual></para><para class="po-block e228 e228"><textual class="po-textual">A preliminary answer to the second question has thus already been suggested: We suspect
      that an application of the Calculus of Individuals to XML might suggest ways of identifying
      and addressing parts of a document which in some cases, or for some purposes, would be more
      convenient or more powerful than existing methods such as SAX, DOM or xPath. We also suspect
      that some application of the Calculus of Individuals to XML might suggest ways of dealing with
      what is sometimes called the </textual><quote class="po-inline e229 e229"><textual class="po-textual">semantics</textual></quote><textual class="po-textual"> of XML, i.e., how to understand XML
      documents in terms of properties ascribed to and relations indicated between the various parts
      of them indicated by the markup. </textual></para><para class="po-block e230 e230"><textual class="po-textual"> In what follows we have nothing but tentative answers to the general questions just
      posed. Trying to answer the first question, we will present different ways of applying the
      Calculus of Individuals to XML. We will also explore some of their implications for answers to
      the second question. The explorative nature of our work should be emphasized: We do not want
      to suggest that these are the only, or the best, ways of applying the Calculus of Individuals
      to XML, nor do we suggest that we have identified all or even the most important implications
      of the approaches that we consider. </textual></para><para class="po-block e231 e231"><textual class="po-textual">Therefore, each of the following sections begins by suggesting a different answer to the
      question </textual><quote class="po-inline e232 e232"><textual class="po-textual">Which are the individuals of a marked-up document?</textual></quote><textual class="po-textual"> First, we consider
      the possibility that the individuals simply are XML elements. Next, we go down one step in
      level of granularity and identify tags and character strings as individuals. Finally, we
      proceed to a still finer level of granularity in order to see what happens if we recognize
      individual characters as atomic individuals, and distinguish between different kinds of
      individuals built from these atoms. </textual></para><section class="po-hcontainer e233 e233" xml:id="coi1"><title class="po-block e234 e234"><textual class="po-textual">The element-as-individual approach</textual></title><para class="po-block e235 e235"><textual class="po-textual">What to count as individuals is a matter of choice, a choice which must be made on the
        basis of such criteria as naturalness, convenience, expressiveness, simplicity, etc. We
        begin by simply assuming a one-to-one matching between the </textual><emphasis class="po-inline e236 e236"><textual class="po-textual">elements</textual></emphasis><textual class="po-textual"> of
        an XML document and the individuals of our calculus. On this assumption, consider the
        following simple XML document:
        </textual><programlisting class="po-block e237 e237" xml:space="preserve"><textual class="po-textual">(1) &lt;para&gt;A &lt;quote&gt;rose&lt;/quote&gt; is &lt;emph&gt;a&lt;/emph&gt; rose.&lt;/para&gt;</textual></programlisting><textual class="po-textual">
      </textual></para><para class="po-block e238 e238"><textual class="po-textual">If each element is an individual, then (1) itself, as well as the elements
        </textual><programlisting class="po-block e239 e239" xml:space="preserve"><textual class="po-textual">(2) &lt;quote&gt;rose&lt;/quote&gt;
(3) &lt;emph&gt;a&lt;/emph&gt;</textual></programlisting><textual class="po-textual">
        are individuals. Now, the sum of any two individuals must (by our mereological axioms) be an
        individual. Thus, the sum of (2) and (3) must be an individual and, by our hypothesis, an
        XML element. No matter what model we have in mind for XML elements and documents, it is hard
        to imagine a way in which the sum of (2) and (3) could be an XML element — it
        would be at best two!</textual></para><para class="po-block e240 e240"><textual class="po-textual">In fact, the goal we have set ourselves here turns out to be self-defeating: It is not
        possible to identify XML elements with individuals, without accepting as individuals parts
        of the document which are not XML elements. In other words, if all XML elements are
        individuals, then some XML documents necessarily give rise to individuals which are not XML elements.</textual><footnote class="po-popup e241 e241"><para class="po-block e242 e242"><textual class="po-textual">In practice, we may read </textual><quote class="po-inline e243 e243"><textual class="po-textual">nearly all</textual></quote><textual class="po-textual"> for </textual><quote class="po-inline e244 e244"><textual class="po-textual">some</textual></quote><textual class="po-textual"> here.
            Examples of exceptions would be documents consisting of only one element, or in which
            each element has at most one child element. Examples:
            </textual><programlisting class="po-block e245 e245" xml:space="preserve"><textual class="po-textual">&lt;s&gt;...&lt;/s&gt;
&lt;s&gt;&lt;t&gt;...&lt;/t&gt;&lt;/s&gt;
&lt;s&gt;&lt;t&gt;&lt;u&gt;...&lt;/u&gt;&lt;/t&gt;&lt;/s&gt;</textual></programlisting><textual class="po-textual">
            and so on. Only in such cases may there in fact be a one-to-one correlation between
            elements and individuals.</textual></para></footnote><textual class="po-textual">
      </textual></para><para class="po-block e246 e246"><textual class="po-textual">An obvious fix would be to retain the decision that every element is an individual, but
        allow for composite individuals having more than one element as their parts. This would
        solve the problem of sums, but others would remain (e.g., what elements can the difference
        (1) – (2) be the sum of?). Even taking the closure of elements under sum and
        difference would still not solve a granularity issue in handling text content: Take, for
        example, the strings </textual><quote class="po-inline e247 e247"><textual class="po-textual">
          </textual><code class="po-atom e248 e248"><textual class="po-textual">A </textual></code><textual class="po-textual">
        </textual></quote><textual class="po-textual">, </textual><quote class="po-inline e249 e249"><textual class="po-textual">
          </textual><code class="po-atom e250 e250"><textual class="po-textual"> is </textual></code><textual class="po-textual">
        </textual></quote><textual class="po-textual">, and </textual><quote class="po-inline e251 e251"><textual class="po-textual">
          </textual><code class="po-atom e252 e252"><textual class="po-textual"> rose.</textual></code><textual class="po-textual">
        </textual></quote><textual class="po-textual">; any given individual would contain either all three or none. There would be no way
        to </textual><quote class="po-inline e253 e253"><textual class="po-textual">separate</textual></quote><textual class="po-textual"> those strings.</textual></para><para class="po-block e254 e254"><textual class="po-textual">Another issue is that the definition of parthood implies nothing about the ordering of
        parts, resulting in the fact that </textual><emphasis class="po-inline e255 e255" role="ital"><textual class="po-textual">individuals are
        unordered</textual></emphasis><textual class="po-textual">. Thus, there is no way in our approach to say, for example, that (2)
          </textual><emphasis class="po-inline e256 e256" role="ital"><textual class="po-textual">occurs before</textual></emphasis><textual class="po-textual"> (3).</textual></para><para class="po-block e257 e257"><textual class="po-textual">The Calculus of Individuals offers in itself no way of defining ordered pairs </textual><footnote class="po-popup e258 e258"><para class="po-block e259 e259"><xref class="po-milestone e260 e260" linkend="Goodman1972"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, p. 164. But see also </textual><xref class="po-milestone e261 e261" linkend="Pitkanen"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> p. 268</textual></para></footnote><textual class="po-textual"> — and thus, relations — as individuals. However, relations
        can be represented by </textual><emphasis class="po-inline e262 e262" role="ital"><textual class="po-textual">predicates</textual></emphasis><textual class="po-textual"> on individuals. Thus, we
        can order (either totally or partially) our individuals by defining an appropriate binary
        predicate corresponding to the desired relation.</textual></para><para class="po-block e263 e263"><textual class="po-textual">If we think of individuals as corresponding to objects in an XML data model, and if that
        model allows serializations in which no two distinct elements or characters start at the
        same offset in a serialization</textual><footnote class="po-popup e264 e264"><para class="po-block e265 e265"><textual class="po-textual">This is the case if we think of XML documents and elements as consisting of
            stretches of consecutive character occurrences (remember we exclude entity declarations
            and references from our discussion), and also with the xPath data model. It is </textual><emphasis class="po-inline e266 e266" role="ital"><textual class="po-textual">not</textual></emphasis><textual class="po-textual"> necessarily the case with the Infoset data model.</textual></para></footnote><textual class="po-textual"> (we will need to deal with characters in later sections), then we can induce a
        total ordering of the individuals that correspond to elements and characters, based on the
        total order among the offsets of their XML counterparts in the serialization. We call that
        order relation </textual><emphasis class="po-inline e267 e267" role="ital"><textual class="po-textual">document order</textual></emphasis><textual class="po-textual">.</textual></para><para class="po-block e268 e268"><textual class="po-textual">Throughout this paper, we assume that document order exists and is well
        defined.</textual></para><para class="po-block e269 e269"><textual class="po-textual">So far we have assumed that XML elements containing no sub-elements have no parts, i.e.,
        that they are atoms in our system. A solution may perhaps be to recognize a more generous
        set of individuals. But before we proceed to investigate this, we pause to make a couple of
        observations on other characteristics of the element-as-individual approach.</textual></para><itemizedlist class="po-table e270 e270"><listitem class="po-container e271 e271"><para class="po-block e272 e272"><textual class="po-textual">The lack of a fine enough granularity prevents a satisfactory treatment of strings,
            let alone </textual><emphasis class="po-inline e273 e273" role="ital"><textual class="po-textual">parts</textual></emphasis><textual class="po-textual"> of strings. </textual></para><para class="po-block e274 e274"><textual class="po-textual">However we could regard a string as a property of an individual. Thus, although we
            cannot strictly speaking say that in (1) the string </textual><quote class="po-inline e275 e275"><textual class="po-textual">rose</textual></quote><textual class="po-textual"> is a part of the
            string </textual><quote class="po-inline e276 e276"><textual class="po-textual">A rose is a rose.</textual></quote><textual class="po-textual">, we could say that an individual having the
            string </textual><quote class="po-inline e277 e277"><textual class="po-textual">rose</textual></quote><textual class="po-textual"> as a property is part of an individual having the string
              </textual><quote class="po-inline e278 e278"><textual class="po-textual">A rose is a rose.</textual></quote><textual class="po-textual"> as a property. Note that the strings </textual><quote class="po-inline e279 e279"><textual class="po-textual">rose
            is</textual></quote><textual class="po-textual"> or </textual><quote class="po-inline e280 e280"><textual class="po-textual">ose i</textual></quote><textual class="po-textual"> would not be properties of any individual,
            and thus not a </textual><quote class="po-inline e281 e281"><textual class="po-textual">part</textual></quote><textual class="po-textual"> of the document even in this extended sense. </textual></para></listitem><listitem class="po-container e282 e282"><para class="po-block e283 e283"><textual class="po-textual">Building a tree structure in which each node is an individual (i.e., an element), in
            which each arc represents a whole-part relationship, and in which the children of each
            node are ordered in document order, produces a tree which is almost identical to the XML
            tree for the same document, except for PCDATA leaf nodes of mixed content elements,
            which would be lost.</textual><footnote class="po-popup e284 e284"><para class="po-block e285 e285"><textual class="po-textual">This
                might be considered, by some, an interesting observation, since some markup
                theorists have argued against the use of mixed content, either generally or for
                specific applications or uses of markup.</textual></para></footnote><textual class="po-textual"> (However empty element leaf nodes would appear in the tree.)</textual></para></listitem></itemizedlist></section><section class="po-hcontainer e286 e286" xml:id="coi2"><title class="po-block e287 e287"><textual class="po-textual">The tags and PCDATA approach</textual></title><para class="po-block e288 e288"><textual class="po-textual">Moving one step down in level of granularity, we might take </textual><emphasis class="po-inline e289 e289"><textual class="po-textual">tags and PCDATA
          strings</textual></emphasis><textual class="po-textual"> delimited by tags as atomic individuals. Thus (1) would contain the
        following 11 atomic individuals:
        </textual><programlisting class="po-block e290 e290" xml:space="preserve"><textual class="po-textual">&lt;para&gt;
A 
&lt;quote&gt;
rose 
&lt;/quote&gt;
 is 
&lt;emph&gt;
a
&lt;/emph&gt;
 rose.
&lt;/para&gt;</textual></programlisting><textual class="po-textual">
        From these, we might compose composite individuals such as, for example:
        </textual><programlisting class="po-block e291 e291" xml:space="preserve"><textual class="po-textual">&lt;para&gt;
&lt;para&gt;A 
&lt;para&gt;A &lt;quote&gt;
&lt;para&gt;A &lt;quote&gt;rose 
A rose
A  rose.
rose a
&lt;para&gt;A &lt;quote&gt;
A &lt;quote&gt;rose &lt;/quote&gt; is &lt;emph&gt;
rose &lt;/quote&gt;  rose.&lt;/para&gt;</textual></programlisting><textual class="po-textual">
        As a matter of fact, (1) would give rise to no less than 2</textual><superscript class="po-atom e292 e292"><textual class="po-textual">11</textual></superscript><textual class="po-textual">-1 =
        2047 individuals on this account (-1 because there is no </textual><emphasis class="po-inline e293 e293" role="ital"><textual class="po-textual">nil</textual></emphasis><textual class="po-textual"> individual) — in the interest of the reader we do not list all of
        them here. Only a handful of these individuals would be well-balanced XML fragments, of
        course.</textual></para><para class="po-block e294 e294"><textual class="po-textual">A total order relation on the atomic individuals based on document order could be
        defined, as in the preceding section. Note that in this case, the sequence of ordered atomic
        individuals is isomorphic to the sequence of events identified by a SAX-like XML
        tokenizer.</textual></para><para class="po-block e295 e295"><textual class="po-textual"> Observe that although many of the </textual><textual class="po-textual"> individuals
        could be identified or referenced using xPath or similar XML-aware mechanisms, many of them
        could not. In particular, tag atoms could not (or, at least, it is unclear how and in what
        sense they could). However, the interest of being able to refer to tags individually is not
        obvious. Also, since strings are atoms, it is still impossible to handle parts of strings:
          </textual><quote class="po-inline e296 e296"><textual class="po-textual">ose i</textual></quote><textual class="po-textual"> is still not an individual. Therefore, we do not pursue this avenue
        any
        further.</textual><textual class="po-textual">
      </textual></para></section><section class="po-hcontainer e297 e297" xml:id="coi3"><title class="po-block e298 e298"><textual class="po-textual">The character-atom approach</textual></title><section class="po-hcontainer e299 e299"><title class="po-block e300 e300"><textual class="po-textual">The approach</textual></title><para class="po-block e301 e301"><textual class="po-textual">Finally, and moving one further step down in the level of granularity, we take
            </textual><emphasis class="po-inline e302 e302"><textual class="po-textual">character occurrences</textual></emphasis><textual class="po-textual"> as the atomic individuals in our application
          of the calculus. For the sake of conciseness, we will use </textual><emphasis class="po-inline e303 e303" role="ital"><textual class="po-textual">character</textual></emphasis><textual class="po-textual"> as a synonym for </textual><emphasis class="po-inline e304 e304" role="ital"><textual class="po-textual">character
          occurrence</textual></emphasis><textual class="po-textual">, except where confusion might
          arise.</textual><textual class="po-textual">
        </textual></para><para class="po-block e305 e305"><textual class="po-textual">The </textual><emphasis class="po-inline e306 e306" role="ital"><textual class="po-textual">type</textual></emphasis><textual class="po-textual"> of a character occurrence is represented in
          our system by a property of that character occurrence. So any atom (i.e., character
          occurrence) has the property of being an </textual><quote class="po-inline e307 e307"><textual class="po-textual">a</textual></quote><textual class="po-textual">, or a </textual><quote class="po-inline e308 e308"><textual class="po-textual">b</textual></quote><textual class="po-textual">, or a
            </textual><quote class="po-inline e309 e309"><textual class="po-textual">c</textual></quote><textual class="po-textual">, etc., thus populating our vocabulary with one predicate for each of
          the characters of the writing system at hand.</textual><footnote class="po-popup e310 e310"><para class="po-block e311 e311"><textual class="po-textual">We might allow a character occurrence to have more than one such property. For
              example, it could have the property of being an </textual><quote class="po-inline e312 e312"><textual class="po-textual">a</textual></quote><textual class="po-textual">, as well as that of
              being of some other type. Exploiting this option might be interesting in trying to
              account for multiple readings or interpretations in transcription, such as in [</textual><xref class="po-milestone e313 e313" linkend="dh2009"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. For the time being, however, we will assume that the ascription
              of one such character-type-property to a particular character excludes the ascription
              of any other character-type-property to that character. </textual></para></footnote><textual class="po-textual">
        </textual></para><para class="po-block e314 e314"><textual class="po-textual">We define a total order relation on atoms, based on document order, represented by the
          predicate </textual><code class="po-atom e315 e315"><textual class="po-textual">PA(x, y)</textual></code><textual class="po-textual">, true iff </textual><code class="po-atom e316 e316"><textual class="po-textual">x</textual></code><textual class="po-textual"> precedes </textual><code class="po-atom e317 e317"><textual class="po-textual">y</textual></code><textual class="po-textual"> in
          document order (“P” stands for “precedes” and “A” indicates it is a predicate on atoms).
          The transitive reduction of </textual><code class="po-atom e318 e318"><textual class="po-textual">PA</textual></code><textual class="po-textual"> is represented by the predicate </textual><code class="po-atom e319 e319"><textual class="po-textual">NA(x,
          y)</textual></code><textual class="po-textual">, true iff </textual><code class="po-atom e320 e320"><textual class="po-textual">x</textual></code><textual class="po-textual"> immediately precedes </textual><code class="po-atom e321 e321"><textual class="po-textual">y</textual></code><textual class="po-textual"> in document order
          (“N” stands for “next” and “A” indicates it is a predicate on
          atoms).</textual></para><para class="po-block e322 e322"><textual class="po-textual">Since characters are atomic individuals, all individuals which can be composed on the
          basis of the characters of a document are also individuals, i.e., composite individuals.
          Composite individuals of special interest for our purposes are
          </textual><emphasis class="po-inline e323 e323"><textual class="po-textual">strings</textual></emphasis><textual class="po-textual">. We define strings as individuals which are either atoms, or
          the sum of atoms consecutive in </textual><code class="po-atom e324 e324"><textual class="po-textual">NA</textual></code><textual class="po-textual"> order. A string that consists of only one
          character is (also) an atom. There is no such thing as an </textual><quote class="po-inline e325 e325"><textual class="po-textual">empty string</textual></quote><textual class="po-textual">
          (which would have to be the </textual><emphasis class="po-inline e326 e326" role="ital"><textual class="po-textual">nil</textual></emphasis><textual class="po-textual"> individual). Note that
          strings constitute a tiny fraction of all existing individuals.</textual></para><para class="po-block e327 e327"><textual class="po-textual">Some strings are of particular interest to us. We define a </textual><emphasis class="po-inline e328 e328"><textual class="po-textual">molecular
          string</textual></emphasis><textual class="po-textual"> (or </textual><emphasis class="po-inline e329 e329" role="ital"><textual class="po-textual">molecule</textual></emphasis><textual class="po-textual">) as a string that is
          delimited on both sides (in the serialization underlying document order) by a tag, with no
          other tag intervening in between. A total ordering of molecular strings, represented by
          the predicate </textual><code class="po-atom e330 e330"><textual class="po-textual">P(x, y)</textual></code><textual class="po-textual">, is trivially derived from the ordering of atoms
          (itself based on document order). The transitive reduction of </textual><code class="po-atom e331 e331"><textual class="po-textual">P</textual></code><textual class="po-textual"> is
          represented by the predicate </textual><code class="po-atom e332 e332"><textual class="po-textual">N(x, y)</textual></code><textual class="po-textual">. (“P” stands for “precedes” and “N” for
          “next”.)
          </textual></para><para class="po-block e333 e333"><textual class="po-textual"> We define an </textual><emphasis class="po-inline e334 e334"><textual class="po-textual">elemental string</textual></emphasis><textual class="po-textual"> as a string delimited by the
          matching tags of an XML element (there may be intervening tags). We do not rely on any
          ordering of elemental strings.
          </textual></para><para class="po-block e335 e335"><textual class="po-textual">For any given string </textual><code class="po-atom e336 e336"><textual class="po-textual">x</textual></code><textual class="po-textual">, we define (for convenience only) the
            </textual><emphasis class="po-inline e337 e337"><textual class="po-textual">label</textual></emphasis><textual class="po-textual"> of </textual><code class="po-atom e338 e338"><textual class="po-textual">x</textual></code><textual class="po-textual"> as the sequence of the types of the atoms
          composing </textual><code class="po-atom e339 e339"><textual class="po-textual">x</textual></code><textual class="po-textual">, in </textual><code class="po-atom e340 e340"><textual class="po-textual">NA</textual></code><textual class="po-textual"> order. That is, for example, a string is
          labelled </textual><quote class="po-inline e341 e341"><textual class="po-textual">rose</textual></quote><textual class="po-textual"> (or has the label </textual><quote class="po-inline e342 e342"><textual class="po-textual">rose</textual></quote><textual class="po-textual">) iff it is the sum of
          atoms of types </textual><quote class="po-inline e343 e343"><textual class="po-textual">r</textual></quote><textual class="po-textual">, </textual><quote class="po-inline e344 e344"><textual class="po-textual">o</textual></quote><textual class="po-textual">, </textual><quote class="po-inline e345 e345"><textual class="po-textual">s</textual></quote><textual class="po-textual">, and </textual><quote class="po-inline e346 e346"><textual class="po-textual">e</textual></quote><textual class="po-textual">,
          and those atoms are </textual><code class="po-atom e347 e347"><textual class="po-textual">NA</textual></code><textual class="po-textual">-ordered so that the one of type </textual><quote class="po-inline e348 e348"><textual class="po-textual">r</textual></quote><textual class="po-textual"> comes
          first, the one of type </textual><quote class="po-inline e349 e349"><textual class="po-textual">o</textual></quote><textual class="po-textual"> comes second, etc.</textual></para><para class="po-block e350 e350"><textual class="po-textual">While it might have been plausible to treat tags as a special kind of strings, and
          build elements and nodes with their ordering and parent-child relationship in a way
          similar to that suggested in the tags and PCDATA approach above, instead, we shall regard
          tags simply as delimiting certain string individuals, and ascribing properties to (or
          relations between) those individuals.</textual></para><para class="po-block e351 e351"><textual class="po-textual"> We can now read (1) as follows: </textual><itemizedlist class="po-table e352 e352"><listitem class="po-container e353 e353"><para class="po-block e354 e354"><textual class="po-textual">There are 17 atomic individuals. Their ordered sequence of types is:
                </textual><quote class="po-inline e355 e355"><textual class="po-textual">A</textual></quote><textual class="po-textual">, </textual><quote class="po-inline e356 e356"><textual class="po-textual"> </textual></quote><textual class="po-textual">, </textual><quote class="po-inline e357 e357"><textual class="po-textual">r</textual></quote><textual class="po-textual">, </textual><quote class="po-inline e358 e358"><textual class="po-textual">o</textual></quote><textual class="po-textual">,
                  </textual><quote class="po-inline e359 e359"><textual class="po-textual">s</textual></quote><textual class="po-textual">, </textual><quote class="po-inline e360 e360"><textual class="po-textual">e</textual></quote><textual class="po-textual">, </textual><quote class="po-inline e361 e361"><textual class="po-textual"> </textual></quote><textual class="po-textual">, </textual><quote class="po-inline e362 e362"><textual class="po-textual">i</textual></quote><textual class="po-textual">,
                  </textual><quote class="po-inline e363 e363"><textual class="po-textual">s</textual></quote><textual class="po-textual">, </textual><quote class="po-inline e364 e364"><textual class="po-textual"> </textual></quote><textual class="po-textual">, </textual><quote class="po-inline e365 e365"><textual class="po-textual">a</textual></quote><textual class="po-textual">,
                </textual><quote class="po-inline e366 e366"><textual class="po-textual"> </textual></quote><textual class="po-textual">, </textual><quote class="po-inline e367 e367"><textual class="po-textual">r</textual></quote><textual class="po-textual">, </textual><quote class="po-inline e368 e368"><textual class="po-textual">o</textual></quote><textual class="po-textual">, </textual><quote class="po-inline e369 e369"><textual class="po-textual">s</textual></quote><textual class="po-textual">,
                  </textual><quote class="po-inline e370 e370"><textual class="po-textual">e</textual></quote><textual class="po-textual">, and </textual><quote class="po-inline e371 e371"><textual class="po-textual">.</textual></quote><textual class="po-textual">.
                </textual><textual class="po-textual">
              </textual></para></listitem><listitem class="po-container e372 e372"><para class="po-block e373 e373"><textual class="po-textual">There are five molecular string individuals. Their ordered sequence of labels
                is: </textual><quote class="po-inline e374 e374"><textual class="po-textual">A </textual></quote><textual class="po-textual">, </textual><quote class="po-inline e375 e375"><textual class="po-textual">rose</textual></quote><textual class="po-textual">,
                </textual><quote class="po-inline e376 e376"><textual class="po-textual"> is </textual></quote><textual class="po-textual">, </textual><quote class="po-inline e377 e377"><textual class="po-textual">a</textual></quote><textual class="po-textual">, and
                </textual><quote class="po-inline e378 e378"><textual class="po-textual"> rose.</textual></quote><textual class="po-textual">. </textual><textual class="po-textual">
                </textual><textual class="po-textual">
              </textual></para></listitem><listitem class="po-container e379 e379"><para class="po-block e380 e380"><textual class="po-textual">There are three elemental string individuals, labelled </textual><quote class="po-inline e381 e381"><textual class="po-textual">A rose is a
                rose.</textual></quote><textual class="po-textual">, </textual><quote class="po-inline e382 e382"><textual class="po-textual">rose</textual></quote><textual class="po-textual"> and
                </textual><quote class="po-inline e383 e383"><textual class="po-textual">a</textual></quote><textual class="po-textual">.</textual><textual class="po-textual">
              </textual></para></listitem><listitem class="po-container e384 e384"><para class="po-block e385 e385"><textual class="po-textual">The elemental string labelled </textual><quote class="po-inline e386 e386"><textual class="po-textual">A rose is a rose.</textual></quote><textual class="po-textual"> has the property
                indicated by the generic identifier &lt;para&gt;. </textual><itemizedlist class="po-table e387 e387"><listitem class="po-container e388 e388"><para class="po-block e389 e389"><textual class="po-textual">Note that this does not imply that any of its parts, such as the molecular
                      strings labelled </textual><quote class="po-inline e390 e390"><textual class="po-textual">A </textual></quote><textual class="po-textual">, </textual><quote class="po-inline e391 e391"><textual class="po-textual">rose</textual></quote><textual class="po-textual">, etc., has
                      this property.</textual></para></listitem></itemizedlist><textual class="po-textual">
              </textual></para></listitem><listitem class="po-container e392 e392"><para class="po-block e393 e393"><textual class="po-textual">The elemental string labelled </textual><quote class="po-inline e394 e394"><textual class="po-textual">rose</textual></quote><textual class="po-textual"> has the property indicated by
                the generic identifier &lt;quote&gt;.</textual></para></listitem><listitem class="po-container e395 e395"><para class="po-block e396 e396"><textual class="po-textual">The elemental string labelled </textual><quote class="po-inline e397 e397"><textual class="po-textual">a</textual></quote><textual class="po-textual"> has the property indicated by the
                generic identifier &lt;emph&gt;. </textual><itemizedlist class="po-table e398 e398"><listitem class="po-container e399 e399"><para class="po-block e400 e400"><textual class="po-textual">Here we have an example of an atom which is also a molecule and an
                      elemental string.
                      </textual></para></listitem></itemizedlist><textual class="po-textual">
              </textual></para></listitem></itemizedlist><textual class="po-textual">
        </textual></para><para class="po-block e401 e401"><textual class="po-textual">We introduce the following predicates: 
</textual><table class="po-container e402 e402"><thead class="po-container e403 e403"><tr class="po-table e404 e404"><th class="po-field e405 e405"><textual class="po-textual">Predicate </textual></th><th class="po-field e406 e406"><textual class="po-textual">Meaning</textual></th><th class="po-field e407 e407"><textual class="po-textual">Range of x and y</textual></th></tr></thead><tbody class="po-table e408 e408"><tr class="po-table e409 e409"><td class="po-block e410 e410"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e411 e411"><td class="po-block e412 e412"><textual class="po-textual">NA(x,y) </textual></td><td class="po-block e413 e413"><textual class="po-textual">next after x is y (or, x immediately precedes y)</textual></td><td class="po-block e414 e414"><textual class="po-textual">atoms</textual></td></tr><tr class="po-table e415 e415"><td class="po-block e416 e416"><textual class="po-textual"> PA(x,y) </textual></td><td class="po-block e417 e417"><textual class="po-textual">x precedes y</textual></td><td class="po-block e418 e418"><textual class="po-textual">atoms</textual></td></tr><tr class="po-table e419 e419"><td class="po-block e420 e420"><textual class="po-textual">N(x,y) </textual></td><td class="po-block e421 e421"><textual class="po-textual">next after x is y (or, x immediately precedes y)</textual></td><td class="po-block e422 e422"><textual class="po-textual">molecules</textual></td></tr><tr class="po-table e423 e423"><td class="po-block e424 e424"><textual class="po-textual"> P(x,y) </textual></td><td class="po-block e425 e425"><textual class="po-textual">x precedes y</textual></td><td class="po-block e426 e426"><textual class="po-textual">molecules</textual></td></tr><tr class="po-table e427 e427"><td class="po-block e428 e428"><textual class="po-textual">A(x) </textual></td><td class="po-block e429 e429"><textual class="po-textual">x is atomic</textual></td><td class="po-block e430 e430"><textual class="po-textual">any</textual></td></tr><tr class="po-table e431 e431"><td class="po-block e432 e432"><textual class="po-textual">M(x) </textual></td><td class="po-block e433 e433"><textual class="po-textual">x is molecular</textual></td><td class="po-block e434 e434"><textual class="po-textual">any</textual></td></tr><tr class="po-table e435 e435"><td class="po-block e436 e436"><textual class="po-textual">E(x) </textual></td><td class="po-block e437 e437"><textual class="po-textual">x is elemental</textual></td><td class="po-block e438 e438"><textual class="po-textual">any</textual></td></tr><tr class="po-table e439 e439"><td class="po-block e440 e440"><textual class="po-textual">ccc(x) </textual></td><td class="po-block e441 e441"><textual class="po-textual">x has the property assigned by ccc (where ccc is an XML generic identifier) </textual></td><td class="po-block e442 e442"><textual class="po-textual">any</textual></td></tr><tr class="po-table e443 e443"><td class="po-block e444 e444"><textual class="po-textual">T("c",x) </textual></td><td class="po-block e445 e445"><textual class="po-textual">x is of type c (where c is a character type) </textual></td><td class="po-block e446 e446"><textual class="po-textual">atoms</textual></td></tr><tr class="po-table e447 e447"><td class="po-block e448 e448"><textual class="po-textual">L("ccc",x)</textual></td><td class="po-block e449 e449"><textual class="po-textual">x is labelled ccc (where ccc is a sequence of character types)</textual></td><td class="po-block e450 e450"><textual class="po-textual">any</textual></td></tr></tbody></table><textual class="po-textual">
</textual></para><para class="po-block e451 e451"><textual class="po-textual">The last two predicates (T and L) are to be regarded as notational convenience features.</textual><footnote class="po-popup e452 e452"><para class="po-block e453 e453"><textual class="po-textual">In a </textual><quote class="po-inline e454 e454"><textual class="po-textual">real</textual></quote><textual class="po-textual">system, character type indications enclosed within quotes
              and occurring within two-place predicates, like T(</textual><quote class="po-inline e455 e455"><textual class="po-textual">A</textual></quote><textual class="po-textual">,i01) here, should
              be replaced with one-place predicates using for example Unicode names for character
              values, like T.x0041(i01). Character types are properties, not individuals, and so
              should not really appear as variables in the calculus. One unattractive consequence of
              the shorthand notation used here is that assignment of whitespace characters comes out
              as T(</textual><quote class="po-inline e456 e456"><textual class="po-textual"> </textual></quote><textual class="po-textual">,i2), which is both imprecise and perhaps somewhat
              confusing.</textual></para><para class="po-block e457 e457"><textual class="po-textual">As mentioned, saying that an individual is labelled with a string is merely a
              shorthand for saying that it consists of a sequence of atoms each with certain
              character types as their values. So expressions like
              L(</textual><quote class="po-inline e458 e458"><textual class="po-textual"> is </textual></quote><textual class="po-textual">,i20) in the example below are really
              shorthands for more complex expressions referring to the atomic parts of the
              individual i20 and their next and type properties. Assuming that i20=i07+i08+i09+i10,
              what L(</textual><quote class="po-inline e459 e459"><textual class="po-textual"> is </textual></quote><textual class="po-textual">,i20) says should be construed as
              something like NA(i07,i08) ∧ NA(i08,i09) ∧ NA(i09,i10) ∧
              T.x0020(i07) ∧ T.x0069(i08)∧ T.x0073(i09)∧
            T.x0020(i10).</textual></para></footnote><textual class="po-textual"> We are ignoring potential problems of name conflicts in this presentation
          (which would arise e.g. in the case of a document containing XML generic identifiers
            </textual><quote class="po-inline e460 e460"><textual class="po-textual">A</textual></quote><textual class="po-textual">, </textual><quote class="po-inline e461 e461"><textual class="po-textual">M</textual></quote><textual class="po-textual"> or </textual><quote class="po-inline e462 e462"><textual class="po-textual">E</textual></quote><textual class="po-textual">). </textual></para></section><section class="po-hcontainer e463 e463"><title class="po-block e464 e464"><textual class="po-textual">Examples</textual></title><para class="po-block e465 e465"><textual class="po-textual">We assign the identifiers i01, i02, i03, etc. </textual><footnote class="po-popup e466 e466"><para class="po-block e467 e467"><textual class="po-textual">In a working system one would probably use more </textual><textual class="po-textual"> meaningful
              identifiers. The only requirement on identifiers is that they should identify
              individuals uniquely.</textual></para></footnote><textual class="po-textual"> to individuals of (1) and state some facts about them as follows:
 </textual><table class="po-container e468 e468"><tr class="po-table e469 e469"><td class="po-block e470 e470"><textual class="po-textual">T("A",i01)</textual></td><td class="po-block e471 e471"><textual class="po-textual">A(i01)</textual></td><td class="po-block e472 e472"><textual class="po-textual">NA(i01,i02)</textual></td></tr><tr class="po-table e473 e473"><td class="po-block e474 e474"><textual class="po-textual">T(" ",i02)</textual></td><td class="po-block e475 e475"><textual class="po-textual">A(i02)</textual></td><td class="po-block e476 e476"><textual class="po-textual">NA(i02,i03)</textual></td></tr><tr class="po-table e477 e477"><td class="po-block e478 e478"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e479 e479"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e480 e480"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e481 e481"><td class="po-block e482 e482"><textual class="po-textual">T("r",i03)</textual></td><td class="po-block e483 e483"><textual class="po-textual">A(i03)</textual></td><td class="po-block e484 e484"><textual class="po-textual">NA(i03,i04)</textual></td></tr><tr class="po-table e485 e485"><td class="po-block e486 e486"><textual class="po-textual">T("o",i04)</textual></td><td class="po-block e487 e487"><textual class="po-textual">A(i04)</textual></td><td class="po-block e488 e488"><textual class="po-textual">NA(i04,i05)</textual></td></tr><tr class="po-table e489 e489"><td class="po-block e490 e490"><textual class="po-textual">T("s",i05)</textual></td><td class="po-block e491 e491"><textual class="po-textual">A(i05)</textual></td><td class="po-block e492 e492"><textual class="po-textual">NA(i05,i06)</textual></td></tr><tr class="po-table e493 e493"><td class="po-block e494 e494"><textual class="po-textual">T("e",i06)</textual></td><td class="po-block e495 e495"><textual class="po-textual">A(i06)</textual></td><td class="po-block e496 e496"><textual class="po-textual">NA(i06,i07)</textual></td></tr><tr class="po-table e497 e497"><td class="po-block e498 e498"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e499 e499"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e500 e500"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e501 e501"><td class="po-block e502 e502"><textual class="po-textual">T(" ",i07)</textual></td><td class="po-block e503 e503"><textual class="po-textual">A(i07)</textual></td><td class="po-block e504 e504"><textual class="po-textual">NA(i07,i08)</textual></td></tr><tr class="po-table e505 e505"><td class="po-block e506 e506"><textual class="po-textual">T("i",i08)</textual></td><td class="po-block e507 e507"><textual class="po-textual">A(i08)</textual></td><td class="po-block e508 e508"><textual class="po-textual">NA(i08,i09)</textual></td></tr><tr class="po-table e509 e509"><td class="po-block e510 e510"><textual class="po-textual">T("s",i09)</textual></td><td class="po-block e511 e511"><textual class="po-textual">A(i09)</textual></td><td class="po-block e512 e512"><textual class="po-textual">NA(i09,i10)</textual></td></tr><tr class="po-table e513 e513"><td class="po-block e514 e514"><textual class="po-textual">T(" ",i10)</textual></td><td class="po-block e515 e515"><textual class="po-textual">A(i10)</textual></td><td class="po-block e516 e516"><textual class="po-textual">NA(i10,i11)</textual></td></tr><tr class="po-table e517 e517"><td class="po-block e518 e518"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e519 e519"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e520 e520"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e521 e521"><td class="po-block e522 e522"><textual class="po-textual">T("a",i11)</textual></td><td class="po-block e523 e523"><textual class="po-textual">A(i11)</textual></td><td class="po-block e524 e524"><textual class="po-textual">NA(i11,i12)</textual></td></tr><tr class="po-table e525 e525"><td class="po-block e526 e526"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e527 e527"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e528 e528"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e529 e529"><td class="po-block e530 e530"><textual class="po-textual">T(" ",i12)</textual></td><td class="po-block e531 e531"><textual class="po-textual">A(i12)</textual></td><td class="po-block e532 e532"><textual class="po-textual">NA(i12,i13)</textual></td></tr><tr class="po-table e533 e533"><td class="po-block e534 e534"><textual class="po-textual">T("r",i13)</textual></td><td class="po-block e535 e535"><textual class="po-textual">A(i13)</textual></td><td class="po-block e536 e536"><textual class="po-textual">NA(i13,i14)</textual></td></tr><tr class="po-table e537 e537"><td class="po-block e538 e538"><textual class="po-textual">T("o",i14)</textual></td><td class="po-block e539 e539"><textual class="po-textual">A(i14)</textual></td><td class="po-block e540 e540"><textual class="po-textual">NA(i14,i15)</textual></td></tr><tr class="po-table e541 e541"><td class="po-block e542 e542"><textual class="po-textual">T("s",i15)</textual></td><td class="po-block e543 e543"><textual class="po-textual">A(i15)</textual></td><td class="po-block e544 e544"><textual class="po-textual">NA(i15,i16)</textual></td></tr><tr class="po-table e545 e545"><td class="po-block e546 e546"><textual class="po-textual">T("e",i16)</textual></td><td class="po-block e547 e547"><textual class="po-textual">A(i16)</textual></td><td class="po-block e548 e548"><textual class="po-textual">NA(i16,i17)</textual></td></tr><tr class="po-table e549 e549"><td class="po-block e550 e550"><textual class="po-textual">T(".",i17)</textual></td><td class="po-block e551 e551"><textual class="po-textual">A(i17)</textual></td><td class="po-block e552 e552"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e553 e553"><td class="po-block e554 e554"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e555 e555"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e556 e556"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e557 e557"><td class="po-block e558 e558"><textual class="po-textual">i18=i01+i02</textual></td><td class="po-block e559 e559"><textual class="po-textual">M(i18)</textual></td><td class="po-block e560 e560"><textual class="po-textual">N(i18,i19)</textual></td></tr><tr class="po-table e561 e561"><td class="po-block e562 e562"><textual class="po-textual">i19=i03+i04+i05+i06</textual></td><td class="po-block e563 e563"><textual class="po-textual">M(i19)</textual></td><td class="po-block e564 e564"><textual class="po-textual">N(i19,i20)</textual></td></tr><tr class="po-table e565 e565"><td class="po-block e566 e566"><textual class="po-textual">i20=i07+i08+i09+i10</textual></td><td class="po-block e567 e567"><textual class="po-textual">M(i20)</textual></td><td class="po-block e568 e568"><textual class="po-textual">N(i20,i11)</textual></td></tr><tr class="po-table e569 e569"><td class="po-block e570 e570"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e571 e571"><textual class="po-textual">M(i11)</textual></td><td class="po-block e572 e572"><textual class="po-textual">N(i11,i21)</textual></td></tr><tr class="po-table e573 e573"><td class="po-block e574 e574"><textual class="po-textual">i21=i12+i13+i14+i15+i16+i17</textual></td><td class="po-block e575 e575"><textual class="po-textual">M(i21)</textual></td><td class="po-block e576 e576"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e577 e577"><td class="po-block e578 e578"><textual class="po-textual">i22=i18+i19+i20+i11+i21</textual></td><td class="po-block e579 e579"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e580 e580"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e581 e581"><td class="po-block e582 e582"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e583 e583"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e584 e584"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e585 e585"><td class="po-block e586 e586"><textual class="po-textual">L("A ",i18)</textual></td><td class="po-block e587 e587"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e588 e588"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e589 e589"><td class="po-block e590 e590"><textual class="po-textual">L("rose",i19)</textual></td><td class="po-block e591 e591"><textual class="po-textual">E(i19)</textual></td><td class="po-block e592 e592"><textual class="po-textual">quote(i19)</textual></td></tr><tr class="po-table e593 e593"><td class="po-block e594 e594"><textual class="po-textual">L(" is ",i20)</textual></td><td class="po-block e595 e595"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e596 e596"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e597 e597"><td class="po-block e598 e598"><textual class="po-textual">T("a",i11)</textual></td><td class="po-block e599 e599"><textual class="po-textual">E(i11)</textual></td><td class="po-block e600 e600"><textual class="po-textual">emph(i11)</textual></td></tr><tr class="po-table e601 e601"><td class="po-block e602 e602"><textual class="po-textual">L("rose.",i21)</textual></td><td class="po-block e603 e603"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e604 e604"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e605 e605"><td class="po-block e606 e606"><textual class="po-textual">L("A rose is a rose.",i22)</textual></td><td class="po-block e607 e607"><textual class="po-textual">E(i22)</textual></td><td class="po-block e608 e608"><textual class="po-textual">para(i22)</textual></td></tr></table><textual class="po-textual">                  
  
        </textual></para><para class="po-block e609 e609"><textual class="po-textual">The same information may be presented more conspicuously in the following table,
          listing for each individual its identifier, its type, its label, the kind of individual it
          is (A for atoms, M for molecular and E for elemental strings), its assigned properties
          (i.e., properties assigned by an XML generic identifier), its next atom or molecular
          string and its immediate proper parts. </textual><footnote class="po-popup e610 e610"><para class="po-block e611 e611"><textual class="po-textual">At least as long as we are limiting ourselves to XML the notion </textual><quote class="po-inline e612 e612"><textual class="po-textual">immediate
                proper part</textual></quote><textual class="po-textual"> can be given a straightforward and natural definition: </textual><quote class="po-inline e613 e613"><textual class="po-textual">x
                is an immediate proper part of y</textual></quote><textual class="po-textual"> =</textual><subscript class="po-atom e614 e614"><textual class="po-textual">df</textual></subscript><textual class="po-textual"> (x ≪ y) ∧
              ¬(∃z)((x ≪ z) ∧ (z ≪ y))</textual></para></footnote><textual class="po-textual"> 
</textual><table class="po-container e615 e615"><tr class="po-table e616 e616"><th class="po-field e617 e617"><textual class="po-textual">Id</textual></th><th class="po-field e618 e618"><textual class="po-textual">Type</textual></th><th class="po-field e619 e619"><textual class="po-textual">Label</textual></th><th class="po-field e620 e620"><textual class="po-textual">Kind</textual></th><th class="po-field e621 e621"><textual class="po-textual">Assigned property</textual></th><th class="po-field e622 e622"><textual class="po-textual">Next atom</textual></th><th class="po-field e623 e623"><textual class="po-textual">Next molecule</textual></th><th class="po-field e624 e624"><textual class="po-textual">Immediate parts</textual></th></tr><tr class="po-table e625 e625"><td class="po-block e626 e626"><textual class="po-textual">i01</textual></td><td class="po-block e627 e627"><textual class="po-textual">"A"</textual></td><td class="po-block e628 e628"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e629 e629"><textual class="po-textual">A</textual></td><td class="po-block e630 e630"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e631 e631"><textual class="po-textual">i02</textual></td><td class="po-block e632 e632"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e633 e633"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e634 e634"><td class="po-block e635 e635"><textual class="po-textual">i02</textual></td><td class="po-block e636 e636"><textual class="po-textual">" "</textual></td><td class="po-block e637 e637"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e638 e638"><textual class="po-textual">A</textual></td><td class="po-block e639 e639"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e640 e640"><textual class="po-textual">i03</textual></td><td class="po-block e641 e641"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e642 e642"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e643 e643"><td class="po-block e644 e644"><textual class="po-textual">i03</textual></td><td class="po-block e645 e645"><textual class="po-textual">"r"</textual></td><td class="po-block e646 e646"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e647 e647"><textual class="po-textual">A</textual></td><td class="po-block e648 e648"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e649 e649"><textual class="po-textual">i04</textual></td><td class="po-block e650 e650"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e651 e651"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e652 e652"><td class="po-block e653 e653"><textual class="po-textual">i04</textual></td><td class="po-block e654 e654"><textual class="po-textual">"o"</textual></td><td class="po-block e655 e655"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e656 e656"><textual class="po-textual">A</textual></td><td class="po-block e657 e657"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e658 e658"><textual class="po-textual">i05</textual></td><td class="po-block e659 e659"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e660 e660"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e661 e661"><td class="po-block e662 e662"><textual class="po-textual">i05</textual></td><td class="po-block e663 e663"><textual class="po-textual">"o"</textual></td><td class="po-block e664 e664"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e665 e665"><textual class="po-textual">A</textual></td><td class="po-block e666 e666"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e667 e667"><textual class="po-textual">i06</textual></td><td class="po-block e668 e668"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e669 e669"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e670 e670"><td class="po-block e671 e671"><textual class="po-textual">i06</textual></td><td class="po-block e672 e672"><textual class="po-textual">"e"</textual></td><td class="po-block e673 e673"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e674 e674"><textual class="po-textual">A</textual></td><td class="po-block e675 e675"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e676 e676"><textual class="po-textual">i07</textual></td><td class="po-block e677 e677"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e678 e678"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e679 e679"><td class="po-block e680 e680"><textual class="po-textual">i07</textual></td><td class="po-block e681 e681"><textual class="po-textual">" "</textual></td><td class="po-block e682 e682"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e683 e683"><textual class="po-textual">A</textual></td><td class="po-block e684 e684"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e685 e685"><textual class="po-textual">i08</textual></td><td class="po-block e686 e686"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e687 e687"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e688 e688"><td class="po-block e689 e689"><textual class="po-textual">i08</textual></td><td class="po-block e690 e690"><textual class="po-textual">"i"</textual></td><td class="po-block e691 e691"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e692 e692"><textual class="po-textual">A</textual></td><td class="po-block e693 e693"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e694 e694"><textual class="po-textual">i09</textual></td><td class="po-block e695 e695"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e696 e696"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e697 e697"><td class="po-block e698 e698"><textual class="po-textual">i09</textual></td><td class="po-block e699 e699"><textual class="po-textual">"s"</textual></td><td class="po-block e700 e700"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e701 e701"><textual class="po-textual">A</textual></td><td class="po-block e702 e702"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e703 e703"><textual class="po-textual">i10</textual></td><td class="po-block e704 e704"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e705 e705"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e706 e706"><td class="po-block e707 e707"><textual class="po-textual">i10</textual></td><td class="po-block e708 e708"><textual class="po-textual">" "</textual></td><td class="po-block e709 e709"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e710 e710"><textual class="po-textual">A</textual></td><td class="po-block e711 e711"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e712 e712"><textual class="po-textual">i11</textual></td><td class="po-block e713 e713"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e714 e714"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e715 e715"><td class="po-block e716 e716"><textual class="po-textual">i11</textual></td><td class="po-block e717 e717"><textual class="po-textual">"a"</textual></td><td class="po-block e718 e718"><textual class="po-textual">"a"</textual></td><td class="po-block e719 e719"><textual class="po-textual">A M E</textual></td><td class="po-block e720 e720"><textual class="po-textual">emph</textual></td><td class="po-block e721 e721"><textual class="po-textual">i12</textual></td><td class="po-block e722 e722"><textual class="po-textual">i21</textual></td><td class="po-block e723 e723"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e724 e724"><td class="po-block e725 e725"><textual class="po-textual">i12</textual></td><td class="po-block e726 e726"><textual class="po-textual">" "</textual></td><td class="po-block e727 e727"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e728 e728"><textual class="po-textual">A</textual></td><td class="po-block e729 e729"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e730 e730"><textual class="po-textual">i13</textual></td><td class="po-block e731 e731"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e732 e732"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e733 e733"><td class="po-block e734 e734"><textual class="po-textual">i13</textual></td><td class="po-block e735 e735"><textual class="po-textual">"r"</textual></td><td class="po-block e736 e736"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e737 e737"><textual class="po-textual">A</textual></td><td class="po-block e738 e738"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e739 e739"><textual class="po-textual">i14</textual></td><td class="po-block e740 e740"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e741 e741"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e742 e742"><td class="po-block e743 e743"><textual class="po-textual">i14</textual></td><td class="po-block e744 e744"><textual class="po-textual">"o"</textual></td><td class="po-block e745 e745"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e746 e746"><textual class="po-textual">A</textual></td><td class="po-block e747 e747"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e748 e748"><textual class="po-textual">i15</textual></td><td class="po-block e749 e749"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e750 e750"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e751 e751"><td class="po-block e752 e752"><textual class="po-textual">i15</textual></td><td class="po-block e753 e753"><textual class="po-textual">"s"</textual></td><td class="po-block e754 e754"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e755 e755"><textual class="po-textual">A</textual></td><td class="po-block e756 e756"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e757 e757"><textual class="po-textual">i16</textual></td><td class="po-block e758 e758"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e759 e759"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e760 e760"><td class="po-block e761 e761"><textual class="po-textual">i16</textual></td><td class="po-block e762 e762"><textual class="po-textual">"e"</textual></td><td class="po-block e763 e763"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e764 e764"><textual class="po-textual">A</textual></td><td class="po-block e765 e765"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e766 e766"><textual class="po-textual">i17</textual></td><td class="po-block e767 e767"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e768 e768"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e769 e769"><td class="po-block e770 e770"><textual class="po-textual">i17</textual></td><td class="po-block e771 e771"><textual class="po-textual">"."</textual></td><td class="po-block e772 e772"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e773 e773"><textual class="po-textual">A</textual></td><td class="po-block e774 e774"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e775 e775"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e776 e776"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e777 e777"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e778 e778"><td class="po-block e779 e779"><textual class="po-textual">i18</textual></td><td class="po-block e780 e780"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e781 e781"><textual class="po-textual">"A "</textual></td><td class="po-block e782 e782"><textual class="po-textual">    M</textual></td><td class="po-block e783 e783"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e784 e784"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e785 e785"><textual class="po-textual">i19</textual></td><td class="po-block e786 e786"><textual class="po-textual">i01, i02</textual></td></tr><tr class="po-table e787 e787"><td class="po-block e788 e788"><textual class="po-textual">i19</textual></td><td class="po-block e789 e789"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e790 e790"><textual class="po-textual">"rose"</textual></td><td class="po-block e791 e791"><textual class="po-textual">    M E</textual></td><td class="po-block e792 e792"><textual class="po-textual">quote</textual></td><td class="po-block e793 e793"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e794 e794"><textual class="po-textual">i20</textual></td><td class="po-block e795 e795"><textual class="po-textual">i03, i04, i05, i06</textual></td></tr><tr class="po-table e796 e796"><td class="po-block e797 e797"><textual class="po-textual">i20</textual></td><td class="po-block e798 e798"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e799 e799"><textual class="po-textual">" is "</textual></td><td class="po-block e800 e800"><textual class="po-textual">    M</textual></td><td class="po-block e801 e801"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e802 e802"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e803 e803"><textual class="po-textual">i11</textual></td><td class="po-block e804 e804"><textual class="po-textual">i07, i08, i09, i10</textual></td></tr><tr class="po-table e805 e805"><td class="po-block e806 e806"><textual class="po-textual">i21</textual></td><td class="po-block e807 e807"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e808 e808"><textual class="po-textual">"rose."</textual></td><td class="po-block e809 e809"><textual class="po-textual">    M</textual></td><td class="po-block e810 e810"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e811 e811"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e812 e812"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e813 e813"><textual class="po-textual">i12, i13, i14, i15, i16, i17</textual></td></tr><tr class="po-table e814 e814"><td class="po-block e815 e815"><textual class="po-textual">i22</textual></td><td class="po-block e816 e816"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e817 e817"><textual class="po-textual">"A rose is a rose."</textual></td><td class="po-block e818 e818"><textual class="po-textual">         E</textual></td><td class="po-block e819 e819"><textual class="po-textual">para</textual></td><td class="po-block e820 e820"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e821 e821"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e822 e822"><textual class="po-textual">i18, i19, i20, i11, i21</textual></td></tr></table><textual class="po-textual">

        </textual></para><para class="po-block e823 e823"><textual class="po-textual">The elemental strings i22, i19 and i11 correspond to the XML elements (1)-(3) in a
          fairly straightforward way, and can now be identified for example as follows:
          </textual><programlisting class="po-block e824 e824" xml:space="preserve"><textual class="po-textual">i22 = (℩x)(para(x) ∧ E(x))
i19 = (℩x)(quote(x) ∧ E(x))
i11 = (℩x)(emph(x) ∧ E(x))</textual></programlisting></para><para class="po-block e825 e825"><textual class="po-textual">The non-elemental molecules i18, i20 and i21 can be identified for example as follows:
          </textual><programlisting class="po-block e826 e826" xml:space="preserve"><textual class="po-textual">i18 = (℩x)(∃y)(quote(y) ∧ N(x,y))
i20 = (℩x)(∃y)(emph(y) ∧ N(x,y))
i21 = (℩x)(M(x) ∧ ¬(∃y)N(x,y))</textual></programlisting></para><para class="po-block e827 e827"><textual class="po-textual">Although in this particular case the denoting expressions identifying individuals are
          fairly simple, identifying individuals by means of denoting expressions may in general
          become rather tedious. For example, in any document with more than one individual assigned
          the property quote, the denoting expression identifying individual i19 above would return
          the sum of all those individuals.</textual></para><para class="po-block e828 e828"><textual class="po-textual">So although we have shown that all atoms, molecular and elemental strings
          </textual><textual class="po-textual">of (1) can be identified by our relatively straightforward
          application of the Calculus, some of the above examples draw on the simplicity of the
          example and are rather ad hoc. Therefore, before we proceed to discuss how the Calculus
          can be used to make statements and make inferences about a document, we introduce a
          slightly more complicated (and also more realistic) example. </textual></para><para class="po-block e829 e829"><textual class="po-textual">Consider the following XML document:
          </textual><programlisting class="po-block e830 e830" xml:space="preserve"><textual class="po-textual">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;doc&gt; 
    A rule:
    &lt;list&gt;
        &lt;item&gt;First:&lt;/item&gt;
        &lt;item&gt;
            &lt;list&gt;
                &lt;item&gt;think,&lt;/item&gt;
                &lt;item&gt;decide.&lt;/item&gt;
            &lt;/list&gt;
        &lt;/item&gt;
        &lt;item&gt;Then:&lt;/item&gt;
        &lt;item&gt;
            &lt;list&gt;
                &lt;item&gt;act,&lt;/item&gt;
                &lt;item&gt;regret.&lt;/item&gt;
            &lt;/list&gt;
        &lt;/item&gt;
    &lt;/list&gt;
&lt;/doc&gt;</textual></programlisting></para><para class="po-block e831 e831"><textual class="po-textual">Once again we provide identifiers for individuals of the document and present their
          properties and relations in tabular form, but this time we include only the molecular and
          elemental individuals: </textual><footnote class="po-popup e832 e832"><para class="po-block e833 e833"><textual class="po-textual">We have made life even more comfortable for ourselves by leaving out the
              blankspace molecular atoms which occur between each of the molecules listed in the
              table.</textual></para></footnote><textual class="po-textual">
</textual><table class="po-container e834 e834"><tr class="po-table e835 e835"><th class="po-field e836 e836"><textual class="po-textual">Id</textual></th><th class="po-field e837 e837"><textual class="po-textual">Label</textual></th><th class="po-field e838 e838"><textual class="po-textual">Kind</textual></th><th class="po-field e839 e839"><textual class="po-textual">Assigned property</textual></th><th class="po-field e840 e840"><textual class="po-textual">Next molecule</textual></th><th class="po-field e841 e841"><textual class="po-textual">Immediate parts</textual></th></tr><tr class="po-table e842 e842"><td class="po-block e843 e843"><textual class="po-textual">i01</textual></td><td class="po-block e844 e844"><textual class="po-textual">A rule: </textual></td><td class="po-block e845 e845"><textual class="po-textual">M</textual></td><td class="po-block e846 e846"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e847 e847"><textual class="po-textual">i02</textual></td><td class="po-block e848 e848"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e849 e849"><td class="po-block e850 e850"><textual class="po-textual">i02</textual></td><td class="po-block e851 e851"><textual class="po-textual">First:</textual></td><td class="po-block e852 e852"><textual class="po-textual">M E</textual></td><td class="po-block e853 e853"><textual class="po-textual">item</textual></td><td class="po-block e854 e854"><textual class="po-textual">i03</textual></td><td class="po-block e855 e855"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e856 e856"><td class="po-block e857 e857"><textual class="po-textual">i03</textual></td><td class="po-block e858 e858"><textual class="po-textual">think,</textual></td><td class="po-block e859 e859"><textual class="po-textual">M E</textual></td><td class="po-block e860 e860"><textual class="po-textual">item</textual></td><td class="po-block e861 e861"><textual class="po-textual">i04</textual></td><td class="po-block e862 e862"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e863 e863"><td class="po-block e864 e864"><textual class="po-textual">i04</textual></td><td class="po-block e865 e865"><textual class="po-textual">decide.</textual></td><td class="po-block e866 e866"><textual class="po-textual">M E</textual></td><td class="po-block e867 e867"><textual class="po-textual">item</textual></td><td class="po-block e868 e868"><textual class="po-textual">i05</textual></td><td class="po-block e869 e869"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e870 e870"><td class="po-block e871 e871"><textual class="po-textual">i05</textual></td><td class="po-block e872 e872"><textual class="po-textual">Then:</textual></td><td class="po-block e873 e873"><textual class="po-textual">M E</textual></td><td class="po-block e874 e874"><textual class="po-textual">item</textual></td><td class="po-block e875 e875"><textual class="po-textual">i06</textual></td><td class="po-block e876 e876"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e877 e877"><td class="po-block e878 e878"><textual class="po-textual">i06</textual></td><td class="po-block e879 e879"><textual class="po-textual">act,</textual></td><td class="po-block e880 e880"><textual class="po-textual">M E</textual></td><td class="po-block e881 e881"><textual class="po-textual">item</textual></td><td class="po-block e882 e882"><textual class="po-textual">i07</textual></td><td class="po-block e883 e883"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e884 e884"><td class="po-block e885 e885"><textual class="po-textual">i07</textual></td><td class="po-block e886 e886"><textual class="po-textual">regret.</textual></td><td class="po-block e887 e887"><textual class="po-textual">M E</textual></td><td class="po-block e888 e888"><textual class="po-textual">item</textual></td><td class="po-block e889 e889"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e890 e890"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e891 e891"><td class="po-block e892 e892"><textual class="po-textual">i08</textual></td><td class="po-block e893 e893"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e894 e894"><textual class="po-textual">E</textual></td><td class="po-block e895 e895"><textual class="po-textual">list, item</textual></td><td class="po-block e896 e896"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e897 e897"><textual class="po-textual">i03, i04</textual></td></tr><tr class="po-table e898 e898"><td class="po-block e899 e899"><textual class="po-textual">i09</textual></td><td class="po-block e900 e900"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e901 e901"><textual class="po-textual">E</textual></td><td class="po-block e902 e902"><textual class="po-textual">list, item</textual></td><td class="po-block e903 e903"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e904 e904"><textual class="po-textual">i06, i07</textual></td></tr><tr class="po-table e905 e905"><td class="po-block e906 e906"><textual class="po-textual">i10</textual></td><td class="po-block e907 e907"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e908 e908"><textual class="po-textual">E</textual></td><td class="po-block e909 e909"><textual class="po-textual">list</textual></td><td class="po-block e910 e910"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e911 e911"><textual class="po-textual">i02, i08, i05, i09</textual></td></tr><tr class="po-table e912 e912"><td class="po-block e913 e913"><textual class="po-textual">i11</textual></td><td class="po-block e914 e914"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e915 e915"><textual class="po-textual">E</textual></td><td class="po-block e916 e916"><textual class="po-textual">doc</textual></td><td class="po-block e917 e917"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e918 e918"><textual class="po-textual">i01, i10</textual></td></tr></table><textual class="po-textual">

        </textual></para><para class="po-block e919 e919"><textual class="po-textual">Note that the individuals i08 and i09 are each represented as one individual with two
          assigned properties, rather than as two individuals each with one property. The difference
          between this representation and the conventional XML representation can be illustrated by
          juxtaposing a conventional XML tree of the document (to the left) and what we might call a
          mereological graph (to the right):</textual><footnote class="po-popup e920 e920"><para class="po-block e921 e921"><textual class="po-textual">It should be noted that the mereological graph here has been construed so as to
              highlight the differences from XML discussed in this particular example, and that
              other important differences do not come out with this kind of visualization.</textual></para><para class="po-block e922 e922"><textual class="po-textual"> For example, the nodes of the XML graph are commonly understood to represent XML
              elements, which in this case have been decorated with their generic identifiers. The
              nodes of the mereological graph, however, represent individuals and are decorated with
              what we have here called there assigned properties. Moreover, the nodes visible in the
              mereological graph represent only a tiny fraction of the individuals of the document. </textual></para><para class="po-block e923 e923"><textual class="po-textual">The arcs of the XML graph are commonly understood to represent containment and/or
              dominance relations between elements. In the mereological graph, they represent
              exclusively part-whole relationships. Again, the number of part-whole relationships
              depicted in the graph represent only a fraction of the part-whole relationships
              between the individuals of the document.</textual></para></footnote><textual class="po-textual">
          </textual><mediaobject class="po-container e924 e924"><imageobject class="po-container e925 e925"><imagedata class="po-meta e926 e926" fileref="../../../vol3/graphics/Huitfeldt01/Huitfeldt01-001.jpg" format="jpg"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><textual class="po-textual">
        </textual></para><para class="po-block e927 e927"><textual class="po-textual">Because of our decision not to count tags as part of the document, all coextensive XML
          elements will be represented as one elemental individual. The nesting order of these
          elements in the XML document will not be preserved in this representation. </textual><footnote class="po-popup e928 e928"><para class="po-block e929 e929"><textual class="po-textual">It might of course seem that the nesting order is preserved by the order in which
              the assigned properties are mentioned in the table. However the table represents an
              unordered set of statements, so the order is insignificant. More on nesting order of
              coextensive elements further below.</textual></para></footnote><textual class="po-textual">
        </textual></para><para class="po-block e930 e930"><textual class="po-textual">As before, we can use denoting expressions to refer to any part of the document, for
          example:
          </textual><programlisting class="po-block e931 e931" xml:space="preserve"><textual class="po-textual">i01 = (℩x)¬(∃y)N(y,x)
i02 = (℩x)(item(x) ∧ ¬(∃y)(item(y) ∧ P(y,x)))
i03 = (℩x)(∃y)(∃z)(w)(v)
      ((x ≪ y) ∧ list(y) ∧ 
      (y ≪ z) ∧ list(z) ∧
      (N(w,x) → ¬(w ≪ y)) ∧ 
      (N(v,w) → ¬(v ≪ z))) 
i09 = (℩x)(∃y)(∃z)
      (list(x) ∧ (x ≪ y) ∧ list(y) ∧
       list(z) ∧ (z ≪ y) ∧ ¬(x = z) ∧ P(x,z))</textual></programlisting><textual class="po-textual">
        </textual></para></section><section class="po-hcontainer e932 e932"><title class="po-block e933 e933"><textual class="po-textual">Statements and inferences</textual></title><para class="po-block e934 e934"><textual class="po-textual">We can also use the Calculus to make statements about the document —
          unquantified, such as (1)–(4), or quantified, such as (5)–(8):
          </textual><programlisting class="po-block e935 e935" xml:space="preserve"><textual class="po-textual">(1) list(i09)
(2) item(i09)
(3) i07 ≪ i09
(4) i09 ≪ i10
(5) (x)(y)((list(x) ∧ item(x) ∧ (y ≪ x)) → item(y))
(6) (x)(y)((list(x) ∧ item(x) ∧ (x ≪ y)) → (list(y) ∨ doc(y)))
(7) (x)(item(x) → (∃y)((x ≪ y)  ∧ list(y)))
(8) (x)(item(x) → (∃y)(∃z)
   (item(y) ∧ list(z)  ∧ (x ≪ z) ∧ (y ≪ z)  ∧ ¬(x = y)))</textual></programlisting><textual class="po-textual">
          In order to avoid unnecessary misunderstanding, it should be pointed out that
          (1)–(8) are descriptive statements about this particular document. (In other
          context, such as for example situations where we wanted to express general constraints on
          document structure, we might of course also want to state facts about document
            </textual><emphasis class="po-inline e936 e936"><textual class="po-textual">types</textual></emphasis><textual class="po-textual">, but that is not our issue here.) </textual></para><para class="po-block e937 e937"><textual class="po-textual">From the statements we can make inferences, such as for example:
          </textual><programlisting class="po-block e938 e938" xml:space="preserve"><textual class="po-textual">
(9) item(i07)
     [From (1), (2), (3) and (5).]
(10) list(i10) ∨ doc(i10)
     [From (1), (2), (4) and (6).]
(11) (∃y)((i09 ≪ y) ∧ list(y))
     [From (2) and (7).]
(12) (∃y)(∃z)(item(y) ∧ list(z) ∧ (i07 ≪ z) ∧ (y ≪ z) ∧ ¬(i07 = y))
     [From (8) and (9).]</textual></programlisting><textual class="po-textual">
        </textual></para></section><section class="po-hcontainer e939 e939"><title class="po-block e940 e940"><textual class="po-textual">Conclusion</textual></title><para class="po-block e941 e941"><textual class="po-textual">We have shown that strings composed of characters defined as atomic individuals can be
          identified and referenced by denoting expressions, that the Calculus can be used to
          describe the part-whole relationships and ordering relations between parts of the document
          as well as the properties ascribed by generic identifiers. We have also shown that this
          application of the Calculus can be used for making statements about documents and for
          drawing inferences from these statements.</textual></para><para class="po-block e942 e942"><textual class="po-textual">The approach chosen here has at least two obvious problems, or shortcomings; one
          concerns the representation of coextensive elements, one relates to the representation of
          empty elements. Before we discuss these problems, however, we would like to assess one of
          its possible merits. In the next section, we will therefore sketch how this application of
          the Calculus can be used for the formulation of rules for propagation of properties among
          the parts of a document.</textual></para></section></section></section><section class="po-hcontainer e943 e943" xml:id="propagation"><title class="po-block e944 e944"><textual class="po-textual">Property Propagation — a Sketch</textual></title><para class="po-block e945 e945"><textual class="po-textual">We have assumed that the generic identifier of an element may be seen as assigning a
      property to the PCDATA content of that element, and not to any proper part of that PCDATA
      content. But sometimes, the meaning of the markup is such that that property is not assigned
      (or not only assigned) to the contents of the element itself, but also to all or some of its
      descendants, or to all or some of its ancestors, or to one or more of its siblings, or to only
      specific other elements. Furthermore, what is assigned to the element or elements in question
      may be not a monadic property, but a relation of them to other elements in the same document,
      or even to document elements or other entities outside that document. Thus, the propagation of
      properties ascribed by the generic identifier of an element may follow a large diversity of
      patterns.</textual></para><para class="po-block e946 e946"><textual class="po-textual">Using examples from the TEI and HTML encoding schemes, we will show that some of these
      patterns can conveniently be described by means of our application of the Calculus. We will
      first address some of the general distribution patterns identified by Nelson Goodman, which
      seem to represent important aspects of the intended semantics of certain TEI or HTML element
      types. We will then proceed to more complicated examples.</textual></para><section class="po-hcontainer e947 e947"><title class="po-block e948 e948"><textual class="po-textual">Dissective and anti-dissective properties</textual></title><para class="po-block e949 e949"><textual class="po-textual">As mentioned, in our application of the Calculus so far we have assumed that the
        property designated by the generic identifier of an XML element is assigned exclusively to
        the individual delimited by the start and end tags of the element, and not to its parts.
        This seems plausible enough for a number of element types, such as paragraphs, list items
        and titles. For example, a part of a paragraph, a list item or a title is not in general
        itself a paragraph, a list item or a title.</textual></para><para class="po-block e950 e950"><textual class="po-textual">TEI element types such as &lt;hi&gt; (highlighting)</textual><footnote class="po-popup e951 e951"><para class="po-block e952 e952"><textual class="po-textual">In the following we will often use the expression </textual><quote class="po-inline e953 e953"><textual class="po-textual">element</textual></quote><textual class="po-textual"> or
              </textual><quote class="po-inline e954 e954"><textual class="po-textual">element type</textual></quote><textual class="po-textual"> as short for </textual><quote class="po-inline e955 e955"><emphasis class="po-inline e956 e956"><textual class="po-textual">property</textual></emphasis><textual class="po-textual"> ascribed
              to an element by its generic identifier</textual></quote><textual class="po-textual">.</textual></para></footnote><textual class="po-textual"> or &lt;add&gt; (added), however, do not seem to follow this rule. Every
        part of a highlighted or added element is itself presumably highlighted or added. Other
        examples may be &lt;del&gt; (deleted) and &lt;foreign&gt;. The HTML element
        type &lt;i&gt; (italics) may provide an even clearer example here — every
        part of an italicized element is itself in italics. </textual></para><para class="po-block e957 e957"><textual class="po-textual">According to Goodman, </textual><quote class="po-inline e958 e958"><textual class="po-textual">a ... predicate is ... </textual><emphasis class="po-inline e959 e959"><textual class="po-textual">dissective</textual></emphasis><textual class="po-textual"> if
          it is satisfied by every part of every individual that satisfies it</textual></quote><textual class="po-textual"> [</textual><xref class="po-milestone e960 e960" linkend="Goodman1972"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, p. 38]. A dissective one-place predicate is defined as
        follows:
        </textual><programlisting class="po-block e961 e961" xml:space="preserve"><textual class="po-textual">F is dissective iff (x)(y)((F(x) ∧ (y &lt; x)) → F(y))</textual></programlisting><textual class="po-textual">
      </textual></para><para class="po-block e962 e962"><textual class="po-textual">Consider the following document fragment:
        </textual><programlisting class="po-block e963 e963" xml:space="preserve"><textual class="po-textual">
&lt;s&gt;We
   &lt;add&gt;, as all 
      &lt;del&gt;purely &lt;hi&gt;human&lt;/hi&gt; and&lt;/del&gt; 
   finite beings,
   &lt;/add&gt; 
are all fallible.&lt;/s&gt;</textual></programlisting><textual class="po-textual">
        As earlier, we represent the properties of this fragment in tabular form. From now on,
        however, in stead of indicating </textual><quote class="po-inline e964 e964"><textual class="po-textual">assigned properties</textual></quote><textual class="po-textual"> for each individual we
        will list relevant statements (some of which may be inferences from statements about the
        properties of other individuals): 
</textual><table class="po-container e965 e965"><tr class="po-table e966 e966"><th class="po-field e967 e967"><textual class="po-textual">Id</textual></th><th class="po-field e968 e968"><textual class="po-textual">Label</textual></th><th class="po-field e969 e969"><textual class="po-textual">Kind</textual></th><th class="po-field e970 e970"><textual class="po-textual">Statements</textual></th><th class="po-field e971 e971"><textual class="po-textual">Next</textual></th><th class="po-field e972 e972"><textual class="po-textual">Parts</textual></th></tr><tr class="po-table e973 e973"><td class="po-block e974 e974"><textual class="po-textual">i01</textual></td><td class="po-block e975 e975"><textual class="po-textual">We</textual></td><td class="po-block e976 e976"><textual class="po-textual">M</textual></td><td class="po-block e977 e977"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e978 e978"><textual class="po-textual">i02</textual></td><td class="po-block e979 e979"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e980 e980"><td class="po-block e981 e981"><textual class="po-textual">i02</textual></td><td class="po-block e982 e982"><textual class="po-textual">, as all </textual></td><td class="po-block e983 e983"><textual class="po-textual">M</textual></td><td class="po-block e984 e984"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e985 e985"><textual class="po-textual">i03</textual></td><td class="po-block e986 e986"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e987 e987"><td class="po-block e988 e988"><textual class="po-textual">i03</textual></td><td class="po-block e989 e989"><textual class="po-textual">purely </textual></td><td class="po-block e990 e990"><textual class="po-textual">M</textual></td><td class="po-block e991 e991"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e992 e992"><textual class="po-textual">i04</textual></td><td class="po-block e993 e993"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e994 e994"><td class="po-block e995 e995"><textual class="po-textual">i04</textual></td><td class="po-block e996 e996"><textual class="po-textual">human</textual></td><td class="po-block e997 e997"><textual class="po-textual">M E</textual></td><td class="po-block e998 e998"><textual class="po-textual">hi(i04)</textual></td><td class="po-block e999 e999"><textual class="po-textual">i05</textual></td><td class="po-block e1000 e1000"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e1001 e1001"><td class="po-block e1002 e1002"><textual class="po-textual">i05</textual></td><td class="po-block e1003 e1003"><textual class="po-textual"> and</textual></td><td class="po-block e1004 e1004"><textual class="po-textual">M</textual></td><td class="po-block e1005 e1005"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1006 e1006"><textual class="po-textual">i06</textual></td><td class="po-block e1007 e1007"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e1008 e1008"><td class="po-block e1009 e1009"><textual class="po-textual">i06</textual></td><td class="po-block e1010 e1010"><textual class="po-textual"> finite beings,</textual></td><td class="po-block e1011 e1011"><textual class="po-textual">M</textual></td><td class="po-block e1012 e1012"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1013 e1013"><textual class="po-textual">i07</textual></td><td class="po-block e1014 e1014"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e1015 e1015"><td class="po-block e1016 e1016"><textual class="po-textual">i07</textual></td><td class="po-block e1017 e1017"><textual class="po-textual"> are all fallible.</textual></td><td class="po-block e1018 e1018"><textual class="po-textual">M</textual></td><td class="po-block e1019 e1019"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1020 e1020"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1021 e1021"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e1022 e1022"><td class="po-block e1023 e1023"><textual class="po-textual">i08</textual></td><td class="po-block e1024 e1024"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1025 e1025"><textual class="po-textual">E</textual></td><td class="po-block e1026 e1026"><textual class="po-textual">del(i08)</textual></td><td class="po-block e1027 e1027"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1028 e1028"><textual class="po-textual">i03, i04, i05</textual></td></tr><tr class="po-table e1029 e1029"><td class="po-block e1030 e1030"><textual class="po-textual">i09</textual></td><td class="po-block e1031 e1031"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1032 e1032"><textual class="po-textual">E</textual></td><td class="po-block e1033 e1033"><textual class="po-textual">add(i09)</textual></td><td class="po-block e1034 e1034"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1035 e1035"><textual class="po-textual">i02, i08, i06</textual></td></tr><tr class="po-table e1036 e1036"><td class="po-block e1037 e1037"><textual class="po-textual">i10</textual></td><td class="po-block e1038 e1038"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1039 e1039"><textual class="po-textual">E</textual></td><td class="po-block e1040 e1040"><textual class="po-textual">s(i10)</textual></td><td class="po-block e1041 e1041"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1042 e1042"><textual class="po-textual">i01, i08, i09, i07</textual></td></tr></table><textual class="po-textual">

        However, if we add the following statements
        to the effect that the properties add, del and hi are dissective:
        </textual><programlisting class="po-block e1043 e1043" xml:space="preserve"><textual class="po-textual">(x)(y)((add(x) ∧ (y &lt; x)) → add(y))
(x)(y)((del(x) ∧ (y &lt; x)) → del(y))    
(x)(y)((hi(x) ∧ (y &lt; x)) → hi(y))</textual></programlisting><textual class="po-textual">
        — then, we can infer additional properties, with the following result:
</textual><table class="po-container e1044 e1044"><tr class="po-table e1045 e1045"><th class="po-field e1046 e1046"><textual class="po-textual">Id</textual></th><th class="po-field e1047 e1047"><textual class="po-textual">Label</textual></th><th class="po-field e1048 e1048"><textual class="po-textual">Kind</textual></th><th class="po-field e1049 e1049"><textual class="po-textual">Statements</textual></th><th class="po-field e1050 e1050"><textual class="po-textual">Next</textual></th><th class="po-field e1051 e1051"><textual class="po-textual">Parts</textual></th></tr><tr class="po-table e1052 e1052"><td class="po-block e1053 e1053"><textual class="po-textual">i01</textual></td><td class="po-block e1054 e1054"><textual class="po-textual">We</textual></td><td class="po-block e1055 e1055"><textual class="po-textual">M</textual></td><td class="po-block e1056 e1056"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1057 e1057"><textual class="po-textual">i02</textual></td><td class="po-block e1058 e1058"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e1059 e1059"><td class="po-block e1060 e1060"><textual class="po-textual">i02</textual></td><td class="po-block e1061 e1061"><textual class="po-textual">, as all </textual></td><td class="po-block e1062 e1062"><textual class="po-textual">M</textual></td><td class="po-block e1063 e1063"><textual class="po-textual">del(i02) </textual></td><td class="po-block e1064 e1064"><textual class="po-textual">i03</textual></td><td class="po-block e1065 e1065"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e1066 e1066"><td class="po-block e1067 e1067"><textual class="po-textual">i03</textual></td><td class="po-block e1068 e1068"><textual class="po-textual">purely </textual></td><td class="po-block e1069 e1069"><textual class="po-textual">M</textual></td><td class="po-block e1070 e1070"><textual class="po-textual">del(i03), add(i03)</textual></td><td class="po-block e1071 e1071"><textual class="po-textual">i04</textual></td><td class="po-block e1072 e1072"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e1073 e1073"><td class="po-block e1074 e1074"><textual class="po-textual">i04</textual></td><td class="po-block e1075 e1075"><textual class="po-textual">human</textual></td><td class="po-block e1076 e1076"><textual class="po-textual">M E</textual></td><td class="po-block e1077 e1077"><textual class="po-textual">hi(i04), del(i04), add(i04)</textual></td><td class="po-block e1078 e1078"><textual class="po-textual">i05</textual></td><td class="po-block e1079 e1079"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e1080 e1080"><td class="po-block e1081 e1081"><textual class="po-textual">i05</textual></td><td class="po-block e1082 e1082"><textual class="po-textual"> and</textual></td><td class="po-block e1083 e1083"><textual class="po-textual">M</textual></td><td class="po-block e1084 e1084"><textual class="po-textual">del(i05), add(i05)</textual></td><td class="po-block e1085 e1085"><textual class="po-textual">i06</textual></td><td class="po-block e1086 e1086"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e1087 e1087"><td class="po-block e1088 e1088"><textual class="po-textual">i06</textual></td><td class="po-block e1089 e1089"><textual class="po-textual"> finite beings,</textual></td><td class="po-block e1090 e1090"><textual class="po-textual">M</textual></td><td class="po-block e1091 e1091"><textual class="po-textual">del(i06) </textual></td><td class="po-block e1092 e1092"><textual class="po-textual">i07</textual></td><td class="po-block e1093 e1093"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e1094 e1094"><td class="po-block e1095 e1095"><textual class="po-textual">i07</textual></td><td class="po-block e1096 e1096"><textual class="po-textual"> are all fallible.</textual></td><td class="po-block e1097 e1097"><textual class="po-textual">M</textual></td><td class="po-block e1098 e1098"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1099 e1099"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1100 e1100"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e1101 e1101"><td class="po-block e1102 e1102"><textual class="po-textual">i08</textual></td><td class="po-block e1103 e1103"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1104 e1104"><textual class="po-textual">E</textual></td><td class="po-block e1105 e1105"><textual class="po-textual">del(i08), add(i08)</textual></td><td class="po-block e1106 e1106"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1107 e1107"><textual class="po-textual">i03, i04, i05</textual></td></tr><tr class="po-table e1108 e1108"><td class="po-block e1109 e1109"><textual class="po-textual">i09</textual></td><td class="po-block e1110 e1110"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1111 e1111"><textual class="po-textual">E</textual></td><td class="po-block e1112 e1112"><textual class="po-textual">add(i09)</textual></td><td class="po-block e1113 e1113"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1114 e1114"><textual class="po-textual">i02, i08, i06</textual></td></tr><tr class="po-table e1115 e1115"><td class="po-block e1116 e1116"><textual class="po-textual">i10</textual></td><td class="po-block e1117 e1117"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1118 e1118"><textual class="po-textual">E</textual></td><td class="po-block e1119 e1119"><textual class="po-textual">s(i10)</textual></td><td class="po-block e1120 e1120"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1121 e1121"><textual class="po-textual">i01, i08, i09, i07</textual></td></tr></table><textual class="po-textual">

        (Note that this is the first example so far of non-elemental individuals
        carrying assigned properties.) </textual></para><para class="po-block e1122 e1122"><textual class="po-textual">Goodman observes that </textual><quote class="po-inline e1123 e1123"><textual class="po-textual">In practice, we are usually concerned only with
          disectiveness under some special or systematic limitations...</textual></quote><textual class="po-textual"> [</textual><xref class="po-milestone e1124 e1124" linkend="Goodman1972"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, p. 38]. This seems to be the case here, too: While the
        TEI elements &lt;hi&gt;, &lt;add&gt; and &lt;del&gt; and the HTML
        element &lt;i&gt; seem to apply all the way down to every atomic part of an
        individual, an element type like &lt;foreign&gt; hardly applies below word-level. </textual></para><para class="po-block e1125 e1125"><textual class="po-textual">Furthermore, there seem to be exceptions even in the case of &lt;hi&gt;,
        &lt;add&gt; and &lt;del&gt;: In a transcription, a &lt;note&gt;
        (note) element is normally not intended to inherit the property in question. A more
        generally usable formula for disectiveness may therefore be this:
        </textual><programlisting class="po-block e1126 e1126" xml:space="preserve"><textual class="po-textual">(x)(y)(z)((F(x) ∧ (y &lt; x) ∧ 
   ¬((z &lt; x) ∧ (y &lt; z) ∧ (G(z) ∨ H(z) ∨ ...))) 
   → F(y))</textual></programlisting><textual class="po-textual">
        where G, H,... indicate exceptions. </textual></para><para class="po-block e1127 e1127"><textual class="po-textual">Let us define an </textual><emphasis class="po-inline e1128 e1128"><textual class="po-textual">anti-dissective</textual></emphasis><textual class="po-textual"> one-place predicate as follows: </textual><footnote class="po-popup e1129 e1129"><para class="po-block e1130 e1130"><textual class="po-textual">The term </textual><quote class="po-inline e1131 e1131"><textual class="po-textual">anti-dissective</textual></quote><textual class="po-textual"> (and its definition) is ours, not Goodman's.
            The same goes for the terms </textual><quote class="po-inline e1132 e1132"><textual class="po-textual">anti-expansive</textual></quote><textual class="po-textual"> and
            </textual><quote class="po-inline e1133 e1133"><textual class="po-textual">anti-collective</textual></quote><textual class="po-textual"> in the following paragraphs.</textual></para></footnote><textual class="po-textual">
        </textual><programlisting class="po-block e1134 e1134" xml:space="preserve"><textual class="po-textual">F is anti-dissective iff (x)(y)((F(x) ∧ (y ≪ x)) → ¬F(y))</textual></programlisting><textual class="po-textual">
      </textual></para><para class="po-block e1135 e1135"><textual class="po-textual">The TEI element &lt;docDate&gt; (document date) and the TEI and HTML
        &lt;body&gt; may serve as examples of anti-dissective properties, — no
        part of a &lt;docDate&gt; or a &lt;body&gt; element is itself a
        &lt;body&gt; or a &lt;docDate&gt;. The HTML &lt;p&gt; (paragraph)
        element is also clearly anti-dissective.</textual></para><para class="po-block e1136 e1136"><textual class="po-textual"> The TEI &lt;p&gt; element presents a complication. It would seem to be
        anti-dissective, but unlike HTML, TEI allows &lt;p&gt;s nested within
        &lt;p&gt;s. So
        </textual><programlisting class="po-block e1137 e1137" xml:space="preserve"><textual class="po-textual">(x)(y)((p(x) ∧ (y ≪ x)) → ¬p(y))</textual></programlisting><textual class="po-textual">
        is true in HTML, but not in TEI. The TEI &lt;p&gt; element can therefore not be said
        to be either dissective or anti-dissective.</textual><footnote class="po-popup e1138 e1138"><para class="po-block e1139 e1139"><textual class="po-textual">A reflection upon this fact may also make us change our judgement of the HTML
            &lt;p&gt; element: Perhaps it is just a result of the content model of
            &lt;p&gt; in HTML that it seems anti-dissective. Anyhow, since nested
            &lt;p&gt;s simply do not occur in HTML, it does not matter much whether we
            classify the property as non-dissective or anti-dissective.
            </textual><textual class="po-textual">
          </textual></para></footnote><textual class="po-textual">
      </textual></para></section><section class="po-hcontainer e1140 e1140"><title class="po-block e1141 e1141"><textual class="po-textual">Expansive and anti-expansive properties</textual></title><para class="po-block e1142 e1142"><quote class="po-inline e1143 e1143"><textual class="po-textual">A one-place predicate is </textual><emphasis class="po-inline e1144 e1144"><textual class="po-textual">expansive</textual></emphasis><textual class="po-textual"> if it is satisfied by
          everything that has a part satisfying it. </textual></quote><textual class="po-textual">[</textual><xref class="po-milestone e1145 e1145" linkend="Goodman1972"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">,
        p. 38]. An expansive one-place predicate can be defined as follows:
        </textual><programlisting class="po-block e1146 e1146" xml:space="preserve"><textual class="po-textual">F is expansive iff (x)(y)((F(x) ∧ (x &lt; y)) → F(y))</textual></programlisting><textual class="po-textual">
        In more conventional XML terms, while dissective predicates propagate </textual><quote class="po-inline e1147 e1147"><textual class="po-textual">down</textual></quote><textual class="po-textual">
        the document tree, expansive predicates propagate </textual><quote class="po-inline e1148 e1148"><textual class="po-textual">upwards</textual></quote><textual class="po-textual"> in the tree, from
        children to their parents. This might be thought to be unusual, and actually it is difficult
        to find examples of such properties in the TEI and HTML encoding schemes. Element types such
        as &lt;docDate&gt; and &lt;docAuthor&gt; may, as we shall see later, be said
        to ascribe properties to individuals of which they are a part, but that does not make these
        individuals themselves &lt;docDate&gt;s or &lt;docAuthor&gt;s. (Even so, it
        easy to think of expansive properties: — for example, the property of
          </textual><emphasis class="po-inline e1149 e1149"><textual class="po-textual">containing the word </textual><quote class="po-inline e1150 e1150"><textual class="po-textual">Hamlet</textual></quote></emphasis><textual class="po-textual"> would clearly be
        expansive.) </textual></para><para class="po-block e1151 e1151"><textual class="po-textual">Let us define an anti-expansive property as follows:
        </textual><programlisting class="po-block e1152 e1152" xml:space="preserve"><textual class="po-textual">F is anti-expansive iff (x)(y)((F(x) ∧ (x ≪ y)) → ¬F(y))</textual></programlisting><textual class="po-textual">
        The TEI element &lt;foreign&gt; may be an example of a property which is
        anti-dissective, at least up to a certain level, and at least insofar as it seems reasonable
        to assume that if something is marked as foreign, then it is marked off from something which
        is </textual><emphasis class="po-inline e1153 e1153"><textual class="po-textual">not</textual></emphasis><textual class="po-textual"> in a foreign language.
        </textual><textual class="po-textual">
      </textual></para></section><section class="po-hcontainer e1154 e1154"><title class="po-block e1155 e1155"><textual class="po-textual">Collective and anti-collective properties</textual></title><para class="po-block e1156 e1156"><quote class="po-inline e1157 e1157"><textual class="po-textual">That a one-place predicate is </textual><emphasis class="po-inline e1158 e1158"><textual class="po-textual">collective</textual></emphasis><textual class="po-textual"> means that it is
          satisfied by the sum of every two individuals (distinct or not) that satisfy it
        severally</textual></quote><textual class="po-textual"> [</textual><xref class="po-milestone e1159 e1159" linkend="Goodman1972"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, p. 39]. A collective one-place
        predicate can be defined as follows:
        </textual><programlisting class="po-block e1160 e1160" xml:space="preserve"><textual class="po-textual">F is collective iff (x)(y)((F(x) ∧ F(y)) → F(x + y))</textual></programlisting><textual class="po-textual">
        Dissective elements like the TEI elements &lt;hi&gt;, &lt;add&gt;,
        &lt;del&gt; and &lt;foreign&gt; and the HTML element &lt;i&gt; seem
        also to be collective: any sum of strings in italics would seem itself to be in italics,
        etc. There probably are examples of expansive and non-dissective or anti-dissective
        properties in TEI or HTML, but so far we have not found any.</textual></para><para class="po-block e1161 e1161"><textual class="po-textual">Let us define an anti-collective property as follows:
        </textual><programlisting class="po-block e1162 e1162" xml:space="preserve"><textual class="po-textual">F is anti-colletive iff (x)(y)((F(x) ∧ F(y) ∧ (x ʅ y)) → ¬F(x + y))</textual></programlisting><textual class="po-textual">
        Both the TEI and the HTML &lt;div&gt; (division) element types seem to be
        anti-collective: no sum of &lt;div&gt;s is itself a &lt;div&gt;.</textual></para></section><section class="po-hcontainer e1163 e1163"><title class="po-block e1164 e1164"><textual class="po-textual">The HTML title element</textual></title><para class="po-block e1165 e1165"><textual class="po-textual">So far, we have been concerned only with one-place predicates.</textual><footnote class="po-popup e1166 e1166"><para class="po-block e1167 e1167"><textual class="po-textual">We have simply tried to find examples of the patterns Goodman terms
              </textual><quote class="po-inline e1168 e1168"><textual class="po-textual">dissective</textual></quote><textual class="po-textual">, </textual><quote class="po-inline e1169 e1169"><textual class="po-textual">expansive</textual></quote><textual class="po-textual"> and </textual><quote class="po-inline e1170 e1170"><textual class="po-textual">collective</textual></quote><textual class="po-textual">, and
            added the corresponding patterns </textual><quote class="po-inline e1171 e1171"><textual class="po-textual">anti-dissective</textual></quote><textual class="po-textual"> etc. Goodman also
            identifies patterns he terms </textual><quote class="po-inline e1172 e1172"><textual class="po-textual">nucleative</textual></quote><textual class="po-textual">, </textual><quote class="po-inline e1173 e1173"><textual class="po-textual">pervasive</textual></quote><textual class="po-textual">,
              </textual><quote class="po-inline e1174 e1174"><textual class="po-textual">cumulative</textual></quote><textual class="po-textual"> and </textual><quote class="po-inline e1175 e1175"><textual class="po-textual">agglomerative</textual></quote><textual class="po-textual"> [</textual><xref class="po-milestone e1176 e1176" linkend="Goodman1972"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, p. 39–40]. We do not discuss these here,
            as we have not found any interesting application of them for the present purposes. In
            particular, a nucleative property is a property such that
            </textual><programlisting class="po-block e1177 e1177" xml:space="preserve"><textual class="po-textual">F is nucleative iff (F(x) ∧ F(y)) → F(x · y)</textual></programlisting><textual class="po-textual">
            Since XML has no elements which overlap without the one being a part of the other, the
            product of two element strings is always a part of one of them. Therefore, although the
            pattern does not have any interesting applications to XML — it may have for
            markup systems such as xConcur, TexMecs, Goddag, LMNL and others which allow overlapping
            elements.</textual></para></footnote><textual class="po-textual"> Many TEI and HTML elements ascribe properties according to more complicated
        patterns which can more conveniently be accounted for by representing them as relations, or
        predicates with two or more places. </textual></para><para class="po-block e1178 e1178"><textual class="po-textual"> We begin with a simple example of an element expressing a two-place predicate, the HTML
        title element. From: </textual><programlisting class="po-block e1179 e1179" xml:space="preserve"><textual class="po-textual">&lt;!DOCTYPE html SYSTEM "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
    &lt;head&gt;
        &lt;title&gt;Simple HTML&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;p&gt;First para&lt;/p&gt;
        &lt;p&gt;Second para&lt;/p&gt;
    &lt;/body&gt;
    &lt;/html&gt;</textual></programlisting><textual class="po-textual"> we get: 
</textual><table class="po-container e1180 e1180"><tr class="po-table e1181 e1181"><th class="po-field e1182 e1182"><textual class="po-textual">Id</textual></th><th class="po-field e1183 e1183"><textual class="po-textual">Label</textual></th><th class="po-field e1184 e1184"><textual class="po-textual">Kind</textual></th><th class="po-field e1185 e1185"><textual class="po-textual">Statements</textual></th><th class="po-field e1186 e1186"><textual class="po-textual">Next</textual></th><th class="po-field e1187 e1187"><textual class="po-textual">Parts</textual></th></tr><tr class="po-table e1188 e1188"><td class="po-block e1189 e1189"><textual class="po-textual">i01</textual></td><td class="po-block e1190 e1190"><textual class="po-textual">Simple HTML</textual></td><td class="po-block e1191 e1191"><textual class="po-textual">M E</textual></td><td class="po-block e1192 e1192"><textual class="po-textual">head(i01), title(i01)</textual></td><td class="po-block e1193 e1193"><textual class="po-textual">i02</textual></td><td class="po-block e1194 e1194"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e1195 e1195"><td class="po-block e1196 e1196"><textual class="po-textual">i02</textual></td><td class="po-block e1197 e1197"><textual class="po-textual">First para</textual></td><td class="po-block e1198 e1198"><textual class="po-textual">M E</textual></td><td class="po-block e1199 e1199"><textual class="po-textual">p(i02)</textual></td><td class="po-block e1200 e1200"><textual class="po-textual">i03</textual></td><td class="po-block e1201 e1201"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e1202 e1202"><td class="po-block e1203 e1203"><textual class="po-textual">i03</textual></td><td class="po-block e1204 e1204"><textual class="po-textual">Second para</textual></td><td class="po-block e1205 e1205"><textual class="po-textual">ME </textual></td><td class="po-block e1206 e1206"><textual class="po-textual">p(i03)</textual></td><td class="po-block e1207 e1207"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1208 e1208"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e1209 e1209"><td class="po-block e1210 e1210"><textual class="po-textual">i04</textual></td><td class="po-block e1211 e1211"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1212 e1212"><textual class="po-textual">E</textual></td><td class="po-block e1213 e1213"><textual class="po-textual">body(i04)</textual></td><td class="po-block e1214 e1214"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1215 e1215"><textual class="po-textual">i02, i03</textual></td></tr><tr class="po-table e1216 e1216"><td class="po-block e1217 e1217"><textual class="po-textual">i05</textual></td><td class="po-block e1218 e1218"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1219 e1219"><textual class="po-textual">E</textual></td><td class="po-block e1220 e1220"><textual class="po-textual">html(i05)</textual></td><td class="po-block e1221 e1221"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1222 e1222"><textual class="po-textual">i01, i04</textual></td></tr></table><textual class="po-textual">

      </textual></para><para class="po-block e1223 e1223"><textual class="po-textual"> We state the propagation rule that:
        </textual><programlisting class="po-block e1224 e1224" xml:space="preserve"><textual class="po-textual">(x)(y)((title(x) ∧ (x &lt; y) ∧ html(y)) → hasTitle(y,x))</textual></programlisting><textual class="po-textual">
        and get for the last line of the previous table: 
</textual><table class="po-container e1225 e1225"><tr class="po-table e1226 e1226"><th class="po-field e1227 e1227"><textual class="po-textual">Id</textual></th><th class="po-field e1228 e1228"><textual class="po-textual">Label</textual></th><th class="po-field e1229 e1229"><textual class="po-textual">Kind</textual></th><th class="po-field e1230 e1230"><textual class="po-textual">Statements</textual></th><th class="po-field e1231 e1231"><textual class="po-textual">Next</textual></th><th class="po-field e1232 e1232"><textual class="po-textual">Parts</textual></th></tr><tr class="po-table e1233 e1233"><td class="po-block e1234 e1234"><textual class="po-textual">i05</textual></td><td class="po-block e1235 e1235"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1236 e1236"><textual class="po-textual">E</textual></td><td class="po-block e1237 e1237"><textual class="po-textual">html(i05), hasTitle(i05,i01)</textual></td><td class="po-block e1238 e1238"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1239 e1239"><textual class="po-textual">i01, i04</textual></td></tr></table><textual class="po-textual">
  
      </textual></para><para class="po-block e1240 e1240"><textual class="po-textual">The fact that the propagation rule can be made so simple in this case is partly due to
        the fact that we are assuming that the document is valid, and that the relative structural
        positions of the elements are constant. For example, there is no need to state that the
        title element has to be the child of a head element which in turn is directly succeeded by a
        body element etc. </textual></para></section><section class="po-hcontainer e1241 e1241"><title class="po-block e1242 e1242"><textual class="po-textual">The TEI sp, speaker and stage elements</textual></title><para class="po-block e1243 e1243"><textual class="po-textual">While it is quite legitimate to assume document validity when stating propagation rules,
        these rules tend to become more complex when more elements are involved, and/or the rules
        for the structural positions of the elements concerned are more complex. </textual></para><para class="po-block e1244 e1244"><textual class="po-textual">The relation between the TEI elements &lt;sp&gt; (speech),
        &lt;speaker&gt; and &lt;stage&gt; (stage direction) is that a
        &lt;sp&gt; may contain a &lt;speaker&gt;, and if it does, the
        &lt;speaker&gt; element contains the name of the speaker of the rest of the
        &lt;sp&gt; element, except for any &lt;stage&gt;s (stage directions) it
        might contain. From: </textual></para><para class="po-block e1245 e1245"><textual class="po-textual">
        </textual><programlisting class="po-block e1246 e1246" xml:space="preserve"><textual class="po-textual">&lt;sp&gt;
    &lt;speaker&gt;Peer&lt;/speaker&gt; 
    Why 
    &lt;stage&gt;(hesitating)&lt;/stage&gt; 
    swear?
&lt;/sp&gt;
</textual></programlisting><textual class="po-textual"> we get: 
</textual><table class="po-container e1247 e1247"><tr class="po-table e1248 e1248"><th class="po-field e1249 e1249"><textual class="po-textual">Id</textual></th><th class="po-field e1250 e1250"><textual class="po-textual">Label</textual></th><th class="po-field e1251 e1251"><textual class="po-textual">Kind</textual></th><th class="po-field e1252 e1252"><textual class="po-textual">Statements</textual></th><th class="po-field e1253 e1253"><textual class="po-textual">Next</textual></th><th class="po-field e1254 e1254"><textual class="po-textual">Parts</textual></th></tr><tr class="po-table e1255 e1255"><td class="po-block e1256 e1256"><textual class="po-textual">i01</textual></td><td class="po-block e1257 e1257"><textual class="po-textual">Peer</textual></td><td class="po-block e1258 e1258"><textual class="po-textual">M E</textual></td><td class="po-block e1259 e1259"><textual class="po-textual">speaker(i01)</textual></td><td class="po-block e1260 e1260"><textual class="po-textual">i02</textual></td><td class="po-block e1261 e1261"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e1262 e1262"><td class="po-block e1263 e1263"><textual class="po-textual">i02</textual></td><td class="po-block e1264 e1264"><textual class="po-textual">Why</textual></td><td class="po-block e1265 e1265"><textual class="po-textual">M</textual></td><td class="po-block e1266 e1266"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1267 e1267"><textual class="po-textual">i03</textual></td><td class="po-block e1268 e1268"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e1269 e1269"><td class="po-block e1270 e1270"><textual class="po-textual">i03</textual></td><td class="po-block e1271 e1271"><textual class="po-textual">(hesitating)</textual></td><td class="po-block e1272 e1272"><textual class="po-textual">M E</textual></td><td class="po-block e1273 e1273"><textual class="po-textual">stage(i03)</textual></td><td class="po-block e1274 e1274"><textual class="po-textual">i04</textual></td><td class="po-block e1275 e1275"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e1276 e1276"><td class="po-block e1277 e1277"><textual class="po-textual">i04</textual></td><td class="po-block e1278 e1278"><textual class="po-textual">swear?</textual></td><td class="po-block e1279 e1279"><textual class="po-textual">M</textual></td><td class="po-block e1280 e1280"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1281 e1281"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1282 e1282"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e1283 e1283"><td class="po-block e1284 e1284"><textual class="po-textual">i05</textual></td><td class="po-block e1285 e1285"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1286 e1286"><textual class="po-textual">E</textual></td><td class="po-block e1287 e1287"><textual class="po-textual">sp(i05)</textual></td><td class="po-block e1288 e1288"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1289 e1289"><textual class="po-textual">i01, i02, i03, i04</textual></td></tr></table><textual class="po-textual">

        We state the following propagation rule:
        </textual><programlisting class="po-block e1290 e1290" xml:space="preserve"><textual class="po-textual">(x)(y)((speaker(x) ∧ (x &lt; y) ∧ sp(y)) → 
          (z)(((z &lt; y) ∧ ¬(speaker(z) ∨ stage(z))) → saidBy(z,x)))</textual></programlisting><textual class="po-textual">
        and get:
</textual><table class="po-container e1291 e1291"><tr class="po-table e1292 e1292"><th class="po-field e1293 e1293"><textual class="po-textual">Id</textual></th><th class="po-field e1294 e1294"><textual class="po-textual">Label</textual></th><th class="po-field e1295 e1295"><textual class="po-textual">Kind</textual></th><th class="po-field e1296 e1296"><textual class="po-textual">Statements</textual></th><th class="po-field e1297 e1297"><textual class="po-textual">Next</textual></th><th class="po-field e1298 e1298"><textual class="po-textual">Parts</textual></th></tr><tr class="po-table e1299 e1299"><td class="po-block e1300 e1300"><textual class="po-textual">i01</textual></td><td class="po-block e1301 e1301"><textual class="po-textual">Peer</textual></td><td class="po-block e1302 e1302"><textual class="po-textual">M E</textual></td><td class="po-block e1303 e1303"><textual class="po-textual">speaker(i01)</textual></td><td class="po-block e1304 e1304"><textual class="po-textual">i02</textual></td><td class="po-block e1305 e1305"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e1306 e1306"><td class="po-block e1307 e1307"><textual class="po-textual">i02</textual></td><td class="po-block e1308 e1308"><textual class="po-textual">Why</textual></td><td class="po-block e1309 e1309"><textual class="po-textual">M</textual></td><td class="po-block e1310 e1310"><textual class="po-textual">saidBy(i02,i01)</textual></td><td class="po-block e1311 e1311"><textual class="po-textual">i03</textual></td><td class="po-block e1312 e1312"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e1313 e1313"><td class="po-block e1314 e1314"><textual class="po-textual">i03</textual></td><td class="po-block e1315 e1315"><textual class="po-textual">(hesitating)</textual></td><td class="po-block e1316 e1316"><textual class="po-textual">M E</textual></td><td class="po-block e1317 e1317"><textual class="po-textual">stage(i03)</textual></td><td class="po-block e1318 e1318"><textual class="po-textual">i04</textual></td><td class="po-block e1319 e1319"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e1320 e1320"><td class="po-block e1321 e1321"><textual class="po-textual">i04</textual></td><td class="po-block e1322 e1322"><textual class="po-textual">swear?</textual></td><td class="po-block e1323 e1323"><textual class="po-textual">M</textual></td><td class="po-block e1324 e1324"><textual class="po-textual">saidBy(i04,i01)</textual></td><td class="po-block e1325 e1325"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1326 e1326"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e1327 e1327"><td class="po-block e1328 e1328"><textual class="po-textual">i05</textual></td><td class="po-block e1329 e1329"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1330 e1330"><textual class="po-textual">E</textual></td><td class="po-block e1331 e1331"><textual class="po-textual">sp(i05)</textual></td><td class="po-block e1332 e1332"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1333 e1333"><textual class="po-textual">i01, i02, i03, i04</textual></td></tr></table><textual class="po-textual">

      </textual></para></section><section class="po-hcontainer e1334 e1334"><title class="po-block e1335 e1335"><textual class="po-textual">The TEI docTitle, docDate and docAuthor elements</textual></title><para class="po-block e1336 e1336"><textual class="po-textual"> The TEI &lt;docTitle&gt; (document title) element may occur directly within
        &lt;titlePage&gt; or &lt;front&gt; (front matter); &lt;titlePage&gt;
        may occur directly within &lt;front&gt; or &lt;back&gt; (back matter), and
        &lt;front&gt; and &lt;back&gt; may occur directly within
        &lt;text&gt;. &lt;docTitle&gt; behaves very much like the HTML
        &lt;title&gt; element:
        </textual><programlisting class="po-block e1337 e1337" xml:space="preserve"><textual class="po-textual">(x)(y)((docTitle(x) ∧ (x &lt; y) ∧ text(y)) → hasTitle(y,x))</textual></programlisting><textual class="po-textual">
        &lt;docTitle&gt; assigns the property of </textual><emphasis class="po-inline e1338 e1338"><textual class="po-textual">being</textual></emphasis><textual class="po-textual"> a document title
        to its own content, and the property of </textual><emphasis class="po-inline e1339 e1339"><textual class="po-textual">having</textual></emphasis><textual class="po-textual"> that title to the
        individual which carries the property of being a text, and of which it is itself a part.
        Thus, while no other parts of the elemental text individual have any of these properties,
        all its parts have the property of being the </textual><emphasis class="po-inline e1340 e1340"><textual class="po-textual">part</textual></emphasis><textual class="po-textual"> of an individual
        which carries the title in question. </textual></para><para class="po-block e1341 e1341"><textual class="po-textual">The &lt;docDate&gt; (document date) element, in turn, behaves very much like the
        &lt;docTitle&gt; element. Although it may occur in a larger variety of positions, it
        assigns the property of </textual><emphasis class="po-inline e1342 e1342"><textual class="po-textual">being</textual></emphasis><textual class="po-textual"> (or identifying) the date of the document
        to its own content, and the property of </textual><emphasis class="po-inline e1343 e1343"><textual class="po-textual">having</textual></emphasis><textual class="po-textual"> that date to the
        individual which carries the property of being a text, and of which it is itself a part. </textual></para><para class="po-block e1344 e1344"><textual class="po-textual">We may assume, however, that the document date carries over to most or all the parts of
        the text, i.e., that all the parts of the element have the property of having that date,
        too.
        </textual><textual class="po-textual">
        If we are dealing with a transcription of an authorial document which according to the
        &lt;docDate&gt; element dates from a particular year, it may be the case that we
        also know that all parts of the document marked by &lt;add&gt; contain corrections
        in that document made by another person several years later, and that all
        &lt;note&gt;s are editorial notes supplied even later than that, by the creator of
        the electronic version. A propagation rule to this effect may be expressed for example as
        follows:
        </textual><programlisting class="po-block e1345 e1345" xml:space="preserve"><textual class="po-textual">(x)(y)(z)(w)((docDate(x) ∧ (x &lt; y) ∧ text(y)) →
   (((z &lt; y) ∧ ¬((z &lt; w) ∧ (add(w) ∨ note(w)))) →
   (hasDate(y,x) ∧ hasDate(z,x))))</textual></programlisting><textual class="po-textual">
        Note, however, that in some situations the TEI &lt;docDate&gt; element gives the date of the 
        first edition of the text, while the text actually transcribed by the document comes from a later edition. In such situations 
        the semantics of the element is rather different, and the property of having the date given may possibly not propagate to elements below &lt;text&gt; level at all.
      </textual></para><para class="po-block e1346 e1346"><textual class="po-textual">The &lt;docAuthor&gt; (document author) element, again, behaves much like the
        &lt;docDate&gt; element. It assigns the property of </textual><emphasis class="po-inline e1347 e1347"><textual class="po-textual">being</textual></emphasis><textual class="po-textual"> the
        name of the author of the document to its own content, and the property of
        </textual><emphasis class="po-inline e1348 e1348"><textual class="po-textual">having</textual></emphasis><textual class="po-textual"> the author of that name to the text of which it is a part. </textual></para><para class="po-block e1349 e1349"><textual class="po-textual">In the example just discussed, we may again assume that the property, in this case the
        property of having the author in question, is not carried over to later additions and notes.
        Other element types, such as &lt;q&gt; (quote) &lt;cit&gt; (citation), would
        for more or less obvious reasons also have to be considered for exclusion. However, there is
        a further complication: If a person is considered the author of a document, he is normally
        also considered the author of parts of that document, such as its chapters, sections and
        paragraphs. Perhaps authorship may also be attributed to sentences or phrases, but certainly
        not to individual words or letters. Again we are faced with a property which propagates down
        to a certain level, but where it is unclear exactly where that level ends. And as is so
        often the case with markup, it does not help us much to become clear about the level at
        which the propagation ends, be it subparagraphs, sentences or phrases, if it turns out that
        the elements at that level have not been marked up. </textual></para></section></section><section class="po-hcontainer e1350 e1350"><title class="po-block e1351 e1351"><textual class="po-textual">Problems</textual></title><para class="po-block e1352 e1352"><textual class="po-textual"> We have mentioned that there are at least two serious problems with our application of
      the Calculus. One problem, which has already been identified, relates to the representation of
      coextensive elements. The other problem, which relates to the representation of empty
      elements, has only been mentioned in passing. We believe this is the least serious of the two,
      and we will therefore discuss that first.</textual></para><section class="po-hcontainer e1353 e1353"><title class="po-block e1354 e1354"><textual class="po-textual">Empty elements</textual></title><para class="po-block e1355 e1355"><textual class="po-textual">For the purposes of this discussion, we may conveniently distinguish between milestone
        elements and other empty elements</textual></para><section class="po-hcontainer e1356 e1356"><title class="po-block e1357 e1357"><textual class="po-textual">Milestone elements</textual></title><para class="po-block e1358 e1358"><textual class="po-textual">Milestones are empty elements which ascribe properties to parts of a document, but
          which for various reasons are represented by empty elements. The reason why some textual
          phenomena are represented by milestones rather than ordinary elements is often a need to
          overcome the XML constraint that element structure must be hierarchical.</textual></para><para class="po-block e1359 e1359"><textual class="po-textual">Typically, a milestone may be seen as assigning a property to the following parts of
          the document, up to the next milestone element of the same type, up to the occurrence of
          an element of some specific other type, or to the end of the document. We think we have
          already demonstrated that our application of the Calculus to XML documents can handle such
          property assignment.</textual></para><para class="po-block e1360 e1360"><textual class="po-textual"> We believe that many of the other mechanisms proposed to handle so-called overlapping
          hierarchies in XML (for example, </textual><quote class="po-inline e1361 e1361"><textual class="po-textual">Trojan Horse</textual></quote><textual class="po-textual"> milestones, [</textual><xref class="po-milestone e1362 e1362" linkend="DeRose"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] and fragmented or virtual elements [</textual><xref class="po-milestone e1363 e1363" linkend="teip4"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]) can be
          handled in similar ways, and therefore do not constitute a serious problem for our
          application of the Calculus. </textual><textual class="po-textual">
          </textual></para></section><section class="po-hcontainer e1364 e1364"><title class="po-block e1365 e1365"><textual class="po-textual">Other empty elements</textual></title><para class="po-block e1366 e1366"><textual class="po-textual">Empty elements which are not milestones typically stand for and/or ascribe properties
          to some part of the document which cannot straightforwardly be represented as a character
          or string of characters. These empty elements are more difficult to deal with, because
          according to our application of the Calculus something which cannot be said to consist of
          character atoms simply cannot be an individual. And if it is no individual there seems to
          be nothing to which properties can be ascribed; only individuals can have properties. </textual></para><para class="po-block e1367 e1367"><textual class="po-textual">The TEI elements &lt;ptr&gt; (pointer), &lt;anchor&gt; (anchor point),
          &lt;index&gt; (index entry) and &lt;divGen&gt; (automatically generated
          text division) are some examples. Either they indicate a point in the document, i.e., they
          have no </textual><quote class="po-inline e1368 e1368"><textual class="po-textual">extension</textual></quote><textual class="po-textual"> in the terms of our application of the Calculus and would
          seem to have to be located in a position between two atoms. Or they do not indicate any
          point or extension in the document, but rather an instruction to generate strings with
          certain properties at the position they are located. In some cases, the problems outlined
          here can be solved by replacing the empty element in question with a character string,
          taken for example from an attribute value of the element in question. In cases where the
          element occupies or points to a location between characters, we might find a practical
          workaround by letting it apply or point instead to the atom immediately before or after
          the relevant location in our model of the document. </textual></para><para class="po-block e1369 e1369"><textual class="po-textual">A slightly different kind of problem is presented by the TEI &lt;graphic&gt;
          (inline graphic, illustration, or figure) and HTML &lt;graphic&gt; elements. The
          basic meaning of these elements is easy enough to catch: The occurrence of the element
          indicates that an illustration or a figure occurs at a specific location in the document.
          Therefore, a more appropriate solution to this as well as to the previously mentioned
          examples is probably to lift the requirement that all atoms should have a character type
          as a property. A graphics element, for example, might simply be represented in our model
          by a </textual><quote class="po-inline e1370 e1370"><textual class="po-textual">graphics</textual></quote><textual class="po-textual"> atom. </textual></para><para class="po-block e1371 e1371"><textual class="po-textual">More generally, this would be a model in which a document consists not of a sequence
          of character atoms, but of a sequence of some more generic kind of atoms. We might, for
          example, agree to call them atomic </textual><quote class="po-inline e1372 e1372"><textual class="po-textual">content objects</textual></quote><textual class="po-textual">, and concede that such
          atoms may or may not have a character property, an </textual><quote class="po-inline e1373 e1373"><textual class="po-textual">image</textual></quote><textual class="po-textual"> property etc.
          Although we have not investigated the matter, we believe that such a modification would
          not drastically change the application of the Calculus described above.</textual></para></section></section><section class="po-hcontainer e1374 e1374"><title class="po-block e1375 e1375"><textual class="po-textual">Coextensive elements</textual></title><para class="po-block e1376 e1376"><textual class="po-textual">We have already exemplified and briefly discussed the problem with coextensive elements:
        If two or more nested elements have exactly the same content, i.e., share exactly the same
        leaf nodes in the XML tree, they will be represented in our application of the Calculus as
        one individual sharing all the properties ascribed by the nested XML elements. What kind of
        problem this is, and whether and how it can be solved, depends on the wider requirements and
        aims for our application of the Calculus to markup. Under certain requirements or
        perspectives, it may cease to be a problem.</textual></para><para class="po-block e1377 e1377"><textual class="po-textual">If our aim is to establish a representation from which the serialized form of an XML
        document can be regenerated, we obviously have a problem: It is by no means obvious if or
        how this could be done. Likewise, if our aim is to establish a representation from which the
        XML DOM, the XDM or the XML Infoset representation can be generated, or which is isomorphic
        to and/or contains (all) the information given in any of those, then it is perhaps even more
        obvious that we have a problem.</textual></para><para class="po-block e1378 e1378"><textual class="po-textual">We have two responses to this: On the one hand, the value of the approach presented here
        does not depend on such capabilities. The value of the approach to property propagation, for
        example, may be simply as an ancillary representation of some of the features of marked-up
        documents, a representation which is not intended to capture </textual><quote class="po-inline e1379 e1379"><textual class="po-textual">all</textual></quote><textual class="po-textual"> the
        information present in XML documents but rather to assist in the processing of such
        documents. Therefore, the problem discussed here is a problem only to the extent that it
        impedes our work to realize this more modest aim. So far, we have not found any indication
        that it does.</textual></para><para class="po-block e1380 e1380"><textual class="po-textual">On the other hand, we might want to use this representation in order to modify the XML
        documents so represented, and in that case we would clearly need to reserialize them to XML
        or generate an XML-conformant document model of them. For such purposes, we believe that
        information about the XML nesting order of coextensive elements could easily be stored in
        some ancillary data structure which would make reserialization etc possible. It should also
        be mentioned that, although again we have not investigated the matter, it is not
        unreasonable to assume that a representation of documents in the way proposed for our
        application of the Calculus might be a convenient step in the process of converting XML
        documents to certain other markup systems, such as TexMecs or LMNL.</textual></para><para class="po-block e1381 e1381"><textual class="po-textual">Finally, if our aim is to offer an alternative representation based on a different
        understanding of the structure and semantics of marked-up documents, then we have a problem
        only if it can convincingly be argued that our representation is in some respect inferior to
        these standard ways of modelling documents. We think such a discussion is premature unless
        and until the application sketched here is developed further, but at least two lines of
        argument seem to present themselves as possible responses to the challenge. </textual></para><para class="po-block e1382 e1382"><textual class="po-textual">First, one might argue that the problem is with XML, and not with the approach discussed
        here. For example, if a TEI &lt;p&gt; (paragraph) and &lt;s&gt; (s-unit,
        sentence) element are coextensive, XML forces us to decide whether we are dealing with a
        paragraph containing a sentence, or a sentence containing a paragraph, and leaves us no
        other option. But we might just as well (or rather) want to say that we are dealing with one
        object which has two properties: that of being a paragraph and that of being a sentence. The
        part-whole relationship which seems forced upon us by XML is an artifact of the
        serialization, a result of one of the limitations of embedded markup.[</textual><xref class="po-milestone e1383 e1383" linkend="Raymond"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] </textual></para><para class="po-block e1384 e1384"><textual class="po-textual">Second, we might concede that the representation of coextensive elements as conceived in
        the present approach is a problem, and try to solve it by amending our mereological system.
        Part of the solution may be found in allowing more generous set of atoms, as discussed above
        in connection with the problem of empty elements. Another part of the solution might be to
        replace the Calculus of Individuals with some other formal mereological system. For example,
        there seems to be mereological systems which allow for the idea that one individual may be
        part of another even in cases where we cannot identify any part which they do not share. For
        options along these lines, see the discussion of supplementation and closure principles in
          </textual><xref class="po-milestone e1385 e1385" linkend="CasatiVarzi1999"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> p. 38 f.f. </textual></para></section></section><section class="po-hcontainer e1386 e1386"><title class="po-block e1387 e1387"><textual class="po-textual">Conclusion and Future Work</textual></title><para class="po-block e1388 e1388"><textual class="po-textual"> We have considered some possible applications of the Calculus of Individuals to XML,
      whereof the so-called character-atom approach has seemed the most promising so far. Strings
      composed of characters defined as atomic individuals can be identified and referenced by
      denoting expressions. The part-whole relationships and ordering relations between parts of the
      document as well as the properties ascribed by generic identifiers can be described.
      Statements about the individuals of documents and their properties can be made, and inferences
      can be drawn from these statements. </textual></para><para class="po-block e1389 e1389"><textual class="po-textual"> We have shown, by means of examples from the TEI and HTML encoding schemes, how this
      application of the Calculus can be used for the formulation of rules describing the
      propagation of properties among the parts of a document. </textual></para><para class="po-block e1390 e1390"><textual class="po-textual"> We have identified problems or shortcomings concerning the representation of empty
      elements and coextensive elements, and suggested that these problems may be overcome partly by
      allowing a more generous set of atoms, and partly by replacing the Calculus of Individuals
      with some other formal mereological system. </textual></para><para class="po-block e1391 e1391"><textual class="po-textual"> In order to assess whether the application of formal mereology to markup semantics is
      worth while, we believe that continued work is required along several lines: The application
      to XML should be extended beyond the limitations of the approach presented here to include XML
      the full range of XML mechanisms, such as attributes, entities, declarations, comments,
      processing instructions, and marked sections. While the approach presented here is limited to
      the consideration of XML documents in serialized form, i.e. as character streams, attempts
      should be made at applying formal mereology to XML documents considered as graphs of xPath
      nodes, Infoset items, and the like. </textual></para><para class="po-block e1392 e1392"><textual class="po-textual"> Furthermore, and as already mentioned, mereological systems beyond the Calculus of
      Individuals should be considered in order to overcome some of the problems encountered in the
      approach presented her. Last, but not least: The application of formal mereological systems
      should be extended to other markup systems such as SGML, TexMecs, LMNL, Goddag and others.
    </textual></para></section><bibliography class="po-hcontainer e1393 e1393"><title class="po-block e1394 e1394"><textual class="po-textual">References</textual></title><bibliomixed class="po-block e1395 e1395" xml:id="CasatiVarzi1999" xreflabel="Casati and Varzi 1999"><textual class="po-textual">Casati, Roberto and
      Varzi, Achille C. </textual><emphasis class="po-inline e1396 e1396"><textual class="po-textual">Parts and Places. The Structures of Spatial
      Representation</textual></emphasis><textual class="po-textual">. MIT Press, 1999. </textual></bibliomixed><bibliomixed class="po-block e1397 e1397" xml:id="DeRose" xreflabel="DeRose 2004"><textual class="po-textual">DeRose, Steven J. 2004. </textual><quote class="po-inline e1398 e1398"><textual class="po-textual">Markup
        overlap: A review and a horse.</textual></quote><textual class="po-textual"> In </textual><emphasis class="po-inline e1399 e1399"><textual class="po-textual">Proceedings of Extreme Markup Languages
        2004</textual></emphasis><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e1400 e1400" xml:id="Fitzgerald" xreflabel="Fitzgerald 2003"><textual class="po-textual">Fitzgerald, Henry.
        </textual><quote class="po-inline e1401 e1401"><textual class="po-textual">Nominalist things</textual></quote><textual class="po-textual">. </textual><emphasis class="po-inline e1402 e1402"><textual class="po-textual">Analysis</textual></emphasis><textual class="po-textual"> 63.2, OUP, April 2003, pp
      170-71. doi: </textual><biblioid class="po-atom e1403 doi e1403"><textual class="po-textual">10.1093/analys/63.2.170, 10.1111/1467-8284.00030</textual></biblioid><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e1404 e1404" xml:id="Goodman1972" xreflabel="Goodman 1972"><textual class="po-textual">Goodman, Nelson. </textual><emphasis class="po-inline e1405 e1405"><textual class="po-textual">Problems
        and Projects</textual></emphasis><textual class="po-textual">. Hackett, Indianapolis 1972. </textual></bibliomixed><bibliomixed class="po-block e1406 e1406" xml:id="Goodman1977" xreflabel="Goodman 1977"><textual class="po-textual">Goodman, Nelson. </textual><emphasis class="po-inline e1407 e1407"><textual class="po-textual">The
        structure of appearance</textual></emphasis><textual class="po-textual">. Third edition. Boston: Reidel, 1977</textual></bibliomixed><bibliomixed class="po-block e1408 e1408" xml:id="LeonardandGoodman1940" xreflabel="Leonard and Goodman 1940"><textual class="po-textual">Leonard, Henry
      S. and Goodman, Nelson. </textual><quote class="po-inline e1409 e1409"><textual class="po-textual">The Calculus of Individuals and Its Uses</textual></quote><textual class="po-textual">, </textual><emphasis class="po-inline e1410 e1410"><textual class="po-textual">The
        Journal of Symbolic Logic</textual></emphasis><textual class="po-textual"> Vol 5, No. 2, pp 45-55, June 1940. doi: </textual><biblioid class="po-atom e1411 doi e1411"><textual class="po-textual">10.2307/2266169</textual></biblioid><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e1412 e1412" xml:id="Libardi1994" xreflabel="Libardi 1994"><textual class="po-textual">Libardi, Massimo. </textual><quote class="po-inline e1413 e1413"><textual class="po-textual">Applications
        and limits of mereology. From the theory of parts to the theory of wholes</textual></quote><textual class="po-textual">,
        </textual><emphasis class="po-inline e1414 e1414"><textual class="po-textual">Axiomathes</textual></emphasis><textual class="po-textual">, n.1, aprile 1994, pp. 13-54. </textual></bibliomixed><bibliomixed class="po-block e1415 e1415" xml:id="balisage2009" xreflabel="Marcoux et al. 2009"><textual class="po-textual"> Marcoux, Yves, Michael
      Sperberg-McQueen, and Claus Huitfeldt. </textual><quote class="po-inline e1416 e1416"><textual class="po-textual">Formal and informal meaning from documents
        through skeleton sentences: Complementing formal tag-set descriptions with intertextual
        semantics and vice-versa.</textual></quote><textual class="po-textual"> Presented at Balisage: The Markup Conference 2009,
      Montréal, Canada, August 11 - 14, 2009. In Proceedings of Balisage: The Markup Conference
      2009. </textual><emphasis class="po-inline e1417 e1417"><textual class="po-textual">Balisage Series on Markup Technologies</textual></emphasis><textual class="po-textual">, vol. 3 (2009).
      doi: </textual><biblioid class="po-atom e1418 doi e1418"><textual class="po-textual">10.4242/BalisageVol3.Sperberg-McQueen01</textual></biblioid><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e1419 e1419" xml:id="Pitkanen" xreflabel="Pitkänen "><textual class="po-textual">Risto Pitkänen.
        </textual><quote class="po-inline e1420 e1420"><textual class="po-textual">Content Identity</textual></quote><textual class="po-textual">. </textual><emphasis class="po-inline e1421 e1421"><textual class="po-textual">Mind</textual></emphasis><textual class="po-textual">.1976;
      LXXXV: 262–268. doi: </textual><biblioid class="po-atom e1422 doi e1422"><textual class="po-textual">10.1093/mind/LXXXV.338.262</textual></biblioid><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e1423 e1423" xml:id="bielefeld" xreflabel="Sperberg-McQueen and Huitfeldt 2008"><textual class="po-textual">Sperberg-McQueen, C. M., and Claus Huitfeldt. </textual><quote class="po-inline e1424 e1424"><textual class="po-textual">Containment and dominance in Goddag
        structures</textual></quote><textual class="po-textual">. Talk given at Conference on Text Technology, Bielefeld, March 2008.
      Forthcoming. </textual><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e1425 e1425" xml:id="Raymond" xreflabel="Raymond et al. 1996"><textual class="po-textual">Raymond, Darrell, Frank Wm. Tompa
      and Derick Wood. </textual><quote class="po-inline e1426 e1426"><textual class="po-textual">From Data Representation to Data Model: Meta-Semantic Issues in the
        Evolution of SGML</textual></quote><textual class="po-textual">, </textual><emphasis class="po-inline e1427 e1427"><textual class="po-textual">Computer Standards and Interfaces</textual></emphasis><textual class="po-textual"> 18 p.
      25-36 (1996). doi: </textual><biblioid class="po-atom e1428 doi e1428"><textual class="po-textual">10.1016/0920-5489(96)00033-5</textual></biblioid><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e1429 e1429" xml:id="dh2009" xreflabel="Sperberg-McQueen et al. 2009a"><textual class="po-textual">Sperberg-McQueen, C. M.,
      Claus Huitfeldt and Yves Marcoux. </textual><quote class="po-inline e1430 e1430"><textual class="po-textual">What is transcription? (Part 2)</textual></quote><textual class="po-textual">. Talk given
      at </textual><emphasis class="po-inline e1431 e1431"><textual class="po-textual">Digital Humanities 2009</textual></emphasis><textual class="po-textual">, Maryland, June 2009. Forthcoming. </textual></bibliomixed><bibliomixed class="po-block e1432 e1432" xml:id="teip4" xreflabel="TEI P4"><textual class="po-textual">The TEI Consortium / The Association for
      Computers and the Humanities (ACH); The Association for Computational Linguistics (ACL); The
      Association for Literary and Linguistic Computing (ALLC). </textual><emphasis class="po-inline e1433 e1433" role="ital"><textual class="po-textual">TEI P4:
        Guidelines for Electronic Text Encoding and Interchange XML-compatible edition</textual></emphasis><textual class="po-textual">.
      Ed. C. M. Sperberg-McQueen and Lou Burnard; XML conversion by Syd Bauman, Lou Burnard, Steven
      DeRose, and Sebastian Rahtz. Oxford, Providence, Charlottesville, Bergen: TEI Consortium,
      December 2001. </textual><link class="po-inline e1434 e1434" xlink:actuate="onRequest" xlink:href="http://www.tei-c.org/release/doc/tei-p4-doc/html/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.tei-c.org/release/doc/tei-p4-doc/html/</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e1435 e1435" xml:id="Varzi" xreflabel="Varzi 2003"><textual class="po-textual">Varzi, Achille. </textual><quote class="po-inline e1436 e1436"><textual class="po-textual">Mereology</textual></quote><textual class="po-textual">.
        </textual><emphasis class="po-inline e1437 e1437"><textual class="po-textual">Stanford Encyclopedia of Philosophy</textual></emphasis><textual class="po-textual">.
      http://plato.stanford.edu/entries/mereology/ First published Tue May 13, 2003; substantive
      revision Thu May 14, 2009. </textual></bibliomixed></bibliography></article></classedDocument>