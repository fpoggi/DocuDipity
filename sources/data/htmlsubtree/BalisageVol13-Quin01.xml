<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#MarkupFormatsInContextANCHOR" name="MarkupFormatsInContextTOC">Markup Formats In Context</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#DocumentsonPaperANCHOR" name="DocumentsonPaperTOC">Documents on Paper</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ElectronicPaperANCHOR" name="ElectronicPaperTOC">Electronic Paper</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#WhenRobotsWatchANCHOR" name="WhenRobotsWatchTOC">When Robots Watch</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#DocumentsthatLastANCHOR" name="DocumentsthatLastTOC">Documents that Last</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#OnDeliveringXHTMLorHTMLANCHOR" name="OnDeliveringXHTMLorHTMLTOC">On Delivering XHTML or HTML</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#WhenDocumentsarenotDocumentsANCHOR" name="WhenDocumentsarenotDocumentsTOC">When Documents are not Documents</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ProgrammertoProgrammerMachinetoMachine:programspecificdata%0AformatsANCHOR" name="ProgrammertoProgrammerMachinetoMachine:programspecificdata%0AformatsTOC">Programmer to Programmer, Machine to Machine: program-specific data
                  formats</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ProgramsandHumans:programspecifictextformatsANCHOR" name="ProgramsandHumans:programspecifictextformatsTOC">Programs and Humans: program-specific text formats</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#FactorsforEvaluationANCHOR" name="FactorsforEvaluationTOC">Factors for Evaluation</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#InformationLifeCycleANCHOR" name="InformationLifeCycleTOC">Information Life Cycle</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AudienceLanguageandCultureANCHOR" name="AudienceLanguageandCultureTOC">Audience Language and Culture</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#UniversalAccessANCHOR" name="UniversalAccessTOC">Universal Access</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#RelationshipsbetweenDocumentsANCHOR" name="RelationshipsbetweenDocumentsTOC">Relationships between Documents</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#DefaultFormattingANCHOR" name="DefaultFormattingTOC">Default Formatting</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ValidationANCHOR" name="ValidationTOC">Validation</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#DataTypingANCHOR" name="DataTypingTOC">Data Typing</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ProgramCompatibilityANCHOR" name="ProgramCompatibilityTOC">Program Compatibility</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#InformationModellingANCHOR" name="InformationModellingTOC">Information Modelling</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#HTMLandWebBrowsersANCHOR" name="HTMLandWebBrowsersTOC">HTML and Web Browsers</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#MultipleConsumers:TransformationsANCHOR" name="MultipleConsumers:TransformationsTOC">Multiple Consumers: Transformations</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ComparisonofFormatsANCHOR" name="ComparisonofFormatsTOC">Comparison of Formats</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#PlainText(Unstructured)ANCHOR" name="PlainText(Unstructured)TOC">Plain Text (Unstructured)</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#MarkdownANCHOR" name="MarkdownTOC">Markdown</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#JSONANCHOR" name="JSONTOC">JSON</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#HTMLANCHOR" name="HTMLTOC">HTML</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#XHTMLANCHOR" name="XHTMLTOC">XHTML</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#RDFandLinkedDataANCHOR" name="RDFandLinkedDataTOC">RDF and Linked Data</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#XMLANCHOR" name="XMLTOC">XML</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#SomeUseCasesANCHOR" name="SomeUseCasesTOC">Some Use Cases</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AnObjectDumpANCHOR" name="AnObjectDumpTOC">An Object Dump</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ATechnicalDictionaryANCHOR" name="ATechnicalDictionaryTOC">A Technical Dictionary</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ExtendedJournalBibliographyANCHOR" name="ExtendedJournalBibliographyTOC">Extended Journal Bibliography</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#WebbasedAuthoringInterfaceANCHOR" name="WebbasedAuthoringInterfaceTOC">Web-based Authoring Interface</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#HybridApproachesANCHOR" name="HybridApproachesTOC">Hybrid Approaches</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#RDFandJSONANCHOR" name="RDFandJSONTOC">RDF and JSON</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#RDFandXMLANCHOR" name="RDFandXMLTOC">RDF and XML</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#HTMLandXMLANCHOR" name="HTMLandXMLTOC">HTML and XML</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConclusionsANCHOR" name="ConclusionsTOC">Conclusions</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">all</div>
         <div class="singletermTERMS">article</div>
         <div class="singletermTERMS">are</div>
         <div class="singletermTERMS">August 5 - 8, 2014</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">because</div>
         <div class="singletermTERMS">backwards</div>
         <div class="singletermTERMS">be</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2014</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">div</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
         <div class="singletermTERMS">forwards</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
         <div class="singletermTERMS">github</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">href</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">ini</div>
         <div class="singletermTERMS">is</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">Liam</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">node.js</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">outside</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
         <div class="singletermTERMS">Quin</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">refer</div>
         <div class="singletermTERMS">R. E.</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">sokken</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">troff</div>
         <div class="singletermTERMS">text/html</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="MarkupFormatsInContextANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3">
      <div class="title e1">Markup Formats In Context</div>
      <div class="subtitle e2">A comparison of the strengths of some widely-used markup systems </div>
      <div class="info e3">
         <div class="confgroup e4">
            <div class="conftitle e5">Balisage: The Markup Conference 2014</div>
            <div class="confdates e6">August 5 - 8, 2014</div>
         </div>
         <div class="abstract e7">
            <div class="para e8">There are a number of popular text markup formats in use today. Some
               of these, such as JSON and Markdown, have risen in popularity recently;
               others, such as SGML or 
               <div class="emphasis e9" role="ital">troff</div>, have
               waned. Whenever a format becomes more popular it gains proponents who
               seem to want to see it used everywhere, for everything, for ever, right
               away. A fairly simple (and possibly over-simplistic) analysis of the
               rhetorical nature of some of these various formats is presented in this
               paper. The results of this analysis suggest areas of use for the
               different formats and demonstrate that, rather than being in competition
               with one another, the formats complement one another.
            </div>
         </div>
         <div class="author e10">
            <div class="personname e11">
               <div class="firstname e12">Liam</div>
               <div class="othername e13">R. E.</div>
               <div class="surname e14">Quin</div>
            </div>
            <div class="personblurb e15">
               <div class="para e16"></div>
            </div>
         </div>
         <div class="legalnotice e17">
            <div class="para e18">Copyright © Liam Quin 2014</div>
         </div>
      </div><a name="DocumentsonPaperANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e19">
         <div class="title e20">Documents on Paper</div>
         <div class="figure e21" xml:id="fig01" xreflabel="Figure 1">
            <div class="mediaobject e22">
               <div class="imageobject e23">
                  <div class="metaBox e24"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e38').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e38" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e24'
                           </span><span class="metaAttribute">fileref='../../../vol13/graphics/Quin01/Quin01-001.png'
                           </span><span class="metaAttribute">width='60%'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
            <div class="caption e25">
               <div class="para e26">Figure 1: person-to-person communication using physical
                  transportation of pre-digital media objects.
               </div>
            </div>
         </div>
         <div class="para e27">When a human wishes to communicate extended ideas with another human not
            physically present, paper and a pencil can be used. Historically, this
            mechanism was extended using people trained to copy documents onto new,
            additional sheets of paper, but this was slow and expensive, and, after
            only a few thousand years, replaced by the automated printing
            press.
         </div>
         <div class="para e28">Paper documents are difficult to revise and cannot easily be searched.</div>
         <div class="para e29">Paper documents are independent of software and with care can be archived indefinitely.</div>
      </div><a name="ElectronicPaperANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e30">
         <div class="title e31">Electronic Paper</div>
         <div class="figure e32" xml:id="fig02" xreflabel="Figure 2">
            <div class="mediaobject e33">
               <div class="imageobject e34">
                  <div class="metaBox e35"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e54').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e54" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e35'
                           </span><span class="metaAttribute">fileref='../../../vol13/graphics/Quin01/Quin01-002.png'
                           </span><span class="metaAttribute">width='60%'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
            <div class="caption e36">
               <div class="para e37">Figure 2: person-to-person communication using electronic
                  transportation of digital media objects.
               </div>
            </div>
         </div>
         <div class="para e38">Today if someone wants to write something for the benefit of another
            reader, they can use a word processor and either send computer-printed
            paper or send electronic files that the recipient can print and read.
            Those files are sent sometimes as plain text (electronic mail), or for
            longer documents or documents with more complex formatting, as PDF page
            images or as word processing files.
         </div>
         <div class="para e39">Word processing files represent a document complete with formatting
            but in an editable form, so that text can re-flow as needed. Such files
            generally make use of system resources such as fonts, so that a document
            may be differently paginated or, in the case of specialty symbol or
            language-specific fonts, may be partly or entirely unreadable. For some
            languages (Northern Cree and some of the scripts or writing systems used
            in India and in Africa come to mind) it’s customary to write documents
            using a font with a custom encoding, as Unicode coverage is (or is
            perceived to be) incomplete or insufficient; this means that if the
            recipient does not have the right font installed, the document may appear
            correct but will have some characters in the document silently substituted
            for others. To be fair this problem exists for all of the document formats discussed
            in this
            paper, but some of the formats alleviate the difficulties,
            or at least let documents be explicit about what was done, more than others.
         </div>
         <div class="para e40">Word processor documents today use complex and proprietary formats
            (although increasingly these are represented in XML). This means that they
            can be difficult to search, although they are usually easy to revise.
            Later versions of a word processor may interpret older files differently,
            with or without warning, so that the documents become tied to specific
            versions of software running in specific operating environments. Because
            word processor formats are (implicitly or explicitly) tied to specific
            versions of specific software, as well as to system resources such as
            fonts, they are not suitable for archival use.
         </div>
         <div class="para e41">Portable Document Format (PDF), a document format produced and
            maintained by Adobe Systems Inc. of California, USA, has a corresponding
            ISO archival standard, although in practice PDF documents can and do make
            use of extensions that are not archival. However, PDF files do contain all
            needed resources such as fonts and images, and are in most cases
            considered to be of archival quality. Software that creates PDF may have
            options to create PDF/A, the archival variant.
         </div>
         <div class="para e42">PDF documents do not generally reflow text if printed or viewed on a
            differently sized device than that for which they were created. The page
            dimensions are part of a PDF document and cannot easily be altered;
            hyphenation has been performed, footnotes have been numbered and so on.
            PDF documents can be extremely difficult to read on smaller devices, as
            the user may need to scroll horizontally back and forth to read each line
            of text.
         </div>
         <div class="para e43">The formatting of both word processor documents and PDF files is
            explicit (except as noted already) and it is therefore possible for a
            search engine to process and index the text in them and then to display
            formatted results and previews. However, because the formats are not
            intended for this purpose, there are some difficulties. For example, PDF
            does not require that the creating software explicitly mark word
            boundaries, since each “glyph” can be positioned independently from any
            other. If word and phrase boundaries are not clearly marked, indexing has
            to use heuristics: sometimes one will run across search engine results in
            which characters have been joined between paragraph breaks, or where words
            have been incorrectly split, or where hyphenated words result in two
            smaller sub-words being indexed separately.
         </div>
         <div class="para e44">Documents as essentially pictures of documents, whether because of
            proprietary or poorly documented file formats, because of insufficient
            information, or because the document actually contains bitmap (raster)
            images of text rather than the actual text, can pose difficult or
            insurmountable problems not only to search engines but also to people who
            cannot easily read from the pictures, for example because the lines of
            text do not reflow (creating a need for difficult sideways scrolling) or
            because the user is relying on a text reader to speak the text out loud
            and the document does not actually contain any text. Any system for
            mediating communication between humans must be useable by 
            <div class="emphasis e45" role="ital">all</div> humans.
         </div>
      </div><a name="WhenRobotsWatchANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e46">
         <div class="title e47">When Robots Watch</div>
         <div class="figure e48" xreflabel="Figure 3">
            <div class="mediaobject e49">
               <div class="imageobject e50">
                  <div class="metaBox e51"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e81').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e81" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e51'
                           </span><span class="metaAttribute">fileref='../../../vol13/graphics/Quin01/Quin01-003.png'
                           </span><span class="metaAttribute">width='60%'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
            <div class="caption e52">
               <div class="para e53">Figure 3: person-to-person communication designed also for
                  automated observers and mediators.
               </div>
            </div>
         </div>
         <div class="para e54">When people share documents and also expect their documents to be
            processed by automatic robotic services such as search engine indexers
            they must use formats that can be read by an unknown audience. HTML can be
            a suitable format because it has well-defined behaviour: the robots know
            where paragraphs start and end, which markup breaks up words or phrases
            and which does not, and how relationships to other resources such as
            images or linked documents are represented.
         </div>
         <div class="para e55">Although HTML 5 has added new structural elements such as 
            <div class="emphasis e56" role="ital">article</div>, it is common today for Web sites to use
            
            <div class="emphasis e57" role="ital">div</div> elements with CSS-based styling for
            such things; this can increase the difficulty of determining the intended
            formatting: the search engines can determine word and phrase breaks only
            by applying the CSS styles. With the increased use of JavaScript-based
            styling this becomes harder, but fortunately there are strong financial
            incentives for commercial producers of HTML to use clear markup as
            otherwise their Web sites do not appear in user’s search results.
         </div>
         <div class="para e58">HTML is a moving, changing format and is not necessarily safe for archival
            purposes. PDF can be used with mediation, but PDF documents are not
            necessarily sufficiently accessible; it is possible to create PDF
            documents that consist of scanned bitmap page images rather than
            text.
         </div>
      </div><a name="DocumentsthatLastANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e59">
         <div class="title e60">Documents that Last</div>
         <div class="figure e61" xreflabel="Figure 4">
            <div class="mediaobject e62">
               <div class="imageobject e63">
                  <div class="metaBox e64"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e103').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e103" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e64'
                           </span><span class="metaAttribute">fileref='../../../vol13/graphics/Quin01/Quin01-004.png'
                           </span><span class="metaAttribute">width='60%'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
            <div class="caption e65">
               <div class="para e66">Figure 4: person-to-person communication designed also for
                  automated observers and mediators.
               </div>
            </div>
         </div>
         <div class="para e67">When people share documents and need them to be archived for several years or longer,
            a combination of formats may be best.
         </div>
         <div class="para e68">XML is a suitable basis for archival formatting because the syntax of XML
            is not evolving significantly (unlike HTML). Since there are no
            behavioural semantics within XML there is nothing to change: it is a
            framework for carrying meaning. However, precisely
            
            <div class="emphasis e69">because</div> XML does not have universal behavioural
            semantics a robot, or a future human, cannot necessarily determine word,
            phrase and paragraph boundaries, nor relationships to other resources, by
            inspection. HyTime Architectural Forms (for use with the older SGML
            standard document format) might have provided a way for robots to do this,
            but they have not been adopted for XML.
         </div>
         <div class="para e70">Since XML documents cannot reliably be presented to humans or to robots it is necessary
            to augment them, either with transformations or with alternate additional document
            formats.
         </div>
         <div class="para e71">Whenever information is provided in multiple formats there is a
            possibility of errors and contradictions between the various versions of
            the documents. Providing one or more automated transformations, using
            standardized and non-proprietary transformation languages such as XSLT or
            XQuery, and clearly marking the XML version of the document as
            authoritative, may be sufficient to minimize the impact of the lack of
            default formatting for arbitrary XML vocabularies.
         </div>
         <div class="para e72">Suitably augmented XML, then, is suitable for archiving, can be
            transmitted across networks, and can be formatted to reflow on different
            devices or pages. The cost of attaining this goal can be high: it is the
            cost of anticipating the needs of others (including later, older versions
            of ourselves) as opposed to the cost of reacting only to our own
            present-moment needs. To motivate the expenditure we must realize
            short-term benefits. The ability to produce documents in multiple formats
            is part of this; other benefits will be discussed later in this document.
            <div class="popupBox e73">
               <div class="popupLabel" onmouseover="$('#d1e120').show('1000');" onmouseout="$('#d1e120').hide('1000');">[ footnote ]</div>
               <div id="d1e120" style="display: none;">
                  <div class="footnote">
                     <div class="para e74">This is not to say that the benefits are not discussed in this
                        document but will be so discussed in some future version of this
                        document, but rather, that a reader proceeding in a linear fashion
                        
                        <div class="emphasis e75">forwards</div> through this document, as published,
                        will encounter the discussion of those benefits later than
                        encountering the reference to this footnote. Those readers reading the
                        document 
                        <div class="emphasis e76">backwards</div> will already understand why
                        this is an important point.
                     </div>
                  </div>
               </div>
            </div>
         </div>
      </div><a name="OnDeliveringXHTMLorHTMLANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e77">
         <div class="title e78">On Delivering XHTML or HTML</div>
         <div class="para e79">Many people have written to say that XHTML has no advantages over HTML, or even has
            disadvantages. However, those writers all seem to be writing from a perspective in
            which HTML is itself considered a good thing, and in which the primary purpose of
            creating a document is to display it in a Web browser.
         </div>
         <div class="para e80">When a single document is to be consumed by many processes within a single
            organization the ability to use XML tools on it can make XHTML very
            useful. In addition, ebook readers are currently using XHTML and XML
            rather than unrestricted HTML 5.
         </div>
         <div class="para e81">Even if XHTML documents are served on the Web as 
            <div class="emphasis e82" role="ital">text/html</div> and not as XML, the design of “polyglot” XHTML is
            such that the result is predictable, and yet the document can still be
            processed with XML tools. The value, then, is to the producer. Any value
            to the consumer is coincidental, but there is also no significant
            detriment.
         </div>
      </div><a name="WhenDocumentsarenotDocumentsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e83">
         <div class="title e84">When Documents are not Documents</div>
         <div class="figure e85" xreflabel="Figure 3">
            <div class="mediaobject e86">
               <div class="imageobject e87">
                  <div class="metaBox e88"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e147').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e147" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e88'
                           </span><span class="metaAttribute">fileref='../../../vol13/graphics/Quin01/Quin01-005.png'
                           </span><span class="metaAttribute">width='60%'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
            <div class="caption e89">
               <div class="para e90">Figure 5: Writing in the Clouds.</div>
            </div>
         </div>
         <div class="para e91">When information is divorced from any context and becomes a set of facts it can be
            tempting to switch to RDF, the underlying knowledge representation used in the Linked
            Data Initiative.  That context, however, may still be needed over time, so in larger
            projects RDF is most commonly used when it is automatically generated and known to
            be context-free, or kept in named RDF graphs and regenerated as needed, for example
            to support repudiation of facts or restrictions on sharing.
         </div>
         <div class="para e92">RDF cannot in general be represented in document format except through
            visualizations of graphs, and thus is even harder to format in search
            results or accessibility tools than XML (although since RDF can be
            interchanged in XML there is clearly and necessarily some overlap).
            <div class="popupBox e93">
               <div class="popupLabel" onmouseover="$('#d1e155').show('1000');" onmouseout="$('#d1e155').hide('1000');">[ footnote ]</div>
               <div id="d1e155" style="display: none;">
                  <div class="footnote">
                     <div class="para e94">It should be noted that at least one mapping exists from the XML
                        Information Set into RDF, so that in theory at least one can represent
                        any XML document as RDF; in practice the mapping creates a separate
                        RDF graph node for every text character in the document, and is
                        unlikely to have much practical application. However, such RDF graphs
                        could, at least in principle, be returned to their XML form and hence
                        at least some of them could be represented as documents.
                     </div>
                  </div>
               </div>
            </div>
         </div>
      </div><a name="ProgrammertoProgrammerMachinetoMachine:programspecificdata%0AformatsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e95">
         <div class="title e96">Programmer to Programmer, Machine to Machine: program-specific data
            formats
         </div>
         <div class="para e97">When a computer program needs to communicate complex information to
            another program different considerations apply from human-readable
            documents.
         </div>
         <div class="itemizedlist e98">
            <div class="listitem e99">
               <div class="para e100">Whatever format is used must map directly to data structures used
                  within the programs at both ends, as otherwise the primary goal of
                  communication between programs will not be achieved.
               </div>
            </div>
            <div class="listitem e101">
               <div class="para e102">Programmers often consider efficiency to be an important goal, as
                  measured by number of lines of code for parsing, amount of memory
                  consumed, amount of processing used, and amount of data transmitted
                  for a given result. For this reason terse formats are often
                  preferred.
               </div>
            </div>
            <div class="listitem e103">
               <div class="para e104">Flexibility of representation is not a benefit when one is
                  marshalling data, saving/restoring/transmitting objects, or exchanging
                  application-specific data. Instead, a very specific format may be
                  easier to parse.
               </div>
            </div>
            <div class="listitem e105">
               <div class="para e106">Standardization is not usually considered important by developers
                  except insofar as widely-deployed code libraries might reduce work.
                  One therefore often sees one-off formats in use.
               </div>
            </div>
         </div>
         <div class="para e107">One widely-used program-to-program data format is JavaScript Object
            Notation (JSON). Although, as the name suggests, this was originally a
            serialized form of data structures such as are found in Web browsers, the
            popularity of the World Wide Web and the desire to create and devour Web
            browser data structures on Web servers has meant that most programming
            languages today have libraries or native support available for handling
            JSON.
         </div>
         <div class="para e108">Since object serializations are by nature tied to specific versions of
            specific programs, and since JSON is not in general self-labelling with
            regard to version or conformance, JSON cannot be said to be suitable for
            archiving. None the less the syntax is compact and familiar to programmers
            working with most of the widely-used languages today, languages whose
            design was influenced by the C programming language.
         </div>
         <div class="para e109">Another widely used format is the “comma-separated values” (CSV) file.
            There are dozens of different syntax variations and software that reads
            CSV files often has to ask users to identify particular aspects of the
            variant in use, showing that the format is not very suitable for
            interchange or archiving. Recent work at W3C in supplying metadata for CSV
            files may help in this area in the future.
         </div>
      </div><a name="ProgramsandHumans:programspecifictextformatsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e110">
         <div class="title e111">Programs and Humans: program-specific text formats</div>
         <div class="para e112">A variant on machine-to-machine communication is the set of markup
            formats designed by programmers for use in specific programs but intended
            to be authored and edited by humans using text editors.
         </div>
         <div class="para e113">This list includes languages such as Markdown (used for formatting
            wiki entries and for describing programs on 
            <div class="emphasis e114">github</div>),
            Microsoft-style “
            <div class="emphasis e115" role="ital">ini</div>” files, but perhaps
            also TeX and 
            <div class="emphasis e116" role="ital">troff</div> macros.
         </div>
         <div class="para e117">Over the years there have been many such formats, and long experience
            suggests several difficulties with the use of such formats and several
            strengths.
         </div>
         <div class="itemizedlist e118">
            <div class="listitem e119">
               <div class="para e120">Ease of parsing can be so great there may not even be an
                  identifiable piece of code that’s a parser. This can be both a
                  strength (rapid prototyping and development) and a drawback (higher
                  cost of maintenance).
               </div>
            </div>
            <div class="listitem e121">
               <div class="para e122">Ad-hoc formats tend not to have any explicit document format
                  version indication and yet be specific to specific versions of the
                  software for which they were written.
               </div>
            </div>
            <div class="listitem e123">
               <div class="para e124">If there is only one interpreter for a language it’s common to
                  find that undocumented features become used, hindering future attempts
                  at a second implementation and frustrating attempts to interpret data
                  in the absence of the software for which it was created.
               </div>
            </div>
            <div class="listitem e125">
               <div class="para e126">Errors in a file created in an ad-hoc format might go undetected,
                  and, without other implementations to compare, or without a concept of
                  validation, can become difficult, expensive or even impossible to
                  correct after the fact.
               </div>
            </div>
         </div>
         <div class="para e127">Ameliorating some of the concerns is the fact that many
            human/programmer text formats 
            <div class="emphasis e128" role="ital">are</div> widely
            implemented.
         </div>
         <div class="para e129">One such widely-implemented format, Markdown, is used in multiple
            programs. Markdown is a text-based format designed for use in Web forms
            such as Wiki pages, with a syntax such as using equals-signs to underline
            a heading. It has the advantage that the text looks similar to the result
            of formatting, although the markup for that same reason tends to be
            presentational and not aimed at representing information which can be
            re-purposed. Unfortunately, there are many incompatible variations of
            Markdown and the format is not self-labeling, so that one can't be certain
            which variation one is seeing.
         </div>
         <div class="para e130"> A strength claimed for Markdown is that people unaccustomed to HTML
            or other markup languages can work with it. Direct content-editing in Web
            browsers removes much of that appeal, since a word-processor style of
            input editing is presumably even more appealing to the same people who
            don't like HTML. In fairness one should also mention programmers who want
            a text-based document format but feel that XML and HTML are too verbose
            for their needs.
         </div>
      </div><a name="FactorsforEvaluationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e131">
         <div class="title e132">Factors for Evaluation</div>
         <div class="para e133">This section describes some of the factors that determine
            which format to use in a given situation. There is no complete list because
            situational and contextual factors are always the most significant in
            practice. Note that evaluation here is not in the sense of deciding one
            format to be in some way superior to another, but to suggest
            applications for which each is the most suited.
         </div><a name="InformationLifeCycleANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e134">
            <div class="title e135">Information Life Cycle</div>
            <div class="para e136">Information that will be archived for future research purposes
               must be clear when taken out of context. This might be achieved
               through careful documentation and avoiding relying on application-specific
               or opaque formats.
            </div>
            <div class="para e137">Information that will be used once and discarded, such as an API
               message in a Web service or notification that a user moved a pointing device
               could reasonably be in an application-specific format, but if multiple
               programs might make use of the same message then there is greater
               value in a more generic format.
            </div>
            <div class="para e138">Information that will be stored and processed and perhaps queried
               will need to be in a format that supports that processing. This is the most
               common case for documents today and the least common for data (since the
               data is more easily queried in a data store than interchanged en masse).
               
            </div>
            <div class="para e139">Self-describing or clearly documented information will generally
               make querying easier and
               will facilitate recovery from an archive in the future, but that follows for all
               possible data formats. However, not all data formats are such that documents
               can easily, and routinely do, identify the format used and version of that format.
               For example, neither CSV files nor Markdown documents can in any standard manner
               identify the specification or language to which they might conform, and
               HTML 5 documents do not identity the dated version of the "living standard" to which
               they conform.
            </div>
         </div><a name="AudienceLanguageandCultureANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e140">
            <div class="title e141">Audience Language and Culture</div>
            <div class="para e142">Information that contains mixed languages, scripts or dialects will
               need a mechanism to indicate this, such as xml:lang in XML or lang in HTML.
            </div>
            <div class="para e143">Where human-readable content is included and could be in any language
               (now or in the future), rich text (mixed content) will almost certainly be needed,
               at a minimum for supporting Japanese or Chinese ruby annotations.
            </div>
            <div class="para e144">Where text may be translated, in part or whole, a text replacement
               mechanism may be needed to make a translated version of a document.
               It may also be necessary to mark which parts are to be left untranslated (push the
               button labeled 
               <div class="emphasis e145" role="ital">sokken</div>: the label on the
               physical vending machine on the platform doesn't change just because you have
               an English guide book).
            </div>
         </div><a name="UniversalAccessANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e146">
            <div class="title e147">Universal Access</div>
            <div class="para e148">Any information presented to people will need to be accessible to
               them. This means that accessibility must be built in at all levels.
               Some of the formats described in this paper are accessibility-agnostic,
               but others can include or encourage user interface elements that can be
               harmful or exclusionary; in such cases extra vigilance may be needed on
               the part of document authors and system developers.
            </div>
         </div><a name="RelationshipsbetweenDocumentsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e149">
            <div class="title e150">Relationships between Documents</div>
            <div class="para e151">Sometimes a document or piece of data might stand alone,
               but that surely is rare. A document might form part of a sequence, might
               contain links, might be contained in, or
               
               <div class="emphasis e152" role="ital">be</div> a database, so that joins between
               sets of values might be performed.
            </div>
            <div class="para e153">Link discovery requires a standard vocabulary such as HTML or XLink
               or a standard discovery mechanism such as HyTime's architectural forms
               for SGML years earlier.
            </div>
            <div class="para e154">Implicit links, such as might be found by joins, are thus format-dependent;
               a dictionary site might make a link out of every word or phrase in a paragraph to
               a corresponding definition, but might do so programmatically (often
               with poor results in the face of homonyms). This ability is independent of format,
               but explicit linking requires syntax as does marking terms not intended to participate
               in such links.
            </div>
            <div class="para e155">Although simple querying can be performed on any of the formats, since
               they are text based, structure-aware querying is currently defined only
               for some formats, including RDF (SPARQL), XML (XQuery) and (although
               not a standard) JSON (JSONIQ).
            </div>
            <div class="para e156">Structure-based querying often has difficulty when one syntax
               is embedded within another: which HTML documents contain a definition
               for a particular JavaScript function with a given type signature, or which
               JSON documents contain a string with embedded HTML having a div element with a
               particular class attribute. Such hybrid queries can involve complex textual escaping
               conventions;
               XQuery systems supporting SPARQL
               queries of RDF embedded in XML provide a promising counterexample.
               
            </div>
         </div><a name="DefaultFormattingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e157">
            <div class="title e158">Default Formatting</div>
            <div class="para e159">Documents on the open Web need to be findable, and that generally
               means that search engines will need to parse them and then in response
               to user searches generate result snippets, short extracts that users can
               use to decide whether to read the longer document. Phrase and word
               breaks and basic formatting is necessary for the snippets.
            </div>
            <div class="para e160">Default formatting is also needed for operations such as copy and paste.</div>
         </div><a name="ValidationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e161">
            <div class="title e162">Validation</div>
            <div class="para e163">Although validation is a dirty word in some HTML circles, in other
               circles it's an essential part of doing business: context determines function.
            </div>
            <div class="para e164">Validation can be at the syntax checking level, or at the business logic level
               (every invoice must have a date, a customer number and an amount), or can be
               at the application level (the file is OK if the program reads it). Of these, the application
               level validation is the most powerful (arbitrary code) and the least portable. A standard
               way to express business or grammar rules means that documents can be tested
               against multiple programs and can also serve as documentation over time.
            </div>
         </div><a name="DataTypingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e165">
            <div class="title e166">Data Typing</div>
            <div class="para e167">A document may contain components with identifiable data types such as
               "numbers" or "sequence of characters, string" or "truth value". This is essential
               for data binding and object dumping (as in JSON), but for some other systems it's
               also
               important to support user-defined types such as sock-colour or MailingAddress.
            </div>
         </div><a name="ProgramCompatibilityANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e168">
            <div class="title e169">Program Compatibility</div>
            <div class="para e170">The constructs that a data format can represent should match the
               objects that a program needs in order to manipulate that data. If a
               format is too difficult to process it will not be popular with
               developers.
            </div>
            <div class="para e171">This must be balanced by the fact that programmers may not be the
               only, or even the most critical, stakeholders in a project.
            </div>
            <div class="para e172">In some cases (and some contexts)
               a compromise can be reached using scripting languages
               such as JavaScript, but then security implications must be considered.
            </div>
            <div class="para e173">The need to process data is intrinsic to computing with data;
               having standard data processing and transformation languages can
               help with staffing needs as well as system portability and longevity at
               the expense of using languages that are not necessarily optimized for the particular
               task at hand.
            </div>
         </div><a name="InformationModellingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e174">
            <div class="title e175">Information Modelling</div>
            <div class="para e176">One of the decisive factors for many projects in the past has been
               whether the goal of using markup is to model information (which may
               exist outside of the marked-up document, for example in a physical
               book or manuscript being transcribed or quoted, or an existing
               business process) or whether it is to guide presentation.
            </div>
            <div class="para e177">Markup as part of information modelling can be contrasted
               with markup as a syntax for conveying data, such as node-and-arc graphs or
               objects, which themselves may represent (or be) models.
            </div>
         </div>
      </div><a name="HTMLandWebBrowsersANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e178">
         <div class="title e179">HTML and Web Browsers</div>
         <div class="para e180">The markup in HTML is primarily driven today by the goals of Web
            browser vendors.
         </div>
         <div class="para e181">Although lip-service is paid to so-called “semantic tagging” what is
            meant is markup divorced from presentation specifics and yet tailored to a
            specific type of software application, the Web browser. An HTML document
            represents part of a Web Application, together with other resources such
            as Cascading Style Sheets (CSS), images, JavaScript programs, and perhaps
            input data in JSON or other formats.
         </div>
         <div class="para e182">So-called semantic tags (actually elements) added to HTML 5 have
            mostly included markup for blogging. Transcribing a play, writing a poem,
            even sharing song lyrics, these are not on the HTML agenda.
            <div class="popupBox e183">
               <div class="popupLabel" onmouseover="$('#d1e318').show('1000');" onmouseout="$('#d1e318').hide('1000');">[ footnote ]</div>
               <div id="d1e318" style="display: none;">
                  <div class="footnote">
                     <div class="para e184">See. however, 
                        <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e185" xlink:actuate="onRequest" xlink:href="http://www.w3.org/html/wg/wiki/PoeticSemantics" xlink:show="new" xlink:title="www.w3.org/html/wg/wiki/PoeticSemantics" xlink:type="simple"></div> for a
                        discussion of ways to add poetry to HTML; a discussion that appears
                        not to have gained much traction.
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e186">Recent work on user-defined elements in HTML concentrates on their
            “behaviour” rather than on what (if anything) is being represented.
         </div>
         <div class="para e187">Since Cascading Style Sheets have built-in support for HTML features
            rather than being a general-purpose styling language for marked-up
            documents it is more convenient to use HTML rather than some other XML
            markup language when using CSS, whether for Web browser use or
            otherwise.
         </div>
         <div class="para e188">Since the HTML language is intended for use with CSS and JavaScript,
            primarily within a Web browser, and not for document modeling, it makes
            sense to use XML for authoring, transcriptions, and archival purposes, and
            to transform to HTML when needed.
         </div>
      </div><a name="MultipleConsumers:TransformationsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e189">
         <div class="title e190">Multiple Consumers: Transformations</div>
         <div class="para e191">The need for document creators to produce EPUB documents for
            electronic readers alongside other formats has led to an increase in the
            usage of XML, as opposed to (or as well as) proprietary page design or
            word processing formats. There is nothing about XML that makes it
            inherently more amenable to transformation than JSON, or than any format
            that can be parsed reliably and in an interoperable manner. In practice,
            however, the existence of XSLT, of XQuery and XPath, and the widespread
            availability of tools implementing those languages, means that XML is a
            particularly convenient choice. The use of XML schema languages to check
            that documents meet specified constraints can also help to control the
            scope of transformation programs.
         </div>
         <div class="para e192">It should be noted that a strength of XSLT is that it can be written,
            read and maintained by people who do not see themselves as programmers,
            but as document people. The declarative nature of XSLT, and the limited
            control flow possibilities, help to make the XSLT transformations easy to
            understand. As a result, organizations with people working on
            predominantly textual documents are very likely to have staff who can
            comfortably use XSLT, making XML in turn an excellent choice as a basis
            for transformations.
         </div>
         <div class="para e193">HTML and JSON, by contrast, do not have such transformation languages;
            JavaScript is much closer to “regular programming” than XSLT and may be
            seen as inappropriate for technical writers to use.
         </div>
      </div><a name="ComparisonofFormatsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e194">
         <div class="title e195">Comparison of Formats</div>
         <div class="para e196">So far this paper has introduced some use cases and (indirectly)
            markup formats. This section summarizes the strengths and weaknesses of
            each format using the factors for evaluation described above, after a brief introduction
            to
            make clear what is meant in this paper by each format.
         </div>
         <div class="para e197">it should be stressed that this is not a complete list of markup
            formats; the goal of this paper is to help the reader choose among several
            of the most likely formats to be used today, and to provide a starting-point
            for discussion.
         </div><a name="PlainText(Unstructured)ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e198">
            <div class="title e199">Plain Text (Unstructured)</div>
            <div class="para e200">Mentioned here only for completeness, plain text files with no claim
               to using any particular markup strategy can be read by humans and if
               there is some regular ad-hoc syntax then a program can read the file,
               but there is no Network Effect: if the syntax were widely enough used to
               have multiple implementations and a user community it would no longer be
               considered a plain text file, but would have identifiable
               structure.
            </div>
            <div class="para e201">Since plain unstructured text does not by itself constitute a
               markup language, it will not be compared further.
            </div>
         </div><a name="MarkdownANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e202">
            <div class="title e203">Markdown</div>
            <div class="para e204">Although there are a number of mostly-compatible variants of Markdown,
               in this paper we will imagine a world in which a single variant dominates.
               The stated intent of Markdown is as a text to HTML conversion tool for
               Web writers.
            </div>
            <div class="para e205">Life Cycle: because Markdown is not a standard, variations between
               versions may mean Markdown is not ideal for archiving. This is
               exacerbated because Markdown files are not self-describing: they do not
               label themselves as Markdown and do not identify the version of Markdown
               to which they conform.
            </div>
            <div class="para e206">Audience, Language and Culture: Markdown is not internationalized. Lack
               of support of mixed language paragraphs, indications of language in use,
               explicit right-to-left markup, Ruby annotations and
               script selection may make it unsuitable for mixed language content. Lack of
               named identifiers for sections and paragraphs may make it difficult to keep
               translations in sync.
            </div>
            <div class="para e207">Universal Access: Markdown has limited support for HTML
               accessibility from a reader perspective; on the other hand Markdown has
               found a use for people writing blogs, because it can fairly easily be
               created in a text editor and uploaded, avoiding the user interface for
               the blogging system. 
            </div>
            <div class="para e208">Situations: Markdown is suitable for simple computer-mediated
               human-to-human communication, since Markdown files can easily be read in
               their text form as well as when converted to HTML. Markdown cannot
               represent complex documents such as mathematical research papers.
            </div>
            <div class="para e209">Relationships: Markdown supports explicit URL-based links.</div>
            <div class="para e210">Default formatting: Markdown files can be seen as text files or as HTML,
               and it is reasonable to say that, although not as powerful r widely
               supported as HTML in this regard,
               Markdown documents are transparent with respect to the author's formatting
               intentions.
            </div>
            <div class="para e211">Data Typing and Validation: not provided except for basic syntax checking.</div>
            <div class="para e212">Program Compatibility: Markdown is not significantly easier to process
               in programs than HTML, and a common way to process it is in fact to convert
               it to HTML first.
            </div>
            <div class="para e213">Use case: Markdown is primarily used where a text-based "rich text" is
               needed for people uncomfortable dealing with HTML or XML directly, and where
               no tools are available.
            </div>
            <div class="para e214">Information Modelling: not attempted.</div>
         </div><a name="JSONANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e215">
            <div class="title e216">JSON</div>
            <div class="para e217">JSON (JavaScript Object Notation) is a mechanism for transmitting
               data that can easily be instantiated as programming-language-level objects by
               the receiver. The format was originally defined for JavaScript but JSON is now supported
               by most of the major programming languages. JSON is included in this paper
               because, even though it is not perhaps a markup language, and does not attempt
               to be particularly suited for textual documents, it is widely seen as a replacement
               for XML in Web services and interactive Web usage (AJAX), where JSON strings contain
               escaped fragments of HTML.
            </div>
            <div class="para e218">Situations: JSON is intended for program-to-program communication.</div>
            <div class="para e219">Life Cycle: JSON is primarily aimed at information that will be used once and discarded,
               such as search results communicated from a Web server to a Web browser. However,
               today there are databases for storing and querying "JSON documents".
            </div>
            <div class="para e220">Audience, Language and Culture: JSON documents do not have standard
               ways (at the time of writing) to mark the natural language used for text strings;
               even if it did, JavaScript objects are the wrong level of abstraction for this. It
               is,
               however, possible to embed escaped HTML string in JSON, and this can contain
               language tags. JSON is not intended as an authoring format for textual documents.
            </div>
            <div class="para e221">Universal Access: since JSON is intended for program-to-program communication
               this is not an issue. It is up to the creator of any HTML embedded inside JSON to
               ensure accessibility, however.
            </div>
            <div class="para e222">Relations between Documents: JSON documents represent objects
               with simple names; if it's known through some external source that the same
               name in multiple documents represents the same information then database
               query languages can associate the information. Additionally, JSON strings might
               include escaped HTML markup with links, but there is no meaningful way to point
               into a JSON file with a link, nor is there a standard meaning. JSON Schema defines
               a mechanism to point to JSON objects using a reserved name, "id".
            </div>
            <div class="para e223">The JSONIQ query language gives an extended XPath-like syntax, and there are
               other ways to refer to the inside of a JSON document, but pointing into an
               object in a computer program isn't the same as linking to part of a document.
               
            </div>
            <div class="para e224">There are no widely used ways to transform JSON objects outside of a
               programming language, although there is (or will be) JSON support in
               XQuery 3.1, XSLT 3 and JSONIQ.
            </div>
            <div class="para e225">Default Formatting: There is no default presentation for JSON objects
               beyond the "source code view" of the actual document.
            </div>
            <div class="para e226">Validation and Data Typing: The IETF JSON Schema language is still a
               draft, and does not have large traction yet, but is gaining maturity. It
               was influenced by XML Schema but does not support user-defined data
               types. it is intended for use at a programmer and API level, not at a
               business level.
            </div>
            <div class="para e227">Program Compatibility: This is the greatest strength of JSON: JSON
               documents are also JavaScript fragments. They can be embedded in the
               source code of programs, they can be read with "eval" (although security
               implications suggest this should be preceded with validation) and they
               can be generated directly from any object in a JavaScript program.
               Although usage in other programming languages typically requires a
               library, JSON's data structures usually map exactly onto data structures
               in popular programming languages, unlike (for example) HTML or XML,
               where attributes and mixed content must be modeled in terms of such data
               structures.
            </div>
            <div class="para e228">Information Modelling: JSON is all about program modelling and not
               information modelling. It's just syntax: one can map from SGML or HTML
               or XML into JSON, but the primary strength of JSON is its convenience
               for developers, not its easy (or otherwise) at modeling information.
               Another indication of the JSON culture is that JSON Schema does not
               provide for user-defined types, just number, string, boolean, array,
               object and null. Schema authors can restrict the value space to say that
               a field called socks_owned must be a whole number not less than zero,
               but cannot say that socks_owned is of type socks_count; this reflects
               the type system of JavaScript but is not for example a good match for
               the way people think about documents or objects outside the
               computer.
            </div>
         </div><a name="HTMLANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e229">
            <div class="title e230">HTML</div>
            <div class="para e231">The HyperText Markup Language, standardized first at the IETF and
               the ISO and later at W3C, is a fixed markup language aimed at delivering
               documents to the World Wide Web. It is a vocabulary largely controlled by
               Web browser makers.
            </div>
            <div class="para e232">A recent variant, HTML 5, adds support for "Web Components",
               essentially user-defined HTML elements with content templates and
               JavaScript and CSS styles to supply any required browser-side behaviour.
               Unfortunately, HTML 5 is a "living standard" and features come and go
               from time to time. This is balanced by excellent support from Web
               browsers and clear documentation (in almost all cases) on exactly how a
               Web browser should recover from errors.
            </div>
            <div class="para e233">Situations: HTML is primarily intended for computer-mediated human
               to human communication of documents, but it is also increasingly used today for
               computer-to-human interactions with "Web Applications."
            </div>
            <div class="para e234">HTML is also used for computer-to-computer messages, but in this case
               the error recovery rules employed by Web browsers and by conforming HTML 5
               implementations may not always be appropriate. Silent correction or acceptance
               of errors has in other languages and systems famously led to deaths in space
               missions and other engineering problems.
            </div>
            <div class="para e235">Information Life Cycle: HTML is implemented in perhaps a dozen
               or more Web browsers, with a very large deployment. As a result it is difficult
               for HTML to change in incompatible ways. None the less attempts to change
               HTML in that way are often attempted, and, as a result, archived HTML documents
               need to be explicit about the version of HTML they used.
            </div>
            <div class="para e236">The culture of HTML tends to be very much aimed at Web browser use.
               As such, behavioural and presentation semantics are emphasized, with
               "semantic" elements such as section and article being hailed as an
               advance over equally generic names such as div. Again, the challenge
               here for archiving is that the actual meanings of markup constructs will
               and do change over time, and also that JavaScript code may or may not
               continue working over a period of decades and may or may not
               sufficiently describe behaviour and intent.
            </div>
            <div class="para e237">A large number of content management systems and databases for
               storing HTML exist; some of them prefer XHTML, which can be parsed more
               reliably; see the next section for more details.
            </div>
            <div class="para e238">Audience, Language and Culture: HTML has strong internationalization
               and localization support, especially when used in conjunction with the Internationalization
               Tag Set (ITS). Individual elements down to the word or sub-word level can
               be marked for language, region and script, and can be marked as not to
               be translated. Ongoing work, for example in supporting all forms of Chinese
               and Japanese ruby annotations, is improving the situation still further, but,
               overall, HTML offers one of the best formats for international and multilingual
               documents today.
            </div>
            <div class="para e239">Early versions of HTML, unfortunately, put human-readable content
               such as alternate replacement text for when an image is not available, in
               attributes, precluding markup for mathematics, for Ruby annotations, for
               emphasis; this defect is slowly being corrected, for example with the picture element.
            </div>
            <div class="para e240">Universal Access: Extensive and very helpful information is available for
               document and application authors working with HTML. There are plenty of
               challenges since not all HTML documents are automatically accessible, but
               that is also true of other rich formats, especially when they are scriptable.
               A complex system of fallbacks makes it possible to write Web applications that
               will work on a wide range of devices and with assistive technologies such as
               text readers, alternate pointing devices and even Braille terminals.
            </div>
            <div class="para e241">Relationships between Documents: HTML has a rich vocabulary
               for representing relationships from one document to another, including
               explicit hypertext links and link relations as well as implicit links (for example
               with URI Templates) and links between information and remote descriptions
               with microdata and RDFa annotations.
            </div>
            <div class="para e242">There is no automated mechanism today for link discovery when links
               are implicit.
            </div>
            <div class="para e243">There is no widely-deployed standard HTML querying language, and there is no standard
               way in HTML to represent relationships between documents 
               <div class="emphasis e244" role="ital">outside</div> of any document.
            </div>
            <div class="para e245">Default Formatting: HTML today is used for the representation and
               formatting of best-selling printed books; it is not as sophisticated as
               other publishing platforms but it growing rapidly in that area. HTML
               documents have default associated formatting, although an increase in
               the use of cascading style sheets to redefine the formatting and purpose
               of elements can weaken that, and should be avoided.
            </div>
            <div class="para e246">Validation: There are widely-used syntax checkers for HTML, such as
               that at validator.nu and the W3C HTML validator.  Validation at the business
               level, for example to say a heading must be followed by a paragraph, must
               be handled with other mechanisms, such as by using XHTML and XML Schema.
            </div>
            <div class="para e247">Data Typing: HTML did not define any specific data model until HTML 5;
               before that, although the HTML DOM was widely used, it was not mandated by HTML.
               Like JavaScript objects, however, the HTML DOM is not strongly typed.
            </div>
            <div class="para e248">Program Compatibility: Unlike JSON, HTML documents cannot easily be
               processed by programs in most traditional languages, even JavaScript.
               Attempts to alleviate this, such as the popular jQuery library, have
               been largely successful where they are available. HTML is not a strong
               choice for object serialization and deserialization, which is why JSON
               exists.
            </div>
            <div class="para e249">Information Modelling: HTML documents are closely (and increasingly) tied
               to Web browser design. HTML is adequate in many cases for modelling a blog,
               although it does not have standard support for song lyrics, poems, footnotes,
               or a host of other basic rhetorical forms and devices.
            </div>
         </div><a name="XHTMLANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e250">
            <div class="title e251">XHTML</div>
            <div class="para e252">There are two main versions of XHTML in use today, and two meanings of
               the term; XHTML 1 was designed to be an XML-based version of HTML 4 which can
               be served to Web browsers as either XML or HTML. XHTML 5 is an XML serialization of
               HTML 5 with the same goal: that when a Web browser reads an XHTML 5 document it
               creates the same internal representation (DOM) regardless of whether the HTML or
               the XML syntax was used. XHTML 5 is not, however, a successor to earlier
               versions of XHTML.
            </div>
            <div class="para e253">All of the considerations for HTML apply to the XML syntax for HTML,
               except that parsing of XHTML as XML means firstly that errors may be treated as
               fatal and second that XML tools can be used with XHTML documents.
            </div>
         </div><a name="RDFandLinkedDataANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e254">
            <div class="title e255">RDF and Linked Data</div>
            <div class="para e256">The Resource Description Framework, RDF, is a standard for
               representing metadata as sets of decontextualized triples of atomic
               values that form a (possibly disconnected) graph. RDF is most often
               exchanged in three formats: RDF/XML; Turtle (a text-based syntax); and
               SPARQL Results in XML, a format intended to be transformed (often with
               XSLT) into a user-visible format such as HTML or SVG.
            </div>
            <div class="para e257">Linked Data (LD) is a name for the practice of publishing and
               combining RDF-based graphs; it is mentioned here in the context of
               making abstract RDF graphs available from documents.
            </div>
            <div class="para e258">Situation: RDF is primarily used in computer-to-computer communication,
               although many RDF data sets are hand-authored.
            </div>
            <div class="para e259">Information Life Cycle: RDF documents are frequently stored in databases,
               whether hybrid or RDF-only (RDF-only databases are often called triple stores).
               Although RDF can be used for one-off communication it is more often
               stored and queried. RDF is also commonly embedded in other formats,
               especially HTML. The most common standard querying language for RDF is SPARQL.
            </div>
            <div class="para e260">Since RDF uses URIs, and URIs are defined to be opaque and
               meaningless to an outside observer, RDF is strictly speaking not self
               describing. In practice, though, URIs are normally made from natural
               language words and represent what those words name. Most RDF
               serializations do identify the file as conforming to a specific version
               of RDF.
            </div>
            <div class="para e261">Audience, Language and Culture: RDF nodes have opaque identifiers
               that are not in any natural language. it is possible to create
               "labelFor" nodes in the RDF graph and give them language tags, although
               it should be noted that RDF does not handle XML or HTML style mixed
               content well.
            </div>
            <div class="para e262">The Linked Data culture wants all information about everything and
               everyone to be public. Privacy and security remain challenges for the
               various RDF communities. A talk at XML Prague suggested storing
               RDF graphs in XML databases and using XQuery to construct a set of
               triples for SPARQL queries based on security, but this should probably be seen as
               an outlier; in the long term one can expect SPARQL itself to learn about security.
               A technical challenge is that there is nowhere in a triple to store sharing or security
               information.
            </div>
            <div class="para e263">Universal Access: RDF, like JSON, does not have any inherent user
               interaction. Graphical visualizations, however, can be a challenge for
               people who are not able to see them, and alternatives therefore need to
               be considered.
            </div>
            <div class="para e264">Relationships between Documents: RDF is all about relationships,
               but, oddly, cannot easily refer from one graph to another. RDF named graphs
               (new in RDF 1.1) may provide a mechanism there, but it is too soon to measure
               deployment.
            </div>
            <div class="para e265">Default Formatting: RDF documents do not have textual representations
               other than (like JSON) as source. However, they are conventionally represented as
               node and arc graphs. This visual representation conveys the overall structure of an
               RDF
               graph but not necessarily the actual content.
            </div>
            <div class="para e266">Validation: There has been recent work on RDF Shape Expressions for
               constraining the shape of RDF graphs; this is not yet deployed.
            </div>
            <div class="para e267">Data Typing: RDF does support associating data types with values, and
               these can be user defined.
            </div>
            <div class="para e268">Program Compatibility: The RDF model is graph based, not object based,
               and does not correspond to the native data structures and type systems of
               modern programming languages. However, those same current languages are
               easily able to represent RDF graphs, and there is no mixed content to
               complicate things.
            </div>
            <div class="para e269">Information Modelling: RDF is about modelling knowledge, not information.
               it is a knowledge representation system used primarily for first-order logic and
               inferencing.
            </div>
         </div><a name="XMLANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e270">
            <div class="title e271">XML</div>
            <div class="para e272">The Extensible Markup Language, defined at W3C as a subset or profile
               of SGML (and originally known as Web SGML), is not really a single markup language
               like HTML, but instead a framework for defining one's own markup languages,
               all of which have a common syntax.
            </div>
            <div class="para e273">This paper distinguishes where appropriate between arbitrary XML documents and
               documents in some specific XML-based markup language such as XHTML 5 or
               DocBook.
            </div>
            <div class="para e274">Situation: XML is used in all areas of communication: person to
               person, person to computer, and computer to computer, and can to some
               extent also be used without computer mediation (that is, text-oriented
               XML documents can be moderately readable, although not as much as
               Markdown documents).
            </div>
            <div class="para e275">Information Life Cycle: XML documents have a life cycle that depends on
               how they are used more than on the fact they are XML. For example, a message
               from an automobile engine to a garage mechanic's diagnostic system, a
               message from one operating system component to another when a user double-clicks
               on a desktop icon, a transcription of an Anglo-Saxon poem,
               a health-care provider's record of treatment for a patient, all are likely to be in
               XML,
               and each have different longevity and processing characteristics.
            </div>
            <div class="para e276">Trees based on parsing XML documents can be stored in relational, XML-native or hybrid
               data stores,
               and the XQuery language can be used to access them efficiently.
            </div>
            <div class="para e277">Audience Language and Culture: XML documents can support all of the
               internationalization features of HTML and XHTML, but it depends on the specific
               XML vocabulary. If you are designing an XML representation for text you should
               consider adopting the HTML model where possible because of widespread
               understanding and adoption.
            </div>
            <div class="para e278">The W3C Internationalization Tag Set (ITS) can be used directly in XML to
               help with translation and localization.
            </div>
            <div class="para e279">Universal Access: Again, this depends on the ways in which the XML documents
               are used. Awareness of the W3C Web Content Accessibility Guidelines can help
               document designers to create accessible systems using XML.
            </div>
            <div class="para e280">Relationships between Documents: The XLink specification has not
               gained much traction, and today people are more likely to use an ad-hoc attribute
               called 
               <div class="emphasis e281" role="ital">href</div>, or possibly to use the HTML "a" element
               by means of an XML namespace. it is also possible to embed RDF in XML documents.
            </div>
            <div class="para e282">Default Formatting: This is one of the two biggest weaknesses of XML:
               since there are no default presentational semantics,
               search engines cannot generate reliable snippets for results. Using XML on
               the World Wide Web can therefore be a problem.
            </div>
            <div class="para e283">Validation: XML has a wide variety of validation mechanisms, from simple
               and widely-supported DTDs, through to the baroque complexities of W3C XML Schema.
               A part-way compromise is RELAXNG, but this does not perform the data binding
               role of XML Schema, as described in the next paragraph. User-defined data types and
               compound types are available.
            </div>
            <div class="para e284">Data Typing: XML Schema validation can assign type annotations to
               elements in the parsed XML tree; type labels can be user-defined type names as well
               as built-in types. Note that RELAXNG does not support assignment of type
               annotations in a deterministic way, so that XML Schema is generally used where
               data binding (object loading and dumping) is required.
            </div>
            <div class="para e285">Program Compatibility: This is the second of the two main weaknesses of XML:
               the concept of an annotated tree of nodes is not a native data structure in most
               programming languages. As with HTML, mixed content such as paragraphs with embedded
               elements considerably complicates processing.
            </div>
            <div class="para e286">The situation is mitigated by the popularity of XSLT and XQuery, XML-specific
               languages for querying and manipulating trees.
            </div>
            <div class="para e287">Information Modelling: This is the greatest strength of XML: that it
               can be used, and culturally 
               <div class="emphasis e288" role="ital">is</div> used, to
               model documents or other information outside of any particular
               application or process. This strength comes at a cost: because XML
               documents are usually independent of any one program they are also not
               optimized for processing by any one program, and this can make XML
               unpopular with application developers.
            </div>
         </div>
      </div><a name="SomeUseCasesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e289">
         <div class="title e290">Some Use Cases</div>
         <div class="para e291">This section gives examples chosen to illustrate a typical use case
            for each of the main formats discussed, together with indication of how to
            represent the example in the other formats.
         </div><a name="AnObjectDumpANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e292">
            <div class="title e293">An Object Dump</div>
            <div class="para e294">Consider a JavaScript program running in 
               <div class="emphasis e295" role="ital">node.js</div> on a Web server, communicating with a database to
               provide persistent storage of objects. Objects will have JavaScript
               types and values; the obvious choice is JSON, which was designed for
               this purpose.
            </div>
            <div class="para e296">One could use RDF instead; direct mappings from UML to RDF exist.
               But then a library would be needed, and the various transfer syntaxes of
               RDF are not as convenient for JavaScript programmers. In languages where
               JSON also needs a library, or where JSON does not map well to objects,
               RDF may be a stronger contender.
            </div>
            <div class="para e297">XML is also commonly used for object dumps. A library is needed,
               both for serialization and for loading, but such libraries exist for
               most languages. Since object dumps tend to be specific to a particular
               state of a particular program at a particular time, they are not easily
               reused by other programs; JSON may be more suited in that case. The
               strongest use cases for XML are when documents will be used in multiple
               ways.
            </div>
            <div class="para e298">The lack of standard transformation tools for JSON (compared to XML
               for example) is likely to be short-lived; there are several contenders
               as well as native-JSON NoSQL databases in widespread use.
            </div>
         </div><a name="ATechnicalDictionaryANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e299">
            <div class="title e300">A Technical Dictionary</div>
            <div class="para e301">In this example an organization edits a complex dictionary and
               produces editions in print, in PDF, in HTML on a subscriber-only Web
               site and in EPUB for ebook readers. Subsidiary products are also
               produced and might include a dictionary defining only terms needed for
               specific high-school (K12) or undergraduate courses, or subsets
               containing, say, only entries that mention a specific compound.
            </div>
            <div class="para e302">Dictionaries are examples of documents that often feature mixed
               content very heavily: superscript and subscripts, mathematics, terms
               that are to link to definitions, multiple languages, symbols and small
               diagrams may all occur in running text. Even a simple English dictionary
               may contain relatively mixed content, as in the example in Figure
               6
            </div>
            <div class="figure e303" xml:id="fig6" xreflabel="Figure 6">
               <div class="mediaobject e304">
                  <div class="imageobject e305">
                     <div class="metaBox e306"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e557').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e557" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e306'
                              </span><span class="metaAttribute">fileref='../../../vol13/graphics/Quin01/Quin01-006.png'
                              </span><span class="metaAttribute">width='60%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="caption e307">
                  <div class="para e308">Figure 6: A definition from a 1730s dictionary showing mixed
                     English and Greek used in an etymology.
                  </div>
               </div>
            </div>
            <div class="para e309">Since EPUB 3 used for electronic books is essentially a "Web site on
               a stick" there is considerable pressure to use HTML. However, custom
               markup can support business-level validation (for example, every major
               definition must have at least three examples, and can help with research
               and querying.
            </div>
            <div class="para e310">A compromise is to use  (X)HTML augmented using ARIA attributes to
               provide so-called so-called structural semantics, with microdata, or
               even with custom XML elements; since HTML 5 Web Components provide a
               standard way to add elements this approach is likely to become popular.
               However, enforcing appropriate markup on authors may be necessary to
               preserve the value of the work, and that may suggest a custom XML-based
               markup with transformations to HTML as needed. Multilingual mixed
               content is today the home turf of the XML team.
            </div>
            <div class="para e311">RDF metadata can be embedded in dictionary entries, or, more likely,
               generated on the fly, perhaps with XQuery or XSLT, from the higher-level
               XML notations that are more convenient for authors to work with.
               Representing mixed content in RDF would typically involve explicit and
               tedious representation of sequences of anonymous nodes.
            </div>
            <div class="para e312">Markdown quickly runs out of power to express complex texts, whether
               multilingual like the English dictionary or containing chemical formulae
               and mathematics as in the technical dictionary. Variants that are
               sufficiently powerful start to stretch what is feasible with ad-hoc
               text-based syntax and the extra difficulty of using HTML or XML for the
               simpler parts probably pays off with consistent markup for the harder
               parts.
            </div>
         </div><a name="ExtendedJournalBibliographyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e313">
            <div class="title e314">Extended Journal Bibliography</div>
            <div class="para e315">In this example entries for different authors are to be connected;
               any text formatting is minimal and formulaic. RDF is a strong candidate
               here. JSON could also be used.
            </div>
            <div class="para e316">A common need with bibliographical data is powerful full text
               searching, including similarity, starts-with, lexical containment,
               proximity within a field or element, and more. The XPath and XQuery Full
               Text extension was created with this in mind, suggesting that in some
               environments an XML-compatible representation may be worth
               investigating. Note that XQuery and XSLT 2 and later are defined to
               operate on trees which, although commonly created from XML, could come
               from any source that meets the necessary constraints.
            </div>
            <div class="para e317">Although Markdown again is not a likely choice, it should be noted
               that the text-based format pioneered by Mike Lesk for the 
               <div class="emphasis e318" role="ital">refer</div> program in the 1970s, and later taken up
               by BibTeX, is widely used and widely supported in technical and academic
               communities.
            </div>
         </div><a name="WebbasedAuthoringInterfaceANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e319">
            <div class="title e320">Web-based Authoring Interface</div>
            <div class="para e321">This example considers a Wiki-like situation, with a large and
               diverse group of authors for most of whom interaction with the Web site
               is not a major part of their lives, so that they will have little
               interest in learning about “syntax.” 
            </div>
            <div class="para e322">This is a typical use case for
               Markdown today. The Markdown markup is embedded in an HTML
               form, and the user interacts with the Web browser's built-in text
               editor.
            </div>
            <div class="para e323">More recently, the content-editable property of HTML elements
               can be used to support word-processing style editing of parts
               of documents in place, which may reduce the desire to use Markdown.
            </div>
         </div>
      </div><a name="HybridApproachesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e324">
         <div class="title e325">Hybrid Approaches</div>
         <div class="para e326">Just as it would be wrong to suggest that the various formats all
            compete in the same space, so it would be wrong to insist that they stand
            alone. Some obvious combinations are given in this section, but it is
            necessarily not an exhaustive list.
         </div><a name="RDFandJSONANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e327">
            <div class="title e328">RDF and JSON</div>
            <div class="para e329">People are already exchanging linked data using JSON instead of XML
               or N3 to transmit RDF graphs. This is to be expected since RDF is
               primarily a format for machine-to-machine communication and programmers
               like the strong match between JSON and internal data structures.
            </div>
            <div class="para e330">There are a number of competing formats, including JSON-LD,
               RDF/JSON, JSN3, JROn and more, although JSON-LD may at the time of
               writing be winning out.
            </div>
         </div><a name="RDFandXMLANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e331">
            <div class="title e332">RDF and XML</div>
            <div class="para e333">There are three main approaches to adding RDF to XML: storing RDF
               triples explicitly within XML documents alongside other XML information;
               storing RDF separately from XML, perhaps in a triple store; generating
               RDF from XML documents. Each has its place as circumstances dictate,and
               combinations of these methods are also in use.
            </div>
            <div class="para e334">Converting from RDF to XML (other than serializing RDF as RDF/XML or
               some other XML representation of RDF graphs)  is not useful in general,
               but the results of querying an RDF graph with SPARQL 
               <div class="emphasis e335" role="ital">are</div> often processed with XML tools such as XSLT
               or XQuery for presentation in human-readable form.
            </div>
            <div class="para e336">Visualizations of RDF graphs as SVG and also using the XML-based
               GraphML should also be mentioned here.
            </div>
         </div><a name="HTMLandXMLANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e337">
            <div class="title e338">HTML and XML</div>
            <div class="para e339">Mixing two document formats, rather than a data format and a
               document format, rarely seems to be productive. The combination of HTML
               and XML is HTML represented in XML (XHTML). Another combination is found
               commonly in RSS feeds and Atom, and is escaped HTML inside XML. This is
               done because HTML (not XHTML) has different syntax rules that conflict
               with XML, so that one cannot simply embed HTML inside XML.
            </div>
         </div>
      </div><a name="ConclusionsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e340">
         <div class="title e341">Conclusions</div>
         <div class="para e342">It is not possible to give universal recommendations for when to use a
            particular format because many unforeseeable considerations may apply. For
            example, local knowledge of particular programming languages or ways of
            working may dictate consideration of a subset of the formats, or may even
            mandate the use of a particular format regardless of suitability to
            task.
         </div>
         <div class="para e343">The formats discussed here do not compete with one another. They
            complement one another, and are often used in conjunction with each
            other.
         </div>
      </div>
   </div>
</div>