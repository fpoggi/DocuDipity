<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#XMLPipelineProcessingintheBrowserANCHOR" name="XMLPipelineProcessingintheBrowserTOC">XML Pipeline Processing in the Browser</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#Calumet:SharingtheXMLPeacePipewithJavaScriptANCHOR" name="Calumet:SharingtheXMLPeacePipewithJavaScriptTOC">Calumet: Sharing the XML Peace Pipe with JavaScript</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#XProcComplianceANCHOR" name="XProcComplianceTOC">XProc Compliance</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#PreliminaryPerformanceResultsANCHOR" name="PreliminaryPerformanceResultsTOC">Preliminary Performance Results</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ApplicationsofClientsideXProcANCHOR" name="ApplicationsofClientsideXProcTOC">Applications of Client-side XProc</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AJAXandDynamicWebApplicationsANCHOR" name="AJAXandDynamicWebApplicationsTOC">AJAX and Dynamic Web Applications</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ClientsideXMLPresentationANCHOR" name="ClientsideXMLPresentationTOC">Client-side XML Presentation</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#InteractiveProcessingANCHOR" name="InteractiveProcessingTOC">Interactive Processing</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConclusionandFutureWorkANCHOR" name="ConclusionandFutureWorkTOC">Conclusion and Future Work</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BibliographyANCHOR" name="BibliographyTOC">Bibliography</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">August 3 - 6, 2010</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2010</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">circuit breaker check</div>
         <div class="singletermTERMS">Consultant Software Engineer</div>
         <div class="singletermTERMS">client-side</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">dita:topic-to-xhtml</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
         <div class="singletermTERMS">GWT</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">heavier</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">interface</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
         <div class="singletermTERMS">JavaScript</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">native</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">productlist</div>
         <div class="singletermTERMS">product</div>
         <div class="singletermTERMS">p:store</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">search-results</div>
         <div class="singletermTERMS">script</div>
         <div class="singletermTERMS">server</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">toman_vojtech@emc.com</div>
         <div class="singletermTERMS">Toman</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
         <div class="singletermTERMS">Vojtěch</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">XML</div>
         <div class="singletermTERMS">XProc</div>
         <div class="singletermTERMS">XRX</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="XMLPipelineProcessingintheBrowserANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.2" xml:id="HR-23632987-8973">
      <div class="title e1">XML Pipeline Processing in the Browser</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2010</div>
            <div class="confdates e5">August 3 - 6, 2010</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">With the growing interest in end-to-end XML web application development models, many
               web applications are becoming predominantly XML-based, requiring XML processing capabilities
               not only on the-server-side, but often also on the client-side. This paper discusses
               the potential benefits of using XProc for XML pipeline processing in the web browser
               and describes the developments of a JavaScript-based XProc implementation.
            </div>
         </div>
         <div class="author e8">
            <div class="personname e9">
               <div class="firstname e10">Vojtěch</div>
               <div class="surname e11">Toman</div>
            </div>
            <div class="personblurb e12">
               <div class="para e13">Vojtěch Toman is a Consultant Software Engineer in the Information Intelligence Group
                  of EMC Corporation where he is involved in the development of XML content management
                  and delivery solutions. Previously, he worked for X-Hive Corporation B.V., a vendor
                  of native XML data management technologies, which was acquired by EMC in 2007.
               </div>
               <div class="para e14">Vojtěch is an active member of the W3C XML Processing Model Working Group and is the
                  main developer of EMC's XProc implementation. He studied Computer Science at the Charles
                  University in Prague, the Czech Republic, specializing in XML data compression and
                  optimized processing.
               </div>
            </div>
            <div class="affiliation e15">
               <div class="jobtitle e16">Consultant Software Engineer</div>
               <div class="orgname e17">EMC Corporation</div>
            </div>
            <div class="email e18">toman_vojtech@emc.com</div>
         </div>
         <div class="legalnotice e19">
            <div class="para e20">Copyright © 2010 EMC Corporation.  All rights reserved.</div>
         </div>
         <div class="keywordset e21" role="author">
            <div class="keyword e22">XML</div>
            <div class="keyword e23">XProc</div>
            <div class="keyword e24">JavaScript</div>
            <div class="keyword e25">GWT</div>
            <div class="keyword e26">client-side</div>
            <div class="keyword e27">XRX</div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e28">
         <div class="title e29">Introduction</div>
         <div class="para e30">Looking back at the past couple of years, it is clear that web browsers have come
            a long way and have evolved tremendously. With increasing support for open standards
            and rapid performance improvements, modern web browsers are no longer just tools for
            viewing web content - they have become complete platforms for developing complex applications.
         </div>
         <div class="para e31">Traditionally, the programming model in the web browser environment has been based
            primarily around HTML and JavaScript – and surprisingly, not much has changed in this
            regard: we still use (more or less) the same markup language for describing the structure
            and content of web pages, and implement the dynamic logic in the same scripting language.
            What has changed, however, is how we combine these two technologies: from the first
            static web pages with only a minimum of scripting to the highly dynamic and interactive
            applications of today, often built on top of entire JavaScript frameworks and libraries.
         </div>
         <div class="para e32">With the major browsers gradually working out the performance and compatibility issues,
            JavaScript has become powerful (and usable) enough not only for web pages scripting,
            but also as an enabling tool for other web technologies for which there is no (or
            very little) native browser support. So we now have, for instance, a number of JavaScript
            XForms implementations
            <div class="popupBox e33">
               <div class="popupLabel" onmouseover="$('#d1e56').show('1000');" onmouseout="$('#d1e56').hide('1000');">[ footnote ]</div>
               <div id="d1e56" style="display: none;">
                  <div class="footnote">
                     <div class="para e34">
                        <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e35" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/MarkUp/Forms/wiki/XForms_Implementations</div>
                     </div>
                  </div>
               </div>
            </div>, libraries for cross-browser rendering of SVG
            <div class="popupBox e36">
               <div class="popupLabel" onmouseover="$('#d1e61').show('1000');" onmouseout="$('#d1e61').hide('1000');">[ footnote ]</div>
               <div id="d1e61" style="display: none;">
                  <div class="footnote">
                     <div class="para e37">See, for example, 
                        <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e38" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.amplesdk.com/</div>
                     </div>
                  </div>
               </div>
            </div>, or even a JavaScript implementation of Flash
            <div class="popupBox e39">
               <div class="popupLabel" onmouseover="$('#d1e67').show('1000');" onmouseout="$('#d1e67').hide('1000');">[ footnote ]</div>
               <div id="d1e67" style="display: none;">
                  <div class="footnote">
                     <div class="para e40">
                        <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e41" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://wiki.github.com/tobeytailor/gordon/</div>
                     </div>
                  </div>
               </div>
            </div>; and many more.
         </div>
         <div class="para e42">JavaScript has also brought XML to the web applications world, in particular thanks
            to the AJAX programming model that introduced an XML-based communication mechanism
            between the client-side JavaScript and the server-side. Obviously, the ability to
            deal with XML data relies on the availability of XML processing APIs: DOM-based access
            has always been the standard in JavaScript, and most modern browsers also support
            other technologies such as XSLT or XPath.
         </div>
         <div class="para e43">With the recent interest in the XRX (XForms/REST/XQuery 
            <div class="xref e44" linkend="xrx"></div>) architecture and native, end-to-end XML environments in general, web applications
            (both on the server-side and client-side) are becoming more centered around the XML
            data model; modern XForms-driven user interfaces are an example. However, JavaScript
            is still often used to implement the client-side XML processing logic (parsing of
            XML documents, extracting relevant information etc.) and to bind the various XML-based
            components together (populating an XForms instance etc.). While this approach works,
            it often requires hard-coding the processing logic in JavaScript and writing plumbing
            code (often browser-specific). This can make the applications difficult to develop
            and maintain, and to be interoperable with different web browsers.
         </div>
         <div class="para e45">But integrating and orchestrating XML processes is exactly what XProc: An XML Pipeline
            Language 
            <div class="xref e46" linkend="xproc10"></div> is trying to address. The declarative, pipeline-oriented approach to XML processing
            in XProc provides a flexible integration layer on top of other XML technologies (such
            as XQuery, XSLT or, for instance, schema validation) that makes developing complex
            XML processing flows easier and more transparent.
         </div>
         <div class="para e47">Although XProc is probably viewed as a primarily server-side technology, we believe
            that it can have useful applications on the client-side, too. Based on our recent
            experimentation with porting Calumet, EMC's XProc implementation to JavaScript, this
            paper discusses some examples of using XProc in the web browser environment. 
         </div>
      </div><a name="Calumet:SharingtheXMLPeacePipewithJavaScriptANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e48">
         <div class="title e49">Calumet: Sharing the XML Peace Pipe with JavaScript</div>
         <div class="para e50">To our knowledge, all currently available XProc implementations are essentially server-side
            applications. This is definitely the case with XML Calabash 
            <div class="xref e51" linkend="xmlcalabash"></div> and EMC's Calumet 
            <div class="xref e52" linkend="emccalumet"></div>, which are both Java-based. Other projects that we are aware of also make use of
            server-side technologies.
         </div>
         <div class="para e53">At EMC, when we started thinking about bringing Calumet to the browser, we were basically
            facing two options: either re-implement the processor in JavaScript from scratch,
            or port the existing code base to JavaScript somehow. (As our objective was a truly
            cross-browser solution with no additional requirements on the client-side, we didn't
            want to go the route of writing an XProc browser plug-in.) Eventually, we decided
            for the latter option: porting existing Java sources to JavaScript.
         </div>
         <div class="para e54">This decision was motivated mainly by our previous experience with the Google Web
            Toolkit, or GWT 
            <div class="xref e55" linkend="gwt"></div>, a framework for building dynamic web applications - in Java, without having to write
            any JavaScript
            <div class="popupBox e56">
               <div class="popupLabel" onmouseover="$('#d1e99').show('1000');" onmouseout="$('#d1e99').hide('1000');">[ footnote ]</div>
               <div id="d1e99" style="display: none;">
                  <div class="footnote">
                     <div class="para e57">Of course, it is possible to combine JavaScript with GWT quite easily; GWT-based applications
                        can invoke external JavaScript functionality and vice versa.
                     </div>
                  </div>
               </div>
            </div>. The central component of GWT is the GWT compiler that takes the application Java
            sources and converts them into highly optimized JavaScript that runs in a variety
            of browsers, without any need for extension plug-ins or presence of Java runtime on
            the client machine. GWT supports only a subset of the JRE functionality as not everything
            that Java provides can be mapped to JavaScript; however, the set of supported features
            is still comprehensive enough to bring most of the power and benefits of Java to the
            web application development context.
         </div>
         <div class="para e58">Porting Calumet to GWT turned out to be mostly a mechanical process: refactoring out
            dependencies on features not supported by GWT from the original Java code, and implementing
            adapters for accessing the browser DOM functionality. Especially the latter turned
            out to be critical for the overall function of the XProc engine and its interoperability
            with different browsers.
         </div>
         <div class="para e59">The result is an XProc processor with a standard 
            <div class="quote e60">server</div> Java version and a JavaScript version that can run in a web browser. 
            <div class="xref e61" linkend="fig.demo"></div> shows a screenshot of a simple demo application built on top of the GWT version of
            Calumet. The demo was presented at the XML Prague '10 DemoJam event.
         </div>
         <div class="figure e62" xml:id="fig.demo">
            <div class="title e63">GWT Calumet Demo Application</div>
            <div class="mediaobject e64">
               <div class="imageobject e65">
                  <div class="metaBox e66"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e117').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e117" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e66'
                           </span><span class="metaAttribute">fileref='../../../vol5/graphics/Toman01/Toman01-001.png'
                           </span><span class="metaAttribute">format='png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
         </div><a name="XProcComplianceANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e67">
            <div class="title e68">XProc Compliance</div>
            <div class="para e69">A large part of the code base is shared between the Java and GWT versions. This not
               only reduces code duplication, but also ensures that both versions of Calumet are
               aligned in terms of functionality and the level of XProc support. As of July 2010,
               the GWT version supports 34 out of the total 41 steps from the standard XProc step
               library 
               <div class="xref e70" linkend="xproc10"></div> (the Java version supports all steps); 
               <div class="xref e71" linkend="tbl.xproc-missing-func"></div> provides an overview of the missing functionality.
            </div>
            <div class="table e72" xml:id="tbl.xproc-missing-func">
               <div class="caption e73">
                  <div class="para e74">XProc Standard Step Library - Missing Functionality</div>
               </div>
               <div class="metaBox e75"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e131').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e131" class="metaSource" style="display:none;">                
                     &lt;col<span class="metaAttribute">align='left'
                        </span><span class="metaAttribute">class='e75'
                        </span><span class="metaAttribute">span='1'
                        </span>
                     &gt;
                     
                  </div>
               </div>
               <div class="metaBox e76"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e132').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e132" class="metaSource" style="display:none;">                
                     &lt;col<span class="metaAttribute">align='left'
                        </span><span class="metaAttribute">class='e76'
                        </span><span class="metaAttribute">span='1'
                        </span>
                     &gt;
                     
                  </div>
               </div>
               <div class="metaBox e77"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e133').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e133" class="metaSource" style="display:none;">                
                     &lt;col<span class="metaAttribute">align='left'
                        </span><span class="metaAttribute">class='e77'
                        </span><span class="metaAttribute">span='1'
                        </span>
                     &gt;
                     
                  </div>
               </div>
               <div class="thead e78">
                  <div class="tr e79">
                     <div class="th e80" align="left">Step</div>
                     <div class="th e81" align="left">Supported</div>
                     <div class="th e82" align="left">Remarks</div>
                  </div>
               </div>
               <div class="tbody e83">
                  <div class="tr e84">
                     <div class="td e85">p:directory-list</div>
                     <div class="td e86">No</div>
                     <div class="td e87"></div>
                  </div>
                  <div class="tr e88">
                     <div class="td e89">p:http-request</div>
                     <div class="td e90">Yes</div>
                     <div class="td e91">Only simple GET requests</div>
                  </div>
                  <div class="tr e92">
                     <div class="td e93">p:load</div>
                     <div class="td e94">Yes</div>
                     <div class="td e95">DTD validation not supported</div>
                  </div>
                  <div class="tr e96">
                     <div class="td e97">p:unescape-markup</div>
                     <div class="td e98">No</div>
                     <div class="td e99"></div>
                  </div>
                  <div class="tr e100">
                     <div class="td e101">p:xinclude</div>
                     <div class="td e102">Yes</div>
                     <div class="td e103">XPointer not supported</div>
                  </div>
                  <div class="tr e104">
                     <div class="td e105">p:xslt</div>
                     <div class="td e106">Yes</div>
                     <div class="td e107">Only XSLT 1.0 supported (browser-native)</div>
                  </div>
                  <div class="tr e108">
                     <div class="td e109">p:exec</div>
                     <div class="td e110">No</div>
                     <div class="td e111"></div>
                  </div>
                  <div class="tr e112">
                     <div class="td e113">p:hash</div>
                     <div class="td e114">Yes</div>
                     <div class="td e115">CRC32 not supported</div>
                  </div>
                  <div class="tr e116">
                     <div class="td e117">p:validate-with-relax-ng</div>
                     <div class="td e118">No</div>
                     <div class="td e119"></div>
                  </div>
                  <div class="tr e120">
                     <div class="td e121">p:validate-with-xml-schema</div>
                     <div class="td e122">No</div>
                     <div class="td e123"></div>
                  </div>
                  <div class="tr e124">
                     <div class="td e125">p:xquery</div>
                     <div class="td e126">No</div>
                     <div class="td e127"></div>
                  </div>
                  <div class="tr e128">
                     <div class="td e129">p:xsl-formatter</div>
                     <div class="td e130">No</div>
                     <div class="td e131"></div>
                  </div>
               </div>
            </div>
            <div class="para e132">The GWT version has most of the features of the original Java version: from high compliance
               with the XProc specification to extensibility and customizability. For instance, it
               is possible to register extension steps or custom URI handlers with both the Java
               and GWT versions.
            </div>
            <div class="para e133">
               <div class="xref e134" linkend="tbl.xproc-ts"></div> below summarizes the current results of running the GWT version of Calumet against
               the XProc Test Suite 
               <div class="xref e135" linkend="xprocts"></div>. The XProc Test Suite comprises four main categories of tests:
            </div>
            <div class="itemizedlist e136">
               <div class="listitem e137">
                  <div class="para e138">Required tests (that all conformant XProc processors must pass)</div>
               </div>
               <div class="listitem e139">
                  <div class="para e140">Optional tests (that conformant XProc processors are not required to pass)</div>
               </div>
               <div class="listitem e141">
                  <div class="para e142">Serialization tests (that test the XML Serialization 
                     <div class="xref e143" linkend="xmlserialization"></div> features)
                  </div>
               </div>
               <div class="listitem e144">
                  <div class="para e145">Extension tests (that test the support for XProc extensibility)</div>
               </div>
            </div>
            <div class="table e146" xml:id="tbl.xproc-ts">
               <div class="caption e147">
                  <div class="para e148">GWT Calumet XProc Test Suite Results</div>
               </div>
               <div class="metaBox e149"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e247').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e247" class="metaSource" style="display:none;">                
                     &lt;col<span class="metaAttribute">align='left'
                        </span><span class="metaAttribute">class='e149'
                        </span><span class="metaAttribute">span='1'
                        </span>
                     &gt;
                     
                  </div>
               </div>
               <div class="metaBox e150"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e248').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e248" class="metaSource" style="display:none;">                
                     &lt;col<span class="metaAttribute">align='left'
                        </span><span class="metaAttribute">class='e150'
                        </span><span class="metaAttribute">span='1'
                        </span>
                     &gt;
                     
                  </div>
               </div>
               <div class="thead e151">
                  <div class="tr e152">
                     <div class="th e153" align="left">Category</div>
                     <div class="th e154" align="left">Percent passed</div>
                  </div>
               </div>
               <div class="tbody e155">
                  <div class="tr e156">
                     <div class="td e157">Required</div>
                     <div class="td e158">81.85%</div>
                  </div>
                  <div class="tr e159">
                     <div class="td e160">Optional</div>
                     <div class="td e161">45.45%</div>
                  </div>
                  <div class="tr e162">
                     <div class="td e163">Serialization</div>
                     <div class="td e164">68.00%</div>
                  </div>
                  <div class="tr e165">
                     <div class="td e166">Extension</div>
                     <div class="td e167">100.00%</div>
                  </div>
               </div>
            </div>
            <div class="para e168">As can be seen from 
               <div class="xref e169" linkend="tbl.xproc-ts"></div>, GWT Calumet scores relatively well with the required tests (passing over 80% of
               the tests), as well as with the serialization and extension tests. The biggest gap
               is in the optional tests that depend on functionality that is difficult to implement
               in JavaScript (for instance, XQuery or schema validation) and some of which will probably
               not be supported in the GWT version of Calumet any time soon. However, this limitation
               can be overcome easily in the web browser environment by using the standard XProc
               HTTP Request step and invoking a server-side service that provides the missing functionality.
               Alternatively, the missing steps themselves can be implemented as callbacks to the
               server-side if necessary.
            </div>
         </div><a name="PreliminaryPerformanceResultsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e170">
            <div class="title e171">Preliminary Performance Results</div>
            <div class="para e172">The GWT version of Calumet has been tested successfully with most of the major browsers.
               Work is currently underway on implementing the gaps in the standard XProc step library
               support and also on improving the performance and reducing the size of generated JavaScript.
               The current size of the JavaScript code (without compression) is about 550 KiB, but
               we are confident that this can be brought down - the original Java code was not written
               with GWT in mind and many of the programming constructs used in the code are perhaps
               too generic for efficient translation to JavaScript.
            </div>
            <div class="para e173">Regarding the performance of the GWT version of the processor, there are noticeable
               (and expected) differences between different browsers, especially with more complex
               pipelines that involve evaluating many XPath expressions or creating large numbers
               of intermediate XML documents. But surprisingly, the most expensive part of running
               an XProc pipeline turned out to be the initial phase: parsing the pipeline source,
               resolving imports, performing the static analysis, and establishing the evaluation
               order of the steps in the pipeline. While executing the pipeline itself generally
               requires only milliseconds or tens of milliseconds (in Gecko- or WebKit-based browsers
               on a 2.33 GHz dual-core workstation with 4 GB of RAM), preparing and statically checking
               the pipeline often takes considerably more time (from 50 to 300 milliseconds depending
               on the web browser and the complexity of the pipeline); a clear area for further performance
               optimizations.
            </div>
            <div class="para e174">Having the possibility to run - and test - the same code base in two completely different
               environments (Java and in-browser JavaScript) actually resulted in an interesting
               synergistic effect between the two versions of the processor: code that performs reasonably
               well in Java may prove to be a performance bottleneck in JavaScript (or the other
               way around); but fixing the issue usually has a positive effect in both environments.
            </div>
         </div>
      </div><a name="ApplicationsofClientsideXProcANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e175">
         <div class="title e176">Applications of Client-side XProc</div>
         <div class="para e177">From the start, our work on the JavaScript port of Calumet was driven by a number
            of use cases that we were trying to address to validate that the whole concept is
            viable. This section describes some of these use cases.
         </div><a name="AJAXandDynamicWebApplicationsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e178">
            <div class="title e179">AJAX and Dynamic Web Applications</div>
            <div class="para e180">Modern dynamic web applications often rely on heavy use of JavaScript and AJAX for
               interacting with the server-side. In the XML-based model, the result of an AJAX request
               is an XML document that needs to be processed in some way; most often by traversing
               the XML structure using the DOM API. For example, in a web shop application, an AJAX
               callback might be used to call a 
               <div class="code e181">productlist</div> service and to display the results in a dynamically constructed HTML table. This
               would typically involve iterating over the result elements in the returned XML document
               and creating a table row for each result.
            </div>
            <div class="para e182">While this approach works, hard-coding the AJAX XML response processing in JavaScript
               may not always be the best option. First, it requires knowledge of the AJAX and DOM
               APIs as well as awareness of various browser quirks, and second, the processing model
               becomes set in stone, often hard to change or even understand. This may be critical
               for larger-scale enterprise applications, or in any application in general that requires
               a flexible (and maintanable) processing model the developers can build on.
            </div>
            <div class="para e183">The example below attempts to translate the usual 
               <div class="quote e184">AJAX request - process response - update host page</div> pattern to XProc. The XProc pipeline starts with an HTTP request to the 
               <div class="quote e185">
                  <div class="code e186">productlist</div>
               </div> service. The XML document returned by the service is then processed by creating an
               HTML table row for each 
               <div class="code e187">product</div> element in the document. After that, all table rows are inserted into a table wrapper
               which is then injected into the host page. In the example, a custom extension is used
               that makes it possible to address elements of the host page using their ID. In our
               case, the 
               <div class="code e188">p:store</div> step effectively replaces the element with the ID 
               <div class="quote e189">
                  <div class="code e190">search-results</div>
               </div> by the generated HTML table.
            </div>
            <div class="programlisting e191" xml:space="preserve">&lt;p:declare-step xmlns:p="http://www.w3.org/ns/xproc"
               xmlns:c="http://www.w3.org/ns/xproc-step"
               xmlns:xhtml="http://www.w3.org/1999/xhtml"
               version="1.0"&gt;
               
               &lt;p:http-request&gt;
               &lt;p:input port="source"&gt;
               &lt;p:inline&gt;
               &lt;c:request method="GET" href="/productlist"/&gt;
               &lt;/p:inline&gt;
               &lt;/p:input&gt;
               &lt;/p:http-request&gt;
               
               &lt;p:for-each name="for"&gt;
               &lt;p:iteration-source select="//product"/&gt;
               &lt;p:output port="result" sequence="true"/&gt;
               
               &lt;p:variable name="product-name" select="/product/@name"/&gt;
               
               &lt;p:string-replace match="xhtml:td/text()"
               replace="concat('&amp;quot;', $product-name, '&amp;quot;')"&gt;
               &lt;p:input port="source"&gt;
               &lt;p:inline&gt;
               &lt;xhtml:tr&gt;
               &lt;xhtml:td&gt;tmp&lt;/xhtml:td&gt;
               &lt;/xhtml:tr&gt;
               &lt;/p:inline&gt;
               &lt;/p:input&gt;
               &lt;/p:string-replace&gt;
               &lt;/p:for-each&gt;
               
               &lt;p:insert match="xhtml:tbody" position="first-child"&gt;
               &lt;p:input port="source"&gt;
               &lt;p:inline&gt;
               &lt;xhtml:table id="search-results"&gt;
               &lt;xhtml:tbody/&gt;
               &lt;/xhtml:table&gt;
               &lt;/p:inline&gt;
               &lt;/p:input&gt;
               &lt;p:input port="insertion"&gt;
               &lt;p:pipe step="for" port="result"/&gt;
               &lt;/p:input&gt;
               &lt;/p:insert&gt;
               
               &lt;p:store href="domid:search-results"/&gt;
               
               &lt;/p:declare-step&gt;
            </div>
            <div class="para e192">XML is not the only format that can be used in AJAX environments. JSON, or JavaScript
               Object Notation 
               <div class="xref e193" linkend="json"></div>, is an increasingly popular, text-based format for data interchange that is both
               light-weight and very easy to work with in JavaScript (on the syntactic level, JSON
               is just a subset of JavaScript). In the web applications world, JSON and XML can be
               seen as competing formats where JSON is often presented as the simpler and more efficient
               alternative to XML. Leaving aside the (often emotional) arguments between the JSON
               and XML proponents as to which format is better, it is obvious that both JSON and
               XML have much in common: they are both open formats, readable by machines and humans;
               they are self-describing; and they are well supported by a wide variety of tools.
               The strength of JSON lies mainly in representing simple data structures, where XML
               is often seen as too heavy-weight; XML, on the other hand, is generally better suited
               for semistructured data.
            </div>
            <div class="para e194">For the use case discussed in this section, one could argue that using AJAX and JSON
               would be a much better fit than XProc. Indeed: the 40 lines of XProc code (plus the
               necessary GWT or JavaScript code for actually executing the pipeline) could probably
               be replaced with only a handful of lines of simple JavaScript. The overhead of an
               XProc solution is also likely to be much higher compared to plain JavaScript: the
               XProc pipeline needs to be parsed and analyzed first, and the data is then processed
               using relatively expensive (at least in the browser) XML manipulations.
            </div>
            <div class="para e195">So is there a benefit in adopting the inherently 
               <div class="quote e196">heavier</div> XProc approach where a simpler and more efficient alternative exists? We argue there
               is, although it depends strongly on the particular use case. XProc is not a hammer
               for everything: it is first and foremost an XML processing language, and it should
               be used as such. Client-side XProc therefore makes most sense in user interfaces that
               are XML-driven, consume or produce XML data, or require non-trivial XML processing.
               In other situations, other approaches may be more appropriate.
            </div>
            <div class="para e197">The XProc pipeline above is admittedly very minimal, and from the dynamic web applications
               perspective it does not show anything new that could not be done with existing approaches.
               The interesting part lies in what XProc can offer beyond this point. While the example
               pipeline may seem as unnecessary overhead for the simple problem (populating an HTML
               table based on data returned from the server), the perspective begins to shift when
               further processing of the server-side results is needed. The XProc pipeline can query
               or transform the data easily, enrich it, or combine it with data obtained from other
               services; all using a unified, declarative, and flexible XML processing model.
            </div>
         </div><a name="ClientsideXMLPresentationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e198">
            <div class="title e199">Client-side XML Presentation</div>
            <div class="para e200">A common task in XML-based web applications is presenting the XML data (either static
               or dynamically generated) to the user. Typically, this is done by transforming the
               XML data on the server-side to HTML or some other format understood by the browser.
               Most of these transformations can be expressed in the form of XProc pipelines, and
               with a reasonably compliant client-side XProc implementation, it should be possible
               to move the processing to the client-side completely. Delegating the rendering to
               the client-side can not only reduce the load on the server, but in many cases, it
               can also simplify the server-side functionality in general and make it less coupled
               with the front-end technology.
            </div>
            <div class="para e201">The pipeline below takes an XML document, resolves possible XInclude references, and
               applies an XSLT stylesheet to the resolved document; all with standard XProc and completely
               in the browser.
            </div>
            <div class="programlisting e202" xml:space="preserve">&lt;p:pipeline xmlns:p="http://www.w3.org/ns/xproc"
               version="1.0"&gt;
               
               &lt;p:xinclude/&gt;
               
               &lt;p:xslt&gt;
               &lt;p:input port="stylesheet"&gt;
               &lt;p:document href="style.xsl"/&gt;
               &lt;/p:input&gt;
               &lt;/p:xslt&gt;
               
               &lt;/p:pipeline&gt;
            </div>
            <div class="para e203">The previous pipeline is obviously a very simple one, but the potential of using XProc
               as a client-side XML rendering tool is obvious: one can imagine using XProc for bringing
               popular XML vocabularies like, for instance, DocBook 
               <div class="xref e204" linkend="docbook"></div> or DITA 
               <div class="xref e205" linkend="dita"></div> to the browser.
            </div>
            <div class="para e206">The example below shows a pipeline that takes a DITA topic and returns its HTML rendition.
               While the pipeline itself is trivial, the 
               <div class="code e207">dita:topic-to-xhtml</div> step will most likely perform rather complex XML processing: from resolving the various
               DITA link types to content filtering to applying an XSLT stylesheet. Or... maybe not:
               the black-box nature of XProc steps provides great freedom by allowing different implementations
               of the same step 
               <div class="quote e208">interface</div> - which is not only convenient when writing (and testing) the pipelines, but it also
               makes it possible to adapt the pipelines to the needs of a particular user audience
               or to different browser environments. Thus, the pipeline below can, for instance,
               do full-blown client-side DITA processing in web browsers that are known to be fast
               (or compliant) enough, and delegate to the server-side in other cases.
            </div>
            <div class="programlisting e209" xml:space="preserve">&lt;p:pipeline xmlns:p="http://www.w3.org/ns/xproc"
               xmlns:dita="http://example.org/ns/dita"
               version="1.0"&gt;
               
               &lt;p:import href="dita-lib.xpl"/&gt;
               
               &lt;dita:topic-to-xhtml/&gt;
               
               &lt;/p:pipeline&gt;
            </div>
         </div><a name="InteractiveProcessingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e210">
            <div class="title e211">Interactive Processing</div>
            <div class="para e212">An interesting application of XProc pipelines in web browser is using them as a driver
               for interactive client-side procedures. In such an obvious user interface-oriented
               platform as a web browser, it is possible to imagine XProc extension steps that would
               add interaction with the end-user to the XML processing logic - for example, by displaying
               dynamically generated dialogs or messages on the screen. This would make XProc a simple
               (yet powerful) alternative to other approaches for representing interactive processes:
               from simple data collection procedures to complex and often highly dynamic maintenance
               and diagnostic procedures found, for instance, in the military and in the aerospace
               industry.
            </div>
            <div class="para e213">In the area of interactive processing, client-side XForms is a technology that combines
               exceptionally well with XProc: as an XML-based standard, it is very easy to load -
               or even dynamically generate - XForms-based dialogs in XProc pipelines. Similarly,
               the XForms submissions, which are XML documents as well, can be processed naturally
               in XProc.
            </div>
            <div class="para e214">The pipeline below shows how XForms could be used with XProc in an imaginary aircraft
               maintenance system; in this case, the example is a simple 
               <div class="quote e215">circuit breaker check</div> procedure. The pipeline has two options, an aircraft model number and its variant.
               Depending on a specific combination of the model and the variant, the maintenance
               mechanic is presented with a dialog (an XForm) that allows him to enter information
               about the state of the circuit breaker. When the mechanic submits the dialog, the
               pipeline displays a message that tells the mechanic to switch on the breaker if it
               was in the OFF position.
            </div>
            <div class="programlisting e216" xml:space="preserve">&lt;p:declare-step xmlns:p="http://www.w3.org/ns/xproc"
               xmlns:am="http://example.org/ns/aircraft-maintenance"
               xmlns:xf="http://www.w3.org/2002/xforms"
               version="1.0"&gt;
               
               &lt;p:option name="model" required="true"/&gt;
               &lt;p:option name="variant" required="true"/&gt;
               
               &lt;p:import href="aircraft-maintenance-lib.xpl"/&gt;
               
               &lt;p:choose&gt;
               &lt;p:when test="$model = '777' and ($variant='200' or $variant='200ER')"&gt;
               &lt;am:dialog href="forms/777-200-circuit-breaker-check.xfm"/&gt;
               &lt;/p:when&gt;
               &lt;p:when test="$model = '777'"&gt;
               &lt;am:dialog href="forms/777-circuit-breaker-check.xfm"/&gt;
               &lt;/p:when&gt;
               &lt;p:when test="$model = '787'"&gt;
               ...
               &lt;/p:when&gt;
               ...
               &lt;/p:choose&gt;
               
               &lt;p:choose&gt;
               &lt;p:when test="/state = 'OFF'"&gt;
               &lt;am:message&gt;
               &lt;p:input port="source"&gt;
               &lt;p:inline&gt;
               &lt;p xmlns="http://www.w3.org/1999/xhtml"&gt;                                         
               
               Switch the circuit breaker to the ON position.
               &lt;/p&gt;
               &lt;/p:inline&gt;
               &lt;/p:input&gt;
               &lt;/am:message&gt;
               &lt;/p:when&gt;
               &lt;p:otherwise&gt;
               &lt;p:sink/&gt;
               &lt;/p:otherwise&gt;
               &lt;/p:choose&gt;
               
               &lt;/p:declare-step&gt;
            </div>
         </div>
      </div><a name="ConclusionandFutureWorkANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e217">
         <div class="title e218">Conclusion and Future Work</div>
         <div class="para e219">Although XProc is still a relatively new technology, it is already finding its way
            into the XML application developers' tool set. Extending and complementing the family
            of established XML processing languages such as XSLT and XQuery, XProc provides a
            unifying and flexible integration layer that makes orchestration of XML processes
            easier.
         </div>
         <div class="para e220">In the web applications world, XML processing has traditionally been done primarily
            on the server-side. However, with the recent advances in modern web browsers and the
            growing interest in end-to-end XML application architectures, we can see that more
            and more XML processing is being done on the client-side. We believe that the problems
            that XProc is attempting to address - the impedance mismatch between different XML
            processing models, and the need to write plumbing code - apply equally to the server-side
            and the client-side (although on the client-side this may not be that visible - yet).
         </div>
         <div class="para e221">This paper discussed some of the possibilities of using XProc pipelines in the web
            browser environment, motivated by our recent work on porting EMC's Calumet XProc processor
            to JavaScript (using the Google Web Toolkit). What initially started more as a proof-of-concept
            effort has lead to some interesting outcomes. Not only did it prove that performing
            complex XML processing in JavaScript in the web browser is possible, it also showed
            that client-side XProc can have useful practical applications that are worth exploring.
         </div>
         <div class="para e222">The current GWT port of Calumet is still very much work-in-progress. While it is reasonably
            stable already and supports a relatively large portion of the XProc specification,
            the code still needs to be optimized and fine-tuned for different web browsers. Also,
            work needs to be done on providing convenient XProc processing APIs in JavaScript.
            In GWT-based applications, the 
            <div class="quote e223">native</div> Java API of Calumet can be used, but for the case of traditional HTML/JavaScript
            applications, a JavaScript interface will be necessary. An additional option that
            we are considering is to support embedding XProc pipelines in the HTML 
            <div class="code e224">script</div> element; however, that direction still needs to be researched.
         </div>
         <div class="para e225">Future versions of the Calumet XProc processor will most likely be distributed as
            a dual Java/JavaScript package; work is still ongoing on the JavaScript version, but
            the progress with the development and the results achieved so far are encouraging.
         </div>
      </div><a name="BibliographyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e226">
         <div class="title e227">Bibliography</div>
         <div class="bibliomixed e228" xml:id="dita" xreflabel="DITA">Michael Priestley, JoAnn Hackos, eds. Darwin Information Typing Architecture (DITA)
            Architectural Specification v1.1. OASIS Standard. 1 August 2007. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e229" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://docs.oasis-open.org/dita/v1.1/OS/archspec/archspec.html</div>
         </div>
         <div class="bibliomixed e230" xml:id="docbook" xreflabel="DocBook">
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e231" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.docbook.org/</div>
         </div>
         <div class="bibliomixed e232" xml:id="emccalumet" xreflabel="EMC Calumet">
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e233" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://developer.emc.com/xmltech/</div>
         </div>
         <div class="bibliomixed e234" xml:id="gwt" xreflabel="Google Web Toolkit">
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e235" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://code.google.com/webtoolkit/</div>
         </div>
         <div class="bibliomixed e236" xml:id="json" xreflabel="JSON">
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e237" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://json.org/</div>
         </div>
         <div class="bibliomixed e238" xml:id="xmlserialization" xreflabel="W3C Serialization">Scott Boag, Michael Kay, Joanne Tong, Norman Walsh, and Henry Zongaro, eds. XSLT 2.0
            and XQuery 1.0 Serialization. W3C Recommendation. 23 January 2007. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e239" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xslt-xquery-serialization/</div>
         </div>
         <div class="bibliomixed e240" xml:id="xforms11" xreflabel="W3C XForms">John M. Boyer, ed. XForms 1.1. W3C Recommendation. 20 October 2009. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e241" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xforms11/</div>
         </div>
         <div class="bibliomixed e242" xml:id="xproc10" xreflabel="W3C XProc">Norman Walsh, Alex Milowski, and Henry S. Thompson, eds. XProc: An XML Pipeline Language.
            W3C Proposed Recommendation. 9 March 2010. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e243" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xproc/</div>
         </div>
         <div class="bibliomixed e244" xml:id="xmlcalabash" xreflabel="XML Calabash">
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e245" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://xmlcalabash.com/</div>
         </div>
         <div class="bibliomixed e246" xml:id="xprocts" xreflabel="XProc Test Suite">
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e247" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://tests.xproc.org/</div>
         </div>
         <div class="bibliomixed e248" xml:id="xrx" xreflabel="XRX">
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e249" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://en.wikibooks.org/wiki/XRX/</div>
         </div>
      </div>
   </div>
</div>