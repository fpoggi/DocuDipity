<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#VersionsinUBLANCHOR" name="VersionsinUBLTOC">Versions in UBL</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TheroleofschemavaliditytoapplicationsANCHOR" name="TheroleofschemavaliditytoapplicationsTOC">The role of schema validity to applications</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ThepublishedprocessingmodelforlikeversionedUBLsystemsANCHOR" name="ThepublishedprocessingmodelforlikeversionedUBLsystemsTOC">The published processing model for like-versioned UBL systems</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#VersionsoftheUBLspecificationANCHOR" name="VersionsoftheUBLspecificationTOC">Versions of the UBL specification</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#MajorvsminorvocabularyversionsANCHOR" name="MajorvsminorvocabularyversionsTOC">Major vs. minor vocabulary versions</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TheUBLcommonlibraryandnewdocumenttypesANCHOR" name="TheUBLcommonlibraryandnewdocumenttypesTOC">The UBL common library and new document types</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AminorversioningapproachforbackwardcompatibilityANCHOR" name="AminorversioningapproachforbackwardcompatibilityTOC">A minor-versioning approach for backward compatibility</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AprocessingmodelforforwardcompatibilityANCHOR" name="AprocessingmodelforforwardcompatibilityTOC">A processing model for forward compatibility</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TheversionhighwatermarkANCHOR" name="TheversionhighwatermarkTOC">The version high water mark</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#SchemasynthesisANCHOR" name="SchemasynthesisTOC">Schema synthesis</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#CustomizationsofUBLANCHOR" name="CustomizationsofUBLTOC">Customizations of UBL</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#UBLCompatibilityANCHOR" name="UBLCompatibilityTOC">UBL Compatibility</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#UBLConformanceANCHOR" name="UBLConformanceTOC">UBL Conformance</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#Conformantsubsets(deprecatingexistinginformation)ANCHOR" name="Conformantsubsets(deprecatingexistinginformation)TOC">Conformant subsets (deprecating existing information)</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#Conformantextensions(addingnewinformation)ANCHOR" name="Conformantextensions(addingnewinformation)TOC">Conformant extensions (adding new information)</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#ConformantinstanceprocessingANCHOR" name="ConformantinstanceprocessingTOC">Conformant instance processing</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#ProfilesANCHOR" name="ProfilesTOC">Profiles</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#ConformantschemarepresentationANCHOR" name="ConformantschemarepresentationTOC">Conformant schema representation</a></div>
               </div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#%0AUsingXPathfilesforvalidatingmodelconformanceANCHOR" name="%0AUsingXPathfilesforvalidatingmodelconformanceTOC">
                     Using XPath files for validating model conformance</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#%0AXPathfilevocabularyANCHOR" name="%0AXPathfilevocabularyTOC">
                        XPath file vocabulary</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#%0AXPathreportsANCHOR" name="%0AXPathreportsTOC">
                        XPath reports</a></div>
                  <div class="headedContainerTOC">
                     <div class="headedContainerTitleTOC"><a href="#%0AXPathtextreportsANCHOR" name="%0AXPathtextreportsTOC">
                           XPath text reports</a></div>
                  </div>
                  <div class="headedContainerTOC">
                     <div class="headedContainerTitleTOC"><a href="#%0AXPathinstancereportANCHOR" name="%0AXPathinstancereportTOC">
                           XPath instance report</a></div>
                  </div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#ConfirmingUBLconformanceofacustomizationANCHOR" name="ConfirmingUBLconformanceofacustomizationTOC">Confirming UBL conformance of a customization</a></div>
               </div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#TradingpartneragreementsonvalueconstraintsANCHOR" name="TradingpartneragreementsonvalueconstraintsTOC">Trading partner agreements on value constraints</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConclusionANCHOR" name="ConclusionTOC">Conclusion</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BibliographyANCHOR" name="BibliographyTOC">Bibliography</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">AttachedDocument</div>
         <div class="singletermTERMS">August 11, 2008</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">ccts:ABIE</div>
         <div class="singletermTERMS">CustomizationID</div>
         <div class="singletermTERMS">CAD</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">DE</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">ExtensionContentType</div>
         <div class="singletermTERMS">ES</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
         <div class="singletermTERMS">FR</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
         <div class="singletermTERMS">GBP</div>
         <div class="singletermTERMS">gkholman@CraneSoftwrights.com</div>
         <div class="singletermTERMS">G. Ken</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">Holman</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">ProfileID</div>
         <div class="singletermTERMS">profile</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
         <div class="singletermTERMS">UBLVersionID</div>
         <div class="singletermTERMS">UBLExtensions</div>
         <div class="singletermTERMS">UBLExtension</div>
         <div class="singletermTERMS">USD</div>
         <div class="singletermTERMS">UBL Compatibility</div>
         <div class="singletermTERMS">UBL Conformance</div>
         <div class="singletermTERMS">UBL-compatible</div>
         <div class="singletermTERMS">UBL-conformant</div>
         <div class="singletermTERMS">UBL conformant customization</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">xsd:complexType</div>
         <div class="singletermTERMS">xsd:sequence</div>
         <div class="singletermTERMS">xsd:choice</div>
         <div class="singletermTERMS">xsd:any</div>
         <div class="singletermTERMS">xsd:processContents="skip"</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="VersionsinUBLANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.2">
      <div class="title e1">Versions in UBL</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">International Symposium on Versioning XML Vocabularies and Systems</div>
            <div class="confdates e5">August 11, 2008</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">There are many aspects of "different versions" when considering the artefacts defined
               for the OASIS Universal Business Language (UBL).  UBL is expected to be widely deployed
               over a long period of time.  How it is specified needs to support deployments in a
               heterogeneous network of different levels of implementation in different scenarios
               with different participants.  Differences in versions can be seen in three different
               perspectives of the one specification.  This paper describes (1) different versions
               of the UBL standard defined by the UBL technical committee, (2) different versions
               of UBL customizations defined by communities of users, and (3) different versions
               of deployed code lists defined by trading partners using UBL.  Some aspects described
               apply only to UBL because of characteristics of UBL not shared with other vocabularies.
               This may limit how other vocabularies can take advantage of the approaches being used.
            </div>
         </div>
         <div class="author e8">
            <div class="personname e9">
               <div class="firstname e10">G. Ken</div>
               <div class="surname e11">Holman</div>
            </div>
            <div class="personblurb e12">
               <div class="para e13">Mr. G. Ken Holman is the Chief Technology Officer for Crane Softwrights Ltd., a co-editor
                  of the UBL 2.0 specification, member of the W3C Working Group that developed XML from
                  SGML, the founding chair of the two OASIS XML and XSLT Conformance Technical Committees
                  and current chair of the Code List Representation Technical Committee and UBL HISC
                  and SBS subcommittees and two task groups, a former international secretary of the
                  ISO subcommittee responsible for the SGML family of standards, the current chair of
                  the Canadian committee to the ISO, the author of electronically-published and print-published
                  books on XML-related technologies, and a frequent conference speaker. 
               </div>
            </div>
            <div class="affiliation e14">
               <div class="orgname e15">Crane Softwrights Ltd.</div>
            </div>
            <div class="email e16">gkholman@CraneSoftwrights.com</div>
         </div>
         <div class="legalnotice e17">
            <div class="para e18">Copyright © Crane Softwrights Ltd.</div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e19">
         <div class="title e20">Introduction</div>
         <div class="para e21">There are many requirements for versioning and customization in a heterogeneous network
            of  Universal Business Language (UBL) [
            <div class="xref e22" linkend="b_ubl2"></div>] users.  It has long been accepted that the use of XML addresses platform differences
            and application differences between participants, insulating trading partners from
            differences in their applications and implementations.  Using the identical XML models
            and constraints, users can interchange information with expected results.  However,
            in three perspectives of UBL there are expected to be differences between users in
            how the specification is used:  over time not all users of UBL can be expected to
            have kept their systems in step with new releases from the UBL committee; around the
            world not all communities of users of UBL will have the same requirements for information
            exchange; and amongst all those engaged with a given community, not all trading partners
            have the identical business-oriented constraints on the data found in UBL documents.
            
         </div>
         <div class="para e23">While using XML does address implementation differences in heterogeneous systems,
            the definition of UBL illustrates some approaches to addressing the heterogeneous
            deployment of an adopted specification.  This paper reviews guidelines being discussed
            and adopted by the UBL committee in these areas. Also described are some distinctive
            aspects about the UBL document constraints that support some automated verification
            techniques.
         </div>
         <div class="para e24">The principles described by the UBL committee predate the principles described in
            the W3C Technical Architecture Group (TAG) finding on strategies for extending and
            versioning languages [
            <div class="xref e25" linkend="b_tagevl"></div>], but they are in harmony.
         </div><a name="TheroleofschemavaliditytoapplicationsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e26" xml:id="validity">
            <div class="title e27">The role of schema validity to applications</div>
            <div class="para e28">This paper focuses on a number of versioning issues with respect to schema validity.
               This recognizes schema validity as a gating factor to many applications being able
               to inspect the content of an XML instance.  While well-formedness is sufficient for processing the content of an XML document with tools such as XSLT,
               nevertheless there are many approaches to working with XML that oblige an instance
               to be schema valid before an application is delivered the content found therein. 
               Once the content is delivered, the application can make business and other "higher
               layer" decisions regarding the instance.  By describing approaches addressing schema
               validity in advance of an application inspecting the content, all applications can
               be enabled to determine what business to engage in based on the content found.
            </div>
            <div class="para e29">The UBL committee was presented with a real-world situation involving thousands of
               Java programmers in Denmark who know nothing about XML but are obliged to write applications
               that access UBL documents standardized by the Danish government [
               <div class="xref e30" linkend="b_oioubl"></div>].  In the general case, consider for example any such programming language with an
               interface to XML that hides markup from developers.  This off-the-shelf interface
               might load an in-memory data structure based on the W3C Schema post-schema validation
               information (PSVI) values of a validating processor.  The programmer doesn't know
               anything about XML or about the PSVI, but because the interface delivers all of the
               document content as a data structure, the application can inspect the XML content
               and make its business decisions.  
            </div>
            <div class="para e31">If the XML document does not validate against the schema for which the interface was
               programmed, the data structures do not get loaded, and the application cannot inspect
               the document contents.  Schema validity becomes the gating factor to even look inside
               of the document, and the document's well-formedness is irrelevant to that programmer.  A processing model that coerces an instance to
               be schema-valid for such an application allows that application to accomplish what
               it can with the information found therein.
            </div>
         </div><a name="ThepublishedprocessingmodelforlikeversionedUBLsystemsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e32" xml:id="origmdl">
            <div class="title e33">The published processing model for like-versioned UBL systems</div>
            <div class="para e34">The UBL committee published a processing model for a UBL system receiving an XML UBL
               document, illustrated in 
               <div class="xref e35" linkend="validubl"></div>.
            </div>
            <div class="figure e36" xml:id="validubl">
               <div class="title e37">The published processing model for UBL</div>
               <div class="mediaobject e38">
                  <div class="imageobject e39">
                     <div class="metaBox e40"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e74').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e74" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e40'
                              </span><span class="metaAttribute">fileref='../../../vol2/graphics/Holman01/Holman01-001.png'
                              </span><span class="metaAttribute">format='png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e41">In this model, two distinct steps are engaged to determine the validity of an instance
               for processing by a receiving application.  The structural and lexical constraints
               are expressed in the W3C Schema XSD file.  The value constraints are expressed in
               an XSLT file.  Standardized versions of each of these two files are included in the
               UBL 2.0 delivery package.  Only when an instance has successfully passed structural
               validation does it make sense to check value validation.  
            </div>
            <div class="para e42">If the application requires schema validity for the loading of data structures, this
               is assured by the first step.  Checking the value constraints in the second step has
               relieved the application from having to know which constraints apply and can focus
               on whatever values have been allowed to pass.  Thus the application can be quite generic
               in nature by supporting all possible values.  The application does not have to change
               if the constraints on values change in different business contexts.
            </div>
         </div>
      </div><a name="VersionsoftheUBLspecificationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e43">
         <div class="title e44">Versions of the UBL specification</div>
         <div class="para e45">An innovative concept developed early in the UBL days and now followed by many other
            committees is the creation of Naming and Design Rules (NDR).  These rules govern the
            (typically automatable) synthesis of formal document models from abstract representations
            of model information.  A set of NDR rules is published for UBL 2.0 [
            <div class="xref e46" linkend="b_ndr2"></div>] and governs how the committee can address versions.  These rules cannot be violated
            in determining approaches for versioning.
         </div>
         <div class="para e47">The NDR makes reference to the abbreviations for Aggregate Business Information Entity
            (ABIE), Basic Business Information Entity (BBIE) and Associate Business Information
            Entity (ASBIE), defined by the Core Component Technical Specification [
            <div class="xref e48" linkend="b_ccts"></div>].  An aggregate element defines a sequence of basic and associated elements, where
            associated elements are themselves aggregates.  The order of the sequence reflects
            the order as modeled abstractly for the ABIE by the committee, which always orders
            all constituent BBIE constructs in sequence before all ASBIE constructs.
         </div>
         <div class="para e49">Three examples of NDR rules that make the UBL vocabulary distinct from other vocabularies
            are as follows.  
         </div>
         <div class="itemizedlist e50">
            <div class="listitem e51">
               <div class="para e52">[CTD2] Every 
                  <div class="code e53">ccts:ABIE</div> 
                  <div class="code e54">xsd:complexType</div> definition content model MUST use the 
                  <div class="code e55">xsd:sequence</div> element containing references to the appropriate global element declarations. 
                  <div class="emphasis e56">[Ed. note: i.e. no 
                     <div class="code e57">xsd:choice</div> constructs allowed]
                  </div>
               </div>
            </div>
            <div class="listitem e58">
               <div class="para e59">[ELD3] For every class and property identified in the UBL model, a global element
                  bound to the
                  corresponding 
                  <div class="code e60">xsd:complexType</div> MUST be declared.  
                  <div class="emphasis e61">[Ed. note: i.e. the Garden of Eden approach to document modeling]</div>
               </div>
            </div>
            <div class="listitem e62">
               <div class="para e63">[GXS14] The 
                  <div class="code e64">xsd:any</div> element MUST NOT be used except within the 
                  <div class="code e65">ExtensionContentType</div> type
                  definition, and with 
                  <div class="code e66">xsd:processContents="skip"</div> for non-UBL namespaces.
               </div>
            </div>
         </div>
         <div class="para e67">Considering the last example above, localizing all unknown constructs under a single
            point prevents having user-defined customized extensions throughout an instance. 
            The rule is not in place in order to locate minor version additions to the model.
            Adding an 
            <div class="code e68">&lt;xsd:any&gt;</div> construct within any standardized aggregate for the purpose of versioning would suggest
            adding 
            <div class="code e69">&lt;xsd:any&gt;</div> to every standardized aggregate.  After trying to negotiate the importance of which
            aggregates would or would not have this construct, it was decided it was simpler that
            no aggregate would have this construct.
         </div>
         <div class="para e70">This section overviews the committee decision to add new documents and augment existing
            aggregates with minor-version optional additions using the same namespace.  Applications
            can protect themselves from future augmentations by implementing a processing model
            stripping unexpected elements.  The generation of instances must indicate the version
            of UBL higher than or equal to the highest minor version defining any construct in
            the instance.  Minor version schema expressions are reconstituted from abstract models,
            not derived from older versions.
         </div><a name="MajorvsminorvocabularyversionsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e71" xml:id="majmin">
            <div class="title e72">Major vs. minor vocabulary versions</div>
            <div class="para e73">As is widely accepted, a major version change for an XML vocabulary is required when
               instances of the older version no longer validate against a new schema.  This implies
               that applications are obliged to be changed in order to recognize the vocabulary constructs
               it may already support.  From the schema validity perspective, this means an application
               is unable to inspect the content of an old instance because it cannot validate the
               instance with the new schema.
            </div>
            <div class="para e74">
               
               To support this, the NDR rules mandate:
            </div>
            <div class="itemizedlist e75">
               <div class="listitem e76">
                  <div class="para e77">[VER5] for UBL minor version changes the namespace name must not change.</div>
               </div>
               <div class="listitem e78">
                  <div class="para e79">[VER10] UBL Schema and schema module minor version changes MUST not break semantic
                     compatibility
                     with prior versions.
                  </div>
               </div>
            </div>
            <div class="para e80">As when defining most XML vocabularies, UBL first defines abstract information items
               and the granularity, cardinality, order and labeling of their constituent information
               items.  Items are then each assigned a name by which the representation of the item
               can be identified in an XML document.  An application then processes this representation
               found in an XML instance into information in effecting the desired outcome.
            </div>
            <div class="para e81">A information item's namespace is merely an extension of its local name.  Therefore,
               XML applications processing UBL documents identify an information item by its namespace-qualified
               name.  The application can then implement whatever semantics are defined for the identified
               information item.  If a UBL minor version introduces a previously existing UBL information
               item into an augmented aggregate as part of the change, the application will properly
               identify the item by its established namespace and local name even when found in the
               newly-permitted location.  
            </div>
            <div class="para e82">If the NDR had allowed or required the namespace to change in a minor version, the
               established conceptual information item would then have multiple names in different
               places of a validated instance.  If namespace changes were required only for newly
               defined information items, an application inspecting the namespaces of an instance
               would not distinguish all information items introduced in the minor version.  Therefore,
               basing minor version distinctions solely on namespaces is insufficient.  Thus incurring
               the overhead of introducing and tracking multiple minor-version-based namespaces would
               be onerous at worst or misleading at best.
            </div>
            <div class="para e83">In support of asserting minor version compliance, the UBL NDR mandates an element
               to be optionally available as part of every UBL instance:
            </div>
            <div class="itemizedlist e84">
               <div class="listitem e85">
                  <div class="para e86">[VER15] Every UBL document schema must declare an optional element named "
                     <div class="code e87">UBLVersionID</div>" immediately following the optional "
                     <div class="code e88">UBLExtensions</div>" element.
                  </div>
               </div>
            </div>
            <div class="para e89">An instance claiming to satisfy the document constraints for a particular version
               of UBL asserts this in the 
               <div class="code e90">UBLVersionID</div> element.  While it is not a mandatory element, applications knowing that an instance
               claims to satisfy a particular version can make use of this information.
            </div>
            <div class="para e91">With this combination of rules and practices, every UBL 2.x document will have the
               same namespaces used to identify the vocabulary as 2.0.  Also, where an instance purports
               to be an instance of a particular minor version, an application will know where to
               find this assertion.  Note that this element's value is not validated, rather, it
               is only an assertion that the constructs found in the instance conform to the stated
               version.  An instance with this element absent makes no such assertion, thus an application
               can only assume the instance is using UBL 2.0.  The element cannot be mandatory in
               a minor version as this would render 2.0 instances invalid where the element is absent.
            </div>
         </div><a name="TheUBLcommonlibraryandnewdocumenttypesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e92">
            <div class="title e93">The UBL common library and new document types</div>
            <div class="para e94">The UBL vocabulary is designed around a common library of business objects expressed
               as constraints in document structure.  Each of the 31 UBL document types import this
               common specification of business object serialization, thereby reusing the common
               definitions in all documents.
            </div>
            <div class="para e95">A UBL naming and design rule mandates that each document type defines only the document
               element for the document type.  The document element children are all references into
               the common library for both basic and aggregate business objects.
            </div>
            <div class="para e96">New document types can be added to UBL simply by creating the definitions of new document
               elements and the children they use.  Should there be a need for a new business object,
               this can simply be added to the library without impacting any of the existing document
               types.  Should there be a need to modify an existing business object, only additions
               that have optional cardinality can be made in order not to impact the schema validity
               of an instance of an existing document type.
            </div>
         </div><a name="AminorversioningapproachforbackwardcompatibilityANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e97">
            <div class="title e98">A minor-versioning approach for backward compatibility</div>
            <div class="para e99">New business requirements for an existing document type may mandate a change to a
               business object already being used.  As when modifying objects to accommodate new
               documents, such changes can be made in a minor UBL revision provided they are all
               made with an optional cardinality.  Nothing that is mandatory can be added in a minor
               version specification, as instances of previous minor versions would no longer be
               schema valid.
            </div>
            <div class="para e100">In this approach, for example, a system set up to validate version 2.7 instances will
               also validate a version 2.5 instance.  Whether a user wishes to accept the business
               validity of a version 2.5 instance is an out-of-band business decision.  Nevertheless,
               there is nothing in the system preventing it from being able to inspect the instance.
            </div>
         </div><a name="AprocessingmodelforforwardcompatibilityANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e101">
            <div class="title e102">A processing model for forward compatibility</div>
            <div class="para e103">A receiving application is assumed to have been programmed to be aware of only those
               constructs of a particular version of UBL.  It would therefore be deployed with the
               schemas for that UBL version and will typically employ validation of received documents
               in advance of acting on the semantics represented by the information structured and
               identified in the XML.  The application receiving an instance of a later UBL version
               may find either unrecognized constructs or recognized constructs in unexpected places.
               For example, a UBL 2.5 application would not recognize constructs introduced by the
               schema for UBL 2.7.
            </div>
            <div class="para e104">Shown previously in 
               <div class="xref e105" linkend="origmdl"></div>, the current UBL 2.0 specification describes a two-step validation processing model.
               The first of these two steps confirms the structural and lexical constraints (the
               lexical being, effectively, the structure of the content) of the document.  The second
               step confirms the value constraints being imposed by business requirements beyond
               the purview of the committee, but within the context of using UBL between trading
               partners.  This second step is described in more detail in 
               <div class="xref e106" linkend="codelist"></div>.  At either stage of validation, a failure indicates that the message is to be rejected,
               either because the document structure or value constraints have been violated.
            </div>
            <div class="para e107">This processing model for like-versioned UBL systems does not serve a UBL 2.5 application
               receiving a UBL 2.7 instance with unexpected content.
            </div>
            <div class="para e108">
               <div class="xref e109" linkend="procmdl"></div> illustrates a processing model being considered by the UBL committee that supports
               forward compatibility of UBL instances.  This augments the processing model described
               in the UBL 2.0 specification and is being considered for inclusion in the UBL 2.1
               specification.
            </div>
            <div class="figure e110" xml:id="procmdl">
               <div class="title e111">A customized processing model supporting forward compatibility</div>
               <div class="mediaobject e112">
                  <div class="imageobject e113">
                     <div class="metaBox e114"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e220').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e220" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e114'
                              </span><span class="metaAttribute">fileref='../../../vol2/graphics/Holman01/Holman01-002.png'
                              </span><span class="metaAttribute">format='png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e115">This alternative processing model for the receiving system uses only that version
               of UBL schema supported by the receiving system, and does not involve any inspection
               of the XML instance in advance of validation.  In this model an initial schema validation
               failure indication is recognized to possibly have been triggered by an instance using
               features added in a schema later than the version supported by the system.  After
               such a failure, an instance pruning process takes away unknown constructs from the
               instance being validated.  The resulting pruned instance can then be checked for schema
               validity.  If successful, the pruned instance is passed to the second stage value
               validation.
            </div>
            <div class="para e116">As with the standardized model, passing value validation grants delivery of the instance
               to the application.  In this model, a second piece of information accompanies the
               instance being passed to the application.  The application can already assume that
               value constraints in the document are satisfied.  An "initial pass/fail" indication
               tells the application that the instance it is working with satisfies the structure
               constraints in either an unmodified ("initial pass") or a modified ("initial fail")
               state.
            </div>
            <div class="para e117">An unmodified instance can be acceptable for business processing regardless of the
               stated version number found in the 
               <div class="code e118">UBLVersionID</div> element if all of the business objects found in the instance conform to the constraints
               of the application, unused additions in a later version notwithstanding.  The application
               can use out-of-band decision making, including the 
               <div class="code e119">UBLVersionID</div> element as input, to accept or reject a modified instance for the purposes of doing
               business.
            </div>
            <div class="para e120">In both cases if the instance is delivered to an application, such an application
               relying on schema validity for inspecting instance content (as described in 
               <div class="xref e121" linkend="validity"></div>) can successfully extract any information therein.
            </div>
            <div class="para e122">Considering the example above, a UBL 2.7 instance without constructs unrecognized
               by the UBL 2.5 schema would validate using the receiving application's schemas.  The
               instance would be passed to the UBL 2.5-aware application untouched and with an "initial
               pass" indication.  In this case that the instance is marked 2.7 is irrelevant.  A
               UBL 2.7 instance with unrecognized constructs would fail to validate with the UBL
               2.5 schema and would be passed to the application after being pruned to the UBL 2.5
               subset and with an "initial fail" indication.  In this case that the instance is marked
               2.7 is relevant to the application and user deciding how to proceed.
            </div>
            <div class="para e123">In support of this processing model, instance pruning processes for UBL 2.0 are already
               publicly available [
               <div class="xref e124" linkend="b_craneres"></div>].  Such processes are programmatically derived from the UBL specification rather
               than being hand-coded.  This approach gives the pruning process a higher level of
               assurance of accuracy than coding the filter by hand.
            </div>
         </div><a name="TheversionhighwatermarkANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e125">
            <div class="title e126">The version high water mark</div>
            <div class="para e127">There was some debate within the committee regarding which value a sending application
               is obligated to indicate in a UBL document regarding the version of UBL to which the
               instance conforms.
            </div>
            <div class="para e128">Consider the example where a sending system supporting features up to UBL 2.7 generates
               an instance wherein the highest version of UBL represented by any construct used therein
               was defined in UBL 2.3.  No additions defined by UBL 2.4, 2.5, 2.6 or 2.7 are being
               used within the instance.  Though the system supports creating a UBL 2.7 instance,
               the "high water mark" of the structure is only 2.3.
            </div>
            <div class="para e129">Should the sending application indicate in 
               <div class="code e130">UBLVersionID</div> the value "2.3" or the value "2.7"?
            </div>
            <div class="para e131">A receiving system supporting only UBL 2.2 would accept the instance after the second
               check of schema validity in 
               <div class="xref e132" linkend="procmdl"></div>.  The first check of validity would have triggered the instance pruning through the
               2.2 filter and the resulting instance would then validate as 2.2.  The application
               would inspect the instance with the knowledge that the instance failed the initial
               validation.  If it found a version of 2.2 or lower, the application could conclude
               that the instance was improperly structured and only the pruning process cleaned the
               instance up.  In this example, seeing a version higher than 2.2, the application wouldn't
               know whether the instance was improperly structured or whether the failure was only
               the presence of additional content.  Nevertheless, the application can use an out-of-band
               decision to continue with the transaction or reject it.  This might include human
               inspection or authorization.
            </div>
            <div class="para e133">A receiving system supporting UBL 2.3 would accept the instance structure and the
               application would be able to inspect the content.  There would be no need to inspect
               the asserted UBL version because the "initial pass/fail indication" cites the successful
               validation against UBL 2.3 structures.  This happens regardless of whether the 
               <div class="code e134">UBLVersionID</div> states "2.3" or "2.7".
            </div>
            <div class="para e135">Likewise, a receiving system supporting UBL 2.7 would accept the instance without
               needing to inspect the 
               <div class="code e136">UBLVersionID</div>.
            </div>
            <div class="para e137">Thus it turns out that there is no obligation for a sending system to ascertain the
               high water mark of constructs used in an instance.  Indeed, it may be a burden to
               quality assurance and testing in application development to test that an application
               meets the high water mark requirement.  By always populating 
               <div class="code e138">UBLVersionID</div> with the highest version of UBL supported by the sending application, this statement
               will always be true.  An instance of UBL 2.3 is, in fact, an instance of UBL 2.7,
               so it is safe to say "2.7" in the instance.
            </div>
         </div><a name="SchemasynthesisANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e139">
            <div class="title e140">Schema synthesis</div>
            <div class="para e141">Note that XSD extension techniques are not suitable for defining later UBL versions
               based on earlier UBL versions.  Accordingly, the document models of each minor version
               of UBL will be independently expressed from revised abstract models of the information.
               UBL committee members collaborate on the definitions of minor versions only from UML
               data diagrams and spreadsheet definitions of information model components.  Since
               the XSD files are synthesized based on the UBL NDR, the original XSD files are not
               utilized in the expression of subsequent minor versions.
            </div>
            <div class="para e142">XSD requires redefined elements to be redefinitions in terms of themselves.  This
               requires an extended definition to include the original definition with extensions
               only after the last of the original items being used.
            </div>
            <div class="para e143">The UBL NDR requires all atomic information items to be ordered in sequence before
               all aggregate information items in an element's definition.  When new atomic information
               items are introduced into the model, they need to be positioned in the XML somewhere
               within or adjacent to the original atomic information items and before the original
               aggregate information items.  Thus a minor version cannot be defined as an extension
               after the end of its previous version.
            </div>
            <div class="para e144">Note that minor versions only introduce optional constructs, thus an instance of any
               version is always a valid instance of any subsequent minor-version.
            </div>
         </div>
      </div><a name="CustomizationsofUBLANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e145">
         <div class="title e146">Customizations of UBL</div>
         <div class="para e147">
            A UBL Customization is, in the generic sense, the description of XML instances or
            XML-based applications acting on those instances that are somehow based on or derived
            from the UBL 2.0 specification.  This represents another kind of version of UBL than
            the versions described by the committee.  A community of users adopting UBL can describe
            a customization as their version of UBL better suited to their business needs than
            what off-the-shelf UBL can offer.
         </div>
         <div class="para e148">Two kinds of changes can be distinguished in a UBL customization:  the removal of
            optional standardized constructs that are considered unnecessary, and the addition
            of new non-standardized constructs not already found in the specification.  How a
            customization is specified impacts on the applications processing UBL information
            found in XML documents.
         </div>
         <div class="para e149">Two very distinct interpretations have come to light of how to describe and deploy
            a customization of UBL.  A number of UBL members focus on the business objects described
            by the UBL information model based on the CCTS information model [
            <div class="xref e150" linkend="b_ccts"></div>].  Other members focus on the actual elements and attributes in the XML instance
            and the UBL XSD schemas.
         </div>
         <div class="para e151">
            Following current discussions in the UBL TC, the term 
            <div class="emphasis e152">UBL Compatibility</div> is reserved for a customization focused on the information model, while the term
            
            <div class="emphasis e153">UBL Conformance</div> is reserved for a customization focused on the markup constraints and labels of the
            document schema.
         </div><a name="UBLCompatibilityANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e154">
            <div class="title e155">UBL Compatibility</div>
            <div class="para e156">
               The Core Component Technical Specification [
               <div class="xref e157" linkend="b_ccts"></div>] presents a model for standardizing business semantics.  It includes a methodology
               for developing a common set of semantic building blocks that represent business data.
               Using these building blocks, one can create one's own XML vocabulary.  This vocabulary
               has user-named constructs based on CCTS constructs with the standardized business
               semantics.
            </div>
            <div class="para e158">
               The UBL business objects are built on top of the CCTS building blocks.  Therefore,
               the UBL vocabulary is compatible at an information model level with other XML vocabularies
               and data representations also based on CCTS.  The actual XML vocabularies may be very
               different, with different namespaces and labels for elements and attributes.  However,
               the semantic basis on which these vocabularies are built promotes compatibility of
               the information expressed using those semantics.
            </div>
            <div class="para e159">
               These UBL business objects can be, in turn, the basis upon which other information
               models and associated XML vocabularies are built.  This promotes compatibility of
               the information expressed in those vocabularies with the information expressed in
               UBL instances.  Such compatibility is at the application and information model level.
               However, this does not enforce or predict any document-level instance compatibility
               in the use of labeled XML information items as defined by UBL.
            </div>
            <div class="para e160">
               An instance or a system is said to be 
               <div class="emphasis e161">UBL-compatible</div> when its information item definitions (not labels) are based on the same UBL and
               CCTS business objects, thus promoting interoperability at an application and model
               level between two UBL-compatible systems that understand the underlying business objects.
            </div>
            <div class="para e162">In a UBL-compatible document, schema validity is irrelevant because the business objects
               need not express the same granularity or structure or labels as those used in the
               published UBL schemas.  Compatibility is thus viewed from an ontological or semantic
               perspective, not syntactic.  
            </div>
            <div class="para e163">The granularity, order, cardinality and makeup of constituent information items in
               a compatible XML document need not have any relationship to UBL documents that validate
               against the published standardized schemas.  Moreover, compatible information items
               must be distinctly named (labeled in the document tree) from standardized information
               items so as not to misconstrue what the label of an information item represents. 
               Therefore, an XML application written to support a specific customization must know
               a priori the namespaces and names of the customized information items, and can only
               rely on the UBL namespaces and names to represent standardized information items.
               
            </div>
         </div><a name="UBLConformanceANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e164" xml:id="ublconf">
            <div class="title e165">UBL Conformance</div>
            <div class="para e166">
               An instance is said to be 
               <div class="emphasis e167">UBL-conformant</div> when it uses the granularity, order, cardinality, makeup, names and namespace URI
               strings of the representation of information items without conflicting with that published
               in the normative UBL schemas.  This promotes interoperability at a document interchange
               level between two UBL-conformant systems that interpret the so-labeled and structured
               business objects.
            </div>
            <div class="para e168">Two aspects of the UBL document models may be unacceptable to a community of users.
               There may be more business objects defined by UBL than are of interest to the community.
               Moreover, a community may very well need to express important (to them) business objects
               not conceived in UBL.  The UBL schemas are defined to accommodate these differences.
            </div>
            <div class="para e169">A 
               <div class="emphasis e170">UBL conformant customization</div> describes a set of document constraints where all possible instances of the conformant
               customization are simultaneously schema-valid instances of the published standardized
               UBL schemas.  This allows a community to deprecate (to the point of exclusion) any
               UBL construct with optional cardinality.  Any UBL construct with mandatory cardinality
               cannot be removed from the conformant customization, as customized instances would
               not meet the constraints of the original UBL document schemas.
            </div>
            <div class="para e171">Conformance is thus viewed from a syntactic perspective, presuming equivalence from
               an ontological or semantic perspective.
            </div>
            <div class="para e172">An excerpt from an example delivered as part of the UBL 2.0 package shows three fields
               being used in an Invoice instance, referencing a conformant customization used for
               a profile of a proposed small business subset:
            </div>
            <div class="programlisting e173" xml:space="preserve">&lt;in:Invoice ...&gt;
               &lt;cbc:UBLVersionID&gt;2.0&lt;/cbc:UBLVersionID&gt;
               &lt;cbc:CustomizationID&gt;urn:oasis:names:specification:ubl:xpath:Invoice-2.0:
               sbs-1.0-draft&lt;/cbc:CustomizationID&gt;
               &lt;cbc:ProfileID&gt;bpid:urn:oasis:names:draft:bpss:ubl-2-sbs-invoice-
               notification-draft&lt;/cbc:ProfileID&gt;
               
            </div>
            <div class="para e174">As noted in 
               <div class="xref e175" linkend="majmin"></div> an instance may claim to conform to the UBL schemas for the particular minor version
               indicated in the 
               <div class="code e176">UBLVersionID</div>.  As well, an instance claiming to satisfy the document constraints for a customization
               may assert this in the 
               <div class="code e177">CustomizationID</div> element.  When a community defines variations of a given document model within a
               customization, the instance may assert it is a particular variation in the 
               <div class="code e178">ProfileID</div> element.
            </div>
            <div class="para e179">An instance may choose not to assert in these elements that it conforms to any particular
               constraints.  A receiving application can then assume it is a UBL 2.0 document but
               must make its own assessment of the document information or the anticipated use of
               the document.
            </div><a name="Conformantsubsets(deprecatingexistinginformation)ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e180">
               <div class="title e181">Conformant subsets (deprecating existing information)</div>
               <div class="para e182">A major aspect of the success of UBL is the specification of many different business
                  objects that communities of users can utilize when representing their business information.
                  This flexibility found in aggregate information items comes at a cost of defining
                  a granularity of numerous possible constituent items, few of which are mandatory and
                  most of which can be selectively used in an instance.
               </div>
               <div class="para e183">The community is obliged to use constituent items that are declared as mandatory in
                  a UBL instance, otherwise their instances would not validate against the published
                  standardized schemas.  The community can, however, choose to constrain which optional
                  constituent items it will agree to represent the information they use, and which optional
                  constituent items it will agree will never represent any information they find useful
                  or relevant in an interchange.
               </div>
               <div class="para e184">By paring down the standardized document specification to a conformant subset, the
                  expectations of individuals in the community can be managed.  Only those optional
                  constructs allowed within the community need be considered when a sending application
                  represents information.  Any optional construct not allowed within the community can
                  be safely ignored by a receiving application should it be present in the instance.
               </div>
               <div class="para e185">All instances of the conformant subset are schema-valid with the UBL schema version
                  from which the subset is derived.
               </div>
            </div><a name="Conformantextensions(addingnewinformation)ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e186">
               <div class="title e187">Conformant extensions (adding new information)</div>
               <div class="para e188">To meet the requirements not perceived by the committee, a community can define their
                  own business objects required for a transaction.  These objects are represented as
                  customized information items.  These items will have their own granularity, order,
                  cardinality and makeup of constituent information items.   Some constituent items
                  may, very well, be appropriately represented by a standardized information item. 
                  Moreover, the use of standardized items where possible allows applications to exploit
                  existing support in new contexts.  
               </div>
               <div class="para e189">New basic information items and aggregates defined differently than standardized aggregates
                  must be distinctly named from standardized constructs so as not to ambiguously represent
                  UBL constructs in an XML instance.  The names of these non-UBL constructs must use
                  a non-UBL namespace in order to avoid any future name collisions with as-yet-to-be-standardized
                  UBL constructs using the UBL namespaces.
               </div>
               <div class="para e190">The root of the community's extension definition is an element in a non-UBL namespace
                  as it both represents and its content is used as a customized semantic not defined
                  by the UBL committee.  The UBL schemas allow the community to position its customized
                  objects under a reserved element named 
                  <div class="code e191">UBLExtensions</div> found at the beginning of all UBL documents.  This element is not described in the
                  abstract business model of UBL as it is an artefact of document expression, not document
                  definition.  
               </div>
               <div class="para e192">Meta data available for each 
                  <div class="code e193">UBLExtension</div> child of the 
                  <div class="code e194">UBLExtensions</div> element identifies the nature and source of the extension.  The 
                  <div class="code e195">UBLExtension</div> element allows the root of the community extension as its only child element by using
                  
                  <div class="code e196">&lt;xsd:any&gt;</div> in its declaration.
               </div>
               <div class="para e197">Note that extension constructs are not allowed anywhere else in a UBL document outside
                  of the 
                  <div class="code e198">UBLExtension</div> element, otherwise the UBL schemas will report errors of unexpected content.  When
                  weighing extensibility, the committee considered adding a wild card validation pattern
                  after all elements, after some elements or in only one location.  Adding it after
                  every element was considered extreme.  Agreeing on any selection wasn't possible as
                  some members felt their choices of selection were warranted while others did not.
                  Having only one location for extensions manages the expectations of developers and
                  users for locating additional non-standard constructs.
               </div>
               <div class="para e199">Putting all extensions under one location has its own burden of associating the extension
                  content with the standardized content.  Many constructs in UBL, for example line items
                  and parties, are already modeled to have identifiers.  Reusing these identifiers in
                  extension content provides a natural association between content found under the extension
                  point and content found in the standardized constructs.  
                  <div class="xref e200" linkend="extsub"></div> illustrates this.
               </div>
               <div class="figure e201" xml:id="extsub">
                  <div class="title e202">Extension approach without duplication</div>
                  <div class="mediaobject e203">
                     <div class="imageobject e204">
                        <div class="metaBox e205"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e412').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e412" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e205'
                                 </span><span class="metaAttribute">fileref='../../../vol2/graphics/Holman01/Holman01-003.png'
                                 </span><span class="metaAttribute">format='png'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               <div class="para e206">Alternatively, there are committee members contemplating the role of the extension
                  point to be the location of a recipient's customized view of a complete extended UBL
                  instance.  In such a document all standardized UBL information items are included
                  under the extension point and their extensions are found in their context.  Those
                  items with modified content must necessarily be named differently from the standardized
                  names, but the standardized content can be found therein.  The standardized UBL instance
                  with standardized UBL names still exists in the XML in its expected structures.  
               </div>
               <div class="para e207">Those recipients unprepared to process the extension ignore the extension and use
                  the standardized structure.  Meanwhile, those recipients prepared to process the extensions
                  do so and ignore the standardized structure.  This allows the standardized basic objects
                  to stay in the UBL namespace, but every extended aggregate needs to be named in an
                  extension namespace.  Creating an aggregate with a new name has the "ripple effect"
                  of requiring containing aggregates to have new names in the extension namespace, stepping
                  all the way up the document structure to the containing element below 
                  <div class="code e208">UBLExtension</div>.  
                  <div class="xref e209" linkend="extfull"></div> illustrates this.
               </div>
               <div class="figure e210" xml:id="extfull">
                  <div class="title e211">Extension approach with duplication</div>
                  <div class="mediaobject e212">
                     <div class="imageobject e213">
                        <div class="metaBox e214"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e427').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e427" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e214'
                                 </span><span class="metaAttribute">fileref='../../../vol2/graphics/Holman01/Holman01-004.png'
                                 </span><span class="metaAttribute">format='png'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               <div class="para e215">No feedback is yet available from users considering either of these two approaches
                  using 
                  <div class="code e216">UBLExtension</div>.
               </div>
            </div><a name="ConformantinstanceprocessingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e217">
               <div class="title e218">Conformant instance processing</div>
               <div class="para e219">To support document-order processing of a UBL instance with extensions, the 
                  <div class="code e220">UBLExtensions</div> element is prescribed to be the very first child element of the document element
                  in every model.  Choosing this location was an important decision in support of streaming
                  interfaces to UBL instances, while being innocuous in support of tree-based interfaces.
                  A streaming application will encounter all extensions in advance of any standardized
                  construct.  In this way the application is equipped to encounter all standardized
                  constructs with the information available in extensions already known.  No caching
                  of standardized constructs is necessary to await possible extension information that
                  would be following if extensions were modeled after every element.
               </div>
               <div class="para e221">One processing model supporting a customization of UBL is the same processing model
                  depicted in 
                  <div class="xref e222" linkend="procmdl"></div>.  An instance pruning filter recognizing all of the constructs of the customization
                  can reduce any instance not validating successfully against the customization schema.
                  When the resulting pruned instance fails validation, the instance is unacceptable
                  for processing.  When the resulting pruned instance succeeds in validation, the application
                  has the same two inputs as in forward compatibility processing:  a valid XML instance
                  and an indication of whether or not the instance had to be pruned to be valid.
               </div>
               <div class="para e223">Another processing model is employed by the Danish conformant customization called
                  OIOUBL [
                  <div class="xref e224" linkend="b_oioubl"></div>].  This uses a Schematron assertion schema to determine whether an instance satisfies
                  the constraints defined by the customization.  This assertion schema confirms both
                  cardinality aspects and value aspects.
                  
               </div>
            </div><a name="ProfilesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e225">
               <div class="title e226">Profiles</div>
               <div class="para e227">Another perspective of different versions of UBL can be seen within user communities.
                  A community may decide that different document structure constraints for the same
                  document are necessary for different transaction exchanges involving that document.
               </div>
               <div class="para e228">The Danish UBL project and at least two other UBL projects in Europe refine community
                  customization even further with different customizations for different scenarios.
                  A concept called a 
                  <div class="emphasis e229">profile</div> characterizes a choreography of interchange.  Having numerous profiles may requiring
                  having numerous conformant customizations defined for each UBL schema.  A given document
                  type may have two different sets of constraints in two different profiles of the same
                  community customization.  For example, an invoice instance used in the choreography
                  of a "Basic procurement" profile may not have as many constructs available to use
                  as an invoice instance used in the different choreography of an "Advanced procurement"
                  profile.  An instance claiming to satisfy the document constraints for a particular
                  profile in a customization asserts this in the 
                  <div class="code e230">ProfileID</div> element.
               </div>
               <div class="para e231">Thus the three dimensions of the version of a set of UBL document structural constraints
                  are defined by the committee version (standard), the community version (customization)
                  and the choreography version (profile).
               </div>
            </div><a name="ConformantschemarepresentationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e232">
               <div class="title e233">Conformant schema representation</div>
               <div class="para e234">
                  <div class="xref e235" linkend="schemas"></div> shows the schema representation fragments and their dependencies.  These fragments
                  are produced by the UBL committee with the expectation that a community with a customization
                  would produce their own subset versions of each of the fragments, and would replace
                  the Extension Content Datatype fragment with their extensions.
               </div>
               <div class="figure e236" xml:id="schemas">
                  <div class="title e237">UBL Schema dependencies</div>
                  <div class="mediaobject e238">
                     <div class="imageobject e239">
                        <div class="metaBox e240"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e477').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e477" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e240'
                                 </span><span class="metaAttribute">fileref='../../../vol2/graphics/Holman01/Holman01-005.png'
                                 </span><span class="metaAttribute">format='png'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               <div class="para e241">A community defining only extensions, or a UBL user wanting to add information under
                  the extension point for the standard schemas, can leave every OASIS fragment unchanged
                  and read-only. This requires replacing only the one extension module that includes
                  the complete customization definition in the customization namespace.
               </div>
               <div class="para e242">One approach producing the subset schemas available on Crane's web site is to work
                  with the OASIS artefacts as input and use the XML comment construct to elide all of
                  the information items not used by the community customization.  A human reader of
                  the end result can see all of the OASIS standardized constructs, easily distinguishing
                  those that are in the customization and those that are not.  The model modifications
                  are expressed using spreadsheets available from the OASIS web site.  This straightforward
                  approach was developed from pragmatism and wanting to avoid writing a schema synthesis
                  application from scratch.
               </div>
               <div class="para e243">The other approach producing the subset schemas is to work at an abstract model level
                  and to synthesize the schema fragments from scratch from the subset model.  Interestingly,
                  when this was done for one customization, anecdotal reports of "distrust" in the schemas
                  surfaced.  This surprised the community developers and became a real barrier of acceptance
                  for the users.  How would users be assured that the schemas synthesized from scratch
                  would not violate the constraints standardized by OASIS?
               </div>
               <div class="para e244">Regardless of the approach taken, this reassurance turns out to be very important
                  to candidate users.  How can one categorically prove all instances of a posited customization
                  are simultaneously valid against the standardized document constraints?  Doing so
                  would validate the modified UBL model's conformance against the original UBL document
                  model.
               </div>
            </div>
         </div><a name="%0AUsingXPathfilesforvalidatingmodelconformanceANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e245">
            <div class="title e246">
               Using XPath files for validating model conformance
            </div>
            <div class="para e247">
               When researching techniques for validating a modified UBL model's conformance against
               the original UBL document model, it was observed that the NDR rules ensure such is
               satisfied by confirming each modified ABIE conforms with each standardized ABIE. 
               However, some early users of modified UBL models broke NDR constraints by defining
               contextual differences for ABIE definitions, while still positing their instances
               validated against the standard UBL models.  A mechanical means by which model conformance
               can be tested was needed.  To accommodate both those who respect the NDR and those
               who do not, a methodology was developed to exploit some UBL resources that were created
               years before for an entirely different purpose of presentation rather than validation.
            </div>
            <div class="para e248">
               The XPath recommendation [
               <div class="xref e249" linkend="b_xpath10"></div>] defines a data model for the information found in XML instances.  This model is
               agnostic to any constraints that may have been imposed on the creation or use of the
               instance.  XPath 1.0 is based only on XML syntax and XML Namespaces.  The data model
               describes well-formed instances (which may or may not be valid).  The model focuses
               on the information found in the instance and not in any way the syntax used in the
               instance to express the information.
            </div>
            <div class="para e250">
               The UBL Human Interface Subcommittee [
               <div class="xref e251" linkend="b_ublhisc"></div>] project created an XML vocabulary for enumerating information items in a catalogue
               of available XPath addresses from the document element to all items allowed by a given
               document model described by a schema or to all items found a particular XML instance.
               The normative instance of an XPath file for a given document model is an XML instance
               of the XPath file vocabulary [
               <div class="xref e252" linkend="b_xpathfile"></div>].  This instance can be machine-processed by any XML-aware application and can also
               be used to create human legible reports and diagnostic materials.
            </div>
            <div class="para e253">
               XPath files for UBL 2 schemas are publicly available [
               <div class="xref e254" linkend="b_ubl2xpath"></div>].
               There happens to be sufficient information in a UBL schema expression to derive the
               complete suite of information items.  The combination of UBL NDRs happen to make it straightforward to create XPath files from the published XSD expressions.
               For example, the use of the "Garden of Eden" (all elements and types defined globally)
               approach to declarations, and only sequence groups (no choice groups), makes XPath
               files unambiguous for UBL, whereas XPath files might be quite insufficient for other
               document models and modeling conventions.  This tool, therefore, is not a general
               purpose tool to use for all XML vocabularies.
            </div>
            <div class="para e255">
               More research is required to come up with more information in the XPath normative
               files to accommodate different schema expression conventions and NDRs.  Initial discussions with vendors indicates that XPath files are not sufficiently
               rich to express XML document structures for arbitrary constraints, only those constraints
               limited by the UBL NDRs.
            </div>
            <div class="para e256">
               Note that XPath files need not be generated from XSD schemas or XML instances.  The
               UBL spreadsheets used to determine the contents of the XSD schemas (or any spreadsheets
               describing content nesting and definition) can be used as a source for creating XPath
               files.  However created, the XPath files express in a programmatically processable form all of the possible combinations of XML non-recursive hierarchy for the information
               items described by a document model, schema or instance.
            </div><a name="%0AXPathfilevocabularyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e257">
               <div class="title e258">
                  XPath file vocabulary
               </div>
               <div class="para e259">
                  The document element of an XPath file is 
                  <div class="code e260">&lt;XPath&gt;</div>.  Document-wide namespace prefix/URI associations are expressed in 
                  <div class="code e261">&lt;Namespace&gt;</div> elements.  XML element information structure is expressed in an XPath file as 
                  <div class="code e262">&lt;Element&gt;</div> element children of parent 
                  <div class="code e263">&lt;Element&gt;</div> elements.  Similarly, attributes of elements are expressed as 
                  <div class="code e264">&lt;Attribute&gt;</div> element children.  Each construct indicates its allowed cardinality.  This is sufficient
                  to express models described using UBL NDR.
               </div>
               <div class="para e265">
                  An XPath file can be processed by an application to internalize all of the structures
                  expressed.  The application can then compare structures or do other processing with
                  the information.  The following is an excerpt from the beginning of the XPath file
                  generated for the 
                  <div class="code e266">AttachedDocument</div> document type:
               </div>
               <div class="programlisting e267" xml:space="preserve">&lt;XPath xmlns="urn:oasis:names:tc:ubl:schema:XPath-1.0"
                  xml:id="urn:oasis:names:tc:ubl:XPath:AttachedDocument-2.0"&gt;
                  &lt;Namespace prefix="ad" uri="urn:...:AttachedDocument-2"/&gt;
                  &lt;Namespace prefix="cac" uri="urn:..:CommonAggregateComponents-2"/&gt;
                  &lt;Namespace prefix="cbc" uri="urn:..:CommonBasicComponents-2"/&gt;
                  ...
                  &lt;Element name="AttachedDocument" type="AttachedDocumentType"
                  prefix="ad" minOccurs="1" maxOccurs="1"&gt;
                  &lt;Element name="UBLExtensions" type="UBLExtensionsType"
                  prefix="ext" minOccurs="0" maxOccurs="1"&gt;
                  &lt;Element name="UBLExtension" type="UBLExtensionType"
                  prefix="ext" minOccurs="1" maxOccurs="unbounded"&gt;
                  &lt;Element name="ID" type="IDType"
                  extends="udt:IdentifierType" prefix="cbc"
                  minOccurs="0" maxOccurs="1" text=""&gt;
                  &lt;Attribute name="schemeAgencyID" use="optional"
                  type="xsd:normalizedString"/&gt;
                  &lt;Attribute name="schemeAgencyName" use="optional"
                  type="xsd:string"/&gt;
                  ...
                  &lt;/Element&gt;
                  &lt;Element name="Name" type="NameType"
                  extends="udt:NameType" prefix="cbc"
                  minOccurs="0" maxOccurs="1" text=""&gt;
                  &lt;Attribute name="languageID" use="optional"
                  type="xsd:language"/&gt;
                  &lt;/Element&gt;
                  &lt;Element name="ExtensionAgencyID"
                  type="ExtensionAgencyIDType"
                  extends="udt:IdentifierType" prefix="ext"
                  minOccurs="0" maxOccurs="1" text=""&gt;
                  &lt;Attribute name="schemeAgencyID" use="optional"
                  type="xsd:normalizedString"/&gt;
                  ...
                  &lt;/Element&gt;
                  ...
                  &lt;/Element&gt;
                  &lt;/Element&gt;
                  &lt;Element name="UBLVersionID" type="UBLVersionIDType"
                  extends="udt:IdentifierType" prefix="cbc"
                  minOccurs="0" maxOccurs="1" text=""&gt;
                  &lt;Attribute name="schemeAgencyID" use="optional"
                  type="xsd:normalizedString"/&gt;
                  &lt;Attribute name="schemeAgencyName" use="optional"
                  type="xsd:string"/&gt;
                  ...
                  &lt;/Element&gt;
                  ...
                  &lt;Element name="CustomizationID" type="CustomizationIDType"
                  extends="udt:IdentifierType" prefix="cbc"
                  minOccurs="0" maxOccurs="1" text=""&gt;
                  ...
                  &lt;/Element&gt;
                  &lt;Element name="ProfileID" type="ProfileIDType"
                  extends="udt:IdentifierType" prefix="cbc"
                  minOccurs="0" maxOccurs="1" text=""&gt;
                  &lt;Attribute name="schemeAgencyID" use="optional"
                  type="xsd:normalizedString"/&gt;
                  ...
                  &lt;/Element&gt;
                  ...
                  &lt;/Element&gt;
                  &lt;/XPath&gt;
                  
               </div>
               <div class="para e268">This is an exhaustive serialization of all document contexts.  Each element and attribute
                  indicated is a possible element and attribute in the hierarchy found in instances
                  conforming to the model's structural constraints.
               </div>
            </div><a name="%0AXPathreportsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e269">
               <div class="title e270">
                  XPath reports
               </div>
               <div class="para e271">
                  Two XPath reports are made available: a simple text report of absolute XPath addresses
                  (that is, an XPath address that begins from the root node and document element) and
                  a mockup XML instance, both of which have one of every information item described
                  by an XPath file.
               </div><a name="%0AXPathtextreportsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e272">
                  <div class="title e273">
                     XPath text reports
                  </div>
                  <div class="para e274">
                     An XPath text report is targeted to a human reader and can be a handy tool to overview
                     the information found in an XPath file.  Each XPath address is preceded by a reference
                     ordinal (one ordinal for elements and a pair of ordinals for attributes), and the
                     cardinality of the information item.  An excerpt of the XPath text report of the above
                     
                     <div class="code e275">AttachedDocument</div> XPath file is as follows (lines are wrapped to fit on this page, there is no line
                     wrapping in the actual file):
                  </div>
                  <div class="programlisting e276" xml:space="preserve">1   1..1 /ad:AttachedDocument/
                     2   0..1 /ad:AttachedDocument/ext:UBLExtensions/
                     3   1..n /ad:AttachedDocument/ext:UBLExtensions/ext:UBLExtension/
                     4   0..1 /ad:AttachedDocument/ext:UBLExtensions/ext:UBLExtension/
                     cbc:ID
                     4.1 0..1 /ad:AttachedDocument/ext:UBLExtensions/ext:UBLExtension/
                     cbc:ID/@schemeAgencyID
                     4.2 0..1 /ad:AttachedDocument/ext:UBLExtensions/ext:UBLExtension/
                     cbc:ID/@schemeAgencyName
                     4.3 0..1 /ad:AttachedDocument/ext:UBLExtensions/ext:UBLExtension/
                     cbc:ID/@schemeDataURI
                     4.4 0..1 /ad:AttachedDocument/ext:UBLExtensions/ext:UBLExtension/
                     cbc:ID/@schemeID
                     4.5 0..1 /ad:AttachedDocument/ext:UBLExtensions/ext:UBLExtension/
                     cbc:ID/@schemeName
                     4.6 0..1 /ad:AttachedDocument/ext:UBLExtensions/ext:UBLExtension/
                     cbc:ID/@schemeURI
                     4.7 0..1 /ad:AttachedDocument/ext:UBLExtensions/ext:UBLExtension/
                     cbc:ID/@schemeVersionID
                     5   0..1 /ad:AttachedDocument/ext:UBLExtensions/ext:UBLExtension/
                     cbc:Name
                     5.1 0..1 /ad:AttachedDocument/ext:UBLExtensions/ext:UBLExtension/
                     cbc:Name/@languageID
                     6   0..1 /ad:AttachedDocument/ext:UBLExtensions/ext:UBLExtension/
                     ext:ExtensionAgencyID
                     6.1 0..1 /ad:AttachedDocument/ext:UBLExtensions/ext:UBLExtension/
                     ext:ExtensionAgencyID/@schemeAgencyID
                     6.2 0..1 /ad:AttachedDocument/ext:UBLExtensions/ext:UBLExtension/
                     ext:ExtensionAgencyID/@schemeAgencyName
                     6.3 0..1 /ad:AttachedDocument/ext:UBLExtensions/ext:UBLExtension/
                     ext:ExtensionAgencyID/@schemeDataURI
                     6.4 0..1 /ad:AttachedDocument/ext:UBLExtensions/ext:UBLExtension/
                     ext:ExtensionAgencyID/@schemeID
                     6.5 0..1 /ad:AttachedDocument/ext:UBLExtensions/ext:UBLExtension/
                     ext:ExtensionAgencyID/@schemeName
                     6.6 0..1 /ad:AttachedDocument/ext:UBLExtensions/ext:UBLExtension/
                     ext:ExtensionAgencyID/@schemeURI
                     6.7 0..1 /ad:AttachedDocument/ext:UBLExtensions/ext:UBLExtension/
                     ext:ExtensionAgencyID/@schemeVersionID
                     7   0..1 /ad:AttachedDocument/ext:UBLExtensions/ext:UBLExtension/
                     ext:ExtensionAgencyName
                     7.1 0..1 /ad:AttachedDocument/ext:UBLExtensions/ext:UBLExtension/
                     ext:ExtensionAgencyName/@languageID
                     8   0..1 /ad:AttachedDocument/ext:UBLExtensions/ext:UBLExtension/
                     ext:ExtensionVersionID
                     8.1 0..1 /ad:AttachedDocument/ext:UBLExtensions/ext:UBLExtension/
                     ext:ExtensionVersionID/@schemeAgencyID
                     8.2 0..1 /ad:AttachedDocument/ext:UBLExtensions/ext:UBLExtension/
                     ext:ExtensionVersionID/@schemeAgencyName
                     8.3 0..1 /ad:AttachedDocument/ext:UBLExtensions/ext:UBLExtension/
                     ext:ExtensionVersionID/@schemeDataURI
                     8.4 0..1 /ad:AttachedDocument/ext:UBLExtensions/ext:UBLExtension/
                     ext:ExtensionVersionID/@schemeID
                     8.5 0..1 /ad:AttachedDocument/ext:UBLExtensions/ext:UBLExtension/
                     ext:ExtensionVersionID/@schemeName
                     8.6 0..1 /ad:AttachedDocument/ext:UBLExtensions/ext:UBLExtension/
                     ext:ExtensionVersionID/@schemeURI
                     8.7 0..1 /ad:AttachedDocument/ext:UBLExtensions/ext:UBLExtension/
                     ext:ExtensionVersionID/@schemeVersionID
                     
                     ...
                     
                  </div>
               </div><a name="%0AXPathinstancereportANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e277">
                  <div class="title e278">
                     XPath instance report
                  </div>
                  <div class="para e279">
                     The mockup XML instance created from an XPath file is called an XPath instance report.
                     This can be used to compare structures of XML documents (but not their values) containing
                     the information items described by an XPath file.  An excerpt of the XPath instance
                     report of the above 
                     <div class="code e280">AttachedDocument</div> XPath file is as follows; note how the corresponding reference ordinals are captured
                     in the information items between exclamation marks, and because of this the instance
                     cannot be validated by the UBL schemata (nevertheless the reference ordinals are valuable
                     diagnostic tools in non-schema-aware systems such as XSLT 1.0 stylesheets):
                  </div>
                  <div class="programlisting e281" xml:space="preserve">&lt;ad:AttachedDocument
                     xmlns:ad="urn:...:AttachedDocument-2"
                     xmlns:cac="urn:...:CommonAggregateComponents-2"
                     xmlns:cbc="urn:...:CommonBasicComponents-2"
                     ...
                     &lt;ext:UBLExtensions&gt;
                     &lt;ext:UBLExtension&gt;
                     &lt;cbc:ID schemeAgencyID="!4.1!" schemeAgencyName="!4.2!"
                     schemeDataURI="!4.3!" schemeID="!4.4!" schemeName="!4.5!"
                     schemeURI="!4.6!" schemeVersionID="!4.7!"&gt;!4!&lt;/cbc:ID&gt;
                     &lt;cbc:Name languageID="!5.1!"&gt;!5!&lt;/cbc:Name&gt;
                     &lt;ext:ExtensionAgencyID schemeAgencyID="!6.1!"
                     schemeAgencyName="!6.2!" schemeDataURI="!6.3!" schemeID="!6.4!"
                     schemeName="!6.5!" schemeURI="!6.6!" schemeVersionID="!6.7!"
                     &gt;!6!&lt;/ext:ExtensionAgencyID&gt;
                     &lt;ext:ExtensionAgencyName languageID="!7.1!"
                     &gt;!7!&lt;/ext:ExtensionAgencyName&gt;
                     &lt;ext:ExtensionVersionID schemeAgencyID="!8.1!"
                     schemeAgencyName="!8.2!" schemeDataURI="!8.3!" schemeID="!8.4!"
                     schemeName="!8.5!" schemeURI="!8.6!" schemeVersionID="!8.7!"
                     &gt;!8!&lt;/ext:ExtensionVersionID&gt;
                     &lt;ext:ExtensionAgencyURI schemeAgencyID="!9.1!"
                     schemeAgencyName="!9.2!" schemeDataURI="!9.3!" schemeID="!9.4!"
                     schemeName="!9.5!" schemeURI="!9.6!" schemeVersionID="!9.7!"
                     &gt;!9!&lt;/ext:ExtensionAgencyURI&gt;
                     &lt;ext:ExtensionURI schemeAgencyID="!10.1!"
                     schemeAgencyName="!10.2!" schemeDataURI="!10.3!" schemeID="!10.4!"
                     schemeName="!10.5!" schemeURI="!10.6!" schemeVersionID="!10.7!"
                     &gt;!10!&lt;/ext:ExtensionURI&gt;
                     &lt;ext:ExtensionReasonCode languageID="!11.1!" l
                     istAgencyID="!11.2!" listAgencyName="!11.3!" listID="!11.4!"
                     listName="!11.5!" listSchemeURI="!11.6!" listURI="!11.7!"
                     listVersionID="!11.8!" name="!11.9!"&gt;!11!&lt;/ext:ExtensionReasonCode&gt;
                     &lt;ext:ExtensionReason languageID="!12.1!"
                     &gt;!12!&lt;/ext:ExtensionReason&gt;
                     &lt;ext:ExtensionContent&gt;
                     &lt;/ext:ExtensionContent&gt;
                     &lt;/ext:UBLExtension&gt;
                     &lt;/ext:UBLExtensions&gt;
                     &lt;cbc:UBLVersionID schemeAgencyID="!14.1!"
                     schemeAgencyName="!14.2!" schemeDataURI="!14.3!"
                     schemeID="!14.4!" schemeName="!14.5!" schemeURI="!14.6!"
                     schemeVersionID="!14.7!"&gt;!14!&lt;/cbc:UBLVersionID&gt;
                     ...
                     
                  </div>
               </div>
            </div><a name="ConfirmingUBLconformanceofacustomizationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e282" xml:id="subsetconf">
               <div class="title e283">Confirming UBL conformance of a customization</div>
               <div class="para e284">Using XPath files, both the customization definition and the customization pruning
                  filter can be validated against their requirements. 
                  <div class="xref e285" linkend="subsetprepfig"></div> illustrates the process flow where XPath files play a role.
               </div>
               <div class="figure e286" xml:id="subsetprepfig">
                  <div class="title e287">Customization schema and filter validation</div>
                  <div class="mediaobject e288">
                     <div class="imageobject e289">
                        <div class="metaBox e290"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e591').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e591" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e290'
                                 </span><span class="metaAttribute">fileref='../../../vol2/graphics/Holman01/Holman01-006.png'
                                 </span><span class="metaAttribute">format='png'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               <div class="para e291">At the top left the UBL Schema is translated into an XPath file.  This has already
                  been made publicly available on the OASIS web site [
                  <div class="xref e292" linkend="b_ubl2xpath"></div>].  Included with the files are the text reports and the instance reports for each
                  document type.  An instance report is an exhaustive instance in that each and every
                  element and attribute is instantiated (limited only by recursive references).  When
                  such an instance is passed through a customization filter, it should produce in the
                  filtered result a structure with one of every element and attribute of the customization
                  document model.
               </div>
               <div class="para e293">At the bottom left are three ways of expressing the document constraints of a customization
                  document model.  The top of the three shows a declarative approach that prunes the
                  UBL XPath file into a subset XPath file.  This necessarily produces an XPath file
                  where each and every element and attribute item listed and its cardinality satisfies
                  the cardinality of the UBL XPath file for the same document type.
               </div>
               <div class="para e294">The middle of the three shows some other customization definition that is arbitrarily
                  created by a community by whatever means.  When the community produces an XPath file
                  expressing all of the possible element and attribute items for their model, this can
                  be input to a process called Exhaustive Confirmation.
               </div>
               <div class="para e295">Likewise, when the community uses a schema to express the document constraints, and
                  that schema follows the UBL NDR, then the same UBL XSD to XPath File process can produce
                  the XPath file for the customization.  This XPath file can be input to the Exhaustive
                  Confirmation process.
               </div>
               <div class="para e296">Exhaustive confirmation is a comparison of each and every entry in customization XPath
                  file with the entries in the UBL XPath file.  When the cardinality of each customization
                  item doesn't violate the cardinality of the corresponding UBL item, then it is proven
                  that all instances of the customization definition or schema are instances of UBL.
                  This means that any system supporting UBL schemas will validate all instances of the
                  customization document model without fail.
               </div>
               <div class="para e297">Note that the UBL NDR requiring global declarations of the types of all elements implies
                  the mechanics of exhaustive confirmation can be reduced to a only a confirmation of
                  all parent/child relationships.  The complete XPath files are merely repetitions and
                  recursive applications of unchanging parent/child relationships.  If, however, it
                  were true for another project's NDR that types were not global and contextual differences
                  were introduced by a customization, then exhaustive confirmation would need to use
                  the complete XPath file and would successfully produce a correct result.
               </div>
               <div class="para e298">There is enough information in the customization XPath file that the customization
                  filter can be synthesized without human intervention.  XPath files are thus used to
                  methodically confirm both the definition of a customization and the filter stylesheet
                  labeled "F" in the flow described in 
                  <div class="xref e299" linkend="procmdl"></div>.  Again, the UBL NDR requiring global declarations of the types of all elements implies
                  the mechanics of this filter can be reduced.  In the case for UBL only a filter of
                  allowed parent/child relationships is sufficient, whereas a more general filter would
                  need to calculate more elaborate contextualization of allowed constructs.
               </div>
               <div class="para e300">The customization XPath file can be used to produce the text report which is useful
                  for developers and users of the customization.
                  
               </div>
               <div class="para e301">The customization XPath file can also produce an exhaustive instance.  The structure
                  of this exhaustive instance can then be compared against the structure of the filtered
                  UBL exhaustive instance.  This confirms the correct behavior of the customization
                  filter.
               </div>
            </div>
         </div>
      </div><a name="TradingpartneragreementsonvalueconstraintsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e302" xml:id="codelist">
         <div class="title e303">Trading partner agreements on value constraints</div>
         <div class="para e304">Any given business entity may have many different relationships or changing relationships
            with different trading partners.  This represents yet another perspective of different
            versions of UBL, one where the business is using different value constraints in UBL
            documents in different business scenarios.
         </div>
         <div class="para e305">By using UBL trading partners are agreeing to use the same document structures in
            which to place the information being exchanged.  But the constraints on the values
            used within the information itself could not possibly be mandated by the UBL committee
            or by the community of users defining a customization.  Therefore, the business entity
            needs different versions of value constraints for use in different and very subjective
            business situations.
         </div>
         <div class="para e306">Consider the controlled vocabulary of datum values used for codes and identifiers
            in an XML document.  For example, ISO has standardized mnemonic abbreviations as codes
            in a number of code lists.  For example, 
            <div class="code e307">USD</div>, 
            <div class="code e308">CAD</div> and 
            <div class="code e309">GBP</div> represent, respectively, the currency values for the US dollar, the Canadian dollar
            and the British pound.  Another list with mnemonic abbreviations is the list of country
            codes.  For example, 
            <div class="code e310">FR</div>, 
            <div class="code e311">DE</div> and 
            <div class="code e312">ES</div> represent, respectively, the country codes for France, Germany and Spain.  The UN/ECE
            has standardized non-mnemonic values for payment means such as 
            <div class="code e313">10</div>, 
            <div class="code e314">42</div> and 
            <div class="code e315">51</div> for, respectively, "cash", "payment to bank account" and "norme 6 97-Telereglement CFONB (French Organisation for Banking Standards) - Option
            A" (illustrating the compactness benefit of using abbreviated codes rather than long
            titles).
         </div>
         <div class="para e316">Historically, the constraints on item values have been codified in schemas along side
            constraints on document structures and lexical value structures.  In contrast, the
            UBL specification mandates only where information is found in an XML document (the
            document structures and the lexical structures), without constraining the values themselves.
            As illustrated in both 
            <div class="xref e317" linkend="validubl"></div> and 
            <div class="xref e318" linkend="procmdl"></div>, a pass on the instance validates the values used therein separately from the passes
            needed to confirm structural and lexical constraints.  This allows a standard UBL
            schema, or a customized schema created by a community of users, to be used by individuals
            in the community without any changes when different code and identifier values are
            needed for subjective business reasons.
         </div>
         <div class="para e319">Each business may have a number of versions of differing value constraints.  The versions
            may be distinguished by the practices or policies in place for different trading partners.
            The versions may be distinguished by changes within the business itself over time.
            Throughout all these differences, the structures mandated by the UBL committee or
            the community customization are not affected, only the values found within those structures.
         </div>
         <div class="para e320">Moreover, it may be necessary to use different versions of value constraints for the
            same information item found in different contexts of a single XML document.  As the
            UBL schemas are defined using global names and global types according to the NDR,
            it would not be possible in the schema to express different value constraints on two
            different items of the same name.
         </div>
         <div class="para e321">
            <div class="xref e322" linkend="cva"></div> illustrates the expression of codes in context using an external file called a Context/Value
            Association (CVA) file.
         </div>
         <div class="figure e323" xml:id="cva">
            <div class="title e324">Associating values with document contexts</div>
            <div class="mediaobject e325">
               <div class="imageobject e326">
                  <div class="metaBox e327"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e674').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e674" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e327'
                           </span><span class="metaAttribute">fileref='../../../vol2/graphics/Holman01/Holman01-007.png'
                           </span><span class="metaAttribute">format='png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e328">Consider, for example, that there are 75 different payment means represented by codes
            defined by the UN/ECE 4461 specification.  A business may wish to constrain payments
            for one trading partner to only cash (
            <div class="code e329">10</div>) and to all other trading partner either cash or certified cheque (
            <div class="code e330">25</div>).  The business is not interested in accepting instances from any trading partner
            claiming to pay by any of the other 73 means such as a payment into a bank account
            (
            <div class="code e331">42</div>).
         </div>
         <div class="para e332">UBL has codified all code lists using the OASIS Genericode 1.0 specification [
            <div class="xref e333" linkend="b_genericode"></div>].  The published payment means code list has 75 entries and is labeled "UN/ECE 4461".
            Other list-level meta data identifies the list from which the values are taken, thus
            indicating the standardized semantics of the codes to be implemented by applications.
            
            <div class="xref e334" linkend="codes"></div> illustrates items in three contexts of a single document where the first context
            uses values from the entire standardized list, the second context uses the subset
            of standardized values, and the third context uses a combination of a subset of standardized
            values extended by a custom value.
         </div>
         <div class="figure e335" xml:id="codes">
            <div class="title e336">Contextual uses of different versions of code lists</div>
            <div class="mediaobject e337">
               <div class="imageobject e338">
                  <div class="metaBox e339"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e698').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e698" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e339'
                           </span><span class="metaAttribute">fileref='../../../vol2/graphics/Holman01/Holman01-008.png'
                           </span><span class="metaAttribute">format='png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e340">Necessarily, the subset list cannot be labeled "UN/ECE 4461" because it is, in fact,
            not the UN/ECE list.  In this example it is labeled "Cash or Certified Cheque", but
            this may not be a name recognized by an application, and it could be an arbitrary
            name indicating use with a particular trading partner.  However, the values in that
            list have the same semantic meaning as the values in the standardized list.  An application
            knows the standardized values and would not recognize values from an ad hoc subset
            list if the list used arbitrary meta data.  To address this, a subset list is said
            to masquerade the list from which its values are taken.  For the purposes of application
            interpretation, the standardized semantics associated with the masqueraded list are
            implied by the values used from the masquerading list.  The application then can understand
            what is represented by the codes, regardless of which version of a subset list is
            in use.
         </div>
         <div class="para e341">It is important for a list maintainer to describe the values in the code list such
            that a user of the code list best understands the semantics of codes.  Values from
            each code list or identifier list may have value-level meta data.  The typical ISO
            or UN/CEFACT code list has only the code itself and its name to be used as a description.
            
            <div class="xref e342" linkend="codesmd"></div> illustrates the need for additional value-level meta data to disambiguate the simple
            name.  This example shows some of the meta data associated with values in the UN/ECE
            Recommendation 16 location code list "LOCODE".
         </div>
         <div class="figure e343" xml:id="codesmd">
            <div class="title e344">Value-level meta data</div>
            <div class="mediaobject e345">
               <div class="imageobject e346">
                  <div class="metaBox e347"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e710').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e710" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e347'
                           </span><span class="metaAttribute">fileref='../../../vol2/graphics/Holman01/Holman01-009.png'
                           </span><span class="metaAttribute">format='png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e348">Instance-level meta data is used by the author of the XML instance to disambiguate
            two codes that have the same value but different meanings.  In UBL, instance-level
            meta data is expressed in attributes of the element containing the code.  
            <div class="xref e349" linkend="codesilm"></div> illustrates three items using codes.
         </div>
         <div class="figure e350" xml:id="codesilm">
            <div class="title e351">Instance-level meta data</div>
            <div class="mediaobject e352">
               <div class="imageobject e353">
                  <div class="metaBox e354"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e720').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e720" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e354'
                           </span><span class="metaAttribute">fileref='../../../vol2/graphics/Holman01/Holman01-010.png'
                           </span><span class="metaAttribute">format='png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e355">The first code does not have instance-level meta data because it is unambiguous. 
            The second code indicates the semantics of "
            <div class="code e356">10</div>" are defined in the "UN/ECE 4461" list version "7A", even though the actual list
            being used is titled "Cash or Certified Cheque".  The third code indicates the semantics
            of the same value "
            <div class="code e357">10</div>" are defined in the alternative list.  The application thus can infer the document's
            intent of the use of the code.
         </div>
         <div class="para e358">It should be noted that the UN/CEFACT organization publishes their code lists on a
            semi-annual basis.  Code "
            <div class="code e359">10</div>" in the early 2007 ("7A") list might have its meaning changed in the late 2007 ("7B")
            list.  If it is important to the document that the semantics be distinguished, then
            it is important to indicate the version in the instance-level meta data.
         </div>
         <div class="para e360">
            <div class="xref e361" linkend="clover"></div> illustrates the Schematron-based creation of the XSLT stylesheet labeled "2" used
            in 
            <div class="xref e362" linkend="validubl"></div>.
         </div>
         <div class="figure e363" xml:id="clover">
            <div class="title e364">Validation artefact generation</div>
            <div class="mediaobject e365">
               <div class="imageobject e366">
                  <div class="metaBox e367"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e744').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e744" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e367'
                           </span><span class="metaAttribute">fileref='../../../vol2/graphics/Holman01/Holman01-011.png'
                           </span><span class="metaAttribute">format='png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e368">The context/value association (CVA) file labeled "3" associates XML document contexts
            with the codes in the genericode files labeled "4".  Since Schematron allows for the
            specification of arbitrary business rules, these can be folded into the process in
            the generation of the single assertion validation stylesheet "2".
         </div>
         <div class="para e369">The versions of value validations when using UBL are, therefore, specified by different
            combinations of CVA files, genericode files and business rules.  When engaging in
            business with different trading partners or in different business situations, the
            user can decide which version of value validation constraints to apply to the document.
         </div>
      </div><a name="ConclusionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e370">
         <div class="title e371">Conclusion</div>
         <div class="para e372">
            <div class="xref e373" linkend="versubl"></div> illustrates there are three areas when using the OASIS Universal Business Language
            where versions of document constraints come into play in the validation of UBL XML
            documents:  the base schema published by the UBL committee, any customization schema
            published by a user community for use in a particular business scenario called profile,
            and the values used within instances of those schemas in particular business relationships.
         </div>
         <div class="figure e374" xml:id="versubl">
            <div class="title e375">Different versions of UBL document constraints</div>
            <div class="mediaobject e376">
               <div class="imageobject e377">
                  <div class="metaBox e378"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e761').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e761" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e378'
                           </span><span class="metaAttribute">fileref='../../../vol2/graphics/Holman01/Holman01-012.png'
                           </span><span class="metaAttribute">format='png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e379">An instance can assert it satisfies a particular set of structural and lexical constraints
            through the three optional elements 
            <div class="code e380">UBLVersionID</div>, 
            <div class="code e381">CustomizationID</div> and 
            <div class="code e382">ProfileID</div>.  The committee's backwards compatible minor-versioning strategy ensures a validating
            application can access this information in instances of older versions by the committee
            policy of introducing only optional constructs.  The committee's proposed forward
            compatible processing model ensures a validating application can access this information
            in instances of newer versions by removing from an instance any constructs that are
            not defined by the supported older version.
         </div>
         <div class="para e383">A user community can create a conformant customized subset and/or extended version
            of the UBL schemas by removing optional standardized constructs and by adding non-standardized
            constructs only underneath the document's extension point.
         </div>
         <div class="para e384">A individual in that community can choose from different versions of value constraints
            to layer on top of the community's structural and lexical constraints based on arbitrary
            trading partner requirements.  These versions are expressed as code and identifier
            lists combined with business rules placed on the values.
         </div>
         <div class="para e385">This illustrates how a single XML vocabulary can be deployed into a heterogeneous
            network of differing implementation levels and different business contexts, while
            still promoting interoperability and standardized committee structures.  The proposed
            processing model supports applications relying on schema-validity for instance inspection.
            Using this model, any individual will be able to access an instance from any other
            individual in any UBL community.  Combining the document constraints with the out-of-band
            business constraints any two parties can successfully interchange information without
            schema validity being a barrier to access.
         </div>
      </div><a name="BibliographyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e386">
         <div class="title e387">Bibliography</div>
         <div class="bibliomixed e388" xml:id="b_ccts" xreflabel="CCTS">Core Components Technical Specification - Part 8 of the ebXML Framework 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e389" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.unece.org/cefact/ebxml/CCTS_V2-01_Final.pdf</div> Version 2.01 2003-11-15
         </div>
         <div class="bibliomixed e390" xml:id="b_craneres" xreflabel="Crane Resources"> Crane Softwrights Ltd.; Free developer resources 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e391" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.CraneSoftwrights.com/links/res-ublo.htm</div>
         </div>
         <div class="bibliomixed e392" xml:id="b_genericode" xreflabel="genericode">OASIS Genericode 1.0 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e393" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"> http://docs.oasis-open.org/codelist/genericode</div>
         </div>
         <div class="bibliomixed e394" xml:id="b_ublhisc" xreflabel="HISC">UBL Human Interface Subcommittee 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e395" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.oasis-open.org/committees/ubl/hisc</div>
         </div>
         <div class="bibliomixed e396" xml:id="b_ndr2" xreflabel="NDR2.0">UBL Naming and Design Rules 2.0; Editors: Mavis Cournane, Michael Grimley  (draft) 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e397" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.oasis-open.org/committees/document.php?document_id=22992</div>
         </div>
         <div class="bibliomixed e398" xml:id="b_oioubl" xreflabel="OIOUBL">OIOUBL  - Offentlig Information Online - Universal Business Language 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e399" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.oioubl.info/classes/en/index.html</div>
            
         </div>
         <div class="bibliomixed e400" xml:id="b_tagevl" xreflabel="TAG1">Extending and Versioning Languages: Strategies; Editor: David Orchard  (draft) 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e401" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/2001/tag/doc/versioning-strategies</div>
         </div>
         <div class="bibliomixed e402" xml:id="b_ubl2" xreflabel="UBL2.0">UBL 2.0; Editors: Jon Bosak, Tim McGrath, G. Ken Holman 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e403" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://docs.oasis-open.org/ubl/os-UBL-2.0/UBL-2.0.html</div>
         </div>
         <div class="bibliomixed e404" xml:id="b_ubl2xpath" xreflabel="UBL-XPath">UBL 2.0 XPath files 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e405" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://docs.oasis-open.org/ubl/submissions/XPath-files/</div>
         </div>
         <div class="bibliomixed e406" xml:id="b_xpath10" xreflabel="XPath 1.0">James Clark, Steve DeRose XML Path Language (XPath) Version 1.0 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e407" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/1999/REC-xpath-19991116</div> 1999-11-16
         </div>
         <div class="bibliomixed e408" xml:id="b_xpathfile" xreflabel="XPath File">G. Ken Holman XPath file models 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e409" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.oasis-open.org/committees/document.php?document_id=23525</div> 2007-04-14
         </div>
         <div class="bibliomixed e410" xml:id="b_xsd" xreflabel="XSD">Henry S. Thomson, et al.; XML Schema Part 1: Structures Second Edition 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e411" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/2004/PER-xmlschema-1-20040318</div> 2004-03-18
         </div>
         <div class="bibliomixed e412" xml:id="b_xslt10" xreflabel="XSLT 1.0">James Clark; XSL Transformations (XSLT) Version 1.0 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e413" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/1999/REC-xslt-19991116</div> 1999-11-16
         </div>
      </div>
   </div>
</div>