<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#TEIFeatureStructuresasaRepresentationFormatforMultipleAnnotationandGenericXML%0ADocumentsANCHOR" name="TEIFeatureStructuresasaRepresentationFormatforMultipleAnnotationandGenericXML%0ADocumentsTOC">TEI Feature Structures as a Representation Format for Multiple Annotation and Generic
               XML
               Documents</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#FeatureStructuresANCHOR" name="FeatureStructuresTOC">Feature Structures</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#FeatureStructuresinaNutshellANCHOR" name="FeatureStructuresinaNutshellTOC">Feature Structures in a Nutshell</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TheTEITagSetforFeatureStructuresANCHOR" name="TheTEITagSetforFeatureStructuresTOC">The TEI Tag Set for Feature Structures</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#RepresentationandTransformationANCHOR" name="RepresentationandTransformationTOC">Representation and Transformation</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#RepresentationofXMLDocumentsviaTEIFeatureStructuresANCHOR" name="RepresentationofXMLDocumentsviaTEIFeatureStructuresTOC">Representation of XML Documents via TEI Feature Structures</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AspectsoftheXSLTImplementationoftheTransformationANCHOR" name="AspectsoftheXSLTImplementationoftheTransformationTOC">Aspects of the XSLT Implementation of the Transformation</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#SummaryandOutlookANCHOR" name="SummaryandOutlookTOC">Summary and Outlook</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#Appendix:ResultDocumentfortheAnnotationDataExamplesANCHOR" name="Appendix:ResultDocumentfortheAnnotationDataExamplesTOC">Appendix: Result Document for the Annotation Data Examples</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BibliographyANCHOR" name="BibliographyTOC">Bibliography</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">AGR</div>
         <div class="singletermTERMS">ATTRIBUTES</div>
         <div class="singletermTERMS">apply-templates</div>
         <div class="singletermTERMS">atomic</div>
         <div class="singletermTERMS">attribute value matrix</div>
         <div class="singletermTERMS">attribute nodes</div>
         <div class="singletermTERMS">August 11 - 14, 2009</div>
         <div class="singletermTERMS">Andreas</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">binary</div>
         <div class="singletermTERMS">bag</div>
         <div class="singletermTERMS">Beginning XSLT 2.0: From Novice to Professional.</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2009</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">CAT</div>
         <div class="singletermTERMS">CONTENT</div>
         <div class="singletermTERMS">CHILDREN</div>
         <div class="singletermTERMS">custom-meta structures</div>
         <div class="singletermTERMS">complex</div>
         <div class="singletermTERMS">collection value</div>
         <div class="singletermTERMS">Custom Metadata Group</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">DATA</div>
         <div class="singletermTERMS">DOCUMENTS</div>
         <div class="singletermTERMS">document()</div>
         <div class="singletermTERMS">document nodes in default mode</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">element</div>
         <div class="singletermTERMS">encoding of feature structures as SGML/XML markup</div>
         <div class="singletermTERMS">Eine XML-Kodierung f√ºr AVM-Beschreibungen.</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
         <div class="singletermTERMS">fs</div>
         <div class="singletermTERMS">FIRST</div>
         <div class="singletermTERMS">FIRST/REST</div>
         <div class="singletermTERMS">false</div>
         <div class="singletermTERMS">Feature structures</div>
         <div class="singletermTERMS">features</div>
         <div class="singletermTERMS">feature structures</div>
         <div class="singletermTERMS">feature structure descriptions</div>
         <div class="singletermTERMS">Feature System Declarations</div>
         <div class="singletermTERMS">Feature Structures</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
         <div class="singletermTERMS">graph display</div>
         <div class="singletermTERMS">generalization</div>
         <div class="singletermTERMS">Graph Theory</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">hierarchical relationships</div>
         <div class="singletermTERMS">Head-Driven Phrase Structure Grammar.</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">ISO</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
         <div class="singletermTERMS">jens.stegmann@googlemail.com</div>
         <div class="singletermTERMS">Jens</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">list</div>
         <div class="singletermTERMS">linguistic rules</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">multiple annotations</div>
         <div class="singletermTERMS">multi-rooted tree</div>
         <div class="singletermTERMS">Markup Overlap: A Review and a Horse.</div>
         <div class="singletermTERMS">Making CONCUR work.</div>
         <div class="singletermTERMS">Modelling Linguistic Data Structures.</div>
         <div class="singletermTERMS">Multiple Hierarchies</div>
         <div class="singletermTERMS">Multiple Annotation</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">np</div>
         <div class="singletermTERMS">NUM</div>
         <div class="singletermTERMS">name</div>
         <div class="singletermTERMS">numeric</div>
         <div class="singletermTERMS">NAME</div>
         <div class="singletermTERMS">not($dataRepr)</div>
         <div class="singletermTERMS">NITE XML</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">org</div>
         <div class="singletermTERMS">overlapping structures</div>
         <div class="singletermTERMS">Overlapping Structures</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">PER</div>
         <div class="singletermTERMS">partial</div>
         <div class="singletermTERMS">P3</div>
         <div class="singletermTERMS">P4</div>
         <div class="singletermTERMS">P5</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">REST</div>
         <div class="singletermTERMS">representation alternatives</div>
         <div class="singletermTERMS">representation alternative I</div>
         <div class="singletermTERMS">representation alternative II</div>
         <div class="singletermTERMS">Representation of overlapping structures.</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">sing</div>
         <div class="singletermTERMS">symbol</div>
         <div class="singletermTERMS">string</div>
         <div class="singletermTERMS">set</div>
         <div class="singletermTERMS">SequenceProcessing</div>
         <div class="singletermTERMS">secondary</div>
         <div class="singletermTERMS">str:characters</div>
         <div class="singletermTERMS">structure sharing</div>
         <div class="singletermTERMS">Subsumption</div>
         <div class="singletermTERMS">sequential relations</div>
         <div class="singletermTERMS">stylesheet design patterns</div>
         <div class="singletermTERMS">Stegmann</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">third</div>
         <div class="singletermTERMS">true</div>
         <div class="singletermTERMS">TIER</div>
         <div class="singletermTERMS">TYPE</div>
         <div class="singletermTERMS">text</div>
         <div class="singletermTERMS">TEI feature structures</div>
         <div class="singletermTERMS">typed</div>
         <div class="singletermTERMS">the push and the pull processing paradigm</div>
         <div class="singletermTERMS">text nodes</div>
         <div class="singletermTERMS">Towards validation of concurrent markup.</div>
         <div class="singletermTERMS">TEI</div>
         <div class="singletermTERMS">Text Encoding Initiative</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
         <div class="singletermTERMS">unification</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
         <div class="singletermTERMS">value</div>
         <div class="singletermTERMS">vColl</div>
         <div class="singletermTERMS">vLabel</div>
         <div class="singletermTERMS">VALUE</div>
         <div class="singletermTERMS">values</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">xmls2avm.xsl</div>
         <div class="singletermTERMS">XQuery 1.0 and XPath 2.0 Data Model</div>
         <div class="singletermTERMS">XSLT 2.0</div>
         <div class="singletermTERMS">XCONCUR</div>
         <div class="singletermTERMS">XSLT 2.0 and XPath 2.0 Programmer's Reference.</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="TEIFeatureStructuresasaRepresentationFormatforMultipleAnnotationandGenericXML%0ADocumentsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.2">
      <div class="title e1">TEI Feature Structures as a Representation Format for Multiple Annotation and Generic
         XML
         Documents
      </div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2009</div>
            <div class="confdates e5">August 11 - 14, 2009</div>
         </div>
         <div class="abstract e6">
            <div class="para e7"> Feature structures are mathematical entities (rooted labeled directed acyclic graphs)
               that
               can be represented as graph displays, attribute value matrices or as XML adhering
               to the
               constraints of a specialized TEI tag set. We demonstrate that this latter ISO-standardized
               format can be used as an integrative storage and exchange format for sets of multiple
               annotation
               XML documents. This specific domain of application is rooted in the approach of multiple
               annotations, which marks a possible solution for XML-compliant markup in scenarios
               with
               conflicting annotation hierarchies. A more extreme proposal consists in the possible
               use as a
               meta-representation format for generic XML documents. For both scenarios our strategy
               concerning
               pertinent feature structure representations is grounded on the XDM (XQuery 1.0 and
               XPath 2.0
               Data Model). The ubiquitous hierarchical and sequential relationships within XML documents
               are
               represented by specific features that take ordered list values. The mapping to the
               TEI feature
               structure format has been implemented in the form of an XSLT 2.0 stylesheet. It can
               be
               characterized as exploiting aspects of both the push and pull processing paradigm
               as
               appropriate. An indexing mechanism is provided with regard to the multiple annotation
               documents
               scenario. Hence, implicit links concerning identical primary data are made explicit
               in the
               result format. In comparison to alternative representations, the TEI-based format
               does well in
               many respects, since it is both integrative and well-formed XML. However, the result
               documents
               tend to grow very large depending on the size of the input documents and their respective
               markup
               structure. This may also be considered as a downside regarding the proposed use for
               generic XML
               documents. On the positive side, it may be possible to achieve a hookup to methods
               and
               applications that have been developed for feature structure representations in the
               fields of
               (computational) linguistics and knowledge representation. 
            </div>
         </div>
         <div class="author e8">
            <div class="personname e9">
               <div class="firstname e10">Jens</div>
               <div class="surname e11">Stegmann</div>
            </div>
            <div class="personblurb e12">
               <div class="para e13">Jens Stegmann studied linguistics, psychology and computer science at Bielefeld
                  University. Parts of this paper deal with aspects of his Master thesis.
               </div>
            </div>
            <div class="affiliation e14">
               <div class="orgname e15">Bielefeld University</div>
            </div>
            <div class="email e16">jens.stegmann@googlemail.com</div>
         </div>
         <div class="author e17">
            <div class="personname e18">
               <div class="firstname e19">Andreas</div>
               <div class="surname e20">Witt</div>
            </div>
            <div class="personblurb e21">
               <div class="para e22">Witt received his Ph.D. in Computational Linguistics and Text Technology from the
                  Bielefeld University in 2002 (dissertation title: Multiple Informationsstrukturierung
                  mit
                  Auszeichnungssprachen. XML-basierte Methoden und deren Nutzen f√ºr die Sprachtechnologie).
                  
               </div>
               <div class="para e23">After graduating in 1996, he started as a researcher and instructor in Computational
                  Linguistics and Text Technology. He was heavily involved in the establishment of the
                  minor
                  subject Text Technology in Bielefeld University¬¥s Magister and B.A. program in 1999
                  and 2002
                  respectively. After his Ph.D. in 2002 he became an assistant lecturer, still at the
                  Text
                  Technology group in Bielefeld. In 2006 he moved to T√ºbingen University, where he was
                  involved
                  in a project on "Sustainability of Linguistic Resources" and in projects on the
                  interoperability of language data. Since 2009 he is senior researcher at "Institut
                  f√ºr Deutsche
                  Sprache" (Institute for the German Language) in Mannheim. 
               </div>
               <div class="para e24">Witt is and was a member of several research organizations, amongst them the TEI Special
                  Interest Group on overlapping markup, for which he was involved in the writing of
                  the latest
                  version of the chapter "Multiple Hierarchies", which is included in TEI-Guidelines
                  P5.
               </div>
               <div class="para e25">Witt's main research interests deal with questions on the use and limitations of markup
                  languages for the linguistic description of language data.
               </div>
            </div>
            <div class="affiliation e26">
               <div class="orgname e27">Institute for the German Language (IDS), Mannheim</div>
            </div>
            <div class="email e28">witt@ids-mannheim.de</div>
         </div>
         <div class="legalnotice e29">
            <div class="para e30">Copyright ¬© 2009 by the authors.  Used with
               permission.
            </div>
         </div>
         <div class="keywordset e31" role="author">
            <div class="keyword e32">Overlapping Structures</div>
            <div class="keyword e33">Multiple Hierarchies</div>
            <div class="keyword e34">Multiple Annotation</div>
            <div class="keyword e35">TEI</div>
            <div class="keyword e36">Text Encoding Initiative</div>
            <div class="keyword e37">Feature Structures</div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e38" xml:id="s1" xreflabel="‚ÄúIntroduction‚Äù">
         <div class="title e39">Introduction</div>
         <div class="para e40"> As the title suggests, this contribution describes aspects of the use of a certain
            representation format ("TEI Feature Structures") with regard to a specific domain
            of application
            ("Multiple Annotation") and also concerning a second, much more general kind of scenario
            ("Generic XML Documents"). 
         </div>
         <div class="para e41"> TEI P5 
            <div class="xref e42" linkend="p5"></div> compliant encodings of feature structures, which we refer to as
            
            <div class="emphasis e43">TEI feature structures</div> in this article, will receive much of our attention.
            
            <div class="xref e44" linkend="f1"></div> shows a simple example: the encoding of a certain feature structure
            
            <div class="emphasis e45">F
               <div class="subscript e46">1</div>
            </div>. 
            <div class="emphasis e47">F
               <div class="subscript e48">1</div>
            </div>
            serves to characterize a specific class of linguistic entities here, namely nominal
            phrases of
            the third person singular kind.
         </div>
         <div class="figure e49" xml:id="f1" xreflabel="Figure 1">
            <div class="title e50">TEI Encoding of a Feature Structure 
               <div class="emphasis e51">F
                  <div class="subscript e52">1</div>
               </div>
            </div>
            <div class="programlisting e53" xml:space="preserve">
               &lt;fs&gt;
               &lt;f name="CAT"&gt;
               &lt;symbol value="np" /&gt;
               &lt;/f&gt;
               &lt;f name="AGR"&gt;
               &lt;fs&gt;
               &lt;f name="NUM"&gt;
               &lt;symbol value="sing" /&gt;
               &lt;/f&gt;
               &lt;f name="PER" /&gt;
               &lt;symbol value="third" /&gt;
               &lt;/f&gt;
               &lt;/fs&gt;
               &lt;/f&gt;
               &lt;/fs&gt;
               
            </div>
         </div>
         <div class="para e54"> There are two features on the top-level of 
            <div class="emphasis e55">F
               <div class="subscript e56">1</div>
            </div>:
            
            <div class="code e57">CAT</div> with its value 
            <div class="code e58">np</div> and 
            <div class="code e59">AGR</div> with an associated complex
            value, which is a feature structure itself. This latter embedded structure consists
            of the
            feature-value pairs 
            <div class="code e60">NUM</div> with value 
            <div class="code e61">sing</div> and 
            <div class="code e62">PER</div> with value
            
            <div class="code e63">third</div>. We will return to the theme of encoding
            
            <div class="emphasis e64">F
               <div class="subscript e65">1</div>
            </div> below (
            <div class="xref e66" linkend="s2.1"></div>). Since we will use
            the same example there, it will be possible to compare different syntaxes for the
            display of
            feature structures in a straightforward way. We do not delve into details connected
            with the XML
            syntax exemplified in 
            <div class="xref e67" linkend="f1"></div> here, since this will be the topic of another part of
            this article (
            <div class="xref e68" linkend="s2.2"></div>). In the rest of this introductory section, we shall try to
            shed some light upon the two application domains that have been mentioned above. 
         </div>
         <div class="para e69"> The more specific scenario consists in the integrative representation of annotation
            documents along the approach of 
            <div class="emphasis e70">multiple annotations</div>
            
            <div class="xref e71" linkend="witt2004"></div>. The multiple annotations approach marks a possible solution with
            regard to the markup of overlapping structures. Linguists, e.g., do often encounter
            XML-related
            problems, when they try to annotate a common core of linguistic data according to
            different
            levels of linguistic analysis (phonology, morphology, syntax, semantics, and pragmatics).
            The
            most straightforward way of marking things up might involve the incorporation of crossing
            edges.
            Such, however, is prohibited on grounds of XML's foundational tree structure. It can
            be argued
            that such configurations of data with conflicting hierarchies require a different
            kind of data
            structure, i.e., a 
            <div class="emphasis e72">multi-rooted tree</div> (
            <div class="xref e73" linkend="carletta2003"></div>,
            <div class="xref e74" linkend="woerner2006"></div> and 
            <div class="xref e75" linkend="witt2007"></div>). A multi-rooted tree consists of several
            trees that span over the same data leaves. The multiple annotations approach now proposes
            to mark
            up each description level / tree as a document instance in its own right. This allows
            for each
            document to consist of well-formed XML, the modeling of alternative annotations is
            possible, the
            levels can be viewed separately, and new levels can be added at any time 
            <div class="xref e76" linkend="witt2004"></div>. However, such documents may seem to be somewhat unrelated and independent of each
            other. Witt
            therefore proposes to regard the primary textual data, which have to be identical
            across all such
            annotation documents, as the defining implicit link between them. Of course, it would
            be
            desirable to bring such implicit linkages forward as explicit ones. This can be done,
            e.g.,
            during the course of a transformation to an adequate representation format. We intend
            to show
            that the ISO-standardized TEI tag set for the representation of feature structures
            can be such a
            representation format. Pros, cons and alternative strategies with respect to
            
            <div class="emphasis e77">overlapping structures</div> are discussed in the pertinent literature, compare
            
            <div class="xref e78" linkend="derose2004"></div>, 
            <div class="xref e79" linkend="sperberg-mcqueen2007"></div> and 
            <div class="xref e80" linkend="carletta2007"></div> for an overview.
         </div>
         <div class="para e81"> Besides the different stages of the TEI recommendations (
            <div class="xref e82" linkend="p3"></div>, 
            <div class="xref e83" linkend="p4"></div> and 
            <div class="xref e84" linkend="p5"></div>), at least one alternative proposal concerning the
            
            <div class="emphasis e85">encoding of feature structures as SGML/XML markup</div> has been brought forward
            in the literature 
            <div class="xref e86" linkend="sailer2001"></div>. However, to the best of our knowledge, no one has
            yet discussed the question how a representation in the opposite direction could look
            like, i.e.,
            
            <div class="emphasis e87">encoding SGML/XML markup documents as feature structures</div>. We will come up
            with an original answer to this question, as we succeed concerning the more specific
            goal of
            finding a way to represent sets of multiple annotation documents as TEI feature structures.
            Feature Structures can be regarded as a general type of data structure and there may
            be specific
            advantages associated with their use as a meta-representation format. We will speculate
            about
            related aspects in the last section of this paper. 
         </div>
         <div class="para e88"> The structure for the rest of this article looks as follows. In the next section
            (
            <div class="xref e89" linkend="s2"></div>), we characterize feature structures as mathematical entities and introduce three
            syntaxes for means of visualization and encoding: graph displays, attribute value
            matrices and
            the pertinent TEI tag set. Ways to represent XML documents as TEI feature structures
            and aspects
            of the XSLT-implemented transformation from multiple annotation and generic XML documents
            to the
            integrative TEI feature structure format are discussed in the next section (
            <div class="xref e90" linkend="s3"></div>). Finally, we summarize our findings, take up some loose ends from the previous sections
            and
            discuss the relative advantages and disadvantages of representations in terms of TEI
            feature
            structures in the last section (
            <div class="xref e91" linkend="s4"></div>) of this contribution. 
         </div>
      </div><a name="FeatureStructuresANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e92" xml:id="s2" xreflabel="‚ÄúFeature Structures‚Äù">
         <div class="title e93">Feature Structures</div><a name="FeatureStructuresinaNutshellANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e94" xml:id="s2.1" xreflabel="‚ÄúFeature Structures in a Nutshell‚Äù">
            <div class="title e95">Feature Structures in a Nutshell</div>
            <div class="para e96">
               <div class="emphasis e97">Feature structures</div> are a common means of representation in formal
               linguistic theory.
               <div class="popupBox e98">
                  <div class="popupLabel" onmouseover="$('#d1e200').show('1000');" onmouseout="$('#d1e200').hide('1000');">[ footnote ]</div>
                  <div id="d1e200" style="display: none;">
                     <div class="footnote">
                        <div class="para e99">There are equivalent structures in other environments, too, as one of our anonymous
                           reviewers remarked. Compare the National Library of Medicine's 
                           <div class="emphasis e100">custom-meta
                              structures
                           </div>
                           
                           <div class="xref e101" linkend="nlm"></div>, for example. 
                        </div>
                     </div>
                  </div>
               </div> Their use is most prominent in certain variants of generative grammar 
               <div class="xref e102" linkend="shieber1986"></div>
               
               <div class="popupBox e103">
                  <div class="popupLabel" onmouseover="$('#d1e211').show('1000');" onmouseout="$('#d1e211').hide('1000');">[ footnote ]</div>
                  <div id="d1e211" style="display: none;">
                     <div class="footnote">
                        <div class="para e104">Namely unification-based grammars, whose name derives from the most important operation
                           on feature structures, i.e., unification.
                        </div>
                     </div>
                  </div>
               </div>, but not constrained to the syntactic level of analysis, e.g., there are linguistic
               applications in phonology, morphology, semantics and pragmatics, too. Furthermore,
               feature
               structures can be characterized as a general purpose data structure 
               <div class="xref e105" linkend="iso24610"></div>
               with possible applications in the vast field of knowledge representation. Hence, their
               usefulness is by no means constrained to linguistic investigations alone.
            </div>
            <div class="para e106"> From a mathematical stance, there are at least two perspectives on feature structures
               
               <div class="xref e107" linkend="shieber1986"></div>. On the one hand, a feature structure can be construed as a
               partial function from a set of 
               <div class="emphasis e108">features</div> to a set of
               
               <div class="emphasis e109">values</div>. The value associated with a certain feature can be either
               
               <div class="emphasis e110">atomic</div>, e.g., a specific symbolic value as 
               <div class="code e111">element</div> or a
               binary value like 
               <div class="code e112">true</div>, or it may be 
               <div class="emphasis e113">complex</div>. The latter means
               that it can be a full-blown feature structure itself or it may be of a 
               <div class="emphasis e114">collection
                  value
               </div> type like a set or a list of, again, possibly complex values. We will come
               upon numerous examples below. Due to the availability of complex values, feature structures
               can
               embed other feature structures in value position and, hence, provide a considerable
               degree of
               representational articulateness. Note that there will be no significance to the order
               of
               features that are located on the same hierarchical level within a feature structure.
            </div>
            <div class="para e115">Another mathematical perspective derives from graph theory and leads to the
               characterization of feature structures as rooted labeled directed (acyclic)
               <div class="popupBox e116">
                  <div class="popupLabel" onmouseover="$('#d1e245').show('1000');" onmouseout="$('#d1e245').hide('1000');">[ footnote ]</div>
                  <div id="d1e245" style="display: none;">
                     <div class="footnote">
                        <div class="para e117">Some formalizations of feature structures allow cycles and it can also be argued that
                           cyclic structures may be needed for the representation of certain phenomena as the
                           liar's
                           paradox ("This statement is false.").
                        </div>
                     </div>
                  </div>
               </div> graphs. Graphs 
               <div class="xref e118" linkend="diestel2005"></div> are mathematical entities that consist
               of sets of nodes and edges. We can think of the edges of a graph as connecting its
               nodes. Graphs
               can be depicted in an intuitively appealing way as diagram displays. The labeled edges
               represent
               the features, the leaf nodes represent the atomic values, and the inner nodes, if
               any, represent
               the complex values of a feature structure. 
               <div class="xref e119" linkend="f2"></div> is an example 
               <div class="emphasis e120">graph
                  display
               </div> of the feature structure 
               <div class="emphasis e121">F
                  <div class="subscript e122">1</div>
               </div>,
               compare 
               <div class="xref e123" linkend="f1"></div> in the preceding section for the TEI counterpart. 
            </div>
            <div class="figure e124" xml:id="f2" xreflabel="Figure 2">
               <div class="title e125">Graph Display of the Feature Structure
                  
                  <div class="emphasis e126">F
                     <div class="subscript e127">1</div>
                  </div>
               </div>
               <div class="mediaobject e128">
                  <div class="imageobject e129">
                     <div class="metaBox e130"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e273').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e273" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e130'
                              </span><span class="metaAttribute">fileref='../../../vol3/graphics/Stegmann01/Stegmann01-001.jpg'
                              </span><span class="metaAttribute">format='jpg'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e131"> There is an alternative to the visualization of feature structures as graph displays.
               It
               consists in the use of attribute value matrices.
               <div class="popupBox e132">
                  <div class="popupLabel" onmouseover="$('#d1e276').show('1000');" onmouseout="$('#d1e276').hide('1000');">[ footnote ]</div>
                  <div id="d1e276" style="display: none;">
                     <div class="footnote">
                        <div class="para e133">Some linguistic theories use different notations for (total) models vs. (partial)
                           descriptions. For example, HPSG 
                           <div class="xref e134" linkend="pollard1994"></div> uses graph displays for models
                           and AVMs for descriptions.
                        </div>
                     </div>
                  </div>
               </div> In 
               <div class="emphasis e135">attribute value matrix</div> notation, the features are written  to the left of their associated values and there
               are brackets that indicate the
               scope of the (sub-)feature structure(s) involved.
               <div class="popupBox e136">
                  <div class="popupLabel" onmouseover="$('#d1e285').show('1000');" onmouseout="$('#d1e285').hide('1000');">[ footnote ]</div>
                  <div id="d1e285" style="display: none;">
                     <div class="footnote">
                        <div class="para e137">Feature names are usually capitalized on grounds of a notational convention. </div>
                     </div>
                  </div>
               </div> 
               <div class="xref e138" linkend="f3"></div> shows
               
               <div class="emphasis e139">F
                  <div class="subscript e140">1</div>
               </div> in attribute value matrix notation, compare
               
               <div class="xref e141" linkend="f1"></div> and 
               <div class="xref e142" linkend="f2"></div> above for the TEI- and graph display
               counterparts. Concerning the forthcoming examples in this article, we will only use
               the TEI
               format and the attribute value matrix notation.
            </div>
            <div class="figure e143" xml:id="f3" xreflabel="Figure 3">
               <div class="title e144">Attribute Value Matrix Notation of the Feature Structure
                  
                  <div class="emphasis e145">F
                     <div class="subscript e146">1</div>
                  </div>
               </div>
               <div class="mediaobject e147">
                  <div class="imageobject e148">
                     <div class="metaBox e149"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e310').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e310" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e149'
                              </span><span class="metaAttribute">fileref='../../../vol3/graphics/Stegmann01/Stegmann01-002.jpg'
                              </span><span class="metaAttribute">format='jpg'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e150"> Feature structures list correct information and only correct information, but they
               do not
               necessarily contain all the correct information with regard to a specific object,
               i.e., they may
               be of a 
               <div class="emphasis e151">partial</div> nature.
               <div class="popupBox e152">
                  <div class="popupLabel" onmouseover="$('#d1e316').show('1000');" onmouseout="$('#d1e316').hide('1000');">[ footnote ]</div>
                  <div id="d1e316" style="display: none;">
                     <div class="footnote">
                        <div class="para e153">HPSG theoreticians 
                           <div class="xref e154" linkend="pollard1994"></div> draw a distinction between
                           
                           <div class="emphasis e155">feature structures</div>, which can be characterized as total objects in the
                           sense of containing all the relevant specifications with respect to the objects they
                           are a
                           model of, and 
                           <div class="emphasis e156">feature structure descriptions</div>, which are partial
                           descriptions of feature structures. From this perspective, feature structures and
                           feature
                           structure descriptions belong to different theoretical realms (model vs. formalism).
                           We will
                           not delve deeper into this discussion here and continue with our usage of the term
                           feature
                           structure for partial objects also. 
                        </div>
                     </div>
                  </div>
               </div> Partiality can be a good thing, since it allows for feature structures to capture
               generalizations via the underspecification of certain properties.
            </div>
            <div class="para e157">When features have identical values, there are two scenarios to consider: the values
               can be
               either type- or token-identical. If the values are merely type-identical, we can characterize
               them as being independent of one another. A hypothetical change to one of the values
               would have
               no effect on the other values involved. However, in case of token-identity the features
               are
               associated with one and the same value token and, hence, are dependent on it. A change
               to the
               token would affect all the features that reference it. This latter scenario of token-identity
               is
               also called coreference, 
               <div class="emphasis e158">structure sharing</div> or reentrancy. In attribute
               value matrix notation, it can be indicated by means of co-indexed boxes that either
               act as a
               referring place-holder in value position or they may be written before a certain value
               token and
               such all occurrences of the index within the feature structure are bound to that value.
               We will
               come upon an example in the next subsection of this article, cf. 
               <div class="xref e159" linkend="f5"></div> below. At
               the graph display level, we would use edges that lead into one and the same node in
               order to
               indicate structure sharing. 
            </div>
            <div class="para e160"> An important operation upon feature structures is unification 
               <div class="xref e161" linkend="shieber1986"></div>. The foundational idea is fairly simple and can be sketched as follows: the result
               of the
               unification of compatible feature structures is the most general feature structure
               that contains
               all the information of the unified feature structures. Technically, unification is
               defined via
               the auxiliary concept of subsumption. 
               <div class="emphasis e162">Subsumption</div> implements an intuitive
               concept of specificity and wealth of information among feature structures. We define
               that a
               feature structure F' subsumes a feature structure F'' if F' contains a subset of the
               information
               in F'' 
               <div class="xref e163" linkend="shieber1986"></div>. Alternatively, we may say that F' carries less information
               than F'' or that F' is more general than F''. Subsumption is a partial order on the
               set of
               feature structures, since feature structures may be incompatible with each other.
               Now, we can
               define the 
               <div class="emphasis e164">unification</div> of two feature structures F and G, if any, to be the
               most general feature structure H, such that F subsumes H and G subsumes H. If the
               feature
               structures to be unified are incompatible, we say that the unification fails. A related
               operation that works in the opposite direction is generalization. This operation is
               the dual of
               unification. We can define the 
               <div class="emphasis e165">generalization</div> of two feature structures F
               and G to be the most specific feature structure E, such that E subsumes F and E subsumes
               G.
               Unlike unification, generalization cannot fail. In the worst case, the result will
               be the empty
               feature structure [ ] that subsumes every feature structure.
            </div>
            <div class="para e166"> It should be noted that feature structures can be 
               <div class="emphasis e167">typed</div>
               
               <div class="xref e168" linkend="carpenter1992"></div>. However, neither the present state of the representations nor
               the implemented transformation that we describe in this paper does make use of typed
               feature
               structures, so we won't go into details regarding that topic here. 
            </div>
         </div><a name="TheTEITagSetforFeatureStructuresANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e169" xml:id="s2.2" xreflabel="‚ÄúThe TEI Tag Set for Feature Structures‚Äù">
            <div class="title e170">The TEI Tag Set for Feature Structures</div>
            <div class="para e171">The TEI tag set for the representation of feature structures has been a part of the
               TEI
               Guidelines since version 
               <div class="emphasis e172">P3</div>
               
               <div class="xref e173" linkend="p3"></div>. Building on the 
               <div class="emphasis e174">P4</div> version 
               <div class="xref e175" linkend="p4"></div>, an
               
               <div class="emphasis e176">ISO</div> standard 
               <div class="xref e177" linkend="iso24610"></div> was adopted by ISO TC37 SC4 and
               also implemented in the current 
               <div class="emphasis e178">P5</div> version 
               <div class="xref e179" linkend="p5"></div> that we
               use here.
            </div>
            <div class="para e180"> The foundational XML elements that are needed in order to encode feature structures
               are
               
               <div class="code e181">fs</div> for feature structures and 
               <div class="code e182">f</div> for features. The content of an
               
               <div class="code e183">fs</div> element consists of a sequence of feature-value specifications. A feature-value
               specification is encoded using an element of type 
               <div class="code e184">f</div> for the feature and the element
               content of 
               <div class="code e185">f</div> for the associated value. The details look as follows. Every
               
               <div class="code e186">f</div> element has an attribute 
               <div class="code e187">name</div> for its feature name. The
               representation of the associated value of a feature depends on the exact type of the
               value
               involved. Atomic values of type 
               <div class="code e188">binary</div>, 
               <div class="code e189">symbol</div> or 
               <div class="code e190">numeric</div>
               are realized via a 
               <div class="code e191">value</div> attribute on a respective child element of 
               <div class="code e192">f</div>
               that corresponds to the actual value type. For example, 
               <div class="code e193">f</div> may have a child element
               
               <div class="code e194">binary</div> which has a 
               <div class="code e195">value</div> attribute that provides the desired
               parameter. If the value is of the 
               <div class="code e196">string</div> type, however, the value is encoded in a
               slightly different form, i.e., as the literal element content of a respective
               
               <div class="code e197">string</div> child element of 
               <div class="code e198">f</div>.
            </div>
            <div class="para e199"> Complex values of the feature structure kind are encoded by means of 
               <div class="code e200">fs</div>
               elements, of course. However, there is also another class of complex values: these
               are the
               collection values of the 
               <div class="code e201">list</div>, 
               <div class="code e202">set</div> and 
               <div class="code e203">bag</div> type. Such
               collections of values are indicated via 
               <div class="code e204">vColl</div> elements that have an
               
               <div class="code e205">org</div> attribute whose value specifies the respective collection type, i.e., whether
               it is a 
               <div class="code e206">bag</div>, a 
               <div class="code e207">set</div> or a 
               <div class="code e208">list</div>. The content of a
               
               <div class="code e209">vColl</div> element consists of a succession of values of any kind.
            </div>
            <div class="figure e210" xml:id="f4" xreflabel="Figure 4">
               <div class="title e211">TEI Feature Structure 
                  <div class="emphasis e212">F
                     <div class="subscript e213">2</div>
                  </div>: Structure Sharing
                  and Collection Values
               </div>
               <div class="programlisting e214" xml:space="preserve">
                  &lt;fs&gt;              
                  &lt;f name="F"&gt;
                  &lt;vColl org="list"&gt;
                  &lt;vLabel name="a"&gt;
                  &lt;fs&gt;
                  &lt;f name="I"&gt;
                  &lt;symbol value="a"/&gt;
                  &lt;/f&gt;
                  &lt;f name="J"&gt;
                  &lt;symbol value="b"/&gt;
                  &lt;/f&gt;
                  &lt;/fs&gt;
                  &lt;/vLabel&gt;
                  &lt;vLabel name="b"&gt;
                  &lt;fs&gt;
                  &lt;f name="K"&gt;
                  &lt;symbol value="c"/&gt;
                  &lt;/f&gt;
                  &lt;f name="L"&gt;
                  &lt;symbol value="d"/&gt;
                  &lt;/f&gt;
                  &lt;/fs&gt;
                  &lt;/vLabel&gt;
                  &lt;/vColl&gt;
                  &lt;/f&gt;
                  &lt;f name="G"&gt;
                  &lt;vLabel name="a"/&gt;
                  &lt;/f&gt;
                  &lt;f name="H"&gt;
                  &lt;vColl org="set"&gt;
                  &lt;vLabel name="b"/&gt;
                  &lt;fs&gt;
                  &lt;f name="M"&gt;
                  &lt;symbol value="e"/&gt;
                  &lt;/f&gt;
                  &lt;f name="N"&gt;
                  &lt;symbol value="f"/&gt;
                  &lt;/f&gt;
                  &lt;/fs&gt;
                  &lt;/vColl&gt;
                  &lt;/f&gt;
                  &lt;/fs&gt;                       
                  
               </div>
            </div>
            <div class="para e215"> There is a special element in order to indicate cases of structure sharing: the
               
               <div class="code e216">vLabel</div> element. It either contains a value token as its element content or it
               occurs as a placeholder which indicates reference to an elsewhere specified value
               token. Each
               
               <div class="code e217">vLabel</div> element has an associated 
               <div class="code e218">name</div> attribute. The value of the
               
               <div class="code e219">name</div> attribute corresponds to the index of a tagged box in attribute value matrix
               notation, see below. This mechanism allows for various structure sharing configurations
               within a
               single feature structure. 
               <div class="xref e220" linkend="f4"></div> (TEI-based representation) and 
               <div class="xref e221" linkend="f5"></div> (attribute value matrix notation) display the same abstract example feature structure
               
               <div class="emphasis e222">F
                  <div class="subscript e223">2</div>
               </div> in different notation formats and exemplify the
               themes of structure sharing and collection values. 
            </div>
            <div class="figure e224" xml:id="f5" xreflabel="Figure 5">
               <div class="title e225">Attribute Value Matrix for 
                  <div class="emphasis e226">F
                     <div class="subscript e227">2</div>
                  </div>: Structure
                  Sharing and Collection Values
               </div>
               <div class="mediaobject e228">
                  <div class="imageobject e229">
                     <div class="metaBox e230"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e519').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e519" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e230'
                              </span><span class="metaAttribute">fileref='../../../vol3/graphics/Stegmann01/Stegmann01-003.jpg'
                              </span><span class="metaAttribute">format='jpg'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e231"> There are three top-level features in 
               <div class="emphasis e232">F
                  <div class="subscript e233">2</div>
               </div>:
               
               <div class="code e234">F</div>, 
               <div class="code e235">G</div>, and 
               <div class="code e236">H</div>. All of them are associated with complex
               values. 
               <div class="code e237">F</div> has a list collection value, which is encoded using angle brackets at the
               attribute value matrix level, 
               <div class="code e238">G</div> has a feature structure as its value, and
               
               <div class="code e239">H</div> has a set collection value that is indicated using curly brackets in Figure 4.
               The first list value of 
               <div class="code e240">F</div> and the complex value of 
               <div class="code e241">G</div> are co-indicated.
               The same holds for the second list value of 
               <div class="code e242">F</div> and the firstly notated set member of
               
               <div class="code e243">H</div>.
            </div>
         </div>
      </div><a name="RepresentationandTransformationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e244" xml:id="s3" xreflabel="‚ÄúRepresentation and Transformation‚Äù">
         <div class="title e245">Representation and Transformation</div><a name="RepresentationofXMLDocumentsviaTEIFeatureStructuresANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e246" xml:id="s3.1" xreflabel="‚ÄúRepresentation of XML Documents via TEI Feature Structures‚Äù">
            <div class="title e247">Representation of XML Documents via TEI Feature Structures</div>
            <div class="para e248">Both feature structures and XML documents can be regarded from the perspective of
               graph
               theory 
               <div class="xref e249" linkend="diestel2005"></div>. XML documents are specimen of ordered trees, while feature
               structures are merely unordered directed acyclic graphs. This holds because of the
               possibility
               of structure sharing within feature structures and because there is no order imposed
               among
               features of the same level within feature structures. So, the task of representing
               XML documents
               as feature structures seems to involve a transformation from a more rigidly structured
               representation format to a less rigidly structured one. Specifically, we have to find
               a way to
               represent the ordered 
               <div class="emphasis e250">sequential relations</div> that hold among parts of XML
               documents both at the text and at the markup level in terms of feature-value pairs.
               Furthermore,
               also the 
               <div class="emphasis e251">hierarchical relationships</div> have to be expressed in terms of
               feature-value specifications. A possible solution consists in the use of specific
               features for
               hierarchical aspects whose values will be structured themselves and which have to
               be interpreted
               as reflecting sequential relationships. 
            </div>
            <div class="para e252">In the following, we shall regard a simple annotation data example that will help
               to
               illustrate our points. It is shown as 
               <div class="xref e253" linkend="f6"></div> and 
               <div class="xref e254" linkend="f7"></div> below, which
               contain morphological and phonological annotation layers of the German verb
               "geben" (engl.: to give).
            </div>
            <div class="figure e255" xml:id="f6" xreflabel="Figure 6">
               <div class="title e256">Simple Annotation Data: Example 1</div>
               <div class="programlisting e257" xml:space="preserve">
                  &lt;w&gt;
                  &lt;m type="lexical"&gt;geb&lt;/m&gt;
                  &lt;m type="flexive"&gt;en&lt;/m&gt;
                  &lt;/w&gt;
                  
               </div>
            </div>
            <div class="figure e258" xml:id="f7" xreflabel="Figure 7">
               <div class="title e259">Simple Annotation Data: Example 2</div>
               <div class="programlisting e260" xml:space="preserve">     
                  &lt;w&gt;
                  &lt;syll n="s1"&gt;ge&lt;/syll&gt;
                  &lt;syll n="s2"&gt;ben&lt;/syll&gt;
                  &lt;/w&gt;
                  
               </div>
            </div>
            <div class="para e261"> In the rest of this section we will follow a historical route and discuss two
               
               <div class="emphasis e262">representation alternatives</div> that we came up with. Both of the sketched
               solutions will be sufficiently general and can hence be applied to generic XML documents
               and
               sets of multiple annotation documents alike. Our discussion will be framed more towards
               multiple
               annotation here.
            </div>
            <div class="para e263"> Our first and historically older 
               <div class="emphasis e264">representation alternative I</div> makes
               use of a list notation variant that is defined in a recursive way using 
               <div class="code e265">FIRST</div> and
               
               <div class="code e266">REST</div> features 
               <div class="xref e267" linkend="witt2009"></div>. The basic idea is to have the very first
               element of a given sequence, e.g., the first character of a text sequence, as the
               value of the
               
               <div class="code e268">FIRST</div> feature and the result for the rest of the sequence as the value of the
               
               <div class="code e269">REST</div> feature. So, the latter value will usually be a complex value, again, that is
               structured according to the very same scheme, i.e., with the first item of the (rest-)sequence
               detached and so on.
               <div class="popupBox e270">
                  <div class="popupLabel" onmouseover="$('#d1e615').show('1000');" onmouseout="$('#d1e615').hide('1000');">[ footnote ]</div>
                  <div id="d1e615" style="display: none;">
                     <div class="footnote">
                        <div class="para e271">Unless there is no rest sequence and we have reached the end of the sequence
                           already.
                        </div>
                     </div>
                  </div>
               </div> We go over the sequence in this way until we reach its end where the recursion
               bottoms out by 
               <div class="code e272">*null*</div> as the value of the at most embedded 
               <div class="code e273">REST</div>
               feature within the list structure. It functions as a placeholder for the empty list.
            </div>
            <div class="figure e274" xml:id="f8" xreflabel="Figure 8">
               <div class="title e275">Representation Alternative I: TEI-based</div>
               <div class="programlisting e276" xml:space="preserve">       
                  &lt;fs&gt;
                  &lt;f name="DATA"&gt;
                  &lt;fs&gt;
                  &lt;f name="FIRST"&gt;
                  &lt;vLabel name="1"&gt;
                  &lt;symbol value="g"/&gt;
                  &lt;/vLabel&gt;
                  &lt;/f&gt;
                  &lt;f name="REST"&gt;
                  &lt;fs&gt;
                  &lt;f name="FIRST"&gt;
                  &lt;vLabel name="2"&gt;
                  &lt;symbol value="e"/&gt;
                  &lt;/vLabel&gt;
                  &lt;/f&gt;
                  &lt;f name="REST"&gt;
                  &lt;fs&gt;
                  &lt;f name="FIRST"&gt;
                  &lt;vLabel name="3"&gt;
                  &lt;symbol value="b"/&gt;
                  &lt;/vLabel&gt;
                  &lt;/f&gt;
                  &lt;f name="REST"&gt;
                  &lt;fs&gt;
                  &lt;f name="FIRST"&gt;
                  &lt;vLabel name="4"&gt;
                  &lt;symbol value="e"/&gt;
                  &lt;/vLabel&gt;
                  &lt;/f&gt;
                  &lt;f name="REST"&gt;
                  &lt;fs&gt;
                  &lt;f name="FIRST"&gt;
                  &lt;vLabel name="5"&gt;
                  &lt;symbol value="n"/&gt;
                  &lt;/vLabel&gt;
                  &lt;/f&gt;
                  &lt;f name="REST"&gt;
                  &lt;symbol value="*null*"/&gt;
                  &lt;/f&gt;
                  &lt;/fs&gt;
                  &lt;/f&gt;
                  &lt;/fs&gt;
                  &lt;/f&gt;
                  &lt;/fs&gt;
                  &lt;/f&gt;
                  &lt;/fs&gt;
                  &lt;/f&gt;
                  &lt;/fs&gt;
                  &lt;/f&gt;
                  &lt;f name="TIER1"&gt;
                  ...
                  &lt;/f&gt;
                  &lt;f name="TIER2"&gt;
                  ...
                  &lt;/f&gt;
                  &lt;/fs&gt;
                  
               </div>
            </div>
            <div class="para e277">This way of representation is displayed in 
               <div class="xref e278" linkend="f8"></div> in an abridged TEI feature
               structure format that shows the top-level feature geometry of the structure :
               <div class="popupBox e279">
                  <div class="popupLabel" onmouseover="$('#d1e634').show('1000');" onmouseout="$('#d1e634').hide('1000');">[ footnote ]</div>
                  <div id="d1e634" style="display: none;">
                     <div class="footnote">
                        <div class="para e280">It would be nice to have something like a specialized document grammar regarding the
                           finer details of the representations that we propose in this article. One of our anonymous
                           reviewers encouraged us to give 
                           <div class="emphasis e281">Feature System Declarations</div>
                           
                           <div class="xref e282" linkend="p5"></div> for the TEI feature structures. However, it seems that TEI FSDs are
                           reserved for typed feature structures and the present state of our work here makes
                           use of
                           untyped feature structures. Since we may well choose to make the switch to typed
                           representations in the future (in a way, the new representation scheme below has been
                           designed
                           to make the switch easier), it will be a good idea to take up on that proposal in
                           a respective
                           update. For the moment, we can at least validate our documents against TEI feature
                           structure
                           schemas generated via the TEI ROMA tool (http://www.tei-c.org/Roma/).
                        </div>
                     </div>
                  </div>
               </div>
               
               <div class="code e283">DATA</div> contains a representation of only the textual characters of the document
               adhering to the 
               <div class="code e284">FIRST/REST</div> scheme discussed above. Furthermore, each character is
               associated with its own index in order to allow for structure sharing references to
               it from
               other parts of the feature structure. We provide an index for every character in order
               to allow
               for arbitrarily specific levels of annotation with respect to the common textual data.
               The
               numbered 
               <div class="code e285">TIER</div> features contain the specific information of the annotation levels.
               Each one represents the information of one of the multiple annotation documents involved.
               The
               implicit link between the different levels is made explicit by means of structure
               sharing.
               Therefore, there will be plenty of references to the common data characters from within
               the
               different 
               <div class="code e286">TIER</div> features of the document. However, this is not an explicit part of
               the example display in 
               <div class="xref e287" linkend="f8"></div> due to space considerations.
               <div class="popupBox e288">
                  <div class="popupLabel" onmouseover="$('#d1e658').show('1000');" onmouseout="$('#d1e658').hide('1000');">[ footnote ]</div>
                  <div id="d1e658" style="display: none;">
                     <div class="footnote">
                        <div class="para e289">Note that a complete representation of the above annotation data examples in TEI format,
                           but according to the newer representation standard that will be discussed below in
                           this
                           subsection, can be found in 
                           <div class="xref e290" linkend="a1"></div>.
                        </div>
                     </div>
                  </div>
               </div>The binding of indexes to certain values is shown within the 
               <div class="code e291">DATA</div>
               feature, but the reference to such values is hidden within the abridged 
               <div class="code e292">TIER</div> levels
               of the document. However, those parts and the connections provided by the structure
               sharing
               mechanism can be inspected in 
               <div class="xref e293" linkend="f9"></div> that shows the attribute value matrix
               notation. Unlike its TEI counterpart, this display is complete and probably a bit
               easier to
               follow. It also displays the mechanics of the representation of the hierarchical relationships.
               They find expression via 
               <div class="code e294">CONTENT</div> features, whose values contain the representation
               of the subordinated document parts, e.g., the content of an element. The mechanisms
               for the
               representation of the hierarchical and the sequential relationships have to be combined
               as
               appropriate. This means that 
               <div class="code e295">CONTENT</div> will have a list value and the respective
               position within that list will reflect the sequential order among the dominated document
               parts.
            </div>
            <div class="figure e296" xml:id="f9" xreflabel="Figure 9">
               <div class="title e297">Representation Alternative I: Attribute Value Matrix</div>
               <div class="mediaobject e298">
                  <div class="imageobject e299">
                     <div class="metaBox e300"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e684').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e684" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e300'
                              </span><span class="metaAttribute">fileref='../../../vol3/graphics/Stegmann01/Stegmann01-004.jpg'
                              </span><span class="metaAttribute">format='jpg'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e301">We move on to the discussion of our historically newer 
               <div class="emphasis e302">representation alternative
                  II
               </div>, which forms the basis of our current work on the topic. The most important
               changes have been made regarding the representation of sequential relationships and
               concerning
               the general feature geometry makeup. Consider 
               <div class="xref e303" linkend="f10"></div> which shows the changed
               top-level geometry . As its predecessor counterpart in 
               <div class="xref e304" linkend="f8"></div>, this display is
               incomplete and printed in an abridged format here. However, interested readers can
               find the
               complete version of this representation of the example data in 
               <div class="xref e305" linkend="a1"></div>.
            </div>
            <div class="figure e306" xml:id="f10" xreflabel="Figure 10">
               <div class="title e307">Representation Alternative II: TEI-based</div>
               <div class="programlisting e308" xml:space="preserve">            
                  &lt;?xml version="1.0" encoding="UTF-8"?&gt;
                  &lt;fs&gt;
                  &lt;f name="DATA"&gt;
                  &lt;vColl org="list"&gt;
                  &lt;vLabel name="1"&gt;
                  &lt;string&gt;g&lt;/string&gt;
                  &lt;/vLabel&gt;
                  &lt;vLabel name="2"&gt;
                  &lt;string&gt;e&lt;/string&gt;
                  &lt;/vLabel&gt;
                  &lt;vLabel name="3"&gt;
                  &lt;string&gt;b&lt;/string&gt;
                  &lt;/vLabel&gt;
                  &lt;vLabel name="4"&gt;
                  &lt;string&gt;e&lt;/string&gt;
                  &lt;/vLabel&gt;
                  &lt;vLabel name="5"&gt;
                  &lt;string&gt;n&lt;/string&gt;
                  &lt;/vLabel&gt;
                  &lt;/vColl&gt;
                  &lt;/f&gt;
                  &lt;f name="DOCUMENTS"&gt;
                  &lt;vColl org="list"&gt;
                  &lt;fs&gt;
                  ...
                  &lt;/fs&gt;  
                  &lt;fs&gt;
                  ...  
                  &lt;/fs&gt;
                  &lt;/vColl&gt;
                  &lt;/f&gt;
                  &lt;/fs&gt;
                  
               </div>
            </div>
            <div class="para e309"> On the top level, this representation consists of a 
               <div class="code e310">DATA</div> feature and a
               
               <div class="code e311">DOCUMENTS</div> feature. Both features take complex values of a collection type, i.e.,
               lists of values. Concerning 
               <div class="code e312">DATA</div>, we now have a flat list representation with
               little internal structure. This format can be built in an easier way as compared to
               the more
               structured variant. The move to this format is possible, since the TEI Guidelines
               provide this
               kind of notational sugar for values of the collection kind.
               <div class="popupBox e313">
                  <div class="popupLabel" onmouseover="$('#d1e713').show('1000');" onmouseout="$('#d1e713').hide('1000');">[ footnote ]</div>
                  <div id="d1e713" style="display: none;">
                     <div class="footnote">
                        <div class="para e314">In terms of features and values alone, respective structures still have to be realized
                           by
                           FIRST/REST-like structured representations as introduced above. The format provided
                           by the TEI
                           is a shorthand for that.
                        </div>
                     </div>
                  </div>
               </div> The 
               <div class="code e315">DOCUMENTS</div> feature also makes use of this kind of list notation and
               embeds the representation of the different annotation documents as a flat list of
               respective
               feature structures. Note also that there is just one such top-level feature now, compare
               the
               different numbered 
               <div class="code e316">TIER</div> features in representation alternative I. If there is only
               one annotation document to process, the list will contain only one corresponding feature
               structure, of course. 
               <div class="xref e317" linkend="f11"></div> is a complete display of the attribute value matrix
               for our example data.
            </div>
            <div class="figure e318" xml:id="f11" xreflabel="Figure 11">
               <div class="title e319">Representation Alternative II: Attribute Value Matrix</div>
               <div class="mediaobject e320">
                  <div class="imageobject e321">
                     <div class="metaBox e322"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e732').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e732" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e322'
                              </span><span class="metaAttribute">fileref='../../../vol3/graphics/Stegmann01/Stegmann01-005.jpg'
                              </span><span class="metaAttribute">format='jpg'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e323"> This way of representation takes a stance that is based on the 
               <div class="emphasis e324">XQuery 1.0 and
                  XPath 2.0 Data Model
               </div> (XDM) and, hence, the representations will be predestined for
               processing in an XSLT 2.0 context. We use the attributes which are provided by the
               XDM in order
               to represent the different node kinds within an XML document, starting from the very
               root. The
               node kinds that are distinguished are: document, element, attribute, namespace, commentary,
               processing instruction and text nodes. Every occurrence of a node is represented as
               a feature
               structure with features as appropriate for the node kind involved. The type of a node
               is
               indicated via the 
               <div class="code e325">TYPE</div> feature for nodes of all kinds. Hierarchical relations are
               represented via the 
               <div class="code e326">CHILDREN</div> feature for document- and element nodes. Order among
               the children nodes is encoded by the position within a sequence, since 
               <div class="code e327">CHILDREN</div>
               takes a collection value of the list kind. Element nodes and attribute nodes have
               
               <div class="code e328">NAME</div> features, attribute and text nodes have 
               <div class="code e329">VALUE</div> features.
               Furthermore, each element node has an 
               <div class="code e330">ATTRIBUTES</div> feature that takes a set value,
               since attributes are unordered. The semantics associated with the different feature-value
               pairs
               should be straightforward. All in all, this approach allows for a very systematic
               representation
               regime across the different parts of an arbitrary XML document instance. Unlike the
               older
               approach, every feature structure which is embedded below the 
               <div class="code e331">DOCUMENTS</div> top-level
               feature now represents a certain node at the XML tree model level. However, it also
               has to be
               noted that our feature structure representations of XML documents tend to grow very
               fast with
               the size of the input document, which, however, seems to be true for all approaches
               based on TEI
               feature structures due to the modeling as feature structure and also the retranslation
               to XML involved.
               <div class="popupBox e332">
                  <div class="popupLabel" onmouseover="$('#d1e760').show('1000');" onmouseout="$('#d1e760').hide('1000');">[ footnote ]</div>
                  <div id="d1e760" style="display: none;">
                     <div class="footnote">
                        <div class="para e333">As one of our anonymous reviewers remarked, it would be interesting to investigate
                           the
                           prospects and the performance of bare feature structures for our purposes and see
                           whether and
                           how much better they can perform as compared to the TEI-serialized feature structures
                           that are
                           the focus of the present paper.
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e334">If the input to the transformation program does not consist of multiple annotation
               documents, but rather of one or several arbitrary XML documents, which do not share
               identical
               primary data, an integrative representation of such documents will still be build
               in a similar
               way. However, there will be no indexing mechanism incorporated and so no implicit
               links will be
               made explicit.
            </div>
         </div><a name="AspectsoftheXSLTImplementationoftheTransformationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e335" xml:id="s3.2" xreflabel="‚ÄúAspects of the XSLT Implementation of the Transformation‚Äù">
            <div class="title e336">Aspects of the XSLT Implementation of the Transformation</div>
            <div class="para e337"> The program 
               <div class="code e338">xmls2avm.xsl</div> that implements the transformation to the TEI
               feature structure format was written with multiple annotation documents in mind. Nevertheless,
               it is robust enough to provide a result document if the input documents to the transformation
               fail the test of primary data identity or if there is only one document to be transformed.
               Such
               kind of robustness marks a necessary condition for the program to be useful within
               the generic
               XML realm. 
            </div>
            <div class="para e339"> The program was written in 
               <div class="emphasis e340">XSLT 2.0</div> and uses certain features of the
               new XSLT version. For example, data typing is used for at least some of the parameters
               and
               variables involved and, most importantly, we exploit the extended functionalities
               and constructs
               that are grounded on the XDM tree model. XSLT 2.0 comes with support for multiple
               output
               documents, but the multiple input documents that are needed here still have to be
               provided via a
               sort of workaround: a call of the 
               <div class="code e341">document()</div>-function to a post-processed
               representation of a stylesheet parameter. The latter contains a list of secondary
               input
               documents that has to be assigned by the user when invoking the transformation program
               from the
               command line. Several further stylesheet parameters are provided in order to parameterize
               certain aspects of the transformation process and to determine peculiarities of the
               desired
               representation format. Most of this is optional, however, since there are defaults
               for the
               relevant parameters. An example stylesheet parameter is 
               <div class="code e342">$firstrestRepr</div>: it
               influences the way how lists are represented. If it is set to 
               <div class="code e343">true</div>, then lists will
               be represented in the recursively structured way that has been introduced as our historically
               older representation alternative I in the previous section. If it is set to 
               <div class="code e344">false</div>,
               however, then lists will be represented according to the newer flat representation
               alternative
               II that exploits the notational sugar provided by the TEI guidelines. The parameter
               is set to
               
               <div class="code e345">false</div> as a default.
            </div>
            <div class="para e346">Although we decided that we would not include detailed comments on the whole stylesheet
               <div class="popupBox e347">
                  <div class="popupLabel" onmouseover="$('#d1e797').show('1000');" onmouseout="$('#d1e797').hide('1000');">[ footnote ]</div>
                  <div id="d1e797" style="display: none;">
                     <div class="footnote">
                        <div class="para e348">This decision was made on grounds of space considerations, since this is a rather
                           long
                           paper already. Some anonymous reviewers would have liked to see the whole stylesheet
                           included.
                           Others shared our perspective that examples suffice here.
                        </div>
                     </div>
                  </div>
               </div>, we do provide three illustrative template examples below. These will be the
               templates for document nodes (in default mode), attributes and text. Besides these,
               the full
               stylesheet also contains templates for document nodes (in secondary mode), elements,
               processing
               instructions, comments. Furthermore, there are named templates for the processing
               of nested
               sequences and for the processing of nested sequences with regard to namespaces, as
               well as many
               additional parameters and variables defined.
            </div>
            <div class="para e349">We begin our discussion with the template for 
               <div class="emphasis e350">document nodes in default
                  mode
               </div>, i.e., the mode that is used at the start of the transformation without further
               ado. The template shown in 
               <div class="xref e351" linkend="f12"></div> will be applied to the document node of the
               primary input document at the start of the transformation. 
            </div>
            <div class="figure e352" xml:id="f12" xreflabel="Figure 12">
               <div class="title e353">Template for Document Nodes in Default Mode</div>
               <div class="programlisting e354" xml:space="preserve">
                  &lt;xsl:template match="document-node()" mode="#default"&gt;
                  &lt;xsl:variable name="children" select="node()"/&gt;
                  &lt;xsl:variable name="textnodes" select="//text()"/&gt;
                  &lt;fs&gt;
                  &lt;xsl:if test="$dataIdentity and $dataRepr"&gt;
                  &lt;f name="DATA"&gt;
                  &lt;vColl org="list"&gt;
                  &lt;xsl:for-each select="str:characters($primaryString)"&gt;
                  &lt;vLabel name="{position()}"&gt;
                  &lt;string&gt;
                  &lt;xsl:value-of select="."/&gt;
                  &lt;/string&gt;
                  &lt;/vLabel&gt;
                  &lt;/xsl:for-each&gt;
                  &lt;/vColl&gt;
                  &lt;/f&gt;
                  &lt;/xsl:if&gt;
                  &lt;f name="DOCUMENTS"&gt;
                  &lt;vColl org="list"&gt;
                  &lt;fs&gt;
                  &lt;f name="TYPE"&gt;
                  &lt;symbol value="document"/&gt;
                  &lt;/f&gt;
                  &lt;f name="CHILDREN"&gt;
                  &lt;xsl:choose&gt;
                  &lt;xsl:when test="$firstrestRepr"&gt;
                  &lt;xsl:choose&gt;
                  &lt;xsl:when test="$children"&gt;
                  &lt;xsl:call-template name="SequenceProcessing"&gt;
                  &lt;xsl:with-param name="seq" select="$children"/&gt;
                  &lt;/xsl:call-template&gt;
                  &lt;/xsl:when&gt;
                  &lt;xsl:otherwise&gt;
                  &lt;symbol value="*null*"/&gt;
                  &lt;/xsl:otherwise&gt;
                  &lt;/xsl:choose&gt;
                  &lt;/xsl:when&gt;
                  &lt;xsl:otherwise&gt;
                  &lt;vColl org="list"&gt;
                  &lt;xsl:apply-templates select="$children"/&gt;
                  &lt;/vColl&gt;
                  &lt;/xsl:otherwise&gt;
                  &lt;/xsl:choose&gt;
                  &lt;/f&gt;
                  &lt;/fs&gt;
                  &lt;xsl:apply-templates select="$docRoots" mode="secondary"/&gt;
                  &lt;/vColl&gt;
                  &lt;/f&gt;
                  &lt;/fs&gt;
                  &lt;/xsl:template&gt;   
                  
               </div>
            </div>
            <div class="para e355">The template starts with the definition of variables that can be referenced within
               the
               scope of the template. Most of the other templates in the stylesheet use such template
               variables, too. Then the first 
               <div class="code e356">fs</div> element of the target representation is inserted.
               This will be the outer frame for all the result markup that is created during the
               transformation. The two usual top-level features for a feature structure representation
               of XML
               documents are 
               <div class="code e357">DATA</div> and 
               <div class="code e358">DOCUMENTS</div>, compare our discussion of
               representation alternative II in the previous section. It is possible to drop even
               the
               
               <div class="code e359">DATA</div> feature and go with the 
               <div class="code e360">DOCUMENTS</div> feature on the top-level of
               the feature structure alone. This possibility has been parameterized using
               
               <div class="code e361">$dataRepr</div>, i.e., the user may decide whether he wants a 
               <div class="code e362">DATA</div> feature
               at the top-level or not. Furthermore, a variable named 
               <div class="code e363">$dataidentity</div> has been
               defined on the global stylesheet level. This variable implements a test for the identity
               of the
               primary textual data of all the input documents involved. Now, if 
               <div class="code e364">DATA</div> shall be
               present and the test result concerning textual data identity is positive, then the
               feature will
               be inserted into the result and be given a list value. The content of that list will
               be
               construed as follows: we iterate over all textual characters of our primary input
               document. For
               each character, we insert index markup (
               <div class="code e365">vLabel</div>) with a numerical index attribute
               according to the position value of the respective character. Furthermore, the index
               will be
               bound to the character value whereas the latter is framed by a 
               <div class="code e366">string</div> element to
               indicate its value type. Next is the obligatory 
               <div class="code e367">DOCUMENTS</div> feature. It will take a
               list of feature structures, i.e., a list of 
               <div class="code e368">fs</div> elements. Those will represent the
               input documents, respectively. 
            </div>
            <div class="para e369">In what follows in this template, we build the representation for the primary input
               document. The corresponding job for the other input documents, if any, will have to
               be done by
               the template for document node kinds in secondary mode. The two features appropriate
               for
               document nodes are 
               <div class="code e370">TYPE</div> and 
               <div class="code e371">CHILDREN</div>. Concerning 
               <div class="code e372">TYPE</div>,
               its value will be 
               <div class="code e373">&lt;symbol value="document"/&gt;</div> obviously. The value of
               
               <div class="code e374">CHILDREN</div>, however, is more complicated and has to be determined via a series of
               conditional constructs. Firstly, it depends on whether the list representation has
               been set to
               the older recursively structured kind (
               <div class="code e375">$firstrestRepr</div>) or not. If list
               representations follow that approach, then it depends again on whether the document
               node has
               descendants or not. If he has none, we insert a value for the empty list (
               <div class="code e376">*null*</div>).
               However, if there are descendant nodes to the document node, the further calculation
               of the list
               representation is taken over by a called template of the recursive kind named
               
               <div class="code e377">SequenceProcessing</div>. This template is called with the sequence of the current
               document node's descendant nodes as a parameter. That template will build a recursively
               structured kind of list representation as appropriate. However, if the value of the
               parameter
               
               <div class="code e378">$firstrestRepr</div> is set such that we will have the flat kind of list representation,
               which is the default, then markup for a collection of the list kind will be inserted.
               However,
               the content of that list will be determined by the result of applying templates to
               all the
               descendant nodes of the current document node. Thus, the content of the 
               <div class="code e379">fs</div> element
               for the current primary input document is complete and can be closed with the respective
               end
               tags. What remains to be computed is the markup for the other secondary input documents.
               Therefore, templates are applied to the members of 
               <div class="code e380">$docRoots</div>, which holds the
               document nodes of the secondary input documents in a sequence format. Note, that a
               mode
               (
               <div class="code e381">secondary</div>) is used in the respective 
               <div class="code e382">apply-templates</div> instruction, so
               the present template will not fit and we avoid a repeated insertion of the initial
               framing
               markup for the outermost level of the feature structure representation, which is only
               included
               in the processing of the primary input document here. 
            </div>
            <div class="para e383"> The complete stylesheet can be characterized as exploiting aspects of both 
               <div class="emphasis e384">the
                  push and the pull processing paradigm
               </div>
               
               <div class="xref e385" linkend="tennison2005"></div>, like most stylesheets of a considerable size and complexity do,
               whereas the focus is shifting in different parts of the stylesheet. In a similar vein,
               it can be
               classified as implementing different 
               <div class="emphasis e386">stylesheet design patterns</div>
               
               <div class="xref e387" linkend="kay2008"></div>. For example, the buildup of the initial target feature structure
               tends to be of the pull type or rather navigational, to use Kay's concept. This, however,
               shifts
               towards a more push- or rule-oriented approach, which helps to fill up the missing
               parts of the
               initial structure by applying templates to the descendants of the current node. Appropriate
               templates are provided for each specific node kind against the background of the XDM.
               Certain
               aspects, e.g., the buildup of the older 
               <div class="code e388">FIRST</div>/
               <div class="code e389">REST</div> list structures
               have been realized in a computational way recursively via calls to named templates
               with
               parameters as their arguments. We shall look at a recipient template of the push-
               or
               rule-oriented style of processing next in 
               <div class="xref e390" linkend="f13"></div>. It is the template for the
               processing of 
               <div class="emphasis e391">attribute nodes</div>, whose application will be initiated from
               within the template for the processing of element nodes.
            </div>
            <div class="figure e392" xml:id="f13" xreflabel="Figure 13">
               <div class="title e393">Template for Attribute Nodes</div>
               <div class="programlisting e394" xml:space="preserve">
                  &lt;xsl:template match="attribute()" mode="#all"&gt;
                  &lt;fs&gt;
                  &lt;f name="TYPE"&gt;
                  &lt;symbol value="attribute"/&gt;
                  &lt;/f&gt;
                  &lt;f name="NAME"&gt;
                  &lt;string&gt;
                  &lt;xsl:value-of select="node-name(.)"/&gt;
                  &lt;/string&gt;
                  &lt;/f&gt;
                  &lt;f name="VALUE"&gt;
                  &lt;string&gt;
                  &lt;xsl:value-of select="."/&gt;
                  &lt;/string&gt;
                  &lt;/f&gt;
                  &lt;/fs&gt;
                  &lt;/xsl:template&gt;
                  
               </div>
            </div>
            <div class="para e395"> In comparison to the previous template for document nodes, this one is very
               straightforward. There are three features appropriate for feature structures that
               represent
               attribute nodes: these are 
               <div class="code e396">TYPE</div>, 
               <div class="code e397">NAME</div> and 
               <div class="code e398">VALUE</div>. The
               respective values are very easily determined. Readers who managed to follow through
               on our
               description of the previous template should have no problems with this one.
            </div>
            <div class="para e399"> At the heart of the transformation of multiply annotated documents is the indexing
               of the
               single characters and the reference mechanism that exploits these indexes. It is dependent
               on
               the relative position of characters with respect to the other characters of the document.
               Those
               values can be used as numerical indexes since they are bound to be constant across
               all the
               documents that pass a test of primary data identity. However, it has to be stressed
               that the
               computational cost of implementing this functionality can be considerable for large
               input
               documents. 
               <div class="xref e400" linkend="f14"></div> shows the code which does the job: it is the template for
               
               <div class="emphasis e401">text nodes</div>.
            </div>
            <div class="figure e402" xml:id="f14" xreflabel="Figure 14">
               <div class="title e403">Template for Text Nodes</div>
               <div class="programlisting e404" xml:space="preserve">
                  &lt;xsl:template match="text()" mode="#all"&gt;
                  &lt;xsl:variable name="currentRoot" select="/"/&gt;
                  &lt;fs&gt;
                  &lt;f name="TYPE"&gt;
                  &lt;symbol value="text"/&gt;
                  &lt;/f&gt;
                  &lt;f name="VALUE"&gt;
                  &lt;xsl:choose&gt;
                  &lt;xsl:when test="$dataIdentity"&gt;
                  &lt;xsl:variable name="numberOfCharactersSoFar" as="xs:integer"
                  select="sum(for $textnode in preceding::text() return string-length($textnode))"/&gt;
                  &lt;vColl org="list"&gt;
                  &lt;xsl:for-each select="str:characters(string(.))"&gt;
                  &lt;vLabel name="{position() + $numberOfCharactersSoFar}"&gt;
                  &lt;xsl:if test="not($dataRepr) and $primary is $currentRoot"&gt;
                  &lt;string&gt;
                  &lt;xsl:value-of select="."/&gt;
                  &lt;/string&gt;
                  &lt;/xsl:if&gt;
                  &lt;/vLabel&gt;
                  &lt;/xsl:for-each&gt;
                  &lt;/vColl&gt;
                  &lt;/xsl:when&gt;
                  &lt;xsl:otherwise&gt;
                  &lt;string&gt;
                  &lt;xsl:value-of select="."/&gt;
                  &lt;/string&gt;
                  &lt;/xsl:otherwise&gt;
                  &lt;/xsl:choose&gt;
                  &lt;/f&gt;
                  &lt;/fs&gt;
                  &lt;/xsl:template&gt;
                  
               </div>
            </div>
            <div class="para e405"> There are two appropriate features for text nodes: 
               <div class="code e406">TYPE</div> and
               
               <div class="code e407">VALUE</div>. The 
               <div class="code e408">TYPE</div> feature is set to the symbolic value
               
               <div class="code e409">text</div>, of course. The procedure for determining the value of the feature
               
               <div class="code e410">VALUE</div>, however, is much more complicated. This holds at least for multiple
               annotation documents, where the identity of the primary data is given
               (
               <div class="code e411">$dataIdentity</div>). If this is not the case, we can just insert the value of the
               textual node as a whole. With regard to the data-identity scenario, however, we will
               proceed on
               a character by character basis with the help of an appropriately defined external
               function
               (
               <div class="code e412">str:characters</div>) and calculate the appropriate index for each character. The
               interesting part of the calculation is done in the binding of the variable
               
               <div class="code e413">$numberOfCharactersSoFar</div>. That result will be modulated by the relative position
               of each character with respect to the string value of the text node processed. If
               the user chose
               to go without the 
               <div class="code e414">DATA</div> feature on the top feature geometry level
               (
               <div class="code e415">not($dataRepr)</div>) and if we are processing the primary input document
               (
               <div class="code e416">$primary is $currentRoot</div>), not only the calculated indexes will be included in
               the list-valued result, but also the character values. Now that there is no specialized
               
               <div class="code e417">DATA</div> feature, the indexes will be bound to their respective value tokens
               here.
            </div>
         </div>
      </div><a name="SummaryandOutlookANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e418" xml:id="s4" xreflabel="‚ÄúSummary and Outlook‚Äù">
         <div class="title e419">Summary and Outlook</div>
         <div class="para e420">In the context of this article, we started by providing an informal introduction to
            feature
            structures and their encoding as proposed in the TEI P5 Guidelines. We continued to
            discuss
            aspects of the representation of multiple annotation documents as XML-encoded feature
            structures.
            Most of our pertinent remarks are also correct concerning the representation of generic
            XML
            documents. It is rather just the indexing mechanism that is lost for that more general
            domain.
            Furthermore, we characterized the implemented XSLT stylesheet that was written in
            order to bring
            about the transformation from multiply annotated or generic XML documents to TEI-based
            feature
            structure representations. In the remainder of this article, we will take up some
            loose ends and
            speculate about possible advantages and disadvantages that may be connected with the
            format. 
         </div>
         <div class="para e421">In comparison to alternative proposals like 
            <div class="emphasis e422">XCONCUR</div> (
            <div class="xref e423" linkend="hilbert2005"></div>,
            <div class="xref e424" linkend="schonefeld2006"></div>) and the 
            <div class="emphasis e425">NITE XML</div>
            format 
            <div class="xref e426" linkend="carletta2003"></div>, the following advantages and disadvantages can be stated.
            Like NITE XML, but unlike XCONCUR documents, the TEI-based feature structure format
            is an XML
            format, which should count as a definitive plus in most contexts. Furthermore, like
            XCONCUR, but
            unlike the NITE XML representations, the proposed TEI feature structures are integrative
            in a
            strict sense of the word. What we mean is that all the distributed annotation information
            is made
            available within the context of a single document instance in which the implicit links
            have been
            made explicit. So, with regard to these two aspects, TEI feature structures seem to
            do quite well
            in comparison with the mentioned alternative formats, which lack in the one or the
            other way.
            However, there is also a big downside connected to them. The TEI feature structure
            representations grow very fast with the size of the input documents and their relative
            markup
            complexity, much faster than both rival formats.
            <div class="popupBox e427">
               <div class="popupLabel" onmouseover="$('#d1e1012').show('1000');" onmouseout="$('#d1e1012').hide('1000');">[ footnote ]</div>
               <div id="d1e1012" style="display: none;">
                  <div class="footnote">
                     <div class="para e428">XCONCUR seems to be leanest in this respect.</div>
                  </div>
               </div>
            </div> So serious doubts remain, whether this format can prevail in practical
            day-to-day-work if it is used for collections of large resource documents.
         </div>
         <div class="para e429">But are there any striking advantages that may be connected with the representation
            of XML
            documents in a feature structure format? Feature structures are a common data structure
            in
            linguistic theory and they play an important role in many implementations in computational
            linguistics. If the preferred representation format of computational linguists can
            be used, it
            may be possible to find a way to apply the processing tools that have been developed
            in that
            field and bridge the gap between the information given by annotations and the information
            contained in textual content. One may also speculate whether general operations on
            feature
            structures like 
            <div class="emphasis e430">unification</div> and 
            <div class="emphasis e431">generalization</div>, compare
            the section 
            <div class="xref e432" linkend="s2.1"></div> above, may be applicable to appropriately represented XML
            documents or linguistic corpora.
         </div>
         <div class="figure e433" xml:id="f15" xreflabel="Figure 15">
            <div class="title e434">Attribute Value Matrix Notation of the Annotation Example 1</div>
            <div class="mediaobject e435">
               <div class="imageobject e436">
                  <div class="metaBox e437"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1032').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1032" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e437'
                           </span><span class="metaAttribute">fileref='../../../vol3/graphics/Stegmann01/Stegmann01-006.jpg'
                           </span><span class="metaAttribute">format='jpg'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e438">Compare 
            <div class="xref e439" linkend="f15"></div> and 
            <div class="xref e440" linkend="f16"></div>. These are possible TEI feature
            structures for the simple linguistic annotation examples that we have used before.
            Unlike 
            <div class="xref e441" linkend="f11"></div>, which is an integrative representation of both example documents, each figure
            here displays the representation of just one annotation document. These examples will
            help us to
            explore some of the issues involved.
         </div>
         <div class="figure e442" xml:id="f16" xreflabel="Figure 16">
            <div class="title e443">Attribute Value Matrix Notation of the Annotation Example 2</div>
            <div class="mediaobject e444">
               <div class="imageobject e445">
                  <div class="metaBox e446"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1047').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1047" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e446'
                           </span><span class="metaAttribute">fileref='../../../vol3/graphics/Stegmann01/Stegmann01-007.jpg'
                           </span><span class="metaAttribute">format='jpg'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e447"> As before, we have to consider two broad scenarios: operations among multiply annotated
            documents and operations among generic XML documents. The main difference between
            both has to do
            with the values of the 
            <div class="code e448">DATA</div> feature.
            <div class="popupBox e449">
               <div class="popupLabel" onmouseover="$('#d1e1053').show('1000');" onmouseout="$('#d1e1053').hide('1000');">[ footnote ]</div>
               <div id="d1e1053" style="display: none;">
                  <div class="footnote">
                     <div class="para e450">For the sake of the argument, we will presume that there will be a 
                        <div class="code e451">DATA</div>
                        feature on the top-level of all TEI feature structures. The stylesheet does not force
                        this,
                        though.
                     </div>
                  </div>
               </div>
            </div> For multiple annotation, the values of 
            <div class="code e452">DATA</div> will be identical and the
            respective features can, hence, be unified. However, for generic XML documents the
            
            <div class="code e453">DATA</div> values will almost always be different. Hence, they usually won't unify . And
            even multiply annotated documents will run into problems when it comes to the value
            of the
            
            <div class="code e454">DOCUMENTS</div> feature slot, compare 
            <div class="xref e455" linkend="f15"></div> and 
            <div class="xref e456" linkend="f16"></div>. So
            the bare unification of complete representations does not seem to work out for either
            class of
            documents.
         </div>
         <div class="figure e457" xml:id="f17" xreflabel="Figure 17">
            <div class="title e458">Rule that uses Unification for Multiple Annotation Data</div>
            <div class="mediaobject e459">
               <div class="imageobject e460">
                  <div class="metaBox e461"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1081').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1081" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e461'
                           </span><span class="metaAttribute">fileref='../../../vol3/graphics/Stegmann01/Stegmann01-008.jpg'
                           </span><span class="metaAttribute">format='jpg'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e462">However, there is a way how unification may be put to use with regard to respective
            representations, but in a somewhat different way. It works analogously to the way
            in which
            unification is put to use in 
            <div class="emphasis e463">linguistic rules</div> in unification-based grammars.
            We do not unify the whole representations, but only parts of it in accordance to a
            rule, which
            directs how to build a bigger structure from smaller structures (or vice versa, this
            is a
            question of procedural interpretation). Structures that are coindexed within a rule
            have to be
            unified when the rule is applied. In line with this, e.g., our annotation examples
            (on the right
            hand side of the rule) can be projected to a bigger structure (on the left hand side
            of the
            rule) as displayed in 
            <div class="xref e464" linkend="f17"></div>. For generic XML documents, a rule like 
            <div class="xref e465" linkend="f18"></div> might work.
         </div>
         <div class="figure e466" xml:id="f18" xreflabel="Figure 18">
            <div class="title e467">Rule that uses Unification for Generic XML Documents</div>
            <div class="mediaobject e468">
               <div class="imageobject e469">
                  <div class="metaBox e470"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1097').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1097" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e470'
                           </span><span class="metaAttribute">fileref='../../../vol3/graphics/Stegmann01/Stegmann01-009.jpg'
                           </span><span class="metaAttribute">format='jpg'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e471">For another perspective on the unification of XML documents compare 
            <div class="xref e472" linkend="witt2005"></div>.
         </div>
         <div class="para e473">There is also a second general operation on feature structures: generalization. Unlike
            unification, generalization cannot fail. And indeed, generalization can be put to
            use concerning
            our examples here. The result indicates what is common to both representations and
            is shown in
            
            <div class="xref e474" linkend="f19"></div>.
         </div>
         <div class="figure e475" xml:id="f19" xreflabel="Figure 19">
            <div class="title e476">Generalization of the Annotation Data Examples 1 and 2</div>
            <div class="mediaobject e477">
               <div class="imageobject e478">
                  <div class="metaBox e479"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1112').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1112" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e479'
                           </span><span class="metaAttribute">fileref='../../../vol3/graphics/Stegmann01/Stegmann01-010.jpg'
                           </span><span class="metaAttribute">format='jpg'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e480"> One of the anonymous reviewers of this paper stated that (s)he thinks that its strength
            is
            "as a sort of thought experiment that has not provided quite the breakthrough that
            was hoped for
            it; yet interesting things have been learned and observed." This is not too far off
            from our own
            perspective. Although we were able to show that this and that can be done, at least
            in
            principle---as things stand, we do not think that it is likely that TEI feature structures
            will
            turn out to be the silver bullet for the representation of linguistic annotations
            or generic XML
            documents. Our respective representations grow too fast and isn't yet clear, whether
            good and
            sensible use can be made of the general operations on feature structures open to us
            now, i.e.,
            whether the potential advantages can override the disadvantages connected to it. But
            it seems
            that there are at least some open questions that remain to be investigated. For example,
            perhaps
            we could come up with a different way of representing XML documents in terms of TEI
            feature
            structures as compared to our current representation practice and see if that helps
            in any way.
            Going with typed feature structures might be a worthwhile thing to try. However, we
            think that
            the prospects are not too good, since the foundational issue of complex modeling and
            retranslating to XML would basically stay the same and it seems that this is quite
            an overhead to
            cope with. Therefore, finally, we will at least mention a different direction that
            has been
            encouraged by the very same reviewer mentioned above. (S)he advised to step away from
            the
            TEI-ness of the present approach in order to investigate the prospects of bare feature
            structures, e.g., in the sense of an implemented library, with respect to the issues
            at
            hand.
         </div>
      </div><a name="Appendix:ResultDocumentfortheAnnotationDataExamplesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="appendix e481" xml:id="a1" xreflabel="Appendix A">
         <div class="title e482">Appendix: Result Document for the Annotation Data Examples</div>
         <div class="programlisting e483" xml:space="preserve">
            &lt;?xml version="1.0" encoding="UTF-8"?&gt;
            &lt;fs&gt;
            &lt;f name="DATA"&gt;
            &lt;vColl org="list"&gt;
            &lt;vLabel name="1"&gt;
            &lt;string&gt;g&lt;/string&gt;
            &lt;/vLabel&gt;
            &lt;vLabel name="2"&gt;
            &lt;string&gt;e&lt;/string&gt;
            &lt;/vLabel&gt;
            &lt;vLabel name="3"&gt;
            &lt;string&gt;b&lt;/string&gt;
            &lt;/vLabel&gt;
            &lt;vLabel name="4"&gt;
            &lt;string&gt;e&lt;/string&gt;
            &lt;/vLabel&gt;
            &lt;vLabel name="5"&gt;
            &lt;string&gt;n&lt;/string&gt;
            &lt;/vLabel&gt;
            &lt;/vColl&gt;
            &lt;/f&gt;
            &lt;f name="DOCUMENTS"&gt;
            &lt;vColl org="list"&gt;
            &lt;fs&gt;
            &lt;f name="TYPE"&gt;
            &lt;symbol value="document"/&gt;
            &lt;/f&gt;
            &lt;f name="CHILDREN"&gt;
            &lt;vColl org="list"&gt;
            &lt;fs&gt;
            &lt;f name="TYPE"&gt;
            &lt;symbol value="element"/&gt;
            &lt;/f&gt;
            &lt;f name="NAME"&gt;
            &lt;string&gt;w&lt;/string&gt;
            &lt;/f&gt;
            &lt;f name="ATTRIBUTES"&gt;
            &lt;vColl org="set"/&gt;
            &lt;/f&gt;
            &lt;f name="CHILDREN"&gt;
            &lt;vColl org="list"&gt;
            &lt;fs&gt;
            &lt;f name="TYPE"&gt;
            &lt;symbol value="element"/&gt;
            &lt;/f&gt;
            &lt;f name="NAME"&gt;
            &lt;string&gt;m&lt;/string&gt;
            &lt;/f&gt;
            &lt;f name="ATTRIBUTES"&gt;
            &lt;vColl org="set"&gt;
            &lt;fs&gt;
            &lt;f name="TYPE"&gt;
            &lt;symbol value="attribute"/&gt;
            &lt;/f&gt;
            &lt;f name="NAME"&gt;
            &lt;string&gt;type&lt;/string&gt;
            &lt;/f&gt;
            &lt;f name="VALUE"&gt;
            &lt;string&gt;lexical&lt;/string&gt;
            &lt;/f&gt;
            &lt;/fs&gt;
            &lt;/vColl&gt;
            &lt;/f&gt;
            &lt;f name="CHILDREN"&gt;
            &lt;vColl org="list"&gt;
            &lt;fs&gt;
            &lt;f name="TYPE"&gt;
            &lt;symbol value="text"/&gt;
            &lt;/f&gt;
            &lt;f name="VALUE"&gt;
            &lt;vColl org="list"&gt;
            &lt;vLabel name="1"/&gt;
            &lt;vLabel name="2"/&gt;
            &lt;vLabel name="3"/&gt;
            &lt;/vColl&gt;
            &lt;/f&gt;
            &lt;/fs&gt;
            &lt;/vColl&gt;
            &lt;/f&gt;
            &lt;/fs&gt;
            &lt;fs&gt;
            &lt;f name="TYPE"&gt;
            &lt;symbol value="element"/&gt;
            &lt;/f&gt;
            &lt;f name="NAME"&gt;
            &lt;string&gt;m&lt;/string&gt;
            &lt;/f&gt;
            &lt;f name="ATTRIBUTES"&gt;
            &lt;vColl org="set"&gt;
            &lt;fs&gt;
            &lt;f name="TYPE"&gt;
            &lt;symbol value="attribute"/&gt;
            &lt;/f&gt;
            &lt;f name="NAME"&gt;
            &lt;string&gt;type&lt;/string&gt;
            &lt;/f&gt;
            &lt;f name="VALUE"&gt;
            &lt;string&gt;flexive&lt;/string&gt;
            &lt;/f&gt;
            &lt;/fs&gt;
            &lt;/vColl&gt;
            &lt;/f&gt;
            &lt;f name="CHILDREN"&gt;
            &lt;vColl org="list"&gt;
            &lt;fs&gt;
            &lt;f name="TYPE"&gt;
            &lt;symbol value="text"/&gt;
            &lt;/f&gt;
            &lt;f name="VALUE"&gt;
            &lt;vColl org="list"&gt;
            &lt;vLabel name="4"/&gt;
            &lt;vLabel name="5"/&gt;
            &lt;/vColl&gt;
            &lt;/f&gt;
            &lt;/fs&gt;
            &lt;/vColl&gt;
            &lt;/f&gt;
            &lt;/fs&gt;
            &lt;/vColl&gt;
            &lt;/f&gt;
            &lt;/fs&gt;
            &lt;/vColl&gt;
            &lt;/f&gt;
            &lt;/fs&gt;
            &lt;fs&gt;
            &lt;f name="TYPE"&gt;
            &lt;symbol value="document"/&gt;
            &lt;/f&gt;
            &lt;f name="CHILDREN"&gt;
            &lt;vColl org="list"&gt;
            &lt;fs&gt;
            &lt;f name="TYPE"&gt;
            &lt;symbol value="element"/&gt;
            &lt;/f&gt;
            &lt;f name="NAME"&gt;
            &lt;string&gt;w&lt;/string&gt;
            &lt;/f&gt;
            &lt;f name="ATTRIBUTES"&gt;
            &lt;vColl org="set"/&gt;
            &lt;/f&gt;
            &lt;f name="CHILDREN"&gt;
            &lt;vColl org="list"&gt;
            &lt;fs&gt;
            &lt;f name="TYPE"&gt;
            &lt;symbol value="element"/&gt;
            &lt;/f&gt;
            &lt;f name="NAME"&gt;
            &lt;string&gt;syll&lt;/string&gt;
            &lt;/f&gt;
            &lt;f name="ATTRIBUTES"&gt;
            &lt;vColl org="set"&gt;
            &lt;fs&gt;
            &lt;f name="TYPE"&gt;
            &lt;symbol value="attribute"/&gt;
            &lt;/f&gt;
            &lt;f name="NAME"&gt;
            &lt;string&gt;n&lt;/string&gt;
            &lt;/f&gt;
            &lt;f name="VALUE"&gt;
            &lt;string&gt;s1&lt;/string&gt;
            &lt;/f&gt;
            &lt;/fs&gt;
            &lt;/vColl&gt;
            &lt;/f&gt;
            &lt;f name="CHILDREN"&gt;
            &lt;vColl org="list"&gt;
            &lt;fs&gt;
            &lt;f name="TYPE"&gt;
            &lt;symbol value="text"/&gt;
            &lt;/f&gt;
            &lt;f name="VALUE"&gt;
            &lt;vColl org="list"&gt;
            &lt;vLabel name="1"/&gt;
            &lt;vLabel name="2"/&gt;
            &lt;/vColl&gt;
            &lt;/f&gt;
            &lt;/fs&gt;
            &lt;/vColl&gt;
            &lt;/f&gt;
            &lt;/fs&gt;
            &lt;fs&gt;
            &lt;f name="TYPE"&gt;
            &lt;symbol value="element"/&gt;
            &lt;/f&gt;
            &lt;f name="NAME"&gt;
            &lt;string&gt;syll&lt;/string&gt;
            &lt;/f&gt;
            &lt;f name="ATTRIBUTES"&gt;
            &lt;vColl org="set"&gt;
            &lt;fs&gt;
            &lt;f name="TYPE"&gt;
            &lt;symbol value="attribute"/&gt;
            &lt;/f&gt;
            &lt;f name="NAME"&gt;
            &lt;string&gt;n&lt;/string&gt;
            &lt;/f&gt;
            &lt;f name="VALUE"&gt;
            &lt;string&gt;s2&lt;/string&gt;
            &lt;/f&gt;
            &lt;/fs&gt;
            &lt;/vColl&gt;
            &lt;/f&gt;
            &lt;f name="CHILDREN"&gt;
            &lt;vColl org="list"&gt;
            &lt;fs&gt;
            &lt;f name="TYPE"&gt;
            &lt;symbol value="text"/&gt;
            &lt;/f&gt;
            &lt;f name="VALUE"&gt;
            &lt;vColl org="list"&gt;
            &lt;vLabel name="3"/&gt;
            &lt;vLabel name="4"/&gt;
            &lt;vLabel name="5"/&gt;
            &lt;/vColl&gt;
            &lt;/f&gt;
            &lt;/fs&gt;
            &lt;/vColl&gt;
            &lt;/f&gt;
            &lt;/fs&gt;
            &lt;/vColl&gt;
            &lt;/f&gt;
            &lt;/fs&gt;
            &lt;/vColl&gt;
            &lt;/f&gt;
            &lt;/fs&gt;
            &lt;/vColl&gt;
            &lt;/f&gt;
            &lt;/fs&gt;
            
         </div>
      </div><a name="BibliographyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e484">
         <div class="title e485">Bibliography</div>
         <div class="bibliomixed e486" xml:id="p5" xreflabel="(Burnard and Bauman, 2007)">Burnard, L. and Bauman, S.
            
            <div class="emphasis e487">TEI P5: Guidelines for Electronic Text Encoding and Interchange.</div> Text
            Encoding Initiative, 2007
         </div>
         <div class="bibliomixed e488" xml:id="carletta2003" xreflabel="(Carletta et al., 2003)">Carletta, J.; Kilgour, J.;
            O'Donnell, T.; Evert, S. and Voormann, H. 
            <div class="emphasis e489">The NITE Object Model Library for Handling
               Structured Linguistic Annotation on Multimodal Data Sets.
            </div> In: Proceedings of the EACL
            Workshop on Language Technology and the Semantic Web (3rd Workshop on NLP and XML,
            NLPXML-2003),
            2003
         </div>
         <div class="bibliomixed e490" xml:id="carletta2007" xreflabel="(Carletta et al.,2007)">Carletta, J.; DeRose, S.;
            Durusau, P.; Piez, W.; Sperberg-McQueen, C. M.; Tennison, J. and Witt, A. 
            <div class="emphasis e491">International
               Workshop on Markup of Overlapping Structures.
            </div> In: Usdin, B. T. (ed.) Proceedings of
            Extreme Markup Languages 2007, 2007
         </div>
         <div class="bibliomixed e492" xml:id="carpenter1992" xreflabel="(Carpenter, 1992)">Carpenter, B. 
            <div class="emphasis e493">The
               Logic of Typed Feature Structures: With Applications to Unification Grammars, Logic
               Programs and
               Constraint Resolution.
            </div> Cambridge University Press, 1992
         </div>
         <div class="bibliomixed e494" xml:id="derose2004" xreflabel="(DeRose, 2004)">DeRose, S. 
            <div class="emphasis e495">Markup Overlap: A
               Review and a Horse.
            </div> In: Usdin, B. T. (ed.) Proceedings of Extreme Markup Languages
            2004, 2004
         </div>
         <div class="bibliomixed e496" xml:id="diestel2005" xreflabel="(Diestel, 2005)">Diestel, R. 
            <div class="emphasis e497">Graph
               Theory
            </div>. Springer, 2005
         </div>
         <div class="bibliomixed e498" xml:id="hilbert2005" xreflabel="(Hilbert et al.,2005)">Hilbert, M.; Schonefeld, O.
            and Witt, A. 
            <div class="emphasis e499">Making CONCUR work.</div> In: Usdin, B. T. (ed.) Proceedings of
            Extreme Markup Languages 2005, 2005
         </div>
         <div class="bibliomixed e500" xml:id="iso24610" xreflabel="(ISO24610, 2006)">24610-1:2006, I. 
            <div class="emphasis e501">Language
               Resource Management -- Feature Structures -- Part 1: Feature Structure
               Representation.
            </div>International Organization for Standardization, 2006
         </div>
         <div class="bibliomixed e502" xml:id="kay2008" xreflabel="(Kay, 2008)">Kay, M. 
            <div class="emphasis e503">XSLT 2.0 and XPath 2.0
               Programmer's Reference.
            </div> Wrox Press Ltd., 2008
         </div>
         <div class="bibliomixed e504" xml:id="nlm" xreflabel="(NLM,2008)">
            <div class="emphasis e505">Custom Metadata Group</div>. In:
            Journal Archiving and Interchange Tag Set Tag Library version 3.0, Version of November
            2008.
         </div>
         <div class="bibliomixed e506" xml:id="pollard1994" xreflabel="(Pollard and Sag, 1994)">Pollard, C. and Sag, I.
            
            <div class="emphasis e507">Head-Driven Phrase Structure Grammar.</div> The University of Chicago Press,
            1994
         </div>
         <div class="bibliomixed e508" xml:id="sailer2001" xreflabel="(Sailer and Richter, 2001)">Sailer, M. and Richter, F.
            
            <div class="emphasis e509">Eine XML-Kodierung f√ºr AVM-Beschreibungen.</div> In: Lobin, H. (ed.). Sprach- und
            Texttechnologie in digitalen Medien: Proceedings der GLDV-Fr√ºhjahrstagung 2001. BOD
            - Books on
            Demand, 2001, 161-168
         </div>
         <div class="bibliomixed e510" xml:id="schonefeld2006" xreflabel="(Schonefeld and Witt, 2006)">Schonefeld, O. and
            Witt, A. 
            <div class="emphasis e511">Towards validation of concurrent markup.</div> In: Usdin, B. T. (ed.).
            Proceedings of Extreme Markup Languages 2006, 2006
         </div>
         <div class="bibliomixed e512" xml:id="shieber1986" xreflabel="(Shieber, 1986)">Shieber, S. M. 
            <div class="emphasis e513">An
               Introduction to Unification-based Approaches to Grammar.
            </div> CSLI Publications,
            1986
         </div>
         <div class="bibliomixed e514" xml:id="p3" xreflabel="(Sperberg-McQueen and Burnard, 1994)">Sperberg-McQueen, C. M.
            and Burnard, L. 
            <div class="emphasis e515">TEI Guidelines for Electronic Text Encoding and Interchange (TEI
               P3).
            </div> Text Encoding Initiative, 1994
         </div>
         <div class="bibliomixed e516" xml:id="p4" xreflabel="(Sperberg-McQueen and Burnard, 2001)">Sperberg-McQueen, C. M.
            and Burnard, L. 
            <div class="emphasis e517">Guidelines for Electronic Text Encoding and Interchange (TEI
               P4).
            </div> Text Encoding Initiative, 2001
         </div>
         <div class="bibliomixed e518" xml:id="sperberg-mcqueen2007" xreflabel="(Sperberg-McQueen, 2007)">Sperberg-McQueen,
            C. M. 
            <div class="emphasis e519">Representation of overlapping structures.</div> In: Usdin, B. T. (ed.)
            Extreme Markup Languages 2007, 2007
         </div>
         <div class="bibliomixed e520" xml:id="tennison2005" xreflabel="(Tennison, 2005)">Tennison, J. 
            <div class="emphasis e521">Beginning
               XSLT 2.0: From Novice to Professional.
            </div> Apress, 2005
         </div>
         <div class="bibliomixed e522" xml:id="witt2004" xreflabel="(Witt, 2004)">Witt, A. 
            <div class="emphasis e523">Multiple Hierarchies:
               New Aspects of an Old Solution.
            </div> In: Usdin, B. T. (ed.) Proceedings of Extreme Markup
            Languages 2004, 2004 
         </div>
         <div class="bibliomixed e524" xml:id="witt2005" xreflabel="(Witt et al., 2005)">Witt, A.; Goecke, D.; Sasaki, F.
            and L√ºngen, H. 
            <div class="emphasis e525">Unification of XML Documents with Concurrent Markup.</div> Literary
            and Linguistic Computing, 2005, 20, 103-116, doi: 
            <div class="biblioid doi e526">10.1093/llc/fqh046</div>
         </div>
         <div class="bibliomixed e527" xml:id="witt2007" xreflabel="(Witt et al., 2007)">Witt, A.; Schonefeld, O.; Rehm, G.;
            Khoo, J. and Evang, K. 
            <div class="emphasis e528">On the Lossless Transformation of Single-File Multi-Layer
               Annotations into Multi-Rooted Trees.
            </div> In: Usdin, B. T. (ed.). Proceedings of Extreme
            Markup Languages 2007, 2007 
         </div>
         <div class="bibliomixed e529" xml:id="witt2009" xreflabel="(Witt et al., 2009)">Witt, A.; Rehm, G.; Hinrichs, E.;
            Lehmberg, T. and Stegmann, J. 
            <div class="emphasis e530">SusTEInability of Linguistic Resources through Feature
               Structures.
            </div> Literary and Linguistic Computing, 2009,  24, 363-372, doi: 
            <div class="biblioid doi e531">10.1093/llc/fqp024</div>
         </div>
         <div class="bibliomixed e532" xml:id="woerner2006" xreflabel="(W√∂rner et al., 2006)">W√∂rner, K.; Witt, A.; Rehm, G.
            and Dipper, S. 
            <div class="emphasis e533">Modelling Linguistic Data Structures.</div> In: Usdin, B. T. (ed.).
            Proceedings of Extreme Markup Languages 2006, 2006
         </div>
      </div>
   </div>
</div>