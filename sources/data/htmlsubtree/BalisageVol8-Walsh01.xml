<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#OnXMLLanguages%E2%80%A6ANCHOR" name="OnXMLLanguages%E2%80%A6TOC">On XML Languages…</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#Syntactically:XMLornot?ANCHOR" name="Syntactically:XMLornot?TOC">Syntactically: XML or not?</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ThecaseforXMLsyntaxesANCHOR" name="ThecaseforXMLsyntaxesTOC">The case for XML syntaxes</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ThecasefornonXMLsyntaxesANCHOR" name="ThecasefornonXMLsyntaxesTOC">The case for non-XML syntaxes</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#Syntactically:Both?ANCHOR" name="Syntactically:Both?TOC">Syntactically: Both?</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#Casestudies:compactsyntaxesforXProcANCHOR" name="Casestudies:compactsyntaxesforXProcTOC">Case studies: compact syntaxes for XProc</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#Casestudy1:AcompactsyntaxforXProcANCHOR" name="Casestudy1:AcompactsyntaxforXProcTOC">Case study 1: A compact syntax for XProc</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#Casestudy2:AnalternatecompactsyntaxforXProcANCHOR" name="Casestudy2:AnalternatecompactsyntaxforXProcTOC">Case study 2: An alternate compact syntax for XProc</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#GrammarforXProcCompactSyntax1ANCHOR" name="GrammarforXProcCompactSyntax1TOC">Grammar for XProc Compact Syntax #1</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ImplementationANCHOR" name="ImplementationTOC">Implementation</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ReferencesANCHOR" name="ReferencesTOC">References</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">August 7 - 10, 2012</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">BEGIN</div>
         <div class="singletermTERMS">but</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2012</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">CName</div>
         <div class="singletermTERMS">cx:type</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">domain specific language</div>
         <div class="singletermTERMS">DocBook: The Definitive Guide</div>
         <div class="singletermTERMS">dbslides.xsl</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">END</div>
         <div class="singletermTERMS">exactly</div>
         <div class="singletermTERMS">every</div>
         <div class="singletermTERMS">ends</div>
         <div class="singletermTERMS">except</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">inline</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">non-XML</div>
         <div class="singletermTERMS">Norman</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">p:documentation</div>
         <div class="singletermTERMS">p:inline</div>
         <div class="singletermTERMS">p:choose</div>
         <div class="singletermTERMS">produce</div>
         <div class="singletermTERMS">precisely</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">RELAX NG Compact Syntax</div>
         <div class="singletermTERMS">remarkably</div>
         <div class="singletermTERMS">REx Parser Generator</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">specifically</div>
         <div class="singletermTERMS">syntax</div>
         <div class="singletermTERMS">syntactic</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">twice</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
         <div class="singletermTERMS">unitprice</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">XQueryX</div>
         <div class="singletermTERMS">XSLT</div>
         <div class="singletermTERMS">XQuery</div>
         <div class="singletermTERMS">XProc: An XML Pipeline Language</div>
         <div class="singletermTERMS">XML Calabash</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="OnXMLLanguages%E2%80%A6ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3">
      <div class="title e1">On XML Languages…</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2012</div>
            <div class="confdates e5">August 7 - 10, 2012</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">Some XML languages have an XML syntax, some have a non-XML
               syntax, and some have both. This paper explores the intersection of these
               languages and syntaxes. What are the advantages of an XML syntax? What are
               the advantages of a non-XML syntax? After discussing the general issues, the
               paper presents two, alternative non-XML syntaxes for XProc as a case study
               to further explore the issues.
            </div>
         </div>
         <div class="author e8">
            <div class="personname e9">
               <div class="firstname e10">Norman</div>
               <div class="surname e11">Walsh</div>
            </div>
            <div class="personblurb e12">
               <div class="para e13">Norman Walsh is a Lead Engineer at MarkLogic Corporation where he
                  works with the Application Services team. Norm is also an active
                  participant in a number of standards efforts worldwide: he is chair of
                  the XML Processing Model Working Group at the W3C where he is also
                  co-chair of the XML Core Working Group. At OASIS, he is chair of the
                  DocBook Technical Committee.
               </div>
               <div class="para e14">With more than a decade of industry experience, Norm is well known for
                  his work on DocBook and a wide range of open source projects. He is the
                  author of 
                  <div class="emphasis e15">DocBook: The Definitive Guide</div>.
               </div>
            </div>
         </div>
         <div class="legalnotice e16">
            <div class="para e17">Copyright © 2012 Norman Walsh</div>
         </div>
      </div>
      <div class="para e18">The Desperate Perl Hacker featured often in the early days of
         XML. Designing a markup format that could be processed easily by
         ordinary programmers using their chosen languages was an explicit
         goal of XML: 
         <div class="quote e19">4. It
            shall be easy to write programs which process XML documents.
         </div>
         
      </div>
      <div class="para e20">This goal was achieved, at least for XML itself, if not all of the
         subsequent specifications in the broader ecosystem, and as a consequence
         there are no significant, mainstream languages which are incapable of processing
         XML. There are probably none for which there aren't a choice of XML
         parsers. Any language built on top of the Java VM includes such a choice.
         Modern languages like Scala include features for the specific purpose of
         writing 
         <div class="quote e21">domain specific language</div> parsers. These allow XML,
         or subsets of XML, to be incorporated directly into the language itself.
         
      </div>
      <div class="para e22">It is straightforward to parse XML with more-or-less any programming
         language you care to use. The way, and the extent to which, XML coexists with
         those languages is largely a question of their design and the full range
         of language design is outside the scope of this paper.
      </div>
      <div class="para e23">
         <div class="emphasis e24">Within</div> the XML community, many XML
         languages have been designed 
         <div class="emphasis e25">specifically</div> for the
         purpose of processing XML. These include all of the usual suspects:
         validation languages, transformation languages, query languages, etc.
         These are languages designed by XML users for XML users to process XML.
         These are the languages that are the focus of this paper.
      </div>
      <div class="para e26">We are concerned mostly with the 
         <div class="emphasis e27">syntax</div> of these
         languages, not their semantics. Of course, syntax and semantics are not
         wholly separable. A language whose semantics are nothing more than the
         expression of a single boolean value needs at most two tokens and so
         can be vastly simpler syntactically than a language with Turing complete
         semantics. Nevertheless, we'll focus mostly on the syntax for syntaxes
         sake.
      </div>
      <div class="para e28">The first, perhaps most obvious, question to ask about the syntax
         of an XML language is: to what extent is it XML itself? A brief survey
         of XML languages reveals that there is considerable variety on this point.
         
      </div>
      <div class="para e29">On one end of the spectrum,
         
         <div class="emphasis e30">RELAX NG Compact Syntax</div> has nothing that resembles XML to the untrained
         eye. See 
         <div class="xref e31" linkend="ex.rnc"></div>.
      </div>
      <div class="figure e32" xml:id="ex.rnc">
         <div class="title e33">RELAX NG Compact Syntax</div>
         <div class="programlisting e34" xml:space="preserve">namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
            namespace db = "http://docbook.org/ns/docbook"
            
            start = purchaseOrder
            
            purchaseOrder = element po { item+ }
            
            item = element item { itemno, quantity, description, unitprice }
            
            itemno =
            element itemno {
            xsd:string { pattern = "[A-Z]+[0-9]+" }
            }
            
            quantity = element quantity { xsd:decimal }
            
            description = element description { (text | emph)* }
            
            emph = element emph { (text | emph)* }
            
            unitprice =
            [
            db:para [
            "The unit price must have an associated currency.\x{a}" ~
            "If no currency is explicitly specified, the default\x{a}" ~
            "value of "
            db:literal [ "USD" ]
            "\x{a}"
            db:emphasis [ "must" ]
            " be assumed."
            ]
            ]
            element unitprice {
            [ a:defaultValue = "USD" ]
            attribute currency {
            ## US Dollars
            "USD"
            | ## Great British Pounds
            "GBP"
            | ## Euro
            "EUR"
            }?,
            xsd:decimal { fractionDigits = "2" }
            }
            
         </div>
      </div>
      <div class="para e35">On the other end of the spectrum,
         
         <div class="emphasis e36">XQueryX</div> is nothing 
         <div class="emphasis e37">but</div> XML.
         See 
         <div class="xref e38" linkend="ex.xqx"></div>.
      </div>
      <div class="figure e39" xml:id="ex.xqx">
         <div class="title e40">XQueryX</div>
         <div class="programlisting e41" xml:space="preserve">&lt;?xml version="1.0"?&gt;
            &lt;xqx:module xmlns:xqx="http://www.w3.org/2005/XQueryX"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.w3.org/2005/XQueryX
            http://www.w3.org/2005/XQueryX/xqueryx.xsd"&gt;
            &lt;xqx:versionDecl&gt;
            &lt;xqx:version&gt;1.0&lt;/xqx:version&gt;
            &lt;!-- encoding: null --&gt;
            &lt;/xqx:versionDecl&gt;
            &lt;xqx:mainModule&gt;
            &lt;xqx:prolog&gt;
            &lt;xqx:defaultNamespaceDecl&gt;
            &lt;xqx:defaultNamespaceCategory&gt;function&lt;/xqx:defaultNamespaceCategory&gt;
            &lt;xqx:uri&gt;http://www.w3.org/2005/xpath-functions&lt;/xqx:uri&gt;
            &lt;/xqx:defaultNamespaceDecl&gt;
            &lt;/xqx:prolog&gt;
            &lt;xqx:queryBody&gt;
            &lt;xqx:flworExpr&gt;
            &lt;xqx:letClause&gt;
            &lt;xqx:letClauseItem&gt;
            &lt;xqx:typedVariableBinding&gt;
            &lt;xqx:varName&gt;rows&lt;/xqx:varName&gt;
            &lt;/xqx:typedVariableBinding&gt;
            &lt;xqx:letExpr&gt;
            &lt;xqx:flworExpr&gt;
            &lt;xqx:forClause&gt;
            &lt;xqx:forClauseItem&gt;
            &lt;xqx:typedVariableBinding&gt;
            &lt;xqx:varName&gt;item&lt;/xqx:varName&gt;
            &lt;/xqx:typedVariableBinding&gt;
            &lt;xqx:forExpr&gt;
            &lt;xqx:pathExpr&gt;
            &lt;xqx:rootExpr/&gt;
            &lt;xqx:stepExpr&gt;
            &lt;xqx:xpathAxis&gt;child&lt;/xqx:xpathAxis&gt;
            &lt;xqx:nameTest&gt;po&lt;/xqx:nameTest&gt;
            &lt;/xqx:stepExpr&gt;
            &lt;xqx:stepExpr&gt;
            &lt;xqx:xpathAxis&gt;child&lt;/xqx:xpathAxis&gt;
            &lt;xqx:nameTest&gt;item&lt;/xqx:nameTest&gt;
            &lt;/xqx:stepExpr&gt;
            &lt;/xqx:pathExpr&gt;
            &lt;/xqx:forExpr&gt;
            &lt;/xqx:forClauseItem&gt;
            &lt;/xqx:forClause&gt;
            &lt;xqx:letClause&gt;
            &lt;xqx:letClauseItem&gt;
            &lt;xqx:typedVariableBinding&gt;
            &lt;xqx:varName&gt;itemno&lt;/xqx:varName&gt;
            &lt;/xqx:typedVariableBinding&gt;
            &lt;xqx:letExpr&gt;
            &lt;xqx:functionCallExpr&gt;
            &lt;xqx:functionName&gt;string&lt;/xqx:functionName&gt;
            &lt;xqx:arguments&gt;
            &lt;xqx:pathExpr&gt;
            &lt;xqx:stepExpr&gt;
            &lt;xqx:filterExpr&gt;
            &lt;xqx:varRef&gt;
            &lt;xqx:name&gt;item&lt;/xqx:name&gt;
            &lt;/xqx:varRef&gt;
            &lt;/xqx:filterExpr&gt;
            &lt;/xqx:stepExpr&gt;
            &lt;xqx:stepExpr&gt;
            &lt;xqx:xpathAxis&gt;child&lt;/xqx:xpathAxis&gt;
            &lt;xqx:nameTest&gt;itemno&lt;/xqx:nameTest&gt;
            &lt;/xqx:stepExpr&gt;
            &lt;/xqx:pathExpr&gt;
            &lt;/xqx:arguments&gt;
            &lt;/xqx:functionCallExpr&gt;
            &lt;/xqx:letExpr&gt;
            &lt;/xqx:letClauseItem&gt;
            &lt;/xqx:letClause&gt;
            &lt;xqx:letClause&gt;
            &lt;xqx:letClauseItem&gt;
            &lt;xqx:typedVariableBinding&gt;
            &lt;xqx:varName&gt;quant&lt;/xqx:varName&gt;
            &lt;/xqx:typedVariableBinding&gt;
            &lt;xqx:letExpr&gt;
            &lt;xqx:functionCallExpr&gt;
            &lt;xqx:functionName xqx:prefix="xs"&gt;integer&lt;/xqx:functionName&gt;
            &lt;xqx:arguments&gt;
            &lt;xqx:pathExpr&gt;
            &lt;xqx:stepExpr&gt;
            &lt;xqx:filterExpr&gt;
            &lt;xqx:varRef&gt;
            &lt;xqx:name&gt;item&lt;/xqx:name&gt;
            &lt;/xqx:varRef&gt;
            &lt;/xqx:filterExpr&gt;
            &lt;/xqx:stepExpr&gt;
            &lt;xqx:stepExpr&gt;
            &lt;xqx:xpathAxis&gt;child&lt;/xqx:xpathAxis&gt;
            &lt;xqx:nameTest&gt;quantity&lt;/xqx:nameTest&gt;
            &lt;/xqx:stepExpr&gt;
            &lt;/xqx:pathExpr&gt;
            &lt;/xqx:arguments&gt;
            &lt;/xqx:functionCallExpr&gt;
            &lt;/xqx:letExpr&gt;
            &lt;/xqx:letClauseItem&gt;
            &lt;/xqx:letClause&gt;
            &lt;xqx:letClause&gt;
            &lt;xqx:letClauseItem&gt;
            &lt;xqx:typedVariableBinding&gt;
            &lt;xqx:varName&gt;desc&lt;/xqx:varName&gt;
            &lt;/xqx:typedVariableBinding&gt;
            &lt;xqx:letExpr&gt;
            &lt;xqx:pathExpr&gt;
            &lt;xqx:stepExpr&gt;
            &lt;xqx:filterExpr&gt;
            &lt;xqx:varRef&gt;
            &lt;xqx:name&gt;item&lt;/xqx:name&gt;
            &lt;/xqx:varRef&gt;
            &lt;/xqx:filterExpr&gt;
            &lt;/xqx:stepExpr&gt;
            &lt;xqx:stepExpr&gt;
            &lt;xqx:xpathAxis&gt;child&lt;/xqx:xpathAxis&gt;
            &lt;xqx:nameTest&gt;description&lt;/xqx:nameTest&gt;
            &lt;/xqx:stepExpr&gt;
            &lt;xqx:stepExpr&gt;
            &lt;xqx:xpathAxis&gt;child&lt;/xqx:xpathAxis&gt;
            &lt;xqx:anyKindTest/&gt;
            &lt;/xqx:stepExpr&gt;
            &lt;/xqx:pathExpr&gt;
            &lt;/xqx:letExpr&gt;
            &lt;/xqx:letClauseItem&gt;
            &lt;/xqx:letClause&gt;
            &lt;xqx:letClause&gt;
            &lt;xqx:letClauseItem&gt;
            &lt;xqx:typedVariableBinding&gt;
            &lt;xqx:varName&gt;unitp&lt;/xqx:varName&gt;
            &lt;/xqx:typedVariableBinding&gt;
            &lt;xqx:letExpr&gt;
            &lt;xqx:functionCallExpr&gt;
            &lt;xqx:functionName xqx:prefix="xs"&gt;decimal&lt;/xqx:functionName&gt;
            &lt;xqx:arguments&gt;
            &lt;xqx:pathExpr&gt;
            &lt;xqx:stepExpr&gt;
            &lt;xqx:filterExpr&gt;
            &lt;xqx:varRef&gt;
            &lt;xqx:name&gt;item&lt;/xqx:name&gt;
            &lt;/xqx:varRef&gt;
            &lt;/xqx:filterExpr&gt;
            &lt;/xqx:stepExpr&gt;
            &lt;xqx:stepExpr&gt;
            &lt;xqx:xpathAxis&gt;child&lt;/xqx:xpathAxis&gt;
            &lt;xqx:nameTest&gt;unitprice&lt;/xqx:nameTest&gt;
            &lt;/xqx:stepExpr&gt;
            &lt;/xqx:pathExpr&gt;
            &lt;/xqx:arguments&gt;
            &lt;/xqx:functionCallExpr&gt;
            &lt;/xqx:letExpr&gt;
            &lt;/xqx:letClauseItem&gt;
            &lt;/xqx:letClause&gt;
            &lt;xqx:returnClause&gt;
            &lt;xqx:elementConstructor&gt;
            &lt;xqx:tagName&gt;tr&lt;/xqx:tagName&gt;
            &lt;xqx:attributeList&gt;
            &lt;xqx:namespaceDeclaration&gt;
            &lt;xqx:uri&gt;http://www.w3.org/1999/xhtml&lt;/xqx:uri&gt;
            &lt;/xqx:namespaceDeclaration&gt;
            &lt;/xqx:attributeList&gt;
            &lt;xqx:elementContent&gt;
            &lt;xqx:elementConstructor&gt;
            &lt;xqx:tagName&gt;td&lt;/xqx:tagName&gt;
            &lt;xqx:elementContent&gt;
            &lt;xqx:varRef&gt;
            &lt;xqx:name&gt;itemno&lt;/xqx:name&gt;
            &lt;/xqx:varRef&gt;
            &lt;/xqx:elementContent&gt;
            &lt;/xqx:elementConstructor&gt;
            &lt;xqx:elementConstructor&gt;
            &lt;xqx:tagName&gt;td&lt;/xqx:tagName&gt;
            &lt;xqx:elementContent&gt;
            &lt;xqx:varRef&gt;
            &lt;xqx:name&gt;quant&lt;/xqx:name&gt;
            &lt;/xqx:varRef&gt;
            &lt;/xqx:elementContent&gt;
            &lt;/xqx:elementConstructor&gt;
            &lt;xqx:elementConstructor&gt;
            &lt;xqx:tagName&gt;td&lt;/xqx:tagName&gt;
            &lt;xqx:elementContent&gt;
            &lt;xqx:varRef&gt;
            &lt;xqx:name&gt;desc&lt;/xqx:name&gt;
            &lt;/xqx:varRef&gt;
            &lt;/xqx:elementContent&gt;
            &lt;/xqx:elementConstructor&gt;
            &lt;xqx:elementConstructor&gt;
            &lt;xqx:tagName&gt;td&lt;/xqx:tagName&gt;
            &lt;xqx:elementContent&gt;
            &lt;xqx:varRef&gt;
            &lt;xqx:name&gt;unitp&lt;/xqx:name&gt;
            &lt;/xqx:varRef&gt;
            &lt;/xqx:elementContent&gt;
            &lt;/xqx:elementConstructor&gt;
            &lt;xqx:elementConstructor&gt;
            &lt;xqx:tagName&gt;td&lt;/xqx:tagName&gt;
            &lt;xqx:elementContent&gt;
            &lt;xqx:multiplyOp&gt;
            &lt;xqx:firstOperand&gt;
            &lt;xqx:varRef&gt;
            &lt;xqx:name&gt;quant&lt;/xqx:name&gt;
            &lt;/xqx:varRef&gt;
            &lt;/xqx:firstOperand&gt;
            &lt;xqx:secondOperand&gt;
            &lt;xqx:varRef&gt;
            &lt;xqx:name&gt;unitp&lt;/xqx:name&gt;
            &lt;/xqx:varRef&gt;
            &lt;/xqx:secondOperand&gt;
            &lt;/xqx:multiplyOp&gt;
            &lt;/xqx:elementContent&gt;
            &lt;/xqx:elementConstructor&gt;
            &lt;/xqx:elementContent&gt;
            &lt;/xqx:elementConstructor&gt;
            &lt;/xqx:returnClause&gt;
            &lt;/xqx:flworExpr&gt;
            &lt;/xqx:letExpr&gt;
            &lt;/xqx:letClauseItem&gt;
            &lt;/xqx:letClause&gt;
            &lt;xqx:returnClause&gt;
            &lt;xqx:elementConstructor&gt;
            &lt;xqx:tagName&gt;html&lt;/xqx:tagName&gt;
            &lt;xqx:attributeList&gt;
            &lt;xqx:namespaceDeclaration&gt;
            &lt;xqx:uri&gt;http://www.w3.org/1999/xhtml&lt;/xqx:uri&gt;
            &lt;/xqx:namespaceDeclaration&gt;
            &lt;/xqx:attributeList&gt;
            &lt;xqx:elementContent&gt;
            &lt;xqx:elementConstructor&gt;
            &lt;xqx:tagName&gt;head&lt;/xqx:tagName&gt;
            &lt;xqx:elementContent&gt;
            &lt;xqx:elementConstructor&gt;
            &lt;xqx:tagName&gt;title&lt;/xqx:tagName&gt;
            &lt;xqx:elementContent&gt;
            &lt;xqx:stringConstantExpr&gt;
            &lt;xqx:value&gt;Purchase Order&lt;/xqx:value&gt;
            &lt;/xqx:stringConstantExpr&gt;
            &lt;/xqx:elementContent&gt;
            &lt;/xqx:elementConstructor&gt;
            &lt;/xqx:elementContent&gt;
            &lt;/xqx:elementConstructor&gt;
            &lt;xqx:elementConstructor&gt;
            &lt;xqx:tagName&gt;body&lt;/xqx:tagName&gt;
            &lt;xqx:elementContent&gt;
            &lt;xqx:elementConstructor&gt;
            &lt;xqx:tagName&gt;h1&lt;/xqx:tagName&gt;
            &lt;xqx:elementContent&gt;
            &lt;xqx:stringConstantExpr&gt;
            &lt;xqx:value&gt;Purchase Order&lt;/xqx:value&gt;
            &lt;/xqx:stringConstantExpr&gt;
            &lt;/xqx:elementContent&gt;
            &lt;/xqx:elementConstructor&gt;
            &lt;xqx:elementConstructor&gt;
            &lt;xqx:tagName&gt;table&lt;/xqx:tagName&gt;
            &lt;xqx:elementContent&gt;
            &lt;xqx:varRef&gt;
            &lt;xqx:name&gt;rows&lt;/xqx:name&gt;
            &lt;/xqx:varRef&gt;
            &lt;/xqx:elementContent&gt;
            &lt;/xqx:elementConstructor&gt;
            &lt;/xqx:elementContent&gt;
            &lt;/xqx:elementConstructor&gt;
            &lt;/xqx:elementContent&gt;
            &lt;/xqx:elementConstructor&gt;
            &lt;/xqx:returnClause&gt;
            &lt;/xqx:flworExpr&gt;
            &lt;/xqx:queryBody&gt;
            &lt;/xqx:mainModule&gt;
            &lt;/xqx:module&gt;
            
         </div>
      </div>
      <div class="para e42">Other XML languages fit between those two ends. 
         <div class="emphasis e43">XSLT</div>
         has a mostly XML syntax, see 
         <div class="xref e44" linkend="ex.xslt"></div>.
      </div>
      <div class="figure e45" xml:id="ex.xslt">
         <div class="title e46">XSLT</div>
         <div class="programlisting e47" xml:space="preserve">&lt;?xml version="1.0" encoding="utf-8"?&gt;
            &lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
            xmlns:xs="http://www.w3.org/2001/XMLSchema"
            xmlns="http://www.w3.org/1999/xhtml"
            		exclude-result-prefixes="xs"
            version="2.0"&gt;
            
            &lt;xsl:template match="/"&gt;
            &lt;xsl:variable name="rows"&gt;
            &lt;xsl:for-each select="/po/item"&gt;
            &lt;xsl:variable name="itemno" select="string(itemno)"/&gt;
            &lt;xsl:variable name="quant" select="xs:integer(quantity)"/&gt;
            &lt;xsl:variable name="desc" select="description/node()"/&gt;
            &lt;xsl:variable name="unitp" select="xs:decimal(unitprice)"/&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;xsl:value-of select="$itemno"/&gt;&lt;/td&gt;
            &lt;td&gt;&lt;xsl:value-of select="$quant"/&gt;&lt;/td&gt;
            &lt;td&gt;&lt;xsl:copy-of select="$desc"/&gt;&lt;/td&gt;
            &lt;td&gt;&lt;xsl:value-of select="$unitp"/&gt;&lt;/td&gt;
            &lt;td&gt;&lt;xsl:value-of select="$quant * $unitp"/&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;/xsl:for-each&gt;
            &lt;/xsl:variable&gt;
            
            &lt;html&gt;
            &lt;head&gt;
            &lt;title&gt;Purchase Order&lt;/title&gt;
            &lt;/head&gt;
            &lt;body&gt;
            &lt;h1&gt;Purchase Order&lt;/h1&gt;
            &lt;body&gt;
            &lt;table&gt;
            &lt;xsl:sequence select="$rows"/&gt;
            &lt;/table&gt;
            &lt;/body&gt;
            &lt;/body&gt;
            &lt;/html&gt;
            &lt;/xsl:template&gt;
            
            &lt;/xsl:stylesheet&gt;
            
         </div>
      </div>
      <div class="para e48">While
         
         <div class="emphasis e49">XQuery</div> has a mostly non-XML syntax, see
         
         <div class="xref e50" linkend="ex.xqy"></div>.
      </div>
      <div class="figure e51" xml:id="ex.xqy">
         <div class="title e52">XQuery</div>
         <div class="programlisting e53" xml:space="preserve">xquery version "1.0";
            
            declare default function namespace "http://www.w3.org/2005/xpath-functions";
            
            let $rows := for $item in /po/item
            let $itemno := string($item/itemno)
            let $quant  := xs:integer($item/quantity)
            let $desc   := $item/description/node()
            let $unitp  := xs:decimal($item/unitprice)
            return
            &lt;tr xmlns="http://www.w3.org/1999/xhtml"&gt;
            &lt;td&gt;{ $itemno }&lt;/td&gt;
            &lt;td&gt;{ $quant }&lt;/td&gt;
            &lt;td&gt;{ $desc }&lt;/td&gt;
            &lt;td&gt;{ $unitp } &lt;/td&gt;
            &lt;td&gt;{ $quant * $unitp }&lt;/td&gt;
            &lt;/tr&gt;
            return
            &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
            &lt;head&gt;
            &lt;title&gt;Purchase Order&lt;/title&gt;
            &lt;/head&gt;
            &lt;body&gt;
            &lt;h1&gt;Purchase Order&lt;/h1&gt;
            &lt;table&gt;
            { $rows }
            &lt;/table&gt;
            &lt;/body&gt;
            &lt;/html&gt;
            
         </div>
      </div>
      <div class="para e54">Let's look a little more closely at the distinction between
         
         <div class="emphasis e55">XQueryX</div> and 
         <div class="emphasis e56">XSLT</div>. On the one hand,
         
         <div class="emphasis e57">XQueryX</div> provides improved machine readability: there are no
         semantic elements not manifest in the XML. On the other hand, it gains this benefit
         by sacrificing human readability. These are two possible axes on which we can
         analyze a language syntax, we'll revisit them later.
      </div>
      <div class="para e58">In the meantime, distinguish a “practical” XML
         syntax as one that is concise enough for human comprehension
         (even if it relies on some non-XML syntax to aid readability).
      </div>
      <div class="para e59">How do XML languages stand up? See 
         <div class="xref e60" linkend="xml.lang"></div>.
      </div>
      <div class="table e61" xml:id="xml.lang">
         <div class="caption e62">
            <div class="para e63">XML Languages</div>
         </div>
         <div class="tbody e64">
            <div class="tr e65">
               <div class="th e66">Language</div>
               <div class="th e67">XML Syntax</div>
               <div class="th e68">Practical XML Syntax</div>
               <div class="th e69">Non-XML Syntax</div>
            </div>
            <div class="tr e70">
               <div class="td e71">Atom</div>
               <div class="td e72">✓</div>
               <div class="td e73">✓</div>
               <div class="td e74"></div>
            </div>
            <div class="tr e75">
               <div class="td e76">DocBook, HTML, …
                  <div class="popupBox e77">
                     <div class="popupLabel" onmouseover="$('#d1e150').show('1000');" onmouseout="$('#d1e150').hide('1000');">[ footnote ]</div>
                     <div id="d1e150" style="display: none;">
                        <div class="footnote">
                           <div class="para e78">…, DITA, TEI, etc. Markup languages
                              for prose.
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               <div class="td e79">✓</div>
               <div class="td e80">✓</div>
               <div class="td e81"></div>
            </div>
            <div class="tr e82">
               <div class="td e83">MathML</div>
               <div class="td e84">✓</div>
               <div class="td e85">✓</div>
               <div class="td e86"></div>
            </div>
            <div class="tr e87">
               <div class="td e88">RELAX NG</div>
               <div class="td e89">✓</div>
               <div class="td e90">✓</div>
               <div class="td e91">✓</div>
            </div>
            <div class="tr e92">
               <div class="td e93">RDF</div>
               <div class="td e94">✓</div>
               <div class="td e95">✓</div>
               <div class="td e96">✓</div>
            </div>
            <div class="tr e97">
               <div class="td e98">Schematron</div>
               <div class="td e99">✓</div>
               <div class="td e100">✓</div>
               <div class="td e101"></div>
            </div>
            <div class="tr e102">
               <div class="td e103">SVG</div>
               <div class="td e104">✓</div>
               <div class="td e105">✓</div>
               <div class="td e106"></div>
            </div>
            <div class="tr e107">
               <div class="td e108">XInclude</div>
               <div class="td e109">✓</div>
               <div class="td e110">✓</div>
               <div class="td e111"></div>
            </div>
            <div class="tr e112">
               <div class="td e113">XLink</div>
               <div class="td e114"></div>
               <div class="td e115"></div>
               <div class="td e116">✓</div>
            </div>
            <div class="tr e117">
               <div class="td e118">XML Schema</div>
               <div class="td e119">✓</div>
               <div class="td e120">✓</div>
               <div class="td e121"></div>
            </div>
            <div class="tr e122">
               <div class="td e123">XPointer</div>
               <div class="td e124"></div>
               <div class="td e125"></div>
               <div class="td e126">✓</div>
            </div>
            <div class="tr e127">
               <div class="td e128">XProc</div>
               <div class="td e129">✓</div>
               <div class="td e130">✓</div>
               <div class="td e131"></div>
            </div>
            <div class="tr e132">
               <div class="td e133">XQuery</div>
               <div class="td e134">✓</div>
               <div class="td e135"></div>
               <div class="td e136">✓</div>
            </div>
            <div class="tr e137">
               <div class="td e138">XSLT</div>
               <div class="td e139">✓</div>
               <div class="td e140">✓</div>
               <div class="td e141"></div>
            </div>
         </div>
      </div>
      <div class="para e142">There may be room for debate about some cells in that table.
         Evan Lenz's work on 
         <div class="xref e143" linkend="carrot"></div>, for example, is
         moving in the direction of a more compact, non-XML syntax for XSLT.
         One could argue that TeX is a non-XML syntax for MathML. We might debate
         whether or not attribute-based languages like XLink are or are not XML.
         And, in addition,
         there may be other syntaxes for these languages of which the author is
         unaware. However, at a coarse level of granularity, what we can see is
         that there are languages all across the spectrum.
      </div><a name="Syntactically:XMLornot?ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e144" xml:id="syntax-choice">
         <div class="title e145">Syntactically: XML or not?</div>
         <div class="para e146">Seeing languages spread across a spectrum like this invites the
            question: why? What motivates a language designer to choose an XML
            syntax, or not? When both are provided, what motivates a user to
            choose an XML syntax, or not?
         </div><a name="ThecaseforXMLsyntaxesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e147" xml:id="pro-xml">
            <div class="title e148">The case for XML syntaxes</div>
            <div class="para e149">Why choose XML?</div>
            <div class="itemizedlist e150">
               <div class="listitem e151">
                  <div class="para e152">“Eat your own dogfood”/”Fly your own airplanes.” One school of thought
                     says that XML languages should be expressed in XML simply because they are XML
                     languages. Some XML developers find XML to be a clear and precise format for
                     the expression of ideas.
                  </div>
               </div>
               <div class="listitem e153">
                  <div class="para e154">Extensibility. The XML syntax has natural extension points,
                     attributes on start tags, for example, and namespaces. At a
                     
                     <div class="emphasis e155">syntactic</div> level, extending an XML language is an
                     easily solved problem. Conversely, non-XML languages sometimes suffer from
                     a dearth of extension points. Keeping a grammar for a complex language like
                     XQuery free from ambiguity while simultaneously adding language features
                     can be a real challenge.
                  </div>
                  <div class="para e156">Whether the accretion of language features through this form of ad-hoc
                     extension, in either the XML or non-XML cases, produces a coherent and
                     regular language over time, is a separate question.
                  </div>
               </div>
               <div class="listitem e157">
                  <div class="para e158">Accessibility to XML tools. The fact that an XSLT stylesheet can be used
                     to 
                     <div class="emphasis e159">produce</div> an XSLT stylesheet is not a feature that every
                     XSLT user needs, but there are circumstances when it is a great boon.
                  </div>
               </div>
               <div class="listitem e160">
                  <div class="para e161">Documentation. The ability to inline documentation in an XML language
                     is considered a great benefit in some environments. Expressing XML documentation
                     in a non-XML language can have a deleterious effect readability. Compare,
                     for example, the non-XML representation of the 
                     <div class="code e162">unitprice</div> pattern,
                     
                     <div class="xref e163" linkend="rnc.doc"></div>, with the equivalent XML representation,
                     
                     <div class="xref e164" linkend="rng.doc"></div>.
                  </div>
                  <div class="figure e165" xml:id="rnc.doc">
                     <div class="title e166">XML Documentation in RELAX NG Compact Syntax</div>
                     <div class="programlisting e167" xml:space="preserve">unitprice =
                        [
                        db:para [
                        "The unit price must have an associated currency.\x{a}" ~
                        "If no currency is explicitly specified, the default\x{a}" ~
                        "value of "
                        db:literal [ "USD" ]
                        "\x{a}"
                        db:emphasis [ "must" ]
                        " be assumed."
                        ]
                        ]
                        element unitprice {
                        [ a:defaultValue = "USD" ]
                        attribute currency {
                        ## US Dollars
                        "USD"
                        | ## Great British Pounds
                        "GBP"
                        | ## Euro
                        "EUR"
                        }?,
                        xsd:decimal { fractionDigits = "2" }
                        }
                        
                     </div>
                  </div>
                  <div class="figure e168" xml:id="rng.doc">
                     <div class="title e169">XML Documentation in RELAX NG XML Syntax</div>
                     <div class="programlisting e170" xml:space="preserve">  &lt;define name="unitprice"&gt;
                        &lt;element name="unitprice"&gt;
                        &lt;db:para&gt;The unit price must have an associated currency.
                        If no currency is explicitly specified, the default
                        value of &lt;db:literal&gt;USD&lt;/db:literal&gt;
                        &lt;db:emphasis&gt;must&lt;/db:emphasis&gt; be assumed.&lt;/db:para&gt;
                        
                        &lt;optional&gt;
                        &lt;attribute name="currency" a:defaultValue="USD"&gt;
                        &lt;choice&gt;
                        &lt;value&gt;USD&lt;/value&gt;
                        &lt;a:documentation&gt;US Dollars&lt;/a:documentation&gt;
                        &lt;value&gt;GBP&lt;/value&gt;
                        &lt;a:documentation&gt;Great British Pounds&lt;/a:documentation&gt;
                        &lt;value&gt;EUR&lt;/value&gt;
                        &lt;a:documentation&gt;Euro&lt;/a:documentation&gt;
                        &lt;/choice&gt;
                        &lt;/attribute&gt;
                        &lt;/optional&gt;
                        
                        &lt;data type="decimal"&gt;
                        &lt;param name="fractionDigits"&gt;2&lt;/param&gt;
                        &lt;/data&gt;
                        &lt;/element&gt;
                        
                     </div>
                  </div>
               </div>
               <div class="listitem e171">
                  <div class="para e172">Syntactic conformance. Operating on XML with a language that has
                     an XML syntax provides certain minimum assurances about the outputs. An XSLT
                     stylesheet, which must itself be well formed, guarantees
                     <div class="popupBox e173">
                        <div class="popupLabel" onmouseover="$('#d1e310').show('1000');" onmouseout="$('#d1e310').hide('1000');">[ footnote ]</div>
                        <div id="d1e310" style="display: none;">
                           <div class="footnote">
                              <div class="para e174">“Guarantees” in the
                                 absence of features such as disable output escaping and character maps that
                                 are designed to subvert the serialization, in any event.
                              </div>
                           </div>
                        </div>
                     </div> that
                     the resulting document will be well formed, by virtue of the nature of XSLT.
                     
                  </div>
               </div>
               <div class="listitem e175">
                  <div class="para e176">Learnability? There's certainly anecdotal evidence that
                     non-programmers can be taught to be productive with XSLT in ways that
                     don't have parallels in non-XML languages. This may be because the
                     structure of the XSLT stylesheet has a strong surface resemblance to
                     the documents that are to be transformed. This is true both at the
                     level of the surface syntax (they're both XML) and at a deeper level
                     in that templates contain fragments of the documents in a very obvious
                     and direct way.
                  </div>
               </div>
               <div class="listitem e177">
                  <div class="para e178">Declarativeness? There's a tendency for XML languages to have a more
                     declarative nature than their non-XML counterparts. This can be seen particularly
                     in the case of XSLT as compared to XQuery. The XSLT stylesheet in
                     
                     <div class="xref e179" linkend="ex.xslt"></div> was written in a very “pull” fashion in order to
                     have as much surface similarity to the XQuery example, 
                     <div class="xref e180" linkend="ex.xqy"></div>,
                     as possible
                     <div class="popupBox e181">
                        <div class="popupLabel" onmouseover="$('#d1e324').show('1000');" onmouseout="$('#d1e324').hide('1000');">[ footnote ]</div>
                        <div id="d1e324" style="display: none;">
                           <div class="footnote">
                              <div class="para e182">Pulling the rows out of line and storing them in a
                                 variable is an awkward consequence of XQuery's completely broken semantics with
                                 respect to the default namespace.
                              </div>
                           </div>
                        </div>
                     </div>.
                  </div>
                  <div class="para e183">A more idiomatically natural XSLT solution for the problem is shown in
                     
                     <div class="xref e184" linkend="ex.xslt2"></div>.
                  </div>
                  <div class="figure e185" xml:id="ex.xslt2">
                     <div class="title e186">Idiomatic XSLT</div>
                     <div class="programlisting e187" xml:space="preserve">&lt;?xml version="1.0" encoding="utf-8"?&gt;
                        &lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                        xmlns:xs="http://www.w3.org/2001/XMLSchema"
                        xmlns="http://www.w3.org/1999/xhtml"
                        		exclude-result-prefixes="xs"
                        version="2.0"&gt;
                        
                        &lt;xsl:template match="/"&gt;
                        &lt;html&gt;
                        &lt;head&gt;
                        &lt;title&gt;Purchase Order&lt;/title&gt;
                        &lt;/head&gt;
                        &lt;body&gt;
                        &lt;h1&gt;Purchase Order&lt;/h1&gt;
                        &lt;xsl:apply-templates/&gt;
                        &lt;/body&gt;
                        &lt;/html&gt;
                        &lt;/xsl:template&gt;
                        
                        &lt;xsl:template match="po"&gt;
                        &lt;table&gt;
                        &lt;xsl:apply-templates select="item"/&gt;
                        &lt;/table&gt;
                        &lt;/xsl:template&gt;
                        
                        &lt;xsl:template match="item"&gt;
                        &lt;tr&gt;
                        &lt;td&gt;
                        &lt;xsl:value-of select="itemno"/&gt;
                        &lt;/td&gt;
                        &lt;td&gt;
                        &lt;xsl:value-of select="quantity"/&gt;
                        &lt;/td&gt;
                        &lt;td&gt;
                        &lt;xsl:apply-templates select="description"/&gt;
                        &lt;/td&gt;
                        &lt;td&gt;
                        &lt;xsl:value-of select="unitprice"/&gt;
                        &lt;/td&gt;
                        &lt;td&gt;
                        &lt;xsl:value-of select="xs:integer(quantity) * xs:decimal(unitprice)"/&gt;
                        &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;/xsl:template&gt;
                        
                        &lt;xsl:template match="description"&gt;
                        &lt;xsl:apply-templates/&gt;
                        &lt;/xsl:template&gt;
                        
                        &lt;xsl:template match="emph"&gt;
                        &lt;em&gt;
                        &lt;xsl:apply-templates/&gt;
                        &lt;/em&gt;
                        &lt;/xsl:template&gt;
                        
                        &lt;/xsl:stylesheet&gt;
                        
                     </div>
                  </div>
                  <div class="para e188">In the idiomatic, or “push”, style separate templates are declared
                     for each component. This greatly increases the flexibility and reusability of
                     XSLT.
                  </div>
               </div>
               <div class="listitem e189">
                  <div class="para e190">Familiarity. For users whose principle tasks involve editing, validating,
                     transforming, or otherwise working with XML, a language that is itself expressed
                     in XML has a certain familiarity. Languages like XSLT or RELAX NG can be edited
                     in the same comfortable, understood environment used for other XML editing tasks.
                     
                  </div>
               </div>
            </div>
         </div><a name="ThecasefornonXMLsyntaxesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e191" xml:id="pro-non-xml">
            <div class="title e192">The case for non-XML syntaxes</div>
            <div class="para e193">Why choose a non-XML syntax?</div>
            <div class="itemizedlist e194">
               <div class="listitem e195">
                  <div class="para e196">Conciseness. One of the principle attractions of a non-XML syntax is that
                     it's more compact, more concise. A concise syntax allows more information to
                     fit on a screen or page and consequently provides the reader with a greater
                     perspective on the language.
                  </div>
                  <div class="para e197">The compact schema in 
                     <div class="xref e198" linkend="ex.rnc"></div> fits easily on a
                     single page or screen and is completely straightforward to understand,
                     assuming you're familiar with RELAX NG and its compact syntax.
                  </div>
                  <div class="para e199">The same schema expressed in the XML syntax, 
                     <div class="xref e200" linkend="ex.rng"></div>, is 
                     <div class="emphasis e201">twice</div> as long as it's
                     compact counterpart. It's not manifestly more difficult to understand,
                     assuming you're familiar with RELAX NG and its XML syntax, but it
                     doesn't fit on a single page and contains a lot of syntactic “clutter” that
                     one must learn to “look through”.
                     
                  </div>
                  <div class="figure e202" xml:id="ex.rng">
                     <div class="title e203">RELAX NG</div>
                     <div class="programlisting e204" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
                        &lt;grammar xmlns:db="http://docbook.org/ns/docbook"
                        xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
                        xmlns="http://relaxng.org/ns/structure/1.0"
                        datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"&gt;
                        &lt;start&gt;
                        &lt;ref name="purchaseOrder"/&gt;
                        &lt;/start&gt;
                        
                        &lt;define name="purchaseOrder"&gt;
                        &lt;element name="po"&gt;
                        &lt;oneOrMore&gt;
                        &lt;ref name="item"/&gt;
                        &lt;/oneOrMore&gt;
                        &lt;/element&gt;
                        &lt;/define&gt;
                        
                        &lt;define name="item"&gt;
                        &lt;element name="item"&gt;
                        &lt;ref name="itemno"/&gt;
                        &lt;ref name="quantity"/&gt;
                        &lt;ref name="description"/&gt;
                        &lt;ref name="unitprice"/&gt;
                        &lt;/element&gt;
                        &lt;/define&gt;
                        
                        &lt;define name="itemno"&gt;
                        &lt;element name="itemno"&gt;
                        &lt;data type="string"&gt;
                        &lt;param name="pattern"&gt;[A-Z]+[0-9]+&lt;/param&gt;
                        &lt;/data&gt;
                        &lt;/element&gt;
                        &lt;/define&gt;
                        
                        &lt;define name="quantity"&gt;
                        &lt;element name="quantity"&gt;
                        &lt;data type="decimal"/&gt;
                        &lt;/element&gt;
                        &lt;/define&gt;
                        
                        &lt;define name="description"&gt;
                        &lt;element name="description"&gt;
                        &lt;zeroOrMore&gt;
                        &lt;choice&gt;
                        &lt;text/&gt;
                        &lt;ref name="emph"/&gt;
                        &lt;/choice&gt;
                        &lt;/zeroOrMore&gt;
                        &lt;/element&gt;
                        &lt;/define&gt;
                        
                        &lt;define name="emph"&gt;
                        &lt;element name="emph"&gt;
                        &lt;zeroOrMore&gt;
                        &lt;choice&gt;
                        &lt;text/&gt;
                        &lt;ref name="emph"/&gt;
                        &lt;/choice&gt;
                        &lt;/zeroOrMore&gt;
                        &lt;/element&gt;
                        &lt;/define&gt;
                        
                        &lt;define name="unitprice"&gt;
                        &lt;element name="unitprice"&gt;
                        &lt;db:para&gt;The unit price must have an associated currency.
                        If no currency is explicitly specified, the default
                        value of &lt;db:literal&gt;USD&lt;/db:literal&gt;
                        &lt;db:emphasis&gt;must&lt;/db:emphasis&gt; be assumed.&lt;/db:para&gt;
                        
                        &lt;optional&gt;
                        &lt;attribute name="currency" a:defaultValue="USD"&gt;
                        &lt;choice&gt;
                        &lt;value&gt;USD&lt;/value&gt;
                        &lt;a:documentation&gt;US Dollars&lt;/a:documentation&gt;
                        &lt;value&gt;GBP&lt;/value&gt;
                        &lt;a:documentation&gt;Great British Pounds&lt;/a:documentation&gt;
                        &lt;value&gt;EUR&lt;/value&gt;
                        &lt;a:documentation&gt;Euro&lt;/a:documentation&gt;
                        &lt;/choice&gt;
                        &lt;/attribute&gt;
                        &lt;/optional&gt;
                        
                        &lt;data type="decimal"&gt;
                        &lt;param name="fractionDigits"&gt;2&lt;/param&gt;
                        &lt;/data&gt;
                        &lt;/element&gt;
                        &lt;/define&gt;
                        &lt;/grammar&gt;
                        
                     </div>
                  </div>
               </div>
               <div class="listitem e205">
                  <div class="para e206">Familiarity. For tasks, such as programming, that are most
                     typically performed with non-XML languages, using a non-XML syntax for
                     an XML language makes it more familiar and approachable for users that come
                     from other backgrounds.
                  </div>
                  <div class="para e207">XQuery is arguably far more familiar, and consequently less threatening
                     and more approachable, and easier to learn for a programmer with a background
                     in SQL or any of a host of common scripting languages.
                  </div>
               </div>
               <div class="listitem e208">
                  <div class="para e209">Accessibility to 
                     <div class="emphasis e210">non-XML</div> tools.
                     Both familiarity and conciseness play into another strength for non-XML languages:
                     support in tools and environments that programmers are used to. An XQuery or
                     RELAX NG Compact Syntax plugin for the programmer's favorite IDE makes editing those
                     files part of a comfortable, understood environment. Using an XML syntax may require
                     a new editing tool.
                  </div>
               </div>
               <div class="listitem e211">
                  <div class="para e212">Syntactic expressiveness. An XML syntax imposes constraints on what characters
                     may appear unescaped. Some of the characters that must escaped are common in
                     other contexts. For example, it's easy to argue that “
                     <div class="code e213">$a &lt;= 5</div>”
                     is easier to read and understand than “
                     <div class="code e214">$a &amp;lt;= 5</div>”.
                     
                  </div>
               </div>
            </div>
         </div>
      </div><a name="Syntactically:Both?ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e215" xml:id="syntax-both">
         <div class="title e216">Syntactically: Both?</div>
         <div class="para e217">Why choose if you can have both? RELAX NG is widely praised for having both
            an XML syntax and a compact syntax. Why not always take that approach?
         </div>
         <div class="para e218">One critical metric by which the success or failure of a
            dual-syntax approach will be judged is semantic compatibility.
            Arguably, the RELAX NG Compact Syntax has not been successful simply
            because it has the advantages of a non-XML syntax, but also because it
            describes 
            <div class="emphasis e219">exactly</div> the same language as the XML
            syntax. There are no constructs that can be represented in the compact
            syntax that cannot be represented in the XML syntax, and vice-versa.
            It is possible to translate 
            <div class="emphasis e220">every</div> valid schema
            losslessly from one format to the other and back again.
         </div>
         <div class="para e221">In practice, this is a 
            <div class="emphasis e222">remarkably</div> high bar.
            RELAX NG is a purely declarative language with no semantics for
            iteration or transformation. As such, it is burdened with far fewer
            semantics to express than a programming language like XSLT or XQuery.
            It is difficult to imagine finding a useful alternative syntax for either
            of those languages that expressed 
            <div class="emphasis e223">precisely</div> the same
            underlying semantics.
         </div>
         <div class="para e224">Yet, the absolute syntactic isomorphism of the two syntaxes is
            considered in this paper to be an absolute requirement. Devising alternate
            syntaxes for subsets of a language is both much easier and much less
            useful. Every instance of the language that uses a construct not available
            in the alternate syntax is unavailable to the users who prefer the alternative,
            and to tools that are designed to work best with it.
         </div>
         <div class="para e225">It's also worth noting that even in the RELAX NG case, there are
            unusual artifacts in the non-XML syntax: square bracketed notations
            placed in front of the constructs that they modify and a somewhat
            torturous representation of XML markup in such annotations. Luckily,
            and by design, these annotations are uncommon, the simplest of these
            annotations are the most common and the most complicated are quite
            rare. Also, because of the syntactic isomorphism, it is possible to
            switch back-and-forth between the syntaxes, editing XML annotations in
            the XML syntax, and content models in the compact syntax, for
            example.
         </div>
      </div><a name="Casestudies:compactsyntaxesforXProcANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e226" xml:id="case-studies">
         <div class="title e227">Case studies: compact syntaxes for XProc</div>
         <div class="para e228">To explore these ideas further, for the balance of this paper,
            we will consider two alternative, compact syntaxes for
            
            <div class="emphasis e229">XProc: An XML Pipeline Language</div>.
         </div>
         <div class="para e230">XProc, for those unfamiliar with it, is a language “for
            describing operations to be performed on XML documents.”A pipeline
            accepts XML documents as input, performs an arbitrary series of
            operations on them, and produces XML documents as output. In the
            context of an XProc pipeline, an “operation” is one of a set of
            discrete steps. These steps perform tasks such as adding an attribute,
            counting nodes, deleting nodes, inserting nodes, performing XInclude,
            XSLT, or XQuery, various forms of validation. XProc has about 40 such
            operations built in and may be extended with additional operations.
            
         </div>
         <div class="para e231">A simple XProc pipeline is shown in 
            <div class="xref e232" linkend="simple.xpl"></div>.
         </div>
         <div class="figure e233" xml:id="simple.xpl">
            <div class="title e234">Simple XProc Pipeline</div>
            <div class="programlisting e235" xml:space="preserve">&lt;p:pipeline xmlns:p="http://www.w3.org/ns/xproc"
               version='1.0'&gt;
               &lt;p:serialization port="result" method="xhtml" indent="true"/&gt;
               
               &lt;p:xinclude/&gt;
               
               &lt;p:xslt&gt;
               &lt;p:input port="stylesheet"&gt;
               &lt;p:document href="dbslides.xsl"/&gt;
               &lt;/p:input&gt;
               &lt;/p:xslt&gt;
               
               &lt;/p:pipeline&gt;
               
            </div>
         </div>
         <div class="para e236">This pipeline takes a single input document, performs XInclude processing,
            styles it using the “
            <div class="emphasis e237">dbslides.xsl</div>” stylesheet, and then
            produces as its output the result of that transformation. If the XProc processor
            serializes the result, it does so as indented XHTML.
         </div><a name="Casestudy1:AcompactsyntaxforXProcANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e238" xml:id="case-study1">
            <div class="title e239">Case study 1: A compact syntax for XProc</div>
            <div class="para e240">How might the pipeline in 
               <div class="xref e241" linkend="simple.xpl"></div> be
               represented in a compact, non-XML syntax? Where might we look for
               inspiration?
            </div>
            <div class="itemizedlist e242">
               <div class="listitem e243">
                  <div class="para e244">Python? With significant whitespace?</div>
               </div>
               <div class="listitem e245">
                  <div class="para e246">Pascal? With 
                     <div class="code e247">BEGIN</div>/
                     <div class="code e248">END</div> and 
                     <div class="code e249">:=</div>?
                  </div>
               </div>
               <div class="listitem e250">
                  <div class="para e251">Scheme? Because everything looks better with parentheses?</div>
               </div>
               <div class="listitem e252">
                  <div class="para e253">Something from the C/Java/JavaScript family?</div>
               </div>
            </div>
            <div class="para e254">For our first attempt, we'll take the last option. Translating
               
               <div class="xref e255" linkend="simple.xpl"></div> into a compact syntax along these lines produces
               
               <div class="xref e256" linkend="simple.xpc1"></div>.
            </div>
            <div class="figure e257" xml:id="simple.xpc1">
               <div class="title e258">Simple XProc Pipeline, Compact Syntax #1</div>
               <div class="programlisting e259" xml:space="preserve">xproc 1.0
                  
                  pipeline {
                  serialization "result" with method="xhtml",
                  indent="true"
                  xinclude
                  xslt {
                  input "stylesheet" {
                  document "dbslides.xsl"
                  }
                  }
                  }
                  
               </div>
            </div>
            <div class="para e260">This is in many ways a very direct translation. Like RELAX NG's
               compact syntax and XQuery, we use curly braces to delimit the bodies
               of our semantic constructs. Each new construct is introduced by a new
               token. There are two syntactic extension points in the XML syntax that
               we must accommodate: the presence of arbitrary extension attributes on what are
               elements in the XML syntax, and the presence of arbitrary XML
               fragments.
            </div>
            <div class="para e261">The “
               <div class="code e262">with</div>” keyword is used at the end of each
               construct in the compact syntax to introduce an unbounded list of
               name/value pairs. These map back to extension attributes in the XML
               syntax.
            </div>
            <div class="figure e263" xml:id="lib.xpl">
               <div class="title e264">XProc Library</div>
               <div class="programlisting e265" xml:space="preserve">&lt;p:library xmlns:p="http://www.w3.org/ns/xproc"
                  	   xmlns:cx="http://xmlcalabash.com/ns/extensions"
                  version="1.0"&gt;
                  
                  &lt;p:declare-step type="cx:unzip"&gt;
                  &lt;p:output port="result"/&gt;
                  &lt;p:option name="href" required="true"
                  cx:type="xsd:anyURI"/&gt;
                  &lt;p:option name="file"/&gt;
                  &lt;p:option name="content-type"/&gt;
                  &lt;/p:declare-step&gt;
                  
                  &lt;/p:library&gt;
                  
               </div>
            </div>
            <div class="para e266">Where additional namespaces are required, as in the pipeline library
               in 
               <div class="xref e267" linkend="lib.xpl"></div>, they're introduced in the compact syntax and
               
               <div class="code e268">CName</div>s are allowed as tokens. The equivalent library in
               this compact syntax is shown in 
               <div class="xref e269" linkend="lib.xpc1"></div>.
            </div>
            <div class="figure e270" xml:id="lib.xpc1">
               <div class="title e271">XProc Library, Compact Syntax #1</div>
               <div class="programlisting e272" xml:space="preserve">xproc 1.0
                  
                  namespace p = "http://www.w3.org/ns/xproc"
                  namespace cx = "http://xmlcalabash.com/ns/extensions"
                  
                  library with version="1.0" {
                  declare-step with type="cx:unzip" {
                  output "result"
                  required option href with cx:type="xsd:anyURI"
                  option file
                  option content-type
                  }
                  }
                  
               </div>
            </div>
            <div class="para e273">This example shows the use of an extension attribute, 
               <div class="code e274">cx:type</div>,
               represented in the compact syntax.
            </div>
            <div class="para e275">The other challenge is representing arbitrary XML. In RELAX NG,
               arbitrary XML fragments are always annotations of one sort or another;
               they're both relatively uncommon and, to some extent, unimportant to
               the core grammar. Not so in XProc where they appear both in annotations,
               like 
               <div class="code e276">p:documentation</div>, 
               <div class="xref e277" linkend="lib2.xpl"></div>,
               but also as 
               <div class="emphasis e278">inline</div> document
               content in the pipeline. Using a syntax as awkward as the approach in
               RNC seems like a bad choice.
            </div>
            <div class="figure e279" xml:id="lib2.xpl">
               <div class="title e280">XProc Library with Documentation</div>
               <div class="programlisting e281" xml:space="preserve">&lt;p:library xmlns:p="http://www.w3.org/ns/xproc"
                  xmlns:cx="http://xmlcalabash.com/ns/extensions"
                  version="1.0"&gt;
                  
                  &lt;p:documentation&gt;
                  &lt;div xmlns="http://www.w3.org/1999/xhtml"&gt;
                  &lt;h1&gt;XML Calabash Extension Library&lt;/h1&gt;
                  &lt;h2&gt;Version 1.0&lt;/h2&gt;
                  &lt;p&gt;The steps defined in this library are implemented in
                  &lt;a href="http://xmlcalabash.com/"&gt;XML Calabash&lt;/a&gt;.
                  &lt;/p&gt;
                  &lt;/div&gt;
                  &lt;/p:documentation&gt;
                  …
                  
               </div>
            </div>
            <div class="para e282">However, in the context of parsing a non-XML syntax, it must be
               possible to recognize both where the XML begins and where it
               
               <div class="emphasis e283">ends</div>. The presence of, for example, a fragment of
               XProc compact syntax in a program listing in some XML must not be
               accidentally parsed as XProc. One approach would be to build a
               complete XML parser into the grammar of the compact syntax. But even
               this is tricky because a 
               <div class="code e284">p:inline</div> might include
               several consecutive sibling elements that each have to be recognized.
               
            </div>
            <div class="para e285">If only there were some string of tokens that can't appear in
               XML…
            </div>
            <div class="para e286">In fact, such a sequence exists. Almost. The sequence “
               <div class="code e287">]]&gt;</div>”
               is forbidden in XML 
               <div class="emphasis e288">except</div> when it ends a CDATA section.
               We can leverage this fact in our compact syntax to form delimiters for
               arbitrary XML: “
               <div class="code e289">&lt;![xml[</div>” and “
               <div class="code e290">]]&gt;</div>”.
               See 
               <div class="xref e291" linkend="lib2.xpc1"></div>.
            </div>
            <div class="figure e292" xml:id="lib2.xpc1">
               <div class="title e293">XProc Library with Documentation, Compact Syntax #1</div>
               <div class="programlisting e294" xml:space="preserve">xproc 1.0
                  
                  library with version="1.0" {
                  
                  documentation {
                  &lt;![xml[&lt;div xmlns="http://www.w3.org/1999/xhtml"&gt;
                  &lt;h1&gt;XML Calabash Extension Library&lt;/h1&gt;
                  &lt;h2&gt;Version 1.0&lt;/h2&gt;
                  &lt;p&gt;The steps defined in this library are implemented in
                  &lt;a href="http://xmlcalabash.com/"&gt;XML Calabash&lt;/a&gt;.
                  &lt;/p&gt;
                  &lt;/div&gt;]]&gt;
                  …
                  
               </div>
            </div>
            <div class="para e295">It's arguably a hack, but it allows us to satisfy the
               requirement that each syntax represent exactly the same underlying
               constructs.
            </div>
            <div class="para e296">This syntax has been implemented. The implementation strategy is
               to transform the compact syntax into the XML syntax as a
               pre-processing step and then process the resulting XML as usual.
            </div>
            <div class="para e297">How does this syntax stand up to the suggested benefits of
               non-XML syntaxes?
            </div>
            <div class="itemizedlist e298">
               <div class="listitem e299">
                  <div class="para e300">Conciseness? A wash. It's not clearly shorter in terms of absolute number of lines.
                     
                  </div>
               </div>
               <div class="listitem e301">
                  <div class="para e302">Familiarity? Not clear. It has the advantage of
                     less visual clutter, but doesn't draw from the C/Java/JavaScript family in
                     any significant regard beyond curly braces.
                     
                  </div>
               </div>
               <div class="listitem e303">
                  <div class="para e304">Accessibility to non-XML tools? Probably an improvement. It's likely that a modern
                     IDE could be customized with the EBNF (see 
                     <div class="xref e305" linkend="xpc1-grammar"></div>).
                     
                  </div>
               </div>
               <div class="listitem e306">
                  <div class="para e307">Syntactic expressiveness? An improvement; outside of XML blocks, there are
                     no characters that need to be explicitly escaped.
                     
                  </div>
               </div>
            </div>
         </div><a name="Casestudy2:AnalternatecompactsyntaxforXProcANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e308" xml:id="case-study2">
            <div class="title e309">Case study 2: An alternate compact syntax for XProc</div>
            <div class="para e310">When I presented the first compact syntax in a lightning talk last year,
               Jeni Tennison
               observed that it could be made more compact, and perhaps more useful
               if it was more idiomatically like other programming languages. She
               subsequently produced most of the “second compact syntax” language
               design.
            </div>
            <div class="para e311">Translating
               
               <div class="xref e312" linkend="simple.xpl"></div> into this second compact syntax produces
               
               <div class="xref e313" linkend="simple.xpc2"></div>.
            </div>
            <div class="figure e314" xml:id="simple.xpc2">
               <div class="title e315">Simple XProc Pipeline, Compact Syntax #2</div>
               <div class="programlisting e316" xml:space="preserve">pipeline {
                  xinclude
                  xslt ( stylesheet = document 'dbslides.xsl' )
                  } =&gt; ( result serialized with [ method = 'xhtml', indent = 'true' ] )
                  
               </div>
            </div>
            <div class="para e317">Adopting a more “method call”-like syntax does make the pipelines
               shorter. The outputs of a step are treated in a similar way, but shown at
               the end of the body.
            </div>
            <div class="para e318">The most obvious example of an attempt to make the language more
               idiomatically like other programming languages can be seen in the handling
               of 
               <div class="code e319">p:choose</div>. Consider 
               <div class="xref e320" linkend="choose.xpl"></div>.
            </div>
            <div class="figure e321" xml:id="choose.xpl">
               <div class="title e322">XProc “Choose” Pipeline</div>
               <div class="programlisting e323" xml:space="preserve">&lt;p:pipeline xmlns:p="http://www.w3.org/ns/xproc"
                  xmlns:a="http://example.com/a"
                  xmlns:b="http://example.com/b"
                  version='1.0'&gt;
                  
                  &lt;p:choose&gt;
                  &lt;p:when test="/a:*"&gt;
                  &lt;p:xslt&gt;
                  &lt;p:input port="stylesheet"&gt;
                  &lt;p:document href="a2html.xsl"/&gt;
                  &lt;/p:input&gt;
                  &lt;/p:xslt&gt;
                  &lt;/p:when&gt;
                  &lt;p:when test="/b:*"&gt;
                  &lt;p:xslt&gt;
                  &lt;p:input port="stylesheet"&gt;
                  &lt;p:document href="b2html.xsl"/&gt;
                  &lt;/p:input&gt;
                  &lt;/p:xslt&gt;
                  &lt;/p:when&gt;
                  &lt;p:otherwise&gt;
                  &lt;p:identity/&gt;
                  &lt;/p:otherwise&gt;
                  &lt;/p:choose&gt;
                  
                  &lt;/p:pipeline&gt;
                  
               </div>
            </div>
            <div class="para e324">Translating it into our initial compact syntax produces
               
               <div class="xref e325" linkend="choose.xpc1"></div>.
            </div>
            <div class="figure e326" xml:id="choose.xpc1">
               <div class="title e327">XProc “Choose” Pipeline, Compact Syntax #1</div>
               <div class="programlisting e328" xml:space="preserve">xproc 1.0
                  
                  namespace a='http://example.com/a'
                  namespace b='http://example.com/b'
                  
                  pipeline {
                  choose {
                  when "/a:*" {
                  xslt {
                  input "stylesheet" {
                  document "a2html.xsl"
                  }
                  }
                  }
                  when "/b:*" {
                  xslt {
                  input "stylesheet" {
                  document "b2html.xsl"
                  }
                  }
                  }
                  otherwise {
                  identity
                  }
                  }
                  }
                  
               </div>
            </div>
            <div class="para e329">This is clearly a non-XML syntax, but it retains all of the semantic
               flavor of the original. In the second XProc compact syntax, a choose statement
               is represented using an if/then/else construct that's likely to be more familiar
               to programmers, see 
               <div class="xref e330" linkend="choose.xpc2"></div>.
            </div>
            <div class="figure e331" xml:id="choose.xpc2">
               <div class="title e332">XProc “Choose” Pipeline, Compact Syntax #2</div>
               <div class="programlisting e333" xml:space="preserve">namespace a: 'http://example.com/a'
                  namespace b: 'http://example.com/b'
                  
                  pipeline {
                  if (/a:*) {
                  xslt ( stylesheet = document 'a2html.xsl' )
                  } else if (/b:*) {
                  xslt ( stylesheet = document 'b2html.xsl' )
                  } else {
                  identity
                  }
                  }
                  
               </div>
            </div>
            <div class="para e334">Again, this manages to be both shorter and possibly more familiar.</div>
            <div class="para e335">Whether or not either of these syntaxes would be markedly easier to use
               or would spur greater adoption of XProc is an open question.
            </div>
         </div>
      </div><a name="GrammarforXProcCompactSyntax1ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="appendix e336" xml:id="xpc1-grammar">
         <div class="title e337">Grammar for XProc Compact Syntax #1</div>
         <div class="programlisting e338" xml:space="preserve">document    ::= xpcMarker namespace* ( declareStep | pipeline | library ) EOF
            
            xpcMarker   ::= 'xproc' version
            
            version     ::= '1.0'
            
            namespace   ::= ('namespace' prefix '=' quotedstr)
            | ('default' 'namespace' '=' quotedstr)
            
            prefix      ::= NCName
            
            declareStep ::= 'declare-step' stepName? withExtra? pipelineBody
            
            stepName    ::= 'named' quotedstr
            
            withExtra   ::= 'with' attr (',' attr)*
            
            attr        ::= QName '=' (QName | quotedstr)
            
            pipelineBody ::= '{'
            ( input | output | option | log | serialization )*
            ( declareStep | pipeline | imports )*
            subpipeline?
            '}'
            
            input       ::= 'input' quotedstr withExtra? ( '{' binding* '}' )?
            
            output      ::= 'output' quotedstr withExtra? ( '{' binding* '}' )?
            
            option      ::= 'required' 'option' QName withExtra?
            | 'option' QName withExtra?
            
            log         ::= 'log' quotedstr 'to' quotedstr
            
            serialization ::= 'serialization' quotedstr withExtra?
            
            imports     ::= 'import' quotedstr
            
            variable    ::= 'variable' QName '=' quotedstr variableBody?
            
            variableBody ::= '{' ( binding | namespaces )* '}'
            
            namespaces  ::= 'namespaces' withExtra? nsBody?
            
            nsBody      ::= '{' namespace '}'
            
            binding     ::= ( comment | pi )*
            ( emptyBinding | documentBinding | dataBinding | pipeBinding | inlineBinding )
            
            emptyBinding    ::= 'empty' withExtra?
            documentBinding ::= 'document' quotedstr withExtra?
            dataBinding     ::= 'data' quotedstr withExtra?
            pipeBinding     ::= quotedstr 'on' quotedstr withExtra?
            inlineBinding   ::= 'inline' withExtra? inlineXML
            
            inlineXML       ::= '&lt;![XML[' Char* ']]&gt;'
            
            subpipeline     ::= ( variable | documentation | pipeinfo | forEachStep | viewportStep
            | chooseStep | tryStep | groupStep | atomicStep | comment | pi )+
            
            documentation   ::= 'documentation' withExtra? '{' inlineXML '}'
            
            pipeinfo        ::= 'pipeinfo' withExtra? '{' inlineXML '}'
            
            named           ::= 'named' quotedstr
            
            forEachStep     ::= 'for-each' named? withExtra? forEachBody
            
            forEachBody     ::= '{' ( iterationSource | output | log )* subpipeline '}'
            
            iterationSource ::= 'iteration-source' withExtra? ( '{' binding* '}' )?
            
            viewportStep    ::= 'viewport' named? withExtra? viewportBody
            
            viewportBody    ::= '{' ( viewportSource | output | log )* subpipeline '}'
            
            viewportSource  ::= 'viewport-source' withExtra? ( '{' binding* '}' )?
            
            chooseStep      ::= 'choose' named? withExtra? chooseBody
            
            chooseBody      ::= '{' xpathContext? variable* whenStep* otherwiseStep? '}'
            
            xpathContext    ::= 'xpath-context' withExtra? ( '{' binding* '}' )?
            
            whenStep        ::= 'when' quotedstr withExtra? whenBody
            
            whenBody        ::= ( xpathContext | output | log )* subpipeline
            
            otherwiseStep   ::= 'otherwise' withExtra? otherwiseBody
            
            otherwiseBody   ::= ( output | log )* subpipeline
            
            tryStep         ::= 'try' named? withExtra? tryBody
            
            tryBody         ::= '{' variable* groupStep catchStep '}'
            
            groupStep       ::= 'group' named? withExtra? groupBody
            
            groupBody       ::= '{' ( output | log )* subpipeline '}'
            
            catchStep       ::= 'catch' named? withExtra? catchBody
            
            catchBody       ::= '{' ( output | log )* subpipeline '}'
            
            atomicStep      ::= ( 'add-xml-base' | 'add-attribute' | 'compare' | 'count' | 'delete'
            | 'directory-list' | 'error' | 'escape-markup' | 'exec' | 'filter'
            | 'hash' | 'http-request' | 'identity' | 'insert' | 'label-elements'
            | 'load' | 'make-absolute-uris' | 'namespace-rename' | 'pack'
            | 'parameters' | 'rename' | 'replace' | 'set-attributes' | 'sink'
            | 'split-sequence' | 'store' | 'string-replace' | 'unescape-markup'
            | 'unwrap' | 'uuid' | 'validate-with-relax-ng'
            | 'validate-with-schematron' | 'validate-with-xml-schema'
            | 'wrap' | 'wrap-sequence' | 'www-form-urldecode' | 'www-form-urlencode'
            | 'xinclude' | 'xquery' | 'xslt' | 'xsl-formatter' )
            named? withExtra? atomicStepBody?
            | CName named? withExtra? atomicStepBody?
            
            atomicStepBody  ::= '{' ( input | withOption | withParam | log )* '}'
            
            withOption      ::= 'with-option' QName '=' quotedstr withExtra? withOptionBody?
            
            withOptionBody  ::= '{' ( binding | namespaces )* '}'
            
            withParam       ::= 'with-param' QName '=' quotedstr withExtra? withParamBody?
            
            withParamBody   ::= '{' ( binding | namespaces )* '}'
            
            pipeline        ::= 'pipeline' named? withExtra? pipelineBody
            
            library         ::= 'library' withExtra? libraryBody
            
            libraryBody     ::= '{' ( imports | declareStep | pipeline )* '}'
            
            
            
            EOF ::= $
            
            comment  ::= '&lt;!--' ( ( Char - '-' ) | '-' ( Char - '-' ) )* '--&gt;'
            pi       ::= '&lt;?' pitarget ( S ( [^?] | '?'+ [^?&gt;] )* '?'* )? '?&gt;' /* ws: explicit
            */
            pitarget ::= NCName
            S        ::= ( #x0020 | #x0009 | #x000D | #x000A )+ /* ws: definition */
            
            quotedstr ::= '"' ( [^"] )* '"'
            | "'" ( [^'] )* "'"
            
            NameStartChar
            ::= [A-Z]
            | '_'
            | [a-z]
            | [#x00C0-#x00D6]
            | [#x00D8-#x00F6]
            | [#x00F8-#x02FF]
            | [#x0370-#x037D]
            | [#x037F-#x1FFF]
            | [#x200C-#x200D]
            | [#x2070-#x218F]
            | [#x2C00-#x2FEF]
            | [#x3001-#xD7FF]
            | [#xF900-#xFDCF]
            | [#xFDF0-#xFFFD]
            NameChar ::= NameStartChar
            | '-'
            | '.'
            | [0-9]
            | #x00B7
            | [#x0300-#x036F]
            | [#x203F-#x2040]
            NCName   ::= NameStartChar NameChar*
            CName    ::= (NCName ':' NCName)
            QName    ::= NCName | CName
            
            Char     ::= [#x0021-#xD7FF]
            | [#xE000-#xFFFD]
            | [#x10000-#x10FFFF]
            
            
         </div>
      </div><a name="ImplementationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="appendix e339" xml:id="implementation">
         <div class="title e340">Implementation</div>
         <div class="para e341">
            <div class="emphasis e342">XML Calabash</div> implements both compact syntaxes
            in the same way.
         </div>
         <div class="orderedlist e343">
            <div class="listitem e344">
               <div class="para e345">The EBNF for the compact syntax is compiled into an XQuery module
                  using the 
                  <div class="emphasis e346">REx Parser Generator</div>. The XQuery module
                  produces an XML parse tree for the input pipeline.
                  
               </div>
            </div>
            <div class="listitem e347">
               <div class="para e348">An XSLT stylesheet is written which transforms the XML parse tree
                  into standard XProc.
               </div>
            </div>
            <div class="listitem e349">
               <div class="para e350">These two steps are combined into a pipeline,
                  
                  <div class="xref e351" linkend="xpc1toxpl"></div>, which is used to transform the input document
                  into XProc which is then executed normally.
               </div>
               <div class="para e352">This mechanism may not be particularly efficient, but it is quite
                  easy to write as a proof-of-concept.
               </div>
            </div>
         </div>
         <div class="figure e353" xml:id="xpc1toxpl">
            <div class="title e354">XProc Pipeline for Converting XPC to XPL</div>
            <div class="programlisting e355" xml:space="preserve">&lt;p:pipeline xmlns:p="http://www.w3.org/ns/xproc" version="1.0"&gt;
               
               &lt;p:xquery&gt;
               &lt;p:input port="query"&gt;
               &lt;p:data href="xpc1.xqy"/&gt;
               &lt;/p:input&gt;
               &lt;/p:xquery&gt;
               
               &lt;p:xslt version="2.0"&gt;
               &lt;p:input port="stylesheet"&gt;
               &lt;p:document href="xpc1.xsl"/&gt;
               &lt;/p:input&gt;
               &lt;/p:xslt&gt;
               
               &lt;/p:pipeline&gt;
               
            </div>
         </div>
      </div><a name="ReferencesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e356">
         <div class="title e357">References</div>
         <div class="bibliomixed e358" xml:id="carrot">
            Lenz, Evan. “Carrot: An appetizing hybrid of XQuery and XSLT.” Presented at
            Balisage: The Markup Conference 2011, Montréal, Canada, August 2 - 5, 2011. In
            
            <div class="emphasis e359">Proceedings of Balisage: The Markup Conference 2011</div>.
            Balisage Series on Markup Technologies, vol. 7 (2011).
            doi:
            <div class="biblioid doi e360">10.4242/BalisageVol7.Lenz01</div>.
         </div>
         <div class="bibliomixed e361" xml:id="rex">
            Rademacher, Gunther. “REx Parser Generator”,
            http://www.bottlecaps.de/rex/
         </div>
         <div class="bibliomixed e362" xml:id="xmlcalabash">
            Walsh, Norman. “XML Calabash”,
            http://xmlcalabash.com/
         </div>
      </div>
   </div>
</div>