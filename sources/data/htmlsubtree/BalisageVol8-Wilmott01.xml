<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#LiterateProgramming:ACaseStudyandObservationsANCHOR" name="LiterateProgramming:ACaseStudyandObservationsTOC">Literate Programming: A Case Study and Observations</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#WhyLiterateProgramming?ANCHOR" name="WhyLiterateProgramming?TOC">Why Literate Programming?</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ABlastFromThePast:ACaseStudyANCHOR" name="ABlastFromThePast:ACaseStudyTOC">A Blast From The Past: A Case Study</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#AnAsideOnShortReferencesANCHOR" name="AnAsideOnShortReferencesTOC">An Aside On Short References</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#AnotherAsideOnTheKindsOfDocumentationANCHOR" name="AnotherAsideOnTheKindsOfDocumentationTOC">Another Aside, On The Kinds Of Documentation</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ALiterateProgrammingMarkupLanguageAsANewLanguageANCHOR" name="ALiterateProgrammingMarkupLanguageAsANewLanguageTOC">A Literate Programming Markup Language As A New Language</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConclusionsAndObservationsANCHOR" name="ConclusionsAndObservationsTOC">Conclusions And Observations</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ReferencesANCHOR" name="ReferencesTOC">References</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">August 7 - 10, 2012</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2012</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">International Organization for Standardization</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">Literate Programming</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">Markup Language Implementation</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">sam@wilmott.ca</div>
         <div class="singletermTERMS">Sam</div>
         <div class="singletermTERMS">SGML</div>
         <div class="singletermTERMS">Short References</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">XML</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="LiterateProgramming:ACaseStudyandObservationsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3">
      <div class="title e1">Literate Programming: A Case Study and Observations</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2012</div>
            <div class="confdates e5">August 7 - 10, 2012</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">A newly revived interest in literate programming means that we need to look at what's
               been done in the past.  Literate Programming requires both the integration of computer
               programming code with its documentation, and the elimination of duplicate information
               between the code and the documentation.  It's the latter that has been overlooked
               in the past.  This paper describes a project that integrated programming code with
               its documentation, using a markup language, and discusses lessons that might be learned
               from it.  It also illustrates the use of, and discusses the advantages of using compact
               markup (as exemplified by SGML short references and Wiki markup) especially as it
               applies to using a markup language for literate programming.
            </div>
         </div>
         <div class="author e8">
            <div class="personname e9">
               <div class="firstname e10">Sam</div>
               <div class="surname e11">Wilmott</div>
            </div>
            <div class="personblurb e12">
               <div class="para e13">Sam Wilmott started using markup languages in the late '60s. Since then he has led
                  the development of typesetting/text-formatting systems for the Canadian Government
                  Printing Office and for a major real-estate company, implemented one of the first
                  SGML parsers (which was also the first pull-model markup parser), and is the originator
                  of the 
                  <div class="xref e14" linkend="omnimark"></div> programming language, with its strong support of SGML, XML, and text transformation.
               </div>
               <div class="para e15">More recently Sam has been working the XSLT world: he has recently contributed to
                  the implementation of an XSLT compiler and currently works as an XSLT programmer and
                  analyst.  As a side project, he is working on new programming language ideas for markup
                  language processing.
               </div>
            </div>
            <div class="email e16">sam@wilmott.ca</div>
         </div>
         <div class="legalnotice e17">
            <div class="para e18">Copyright Â© 2012 Sam Wilmott and Stilo International plc.</div>
         </div>
         <div class="keywordset e19" role="author">
            <div class="keyword e20">Literate Programming</div>
            <div class="keyword e21">Markup Language Implementation</div>
            <div class="keyword e22">SGML</div>
            <div class="keyword e23">Short References</div>
            <div class="keyword e24">Wiki Markup</div>
            <div class="keyword e25">XML</div>
         </div>
      </div><a name="WhyLiterateProgramming?ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e26">
         <div class="title e27">Why Literate Programming?</div>
         <div class="para e28">First of all, I'd like to thank Stilo International
            <div class="popupBox e29">
               <div class="popupLabel" onmouseover="$('#d1e49').show('1000');" onmouseout="$('#d1e49').hide('1000');">[ footnote ]</div>
               <div id="d1e49" style="display: none;">
                  <div class="footnote">
                     <div class="para e30">Stilo International 
                        <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e31" xlink:actuate="onRequest" xlink:href="http://stilo.com" xlink:show="new" xlink:type="simple">http://stilo.com</div>
                     </div>
                  </div>
               </div>
            </div> for giving me access to some of their internal documents.  This paper wouldn't exist
            without their contribution.
         </div>
         <div class="para e32">
            <div class="xref e33" linkend="lp"></div>, the integration of program code with its documentation, has been a feature of both
            the programming and the documentation fields for over thirty years.  It got off to
            a good start with 
            <div class="xref e34" linkend="knuth"></div> but there hasn't been a lot of new work in the field over most of the intervening
            decades.  However, now there seems to be a renewed interest in Literate Programming.
            Why? you might ask.
         </div>
         <div class="para e35">Integrating programming code and its documentation isn't just about having them in
            the same document, as was done in Knuth's WEB: it's about eliminating duplication
            of information coded in both programming and documentation forms. In contrast, and
            most commonly, programmers are continuing with the traditional model of completely
            separating code and its documentation.  The difficulty with this approach is that
            it duplicates a lot of information: information coded in a programming language and
            also written up in its documentation, as text or in tables.  The result is costly
            in three ways:
            <div class="itemizedlist e36">
               <div class="listitem e37">
                  <div class="para e38">Doing so increases the amount of work required by the programmers and the documenters
                     (who may be the same or different folk) to initially create and to later update the
                     code and the documentation.
                  </div>
               </div>
               <div class="listitem e39">
                  <div class="para e40">Organizing multiple copies of information can itself increase the cost of developing,
                     maintaining and managing programming code: there's more to do that way.
                  </div>
               </div>
               <div class="listitem e41">
                  <div class="para e42">Most importantly, duplication increases the chances of error: rewriting a text description
                     into code can result in an error, as can describing code using text.  Updating one
                     can easily cause it to be out of step with the other, even when they were previously
                     in step.
                  </div>
               </div>
            </div>
         </div>
         <div class="para e43">There's been a number of approaches taken to deal with these difficulties:
            <div class="itemizedlist e44">
               <div class="listitem e45">
                  <div class="para e46">All production programming languages support integrating comments with code.  Comments
                     are most commonly used to help the reader understand the details of why coding is
                     done in a particular way.  Comments are also used to document how a program is to
                     be used, but they don't make for good reading for the users, and force the user to
                     read the code.
                  </div>
               </div>
               <div class="listitem e47">
                  <div class="para e48">Many ways have been looked at for adding markup to program languages' comments, both
                     
                     <div class="xref e49" linkend="xml"></div> and non-XML (often wiki-like) markup.  This certainly improves things.  It means
                     that the user documentation can be extracted from the programming code and repurposed
                     for the user: a big help.
                  </div>
                  <div class="para e50">Marked-up comments still have a problem, however: a lot of information needs to be
                     duplicated, so that there's a "human" version of the information and a "computer"
                     version of it too.  For example, the information in function/method headers needs
                     to be available to and understood by both the user and the computer.
                  </div>
               </div>
               <div class="listitem e51">
                  <div class="para e52">Taking things one more step further, there have been a few approaches to adding markup
                     to a programming language's code itself, so that it can be used within the documentation
                     without duplication.  This is where the future lies, what I'll be talking about here,
                     and is something still in development.
                  </div>
               </div>
            </div>
         </div>
         <div class="para e53">There are a number of good papers at this conference already covering different aspects
            of this problem:
            <div class="itemizedlist e54">
               <div class="listitem e55">
                  <div class="para e56">"Code Up: Marking up Programming Languages and the winding road to an XML Syntax"
                     <div class="popupBox e57">
                        <div class="popupLabel" onmouseover="$('#d1e94').show('1000');" onmouseout="$('#d1e94').hide('1000');">[ footnote ]</div>
                        <div id="d1e94" style="display: none;">
                           <div class="footnote">
                              <div class="para e58">David Lee, MarkLogic, "Code Up: Marking up Programming Languages and the winding road
                                 to an XML Syntax", to be presented at Balisage 2012, Wednesday 2:00pm.
                              </div>
                           </div>
                        </div>
                     </div> describes and analyzes various approaches, from simple commenting to a program that's
                     all XML.
                  </div>
               </div>
               <div class="listitem e59">
                  <div class="para e60">"On XML Languages"
                     <div class="popupBox e61">
                        <div class="popupLabel" onmouseover="$('#d1e102').show('1000');" onmouseout="$('#d1e102').hide('1000');">[ footnote ]</div>
                        <div id="d1e102" style="display: none;">
                           <div class="footnote">
                              <div class="para e62">Norman Walsh, MarkLogic, "On XML Languages", to be presented at Balisage 2012, Wednesday
                                 2:45pm.
                              </div>
                           </div>
                        </div>
                     </div> describes both XML and "compact" (non-XML) syntaxes for existing W3C scripting languages,
                     discussing the advantages and disadvantages of each approach.
                  </div>
               </div>
               <div class="listitem e63">
                  <div class="para e64">"Encoding Transparency: Literate Programming and Test Generation for Scientific Function
                     Libraries"
                     <div class="popupBox e65">
                        <div class="popupLabel" onmouseover="$('#d1e110').show('1000');" onmouseout="$('#d1e110').hide('1000');">[ footnote ]</div>
                        <div id="d1e110" style="display: none;">
                           <div class="footnote">
                              <div class="para e66">Mark Flood, Matthew McCormick and Nathan Palmer, Office of Financial Research, Department
                                 of the Treasury, "Encoding Transparency: Literate Programming and Test Generation
                                 for Scientific Function Libraries", to be presented at Balisage 2012, Wednesday 4:00pm.
                              </div>
                           </div>
                        </div>
                     </div> describes an XML-based approach to duplicating what was achieved with Donald Knuth's
                     Literate Programming tools (his WEB targeting 
                     <div class="xref e67" linkend="tex"></div>).
                  </div>
               </div>
            </div>
         </div>
         <div class="para e68">This paper adds to the discussion in two ways:
            <div class="itemizedlist e69">
               <div class="listitem e70">
                  <div class="para e71">It presents an existing system, integrating programming code and its documentation
                     in a practical way.
                  </div>
               </div>
               <div class="listitem e72">
                  <div class="para e73">It discusses further issues that have to be dealt with when designing languages and
                     building tools for such a system.
                  </div>
               </div>
            </div>
         </div>
      </div><a name="ABlastFromThePast:ACaseStudyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e74">
         <div class="title e75">A Blast From The Past: A Case Study</div>
         <div class="para e76">Back in the days when 
            <div class="xref e77" linkend="sgml"></div> was still new (when XML hadn't shown up yet), and when the 
            <div class="xref e78" linkend="c"></div> was still a practical language of choice for cross-platform tool development (when
            C was about the only language that ran uniformly on all major platforms, and when
            there were a much larger variety of machine architectures than there are in our now
            Intel-dominated world), I implemented one of the still-existing SGML parsers.  Almost
            uniquely, I think, the SGML parser is itself an SGML document.  (It helped a lot that
            it was the second SGML parser developed by the company, so that the first one could
            be used to initially process the second one.  Once the second SGML parser was well
            developed, it took over and was used to help processed itself.)
         </div>
         <div class="para e79">The following examples are taken from the code of the SGML parser used in Stilo International's
            
            <div class="xref e80" linkend="omnimark"></div> programming language.  This code has been in use for over twenty years, so it serves
            as a good example of "real world" markup-based literate programming.  The markup language
            used to markup the SGML parser's code is quite complex, but you'll get most of it's
            ideas from the following examples.
         </div>
         <div class="para e81">In practice, the following program-oriented markup elements are included in otherwise
            common paragraph-level markup.
         </div>
         <div class="para e82">Here's the header of the module processing SGML declarations (other than ENITY declarations)
            <div class="popupBox e83">
               <div class="popupLabel" onmouseover="$('#d1e143').show('1000');" onmouseout="$('#d1e143').hide('1000');">[ footnote ]</div>
               <div id="d1e143" style="display: none;">
                  <div class="footnote" xml:id="stilo">
                     <div class="para e84">Please note that the copyright information isn't just an example.  This code is copyright
                        and extracted from the original code of the product (with some abbreviations to make
                        it easier to present).  Stilo International has kindly allowed me to use snippets
                        of it as examples in a public forum.
                     </div>
                  </div>
               </div>
            </div>:
            <div class="programlisting e85" xml:space="preserve">
               &lt;!-- xkdecl.doc: 
               
               Copyright (C) Stilo International plc, 1991 - 2011
               All Rights Reserved
               
               PROPRIETARY AND CONFIDENTIAL
               
               --&gt;
               &lt;chapter&gt;Declarations
               &lt;revinfo&gt;$Id: xkdecl.doc,v 1.83 2001/10/19 15:11:08 kernel Exp $
               &lt;system&gt;kernel:XK
               &lt;module defined&gt;decl &lt;!-- Declarations;--&gt;;
               basic; mem; syn; lex; var; ent; mod; con; attr; edec; err; fsm1
               &lt;cinclude&gt;xktypes.h
               
            </div>
         </div>
         <div class="para e86">It contains:
            <div class="itemizedlist e87">
               <div class="listitem e88">
                  <div class="para e89">Importantly, copyright and distribution information.
                     <div class="xref e90" linkend="stilo"></div>
                  </div>
               </div>
               <div class="listitem e91">
                  <div class="para e92">A chapter heading, both as a lead comment in the code and as a chapter start and title
                     in the user's and programmer's documentation.
                  </div>
               </div>
               <div class="listitem e93">
                  <div class="para e94">Revision information for the revision control system used at the time.  (For a stable
                     piece of software such as this, it doesn't get updated often, as you can see.)
                  </div>
               </div>
               <div class="listitem e95">
                  <div class="para e96">Information about the system name, the used module name, what other modules are used,
                     and what C include files are needed.
                  </div>
               </div>
            </div>
         </div>
         <div class="para e97">Data structures are documented rather than coded:
            <div class="programlisting e98" xml:space="preserve">
               &lt;struct external&gt;document type definition
               # The data structure which describes a document type definition (a "compiled"
               DTD) and which points to all the data structures for the objects declared
               for the document type definition. #
               &lt;comment&gt;
               The following fields provide information about specific features of
               a document type.
               &lt;/comment&gt;
               =  document element: 'element definition'*
               # Pointer to the definition for the document element. #
               =  default general entity: 'entity definition'*
               # Pointer to the default general entity. #
               ...
               &lt;/struct&gt;
               
            </div>
         </div>
         <div class="para e99">Documentation of a structure as a whole as well as of each field is required.  The
            markup used for the fields of a structure is exactly the same as for an ordered list
            of labeled textual items: no distinction is made between the markup for documentation
            and for code.
         </div>
         <div class="para e100">Structures, functions and other constructs have attributes specified with them that
            are meaningful either to the target code, the programmer's documentation, the user's
            documentation or two or more of these things.
         </div>
         <div class="para e101">Global names are marked up (surrounded by apostrophes in code and by "at" signs in
            text), and are chosen to be appropriate for documentation.  The processing software
            replaces these names with the kinds of names required by the target language, together
            with appropriate prefixing.  This approach makes the code more portable between systems.
         </div>
         <div class="para e102">Functions/methods have their interface information marked up as documentation:
            <div class="programlisting e103" xml:space="preserve">
               &lt;function external&gt;initialize document type: 'boolean'
               # Prepare for parsing a document instance. #
               &lt;inout setself&gt;parsing_state: 'parsing state'*
               &lt;in&gt;base_element: 'element definition'*
               &lt;comment&gt;
               This procedure prepares ~parsing_state~ to parse a document instance using the
               current document type definition in ~parsing_state~.  Three options are
               available for selecting what is to be parsed, depending on the value of
               ~base_element~, as follows:
               &lt;ol&gt;
               =  If ~base_element~ is the base document element of the document type (i.e.
               the one named following the keyword DOCTYPE in the DTD), then the following
               input text is parsed with that element as the document element (see
               ISO 8879-1986, definition 4.99).
               =  If ~base_element~ is any other element in the DTD, then that other element
               is treated as if it were the document element for the purposes of parsing the
               following input text.  This allows parts of documents to be parsed, such as a
               single chapter.
               =  If ~base_element~ is "null" (@element definition.null@), then the following
               text may consist of any sequence of elements defined in the DTD.
               &lt;/ol&gt;
               In the first two cases, @initialize document type@ sets the number of opened
               elements to zero (0).
               ...
               &lt;code&gt;
               &lt;return/'initialize parsing state generally'
               (parsing_state,
               ('document type definition'*) 'document type definition.null',
               base_element,
               ('document syntax'*) 'document syntax.null',
               ('document syntax'*) 'document syntax.null',
               ('parsing state setup result'*) 0)/
               &lt;/function&gt;
               
            </div>
         </div>
         <div class="para e104">Function arguments are documented both by text and by the markup of the argument.
            Code in the body of a function is the one place where program code is used in preference
            to markup, for a number of reasons:
            <div class="itemizedlist e105">
               <div class="listitem e106">
                  <div class="para e107">Dense code is generally easier to read in a more compact form.</div>
               </div>
               <div class="listitem e108">
                  <div class="para e109">The code is only used in two (potential) targets: the produced C code that was intended
                     to be compiled, and in the annotated code documentation.
                  </div>
               </div>
            </div>
         </div>
         <div class="para e110">That said, there are exceptions to using a non-SGML form for code:
            <div class="itemizedlist e111">
               <div class="listitem e112">
                  <div class="para e113">Constructs that impact a function's interface, such as "return" (but not things like
                     "if") are marked up.
                     <div class="popupBox e114">
                        <div class="popupLabel" onmouseover="$('#d1e195').show('1000');" onmouseout="$('#d1e195').hide('1000');">[ footnote ]</div>
                        <div id="d1e195" style="display: none;">
                           <div class="footnote">
                              <div class="para e115">I forget exactly why returns were marked up.  Oh well.</div>
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               <div class="listitem e116">
                  <div class="para e117">The big issue in choosing verbose markup or compact markup is in the trade-off of
                     readability and utility.  This trade-off can be subjective -- different people with
                     come to different conclusions, depending largely on what markup and other notations
                     they are familiar with.
                  </div>
               </div>
               <div class="listitem e118">
                  <div class="para e119">References to names in the software's interface, either of interest to the user or
                     of global interest to the software's developers, are marked up, so that they can be
                     easily found if needed.  One use of marked up marked-up names is an index of all uses
                     of every name can be listed.
                  </div>
               </div>
            </div>
         </div>
         <div class="para e120">Using markup also means that things that are better coded as tables than as code,
            but which need to be run as code, can be included.  This was done in the SGML parser,
            by coding the syntactic parsing logic as a finite state machine (FSM).  For example,
            here's the logic for parsing an SGML end tag (in a somewhat abbreviated form):
            <div class="programlisting e121" xml:space="preserve">
               From Clause 7.5, End-tag:
               
               &lt;fsm&gt;end-tag (TAG):
               &amp;more;
               =  name {end-tag}: +generic identifier specification
               =  tagc {back over lexeme; check end-tag shorttag}: +checked shorttag
               =  * {impossible}
               #  checked shorttag
               {empty end-tag}: +generic identifier specification
               #  generic identifier specification (TAG):
               &amp;s;
               =  tagc {end of end-tag: other prolog; end of tag}: content
               =  stago no rhs, etago no rhs
               {back over lexeme; report missing end tag tagc missing;
               end of end-tag: other prolog; end of tag}: content
               =  * {backup needed; 'unrecognized item'}: +unrecognized
               #  unrecognized
               {end of end-tag: other prolog; end of tag}: content
               &lt;/fsm&gt;
               
            </div>
         </div>
         <div class="para e122">Each entry has four parts: the thing or things being recognized, the lexical context
            in effect (i.e. what tokens are recognized, identified by a keyword such as "TAG"),
            the action to be taken when recognizing that thing (in curly braces), and what state
            in the state machine to go to next.  In particular:
            <div class="itemizedlist e123">
               <div class="listitem e124">
                  <div class="para e125">"#" introduces a sub-state and "+" prefixes a local reference to the next state. 
                     Next states with no "+" prefix are major states, like "end-tag".
                  </div>
               </div>
               <div class="listitem e126">
                  <div class="para e127">Substates need not recognize anything, but just do something, like "checked shorttag".</div>
               </div>
               <div class="listitem e128">
                  <div class="para e129">Groups of common actions are coded as entity references ("&amp;more;" and "&amp;s;").</div>
               </div>
            </div>
         </div>
         <div class="para e130">Note that the above example is very heavily marked up: all of ( ) { } + = # ' and
            ; are compact markup (a.k.a. SHORTREFs).
         </div>
         <div class="para e131">Actions in the FSM are marked up specially:
            <div class="programlisting e132" xml:space="preserve">
               &lt;action value&gt;end tag
               # Process an end tag containing an element name and signal the
               change of context to the application. #
               &lt;comment&gt;
               The current lexical item is the name of the element.
               @parsing state.selected element@ is to be made the definition of the element.
               to the previous state after closing one element, or go to the alternate
               state after having reported an error.
               &lt;/comment&gt;
               &lt;local&gt;element: 'element definition'*
               &lt;local&gt;opened_element: 'opened element'*
               &lt;code&gt;
               if (parsing_state-&gt;'parsing state.opened element count' &gt; 0)
               opened_element = parsing_state-&gt;'parsing state.opened element stack';
               else
               opened_element = 'opened element.null';
               if (!'look up element' (parsing_state,
               parsing_state-&gt;'parsing state.opened entity stack'-&gt;
               'opened entity.item start',
               ('integer')
               (parsing_state-&gt;'parsing state.opened entity stack'-&gt;
               'opened entity.item end' -
               parsing_state-&gt;'parsing state.opened entity stack'-&gt;
               'opened entity.item start'),
               addr(element)))
               {
               parsing_state-&gt;'parsing state.selected element' =
               'element definition.null';
               'report error' (parsing_state,
               'exception code.undefined element in end tag');
               &lt;return//
               }
               parsing_state-&gt;'parsing state.selected element' = element;
               'create opened element' (parsing_state);
               'initiate closing current element' (parsing_state, opened_element);
               &lt;/action&gt;
               
            </div>
         </div>
         <div class="para e133">Actions can be compiled as functions, with calls to them included in the FSM code,
            or they can be marked as a "macro", and included in-line.  The "value" attribute indicates
            that the action (potentially) returns a value to the invoking application.  This illustrates
            the use of markup not just for documentation purposes, but to make the coding simpler.
         </div>
         <div class="para e134">The FSM markup language made it easy to create program code, and was easy to work
            with.  It greatly shortened the time of creating a high-performance SGML parser.
         </div>
         <div class="para e135">Using SGML to help create an SGML parser had nothing, of course, to do with the fact
            that it was an SGML parser that was being developed using this technique.  However
            it did help to speed up development of the product in an otherwise inappropriate programming
            language: C.  One could also argue that it took someone with expertise in implementing
            and using SGML to perform both tasks.
         </div>
         <div class="para e136">It's unclear whether this use of literate programming was a success or not:
            <div class="itemizedlist e137">
               <div class="listitem e138">
                  <div class="para e139">It's use helped greatly in the project in which it was used.</div>
               </div>
               <div class="listitem e140">
                  <div class="para e141">It wasn't reused in later projects.</div>
               </div>
            </div>
         </div>
         <div class="para e142">So an argument could be made both for success and for failure.</div>
      </div><a name="AnAsideOnShortReferencesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e143">
         <div class="title e144">An Aside On Short References</div>
         <div class="para e145">The work described in this paper makes extensive use of short references and illustrates
            how they can be useful.
         </div>
         <div class="para e146">Another paper being presented at this conference, 
            <div class="popupBox e147">
               <div class="popupLabel" onmouseover="$('#d1e250').show('1000');" onmouseout="$('#d1e250').hide('1000');">[ footnote ]</div>
               <div id="d1e250" style="display: none;">
                  <div class="footnote" xml:id="shortrefs">
                     <div class="para e148">Mario Blazevic, Stilo International, "Extending XML with SHORTREFs specified in RELAX
                        NG", to be presented at Balisage 2012, Wednesday 4:45pm.
                     </div>
                  </div>
               </div>
            </div> describes a simplified mechanism for introducing the advantages of 
            <div class="xref e149" linkend="wiki"></div> and SGML short references into XML.  As that paper correctly points out, it's not
            easy to get SGML short references right.  The difficulty is not so much compact markup
            its self -- it's in the mechanism for defining it, in the tool support for such markup,
            and in the quality of the documentation of such markup.  (If anything, it's in the
            later that the use of SGML short references failed most notably.)
         </div>
         <div class="para e150">XML was designed and made different from SGML on the assumption that markup support
            tools, such as XML editors and XML exporting support in word processors, had or would
            develop to the point where users were no longer entering XML markup "by hand", but
            would use semi-automated tools for doing so.  This is true for a large class of users.
            But there is also a large number of users entering XML tags using non-XML-specific
            editors: one major category of such being in programming language environments, where
            those languages have syntaxes in addition to that of XML.  To be effective user-helpful
            tools need to support multiple syntaxes, not just that of the programming language
            or languages used, or just XML, but all of them.
         </div>
         <div class="para e151">One difficulty with using compact markup is that it's best used sparingly.  That is,
            only a small number of compact markup forms should be used in any particular context.
            Successful Wiki Markup languages are a testament to this principle. Too many different
            compact forms results in confusion.  The classical paper on the subject is Miller's
            
            <div class="xref e152" linkend="mn7"></div>, which says that the limit on the number of usable forms (per context) is about 7
            (plus or minus 2).
         </div>
         <div class="para e153">At this stage in the development of markup languages, it doesn't seem to be a particularly
            controversial statement to say that the best use of fully-tagged and compact markup
            is in some combination of the two -- with the balance chosen based on the needs of
            a particular application.  One size does not fit all.  For an example, consider the
            mixture of fully-tagged XML and compact 
            <div class="xref e154" linkend="xpath"></div> that appear in most 
            <div class="xref e155" linkend="xslt"></div> programs.
         </div>
         <div class="para e156">There are a number of ways in which the advantages of compact markup can be realized
            in an XML context, including:
            <div class="itemizedlist e157">
               <div class="listitem e158">
                  <div class="para e159">A general facility could be added to XML structure descriptors (DTD, schema, RELAX-NG,
                     etc), maybe some up-dated form of short references as suggested in another paper here
                     <div class="xref e160" linkend="shortrefs"></div> for markup language developers to develop their own compact markup.
                  </div>
               </div>
               <div class="listitem e161">
                  <div class="para e162">A similar facility could be created as a separate process, complementary to existing
                     XML structure descriptors, that could be used with any of them, that for example,
                     adds further element structure to a preexisting parsed XML tree based on discovered
                     compact markup.
                  </div>
               </div>
               <div class="listitem e163">
                  <div class="para e164">Some special-purpose compact markup could be supported as a separate process.  This
                     approach would be appropriate if there were a limited number of applications of compact
                     markup -- only for literate programming applications, for example -- and no need for
                     a general approach.
                  </div>
               </div>
            </div>
            
         </div>
         <div class="para e165">The Literate Programming work described in this paper wouldn't have really been possible
            without the use of some form of compact markup to complement the primary markup (SGML
            or XML).  The level of detail would make full XML markup, for example, difficult to
            read, especially for programmers, whose primary interest is the programming code.
         </div>
      </div><a name="AnotherAsideOnTheKindsOfDocumentationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e166">
         <div class="title e167">Another Aside, On The Kinds Of Documentation</div>
         <div class="para e168">The SGML/C project described above supported four kinds of documentation that could
            be targeted by marked-up code and documentation:
            <div class="itemizedlist e169">
               <div class="listitem e170">
                  <div class="para e171">User documentation: information for the end user of a software system.</div>
               </div>
               <div class="listitem e172">
                  <div class="para e173">Design documentation: information for helping maintain a software system, outlining
                     the structure of the software and how it works
                  </div>
               </div>
               <div class="listitem e174">
                  <div class="para e175">Fully annotated code: for use by those actually working with the code, detailing what,
                     how and why is actually done.
                  </div>
                  <div class="para e176">These three categories of documentation are incremental: generally speaking, design
                     documentation includes everything the user is told, and annotated code includes all
                     the user and design information.
                  </div>
               </div>
               <div class="listitem e177">
                  <div class="para e178">Comments: There is some documentation that falls outside of any of the above categories:
                     comments detailing the how and why of specific code snippets (rather than the more
                     general techniques that apply to whole methods or other segments of code).  These
                     comments are inseparable from the code they annotate, and seem to be best entered
                     as language-specific comments rather than as marked-up documentation.  Unlike the
                     above categories of documentation, these kinds of comments need no special handling.
                  </div>
               </div>
            </div>and of course, there's the code itself: what the programming language's compiler needs
            to be given.  In practice there can be more than one kind of code:
            <div class="itemizedlist e179">
               <div class="listitem e180">
                  <div class="para e181">The "production" code, that appears in the final product.  There can be multiple products,
                     or multiple versions of a product, originating in one set of code.
                  </div>
               </div>
               <div class="listitem e182">
                  <div class="para e183">In addition, code can exist as part of the software development process, with lots
                     of extra checks and reports.
                  </div>
               </div>
            </div>Markup can effectively distinguish between different versions and kinds of code.
         </div>
         <div class="para e184">So there's at least four kinds of things created from marked-up code: user, design
            and annotated code documentation, and the compiler's code.
         </div>
      </div><a name="ALiterateProgrammingMarkupLanguageAsANewLanguageANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e185">
         <div class="title e186">A Literate Programming Markup Language As A New Language</div>
         <div class="para e187">Adding comments to program code doesn't change the programming language used in any
            way.  It remains the same programming language plus comments.  But once major programming
            language constructs, such as data structure declarations and function headings, are
            replaced by documentation-friendly markup, we find ourselves looking at different
            programming language.
         </div>
         <div class="para e188">At what point changing the syntax of a programming language makes it a different language
            depends largely on one's point of view.  From the point of view of the programming
            language designer, syntax is a minor issue: functionality is their focus.  From the
            point of view of the language user syntax is just about everything: it's important
            how to code an "if" statement, even though it's semantics is more-or-less the same
            in every programming language.  As a consequence, any useful definition of what constitutes
            a programming language, and the extent to which two are the same, has got to take
            syntax into account.
         </div>
         <div class="para e189">A major impediment to acceptance of a literate programming language is the fact that
            it is a different language.  It's not the programming language that a programmer knows,
            and switching over is not a small job.  And I'm afraid to say that I've found computer
            programmers in general very conservative in what languages they are willing to work
            with: they generally stick with what they know.  A major selling job is needed to
            convince programmers to switch.
         </div>
         <div class="para e190">It being a different language than what programmers were used to seems to be a large
            part of the reason that the SGML/C-based programming language described in this paper
            failed.  It may well be for other reasons: lack of promotion of the language, or a
            well-established base of other software that management and the programmers didn't
            want to change.  These things have to be taken into consideration when developing
            a new language, to ensure its better acceptance.
         </div>
      </div><a name="ConclusionsAndObservationsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e191">
         <div class="title e192">Conclusions And Observations</div>
         <div class="para e193">Literate Programming is something that clearly needs more work:
            <div class="itemizedlist e194">
               <div class="listitem e195">
                  <div class="para e196">More use of Literate Programming needs to be undertaken so that useful ideas can be
                     developed.  If nobody does it, it's not going to happen.
                  </div>
               </div>
               <div class="listitem e197">
                  <div class="para e198">Markup conventions for Literate Programming need to be developed, either with respect
                     to a particular programming language, or which apply to a variety of programming languages.
                     There is not going to be general acceptance of Literate Programming if every language
                     or, worse yet, every system has its own set of conventions.
                  </div>
                  <div class="para e199">As noted earlier, the trade-offs between full and compact markup are somewhat subjective.
                     As a consequence, these conventions will need to be arbitrary.  And that has to be
                     accepted.
                  </div>
               </div>
               <div class="listitem e200">
                  <div class="para e201">Literate Programming tools need to be integrated into software development systems.
                     At present, Literate Programming is usually implemented as a preprocessor.  But this
                     doesn't fit well with most visual software development systems, or with the expectations
                     of most programmers.
                  </div>
               </div>
               <div class="listitem e202">
                  <div class="para e203">The use of compact markup in XML documents needs to be researched further.  Whether
                     XML itself needs to be extended to support compact, whether that can best be done
                     outside of XML, or whether it's unwise to try either needs to be reexamined.
                  </div>
               </div>
            </div>
         </div>
         <div class="para e204">Markup-based Literate Programming gives us the opportunity to bring the advantages
            of markup in general, and XML in particular, to a wider community.  More than any
            new programming language feature -- which language designers are always on the lookout
            for -- better and more reliable documentation could make a difference to how computer
            programmers work.  But it's not a small task: it's as big as developing a whole new
            programming langauge.
         </div>
      </div><a name="ReferencesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e205">
         <div class="title e206">References</div>
         <div class="bibliomixed e207" xml:id="c" xreflabel="C programming language">Home page of ISO/IEC JTC1/SC22/WG14 - C 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e208" xlink:actuate="onRequest" xlink:href="http://www.open-std.org/jtc1/sc22/wg14" xlink:show="new" xlink:type="simple">http://www.open-std.org/jtc1/sc22/wg14</div>
         </div>
         <div class="bibliomixed e209" xml:id="knuth" xreflabel="Knuth's WEB System">Donald E. Knuth, Literate Programming 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e210" xlink:actuate="onRequest" xlink:href="http://www.literateprogramming.com/knuthweb.pdf" xlink:show="new" xlink:type="simple">http://www.literateprogramming.com/knuthweb.pdf</div>
         </div>
         <div class="bibliomixed e211" xml:id="lp" xreflabel="Literate Programming">Literate Programming Web Site 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e212" xlink:actuate="onRequest" xlink:href="http://www.literateprogramming.com" xlink:show="new" xlink:type="simple">http://www.literateprogramming.com</div>
         </div>
         <div class="bibliomixed e213" xml:id="mn7" xreflabel="The Magical Number Seven">George A. Miller, Harvard University, "The Magical Number Seven, Plus or Minus Two:
            Some Limits on Our Capacity for Processing Information" 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e214" xlink:actuate="onRequest" xlink:href="http://www.psych.utoronto.ca/users/peterson/psy430s2001/Miller%20GA%20Magical%20Seven%20Psych%20Review%201955.pdf" xlink:show="new" xlink:type="simple">http://www.psych.utoronto.ca/users/peterson/psy430s2001/Miller GA Magical Seven Psych
               Review 1955.pdf
            </div>
         </div>
         <div class="bibliomixed e215" xml:id="omnimark" xreflabel="OmniMark">OmniMark Developer Resources 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e216" xlink:actuate="onRequest" xlink:href="http://developers.omnimark.com" xlink:show="new" xlink:type="simple">http://developers.omnimark.com</div>
         </div>
         <div class="bibliomixed e217" xml:id="sgml" xreflabel="SGML">Standard Generalized Markup Language (SGML) 
            <div class="emphasis e218" role="ital">International Organization for Standardization</div> ISO 8879:1986
         </div>
         <div class="bibliomixed e219" xml:id="tex" xreflabel="TeX">TeX Users Group 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e220" xlink:actuate="onRequest" xlink:href="http://www.tug.org" xlink:show="new" xlink:type="simple">http://www.tug.org</div>
         </div>
         <div class="bibliomixed e221" xml:id="wiki" xreflabel="Wiki Markup">Wikipedia Wiki Markup Help page 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e222" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/Help:Wiki_markup" xlink:show="new" xlink:type="simple">http://en.wikipedia.org/wiki/Help:Wiki_markup</div>
         </div>
         <div class="bibliomixed e223" xml:id="xml" xreflabel="XML">Extensible Markup Language (XML) 1.1 (Second Edition) 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e224" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xml11" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xml11</div>
         </div>
         <div class="bibliomixed e225" xml:id="xpath" xreflabel="XPath">XML Path Language (XPath) 3.0 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e226" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xpath-30" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xpath-30</div>
         </div>
         <div class="bibliomixed e227" xml:id="xslt" xreflabel="XSLT">XSL Transformations (XSLT) 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e228" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xslt" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xslt</div>
         </div>
      </div>
   </div>
</div>