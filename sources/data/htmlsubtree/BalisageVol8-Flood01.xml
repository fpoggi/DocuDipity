<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#EncodingTransparency:LiterateProgrammingandTestGenerationforScientificFunctionLibrariesANCHOR" name="EncodingTransparency:LiterateProgrammingandTestGenerationforScientificFunctionLibrariesTOC">Encoding Transparency: Literate Programming and Test Generation for Scientific Function
               Libraries</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ContextandobjectivesANCHOR" name="ContextandobjectivesTOC">Context and objectives</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#UsagescenariosANCHOR" name="UsagescenariosTOC">Usage scenarios</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#EnduserdocumentationANCHOR" name="EnduserdocumentationTOC">End-user documentation</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#UnittestingANCHOR" name="UnittestingTOC">Unit testing</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#SourcecodeportabilityANCHOR" name="SourcecodeportabilityTOC">Source code portability</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConclusionsANCHOR" name="ConclusionsTOC">Conclusions</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ReferencesANCHOR" name="ReferencesTOC">References</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">A Bibliography of Literate Programming,</div>
         <div class="singletermTERMS">A Fortran to C Converter,</div>
         <div class="singletermTERMS">A Case for Contemporary Literate Programming,</div>
         <div class="singletermTERMS">A Unified Format for Language Documents,</div>
         <div class="singletermTERMS">ACM SIGPLAN Fortran Forum</div>
         <div class="singletermTERMS">August 7 - 10, 2012</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">beautiful idea that failed.</div>
         <div class="singletermTERMS">brainpower is by far our scarcest resource,</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2012</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">Communications of the ACM</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">docstring-driven-testing,</div>
         <div class="singletermTERMS">DocBook XSL: The Complete Guide (4th Edition)</div>
         <div class="singletermTERMS">DocBook 5: The Definitive Guide</div>
         <div class="singletermTERMS">D.</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
         <div class="singletermTERMS">ftp://ftp.math.utah.edu/pub/tex/bib/litprog.ps.gz</div>
         <div class="singletermTERMS">Flood</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">Hints on Programming Language Design,</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
         <div class="singletermTERMS">Journal of Statistical Software</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">Literate Programming,</div>
         <div class="singletermTERMS">LAPACK Users' Guide, Third Edition</div>
         <div class="singletermTERMS">Literate Programming</div>
         <div class="singletermTERMS">literate programming</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">mutual pseudocode</div>
         <div class="singletermTERMS">Markdown,</div>
         <div class="singletermTERMS">mark.flood@treasury.gov</div>
         <div class="singletermTERMS">matthew.mccormick@treasury.gov</div>
         <div class="singletermTERMS">Mark</div>
         <div class="singletermTERMS">Matthew</div>
         <div class="singletermTERMS">McCormick</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">no side effects</div>
         <div class="singletermTERMS">NAG Library Manual, Mark 22,</div>
         <div class="singletermTERMS">nathan.palmer@treasury.gov</div>
         <div class="singletermTERMS">Nathan</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">orthodox</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">psychological order</div>
         <div class="singletermTERMS">Proceedings of SAICSIT</div>
         <div class="singletermTERMS">Palmer</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">Researcher</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">Semantic Steganography,</div>
         <div class="singletermTERMS">Senior Policy Advior</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">tangling</div>
         <div class="singletermTERMS">think bilingually</div>
         <div class="singletermTERMS">Textile: A Humane Web Text Generator,</div>
         <div class="singletermTERMS">The Humble Programmer [ACM Turing Lecture 1972],</div>
         <div class="singletermTERMS">TestML User Manual,</div>
         <div class="singletermTERMS">The Python Standard Library by Example</div>
         <div class="singletermTERMS">The Computer Journal</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
         <div class="singletermTERMS">unit testing</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">XSLT</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="EncodingTransparency:LiterateProgrammingandTestGenerationforScientificFunctionLibrariesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3" xml:id="HR-23632987-8973">
      <div class="title e1">Encoding Transparency: Literate Programming and Test Generation for Scientific Function
         Libraries
      </div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2012</div>
            <div class="confdates e5">August 7 - 10, 2012</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">We present a variation on literate programming (see Knuth: 1984, 1992) targeting
               multiple simultaneous readerships, both human (e.g., coders, testers, analysts,
               etc.) and compilers/interpreters (e.g., C++, Python, Fortran, etc.). The technique
               exploits existing commenting syntax available in all common programming languages
               to
               provide inline documentation and other semantic markup, which can then be used in
               test generation and code translation. To keep the problem manageable, we restrict
               attention to scientific function libraries (i.e., libraries of numerical routines
               adhering to the functional programming rule of 
               <div class="quote e8">no side effects</div>). We offer a
               prototype implementation in XSLT and DocBook.
            </div>
         </div>
         <div class="author e9">
            <div class="personname e10">
               <div class="firstname e11">Mark</div>
               <div class="othername e12">D.</div>
               <div class="surname e13">Flood</div>
            </div>
            <div class="personblurb e14">
               <div class="para e15">Mark D. Flood (Mark.Flood@treasury.gov) did his undergraduate work at Indiana
                  University in Bloomington, where he majored in finance (B.S., 1982), and German
                  and economics (B.A., 1983). In 1990, he earned his Ph.D. in finance from the
                  Graduate School of Business at the University of North Carolina at Chapel Hill.
                  He has taught finance and business at universities in the U.S. and Canada, and
                  worked as an Economist and Financial Economist on issues of regulatory policy
                  and risk management at the Federal Reserve Bank of St. Louis, the Office of
                  Thrift Supervision, the Federal Housing Finance Board, and the Federal Housing
                  Finance Agency. He was a founding member of the Committee to Establish a
                  National Institute of Finance. He is currently a Senior Policy Advisor in the
                  U.S. Treasury, working for the Office of Financial Research. His research has
                  appeared in a number of journals, including the Review of Financial Studies,
                  Quantitative Finance, the Journal of International Money and Finance, and the
                  St. Louis Fed's Review.
               </div>
            </div>
            <div class="affiliation e16">
               <div class="jobtitle e17">Senior Policy Advior</div>
               <div class="orgname e18">Office of Financial Research</div>
            </div>
            <div class="email e19">mark.flood@treasury.gov</div>
         </div>
         <div class="author e20">
            <div class="personname e21">
               <div class="firstname e22">Matthew</div>
               <div class="surname e23">McCormick</div>
            </div>
            <div class="personblurb e24">
               <div class="para e25">Matthew McCormick is a research economist whose work currently focuses on
                  systemic risk, network externalities, and housing finance. He is currently
                  employed at the Office of Financial Research within the U.S. Department of
                  Treasury. Prior to this, he worked as an economist at the Federal Housing
                  Finance Agency and the Bureau of Economic Analysis. He holds an M.A. in
                  Economics from George Mason University and a B.A. in Economics and Political
                  Science from Northwestern University. 
               </div>
            </div>
            <div class="affiliation e26">
               <div class="jobtitle e27">Researcher</div>
               <div class="orgname e28">Office of Financial Research</div>
            </div>
            <div class="email e29">matthew.mccormick@treasury.gov</div>
         </div>
         <div class="author e30">
            <div class="personname e31">
               <div class="firstname e32">Nathan</div>
               <div class="surname e33">Palmer</div>
            </div>
            <div class="personblurb e34">
               <div class="para e35"></div>
            </div>
            <div class="affiliation e36">
               <div class="jobtitle e37">Researcher</div>
               <div class="orgname e38">Office of Financial Research</div>
            </div>
            <div class="email e39">nathan.palmer@treasury.gov</div>
         </div>
         <div class="legalnotice e40">
            <div class="para e41">This is a work of the United States Government and is in the public domain.</div>
         </div>
         <div class="keywordset e42" role="author">
            <div class="keyword e43">literate programming</div>
            <div class="keyword e44">XSLT</div>
            <div class="keyword e45">unit testing</div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e46">
         <div class="title e47">Introduction</div>
         <div class="para e48">We outline a (nearly) language-neutral approach to embedding in ordinary source code
            semantic information that we use to generate documentation for multiple audiences,
            unit
            tests, and code translation templates. Our approach is within the literate programming
            tradition for enhancing the usability of software documentation, specifically the
            variants that focus on inline documentation. Accordingly, we embed the structured
            documentation within the ordinary comment syntax available in all common programming
            languages.
            <div class="popupBox e49">
               <div class="popupLabel" onmouseover="$('#d1e80').show('1000');" onmouseout="$('#d1e80').hide('1000');">[ footnote ]</div>
               <div id="d1e80" style="display: none;">
                  <div class="footnote" xml:id="fnote000">
                     <div class="para e50">Our approach to the embedding of semantic information in source also has
                        parallels to McGrath’s (2005) concept of “Semantic Steganography.”
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e51">Knuth (1984, 1992) introduced literate programming to negotiate the fundamental
            tension between the needs of two readerships for computer programs: humans and
            compilers. Knuth’s original recommendation and most implementations work from a hybrid
            literate document containing the information needed to generate both machine-readable
            code and human-readable documentation.
            <div class="popupBox e52">
               <div class="popupLabel" onmouseover="$('#d1e85').show('1000');" onmouseout="$('#d1e85').hide('1000');">[ footnote ]</div>
               <div id="d1e85" style="display: none;">
                  <div class="footnote" xml:id="fnote001">
                     <div class="para e53">Beebe (2012) provides a very useful bibliography of literate programming.
                        Pieterse, Kourie, and Boake (2004) survey a number of literate implementations,
                        identifying six essential qualities of literate programming, all emphasizing the
                        needs of the human user:
                        <div class="itemizedlist e54">
                           <div class="listitem e55">
                              <div class="para e56">Literate quality (crisp and artistic descriptions and
                                 definitions)
                              </div>
                           </div>
                           <div class="listitem e57">
                              <div class="para e58">Psychological order (arranged to maximize human
                                 understanding)
                              </div>
                           </div>
                           <div class="listitem e59">
                              <div class="para e60">Integrated documentation (commingling of documentation and
                                 executable statements)
                              </div>
                           </div>
                           <div class="listitem e61">
                              <div class="para e62">Table of contents, index and cross references</div>
                           </div>
                           <div class="listitem e63">
                              <div class="para e64">Pretty printing</div>
                           </div>
                           <div class="listitem e65">
                              <div class="para e66">Verisimilitude (single source document for both documentation and
                                 executable statements)
                              </div>
                           </div>
                        </div>
                        
                     </div>
                  </div>
               </div>
            </div>For example, Knuth’s (1984) first implementation, called WEB, provided two
            toolchains to export information from the literate source file: (a) TANGLE extracted
            executable source code for delivery to a Pascal compiler; and (b) WEAVE extracted
            documentation for delivery to a TeX interpreter.
         </div>
         <div class="para e67">Despite its impeccable pedigree and a devoted community of supporters, literate
            programming as originally envisioned has not gained widespread acceptance. Wilson
            (2011)
            even calls it a 
            <div class="quote e68">beautiful idea that failed.</div> The 
            <div class="quote e69">psychological
               order
            </div> requirement that literate source documents be arranged to best serve
            the human reader implicitly places a heavy burden on the programmer, whose human-facing
            literate document must simultaneously satisfy an error-intolerant compiler. The
            programmer must have fluency in both the literate syntax and the compiler syntax.
            Even
            for coders with both skills, there is a cognitive cost to switching repeatedly between
            the two commingled dialects-- one unwoven and the other untangled. As a result, the
            original literate programming paradigm is perhaps best suited to applications where
            the
            emphasis is inverted: pretty printing is indispensable and the code itself is in a
            sense
            secondary, as in Leisch’s (2002) Sweave, which allows statistical code to be embedded
            in
            scientific source documents to enable reproducible research.
         </div>
         <div class="para e70"> On the other hand, less 
            <div class="quote e71">orthodox</div> technologies in the literate tradition (i.e.,
            combining executable source code with structured documentation) have been quite
            successful. Javadoc and its generalized peer Doxygen, which rely on structured comments
            embedded in source code to generate documentation, are among the most prominent
            examples. Similarly, tools like Python’s pydoc generate documentation from docstrings,
            string literals that are retained and accessible at runtime as special properties
            of
            objects. Under both approaches, the comparison to orthodox literate programming is
            instructive: structured documentation is still embedded with executable source code,
            but
            the requirement of psychological ordering is dropped. The compiler, by being stubbornly
            inflexible, has won the battle over how to order the statements in the source
            file.
         </div>
         <div class="para e72">Orthogonal to the literate programming paradigm, but still important for our project,
            is the realization by Peters (1999) that the usefulness of docstrings for documentation
            purposes could be harnessed to provide users with a simple, inline method for generating
            unit tests. This realization led to his creation of doctest.
         </div>
         <div class="para e73">Our approach, outlined in the following sections, follows in the tradition of
            Javadoc-style inline documentation, but we use XML intermediates with XSLT not only
            to
            allow for the generation of documentation for multiple audiences, but additionally
            to
            define and generate unit tests, as in doctest, and to generate templates for code
            translation. Section 2 provides further context for our project, section 3 describes
            the
            targeted use cases, and section 4 concludes.
         </div>
      </div><a name="ContextandobjectivesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e74">
         <div class="title e75">Context and objectives</div>
         <div class="para e76">Function libraries play a prominent role in scientific computing.
            <div class="popupBox e77">
               <div class="popupLabel" onmouseover="$('#d1e131').show('1000');" onmouseout="$('#d1e131').hide('1000');">[ footnote ]</div>
               <div id="d1e131" style="display: none;">
                  <div class="footnote" xml:id="fnote002">
                     <div class="para e78">Examples are too numerous to survey here. Prominent contributions include
                        Anderson, et al. (1999), CERN (2004), NAG (2009), and Press, et al.
                        (2007).
                     </div>
                  </div>
               </div>
            </div>A function library is a collection of well documented, callable
            routines of the form y = f(x), where each function takes some argument list, x, executes
            one or more statements depending only on x, and returns a list of values, y. Scientific
            functions tend to involve specialized, technical logic that can be obscure to
            non-experts. As a result, there is a greater-than-usual need for good documentation
            and
            extensive testing. At the same time, scientific routines typically adhere to the
            functional-programming convention of exhibiting no side effects. Routines without
            side
            effects are especially amenable to unit testing, and we restrict attention to this
            class
            of functions to contain the scope of this exercise. Lastly, scientific libraries are
            more
            likely than most to address technical issues that are abstract to the implementation
            context. For example, an invocation of a quadratic programming routine will have
            essentially the same meaning (execution logic) regardless of the language in which
            it is
            written; the same is not true for a resize_frame routine in a GUI windowing toolkit.
            Because of this, scientific routines are more amenable to porting from one programming
            language to another.
         </div>
         <div class="para e79">Our technique is at once more and less ambitious than orthodox literate programming.
            We
            similarly target multiple simultaneous readerships, both human (e.g., coders, testers,
            analysts, etc.) and compilers/interpreters (e.g., C++, Python, Fortran, etc.). However,
            like Javadoc, and in keeping with Dijkstra’s (1972) admonition that, 
            <div class="quote e80">brainpower
               is by far our scarcest resource,
            </div> we concede the impracticality of
            psychological ordering. In particular, there is no 
            <div class="quote e81">tangling</div> to extract
            executable statements; instead we work with valid source files that can be delivered
            to
            the compiler as is. We also hesitate to propose our method as broadly applicable to
            any
            programming paradigm. For example, our source-code portability proposal would likely
            be
            more complicated in an object-oriented environment, due to the possible presence of
            state-altering side effects and the (typically) fragmented sequence of control. 
         </div>
         <div class="para e82">Since we use a form of inline documentation that, like Javadoc and others, exploits
            the existing commenting syntax available in some form in all common programming
            dialects, ours is highly versatile with respect to the choice of source language,
            to the
            point of being nearly language-neutral. This provides significant benefits when
            developing parallel implementations of scientific function libraries in a number of
            languages.
         </div>
         <div class="para e83">On the ambitious side of the ledger, we are interested in more than simply
            
            <div class="quote e84">weaving</div> handsome end-user documentation from embedded, structured
            documentation, although pretty printing is very much in scope. We also extend the
            basic
            methodology to encompass basic unit testing of functional logic. In the absence of
            side
            effects, it becomes straightforward to state the most common unit-test assertions
            declaratively and embed these declarations within comments in the source code. Due
            to
            the desire to be language-neutral, ours is not as straightforward or elegant as doctest,
            but it does provide many of the same benefits. Lastly, we use the template processor
            required by our documentation generation toolchain to offer a method for creating
            function prototypes-- including pseudocode-- for ports of an existing program to
            essentially an arbitrary target programming language. 
         </div>
         <div class="para e85">While none of the individual components of this approach is by itself novel, we find
            that at least within the restricted scope of scientific function libraries without
            side
            effects, significant benefits are provided by the flexibility of our approach and
            the
            synergistic effects of using all of the individual elements of inline
            documentation, unit test generation, and code translation in concert.
         </div>
         <div class="para e86">Specifically, we note that the problem of code translation consists of three
            sub-problems: ensuring that the logic of a particular function is consistent across
            languages, performing the syntactic translation between languages, and optimizing
            the
            implementation within each language. Of these, the implementation is where a good
            programmer is needed most, both to write code that makes use of the appropriate idioms
            provided by a language, and to optimize the implementation of a particular set of
            logic.
            Thus, by providing a programmer with a template for a function that both defines the
            function signature and provides ready-made documentation from another language, we
            reduce unnecessary burdens on programmers porting the original source code. Additionally,
            by
            providing unit test routines, we enable easier verification of ported code. Finally,
            by
            examining discrepancies between implementations, we reduce the model risk inherent
            in
            any single implementation.
         </div>
         <div class="para e87">We consider our approach to be a simplified variation of the literate programming
            paradigm, targeting multiple simultaneous readerships, both human (e.g., coders,
            testers, analysts, etc.) and compilers/interpreters (e.g., C++, Python, Fortran, etc.).
            We offer a prototype implementation in XSLT and DocBook.
         </div>
      </div><a name="UsagescenariosANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e88">
         <div class="title e89">Usage scenarios</div>
         <div class="para e90">In this section, we describe the process in somewhat greater detail. As indicated
            above, the techniques cover three important usage scenarios for managing source code
            in
            function libraries.
         </div><a name="EnduserdocumentationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e91">
            <div class="title e92">End-user documentation</div>
            <div class="para e93">Knuth’s (1984, 1992) original vision for literate programming emphasized the need
               for source code to communicate with human programmers as well as with compilers or
               interpreters. A well documented program should speak clearly to the coder about what
               the code is doing, and the programmer should speak back by enhancing and refining
               the documentation. Knuth quotes a well known passage from Hoare (1973, 3), 
            </div>
            <div class="para e94">
               <div class="quote e95">documentation must be regarded as an integral part of the process of design
                  and coding. A good programming language will encourage and assist the programmer
                  to write clear self-documenting code, and even perhaps to develop and display a
                  pleasant style of writing. The readability of programs is immeasurably more
                  important than their writeablility.
               </div>
            </div>
            <div class="para e96">Knuth’s (1984) initial implementation, called WEB, mixed discussion and logic in a
               single source file, which is then pulled apart to create both executable code and
               typographic source for onward processing by Pascal and TeX, respectively. Figure 1
               depicts the basic structure of the workflow in WEB (adapted from Figure 1 in
               Pieterse, Kourie and Boake, 2004, 113):
            </div>
            <div class="figure e97" xml:id="FIG001" xreflabel="Figure 1">
               <div class="title e98">Figure 1</div>
               <div class="mediaobject e99">
                  <div class="imageobject e100">
                     <div class="metaBox e101"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e176').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e176" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e101'
                              </span><span class="metaAttribute">fileref='../../../vol8/graphics/Flood01/Flood01-001.png'
                              </span><span class="metaAttribute">format='png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="caption e102">
                  <div class="para e103">Literate programming workflow in WEB</div>
               </div>
            </div>
            <div class="para e104">A key design decision here is to mix documentation and logic as co-equals in the
               source. Because the source document adheres to psychological ordering rather than
               executable ordering, a burden falls on the programmer to 
               <div class="quote e105">think
                  bilingually
               </div> (see Wilson, 2011) to understand how the source document
               will be simultaneously tangled and woven to the executable and typographic
               dialects.
            </div>
            <div class="para e106">We adopt a variation on this basic workflow, similarly mixing documentation and
               logic in a single source file, depicted in Figure 2 (a familiar example of this same
               workflow is Javadoc):
            </div>
            <div class="figure e107" xml:id="FIG002" xreflabel="Figure 2">
               <div class="title e108">Figure 2</div>
               <div class="mediaobject e109">
                  <div class="imageobject e110">
                     <div class="metaBox e111"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e192').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e192" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e111'
                              </span><span class="metaAttribute">fileref='../../../vol8/graphics/Flood01/Flood01-002.png'
                              </span><span class="metaAttribute">format='png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="caption e112">
                  <div class="para e113">Documentation and logic in Javadoc</div>
               </div>
            </div>
            <div class="para e114">An important difference in this architecture relative to orthodox literate
               programming is the use of a compiler-valid source document. Because compilers impose
               rigid validation rules on executable code, this relationship can be and is typically
               managed by programming IDEs with facilities such as real-time validation, syntax
               highlighting, debuggers, profilers, etc., sharply reducing the bilingual
               burden.
            </div>
            <div class="para e115">As described above, we embed documentation steganographically in the ordinary
               comment lines within the source code. A sample appears in Figure 3, using standard
               XML angle brackets as documentation markup within a Matlab or Octave source file.
               Comments containing content intended for delivery to the final end-user documents
               get a special syntax, 
               <div class="quote e116">%#</div> instead of simply 
               <div class="quote e117">%</div>. Given a
               source document in this form, the comment processor performs four straightforward
               pre-processing steps, resulting in valid XML that encapsulates all of the content
               required for end-user documentation:
               <div class="orderedlist e118">
                  <div class="listitem e119">
                     <div class="para e120">Wrap any executable statements in &lt;code&gt; tags</div>
                  </div>
                  <div class="listitem e121">
                     <div class="para e122">Delete ordinary comment lines</div>
                  </div>
                  <div class="listitem e123">
                     <div class="para e124">Convert documentation comments by removing the leading
                        
                        <div class="quote e125">%#</div> markers
                     </div>
                  </div>
                  <div class="listitem e126">
                     <div class="para e127">Wrap the entire document in &lt;codefile&gt; tags</div>
                  </div>
               </div>
            </div>
            <div class="figure e128" xml:id="FIG003" xreflabel="Figure 3">
               <div class="title e129">Figure 3</div>
               <div class="mediaobject e130">
                  <div class="imageobject e131">
                     <div class="metaBox e132"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e227').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e227" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e132'
                              </span><span class="metaAttribute">fileref='../../../vol8/graphics/Flood01/Flood01-003.png'
                              </span><span class="metaAttribute">format='png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="caption e133">
                  <div class="para e134">A working example of steganographic documentation</div>
               </div>
            </div>
            <div class="para e135">An obvious (and planned) enhancement to this is to replace the angle brackets with
               a more felicitous markup scheme, such as Markdown, Textile or YAML.
               <div class="popupBox e136">
                  <div class="popupLabel" onmouseover="$('#d1e234').show('1000');" onmouseout="$('#d1e234').hide('1000');">[ footnote ]</div>
                  <div id="d1e234" style="display: none;">
                     <div class="footnote" xml:id="fnote003">
                        <div class="para e137">We are at a very preliminary prototyping stage currently, and are
                           evaluating various markup options. On Textile, see Allen (2012); on YAML,
                           see Ben-Kiki, Evans and Net (2009); on Markdown, see Gruber (2012). Use of a
                           non-XML syntax would an extra up-conversion step to achieve valid XML output
                           from the pre-processor.
                        </div>
                     </div>
                  </div>
               </div> Note that we have prototyped this process on Matlab/Octave source files,
               but it should work with any programming language that supports inline comments
               containing arbitrary text. The pre-processing routine is therefore customized to
               each source language, but the subsequent processing steps would be the same for any
               source language. Given a valid XML representation output by the preprocessing step,
               the next processing phase is an XSLT transformation to a standard publication format
               such as DocBook or DITA. Transformation from this intermediate form to final print
               or web format is then straightforward via standard tools.
               <div class="popupBox e138">
                  <div class="popupLabel" onmouseover="$('#d1e238').show('1000');" onmouseout="$('#d1e238').hide('1000');">[ footnote ]</div>
                  <div id="d1e238" style="display: none;">
                     <div class="footnote" xml:id="fnote004">
                        <div class="para e139">Our prototype relies on DocBook, but we are evaluating DITA as an
                           alternative path. Supporting XSLT stylesheets for both (and/or additional)
                           publication standards should be possible. For further details on DocBook,
                           see Walsh (2010) and Stayton (2007); for further details on DITA see OASIS
                           (2010).
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
         </div><a name="UnittestingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e140">
            <div class="title e141">Unit testing</div>
            <div class="para e142">Section 3.1 outlines the basic process, which we also propose to extend to
               black-box unit testing. In this use-case, we embed structured unit-testing rules
               (rather than documentation content) within comments in the source code. There are
               precedents for this sort of inline testing (e.g., the aforementioned doctest package
               in Python), but to our knowledge these are limited to single-language contexts.
               There are also language-neutral domain-specific rule languages for unit testing
               (e.g., the TestML package; see Net, 2012), but these have not been used for inline
               tests. We propose to use a language-neutral rule syntax to specify unit tests
               declaratively, and then embed them in source-code comments. 
            </div>
            <div class="para e143">Programmatic unit testing is particularly important for scientific function
               libraries, partly because a well defined functional API will try to isolate logic
               so
               that relatively few dependencies exist between routines at the API level, but also
               because scientific routines frequently involve subtle and highly technical execution
               logic, so that errors in output may not be immediately obvious to human observers.
               (For example, do you know offhand whether this square-root calculation is correct:
               sqrt(88) =&gt; 9.276442 ?) Note that the steganographic method could also be
               extended to white-box testing, if the code generates a structured log file
               containing intermediate results.
            </div>
         </div><a name="SourcecodeportabilityANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e144">
            <div class="title e145">Source code portability</div>
            <div class="para e146">Scientific function libraries are frequently written in one programming language,
               and then ported to another language to support source-level compatibility. As noted
               above, this is more likely to occur for scientific code, because the concepts
               represented are typically unrelated to the programming dialect. Linear algebra is
               the same, whether implemented in C, Fortran or Java. Indeed, Feldman (1990) exploits
               the grammatical equivalence between Fortran 77 and C to implement a direct
               language-level converter. 
               <div class="popupBox e147">
                  <div class="popupLabel" onmouseover="$('#d1e254').show('1000');" onmouseout="$('#d1e254').hide('1000');">[ footnote ]</div>
                  <div id="d1e254" style="display: none;">
                     <div class="footnote" xml:id="fnote005">
                        <div class="para e148">To a first approximation, Fortran 77 is a linguistic subset of C. Any
                           statement that can be represented in Fortran 77 can be represented in
                           C.
                        </div>
                     </div>
                  </div>
               </div> This converter was then used to port the Numerical Recipes function
               library in that direction (see Press, et al., 2007).
            </div>
            <div class="para e149">In general, grammatical equivalence will not hold, and programmatic language-level
               conversion cannot reasonably be achieved. Even where it is possible, there are
               typically optimizations and refactorings that an expert in the target language would
               want to apply. The upshot is that post-translation manual intervention to debug or
               refine the target code should naturally be part of the process. Nonetheless, for any
               function library written in a particular language, there will be some family of
               alternative languages to which it could (in principle) be ported.
               <div class="popupBox e150">
                  <div class="popupLabel" onmouseover="$('#d1e260').show('1000');" onmouseout="$('#d1e260').hide('1000');">[ footnote ]</div>
                  <div id="d1e260" style="display: none;">
                     <div class="footnote" xml:id="fnote006">
                        <div class="para e151">For example, at the extreme, it is theoretically possible to represent any
                           program written in a Turing-complete language in any other Turing-complete
                           language. In practice, we do not advise arbitrary translation.
                        </div>
                     </div>
                  </div>
               </div> This family of languages then defines an equivalence class of 
               <div class="quote e152">mutual
                  pseudocode
               </div> for the routine or library. That is, if one starts with a working
               program written language A, and wishes-- with the services of an expert in language
               B-- to port the code, then the original program (in A) can serve as pseudocode for
               the target program (in B). Most developers have personal experience with applying
               this general process, so we are not inventing anything new here. The only real
               innovation is the recognition that much of the programming effort required for such
               a port-- namely the documentation and testing-- can be specified declaratively and
               in a structured way, as described in sections 3.1 and 3.2. An accurate programmatic
               conversion of the documentation and test plan is possible, using the sort of XSLT
               transformations described above. What remains is for a target-language expert to
               re-implement the pseudocode (i.e., the verbatim copies of source-language executable
               statements) as optimized target-language code. Note finally that the
               post-translation availability of dual implementations of the identical scientific
               logic opens up the possibility of automated comparative unit testing: if both
               implementations are supposed to do the same thing, then they should (typically,
               within machine precision) return identical outputs for identical inputs.
            </div>
         </div>
      </div><a name="ConclusionsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e153">
         <div class="title e154">Conclusions</div>
         <div class="para e155">We have outlined a general approach to automated documentation, unit-testing and code
            portability for scientific function libraries, using the ordinary comment syntax as
            a
            vehicle to embed declarative logic steganographically in the source code. This addresses
            immediate and practical needs in our workplace, and may be useful to others similarly
            situated. We have a working prototype of significant portions of this tool chain,
            and
            are working to build it out further.
         </div>
      </div><a name="ReferencesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e156">
         <div class="title e157">References</div>
         <div class="bibliomixed e158" xml:id="Allen2012" xreflabel="Allen (2012)">Allen, Dean, 2012, 
            <div class="quote e159">Textile:
               A Humane Web Text Generator,
            </div> Internet resource, Textism, downloaded 15 April
            2012. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e160" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.textism.com/tools/textile/</div>
            
         </div>
         <div class="bibliomixed e161" xml:id="AndersonETAL1999" xreflabel="Anderson, et al. (1999)">Anderson, E., Z.
            Bai, C. Bischof, S. Blackford, J. Demmel, J. Dongarra, J. Du Croz, A. Greenbaum, S.
            Hammarling, A. McKenney, D. Sorensen, 1999, 
            <div class="emphasis e162">LAPACK Users' Guide, Third
               Edition
            </div>, Society for Industrial and Applied Mathematics (SIAM).
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e163" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.netlib.org/lapack/lug/</div>
            
         </div>
         <div class="bibliomixed e164" xml:id="Beebe2012" xreflabel="Beebe (2012)">Beebe, Nelson, 2012, 
            <div class="quote e165">A
               Bibliography of Literate Programming,
            </div> technical report, University of Utah.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e166" xlink:actuate="onRequest" xlink:href="ftp://ftp.math.utah.edu/pub/tex/bib/litprog.ps.gz" xlink:show="new" xlink:type="simple">ftp://ftp.math.utah.edu/pub/tex/bib/litprog.ps.gz</div>
         </div>
         <div class="bibliomixed e167" xml:id="BenKikiEvansNet2009" xreflabel="Ben-Kiki, Evans and Net (2009)">Ben-Kiki, Oren, Clark Evans and Ingy döt Net, 2009, 
            <div class="quote e168">YAML Ain’t Markup Language
               (YAMLTM), Version 1.2, 3rd Edition, Patched at 2009-10-01,
            </div> technical report,
            YAML.org, downloaded 18 April 2012. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e169" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://yaml.org/spec/1.2/spec.pdf</div>
            
         </div>
         <div class="bibliomixed e170" xml:id="CERN2004" xreflabel="CERN (2004)">CERN - European Organization for
            Nuclear Research, 2004, 
            <div class="quote e171">Colt: Open Source Libraries for High Performance
               Scientific and Technical Computing in Java,
            </div> Internet resource, downloaded 17
            April 2012. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e172" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://acs.lbl.gov/software/colt/api/index.html</div>
            
         </div>
         <div class="bibliomixed e173" xml:id="Dijkstra1972" xreflabel="Dijkstra (1972)">Dijkstra, E. W., 1972,
            
            <div class="quote e174">The Humble Programmer [ACM Turing Lecture 1972],</div>
            
            <div class="emphasis e175">Communications of the ACM</div>, 15(10), pp. 859-66.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e176" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.cs.utexas.edu/~EWD/transcriptions/EWD03xx/EWD340.html</div>. doi:
            <div class="biblioid doi e177">10.1145/355604.361591</div>.
            
         </div>
         <div class="bibliomixed e178" xml:id="Feldman1990" xreflabel="Feldman (1990)">Feldman, S. I., 1990, 
            <div class="quote e179">A
               Fortran to C Converter,
            </div>
            
            <div class="emphasis e180">ACM SIGPLAN Fortran Forum</div>, 9(2), 21-22.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e181" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://dl.acm.org/citation.cfm?id=101366%C3%DC</div>
            
         </div>
         <div class="bibliomixed e182" xml:id="Gruber2012" xreflabel="Gruber (2012)">Gruber, John, 2012,
            
            <div class="quote e183">Markdown,</div> Internet resource, Daring Fireball, downloaded 15 April
            2012. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e184" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://daringfireball.net/projects/markdown/</div>
         </div>
         <div class="bibliomixed e185" xml:id="Hellmann2011" xreflabel="Hellmann (2011)">Hellmann, Doug, 2011,
            
            <div class="emphasis e186">The Python Standard Library by Example</div>,
            Addison-Wesley.
         </div>
         <div class="bibliomixed e187" xml:id="Hoare1973" xreflabel="Hoare (1973)">Hoare, C. A. R., 1973, 
            <div class="quote e188">Hints
               on Programming Language Design,
            </div> technical report STAN-CS-73-403, Stanford
            Artificial Intelligence Laboratory, December.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e189" xlink:actuate="onRequest" xlink:href="ftp://reports.stanford.edu/pub/cstr/reports/cs/tr/73/403/CS-TR-73-403.pdf" xlink:show="new" xlink:type="simple">ftp://reports.stanford.edu/pub/cstr/reports/cs/tr/73/403/CS-TR-73-403.pdf</div>
            
         </div>
         <div class="bibliomixed e190" xml:id="Knuth1984" xreflabel="Knuth (1984)">Knuth, Donald E., 1984,
            
            <div class="quote e191">Literate Programming,</div>
            
            <div class="emphasis e192">The Computer Journal</div>, 27(2), 97-111. doi:
            <div class="biblioid doi e193">10.1093/comjnl/27.2.97</div>.
         </div>
         <div class="bibliomixed e194" xml:id="Knuth1992" xreflabel="Knuth (1992)">Knuth, Donald E., 1992,
            
            <div class="emphasis e195">Literate Programming</div>, Center for the Study of Language and
            Information - Lecture Notes.
         </div>
         <div class="bibliomixed e196" xml:id="Leisch2002" xreflabel="Leisch (2002)">Leisch, Freidrich, 2002,
            
            <div class="quote e197">Sweave: Dynamic generation of statistical reports using literate data
               analysis,
            </div> Compstat 2002 - Proceedings in Computational Statistics,
            575-580.
            
         </div>
         <div class="bibliomixed e198" xml:id="McGrath2005" xreflabel="McGrath (2005)">McGrath, Sean,
            2005, 
            <div class="quote e199">Semantic Steganography,</div> Internet resource, accessed July 17,
            2012. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e200" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://seanmcgrath.blogspot.com/2005/04/semantic-steganography.html</div>
            
         </div>
         <div class="bibliomixed e201" xml:id="Net2012" xreflabel="Net (2012)">Net, Ingy dot, 2012, 
            <div class="quote e202">TestML User
               Manual,
            </div> Internet resource, downloaded 18 April 2012.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e203" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://testml.org/documentation/user-manual/</div>
            
         </div>
         <div class="bibliomixed e204" xml:id="NAG2009" xreflabel="NAG (2009)">Numerical Algorithms Group Limited
            (NAG), 2009, 
            <div class="quote e205">NAG Library Manual, Mark 22,</div> Internet resource, downloaded
            17 April 2012.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e206" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.nag.co.uk/numeric/fl/nagdoc_fl22/xhtml/FRONTMATTER/manconts.xml</div>
            
         </div>
         <div class="bibliomixed e207" xml:id="OASIS2010" xreflabel="OASIS (2010)">OASIS, 2010, 
            <div class="emphasis e208">Darwin
               Information Typing Architecture (DITA), Version 1.2
            </div>, OASIS Standard, 1
            December 2010, downloaded 18 April 2012.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e209" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://docs.oasis-open.org/dita/v1.2/os/spec/DITA1.2-spec.pdf</div>
            
         </div>
         <div class="bibliomixed e210" xml:id="Peters1999" xreflabel="Peters (1999)">Peters, Time, 1999,
            
            <div class="quote e211">docstring-driven-testing,</div> comp.lang.python, accessed June 12,
            2012. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e212" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">https://groups.google.com/forum/?fromgroups#!msg/comp.lang.python/DfzH5Nrt05E/Yyd3s7fPVxwJ</div>
            
         </div>
         <div class="bibliomixed e213" xml:id="PieterseETAL2004" xreflabel="Pieterse, et al., (2004)">Pieterse, Vreda,
            Derrick G. Kourie, and Andrew Boake, 2004, 
            <div class="quote e214">A Case for Contemporary Literate
               Programming,
            </div>
            
            <div class="emphasis e215">Proceedings of SAICSIT</div> ’04, 2-9.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e216" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://espresso.cs.up.ac.za/publications/vpieterse_etal_saicsit.pdf</div>
            
         </div>
         <div class="bibliomixed e217" xml:id="PressETAL2007" xreflabel="Press, et al. (2007)">Press, William H., Saul
            A. Teukolsky, William T. Vetterling, and Brian P. Flannery, 2007, 
            <div class="emphasis e218">Numerical
               Recipes: The Art of Scientific Computing, 3rd Ed.
            </div>, Cambridge University
            Press. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e219" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.nr.com/</div>
            
         </div>
         <div class="bibliomixed e220" xml:id="SchulteETAL2012" xreflabel="Schulte, et al., (2012)">Schulte, Eric, Dan
            Davison, Thomas Dye, and Carsten Dominik, 2012, 
            <div class="quote e221">A Multi-Language Computing
               Environment for Literate Programming and Reproducible Research,
            </div>
            
            <div class="emphasis e222">Journal of Statistical Software</div>, 46(3), January.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e223" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.jstatsoft.org/v46/i03/paper</div>
            
         </div>
         <div class="bibliomixed e224" xml:id="SciPy2012" xreflabel="SciPy (2012)">SciPy Community, 2012, 
            <div class="quote e225">SciPy
               Reference Guide: Release 0.11.0.dev-bdfdc65,
            </div> technical report, downloaded 16
            April 2012. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e226" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://docs.scipy.org/doc/scipy/scipy-ref.pdf</div>
            
         </div>
         <div class="bibliomixed e227" xml:id="Stayton2007" xreflabel="Stayton (2007)">Stayton, Bob, 2007,
            
            <div class="emphasis e228">DocBook XSL: The Complete Guide (4th Edition)</div>, Sagehill
            Enterprises. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e229" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.sagehill.net/book-description.html</div>
            
         </div>
         <div class="bibliomixed e230" xml:id="Walsh2010" xreflabel="Walsh (2010)">Walsh, Norman, 2010,
            
            <div class="emphasis e231">DocBook 5: The Definitive Guide</div>, O’Reilly Media.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e232" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://shop.oreilly.com/product/9780596805012.do</div>
            
         </div>
         <div class="bibliomixed e233" xml:id="Wilson2011" xreflabel="Wilson (2011)">Wilson, Greg, 2011,
            
            <div class="quote e234">Literate Programming,</div> Internet resource, Software Carpentry,
            downloaded 14 April 2012.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e235" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://software-carpentry.org/2011/03/4069/</div>
         </div>
         <div class="bibliomixed e236" xml:id="ZaytsevLammel2011" xreflabel="Zaytsev and Lämmel (2011)">Zaytsev, Vadim
            and Lämmel, Ralf, 2011, 
            <div class="quote e237">A Unified Format for Language Documents,</div> in: B.
            Malloy, S. Staab, and M. van den Brand (eds.), 
            <div class="emphasis e238">Software Language Engineering,
               Lecture Notes in Computer Science
            </div>, 6563, Springer Verlag, 206-225.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e239" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.springerlink.com/content/126476612j05082n/</div>
            
         </div>
      </div>
   </div>
</div>