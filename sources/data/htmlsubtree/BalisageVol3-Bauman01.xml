<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#PryingApartSemanticsandImplementationANCHOR" name="PryingApartSemanticsandImplementationTOC">Prying Apart Semantics and Implementation</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#SemanticsANCHOR" name="SemanticsTOC">Semantics</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#EndurantTypesANCHOR" name="EndurantTypesTOC">Endurant Types</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AttributesandDatatypesANCHOR" name="AttributesandDatatypesTOC">Attributes and Datatypes.</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AssociationANCHOR" name="AssociationTOC">Association</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#GeneralizationANCHOR" name="GeneralizationTOC">Generalization</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ExampleANCHOR" name="ExampleTOC">Example</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ConclusionANCHOR" name="ConclusionTOC">Conclusion</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#DesignANCHOR" name="DesignTOC">Design</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ExampleANCHOR" name="ExampleTOC">Example</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ConclusionANCHOR" name="ConclusionTOC">Conclusion</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#SoftwareANCHOR" name="SoftwareTOC">Software</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#FurtherWorkANCHOR" name="FurtherWorkTOC">Further Work</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConclusionANCHOR" name="ConclusionTOC">Conclusion</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ChallengesANCHOR" name="ChallengesTOC">Challenges</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AccomplishmentsANCHOR" name="AccomplishmentsTOC">Accomplishments</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#PhysicalEncodingOptionsANCHOR" name="PhysicalEncodingOptionsTOC">Physical Encoding Options</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#GeneralEncodingRulesANCHOR" name="GeneralEncodingRulesTOC">General Encoding Rules</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#ModelLevelPropertiesANCHOR" name="ModelLevelPropertiesTOC">Model Level Properties</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#NameEncodingANCHOR" name="NameEncodingTOC">Name Encoding</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#MultiplicityEncodingANCHOR" name="MultiplicityEncodingTOC">Multiplicity Encoding</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#DocumentationANCHOR" name="DocumentationTOC">Documentation</a></div>
               </div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ClassEncodingANCHOR" name="ClassEncodingTOC">Class Encoding</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#DatatypeEncodingANCHOR" name="DatatypeEncodingTOC">Datatype Encoding</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AttributeEncodingANCHOR" name="AttributeEncodingTOC">Attribute Encoding</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#RelationshipEncodingANCHOR" name="RelationshipEncodingTOC">Relationship Encoding</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#AssociationEncodingANCHOR" name="AssociationEncodingTOC">Association Encoding</a></div>
                  <div class="headedContainerTOC">
                     <div class="headedContainerTitleTOC"><a href="#AssociationEndANCHOR" name="AssociationEndTOC">Association End</a></div>
                  </div>
                  <div class="headedContainerTOC">
                     <div class="headedContainerTitleTOC"><a href="#AssociationEncodingANCHOR" name="AssociationEncodingTOC">Association Encoding</a></div>
                  </div>
                  <div class="headedContainerTOC">
                     <div class="headedContainerTitleTOC"><a href="#AssociationsendingataMixin(egcategoryroleCategory)ANCHOR" name="AssociationsendingataMixin(egcategoryroleCategory)TOC">Associations ending at a Mixin (e.g., category, roleCategory).</a></div>
                  </div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#GeneralizationEncodingsANCHOR" name="GeneralizationEncodingsTOC">Generalization Encodings</a></div>
               </div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ReferencesANCHOR" name="ReferencesTOC">References</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">August 11 - 14, 2009</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">But wait, there's more!</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2009</div>
         <div class="singletermTERMS">btbauma@earthlink.net</div>
         <div class="singletermTERMS">Bruce</div>
         <div class="singletermTERMS">Bauman</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">Conceptual Modeling for XML: A Survey</div>
         <div class="singletermTERMS">ComputerSystem</div>
         <div class="singletermTERMS">CPU</div>
         <div class="singletermTERMS">Conceptual Modeling</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">Description</div>
         <div class="singletermTERMS">Data Modeling Theory and Practice</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
         <div class="singletermTERMS">George Box</div>
         <div class="singletermTERMS">good design</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">Hardware</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">in time</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">Lewis Carroll, Through the Looking Glass</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">maxOccurs</div>
         <div class="singletermTERMS">Model-Utility</div>
         <div class="singletermTERMS">Model2XSD-Utility</div>
         <div class="singletermTERMS">MDA Guide Version 1.0.1</div>
         <div class="singletermTERMS">ManuracturedItem</div>
         <div class="singletermTERMS">ManufacturedItem</div>
         <div class="singletermTERMS">ManufactureredItem</div>
         <div class="singletermTERMS">manufacturedBy</div>
         <div class="singletermTERMS">Manufacturer</div>
         <div class="singletermTERMS">Model2XSD</div>
         <div class="singletermTERMS">Model2XSD-Preprocessor</div>
         <div class="singletermTERMS">Model2XSD-Processor</div>
         <div class="singletermTERMS">Model2XSD-Postprocessor</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">name</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">of time</div>
         <div class="singletermTERMS">Organization</div>
         <div class="singletermTERMS">Ontology</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">reasonable level of specificity</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">signature</div>
         <div class="singletermTERMS">serialNum</div>
         <div class="singletermTERMS">System Engineer</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">The question is,</div>
         <div class="singletermTERMS">Todd</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
         <div class="singletermTERMS">unbounded</div>
         <div class="singletermTERMS">UML Distilled - Second Edition</div>
         <div class="singletermTERMS">UML</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
         <div class="singletermTERMS">Variability in Conceptual Modeling</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">xsd:group</div>
         <div class="singletermTERMS">xsd:complexType</div>
         <div class="singletermTERMS">xsd:attributeGroup</div>
         <div class="singletermTERMS">xsd:element</div>
         <div class="singletermTERMS">xsd:attribute</div>
         <div class="singletermTERMS">xsd:group ref=""</div>
         <div class="singletermTERMS">xsd:element ref=""</div>
         <div class="singletermTERMS">xsd:import</div>
         <div class="singletermTERMS">xsd:include</div>
         <div class="singletermTERMS">xsd:extension</div>
         <div class="singletermTERMS">XML Schema</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
         <div class="singletermTERMS">You have to say everything twice</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="PryingApartSemanticsandImplementationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.2">
      <div class="title e1">Prying Apart Semantics and Implementation</div>
      <div class="subtitle e2">Generating XML Schemata directly from ontologically sound conceptual models</div>
      <div class="info e3">
         <div class="confgroup e4">
            <div class="conftitle e5">Balisage: The Markup Conference 2009</div>
            <div class="confdates e6">August 11 - 14, 2009</div>
         </div>
         <div class="abstract e7">
            <div class="para e8">Central to interoperability is a shared conceptualization of the domain or
               universe of discourse (UoD). A conceptual model (CM) documents this shared
               understanding between people in a formal language, augmenting prose but neutral of
               later implementation decisions. Having such an explicit layer has benefits for
               enhanced interoperability, higher quality implementations, reuse and mapping, and
               as
               such is recognized as desirable by many modeling frameworks. In this paper, we
               describe our motivation and efforts to date, to use the ontologically well founded
               profile of the Unified Modeling Language (UML) proposed in 
               <div class="xref e9" linkend="Guizzardi-2005"></div> to create such models. Relevant subsets of a CM form
               the basis for physical data models (PDM) targeting specific technologies, in this
               case the generation of Extensible Markup Language (XML) schemata represented in the
               World Wide Web Consortium (W3C) Schema Language (XSD). These physical data models
               are annotated by a developer, with a set of encoding directives. These encoding
               directives and the custom developed software that interprets them to map concepts
               in
               the CM to their expression in an XSD, are our principle contribution. The CM
               language, the XSD encoding annotations, and the software are briefly
               described.
            </div>
         </div>
         <div class="author e10">
            <div class="personname e11">
               <div class="firstname e12">Bruce</div>
               <div class="othername e13">Todd</div>
               <div class="surname e14">Bauman</div>
            </div>
            <div class="personblurb e15">
               <div class="para e16">Mr. Bauman's first introduction to markup was in the early 1990's where he
                  oversaw the tagging of foreign language dictionaries in compliance with the Text
                  Encoding Initiative (TEI) standards and led a development team that produced
                  multi-lingual retrieval tool for those dictionaries based on the Standard
                  Generalized Markup Language (SGML) . Mr. Bauman became interested in using SGML
                  and then XML to solve entrenched interoperability problems. This led him to look
                  seriously at information / data modeling and now ontology for answers to
                  interoperabilities' persistent questions. Twelve years later he has yet to solve
                  those entrenched problems (this is really hard).
               </div>
               <div class="para e17">Mr. Bauman has been attending [off and on] the Balisage series of conferences
                  since the HyTime days, and has watched XML grow up over its 11 year history. 
               </div>
               <div class="para e18">Mr. Bauman holds a BS in Computer Engineering and an MS in Computer
                  Science.
               </div>
            </div>
            <div class="email e19">btbauma@earthlink.net</div>
            <div class="affiliation e20">
               <div class="jobtitle e21">System Engineer</div>
               <div class="orgname e22">U.S. Department of Defense</div>
            </div>
         </div>
         <div class="legalnotice e23">
            <div class="para e24">Copyright © 2009 by the author.  Used with
               permission.
            </div>
         </div>
         <div class="keywordset e25" role="author">
            <div class="keyword e26">Conceptual Modeling</div>
            <div class="keyword e27">Ontology</div>
            <div class="keyword e28">UML</div>
            <div class="keyword e29">XML Schema</div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e30">
         <div class="title e31">Introduction</div>
         <div class="para e32">Schemata in the World Wide Web Consortium's (W3C) Extensible Markup Language (XML)
            Schema language (XSD), Relax Next Generation (RNG), Structured Query Language (SQL)
            Data
            Definition Language (DDL), Resource Description Framework Schema (RDFS), or Web Ontology
            Language (OWL)) are typically created directly. A basic text editor can be used,
            although more likely today it will be with a design tool that uses visual symbols
            with a
            more or less bijective mapping to the constructs in the chosen implementation language.
            Various profiles of the Unified Modeling Language (UML) class diagrams have been
            proposed as a visualization for XSD design 
            <div class="xref e33" linkend="Bernauer-2004"></div>; various forms
            of Entity Relationship Diagrams (ERD)'s are the preferred choice for relational database
            (SQL DDL) design. And then there are the numerous languages specific to a given vendors
            tool.
         </div>
         <div class="para e34">As useful as these visual design languages are, they are first, representations of
            a
            design in a specific implementation language, and only secondarily do they reflect
            the
            semantics of a Universe of Discourse (UoD) or domain.
            <div class="popupBox e35">
               <div class="popupLabel" onmouseover="$('#d1e60').show('1000');" onmouseout="$('#d1e60').hide('1000');">[ footnote ]</div>
               <div id="d1e60" style="display: none;">
                  <div class="footnote" xml:id="DescriptionOrDesign">
                     <div class="para e36">Surprisingly the claim that these visual languages represent an
                        implementation, and do not directly model the UoD is controversial in some
                        communities of practitioners. A well written, and thorough treatment of this
                        topic in the data modeling community can be found in 
                        <div class="xref e37" linkend="Simsion-2007"></div>
                     </div>
                  </div>
               </div>
            </div> Or as stated in the introduction to 
            <div class="xref e38" linkend="Guizzardi-2005"></div> pages 7
            - 8.
            <div class="popupBox e39">
               <div class="popupLabel" onmouseover="$('#d1e67').show('1000');" onmouseout="$('#d1e67').hide('1000');">[ blockquote ]</div>
               <div id="d1e67" style="display: none;">
                  <div class="blockquote">
                     <div class="para e40">Nowadays, many languages exist that are used for the purpose of creating
                        representations of real-world conceptualizations. These languages are sometimes
                        named domain modeling languages (e.g., LINGO), ontology representation languages
                        (e.g., OWL), semantic data modeling languages (e.g., ER), among other terms. ...
                        Although these languages are employed in practice for conceptual modeling, they
                        are not designed with the specific purpose of being truthful to reality. For
                        instance, LINGO (Falbo &amp; Menezes &amp; Rocha, 1998; Falbo &amp; Guizzardi
                        &amp; Duarte, 2002) was designed with the specific objective of achieving a
                        positive trade-off between expression power of the language and the ability to
                        facilitate bridging the gap between the conceptual and implementation levels.
                        This preoccupation also seems to be present in Peter Chen's original proposal
                        for ER diagrams (Chen, 1976). OWL (Horrocks &amp; Patel-Schneider &amp; van
                        Harmelen, 2003) has been designed with the main purpose of achieving
                        computational efficiency in an automatic reasoning process. Some other
                        languages, such as Z (Spivey, 1988) and CC Technique (Dijkman &amp; Ferreira
                        Pires &amp; Joosten, 2001), take advantage of the simplicity of the well-defined
                        mathematical framework of set theory. Finally, some of the languages used
                        nowadays for conceptual modeling were created for different purposes, the most
                        notorious example being the UML (OMG, 2003c), which initially focused on
                        software design.
                     </div>
                  </div>
               </div>
            </div>Designs reflect hard engineering trade-offs, starting with the initial
            choice of an implementation language which will have only limited abilities to express
            the full richness of the UoD, and ending with the numerous design choices made (e.g.,
            denormalization, implementing relationships, by reference, vs. by value, collapsing
            generalization hierarchies). This intertwining of implementation design and semantics
            with semantics taking a back seat, means that no formal model representing just the
            semantics remains. The sole guardian of pure semantics is the informal prose, in the
            text box labeled 
            <div class="emphasis e41">Description</div>.
         </div>
         <div class="para e42">The use of prose to capture semantics is of course essential, the target audience
            that
            needs to fully account for semantics are people, and natural language with all its
            richness, complexity, and nuance is essential. The challenge of course with relying
            only
            on words is their ambiguity. Although formally the interplay of words with meaning
            is
            studied in fields such as linguistics, semiotics, phenomenology, communication theory
            etc., Humpty Dumpty sums up the problem rather well. 
         </div>
         <div class="para e43">
            
            <div class="popupBox e44">
               <div class="popupLabel" onmouseover="$('#d1e78').show('1000');" onmouseout="$('#d1e78').hide('1000');">[ blockquote ]</div>
               <div id="d1e78" style="display: none;">
                  <div class="blockquote">
                     <div class="para e45">
                        <div class="quote e46">When I use a word,</div> Humpty Dumpty said, in a rather scornful
                        tone, 
                        <div class="quote e47">it means just what I choose it to mean, neither more nor less.</div>
                        
                        <div class="quote e48">The question is,</div> said Alice, 
                        <div class="quote e49">whether you can make words
                           mean so many different things.
                        </div>
                        
                        <div class="quote e50">The question is,</div> said Humpty Dumpty, 
                        <div class="quote e51">which is to be master - that's all.</div> Alice was too much puzzled to say anything; so after a minute Humpty Dumpty began
                        again.
                        
                        <div class="quote e52">They've a temper, some of them - particularly verbs: they're the
                           proudest - adjectives you can do anything with, but not verbs - however, I
                           can manage the whole lot of them! Impenetrability! that's what I say!
                        </div> 
                        
                        <div class="citation e53">Lewis Carroll, Through the Looking
                           Glass
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            
         </div>
         <div class="para e54">The lack of a separate design neutral, but formal accounting of semantics has several
            drawbacks. The first, is that ultimately for two or more systems to interoperate they
            must share a compatible understanding of the UoD, they needn't necessarily share the
            same design. This task of determining, and ultimately documenting via a mapping,
            compatibility, or recognizing when and where it is not possible is made more difficult.
            Second, when people negotiate to decide on a common language for sharing information,
            the discussion can / will often stray between discussing differences in meaning, and
            differences in design. Its helpful in resolving disagreements to know which of the
            two
            classes of discussion one is having. Third, it is perfectly reasonable, desirable,
            and
            necessary to implement the same UoD in multiple implementation languages and/or in
            multiple designs. Capturing explicitly a model of the UoD allows it to be reused.
            This
            is even more beneficial if the domain is highly complex and/or technical and modeling
            it
            correctly is expensive, time consuming and difficult.
         </div>
         <div class="para e55">A solution, is to create a conceptual model (CM). A model that formally represent
            those aspects of the UoD that are deemed relevant for a particular purpose, (e.g.,
            the
            static structural aspects of a domain essential to the development of information
            models), but that is neutral of physical design decisions. Then from that model produce
            though a semi-automated mapping process logical / physical level models, from which,
            because of their isomorphism to a targeted schema language, a schema can be
            automatically produced.
         </div>
         <div class="para e56">The idea is hardly new.
            <div class="quote e57">The issue is essentially one of implementation
               independence - the goal (or assumption) that the conceptual data model be
               independent of the implementation language. This view dates at least from Chen
               (1976), is the basis of the conceptualization principle in the ANSI/SPARC
               framework 
               <div class="xref e58" linkend="ISO-TR9007"></div>, and has been frequently re-stated ...
               This ideal does not appear to be achieved in practice
            </div> (
            <div class="xref e59" linkend="Simsion-2007"></div>, p. 51). Nor is the idea unique to the data modeling
            community from which the above quote originates. The Model Driven Architecture (MDA)
            of
            the Object Management Group (OMG) has the concepts of the Platform Independent Model
            (PIM) and Platform Specific Model (PSM) 
            <div class="xref e60" linkend="OMG-MDA"></div>. The recognition of the
            need for conceptual models to back up XML schema design is also old, dating back to
            the
            beginning of XML, and XML's predecessor, Standardized Generalized Markup language
            (SGML).
            <div class="popupBox e61">
               <div class="popupLabel" onmouseover="$('#d1e120').show('1000');" onmouseout="$('#d1e120').hide('1000');">[ footnote ]</div>
               <div id="d1e120" style="display: none;">
                  <div class="footnote" xml:id="XML-Survey">
                     <div class="para e62">A survey of some of the conceptual modeling proposals that have been made for
                        XML can be found in 
                        <div class="xref e63" linkend="Nečaský-2006"></div>
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e64">The proposal outlined in the sections that follow is also in one sense nothing new.
            Its strength is not in the idea that a conceptual model is useful, but in what modeling
            language has been pressed into service. The conceptual modeling language outlined
            below,
            is a subset of that proposed by Giancarlo Guizzardi, principally in 
            <div class="xref e65" linkend="Guizzardi-2005"></div> . In his 2005 work, a foundational ontology in later
            works referred to as the Unified Foundational Ontology (UFO), designed to capture
            agreements about the semantics of a UoD by people and for people, visualized using
            a
            profile of UML 2.0 is defined. We have changed, only trivially his proposal based
            on
            some ideas from data modeling 
            <div class="xref e66" linkend="Simsion-2005"></div> and other sources both to
            simplify the language, and make it more familiar to people with a data modeling
            background. The UFO builds upon cross disciplinary knowledge as well as research in
            formal ontology [as applied to computer science] that has occurred in the last fifteen
            years.
         </div>
         <div class="para e67">From a conceptual model based on this language, multiple physical data models (PDM)
            which subset, and / or extend, the larger conceptual model are generated. A PDM is
            then
            annotated by a designer with a set of encoding options that specify how the concepts
            in
            the CM should be represented in the XSD. We have chosen the initial set of encoding
            options based on internal experience with creating UML to XML schema mappings since
            2000-2001 much like those surveyed in 
            <div class="xref e68" linkend="Bernauer-2004"></div>. Software written
            in Extensible Stylesheet Transformations (XSLT) version 2.0 is the primary mechanism
            by
            which the annotated physical data models are compiled into XML schemata. 
            <div class="xref e69" linkend="CM-PDM"></div> show an overview of the complete process.
         </div>
         <div class="figure e70" xml:id="CM-PDM">
            <div class="title e71">Model Development Process</div>
            <div class="mediaobject e72">
               <div class="imageobject e73">
                  <div class="metaBox e74"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e141').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e141" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e74'
                           </span><span class="metaAttribute">fileref='../../../vol3/graphics/Bauman01/Bauman01-001.jpg'
                           </span><span class="metaAttribute">format='jpg'
                           </span><span class="metaAttribute">width='125%'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e75">In the following sections, our requirements for a CM modeling language are explained,
            followed by a brief outline of the ontologically well founded language we have selected.
            This is followed by an example physical data model, that has been annotated with XSD
            encoding directives. How those directives drive the compilation of that PDM into an
            XSD
            is explained. The software implementation in Sybase Power Designer (a commercial data
            modeling / enterprise architecture tool), and in particular the implementation of
            the
            XSLT code that generates an XML schema from it, is touched on briefly. This is followed
            by a section on further work, and conclusions. Appendix A contains a more complete
            account of the XSD encoding options available.
         </div>
      </div><a name="SemanticsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e76">
         <div class="title e77">Semantics</div>
         <div class="subtitle e78">An Ontologically based Conceptual Modeling Language</div>
         <div class="para e79">
            
            <div class="popupBox e80">
               <div class="popupLabel" onmouseover="$('#d1e152').show('1000');" onmouseout="$('#d1e152').hide('1000');">[ blockquote ]</div>
               <div id="d1e152" style="display: none;">
                  <div class="blockquote">
                     <div class="para e81">All models are wrong, some are useful. 
                        <div class="citation e82">George Box</div>
                     </div>
                  </div>
               </div>
            </div>
            
         </div>
         <div class="para e83">This frequently repeated quote represents a very pragmatic definition of what makes
            a
            good model and it is the position adopted here for both models, and by extension
            modeling languages and the meta-models / ontologies that they are based on. As such,
            no
            claims are made that the modeling language briefly introduced below, the foundational
            ontology it is based on, or the models that are described with it, have any lock on
            a
            single, absolute truth. Instead, the language has been chosen / customized because
            we
            believe it can meet the following pragmatic requirements
            <div class="popupBox e84">
               <div class="popupLabel" onmouseover="$('#d1e160').show('1000');" onmouseout="$('#d1e160').hide('1000');">[ footnote ]</div>
               <div id="d1e160" style="display: none;">
                  <div class="footnote" xml:id="Modeling-Language">
                     <div class="para e85">As opposed to those aspects of a modeling language that should always be
                        generally true. Guizzardi explores this in chapter 2 of 
                        <div class="xref e86" linkend="Guizzardi-2005"></div>. An informal description of desirable properties
                        of a model can be found at
                        
                        <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e87" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.idiagram.com/ideas/models.html</div>
                     </div>
                  </div>
               </div>
            </div>: 
            <div class="orderedlist e88" xml:id="Requirements">
               <div class="title e89">Modeling Language Requirements</div>
               <div class="listitem e90" xml:id="Req-Communication">
                  <div class="para e91">Document an agreement between people, to a reasonable level of
                     specificity,
                     <div class="popupBox e92">
                        <div class="popupLabel" onmouseover="$('#d1e174').show('1000');" onmouseout="$('#d1e174').hide('1000');">[ footnote ]</div>
                        <div id="d1e174" style="display: none;">
                           <div class="footnote" xml:id="Model-Specificity">
                              <div class="para e93">The phrase 
                                 <div class="emphasis e94">reasonable level of specificity</div> is
                                 simply an acknowledgement that no formal modeling language can
                                 capture all of the nuance of a concept necessary for human
                                 understanding. Prose is still essential. Instead the requirement is
                                 that the modeling language at least convey enough information so
                                 that all the people who read [and understand it] find themselves on
                                 the same street, if not in the same house.
                              </div>
                           </div>
                        </div>
                     </div> those aspects of a UoD or domain that are relevant for the
                     design of information/data models, but without committing to a specific
                     implementation language.
                  </div>
               </div>
               <div class="listitem e95" xml:id="Req-Design">
                  <div class="para e96">Support through human directed action, and to the greatest extent
                     possible, the automatic generation of designs and schemata encoded as XSDs
                     appropriate for information exchange .
                  </div>
               </div>
               <div class="listitem e97" xml:id="Req-DDL">
                  <div class="para e98">Similarly support the generation of designs and schemata encoded as SQL
                     DDL appropriate for relational data bases.
                     <div class="popupBox e99">
                        <div class="popupLabel" onmouseover="$('#d1e187').show('1000');" onmouseout="$('#d1e187').hide('1000');">[ footnote ]</div>
                        <div id="d1e187" style="display: none;">
                           <div class="footnote" xml:id="DDL">
                              <div class="para e100">Although this is a requirement, it has not yet been proven.
                                 Because of the extensive expertise of the team that worked on this
                                 project in relational database design, it does seem quite likely
                                 that this will work when we get around to creating the necessary
                                 software.
                              </div>
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               <div class="listitem e101" xml:id="Req-OWL">
                  <div class="para e102">If possible, support the generation of designs and schemata encoded in OWL
                     Description Logic (DL).
                     <div class="popupBox e103">
                        <div class="popupLabel" onmouseover="$('#d1e193').show('1000');" onmouseout="$('#d1e193').hide('1000');">[ footnote ]</div>
                        <div id="d1e193" style="display: none;">
                           <div class="footnote" xml:id="OWL-DL">
                              <div class="para e104">Once again, this has yet to be proven. An initial assessment as to
                                 the feasibility of this is promising. It would potentially require
                                 the adoption of additional constructs defined in the UFO. The rules
                                 (and resulting code) to map it into OWL DL would likely be easier
                                 then the rules / code currently in place to generate an XML schema.
                                 This is due to the very direct mapping between the constructs in the
                                 conceptual modeling language and OWL DL, and to the fact that
                                 relationship encoding in RDF is prescribed, where as in general XML
                                 the variability in how relationships are encoded is considerable.
                                 
                              </div>
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               <div class="listitem e105" xml:id="Req-Approchable">
                  <div class="para e106">Be reasonably approachable by personnel trained in traditional logical
                     data modeling using ERD notations.
                     <div class="popupBox e107">
                        <div class="popupLabel" onmouseover="$('#d1e199').show('1000');" onmouseout="$('#d1e199').hide('1000');">[ footnote ]</div>
                        <div id="d1e199" style="display: none;">
                           <div class="footnote" xml:id="Approachable">
                              <div class="para e108">This requirement is driven by the practical resource constraints
                                 of being able to find people with the correct skill set for creating
                                 conceptual models for information systems.
                              </div>
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               <div class="listitem e109" xml:id="Req-Construct">
                  <div class="para e110">Reduce the level of construct variability, to support the development of
                     models in a distributed environment.
                     <div class="popupBox e111">
                        <div class="popupLabel" onmouseover="$('#d1e205').show('1000');" onmouseout="$('#d1e205').hide('1000');">[ footnote ]</div>
                        <div id="d1e205" style="display: none;">
                           <div class="footnote" xml:id="Construct-Variability">
                              <div class="para e112">Construct variability, defined in 
                                 <div class="xref e113" linkend="Verelst-2004"></div>,
                                 is the use of different modeling constructs (e.g., attribute vs.
                                 entity) to represent the same real-world concept.
                              </div>
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               <div class="listitem e114" xml:id="Req-Horizontal-Vertical">
                  <div class="para e115">Accommodate both vertical and horizontal variability, to support the
                     integration of multiple different perspectives of the same concept within an
                     enterprise.
                     <div class="popupBox e116">
                        <div class="popupLabel" onmouseover="$('#d1e213').show('1000');" onmouseout="$('#d1e213').hide('1000');">[ footnote ]</div>
                        <div id="d1e213" style="display: none;">
                           <div class="footnote" xml:id="Vertical-Horizontal-Variability">
                              <div class="para e117">Horizontal and vertical variability is defined in 
                                 <div class="xref e118" linkend="Verelst-2004"></div>. Vertical variability is the use of
                                 different levels of generalization / abstraction to conceptualize
                                 the same UoD. Horizontal variability is the use of different
                                 categorizations at the same level of generalization / abstraction.
                                 
                              </div>
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e119">After attempting to adapt unsuccessfully both standard UML and ERD notations to meet
            the above requirements, the realization through both experience and subsequent
            examination of the literature (e.g., 
            <div class="xref e120" linkend="Simsion-2007"></div> ), was that both
            languages, and the informal ontologies that they are based on, were too biased for
            design in a specific technology. This led us to examine how formal ontology
            <div class="popupBox e121">
               <div class="popupLabel" onmouseover="$('#d1e222').show('1000');" onmouseout="$('#d1e222').hide('1000');">[ footnote ]</div>
               <div id="d1e222" style="display: none;">
                  <div class="footnote" xml:id="Other-Disciplines">
                     <div class="para e122">Ontology is not the sole discipline that can shed light on conceptual
                        modeling. Epistemology, phenomonology, semiotcs, linguistics, cognitive
                        psychology, and communication theory are but a few that have something to add,
                        and are indeed used in Guizzardi's work.
                     </div>
                  </div>
               </div>
            </div> could be employed, not in the computer science sense of producing a specific
            artifact, expressed typically in a formal logic variant, but in the philosophical
            sense.
            <div class="popupBox e123">
               <div class="popupLabel" onmouseover="$('#d1e226').show('1000');" onmouseout="$('#d1e226').hide('1000');">[ blockquote ]</div>
               <div id="d1e226" style="display: none;">
                  <div class="blockquote">
                     <div class="para e124">... Formal Ontology deals with formal ontological structures (e.g., theory of
                        parts, theory of wholes, types and instantiation, identity, dependence, unity),
                        i.e., with formal aspects of objects irrespective of their particular nature.
                        The unfolding of Formal Ontology as a philosophical discipline aims at
                        developing a system of general categories and their ties, which can be used in
                        the development of scientific theories and domain-specific common sense theories
                        of reality (
                        <div class="xref e125" linkend="Guizzardi-2005"></div>, p. 5).
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e126">In the end we settled on the formal foundational ontology, and its representation
            in
            UML defined in Guizzardi's 2005 PhD thesis 
            <div class="xref e127" linkend="Guizzardi-2005"></div> and
            subsequent research papers 
            <div class="xref e128" linkend="Guizzardi-2006a"></div>
            
            <div class="xref e129" linkend="Guizzardi-2006b"></div>
            
            <div class="xref e130" linkend="Guizzardi-2007"></div>
            
            <div class="xref e131" linkend="Guizzardi-2008"></div> to name just a few, that define the Unified
            Foundational Ontology (UFO). Some small changes in terminology were made to make the
            UFO
            more approachable to classically trained ERD modelers. Its also important to point
            out
            that no claim is being made that the UFO is the only upper level ontology that will
            meet
            the requirements outlined above. What is being claimed is that the selection and
            explicit recognition of a formal upper level ontology as the basis for domain ontologies
            / models is essential to give those models the precise semantic underpinning needed
            to
            enable interoperability. What follows is a necessarily brief introduction to UFO and
            its
            representation in UML.
         </div>
         <div class="para e132">This ontology / language is used to facilitate communication between people, although
            admittedly it is not something that a person, without training will fully grasp.
            
            <div class="quote e133">[The ontology ] aims at capturing the ontological distinctions underlying
               human cognition and common sense.
               <div class="xref e134" linkend="Guizzardi-2005"></div>
            </div> The
            ontology is the basis for recording one, (among many possible) conceptualizations
            of the
            real-world, defining what is a valid state of that world. As such, the language symbols
            designate real-world objects, and not information structures as is the case is the
            PDMs
            derived from it. Optionality on attributes and relationships is strongly 
            discouraged
            <div class="popupBox e135">
               <div class="popupLabel" onmouseover="$('#d1e249').show('1000');" onmouseout="$('#d1e249').hide('1000');">[ footnote ]</div>
               <div id="d1e249" style="display: none;">
                  <div class="footnote" xml:id="Merelogical-Optionality">
                     <div class="para e136">Optionality is fine on whole-part relations, where optional parts are a
                        perfectly reasonable thing.
                     </div>
                  </div>
               </div>
            </div>, 
            <div class="quote e137">... from an ontological standpoint, there is no such a thing as an
               optional property and, hence, the representation of optional cardinality leads to
               unsound models (in the technical sense of chapter 2), with undesirable consequences
               in terms of clarity
            </div> (
            <div class="xref e138" linkend="Guizzardi-2005"></div>, p. 139).
         </div><a name="EndurantTypesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e139">
            <div class="title e140">Endurant Types</div>
            <div class="para e141">Like many upper level 'common sense' ontologies the first level distinction is
               between endurants and events, or things that exist 
               <div class="emphasis e142">in time</div>, and
               maintain their identity, and things that exist 
               <div class="emphasis e143">of time</div>. Unlike
               in the UFO, and in particular UFO-B, in our subset the concept of an event is not
               further specialized. Endurants are. Endurants (e.g., kind, category, role,
               associative) are specialized based on three basic criteria:
               <div class="itemizedlist e144">
                  <div class="listitem e145">
                     <div class="para e146">Existential independence: Is the concept existentially independent,
                        dependent on exactly one other concept, or dependent on two or more
                        other concepts? Existentially dependent concepts, are those that if they
                        are not seen in, or inhered in another object, don't exist.
                     </div>
                  </div>
                  <div class="listitem e147">
                     <div class="para e148">Single principle of identity: Does the concept convey a unified
                        principle of identity? (e.g, all instances of the type have a common way
                        in which they are identified; and thus, instances can be counted
                        directly).
                     </div>
                  </div>
                  <div class="listitem e149">
                     <div class="para e150">Rigidity: Is each instance of a type always of that type? (i.e., the
                        instance - type relationship is rigid), or is it only sometimes
                        (typically within some period of time), associated with a type (i.e.
                        anti-rigid)?
                     </div>
                  </div>
               </div>This leads to the following breakdown:
               <div class="table e151" frame="void">
                  <div class="caption e152">
                     <div class="para e153">Endurant Types</div>
                  </div>
                  <div class="thead e154">
                     <div class="tr e155">
                        <div class="th e156">Name</div>
                        <div class="th e157">Independent</div>
                        <div class="th e158">Identity</div>
                        <div class="th e159">Rigid</div>
                        <div class="th e160">Description</div>
                     </div>
                  </div>
                  <div class="tbody e161">
                     <div class="tr e162">
                        <div class="td e163">kind</div>
                        <div class="td e164" align="center">+</div>
                        <div class="td e165" align="center">+</div>
                        <div class="td e166" align="center">+</div>
                        <div class="td e167">
                           <div class="quote e168">A «kind» represents a substance sortal whose instances are
                              functional complexes. Examples include instances of Natural
                              Kinds (such as Person, Dog, Tree) and of artifacts (Chair, Car,
                              Television).
                           </div> (
                           <div class="xref e169" linkend="Guizzardi-2005"></div>, p.
                           317)
                        </div>
                     </div>
                     <div class="tr e170">
                        <div class="td e171">role</div>
                        <div class="td e172" align="center">+</div>
                        <div class="td e173" align="center">+</div>
                        <div class="td e174" align="center">-</div>
                        <div class="td e175">
                           <div class="quote e176">A «role» represents a phased-sortal role, i.e. anti-rigid and
                              relationally dependent universal. For instance, the role student
                              is played by an instance of the kind Person.
                           </div> (
                           <div class="xref e177" linkend="Guizzardi-2005"></div>, p. 319)
                        </div>
                     </div>
                     <div class="tr e178">
                        <div class="td e179">category</div>
                        <div class="td e180" align="center">+</div>
                        <div class="td e181" align="center">-</div>
                        <div class="td e182" align="center">+</div>
                        <div class="td e183">
                           <div class="quote e184">A «category» represents a rigid and relationally independent
                              mixin, i.e., a dispersive universal that aggregates essential
                              properties which are common to different substance sortals. For
                              example, the category RationalEntity as a generalization of
                              Person and IntelligentAgent.
                           </div> (
                           <div class="xref e185" linkend="Guizzardi-2005"></div>, p. 319)
                        </div>
                     </div>
                     <div class="tr e186">
                        <div class="td e187">role category</div>
                        <div class="td e188" align="center">+</div>
                        <div class="td e189" align="center">-</div>
                        <div class="td e190" align="center">-</div>
                        <div class="td e191">
                           <div class="quote e192">A «role category» represents an anti-rigid and externally
                              dependent nonsortal, i.e., a dispersive universal that
                              aggregates properties which are common to different roles. In
                              includes formal roles such as whole and part, and initiator and
                              responder.
                           </div> (
                           <div class="xref e193" linkend="Guizzardi-2005"></div>, p. 320)
                           Examples include resource, asset, communicant.
                        </div>
                     </div>
                     <div class="tr e194">
                        <div class="td e195">dependent</div>
                        <div class="td e196" align="center">- (1)</div>
                        <div class="td e197" align="center">+</div>
                        <div class="td e198" align="center">+</div>
                        <div class="td e199">
                           <div class="quote e200">A &lt;dependent» universal is an intrinsic moment universal.
                              Every instance of dependent universal is existentially dependent
                              of exactly one entity. Examples include skills, thoughts,
                              beliefs, intentions, symptoms, private goals.
                           </div> (
                           <div class="xref e201" linkend="Guizzardi-2005"></div>, p. 335)
                        </div>
                     </div>
                     <div class="tr e202">
                        <div class="td e203">associative</div>
                        <div class="td e204" align="center">- (2 or more)</div>
                        <div class="td e205" align="center">+</div>
                        <div class="td e206" align="center">+</div>
                        <div class="td e207">
                           <div class="quote e208">Every instance of an &lt;&lt;associative&gt;&gt; universal is
                              existentially dependent of at least two distinct entities.
                              Associative's are the instantiation of relational properties
                              such as marriages, kisses, handshakes, commitments, and
                              purchases.
                           </div> (
                           <div class="xref e209" linkend="Guizzardi-2005"></div>, p.
                           335)
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </div><a name="AttributesandDatatypesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e210">
            <div class="title e211">Attributes and Datatypes.</div>
            <div class="para e212">[Model] attributes are used exclusively to represent simple existentially
               dependent concepts such as height, weight, color, a social security number, that can
               be mapped directly to single or multi-dimensional value spaces as represented by
               data types.
               <div class="popupBox e213">
                  <div class="popupLabel" onmouseover="$('#d1e392').show('1000');" onmouseout="$('#d1e392').hide('1000');">[ footnote ]</div>
                  <div id="d1e392" style="display: none;">
                     <div class="footnote" xml:id="Attribute-Usage">
                        <div class="para e214">It is hoped that the strict definition of what it is to be an attribute,
                           will reduce the construct variability that is often present in models where
                           attributes are used to represent both simple properties and
                           relationships.
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e215">Our treatment of datatypes doesn't vary from that found in xsd:schema and other
               languages and so is not elaborated on here. A discussion on the ontological
               foundations of data types as they relate to quality structures, and quale can be
               found in 
               <div class="xref e216" linkend="Guizzardi-2006a"></div> or the work it is based on
               
               <div class="citation e217">Gärdenfors, P. "Conceptual Spaces: the Geometry of Thought", MIT
                  Press, Cambridge, USA, 2000.
               </div>
               <div class="table e218" frame="void">
                  <div class="caption e219">
                     <div class="para e220">Data Types</div>
                  </div>
                  <div class="thead e221">
                     <div class="tr e222">
                        <div class="th e223">Datatype</div>
                        <div class="th e224">Description</div>
                     </div>
                  </div>
                  <div class="tbody e225">
                     <div class="tr e226">
                        <div class="td e227">primitive</div>
                        <div class="td e228">The value space defined by a set of built in data types. (e.g.,
                           string, float, integer, octets, boolean, data time, date,
                           time).
                        </div>
                     </div>
                     <div class="tr e229">
                        <div class="td e230">domain</div>
                        <div class="td e231">A value space based on a primitive type constrained by range /
                           length / pattern restrictions.
                        </div>
                     </div>
                     <div class="tr e232">
                        <div class="td e233">enum</div>
                        <div class="td e234">A value space based on a primitive type constrained by enumerating
                           its possible values.
                        </div>
                     </div>
                     <div class="tr e235">
                        <div class="td e236">struct</div>
                        <div class="td e237">A multidimensional value space (e.g., color as hue, saturation,
                           intensity).
                        </div>
                     </div>
                     <div class="tr e238">
                        <div class="td e239">union</div>
                        <div class="td e240">A value space formed by the union of 2 or more other data
                           types.
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </div><a name="AssociationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e241">
            <div class="title e242">Association</div>
            <div class="para e243">The representation of associations is the one part of the meta-model that deviates
               somewhat from that defined in 
               <div class="xref e244" linkend="Guizzardi-2005"></div>. Guizzardi specifies
               a number of association types, often specific to the pairs of endurant types being
               related. The position taken here is that a simpler characterization that collapses
               many of the UFO association types into the three types of identifying,
               non-identifying, and aggregation/composition (whole-part) is sufficient. Identifying
               and non-identifying relations are an important distinction made in ERD modeling,
               between those associations linking entities with a shared identity, and those that
               are not. The concepts that do not have independent existence (e.g., dependent,
               associative) must be tied through identifying relations to concepts that do, and can
               thus provide identity to them. Concepts that are independent are tied together with
               non-identifying relations.
            </div>
            <div class="para e245">A special form of non-identifying relation is the whole-part (meronymic) relation.
               Like UFO, and UML, we define the relationships of aggregation, and composition, and
               adopt UFO's semantics to clarify the ambiguous treatment of them in UML.
               <div class="popupBox e246">
                  <div class="popupLabel" onmouseover="$('#d1e446').show('1000');" onmouseout="$('#d1e446').hide('1000');">[ footnote ]</div>
                  <div id="d1e446" style="display: none;">
                     <div class="footnote" xml:id="Aggregation-Ambiguity">
                        <div class="para e247">
                           <div class="quote e248">In the pre-UML days, people were usually rather vague on what was
                              aggregation and what was association. Whether vague or not, they were
                              always inconsistent with everyone else. As a result, many modelers think
                              that aggregation is important, although for different reasons. So the
                              UML included aggregation, but with hardly any semantics. 
                           </div> (
                           <div class="xref e249" linkend="Fowler-2000"></div> , p. 85)
                        </div>
                     </div>
                  </div>
               </div>. Specifically we have adopted the following additional constraints that
               are defined in UFO.
               <div class="table e250" frame="void">
                  <div class="caption e251">
                     <div class="para e252">Whole - Part Instance Constraints</div>
                  </div>
                  <div class="thead e253">
                     <div class="tr e254">
                        <div class="th e255">Name</div>
                        <div class="th e256">Description</div>
                        <div class="th e257">Note</div>
                        <div class="th e258">Example</div>
                     </div>
                  </div>
                  <div class="tbody e259">
                     <div class="tr e260">
                        <div class="td e261">shareable</div>
                        <div class="td e262">Indicates whether an instance of a part can locally be shared by
                           more then one instance of a whole.
                        </div>
                        <div class="td e263">Shareable is represented as UML aggregation (i.e. an open diamond on
                           the whole side of the association). Non-sharable is represented as
                           UML composition (e.g., a closed diamond on the whole side of the
                           association).
                        </div>
                        <div class="td e264">The whole / part relationship between a research group and a
                           researcher is locally sharable, meaning that an instance of a
                           researcher can belong to more then one research group.
                        </div>
                     </div>
                     <div class="tr e265">
                        <div class="td e266">inseparable</div>
                        <div class="td e267">Indicates that the instance of the part is dependent on the instance
                           of a whole (i.e. if the instance of the part is removed from the
                           instance of its whole, it ceases to exist).
                        </div>
                        <div class="td e268">Represented with the UML constraint {inseparable} on the
                           association.
                        </div>
                        <div class="td e269">The relation between a human body and its brain is inseparable
                           (assuming the nonexistence of brain transplants), meaning that if a
                           brain is separated from a body, it ceases to exist.
                        </div>
                     </div>
                     <div class="tr e270">
                        <div class="td e271">essential</div>
                        <div class="td e272">Indicates that the instance of the whole is dependent on the
                           instance of the part (i.e. if the instance of the part is removed
                           form the instance of its whole, the whole ceases to exist.)
                        </div>
                        <div class="td e273">Represented with the UML constraint {essential} on the
                           association.
                        </div>
                        <div class="td e274">The relation between a human body and its brain is essential,
                           meaning that if a brain is separated from a body, the body ceases to
                           exist.
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </div><a name="GeneralizationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e275">
            <div class="title e276">Generalization</div>
            <div class="para e277">Generalization relations are supported between classes, associations, and
               attributes. Generalization between concepts that have a single principle of
               identity, the so called sortals (e.g., kind, role, dependent, associative), and
               those that do not, the so called non-sortals or mixin (e.g., category, role
               category) is treated differently. A concept with identity can only get that identity
               from a single source, and thus only single inheritance is allowed in this context.
               Multiple inheritance is supported between the non-sortals, or between the sortals
               and non-sortals. A solid generalization line (UML generalization) is used for
               generalization between sortals and sortals and between non-sortals and non-sortals.
               A dashed line (UML realization) represents the generalization relation between a
               sortal 'realization' of a non-sortal.
            </div>
            <div class="para e278">The presence of constructs such as the non-sortals, and the fact that the sortals,
               can use multiple inheritance to relate to them, supports the representation of
               multiple overlapping categorization schemes necessary to reconcile horizontal
               variability. The broad support of generalization between all model concepts (e.g.,
               attributes and associations) supports the need for vertical variability.
            </div>
         </div><a name="ExampleANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e279">
            <div class="title e280">Example</div>
            <div class="para e281">The simple model example below demonstrates some of the model constructs described
               above, and will be used as the source for describing the XML encoding options below.
               
            </div>
            <div class="figure e282" xml:id="Sample-Model">
               <div class="title e283">Sample Model</div>
               <div class="mediaobject e284">
                  <div class="imageobject e285">
                     <div class="metaBox e286"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e514').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e514" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e286'
                              </span><span class="metaAttribute">fileref='../../../vol3/graphics/Bauman01/Bauman01-002.jpg'
                              </span><span class="metaAttribute">format='jpg'
                              </span><span class="metaAttribute">width='125%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </div><a name="ConclusionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e287" xml:id="Constraint-Example">
            <div class="title e288">Conclusion</div>
            <div class="para e289">There are numerous other constraints implemented in
               UFO and its expression in UML that are not touched upon here. For example the
               pattern for explicitly dealing with &lt;&lt;role&gt;&gt; brings uniformity to the
               expression of a very common concept, that is only informally dealt with in common
               modeling languages like UML and ERD. As another example an anti-rigid type cannot
               be
               a supertype to a rigid type. These rules together create restrictions on how
               concepts can be related to each other, reducing the likelihood that skilled modelers
               will produce unsound models, and increasing the likelihood that they will use model
               constructs in similar ways (i.e. construct variability will be reduced). These
               additional constraints unfortunately do not make the creation of good models any
               less challenging intellectually, a challenge that will be brought up again later in
               the conclusion.
            </div>
         </div>
      </div><a name="DesignANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e290">
         <div class="title e291">Design</div>
         <div class="subtitle e292">XML Schema Encoding Annotations</div>
         <div class="para e293">The design phase that ends with the ability to automatically generate an XSD starts
            by
            creating a copy of some subset of the larger conceptual model. During this generation
            phase the target implementation language is selected, in this case the target language
            is a W3C XML schema. This subset copy, called a physical data model (PDM) is then
            modified in two ways. First, additional diagrams may be added to tell a story customized
            to specific perspective that a customer has over a UoD. Second, the physical model
            is
            changed. Anything can be changed including the addition or deletion of modeling
            constructs as needed. The more common changes include renaming concepts to reflect
            preferences by a customer.
            <div class="popupBox e294">
               <div class="popupLabel" onmouseover="$('#d1e527').show('1000');" onmouseout="$('#d1e527').hide('1000');">[ footnote ]</div>
               <div id="d1e527" style="display: none;">
                  <div class="footnote" xml:id="Name-Changes">
                     <div class="para e295">Name changes are typically necessary to accommodate local conventions in
                        terminology, and local syntactic naming standards. In a conceptual model names
                        are chosen for clarity, and can be long, and will not necessarily agree with
                        jargon spoken by a specific community.
                     </div>
                  </div>
               </div>
            </div>, selecting which attributes will function as keys, changing the navigability
            on associations, and the selection of specific XSD encoding options.
         </div>
         <div class="para e296">Both properties defined by UML 2.0 (e.g., association end navigability) and additional
            properties added as extensions to base UML are used. Some model properties apply
            globally to the entire model, and thus affect the entire XSD being generated (e.g.,
            the
            namespace of the XSD), others apply to the encoding of a specific modeling construct
            (e.g., class, attribute). In some cases the same property can appear both globally
            and
            locally. If so, precedence is given to the local value. Most encoding options have
            default values (e.g., [UML] attributes get encoded as xsd:element). If an encoding
            style
            is being used see 
            <div class="xref e297" linkend="Appendix-A"></div>, whole sets of encoding options plus
            built in logic that keys off of the semantic constructs in the model get enabled.
            Thus a
            default XSD can be produced with minimal effort. Yet fine grained control can also
            be
            exercised by setting individual encoding properties if desired. 
         </div>
         <div class="para e298">A complete enumeration and explanation of all of the available encoding options is
            beyond the current scope. A brief summary of the most common options is contained
            in
            
            <div class="xref e299" linkend="Appendix-A"></div>. Below, a subset of the example model introduced above
            is used to explain how one set of encoding options produces an XSD.
         </div><a name="ExampleANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e300">
            <div class="title e301">Example</div>
            <div class="figure e302">
               <div class="title e303">Physical Design</div>
               <div class="mediaobject e304">
                  <div class="imageobject e305">
                     <div class="metaBox e306"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e547').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e547" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e306'
                              </span><span class="metaAttribute">fileref='../../../vol3/graphics/Bauman01/Bauman01-003.jpg'
                              </span><span class="metaAttribute">format='jpg'
                              </span><span class="metaAttribute">width='125%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="figure e307">
               <div class="title e308">XML Sample</div>
               <div class="programlisting e309" xml:space="preserve">&lt;ComputerSystem name="Zulu"&gt;
                  &lt;CPU-Signature&gt;Intel(R)Pentium(R) M&lt;/CPU-Signature&gt;
                  &lt;Hardware&gt;
                  &lt;ComputerMaker&gt;Dell&lt;/ComputerMaker&gt;
                  &lt;SerialNum&gt;12345&lt;/SerialNum&gt;
                  &lt;/Hardware&gt;
                  &lt;/ComputerSystem&gt;
               </div>
            </div>
            <div class="figure e310">
               <div class="title e311">W3C XML Schema</div>
               <div class="programlisting e312" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
                  &lt;xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;xsd:element name="ComputerSytem" type="ComputerSystem"/&gt;
                  
                  &lt;xsd:complexType name="ComputerSystem"&gt;
                  &lt;xsd:sequence&gt;
                  &lt;xsd:group maxOccurs="unbounded" ref="CPU"/&gt;
                  &lt;xsd:element name="Hardware" type="Hardware"/&gt;
                  &lt;/xsd:sequence&gt;
                  &lt;xsd:attribute name="name" use="required" type="xsd:string"/&gt;
                  &lt;/xsd:complexType&gt;
                  
                  &lt;xsd:group name="CPU"&gt;
                  &lt;xsd:sequence&gt;
                  &lt;xsd:element name="CPUSignature" type="xsd:string"/&gt;
                  &lt;/xsd:sequence&gt;
                  &lt;/xsd:group&gt;
                  
                  &lt;xsd:complexType name="Hardware"&gt;
                  &lt;xsd:group ref="ManufacturedItem"/&gt;
                  &lt;/xsd:complexType&gt;
                  
                  &lt;xsd:group name="ManufacturedItem"&gt;
                  &lt;xsd:sequence&gt;
                  &lt;xsd:element name="ComputerMaker" type="xsd:string"/&gt;
                  &lt;xsd:element name="SerialNum" type="xsd:string"/&gt;
                  &lt;/xsd:sequence&gt;
                  &lt;/xsd:group&gt;
                  
                  &lt;xsd:complexType name="Manufacturer"&gt;
                  &lt;xsd:complexContent&gt;
                  &lt;xsd:extension base="Organization"/&gt;
                  &lt;/xsd:complexContent&gt;
                  
                  &lt;/xsd:complexType&gt;
                  &lt;xsd:complexType name="Organization"&gt;
                  &lt;xsd:sequence&gt;
                  &lt;xsd:element name="Name" type="xsd:string"/&gt;
                  &lt;xsd:element name="Size" type="organizationSizeEnum"/&gt;
                  &lt;/xsd:sequence&gt;
                  &lt;/xsd:complexType&gt;
                  
                  &lt;xsd:simpleType name="organizationSizeEnum"&gt;
                  &lt;xsd:restriction base="xsd:string"&gt;
                  &lt;xsd:enumeration value="small"/&gt;
                  &lt;xsd:enumeration value="medium"/&gt;
                  &lt;xsd:enumeration value="large"/&gt;
                  &lt;/xsd:restriction&gt;
                  &lt;/xsd:simpleType&gt;
                  &lt;/xsd:schema&gt;
                  
               </div>
            </div>
            <div class="para e313">Starting left to right; bottom to top:
               <div class="orderedlist e314">
                  <div class="listitem e315">
                     <div class="para e316">
                        <div class="emphasis e317">&lt;&lt;kind&gt;&gt; CPU</div> is created as an
                        
                        <div class="code e318">xsd:group</div>. By default an
                        <div class="code e319"> xsd:complexType</div>
                        is generated for all of the sortal types, but because an inbound
                        association has explicitly been set to encode 'asGroupRef', a group is
                        created. Encoding of classes is driven by defaults for its particular
                        type (e.g., &lt;&lt;kind&gt;&gt;, &lt;&lt;category&gt;&gt;) and /or by the schema
                        structures necessary to honor the needs of inbound relationships. This
                        means that any single class could cause the generation of
                        
                        <div class="code e320">xsd:complexType</div>, 
                        <div class="code e321">xsd:group</div> and
                        
                        <div class="code e322">xsd:attributeGroup</div> structures.
                     </div>
                     <div class="para e323">Attribute 
                        <div class="emphasis e324">signature</div> is created as an
                        
                        <div class="code e325">xsd:element</div> within the 
                        <div class="code e326">xsd:group</div>. By
                        default [UML] attributes get represented as 
                        <div class="code e327">xsd:element</div>.
                        The name created for the element is "CPUSignature" based on the default
                        setting for a global default that controls the name syntax applied to
                        the creation of XML elements. In this case because of the group
                        reference, a name is chosen that appends the class name to the attribute
                        name so as to not lose needed context when the created XML element is
                        referenced from 'ComputerSystem'.
                     </div>
                  </div>
                  <div class="listitem e328">
                     <div class="para e329">&lt;&lt;kind&gt;&gt; 
                        <div class="emphasis e330">ComputerSystem</div> is created as an
                        
                        <div class="code e331">xsd:complexType</div>, and as a global
                        
                        <div class="code e332">xsd:element</div> declaration. The UML visibility property on
                        a class controls whether a global complex type and element (visibility =
                        'public'), a global element with an anonymous complex type (visibility =
                        'protected'), or just a complex type (visibility = 'private') is
                        created.
                     </div>
                     <div class="para e333">Attribute
                        <div class="emphasis e334"> name</div> is encoded as an
                        
                        <div class="code e335">xsd:attribute</div> based on the encoding="asAttribute"
                        setting attached to it. 
                     </div>
                     <div class="para e336">An 
                        <div class="code e337">xsd:group ref=""</div> with a 
                        <div class="code e338">maxOccurs</div> set to
                        
                        <div class="code e339">unbounded</div> to the group 
                        <div class="emphasis e340">CPU</div> is
                        created based on the encoding option set for the navigable outbound
                        relation to it. 
                     </div>
                     <div class="para e341">Finally an 
                        <div class="code e342">xsd:element</div> reference is created to represent
                        the outbound relation to 
                        <div class="emphasis e343">Hardware</div>. The
                        
                        <div class="code e344">xsd:element</div> reference construct is used for two
                        reasons. Broadly, the encoding of relationships takes two forms, by
                        value, and by reference, with multiple by reference styles to choose
                        from. By reference encodings require keys (one or more attributes whose
                        values can be uniquely used to identify a single instance of the
                        targeted class) to reference the construct. Because no keys are
                        available a by value encoding is used. Because the visibility property
                        of 
                        <div class="emphasis e345">Hardware</div> is public, a 
                        <div class="code e346">xsd:element
                           ref=""
                        </div> is used.
                     </div>
                  </div>
                  <div class="listitem e347">
                     <div class="para e348">&lt;&lt;kind&gt;&gt; 
                        <div class="emphasis e349">Hardware</div> is created as a global
                        
                        <div class="code e350">xsd:complexType</div> and 
                        <div class="code e351">xsd:element</div>.
                     </div>
                     <div class="para e352">An 
                        <div class="code e353">xsd:group ref=""</div> is created to represent the
                        realization relationship to 
                        <div class="emphasis e354">ManuracturedItem</div>. An
                        
                        <div class="code e355">xsd:group</div> reference is used because the default
                        encoding for 
                        <div class="emphasis e356">ManufacturedItem</div> as a
                        &lt;&lt;category&gt;&gt; is 
                        <div class="code e357">xsd:group</div>.
                     </div>
                  </div>
                  <div class="listitem e358">
                     <div class="para e359">&lt;&lt;category&gt;&gt; 
                        <div class="emphasis e360">ManufactureredItem</div> is by
                        default encoded as an 
                        <div class="code e361">xsd:group</div>. The mixin / non-sortal
                        class types of &lt;&lt;category&gt;&gt; and &lt;&lt;role category&gt;&gt; can be
                        used to cross-categorize the sortal class types. As such its quite
                        possible that a sortal will have generalization relations (represented
                        as UML realization visually) to many of them; effectively allowing for
                        multiple inheritance. Because of this group / group referencing is used
                        by default.
                     </div>
                     <div class="para e362">Attribute 
                        <div class="emphasis e363">serialNum</div> is created as an xsd:element
                        by default. 
                     </div>
                     <div class="para e364">The outbound association 
                        <div class="emphasis e365">manufacturedBy</div> gets
                        encoded as an 
                        <div class="code e366">xsd:element</div> called Manufacturer with a
                        datatype of string and whose value represents the key of the class
                        
                        <div class="emphasis e367">Organization</div>. The key of
                        
                        <div class="emphasis e368">Organization</div> is the [UML] attribute
                        
                        <div class="emphasis e369">name</div> as indicated by the &lt;&lt;PK&gt;&gt;
                        stereotype. The reason this construct is created to represent the
                        relationship 
                        <div class="emphasis e370">manufacturedBy</div> is as follows: By a
                        settable default, associations to classes that have available keys use
                        those key(s) to implement a relationship by reference. If there is only
                        a single key, the name of the class being pointed at is used to name the
                        relationship.
                     </div>
                  </div>
                  <div class="listitem e371">
                     <div class="para e372">&lt;&lt;role&gt;&gt; 
                        <div class="emphasis e373">Manufacturer</div> is by default encoded
                        as a global 
                        <div class="code e374">xsd:complexType</div> and 
                        <div class="code e375">xsd:element</div>.
                        Because it has a generalization relation to another sortal type, and
                        there can be only once such generalization relation present per the
                        modeling language constraints, complex type extension can safely be used
                        to implement it. Because the default setting is to generate substitution
                        groups, one is created for 
                        <div class="emphasis e376">Manufacturer</div> and
                        Organization.
                     </div>
                  </div>
                  <div class="listitem e377">
                     <div class="para e378">&lt;&lt;kind&gt;&gt; 
                        <div class="emphasis e379">Organization</div> is by default encoded
                        as a global 
                        <div class="code e380">xsd:complexType</div> and
                        
                        <div class="code e381">xsd:element</div>.
                     </div>
                     <div class="para e382">Attribute 
                        <div class="emphasis e383">name</div> is by default encoded as an
                        
                        <div class="code e384">xsd:element</div>.
                     </div>
                  </div>
               </div>
            </div>
         </div><a name="ConclusionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e385">
            <div class="title e386">Conclusion</div>
            <div class="para e387">By no means does the set of encoding options available exercise every last corner
               of the W3C XML schema specification, but they do allow, especially when used in
               combination, for a surprising variability in encoding choices. New options are added
               as they are needed, and thus far, elegant solutions to generate a given encoding
               choice have always been possible without requiring that the models be changed in any
               way other than with the addition of new encoding annotations. In essence the
               implementation level decisions are effectively segregated and do not perturb the
               semantic representation.
            </div>
         </div>
      </div><a name="SoftwareANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e388">
         <div class="title e389">Software</div>
         <div class="para e390">The creation and maintenance of multiple layers of models and the subsequent
            generation of XSDs would not be feasible without the correct tooling. The modeling
            tool
            we use is Sybase Power Designer; a market leading tool in traditional [relational]
            data
            modeling. It was selected for a variety of reasons, not the least of which is its
            extensive ability to be customized, and ability to generate / merge / compare / track
            the relations between multiple models. It has been customized to support and enforce
            the
            rules of the conceptual modeling language outlined above. This has involved extending
            the meta-model that underlies Power Designer with additional [extended] properties,
            modifying the forms displayed under certain menus, and writing additional trigger
            code
            to enforce the rules of the conceptual modeling language (e.g., 
            <div class="xref e391" linkend="Constraint-Example"></div>). The code that create the XSD has been implemented
            outside of Power Designer to avoid coupling it to a particular vendor's product.
         </div>
         <div class="para e392">The architecture for this XSD complier, called unimaginatively
            
            <div class="emphasis e393">Model2XSD</div> is shown below 
            <div class="xref e394" linkend="XML2XSD"></div>. A
            relatively simple routine written inside Power Designer in visual basic script
            serializes the model as XML based on a custom designed markup language.
            <div class="popupBox e395">
               <div class="popupLabel" onmouseover="$('#d1e764').show('1000');" onmouseout="$('#d1e764').hide('1000');">[ footnote ]</div>
               <div id="d1e764" style="display: none;">
                  <div class="footnote" xml:id="XMI">
                     <div class="para e396">The XML Metamodel Interchange (XMI) format was briefly considered as a choice
                        for the serialization of the model. It does in fact have all of the needed
                        information. It was not chosen because its structure, optimized to exchange
                        [complete] models between modeling tools, is not ideal for creating clean XSLT
                        code for transformation into an XSD. In addition, the benefits of using a
                        standard tool-neutral serialization of a UML model are partially obviated by the
                        inconsistent and limited implementation of the standard in some modeling tools.
                        That said, the use of XMI is something that will be considered the future. An
                        appropriate XSLT 2.0 function library could be used to hide the complexities of
                        the XMI format.
                     </div>
                  </div>
               </div>
            </div> An XSLT 2.0 pipeline is then called to compile the XML into an XSD. The XSLT
            program consists of several processing stages and supporting libraries of functions
            and
            configuration files. The 
            <div class="emphasis e397">Model2XSD-Preprocessor</div> is used to add
            additional constructs to the serialized model file if needed based on selected encoding
            options. The 
            <div class="emphasis e398">Model2XSD-Processor</div> creates the XSD. Finally the
            
            <div class="emphasis e399">Model2XSD-Postprocessor</div>, optionally, does certain XSD clean-up
            activities that can simplify the resultant schema.
            <div class="popupBox e400">
               <div class="popupLabel" onmouseover="$('#d1e778').show('1000');" onmouseout="$('#d1e778').hide('1000');">[ footnote ]</div>
               <div id="d1e778" style="display: none;">
                  <div class="footnote" xml:id="XSD-Cleanup">
                     <div class="para e401">An example of such clean-up is the removal of any
                        <div class="code e402"> xsd:group</div> or
                        
                        <div class="code e403">xsd:attributeGroup</div> structures that are only referenced once, by
                        collapsing them within their referent.
                     </div>
                  </div>
               </div>
            </div> All of these pieces of code are backed up by two function libraries,
            
            <div class="code e404">Model-Utility</div> primarily contains functions that navigate the physical
            model as represented in XML (e.g., getting a concept's supertype, all its subtypes,
            etc.). This library does not contain any functions specific to the generation of an
            XSD
            and thus could be reused in other generation tasks.
            <div class="code e405">Model2XSD-Utility</div>"
            contains functions specific to the generation of XSD files.
         </div>
         <div class="figure e406" xml:id="XML2XSD">
            <div class="title e407">Model2XSD Process Flow</div>
            <div class="mediaobject e408">
               <div class="imageobject e409">
                  <div class="metaBox e410"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e799').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e799" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e410'
                           </span><span class="metaAttribute">fileref='../../../vol3/graphics/Bauman01/Bauman01-004.jpg'
                           </span><span class="metaAttribute">format='jpg'
                           </span><span class="metaAttribute">width='100%'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
         </div>
      </div><a name="FurtherWorkANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e411">
         <div class="title e412">Further Work</div>
         <div class="para e413">Our application of the techniques outlined above is in its infancy. As we continue
            to
            gain experience, refinements in both the conceptual modeling language, the encoding
            rules for XSD, and the software support for all of the above are inevitable. It is
            possible that we will see the benefit of adopting more of the UFO, or possibly less.
            As
            we develop more XSDs we will undoubtedly have requirements for incrementally adding
            to
            our tool box of encoding annotations. It is a testament to the strength of the
            conceptual modeling language that thus far we have been able to algorithmically generate
            any necessary encoding we need. 
         </div>
         <div class="para e414">In roughly priority order these are the current areas of interest we are
            pursuing:
         </div>
         <div class="itemizedlist e415">
            <div class="listitem e416">
               <div class="para e417">The processes and tooling needed to support the maintenance, change
                  management, and synchronization between a set of related models (conceptual,
                  physical,) and schemata (XSD) that are expected to evolve on independent time
                  lines, with differing constraints (e.g., the physical models and resultant XSD
                  files will be subject to pressures to maintain backwards and/or forward
                  compatibility for some period of time) and likely to be changed by independent
                  groups.
               </div>
            </div>
            <div class="listitem e418">
               <div class="para e419">Work on how the physical data models are visually represented. As these models
                  are based on the conceptual model, but lead to an XSD, a tension naturally
                  arises as to how they should be visualized. Should the visualization reflect its
                  semantic roots in the CM, or the structure of the resultant XSD? And how do all
                  of the XSD specific encoding directives get represented visually? Currently many
                  are not, which makes it needlessly difficult to make the leap from model to XSD.
                  Our hope is that we can keep the physical data model visualization more closely
                  aligned with its conceptual roots, and through graphical overlays show the XSD
                  encoding annotations, but this remains to be seen.
               </div>
            </div>
            <div class="listitem e420">
               <div class="para e421">Create code that automatically adds documentation into the generated XSDs that
                  reflect semantic distinctions present in the conceptual model that are
                  intentionally excluded from the resultant XSD. This occurs, for example, when an
                  XSD is generated that has collapsed what are multiple subclasses in the CM into
                  a superclass. All of the attributes and relations present in the sub-classes
                  become optional in the super. It's not that there is a fundamental change in the
                  conceptualization of the domain when this is done, it's much more likely that
                  the enforcement of a set of constraints is being moved from the schema to
                  software. It should be possible to generate additional documentation and embed
                  it into the XSD to make note of these relevant rules.
               </div>
            </div>
            <div class="listitem e422">
               <div class="para e423">Prototype the software needed to generate other implementations (e.g., DDL,
                  OWL).
               </div>
            </div>
            <div class="listitem e424">
               <div class="para e425">Explore whether, when different physical designs all originating from
                  overlapping parts of the same conceptual model are created, it is possible to at
                  least partially automatically create the needed XSLT code that would be required
                  to translate between them.
               </div>
            </div>
         </div>
      </div><a name="ConclusionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e426">
         <div class="title e427">Conclusion</div>
         <div class="para e428">The adoption of a multi-layered model development process consisting of one (or a
            small number of) conceptual models as the basis for potentially many physical
            implementation models; the selection / customization of the UFO visually represented
            as
            UML class diagrams, as a conceptual modeling language; the design of rules for compiling
            these models into an XSD; and the implementation of all of the above using Sybase
            Power
            Designer and XSLT is all still relatively new. We have only recently started exercising
            this methodology fully to deliver products (XSDs) to internal customers. We are still
            learning, and further customizing our techniques and their implementation in software.
            So far our experience with using these techniques is anecdotal. It is both sobering
            and
            promising...
         </div><a name="ChallengesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e429">
            <div class="title e430">Challenges</div>
            <div class="para e431">
               <div class="quote e432">... the short story is that good design involves hard thinking. And that
                  means it’s just hard
               </div> 
               <div class="xref e433" linkend="Sperberg-McQueen-2008"></div>. Although the quantification of what is
               
               <div class="quote e434">good design</div>, is an interesting challenge in and of itself, it is
               indeed very hard, both to do, and often to justify taking the time to do. On the one
               hand the conceptual modeling language outlined above, with its more restrictive
               rules can aid a good modeler in coming up with better, more sound models. The whole
               methodology with its emphasis on semantics can lead to higher quality XSDs, at least
               in the sense that they are semantically well grounded. But the bar for creating good
               models is still high if not higher. To create a truly good design all the way from
               creating a conceptual model to creating a good physical design takes quite a rare
               skill set. 
               <div class="quote e435">Design activities require distinct skills - and arguably certain
                  personal characteristics.
               </div> (
               <div class="xref e436" linkend="Simsion-2007"></div>, p. 8)
               Detailed knowledge of the domain being modeled, detailed knowledge about how best
               to
               conceptualize a domain, in particular knowing what level of abstraction to use, and
               recognizing how to separate out, and deal with some of the orthogonal concerns that
               creep in
               <div class="popupBox e437">
                  <div class="popupLabel" onmouseover="$('#d1e845').show('1000');" onmouseout="$('#d1e845').hide('1000');">[ footnote ]</div>
                  <div id="d1e845" style="display: none;">
                     <div class="footnote" xml:id="Orthogonal">
                        <div class="para e438">Its quite challenging to keep straight all of the orthogonal concerns,
                           some subset of which much all come together in the final physical design,
                           but which should be thought about and modeled separately at the conceptual
                           level. For example, for any given information structure in a PDM, the
                           following different concerns might need to be addressed in addition to the
                           real-world object that the information structure is describing. How is
                           temporal change of that object's properties handled; how is the provenance
                           of the information (e.g., origin, trustworthiness) recorded; how is system
                           related metadata (e.g., who created it, when it will be deleted, access
                           control, versioning) represented, etc.
                        </div>
                     </div>
                  </div>
               </div>, how to effectively represent and communicate that conceptualization in
               a modeling language, and how best to represent it in a chosen technology are all
               needed. Of course these skills can be split across several individuals, but that
               splitting leads to its own challenges. Finding, or training people to do this work
               well is difficult 
               <div class="quote e439">Data modeling is notoriously difficult to learn and
                  teach.
               </div> (
               <div class="xref e440" linkend="Simsion-2007"></div> , p.8)
            </div>
            <div class="para e441">And then there is the problem of finding the time to do this work. It is hoped
               that the techniques outlined above, specifically meeting requirements 
               <div class="xref e442" linkend="Req-Communication"></div> and 
               <div class="xref e443" linkend="Req-Design"></div> will lead to
               greater reuse possibilities, and thus allow for the quick repackaging of already
               done hard work. None the less, creating high quality, semantically well-founded
               designs takes time, and time is a precious resource in many projects, whose use must
               be justified.
            </div>
            <div class="para e444">Any group of systems that are information focused, and need to share that
               information either through exchange or a shared data store, get coupled to the
               information designs that underpin them. If these systems need to have a deep
               understanding of the semantics behind the information (i.e., software is directly
               creating, modifying, taking action on what the information means vs. just storing
               /
               presenting it and leaving the heavy semantic lifting to people), the coupling is
               tight, and changing the information design very expensive. So too is creating a deep
               semantic mapping between different, typically underspecified designs, or conversely
               recognizing that they can't be mapped. This expense leads to the conclusion that in
               many cases the up-front investment in good design is well worth it.
            </div>
            <div class="para e445">Finally there is the lack of adequate tool support. We have taken an industry
               leading data modeling tool and augmented it to support ontology development leading
               to an XML schema. It has required a reasonable amount of customization. Even with
               these customizations there are many things that we would like the tool to do that
               it
               can't. Nor are we aware of any tool that has the full feature set we need to truly
               create and maintain requirements models mapped to implementation neutral conceptual
               models coupled with implementation specific design models from which XSD, DDL, and
               OWL can be generated, and to do so on a large enterprise wide scale.
            </div>
         </div><a name="AccomplishmentsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e446">
            <div class="title e447">Accomplishments</div>
            <div class="para e448"> Looking back at the requirements we set out for ourselves 
               <div class="xref e449" linkend="Requirements"></div>:
               <div class="itemizedlist e450">
                  <div class="listitem e451">
                     <div class="para e452">The selected modeling language is helping our internal team
                        communicate and reach agreement on conceptualisations of the UoD(
                        <div class="xref e453" linkend="Req-Communication"></div>. It is also helping us to clarify our
                        prose descriptions of a UoD. Unlink ERD and UML in practice, where the
                        visualization reflects the implementation, conceptual models based on
                        UFO reflect the semantics, and these semantics should be mirrored in the
                        prose.
                        <div class="popupBox e454">
                           <div class="popupLabel" onmouseover="$('#d1e878').show('1000');" onmouseout="$('#d1e878').hide('1000');">[ footnote ]</div>
                           <div id="d1e878" style="display: none;">
                              <div class="footnote" xml:id="Saying-it-twice">
                                 <div class="para e455">Sperberg-McQueen touches on the desirability of 
                                    <div class="quote e456">You
                                       have to say everything twice
                                    </div> in 
                                    <div class="xref e457" linkend="Sperberg-McQueen-2008"></div>. The longer term goal of
                                    this work is to say things many times, in prose, in the
                                    conceptual modeling language, and in designs for XSD, DDL, and
                                    OWL.
                                 </div>
                              </div>
                           </div>
                        </div> On many occasions we have created model concepts, then
                        written their prose definitions and found that the model and the prose
                        contradict each other. When this happens this points to a fundamental
                        problem and either the prose or the model has to be changed.
                     </div>
                  </div>
                  <div class="listitem e458">
                     <div class="para e459"> The semantic richness, precision, and design neutrality of the
                        conceptual modeling language, coupled with the flexibility of the XSD
                        encoding rules, and the fact that implementation models are kept
                        distinct from, but tied to, the conceptual model grant great flexibility
                        in creating XSDs well tailored to a customers need 
                        <div class="xref e460" linkend="Req-Design"></div>. This flexibility has been exercised twice,
                        when our team was tasked with creating a conceptual model reverse
                        engineered
                        <div class="popupBox e461">
                           <div class="popupLabel" onmouseover="$('#d1e892').show('1000');" onmouseout="$('#d1e892').hide('1000');">[ footnote ]</div>
                           <div id="d1e892" style="display: none;">
                              <div class="footnote" xml:id="Reverse-Engineering">
                                 <div class="para e462">This reverse engineering is necessarily manual. The mapping
                                    between a given implementation back up to a conceptual model is
                                    many to one. This is unlike a mapping between a schema language
                                    and a simple visualization of it, as is typically implemented in
                                    tools today.
                                 </div>
                              </div>
                           </div>
                        </div> from existing format specifications and then
                        forward-engineer back to a new XSD with very specific encoding
                        constraints.
                     </div>
                  </div>
                  <div class="listitem e463">
                     <div class="para e464">Support of using the same conceptual models to support designs in
                        other implementation languages 
                        <div class="xref e465" linkend="Req-DDL"></div>, 
                        <div class="xref e466" linkend="Req-OWL"></div>, is promising, but unproven at this point. If it
                        were proven it would both re-enforce that the conceptual modeling
                        language is indeed largely independent of implementation design biases,
                        and add to the business case of investing in the development of models
                        that could be more widely reused.
                     </div>
                  </div>
                  <div class="listitem e467">
                     <div class="para e468">Early evidence does support the claim that construct variability 
                        <div class="xref e469" linkend="Req-Construct"></div> is reduced, primarily in the use of
                        attributes, and for representing roles.
                     </div>
                  </div>
                  <div class="listitem e470">
                     <div class="para e471">Likewise, early experience is that the conceptual modeling language is
                        better at documenting horizontal and vertical variability 
                        <div class="xref e472" linkend="Req-Horizontal-Vertical"></div> and representing how different
                        choices relate to one another. Representing this variability in the same
                        conceptual model, however does complicate the resulting models and their
                        presentation visually.
                     </div>
                  </div>
                  <div class="listitem e473">
                     <div class="para e474">An additional benefit that was not directly sought is that the code
                        that generates the XSD files partially mitigates the need for the
                        modelers using it to fully grasp all of syntactic and grammatical
                        nuances of the XSD language.
                     </div>
                  </div>
               </div>
            </div>
         </div>
      </div><a name="PhysicalEncodingOptionsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="appendix e475" xml:id="Appendix-A">
         <div class="title e476">Physical Encoding Options</div>
         <div class="para e477">This section describes some of the more commonly used encoding options available to
            map from a XSD PDM to an actual XSD. It is by no means a complete accounting of the
            many
            encoding options available, nor how they can be used together to create a large variety
            of different schema structures.
         </div>
         <div class="para e478">The information in this section is largely presented as a series of tables. Two basic
            table structures exist, the first describes model properties present in the model
            that
            affect the XSD. The origin field in this table contains two values, "Build In" or
            "Extended" that reflect whether the property is part of UML and thus is built in to
            a
            UML tool, or whether it is an extended property that we have added. The second table
            type focuses in particular on an extended property called 'encoding' that drives much
            how the schema will look. Included in this table are example XSD fragments and XML
            fragments that reflect the behaviour of the various encoding options.
         </div><a name="GeneralEncodingRulesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e479">
            <div class="title e480">General Encoding Rules</div>
            <div class="para e481">This section describes some of the model properties and encoding options available
               that affect the entire schema or are common across many model concepts.
            </div><a name="ModelLevelPropertiesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e482">
               <div class="title e483">Model Level Properties</div>
               <div class="para e484">Model level properties are set once per model (and thus XSD file) and have
                  global effects. They are as follows:
                  <div class="table e485" frame="void">
                     <div class="caption e486">
                        <div class="para e487">Model Level Encoding</div>
                     </div>
                     <div class="thead e488">
                        <div class="tr e489">
                           <div class="th e490">Property</div>
                           <div class="th e491">Origin</div>
                           <div class="th e492">Description</div>
                           <div class="th e493">Use</div>
                           <div class="th e494">Note</div>
                        </div>
                     </div>
                     <div class="tbody e495">
                        <div class="tr e496">
                           <div class="td e497">Target Namespace and Namespace Prefix</div>
                           <div class="td e498">Extended</div>
                           <div class="td e499">The target namespace and namespace prefix of the generated
                              XSD.
                           </div>
                           <div class="td e500">Used to set the targetNamespace information of the XSD.</div>
                           <div class="td e501">When one physical model references a concept in another, needed
                              namespace declarations, namespace prefixing and
                              
                              <div class="code e502">xsd:import</div> statements are generated
                              automatically if the concept is in another namespace. Otherwise,
                              needed 
                              <div class="code e503">xsd:include</div> statements are generated.
                           </div>
                        </div>
                        <div class="tr e504">
                           <div class="td e505">Prune Group</div>
                           <div class="td e506">Extended</div>
                           <div class="td e507">A boolean controlling whether 
                              <div class="code e508">xsd:group</div> and
                              
                              <div class="code e509">xsd:attributeGroup</div> structures referenced only
                              once will be eliminated from the XSD with their elements /
                              attributes collapsed into the referencing concept.
                           </div>
                           <div class="td e510">Used to create schema's that have the minimal number of group /
                              attribute groups defined.
                           </div>
                           <div class="td e511">Default is true.</div>
                        </div>
                        <div class="tr e512">
                           <div class="td e513">Encoding Style</div>
                           <div class="td e514">Extended</div>
                           <div class="td e515">Selects which encoding style to use. An encoding style effects a
                              whole set of different encoding options to produce schema's of a
                              particular style.
                           </div>
                           <div class="td e516">An encoding style, is analogous to the scene modes on digital
                              cameras. It allows one to select a whole set of other encoding
                              options that together with some additional programming logic
                              that wraps them, create schemata in a particular style.
                           </div>
                           <div class="td e517">Default is the internal style used on our team.</div>
                        </div>
                        <div class="tr e518">
                           <div class="td e519">[Default] Association Encoding</div>
                           <div class="td e520">Extended</div>
                           <div class="td e521">Selects which association end encoding to use by default.</div>
                           <div class="td e522">Controls the default association end encoding that will
                              occur. 
                              <div class="xref e523" linkend="Association-End-Encoding"></div>
                           </div>
                           <div class="td e524">Default is 'asElement'.</div>
                        </div>
                        <div class="tr e525">
                           <div class="td e526">[Default] Name Encodings (e.g., for XSD attributes, elements,
                              types and groups.
                           </div>
                           <div class="td e527">Extended</div>
                           <div class="td e528">Selects the default name encoding for all schema
                              constructs.
                           </div>
                           <div class="td e529">See 
                              <div class="xref e530" linkend="Name-Encoding"></div>
                           </div>
                           <div class="td e531">Default is 'leadingUpperCase' for XML elements, 'leading
                              Lowercase' for XML attributes and 'preserve' for XSD
                              simpletypes, complex types and groups.
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
            </div><a name="NameEncodingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e532">
               <div class="title e533">Name Encoding</div>
               <div class="para e534">The generated names of XSD declarations are controlled by many settings.
                  Defaults at the model level can be set, and overridden as needed on an
                  individual concept. Any given name consists of two parts, a prefix and a root.
                  The root is always the name of the concept. The prefix depends on what type of
                  concept it is, as described below. Many more styles are available then described
                  here. In addition, more complex naming rules are applied in certain association
                  encoding situations where foreign keys are being generated, and/or where a group
                  reference is effectively merging two concepts together. These rules
                  automatically start adding additional context to the generated names so that for
                  example, a primary key called 'identifier' in the target class of an
                  association, doesn't simply remain 'identifier' when it becomes a foreign key in
                  the source class, where it could potentially clash with an existing 'identifier'
                  attribute.
               </div>
               <div class="para e535">
                  
                  <div class="table e536" frame="void" xml:id="Prefix-Root">
                     <div class="caption e537">
                        <div class="para e538">Prefix and Root Sources</div>
                     </div>
                     <div class="thead e539">
                        <div class="tr e540">
                           <div class="th e541">Concept</div>
                           <div class="th e542">Prefix</div>
                        </div>
                     </div>
                     <div class="tbody e543">
                        <div class="tr e544">
                           <div class="td e545">Class, Domain, Enumeration, Structure, Union </div>
                           <div class="td e546">Model Code</div>
                        </div>
                        <div class="tr e547">
                           <div class="td e548">Attribute</div>
                           <div class="td e549">Class Code</div>
                        </div>
                        <div class="tr e550">
                           <div class="td e551">Association</div>
                           <div class="td e552">Association End Class Codes</div>
                        </div>
                     </div>
                  </div>
                  
                  <div class="table e553" frame="void" xml:id="Name-Encoding">
                     <div class="caption e554">
                        <div class="para e555">Name Encoding Options
                           <div class="inlinemediaobject e556">
                              <div class="imageobject e557">
                                 <div class="metaBox e558"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1059').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1059" class="metaSource" style="display:none;">                
                                       &lt;imagedata<span class="metaAttribute">class='e558'
                                          </span><span class="metaAttribute">fileref='../../../vol3/graphics/Bauman01/Bauman01-005.jpg'
                                          </span><span class="metaAttribute">format='jpg'
                                          </span><span class="metaAttribute">width='50%'
                                          </span>
                                       &gt;
                                       
                                    </div>
                                 </div>
                              </div>
                           </div>
                        </div>
                     </div>
                     <div class="thead e559">
                        <div class="tr e560">
                           <div class="th e561">Name Encoding</div>
                           <div class="th e562">Concept</div>
                           <div class="th e563">Prefix</div>
                           <div class="th e564">Root</div>
                           <div class="th e565">Final XSD Name</div>
                        </div>
                     </div>
                     <div class="tbody e566">
                        <div class="tr e567">
                           <div class="td e568" rowspan="3">leadingUpperCase</div>
                           <div class="td e569">Class</div>
                           <div class="td e570">N/A</div>
                           <div class="td e571">ComputerSystem</div>
                           <div class="td e572">ComputerSystem</div>
                        </div>
                        <div class="tr e573">
                           <div class="td e574">Attribute</div>
                           <div class="td e575">N/A</div>
                           <div class="td e576">name</div>
                           <div class="td e577">Name</div>
                        </div>
                        <div class="tr e578">
                           <div class="td e579">Association</div>
                           <div class="td e580">N/A</div>
                           <div class="td e581">has</div>
                           <div class="td e582">Has</div>
                        </div>
                        <div class="tr e583">
                           <div class="td e584" rowspan="3">lowerCamelCase</div>
                           <div class="td e585">Class</div>
                           <div class="td e586">Computer</div>
                           <div class="td e587">ComputerSystem</div>
                           <div class="td e588">computerComputerSystem</div>
                        </div>
                        <div class="tr e589">
                           <div class="td e590">Attribute</div>
                           <div class="td e591">ComputerSystem</div>
                           <div class="td e592">name</div>
                           <div class="td e593">computerSystemName</div>
                        </div>
                        <div class="tr e594">
                           <div class="td e595">Association</div>
                           <div class="td e596">ComputerSystem CPU</div>
                           <div class="td e597">has</div>
                           <div class="td e598">computerSystemHasCPU</div>
                        </div>
                        <div class="tr e599">
                           <div class="td e600" rowspan="3">lowerCaseConcatenate</div>
                           <div class="td e601">Class</div>
                           <div class="td e602">Computer</div>
                           <div class="td e603">ComputerSystem</div>
                           <div class="td e604">computer-computerSystem</div>
                        </div>
                        <div class="tr e605">
                           <div class="td e606">Attribute</div>
                           <div class="td e607">ComputerSystem</div>
                           <div class="td e608">name</div>
                           <div class="td e609">computerSystem-name</div>
                        </div>
                        <div class="tr e610">
                           <div class="td e611">Association</div>
                           <div class="td e612">ComputerSystem CPU</div>
                           <div class="td e613">has</div>
                           <div class="td e614">comuterSystem-has-CPU</div>
                        </div>
                        <div class="tr e615">
                           <div class="td e616" rowspan="3">Preserve</div>
                           <div class="td e617">Class</div>
                           <div class="td e618">N/A</div>
                           <div class="td e619">ComputerSystem</div>
                           <div class="td e620">ComputerSystem</div>
                        </div>
                        <div class="tr e621">
                           <div class="td e622">Attribute</div>
                           <div class="td e623">N/A</div>
                           <div class="td e624">name</div>
                           <div class="td e625">name</div>
                        </div>
                        <div class="tr e626">
                           <div class="td e627">Association</div>
                           <div class="td e628">N/A</div>
                           <div class="td e629">has</div>
                           <div class="td e630">has</div>
                        </div>
                     </div>
                  </div>
                  
               </div>
            </div><a name="MultiplicityEncodingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e631">
               <div class="title e632">Multiplicity Encoding</div>
               <div class="para e633">Both [model] attributes and associations have multiplicity encoding
                  parameters. They get mapped to minOccurs and maxOccurs in an XSD in the obvious
                  way. When a multiplicity greater then one is combined with an encoding that will
                  result in an [XML] attribute, a list structure is automatically created for that
                  attribute. If the creation of list content for an element is required, instead
                  of the default behaviour to simply allow the element to repeat, an extended
                  property called multiplicityEncoding can be explicitly set to the value
                  'asList'.
               </div>
            </div><a name="DocumentationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e634">
               <div class="title e635">Documentation</div>
               <div class="para e636">XSD's produced can optionally included embedded annotations. These annotations
                  are extensive, taking advantage of the definitions embedded in every concept in
                  the model, as well as automatically generated boiler plate definitions created
                  when new XSD constructs are generated (e.g., the creation of foreign key
                  structures representing associations, See 
                  <div class="xref e637" linkend="Association-End-Encoding"></div>). Additional code is available to take
                  definitions and represent them in a tab delimited form for a tabular
                  presentation as well as conversion to an alternative XML representation used to
                  load a searchable web based data element dictionary tool.
               </div>
            </div>
         </div><a name="ClassEncodingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e638">
            <div class="title e639">Class Encoding</div>
            <div class="para e640">This section describes the common properties and encoding options used to
               represent classes (e.g., kind, role, category) in a schema.
            </div>
            <div class="para e641">
               
               <div class="table e642" frame="void">
                  <div class="caption e643">
                     <div class="para e644">Relevant Properties</div>
                  </div>
                  <div class="thead e645">
                     <div class="tr e646">
                        <div class="th e647">Property</div>
                        <div class="th e648">Origin</div>
                        <div class="th e649">Description</div>
                        <div class="th e650">Use</div>
                        <div class="th e651">Note</div>
                     </div>
                  </div>
                  <div class="tbody e652">
                     <div class="tr e653">
                        <div class="td e654">code</div>
                        <div class="td e655">Built In</div>
                        <div class="td e656">The implementation name of the class.</div>
                        <div class="td e657">Used as the name for the generated schema construct subject to any
                           name encoding rules in effect.
                        </div>
                        <div class="td e658"></div>
                     </div>
                     <div class="tr e659">
                        <div class="td e660" rowspan="4">visibility</div>
                        <div class="td e661" rowspan="4">Built In</div>
                        <div class="td e662" rowspan="4">The visibility of the class.</div>
                        <div class="td e663">When a global xsd:complexType will be generated the visibility
                           property will have the following effect.
                        </div>
                        <div class="td e664"></div>
                     </div>
                     <div class="tr e665">
                        <div class="td e666">public - a global element and a global xsd:complexType are
                           generated.
                        </div>
                     </div>
                     <div class="tr e667">
                        <div class="td e668">protected - a global element containing an anonymous xsd:complexType
                           is created.
                        </div>
                        <div class="td e669"></div>
                     </div>
                     <div class="tr e670">
                        <div class="td e671">private - only a global xsd:complexType is created.</div>
                        <div class="td e672"></div>
                     </div>
                     <div class="tr e673">
                        <div class="td e674">skip</div>
                        <div class="td e675">Extended</div>
                        <div class="td e676">Directs a class to not be encoded. All of its properties will be
                           merged with its subtype if it exists or its supertype it the
                           generalization relation is set to be navigable in that direction.
                           See 
                           <div class="xref e677" linkend="Generalization-Encoding"></div>
                        </div>
                        <div class="td e678">This is very useful if a relationship needs to be encoded, but its
                           target class does not need to, or if one wants to collapse
                           generalization hierarchies.
                        </div>
                        <div class="td e679">In initial prototyping efforts, the encoding option to not encode is
                           used quite widely.
                        </div>
                     </div>
                  </div>
               </div>
               
               <div class="table e680" frame="void">
                  <div class="caption e681">
                     <div class="para e682">Class Encodings</div>
                  </div>
                  <div class="thead e683">
                     <div class="tr e684">
                        <div class="th e685">Default Encoding for Class type</div>
                        <div class="th e686">Example</div>
                        <div class="th e687">Description</div>
                        <div class="th e688">XSD Fragment</div>
                        <div class="th e689">XML</div>
                     </div>
                  </div>
                  <div class="tbody e690">
                     <div class="tr e691">
                        <div class="td e692">
                           
                           <div class="itemizedlist e693">
                              <div class="listitem e694">
                                 <div class="para e695">&lt;&lt;kind&gt;&gt;</div>
                              </div>
                              <div class="listitem e696">
                                 <div class="para e697">&lt;&lt;event&gt;&gt;</div>
                              </div>
                              <div class="listitem e698">
                                 <div class="para e699">&lt;&lt;role&gt;&gt;</div>
                              </div>
                              <div class="listitem e700">
                                 <div class="para e701">&lt;&lt;dependent&gt;&gt;</div>
                              </div>
                              <div class="listitem e702">
                                 <div class="para e703">&lt;&lt;associative&gt;&gt;</div>
                              </div>
                           </div>
                           
                        </div>
                        <div class="td e704" align="center" valign="middle">
                           
                           <div class="inlinemediaobject e705">
                              <div class="imageobject e706">
                                 <div class="metaBox e707"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1312').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1312" class="metaSource" style="display:none;">                
                                       &lt;imagedata<span class="metaAttribute">class='e707'
                                          </span><span class="metaAttribute">fileref='../../../vol3/graphics/Bauman01/Bauman01-006.jpg'
                                          </span><span class="metaAttribute">format='jpg'
                                          </span><span class="metaAttribute">width='150%'
                                          </span>
                                       &gt;
                                       
                                    </div>
                                 </div>
                              </div>
                           </div>
                           
                        </div>
                        <div class="td e708">
                           
                           <div class="para e709">By default, a complex type is generated. A group can also be
                              generated if required by an inbound relationship. 
                           </div>
                           
                        </div>
                        <div class="td e710" align="center">
                           
                           <div class="programlisting e711" xml:space="preserve">&lt;xsd:complexType name="Manufacturer"&gt; ...</div>
                           
                        </div>
                        <div class="td e712">
                           
                           <div class="programlisting e713" xml:space="preserve">&lt;Manufacturer/&gt;</div>
                           
                        </div>
                     </div>
                     <div class="tr e714">
                        <div class="td e715">
                           
                           <div class="itemizedlist e716">
                              <div class="listitem e717">
                                 <div class="para e718">&lt;&lt;category&gt;&gt;</div>
                              </div>
                              <div class="listitem e719">
                                 <div class="para e720">&lt;&lt;role category&gt;&gt;</div>
                              </div>
                           </div>
                           
                        </div>
                        <div class="td e721" align="center" valign="middle">
                           
                           <div class="inlinemediaobject e722">
                              <div class="imageobject e723">
                                 <div class="metaBox e724"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1344').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1344" class="metaSource" style="display:none;">                
                                       &lt;imagedata<span class="metaAttribute">class='e724'
                                          </span><span class="metaAttribute">fileref='../../../vol3/graphics/Bauman01/Bauman01-007.jpg'
                                          </span><span class="metaAttribute">format='jpg'
                                          </span><span class="metaAttribute">width='150%'
                                          </span>
                                       &gt;
                                       
                                    </div>
                                 </div>
                              </div>
                           </div>
                           
                        </div>
                        <div class="td e725">
                           
                           <div class="para e726">By default, a group is generated. A complex type can also be
                              generated if required by an inbound relationship.
                           </div>
                           
                        </div>
                        <div class="td e727" align="center">
                           
                           <div class="programlisting e728" xml:space="preserve">&lt;xsd:group name="ManufactureredItem&gt; ...
                              and / or
                              &lt;xsd:attributeGroup name="ManufacturedItem"&gt; ...
                           </div>
                           
                        </div>
                        <div class="td e729">
                           
                           <div class="programlisting e730" xml:space="preserve">N/A</div>
                           
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
         </div><a name="DatatypeEncodingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e731">
            <div class="title e732">Datatype Encoding</div>
            <div class="para e733">This section describes the common properties and encoding options used to
               represent datatypes (e.g., primitive, domain, enum) in a schema.
            </div>
            <div class="para e734">
               
               <div class="table e735" frame="void">
                  <div class="caption e736">
                     <div class="para e737">Relevant Properties</div>
                  </div>
                  <div class="thead e738">
                     <div class="tr e739">
                        <div class="th e740">Property</div>
                        <div class="th e741">Origin</div>
                        <div class="th e742">Description</div>
                        <div class="th e743">Use</div>
                        <div class="th e744">Note</div>
                     </div>
                  </div>
                  <div class="tbody e745">
                     <div class="tr e746">
                        <div class="td e747">code</div>
                        <div class="td e748">Built In</div>
                        <div class="td e749">The implementation name of the class.</div>
                        <div class="td e750">Used as the name for the generated schema construct subject to any
                           name encoding rules in effect.
                        </div>
                        <div class="td e751"></div>
                     </div>
                  </div>
               </div>
               
               <div class="table e752" frame="void">
                  <div class="caption e753">
                     <div class="para e754">Datatype Encodings</div>
                  </div>
                  <div class="thead e755">
                     <div class="tr e756">
                        <div class="th e757">Datatype Type</div>
                        <div class="th e758">Example</div>
                        <div class="th e759">Description</div>
                        <div class="th e760">XSD Fragment</div>
                     </div>
                  </div>
                  <div class="tbody e761">
                     <div class="tr e762">
                        <div class="td e763">
                           
                           <div class="para e764">&lt;&lt;primitive&gt;&gt;</div>
                           
                        </div>
                        <div class="td e765" align="center" valign="middle">
                           
                           <div class="para e766">No graphic symbol</div>
                           
                        </div>
                        <div class="td e767">
                           
                           <div class="para e768">Mapped via a datatype mapping file to the appropriate built in
                              schema simple type.
                              
                              <div class="popupBox e769">
                                 <div class="popupLabel" onmouseover="$('#d1e1429').show('1000');" onmouseout="$('#d1e1429').hide('1000');">[ footnote ]</div>
                                 <div id="d1e1429" style="display: none;">
                                    <div class="footnote" xml:id="mapping">
                                       <div class="para e770">
                                          
                                          <div class="table e771" frame="void">
                                             <div class="caption e772">
                                                <div class="para e773">Primitive Type Map</div>
                                             </div>
                                             <div class="thead e774">
                                                <div class="tr e775">
                                                   <div class="th e776">Conceptual Model</div>
                                                   <div class="th e777">XSD</div>
                                                </div>
                                             </div>
                                             <div class="tbody e778">
                                                <div class="tr e779">
                                                   <div class="td e780">
                                                      
                                                      <div class="para e781">string</div>
                                                      
                                                   </div>
                                                   <div class="td e782">
                                                      
                                                      <div class="para e783">xsd:string</div>
                                                      
                                                   </div>
                                                </div>
                                                <div class="tr e784">
                                                   <div class="td e785">
                                                      
                                                      <div class="para e786">float</div>
                                                      
                                                   </div>
                                                   <div class="td e787">
                                                      
                                                      <div class="para e788">xsd:float</div>
                                                      
                                                   </div>
                                                </div>
                                                <div class="tr e789">
                                                   <div class="td e790">
                                                      
                                                      <div class="para e791">integer</div>
                                                      
                                                   </div>
                                                   <div class="td e792">
                                                      
                                                      <div class="para e793">xsd:integer</div>
                                                      
                                                   </div>
                                                </div>
                                                <div class="tr e794">
                                                   <div class="td e795">
                                                      
                                                      <div class="para e796">date time</div>
                                                      
                                                   </div>
                                                   <div class="td e797">
                                                      
                                                      <div class="para e798">xsd:dateTime</div>
                                                      
                                                   </div>
                                                </div>
                                                <div class="tr e799">
                                                   <div class="td e800">
                                                      
                                                      <div class="para e801">date</div>
                                                      
                                                   </div>
                                                   <div class="td e802">
                                                      
                                                      <div class="para e803">xsd:date</div>
                                                      
                                                   </div>
                                                </div>
                                                <div class="tr e804">
                                                   <div class="td e805">
                                                      
                                                      <div class="para e806">time</div>
                                                      
                                                   </div>
                                                   <div class="td e807">
                                                      
                                                      <div class="para e808">xsd:time</div>
                                                      
                                                   </div>
                                                </div>
                                                <div class="tr e809">
                                                   <div class="td e810">
                                                      
                                                      <div class="para e811">boolean</div>
                                                      
                                                   </div>
                                                   <div class="td e812">
                                                      
                                                      <div class="para e813">xsd:boolean</div>
                                                      
                                                   </div>
                                                </div>
                                                <div class="tr e814">
                                                   <div class="td e815">
                                                      
                                                      <div class="para e816">octets</div>
                                                      
                                                   </div>
                                                   <div class="td e817">
                                                      
                                                      <div class="para e818">xsd:base64Binary</div>
                                                      
                                                   </div>
                                                </div>
                                             </div>
                                          </div>
                                          
                                       </div>
                                    </div>
                                 </div>
                              </div>
                           </div>
                           
                        </div>
                        <div class="td e819">
                           
                           <div class="para e820">N/A</div>
                           
                        </div>
                     </div>
                     <div class="tr e821">
                        <div class="td e822">
                           
                           <div class="para e823">&lt;&lt;domain&gt;&gt;</div>
                           
                        </div>
                        <div class="td e824" align="center" valign="middle">
                           
                           <div class="inlinemediaobject e825">
                              <div class="imageobject e826">
                                 <div class="metaBox e827"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1548').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1548" class="metaSource" style="display:none;">                
                                       &lt;imagedata<span class="metaAttribute">class='e827'
                                          </span><span class="metaAttribute">fileref='../../../vol3/graphics/Bauman01/Bauman01-008.jpg'
                                          </span><span class="metaAttribute">format='jpg'
                                          </span><span class="metaAttribute">width='150%'
                                          </span>
                                       &gt;
                                       
                                    </div>
                                 </div>
                              </div>
                           </div>
                           
                        </div>
                        <div class="td e828">
                           
                           <div class="para e829">Either mapped via a mapping table to an appropriate built in
                              schema simple type, or a simple type with the appropriate facets
                              is created.
                              <div class="popupBox e830">
                                 <div class="popupLabel" onmouseover="$('#d1e1554').show('1000');" onmouseout="$('#d1e1554').hide('1000');">[ footnote ]</div>
                                 <div id="d1e1554" style="display: none;">
                                    <div class="footnote" xml:id="base">
                                       <div class="para e831">The primitive type on which the user defined data type
                                          is a restriction of, is recorded directly as a property
                                          in the modeling tool. If a user defined datatype is a
                                          restriction of another user defined datatype, it is
                                          represented as a generalization relation.
                                       </div>
                                    </div>
                                 </div>
                              </div>
                           </div>
                           
                        </div>
                        <div class="td e832">
                           
                           <div class="programlisting e833" xml:space="preserve">&lt;xsd:simpleType name="uuid"&gt;
                              &lt;xsd:restriction base="xsd:string"&gt;
                              &lt;xsd:pattern value="[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}"/&gt;
                              &lt;/xsd:restriction&gt;
                              &lt;/xsd:simpleType&gt;
                           </div>
                           
                        </div>
                     </div>
                     <div class="tr e834">
                        <div class="td e835">
                           
                           <div class="para e836">&lt;&lt;enum&gt;&gt;</div>
                           
                        </div>
                        <div class="td e837" align="center" valign="middle">
                           
                           <div class="inlinemediaobject e838">
                              <div class="imageobject e839">
                                 <div class="metaBox e840"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1573').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1573" class="metaSource" style="display:none;">                
                                       &lt;imagedata<span class="metaAttribute">class='e840'
                                          </span><span class="metaAttribute">fileref='../../../vol3/graphics/Bauman01/Bauman01-009.jpg'
                                          </span><span class="metaAttribute">format='jpg'
                                          </span><span class="metaAttribute">width='150%'
                                          </span>
                                       &gt;
                                       
                                    </div>
                                 </div>
                              </div>
                           </div>
                           
                        </div>
                        <div class="td e841">
                           
                           <div class="para e842">A simple type with enumerated facets is created.
                              <div class="xref e843" linkend="base"></div>
                           </div>
                           
                        </div>
                        <div class="td e844">
                           
                           <div class="programlisting e845" xml:space="preserve">&lt;xsd:simpleType name="colorEnum"&gt;
                              &lt;xsd:restriction base="xsd:string"&gt;
                              &lt;xsd:enumeration value="red"/&gt;
                              &lt;xsd:enumeration value="yellow"/&gt;
                              &lt;xsd:enumeration value="blue"/&gt;
                              &lt;xsd:enumeration value="green"/&gt;
                              &lt;/xsd:restriction&gt;
                              &lt;/xsd:simpleType&gt;
                           </div>
                           
                        </div>
                     </div>
                     <div class="tr e846">
                        <div class="td e847">
                           
                           <div class="para e848">&lt;&lt;struct&gt;&gt;</div>
                           
                        </div>
                        <div class="td e849" align="center" valign="middle">
                           
                           <div class="inlinemediaobject e850">
                              <div class="imageobject e851">
                                 <div class="metaBox e852"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1596').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1596" class="metaSource" style="display:none;">                
                                       &lt;imagedata<span class="metaAttribute">class='e852'
                                          </span><span class="metaAttribute">fileref='../../../vol3/graphics/Bauman01/Bauman01-010.jpg'
                                          </span><span class="metaAttribute">format='jpg'
                                          </span><span class="metaAttribute">width='150%'
                                          </span>
                                       &gt;
                                       
                                    </div>
                                 </div>
                              </div>
                           </div>
                           
                        </div>
                        <div class="td e853">
                           
                           <div class="para e854">Processed as would be a class encoding as a complexType with
                              the following exception; If the attributes of the structure are
                              all set to encode "asValue", a simple list type is created (see
                              example).
                           </div>
                           
                        </div>
                        <div class="td e855">
                           
                           <div class="programlisting e856" xml:space="preserve">&lt;xsd:simpleType name="rgbColorStruct"&gt;
                              &lt;xsd:list itemType="xsd:integer"/&gt;
                              &lt;/xsd:simpleType&gt;
                           </div>
                           
                        </div>
                     </div>
                     <div class="tr e857">
                        <div class="td e858">
                           
                           <div class="para e859">&lt;&lt;union&gt;&gt;</div>
                           
                        </div>
                        <div class="td e860" align="center" valign="middle">
                           
                           <div class="inlinemediaobject e861">
                              <div class="imageobject e862">
                                 <div class="metaBox e863"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1618').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1618" class="metaSource" style="display:none;">                
                                       &lt;imagedata<span class="metaAttribute">class='e863'
                                          </span><span class="metaAttribute">fileref='../../../vol3/graphics/Bauman01/Bauman01-011.jpg'
                                          </span><span class="metaAttribute">format='jpg'
                                          </span><span class="metaAttribute">width='150%'
                                          </span>
                                       &gt;
                                       
                                    </div>
                                 </div>
                              </div>
                           </div>
                           
                        </div>
                        <div class="td e864">
                           
                           <div class="para e865">A simple union type that unions together the set of unique
                              datatypes present.
                           </div>
                           
                        </div>
                        <div class="td e866">
                           
                           <div class="programlisting e867" xml:space="preserve">&lt;xsd:simpleType name="colorUnion"&gt;
                              &lt;xsd:union memberTypes="rgbColorStruct colorEnum"/&gt;
                              &lt;/xsd:simpleType&gt;
                           </div>
                           
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
         </div><a name="AttributeEncodingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e868">
            <div class="title e869">Attribute Encoding</div>
            <div class="para e870">
               
               <div class="inlinemediaobject e871">
                  <div class="imageobject e872">
                     <div class="metaBox e873"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1638').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1638" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e873'
                              </span><span class="metaAttribute">fileref='../../../vol3/graphics/Bauman01/Bauman01-012.jpg'
                              </span><span class="metaAttribute">format='jpg'
                              </span><span class="metaAttribute">width='20%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
               
               <div class="table e874" frame="void">
                  <div class="caption e875">
                     <div class="para e876">Relevant Properties</div>
                  </div>
                  <div class="thead e877">
                     <div class="tr e878">
                        <div class="th e879">Property</div>
                        <div class="th e880">Origin</div>
                        <div class="th e881">Description</div>
                        <div class="th e882">Use</div>
                        <div class="th e883">Note</div>
                     </div>
                  </div>
                  <div class="tbody e884">
                     <div class="tr e885">
                        <div class="td e886">code</div>
                        <div class="td e887">Built In</div>
                        <div class="td e888">The implementation name of the attribute.</div>
                        <div class="td e889">Used as the name for the generated schema construct subject to any
                           name encoding rules in effect.
                        </div>
                        <div class="td e890"></div>
                     </div>
                     <div class="tr e891">
                        <div class="td e892">encoding</div>
                        <div class="td e893">Extended</div>
                        <div class="td e894">Controls how an attribute will be encoded. See 
                           <div class="xref e895" linkend="Attribute-Encoding"></div>
                        </div>
                        <div class="td e896"></div>
                        <div class="td e897"></div>
                     </div>
                     <div class="tr e898">
                        <div class="td e899">skip</div>
                        <div class="td e900">Extended</div>
                        <div class="td e901">Directs an attribute to not be encoded.</div>
                        <div class="td e902"></div>
                        <div class="td e903"></div>
                     </div>
                  </div>
               </div>
               <div class="table e904" frame="void" xml:id="Attribute-Encoding">
                  <div class="caption e905">
                     <div class="para e906">Attribute Encodings</div>
                  </div>
                  <div class="thead e907">
                     <div class="tr e908">
                        <div class="th e909">Encoding</div>
                        <div class="th e910">Description</div>
                        <div class="th e911">XSD Fragment</div>
                        <div class="th e912">XML Example</div>
                     </div>
                  </div>
                  <div class="tbody e913">
                     <div class="tr e914">
                        <div class="td e915">asAttribute</div>
                        <div class="td e916">
                           
                           <div class="para e917">The model attribute is represented as an XML attribute within
                              a complex type.
                           </div>
                           
                        </div>
                        <div class="td e918">
                           
                           <div class="programlisting e919" xml:space="preserve">&lt;xsd:complexType name="CPU"&gt;
                              &lt;xsd:attribute name="signature" type="xsd:string"/&gt;
                              &lt;/xsd:complexType&gt;
                           </div>
                           
                        </div>
                        <div class="td e920">
                           
                           <div class="programlisting e921" xml:space="preserve">&lt;CPU signature="Intel(R) Pentium(R) M"/&gt;</div>
                           
                        </div>
                     </div>
                     <div class="tr e922">
                        <div class="td e923">asElement</div>
                        <div class="td e924">
                           
                           <div class="para e925">The model attribute is represented as an XML element within
                              the complex type.
                           </div>
                           
                        </div>
                        <div class="td e926">
                           
                           <div class="programlisting e927" xml:space="preserve">&lt;xsd:complexType name="CPU"&gt;
                              &lt;xsd:sequence&gt;
                              &lt;xsd:element name="Signature" type="xsd:string"/&gt;
                              &lt;/xsd:sequence&gt;
                              &lt;/xsd:complexType&gt;
                           </div>
                           
                        </div>
                        <div class="td e928">
                           
                           <div class="programlisting e929" xml:space="preserve">&lt;CPU&gt;
                              &lt;Signature&gt;Intel(R) Pentium(R) M&lt;/Signature&gt;
                              &lt;/CPU&gt;
                           </div>
                           
                        </div>
                     </div>
                     <div class="tr e930">
                        <div class="td e931">asValue</div>
                        <div class="td e932">
                           
                           <div class="para e933">The value of the model attribute is represented as a simple
                              content value within the complex type.
                           </div>
                           
                        </div>
                        <div class="td e934">
                           
                           <div class="programlisting e935" xml:space="preserve">&lt;xsd:complexType name="CPU"&gt;
                              &lt;xsd:simpleContent&gt;
                              &lt;xsd:extension base="xsd:string"/&gt;
                              &lt;/xsd:simpleContent&gt;
                              &lt;/xsd:complexType&gt;
                           </div>
                           
                        </div>
                        <div class="td e936">
                           
                           <div class="programlisting e937" xml:space="preserve">&lt;CPU&gt;Intel(R) Pentium(R) M&lt;/CPU&gt;</div>
                           
                        </div>
                     </div>
                  </div>
               </div>
               <div class="table e938" frame="void">
                  <div class="caption e939">
                     <div class="para e940">Attribute Encoding Combinations and there affect on the XSD</div>
                  </div>
                  <div class="thead e941">
                     <div class="tr e942">
                        <div class="th e943" align="center">asAttribute</div>
                        <div class="th e944">AsElement</div>
                        <div class="th e945">asValue</div>
                        <div class="th e946">XSD Construct Created</div>
                     </div>
                  </div>
                  <div class="tbody e947">
                     <div class="tr e948">
                        <div class="td e949" align="center">+</div>
                        <div class="td e950" align="center">-</div>
                        <div class="td e951" align="center">-</div>
                        <div class="td e952" align="center">
                           
                           <div class="para e953">A complex type with attributes.</div>
                           
                        </div>
                     </div>
                     <div class="tr e954">
                        <div class="td e955" align="center">-</div>
                        <div class="td e956" align="center">+</div>
                        <div class="td e957" align="center">-</div>
                        <div class="td e958" align="center">
                           
                           <div class="para e959">A complex type with complex element content.</div>
                           
                        </div>
                     </div>
                     <div class="tr e960">
                        <div class="td e961" align="center">-</div>
                        <div class="td e962" align="center">-</div>
                        <div class="td e963" align="center">+</div>
                        <div class="td e964" align="center">
                           
                           <div class="para e965">A complex type with simple content.</div>
                           
                        </div>
                     </div>
                     <div class="tr e966">
                        <div class="td e967" align="center">+</div>
                        <div class="td e968" align="center">+</div>
                        <div class="td e969" align="center">-</div>
                        <div class="td e970" align="center">
                           
                           <div class="para e971">A complex with complex element and attribute content.</div>
                           
                        </div>
                     </div>
                     <div class="tr e972">
                        <div class="td e973" align="center">+</div>
                        <div class="td e974" align="center">-</div>
                        <div class="td e975" align="center">+</div>
                        <div class="td e976" align="center">
                           
                           <div class="para e977">A complex type with attributes and simple content.</div>
                           
                        </div>
                     </div>
                     <div class="tr e978">
                        <div class="td e979" align="center">-</div>
                        <div class="td e980" align="center">+</div>
                        <div class="td e981" align="center">+</div>
                        <div class="td e982" align="center">
                           
                           <div class="para e983">A complex type with complex element and mixed content.</div>
                           
                        </div>
                     </div>
                     <div class="tr e984">
                        <div class="td e985" align="center">+</div>
                        <div class="td e986" align="center">+</div>
                        <div class="td e987" align="center">+</div>
                        <div class="td e988" align="center">
                           
                           <div class="para e989">A complex type with complex element, attribute and mixed
                              content.
                           </div>
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </div><a name="RelationshipEncodingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e990">
            <div class="title e991">Relationship Encoding</div><a name="AssociationEncodingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e992">
               <div class="title e993">Association Encoding</div>
               <div class="para e994">This section describes the common properties and encoding options used to
                  represent association relationships in a schema.
               </div>
               <div class="para e995">
                  
                  <div class="inlinemediaobject e996">
                     <div class="imageobject e997">
                        <div class="metaBox e998"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1866').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1866" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e998'
                                 </span><span class="metaAttribute">fileref='../../../vol3/graphics/Bauman01/Bauman01-013.jpg'
                                 </span><span class="metaAttribute">format='jpg'
                                 </span><span class="metaAttribute">width='50%'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
                  
                  <div class="note e999">
                     <div class="para e1000">In the example above the association encoded is called
                        'manufacturedBy' with a source class of 'ManufacturedItem' and a target
                        class of 'Manufacturer'. The label 'computerMaker' is a UML role applied
                        to the 'Manufacturer' side of the association.
                     </div>
                  </div>
               </div><a name="AssociationEndANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e1001">
                  <div class="title e1002">Association End</div>
                  <div class="para e1003">Association End encodings create structures that get embedded in a source
                     class and point to a target class through a variety of means that can be
                     grossly categorized as the by value options (asNested, asGroupRef) that
                     directly represent all of the target class within the source class, and the
                     by reference options that rely on primary keys in the target class to point
                     from source to target.
                  </div>
                  <div class="para e1004">
                     
                     <div class="table e1005" frame="void">
                        <div class="caption e1006">
                           <div class="para e1007">Relevant Properties</div>
                        </div>
                        <div class="thead e1008">
                           <div class="tr e1009">
                              <div class="th e1010">Property</div>
                              <div class="th e1011">Origin</div>
                              <div class="th e1012">Description</div>
                              <div class="th e1013">Use</div>
                              <div class="th e1014">Note</div>
                           </div>
                        </div>
                        <div class="tbody e1015">
                           <div class="tr e1016">
                              <div class="td e1017">roleA/B code</div>
                              <div class="td e1018">Built In</div>
                              <div class="td e1019">The implementation name of the RoleA / RoleB association
                                 end.
                              </div>
                              <div class="td e1020">Used as the name for the generated schema construct subject
                                 to any name encoding rules in effect.
                              </div>
                              <div class="td e1021">If there is no RoleA / RoleB code set, then the 'code' of
                                 the target class is used.
                              </div>
                           </div>
                           <div class="tr e1022">
                              <div class="td e1023">roleA/B navigability</div>
                              <div class="td e1024">Built In</div>
                              <div class="td e1025">Represents which direction(s) an association can be
                                 transversed.
                              </div>
                              <div class="td e1026">Used to control whether the association is encoded. For
                                 every navigable end pointing to a 'target' class, a
                                 construct in the source class will be generated to implement
                                 the association in that direction.
                              </div>
                           </div>
                           <div class="tr e1027">
                              <div class="td e1028">roleA/B encoding</div>
                              <div class="td e1029">Extended</div>
                              <div class="td e1030">Controls how an association end will be encoded. See 
                                 <div class="xref e1031" linkend="Association-Encoding"></div>
                              </div>
                              <div class="td e1032"></div>
                              <div class="td e1033"></div>
                           </div>
                        </div>
                     </div>
                     
                     <div class="table e1034" frame="void" xml:id="Association-End-Encoding">
                        <div class="caption e1035">
                           <div class="para e1036">Association End Encodings</div>
                        </div>
                        <div class="thead e1037">
                           <div class="tr e1038">
                              <div class="th e1039">Encoding</div>
                              <div class="th e1040">Description</div>
                              <div class="th e1041">XSD Fragment</div>
                              <div class="th e1042">XML Example</div>
                           </div>
                        </div>
                        <div class="tbody e1043">
                           <div class="tr e1044">
                              <div class="td e1045">asAttribute</div>
                              <div class="td e1046">Keys of the target class are represented as attributes in
                                 the source class.
                              </div>
                              <div class="td e1047">
                                 
                                 <div class="programlisting e1048" xml:space="preserve">&lt;xsd:group name="ManufacturedItem"&gt;
                                    &lt;xsd:sequence&gt;
                                    &lt;xsd:element name="SerialNum" type="xsd:string"/&gt;
                                    &lt;/xsd:sequence&gt;
                                    &lt;/xsd:group&gt;
                                    
                                    &lt;xsd:attributeGroup name="ManufacturedItem"&gt;
                                    &lt;xsd:attribute name="computerMaker" use="required" type="Manufacturer"/&gt;
                                    &lt;/xsd:attributeGroup&gt;
                                    
                                    &lt;xsd:complexType name="Hardware"&gt;
                                    &lt;xsd:sequence&gt;
                                    &lt;xsd:group ref="ManufacturedItem"/&gt;
                                    &lt;/xsd:sequence&gt;
                                    &lt;xsd:attributeGroup ref="ManufacturedItem"/&gt;
                                    &lt;/xsd:complexType&gt;
                                 </div>
                                 
                              </div>
                              <div class="td e1049">
                                 
                                 <div class="programlisting e1050" xml:space="preserve">&lt;Hardware computerMaker="Dell"&gt;
                                    &lt;SerialNum&gt;1234&lt;/SerialNum&gt;
                                    &lt;/Hardware&gt;
                                 </div>
                                 
                              </div>
                           </div>
                           <div class="tr e1051">
                              <div class="td e1052">asElement</div>
                              <div class="td e1053">Keys of the target class are represented as elements in the
                                 source class.
                              </div>
                              <div class="td e1054">
                                 
                                 <div class="programlisting e1055" xml:space="preserve">&lt;xsd:group name="ManufacturedItem"&gt;
                                    &lt;xsd:sequence&gt;
                                    &lt;xsd:element name="ComputerMaker" type="xsd:string"/&gt;
                                    &lt;xsd:element name="SerialNum" type="xsd:string"/&gt;
                                    &lt;/xsd:sequence&gt;
                                    &lt;/xsd:group&gt;
                                    
                                    &lt;xsd:complexType name="Hardware"&gt;
                                    &lt;xsd:sequence&gt;
                                    &lt;xsd:group ref="ManufacturedItem"/&gt;
                                    &lt;/xsd:sequence&gt;
                                    &lt;/xsd:complexType&gt;
                                 </div>
                                 
                              </div>
                              <div class="td e1056">
                                 
                                 <div class="programlisting e1057" xml:space="preserve">&lt;Hardware&gt;
                                    &lt;ComputerMaker&gt;Dell&lt;/ComputerMaker&gt;
                                    &lt;SerialNum&gt;1234&lt;/SerialNum&gt;
                                    &lt;/Hardware&gt;
                                 </div>
                                 
                              </div>
                           </div>
                           <div class="tr e1058">
                              <div class="td e1059">asElementKey</div>
                              <div class="td e1060">An element representing the relationship is created. Keys of
                                 the target class are represented as attributes on it.
                              </div>
                              <div class="td e1061">
                                 
                                 <div class="programlisting e1062" xml:space="preserve">&lt;xsd:group name="ManufacturedItem"&gt;
                                    &lt;xsd:sequence&gt;
                                    &lt;xsd:element name="ComputerMaker"&gt;
                                    &lt;xsd:complexType&gt;
                                    &lt;xsd:attribute name="name" use="required" type="xsd:string"/&gt;
                                    &lt;/xsd:complexType&gt;
                                    &lt;/xsd:element&gt;
                                    &lt;xsd:element name="SerialNum" type="xsd:string"/&gt;
                                    &lt;/xsd:sequence&gt;
                                    &lt;/xsd:group&gt;
                                    
                                    &lt;xsd:complexType name="Hardware"&gt;
                                    &lt;xsd:sequence&gt;
                                    &lt;xsd:group ref="ManufacturedItem"/&gt;
                                    &lt;/xsd:sequence&gt;
                                    &lt;/xsd:complexType&gt;
                                 </div>
                                 
                              </div>
                              <div class="td e1063">
                                 
                                 <div class="programlisting e1064" xml:space="preserve">&lt;Hardware&gt;
                                    &lt;ComputerMaker name="Dell"/&gt;
                                    &lt;SerialNum&gt;1234&lt;/SerialNum&gt;
                                    &lt;/Hardware&gt;
                                 </div>
                                 
                              </div>
                           </div>
                           <div class="tr e1065">
                              <div class="td e1066">asElementNestedKey</div>
                              <div class="td e1067">An element representing the relationship is created. Keys of
                                 the target class are represented as elements within it.
                              </div>
                              <div class="td e1068">
                                 
                                 <div class="programlisting e1069" xml:space="preserve">&lt;xsd:group name="ManufacturedItem"&gt;
                                    &lt;xsd:sequence&gt;
                                    &lt;xsd:element name="ComputerMaker"&gt;
                                    &lt;xsd:complexType&gt;
                                    &lt;xsd:sequence&gt;
                                    &lt;xsd:element name="name" type="xsd:string"/&gt;
                                    &lt;/xsd:sequence&gt;
                                    &lt;/xsd:complexType&gt;
                                    &lt;/xsd:element&gt;
                                    &lt;xsd:element name="SerialNum" type="xsd:string"/&gt;
                                    &lt;/xsd:sequence&gt;
                                    &lt;/xsd:group&gt;
                                    
                                    &lt;xsd:complexType name="Hardware"&gt;
                                    &lt;xsd:sequence&gt;
                                    &lt;xsd:group ref="ManufacturedItem"/&gt;
                                    &lt;/xsd:sequence&gt;
                                    &lt;/xsd:complexType&gt;
                                 </div>
                                 
                              </div>
                              <div class="td e1070">
                                 
                                 <div class="programlisting e1071" xml:space="preserve">&lt;Hardware&gt;
                                    &lt;ComputerMaker&gt;
                                    &lt;Name&gt;Dell&lt;/Name&gt;
                                    &lt;/ComputerMaker&gt;
                                    &lt;SerialNum&gt;1234&lt;/SerialNum&gt;
                                    &lt;/Hardware&gt;
                                 </div>
                                 
                              </div>
                           </div>
                           <div class="tr e1072">
                              <div class="td e1073">asGroupRef</div>
                              <div class="td e1074">A group reference is created to the target class.</div>
                              <div class="td e1075">
                                 
                                 <div class="programlisting e1076" xml:space="preserve">&lt;xsd:group name="ManufacturedItem"&gt;
                                    &lt;xsd:sequence&gt;
                                    &lt;xsd:group ref="Manufacturer"/&gt;
                                    &lt;xsd:element name="SerialNum" type="xsd:string"/&gt;
                                    &lt;/xsd:sequence&gt;
                                    &lt;/xsd:group&gt;
                                    
                                    &lt;xsd:complexType name="Hardware"&gt;
                                    &lt;xsd:sequence&gt;
                                    &lt;xsd:group ref="ManufacturedItem"/&gt;
                                    &lt;/xsd:sequence&gt;
                                    &lt;/xsd:complexType&gt;
                                 </div>
                                 
                              </div>
                              <div class="td e1077">
                                 
                                 <div class="programlisting e1078" xml:space="preserve">&lt;Hardware&gt;
                                    &lt;ManufacturerName&gt;Dell&lt;/ManufacturerName&gt;
                                    &lt;ManufacturerSize&gt;large&lt;/ManufacturerSize&gt;
                                    &lt;SerialNum&gt;1234&lt;/SerialNum&gt;
                                    &lt;/Hardware&gt;
                                 </div>
                                 <div class="popupBox e1079">
                                    <div class="popupLabel" onmouseover="$('#d1e2015').show('1000');" onmouseout="$('#d1e2015').hide('1000');">[ footnote ]</div>
                                    <div id="d1e2015" style="display: none;">
                                       <div class="footnote" xml:id="upperCamelCase">
                                          <div class="para e1080">The element names are created by selecting a name
                                             encoding option that combines an attributes name
                                             with its class name.
                                          </div>
                                       </div>
                                    </div>
                                 </div>
                                 
                              </div>
                           </div>
                           <div class="tr e1081">
                              <div class="td e1082">
                                 
                                 <div class="para e1083">asNested</div>
                                 
                              </div>
                              <div class="td e1084">The target class is directly nested within the source
                                 class.
                              </div>
                              <div class="td e1085">
                                 
                                 <div class="programlisting e1086" xml:space="preserve">&lt;xsd:group name="ManufacturedItem"&gt;
                                    &lt;xsd:sequence&gt;
                                    &lt;xsd:element name="ComputerMaker" type="Manufacturer"/&gt;
                                    &lt;xsd:element name="SerialNum" type="xsd:string"/&gt;
                                    &lt;/xsd:sequence&gt;
                                    &lt;/xsd:group&gt;
                                    
                                    &lt;xsd:complexType name="Hardware"&gt;
                                    &lt;xsd:sequence&gt;
                                    &lt;xsd:group ref="ManufacturedItem"/&gt;
                                    &lt;/xsd:sequence&gt;
                                    &lt;/xsd:complexType&gt;
                                 </div>
                                 
                              </div>
                              <div class="td e1087">
                                 
                                 <div class="programlisting e1088" xml:space="preserve">&lt;Hardware&gt;
                                    &lt;ComputerMaker&gt;
                                    &lt;Name&gt;Dell&lt;/Name&gt;
                                    &lt;Size&gt;Large&lt;/Size&gt;
                                    &lt;/ComputerMaker&gt;
                                    &lt;SerialNum&gt;1234&lt;/SerialNum&gt;
                                    &lt;/Hardware&gt;
                                 </div>
                                 
                              </div>
                           </div>
                           <div class="tr e1089">
                              <div class="td e1090">asXlink</div>
                              <div class="td e1091">An element representing the relationship is created. An
                                 attribute group reference is created to bring in link simple
                                 link attributes.
                              </div>
                              <div class="td e1092">
                                 
                                 <div class="programlisting e1093" xml:space="preserve">&lt;xsd:group name="ManufacturedItem"&gt;
                                    &lt;xsd:sequence&gt;
                                    &lt;xsd:element name="ComputerMaker"&gt;
                                    &lt;xsd:complexType&gt;
                                    &lt;xsd:attributeGroup ref="xlink:XlinkSimple"/&gt;
                                    &lt;/xsd:complexType&gt;
                                    &lt;/xsd:element&gt;
                                    &lt;xsd:element name="SerialNum" type="xsd:string"/&gt;
                                    &lt;/xsd:sequence&gt;
                                    &lt;/xsd:group&gt;
                                    
                                    &lt;xsd:complexType name="Hardware"&gt;
                                    &lt;xsd:sequence&gt;
                                    &lt;xsd:group ref="ManufacturedItem"/&gt;
                                    &lt;/xsd:sequence&gt;
                                    &lt;/xsd:complexType&gt;
                                 </div>
                                 
                              </div>
                              <div class="td e1094">
                                 
                                 <div class="programlisting e1095" xml:space="preserve">&lt;Hardware&gt;
                                    &lt;ComputerMaker xlink:href="Dell"/&gt;
                                    &lt;SerialNum&gt;1234&lt;/SerialNum&gt;
                                    &lt;/Hardware&gt;
                                 </div>
                                 
                              </div>
                           </div>
                        </div>
                     </div>
                     
                  </div>
               </div><a name="AssociationEncodingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e1096">
                  <div class="title e1097">Association Encoding</div>
                  <div class="para e1098">Association encodings create structures that directly represent the
                     association as either an independent global complexType, or as an additional
                     layer within an association end encoding. Directly representing an
                     association is less common then representing then using the association end
                     encodings.
                  </div>
                  <div class="table e1099" frame="void">
                     <div class="caption e1100">
                        <div class="para e1101">Relevant Properties</div>
                     </div>
                     <div class="thead e1102">
                        <div class="tr e1103">
                           <div class="th e1104">Property</div>
                           <div class="th e1105">Origin</div>
                           <div class="th e1106">Description</div>
                           <div class="th e1107">Use</div>
                           <div class="th e1108">Note</div>
                        </div>
                     </div>
                     <div class="tbody e1109">
                        <div class="tr e1110">
                           <div class="td e1111">code</div>
                           <div class="td e1112">Built In</div>
                           <div class="td e1113">The implementation name of the association.</div>
                           <div class="td e1114">Used as the name for the generated schema construct subject to
                              any name encoding rules in effect.
                           </div>
                           <div class="td e1115"></div>
                        </div>
                        <div class="tr e1116">
                           <div class="td e1117" rowspan="4">visibility</div>
                           <div class="td e1118" rowspan="4">Extended</div>
                           <div class="td e1119" rowspan="4">The visibility of the association.</div>
                           <div class="td e1120">When a global xsd:complexType will be generated the visibility
                              property will have the following effect.
                           </div>
                           <div class="td e1121">This only has an effect if encoding = 'asComplexType'.</div>
                        </div>
                        <div class="tr e1122">
                           <div class="td e1123">public - a global element and a global xsd:complexType are
                              generated.
                           </div>
                        </div>
                        <div class="tr e1124">
                           <div class="td e1125">protected - a global element containing an anonymous
                              xsd:complexType is created.
                           </div>
                           <div class="td e1126"></div>
                        </div>
                        <div class="tr e1127">
                           <div class="td e1128">private - only a global xsd:complexType is created.</div>
                           <div class="td e1129"></div>
                        </div>
                        <div class="tr e1130">
                           <div class="td e1131">encoding</div>
                           <div class="td e1132">Extended</div>
                           <div class="td e1133">Controls how an association will be encoded. See 
                              <div class="xref e1134" linkend="Association-Encoding"></div>
                           </div>
                           <div class="td e1135"></div>
                           <div class="td e1136">By default associations are not explicitly encoded as global
                              type declarations. Instead association-end encodings create
                              needed structures directly in the source class.
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="table e1137" frame="void" xml:id="Association-Encoding">
                     <div class="caption e1138">
                        <div class="para e1139">Association Encodings</div>
                     </div>
                     <div class="thead e1140">
                        <div class="tr e1141">
                           <div class="th e1142">Encoding</div>
                           <div class="th e1143">Description</div>
                           <div class="th e1144">XSD Fragment</div>
                           <div class="th e1145">XML Example</div>
                        </div>
                     </div>
                     <div class="tbody e1146">
                        <div class="tr e1147">
                           <div class="td e1148">
                              
                              <div class="para e1149">asNested</div>
                              
                           </div>
                           <div class="td e1150">The association is explicitly represented as an additional
                              nested layer within association end encodings. The association
                              end encoding used is 'asElement'.
                           </div>
                           <div class="td e1151">
                              
                              <div class="programlisting e1152" xml:space="preserve">&lt;xsd:group name="ManufacturedItem"&gt;
                                 &lt;xsd:sequence&gt;
                                 &lt;xsd:element name="ManufacturedBy"&gt;
                                 &lt;xsd:complexType&gt;
                                 &lt;xsd:sequence&gt;
                                 &lt;xsd:element name="ComputerMaker" type="xsd:string"/&gt;
                                 &lt;/xsd:sequence&gt;
                                 &lt;/xsd:complexType&gt;
                                 &lt;/xsd:element&gt;
                                 &lt;xsd:element name="SerialNum" type="xsd:string"/&gt;
                                 &lt;/xsd:sequence&gt;
                                 &lt;/xsd:group&gt;
                                 
                                 &lt;xsd:complexType name="Hardware"&gt;
                                 &lt;xsd:sequence&gt;
                                 &lt;xsd:group ref="ManufacturedItem"/&gt;
                                 &lt;/xsd:sequence&gt;
                                 &lt;/xsd:complexType&gt;
                              </div>
                              
                           </div>
                           <div class="td e1153">
                              
                              <div class="programlisting e1154" xml:space="preserve">&lt;Hardware&gt;
                                 &lt;ManufacturedBy&gt;
                                 &lt;ComputerMaker&gt;Dell&lt;/ComputerMaker&gt;
                                 &lt;/ManufacturedBy&gt;
                                 &lt;SerialNum&gt;1234&lt;/SerialNum&gt;
                                 &lt;/Hardware&gt;
                              </div>
                              
                           </div>
                        </div>
                        <div class="tr e1155">
                           <div class="td e1156">asComplexType</div>
                           <div class="td e1157">The association is explicitly represented as a global complex
                              types. The association end encodings point out from the
                              relationship to the target classes. The association end encoding
                              used is 'asElement'. With this example, this encoding option
                              makes no sense, as only one of the association ends encoded is
                              navigable.
                           </div>
                           <div class="td e1158">
                              
                              <div class="programlisting e1159" xml:space="preserve">&lt;xsd:complexType name="ManufacturedBy"&gt;
                                 &lt;xsd:sequence&gt;
                                 &lt;xsd:element name="ComputerMaker" type="xsd:string"/&gt;
                                 &lt;/xsd:sequence&gt;
                                 &lt;/xsd:complexType&gt;
                              </div>
                              
                           </div>
                           <div class="td e1160">
                              
                              <div class="programlisting e1161" xml:space="preserve">&lt;ManufacturedBy&gt;
                                 &lt;ComputerMaker&gt;Dell&lt;/ComputerMaker&gt;
                                 &lt;/ManufacturedBy&gt;
                              </div>
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div><a name="AssociationsendingataMixin(egcategoryroleCategory)ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e1162">
                  <div class="title e1163">Associations ending at a Mixin (e.g., category, roleCategory).</div>
                  <div class="para e1164">Associations whose target class is a non-sortal (i.e. a mixin) can be
                     encoded as any other target class, however by default a mixin is encoded by
                     creating an xsd:choice group that encodes the relationship to the mixin as
                     if the association were drawn directly to each of the subclasses that the
                     mxin subsumes. In essence a relationship to a category results in an
                     encoding as if the relationship were drawn directly to each of the members
                     of the category.
                  </div>
               </div>
            </div><a name="GeneralizationEncodingsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e1165" xml:id="Generalization-Encoding">
               <div class="title e1166">Generalization Encodings</div>
               <div class="para e1167">This section describes the common properties and encoding options used to
                  represent generalization / realization relations in a schema.
               </div>
               <div class="para e1168">
                  
                  <div class="inlinemediaobject e1169">
                     <div class="imageobject e1170">
                        <div class="metaBox e1171"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e2180').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e2180" class="metaSource" style="display:none;">                
                              &lt;imagedata<span class="metaAttribute">class='e1171'
                                 </span><span class="metaAttribute">fileref='../../../vol3/graphics/Bauman01/Bauman01-014.jpg'
                                 </span><span class="metaAttribute">format='jpg'
                                 </span><span class="metaAttribute">width='50%'
                                 </span>
                              &gt;
                              
                           </div>
                        </div>
                     </div>
                  </div>
                  
                  <div class="table e1172" frame="void">
                     <div class="caption e1173">
                        <div class="para e1174">Relevant Properties</div>
                     </div>
                     <div class="thead e1175">
                        <div class="tr e1176">
                           <div class="th e1177">Property</div>
                           <div class="th e1178">Origin</div>
                           <div class="th e1179">Description</div>
                           <div class="th e1180">Use</div>
                           <div class="th e1181">Note</div>
                        </div>
                     </div>
                     <div class="tbody e1182">
                        <div class="tr e1183">
                           <div class="td e1184">code</div>
                           <div class="td e1185">Built In</div>
                           <div class="td e1186">The implementation name of the class.</div>
                           <div class="td e1187">Used as the name for the generated schema construct subject to
                              any name encoding rules in effect.
                           </div>
                           <div class="td e1188"></div>
                        </div>
                        <div class="tr e1189">
                           <div class="td e1190">encoding</div>
                           <div class="td e1191">Extended</div>
                           <div class="td e1192">Controls how a generalization will be encoded.</div>
                           <div class="td e1193">By default generalization relations between sortals are encoded
                              using 
                              <div class="code e1194">xsd:extension</div> and generalization relations
                              between sortals and non-sortals, or between non-sortals and
                              non-sortals as 
                              <div class="code e1195">xsd:group</div> and / or
                              
                              <div class="code e1196">xsd:attributeGroup</div> references.
                           </div>
                        </div>
                        <div class="tr e1197">
                           <div class="td e1198">navigability</div>
                           <div class="td e1199">Extended</div>
                           <div class="td e1200">Represents which direction(s) a generalization can be
                              transversed (e.g., subtype to supertype, or supertype to
                              subtype).
                           </div>
                           <div class="td e1201">Normally generalizations encode with the supertype navigable
                              from the subtype as indicated by the arrow head in the UML
                              representation. Occasionally its useful to navigate in the other
                              direction to implement a collapsing of a set of subtypes into
                              their common supertype.
                           </div>
                           <div class="td e1202"></div>
                        </div>
                     </div>
                  </div>
                  <div class="table e1203" frame="void">
                     <div class="caption e1204">
                        <div class="para e1205">Generalization Encodings</div>
                     </div>
                     <div class="thead e1206">
                        <div class="tr e1207">
                           <div class="th e1208">Encoding</div>
                           <div class="th e1209">Navigability</div>
                           <div class="th e1210">Description</div>
                           <div class="th e1211">XSD Fragement</div>
                           <div class="th e1212">XML Example</div>
                        </div>
                     </div>
                     <div class="tbody e1213">
                        <div class="tr e1214">
                           <div class="td e1215">asExtension</div>
                           <div class="td e1216">Subtype to Supertype</div>
                           <div class="td e1217">A complexType is created for 'Printer', 'BWPrinter', and
                              'ColorPrinter' with the later two extending the first.
                           </div>
                           <div class="td e1218">
                              
                              <div class="programlisting e1219" xml:space="preserve">&lt;xsd:complexType name="ColorPrinter"&gt;
                                 &lt;xsd:complexContent&gt;
                                 &lt;xsd:extension base="Printer"&gt;
                                 &lt;xsd:sequence&gt;
                                 &lt;xsd:element name="colorLevel" type="xsd:positiveInteger"/&gt;
                                 &lt;/xsd:sequence&gt;
                                 &lt;/xsd:extension&gt;
                                 &lt;/xsd:complexContent&gt;
                                 &lt;/xsd:complexType&gt;
                              </div>
                              
                           </div>
                           <div class="td e1220">
                              
                              <div class="programlisting e1221" xml:space="preserve">&lt;ColorPrinter type="ColorPrinter"&gt;
                                 &lt;Name&gt;ColorPrinter1&lt;/Name&gt;
                                 &lt;ColorLevel&gt;8&lt;/ColorLevel&gt;
                                 &lt;/ColorPrinter&gt;
                              </div>
                              
                           </div>
                        </div>
                        <div class="tr e1222">
                           <div class="td e1223">asGroupRef</div>
                           <div class="td e1224">Subtype to Supertype</div>
                           <div class="td e1225">A complexType is created for 'BWPrinter' and 'ColorPrinter".
                              Both a group and attributeGroup are created as needed depending
                              on the encoding of the attributes in the 'Printer' class. These
                              groups are referenced by 'BWPrinter' and 'ColorPrinter'.
                           </div>
                           <div class="td e1226">
                              
                              <div class="programlisting e1227" xml:space="preserve">&lt;xsd:complexType name="ColorPrinter"&gt;
                                 &lt;xsd:sequence&gt;
                                 &lt;xsd:group ref="Printer"/&gt;
                                 &lt;xsd:element name="ColorLevel" type="xsd:positiveInteger"/&gt;
                                 &lt;/xsd:sequence&gt;
                                 &lt;xsd:attributeGroup ref="Printer"/&gt;
                                 &lt;/xsd:complexType&gt;
                              </div>
                              
                           </div>
                           <div class="td e1228">
                              
                              <div class="programlisting e1229" xml:space="preserve">&lt;ColorPrinter type="ColorPrinter"&gt;
                                 &lt;Name&gt;ColorPrinter1&lt;/Name&gt;
                                 &lt;ColorLevel&gt;8&lt;/ColorLevel&gt;
                                 &lt;/ColorPrinter&gt;
                              </div>
                              
                           </div>
                        </div>
                        <div class="tr e1230">
                           <div class="td e1231">asNested</div>
                           <div class="td e1232">Supertype to Subtype</div>
                           <div class="td e1233">A complexType is created for 'Printer', 'BWPrinter' and
                              'ColorPrinter' with the first directly including the latter two.
                              An optional choice group reflects the choice between these two
                              mutually exclusive subtypes.
                           </div>
                           <div class="td e1234">
                              
                              <div class="programlisting e1235" xml:space="preserve">&lt;xsd:complexType name="Printer"&gt;
                                 &lt;xsd:sequence&gt;
                                 &lt;xsd:element name="Name" type="xsd:string"/&gt;
                                 &lt;xsd:choice minOccurs="0"&gt;
                                 &lt;xsd:element name="BWPrinter" type="BWPrinter"/&gt;
                                 &lt;xsd:element name="ColorPrinter" type="ColorPrinter"/&gt;
                                 &lt;/xsd:choice&gt;
                                 &lt;/xsd:sequence&gt;
                                 &lt;xsd:attribute name="type" use="required" type="xsd:string"/&gt;
                                 &lt;/xsd:complexType&gt;
                              </div>
                              
                           </div>
                           <div class="td e1236">
                              
                              <div class="programlisting e1237" xml:space="preserve">&lt;Printer type="ColorPrinter"&gt;
                                 &lt;Name&gt;ColorPrinter1&lt;/Name&gt;
                                 &lt;ColorPrinter&gt;
                                 &lt;ColorLevel&gt;8&lt;/ColorLevel&gt;
                                 &lt;/ColorPrinter&gt;
                                 &lt;/Printer&gt;
                              </div>
                              
                           </div>
                        </div>
                        <div class="tr e1238">
                           <div class="td e1239">asGroupRef</div>
                           <div class="td e1240">Supertype to Subtype</div>
                           <div class="td e1241">A complexType is created for 'Printer'. Both a group and / or
                              attributeGroup are created as needed for each of 'BWPrinter' and
                              'ColorPrinter' depending on the encoding of the attributes in
                              each of them. An optional choice group reflects the choice
                              between these two mutually exclusive subtypes. 
                           </div>
                           <div class="td e1242">
                              
                              <div class="programlisting e1243" xml:space="preserve">&lt;xsd:complexType name="Printer"&gt;
                                 &lt;xsd:sequence&gt;
                                 &lt;xsd:element name="Name" type="xsd:string"/&gt;
                                 &lt;xsd:choice minOccurs="0"&gt;
                                 &lt;xsd:group ref="BWPrinter"/&gt;
                                 &lt;xsd:group ref="ColorPrinter"/&gt;
                                 &lt;/xsd:choice&gt;
                                 &lt;/xsd:sequence&gt;
                                 &lt;xsd:attribute name="type" use="required" type="xsd:string"/&gt;
                                 &lt;/xsd:complexType&gt;
                              </div>
                              
                           </div>
                           <div class="td e1244">
                              
                              <div class="programlisting e1245" xml:space="preserve">&lt;Printer type="ColorPrinter"&gt;
                                 &lt;Name&gt;ColorPrinter1&lt;/Name&gt;
                                 &lt;ColorLevel&gt;8&lt;/ColorLevel&gt;
                                 &lt;/Printer&gt;
                              </div>
                              
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </div>
      </div><a name="ReferencesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e1246">
         <div class="title e1247">References</div>
         <div class="bibliomixed e1248" xml:id="Bernauer-2004">Bernauer, Martin, Gerti Kappel, Gerhard Kramler, 
            <div class="quote e1249">
               
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e1250" xlink:actuate="onRequest" xlink:href="http://www.big.tuwien.ac.at/research/publications/2004/0304.pdf" xlink:show="new" xlink:type="simple">Representing XML Schema in UML - A Comparison of Approaches</div>
               
            </div>, Technical Report, 2004.
         </div>
         <div class="bibliomixed e1251" xml:id="Fowler-2000">Fowler, Martin, Kendall Scott, 
            <div class="emphasis e1252">UML Distilled -
               Second Edition
            </div>, Addison-Wesley, 2000.
         </div>
         <div class="bibliomixed e1253" xml:id="Guizzardi-2005">Guizzardi, Giancarlo, 
            <div class="emphasis e1254">
               
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e1255" xlink:actuate="onRequest" xlink:href="https://doc.telin.nl/dsweb/Get/Document-55835/Ontological%20Foundations%20for%20Structural%20Conceptual%20Models.pdf" xlink:show="new" xlink:type="simple">Ontological Foundations for Structural Conceptual Models</div>
               
            </div>, Ph.D. Thesis, University of Twente, The Netherlands, 2005.
         </div>
         <div class="bibliomixed e1256" xml:id="Guizzardi-2006a">Guizzardi, Giancarlo, 
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e1257" xlink:actuate="onRequest" xlink:href="http://www.loa-cnr.it/Guizzardi/SELMAS-CR.pdf" xlink:show="new" xlink:type="simple">"Agent Roles, Qua
               Individuals and The Counting Problem"
            </div>
            doi:
            <div class="biblioid doi e1258">10.1007/11738817_9</div>
            , Software Engineering of Multi-Agent Systems, vol. IV, P. Giorgini, A.Garcia,
            C. Lucena, R. Choren (eds.), Springer-Verlag, 2006.
         </div>
         <div class="bibliomixed e1259" xml:id="Guizzardi-2006b">Guizzardi, Giancarlo.; C. Masolo.; S.Borgo, 
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e1260" xlink:actuate="onRequest" xlink:href="http://www.loa-cnr.it/Papers/ER2006CR.pdf" xlink:show="new" xlink:type="simple">"In the Defense of a
               Trope-Based Ontology for Conceptual Modeling: An Example with the Foundations of
               Attributes, Weak Entities and Datatypes"
            </div>
            doi:
            <div class="biblioid doi e1261">10.1007/11901181_10</div>
            , 25th International Conference on Conceptual Modeling (ER’2006), Arizona, USA,
            2006.
         </div>
         <div class="bibliomixed e1262" xml:id="Guizzardi-2007">Guizzardi, Giancarlo. 
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e1263" xlink:actuate="onRequest" xlink:href="http://www.loa-cnr.it/Guizzardi/CAISE-CR-2007.pdf" xlink:show="new" xlink:type="simple">
               <div class="emphasis e1264">Modal Aspects
                  of Object Types and Part-Whole Relations and the de re/de dicto
                  distinction
               </div>
            </div>
            doi:
            <div class="biblioid doi e1265">10.1007/978-3-540-72988-4_2</div>
            , 19th International Conference on Advanced Information Systems Engineering
            (CAISE’07), Trondheim, 2007, Lecture Notes in Computer Science 4495,
            Springer-Verlag.
         </div>
         <div class="bibliomixed e1266" xml:id="Guizzardi-2008">Guizzardi, Giancarlo, Gerd Wagner, 
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e1267" xlink:actuate="onRequest" xlink:href="http://www.inf.ufes.br/~gguizzardi/ER2008-CR-GuizzardiWagner.pdf" xlink:show="new" xlink:type="simple">"What's in a Relationship: An Ontological Analysis"</div>
            doi:
            <div class="biblioid doi e1268">10.1007/978-3-540-87877-3_8</div>
            , 27th International Conference on Conceptual Modeling (ER'2008), Barcelona,
            Spain, Lecture Notes in Computer Science. , v.5231, p.83 - 97, 2008.
         </div>
         <div class="bibliomixed e1269" xml:id="ISO-TR9007">ISO/TR9007:1987(E) Information processing systems -
            Concepts and terminology for the conceptual schema and information base,
            1987.
         </div>
         <div class="bibliomixed e1270" xml:id="Nečaský-2006">Nečaský, Martin, 
            <div class="quote e1271">
               
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e1272" xlink:actuate="onRequest" xlink:href="http://ftp.informatik.rwth-aachen.de/Publications/CEUR-WS/Vol-176/paper7.pdf" xlink:show="new" xlink:type="simple">Conceptual Modeling for XML: A Survey</div>
               
            </div>, Proceedings of the Dateso 2006 Annual International Workshop on DAtabases,
            TExts, Specifications and Objects, Desna, Czech Republic, April 26-28,
            2006.
         </div>
         <div class="bibliomixed e1273" xml:id="OMG-MDA">OMG. 
            <div class="emphasis e1274">
               
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e1275" xlink:actuate="onRequest" xlink:href="http://www.omg.org/cgi-bin/doc?omg/03-06-01" xlink:show="new" xlink:type="simple">MDA Guide Version
                  1.0.1
               </div>
               
            </div> OMG Document omg.2003-06-01, 2003.
         </div>
         <div class="bibliomixed e1276" xml:id="Simsion-2005">Simsion, Graeme, Grahm Witt 
            <div class="emphasis e1277">Data Modeling
               Essentials, Analysis, Design and Innovation
            </div>, Third Edition, Morgan
            Kaufmann Publishers, 2005. 
         </div>
         <div class="bibliomixed e1278" xml:id="Simsion-2007">Simsion, Graeme, 
            <div class="emphasis e1279">Data Modeling Theory and
               Practice
            </div>, Technics Publications, LLC, U.S.A, 2007.
         </div>
         <div class="bibliomixed e1280" xml:id="Sperberg-McQueen-2008">Sperberg-McQueen, C. M. 
            <div class="quote e1281">
               
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e1282" xlink:actuate="onRequest" xlink:href="http://www.balisage.net/Proceedings/vol1/html/Sperberg-McQueen02/BalisageVol1-Sperberg-McQueen02.html" xlink:show="new" xlink:type="simple">But wait, there's more!</div>
               
            </div> doi:
            <div class="biblioid doi e1283">10.4242/BalisageVol1.Sperberg-McQueen02</div>, Presented at Balisage: The Markup Conference, 12 - 15 August 2008. In
            Proceedings of Balisage: The Markup Conference (2008).
         </div>
         <div class="bibliomixed e1284" xml:id="Verelst-2004">Verelst, J. 
            <div class="quote e1285">Variability in Conceptual
               Modeling
            </div>, University of Antwerp, 2004.
         </div>
      </div>
   </div>
</div>