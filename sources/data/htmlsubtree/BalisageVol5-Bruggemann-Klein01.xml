<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#ReverseModelingforDomainDrivenEngineeringofPublishingTechnologyANCHOR" name="ReverseModelingforDomainDrivenEngineeringofPublishingTechnologyTOC">Reverse Modeling for Domain-Driven Engineering of Publishing Technology</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#AninstancegeneratorforbroadcastingproductionsmetadataANCHOR" name="AninstancegeneratorforbroadcastingproductionsmetadataTOC">An instance generator for broadcasting productions metadata</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#BroadcastingproductionsmetadataandtheirusecasesANCHOR" name="BroadcastingproductionsmetadataandtheirusecasesTOC">Broadcasting productions metadata and their use cases</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ThequestforthedomainmodelANCHOR" name="ThequestforthedomainmodelTOC">The quest for the domain model</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#LeveragingthedomainspecificmetamodelfortheinstancegeneratorANCHOR" name="LeveragingthedomainspecificmetamodelfortheinstancegeneratorTOC">Leveraging the domain-specific meta-model for the instance generator</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ConclusionANCHOR" name="ConclusionTOC">Conclusion</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#Reflection:ModelsmetamodelsanddomainsANCHOR" name="Reflection:ModelsmetamodelsanddomainsTOC">Reflection: Models, meta-models and domains</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#TranslatingXMLencodedprinterdataforinvoicesintosemanticallymeaningful%0AXMLANCHOR" name="TranslatingXMLencodedprinterdataforinvoicesintosemanticallymeaningful%0AXMLTOC">Translating XML-encoded printer data for invoices into semantically meaningful
                  XML</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#PatternsasasourceformetamodelsANCHOR" name="PatternsasasourceformetamodelsTOC">Patterns as a source for meta-models</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConclusionandfurtherworkANCHOR" name="ConclusionandfurtherworkTOC">Conclusion and further work</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#AcknowledgmentsANCHOR" name="AcknowledgmentsTOC">Acknowledgments</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#DedicationANCHOR" name="DedicationTOC">Dedication</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#LiteratureANCHOR" name="LiteratureTOC">Literature</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">Award</div>
         <div class="singletermTERMS">are</div>
         <div class="singletermTERMS">August 3 - 6, 2010</div>
         <div class="singletermTERMS">Anne</div>
         <div class="singletermTERMS">Andreas</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">Building site</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2010</div>
         <div class="singletermTERMS">Br√ºggemann-Klein</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">Composite</div>
         <div class="singletermTERMS">Conceptual Modeling for XML: A Survey</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">DemirelDA</div>
         <div class="singletermTERMS">Design Patterns</div>
         <div class="singletermTERMS">Data Modeling Theory and Practice</div>
         <div class="singletermTERMS">Dennis</div>
         <div class="singletermTERMS">Demirel</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">Introducing Design Patterns in XML Schemata</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">MainTitle</div>
         <div class="singletermTERMS">Model advisor</div>
         <div class="singletermTERMS">Making Hypermedia Work: A User's Guide to HyTime</div>
         <div class="singletermTERMS">MDA Distilled.</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">Programme</div>
         <div class="singletermTERMS">Pagano</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">String</div>
         <div class="singletermTERMS">Shopping mall</div>
         <div class="singletermTERMS">SPath: a path language for XML schema.</div>
         <div class="singletermTERMS">SPath: A Path Language for XML Schema.</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">Tamer</div>
         <div class="singletermTERMS">Tai</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
         <div class="singletermTERMS">Using UML To Define XML Document Types.</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">XML und Datenmodellierung.</div>
         <div class="singletermTERMS">XML Schema Best Practices</div>
         <div class="singletermTERMS">XML-based XML schema access.</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="ReverseModelingforDomainDrivenEngineeringofPublishingTechnologyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.2">
      <div class="title e1">Reverse Modeling for Domain-Driven Engineering of Publishing Technology</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2010</div>
            <div class="confdates e5">August 3 - 6, 2010</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">We report in this paper on a technique that we call reverse modeling. Reverse
               modeling starts with a conceptual model that is formulated in one or more generic
               modeling technologies such as UML or XML Schema. It abstracts from that model a custom,
               domain-specific meta-model and re-formulates the original model as an instance of
               the
               new meta-model. We demonstrate the value of reverse modeling with two case studies:
               One
               domain-specific meta-model facilitates design and user interface of a so-called instance
               generator for broadcasting productions metadata. Another one structures the translation
               of XML-encoded printer data for invoices into semantic XML. In a further section of
               this
               paper, we take a more general view and survey patterns that have evolved in the
               conceptual modeling of documents and data and that implicitly suggest sound
               meta-modeling constructs.
            </div>
            <div class="para e8">Taken together, the two case studies and the survey of patterns in conceptual models
               bring us one step closer to our superior goal of developing a meta-meta-modeling
               facility whose instances are custom meta-models for conceptual document and data models.
               The research that is presented in this paper brings forward a core set of elementary
               constructors that a meta-meta-modeling facility should provide.
            </div>
         </div>
         <div class="author e9">
            <div class="personname e10">
               <div class="firstname e11">Anne</div>
               <div class="surname e12">Br√ºggemann-Klein</div>
            </div>
            <div class="personblurb e13">
               <div class="para e14"></div>
            </div>
            <div class="affiliation e15">
               <div class="orgname e16">Fakult√§t f√ºr Informatik, Technische Universit√§t M√ºnchen</div>
            </div>
         </div>
         <div class="author e17">
            <div class="personname e18">
               <div class="firstname e19">Tamer</div>
               <div class="surname e20">Demirel</div>
            </div>
            <div class="personblurb e21">
               <div class="para e22"></div>
            </div>
            <div class="affiliation e23">
               <div class="orgname e24">Fakult√§t f√ºr Informatik, Technische Universit√§t M√ºnchenn</div>
            </div>
         </div>
         <div class="author e25">
            <div class="personname e26">
               <div class="firstname e27">Dennis</div>
               <div class="surname e28">Pagano</div>
            </div>
            <div class="personblurb e29">
               <div class="para e30"></div>
            </div>
            <div class="affiliation e31">
               <div class="orgname e32">Fakult√§t f√ºr Informatik, Technische Universit√§t M√ºnchen</div>
            </div>
         </div>
         <div class="author e33">
            <div class="personname e34">
               <div class="firstname e35">Andreas</div>
               <div class="surname e36">Tai</div>
            </div>
            <div class="personblurb e37">
               <div class="para e38"></div>
            </div>
            <div class="affiliation e39">
               <div class="orgname e40">Fakult√§t f√ºr Informatik, Technische Universit√§t M√ºnchen</div>
            </div>
         </div>
         <div class="legalnotice e41">
            <div class="para e42">Copyright ¬© 2010 by the authors.  Used with permission.</div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e43" xml:id="sec.Introduction">
         <div class="title e44">Introduction</div>
         <div class="para e45">Modeling is a pivotal activity in the engineering of software systems; it is the key
            method to deal with complexity, adaptivity requirements and change. Models support
            communication and drive software development processes.
         </div>
         <div class="para e46">In the Engineering Publishing Technology Group, we aim to leverage modeling and other
            proven methods of software engineering for document engineering and electronic publishing.
            One focus has been on the modeling of persistent data&nbsp;[
            <div class="xref e47" linkend="EPTatEML2007"></div>,
            <div class="xref e48" linkend="EPTatBalisage2008"></div>,
            <div class="xref e49" linkend="EPTatBalisage2009"></div>]. In a 2009 Balisage paper&nbsp;[
            <div class="xref e50" linkend="EPTatBalisage2009"></div>], we have discussed the relationships between conceptual
            data models and their implementations in an XML schema language; furthermore, we have,
            following current thinking in the field, posed three requirements for the modeling
            of
            persistent data:
         </div>
         <div class="itemizedlist e51">
            <div class="listitem e52">
               <div class="para e53">Modeling of persistent data must be integrated into system modeling.</div>
            </div>
            <div class="listitem e54">
               <div class="para e55">Modeling of persistent data must be independent of data implementation
                  technology.
               </div>
            </div>
            <div class="listitem e56">
               <div class="para e57">Modeling of persistent data should be amenable to forward engineering.</div>
            </div>
         </div>
         <div class="para e58">Our previous work and the three requirements cited above have been inspired by a
            long-standing vision of software engineering, namely to drive the development process
            by
            models that are systematically transformed into lower-level models and software artifacts,
            that has found its expression in the approach of model-driven
            architecture&nbsp;[
            <div class="xref e59" linkend="MellorMDADistilled"></div>]. Recently, the role of
            modeling in software engineering has been even further emphasized: The emerging software
            engineering discipline of domain-driven design&nbsp;[
            <div class="xref e60" linkend="EvansDDD"></div>] puts
            domain models at the heart of software development, letting them delineate so-called
            ubiquiteous languages that are used by domain experts and software engineers alike
            and that
            are embodied both in the code and in the user interface of systems. Hence, we should
            like
            to replace the last requirement in the list above by the following item:
         </div>
         <div class="itemizedlist e61">
            <div class="listitem e62">
               <div class="para e63">Models of persistent data should be amenable to being embodied in every aspect of
                  the system.
               </div>
            </div>
         </div>
         <div class="para e64">Over the last two years, in two projects we have deviated from the much-travelled
            road
            of modeling to support forward engineering. In fact, in both projects, we apply a
            technique
            that we call reverse modeling. Starting with a pre-existing conceptual model that
            is
            formulated in one or more generic modeling technologies such as UML or XML Schema,
            we
            abstract from that model a custom, domain-specific meta-model and re-formulate the
            original
            model as an instance of the new meta-model. In both cases, the new domain-specific
            meta-model explicitly captures salient points of the model that come to bear on system
            and
            interface design. We are convinced that in both cases reverse modeling leads to a
            better
            understanding of the domain and to a more flexible system that is resilient against
            future
            changes in the model.
         </div>
         <div class="para e65">This paper is organized into four further main sections. In the next section, we present
            our main case study. More precisely, we apply reverse modeling to broadcasting productions
            meta data and demonstrate, how the domain-specific meta-model that we develop reduces
            complexity when building a so-called instance generator for broadcasting productions
            meta
            data. In the section after that, we reflect on reverse modeling, arguing for
            domain-specific meta-models. The next section applies reverse modeling in the context
            of
            translating XML-encoded printer data of invoices into semantically meaningful XML.
            In this
            case study, the meta-model that we develop structures the procedural method of the
            translator. In a further section of this paper, we take a more general view and survey
            patterns that have evolved in the conceptual modeling of documents and data and that
            implicitly suggest sound meta-modeling constructs. Taken together, the two case studies
            and
            the survey of patterns in conceptual models bring us one step closer to our superior
            goal
            to develop a meta-meta-modeling facility whose instances are custom meta-models for
            domain
            document and data models. They bring forward a core set of elementary constructors
            that a
            meta-meta-modeling facility should provide.
         </div>
      </div><a name="AninstancegeneratorforbroadcastingproductionsmetadataANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e66" xml:id="sec.BMF">
         <div class="title e67">An instance generator for broadcasting productions metadata</div>
         <div class="para e68">In his Master's Thesis&nbsp;[
            <div class="xref e69" linkend="TaiMTh"></div>] project, Andreas Tai deals
            with several incarnations of a huge data model for broadcasting productions metadata,
            the
            Broadcast Metadata Exchange Format (BMF). The model incarnations are formulated in
            a number
            of meta-model technologies, among others UML, XML Schema and a domain-specific registry
            format; these incarnations are aligned with each other but are not equivalent, and
            the
            relationship between them is not documented in detail. Project goal is a so-called
            BMF
            instance generator; that is, editing support for XML instances of metadata that illustrate
            sections of the model by example. Intended users are domain experts who explore sections
            of
            the model by generating XML instances when devising mappings from other metadata models
            into BMF. The initial users are XML experts; yet it is considered a valuable asset
            if later
            users need to be conversant neither in XML nor in XML Schema. Use of typical schema-driven
            XML editors has been tried out, but has not been found particularly helpful; hence,
            it is
            ruled out. The BMF instance generator must be resilient against changes in the model.
            A
            domain-specific meta-model that is constructed by what we call reverse modeling is
            pivotal
            to the solution, as explained below.
         </div><a name="BroadcastingproductionsmetadataandtheirusecasesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e70">
            <div class="title e71">Broadcasting productions metadata and their use cases</div>
            <div class="para e72">The Broadcast Metadata Exchange Format (BMF) is a data model that has been developed
               over nearly a decade by the Institut f√ºr Rundfunktechnik (IRT, Institute for
               Broadcasting Technology). A universal format, BMF enables the platform independent
               exchange of metadata in IT-based TV production, serving as a lingua franca that
               intermediates between different metadata formats in the domain of TV production.
            </div>
            <div class="para e73">Briefly, BMF consists of types of different metadata sets such as 
               <div class="emphasis e74" role="ital">Programme</div> that group metadata elements such as 
               <div class="emphasis e75" role="ital">MainTitle</div> or 
               <div class="emphasis e76" role="ital">Award</div>. Metadata
               elements associate with simple data types or with other metadata sets. 
               <div class="xref e77" linkend="bmfDataModelExample"></div> demonstrates that metadata element 
               <div class="emphasis e78" role="ital">MainTitle</div> is associated with simple type 
               <div class="emphasis e79" role="ital">String</div> and that metadata element 
               <div class="emphasis e80" role="ital">Award</div>
               is associated with a metadata set that is also called 
               <div class="emphasis e81" role="ital">Award</div>.
            </div>
            <div class="figure e82" xml:id="bmfDataModelExample">
               <div class="title e83">A segment of the BMF model in UML class-diagram notation</div>
               <div class="mediaobject e84">
                  <div class="imageobject e85">
                     <div class="metaBox e86"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e144').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e144" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e86'
                              </span><span class="metaAttribute">fileref='../../../vol5/graphics/Bruggemann-Klein01/Bruggemann-Klein01-001.png'
                              </span><span class="metaAttribute">format='png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
                  <div class="caption e87">
                     <div class="para e88"></div>
                  </div>
               </div>
            </div>
            <div class="para e89">BMF is formulated with different modeling technologies. It was first developed as
               an
               entity-relationship diagram which later has been replaced with a UML class diagram.
               To
               leverage data exchange by means of XML documents an XML Schema was dynamically generated
               from the BMF UML class diagram. Furthermore the data model is currently being registered
               at the Society of Motion Picture and Television Engineers (SMPTE), which requires
               its
               own format for data models [
               <div class="xref e90" linkend="SMPTE395M"></div>,
               <div class="xref e91" linkend="SMPTE335M"></div>,
               <div class="xref e92" linkend="SMPTERP210"></div>].
            </div>
            <div class="para e93">BMF meets its proclaimed goal of covering every use case of metadata exchange in the
               domain of TV production at the price of being large and complex. Yet there are related
               use cases that BMF on its own does not support well, due to its complexity. In this
               paper, we are concerned with the specific such use case of generating sample XML-encoded
               metadata that conform to BMF, e.g.&nbsp;for the purposes of documentation or of
               designing mappings between BMF and other metadata formats. Each of the sample documents
               provides a keyhole view into a small part of BMF. What is needed tool-wise for
               generating such sample documents is a facility to deeply zoom into parts of BMF, to
               select a few illustrative building blocks and to instantiate them, the focus being
               on
               structures that may be filled with ad-hoc or dummy content.
            </div>
            <div class="para e94">In the experience of the BMF modeling team at IRT, generic schema-aware XML editors
               are inadequate tools for the specific task of generating sample metadata. This seems
               to
               be due to the discrepancy in the sizes of the large BMF model and the relatively tiny
               focus that is relevant for the sample, making it quite time-consuming to generate
               sample
               documents even for XML experts who otherwise routinely use schema-aware editors.
            </div>
            <div class="para e95">Hence, the group decided to look into specific editing support for BMF sample
               instances, initiating the project ‚ÄúBMF instance generator‚Äù, which
               became the topic of Andreas Tai's Master's Thesis&nbsp;
               <div class="xref e96" linkend="TaiMTh"></div> at
               TU&nbsp;M√ºnchen.
            </div>
            <div class="para e97">There are two main requirements for the instance generator: First, it must be
               resilient against changes in the BMF model. More precisely, it must be able to adapt
               itself to any new version of the BMF XML Schema. Second, it must cut down time and
               effort to generate sample metadata that conform to the BMF model.
            </div>
            <div class="para e98">In the remainder of this section, we report on design and implementation of the BMF
               instance generator before drawing conclusions.
            </div>
         </div><a name="ThequestforthedomainmodelANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e99">
            <div class="title e100">The quest for the domain model</div>
            <div class="para e101">The leitmotiv question that needs to be addressed in the project is: What makes the
               generation of BMF instances so difficult? Apparently, problems that arise from the
               inherent complexity and sheer size of the BMF model are aggravated by the choice of
               technologies that is used to formulate the model, namely UML and XML Schema. These
               technologies bring a complexity to the model that is more due to the intrinsic logic
               of
               these technologies than to the underlying domain model that they express. They obscure
               the domain model of BMF. Furthermore, the different technologies that are in use to
               represent model information lead to inconsistent conclusions about the BMF domain
               model
               itself. One point of inconsistency is the order of metadata elements in metadata sets:
               In the UML class diagram, metadata elements are designed as class attributes which
               in
               UML are unordered; in the XML Schema metadata elements are attached to metadata sets
               within sequence content models that impose order on them.
            </div>
            <div class="para e102">From this analysis, there arises naturally the question what the real domain model
               of
               BMF is. In order to get the domain aspect of the model back into focus, we need to
               strip
               BMF from the specifics of the modeling technologies that it is formulated in and to
               arrive at a more direct formulation of the model than the BMF UML class diagram and
               BMF
               XML Schema provide. In a process that we call reverse modeling, we first identify
               the
               building principles that constitute BMF. These building principles must meet the
               following requirements:
            </div>
            <div class="itemizedlist e103">
               <div class="listitem e104">
                  <div class="para e105">They apply to every incarnation of BMF.</div>
               </div>
               <div class="listitem e106">
                  <div class="para e107">They represent the concept that the modeling team of BMF has of the
                     model.
                  </div>
               </div>
               <div class="listitem e108">
                  <div class="para e109">They are expressed as directly as possible, and certainly independently of
                     implementation technology.
                  </div>
               </div>
            </div>
            <div class="para e110">Naturally, there is no magic wand for reverse modeling. We just have to apply sound
               software engineering practices. First, we carefully analyze the existing incarnations
               of
               BMF, namely the BMF UML class diagram and the BMF XML Schema as well as the registration
               data for BMF at SMPTE. Second, we conduct extensive interviews with the modeling team
               of
               BMF on the conceptual ideas behind the model. The result is a small set of rules the
               most important of which we describe in natural language:
            </div>
            <div class="itemizedlist e111">
               <div class="listitem e112">
                  <div class="para e113">BMF consists of types of metadata sets that group metadata elements.</div>
               </div>
               <div class="listitem e114">
                  <div class="para e115">The types of metadata sets are partitioned into packages.</div>
               </div>
               <div class="listitem e116">
                  <div class="para e117">Metadata elements are unordered</div>
               </div>
               <div class="listitem e118">
                  <div class="para e119">Metadata elements reference either simple data types or metadata sets.</div>
               </div>
               <div class="listitem e120">
                  <div class="para e121">The existance of a metadata set that is referenced from a metadata element can
                     be of one of two types: dependent on or independent of the existence of the
                     referer.
                  </div>
               </div>
            </div>
            <div class="para e122">We view the building principles as a model for the domain model and hence as a
               domain-specific meta-model. With such a domain-specific meta-model, we restrict the
               terminology of the model to the domain. Instead of generic terms such as classes,
               attributes or complex type definitions we only use terms of the meta-model such as
               metadata set and metadata element.
            </div>
            <div class="para e123">The meta-model reduces complexity in two ways: First, it facilitates a direct
               expression of the model that is independent of implementation technology. Second,
               it
               explicitly defines and limits the building principles that are used in BMF, thus
               imposing structure on the domain model and, hence, raising understanding to an
               accidental to a more principled level.
            </div>
         </div><a name="LeveragingthedomainspecificmetamodelfortheinstancegeneratorANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e124">
            <div class="title e125">Leveraging the domain-specific meta-model for the instance generator</div>
            <div class="para e126">Our quest for the BMF domain model has led us to discover a domain-specific
               meta-model of which the BMF domain model is an instance. We demonstrate in this section
               how we can leverage the meta-model for the instance generator, reducing complexity
               and
               making the instance generator resilient against changes in the BMF model.
            </div>
            <div class="para e127">We structure the instance generator into the following three components:</div>
            <div class="itemizedlist e128">
               <div class="listitem e129">
                  <div class="para e130">
                     
                     <div class="emphasis e131" role="bold">Model advisor</div>: a component that provides all
                     model-related information.
                  </div>
               </div>
               <div class="listitem e132">
                  <div class="para e133">
                     
                     <div class="emphasis e134" role="bold">Shopping mall</div>: a component that lets users select
                     model elements for later use.
                  </div>
               </div>
               <div class="listitem e135">
                  <div class="para e136">
                     
                     <div class="emphasis e137" role="bold">Building site</div>: a component that enables users to
                     build instances of the BMF model.
                  </div>
               </div>
            </div>
            <div class="para e138">To illustrate the role of the domain-specific meta-model we look a bit closer at the
               implementation details of the three components.
            </div>
            <div class="para e139">The model advisor is the key component of the instance generator. The component
               provides an interface to answer all questions that might be directed at the BMF domain
               model, for example:
            </div>
            <div class="itemizedlist e140">
               <div class="listitem e141">
                  <div class="para e142">Which metadata sets are available?</div>
               </div>
               <div class="listitem e143">
                  <div class="para e144">Which metadata elements are required for a metadata sets?</div>
               </div>
               <div class="listitem e145">
                  <div class="para e146">Does a metadata element reference a simple type value or another metadata set?
                     
                  </div>
               </div>
            </div>
            <div class="para e147">By the project requirements, the instance generator and, hence, the model advisor
               must refer to the BMF XML Schema for model information. Hence, two questions arise:
               First, the access question, how do we query XML Schema? Second, the interface question,
               how do we relate the BMF domain model to the BMF XML Schema?
            </div>
            <div class="para e148">As to the access question, one would expect to be able to use XML technology for
               that. Indeed, the work of Wilde and Michel on SCX, an alternative XML representation
               of
               XML Schema&nbsp;[
               <div class="xref e149" linkend="WildeMichelXMLbased"></div>], and SPATH, an XSLT
               library to query XML schema components&nbsp;[
               <div class="xref e150" linkend="WildeMichelSpath1"></div>,
               <div class="xref e151" linkend="WildeMichelSpath2"></div>], looks promising. Unfortunately, there is no
               full implementation yet, and development seems to have been discontinued. Therefore,
               we
               resort to a programming-language interface to XML Schema, namely the Java framework
               Eclipse XSD. Eclipse XSD is part of the Eclipse Modeling Framework (EMF) and closely
               mirrors the abstract data model of XML Schema.
            </div>
            <div class="para e152">As to the interface question, technically, the model advisor exposes a query
               interface of Java methods for dynamic access of the BMF XML Schema. The model advisor's
               class model defines the interface in terms of the
               domain meta-model, with query methods refering to domain concepts such as metadata
               sets
               and metadata elements, not to XML Schema concepts such as type definitions and content
               models; see 
               <div class="xref e153" linkend="modelAdvisorSignatureExample"></div>. The implementation is based
               on Eclipse XSD.
            </div>
            <div class="figure e154" xml:id="modelAdvisorSignatureExample">
               <div class="title e155">Signature of a Java method that queries the BMF domain model</div>
               <div class="programlisting e156" xml:space="preserve">List&lt;String&gt; getMetadataSetNames(String packageName)</div>
            </div>
            <div class="para e157">Hence, the query interface encapsulates the mapping between the BMF domain model and
               its XML Schema incarnation, and the model advisor's system of classes acts as an
               adaption layer that takes care of changes in the BMF XML Schema. Thus, the model advisor
               is resilient against changes in the BMF XML Schema as long as new versions of the
               schema
               still conform to the domain meta-model.
            </div>
            <div class="para e158">To illustrate this with examples, the system will adapt if new types of metadata sets
               are defined or the selection of metadata elements within a type of metadata set is
               modified, because such a change in the domain model only requires Eclipse XSD to refer
               to a different schema at startup time or even at run time. The system will, however,
               not
               be able to adapt if a new kind of metadata element container is introduced that requires
               metadata elements to be ordered, because such a change in the domain meta-model demands
               an extension of the query interface. 
            </div>
            <div class="para e159">With its stacked architecture of access layer based on Eclipse XSD and adaption layer
               implementing a domain-specific query interface, the model advisor dynamically exposes
               the BMF domain model in its XML Schema
               incarnation&nbsp;‚Äî&nbsp;robust in the face of changes in the
               domain model that respect the boundaries of the domain meta-model.
            </div>
            <div class="para e160">The other two components of the instance generator, namely the shopping mall and the
               building site, obtain the model information they need through the model advisor.
            </div>
            <div class="para e161">The shopping mall component of the instance generator offers a graphical user
               interface to explore the BMF domain model and to select the metadata sets and metadata
               elements of interest; see 
               <div class="xref e162" linkend="browsePackages"></div> and 
               <div class="xref e163" linkend="addElements"></div>. The selected model elements are put in a shopping cart for
               later use in the instance generation process. The shopping-mall interface is dynamically
               created by querying the model advisor. Whereas the model advisor gives the programmer
               access to the domain model, the shopping mall visualises the domain model for the
               end
               user.
            </div>
            <div class="para e164">Please note how the shopping mall interface integrates domain concepts into the
               shopping-mall metaphor.
            </div>
            <div class="figure e165" xml:id="browsePackages">
               <div class="title e166">The shopping mall user interface &nbsp; Shopping for metadata sets</div>
               <div class="mediaobject e167">
                  <div class="imageobject e168">
                     <div class="metaBox e169"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e290').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e290" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e169'
                              </span><span class="metaAttribute">fileref='../../../vol5/graphics/Bruggemann-Klein01/Bruggemann-Klein01-002.png'
                              </span><span class="metaAttribute">format='png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
                  <div class="caption e170">
                     <div class="para e171"></div>
                  </div>
               </div>
            </div>
            <div class="figure e172" xml:id="addElements">
               <div class="title e173">The shopping mall user interface &nbsp; Adding metadata elements to
                  metadata set
               </div>
               <div class="mediaobject e174">
                  <div class="imageobject e175">
                     <div class="metaBox e176"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e298').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e298" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e176'
                              </span><span class="metaAttribute">fileref='../../../vol5/graphics/Bruggemann-Klein01/Bruggemann-Klein01-003.png'
                              </span><span class="metaAttribute">format='png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
                  <div class="caption e177">
                     <div class="para e178"></div>
                  </div>
               </div>
            </div>
            <div class="para e179">The shopping-mall interface has been adopted for uses beyond the task of instance
               generation. The collecting of metadata sets and metadata elements into a shopping
               cart
               provides a new way of browsing through the domain model, notably advancing ease of
               access to the model even for the modeling experts at IRT.
            </div>
            <div class="para e180">We are now turning our attention to the third instance generator component, the
               building site. This component is able to open a shopping cart that has previously
               been
               saved in the shopping mall. It tries then to build a BMF instance from the cart's
               content, following user hints that might also be stored in the cart (see 
               <div class="xref e181" linkend="instanceTree"></div>). Afterwards, it offers a graphical user interface that lets
               users edit BMF instances with the help of context-sensitive menues that also are created
               dynamically and indirectly, by querying the domain model through the model
               advisor.
            </div>
            <div class="figure e182" xml:id="instanceTree">
               <div class="title e183">The building site user interface &nbsp; Displaying an automatically
                  generated BMF instance
               </div>
               <div class="mediaobject e184">
                  <div class="imageobject e185">
                     <div class="metaBox e186"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e313').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e313" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e186'
                              </span><span class="metaAttribute">fileref='../../../vol5/graphics/Bruggemann-Klein01/Bruggemann-Klein01-004.png'
                              </span><span class="metaAttribute">format='png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
                  <div class="caption e187">
                     <div class="para e188"></div>
                  </div>
               </div>
            </div>
            <div class="para e189">Once more, the objects that the user is dealing with, in this case metadata set and
               metadata element instances, are presented directly as domain objects, independently
               of
               implementation technology. The target representation of an XML instance that conforms
               to
               the BMF XML Schema is created by an export modul. This divide-and-conquer strategy
               pays
               itself off when further output formats need to be supported. As a case in point, the
               building site component offers alternative export as a GraphML document that can then
               be
               visualized with the helpf of the prefuse toolkit; see 
               <div class="xref e190" linkend="instanceVisualisation"></div>. This kind of visualisation proves to be
               instrumental in understanding the inter-dependencies of model elements in BMF, again
               on
               a conceptual domain level.
            </div>
            <div class="figure e191" xml:id="instanceVisualisation">
               <div class="title e192">Visualizing a BMF instance in GraphML format</div>
               <div class="mediaobject e193">
                  <div class="imageobject e194">
                     <div class="metaBox e195"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e325').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e325" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e195'
                              </span><span class="metaAttribute">fileref='../../../vol5/graphics/Bruggemann-Klein01/Bruggemann-Klein01-005.png'
                              </span><span class="metaAttribute">format='png'
                              </span><span class="metaAttribute">width='100%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
                  <div class="caption e196">
                     <div class="para e197"></div>
                  </div>
               </div>
            </div>
         </div><a name="ConclusionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e198">
            <div class="title e199">Conclusion</div>
            <div class="para e200">In this section, we have presented the method of reverse modeling, as summarized in
               
               <div class="xref e201" linkend="reverseModeling"></div>. Working backwards from pre-existing model
               incarnations that only implicitly define the domain model, we have identified the
               domain-specific building principles of the implied domain model, thus coming up with
               a
               domain-specific meta-model, from which an explicit domain model can be derived by
               instantiation.
            </div>
            <div class="figure e202" xml:id="reverseModeling">
               <div class="title e203">Reverse modeling</div>
               <div class="mediaobject e204">
                  <div class="imageobject e205">
                     <div class="metaBox e206"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e340').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e340" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e206'
                              </span><span class="metaAttribute">fileref='../../../vol5/graphics/Bruggemann-Klein01/Bruggemann-Klein01-006.png'
                              </span><span class="metaAttribute">format='png'
                              </span><span class="metaAttribute">width='100%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
                  <div class="caption e207">
                     <div class="para e208"></div>
                  </div>
               </div>
            </div>
            <div class="para e209">We have also demonstrated how we can follow a divide-and-conquer strategy and
               leverage the domain-specific meta-model for the BMF instance generator, so that the
               two
               main project requirements are met. Consistently reflecting the domain-specific
               meta-model in the system design and the user interface also leads to the unexpected
               but
               highly welcome benefit that also domain experts who are not conversant in XML technology
               can work easily and productively with the BMF instance generator.
            </div>
            <div class="para e210">It is also worth mentioning that reverse modeling and the resulting domain-specific
               meta-model raised the level of understanding of the BMF data model. They made a very
               sophisticated data model more usable and manageable. We wish to emphasise that usability
               is not only an important factor in the design of user interfaces. It is also a decisive
               condition for the adoption of a new data model. In our experience, the focussing on
               the
               domain aspect through reverse modeling has made BMF more accessible to domain users,
               especially to those who do not have knowledge in modeling technologies such as UML
               or
               XML.
            </div>
         </div>
      </div><a name="Reflection:ModelsmetamodelsanddomainsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e211" xml:id="sec.Reflection">
         <div class="title e212">Reflection: Models, meta-models and domains</div>
         <div class="para e213">As the name suggests, reverse modeling constructs a domain model working backwards
            from
            one or more legacy incarnations of a pre-existing model, that may be defined only
            implicitly through implementation languages such as XML Schema. We have found in the
            BMF
            instance generator project that the real value of reverse modeling lies not so much
            in the
            conceptual model itself but in the domain-specific building principles that allow
            conceptual entities to be composed into larger entities. Such building principles
            are
            customarily considered to be part of the meta-model. This raises the question how
            domain-specific building principles AKA constructors on the meta-model level are best
            handled when modeling a domain.
         </div>
         <div class="para e214">By way of an example, let us suppose that we wish to model some entity as a rigid
            record
            structure that calls for a number of named sub-entities, exactly one for each name
            from a
            pre-defined list, without restricting the order. In the case that the sub-entities
            are each
            simply typed, such record structures correspond precisely to tables in first normal
            form in
            the relational data model.
         </div>
         <div class="para e215">Naturally, such a model can be expressed in most modeling languages or meta-models,
            including UML, XML Schema, and Relax NG, and so can a more flexible record structure
            that
            allows sub-entities to be optional, or an even more rigid record structure that imposes
            order on the sub-entities. The point is that generic meta-models such as UML or XML
            Schema
            differentiate between these variants of record structures only implicitly, for example
            by
            consistently affixing specific occurence indicators to sub-entity declarations. In
            a way,
            they simulate a specific variant of record structures with their generic operators
            without
            making the common building principles behind them explicit by at least naming or ideally
            formally defining them.
         </div>
         <div class="para e216">The common ground between two record structures, one with sub-entities A, B and C
            and
            the other with sub-entities D an E is the fact that they 
            <div class="emphasis e217" role="ital">are</div> record structures. What is missing in meta-models such as UML, XML
            Schema or Relax NG for this scenario is the ability to explicitly provide a building
            principle for record structures that can be named in a domain-specific way and that
            can be
            parameterized by sub-entities such as A, B and C in one case and D and E in the other,
            similarly to parameterized types or classes in programming languages.
         </div>
         <div class="para e218">In contrast, in a meta-model that is customized to a domain that exhibits rigid record
            structures we envision a custom operator that directly and explicitly constructs such
            a
            record structure from its ingredients. In another scenario that displays more flexible
            record structures, again there would be a custom operator that caters to flexible
            record
            structures. And in a scenario that exhibits both rigid and flexible record structures,
            there would, of course, be two custom operators, one for each type of record structure.
            We
            require that in the meta-model we can customize operators: We wish to name them and
            to
            customize their sub-components as fits the domain. 
         </div>
         <div class="para e219">In the BMF meta-model, we make use of a set operator who assembles named members that
            each can be either of simple type or of set type. We have customized it by naming
            the set
            operator ‚Äúmetadata set‚Äù and its members ‚Äúmetadata
            elements‚Äù. The BMF model instantiates the meta-model by recursively giving names
            to metadata sets and their members and by also stating members' types.
         </div>
         <div class="para e220">We argue in this paper that, compared to generic meta-models, domain-specific
            meta-models that directly and explicity express domain-specific building rules may
            give
            rise to more concise and less complex models that better capture the essentials of
            a domain
            and better support system development.
         </div>
      </div><a name="TranslatingXMLencodedprinterdataforinvoicesintosemanticallymeaningful%0AXMLANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e221" xml:id="sec.DADemirel">
         <div class="title e222">Translating XML-encoded printer data for invoices into semantically meaningful
            XML
         </div>
         <div class="para e223">In this section, we briefly present a second case study even though it is not as fully
            worked as the BMF study. Yet we feel that it helps to prove the point of the paper.
         </div>
         <div class="para e224">In his Diploma Thesis&nbsp;[
            <div class="citation e225" linkend="DemirelDA">DemirelDA</div>]
            project, Tamer Demirel tackles the problem of up-converting XML-encoded printer data
            for
            invoices into semantically meaningful XML. The XML-encoded printer data are gathered
            from
            PDF versions of the invoices with the help of publicly available XML printer drivers,
            with
            the XML data representing the invoice data at page level, in terms of positions, font
            information and text strings. The target XML documents need to conform to an XML Schema
            for
            invoices.
         </div>
         <div class="para e226">Related invoice data from a single source share a common layout that facilitates
            analysis and offers the opportunity to up-translate the low-level printer data into
            higher-level, semantically meaningful XML data. An XSLT transformation program can
            be
            controlled by configuration data that express the common layout. In his Diploma Thesis
            project, Tamer Demirel designs and implements an Excel tool that enables clerical
            workers
            to capture the common layout of related invoice data. These data are saved in XML
            format
            and then transformed, via XSLT, into an XSLT program that up-translates any invoice
            data
            instances that conform to the common layout from the printer data into established
            workflows ‚Äúon the side‚Äù, without interfering with non-XML
            practices.
         </div>
         <div class="para e227">How is all this related to the topic of this paper, reverse modeling? The link is
            in the
            XML Schema for the target invoice data. This schema models a flexible record structure
            similarly to the one we have presented in the reflection section of this paper, with
            the
            twist that some field values are not of primitive but of tabular type. Tables generalize
            flexible record structures by allowing for repeated sets of values. This description
            gives
            rise to a meta-model for invoice data that structurally happens to be quite similiar
            to the
            meta-model for BMF data that we have introduced earlier. Note, though, that the meta-model
            is customized to the business domain in its use of terminology.
         </div>
         <div class="para e228">In Tamer Demirel's Diploma Thesis project, the meta-model serves a double purpose:
            First, it structures system design and algorithms for data analysis by dividing all
            tasks
            into the two separate concersn of record structures and tables. Second, it makes the
            work
            resilient against change in the schema, since it can be adapted to any schema that
            follows
            the meta-model.
         </div>
      </div><a name="PatternsasasourceformetamodelsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e229" xml:id="sec.Patterns">
         <div class="title e230">Patterns as a source for meta-models</div>
         <div class="para e231">In the previous two sections, we propose two custom meta-models for domain models
            and
            demonstrate how to leverage them for two specific publishing applications. In this
            section,
            we take a more general view and survey patterns that have evolved in the conceptual
            modeling of documents and data and that implicitly suggest sound meta-modeling constructs.
            Taken together, these three sections bring us one step closer to our superior goal
            to
            develop a meta-meta-modeling facility whose instances are custom meta-models for domain
            document and data models. They accomplish that by identifying a core set of elementary
            constructors that a meta-meta-modeling facility should provide.
         </div>
         <div class="para e232">Maler and El&nbsp;Andaloussi in their early seminal work on document
            modeling&nbsp;[
            <div class="xref e233" linkend="MalerEtAlDTDModeling"></div>] propose to classify
            document constituents into one of four categories, which we call metadata, organizational
            items, information items and information snippets. Document constituents in any of
            the four
            categories exhibit specific structures which today would be called patterns.
         </div>
         <div class="para e234">Metadata are commonly blocked together and associated with the document as a whole
            or
            with its major divisions, but may also be associated with more fine-grained document
            constituents. As the name ‚Äúmetadata‚Äù implies, they hold information
            about a document constituent rather than being part of it. Typical high-level metadata
            are
            author, publisher, publication date and so on as standardized by the Dublin Core initiative
            and others. Examples for low-level metadata are the height, depth or format of a picture.
            Metadata are typically structured as the flexible type of records that we have used
            above
            as an example in the reflection section above.
         </div>
         <div class="para e235">Organizational items structure a document into high-level units. They typically form
            a
            hierarchy, of which each level is organized as a sequence of specific and often repeatable
            items. Typical organizational items are books with frontmatter, a number of chapters
            and
            backmatter, of which each chapter is organised into a title, a number of introductory
            paragraphs and a number of sections.
         </div>
         <div class="para e236">Information items are smaller units of discourse that can be semantically understood
            out
            of context, such as paragraphs, lists, or quotations. Characteristically, an organizational
            item of the lowest level will be allowed to contain an arbitrary number of information
            items whose type may be freely chosen from a repertoire.
         </div>
         <div class="para e237">Information items may be shallowly organized into sub-items, as a list is organised
            into
            list items, but will eventually contain just text, possibly mixed with the smallest
            and
            lowest type of document constituents, namely information snippets.
         </div>
         <div class="para e238">Finally, information snippets are small units of information that normally cannot
            be
            semantically interpreted out of context. Typical information snippets are emphasized
            phrases, cross references and technical terms. Characteristically, information snippets
            may
            contain text and possibly further information snippets that are freely chosen from
            some
            repertoire.
         </div>
         <div class="para e239">A custom meta-model could allow modelers to classify document constituents into any
            of
            the four categories and to further constrain their type in accordance with the typical
            structures of their category. This could be another use for HyTime's concept of
            architectural forms&nbsp;[
            <div class="xref e240" linkend="HyTimeBook"></div>].
         </div>
         <div class="para e241">Speaking of information snippets, their characteristic recursive structure of stretches
            of text interspersed with lower-level information snippets are aptly described by
            the data
            modeling pattern&nbsp;[
            <div class="xref e242" linkend="GammaEtAlDesignPatterns"></div>] called
            
            <div class="emphasis e243">Composite</div>, as has been pointed out in a 2007 Extreme Markup
            Languages Paper&nbsp;[
            <div class="xref e244" linkend="EPTatEML2007"></div>]. A Composite constructor would
            be a valuable tool in a meta-meta-model facility.
         </div>
         <div class="para e245">Some work has been done on implementational patterns that are applicable to models
            written in XML Schema&nbsp;[
            <div class="xref e246" linkend="KhanEtAlSchemaDesignPatterns"></div>,
            <div class="xref e247" linkend="LainevoolXMLPatterns"></div>,
            <div class="xref e248" linkend="StephensonBestPractices"></div>]. Examples
            are the patterns Russion Doll, Venetian Blind, Salami Slice and Garden of Eden, the
            four
            possibilities that arise when combining local or global element declarations with
            local or
            global type definitions, respectively. In further studies, we are going to discuss,
            if any
            of these patterns can be usefully ‚Äúlifted‚Äù from the implementational
            to a conceptual level. We will also mine the literature on data modeling, particularly
            the
            foundational book by Simsion&nbsp;[
            <div class="xref e249" linkend="SimsionDataModeling"></div>] for
            patterns in data modeling that also apply to document modeling.
         </div>
      </div><a name="ConclusionandfurtherworkANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e250" xml:id="sec.FurtherWork">
         <div class="title e251">Conclusion and further work</div>
         <div class="para e252">A number of modeling languages or meta-models have been used in the XML context, mostly
            with the goal of integrating XML Schema as an implementation technology into the
            development of XML-based systems. Neƒçask√Ω&nbsp;[
            <div class="xref e253" linkend="NecaskyConceptualModeling"></div>] surveys conceptual modeling languages that extend
            the entity-relationship model. Bernauer et al.&nbsp;[
            <div class="xref e254" linkend="BernauerXMLSchemaUML"></div>] survey methods of integrating XML Schema into modeling
            with UML. The conference series Extreme Markup Languages and Balisage offer a number
            of
            papers in the area [
            <div class="xref e255" linkend="KimberEtAlUML2DTD"></div>,
            <div class="xref e256" linkend="EPTatBalisage2009"></div>,
            <div class="xref e257" linkend="BaumanBalisage2009"></div>], the latter introducing a subset of
            Guizzardi's&nbsp;[
            <div class="xref e258" linkend="GuizzardiUFO"></div>] Unified Foundational Ontology as
            a conceptual modeling language on a layer of abstraction above UML. All these languages
            are
            of a generic nature; that is, their meta-models only offer generic constructors that
            cannot
            be customized to the domain.
         </div>
         <div class="para e259">We find it beneficial to put modeling into a larger context, taking up ideas from
            domain-driven design. We put forward the notion of domain-specific meta-models that
            capture
            building principles of domains. This raises the larger research question of a
            meta-meta-modeling facility, instances of which are domain-specific meta-models. We
            have
            identified potential constructors of a meta-meta-modeling facility by doing reverse
            modeling in two case studies and by studying patterns in conceptual models that can
            be
            abstracted into constructors.
         </div>
         <div class="para e260">Benefits of domain-specific meta-models are: Clarity of unterstanding, reduction of
            complexity, support of system design and guidance for user interfaces.
         </div>
         <div class="para e261">In our work at EPT, we will futher explore customized meta-models. We intend to build
            (or even generate) editors for domain-specific meta-models, for example for forms
            documents. And we will formalize meta-models (that is, define a meta-meta-model),
            probably
            using abstract state machines&nbsp;[
            <div class="xref e262" linkend="ASMBook"></div>] as a
            technology-neutral specification language.
         </div>
      </div><a name="AcknowledgmentsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e263" xml:id="sec.Acknowledgments">
         <div class="title e264">Acknowledgments</div>
         <div class="para e265">We extend our heartfelt thanks to BMF project leader Andreas Ebner as well as to Rico
            Zimmermann und Christoph Nufer at Institut f√ºr Rundfunktechnik for expertise, commitment
            and support.
         </div>
         <div class="para e266">We also gladly acknowledge the long-standing collaboration with Werner Simon and
            Thorsten Reinheimer of ExxTainer AG, who suggested and sponsored Tamer Demirel's Diploma
            Thesis project. We appreciate their vision regarding XML technology in business and
            their
            competent and engaged supervision of students.
         </div>
      </div><a name="DedicationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e267" xml:id="sec.Dedication">
         <div class="title e268">Dedication</div>
         <div class="para e269">The first author of this paper, Anne Br√ºggemann-Klein, dedicates the paper to colleague
            and friend Professor Derick Wood, PhD, on occasion of his 70th birthday this year.
            Derick
            has been a most influentical scientific mentor to me. I have learned from him much
            that I
            know about the English language and scientific writing, and I enjoyed our long-standing
            and
            quite successful research collaboration. I also appreciate that through Derick and
            his
            wife, Mary Chen, I got a bit of an inside view of Canada and Hongkong. Thank you!
         </div>
      </div><a name="LiteratureANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e270">
         <div class="title e271">Literature</div>
         <div class="bibliomixed e272" xml:id="BaumanBalisage2009" xreflabel="B09">B.T. Bauman:
            
            <div class="emphasis e273">Prying Apart Semantics and Implementation: Generating XML Schemata directly
               from ontologically sound conceptual models.
            </div> Balisage 2009. Available from
            http://www.balisage.net/Proceedings/. doi: 
            <div class="biblioid doi e274">10.4242/BalisageVol3.Bauman01</div>
         </div>
         <div class="bibliomixed e275" xml:id="BernauerXMLSchemaUML" xreflabel="BKK04">M. Bernauer,G.
            Kappel, G. Kramler: 
            <div class="emphasis e276"> Representing XML Schema in UML‚ÄîA Comparison of
               Approaches
            </div>. Technical Report Business Infomatics Group at TU Wien 2004.
            Available from
            http://www.big.tuwien.ac.at/research/publications/2004/0304.pdf.
         </div>
         <div class="bibliomixed e277" xml:id="ASMBook" xreflabel="BS03">E. B√∂rger and R. St√§rk: 
            <div class="emphasis e278">Abstract
               State Machines. A Method for High-Level System Design and Analysis
            </div>.
            Springer-Verlag 2003. 
         </div>
         <div class="bibliomixed e279" xml:id="EPTatEML2007" xreflabel="BST07">A. Br√ºggemann-Klein, Th. Sch√∂pf,
            K. Toni: 
            <div class="emphasis e280" role="ital">Principles, Patterns and Procedures of XML Schema Design
               ‚Äî Reporting from the XBlog Project.
            </div> Extreme Markup Languages 2007.
            Available from http://conferences.idealliance.org/extreme/.
         </div>
         <div class="bibliomixed e281" xml:id="EPTatBalisage2008" xreflabel="ES08">A. Br√ºggemann-Klein, L.
            Singer: 
            <div class="emphasis e282" role="ital">Hypertext Links and Relationships in XML
               Databases.
            </div> Presented at Balisage: The Markup Conference 2008, Montr√©al,
            Canada, 2008, http://www.balisage.net/. Available from
            http://hyquery.ls-softworks.de/HyperDataSystemsBalisage2008.pdf. doi: 
            <div class="biblioid doi e283">10.4242/BalisageVol1.Bruggemann-Klein01</div>
         </div>
         <div class="bibliomixed e284" xml:id="C01" xreflabel="CarlsonXMLAppsUML">D. Carlson: 
            <div class="emphasis e285" role="ital">Modeling XML Applications with UML: Practical E-Business
               Applications.
            </div> Redwood City, Addison Wesley Longman Publishing,
            2001.
         </div>
         <div class="bibliomixed e286" xml:id="ConradEtAlXMLConceptualModeling" xreflabel="CSF00">R. Conrad, D. Scheffner, J.-C. Freytag. XML
            Conceptual Modeling Using UML. In A.H.F. Laender, S.W. Liddle, V.C. Storey (eds),
            
            <div class="emphasis e287" role="ital">International Conference on Conceptual Modeling (ER 2000)</div>. LNCS
            1920, pp. 558‚Äî571. Springer-Verlag 2000. doi: 
            <div class="biblioid doi e288">10.1007/3-540-45393-8_40</div>
         </div>
         <div class="bibliomixed e289" xml:id="DemirelDA" xreflabel="D10">T. Demirel. 
            <div class="emphasis e290" role="ital">Grundsatzuntersuchung zur √úbernahme von nicht-semantischen XML-Druckerdaten in
               semantisches XML auf Basis eines XSD-Schemas.
            </div> Diploma Thesis, Technische
            Universit√§t M√ºnchen, 2010.
         </div>
         <div class="bibliomixed e291" xml:id="HyTimeBook" xreflabel="DD84">S.J. DeRose and D.G. Durand:
            
            <div class="emphasis e292">Making Hypermedia Work: A User's Guide to HyTime</div>. Kluwer Academic
            Publishers 1984.
         </div>
         <div class="bibliomixed e293" xml:id="EvansDDD" xreflabel="E04">E. Evans: 
            <div class="emphasis e294">Domain-Driven Design.
               Tackling Complexity in the Heart of Software
            </div>. Addison-Wesley
            2004.
         </div>
         <div class="bibliomixed e295" xml:id="EcksteinEtAlXMLDatenmodellierung" xreflabel="EE04">R. Eckstein, S. Eckstein. 
            <div class="emphasis e296" role="ital">XML und Datenmodellierung.</div> DPunkt-Verlag 2004.
         </div>
         <div class="bibliomixed e297" xml:id="GuizzardiUFO" xreflabel="G05">G. Guizzardi:
            
            <div class="emphasis e298">Ontological Foundations for Structural Conceptual Models</div>. Ph.D.
            Thesis, University of Twente, The Netherlands, 2005. Available from
            https://doc.telin.nl/dsweb/Get/Document-55835/Ontological%20Foundations%20for%20Structural%20Conceptual%20Models.pdf.
         </div>
         <div class="bibliomixed e299" xml:id="GammaEtAlDesignPatterns" xreflabel="GHJV95">E. Gamma, R.
            Helm, R. Johnson, J. Vlissides. 
            <div class="emphasis e300">Design Patterns</div>. Addison-Wesley 1995. 
         </div>
         <div class="bibliomixed e301" xml:id="KimberEtAlUML2DTD" xreflabel="KH00">W.E. Kimber, J.D.
            Heintz: 
            <div class="emphasis e302" role="ital">Using UML To Define XML Document Types.</div>
            Presentation at Extreme Markup Languages 2000. Available from
            http://www.gca.org/attend/2000_conferences/Extreme_2000/.
         </div>
         <div class="bibliomixed e303" xml:id="KhanEtAlSchemaDesignPatterns" xreflabel="KS06">A.
            Khan, M. Sum. 
            <div class="emphasis e304" role="ital">Introducing Design Patterns in XML Schemata</div>.
            Sun Developer Network 2006.
         </div>
         <div class="bibliomixed e305" xml:id="LainevoolXMLPatterns" xreflabel="L10">T. Lainevool.
            
            <div class="emphasis e306" role="ital">Develop Effective XML Documents Using Structural Design
               Patterns.
            </div> http://www.LainevoolXMLPatterns.com/.
         </div>
         <div class="bibliomixed e307" xml:id="MalerEtAlDTDModeling" xreflabel="MA95">E. Maler, J. El
            Andaloussi. 
            <div class="emphasis e308" role="ital">Developing SGML DTDs: From Text to Model to
               Markup.
            </div> Prentice Hall 1995.
         </div>
         <div class="bibliomixed e309" xml:id="MellorMDADistilled" xreflabel="MSUW04">S.J. Mellor, K. Scott,
            A. Uhl, D. Weise: 
            <div class="emphasis e310">MDA Distilled.</div> Addison-Wesley 2004.
         </div>
         <div class="bibliomixed e311" xml:id="NecaskyConceptualModeling" xreflabel="N06">M.
            Neƒçask√Ω: 
            <div class="emphasis e312">Conceptual Modeling for XML: A Survey</div>. Proceedings of the
            Dateso Annual International Workshop on Databases, Texts, Specifications and Objects
            2006.
            Available from
            http://ftp.informatik.rwth-aachen.de/Publications/CEUR-WS/Vol-176/
         </div>
         <div class="bibliomixed e313" xml:id="PaganoDA" xreflabel="P08">D. Pagano. 
            <div class="emphasis e314" role="ital">Modeling
               and Defining XML Applications with UML and XML Schema.
            </div> Diploma Thesis,
            Technische Universit√§t M√ºnchen, 2008.
         </div>
         <div class="bibliomixed e315" xml:id="EPTatBalisage2009" xreflabel="PB09">D. Pagano and A.
            Br√ºggemann-Klein. 
            <div class="emphasis e316">Engineering Document Applications ‚Äî From UML Models to XML
               Schemas
            </div>. Balisage 2009. Available from
            http://www.balisage.net/Proceedings/.  doi:
            <div class="biblioid doi e317">10.4242/BalisageVol3.Bruggemann-Klein01</div>.
         </div>
         <div class="bibliomixed e318" xml:id="StephensonBestPractices" xreflabel="S04">D.
            Stephenson. 
            <div class="emphasis e319" role="ital">XML Schema Best Practices</div>. HP Dev Resource
            2004.
            http://devresource.hp.com/drc/resources/vdVlistXMLSchemaBestPractices.jsp.
         </div>
         <div class="bibliomixed e320" xml:id="SimsionDataModeling" xreflabel="S07">G. Simsion:
            
            <div class="emphasis e321">Data Modeling Theory and Practice</div>. Technics Publications 2007. 
         </div>
         <div class="bibliomixed e322" xml:id="SMPTE335M" xreflabel="SMPTE01">Society of Motion Picture and Television
            Engineers: SMPTE 335M-2001- Metadata Dictionary Structure. SMPTE Standard for Telivision,
            2001. 
         </div>
         <div class="bibliomixed e323" xml:id="SMPTE395M" xreflabel="SMPTE03">Society of Motion Picture and Television
            Engineers: SMPTE 395M-2003 - Metadata Groups Registry Structure. SMPTE Standard for
            Telivision, 2003. 
         </div>
         <div class="bibliomixed e324" xml:id="SMPTERP210" xreflabel="SMPTE08">Society of Motion Picture and
            Television Engineers: RP210-11-2008 - Data Element Dictionary. SMPTE Recommended Practice,
            2008.
         </div>
         <div class="bibliomixed e325" xml:id="TaiMTh" xreflabel="T09">A. Tai: 
            <div class="emphasis e326">Requirements analysis,
               conception and implementation of a BMF-Generator on the basis of the BMF-XML
               Schema.
            </div> Master's Thesis. Technische Universit√§t M√ºnchen, 2009.
         </div>
         <div class="bibliomixed e327" xml:id="WildeMichelSpath1" xreflabel="WM07a">E. Wilde und F. Michel:
            
            <div class="emphasis e328" role="ital">SPath: a path language for XML schema.</div> In: WWW ‚Äô07:
            Proceedings of the 16th international conference on World Wide Web, S. 1343‚Äì1344.
            ACM,
            2007. doi: 
            <div class="biblioid doi e329">10.1145/1242572.1242842</div>.
         </div>
         <div class="bibliomixed e330" xml:id="WildeMichelSpath2" xreflabel="WM07b">E. Wilde und F. Michel:
            
            <div class="emphasis e331" role="ital">SPath: A Path Language for XML Schema.</div> In: Paper
            2007-001 . School of Information, 2007. Available from
            http://dret.net/netdret/docs/wilde-irep07-001-spath.pdf.
         </div>
         <div class="bibliomixed e332" xml:id="WildeMichelXMLbased" xreflabel="WM07c">E. Wilde und F.
            Michel: 
            <div class="emphasis e333" role="ital">XML-based XML schema access.</div> In: WWW ‚Äô07:
            Proceedings of the 16th international conference on World Wide Web, S. 1351‚Äì1352.
            ACM,
            2007. doi: 
            <div class="biblioid doi e334">10.1145/1242572.1242846</div>.
         </div>
      </div>
   </div>
</div>