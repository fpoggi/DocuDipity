<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#AnextensibleAPIfordocumentswithmultipleannotationlayersANCHOR" name="AnextensibleAPIfordocumentswithmultipleannotationlayersTOC">An extensible API for documents with multiple annotation layers</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#MultipleannotateddocumentsANCHOR" name="MultipleannotateddocumentsTOC">Multiple annotated documents</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#CreatinganextensibleAPIANCHOR" name="CreatinganextensibleAPITOC">Creating an extensible API</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#XStandoffasanexampleapplicationANCHOR" name="XStandoffasanexampleapplicationTOC">XStandoff as an example application</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#CreatingandprocessingXStandoffinstancesusingXML::LoyANCHOR" name="CreatingandprocessingXStandoffinstancesusingXML::LoyTOC">Creating and processing XStandoff instances using XML::Loy</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConclusionandfutureworkANCHOR" name="ConclusionandfutureworkTOC">Conclusion and future work</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#AcknowledgementsANCHOR" name="AcknowledgementsTOC">Acknowledgements</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ReferencesANCHOR" name="ReferencesTOC">References</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">any</div>
         <div class="singletermTERMS">add()</div>
         <div class="singletermTERMS">annotation</div>
         <div class="singletermTERMS">August 6 - 9, 2013</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">brigh</div>
         <div class="singletermTERMS">bright</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2013</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">corpusData</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">document</div>
         <div class="singletermTERMS">Diewald</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">except</div>
         <div class="singletermTERMS">extension()</div>
         <div class="singletermTERMS">er</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
         <div class="singletermTERMS">files/meta.xml</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">id</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">lax</div>
         <div class="singletermTERMS">layer</div>
         <div class="singletermTERMS">level</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">morph</div>
         <div class="singletermTERMS">morphemes()</div>
         <div class="singletermTERMS">morphemes</div>
         <div class="singletermTERMS">morpheme</div>
         <div class="singletermTERMS">meta</div>
         <div class="singletermTERMS">Mojo::DOM</div>
         <div class="singletermTERMS">Mojolicious</div>
         <div class="singletermTERMS">maik.stuehrenberg@uni-bielefeld.de</div>
         <div class="singletermTERMS">Maik</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">namespace</div>
         <div class="singletermTERMS">nsName</div>
         <div class="singletermTERMS">notNamespace</div>
         <div class="singletermTERMS">notQName</div>
         <div class="singletermTERMS">n+1</div>
         <div class="singletermTERMS">nils.diewald@uni-bielefeld.de</div>
         <div class="singletermTERMS">Nils</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">processContents</div>
         <div class="singletermTERMS">paragraph</div>
         <div class="singletermTERMS">primaryData</div>
         <div class="singletermTERMS">primaryDataRef</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
         <div class="singletermTERMS">querySelector()</div>
         <div class="singletermTERMS">querySelectorAll()</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">resources</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">set()</div>
         <div class="singletermTERMS">segmentation</div>
         <div class="singletermTERMS">segment</div>
         <div class="singletermTERMS">segment_content()</div>
         <div class="singletermTERMS">Stührenberg</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">title</div>
         <div class="singletermTERMS">to_pretty_xml()</div>
         <div class="singletermTERMS">textualContent</div>
         <div class="singletermTERMS">The sun shines brighter.</div>
         <div class="singletermTERMS">ter</div>
         <div class="singletermTERMS">The moon shines brighter.</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">XML::Loy</div>
         <div class="singletermTERMS">xsf:segment</div>
         <div class="singletermTERMS">xml:id</div>
         <div class="singletermTERMS">XML::Loy</div>
         <div class="singletermTERMS">XML::Loy::Example::Morphemes</div>
         <div class="singletermTERMS">XML::Loy::XStandoff</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="AnextensibleAPIfordocumentswithmultipleannotationlayersANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3">
      <div class="title e1">An extensible API for documents with multiple annotation layers</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2013</div>
            <div class="confdates e5">August 6 - 9, 2013</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">Both XML namespaces and standoff annotation are promising approaches to tackle possibly
               overlapping multiple annotation layers in XML instances. The creation and processing
               of
               standoff instances can be cumbersome – especially when the underlying textual primary
               data
               is allowed to be modified after the annotation has been added. In this paper we present
               a
               powerful API that is capable of dealing with these tasks by providing an extension
               mechanism
               that allows for the easy creation of modules corresponding to a certain namespace
               (and
               therefore markup language). We use XStandoff as a working example since it is a standoff
               format that highly depends on XML namespaces for different annotation layers.
            </div>
         </div>
         <div class="author e8">
            <div class="personname e9">
               <div class="firstname e10">Nils</div>
               <div class="surname e11">Diewald</div>
            </div>
            <div class="personblurb e12">
               <div class="para e13">Nils Diewald received a B.A. in German philology and Text Technology and an M.A. in
                  Linguistics (with a focus on Computational Linguistics) from Bielefeld University.
                  Currently he is employed as a research assistant in the KorAP project at the IDS Mannheim
                  	  (Institute for the German Language) and is a Ph.D. candidate in Computer Science.
                  	  His Doctorate Studies focus on communication in social networks,
                  	  originating from his work as a research assistant in the
                  Linguistic Networks project of the BMBF (Federal Ministry of Education and Research).
                  Before that, he was a research and graduate assistant in the Sekimo project, part
                  of the
                  DFG Research Group on Text-Technological Modelling of Information.
               </div>
            </div>
            <div class="affiliation e14">
               <div class="orgname e15">Universität Bielefeld</div>
            </div>
            <div class="affiliation e16">
               <div class="orgname e17">Institut für Deutsche Sprache (IDS) Mannheim</div>
            </div>
            <div class="email e18">nils.diewald@uni-bielefeld.de</div>
         </div>
         <div class="author e19">
            <div class="personname e20">
               <div class="firstname e21">Maik</div>
               <div class="surname e22">Stührenberg</div>
            </div>
            <div class="personblurb e23">
               <div class="para e24">Maik Stührenberg received his Ph.D. in Computational Linguistics and Text Technology
                  from Bielefeld University in 2012. After graduating in 2001 he worked in different
                  text-technological projects at Gießen University, Bielefeld University and the Institut
                  für Deutsche Sprache (IDS, Institute for the German Language) in Mannheim. He is currently
                  employed as research assistant at Bielefeld University.
               </div>
               <div class="para e25">His main research interests include specifications for structuring multiple annotated
                  data, schema languages, and query processing.
               </div>
            </div>
            <div class="affiliation e26">
               <div class="orgname e27">Universität Bielefeld</div>
            </div>
            <div class="email e28">maik.stuehrenberg@uni-bielefeld.de</div>
         </div>
         <div class="legalnotice e29">
            <div class="para e30">Copyright © 2013 by the authors. Used with permission.</div>
         </div>
      </div><a name="MultipleannotateddocumentsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e31" xml:id="sec_intro">
         <div class="title e32">Multiple annotated documents</div>
         <div class="para e33">Markup languages are often defined for structuring the information of a specific text
            type, such as web pages (HTML), technical articles or books (DocBook), or a set of
            information
            items, such as vector graphics (SVG) or protocol information (SOAP). Therefore, their
            structure is (in limits) determined by a document grammar that allows for specific
            elements
            and attributes. In addition, the different XML-based document grammar formalisms allow
            to a
            certain degree the combination of elements (and attributes) from different markup
            languages –
            usually by means of XML namespaces (
            <div class="xref e34" linkend="Bray2009"></div>). In practice, one host
            language can include islands of foreign markup (guest languages). There are different
            examples
            for the combination of host and guest markup languages (apart from the already mentioned
            SOAP). A certain XHTML driver (
            <div class="xref e35" linkend="Ishikawa2002"></div>) allows for the combination of
            XHTML (as a host language), MathML and SVG (as guest languages), and the Atom Syndication
            Format (
            <div class="xref e36" linkend="Nottingham2005"></div>) can be used in conjunction with a wide range of
            extensions (e.g. for Threading, see 
            <div class="xref e37" linkend="Snell2006"></div>, or Activity Streams, see
            
            <div class="xref e38" linkend="Atkins2011"></div>) while it is also meant to be embedded in parts in the RSS
            format (
            <div class="xref e39" linkend="Winer2009"></div>).
         </div>
         <div class="para e40">Although XML namespaces support the combination of elements derived from different
            markup languages, they do not change XML's formal model that prohibits overlapping
            markup.
            However, standoff markup (instead of inline annotation) may be used to circumvent
            this
            problem. The meta markup language XStandoff (
            <div class="xref e41" linkend="Stuehrenberg2009"></div>) embeds
            (slightly transformed) islands of guest languages (with respective XML namespaces)
            in
            combination with a standardized standoff approach as key feature for the storage of
            multiple
            (and possibly overlapping) hierarchies.
         </div>
         <div class="para e42">Typical problems when dealing with multiple and/or standoff annotations are related
            to the
            production and processing of instances. Although usually each markup language involved
            is
            defined by a document grammar on its own, it can often be cumbersome to validate an
            instance
            combining elements from a large variety of document grammars (although XStandoff is
            capable of
            validating these instances, adapted XML schema files have to be present for each guest
            language). This behaviour can be controlled by means of the document grammar formalism.
            For
            example, XML Schema allows different values of its 
            <div class="code e43">processContents</div> attribute
            which may occur on the 
            <div class="code e44">any</div> element. The value 
            <div class="code e45">lax</div> provided in 
            <div class="xref e46" linkend="lst.xsf.lax"></div> (taken from XStandoff's 
            <div class="code e47">layer</div> element) 
            <div class="citation e48" linkend="Fallside2004">
               <div class="quote e49">instructs an XML processor to validate the element content on
                  a can-do basis: It will validate elements and attributes for which it can obtain schema
                  information, but it will not signal errors for those it cannot obtain any schema
                  information
               </div>, Section 5.5, Any Element, Any Attribute
            </div>.
         </div>
         <div class="figure e50" xml:id="lst.xsf.lax">
            <div class="title e51">Controlling validation of foreign namespace elements</div>
            <div class="programlisting e52" xml:space="preserve">&lt;xs:element name="layer"&gt;
               &lt;xs:complexType&gt;
               &lt;xs:sequence&gt;
               &lt;!-- [...] --&gt;
               &lt;xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded" processContents="lax"/&gt;
               &lt;/xs:sequence&gt;
               &lt;/xs:complexType&gt;
               &lt;/xs:element&gt;
            </div>
         </div>
         <div class="para e53">In addition, the 
            <div class="code e54">namespace</div> attribute may be used to control the allowed
            namespaces. While XSD 1.0 allows the values 
            <div class="code e55">##any</div>, 
            <div class="code e56">##other</div> or a list
            of namespaces only (including the preserved values 
            <div class="code e57">##targetNamespace</div> and
            
            <div class="code e58">##local</div>, see 
            <div class="xref e59" linkend="Thompson2004"></div>), RELAX NG supports the exclusion
            of namespaces (by using the 
            <div class="code e60">except</div> pattern in combination with
            
            <div class="code e61">nsName</div>). XSD 1.1 (
            <div class="xref e62" linkend="Gao2012"></div>) introduced the
            
            <div class="code e63">notNamespace</div> and 
            <div class="code e64">notQName</div> attributes.
         </div>
         <div class="para e65">The production of multiple annotated documents is typically the result of the combination
            of formerly stand-alone documents (or their parts), such as the inclusion of externally
            created SVG graphics in an XHTML host document, or the outcome of a mostly automated
            process
            (see 
            <div class="xref e66" linkend="Stuehrenberg2009"></div> for a discussion on the production of XStandoff
            instances). What is still lacking is an API (Application Programming Interface)
            that is flexible enough to support the production
            and processing of multiple annotated instances, even if annotations are referring
            to the same
            primary data by means of standoff annotation. We will demonstrate such an API in the
            reminder
            of this article.
         </div>
      </div><a name="CreatinganextensibleAPIANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e67" xml:id="sec_loy">
         <div class="title e68">Creating an extensible API</div>
         <div class="para e69">
            <div class="emphasis e70">XML::Loy</div> (
            <div class="xref e71" linkend="Diewald2011"></div>) is a Perl library, that
            provides a simple programming interface for the creation of XML documents with multiple
            namespaces. It is based on 
            <div class="emphasis e72">Mojo::DOM</div>, an HTML/XML DOM parser that is part
            of the 
            <div class="emphasis e73">Mojolicious</div> framework (
            <div class="xref e74" linkend="Riedel2008"></div>).
            
            <div class="emphasis e75">Mojo::DOM</div> povides CSS selector based methods for DOM traversal (
            <div class="xref e76" linkend="vanKesteren2013"></div>), similar to Javascript's 
            <div class="code e77">querySelector()</div> and
            
            <div class="code e78">querySelectorAll()</div> methods.
         </div>
         <div class="para e79">The basic methods for the manipulation of the XML Document Object Model provided by
            
            <div class="emphasis e80">XML::Loy</div> are 
            <div class="code e81">add()</div> and 
            <div class="code e82">set()</div>. By applying
            these methods new nodes can be introduced as children to every node in the document.
            While
            
            <div class="code e83">add()</div> always appends additional nodes to the document, 
            <div class="code e84">set()</div> only
            appends nodes in case no child of the given type exists. Both methods are invoked
            by a chosen
            node in the document tree (acting as the parent node of the newly introduced node).
            They
            accept the element name as a string parameter, followed by an optional hash reference
            containing attributes and a string containing optional textual content of the element.
            A final
            string can be used to put a comment in front of the element.
         </div>
         <div class="figure e85" xml:id="lst.loy">
            <div class="title e86">Using 
               <div class="emphasis e87">XML::Loy</div> to create a document
            </div>
            <div class="programlisting e88" xml:space="preserve">use XML::Loy;
               
               my $doc = XML::Loy-&gt;new('document');
               $doc-&gt;set(title =&gt; 'My Title');
               $doc-&gt;set(title =&gt; 'My New Title');
               $doc-&gt;add(paragraph =&gt; { id =&gt; 'p-1' } =&gt; 'First Paragraph');
               $doc-&gt;add(paragraph =&gt; { id =&gt; 'p-2' } =&gt; 'Second Paragraph');
               
               print $doc-&gt;to_pretty_xml;
            </div>
         </div>
         <div class="para e89">In the example presented in 
            <div class="xref e90" linkend="lst.loy"></div> a new 
            <div class="emphasis e91">XML::Loy</div>
            document instance is created with a root element 
            <div class="code e92">document</div>. Applying the
            
            <div class="code e93">set()</div> method, a new 
            <div class="code e94">title</div> element is introduced as a child of the
            root element. The second call of 
            <div class="code e95">set()</div> overwrites the content of the
            
            <div class="code e96">title</div> element. By using the 
            <div class="code e97">add()</div> method we insert multiple
            
            <div class="code e98">paragraph</div> elements without overwriting existing ones. These elements are
            defined with both an 
            <div class="code e99">id</div> attribute and textual content.
            By applying the 
            <div class="code e100">to_pretty_xml()</div> method, the result can be printed as XML.
         </div>
         <div class="programlisting e101" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
            &lt;document&gt;
            &lt;title&gt;My New Title&lt;/title&gt;
            &lt;paragraph id="p-1"&gt;First Paragraph&lt;/paragraph&gt;
            &lt;paragraph id="p-2"&gt;Second Paragraph&lt;/paragraph&gt;
            &lt;/document&gt;
         </div>
         <div class="para e102">The strength of this simple approach for document manipulation is the ability to pass
            these methods to new extension modules that can represent APIs for specific XML namespaces,
            as
            both host and guest languages. The example given in 
            <div class="xref e103" linkend="lst.xml.loy.morpheme"></div> is
            meant to illustrate these capabilities by creating a simple 
            <div class="emphasis e104">XML::Loy</div> extension
            for morpheme annotations.
         </div>
         <div class="figure e105" xml:id="lst.xml.loy.morpheme">
            <div class="title e106">Creating 
               <div class="emphasis e107">XML::Loy</div> extensions
            </div>
            <div class="programlisting e108" xml:space="preserve">package XML::Loy::Example::Morphemes;
               use XML::Loy with =&gt; (
               namespace =&gt; 'http://www.xstandoff.net/morphemes',
               prefix =&gt; 'morph'
               );
               
               # Add morphemes root
               sub morphemes {
               my $self = shift;
               return $self-&gt;add(morphemes =&gt; @_);
               };
               
               # Add morphemes
               sub morpheme {
               my $self = shift;
               return unless $self-&gt;type =~ /^(?:morph:)?morphemes$/;
               return $self-&gt;add(morpheme =&gt; @_);
               };
            </div>
         </div>
         <div class="para e109">The class inherits all XML creation methods from 
            <div class="emphasis e110">XML::Loy</div> and thus
            all XML traversal methods from 
            <div class="emphasis e111">Mojo::DOM</div>. When defining the base class,
            an optional namespace 
            <div class="code e112">http://www.xstandoff.net/morphemes</div> is bound to the
            
            <div class="code e113">morph</div> prefix, which means, all invocations of 
            <div class="code e114">set()</div> and
            
            <div class="code e115">add()</div> from this class will be bound to the 
            <div class="code e116">morph</div> namespace. The
            newly created 
            <div class="code e117">morphemes()</div> method appends a 
            <div class="code e118">morphemes</div> element bound
            to the given namespace as a child of the invoking node.
         </div>
         <div class="para e119">To implement simple grammar rules to the API the methods can check the invoking context,
            for
            example by constraining the introduction of 
            <div class="code e120">morpheme</div> elements to
            
            <div class="code e121">morphemes</div> parent nodes only (see the regular expression check
            
            <div class="code e122">/^(?:morph:)?morphemes$/</div>).
         </div>
         <div class="para e123">This newly created API for the 
            <div class="code e124">http://www.xstandoff.net/morphemes</div> namespace
            can now be used to create new document instances (see 
            <div class="xref e125" linkend="lst.xml.loy.example"></div>
            and the output shown in 
            <div class="xref e126" linkend="lst.xml.loy.example.instance"></div>).
         </div>
         <div class="figure e127" xml:id="lst.xml.loy.example">
            <div class="title e128">Creating a document by using 
               <div class="emphasis e129">XML::Loy::Example::Morphemes</div>
            </div>
            <div class="programlisting e130" xml:space="preserve">use XML::Loy::Example::Morphemes;
               
               my $doc = XML::Loy::Example::Morphemes-&gt;new('document');
               
               my $m = $doc-&gt;morphemes;
               
               $m-&gt;morpheme('The');
               $m-&gt;morpheme('sun');
               $m-&gt;morpheme('shine');
               $m-&gt;morpheme('s');
               $m-&gt;morpheme('bright');
               $m-&gt;morpheme('er');
               
               print $doc-&gt;to_pretty_xml;
            </div>
         </div>
         <div class="figure e131" xml:id="lst.xml.loy.example.instance">
            <div class="title e132">The output instance created with
               
               <div class="emphasis e133">XML::Loy::Example::Morphemes</div>
            </div>
            <div class="programlisting e134" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
               &lt;document xmlns="http://www.xstandoff.net/morphemes"&gt;
               &lt;morphemes&gt;
               &lt;morpheme&gt;The&lt;/morpheme&gt;
               &lt;morpheme&gt;sun&lt;/morpheme&gt;
               &lt;morpheme&gt;shine&lt;/morpheme&gt;
               &lt;morpheme&gt;s&lt;/morpheme&gt;
               &lt;morpheme&gt;bright&lt;/morpheme&gt;
               &lt;morpheme&gt;er&lt;/morpheme&gt;
               &lt;/morphemes&gt;
               &lt;/document&gt;
            </div>
         </div>
         <div class="para e135">By using the generic methods 
            <div class="code e136">add()</div> and 
            <div class="code e137">set()</div> provided by
            
            <div class="emphasis e138">XML::Loy</div>, the class can easily be used for extending an existing
            
            <div class="emphasis e139">XML::Loy</div> based class (i.e. as a guest language inside another host
            language). In the example shown in 
            <div class="xref e140" linkend="lst.xml.loy.ext2"></div> a simplified HTML
            instance is read and instantiated. Elements from the
            
            <div class="code e141">http://www.xstandoff.net/morphemes</div> namespace are appended using the API
            described above (the output is shown in 
            <div class="xref e142" linkend="lst.xml.loy.ext2.in"></div>).
         </div>
         <div class="figure e143" xml:id="lst.xml.loy.ext2">
            <div class="title e144">Using extensions with 
               <div class="emphasis e145">XML::Loy</div>
            </div>
            <div class="programlisting e146" xml:space="preserve">use XML::Loy;
               
               my $doc = XML::Loy-&gt;new(&lt;&lt;'XML');
               &lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
               &lt;html&gt;
               &lt;head&gt;&lt;title&gt;The sun&lt;/title&gt;&lt;/head&gt;
               &lt;body /&gt;
               &lt;/html&gt;
               XML
               
               $doc-&gt;extension(-Example::Morphemes);
               my $p = $doc-&gt;at('body')-&gt;add('p' =&gt; 'The sun shines');
               my $m = $p-&gt;morphemes;
               $m-&gt;morpheme('bright');
               $m-&gt;morpheme('er');
               
               print $doc-&gt;to_pretty_xml;
            </div>
         </div>
         <div class="figure e147" xml:id="lst.xml.loy.ext2.in">
            <div class="title e148">The output instance created with 
               <div class="emphasis e149">XML::Loy</div> and the
               
               <div class="emphasis e150">XML::Loy::Example::Morphemes</div> extension
            </div>
            <div class="programlisting e151" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
               &lt;html xmlns:morph="http://www.xstandoff.net/morphemes"&gt;
               &lt;head&gt;
               &lt;title&gt;The sun&lt;/title&gt;
               &lt;/head&gt;
               &lt;body&gt;
               &lt;p&gt;The sun shines
               &lt;morph:morphemes&gt;
               &lt;morph:morpheme&gt;bright&lt;/morph:morpheme&gt;
               &lt;morph:morpheme&gt;er&lt;/morph:morpheme&gt;
               &lt;/morph:morphemes&gt;
               &lt;/p&gt;
               &lt;/body&gt;
               &lt;/html&gt;
            </div>
         </div>
         <div class="para e152">By extending the 
            <div class="emphasis e153">XML::Loy</div> base object with the newly created class using
            the 
            <div class="code e154">extension()</div>
            <div class="popupBox e155">
               <div class="popupLabel" onmouseover="$('#d1e354').show('1000');" onmouseout="$('#d1e354').hide('1000');">[ footnote ]</div>
               <div id="d1e354" style="display: none;">
                  <div class="footnote">
                     <div class="para e156">The leading minus symbol is a shortcut for the 
                        <div class="code e157">XML::Loy</div> module namespace,
                        meaning, that the qualified name is
                        
                        <div class="emphasis e158">XML::Loy::Example::Morphemes</div>. More than one extension can be passed
                        at once.
                     </div>
                  </div>
               </div>
            </div> method, all method calls from the extension class are available for namespace aware
            traversal and manipulation. In general, using such an extensible API provides at least
            some
            functionality usually made available by document grammars (the nesting of elements
            for
            example) and adds methods to create and manipulate the respective class of instances.
         </div>
      </div><a name="XStandoffasanexampleapplicationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e159" xml:id="sec_xsf">
         <div class="title e160">XStandoff as an example application</div>
         <div class="para e161">XStandoff's predecessor SGF (Sekimo Generic Format) was developed in 2008 (see 
            <div class="xref e162" linkend="Stuehrenberg2008"></div>) as a meta format for storing and analyzing multiple annotated
            instances as part of a linguistic corpus. In 2009 the format was generalized and enhanced.
            Since then, XStandoff combines standoff notation with the formal model of General
            Ordered-Descendant Directed Acyclic Graphs (GODDAG, introduced in 
            <div class="xref e163" linkend="Sperberg-McQueen2004"></div>; see 
            <div class="xref e164" linkend="Sperberg-McQueen2008a"></div> for a more
            recent discussion). The format as such is capable of representing multiple hierarchies
            and
            specifically challenging structures such as overlaps, discontinuous elements and virtual
            elements. The basic structure of an XStandoff instance consists of the root element
            
            <div class="code e165">corpusData</div> underneath which the child elements 
            <div class="code e166">meta</div> (optional),
            
            <div class="code e167">resources</div> (optional), 
            <div class="code e168">primaryData</div> (optional in the proposed
            release 2.0, see 
            <div class="xref e169" linkend="Stuehrenberg2013"></div>), 
            <div class="code e170">segmentation</div> and
            
            <div class="code e171">annotation</div> are subsumed. 
            <div class="xref e172" linkend="listing_xsf"></div> shows an example
            XStandoff document.
            <div class="popupBox e173">
               <div class="popupLabel" onmouseover="$('#d1e399').show('1000');" onmouseout="$('#d1e399').hide('1000');">[ footnote ]</div>
               <div id="d1e399" style="display: none;">
                  <div class="footnote">
                     <div class="para e174">More examples can be found at 
                        <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e175" xlink:actuate="onRequest" xlink:href="http://www.xstandoff.net/examples" xlink:show="new" xlink:type="simple">http://www.xstandoff.net/examples</div>.
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="figure e176" xml:id="listing_xsf">
            <div class="title e177">XStandoff instance</div>
            <div class="programlisting e178" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
               &lt;xsf:corpusData xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://www.xstandoff.net/2009/xstandoff/1.1 xsf2_1.1.xsd"
               xmlns="http://www.xstandoff.net/2009/xstandoff/1.1"
               xmlns:xsf="http://www.xstandoff.net/2009/xstandoff/1.1" xml:id="c1" xsfVersion="2.0"&gt;
               &lt;xsf:primaryData start="0" end="24" xml:lang="en" xml:space="preserve" unit="chars"&gt;
               &lt;textualContent&gt;The sun shines brighter.&lt;/textualContent&gt;
               &lt;/xsf:primaryData&gt;
               &lt;xsf:segmentation&gt;
               &lt;xsf:segment xml:id="seg1" type="char" start="0" end="24"/&gt;
               &lt;xsf:segment xml:id="seg2" type="char" start="0" end="3"/&gt;
               &lt;xsf:segment xml:id="seg3" type="char" start="4" end="7"/&gt;
               &lt;xsf:segment xml:id="seg4" type="char" start="8" end="14"/&gt;
               &lt;xsf:segment xml:id="seg5" type="char" start="8" end="13"/&gt;
               &lt;xsf:segment xml:id="seg6" type="char" start="13" end="14"/&gt;
               &lt;xsf:segment xml:id="seg7" type="char" start="15" end="21"/&gt;
               &lt;xsf:segment xml:id="seg8" type="char" start="15" end="20"/&gt;
               &lt;xsf:segment xml:id="seg9" type="char" start="20" end="23"/&gt;
               &lt;xsf:segment xml:id="seg10" type="char" start="21" end="23"/&gt;
               &lt;/xsf:segmentation&gt;
               &lt;xsf:annotation&gt;
               &lt;xsf:level xml:id="l_morph"&gt;
               &lt;xsf:layer xmlns:morph="http://www.xstandoff.net/morphemes"
               xsi:schemaLocation="http://www.xstandoff.net/morphemes morphemes.xsd"&gt;
               &lt;morph:morphemes xsf:segment="seg1"&gt;
               &lt;morph:morpheme xsf:segment="seg2"/&gt;
               &lt;morph:morpheme xsf:segment="seg3"/&gt;
               &lt;morph:morpheme xsf:segment="seg5"/&gt;
               &lt;morph:morpheme xsf:segment="seg6"/&gt;
               &lt;morph:morpheme xsf:segment="seg7"/&gt;
               &lt;morph:morpheme xsf:segment="seg10"/&gt;
               &lt;/morph:morphemes&gt;
               &lt;/xsf:layer&gt;
               &lt;/xsf:level&gt;
               &lt;xsf:level xml:id="l_syll"&gt;
               &lt;xsf:layer xmlns:syll="http://www.xstandoff.net/syllables"
               xsi:schemaLocation="http://www.xstandoff.net/syllables syllables.xsd"&gt;
               &lt;syll:syllables xsf:segment="seg1"&gt;
               &lt;syll:syllable xsf:segment="seg2"/&gt;
               &lt;syll:syllable xsf:segment="seg3"/&gt;
               &lt;syll:syllable xsf:segment="seg4"/&gt;
               &lt;syll:syllable xsf:segment="seg8"/&gt;
               &lt;syll:syllable xsf:segment="seg9"/&gt;
               &lt;/syll:syllables&gt;
               &lt;/xsf:layer&gt;
               &lt;/xsf:level&gt;
               &lt;/xsf:annotation&gt;
               &lt;/xsf:corpusData&gt;
               
            </div>
         </div>
         <div class="para e179">In this example, the sentence 
            <div class="quote e180">The sun shines brighter.</div> is annotated with
            two linguistic levels (and respective layers): morphemes and syllables. We cannot
            combine both
            annotation layers in an inline annotation, since there is an overlap between the two
            syllables
            
            <div class="quote e181">brigh</div> and 
            <div class="quote e182">ter</div> and the two morphemes 
            <div class="quote e183">bright</div> and
            
            <div class="quote e184">er</div> (see 
            <div class="xref e185" linkend="fig.overlap"></div> for a visualization of the
            overlap).
         </div>
         <div class="figure e186" xml:id="fig.overlap">
            <div class="title e187">Graphical representation of overlapping hierarchies</div>
            <div class="mediaobject e188">
               <div class="imageobject e189">
                  <div class="metaBox e190"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e435').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e435" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e190'
                           </span><span class="metaAttribute">fileref='../../../vol10/graphics/Diewald01/Diewald01-001.png'
                           </span><span class="metaAttribute">format='png'
                           </span><span class="metaAttribute">width='600'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e191">Each annotation is encapsulated underneath a 
            <div class="code e192">layer</div> element (which in turn is
            a child element of a 
            <div class="code e193">level</div> element, since it is possible to have more than one
            serialization, that is, layer, for a conceptual level).
            <div class="popupBox e194">
               <div class="popupLabel" onmouseover="$('#d1e444').show('1000');" onmouseout="$('#d1e444').hide('1000');">[ footnote ]</div>
               <div id="d1e444" style="display: none;">
                  <div class="footnote">
                     <div class="para e195">Think of different POS taggers for example.</div>
                  </div>
               </div>
            </div> The 
            <div class="code e196">xsf:segment</div> attribute is used to link the annotation with the
            respective part of the primary data. Similar to other standoff approaches, XStandoff
            uses
            character positions for defining segments over textual primary data. Changes of the
            input text
            result in an out-of-sync situation between primary data and annotation. Processing
            XStandoff
            instances requires dealing with at least 
            <div class="emphasis e197">n+1</div> XML namespaces: one for
            XStandoff itself and one for each of the 
            <div class="emphasis e198">n</div> annotation layers.
         </div>
         <div class="para e199">Up to now, these instances are created by transforming inline annotations via a set
            of
            XSLT 2.0 stylesheets (see 
            <div class="xref e200" linkend="Stuehrenberg2009"></div> for a detailed discussion). We
            will outline an example API for XStandoff based on 
            <div class="emphasis e201">XML::Loy</div> that makes it
            easy to deal with the dynamic creation of multi-layered annotations in the following
            section
            <div class="popupBox e202">
               <div class="popupLabel" onmouseover="$('#d1e465').show('1000');" onmouseout="$('#d1e465').hide('1000');">[ footnote ]</div>
               <div id="d1e465" style="display: none;">
                  <div class="footnote">
                     <div class="para e203">The software presented in this section is freely available under the GPL or the
                        Artistic License at 
                        <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e204" xlink:actuate="onRequest" xlink:href="http://github.com/Akron/XML-Loy-XStandoff" xlink:show="new" xlink:type="simple">http://github.com/Akron/XML-Loy-XStandoff</div>.
                     </div>
                  </div>
               </div>
            </div>.
         </div>
      </div><a name="CreatingandprocessingXStandoffinstancesusingXML::LoyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e205">
         <div class="title e206">Creating and processing XStandoff instances using XML::Loy</div>
         <div class="para e207">As presented in the previous section, XStandoff associates annotations to primary
            data by
            defining segment spans
            <div class="popupBox e208">
               <div class="popupLabel" onmouseover="$('#d1e477').show('1000');" onmouseout="$('#d1e477').hide('1000');">[ footnote ]</div>
               <div id="d1e477" style="display: none;">
                  <div class="footnote">
                     <div class="para e209">In the following example we will limit our view on segments defined by character
                        positions. See 
                        <div class="xref e210" linkend="Stuehrenberg2013"></div> for examples for other segmentation
                        methods supported by XStandoff.
                     </div>
                  </div>
               </div>
            </div> to which the annotations are linked to via XML ID/IDREF integrity features. There
            are multiple ways to cope with standoff annotation: Compared to the XStandoff-Toolkit
            discussed in 
            <div class="xref e211" linkend="Stuehrenberg2009"></div>, our API will provide an additional
            way to access and manipulate both annotations and primary data directly.
         </div>
         <div class="figure e212" xml:id="lst.xml.loy.xsf">
            <div class="title e213">Creating XStandoff instances with 
               <div class="emphasis e214">XML::Loy::XStandoff</div>
            </div>
            <div class="programlisting e215" xml:space="preserve">use XML::Loy::XStandoff;
               
               # Create new corpusData
               my $cd = XML::Loy::XStandoff-&gt;new('corpusData');
               
               # Set textual content embedded
               $cd-&gt;textual_content('The sun shines brighter.');
               
               # Create segmentation
               my $seg = $cd-&gt;segmentation;
               
               # Create segments manually
               my $seg1 = $seg-&gt;segment(0,24);
               my $seg2 = $seg-&gt;segment(0, 3);
               my $seg3 = $seg-&gt;segment(4, 7);
               my $seg4 = $seg-&gt;segment(8, 13);
               my $seg5 = $seg-&gt;segment(13, 14);
               my $seg6 = $seg-&gt;segment(15, 21);
               my $seg7 = $seg-&gt;segment(21, 23);
               
               print $cd-&gt;to_pretty_xml;
            </div>
         </div>
         <div class="para e216">In 
            <div class="xref e217" linkend="lst.xml.loy.xsf"></div> a new 
            <div class="code e218">corpusData</div> element is created.
            Next, a 
            <div class="code e219">textualContent</div> element is added
            (below an automatically introduced 
            <div class="code e220">primaryData</div> element with a unique 
            <div class="code e221">xml:id</div>).
            Seven manually defined
            
            <div class="code e222">segment</div> elements are appended for selecting spans over the textual primary data
            aligned to the words and the sentence as a whole. 
            <div class="xref e223" linkend="lst.xml.loy.xsf.in"></div> shows
            the output.
         </div>
         <div class="figure e224" xml:id="lst.xml.loy.xsf.in">
            <div class="title e225">The XStandoff instance created with 
               <div class="emphasis e226">XML::Loy::XStandoff</div>
            </div>
            <div class="programlisting e227" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
               &lt;corpusData xmlns="http://www.xstandoff.net/2009/xstandoff/1.1"
               xmlns:xsf="http://www.xstandoff.net/2009/xstandoff/1.1"&gt;
               &lt;primaryData start="0" end="24" xml:id="pd-2531FE9A-..."&gt;
               &lt;textualContent&gt;The sun shines brighter.&lt;/textualContent&gt;
               &lt;/primaryData&gt;
               &lt;segmentation&gt;
               &lt;segment start="0" end="24" type="char" xml:id="seg-2532C88E-..." /&gt;
               &lt;segment start="0" end="3" type="char" xml:id="seg-25330ACE-..." /&gt;
               &lt;segment start="4" end="7" type="char" xml:id="seg-25334E9E-..." /&gt;
               &lt;segment start="8" end="13" type="char" xml:id="seg-2533949E-..." /&gt;
               &lt;segment start="13" end="14" type="char" xml:id="seg-2533DFE4-..." /&gt;
               &lt;segment start="15" end="21" type="char" xml:id="seg-25343052-..." /&gt;
               &lt;segment start="21" end="23" type="char" xml:id="seg-25348368-..." /&gt;
               &lt;/segmentation&gt;
               &lt;/corpusData&gt;
            </div>
         </div>
         <div class="para e228">The document creation is simple, as most elements such as 
            <div class="code e229">corpusData</div>,
            
            <div class="code e230">textualContent</div> and 
            <div class="code e231">segment</div> have corresponding API methods for
            finding, appending, updating and removing elements of the document. Segments are appended
            by
            defining their scope.
         </div>
         <div class="para e232">The manipulation of the primary data is possible by applying the
            
            <div class="code e233">segment_content()</div> method, that associates primary data with segment spans (see
            
            <div class="xref e234" linkend="lst.xml.loy.xsf.sc"></div>).
         </div>
         <div class="figure e235" xml:id="lst.xml.loy.xsf.sc">
            <div class="title e236">Using the 
               <div class="emphasis e237">XML::Loy::XStandoff</div> API
            </div>
            <div class="programlisting e238" xml:space="preserve"># Get segment content
               say $seg-&gt;segment($seg3)-&gt;segment_content;
               # 'sun'
               
               # Replace segment content
               $seg-&gt;segment($seg3)-&gt;segment_content('moon');
               
               # Interactively replace segment content
               $seg-&gt;segment($seg7)-&gt;segment_content(sub {
               my $t = shift;
               # Remove a sequence of 'er' from the string
               $t =~ s/er//;
               return $t;
               });
               
               # Show updated textual content
               say $cd-&gt;textual_content;
               # The moon shines bright.
               
               # Segment positions are updated automatically
               for ($seg-&gt;segment($seg6)) {
               say $_-&gt;attrs('start'); # 16
               say $_-&gt;attrs('end');   # 22
               };
            </div>
         </div>
         <div class="para e239">The textual content virtually delimited by a segment can be retrieved, replaced and
            manipulated, while all other segments stay intact and update their according start
            and end
            position values by calculating the new offsets in case they change.
            This addresses one of the key problems
            with standoff annotation: Usually, if one alters the primary data without updating
            the
            corresponding segments, association of annotations and corresponding primary data
            will break.
            Due to the dynamic access of primary data information provided by this API,
            work with standoff annotations can
            be nearly as flexible as with inline annotations, without the limitations these annotation
            formats have, for example to represent overlapping (see 
            <div class="xref e240" linkend="fig.overlap"></div>).
         </div>
         <div class="para e241">The morpheme extension created in 
            <div class="xref e242" linkend="sec_loy"></div> can be simply adopted
            to represent an annotation layer with overlapping segment spans with an annotation
            of
            syllables (see 
            <div class="xref e243" linkend="lst.xml.loy.xsf.ext"></div>).
         </div>
         <div class="figure e244" xml:id="lst.xml.loy.xsf.ext">
            <div class="title e245">Extending 
               <div class="emphasis e246">XML::Loy::XStandoff</div>
            </div>
            <div class="programlisting e247" xml:space="preserve">use XML::Loy::XStandoff;
               
               # Create new corpusData
               my $cd = XML::Loy::XStandoff-&gt;new('corpusData');
               
               # Load extensions for Morphemes and Syllables
               $cd-&gt;extension(-Example::Morphemes, -Example::Syllables);
               
               # Set textual content embedded
               $cd-&gt;textual_content('The sun shines brighter.');
               
               # Start segmentation
               my $seg = $cd-&gt;segmentation;
               my $all = $seg-&gt;segment(0, 24);
               
               # Create new annotation layer for morphemes
               my $m = $cd-&gt;layer-&gt;morphemes;
               
               # Create and associate all necessary segments for all morphemes
               $m-&gt;seg($all);
               foreach ([0,3], [4,7], [8,13], [13,14], [15,21], [21,23]) {
               $m-&gt;morpheme-&gt;seg($seg-&gt;segment($_-&gt;[0], $_-&gt;[1]));
               };
               
               # Create new annotation layer for syllables
               my $s = $cd-&gt;layer-&gt;syllables;
               
               # Create and associate all necessary segments for all syllables
               # independently, so overlaps are supported
               $s-&gt;seg($all);
               foreach ([0,3], [4,7], [8,14], [15,20], [20,23]) {
               $s-&gt;syllable-&gt;seg($seg-&gt;segment($_-&gt;[0], $_-&gt;[1]));
               };
               
               # Change the primary data of the second morpheme 'sun' to 'moon'
               $cd-&gt;find('morpheme')-&gt;[1]-&gt;segment_content('moon');
            </div>
         </div>
         <div class="para e248">The resulting document is similar to listing 
            <div class="xref e249" linkend="listing_xsf"></div> but with a modified
            primary data of 
            <div class="quote e250">The moon shines brighter.</div> and updated segment spans.
         </div>
         <div class="para e251">Another problem with some standoff formats is the association with decoupled primary
            data
            content. In XStandoff the primary data can be included in the XSF instance (as seen
            in the
            previous examples) or stored in a separate file and referenced via the
            
            <div class="code e252">primaryDataRef</div> element (in case of larger textual primary data, multimedia-based or
            multiple primary data files). If this file is on a local storage, the API will take
            care
            of updating the external textual content as well. Trying to modify files that are
            not
            modifiable (e.g. accessible online only) will result in a
            warning.
         </div>
         <div class="para e253">Since metadata in XStandoff can be either included inline or referenced in the same
            way, the handling of
            metadata in our API can be treated alike, with a slight difference
            if the metadata itself is a well-formed XML document. The example given in 
            <div class="xref e254" linkend="lst.meta.dc"></div> assumes a simple metadata document in RDF with a Dublin Core
            namespace at the location 
            <div class="code e255">files/meta.xml</div> in the local file system (shown in 
            <div class="xref e256" linkend="lst.meta.dc.file"></div>).
         </div>
         <div class="figure e257" xml:id="lst.meta.dc.file">
            <div class="title e258">RDF metadata instance</div>
            <div class="programlisting e259" xml:space="preserve">&lt;?xml version="1.0"?&gt;
               &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
               xmlns:dc="http://purl.org/dc/elements/1.1/"&gt;  
               &lt;rdf:Description&gt;
               &lt;dc:creator&gt;Nils Diewald&lt;/dc:creator&gt;
               &lt;dc:creator&gt;Maik Stührenberg&lt;/dc:creator&gt;
               &lt;dc:title&gt;An extensible API for documents with multiple annotation layers&lt;/dc:title&gt;
               &lt;dc:language&gt;EN&lt;/dc:language&gt;
               &lt;/rdf:Description&gt;
               &lt;/rdf:RDF&gt;
            </div>
         </div>
         <div class="figure e260" xml:id="lst.meta.dc">
            <div class="title e261">Accessing external metadata</div>
            <div class="programlisting e262" xml:space="preserve"># Define the metadata as an external file
               $cd-&gt;meta(uri =&gt; 'files/meta.xml');
               
               # Retrieve the metadata, resulting in a new XML::Loy object
               my $meta = $cd-&gt;meta(as =&gt; [-Loy, -DublinCore]);
               
               # The extension is available in the newly defined object
               print $meta-&gt;at('Description')-&gt;dc('title');
               # 'An extensible API for documents with multiple annotation layers'
            </div>
         </div>
         <div class="para e263">The API enables the reference to the external document and supports the access by
            defining
            a new 
            <div class="emphasis e264">XML::Loy</div> object with an extension for dealing with Dublin Core data.
            <div class="popupBox e265">
               <div class="popupLabel" onmouseover="$('#d1e601').show('1000');" onmouseout="$('#d1e601').hide('1000');">[ footnote ]</div>
               <div id="d1e601" style="display: none;">
                  <div class="footnote">
                     <div class="para e266">This extension is not described in this article.</div>
                  </div>
               </div>
            </div> As a result, the Dublin Core annotated 
            <div class="code e267">title</div> element can be accessed
            directly, although the data is not embedded in the document.
         </div>
      </div><a name="ConclusionandfutureworkANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e268">
         <div class="title e269">Conclusion and future work</div>
         <div class="para e270">We have demonstrated the 
            <div class="emphasis e271">XML::Loy</div> API that can be used as a framework
            for development of extensible modules for given namespaces (and therefore markup
            languages). Modules created as extensions can then be used in a simple but yet powerful
            way to
            create and process multiple annotated instances, even with standoff markup and referenced
            documents for primary and metadata information.
         </div>
         <div class="para e272">The current implementation of 
            <div class="emphasis e273">XML::Loy</div> is written in pure Perl, with
            the focus on demonstrating the flexibility and extensibility of our approach, rather
            than
            creating a performance optimized system. Since the whole API (including the extension
            modules
            and examples described in this paper) is available under a free license at 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e274" xlink:actuate="onRequest" xlink:href="http://github.com/Akron/XML-Loy-XStandoff" xlink:show="new" xlink:type="simple">http://github.com/Akron/XML-Loy-XStandoff</div> further possible steps could include
            performance optimizations and the creation of an extension repository for popular
            standardized
            markup languages (such as OLAC, DocBook and TEI).
         </div>
      </div><a name="AcknowledgementsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e275">
         <div class="title e276">Acknowledgements</div>
         <div class="para e277">We would like to thank the anonymous reviewers of this paper for their helpful comments
            and ideas.
         </div>
      </div><a name="ReferencesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e278">
         <div class="title e279">References</div>
         <div class="bibliomixed e280" xml:id="Atkins2011" xreflabel="Atkins et al., 2011">Martin Atkins, Will Norris,
            Chris Messina, Monica Wilkinson, and Rob Dolin (2011). Atom Activity Streams 1.0.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e281" xlink:actuate="onRequest" xlink:href="http://activitystrea.ms/specs/atom/1.0/" xlink:show="new" xlink:type="simple">http://activitystrea.ms/specs/atom/1.0/</div>
         </div>
         <div class="bibliomixed e282" xml:id="Bray2009" xreflabel="Bray et al., 2009">Tim Bray, Dave Hollander, Andrew
            Layman, Richard Tobin, and Henry S. Thompson (2009). Namespaces in XML 1.0 (Third
            Edition).
            W3C Recommendation, World Wide Web Consortium (W3C). 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e283" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/2009/REC-xml-names-20091208/" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/2009/REC-xml-names-20091208/</div>
         </div>
         <div class="bibliomixed e284" xml:id="Diewald2011" xreflabel="Diewald, 2011">Nils Diewald (2011). XML::Loy –
            Extensible XML Reader and Writer. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e285" xlink:actuate="onRequest" xlink:href="http://search.cpan.org/dist/XML-Loy/" xlink:show="new" xlink:type="simple">http://search.cpan.org/dist/XML-Loy/</div>
         </div>
         <div class="bibliomixed e286" xml:id="Fallside2004" xreflabel="Fallside and Walsmley, 2004">David C. Fallside
            and Priscilla Walmsley (2004). XML Schema Part 0: Primer Second Edition. W3C Recommendation,
            World Wide Web Consortium (W3C). 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e287" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/2004/REC-xmlschema-0-20041028/" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/2004/REC-xmlschema-0-20041028/</div>
         </div>
         <div class="bibliomixed e288" xml:id="Gao2012" xreflabel="Gao et al., 2012">Shudi (Sandy) Gao, C. M.
            Sperberg-McQueen, and Henry S. Thompson (2012). W3C XML Schema Definition Language
            (XSD) 1.1
            Part 1: Structures. W3C Recommendation, World Wide Web Consortium (W3C). 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e289" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/2012/REC-xmlschema11-1-20120405/" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/2012/REC-xmlschema11-1-20120405/</div>
         </div>
         <div class="bibliomixed e290" xml:id="Goecke2010" xreflabel="Goecke et al., 2010">Daniela Goecke, Harald Lüngen,
            Dieter Metzing, Maik Stührenberg, and Andreas Witt (2010). 
            <div class="emphasis e291" role="ital">Different
               views on markup. Distinguishing Levels and Layers
            </div>. In: Witt, A. and Metzing, D.
            (eds.), Linguistic Modeling of Information and Markup Languages. Dordrecht:
            Springer. doi:
            <div class="biblioid doi e292">10.1007/978-90-481-3331-4_1</div>.
         </div>
         <div class="bibliomixed e293" xml:id="Ishikawa2002" xreflabel="Ishikawa, 2002">Masayasu Ishikawa (2002). An
            XHTML+MathML+SVG Profile. W3C Working Draft, World Wide Web Consortium (W3C). 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e294" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/XHTMLplusMathMLplusSVG/xhtml-math-svg.html" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/XHTMLplusMathMLplusSVG/xhtml-math-svg.html</div>
         </div>
         <div class="bibliomixed e295" xml:id="vanKesteren2013" xreflabel="van Kesteren and Hunt, 2013">Anne Van Kesteren,
            and Lachlan Hunt (2013). Selectors API Level 1. W3C Recommendation, World Wide Web
            Consortium
            (W3C). 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e296" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/2013/REC-selectors-api-20130221/" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/2013/REC-selectors-api-20130221/</div>
         </div>
         <div class="bibliomixed e297" xml:id="Nottingham2005" xreflabel="Nottingham and Sayre, 2005">Mark Nottingham, and
            Robert Sayre (2005). The Atom Syndication Format. The Internet Society. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e298" xlink:actuate="onRequest" xlink:href="http://tools.ietf.org/html/rfc4287" xlink:show="new" xlink:type="simple">http://tools.ietf.org/html/rfc4287</div>
         </div>
         <div class="bibliomixed e299" xml:id="Riedel2008" xreflabel="Riedel, 2008">Sebastian Riedel (2008). Mojolicious.
            Real-time web framework. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e300" xlink:actuate="onRequest" xlink:href="http://search.cpan.org/dist/Mojolicious/" xlink:show="new" xlink:type="simple">http://search.cpan.org/dist/Mojolicious/</div>
         </div>
         <div class="bibliomixed e301" xml:id="Snell2006" xreflabel="Snell, 2006">James M. Snell (2006). Atom Threading
            Extensions. The Internet Society. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e302" xlink:actuate="onRequest" xlink:href="http://www.ietf.org/rfc/rfc4685.txt" xlink:show="new" xlink:type="simple">http://www.ietf.org/rfc/rfc4685.txt</div>
         </div>
         <div class="bibliomixed e303" xml:id="Sperberg-McQueen2004" xreflabel="Sperberg-McQueen and Huitfeldt, 2004">C.
            M. Sperberg-McQueen and Claus Huitfeldt (2004). 
            <div class="emphasis e304" role="ital">GODDAG: A Data
               Structure for Overlapping Hierarchies
            </div>. In: King, P. and Munson, E.&nbsp;V. (eds.),
            Proceedings of the 5th International Workshop on the Principles of Digital Document
            Processing
            (PODDP 2000), volume 2023 of Lecture Notes in Computer Science, Springer
         </div>
         <div class="bibliomixed e305" xml:id="Sperberg-McQueen2008a" xreflabel="Sperberg-McQueen and Huitfeldt, 2008">C.
            M. Sperberg-McQueen and Claus Huitfeldt (2008). GODDAG. Presented at the Goddag workshop,
            Amsterdam, 1-5 December 2008
         </div>
         <div class="bibliomixed e306" xml:id="Stuehrenberg2008" xreflabel="Stührenberg and Goecke, 2008">Maik
            Stührenberg and Daniela Goecke (2008). SGF – An integrated model for multiple
            annotations and its application in a linguistic domain. Presented at Balisage: The
            Markup
            Conference 2008, Montréal, Canada, August 12 - 15, 2008. In: Proceedings of Balisage:
            The
            Markup Conference 2008. Balisage Series on Markup Technologies, vol. 1. doi:
            <div class="biblioid doi e307">10.4242/BalisageVol1.Stuehrenberg01</div>
         </div>
         <div class="bibliomixed e308" xml:id="Stuehrenberg2009" xreflabel="Stührenberg and Jettka, 2009">Maik
            Stührenberg and Daniel Jettka (2009). A toolkit for multi-dimensional markup: The
            development
            of SGF to XStandoff. In Proceedings of Balisage: The Markup Conference 2009. Balisage
            Series
            on Markup Technologies, vol. 3. doi:
            <div class="biblioid doi e309">10.4242/BalisageVol3.Stuhrenberg01</div>.
         </div>
         <div class="bibliomixed e310" xml:id="Stuehrenberg2013" xreflabel="Stührenberg, 2013">Maik Stührenberg. A What,
            when, where? Spatial and temporal annotations with XStandoff. In Proceedings of Balisage:
            The
            Markup Conference 2013. doi:
            <div class="biblioid doi e311">10.4242/BalisageVol10.Stuhrenberg01</div>.
         </div>
         <div class="bibliomixed e312" xml:id="Thompson2004" xreflabel="Thompson et al., 2004">Henry S. Thompson, David
            Beech, Murray Maloney, and Noah Mendelsohn (2004). XML Schema Part 1: Structures Second
            Edition. W3C Recommendation, World Wide Web Consortium (W3C). 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e313" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/</div>
         </div>
         <div class="bibliomixed e314" xml:id="Winer2009" xreflabel="Winer, 2009">Dave Winer (2009). RSS 2.0
            Specification. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e315" xlink:actuate="onRequest" xlink:href="http://www.rssboard.org/rss-specification" xlink:show="new" xlink:type="simple">http://www.rssboard.org/rss-specification</div>
         </div>
      </div>
   </div>
</div>