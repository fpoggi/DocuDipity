<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#TheFtanMLMarkupLanguageANCHOR" name="TheFtanMLMarkupLanguageTOC">The FtanML Markup Language</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#FtanMLGoalsANCHOR" name="FtanMLGoalsTOC">FtanML Goals</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#RequirementsBackgroundANCHOR" name="RequirementsBackgroundTOC">Requirements Background</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#FtanML:TheMarkupLanguageANCHOR" name="FtanML:TheMarkupLanguageTOC">FtanML: The Markup Language</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#FtanMLExample:thePurchaseOrderANCHOR" name="FtanMLExample:thePurchaseOrderTOC">FtanML Example: the Purchase Order</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ThenullvalueANCHOR" name="ThenullvalueTOC">The null value</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#BooleanvaluesANCHOR" name="BooleanvaluesTOC">Boolean values</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#NumericvaluesANCHOR" name="NumericvaluesTOC">Numeric values</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#StringsANCHOR" name="StringsTOC">Strings</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ListsANCHOR" name="ListsTOC">Lists</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ElementsANCHOR" name="ElementsTOC">Elements</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#RichTextANCHOR" name="RichTextTOC">Rich Text</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#WhitespaceANCHOR" name="WhitespaceTOC">Whitespace</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#NamesandNamespacesANCHOR" name="NamesandNamespacesTOC">Names and Namespaces</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#DataModelANCHOR" name="DataModelTOC">Data Model</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#TheSchemaLanguage:FtanGramANCHOR" name="TheSchemaLanguage:FtanGramTOC">The Schema Language: FtanGram</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#FtanGramExample:thePurchaseOrderSchemaANCHOR" name="FtanGramExample:thePurchaseOrderSchemaTOC">FtanGram Example: the Purchase Order Schema</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ConstructingTypesANCHOR" name="ConstructingTypesTOC">Constructing Types</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#RestrictingnumbersANCHOR" name="RestrictingnumbersTOC">Restricting numbers</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#RestrictingstringsANCHOR" name="RestrictingstringsTOC">Restricting strings</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#RestrictinglistsANCHOR" name="RestrictinglistsTOC">Restricting lists</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#RestrictingelementsANCHOR" name="RestrictingelementsTOC">Restricting elements</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#RestrictingRichTextANCHOR" name="RestrictingRichTextTOC">Restricting Rich Text</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#UniquenessandReferentialConstraintsANCHOR" name="UniquenessandReferentialConstraintsTOC">Uniqueness and Referential Constraints</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#QueriesandTransformations:theFtanSkritProcessingLanguageANCHOR" name="QueriesandTransformations:theFtanSkritProcessingLanguageTOC">Queries and Transformations: the FtanSkrit Processing Language</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#FunctionsANCHOR" name="FunctionsTOC">Functions</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#FunctionDeclarationsANCHOR" name="FunctionDeclarationsTOC">Function Declarations</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#FunctionCallsANCHOR" name="FunctionCallsTOC">Function Calls</a></div>
               </div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ListandElementConstructorsANCHOR" name="ListandElementConstructorsTOC">List and Element Constructors</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ConditionalExpressionsANCHOR" name="ConditionalExpressionsTOC">Conditional Expressions</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#VariablesANCHOR" name="VariablesTOC">Variables</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#EqualityandOtherComparisonsANCHOR" name="EqualityandOtherComparisonsTOC">Equality and Other Comparisons</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#OperationsinvolvingTypesANCHOR" name="OperationsinvolvingTypesTOC">Operations involving Types</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#BooleanFunctionsandOperatorsANCHOR" name="BooleanFunctionsandOperatorsTOC">Boolean Functions and Operators</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#NumericFunctionsandOperatorsANCHOR" name="NumericFunctionsandOperatorsTOC">Numeric Functions and Operators</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#StringFunctionsandOperatorsANCHOR" name="StringFunctionsandOperatorsTOC">String Functions and Operators</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#FunctionsandOperatorsonListsANCHOR" name="FunctionsandOperatorsonListsTOC">Functions and Operators on Lists</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#FunctionsandOperatorsonElementsANCHOR" name="FunctionsandOperatorsonElementsTOC">Functions and Operators on Elements</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#FutureFeaturesANCHOR" name="FutureFeaturesTOC">Future Features</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConclusionsandSummaryANCHOR" name="ConclusionsandSummaryTOC">Conclusions and Summary</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ImplementationANCHOR" name="ImplementationTOC">Implementation</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#AcknowledgementsANCHOR" name="AcknowledgementsTOC">Acknowledgements</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ReferencesANCHOR" name="ReferencesTOC">References</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">age</div>
         <div class="singletermTERMS">attName</div>
         <div class="singletermTERMS">attName=&lt;ne="xmlns"&gt;</div>
         <div class="singletermTERMS">a + b</div>
         <div class="singletermTERMS">a.plus(b)</div>
         <div class="singletermTERMS">a=3</div>
         <div class="singletermTERMS">a="blue"</div>
         <div class="singletermTERMS">a=false</div>
         <div class="singletermTERMS">a="Chapter {n}"</div>
         <div class="singletermTERMS">a=[n, n+1, n+2]</div>
         <div class="singletermTERMS">a=&lt;x=(n+1) y=(n+2)&gt;</div>
         <div class="singletermTERMS">a=(n+1)</div>
         <div class="singletermTERMS">a={$+1}</div>
         <div class="singletermTERMS">add()</div>
         <div class="singletermTERMS">a.orElse(0)</div>
         <div class="singletermTERMS">A = null</div>
         <div class="singletermTERMS">as</div>
         <div class="singletermTERMS">asNull</div>
         <div class="singletermTERMS">asBoolean</div>
         <div class="singletermTERMS">asNumber</div>
         <div class="singletermTERMS">asString</div>
         <div class="singletermTERMS">asList</div>
         <div class="singletermTERMS">asElement</div>
         <div class="singletermTERMS">asText</div>
         <div class="singletermTERMS">asFunction</div>
         <div class="singletermTERMS">and</div>
         <div class="singletermTERMS">abs</div>
         <div class="singletermTERMS">avg</div>
         <div class="singletermTERMS">A.count()</div>
         <div class="singletermTERMS">A[n]</div>
         <div class="singletermTERMS">append(a, i)</div>
         <div class="singletermTERMS">a[0]</div>
         <div class="singletermTERMS">all</div>
         <div class="singletermTERMS">all([1,2,3]!{$&gt;0})</div>
         <div class="singletermTERMS">attributes()</div>
         <div class="singletermTERMS">add(element, name, value)</div>
         <div class="singletermTERMS">addContent</div>
         <div class="singletermTERMS">add(?, "", ?)</div>
         <div class="singletermTERMS">August 6 - 9, 2013</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">br</div>
         <div class="singletermTERMS">boolean</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2013</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">colors</div>
         <div class="singletermTERMS">coords</div>
         <div class="singletermTERMS">choice</div>
         <div class="singletermTERMS">content</div>
         <div class="singletermTERMS">content=&lt;boolean&gt;</div>
         <div class="singletermTERMS">content=&lt;null&gt;</div>
         <div class="singletermTERMS">count($$)</div>
         <div class="singletermTERMS">contains(?, ':')</div>
         <div class="singletermTERMS">collation(&lt;lang="se"&gt;)</div>
         <div class="singletermTERMS">collation(&lt;lang="se"&gt;)@sort(input)</div>
         <div class="singletermTERMS">contains</div>
         <div class="singletermTERMS">ceiling</div>
         <div class="singletermTERMS">count(A)</div>
         <div class="singletermTERMS">cat(a, a)</div>
         <div class="singletermTERMS">content()</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">DoubleLiteral</div>
         <div class="singletermTERMS">div</div>
         <div class="singletermTERMS">deepContent()</div>
         <div class="singletermTERMS">descendants(E)</div>
         <div class="singletermTERMS">Document Processing Languages</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">element</div>
         <div class="singletermTERMS">even</div>
         <div class="singletermTERMS">eq</div>
         <div class="singletermTERMS">elemName</div>
         <div class="singletermTERMS">elements</div>
         <div class="singletermTERMS">element("img")</div>
         <div class="singletermTERMS">endsWith</div>
         <div class="singletermTERMS">E.name()</div>
         <div class="singletermTERMS">E?{$.in("id", "code", "status"}</div>
         <div class="singletermTERMS">E@xyz</div>
         <div class="singletermTERMS">E@(X@name)</div>
         <div class="singletermTERMS">E^</div>
         <div class="singletermTERMS">E@``</div>
         <div class="singletermTERMS">E//?:status</div>
         <div class="singletermTERMS">E//?[$@id=12]</div>
         <div class="singletermTERMS">E!{$}</div>
         <div class="singletermTERMS">element(name)</div>
         <div class="singletermTERMS">element(name, attributes)</div>
         <div class="singletermTERMS">Efficient XML Interchange (EXI) Format 1.0</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
         <div class="singletermTERMS">form</div>
         <div class="singletermTERMS">from</div>
         <div class="singletermTERMS">f(&lt;x=2 y=3&gt;)</div>
         <div class="singletermTERMS">F(x, y)</div>
         <div class="singletermTERMS">f(x,y)</div>
         <div class="singletermTERMS">flatten()</div>
         <div class="singletermTERMS">false</div>
         <div class="singletermTERMS">floor</div>
         <div class="singletermTERMS">flatten</div>
         <div class="singletermTERMS">flatten([[1,2],[3,[4,5]]])</div>
         <div class="singletermTERMS">forEach</div>
         <div class="singletermTERMS">forEach([1,2,3], {$+1})</div>
         <div class="singletermTERMS">fold-left</div>
         <div class="singletermTERMS">fold-right</div>
         <div class="singletermTERMS">facets</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
         <div class="singletermTERMS">gt=0</div>
         <div class="singletermTERMS">gt</div>
         <div class="singletermTERMS">ge</div>
         <div class="singletermTERMS">grammar</div>
         <div class="singletermTERMS">ge=0</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">HHHHH</div>
         <div class="singletermTERMS">height</div>
         <div class="singletermTERMS">height=&lt;nullable&lt;number&gt;&gt;</div>
         <div class="singletermTERMS">headword</div>
         <div class="singletermTERMS">head(a)</div>
         <div class="singletermTERMS">head</div>
         <div class="singletermTERMS">head()</div>
         <div class="singletermTERMS">https://github.com/organizations/FtanML-WG</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">items</div>
         <div class="singletermTERMS">item</div>
         <div class="singletermTERMS">id</div>
         <div class="singletermTERMS">indexOf</div>
         <div class="singletermTERMS">if</div>
         <div class="singletermTERMS">in(V, A)</div>
         <div class="singletermTERMS">in</div>
         <div class="singletermTERMS">isA</div>
         <div class="singletermTERMS">isNull</div>
         <div class="singletermTERMS">isBoolean</div>
         <div class="singletermTERMS">isNumber</div>
         <div class="singletermTERMS">isString</div>
         <div class="singletermTERMS">isList</div>
         <div class="singletermTERMS">isElement</div>
         <div class="singletermTERMS">isText</div>
         <div class="singletermTERMS">isFunction</div>
         <div class="singletermTERMS">idiv</div>
         <div class="singletermTERMS">itemAt(A, n)</div>
         <div class="singletermTERMS">index-of</div>
         <div class="singletermTERMS">insert-before</div>
         <div class="singletermTERMS">items??{$@id='xyz'}</div>
         <div class="singletermTERMS">Introducing JSON</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
         <div class="singletermTERMS">Kay</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">list</div>
         <div class="singletermTERMS">le=1000</div>
         <div class="singletermTERMS">le</div>
         <div class="singletermTERMS">lt</div>
         <div class="singletermTERMS">let</div>
         <div class="singletermTERMS">let x=2; x+x</div>
         <div class="singletermTERMS">let a=b; a=b</div>
         <div class="singletermTERMS">L?{name($)=N}</div>
         <div class="singletermTERMS">L?:N</div>
         <div class="singletermTERMS">L??:N</div>
         <div class="singletermTERMS">LL</div>
         <div class="singletermTERMS">L@name</div>
         <div class="singletermTERMS">LL!{$@name}</div>
         <div class="singletermTERMS">LMNL: Layered Markup and Annotation Language</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">minInclusive</div>
         <div class="singletermTERMS">minExclusive</div>
         <div class="singletermTERMS">maxInclusive</div>
         <div class="singletermTERMS">maxExclusive</div>
         <div class="singletermTERMS">min</div>
         <div class="singletermTERMS">max</div>
         <div class="singletermTERMS">minus</div>
         <div class="singletermTERMS">mod</div>
         <div class="singletermTERMS">MicroXML</div>
         <div class="singletermTERMS">mike@saxonica.com</div>
         <div class="singletermTERMS">Michael</div>
         <div class="singletermTERMS">Markup Languages</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">N * 10^M</div>
         <div class="singletermTERMS">null</div>
         <div class="singletermTERMS">name</div>
         <div class="singletermTERMS">number</div>
         <div class="singletermTERMS">ne</div>
         <div class="singletermTERMS">not</div>
         <div class="singletermTERMS">name(E)</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">org_w3c_xsl_transform</div>
         <div class="singletermTERMS">org_ftanml_calendar_dateType</div>
         <div class="singletermTERMS">occurs</div>
         <div class="singletermTERMS">occurs=1</div>
         <div class="singletermTERMS">orElse</div>
         <div class="singletermTERMS">or</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">polygon</div>
         <div class="singletermTERMS">positive</div>
         <div class="singletermTERMS">plus</div>
         <div class="singletermTERMS">plus(a, b)</div>
         <div class="singletermTERMS">parse</div>
         <div class="singletermTERMS">parse(X).asA(&lt;number&gt;)</div>
         <div class="singletermTERMS">prepend(i, a)</div>
         <div class="singletermTERMS">PO</div>
         <div class="singletermTERMS">PO@shipTo^??:name</div>
         <div class="singletermTERMS">PO@items[0]@partNum</div>
         <div class="singletermTERMS">PO@items?{$@USprice &gt; 20.00}</div>
         <div class="singletermTERMS">PO@items@partNum</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">round</div>
         <div class="singletermTERMS">remove(a, 0)</div>
         <div class="singletermTERMS">remove</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">sub</div>
         <div class="singletermTERMS">status</div>
         <div class="singletermTERMS">string</div>
         <div class="singletermTERMS">SKUType</div>
         <div class="singletermTERMS">step</div>
         <div class="singletermTERMS">step=17.2</div>
         <div class="singletermTERMS">seq</div>
         <div class="singletermTERMS">self</div>
         <div class="singletermTERMS">startsWith</div>
         <div class="singletermTERMS">substringAfter</div>
         <div class="singletermTERMS">substringBefore</div>
         <div class="singletermTERMS">serialize</div>
         <div class="singletermTERMS">sum</div>
         <div class="singletermTERMS">string-join($!toString, " ")</div>
         <div class="singletermTERMS">string(content($))</div>
         <div class="singletermTERMS">string-join($.toList()!toString)</div>
         <div class="singletermTERMS">subsequence</div>
         <div class="singletermTERMS">select</div>
         <div class="singletermTERMS">select([1,2,3], {$&gt;=2})</div>
         <div class="singletermTERMS">some</div>
         <div class="singletermTERMS">some([1,2,3]!{$=0})</div>
         <div class="singletermTERMS">Schema Languages</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">text</div>
         <div class="singletermTERMS">to</div>
         <div class="singletermTERMS">toText()</div>
         <div class="singletermTERMS">true</div>
         <div class="singletermTERMS">toString</div>
         <div class="singletermTERMS">toList</div>
         <div class="singletermTERMS">toText</div>
         <div class="singletermTERMS">times</div>
         <div class="singletermTERMS">tail(a)</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
         <div class="singletermTERMS">unique={$}</div>
         <div class="singletermTERMS">unique={substring($, 0, 1)}</div>
         <div class="singletermTERMS">unique={$2}</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
         <div class="singletermTERMS">value</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">x00</div>
         <div class="singletermTERMS">xmlns</div>
         <div class="singletermTERMS">xmlns=&lt;null&gt;</div>
         <div class="singletermTERMS">x.f(y)</div>
         <div class="singletermTERMS">x.isA(&lt;number ge=0&gt;)</div>
         <div class="singletermTERMS">xyz</div>
         <div class="singletermTERMS">XML Schema Part 0 Primer</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
         <div class="singletermTERMS">YAML: YAML ain't markup language</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="TheFtanMLMarkupLanguageANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3" xml:id="HR-23632987-8973">
      <div class="title e1">The FtanML Markup Language</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2013</div>
            <div class="confdates e5">August 6 - 9, 2013</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">This paper presents a new markup language called FtanML, together with an
               associated schema language called FtanGram, and a query/transformation language
               called FtanSkrit. FtanML was originally designed by a group of students taught by
               the author, together with Stephanie Haupt, at a summer school held in the Swiss
               village of Ftan in August 2012. It has since been taken forward by the author with
               some further involvement by the students. The idea of FtanML is to rethink markup
               from the ground up: to imagine what the world could be like if we didn't have to
               carry forward the mistakes of the past; to take what works well in current
               languages, and discard the features that do little more than add complexity. More
               mundanely, FtanML can be seen as a blend of ideas from XML and JSON: neither the
               union nor the intersection of the two, but a new language that combines the best
               features of both.
            </div>
         </div>
         <div class="author e8">
            <div class="personname e9">
               <div class="firstname e10">Michael</div>
               <div class="surname e11">Kay</div>
            </div>
            <div class="personblurb e12">
               <div class="para e13">Michael Kay has been developing the Saxon product since 1998, initially as
                  a spare-time activity at ICL and then Software AG, but since 2004 within the
                  Saxonica company which he founded. He holds a Ph.D from the University of
                  Cambridge where he studied databases under the late Maurice Wilkes, and
                  spent 24 years with ICL, mainly working on the development of database
                  software. He is the editor of the W3C XSLT specification. The FtanML project
                  is totally separate from any W3C or Saxonica activities.
               </div>
            </div>
            <div class="affiliation e14">
               <div class="orgname e15">Saxonica</div>
            </div>
            <div class="email e16">mike@saxonica.com</div>
         </div>
         <div class="keywordset e17" role="author">
            <div class="keyword e18">Markup Languages</div>
            <div class="keyword e19">Schema Languages</div>
            <div class="keyword e20">Document Processing Languages</div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e21">
         <div class="title e22">Introduction</div>
         <div class="para e23">Whereas the computing community invents a new programming language almost every week,
            and the best ideas from these many experiments find their way into perhaps one
            programming language a year that sees the light of day outside the project that
            conceived it, new markup languages are rather rare, and most attempts to create them
            (such as the MicroXML project
            <div class="xref e24" linkend="ref1"></div>) have self-imposed constraints of compatibility that
            limit the freedom of the designers to find new ways of doing things, even in areas
            where
            existing designs are universally acknowledged to be problematic.
         </div>
         <div class="para e25">Invited to run a course at a summer school in August 2012 for a high-achieving group
            of German undergraduates, I decided to take the opportunity to remedy this. While
            enjoying the thin air of the Swiss Alps in the Romansch-speaking village of Ftan at
            1700m above sea level, the students spent the first week learning the technologies
            in
            the XML stack, and the second week designing a replacement. The result was FtanML.
            
            <div class="popupBox e26">
               <div class="popupLabel" onmouseover="$('#d1e44').show('1000');" onmouseout="$('#d1e44').hide('1000');">[ footnote ]</div>
               <div id="d1e44" style="display: none;">
                  <div class="footnote">
                     <div class="para e27">Ftan is a place name, not an acronym, and while words beginning "Ft" are
                        uncommon in English, the pronunciation comes easily with practice.
                     </div>
                  </div>
               </div>
            </div>
         </div><a name="FtanMLGoalsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e28">
            <div class="title e29">FtanML Goals</div>
            <div class="para e30">Some of the design goals the students set themselves at the end of the first week
               were:
            </div>
            <div class="para e31">
               
               <div class="itemizedlist e32">
                  <div class="listitem e33">
                     <div class="para e34">The language would be as good as JSON
                        <div class="xref e35" linkend="ref3"></div> in handling typed data, and as good
                        as XML in handling documents.
                     </div>
                  </div>
                  <div class="listitem e36">
                     <div class="para e37">The language would be more concise than XML, while still being
                        human-readable.
                     </div>
                  </div>
                  <div class="listitem e38">
                     <div class="para e39">Both a syntax and a data model would be defined; the data model must map
                        readily to data structures available in most modern programming
                        languages.
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e40">Perhaps as important was a non-goal of which we had to remind ourselves frequently:
               compatibility with the past was not an objective. We did not want to repeat other
               people's mistakes for the sake of compatibility, whether at the level of documents,
               parsers, APIs, editing tools, or simply user expectations. Associated with this goal
               was
               the implicit decision that we would not compromise technical quality in the interests
               of
               market acceptance. The aim was to do it right, and we would not measure success by
               the
               level of adoption. Having said that, there was no point in being needlessly different
               when there was nothing wrong with existing designs.
            </div>
            <div class="para e41">During the second week of the course we defined the FtanML markup language and object
               model, and implemented a parser using JavaCC. In the weeks after the course, some
               of the
               students rewrote the parser in Scala, and together we worked on extending the system
               with a type/constraint language. Inevitably, with the students dispersed to their
               various institutions, momentum was lost, but I decided that there were enough good
               ideas
               that it was worth bringing the design to some kind of completion. This paper provides
               an
               overview of the language rather than a complete specification (which remains as work
               to
               be done). A Scala implementation covering a significant subset is available at
               [2].
            </div>
         </div><a name="RequirementsBackgroundANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e42">
            <div class="title e43">Requirements Background</div>
            <div class="para e44">XML has been remarkably successful and is widely used. It meets a wide variety of
               needs,
               achieves a high level of interoperability, and is not expensive to implement. 
            </div>
            <div class="para e45">Nevertheless, over a period of 15 years' use, the drawbacks and limitations of XML
               have become well known, and are acknowledged by XML's critics and enthusiasts alike.
               Perhaps
               the most notable limitations and frustrations are:
            </div>
            <div class="itemizedlist e46">
               <div class="listitem e47">
                  <div class="para e48">XML has been widely adopted as a serialization format for structured data, but
                     its data model has a poor fit to the type systems of most popular programming languages.
                     Hence alternatives such as JSON and YAML
                     <div class="xref e49" linkend="ref4"></div>.
                  </div>
               </div>
               <div class="listitem e50">
                  <div class="para e51">XML is over-complex. Many of its features are rarely used, or used only in very
                     simple ways, but still make everything more complicated. Hence MicroXML.
                  </div>
               </div>
               <div class="listitem e52">
                  <div class="para e53">XML cannot handle overlap or graph structures. Hence LMNL
                     <div class="xref e54" linkend="ref5"></div> and GODDAG
                     <div class="xref e55" linkend="ref6"></div>.
                  </div>
               </div>
               <div class="listitem e56">
                  <div class="para e57">XML is verbose and inefficient. Hence the various Binary XML contenders,
                     including Fast Infoset
                     <div class="xref e58" linkend="ref7"></div> and EXI
                     <div class="xref e59" linkend="ref8"></div>, as well as the adoption of custom non-XML syntax
                     for various applications such as RelaxNG and RDF in direct competition with an
                     XML syntax for the same information.
                  </div>
               </div>
               <div class="listitem e60">
                  <div class="para e61">XML is syntax without an agreed data model. No-one knows, for example, whether
                     CDATA sections should be treated as information-bearing or not. Similarly for comments.
                     Hence the myriad XML data models such as DOM and XDM, all of them different.
                  </div>
               </div>
            </div>
            <div class="para e62">So there's clearly room for improvement. A standard, once entrenched, rarely gives
               way 
               to a technically superior alternative: the
               QWERTY keyboard is an oft-cited example, and XML will probably be no exception. However,
               there's room for diversity, and the aim of this exercise is to explore
               what is possible. It doesn't tackle all the problems noted above (for example, there's
               nothing
               on overlap or graph structures); but it tries to address most of them.
            </div>
         </div>
      </div><a name="FtanML:TheMarkupLanguageANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e63">
         <div class="title e64">FtanML: The Markup Language</div>
         <div class="para e65">This section presents the syntax of FtanML. We'll present the "data-only" core of
            the
            language at this stage, but with some forwards references to how the language is
            subsequently extended to enable active scripting of documents.
         </div>
         <div class="para e66">A document (the unit of input to the parser) is a sequence of Unicode characters
            conforming to the grammar defined in this section. The encoding of characters as octets
            (or as scratches on clay tablets) is out of scope — it belongs in a different layer
            of
            the protocol stack. But if in doubt, UTF-8 is recommended.
         </div>
         <div class="para e67">The document must match the 
            <div class="code e68">value</div> production.
         </div>
         <div class="programlisting e69" xml:space="preserve">
            value ::= null | boolean | number | string | list | element | richText
            
         </div>
         <div class="para e70">As this production shows, there are seven kinds of value, which we will present in
            turn, starting with the simplest. The term "rich text" means text with interspersed
            markup: what the markup community traditionally calls "mixed content".
         </div>
         <div class="para e71">Later we will introduce an eighth kind of value, namely functions. But first, let's
            start with an example.
         </div><a name="FtanMLExample:thePurchaseOrderANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e72">
            <div class="title e73">FtanML Example: the Purchase Order</div>
            <div class="para e74">This is what the purchase order from the XML Schema Primer
               <div class="xref e75" linkend="ref2"></div> might look like in FtanML.
            </div>
            <div class="programlisting e76" xml:space="preserve">&lt;purchaseOrder 
               orderDate="1999-10-20" 
               shipTo = &lt;country="US" [
               &lt;name "Alice Smith"&gt;
               &lt;street "123 Maple Street"&gt;
               &lt;city "Mill Valley"&gt;
               &lt;state "CA"&gt;
               &lt;zip 90952&gt;
               ]&gt;
               billTo = &lt;country="US" [
               &lt;name "Robert Smith"&gt;
               &lt;street "8 Oak Avenue"&gt;
               &lt;city "Old Town"&gt;
               &lt;state "PA"&gt;
               &lt;zip 95819&gt;
               ]&gt;
               comment = |&lt;emph |Hurry|&gt;, my lawn is going wild|
               items = [
               &lt;  partNum="872-AA"
               productName="Lawnmower"
               quantity=1
               USPrice=148.95
               comment=|Confirm this is &lt;strong |electric|&gt;|
               &gt;
               &lt;  partNum="926-AA"
               productName="Baby Monitor"
               quantity=1
               USPrice=39.98
               shipDate="1999-05-21"
               &gt;
               ]
               &gt;
            </div>
            <div class="para e77">This example follows the example given in the XML Schema Primer very closely; I've
               only made one change, which is to use rich text in the comment fields. Let's compare
               it with the XML version:
            </div>
            <div class="itemizedlist e78">
               <div class="listitem e79">
                  <div class="para e80">End tags reduce to a simple "&gt;".</div>
               </div>
               <div class="listitem e81">
                  <div class="para e82">The content of an element, and the content of an attribute, can be either
                     a string (in single or double quotes), a number, a boolean (not used in this
                     example), rich text (delimited with vertical bars), an element, or a list of
                     elements (inter alia). When elements have element content, the child
                     elements are enclosed in a list marked by square brackets.
                  </div>
               </div>
               <div class="listitem e83">
                  <div class="para e84">Since an attribute
                     can contain anything an element can contain, it's possible to use structured attributes,
                     and I have
                     taken advantage of this. 
                     I have chosen to use attributes rather than child elements in cases where ordering
                     does not
                     matter, and where there is only one child of the parent element with a given name:
                     specifically
                     for the top-level properties of a purchase order, and for the properties of each item.
                     Where
                     there is some significance in the ordering, as with the components of an address,
                     I chose
                     to use child elements.
                  </div>
               </div>
               <div class="listitem e85">
                  <div class="para e86">In the list of items, the original XML has an element named
                     
                     <div class="code e87">items</div>, whose children are all elements named
                     
                     <div class="code e88">item</div>. Since the name of the child element is always the
                     same, it is redundant, so I chose to leave it out: the content of the
                     
                     <div class="code e89">items</div> attribute is now a list of anonymous elements.
                  </div>
               </div>
               <div class="listitem e90">
                  <div class="para e91">There's a difference between a singleton and a list of length one. Lists
                     are always explicitly marked with square brackets. That might be a little
                     inconvenient for authors, but it makes life a lot easier for the programmer
                     at the receiving end. (You could choose to allow the 
                     <div class="code e92">items</div>
                     attribute to contain a single item rather than a list if only one item has
                     been ordered, but the program reading the data would then have to cater for
                     both possibilities.)
                  </div>
               </div>
               <div class="listitem e93">
                  <div class="para e94">For the purpose of the example I have followed the XML Schema Primer in
                     defining the ZIP code as a number, though in reality it should be a string
                     of digits, which is not the same thing.
                  </div>
               </div>
               <div class="listitem e95">
                  <div class="para e96">There's no ambiguity about where whitespace is and is not significant. It's only significant
                     if it
                     appears in a string, or in rich text.
                  </div>
               </div>
            </div>
            <div class="para e97">If we compare this with how it might have been done in JSON, there are two main
               differences. Firstly, JSON provides no satisfactory way to handle the mixed content
               comments. Secondly, with JSON we would have to make a choice how to represent the
               addresses: either use an object (i.e. a map), in which case ordering information is
               lost, or use an array in which case the components have no names. A minor difference
               with JSON, or at least with official JSON, is that we don't need quotes around the
               element and attribute names.
            </div>
            <div class="para e98">Now let's look at the individual constructs of FtanML.</div>
         </div><a name="ThenullvalueANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e99">
            <div class="title e100">The null value</div>
            <div class="programlisting e101" xml:space="preserve">
               null ::= "null"
               
            </div>
            <div class="para e102">There is a single value in this class, denoted by the keyword "null". It is
               borrowed directly from JSON, but plays a wider part in the data model.
            </div>
         </div><a name="BooleanvaluesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e103">
            <div class="title e104">Boolean values</div>
            <div class="programlisting e105" xml:space="preserve">
               boolean ::= "true" | "false"
               
            </div>
            <div class="para e106">There are two boolean values, denoted by the keywords "true" and "false".</div>
         </div><a name="NumericvaluesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e107">
            <div class="title e108">Numeric values</div>
            <div class="programlisting e109" xml:space="preserve">
               number ::= "-"? digits ("." digits)? ([eE] [+-]? digits)?
               digits ::= [0-9]+
               
            </div>
            <div class="para e110">The production rule for numbers is a little different from both the
               
               <div class="code e111">DoubleLiteral</div> of XPath 2.0 (it requires digits both before and
               after the decimal point), and the equivalent in JSON (it allows leading zeros). The
               value space is not binary floating point, but decimal. Specifically, it is the set
               of values that can be represented in the form 
               <div class="code e112">N * 10^M</div> where
               
               <div class="code e113">N</div> and 
               <div class="code e114">M</div> are integers, and 
               <div class="code e115">N</div> is not a
               multiple of ten. Implementations may impose limits on this infinite set.
            </div>
            <div class="para e116">Why decimals? Because that's what most human beings on the planet use in their
               everyday lives. Floating-point binary is designed for machines, not for humans.
               Also, because it survives round-trip conversion to and from text without ambiguity
               or loss of precision. However, the use of decimals gives a problem with the design
               goal that it should be easy to program using conventional programming languages. We
               take a hit here: in the case of programming languages with no decimal data type,
               numbers may be converted to whatever number system that language uses. But the
               native language for processing FtanML, namely FtanSkrit, treats the values as
               decimals.
            </div>
         </div><a name="StringsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e117">
            <div class="title e118">Strings</div>
            <div class="programlisting e119" xml:space="preserve">
               string ::= ('"' (charRep - '"')* '"') | ("'" (charRep - "'")* "'")
               charRep ::= (char - "\") | escape
               char ::= (any Unicode character)
               escape ::= (see prose)
               
            </div>
            <div class="para e120">Strings are enclosed in either double or single quotes. The value space for
               strings is the set of all sequences of Unicode characters. In the FtanML
               representation of a string, these characters are represented as themselves, except
               in the case of characters that have a special meaning, notably the string delimiter,
               and the escape character "\".
            </div>
            <div class="para e121">Escape sequences fall into a number of categories:</div>
            <div class="para e122">
               
               <div class="itemizedlist e123">
                  <div class="listitem e124">
                     <div class="para e125">Whitespace escapes: 
                        <div class="code e126">\n</div>, 
                        <div class="code e127">\r</div>, 
                        <div class="code e128">\t</div>,
                        
                        <div class="code e129">\s</div>, and 
                        <div class="code e130">\S</div> represent newline, carriage
                        return, tab, space, and non-breaking space respectively.
                     </div>
                  </div>
                  <div class="listitem e131">
                     <div class="para e132">Formatting escapes: 
                        <div class="code e133">\</div> followed by a sequence of
                        whitespace characters represents nothing. This means that a FtanML
                        editor can reformat the text for display purposes by inserting or
                        removing escaped newlines without changing the actual content.
                     </div>
                  </div>
                  <div class="listitem e134">
                     <div class="para e135">Special character escapes: 
                        <div class="code e136">\\</div> for backslash,
                        
                        <div class="code e137">\"</div> for quotation mark, 
                        <div class="code e138">\'</div> for apostrophe,
                        
                        <div class="code e139">\|</div> for vertical bar, 
                        <div class="code e140">\`</div> for backtick,
                        
                        <div class="code e141">\&lt;</div> for a left angle bracket, 
                        <div class="code e142">\[</div> for a
                        left square bracket, 
                        <div class="code e143">\{</div> for a left curly brace.
                     </div>
                  </div>
                  <div class="listitem e144">
                     <div class="para e145">Unicode codepoint escapes: 
                        <div class="code e146">\xHHHHH;</div> represents the
                        Unicode codepoint whose hexadecimal value is 
                        <div class="code e147">HHHHH</div>. This
                        may be any number of digits, followed by a semicolon. (Unlike JSON,
                        non-BMP characters are represented by the actual codepoint, not by a
                        surrogate pair.)
                     </div>
                  </div>
                  <div class="listitem e148">
                     <div class="para e149">Cells: 
                        <div class="code e150">\[§....§]</div> where 
                        <div class="code e151">§</div> is any character
                        that does not appear in the string. This is analogous to XML's CDATA
                        section, except that it can also be used in attributes: it allows a
                        literal string to appear without escaping of special characters. For
                        example a sequence of four backslashes might be written
                        
                        <div class="code e152">\[⟡\\\\⟡]</div>. Cells are handy for things such as regular
                        expressions and Windows filenames, and for authoring papers that
                        describe new markup languages.
                        <div class="popupBox e153">
                           <div class="popupLabel" onmouseover="$('#d1e297').show('1000');" onmouseout="$('#d1e297').hide('1000');">[ footnote ]</div>
                           <div id="d1e297" style="display: none;">
                              <div class="footnote">
                                 <div class="para e154">It's called a cell because escaping is not allowed.</div>
                              </div>
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e155">The only characters that must be escaped in strings are 
               <div class="code e156">\</div>,
               
               <div class="code e157">{</div> , and the character used as the string delimiter (
               <div class="code e158">"</div>
               or  
               <div class="code e159">'</div>).  We'll come on to the significance of curly braces
               later.
            </div>
         </div><a name="ListsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e160">
            <div class="title e161">Lists</div>
            <div class="para e162">A list is a sequence of values. The values may be of any of the seven kinds (null,
               boolean, number, string, list, element, or rich text).
            </div>
            <div class="para e163">The unabbreviated syntax is the same as for arrays in JSON:</div>
            <div class="programlisting e164" xml:space="preserve">
               list ::= "[" (value ("," value)* )? "]"
               
            </div>
            <div class="para e165">For example, 
               <div class="code e166">[1, 3, "London", null]</div>
            </div>
            <div class="para e167">Two abbreviations are allowed:</div>
            <div class="para e168">
               
               <div class="itemizedlist e169">
                  <div class="listitem e170">
                     <div class="para e171"> Commas may be omitted, so 
                        <div class="code e172">[1 2 3]</div> is equivalent to
                        
                        <div class="code e173">[1,2,3]</div> and
                        
                        <div class="code e174">[&lt;first&gt;&lt;last&gt;]</div> is
                        equivalent to 
                        <div class="code e175">[&lt;first&gt;,&lt;last&gt;]</div>.
                        
                     </div>
                  </div>
                  <div class="listitem e176">
                     <div class="para e177">The value 
                        <div class="code e178">null</div> is implicit if there is nothing between
                        two commas, or before the first comma, or after the last. So
                        
                        <div class="code e179">[,,]</div> is equivalent to
                        
                        <div class="code e180">[null,null,null]</div>
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e181">The effect of these two rules is that the abbreviated syntax for lists
               becomes:
            </div>
            <div class="programlisting e182" xml:space="preserve">
               lists ::= "[" ( value | ",")* "]"
               
            </div>
            <div class="para e183">Whitespace is needed between two values only where necessary to terminate a token;
               specifically, when
               one value ends with an alphanumeric character and the next starts with an alphanumeric
               character.
            </div>
         </div><a name="ElementsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e184">
            <div class="title e185">Elements</div>
            <div class="para e186">Elements serve the same purpose as objects (maps) in JSON and elements in
               XML.
            </div>
            <div class="programlisting e187" xml:space="preserve">
               element ::= "&lt;" name? (name "=" value)* content? "&gt;"
               content ::= value
               
            </div>
            <div class="para e188">Elements have three parts: an optional name, a set of name/value pairs called
               attributes, and an optional value referred to as the element's content.
            </div>
            <div class="para e189">The values of attributes can be of any type: not just strings as in XML, but
               numbers, booleans, lists, elements, rich text. An attribute with the value null is
               deemed equivalent to omitting the attribute.
               <div class="popupBox e190">
                  <div class="popupLabel" onmouseover="$('#d1e377').show('1000');" onmouseout="$('#d1e377').hide('1000');">[ footnote ]</div>
                  <div id="d1e377" style="display: none;">
                     <div class="footnote">
                        <div class="para e191">This decision means that JSON is not a pure subset of FtanML, because JSON
                           distinguishes an absent entry in an object from an entry whose value is
                           null. However, the decision makes programming simpler, and makes sense
                           semantically.
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e192">Attribute names within an element must be distinct.</div>
            <div class="para e193">Like attributes, the content value can be of any type.</div>
            <div class="para e194">As with lists, whitespace is needed only where necessary to terminate a
               token.
            </div>
            <div class="para e195">We'll have more to say on element and attribute names later. For the moment,
               suffice it to say that the name can be any non-empty string. If the name contains
               special characters it can be written within backticks (a convention borrowed from
               the SQL world).
            </div>
            <div class="para e196">Here are some examples of elements. (We haven't explained rich text yet, so we
               won't use it in any of our examples):
            </div>
            <div class="para e197">
               
               <div class="table e198">
                  <div class="caption e199">
                     <div class="para e200">Examples of Elements</div>
                  </div>
                  <div class="thead e201">
                     <div class="tr e202">
                        <div class="th e203">Example</div>
                        <div class="th e204">Explanation</div>
                     </div>
                  </div>
                  <div class="tbody e205">
                     <div class="tr e206">
                        <div class="td e207">&lt;&gt;</div>
                        <div class="td e208">An empty element (no name, attributes, or content)</div>
                     </div>
                     <div class="tr e209">
                        <div class="td e210">&lt;br&gt;</div>
                        <div class="td e211">An empty element named 
                           <div class="code e212">br</div>
                        </div>
                     </div>
                     <div class="tr e213">
                        <div class="td e214">&lt;age 23&gt;</div>
                        <div class="td e215">An element whose name is 
                           <div class="code e216">age</div> and whose content
                           value is the number 23
                        </div>
                     </div>
                     <div class="tr e217">
                        <div class="td e218">&lt;colors ["red", "green", "blue"]&gt;</div>
                        <div class="td e219">An element whose name is 
                           <div class="code e220">colors</div> and whose
                           content value is a list of three strings
                        </div>
                     </div>
                     <div class="tr e221">
                        <div class="td e222">&lt;x=0.13 y=0.57&gt;</div>
                        <div class="td e223">An unnamed element containing two attributes, both
                           numeric
                        </div>
                     </div>
                     <div class="tr e224">
                        <div class="td e225">&lt;polygon coords=[[1,1], [1,3], [3,2]]&gt;</div>
                        <div class="td e226">An element named 
                           <div class="code e227">polygon</div> with an attribute named
                           
                           <div class="code e228">coords</div> whose content value is a list; the list
                           contains three sublists, and each sublist contains two
                           numbers.
                        </div>
                     </div>
                     <div class="tr e229">
                        <div class="td e230">&lt;[&lt;i&gt;&lt;j&gt;&lt;k&gt;]&gt;</div>
                        <div class="td e231">An unnamed element whose content value is a list of three
                           elements. Note the omission of the optional commas.
                        </div>
                     </div>
                     <div class="tr e232">
                        <div class="td e233">&lt;`Graduate Trainee` `date of birth`="1995-01-01"&gt;</div>
                        <div class="td e234">An element where both the element name and attribute name contain spaces.</div>
                     </div>
                  </div>
               </div>
               
            </div>
         </div><a name="RichTextANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e235">
            <div class="title e236">Rich Text</div>
            <div class="para e237">Rich Text (known in the XML world as mixed content) consists of characters and markup,
               
               or more specifically a sequence whose members are either characters or elements.
            </div>
            <div class="programlisting e238" xml:space="preserve">
               richText ::= "|" (charRep | element) "|"
               
            </div>
            <div class="para e239">Rich text is written between vertical bars.
               <div class="popupBox e240">
                  <div class="popupLabel" onmouseover="$('#d1e467').show('1000');" onmouseout="$('#d1e467').hide('1000');">[ footnote ]</div>
                  <div id="d1e467" style="display: none;">
                     <div class="footnote">
                        <div class="para e241">This is a change from the original FtanML design. Originally rich text was
                           introduced by a vertical bar, and ended with the "&gt;" delimiter marking the
                           end of the element. This design prevented rich text appearing as the value
                           of an attribute, or being used as a value in the scripting language. The
                           revised design restores orthogonality by allowing rich text to appear where
                           any value can appear. 
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e242">For example: 
               <div class="code e243">|H&lt;sub|2|&gt;O|</div> represents text consisting of the
               character "H", an element whose name is 
               <div class="code e244">sub</div> and whose content is the
               rich text "2", and the character "O".
            </div>
            <div class="para e245">Escapes can be used in rich text just as they can in strings. Any recognized
               escape sequence may be used; the only characters that must be escaped are "\", "|",
               "{", and "&lt;".
            </div>
         </div><a name="WhitespaceANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e246">
            <div class="title e247">Whitespace</div>
            <div class="para e248">FtanML (unlike XML) is explicit about the difference between significant and
               insignificant whitespace.
            </div>
            <div class="para e249">Whitespace appearing directly within a string or within rich text is significant
               and is retained in the data model — except that a sequence of whitespace characters
               preceded by a backslash is ignored (this is formatting whitespace, used only to make
               the text more easily readable on screen or paper). Whitespace between tokens in a
               list or element is insignificant and is not retained. Whitespace is never required
               between tokens unless necessary for disambiguation.
            </div>
            <div class="para e250">Note that because elements may be embedded in rich text, these rules apply
               recursively. Whitespace characters appearing between the tokens of an element that
               itself appears within rich text are not significant; it is the immediate container
               that matters. Support for rich text means that unlike JSON, this is not a two-level
               grammar where it makes sense to think of a tokenization phase followed by a syntax
               analysis phase, with whitespace being discarded during tokenization.
            </div>
         </div><a name="NamesandNamespacesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e251">
            <div class="title e252">Names and Namespaces</div>
            <div class="para e253">As stated earlier, the name of an element or attribute may be any string. Names without
               special characters are called simple names; those containing special characters must
               be
               written with enclosing backticks (grave accent, x60), and are called quoted names.
            </div>
            <div class="para e254">The rule for a simple name is that it must begin with a letter or underscore, and
               continue with letters, digits, or underscore. The terms "letter" and "digit" are
               defined by reference to Unicode character categories.
            </div>
            <div class="para e255">A quoted name may use escaped characters in the same way as a string literal. The
               only characters
               that must be escaped are the backslash and backtick.
            </div>
            <div class="programlisting e256" xml:space="preserve">
               name ::= simpleName | quotedName
               simpleName ::= [\p{L}_][\p{L}\p{D}_]*
               quotedName ::= "`" ((charRep - "`") | Escape)+ "`"
               
            </div>
            <div class="para e257">A name written in a FtanML document, with or without backticks, cannot be zero
               length; in the data model, however, the content value is modelled as an attribute
               with a zero-length name.
            </div>
            <div class="para e258">There are no namespaces in FtanML.</div>
            <div class="para e259">As a matter of convention, it is recommended that an element or attribute intended
               to be used in an alien context, that is, a context where the containing element is
               part of a different vocabulary defined by a different specification, 
               should be made unique by use of a "reverse-DNS" qualified name along the lines of
               
               <div class="code e260">org_w3c_xsl_transform</div>.
            </div>
            <div class="para e261">By contrast, in the normal case where an element or attribute 
               always has a containing element whose name is defined as part of the same vocabulary,
               
               short names such as 
               <div class="code e262">status</div> or
               
               <div class="code e263">name</div> are perfectly adequate and cause no ambiguity.
            </div>
            <div class="para e264">For interoperability with XML, there may be cases where it is desirable to
               use the same names for elements and attributes as defined in an XML vocabulary. There
               are two ways
               this might be done:
            </div>
            <div class="para e265">
               
               <div class="itemizedlist e266">
                  <div class="listitem e267">
                     <div class="para e268">The XML expanded name can be used in Clark notation, enclosed in
                        backticks. For example:
                        
                        <div class="code e269">[&lt;`{http://www.w3.org/1999/XSL/Transform}stylesheet` version="2.0"...&gt;</div>
                        
                     </div>
                  </div>
                  <div class="listitem e270">
                     <div class="para e271">Prefixes and namespace declaration attributes may be used, following XML conventions:
                        
                        <div class="code e272">&lt;`xsl:stylesheet` `xmlns:xsl`="http://www.w3.org/1999/XSL/Transform" version="2.0"...&gt;</div>.
                        The FtanML system will not attach any meaning to such namespace declaration
                        attributes, but it is capable of representing them if required. 
                        Note that any name containing a colon (or various other characters such as ".") needs
                        to be
                        backtick-quoted. 
                        
                     </div>
                  </div>
               </div>
               
            </div>
         </div>
      </div><a name="DataModelANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e273">
         <div class="title e274">Data Model</div>
         <div class="para e275">The data model for FtanML corresponds closely to the syntactic structure.</div>
         <div class="para e276">Null values, booleans, strings, and numbers need no further explanation.</div>
         <div class="para e277">A list is an ordered sequence of values; a list of length one is not the same thing
            as
            its singleton member.
         </div>
         <div class="para e278">An element comprises a name (which is a string, or absent) and a set of zero or more
            name/value pairs, the element's attributes. The content value of the element is modelled
            as an attribute whose name is the zero-length string. Attributes whose value is null
            are
            treated as absent.
         </div>
         <div class="para e279">Rich text is modelled as a sequence of strings and elements, in which no string is
            zero-length, and no two strings are immediately adjacent. But note that rich text
            is a
            distinct data type and is distinguishable from a list of strings and elements.
            
            <div class="popupBox e280">
               <div class="popupLabel" onmouseover="$('#d1e548').show('1000');" onmouseout="$('#d1e548').hide('1000');">[ footnote ]</div>
               <div id="d1e548" style="display: none;">
                  <div class="footnote">
                     <div class="para e281">Modelling rich text as a list of strings and elements is convenient
                        in some situations, especially because it's the only representation available using
                        the data types of
                        many programming languages. The main drawback is that it's not convenient when we
                        want to treat
                        the data as a simple string, and ignore the markup. So we make it a distinct data
                        type,
                        that can easily be converted either to a list or to a string for processing when required.
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e282">All values in the model are immutable; modifications always involve creating new
            values rather than modifying existing values. There is no notion of identity; it is
            not
            meaningful to ask whether two lists both containing the values 
            <div class="code e283">[1,2,3]</div> are
            "the same list", and this is also true for elements.
         </div>
         <div class="para e284">These concepts have mappings to the data structures of popular programming language
            that in most cases are fairly obvious. There are a few exceptions: some languages
            do not
            have a natural way of representing decimal numbers; others have difficulty representing
            Unicode strings, especially strings in which the NUL character (
            <div class="code e285">x00</div>) is
            permitted. The way in which such conflicts are resolved is outside the scope of this
            paper.
         </div>
         <div class="para e286">A noteworthy feature of the data model is that there are no "parent pointers". It
            is not
            possible to navigate from a value to its container. Closely related to this, values
            have
            no "identity" in the sense of object-oriented data models. In this respect the data
            model follows JSON rather than the
            various models used to represent XML. The absence of parent references and object
            identity creates some challenges, but has many benefits in establishing a purely
            functional semantics for the processing language, and in enabling efficient
            transformation: it means, for example, that copying a subtree from one element to
            another is a very cheap operation, because the physical data can be shared.
            
            <div class="popupBox e287">
               <div class="popupLabel" onmouseover="$('#d1e563').show('1000');" onmouseout="$('#d1e563').hide('1000');">[ footnote ]</div>
               <div id="d1e563" style="display: none;">
                  <div class="footnote">
                     <div class="para e288">
                        I have previously [x] discussed the possibility of
                        writing an XSLT optimizer in XSLT; I concluded that the only thing preventing
                        this was the inefficiency of the XSLT processing model in cases where it is necessary
                        to make many passes over a tree, with each pass effecting a small change.
                        Allowing subtrees to be shared between the source and result of the transformation
                        could
                        eliminate this problem.
                        
                     </div>
                  </div>
               </div>
            </div>
         </div>
      </div><a name="TheSchemaLanguage:FtanGramANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e289">
         <div class="title e290">The Schema Language: FtanGram</div>
         <div class="para e291">The schema language can be used to define constraints on values, including constraints
            on entire documents. This is the only purpose of a schema; validation returns a true
            or
            false answer, perhaps with a stream of error messages as a side effect, but it does
            not
            change the data being validated in any way, except perhaps as an internal
            optimization.
         </div>
         <div class="para e292">A type is thus a predicate; it distinguishes values that match the type from those
            that do not.
         </div>
         <div class="para e293">A schema is a set of named types. The seven named types 
            <div class="code e294">null</div>,
            
            <div class="code e295">boolean</div>, 
            <div class="code e296">number</div>, 
            <div class="code e297">string</div>, 
            <div class="code e298">list</div>,
            
            <div class="code e299">element</div>, and 
            <div class="code e300">text</div> are always available; other types are
            user-defined.
         </div>
         <div class="para e301">Types have a representation as FtanML elements, and we will use this representation
            in
            discussing types. However, the element used to represent a type must not be confused
            with the type itself.
         </div>
         <div class="para e302">The convention for type representations is to use elements such as
            
            <div class="code e303">&lt;number gt=0 le=1000&gt;</div>, where 
            <div class="code e304">number</div> is the
            name of a base type, and attributes such as 
            <div class="code e305">gt=0</div> and 
            <div class="code e306">le=1000</div>
            define constraints. These attributes are referred to as 
            <div class="emphasis e307" role="ital">facets</div>. If there are multiple attributes, they define multiple
            constraints, which are independent and orthogonal. In this example, the 
            <div class="code e308">gt</div>
            facet defines a minimum value (exclusive), while the 
            <div class="code e309">le</div> facet defines a
            maximum value (inclusive). Specifying a base type is often unnecessary — in this example
            every value that can be greater than zero is necessarily a number, so every value
            that
            satisfies the predicate will also satisfy the base type. However, including the base
            type can still be useful to aid clarity.
         </div>
         <div class="para e310">Although we speak of "base type" here, there is no type hierarchy. One value can
            belong to any number of types, and although it may be true that one type subsumes
            another, the language makes no use of the fact. Naming a base type in a type
            representation merely indicates that to satisfy the type, a value must satisfy all
            the
            constraints imposed by the base type in addition to the facets explicitly listed.
         </div>
         <div class="para e311">Before we get into a detailed exposition, we'll again start with an example.</div><a name="FtanGramExample:thePurchaseOrderSchemaANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e312">
            <div class="title e313">FtanGram Example: the Purchase Order Schema</div>
            <div class="para e314">In this section we present the schema for the purchase order shown earlier.
               This is based on the example schema in the XSD primer, modified to correspond
               with the way we restructured the instance document to take advantage of FtanML.
            </div>
            <div class="programlisting e315" xml:space="preserve">
               &lt;org_ftanml_schema [
               &lt;import "ftan_calendar.ftg"&gt;
               &lt;types
               purchaseOrderType = 
               &lt;element form=&lt;purchaseOrder 
               shipTo=&lt;addressType&gt;
               billTo=&lt;addressType&gt;
               comment=&lt;nullable&lt;text elements=&lt;inlineType&gt;&gt;&gt;
               items=&lt;occurs=[1,] &lt;itemType&gt;&gt;
               &gt;
               addressType = 
               &lt;element form=&lt;  country=&lt;eq="US"&gt;
               &lt;seq [ &lt;element form=&lt;name &lt;string&gt;&gt;&gt;,
               &lt;element form=&lt;street &lt;string&gt;&gt;&gt;,
               &lt;element form=&lt;city &lt;string&gt;&gt;&gt;,
               &lt;element form=&lt;state &lt;string&gt;&gt;&gt;,
               &lt;element form=&lt;zip &lt;number&gt;&gt;&gt;]&gt;
               &gt;
               itemType =
               &lt;element form=&lt;  partNum=&lt;SKUType&gt;
               productName=&lt;string&gt;
               quantity=&lt;number ge=1 lt=100 step=1&gt;
               USPrice=&lt;number ge=0 step=0.01&gt;
               comment=&lt;nullable&lt;text elements=&lt;inlineType&gt;&gt;&gt;
               shipDate=&lt;nullable&lt;org_ftanml_calendar_dateType&gt;&gt;
               &gt;
               &gt;
               inlineType = 
               &lt;element elemName=&lt;enum=["ital", "bold"]&gt; 
               form=&lt;&lt;inlineType&gt;&gt;
               &gt; 
               SKUType = &lt;string pattern="\[#\d{3}-[A-Z]{2}#]"&gt;  
               &gt;   
               ]&gt;
            </div>
            <div class="para e316">Looking at this in a little detail, we see:</div>
            <div class="para e317">
               
               <div class="itemizedlist e318">
                  <div class="listitem e319">
                     <div class="para e320">A schema is a set of named types. Some of these types are defined inline, some (in
                        this case
                        
                        <div class="code e321">org_ftanml_calendar_dateType</div>) are imported from an external type library.
                     </div>
                  </div>
                  <div class="listitem e322">
                     <div class="para e323">Elements are defined using the 
                        <div class="code e324">form</div>
                        attribute. The value of this attribute is a proforma element. The name
                        of the proforma element matches the name of the instance element; the
                        attributes of the proforma element define the types of the attributes of
                        the instance element; and the content value of the proforma element defines
                        the type of the content value of the instance element.
                     </div>
                  </div>
                  <div class="listitem e325">
                     <div class="para e326">An optional attribute is given a type such as
                        
                        <div class="code e327">&lt;nullable&lt;T&gt;&gt;</div>. This reflects the fact that
                        an absent attribute is equivalent to an attribute that has the explicit
                        value of null; so as well as the normal type of the attribute, the
                        schema must also allow it to take the value null.
                     </div>
                  </div>
                  <div class="listitem e328">
                     <div class="para e329">Note the use of a "cell" for escaping the regular expression in the pattern facet
                        for 
                        <div class="code e330">SKUType</div>. This helps to avoid clutter in a string that makes generous use
                        of special characters, especially backslashes.
                     </div>
                  </div>
               </div>
               
            </div>
         </div><a name="ConstructingTypesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e331">
            <div class="title e332">Constructing Types</div>
            <div class="para e333">The construct 
               <div class="code e334">&lt;value&gt;</div> represents a type that matches
               every value.
            </div>
            <div class="para e335">Given types 
               <div class="code e336">T</div>, 
               <div class="code e337">U</div>, 
               <div class="code e338">V</div>, the construct
               
               <div class="code e339">&lt;anyOf [T, U, V]&gt;</div> represents the union of these types,
               while 
               <div class="code e340">&lt;allOf [T, U, V]&gt;</div> represents their intersection.
            </div>
            <div class="para e341">For example, 
               <div class="code e342">&lt;anyOf [&lt;number&gt;, &lt;string&gt;]&gt;</div> allows numbers
               and strings, while 
               <div class="code e343">&lt;allOf [&lt;positive&gt;, &lt;even&gt;]&gt;</div> allows
               values provided they satisfy both the (user-defined) types 
               <div class="code e344">positive</div> and
               
               <div class="code e345">even</div>.
            </div>
            <div class="para e346">For convenience, the construct 
               <div class="code e347">&lt;nullable &lt;T&gt;&gt;</div> is equivalent
               to 
               <div class="code e348">&lt;anyOf [&lt;T&gt;, &lt;null&gt;]&gt;</div>: that is, either 
               <div class="code e349">T</div> or
               null. Thus 
               <div class="code e350">&lt;nullable &lt;number&gt;&gt;</div> matches either a number, or
               null.
            </div>
            <div class="para e351">An enumeration type can be defined using the construct
               
               <div class="code e352">&lt;enum=[A,B,C,...]&gt;</div>. For example,
               
               <div class="code e353">&lt;enum=["red", "green", "blue"]&gt;</div> matches the three
               specified strings and nothing else. A singleton enumeration can be defined with the
               
               <div class="code e354">eq</div> facet: for example 
               <div class="code e355">&lt;eq=""&gt;</div> matches the
               zero-length string only.
            </div>
            <div class="para e356">The construct 
               <div class="code e357">&lt;not &lt;T&gt;&gt;</div> denotes a type that matches all
               values that are not instances of 
               <div class="code e358">T</div>. This can be useful in constructing
               more complex types; for example 
               <div class="code e359">&lt;not&lt;eq=""&gt;&gt;</div> matches all
               non-empty strings, while 
               <div class="code e360">&lt;allOf [&lt;number&gt;, &lt;not &lt;eq=0&gt;&gt;]&gt;</div>
               matches values that are numbers and that are not equal to zero.
            </div>
            <div class="para e361">The most general way of defining a restriction is with an assertion facet, for
               example: 
               <div class="code e362">&lt;assert={$.startsWith("abc")}&gt;</div>. To understand
               assertions, however, we need to look at the scripting language, which comes later
               in
               the paper. (The curly braces signal that the value is a function; this represents
               an
               extension to the base FtanML syntax which is used only in scripts.)
            </div>
         </div><a name="RestrictingnumbersANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e363">
            <div class="title e364">Restricting numbers</div>
            <div class="para e365">Numeric ranges may be defined using the four attributes 
               <div class="code e366">ge</div>,
               
               <div class="code e367">gt</div>, 
               <div class="code e368">le</div>, and 
               <div class="code e369">lt</div>, corresponding to the XML
               Schema facets 
               <div class="code e370">minInclusive</div>, 
               <div class="code e371">minExclusive</div>,
               
               <div class="code e372">maxInclusive</div>, and 
               <div class="code e373">maxExclusive</div>, together with the
               facets 
               <div class="code e374">eq</div> and 
               <div class="code e375">ne</div> which are applicable to all values. For
               example, the type consisting of numbers in the range 0 to 100 inclusive may defined
               as 
               <div class="code e376">&lt;number ge=0 le=100&gt;</div>. (As mentioned earlier, the element
               name 
               <div class="code e377">number</div> is redundant, because only a number can satisfy the other
               constraints.) 
            </div>
            <div class="para e378">A 
               <div class="code e379">step</div> facet constrains the number to be an integer multiple of the
               given increment. The most common values (both found in our example schema) are 1,
               which requires the value to be an integer, and 0.01, which is often suitable for
               currency amounts. Specifying 
               <div class="code e380">step=17.2</div> would be unusual, but is
               perfectly legal. The facet does not constrain the way the value is written, for
               example an integer can be validly written as 
               <div class="code e381">1.00000</div>.
            </div>
         </div><a name="RestrictingstringsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e382">
            <div class="title e383">Restricting strings</div>
            <div class="para e384">Strings may be restricted using a regular expression, for example
               
               <div class="code e385">&lt;string pattern="[A-Z]*"&gt;</div>. There are no special facets
               for defining a minimum, fixed, or maximum length, since regular expressions are
               sufficient for this purpose.
            </div>
         </div><a name="RestrictinglistsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e386">
            <div class="title e387">Restricting lists</div>
            <div class="para e388">A list can be constrained with a grammar. A grammar is a facet like any other:
               just another way of defining a restriction on the content, and it is defined in the
               same way: 
               <div class="code e389">&lt;list grammar=....&gt;</div>. A simple grammar might allow a list
               to consist of a sequence of zero or more numbers. This would be defined like
               this:
            </div>
            <div class="programlisting e390" xml:space="preserve">
               &lt;list grammar=&lt;number occurs=[0,]&gt;&gt;                
               
            </div>
            <div class="para e391">To take another example, a grammar might require a value to be a list comprising a
               string, a number, and a boolean. Here is the definition:
            </div>
            <div class="programlisting e392" xml:space="preserve">
               &lt;list grammar=&lt;seq [&lt;string&gt;, &lt;number&gt;, &lt;boolean&gt;]&gt;&gt;                
               
            </div>
            <div class="para e393">Unlike most schema languages in the XML world, grammars can constrain any
               sequence of values, not only a sequence of elements. In principle, if there are
               subtypes of string representing nouns, verbs, and so on, then a grammar could
               constrain a list to contain a sequence of words making up an English
               sentence.
            </div>
            <div class="para e394">The "alphabet" of the grammar — the set of tokens it recognizes — is the
               set of types. The fact that a value might belong to more than one of these types does
               not
               matter. The grammar exists not to define an unambiguous parse tree of the input, but
               only to determine whether the input is valid against the type definition or not.
            </div>
            <div class="para e395">A grammar can be represented as a tree of particles. Each particle consists of
               a term (what does it match?), and a repetition indicator (how often does it match?).
               For leaf particles, the term is a type. Non-leaf particles are either sequence
               particles or choice particles, and in each case the term is the set of child
               particles in the tree.
            </div>
            <div class="para e396">The value of the 
               <div class="code e397">grammar</div> facet is an element representing
               the root particle in this tree.
            </div>
            <div class="para e398">The three kinds of particle are represented as follows:</div>
            <div class="itemizedlist e399">
               <div class="listitem e400">
                  <div class="para e401">A sequence particle is represented by an element named 
                     <div class="code e402">seq</div>; an optional
                     
                     <div class="code e403">occurs</div> attribute; and content which is a list containing
                     the child particles in the tree. For example:
                     
                     <div class="code e404">&lt;seq occurs=[0,] [&lt;white&gt;,&lt;black&gt;]&gt;</div>, which
                     matches an alternating sequence of values of types 
                     <div class="code e405">&lt;white&gt;</div>
                     and 
                     <div class="code e406">&lt;black&gt;</div>.
                  </div>
               </div>
               <div class="listitem e407">
                  <div class="para e408">A choice particle is represented by an element named 
                     <div class="code e409">choice</div>; an optional
                     
                     <div class="code e410">occurs</div> attribute; and content which is a list containing
                     the child particles in the tree. For example:
                     
                     <div class="code e411">&lt;choice occurs=[0,] [&lt;white&gt;,&lt;black&gt;]&gt;</div>, which
                     matches sequence of values, each of which can be either of
                     
                     <div class="code e412">&lt;white&gt;</div> or 
                     <div class="code e413">&lt;black&gt;</div> type.
                  </div>
               </div>
               <div class="listitem e414">
                  <div class="para e415">A leaf particle is represented by the same element used to describe the type, augmented
                     if
                     necessary with an 
                     <div class="code e416">occurs</div> attribute. For example
                     
                     <div class="code e417">&lt;number&gt;</div>, or 
                     <div class="code e418">&lt;number occurs=10&gt;</div>.
                     The 
                     <div class="code e419">occurs</div> attribute defaults to 1; it appears alongside the
                     attributes defining facets of the type, though it is not really a property
                     of the type, but rather of the particle referring to the type.
                  </div>
               </div>
            </div>
            <div class="para e420">The value of the 
               <div class="code e421">occurs</div> attribute is either an integer (indicating a
               fixed number of occurrences), or a list of size two (indicating a range with a
               minimum and maximum). The first item must be an integer, the second can be either
               another integer, or null to indicate an unbounded range. For example
               
               <div class="code e422">[0,1]</div> indicates an optional particle (zero or one occurrences),
               
               <div class="code e423">[0,]</div> indicates zero or more, and 
               <div class="code e424">[1,]</div> indicates one or
               more. The default is 
               <div class="code e425">occurs=1</div>.
            </div>
            <div class="para e426">Some further examples of grammars are shown in the table below:</div>
            <div class="para e427">
               
               <div class="table e428">
                  <div class="caption e429">
                     <div class="para e430">Examples of Grammars</div>
                  </div>
                  <div class="thead e431">
                     <div class="tr e432">
                        <div class="th e433">Example</div>
                        <div class="th e434">Explanation</div>
                     </div>
                  </div>
                  <div class="tbody e435">
                     <div class="tr e436">
                        <div class="td e437">&lt;seq [&lt;string&gt;, &lt;number&gt;, &lt;number&gt;]&gt;</div>
                        <div class="td e438">A string followed by two numbers</div>
                     </div>
                     <div class="tr e439">
                        <div class="td e440">&lt;seq [&lt;string&gt;, &lt;number occurs=2&gt;]&gt;</div>
                        <div class="td e441">A string followed by two numbers</div>
                     </div>
                     <div class="tr e442">
                        <div class="td e443">&lt;occurs=[0,] &lt;seq [&lt;string&gt;, &lt;number&gt;]&gt;&gt;</div>
                        <div class="td e444">An alternating sequence of strings and numbers</div>
                     </div>
                     <div class="tr e445">
                        <div class="td e446">&lt;enum=["red", "green", "blue"] occurs=[1,]&gt;</div>
                        <div class="td e447">A sequence of one or more strings each taken from a defined
                           set of colour values
                        </div>
                     </div>
                     <div class="tr e448">
                        <div class="td e449">&lt;occurs=[0,100] &lt;choice [&lt;string&gt;, &lt;number&gt;]&gt;&gt;</div>
                        <div class="td e450">A list of up to 100 items, each of which may be either a
                           string or a number. Note that when the sub-particles of a choice
                           are leaf particles, an alternative approach is to define a union
                           type using 
                           <div class="code e451">&lt;anyOf&gt;</div>
                        </div>
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e452">Many of these examples serve the purpose that in XML Schema would be achieved
               using simple types of variety list or union. But of course, in the document markup
               tradition, grammars are commonly used to define sequences of elements, and we will
               see examples of this in the next section.
            </div>
         </div><a name="RestrictingelementsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e453">
            <div class="title e454">Restricting elements</div>
            <div class="para e455">The simplest way to place restrictions on elements is by use of the 
               <div class="code e456">form</div> facet. 
               Its value is an element, known as a proforma, which works as follows:
            </div>
            <div class="itemizedlist e457">
               <div class="listitem e458">
                  <div class="para e459">The name of the proforma element constrains the name of the target element.</div>
               </div>
               <div class="listitem e460">
                  <div class="para e461">The attributes of the proforma element constrain the attributes of the target element.</div>
               </div>
               <div class="listitem e462">
                  <div class="para e463">The content value of the proforma element constrains the content value of the target
                     element.
                  </div>
               </div>
            </div>
            <div class="para e464">For example, the proforma:</div>
            <div class="programlisting e465" xml:space="preserve">
               &lt;img height=&lt;number&gt; width=&lt;number&gt; &lt;null&gt;&gt;
               
            </div>
            <div class="para e466">represents an element whose name must be "img", whose 
               <div class="code e467">height</div> and
               
               <div class="code e468">width</div> attributes must be numbers, and whose content value must be
               absent (null).
            </div>
            <div class="para e469">This proforma can be used to define an element type like this:</div>
            <div class="programlisting e470" xml:space="preserve">
               &lt;element form=&lt;img height=&lt;number&gt; width=&lt;number&gt; &lt;null&gt;&gt;&gt;
               
            </div>
            <div class="para e471">Like all facets, a proforma can only define restrictions. If the proforma includes
               no element name, then it places no restrictions on the element name. If a particular
               attribute is not present in the proforma, then it places no restrictions on the
               presence or content of that attribute. If the proforma has no content value, then
               the content value of the target element is unconstrained.
            </div>
            <div class="para e472">If an attribute is to be optional, this can be indicated by permitting null as the
               value: for example writing 
               <div class="code e473">height=&lt;nullable&lt;number&gt;&gt;</div>
               indicates that the 
               <div class="code e474">height</div> attribute must either be a number, or null.
               Recall that omitting an attribute is the same as giving it a value of null.
            </div>
            <div class="para e475">Some additional facets are available for elements for use where the proforma construct
               is
               insufficiently expressive:
            </div>
            <div class="itemizedlist e476">
               <div class="listitem e477">
                  <div class="para e478">The 
                     <div class="code e479">elemName</div> facet defines the type of the element name.
                  </div>
                  <div class="para e480">For example 
                     
                     <div class="code e481">&lt;element elemName=&lt;enum=["i", "b", "u"]&gt;&gt;</div> constrains the element
                     name to be one of the names listed.
                  </div>
               </div>
               <div class="listitem e482">
                  <div class="para e483">The 
                     <div class="code e484">attName</div> facet defines the type that all attribute names must conform to (for
                     example, as an enumeration, or by means of a pattern). This is the easiest
                     way of prohibiting attributes from appearing (the other way is to constrain
                     the value to be null). For example, 
                     <div class="code e485">attName=&lt;ne="xmlns"&gt;</div>
                     would disallow the attribute name 
                     <div class="code e486">xmlns</div>; this constraint could
                     also be expressed in the proforma as 
                     <div class="code e487">xmlns=&lt;null&gt;</div>.
                  </div>
               </div>
               <div class="listitem e488">
                  <div class="para e489">For convenience, as an alternative to using a proforma, the content of the element
                     can be
                     constrained using the 
                     <div class="code e490">content</div> facet. The value is a type. For
                     example, 
                     <div class="code e491">content=&lt;boolean&gt;</div> constrains the content to be the
                     boolean value true or false, while 
                     <div class="code e492">content=&lt;null&gt;</div> constrains
                     it to be null (which can be achieved either by omitting the content, or
                     using the FtanML keyword 
                     <div class="code e493">null</div>).
                  </div>
               </div>
            </div>
            <div class="para e494">We can now see how to define an element type that participates in the content model
               of another
               element type. Suppose we have an element named 
               <div class="code e495">items</div> whose children are
               elements named 
               <div class="code e496">item</div> with string content. We can define the type of 
               <div class="code e497">items</div>
               like this:
            </div>
            <div class="programlisting e498" xml:space="preserve">
               &lt;element form=
               &lt;items 
               grammar=&lt;element form=&lt;item &lt;string&gt;&gt; occurs=[0,]&gt;
               &gt;  
               &gt;
            </div>
            <div class="para e499">(I find it useful when writing such constructs to ensure that every angle bracket
               is aligned
               either vertically or horizontally with its partner, and to limit the nesting of angle
               brackets on a single
               line to about 3.)
            </div>
            <div class="para e500">Content models like this would quickly become unwieldy if the whole structure had
               to be defined inline. In addition, it would not be possible to reuse types in
               different parts of the model. It is therefore possible for the definition of one
               type to refer to other types by name. The above example could be expressed using named
               types in a schema, thus:
            </div>
            <div class="programlisting e501" xml:space="preserve">
               &lt;types
               itemsType = &lt;element form=&lt;items &lt;grammar=&lt;itemType occurs=[0,]&gt;&gt;&gt;&gt;
               itemType = &lt;element form=&lt;item &lt;string&gt;&gt;&gt;
               &gt;
            </div>
         </div><a name="RestrictingRichTextANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e502">
            <div class="title e503">Restricting Rich Text</div>
            <div class="para e504">Most of the time, the only restriction that needs to be placed on rich
               text is to define what elements may appear within it. This is done with
               an 
               <div class="code e505">elements</div> facet, whose value is a type. 
               All elements appearing in the text must conform to this type.
            </div>
            <div class="para e506">We don't expect it to be used very often, but FtanML also allows rich text to
               be constrained with a grammar. The rules for defining a grammar are exactly the same
               as for lists, and they define the grammar when the text is considered as a list
               containing strings and elements. For example, a grammar might define that the first
               thing to appear is a 
               <div class="code e507">headword</div> element, and after that there are no
               constraints.
            </div>
         </div><a name="UniquenessandReferentialConstraintsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e508">
            <div class="title e509">Uniqueness and Referential Constraints</div>
            <div class="para e510">As with XML Schema, definition of constraints takes advantage of the processing
               language, so this section contains some forward references to facilities not yet
               introduced.
            </div>
            <div class="para e511">Uniqueness is enforced by a function-valued facet. For example:</div>
            <div class="programlisting e512" xml:space="preserve">&lt;list unique={$@id}&gt;</div>
            <div class="para e513">expresses a contraint on a list of elements stating that among the elements in
               this list, all attributes named 
               <div class="code e514">id</div> must have distinct values. Null
               values are excluded. This facet can be applied to lists and elements; in each case
               the supplied function is used as a mapping function, and is applied to each item in
               the list or each attribute of the element, as if by the 
               <div class="code e515">!</div> operator; the
               value is invalid if the resulting list contains any duplicates. So a simple
               constraint that all the numbers in a list of numbers be unique can be expressed as
               
               <div class="code e516">unique={$}</div>; a constraint that the names of the attributes in an
               element should each start with a different letter can be written
               
               <div class="code e517">unique={substring($, 0, 1)}</div>, and a constraint that all the non-null
               attributes of an element should have distinct values can be expressed as
               
               <div class="code e518">unique={$2}</div> (when a mapping function is applied to an element, the
               first argument 
               <div class="code e519">$</div> is the attribute name, and the second argument
               
               <div class="code e520">$2</div> is the attribute value).
            </div>
            <div class="para e521">Referential constraints are enforced by a similar facet whose value is a pair of
               functions, one of which selects the references (foreign keys) and one the target
               identifiers (primary keys):
            </div>
            <div class="para e522">
               <div class="code e523">&lt;ref=&lt;from={$@ref} to={$@id}&gt;&gt;</div>
            </div>
            <div class="para e524">The rule is that the set of values selected by the 
               <div class="code e525">from</div> function
               (again excluding any nulls) must be a subset of the set of values selected by the
               
               <div class="code e526">to</div> function.
            </div>
         </div>
      </div><a name="QueriesandTransformations:theFtanSkritProcessingLanguageANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e527">
         <div class="title e528">Queries and Transformations: the FtanSkrit Processing Language</div>
         <div class="para e529">FtanSkrit is a functional, weakly-typed, Turing-complete programming language for
            manipulating instances of the FtanML data model. It is an expression language with
            full orthogonality: any expression can be used as an operand of any other
            expression, subject only to rules on operator precedence and type
            constraints.
         </div>
         <div class="para e530">A program in FtanSkrit is written as a function (a function which typically takes
            a source document as input and produces a result document as its result). The body
            of a function is an expression, and this exposition of the language will focus on
            the different kinds of expression that can be written.
         </div>
         <div class="para e531">The data model that can result from parsing a FtanML document, as we saw earlier,
            can contain seven types of value: null, boolean, number, string, list, element, and
            text. We also mentioned an eighth type of value, namely a function. Functions can
            appear
            in the data model anywhere that the other seven types of value can appear, for example
            as the value of an attribute in an element, or as the value of an item in a list.
         </div>
         <div class="para e532">Because expressions can be nested arbitrarily, it's not easy to define the different
            classes of expression without forward references to concepts that haven't been explained
            yet, and it's also rather difficult to know where to begin. But because functions
            are so
            important and central, that's where I'll start.
         </div><a name="FunctionsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e533">
            <div class="title e534">Functions</div>
            <div class="para e535">There are two important kinds of expression associated with functions: function
               declarations and function calls.
            </div><a name="FunctionDeclarationsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e536">
               <div class="title e537">Function Declarations</div>
               <div class="para e538">A function is written as an expression enclosed in curly braces. Here's a
                  function that computes the sum of its two arguments: 
                  <div class="code e539">{$1 +
                     $2}
                  </div>
               </div>
               <div class="para e540">References to parameters are written 
                  <div class="code e541">$1</div>, 
                  <div class="code e542">$2</div> etc, where
                  
                  <div class="code e543">$N</div> refers to the Nth supplied argument in the function call.
                  The expression 
                  <div class="code e544">$</div> can be used in place of 
                  <div class="code e545">$1</div> to refer
                  to the first argument, and is particularly useful for functions that expect a
                  single argument. It can be used in rather the same way as 
                  <div class="code e546">.</div> (the
                  context item) in XPath, and plays a similar role to 
                  <div class="code e547">_</div> in languages
                  such as Perl or Scala.
               </div>
               <div class="para e548">For example, a function that returns true if the supplied element has a name
                  might be written 
                  <div class="code e549">{name($) != null}</div>.
               </div>
               <div class="para e550">Functions have no name, but can be bound to named variables, in which case the
                  variable name serves effectively as a function name. Functions in the system library
                  are bound to predefined variables. 
               </div>
               <div class="para e551">A function does not have a fixed arity. The example function 
                  <div class="code e552">{$1 +
                     $2}
                  </div> expects two arguments, but it can be called with more than two
                  arguments (excess arguments are ignored), or with fewer than two (unsupplied
                  arguments default to null).
               </div>
               <div class="para e553">The expression 
                  <div class="code e554">$$</div> returns all the supplied arguments in the form
                  of a list. This makes it possible to write functions that take a variable number
                  of arguments: the actual number is accessible as 
                  <div class="code e555">count($$)</div>. 
               </div>
               <div class="para e556">Functions can refer to variables defined outside the function body, which
                  become part of the closure of the function, to be used when it is
                  evaluated.
               </div>
               <div class="para e557">Within the body of a function, the variable 
                  <div class="code e558">self</div> is bound to the
                  function itself. This makes it easy to write anonymous recursive functions: for
                  example a function to compute the sum of its arguments can be written as
                  
                  <div class="code e559">{if empty($$) then 0 else $ + self(tail($$))}</div>. We'll see later
                  how to write mutually-recursive functions.
               </div>
               <div class="para e560">Because a function is an expression, it can be used anywhere an expression can
                  appear; for example as the value of an attribute in an element. This allows an
                  element to be used as a map from strings to functions, which is very like
                  Javascript's notion of an object. This enables a kind of polymorphism.
               </div>
               <div class="para e561">Sometimes it is useful to design a function so that parameters are supplied by
                  name rather than positionally. The can be achieved by writing the function to
                  accept an element as its argument. The caller might supply the arguments like
                  this: 
                  <div class="code e562">f(&lt;x=2 y=3&gt;)</div>; and in the function body the supplied values
                  can then be referenced as 
                  <div class="code e563">$@x</div> or 
                  <div class="code e564">$@y</div>.
               </div>
               <div class="para e565">Functions do not declare their arguments explicitly. As a matter of convention,
                  when writing a public function it is good practice to bind the supplied parameters
                  to variables along with a type check. For example the following implementation
                  of the 
                  <div class="code e566">indexOf</div> function starts by giving names to its arguments and checking their type,
                  which simultaneously makes the function more robust and more readable.
                  
                  <div class="popupBox e567">
                     <div class="popupLabel" onmouseover="$('#d1e1218').show('1000');" onmouseout="$('#d1e1218').hide('1000');">[ footnote ]</div>
                     <div id="d1e1218" style="display: none;">
                        <div class="footnote">
                           <div class="para e568">It would be easy enough to add syntax for a more verbose function declaration with
                              an explicit signature. But at this stage, it's important (a) to keep the language
                              small,
                              and (b) to provide a very concise syntax for functions, allowing them to be used as
                              freely
                              and easily as predicates and steps are used in XPath.
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               <div class="programlisting e569" xml:space="preserve">
                  let indexOf = {
                  let Array = $1.as(&lt;occurs=[0,] &lt;number&gt;&gt;);
                  let Search = $2.as(&lt;number&gt;);
                  0..count(Array)-1?{Array[$]=Search}
                  }
               </div>
               <div class="para e570">Because argument types are not declared, it's up to the implementor of a function
                  what to do when the caller supplies arguments of the wrong type. There are no implicit
                  conversions
                  defined as part of the call mechanism. The preferred approach is to throw an error,
                  which
                  can be readily achieved using the coding style in the above example.
               </div>
            </div><a name="FunctionCallsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e571">
               <div class="title e572">Function Calls</div>
               <div class="para e573">If 
                  <div class="code e574">F</div> is an expression that evaluates to a function, then the
                  function may be called with arguments 
                  <div class="code e575">x</div> and 
                  <div class="code e576">y</div> using
                  the expression 
                  <div class="code e577">F(x, y)</div>.
               </div>
               <div class="para e578">If 
                  <div class="code e579">f</div> is a variable whose value is a function, and if the function
                  has at least one argument, then a function call can be written either as
                  
                  <div class="code e580">f(x,y)</div> or as 
                  <div class="code e581">x.f(y)</div>. 
               </div>
               <div class="para e582">As in XPath 3.0, partial function application (currying) is possible by
                  supplying 
                  <div class="code e583">?</div> for one of the arguments: 
                  <div class="code e584">contains(?, ':')</div>
                  returns a function whose effect is to test whether its first argument is a
                  string that contains a colon.
               </div>
               <div class="para e585">Some built-in functions can also be invoked using an infix operator. For
                  example the 
                  <div class="code e586">+</div> operator corresponds to the 
                  <div class="code e587">plus</div>
                  function; 
                  <div class="code e588">a + b</div> has the same meaning as 
                  <div class="code e589">plus(a, b)</div> or
                  
                  <div class="code e590">a.plus(b)</div>. All the operators in the language, including higher-order operators, are defined
                  in terms of functions, to allow them to be passed as arguments to higher-order
                  functions.
               </div>
               <div class="para e591">The names of built-in functions always use the ASCII alphabet; for
                  some operators we have allowed ourselves the luxury of reaching beyond ASCII,
                  but users can always avoid relying on such operators and can use the function
                  name instead.
               </div>
            </div>
         </div><a name="ListandElementConstructorsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e592">
            <div class="title e593">List and Element Constructors</div>
            <div class="para e594">The syntax of lists and elements is extended so that expressions may appear
               anywhere the FtanML syntax allows a value. 
            </div>
            <div class="para e595">For example, the expression 
               <div class="code e596">{[$, $+1, $+2]}(5)</div> returns the list [5,
               6, 7].
            </div>
            <div class="para e597">Lists in FtanML are not automatically flattened, so the expression 
               <div class="code e598">[1 to 5,
                  10]
               </div> produces the length-2 list 
               <div class="code e599">[[1,2,3,4,5],10]</div> rather than
               the length-6 list 
               <div class="code e600">[1,2,3,4,5,10]</div>. The latter result can be achieved
               either by applying the 
               <div class="code e601">flatten()</div> function explicitly, or by using list
               concatenation/append operators: for example 
               <div class="code e602">(1..5).append(10)</div>.
            </div>
            <div class="para e603">In an element constructor, expressions can be used to compute the values of
               attributes, but cannot be used to compute their names. The value can be expressed
               either as a parenthesized expression, or using a string or text value containing
               expressions embedded in curly braces: 
               <div class="code e604">&lt;img size=(x+1) caption="Figure
                  {n}"&gt;
               </div>. The same applies to the content value. Note that curly braces are
               used only for inline expansion of strings and text (and for writing functions); to
               compute general structured content, parenthesized expressions should be used. The
               expression:
            </div>
            <div class="programlisting e605" xml:space="preserve">&lt;job-titles (distinct-values(employee@job-title))&gt;</div>
            <div class="para e606">might generate</div>
            <div class="programlisting e607" xml:space="preserve">&lt;job-titles ["Manager", "Programmer", "Bottle-Washer"]&gt;</div>
            <div class="para e608">A null value for an attribute indicates the effective absence of the attribute, so
               the expression 
               <div class="code e609">&lt;size x=(a+1) y=(if a=2 then 3 else null)&gt;</div> might
               produce the output 
               <div class="code e610">&lt;size x=3&gt;</div>.
            </div>
            <div class="para e611">More specifically, in an element constructor, the value of an attribute, or of the
               content value, can take any of the following forms:
            </div>
            <div class="itemizedlist e612">
               <div class="listitem e613">
                  <div class="para e614">A literal value, for example 
                     <div class="code e615">a=3</div> or 
                     <div class="code e616">a="blue"</div> or
                     
                     <div class="code e617">a=false</div>.
                  </div>
               </div>
               <div class="listitem e618">
                  <div class="para e619">A string or text value with embedded expressions enclosed between curly braces, for
                     example
                     
                     <div class="code e620">a="Chapter {n}"</div> The value of the attribute is obtained by
                     evaluating the embedded expressions as strings and inserting the resulting
                     strings into the text.
                  </div>
               </div>
               <div class="listitem e621">
                  <div class="para e622">A list constructor, for example 
                     <div class="code e623">a=[n, n+1, n+2]</div>.
                  </div>
               </div>
               <div class="listitem e624">
                  <div class="para e625">An element constructor, for example 
                     <div class="code e626">a=&lt;x=(n+1) y=(n+2)&gt;</div>
                  </div>
               </div>
               <div class="listitem e627">
                  <div class="para e628">A parenthesized expression, for example 
                     <div class="code e629">a=(n+1)</div>
                  </div>
               </div>
               <div class="listitem e630">
                  <div class="para e631">A function, for example 
                     <div class="code e632">a={$+1}</div>. In this case the value of
                     the attribute is the function, not the result of evaluating the
                     function.
                  </div>
               </div>
            </div>
            <div class="para e633">Where element constructors cannot be used because the element or attribute names
               are not known statically, functions can be used to construct an element. For
               example:
            </div>
            <div class="programlisting e634" xml:space="preserve">
               element("img").add("x", 3).add("y", 5).add("", "An image")
               }
            </div>
            <div class="para e635">Here the function call 
               <div class="code e636">element("img")</div> constructs an element with a
               given name, and the 
               <div class="code e637">add()</div> function adds an attribute with a given name
               and value (copying the element to create a new element). The last call adds the
               element content, represented as an attribute with an empty name. It should be
               remembered that although we use the term "element", FtanML elements will not only
               be
               used in the way that XML elements are traditionally used, but also in the way that
               maps are used in other programming languages, where the keys (attribute names) are
               highly dynamic: indeed, to satisfy the kind of use cases for which maps are being
               added to XSLT 3.0.
            </div>
            <div class="para e638">Rich text (mixed content) is constructed as a list of strings and elements, which
               is then converted to rich text by applying the 
               <div class="code e639">toText()</div>
               function.
            </div>
         </div><a name="ConditionalExpressionsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e640">
            <div class="title e641">Conditional Expressions</div>
            <div class="para e642">The syntax for a conditional expression is:</div>
            <div class="programlisting e643" xml:space="preserve">
               "if" expression "then" expression "else" expression
               
            </div>
            <div class="para e644">There is no need for parentheses (though you can use them if you like, for old
               time's sake). The "else" branch is mandatory, partly to avoid choosing an arbitrary
               default (null?) and partly to prevent the dangling-else ambiguity when conditional
               expressions are nested. For example:
            </div>
            <div class="programlisting e645" xml:space="preserve">
               if $ = 0 then x else y
               
            </div>
            <div class="para e646">A simple try/catch construct is provided:</div>
            <div class="programlisting e647" xml:space="preserve">
               "try" expression "catch" function
               
            </div>
            <div class="para e648">which returns the result of the expression unless an error occurs during its
               evaluation, in which case the catch function is called, supplying error
               information as its argument, in the form of an element with attributes
               representing the error code and error description.
            </div>
            <div class="para e649">For example, the following catches a divide-by-zero error (we assume use of
               the XPath error codes), and returns null if it occurs; otherwise the error is
               re-thrown:
            </div>
            <div class="programlisting e650" xml:space="preserve">
               try (x.div(n)) catch {if $@code="FOAR0001" then null else error($)}
               
            </div>
            <div class="para e651">A function 
               <div class="code e652">orElse</div> allows a default to be substituted when a value
               is null. For example 
               <div class="code e653">a.orElse(0)</div> returns the value of 
               <div class="code e654">a</div>
               unless it is null, in which case it returns zero. This function could be defined as
               
               <div class="code e655">{if $1=null then $2 else $1}</div>.
            </div>
         </div><a name="VariablesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e656">
            <div class="title e657">Variables</div>
            <div class="para e658">Variables have simple names (no "$" prefix, no backticks). The names
               
               <div class="code e659">true</div>, 
               <div class="code e660">false</div>, and 
               <div class="code e661">null</div> are reserved: they
               are used syntactically like variables, but have fixed predefined values. Language
               keywords such as 
               <div class="code e662">if</div> and 
               <div class="code e663">let</div> are also reserved: unlike
               XPath, this is possible because bare names are not used to refer to elements and
               attributes in input documents.
            </div>
            <div class="para e664">Variables may be declared using the construct:</div>
            <div class="programlisting e665" xml:space="preserve">
               LetExpression ::= "let" name "=" expression; expression
               
            </div>
            <div class="para e666">which evaluates the second expression with the named variable bound to the
               value of the first expression; for example 
               <div class="code e667">let x=2; x+x</div> returns
               4.
            </div>
            <div class="para e668">Variables declared in this way are available only after they have been
               declared. An alternative style of declaration allows forwards references to
               variables, which is necessary when writing recursive functions. This style uses
               element notation: 
            </div>
            <div class="programlisting e669" xml:space="preserve">
               let &lt;
               even = {if $=0 then true else odd(abs($)-1)}
               odd  = {if $=0 then false else even(abs($)-1)}
               &gt;;
               even(32)
               
            </div>
            <div class="para e670">With this approach, all the variables declared as attributes of the same
               element are in scope within each others' declarations, failing dynamically (or
               in the worst case, failing to finish) if this results in non-terminating
               recursion.
            </div>
         </div><a name="EqualityandOtherComparisonsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e671">
            <div class="title e672">Equality and Other Comparisons</div>
            <div class="para e673">The 
               <div class="code e674">eq</div> function (operator 
               <div class="code e675">=</div>) is defined over all
               values. To be equal, two values must have the same fundamental type (this means, for
               example, that the string 
               <div class="code e676">"John"</div> is not equal to the rich text
               
               <div class="code e677">|John|</div>). Strings are compared codepoint-by-codepoint. Lists are
               equal if they have the same size and their items are pairwise equal. Elements are
               equal if they have the same name, and if there is a one-to-one correspondence of
               attributes in which both the attribute names and the corresponding values are equal
               (the content value is treated here as an attribute). Two texts are equal if the two
               sequences of strings and elements making up the texts are pairwise equal.
            </div>
            <div class="para e678">Defining equality for functions requires further work. Some languages such as
               ML and Haskell make equality of functions undefined, but this would mean that
               equality of lists and elements containing functions also becomes undefined.
               Currently my preference is to make equality of functions implementation-defined,
               subject to the proviso that two functions can only be equal if all invocations are
               guaranteed to return equal results. It would be useful to attempt a more careful
               definition, for example one that guarantees that the result of the expression
               
               <div class="code e679">let a=b; a=b</div> is always true, but formalizing this is not easy
               without introducing some notion of identity.
            </div>
            <div class="para e680">The 
               <div class="code e681">ne</div> function (operator 
               <div class="code e682">!=</div>) is the inverse of
               
               <div class="code e683">eq</div>.
            </div>
            <div class="para e684">Ordering (specifically, the functions 
               <div class="code e685">le</div>, 
               <div class="code e686">lt</div>,
               
               <div class="code e687">ge</div>, 
               <div class="code e688">gt</div>, and their corresponding operators
               
               <div class="code e689">&lt;=</div>, 
               <div class="code e690">&lt;</div>, 
               <div class="code e691">&gt;=</div>,
               
               <div class="code e692">&gt;=</div>) is defined over numbers and strings only. Strings are
               sorted in Unicode codepoint sequence.
            </div>
            <div class="para e693">Testing whether a value 
               <div class="code e694">V</div> is present in a list 
               <div class="code e695">A</div>
               (the equivalent of the 
               <div class="code e696">=</div> operator in XPath) is sufficiently common that
               we provide a function, 
               <div class="code e697">in(V, A)</div> with corresponding operator ∊ (x220A).
               The function 
               <div class="code e698">in(V, A)</div> can be defined as 
               <div class="code e699">{let V=$1; let A=$2;
                  exists(A?{$=V})}
               </div>. (This uses a filter operator which we will introduce in
               due course.)
            </div>
            <div class="para e700">A collation is modelled as a set of functions. Specifically, a collation for a
               particular language, say Swedish, is obtained using the function call
               
               <div class="code e701">collation(&lt;lang="se"&gt;)</div>. This returns an element, whose
               attributes are functions. One of these functions is a sort function, so to sort a
               list of strings using Swedish collation, one can write
               
               <div class="code e702">collation(&lt;lang="se"&gt;)@sort(input)</div>. Other functions available as
               attributes of a collation include comparison functions 
               <div class="code e703">eq</div>,
               
               <div class="code e704">le</div>, etc, and collation-sensitive versions of other functions that
               involve string comparison such as 
               <div class="code e705">in</div>, 
               <div class="code e706">min</div>,
               
               <div class="code e707">max</div>, 
               <div class="code e708">indexOf</div>, 
               <div class="code e709">contains</div>,
               
               <div class="code e710">startsWith</div>, 
               <div class="code e711">endsWith</div>, 
               <div class="code e712">substringAfter</div>,
               
               <div class="code e713">substringBefore</div>.
            </div>
            <div class="para e714">Comparing 
               <div class="code e715">A = null</div> returns true if 
               <div class="code e716">A</div> is null, 
               false otherwise. (This is not as obvious as it might seem, given the semantics in
               some
               other languages.)
            </div>
         </div><a name="OperationsinvolvingTypesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e717">
            <div class="title e718">Operations involving Types</div>
            <div class="para e719">The function 
               <div class="code e720">isA</div> tests whether a value belongs to a given type.
               Types are represented using the element representation introduced in an earlier
               section. For example, 
               <div class="code e721">x.isA(&lt;number ge=0&gt;)</div> returns true if the
               value of 
               <div class="code e722">x</div> is a number and satisfies the facet 
               <div class="code e723">ge=0</div>.
               Recall that a type is a predicate, not a label associated with a value, so this
               tests whether the value meets all the constraints defined by the type, not
               whether the value carries any particular type label.
            </div>
            <div class="para e724">For convenience, the functions 
               <div class="code e725">isNull</div>, 
               <div class="code e726">isBoolean</div>,
               
               <div class="code e727">isNumber</div>, 
               <div class="code e728">isString</div>, 
               <div class="code e729">isList</div>,
               
               <div class="code e730">isElement</div>, 
               <div class="code e731">isText</div>, and 
               <div class="code e732">isFunction</div> are
               available to test for membership of the primitive types.
            </div>
            <div class="para e733">The function 
               <div class="code e734">as</div> is similar to 
               <div class="code e735">isA</div>, but instead of
               returning a boolean indicating whether or not the value is a member of the type,
               it returns the value unchanged if this is the case, and throws an error
               otherwise. We saw this function used to check the arguments to a function call.
            </div>
            <div class="para e736">For convenience, the functions 
               <div class="code e737">asNull</div>, 
               <div class="code e738">asBoolean</div>,
               
               <div class="code e739">asNumber</div>, 
               <div class="code e740">asString</div>, 
               <div class="code e741">asList</div>,
               
               <div class="code e742">asElement</div>, 
               <div class="code e743">asText</div>, and 
               <div class="code e744">asFunction</div> are
               available to test for membership of the primitive types. In each case, they return
               the argument unchanged if it matches the corresponding type, or throw an error
               otherwise.
            </div>
            <div class="para e745">Functions for conversion of values have names such as 
               <div class="code e746">toString</div>,
               
               <div class="code e747">toList</div>, and 
               <div class="code e748">toText</div>. There are no general rules here;
               as in other languages, the rules for what can be converted to what are inherently
               ad-hoc. 
            </div>
            <div class="para e749">The 
               <div class="code e750">parse</div> function takes a FtanML lexical representation of a value
               and returns the corresponding value; conversely, 
               <div class="code e751">serialize</div> takes a
               value and returns its FtanML lexical representation. 
            </div>
         </div><a name="BooleanFunctionsandOperatorsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e752">
            <div class="title e753">Boolean Functions and Operators</div>
            <div class="para e754">The functions 
               <div class="code e755">and</div>, 
               <div class="code e756">or</div>, and 
               <div class="code e757">not</div> are
               available. The first two have equivalent operators 
               <div class="code e758">&amp;&amp;</div> and 
               <div class="code e759">||</div>.
            </div>
            <div class="para e760">The argument must either be a boolean or null; there is no implicit conversion
               to boolean as in XPath. If an argument is null, the operators implement three-valued
               logic as in SQL, for example 
               <div class="code e761">(null||true)</div> is 
               <div class="code e762">true</div>.
            </div>
            <div class="para e763">Order of evaluation is not defined; programmers should not assume that the
               second argument will only be evaluated if it is required. (This rule might seem
               unnecessary in the absence of side-effects, but it becomes important when defining
               the terminating conditions of a recursive function. Like XPath, we choose to allow
               optimizers the freedom to re-order the terms in a predicate, which can be important
               when indexes are available on large data sets.)
            </div>
         </div><a name="NumericFunctionsandOperatorsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e764">
            <div class="title e765">Numeric Functions and Operators</div>
            <div class="para e766">The functions 
               <div class="code e767">plus</div>, 
               <div class="code e768">minus</div>, 
               <div class="code e769">times</div>,
               
               <div class="code e770">div</div>, 
               <div class="code e771">idiv</div>, and 
               <div class="code e772">mod</div> are defined; the first
               four have corresponding operators 
               <div class="code e773">+</div>, 
               <div class="code e774">-</div>, 
               <div class="code e775">*</div>,
               and 
               <div class="code e776">/</div>. Arithmetic is performed in decimal. Division by zero is an
               error; the precision of the result of division is implementation-defined, as are
               limits on the value space.
            </div>
            <div class="para e777">Additional functions 
               <div class="code e778">abs</div>, 
               <div class="code e779">round</div>, 
               <div class="code e780">floor</div>,
               
               <div class="code e781">ceiling</div> have the same effect as in XPath.
            </div>
            <div class="para e782">The function 
               <div class="code e783">parse</div> may be used to convert a string to a number.
               Writing 
               <div class="code e784">parse(X).asA(&lt;number&gt;)</div> checks that the value was
               indeed numeric.
            </div>
            <div class="para e785">Supplying null to an arithmetic function or operator results in the value
               null. Supplying any other non-numeric value causes an error. There is no
               implicit conversion of strings to numbers.
            </div>
            <div class="para e786">Aggregation functions 
               <div class="code e787">sum</div>, 
               <div class="code e788">avg</div>, 
               <div class="code e789">min</div>,
               
               <div class="code e790">max</div> work as in XPath.
            </div>
            <div class="para e791">The function 
               <div class="code e792">to</div> or its equivalent operator 
               <div class="code e793">..</div>
               returns a list of consecutive integers, for example 
               <div class="code e794">1..5</div> returns the
               list 
               <div class="code e795">[1,2,3,4,5]</div>.
            </div>
         </div><a name="StringFunctionsandOperatorsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e796">
            <div class="title e797">String Functions and Operators</div>
            <div class="para e798">The 
               <div class="code e799">toString</div> function can be applied to any value without
               exception to convert it to a string. If the input is already a string, it is
               returned unchanged. If the input is a boolean, number, or null, the result is the
               same as the FtanML literal representation of the value. If the input is a list, the
               result is 
               <div class="code e800">string-join($!toString, " ")</div>, that is, the space-separated
               concatenation of the string values of the members of the array. If the input is an
               element, the result is 
               <div class="code e801">string(content($))</div>, that is, the string value of
               the element's content. If the input is rich text, the result is
               
               <div class="code e802">string-join($.toList()!toString)</div>, that is, the concatenation
               (without space separation) of the string-values of the strings and elements making
               up the text. If the value is a function, the resulting string begins with "{" and
               ends with "}", and is otherwise implementation-defined; it is not necessarily a
               string that can be parsed and executed as a function.
            </div>
            <div class="para e803">String concatenation can be achieved conveniently using string templates, for
               example 
               <div class="code e804">"See section {s} in chapter {n}"</div>. This mechanism can be used
               wherever a string literal is permitted. The result of the enclosed expressions is
               converted to a string if necessary, by using the 
               <div class="code e805">toString</div>
               function.
            </div>
            <div class="para e806">Generally FtanSkrit avoids implicit conversion. For example, if rich text is
               to be compared to a string, it must be converted to a string explicitly. When null
               is supplied to a function that expects a string, it is generally treated as a
               zero-length string (but this is a convention adopted by the functions in the
               built-in function library; it is not a feature of the language). 
            </div>
            <div class="para e807">Other functions are available as in XPath. Counting of characters in a string,
               however, starts at zero. The basic built-in functions use codepoint collation;
               equivalents using a different collation can be obtained as attributes of the
               collation.
            </div>
         </div><a name="FunctionsandOperatorsonListsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e808">
            <div class="title e809">Functions and Operators on Lists</div>
            <div class="para e810">The number of items in a list 
               <div class="code e811">A</div> is obtained using
               
               <div class="code e812">count(A)</div> (or equivalently, 
               <div class="code e813">A.count()</div>).
            </div>
            <div class="para e814">The construct 
               <div class="code e815">A[n]</div> selects the n'th item in list 
               <div class="code e816">A</div>.
               This construct is never used for filtering, only for subscripting. If 
               <div class="code e817">n</div>
               is out of range, the expression returns null. This operation is also available as
               a
               function 
               <div class="code e818">itemAt(A, n)</div>.
            </div>
            <div class="para e819">The function 
               <div class="code e820">cat(a, a)</div> (operator 
               <div class="code e821">++</div>) concatenates
               two lists. The function 
               <div class="code e822">append(a, i)</div> (operator 
               <div class="code e823">+~</div>) appends
               an item to a list, while 
               <div class="code e824">prepend(i, a)</div> (operator 
               <div class="code e825">~+</div>)
               prepends. Thus for example 
               <div class="code e826">0 ~+ [1,2,3] ++ [4,5,6] +~ 7</div> returns the
               list 
               <div class="code e827">[0, 1, 2, 3, 4, 5, 6, 7]</div>. 
            </div>
            <div class="para e828">The function 
               <div class="code e829">head(a)</div> is equivalent to 
               <div class="code e830">a[0]</div>, while
               
               <div class="code e831">tail(a)</div> equates to 
               <div class="code e832">remove(a, 0)</div>.
            </div>
            <div class="para e833">The function 
               <div class="code e834">flatten</div> flattens a list: it creates a new list in
               which any non-list items in the argument list are copied to the new list, and any
               list items are processed by copying their contents. This only works one level deep.
               So 
               <div class="code e835">flatten([[1,2],[3,[4,5]]])</div> returns
               
               <div class="code e836">[1,2,3,[4,5]]</div>.
            </div>
            <div class="para e837">Functions 
               <div class="code e838">index-of</div>, 
               <div class="code e839">remove</div>, 
               <div class="code e840">subsequence</div>
               work as in XPath, except that indexing starts at zero. The
               
               <div class="code e841">insert-before</div> function inserts a single item at a specified
               position; if the supplied item is a list, it becomes a nested list (there is no
               flattening).
            </div>
            <div class="para e842">The function 
               <div class="code e843">toList</div> works as follows: if the argument is a list,
               it is returned unchanged. If the argument is rich text, it is converted to a list
               whose members are (non-zero-length) strings and elements. In other cases, the
               function creates and returns a singleton list in which the argument is the only
               item. This function is useful because it makes it easier to process different types
               of content in the same way: a single element looks the same as a list of elements
               of
               length one, which looks the same as mixed content comprising a single element; a
               single string looks the same as mixed content containing no elements.
            </div>
            <div class="para e844">The function 
               <div class="code e845">forEach</div>, or the equivalent operator 
               <div class="code e846">!</div>,
               applies a function to every item in a list. So 
               <div class="code e847">forEach([1,2,3], {$+1})</div>
               returns 
               <div class="code e848">[2,3,4]</div>; this can also be written 
               <div class="code e849">[1,2,3] ! {$+1}</div>.
               Similarly, 
               <div class="code e850">[1,2,3]!toString</div> returns 
               <div class="code e851">["1", "2", "3"]</div>. Note
               that this is a non-flattening mapping operation; the result list will contain
               exactly the same number of items as the input.
            </div>
            <div class="para e852">Another example: 
               <div class="code e853">(1..5)!{&lt;br&gt;}</div> returns
               
               <div class="code e854">[&lt;br&gt;, &lt;br&gt;, &lt;br&gt;, &lt;br&gt;, &lt;br&gt;]</div>
            </div>
            <div class="para e855">The function 
               <div class="code e856">select</div>, or the equivalent operator 
               <div class="code e857">?</div>,
               applies a function to every item in a list and returns a list containing those items
               for which the function returns true. So 
               <div class="code e858">select([1,2,3], {$&gt;=2})</div> returns
               
               <div class="code e859">[2,3]</div>; this can also be written 
               <div class="code e860">[1,2,3]?{$&gt;=2}</div>.
               Similarly, 
               <div class="code e861">[1,2,"London"]?isNumber</div> returns 
               <div class="code e862">[1,2]</div>.
            </div>
            <div class="para e863">The result of the 
               <div class="code e864">select</div> operator or function is always a list,
               even if only one item is selected. If it is known that the predicate will select
               exactly one item, it is necessary to extract that item from the result, typically
               by
               a call on 
               <div class="code e865">head</div>, or by using the subscript operation
               
               <div class="code e866">(A?P)[0]</div>. Because this is a common operation, the operator
               
               <div class="code e867">??</div> is provided, equivalent to 
               <div class="code e868">?</div> followed by
               
               <div class="code e869">head()</div>: it selects the first item found, or null if nothing was
               matched. A query to find a singleton can now be written, for example
               
               <div class="code e870">items??{$@id='xyz'}</div>. 
            </div>
            <div class="para e871">The functions 
               <div class="code e872">all</div> and 
               <div class="code e873">some</div> can be used in
               conjunction with the 
               <div class="code e874">forEach</div> (
               <div class="code e875">!</div>) operator to perform
               universal and existential quantification: they test whether a list consists entirely
               of boolean true values (all), or contains at least one true value (some). So, for
               example 
               <div class="code e876">all([1,2,3]!{$&gt;0})</div> returns true, while
               
               <div class="code e877">some([1,2,3]!{$=0})</div> returns false.
            </div>
            <div class="para e878">Functions 
               <div class="code e879">fold-left</div> and 
               <div class="code e880">fold-right</div> are available as
               in XPath 3.0.
            </div>
         </div><a name="FunctionsandOperatorsonElementsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e881">
            <div class="title e882">Functions and Operators on Elements</div>
            <div class="para e883">The function 
               <div class="code e884">name(E)</div> returns the name of an element
               
               <div class="code e885">E</div>, or null if it is unnamed. The syntax 
               <div class="code e886">E.name()</div>
               can also be used, of course.
            </div>
            <div class="para e887">The mapping and filtering operators (
               <div class="code e888">!</div> and 
               <div class="code e889">?</div>) apply to
               elements as well as to lists. In this case they expect a two argument function to
               be
               supplied, and call this with the attribute name as the first argument and the
               attribute value as the second. The mapping operator returns a list with as many
               members as there are non-null attributes in the input; the filter operator returns
               an element with the same name as original, and with a subset of its attributes.
               These operators treat the content value as just another attribute. They provide the
               most general and powerful means of processing elements, and other operations can be
               defined in terms of these two. For example, the function content(E), which returns
               the content of an element, could be defined as E?{$1=""}!{$2}.
            </div>
            <div class="para e890">For example 
               <div class="code e891">E?{$.in("id", "code", "status"}</div> returns a copy of element
               E, retaining only the three specified attributes.
            </div>
            <div class="para e892">If 
               <div class="code e893">E</div> is an element and 
               <div class="code e894">xyz</div> is the name of an attribute
               (known at the time the program is written), then 
               <div class="code e895">E@xyz</div> returns the
               value of the attribute. It returns the value only, not an "attribute node" as in
               XPath; if the attribute is not present, it returns null. If the name needs to be
               dynamically computed, this can be achieved using an expression in parentheses, for
               example 
               <div class="code e896">E@(X@name)</div> returns the attribute of 
               <div class="code e897">E</div> whose name
               is given by the expression 
               <div class="code e898">(X@name)</div>. The construct 
               <div class="code e899">E^</div> is
               an abbreviation for 
               <div class="code e900">E@``</div> — it returns the value of the attribute whose
               name is the zero-length string, that is, the content value.
            </div>
            <div class="para e901">Filtering a list of elements to select those with a given name is likely to be a
               common operation. The syntax 
               <div class="code e902">L?{name($)=N}</div> achieves this but is a
               little cumbersome, and becomes more so if the list can also include values other
               than elements. So we provide the construct 
               <div class="code e903">:N</div>, where 
               <div class="code e904">N</div> is
               a name, which represents a function that returns true when its first argument is an
               element with the name 
               <div class="code e905">N</div>, and false otherwise. So given a list of
               elements 
               <div class="code e906">L</div>, we can now select those having the name N by writing
               
               <div class="code e907">L?:N</div>. If we know there will be only one such element, we can select
               it using 
               <div class="code e908">L??:N</div>.
            </div>
            <div class="para e909">So if 
               <div class="code e910">PO</div> is the purchase order presented in section 2.1, then
               
               <div class="code e911">PO@shipTo^??:name</div> gives the value 
               <div class="code e912">"Alice Smith"</div>, while
               
               <div class="code e913">PO@items[0]@partNum</div> gives 
               <div class="code e914">"872-AA"</div>. 
            </div>
            <div class="para e915">The following example selects from a list of elements those having a particular
               attribute value: 
               <div class="code e916">PO@items?{$@USprice &gt; 20.00}</div>.
            </div>
            <div class="para e917">The 
               <div class="code e918">@</div> operator performs implicit mapping. Specifically: if the
               left-hand operand is a list 
               <div class="code e919">L</div>, then any lists contained in this list
               are expanded recursively. Any values in the expanded list that are not elements are
               ignored, so we end up with a list of elements; call this 
               <div class="code e920">LL</div>. The value
               of the expression 
               <div class="code e921">L@name</div> is then defined as 
               <div class="code e922">LL!{$@name}</div>.
               Note that the result may be a list of lists; it is not flattened.
            </div>
            <div class="para e923">Returning again to the purchase order example, this means that
               
               <div class="code e924">PO@items@partNum</div> returns the list of strings 
               <div class="code e925">["872-AA",
                  "926-AA"]
               </div>.
            </div>
            <div class="para e926">The postfix operator 
               <div class="code e927">//</div> represents the
               <div class="code e928"> deepContent()</div>
               function, which is the flattened transitive closure of the 
               <div class="code e929">content()</div>
               function. Specifically, if the result of 
               <div class="code e930">content()</div> is a list, then any
               element in that list has its own descendants inserted immediately after it. So the
               function 
               <div class="code e931">descendants(E)</div> can be defined as 
               <div class="code e932">content(E)!{$ ~+ (if
                  $.isA(&lt;element&gt;) then $.descendants() else [])}
               </div>. So if 
               <div class="code e933">E</div>
               is an element, then 
               <div class="code e934">E//?:status</div> will select all descendant elements
               named 
               <div class="code e935">status</div>, and 
               <div class="code e936">E//?[$@id=12]</div> will select all descendant
               elements having the 
               <div class="code e937">id</div> attribute equal to 12.
            </div>
            <div class="para e938">The postfix operator 
               <div class="code e939">@@</div> similarly gives the transitive closure of
               
               <div class="code e940">attributes()</div>.
            </div>
            <div class="para e941">As already mentioned, the function 
               <div class="code e942">forEach</div> and the equivalent
               operator 
               <div class="code e943">!</div> are overloaded for elements to process all the attributes of
               an element (including the content). The second operand is a function which is called
               with two arguments, the attribute name and the attribute value. For example, given
               an element E the expression 
               <div class="code e944">E!{$}</div> returns the names of its
               attributes.
            </div>
            <div class="para e945">Similarly the function 
               <div class="code e946">select</div> and the equivalent operator
               
               <div class="code e947">?</div> are overloaded to process all the attributes, and return an
               element in which only a subset of the original attributes are present. 
            </div>
            <div class="para e948">The function 
               <div class="code e949">element(name)</div> constructs an element with a given
               name (which may be null). It can also be called with two arguments:
               
               <div class="code e950">element(name, attributes)</div>. The second argument is a list of
               attributes, each attribute being represented by a two-member list containing the
               name and the value.
            </div>
            <div class="para e951">The function 
               <div class="code e952">add(element, name, value)</div> takes an existing element,
               and adds an attribute with the given name and value, replacing any existing
               attribute with the same value. A new element is returned. Calls to this function can
               conveniently be chained: 
               <div class="code e953">element("rect").add("id", "a001").add("color",
                  "black")
               </div>.
            </div>
            <div class="para e954">For convenience, the function 
               <div class="code e955">addContent</div> is defined as
               
               <div class="code e956">add(?, "", ?)</div>.
            </div>
            <div class="para e957">So, for example, we can convert attributes to a list of child elements like
               this:
            </div>
            <div class="programlisting e958" xml:space="preserve">let elementsToAttributes = {
               let E = $.asElement();
               element(E.name()).setContent(E!{element($1).setContent($2)})    
               }
               
            </div>
            <div class="para e959">The semantics of these constructions in FtanSkrit are different from the corresponding
               operations in XPath, but hopefully they will have a familiar feel.
            </div>
         </div>
      </div><a name="FutureFeaturesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e960">
         <div class="title e961">Future Features</div>
         <div class="para e962">FtanML as presented in this paper packs a large amount of functionality into a small
            language. It doesn't offer everything that anyone might ask for, and nor should it:
            keeping it small is important. Nevertheless, there are things one might want to add,
            and
            which have not been ruled out.
         </div>
         <div class="itemizedlist e963">
            <div class="listitem e964">
               <div class="para e965">An extensible mechanism for data types is needed: for example, representing
                  dates as values. Schema validation can confirm that a date is a valid string,
                  but for processing one would like to manipulate it as a date, not just as a
                  string. Similarly, support for binary data is important to some applications;
                  and it would be nice if URIs were recognizable as such. A general mechanism for
                  extending the set of types (perhaps along the lines suggested in [Jeni
                  Tennison]), would be undoubtedly useful.
               </div>
            </div>
            <div class="listitem e966">
               <div class="para e967">What about pointers and links? XML has a sorry tale to tell in this area, but
                  that doesn't mean it can't be done better. Arguably links and anchors should be
                  first-class constructs marked as such in the syntax, rather than a semantic
                  overlay affecting the interpretation of strings. Both intra-document and
                  inter-document links are needed, and they should ideally be handled using a
                  single mechanism. Support for the kind of referential integrity found in
                  relational databases is as important as support for the hyperlinking traditions
                  of the markup community, and there is no good reason why the two mechanisms
                  should be distinct.
               </div>
            </div>
            <div class="listitem e968">
               <div class="para e969">In the scripting language, there is an obvious need for rule-based processing
                  in the style popularised by XSLT. In this paper, I have concentrated on
                  presenting a small functional core for the scripting language, but I would like
                  to see rule-based processing superimposed, and I see no reason why this should
                  not be achievable.
               </div>
            </div>
         </div>
      </div><a name="ConclusionsandSummaryANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e970">
         <div class="title e971">Conclusions and Summary</div>
         <div class="para e972">We have introduced three languages as replacements for the central pillars of the
            markup edifice: FtanML as the markup language, FtanGram as its schema language, and
            FtanSkrit as its query and transformation language. Let's try now to assess what we've
            achieved.
         </div>
         <div class="para e973">Firstly, FtanML compared to XML. FtanML is considerably smaller as a specification,
            but it's also more powerful. It gets rid of the same unwanted things that MicroXML
            gets
            rid of (namespaces, comments, processing instructions, entities, DTDs), but by allowing
            attributes and element content to be any value, the data model is much richer, more
            orthogonal, and more expressive. It also solves the whitespace issue (which whitespace
            is significant?). By dropping end tags, the language is a lot less verbose, which
            is
            particularly noticeable when it is used for highly structured information, as in the
            FtanGram syntax. There's a lot of general tidying-up in little areas like escaping
            of
            special characters.
         </div>
         <div class="para e974">Does verbosity matter? We think it does. The fact that XML is bulky and hard to read
            is a significant factor leading to the adoption of alternative syntaxes for languages
            such as RDF and RelaxNG, and is a big turn-off for people coming newly to XSLT. Even
            if
            specialist editors can reduce the burden of entering the markup, the amount of noise
            on
            the page affects the ability of a human reader to absorb information quickly. This
            is
            not to say that the most concise syntax is optimal, of course: we might have swung
            too
            far. XML had human
            readability as one of its goals, and we should remember that readability is not a
            binary
            attribute; there are degrees of readability, and readability also depends greatly
            on
            the familiarity of the reader with the notation.
         </div>
         <div class="para e975">Compared to JSON, FtanML's main contribution is that it adds support for mixed
            content. And element names, which are very handy when modelling document
            structures.
         </div>
         <div class="para e976">Compared to the XPath data model (XDM), the FtanML model has more capability and
            greater orthogonality. The core structuring constructs (elements and lists) are powerful
            enough for all computational requirements. XSLT and XQuery have found a need to extend
            the core XML-based model with other constructs such as maps and lists; the FtanML
            model
            does not have this awkward duality between constructs that can be directly serialized
            in
            the markup, and constructs used only for internal processing.
         </div>
         <div class="para e977">FtanGram learns from RelaxNG the importance of designing a schema language to do
            validation and nothing else. Unlike RelaxNG, it's able to take advantage of the
            simplification and orthogonality of the data model. The unification of facilities
            for
            "simple types" and "complex types" is particularly appealing, allowing a smaller number
            of constructs to be combined in more powerful ways to create richer functionality.
            The
            idea that element names as well as attributes and content are something that can be
            constrained by a type is also a useful simplification. FtanGram also attempts to show
            that by making the markup language itself more powerful and less verbose, the need
            for a
            "compact syntax" (that is, a syntax using constructs other than those available in
            the
            target language) is eliminated.
         </div>
         <div class="para e978">FtanSkrit is broadly equivalent in capability to XQuery, but with a stronger reliance
            on higher-order functions and operators in preference to custom syntax. It currently
            lacks any mechanism comparable to XSLT's template rules, but we have ideas for how
            that
            could be added.
         </div>
         <div class="para e979">There will always be debates about strong versus weak typing, static versus dynamic.
            I
            believe that FtanML's dynamic typing approach fits better with the philosophy that
            with
            markup, you can have as much or as little schema machinery as you want. The XPath
            ability to mix typed and untyped data is one solution to the problem of spanning the
            worlds of structured and unstructured data, but it is something of a camel.
         </div>
         <div class="para e980">Are there any downsides? Some may find the languages excessively terse; highly compact
            syntax is not easy on the eye. The absence of named end tags in FtanML can lead to
            long
            strings of closing angle-brackets which are hard to match up without the support of
            a
            syntax-driven editor. Generally, though, we feel that FtanML with its sister languages
            FtanGram and FtanSkrit together form a markup system that has more than the power
            of the
            equivalent XML stack, with much greater integrity of design, simplicity, orthogonality,
            efficiency, and usability.
         </div>
      </div><a name="ImplementationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e981">
         <div class="title e982">Implementation</div>
         <div class="para e983">A Scala implementation is available as open source software. It can be downloaded
            from here:
         </div>
         <div class="para e984">
            <div class="code e985">https://github.com/organizations/FtanML-WG</div>
         </div>
         <div class="para e986">The implementation is not 100% complete,
            and is intended as a proof of concept rather than as production quality software.
            It
            includes a complete parser for FtanML which constructs a tree represenation of the
            object model; an implementation of all the FtanGram types and facets (including the
            grammar facet), but not the schema language itself; and an implementation of most
            of the
            FtanSkrit processing language, though with some relatively unimportant functions and
            operators omitted.
         </div>
      </div><a name="AcknowledgementsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e987">
         <div class="title e988">Acknowledgements</div>
         <div class="para e989">FtanML was invented by a group of students from German universities taught by the
            author, with Stephanie Haupt as co-tutor, during a summer school in Ftan, Switzerland
            in
            August 2012, organised by the Max Weber Programm, Bayern. The students deserve much
            of
            the credit, if only for challenging things that I had assumed to be self-evident:
            they
            were Max Altgelt, Julien Bergner, Lukas Graf, Dominik Helm, Axel Kroschk, Uwe von
            Lüpke,
            My-Tien Nguyen, Sebastian Meßmer, Suhanyaa Nitkunanantharajah, Jan Landelin Pawellek,
            and Martin Schmitt. They were a most impressive team and a pleasure to work with:
            absorbing knowledge quickly, researching information thoroughly, generating ideas
            constantly, reaching consensus amicably, writing parsers correctly, making decisions
            wisely, and communicating bilingually. I am particularly indebted to Sebastian Meßmer
            for helping me climb the Scala learning curve.
         </div>
      </div><a name="ReferencesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e990">
         <div class="title e991">References</div>
         <div class="bibliomixed e992" xml:id="ref1" xreflabel="1">
            <div class="emphasis e993" role="ital">MicroXML</div>. Ed. James Clark and John Cowan, 2012. W3C.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e994" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">https://dvcs.w3.org/hg/microxml/raw-file/tip/spec/microxml.html</div>.
         </div>
         <div class="bibliomixed e995" xml:id="ref2" xreflabel="2">
            <div class="emphasis e996" role="ital">XML Schema Part 0 Primer</div>, Second Edition. Ed. David C. Fallside and Priscilla Walmsley. 28 Oct 2004. W3C.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e997" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xmlschema-0/</div>.
         </div>
         <div class="bibliomixed e998" xml:id="ref3" xreflabel="3">
            <div class="emphasis e999" role="ital">Introducing JSON</div>. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e1000" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.json.org</div>
         </div>
         <div class="bibliomixed e1001" xml:id="ref4" xreflabel="4">
            <div class="emphasis e1002" role="ital">YAML: YAML ain't markup language</div>. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e1003" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://yaml.org</div>
         </div>
         <div class="bibliomixed e1004" xml:id="ref5" xreflabel="5">
            <div class="emphasis e1005" role="ital">LMNL: Layered Markup and Annotation Language</div>. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e1006" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.lmnl-markup.com</div>
         </div>
         <div class="bibliomixed e1007" xml:id="ref6" xreflabel="6">
            <div class="emphasis e1008" role="ital">ODDAG: A Data Structure for Overlapping Hierarchies</div>. 
            C. M. Sperberg-McQueen and C. Huitfeld. 2004. Springer.
         </div>
         <div class="bibliomixed e1009" xml:id="ref7" xreflabel="7">
            <div class="emphasis e1010" role="ital">Information technology -- Generic applications of ASN.1: Fast Infoset</div>. 
            ISO/IEC 24824-1:2007
         </div>
         <div class="bibliomixed e1011" xml:id="ref8" xreflabel="8">
            <div class="emphasis e1012" role="ital">Efficient XML Interchange (EXI) Format 1.0</div>. 
            10 Mar 2011. W3C. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e1013" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/2011/REC-exi-20110310/</div>
         </div>
      </div>
   </div>
</div>