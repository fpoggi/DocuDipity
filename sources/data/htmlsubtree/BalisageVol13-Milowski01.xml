<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#HowtosurvivethecomingnamespacewinterANCHOR" name="HowtosurvivethecomingnamespacewinterTOC">How to survive the coming namespace winter</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ForwardfromFailureANCHOR" name="ForwardfromFailureTOC">Forward from Failure</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#HyphenstotheRescueANCHOR" name="HyphenstotheRescueTOC">Hyphens to the Rescue</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#Pandora'sBox?ANCHOR" name="Pandora'sBox?TOC">Pandora's Box?</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#TheDocBookWebComponentANCHOR" name="TheDocBookWebComponentTOC">The DocBook Web Component</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#TheEvolvingWebANCHOR" name="TheEvolvingWebTOC">The Evolving Web</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BibliographyANCHOR" name="BibliographyTOC">Bibliography</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">August 5 - 8, 2014</div>
         <div class="singletermTERMS">alex@milowski.com</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">balisage-2009</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2014</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">custom-elements</div>
         <div class="singletermTERMS">createdCallback</div>
         <div class="singletermTERMS">content</div>
         <div class="singletermTERMS">Custom Elements</div>
         <div class="singletermTERMS">Custom Elements</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">db-para</div>
         <div class="singletermTERMS">db-programlisting</div>
         <div class="singletermTERMS">db-figure</div>
         <div class="singletermTERMS">document.currentScript.ownerDocument</div>
         <div class="singletermTERMS">db-</div>
         <div class="singletermTERMS">db-article</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">Enable experimental Web Platform features</div>
         <div class="singletermTERMS">Enable HTML Imports</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
         <div class="singletermTERMS">github / alexmilowski / db-component</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">html5</div>
         <div class="singletermTERMS">highlightjs</div>
         <div class="singletermTERMS">html-imports</div>
         <div class="singletermTERMS">HTMLParagraphElement</div>
         <div class="singletermTERMS">HTMLUnknownElement</div>
         <div class="singletermTERMS">HTMLPreElement.prototype</div>
         <div class="singletermTERMS">highlight.js</div>
         <div class="singletermTERMS">HTMLAnchorElement</div>
         <div class="singletermTERMS">href</div>
         <div class="singletermTERMS">https://github.com/polymer</div>
         <div class="singletermTERMS">HTML import aware</div>
         <div class="singletermTERMS">HTML5</div>
         <div class="singletermTERMS">highlight.js</div>
         <div class="singletermTERMS">HTML Imports</div>
         <div class="singletermTERMS">highlight.js</div>
         <div class="singletermTERMS">HTML Imports</div>
         <div class="singletermTERMS">HTML Templates</div>
         <div class="singletermTERMS">how browsers actually work</div>
         <div class="singletermTERMS">href="wrapper.xhtml"</div>
         <div class="singletermTERMS">href="db-content.xsl"</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">import</div>
         <div class="singletermTERMS">in situ</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">link</div>
         <div class="singletermTERMS">Last Call</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">mathjax</div>
         <div class="singletermTERMS">MathJax</div>
         <div class="singletermTERMS">match="h:content"</div>
         <div class="singletermTERMS">Miłowski</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">norman.walsh@marklogic.com</div>
         <div class="singletermTERMS">Norman</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">Open Web Platform</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">platform</div>
         <div class="singletermTERMS">pre</div>
         <div class="singletermTERMS">polyfill</div>
         <div class="singletermTERMS">Prague Compromise</div>
         <div class="singletermTERMS">Polymer Project</div>
         <div class="singletermTERMS">prefix</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">rdfa</div>
         <div class="singletermTERMS">rel</div>
         <div class="singletermTERMS">RDFa Core 1.1</div>
         <div class="singletermTERMS">R. Alexander</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">shadowdom</div>
         <div class="singletermTERMS">select</div>
         <div class="singletermTERMS">Shadow DOM</div>
         <div class="singletermTERMS">Shadow DOM</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">this</div>
         <div class="singletermTERMS">template</div>
         <div class="singletermTERMS">typeof</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
         <div class="singletermTERMS">very normal</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">xproc</div>
         <div class="singletermTERMS">XML in the Browser: the Next Decade</div>
         <div class="singletermTERMS">XProc: An XML Pipeline Language</div>
         <div class="singletermTERMS">XML in the Browser: the Next Decade</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="HowtosurvivethecomingnamespacewinterANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3">
      <div class="title e1">How to survive the coming namespace winter</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2014</div>
            <div class="confdates e5">August 5 - 8, 2014</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">Is XML condemned to be an orphaned syntax with a dimly lit future within the Web
               browser? What can information providers with rich sources of XML do, other than
               down-translate to HTML? The evolving Web Components environment may provide a solution!
               With some simple translations, stylesheets and scripts, it will be possible to wrap
               custom XML in a minimum amount of HTML and serve it over the Web. The browsers will
               never know they’re being tricked into delivering XML.
            </div>
         </div>
         <div class="author e8">
            <div class="personname e9">
               <div class="firstname e10">R. Alexander</div>
               <div class="surname e11">Miłowski</div>
            </div>
            <div class="personblurb e12">
               <div class="para e13"></div>
            </div>
            <div class="affiliation e14">
               <div class="orgname e15">University of Edinburgh, School of Informatics</div>
            </div>
            <div class="email e16">alex@milowski.com</div>
         </div>
         <div class="author e17">
            <div class="personname e18">
               <div class="firstname e19">Norman</div>
               <div class="surname e20">Walsh</div>
            </div>
            <div class="personblurb e21">
               <div class="para e22"></div>
            </div>
            <div class="affiliation e23">
               <div class="orgname e24">MarkLogic Corporation</div>
            </div>
            <div class="email e25">norman.walsh@marklogic.com</div>
         </div>
         <div class="legalnotice e26">
            <div class="para e27">Copyright © 2014 R. Alexander Miłowski and Norman Walsh</div>
         </div>
      </div>
      <div class="popupBox e28">
         <div class="popupLabel" onmouseover="$('#d1e42').show('1000');" onmouseout="$('#d1e42').hide('1000');">[ blockquote ]</div>
         <div id="d1e42" style="display: none;">
            <div class="blockquote">
               <div class="para e29">It was a late night, again, at XML Prague, and Norm Walsh,
                  John Snelson, Charles Greer, and I were walking along attempting
                  to find dinner. We had been discussing the Web Components
                  session that had occurred earlier in the day. We expressed our
                  dismay and depression that we couldn't just have XML. Then it
                  occurred to us, like a light being turned on (or being
                  whacked on the back of the head with a ruler), Web Components
                  are just markup and pretty close to XML. All we needed to do was
                  use a hypen rather than a colon, and all was well. It is a
                  compromise and likely the best we will get anytime soon. We get
                  to put our own pointy brackets into the browser and give it
                  semantics—accept it and move on.
               </div>
               <div class="attribution e30">Alex Miłowski recounting XML Prague 2014</div>
            </div>
         </div>
      </div><a name="ForwardfromFailureANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e31">
         <div class="title e32">Forward from Failure</div>
         <div class="para e33">A publisher that has a large amount of information in XML documents has little
            recourse in today's world but to transform this information into HTML for delivery
            on the
            Web or within EPUB ebooks. The ability for the common Web browser to load and process
            XML
            information, with similar processing semantics to HTML, isn't available; links will
            not be
            identified, styles and local transformations are fraught with problems, media will
            not be
            loaded or rendered, and scripts will not execute to provide extensible behaviors.
         </div>
         <div class="para e34">At the 2009 Balisage Conference, in 
            <div class="emphasis e35" role="ital">XML in the Browser: the Next
               Decade
            </div>
            
            <div class="citation e36">balisage-2009</div>, Miłowski enumerated the issues with delivering XML to
            the browser and many, if not all, of those issues remain unsolved in 2014. The various
            browser vendors have since all but abandoned processing XML except as a legacy format.
            In
            many ways, it only remains as a serialization format for HTML5 
            <div class="citation e37">html5</div>
            and as a mechanism for receiving data within a Web application.
         </div>
         <div class="para e38">It was argued that there are intrinsic and non-intrinsic formats for the Web.  In
            terms
            of markup languages, HTML, SVG, and MathML were identified as the triad of intrinsic
            markup
            languages.  This assessment is somewhat validated by the integration of SVG and MathML
            into
            the HTML5 specification.
         </div>
         <div class="para e39">This leaves generic XML as an orphaned syntax with dimly lit future within the Web
            browser. If the writings on the walls of various mailing lists are any indication,
            there is
            a strong desire for less or complete removal of the native XML processing that remains
            within the browser. While current applications and backlash have prevented such removal,
            the days of XML in the browser feel numbered.
         </div>
         <div class="para e40">Meanwhile, XML has served a purpose for many information publishers. Tag sets, both
            custom and standardized, have been developed to encode enormous amounts of data. Within
            enterprises, processing pipelines that produce, validate, manipulate, and otherwise
            consume
            this data have had their benefits. It has become 
            <div class="emphasis e41">very normal</div> to
            transform these documents into the appropriate HTML markup for delivery to whatever
            consumer is on the other end of that HTTP connection.
         </div>
         <div class="para e42">Yet, as Web developers and browser vendors seem to be moving away from custom markup,
            they seem to realize they are missing something.  Making the 
            <div class="emphasis e43" role="ital">Open Web
               Platform
            </div> extensible means that behaviors that need to accompany information
            need to packaged as reusable components.  That is, information needs to have markup
            that
            identifies it as a specific kind of information whose scripts, templates, and styling
            are
            identifiable and loadable over the Web.
         </div>
      </div><a name="HyphenstotheRescueANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e44">
         <div class="title e45">Hyphens to the Rescue</div>
         <div class="para e46">Once the desire for extensible markup, outside of the direct control of either the
            W3C
            or browser vendors, was recognized, the concept of custom elements was introduced
            and
            eventually formalized 
            <div class="citation e47">custom-elements</div>. For HTML parsing purposes, the
            essential distinction is that a custom element's name contains a hyphen—not a colon.
            This
            allows custom element names to be distinguished from those within HTML itself and
            the only
            notable exceptions are the handful of element names in SVG and MathML that contain
            a
            hyphen.
         </div>
         <div class="para e48">In common usage, custom elements of the same origin share a common
            
            <div class="emphasis e49">prefix</div> followed by a hyphen (see 
            <div class="xref e50" linkend="custom-ex"></div>). That
            prefix currently has no registration or association with any URI. As such, it is unlike
            XML
            namespace prefixes which must be declared before being used.
         </div>
         <div class="figure e51" xml:id="custom-ex">
            <div class="title e52">Custom Element Example</div>
            <div class="programlisting e53" xml:space="preserve">&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
               &lt;head&gt;...&lt;/head&gt;
               &lt;body&gt;
               
               <div class="emphasis e54" role="bold">&lt;db-article version="5.0"&gt;</div>
               
               <div class="emphasis e55" role="bold">&lt;db-title&gt;</div>Foreshadowing
               <div class="emphasis e56" role="bold">&lt;/db-title&gt;</div>
               
               <div class="emphasis e57" role="bold">&lt;db-section&gt;</div>
               
               <div class="emphasis e58" role="bold">&lt;db-title&gt;</div>Wondering
               <div class="emphasis e59" role="bold">&lt;/db-title&gt;</div>
               
               <div class="emphasis e60" role="bold">&lt;db-para&gt;</div>I wonder where is this paper is going?
               <div class="emphasis e61" role="bold">&lt;/db-para&gt;</div>
               
               <div class="emphasis e62" role="bold">&lt;/db-section&gt;</div>
               
               <div class="emphasis e63" role="bold">&lt;/db-article&gt;</div>
               &lt;/body&gt;
               &lt;/html&gt; 
            </div>
         </div>
         <div class="para e64">The use of custom elements goes beyond just syntax as it also provides an API for
            registering behaviors with the browser for the markup. During parsing, the DOM construction
            process assigns certain classes to recognized markup (e.g.
            
            <div class="code e65">HTMLParagraphElement</div> is used for the 
            <div class="code e66">p</div> element). When an
            unrecognized element is encountered (i.e. a custom element), it is initially constructed
            as
            
            <div class="code e67">HTMLUnknownElement</div>.
         </div>
         <div class="para e68">A script can register with the document a prototype that defines a new behavior or
            assigns an existing HTML behavior to a custom element. For example, the
            
            <div class="code e69">db-para</div> could simply be registered as an HTML paragraph as shown in 
            <div class="xref e70" linkend="register-ex"></div>. The DOM object for the element is subsequently replaced with a
            new instance of the appropriate type and the behaviors of that element are now
            accessible.
         </div>
         <div class="figure e71" xml:id="register-ex">
            <div class="title e72">Registering a Custom Element</div>
            <div class="programlisting e73" xml:space="preserve">document.register("db-para",{ prototype: HTMLParagraphElement.prototype });
               document.register("db-title",{ prototype: HTMLHeadingElement.prototype });
               document.register("db-programlisting",{ prototype: HTMLPreElement.prototype });
            </div>
         </div>
         <div class="para e74">In simple cases, an element registered as a custom element with one of the available
            HTML prototypes inherits some of the custom behaviors. In testing, it is unlikely
            that
            default styling will automatically be applied (e.g. using
            
            <div class="code e75">HTMLPreElement.prototype</div> doesn't guarantee 
            <div class="code e76">pre</div> element
            styling). Yet, in some cases, styling does occur and so the behavior is inconsistent
            and
            seems to be implementation defined.  One can imagine that a consistent, reliable behavior
            is the goal and this will sort itself with time.
         </div>
         <div class="para e77">Moreover, registration can go far beyond such simple associations of name to pre-defined
            prototypes. A script can register a custom prototype to provide specific behaviors.
            The
            prototype provided must contain a function via a 
            <div class="code e78">createdCallback</div> property that
            will perform any additional initialization of the element. Other similar mechanism
            are
            available for maintaining the element throughout its life cycle.
         </div>
         <div class="para e79">For example, in 
            <div class="xref e80" linkend="highlight-ex"></div>, the callback applies a JavaScript-based
            syntax highlighter (
            <div class="emphasis e81" role="ital">highlight.js</div>
            
            <div class="citation e82">highlightjs</div>) to the contents of the element. Once the element is
            re-created within the DOM with this prototype, the callback function executes with
            the
            value of 
            <div class="code e83">this</div> assigned to the element. In this particular example, this means
            the 
            <div class="code e84">db-programlisting</div> element is constructed with the prototype and the
            callback adds the syntax highlighting.
         </div>
         <div class="figure e85" xml:id="highlight-ex">
            <div class="title e86">Auto-highlighting Code</div>
            <div class="programlisting e87" xml:space="preserve">document.registerElement(
               "db-programlisting",
               { prototype:  
               Object.create(HTMLPreElement.prototype, {
               createdCallback: {
               value: function() {
               hljs.highlightBlock(this);
               }
               }
               })
               }
               );
            </div>
         </div>
         <div class="para e88">Often, the structured information of an element doesn't directly match the desired
            rendering.  The use of HTML Templates (part of the HTML5 specification) provides the
            ability to package and use structured layouts for the display of custom elements.
            A
            template is a portion of markup that is wrapped by a 
            <div class="code e89">template</div> element that can
            be used to construct new content programmatically. One main use for templating is
            to avoid
            manual construction of elements by either parsing or direct DOM method calls.
         </div>
         <div class="para e90">For example, in 
            <div class="xref e91" linkend="reordering-ex"></div>, the template for a figure is listed.
            The 
            <div class="code e92">content</div> element specifies where contained content should be placed. In
            this example, the 
            <div class="code e93">select</div> attribute is used to specify which child elements
            should be used. The result of this example is reordering the children of
            
            <div class="code e94">db-figure</div> so that the title is last.
         </div>
         <div class="figure e95" xml:id="reordering-ex">
            <div class="title e96">Reordering via Templates</div>
            <div class="programlisting e97" xml:space="preserve">&lt;template id="db-figure"&gt;
               &lt;content select="db-mediaobject"&gt;&lt;/content&gt;
               &lt;content select="db-title"&gt;&lt;/content&gt;
               &lt;/template&gt;
            </div>
         </div>
         <div class="para e98">The registered prototype must use the template and the 
            <div class="emphasis e99" role="ital">Shadow DOM</div>
            
            <div class="citation e100">shadowdom</div> to affect the rendering of the element. The Shadow DOM
            provides the ability to create a rendering based on elements not shown to the user.
            When
            the user inspects the displayed element (or its source), they will only see the custom
            element. Inside the browser, a "shadow element" is used to structure and render the
            same
            information where the shadow element is only accessible via scripting or styling embedded
            within the template.
         </div>
         <div class="para e101">An example of using a template for the 
            <div class="code e102">db-figure</div> element is shown in 
            <div class="xref e103" linkend="using-templates"></div>. The callback constructs a Shadow DOM for the current
            element and appends content. The content is structured via the template shown in 
            <div class="xref e104" linkend="reordering-ex"></div>. The consequence is the current sub-tree for
            
            <div class="code e105">db-figure</div> is rendered using the newly constructed Shadow DOM.
         </div>
         <div class="figure e106" xml:id="using-templates">
            <div class="title e107">Using Templates</div>
            <div class="programlisting e108" xml:space="preserve">var componentDocument = document.currentScript.ownerDocument;
               document.registerElement(
               "db-figure",
               { prototype:  
               Object.create(HTMLDivElement.prototype, {
               createdCallback: {
               value: function() {
               var t = componentDocument.getElementById("db-figure");
               var clone = document.importNode(t.content, true);
               this.createShadowRoot().appendChild(clone);
               }
               }
               })
               }
               );
            </div>
         </div>
         <div class="para e109">Finally, we can package our script, templates, and any styling via 
            <div class="emphasis e110" role="ital">HTML
               Imports
            </div>
            
            <div class="citation e111">html-imports</div>.  The imported document is simply another HTML document
            whose scripts, styles, and templates become available to the current document.  The
            import
            is invoked by a simple 
            <div class="code e112">link</div> element with 
            <div class="code e113">rel</div> attribute value of
            
            <div class="quote e114">
               <div class="code e115">import</div>
            </div> in the importing document (see 
            <div class="xref e116" linkend="import-ex"></div>).
         </div>
         <div class="para e117">The imported document packages the Web Component by linking to the necessary scripts
            and
            stylesheets while containing any templates that are used by those scripts. The example
            in
            
            <div class="xref e118" linkend="packaged-ex"></div> shows the structure used to package the previous examples.
            The scripts and stylesheets for the highlighter are included using the same mechanism
            already known to Web developers.
         </div>
         <div class="para e119">As a nuance, the script registering the custom elements and the templates are in
            collusion within this imported document.  At the very start of the example in 
            <div class="xref e120" linkend="using-templates"></div>, the expression
            
            <div class="code e121">document.currentScript.ownerDocument</div> is used to obtain the correct document
            for retrieving the templates.  If the component is packaged differently, retrieving
            the
            template might be more difficult or impossible.
         </div>
         <div class="figure e122" xml:id="import-ex">
            <div class="title e123">Importing a Document</div>
            <div class="programlisting e124" xml:space="preserve">&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
               &lt;head&gt;
               &lt;link rel="import" href="db-component.xhtml"/&gt;
               &lt;/head&gt;
               &lt;body&gt;
               ...
               &lt;/body&gt;
               &lt;/html&gt;
            </div>
         </div>
         <div class="figure e125" xml:id="packaged-ex">
            <div class="title e126">Packaged Component</div>
            <div class="programlisting e127" xml:space="preserve">&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
               &lt;head&gt;
               &lt;title&gt;DocBook Component&lt;/title&gt;
               &lt;link rel="stylesheet" type="text/css" href="db-component.css"/&gt;
               &lt;link rel="stylesheet" href="http://yandex.st/highlightjs/8.0/styles/default.min.css"/&gt;
               &lt;script type="text/javascript" 
               src="http://yandex.st/highlightjs/8.0/highlight.min.js"&gt;&lt;/script&gt;
               &lt;/head&gt;
               &lt;body&gt;
               &lt;template id="db-article"&gt;
               ...
               &lt;/template&gt;
               ...
               &lt;/body&gt;
               &lt;/html&gt;
            </div>
         </div>
         <div class="para e128">In summary, Web Components relies on four essential features:</div>
         <div class="orderedlist e129">
            <div class="listitem e130">
               <div class="para e131">
                  <div class="emphasis e132" role="ital">Custom Elements</div> — a specification that is in 
                  <div class="quote e133">Last
                     Call
                  </div> and may enter CR in 2014.
               </div>
            </div>
            <div class="listitem e134">
               <div class="para e135">
                  <div class="emphasis e136" role="ital">HTML Templates</div> — part of HTML5 (see 
                  <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e137" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/html/scripting-1.html#the-template-element" xlink:show="new" xlink:type="simple">§4.12.3 The template element</div>) that is in CR as of February 04,
                  2014.
               </div>
            </div>
            <div class="listitem e138">
               <div class="para e139">
                  <div class="emphasis e140" role="ital">Shadow DOM</div> — a specification that is a working
                  draft.
               </div>
            </div>
            <div class="listitem e141">
               <div class="para e142">
                  <div class="emphasis e143" role="ital">HTML Imports</div> — a specification that is a working draft and
                  volatile.
               </div>
            </div>
         </div>
      </div><a name="Pandora'sBox?ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e144">
         <div class="title e145">Pandora's Box?</div>
         <div class="para e146">As the features of Web Components coalesce and become part of the commonly deployed
            browser, there is little anyone can do to prevent their use. An author can simply
            import a
            Web Component of their choice, custom or shared, and the browser can do little more
            than
            execute the associated semantics within the bounds of the Open Web Platform. That
            allows
            anyone to develop custom markup to encapsulate their information in much the same
            way was
            hoped for with XML.
         </div>
         <div class="para e147">There are two notable differences between now (2014) and 1998:</div>
         <div class="orderedlist e148">
            <div class="listitem e149">
               <div class="para e150">The browser, as a component of the Open Web Platform, is much more stable,
                  technologically advanced, and well understood.
               </div>
            </div>
            <div class="listitem e151">
               <div class="para e152">Web Components utilize the Open Web Platform to package semantics in a much more
                  extensive way that is compatible with 
                  <div class="emphasis e153">how browsers actually
                     work
                  </div>.
               </div>
            </div>
         </div>
         <div class="para e154">An unscientific look at the current opinions of the use of Web Components indicates
            it
            may become hugely popular. While only time will actually determine the outcome, the
            Shadow
            DOM and HTML Templates are very useful. Accessing them within Custom Elements provides
            needed encapsulation to Web applications and so their intended use in that context
            makes a
            lot of sense.
         </div>
         <div class="para e155">Yet, we don't have to use Web Components to package semantics for custom markup that
            is
            limited to specialized uses. That is, with relative ease, we can transliterate whole
            XML
            documents into custom elements, wrap them with a few lines of HTML markup, and the
            browser
            will load and process the custom elements as specified. Is this abuse, a practice
            that
            isn't recommended, or should a thousand custom elements bloom?
         </div>
         <div class="para e156">Let's open Pandora's box and see whether what is inside is truly evil. We will take
            DocBook, a known vocabulary for documents (books, articles, etc.), and turn the markup
            into
            a set of Web Components. We will demonstrate how easy the transliteration is to perform
            and
            show a few interesting results.
         </div>
      </div><a name="TheDocBookWebComponentANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e157">
         <div class="title e158">The DocBook Web Component</div>
         <div class="para e159">Turning any arbitrary XML document into an HTML document as a Web Component requires
            on
            three essential steps:
         </div>
         <div class="orderedlist e160">
            <div class="listitem e161">
               <div class="para e162">Prefix every element with a constant prefix and hyphen that can be associated with
                  the element's namespace.
               </div>
            </div>
            <div class="listitem e163">
               <div class="para e164">Develop stylesheets, templates, and scripts that encapsulate the desired
                  behavior.
               </div>
            </div>
            <div class="listitem e165">
               <div class="para e166">Wrap the document in the minimum amount of HTML bootstrapping necessary to deliver
                  the Web Component to the browser.
               </div>
            </div>
         </div>
         <div class="figure e167" xml:id="transform-xproc">
            <div class="title e168">Transformation Pipeline</div>
            <div class="programlisting e169" xml:space="preserve">&lt;p:declare-step xmlns:p="http://www.w3.org/ns/xproc"
               xmlns:h="http://www.w3.org/1999/xhtml"
               version="1.0"
               name="top"&gt;
               
               &lt;p:input port="source"/&gt;
               &lt;p:output port="result"/&gt;
               
               &lt;!-- directly process the wrapper and replace the content
               element with the translated DocBook elements --&gt;
               &lt;p:viewport 
               <div class="emphasis e170">match="h:content"</div>&gt;
               &lt;p:viewport-source&gt;
               &lt;p:document 
               <div class="emphasis e171">href="wrapper.xhtml"</div>/&gt;
               &lt;/p:viewport-source&gt;
               
               &lt;!-- transliterate the DocBook elements --&gt;
               &lt;p:xslt&gt;
               &lt;p:input port="source"&gt;
               &lt;p:pipe port="source" step="top"/&gt;
               &lt;/p:input&gt;
               &lt;p:input port="parameters"&gt;&lt;p:empty/&gt;&lt;/p:input&gt;
               &lt;p:input port="stylesheet"&gt;
               &lt;p:document 
               <div class="emphasis e172">href="db-content.xsl"</div>/&gt;
               &lt;/p:input&gt;
               &lt;/p:xslt&gt;
               
               &lt;/p:viewport&gt;
               
               &lt;/p:declare-step&gt;
            </div>
         </div>
         <div class="para e173">For example, in the specific case of DocBook, we would do the follow:</div>
         <div class="orderedlist e174">
            <div class="listitem e175">
               <div class="para e176">Transform the document by changing every DocBook element name to a name with
                  
                  <div class="quote e177">
                     <div class="code e178">db-</div>
                  </div> prefix with no namespace. Also, copy any MathML
                  or SVG to the output and pay specific attention to the serialization (HTML without
                  a
                  namespace or XHTML with a namespace). 
               </div>
            </div>
            <div class="listitem e179">
               <div class="para e180">Implement Web Components for common constructions like xref,
                  mediaobject/imageobject/imagedata, link, etc. and develop CSS stylesheets for the
                  rest. Package this component as a single document (see 
                  <div class="xref e181" linkend="packaged-ex"></div>).
               </div>
            </div>
            <div class="listitem e182">
               <div class="para e183">Wrap the document in the minimum markup (see 
                  <div class="xref e184" linkend="import-ex"></div>).
               </div>
            </div>
         </div>
         <div class="para e185">In addition, we'd like to retain some aspect of identity of the namespace from the
            original XML. To do so, we will add an RDFa 
            <div class="citation e186">rdfa</div>
            
            <div class="code e187">typeof</div> attribute on the root element whose value is the namespace URI. This
            will allow a consuming application to identify the custom element by type rather than
            a
            fixed prefix. Hence, on the root custom element for DocBook (e.g. 
            <div class="code e188">db-article</div>),
            a 
            <div class="code e189">typeof</div> attribute will contain the value
            
            <div class="quote e190">
               <div class="code e191">http://docbook.org/ns/docbook</div>
            </div>.
         </div>
         <div class="para e192">This process was implemented using the simple XProc 
            <div class="citation e193">xproc</div> pipeline
            shown in 
            <div class="xref e194" linkend="transform-xproc"></div> where the transformed document is inserted in
            the wrapper (see 
            <div class="xref e195" linkend="wrapper"></div>) as a replacement for the 
            <div class="code e196">content</div>
            element. The transformation is simply a set of renaming rules with the main two rules
            shown
            in 
            <div class="xref e197" linkend="main-xslt"></div>.
         </div>
         <div class="figure e198" xml:id="wrapper">
            <div class="title e199">Wrapper Document</div>
            <div class="programlisting e200" xml:space="preserve">&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
               &lt;head&gt;
               &lt;link rel="import" href="db-component.xhtml"/&gt;
               &lt;/head&gt;
               &lt;body&gt;
               &lt;content/&gt;
               &lt;/body&gt;
               &lt;/html&gt;
            </div>
         </div>
         <div class="figure e201" xml:id="main-xslt">
            <div class="title e202">Main XSLT Rules</div>
            <div class="programlisting e203" xml:space="preserve">&lt;xsl:template match="/db:*"&gt;
               &lt;xsl:element name="db-{local-name()}" namespace="http://www.w3.org/1999/xhtml"&gt;
               &lt;xsl:attribute name="typeof"&gt;&lt;xsl:value-of select="namespace-uri()"/&gt;&lt;/xsl:attribute&gt;
               &lt;xsl:apply-templates select="@*|node()"/&gt;
               &lt;/xsl:element&gt;
               &lt;/xsl:template&gt;
               
               &lt;xsl:template match="db:*"&gt;
               &lt;xsl:element name="db-{local-name()}" namespace="http://www.w3.org/1999/xhtml"&gt;
               &lt;xsl:apply-templates select="@*|node()"/&gt;
               &lt;/xsl:element&gt;
               &lt;/xsl:template&gt;
            </div>
         </div>
         <div class="para e204">In terms of what these custom elements might provide to a user, some behaviors for
            DocBook that require scripting are:
         </div>
         <div class="itemizedlist e205">
            <div class="listitem e206">
               <div class="para e207">Links (e.g. link or xref).</div>
            </div>
            <div class="listitem e208">
               <div class="para e209">Auto-numbering of sections, figures, etc.</div>
            </div>
            <div class="listitem e210">
               <div class="para e211">Display of media objects (e.g. imageobject/imagedata).</div>
            </div>
            <div class="listitem e212">
               <div class="para e213">Generated text for cross references (e.g. turn xref into "Figure 2.1 ...").</div>
            </div>
            <div class="listitem e214">
               <div class="para e215">Auto-generation of a table of contents and other navigation.</div>
            </div>
            <div class="listitem e216">
               <div class="para e217">Syntax highlighting in programlistings and other code.</div>
            </div>
         </div>
         <div class="para e218">These features were implemented
            <div class="popupBox e219">
               <div class="popupLabel" onmouseover="$('#d1e444').show('1000');" onmouseout="$('#d1e444').hide('1000');">[ footnote ]</div>
               <div id="d1e444" style="display: none;">
                  <div class="footnote" xml:id="github-fn">
                     <div class="para e220">The implementation is available at 
                        <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e221" xlink:actuate="onRequest" xlink:href="https://github.com/alexmilowski/db-component" xlink:show="new" xlink:type="simple">github / alexmilowski /
                           db-component
                        </div>.
                     </div>
                  </div>
               </div>
            </div> and tested in Chrome (the only browser currently implementing Web
            Components
            <div class="popupBox e222">
               <div class="popupLabel" onmouseover="$('#d1e451').show('1000');" onmouseout="$('#d1e451').hide('1000');">[ footnote ]</div>
               <div id="d1e451" style="display: none;">
                  <div class="footnote" xml:id="flags-fn">
                     <div class="para e223">It is necessary to turn on experimental features in Chrome to use Web Components.
                        The flags that need to be enabled are: 
                        <div class="itemizedlist e224">
                           <div class="listitem e225">
                              <div class="para e226">
                                 <div class="emphasis e227" role="ital">Enable experimental Web Platform
                                    features
                                 </div> - required for Custom Elements and the Shadow
                                 DOM.
                              </div>
                           </div>
                           <div class="listitem e228">
                              <div class="para e229">
                                 <div class="emphasis e230" role="ital">Enable HTML Imports</div> - required to use
                                 imports for importing the component definitions and various code or
                                 stylesheets.
                              </div>
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
            </div>). In total, the implementation was 235 lines of JavaScript, 76 lines of CSS,
            and a 67 line HTML document with none of these resources having been compressed or
            otherwise optimized. The implementation also includes 
            <div class="code e231">highlight.js</div> via the
            HTML import and programmatically adds MathJax 
            <div class="citation e232">mathjax</div> for rendering
            MathML.
         </div>
         <div class="para e233">At present, there are some notable issues implementing a set of Web Components and
            using
            HTML Imports:
         </div>
         <div class="itemizedlist e234">
            <div class="listitem e235">
               <div class="para e236">MathJax was not able to be included via the import. The method it uses to
                  determine the base URI cannot find the script reference in the imported document.
                  MathJax isn't 
                  <div class="quote e237">HTML import aware</div> at this point in time. As such,
                  MathJax added scripts and stylesheets aren't hidden in the imported document but,
                  instead, are programmatically added to the importing document.
               </div>
            </div>
            <div class="listitem e238">
               <div class="para e239">Implementing links was harder than expected. Just associating the prototype
                  
                  <div class="code e240">HTMLAnchorElement</div> with the element does not induce some minimal
                  linking behavior. Further, using a template that wraps the content with an HTML
                  anchor in the Shadow DOM is more complicate as there is no way to automatically copy
                  attributes (e.g. the URI in the 
                  <div class="code e241">href</div> attribute) and some default
                  behaviors (e.g. a mouse pointer) aren't automatic. Further, clicking had no effect
                  and a custom event handler had to be added.
               </div>
            </div>
            <div class="listitem e242">
               <div class="para e243">The division between the stylesheet within each template and the overall
                  stylesheet is a bit tricky.
               </div>
            </div>
            <div class="listitem e244">
               <div class="para e245">There is a lot more to be done to handle the full life cycle of the elements. That
                  is, if other scripts manipulate the custom elements 
                  <div class="emphasis e246" role="ital">in
                     situ
                  </div>, the components (e.g. the auto-generated navigation) may need
                  to update themselves.
               </div>
            </div>
         </div>
         <div class="para e247">Web components can also be used within other browsers by using the Polymer Platform
            
            <div class="quote e248">polyfill</div>
            
            <div class="citation e249">platform</div>. This JavaScript library provides implementations of various
            Web Components specifications for the Firefox, Safari, and IE browsers. Unfortunately,
            at
            this time (July 2014), this library fails to work with the DocBook example:
         </div>
         <div class="itemizedlist e250">
            <div class="listitem e251">
               <div class="para e252">Firefox crashes almost immediately.  This seems to have something to do with the
                  generation of the table of contents navigation.
               </div>
            </div>
            <div class="listitem e253">
               <div class="para e254">Safari fails with an JavaScript error.</div>
            </div>
         </div>
      </div><a name="TheEvolvingWebANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e255">
         <div class="title e256">The Evolving Web</div>
         <div class="para e257">Web Components is a promising technology for delivering packaged semantics for general
            markup.  It succeeds in many places where previous attempts with XML in the browser
            have
            failed.  That it is somewhat of a reality today is ever more exciting.
         </div>
         <div class="para e258">Yet, the mechanisms for which a browser or resource consumer can recognize the use
            of a
            particular set of custom elements is fraught with problems. The inability to identify
            the
            prefix used in constructing the element names, associate that prefix with some URI,
            or to
            protect content from collisions with other custom elements is going to be an immediately
            painful experience. Authors and publishers will want to mix content from different
            sources
            outside of their control and custom elements will make that increasingly harder.
         </div>
         <div class="para e259">XML has a partial solution for identifying and uniquely naming elements to avoid
            collisions. Yet, that solution allows arbitrary complexity without sufficient gains
            in
            functionality and was rejected by many in the various Web developer communities. Yet,
            one
            can't help but feel like a colon was swapped for a hyphen and we lost something in
            the
            exchange.
         </div>
         <div class="para e260">In the end, Web Components lets us deliver XML documents, transliterated, and packaged
            with their semantics. The mechanisms of the Shadow DOM and scripting allow the markup
            used
            for rendering to have a interactive and integrated mechanism for live manipulation
            within
            the browser. HTML imports and templates enabling packaging of these semantics into
            a single
            resource.
         </div>
         <div class="para e261">Even though Web Components, HTML5, and scripting isn't necessarily how we all may
            have
            imagined XML on the Web in 1998, their combination is sufficient to accomplish real
            work
            with markup within the Open Web Platform. The Web has evolved and XML may be evolving
            along
            with it. It is a reality that we affectionately call the 
            <div class="quote e262">Prague
               Compromise
            </div>.
         </div>
         <div class="popupBox e263">
            <div class="popupLabel" onmouseover="$('#d1e530').show('1000');" onmouseout="$('#d1e530').hide('1000');">[ blockquote ]</div>
            <div id="d1e530" style="display: none;">
               <div class="blockquote">
                  <div class="para e264">He put on his skis, straightened himself up, and remained standing there for some
                     time; as he pulled on his mittens he took one glance homeward. He could just make
                     out
                     the house in the dim distance. Then the whiteness all around it thickened—rose up
                     in a
                     cloud—seemed to be piling in. ... Perhaps it wasn't so dangerous, after all. The wind
                     had been steady all day, had held in the same quarter, and would probably keep on
                     ...
                     Oh, well—here goes!
                  </div>
                  <div class="para e265">...</div>
                  <div class="para e266">On one of the hillsides stood an old haystack which a settler had left there when
                     he
                     found out that the coarse bottom hay wasn't much good for fodder. One day during the
                     spring after Hans Olsa had died, a troop of young boys were ranging the prairies,
                     in
                     search of some yearling cattle that had gone astray. They came upon the haystack,
                     and
                     stood transfixed. On the west side of the stack sat a man, with his back to the
                     mouldering hay. This was in the middle of a warm day in May, yet the man had two pairs
                     of skis along with him; one pair lay beside him on the ground, the other was tied
                     to his
                     back. He had a heavy stocking cap pulled well down over his forehead, and large mittens
                     on his hands; in each hand he clutched a staff ... To the boys, it looked as though
                     the
                     man were sitting there resting while he waited for better skiing ... His face was
                     ashen
                     and drawn. His eyes were set toward the west.
                  </div>
                  <div class="attribution e267">Giants in the Earth: A Saga of the Prairie, O. E. Rölvaag (1924)</div>
               </div>
            </div>
         </div>
      </div><a name="BibliographyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e268">
         <div class="title e269">Bibliography</div>
         <div class="bibliomixed e270" xml:id="balisage-2009">
            
            <div class="quote e271">XML in the Browser: the Next Decade</div>, R. Alexander Milowski, Balisage: The Markup Conference 2009, 2009-08; see also 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e272" xlink:actuate="onRequest" xlink:href="http://www.balisage.net/Proceedings/vol3/html/Milowski01/BalisageVol3-Milowski01.html" xlink:show="new" xlink:type="simple">http://www.balisage.net/Proceedings/vol3/html/Milowski01/BalisageVol3-Milowski01.html</div>. doi:
            <div class="biblioid doi e273">10.4242/BalisageVol3.Milowski01</div>
            
         </div>
         <div class="bibliomixed e274" xml:id="html5">
            
            <div class="quote e275">HTML5</div>, W3C, 2013-09-06, Robin Berjon, Steve Faulkner, Travis Leithead, Erika Doyle Navara,
            Edward O'Connor, Silvia Pfeiffer, and Ian Hickson; see also 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e276" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/html/" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/html/</div>
            
         </div>
         <div class="bibliomixed e277" xml:id="custom-elements">
            
            <div class="quote e278">Custom Elements</div>, W3C, 2014-04-28, Dimitri Glazkov; see also 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e279" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/custom-elements/" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/custom-elements/</div>
            
         </div>
         <div class="bibliomixed e280" xml:id="highlightjs">
            
            <div class="quote e281">highlight.js</div>, Ivan Sagalaev, Jeremy Hull, Oleg Efimov; see also 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e282" xlink:actuate="onRequest" xlink:href="http://highlightjs.org" xlink:show="new" xlink:type="simple">http://highlightjs.org</div>
            
         </div>
         <div class="bibliomixed e283" xml:id="shadowdom">
            
            <div class="quote e284">Shadow DOM</div>, W3C, 2014-04-25, Dimitri Glazkov; see also 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e285" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/shadow-dom/" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/shadow-dom/</div>
            
         </div>
         <div class="bibliomixed e286" xml:id="html-imports">
            
            <div class="quote e287">HTML Imports</div>, W3C, 2014-03-11, Dimitri Glazkov and Hajime Morrita; see also 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e288" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/html-imports/" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/html-imports/</div>
            
         </div>
         <div class="bibliomixed e289" xml:id="rdfa">
            
            <div class="quote e290">RDFa Core 1.1</div>, W3C, 2012-06-07, Ben Adida, Mark Birbeck, Shane McCarron, and Ivan Herman; see also
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e291" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/rdfa-core/" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/rdfa-core/</div>
            
         </div>
         <div class="bibliomixed e292" xml:id="xproc">
            
            <div class="quote e293">XProc: An XML Pipeline Language</div>, W3C, 2010-05-11, Norman Walsh, Alex Miłowski, and Henry S. Thompson; see also 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e294" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xproc/" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xproc/</div>
            
         </div>
         <div class="bibliomixed e295" xml:id="mathjax">
            
            <div class="quote e296">MathJax</div>, Davide Cervone, Christian Perfect, and Peter Krautzberger; see also 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e297" xlink:actuate="onRequest" xlink:href="http://www.mathjax.org/" xlink:show="new" xlink:type="simple">http://www.mathjax.org/</div>
            
         </div>
         <div class="bibliomixed e298" xml:id="platform">
            
            <div class="quote e299">Polymer Project</div>; see also 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e300" xlink:actuate="onRequest" xlink:href="https://github.com/polymer" xlink:show="new" xlink:type="simple">https://github.com/polymer</div>
            
         </div>
      </div>
   </div>
</div>