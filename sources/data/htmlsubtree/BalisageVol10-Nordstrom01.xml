<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#SemanticProfilingUsingIndirectionANCHOR" name="SemanticProfilingUsingIndirectionTOC">Semantic Profiling Using Indirection</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroANCHOR" name="IntroTOC">Intro</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#DefinitionsANCHOR" name="DefinitionsTOC">Definitions</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TheBasicExampleANCHOR" name="TheBasicExampleTOC">The Basic Example</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#MultipleConditionsANCHOR" name="MultipleConditionsTOC">Multiple Conditions</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#VariableTextANCHOR" name="VariableTextTOC">Variable Text</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ToolsandProcessingANCHOR" name="ToolsandProcessingTOC">Tools and Processing</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#PublishingANCHOR" name="PublishingTOC">Publishing</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#BooleanLogicANCHOR" name="BooleanLogicTOC">Boolean Logic</a></div>
               </div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ButThereAreProblemsANCHOR" name="ButThereAreProblemsTOC">But There Are Problems</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#RenamingValuesANCHOR" name="RenamingValuesTOC">Renaming Values</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ChangingScopeANCHOR" name="ChangingScopeTOC">Changing Scope</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TextContentANCHOR" name="TextContentTOC">Text Content</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#LocalisationANCHOR" name="LocalisationTOC">Localisation</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ABasicSolutionANCHOR" name="ABasicSolutionTOC">A Basic Solution</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#WhyDoWeHaveProblems?ANCHOR" name="WhyDoWeHaveProblems?TOC">Why Do We Have Problems?</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AbstractionLayersANCHOR" name="AbstractionLayersTOC">Abstraction Layers</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#UseURNstoNameFiltersANCHOR" name="UseURNstoNameFiltersTOC">Use URNs to Name Filters</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ProcessingANCHOR" name="ProcessingTOC">Processing</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#EditorANCHOR" name="EditorTOC">Editor</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#VariableTextandLocalisationANCHOR" name="VariableTextandLocalisationTOC">Variable Text and Localisation</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#CombiningProfilesANCHOR" name="CombiningProfilesTOC">Combining Profiles</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#BaseProfilesANCHOR" name="BaseProfilesTOC">Base Profiles</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#AssertionsANCHOR" name="AssertionsTOC">Assertions</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#PublishingANCHOR" name="PublishingTOC">Publishing</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#TheGrammaticalProblemSolvedANCHOR" name="TheGrammaticalProblemSolvedTOC">The Grammatical Problem Solved</a></div>
               </div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#OutoflineProfilingANCHOR" name="OutoflineProfilingTOC">Out-of-line Profiling</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ExtendedProfilingANCHOR" name="ExtendedProfilingTOC">Extended Profiling</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#BasicRequirementsfortheDocumentANCHOR" name="BasicRequirementsfortheDocumentTOC">Basic Requirements for the Document</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#XLinkRolesandTitlesPuttoUseANCHOR" name="XLinkRolesandTitlesPuttoUseTOC">XLink Roles and Titles Put to Use</a></div>
               </div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#OutoflineProcessingANCHOR" name="OutoflineProcessingTOC">Out-of-line Processing</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#EditorANCHOR" name="EditorTOC">Editor</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#SchematronUsesANCHOR" name="SchematronUsesTOC">Schematron Uses</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#VariableTextANCHOR" name="VariableTextTOC">Variable Text</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#TheGrammaticalProblemRevisitedANCHOR" name="TheGrammaticalProblemRevisitedTOC">The Grammatical Problem Revisited</a></div>
               </div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#EndNotesANCHOR" name="EndNotesTOC">End Notes</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#InOrOutOfLine?ANCHOR" name="InOrOutOfLine?TOC">In Or Out Of Line?</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#I'mNotAloneANCHOR" name="I'mNotAloneTOC">I'm Not Alone</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ThankYouANCHOR" name="ThankYouTOC">Thank You</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BibliographyANCHOR" name="BibliographyTOC">Bibliography</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">audience</div>
         <div class="singletermTERMS">arch</div>
         <div class="singletermTERMS">applicability model</div>
         <div class="singletermTERMS">are</div>
         <div class="singletermTERMS">arcs</div>
         <div class="singletermTERMS">audience</div>
         <div class="singletermTERMS">August 6 - 9, 2013</div>
         <div class="singletermTERMS">ari.nordstrom@condesign.se</div>
         <div class="singletermTERMS">Ari</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">boolean="AND"</div>
         <div class="singletermTERMS">B C</div>
         <div class="singletermTERMS">B AND C</div>
         <div class="singletermTERMS">base profile</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2013</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">CDATA</div>
         <div class="singletermTERMS">core</div>
         <div class="singletermTERMS">context</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">D5</div>
         <div class="singletermTERMS">default</div>
         <div class="singletermTERMS">diesel engines</div>
         <div class="singletermTERMS">D Series Diesel Engine</div>
         <div class="singletermTERMS">diesel engine</div>
         <div class="singletermTERMS">D5</div>
         <div class="singletermTERMS">de-DE</div>
         <div class="singletermTERMS">doc.xml</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">extended XLink</div>
         <div class="singletermTERMS">every</div>
         <div class="singletermTERMS">en-GB</div>
         <div class="singletermTERMS">either</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
         <div class="singletermTERMS">Grupp_B</div>
         <div class="singletermTERMS">Grupp_B_Produkt_C</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">id1</div>
         <div class="singletermTERMS">id2</div>
         <div class="singletermTERMS">including</div>
         <div class="singletermTERMS">is</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">LANG-COUNTRY</div>
         <div class="singletermTERMS">locator</div>
         <div class="singletermTERMS">live</div>
         <div class="singletermTERMS">linkbases</div>
         <div class="singletermTERMS">localised</div>
         <div class="singletermTERMS">localisations</div>
         <div class="singletermTERMS">locators</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">multi-ended</div>
         <div class="singletermTERMS">meaning</div>
         <div class="singletermTERMS">must</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">None</div>
         <div class="singletermTERMS">named</div>
         <div class="singletermTERMS">Nordström</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">os</div>
         <div class="singletermTERMS">out-of-line</div>
         <div class="singletermTERMS">out-of-line links</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">profile="A"</div>
         <div class="singletermTERMS">profile="D5"</div>
         <div class="singletermTERMS">profile</div>
         <div class="singletermTERMS">phrase</div>
         <div class="singletermTERMS">PROFILE</div>
         <div class="singletermTERMS">profile="urn:x-profile:a:*:12"</div>
         <div class="singletermTERMS">profile="(A AND NOT(B)) OR (B AND NOT(A))"</div>
         <div class="singletermTERMS">profile="A AND B"</div>
         <div class="singletermTERMS">placed in the physical XML file</div>
         <div class="singletermTERMS">profile</div>
         <div class="singletermTERMS">Platform X</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">role</div>
         <div class="singletermTERMS">roles</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">semantic profile</div>
         <div class="singletermTERMS">semantics</div>
         <div class="singletermTERMS">scope</div>
         <div class="singletermTERMS">schematron</div>
         <div class="singletermTERMS">sv-SE</div>
         <div class="singletermTERMS">S1000D Common Source Database (CSDB)</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">type</div>
         <div class="singletermTERMS">turbo engines</div>
         <div class="singletermTERMS">types</div>
         <div class="singletermTERMS">titles</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
         <div class="singletermTERMS">URN:sv-SE:*</div>
         <div class="singletermTERMS">URN-X</div>
         <div class="singletermTERMS">urn:x-cassis:r1:cos:xplatform:000359:sv-SE:0.12</div>
         <div class="singletermTERMS">user-defined URN</div>
         <div class="singletermTERMS">URN1</div>
         <div class="singletermTERMS">URN2</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
         <div class="singletermTERMS">VERSION</div>
         <div class="singletermTERMS">values</div>
         <div class="singletermTERMS">V1</div>
         <div class="singletermTERMS">V2</div>
         <div class="singletermTERMS">value</div>
         <div class="singletermTERMS">versions</div>
         <div class="singletermTERMS">values</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">X:OPEL</div>
         <div class="singletermTERMS">X:SAAB</div>
         <div class="singletermTERMS">XLink: behavior must go!</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="SemanticProfilingUsingIndirectionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3">
      <div class="title e1">Semantic Profiling Using Indirection</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2013</div>
            <div class="confdates e5">August 6 - 9, 2013</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">Profiling is an often-used XML publishing technique where nodes are marked as
               conditional according to a set of profiles, identified using attribute values as
               filtering conditions. When publishing, the nodes are only included if the publishing
               conditions match the publishing context. The profiles are sometimes also used as
               variables in text content, including the attribute value in the publication.
            </div>
            <div class="para e8">While useful, these techniques have a number of problems. For example, if the
               attribute values need to be changed, the new values usually require converting any
               
               <div class="quote e9">live</div> legacy documentation to the new values, changing the schema,
               stylesheets, etc, and supporting both the old and new profiles will not be possible.
               This paper takes a look at profiling, some of the common problems and suggest ways
               to solve those problems.
            </div>
            <div class="para e10">An abstraction layer solves this. The profile values are not used directly;
               instead they represent a specific 
               <div class="quote e11">semantic profile</div>. The abstraction
               layer can be expressed using URNs that are matched to human-readable values when
               required.
            </div>
            <div class="para e12">A different problem arises when handling XML documents with structures not in our
               control. The document might be from a third party and not be editable directly, or
               use incompatible profiling semantics.
            </div>
            <div class="para e13">These documents can be profiled using 
               <div class="emphasis e14" role="ital">out-of-line</div>
               profiling, describing the conditions outside the document, for example, in an
               extended XLink linkbase listing the nodes and their profiles. XLink, as it turns
               out, is well suited for this.
            </div>
         </div>
         <div class="author e15">
            <div class="personname e16">
               <div class="firstname e17">Ari</div>
               <div class="surname e18">Nordström</div>
            </div>
            <div class="personblurb e19">
               <div class="para e20">Ari Nordström is the resident XML guy at Condesign AB in Göteborg, Sweden. His
                  information structures and solutions are used by Volvo Cars, Ericsson, and many
                  others, with more added every year. His favourite XML specification remains
                  XLink so quite a few of his frequent talks and presentations on XML focus on
                  linking. 
               </div>
               <div class="para e21">Ari spends some of his spare time projecting films at the Draken Cinema in
                  Göteborg, which should explain why he wants to automate cinemas using XML. He
                  now realises it's too late, however.
               </div>
            </div>
            <div class="email e22">ari.nordstrom@condesign.se</div>
         </div>
         <div class="legalnotice e23">
            <div class="para e24">Copyright © Ari Nordström 2013</div>
         </div>
      </div><a name="IntroANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e25" xml:id="section_sb3_nkw_vj">
         <div class="title e26">Intro</div>
         <div class="para e27">Profiling is an often-used XML publishing technique where nodes are marked as
            conditional according to a set of profiles, identified using attribute values as
            filtering conditions. When publishing, the nodes are only included if the publishing
            conditions match the publishing context. The profiles are sometimes also used as
            variables in text content, including the attribute value in the publication.
         </div>
         <div class="para e28">While useful, these techniques have a number of problems. This paper takes a look
            at
            profiling, some of the common problems and suggest ways to solve those problems.
         </div><a name="DefinitionsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e29">
            <div class="title e30">Definitions</div>
            <div class="para e31">Before I begin, let me briefly attempt to define the terminology used in this
               paper. Consider the following markup example:
            </div>
            <div class="programlisting e32" xml:space="preserve">&lt;doc profile="B"&gt;
               &lt;p&gt;Information common to products A, B, and C.&lt;/p&gt;
               &lt;p profile="A"&gt;Information about product A.&lt;/p&gt;
               &lt;p profile="B C"&gt;Information about products B and C.&lt;/p&gt;
               &lt;p profile="B C"&gt;Information about products B and C.&lt;/p&gt;
               &lt;/doc&gt;
               
            </div>
            <div class="para e33">The above is an example document that describes a product with the three product
               variants 
               <div class="quote e34">A</div>, 
               <div class="quote e35">B</div> and 
               <div class="quote e36">C</div>; in other words,
               it's the same basic product (imagine, for example, a diesel-engined car model with
               three different-sized engines) but with three differing configurations.
            </div>
            <div class="para e37">I try to use the following terminology throughout the paper:</div>
            <div class="itemizedlist e38">
               <div class="listitem e39">
                  <div class="para e40">A 
                     <div class="emphasis e41">profile</div> is a set of conditions defining when a node
                     is applicable. The 
                     <div class="code e42">profile="A"</div> attribute in the second
                     
                     <div class="code e43">p</div> element, for example, says that this particular
                     
                     <div class="code e44">p</div> element is applicable for the variant
                     
                     <div class="quote e45">A</div>.
                  </div>
               </div>
               <div class="listitem e46">
                  <div class="para e47">A profile's 
                     <div class="emphasis e48">value</div> is the human-readable condition for
                     a specific profile, there to help a reader identify the condition in the
                     text flow. For example, information that applies to the
                     <div class="quote e49">D5</div>
                     diesel engine might be marked up with 
                     <div class="code e50">profile="D5"</div>.
                  </div>
               </div>
               <div class="listitem e51">
                  <div class="para e52">A profile's 
                     <div class="emphasis e53">semantics</div>, on the other hand, represent
                     the underlying 
                     <div class="emphasis e54">meaning</div> behind the value. The
                     
                     <div class="quote e55">D5</div> diesel engine might be renamed to something very
                     different without changing the semantics of a profile
                     <div class="popupBox e56">
                        <div class="popupLabel" onmouseover="$('#d1e116').show('1000');" onmouseout="$('#d1e116').hide('1000');">[ footnote ]</div>
                        <div id="d1e116" style="display: none;">
                           <div class="footnote">
                              <div class="para e57">This is one of the basic problems with profiling that this paper
                                 attempts to address.
                              </div>
                           </div>
                        </div>
                     </div>. For example, a marketing department might decide to rename it
                     without the engineering department changing a single engine
                     component.
                  </div>
               </div>
               <div class="listitem e58">
                  <div class="para e59">A profiling 
                     <div class="emphasis e60">context</div> is the condition(s) applied to
                     the document when publishing it. In my examples, I try to consistently set
                     that profile in the root element; above, the publishing context is
                     
                     <div class="quote e61">B</div>, which means that only nodes either
                     
                     <div class="emphasis e62">without</div> any profiles or nodes
                     
                     <div class="emphasis e63">including</div> the context profile's value are included
                     in the publication.
                  </div>
               </div>
            </div>
         </div><a name="TheBasicExampleANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e64" xml:id="section_b2h_t4w_vj">
            <div class="title e65">The Basic Example</div>
            <div class="para e66">Consider the following example:</div>
            <div class="programlisting e67" xml:space="preserve">&lt;doc&gt;
               &lt;p&gt;Information common to products A, B, and C.&lt;/p&gt;
               &lt;p profile="A"&gt;Information about product A.&lt;/p&gt;
               &lt;p profile="B"&gt;Information about product B.&lt;/p&gt;
               &lt;p profile="C"&gt;Information about product C.&lt;/p&gt;
               &lt;/doc&gt;
               
            </div>
            <div class="para e68">Three 
               <div class="code e69">p</div> elements are profiled for products 
               <div class="quote e70">A</div>,
               
               <div class="quote e71">B</div>, and 
               <div class="quote e72">C</div>, respectively. A fourth remains
               unprofiled and is therefore always applicable. When publishing, the profile to be
               used could be selected by adding an attribute to the root, like this:
            </div>
            <div class="programlisting e73" xml:space="preserve">&lt;doc profile="A"&gt;
               ...
               &lt;/doc&gt;
            </div>
            <div class="para e74">The 
               <div class="code e75">profile</div> attribute in the root is used as a 
               <div class="emphasis e76" role="ital">context</div> for the publication. Processed, the document would
               become:
            </div>
            <div class="programlisting e77" xml:space="preserve">&lt;doc profile="A"&gt;
               &lt;p&gt;Information common to products A, B, and C.&lt;/p&gt;
               &lt;p profile="A"&gt;Information about product A.&lt;/p&gt;
               &lt;/doc&gt;
            </div>
            <div class="para e78">Multiple profiles can be defined using this principle, of course, separating each
               value with a whitespace character:
            </div>
            <div class="programlisting e79" xml:space="preserve">&lt;doc profile="B"&gt;
               &lt;p&gt;Information common to products A, B, and C.&lt;/p&gt;
               &lt;p profile="A"&gt;Information about product A.&lt;/p&gt;
               &lt;p profile="B C"&gt;Information about products B and C.&lt;/p&gt;
               &lt;p profile="B C"&gt;Information about products B and C.&lt;/p&gt;
               &lt;/doc&gt;
               
            </div>
            <div class="para e80">Here, the last two 
               <div class="code e81">p</div> elements with 
               <div class="quote e82">B C</div> profiles match
               the publishing context, 
               <div class="quote e83">B</div>, assuming OR logic. 
            </div>
            <div class="para e84">Similarly, using 
               <div class="quote e85">B C</div> as context, profiles using 
               <div class="quote e86">B</div>,
               
               <div class="quote e87">C</div>, and 
               <div class="quote e88">B C</div> would be included, again assuming OR
               processing.
            </div>
         </div><a name="MultipleConditionsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e89" xml:id="section-2011-10-28-9-43-5-73568251-6">
            <div class="title e90">Multiple Conditions</div>
            <div class="para e91">It is common to use different attributes for different profiling purposes. There
               might be an attribute 
               <div class="code e92">profile</div> for processing product variants and an
               attribute 
               <div class="code e93">audience</div> for processing content according to intended reader
               category. Here's an example:
            </div>
            <div class="programlisting e94" xml:space="preserve">&lt;doc profile="B" audience="default"&gt;
               &lt;p&gt;Information common to products A, B, and C.&lt;/p&gt;
               &lt;p profile="A"&gt;Information about product A.&lt;/p&gt;
               &lt;p profile="B C" audience="default"&gt;Information about products B and C.&lt;/p&gt;
               &lt;p profile="B C" audience="admin"&gt;Information about products B and C.&lt;/p&gt;
               &lt;/doc&gt;
               
            </div>
            <div class="para e95">Here, the information is filtered in context 
               <div class="quote e96">B</div> and a
               
               <div class="quote e97">default</div> audience, so the last paragraph would be excluded because
               the 
               <div class="code e98">audience</div> attribute doesn't match.
            </div>
            <div class="para e99">A third attribute might be required for processing the intended platform, a fourth
               for differences in diagnostic software, etc. Basically, different attributes would
               be used for differing semantics or when mixing them might prove messy for one reason
               or another.
            </div>
         </div><a name="VariableTextANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e100" xml:id="section-2011-10-28-9-43-5-73568251-2">
            <div class="title e101">Variable Text</div>
            <div class="para e102">Profiles can be used for variable text, like this:</div>
            <div class="programlisting e103" xml:space="preserve">&lt;p&gt;Information about product &lt;phrase profile="A B C"/&gt;.&lt;/p&gt;</div>
            <div class="para e104">Ignoring the linguistic difficulties this construction tends to cause, the idea is
               simple. When processed, the 
               <div class="code e105">phrase</div> element is replaced with the
               context's profile value, 
               <div class="quote e106">A</div>, 
               <div class="quote e107">B</div>, or 
               <div class="quote e108">C</div>. In
               the published document, a more generic text can be replaced with the exact product
               variant.
            </div>
         </div><a name="ToolsandProcessingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e109" xml:id="section-2011-10-28-16-53-21-87065566-">
            <div class="title e110">Tools and Processing</div>
            <div class="para e111">A profile's allowed values are sometimes defined as in enumerated lists to avoid
               user errors. In DITA, for example (see 
               <div class="xref e112" linkend="id-dita"></div>), an audience
               
               <div class="code e113">type</div> attribute includes the following values
               <div class="popupBox e114">
                  <div class="popupLabel" onmouseover="$('#d1e254').show('1000');" onmouseout="$('#d1e254').hide('1000');">[ footnote ]</div>
                  <div id="d1e254" style="display: none;">
                     <div class="footnote">
                        <div class="para e115">The audience construct is more complex than that, but this suffices as an
                           example.
                        </div>
                     </div>
                  </div>
               </div>:
            </div>
            <div class="programlisting e116" xml:space="preserve">&lt;!ATTLIST audience
               type       (user | purchaser |
               administrator | programmer |
               executive | services | other | 
               -dita-use-conref-target)  #IMPLIED
               ... &gt;
            </div>
            <div class="para e117">It follows that adding a new audience will cause problems. For that reason,
               
               <div class="code e118">CDATA</div> constructs are common, as are catch-alls like this:
            </div>
            <div class="programlisting e119" xml:space="preserve">othertype  CDATA  #IMPLIED</div>
            <div class="para e120">This allows for new audience types without having to change the DTD. Here, having
               the authoring software keep track of the allowed values in a database or such is a
               good idea, because someone will almost certainly misspell the new audience type,
               causing problems later. Here's an example from a CMS I sometimes use:
            </div>
            <div class="figure e121" xml:id="figure-2011-10-28-19-44-14-40882030-">
               <div class="mediaobject e122">
                  <div class="imageobject e123">
                     <div class="metaBox e124"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e272').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e272" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e124'
                              </span><span class="metaAttribute">fileref='../../../vol10/graphics/Nordstrom01/Nordstrom01-001.jpg'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e125">The values are fetched from a database. The profile uses two levels, a group
               (
               <div class="quote e126">Grupp_B</div>, above), and products 
               <div class="quote e127">C</div>,
               
               <div class="quote e128">D</div>, and 
               <div class="quote e129">E</div> that belong to the group
               <div class="popupBox e130">
                  <div class="popupLabel" onmouseover="$('#d1e287').show('1000');" onmouseout="$('#d1e287').hide('1000');">[ footnote ]</div>
                  <div id="d1e287" style="display: none;">
                     <div class="footnote">
                        <div class="para e131">The resulting attribute value is a string, for example,
                           
                           <div class="quote e132">Grupp_B_Produkt_C</div>.
                        </div>
                     </div>
                  </div>
               </div>.
            </div><a name="PublishingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e133" xml:id="section-2011-10-28-19-44-14-40882030-">
               <div class="title e134">Publishing</div>
               <div class="para e135">Publishing is a simple XSLT transformation that filters the contents according
                  to context. If several conditions with differing semantics are used (such as
                  
                  <div class="code e136">profile</div> and 
                  <div class="code e137">audience</div>, above), using one stylesheet
                  per profile type is easy to set up in an XProc pipeline used to preprocess the
                  document.
               </div>
               <div class="para e138">Essentially, filtering is about string matching. The publishing context value
                  needs to match the node's profile for the node to be included
                  <div class="popupBox e139">
                     <div class="popupLabel" onmouseover="$('#d1e307').show('1000');" onmouseout="$('#d1e307').hide('1000');">[ footnote ]</div>
                     <div id="d1e307" style="display: none;">
                        <div class="footnote">
                           <div class="para e140">With unprofiled content always being included.</div>
                        </div>
                     </div>
                  </div>.
               </div>
            </div><a name="BooleanLogicANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e141" xml:id="section-2011-10-28-19-44-14-40882030-1">
               <div class="title e142">Boolean Logic</div>
               <div class="para e143">The above examples all assume OR. A single profile value match is enough to
                  include a node. Similarly, even with a multiple-value context, a single matching
                  profile value is enough:
               </div>
               <div class="programlisting e144" xml:space="preserve">&lt;doc profile="A B"&gt;
                  &lt;p&gt;Information common to products A, B, and C.&lt;/p&gt;
                  &lt;p profile="A"&gt;Information about product A.&lt;/p&gt;
                  &lt;p profile="B C"&gt;Information about products B and C.&lt;/p&gt;
                  &lt;p profile="B C"&gt;Information about products B and C.&lt;/p&gt;
                  &lt;/doc&gt;
                  
               </div>
               <div class="para e145">Here, nothing is excluded from the output because the 
                  <div class="quote e146">A</div> context
                  matches the first node and 
                  <div class="quote e147">B</div> the second and the third.
               </div>
               <div class="para e148">Sometimes, Boolean AND is preferred
                  <div class="popupBox e149">
                     <div class="popupLabel" onmouseover="$('#d1e328').show('1000');" onmouseout="$('#d1e328').hide('1000');">[ footnote ]</div>
                     <div id="d1e328" style="display: none;">
                        <div class="footnote">
                           <div class="para e150">For example, the node might be an illustration showing a product
                              variant (
                              <div class="quote e151">A</div>) configured with a specific accessory
                              (
                              <div class="quote e152">B</div>), so it would only make sense to include the
                              illustration in the published document if the publishing context
                              included both 
                              <div class="quote e153">A</div> and 
                              <div class="quote e154">B</div>.
                           </div>
                        </div>
                     </div>
                  </div>. Here is a simple (and limited) way to do it:
               </div>
               <div class="programlisting e155" xml:space="preserve">&lt;doc profile="B"&gt;
                  &lt;p&gt;Information common to products A, B, and C.&lt;/p&gt;
                  &lt;p profile="A"&gt;Information about product A.&lt;/p&gt;
                  &lt;p profile="B C"&gt;Information about products B and C.&lt;/p&gt;
                  &lt;p profile="B C" boolean="AND"&gt;Information about products B and C.&lt;/p&gt;
                  &lt;/doc&gt;
                  
               </div>
               <div class="para e156">Here, 
                  <div class="code e157">boolean="AND"</div> in the last paragraph means that for it to be
                  included, 
                  <div class="emphasis e158" role="ital">every</div>
                  
                  <div class="code e159">profile</div> value must match the context (
                  <div class="quote e160">B AND C</div>). In
                  this case, the last paragraph is therefore excluded from the output.
               </div>
               <div class="para e161">More advanced Boolean expressions might be useful, of course, but would almost
                  certainly prove to be far more problematic to implement in an XSLT
                  stylesheet:
               </div>
               <div class="programlisting e162" xml:space="preserve">&lt;p profile="B AND C AND NOT(A OR D)"&gt;Some text.&lt;/p&gt;</div>
               <div class="para e163">This is no longer mere XSLT territory; an external tool for parsing the
                  attribute contents might prove necessary.
               </div>
            </div>
         </div>
      </div><a name="ButThereAreProblemsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e164" xml:id="section_osb_phx_vj">
         <div class="title e165">But There Are Problems</div><a name="RenamingValuesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e166" xml:id="section-2011-10-28-9-43-5-73568251-3">
            <div class="title e167">Renaming Values</div>
            <div class="para e168">Let's say you need to rename some of the profiles. It's not uncommon for a product
               to be renamed or even to possess multiple names, depending on, say, market
               requirements. Problems ensue:
               <div class="itemizedlist e169">
                  <div class="listitem e170">
                     <div class="para e171">If the values are from a schema, the schema must be updated with the
                        new values, either by renaming the existing values or by adding new
                        ones.
                     </div>
                     <div class="para e172">The first option means that legacy documents will no longer be valid
                        and will have to be converted. The second means that the legacy
                        documents will have to be converted anyway or there will be two
                        unrelated values for what is essentially the same profile.
                     </div>
                  </div>
                  <div class="listitem e173">
                     <div class="para e174">Converting the old profiles to new values in this manner usually
                        results in that the old ones can no longer be supported. If a legacy
                        document is republished, it must use the new values. In a best case,
                        this might confuse the existing users; in a worst, it might render the
                        documents unusable.
                     </div>
                  </div>
                  <div class="listitem e175">
                     <div class="para e176">Very often, once the client is made aware of the basic problem, the
                        decision is to keep the old document base, making them either
                        incompatible or just very expensive to update, because of the doubled
                        profiles.
                     </div>
                  </div>
               </div>
               
            </div>
         </div><a name="ChangingScopeANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e177" xml:id="section-2011-10-28-9-43-5-73568251-4">
            <div class="title e178">Changing Scope</div>
            <div class="para e179">Changing the 
               <div class="emphasis e180" role="ital">scope</div> of a profile value means that
               the semantics of that value is updated.
               For
               example, let's say that a car engine 
               <div class="quote e181">D5</div> is updated with new
               components, perhaps as the result of updated specifications or new component
               suppliers. To marketing, it's still the same engine; after a certain date, it is
               simply manufactured using the new components instead of the old. 
            </div>
            <div class="para e182">To engineers and mechanics, the changes are likely to be significant and require
               new assembly methods, diagnostics, spare parts, and so on. The documentation will
               have to reflect these changes. New content must be added, technical data updated,
               images and illustrations changed.
            </div>
            <div class="para e183">Keeping the old profile, 
               <div class="quote e184">D5</div>, would still make sense to marketing,
               and the car itself would still leave the assembly line with a 
               <div class="quote e185">D5</div>
               batch on the boot lid, but cause problems for the technical writer:
               <div class="itemizedlist e186">
                  <div class="listitem e187">
                     <div class="para e188">When updating legacy documents with new information (for example, when
                        correcting errors), the writer would not be able to tell if a new
                        warning, seemingly profiled with the same value, was compatible or not
                        with the new information.
                     </div>
                  </div>
                  <div class="listitem e189">
                     <div class="para e190">When writing new 
                        <div class="quote e191">D5</div> content, reusing old modules
                        profiled with that same value would be equally deceptive; there is no
                        easy way to know if the information is compatible or not.
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e192">Changing the profile value might solve part of the problem but again cause
               problems; the resulting conversions of old values to new are much harder to do.
               Which existing modules are compatible with the new version of the engine and which
               aren't? Very frequently the decision is to create a new (internal) profile, keeping
               the two apart, but this results in added processing when publishing, and certainly
               a
               doubled profile even in cases when the information is, in fact, identical.
            </div>
         </div><a name="TextContentANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e193" xml:id="section_kyh_vnx_vj">
            <div class="title e194">Text Content</div>
            <div class="para e195">If the 
               <div class="quote e196">D5</div> profile, above, is used as variable text (see 
               <div class="xref e197" linkend="section-2011-10-28-9-43-5-73568251-2"></div>), changing the value is not an
               option. The product is still marketed as 
               <div class="emphasis e198">D5</div>. The end user will
               most likely not know or care about the updated components or the resulting updated
               document content. 
            </div>
            <div class="para e199">Here, again, some attempt to solve the problem by adding internal profiling
               values. In the car industry, model years are not used for profiling; instead, the
               vehicles are identified using manufacturing weeks. To someone in the know, the
               manufacturing week will clearly identify changes to a component such as the
               
               <div class="quote e200">D5</div> engine, but this divides the readers into two categories: the
               internal audience that knows the significance of weeks and the external that only
               sees the model year. This may not seem as a big problem but any third-party
               technical group (consider, for example, third-party car mechanics, car enthusiasts,
               etc) will have problems unless they have knowledge about, and access to, the
               internal profiling.
            </div>
            <div class="para e201">Using profiles as variable text also results in language-related problems:
               <div class="itemizedlist e202">
                  <div class="listitem e203">
                     <div class="para e204">A single profile, say 
                        <div class="quote e205">A</div>, is uncomplicated to use in a
                        variable: 
                        <div class="quote e206">A 
                           <div class="emphasis e207">is</div> the latest-generation diesel
                           engine for the environmentally conscious driver.
                        </div>
                        
                     </div>
                  </div>
                  <div class="listitem e208">
                     <div class="para e209">A variable that might result from possibly multiple matching profiles
                        is more difficult: 
                        <div class="quote e210">B and C 
                           <div class="emphasis e211">are</div>
                           high-performance turbo engine
                           <div class="emphasis e212">s</div> for the
                           demanding racing driver.
                        </div>
                        
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e213">For the writer, variable text resulting form single or multiple profiles are
               ultimately manageable only if they are known in advance.
            </div>
         </div><a name="LocalisationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e214" xml:id="section_hzf_npx_vj">
            <div class="title e215">Localisation</div>
            <div class="para e216">A related problem is about localisation
               <div class="popupBox e217">
                  <div class="popupLabel" onmouseover="$('#d1e477').show('1000');" onmouseout="$('#d1e477').hide('1000');">[ footnote ]</div>
                  <div id="d1e477" style="display: none;">
                     <div class="footnote">
                        <div class="para e218">For a moment ignoring the differing grammatical requirements imposed in
                           variable text.
                        </div>
                     </div>
                  </div>
               </div>. If the target market requires different profiling values (perhaps the
               product is sold under a different name), the values must be handled either when
               translating or when publishing for that market. This is doable, of course, but will
               add to the complexity. If the 
               <div class="emphasis e219">localised</div> value or scope needs to
               be changed at some point, as described above, further problems will arise.
            </div>
         </div>
      </div><a name="ABasicSolutionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e220" xml:id="section-2011-10-28-12-56-2-95308562-">
         <div class="title e221">A Basic Solution</div><a name="WhyDoWeHaveProblems?ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e222" xml:id="section-2011-10-28-12-56-2-95308562-2">
            <div class="title e223">Why Do We Have Problems?</div>
            <div class="para e224">The naming problems (that is, keeping the semantics of a profile unchanged but
               changing the displayed value) have a fairly obvious basic cause: 
               <div class="emphasis e225">Values
                  are handled directly, instead of addressing the basic semantics of the
                  profile.
               </div> They inevitable change over time, but a simple product name
               change may be just that, a mere name change, meaning that the semantics remain
               unchanged. Yet, the profiling information that is available does not reflect
               this.
            </div>
            <div class="para e226">As with any changing content, any profile value should be version handled, yet
               they can't be when handled directly as strings.
            </div>
            <div class="para e227">The scoping problems offer further revelations:
               <div class="itemizedlist e228">
                  <div class="listitem e229">
                     <div class="para e230">We confuse semantics with values. Changed semantics may or may not
                        result in a changed value; filtering should be based on semantics rather
                        than representations.
                     </div>
                  </div>
                  <div class="listitem e231">
                     <div class="para e232">The semantics evolve over time, as do the values, but the values are
                        only there to represent the semantics.
                     </div>
                     <div class="para e233">In the car example, 
                        <div class="quote e234">D5</div> is used for both scopes because
                        for the manufacturer's aftersales organisation, the engine variant is
                        the same, regardless of the components used. In other words, we happen
                        to have two different versions of the basic semantics but the same value
                        to represent them.
                     </div>
                  </div>
                  <div class="listitem e235">
                     <div class="para e236">Because we confuse semantics and presentation, we can either describe
                        the changes in presentation or describe the changes in semantics, but
                        not both.
                     </div>
                  </div>
                  <div class="listitem e237">
                     <div class="para e238">A change in a profile's semantics should mean a new version of the
                        profile but not necessarily new values.
                     </div>
                  </div>
               </div>
               
            </div>
            <div class="para e239">Or, in so many words, we confuse semantics and current values, using them
               interchangeably and frequently changing the wrong one. We need to separate the
               two.
            </div>
         </div><a name="AbstractionLayersANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e240" xml:id="section-2011-10-28-12-56-2-95308562-3">
            <div class="title e241">Abstraction Layers</div>
            <div class="para e242">The solution is to separate semantics from presentation, like this:</div>
            <div class="table e243">
               <div class="thead e244">
                  <div class="tr e245">
                     <div class="td e246">
                        
                        <div class="para e247">Semantics</div>
                        
                     </div>
                     <div class="td e248">
                        
                        <div class="para e249">Presentation</div>
                        
                     </div>
                  </div>
               </div>
               <div class="tbody e250">
                  <div class="tr e251">
                     <div class="td e252">
                        
                        <div class="para e253">D5 old</div>
                        
                     </div>
                     <div class="td e254">
                        
                        <div class="para e255">D5</div>
                        
                     </div>
                  </div>
                  <div class="tr e256">
                     <div class="td e257">
                        
                        <div class="para e258">D5 new</div>
                        
                     </div>
                     <div class="td e259">
                        
                        <div class="para e260">D5</div>
                        
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e261">Or, if changing profiles according to localisation, like this:</div>
            <div class="table e262">
               <div class="thead e263">
                  <div class="tr e264">
                     <div class="td e265">
                        
                        <div class="para e266">Semantics</div>
                        
                     </div>
                     <div class="td e267">
                        
                        <div class="para e268">Presentation</div>
                        
                     </div>
                  </div>
               </div>
               <div class="tbody e269">
                  <div class="tr e270">
                     <div class="td e271">
                        
                        <div class="para e272">Platform X, GB</div>
                        
                     </div>
                     <div class="td e273">
                        
                        <div class="para e274">Vauxhall</div>
                        
                     </div>
                  </div>
                  <div class="tr e275">
                     <div class="td e276">
                        
                        <div class="para e277">Platform X, DE</div>
                        
                     </div>
                     <div class="td e278">
                        
                        <div class="para e279">Opel</div>
                        
                        <div class="para e280">Saab</div>
                        
                     </div>
                  </div>
                  <div class="tr e281">
                     <div class="td e282">
                        
                        <div class="para e283">Platform X, SE</div>
                        
                     </div>
                     <div class="td e284">
                        
                        <div class="para e285">Opel</div>
                        
                        <div class="para e286">Saab</div>
                        
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e287">And so on. In the former example, we have a basic name for the semantics
               (
               <div class="quote e288">D5</div>) and two 
               <div class="emphasis e289">versions</div>, both represented by
               the same value. In the latter, we have three 
               <div class="emphasis e290">localisations</div> of
               the basic platform name (
               <div class="quote e291">X</div>), GB, DE and SE. Interestingly, the
               localisations of the platform use three different values, Vauxhall, Opel and Saab.
               In this case, this represents the fact that the same basic platform is used to
               create three separate vehicle brands.
            </div>
            <div class="para e292">Obviously, all may be required to completely describe the correlation between the
               semantics and every intended representation of the profile
               <div class="popupBox e293">
                  <div class="popupLabel" onmouseover="$('#d1e632').show('1000');" onmouseout="$('#d1e632').hide('1000');">[ footnote ]</div>
                  <div id="d1e632" style="display: none;">
                     <div class="footnote">
                        <div class="para e294">Quite possibly, there might be other parameters to alter the basic profile
                           in some way.
                        </div>
                     </div>
                  </div>
               </div>, like so:
            </div>
            <div class="programlisting e295" xml:space="preserve">PROFILE-VERSION-LOCALISATION</div>
            <div class="para e296">The different versions and localisations could then be assigned values:</div>
            <div class="table e297">
               <div class="thead e298">
                  <div class="tr e299">
                     <div class="td e300">
                        
                        <div class="para e301">Profile</div>
                        
                     </div>
                     <div class="td e302">
                        
                        <div class="para e303">Values</div>
                        
                     </div>
                  </div>
               </div>
               <div class="tbody e304">
                  <div class="tr e305">
                     <div class="td e306">
                        
                        <div class="para e307">D5.1-GB</div>
                        
                        <div class="para e308">D5.1-DE</div>
                        
                        <div class="para e309">D5.1-SE</div>
                        
                     </div>
                     <div class="td e310">
                        
                        <div class="para e311">D5</div>
                        
                     </div>
                  </div>
                  <div class="tr e312">
                     <div class="td e313">
                        
                        <div class="para e314">D5.2-GB</div>
                        
                        <div class="para e315">D5.2-DE</div>
                        
                        <div class="para e316">D5.2-SE</div>
                        
                     </div>
                     <div class="td e317">
                        
                        <div class="para e318">D5</div>
                        
                     </div>
                  </div>
                  <div class="tr e319">
                     <div class="td e320">
                        
                        <div class="para e321">X.1-GB</div>
                        
                     </div>
                     <div class="td e322">
                        
                        <div class="para e323">Vauxhall</div>
                        
                     </div>
                  </div>
                  <div class="tr e324">
                     <div class="td e325">
                        
                        <div class="para e326">X.1-DE</div>
                        
                     </div>
                     <div class="td e327">
                        
                        <div class="para e328">Saab Opel</div>
                        
                     </div>
                  </div>
                  <div class="tr e329">
                     <div class="td e330">
                        
                        <div class="para e331">X.1-SE</div>
                        
                     </div>
                     <div class="td e332">
                        
                        <div class="para e333">Saab Opel</div>
                        
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e334">Note that the table represents incomplete semantics rather than a real-life
               problem. More is required to determine which value to use and when.
            </div>
            <div class="para e335">If the core semantics change, the corresponding values may or may not change
               <div class="popupBox e336">
                  <div class="popupLabel" onmouseover="$('#d1e726').show('1000');" onmouseout="$('#d1e726').hide('1000');">[ footnote ]</div>
                  <div id="d1e726" style="display: none;">
                     <div class="footnote">
                        <div class="para e337">A product may be partly or completely revised, yet retain its product
                           name. Consider, for example, Apple's product naming strategy for tablets and
                           laptops.
                        </div>
                     </div>
                  </div>
               </div>; if changed values are desired, the corresponding semantics 
               <div class="emphasis e338" role="ital">must</div> change
               <div class="popupBox e339">
                  <div class="popupLabel" onmouseover="$('#d1e733').show('1000');" onmouseout="$('#d1e733').hide('1000');">[ footnote ]</div>
                  <div id="d1e733" style="display: none;">
                     <div class="footnote">
                        <div class="para e340">Even though the product may be unchanged and the marketing department
                           decide on a new name, without changing the basic semantic profile, there is
                           no way of knowing 
                           <div class="emphasis e341">when</div> the name change occurred.
                        </div>
                     </div>
                  </div>
               </div>.
            </div>
            <div class="para e342">The 
               <div class="quote e343">core</div> profile, the intended semantics of the filtering
               condition, should be uniquely and persistently named. That name should be version
               handled and localised as needed. So, I wonder, is there a convenient way to separate
               semantics from presentation?
            </div>
         </div><a name="UseURNstoNameFiltersANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e344" xml:id="section-2011-10-28-12-56-2-95308562-4">
            <div class="title e345">Use URNs to Name Filters</div>
            <div class="para e346">I'm partial to URNs when it comes to uniquely identifying things. I'd have used
               URNs to name my kids, had I been allowed to. 
            </div>
            <div class="para e347">It's easy to define a URN namespace for unique names. And if you control the
               scope, they can also be persistent. For URN-based profiling, something like this
               should do:
            </div>
            <div class="programlisting e348" xml:space="preserve">PROFILE:LANG-COUNTRY:VERSION</div>
            <div class="para e349">
               
               <div class="code e350">PROFILE</div>, of course, is the core profile, the semantic filter concept,
               
               <div class="code e351">LANG-COUNTRY</div> the localisation and 
               <div class="code e352">VERSION</div> a specific
               milestone. Combined, they should describe the examples above, but
               
               <div class="code e353">PROFILE</div> can be further broken down if needed. For example,
               
               <div class="emphasis e354" role="ital">Platform X</div> in the above table could solve the
               semantic problems: 
               <div class="code e355">X:OPEL</div>, 
               <div class="code e356">X:SAAB</div>, etc.
            </div>
            <div class="para e357">A semantically identical profile used for different markets requiring different
               presentation (values) is solved like so:
            </div>
            <div class="table e358">
               <div class="thead e359">
                  <div class="tr e360">
                     <div class="td e361">
                        
                        <div class="para e362">URN</div>
                        
                     </div>
                     <div class="td e363">
                        
                        <div class="para e364">Values</div>
                        
                     </div>
                  </div>
               </div>
               <div class="tbody e365">
                  <div class="tr e366">
                     <div class="td e367">
                        
                        <div class="para e368">URN-X:sv-SE:12</div>
                        
                     </div>
                     <div class="td e369">
                        
                        <div class="para e370">V1</div>
                        
                     </div>
                  </div>
                  <div class="tr e371">
                     <div class="td e372">
                        
                        <div class="para e373">URN-X:en-GB:12</div>
                        
                     </div>
                     <div class="td e374">
                        
                        <div class="para e375">V2</div>
                        
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e376">The values (
               <div class="quote e377">V1</div> for Sweden, 
               <div class="quote e378">V2</div> for the UK) are
               different because the target localisation varies, but the core profile
               (
               <div class="quote e379">URN-X</div>) is the same, as is the version (
               <div class="quote e380">12</div>). The
               values 
               <div class="quote e381">V1</div> and 
               <div class="quote e382">V2</div> are therefore equivalent with each
               other.
            </div>
            <div class="para e383">Here's the introductory XML example using URNs as profiles:</div>
            <div class="programlisting e384" xml:space="preserve">&lt;doc profile="urn:x-profile:a:sv-SE:12"&gt;
               &lt;p&gt;Information common to products A, B, and C.&lt;/p&gt;
               &lt;p profile="urn:x-profile:a:sv-SE:12"&gt;Information about product A.&lt;/p&gt;
               &lt;p profile="urn:x-profile:b:sv-SE:7"&gt;Information about product B.&lt;/p&gt;
               &lt;p profile="urn:x-profile:c:sv-SE:3"&gt;Information about product C.&lt;/p&gt;
               &lt;/doc&gt;
               
            </div>
            <div class="para e385">A variable might be included like so:</div>
            <div class="programlisting e386" xml:space="preserve">&lt;p&gt;Information about product &lt;phrase profile="urn:x-profile:a:sv-SE:12"/&gt;.&lt;/p&gt;</div>
            <div class="para e387">As the 
               <div class="code e388">phrase</div> element is a placeholder for variable content, the URN
               needs to be processed accordingly so that the right values are used when publishing.
               This construct, of course, can still result in a linguistic nightmare.
            </div>
            <div class="para e389">Can representing profiles with URNs solve the problems we've outlined?
               <div class="itemizedlist e390">
                  <div class="listitem e391">
                     <div class="para e392">If a profile is updated, either when changing the values or their
                        scope, a system that can fully resolve the URNs will support both the
                        old and new profiles. A new document can use the new values because it
                        uses a later URN version while a legacy document can keep on using the
                        old values because it uses the older URN version.
                     </div>
                  </div>
                  <div class="listitem e393">
                     <div class="para e394">As a consequence, no processing of legacy documents beyond resolving
                        URNs is necessary.
                     </div>
                  </div>
                  <div class="listitem e395">
                     <div class="para e396">It is still easy to string match profiles when publishing, even if
                        localisation is required.
                     </div>
                  </div>
                  <div class="listitem e397">
                     <div class="para e398">It is also easy to publish a legacy document that uses old URNs with
                        new values by preprocessing the old URNs
                        <div class="popupBox e399">
                           <div class="popupLabel" onmouseover="$('#d1e866').show('1000');" onmouseout="$('#d1e866').hide('1000');">[ footnote ]</div>
                           <div id="d1e866" style="display: none;">
                              <div class="footnote">
                                 <div class="para e400">Although it would result in having to check what exact
                                    semantics the later version represents. On the other hand, if
                                    profile semantics are versioned, it should be easy to bind
                                    specific versions to specific functionality.
                                 </div>
                              </div>
                           </div>
                        </div>.
                     </div>
                  </div>
               </div>
               
            </div>
         </div><a name="ProcessingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e401" xml:id="section-2011-10-28-12-56-2-95308562-5">
            <div class="title e402">Processing</div><a name="EditorANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e403" xml:id="section-2011-10-29-13-38-13-46080094-">
               <div class="title e404">Editor</div>
               <div class="para e405">To make URNs practical, the writer will need help to identify and insert a
                  profile (while URNs are unique, they are not necessarily human-readable).
                  Similarly, when editing existing profiled nodes, the profiles must be easily
                  identifiable.
               </div>
               <div class="para e406">The problem, of course, is that a string like
                  
                  <div class="quote e407">urn:x-cassis:r1:cos:xplatform:000359:sv-SE:0.12</div> is not very
                  descriptive. Identifying it requires asking the CMS, which might prove
                  cumbersome if one ever wanted to work offline.
               </div>
               <div class="para e408">A cop-out solution is to use strictly human-readable URNs, but problems such
                  as identifying the variations in scope in the 
                  <div class="quote e409">D5</div> example above
                  (see 
                  <div class="xref e410" linkend="section-2011-10-28-9-43-5-73568251-4"></div>) require
                  more.
               </div>
               <div class="para e411">Perhaps better and certainly easier to process is to insert descriptive
                  throwaway attributes containing current profile values when checking out or
                  opening a document in the editor. Such an attribute, say, 
                  <div class="code e412">values</div>,
                  would be for convenience only and be stripped from the document at
                  check-in:
               </div>
               <div class="programlisting e413" xml:space="preserve">&lt;p profile="urn:x-profile:a:sv-SE:12" values="A"&gt;Information about product A.&lt;/p&gt;</div>
               <div class="para e414">An more powerful alternative requiring a bit more processing is to use a
                  mapping document listing any required profile-and-value pairs for any checked
                  out or open documents, like so:
               </div>
               <div class="programlisting e415" xml:space="preserve">&lt;maps&gt;
                  		...
                  		&lt;pair&gt;
                  		&lt;profile&gt;urn:x-profile:a:sv-SE:12&lt;/profile&gt;
                  		&lt;values&gt;A&lt;/values&gt;
                  		&lt;/pair&gt;
                  		&lt;pair&gt;
                  		&lt;profile&gt;urn:x-profile:a:en-GB:12&lt;/profile&gt;
                  		&lt;values&gt;B&lt;/values&gt;
                  		&lt;/pair&gt;
                  ...
                  &lt;/maps&gt;
               </div>
               <div class="para e416">Or some variation thereof. A mapping document might also provide the basis for
                  a profiling GUI, listing the available profiles and their versions in some
                  human-readable form, an immediate advantage being that once populated, the
                  mapping document would give access to the available profiles without requiring a
                  server connection. 
               </div>
               <div class="para e417">I've used a similar approach with a mapping document when matching URNs for
                  checked-out or open documents with their temporary URLs in the editor:
               </div>
               <div class="programlisting e418" xml:space="preserve">&lt;Repository&gt;
                  &lt;RepositoryName&gt;CosTI&lt;/RepositoryName&gt;
                  &lt;Map&gt;
                  &lt;UrnUrlPair&gt;
                  &lt;Urn&gt;urn:x-cassis:r1:cos:00002730:sv-SE:0.7&lt;/Urn&gt;
                  &lt;Url&gt;C:\Users\arin\Documents\condesign\cassis\ti\xmetal\2880321bb5d24b08a95e2854bccf859b\prox-för-cassis.xml&lt;/Url&gt;
                  &lt;Writable&gt;false&lt;/Writable&gt;
                  &lt;EditUrl /&gt;
                  &lt;/UrnUrlPair&gt;
                  &lt;/Map&gt;
                  &lt;ShowMetadataDialog&gt;true&lt;/ShowMetadataDialog&gt;
                  &lt;/Repository&gt;
               </div>
               <div class="para e419">Expanding this to include profiling would be relatively easy
                  <div class="popupBox e420">
                     <div class="popupLabel" onmouseover="$('#d1e911').show('1000');" onmouseout="$('#d1e911').hide('1000');">[ footnote ]</div>
                     <div id="d1e911" style="display: none;">
                        <div class="footnote">
                           <div class="para e421">An added bonus is that in this case, the URN handling APIs are already
                              in place.
                           </div>
                        </div>
                     </div>
                  </div>.
               </div>
            </div><a name="VariableTextandLocalisationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e422" xml:id="section-2011-10-29-16-39-36-3630333-">
               <div class="title e423">Variable Text and Localisation</div>
               <div class="para e424">Variable text in the editor can be inserted using both techniques above: a
                  throwaway 
                  <div class="code e425">values</div> attribute or a separate mapping document both do
                  the trick. The former alternative requires less processing while the latter
                  gives access to more features. Localised values, for example, would require the
                  mapping document.
               </div>
            </div><a name="CombiningProfilesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e426" xml:id="section-2011-10-29-13-38-13-46080094-2">
               <div class="title e427">Combining Profiles</div>
               <div class="para e428">URNs (and indeed any type of abstraction layer) can help simplify complex
                  profiles, such as the logical expressions mentioned in 
                  <div class="xref e429" linkend="section-2011-10-28-19-44-14-40882030-1"></div>. Instead of having to
                  process the expression in an attribute, the expression can be represented using
                  another URN, like so (with apologies for the pseudo-code):
               </div>
               <div class="programlisting e430" xml:space="preserve">URN-EXPRESSION = URN1 AND URN2 AND NOT(URN3 OR URN4)</div>
               <div class="para e431">The replacement URN represents the expression and is used instead of it when
                  processing. Of course, to be more than a theoretical exercise in neat ways of
                  doing the unneeded, the situations in which boolean expressions can occur must
                  be clearly defined. Such situations are common when describing complex modular
                  products and their many variants; such products are frequently sold as
                  individuals, requiring individualised documentation. A closer look of those
                  situations is outside the scope of this document, but the point I want to make
                  here is nevertheless an important one: rather than processing
                  
                  <div class="quote e432">2*(3+2)</div>, process 
                  <div class="quote e433">10</div>. An abstraction layer is
                  simply some suitable representation of semantics.  
               </div>
               <div class="para e434">Thus, a writer might use a shortcut URN to represent a group of profiles
                  comprising several URNs. Such a 
                  <div class="quote e435">user-defined URN</div> could be paired
                  with descriptive metadata to help identify it and other URNs created for similar
                  purposes. The right systems support could easily provide the user with a listing
                  of the underlying profiles.
               </div>
            </div><a name="BaseProfilesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e436" xml:id="section_xsq_pcz_vj">
               <div class="title e437">Base Profiles</div>
               <div class="para e438">A complete profile includes localisation and version information, but
                  sometimes it is useful to process the 
                  <div class="emphasis e439">base profile</div>
                  regardless of language, country or version. This is easily done by defining
                  wildcard behaviour:
               </div>
               <div class="programlisting e440" xml:space="preserve">URN:*:*</div>
               <div class="para e441">This basically ignores the wildcards; it matches every single one. With the
                  URN semantics well defined (I use EBNF for mine) this should be easy.
               </div>
               <div class="para e442">Other useful variations here might define processing for, say, the latest
                  version of a profile. A stylesheet treating 
                  <div class="code e443">URN:sv-SE:*</div> as the
                  latest is not hard to do but will, of course, require access to the
                  corresponding values, either at runtime or when populating a mapping
                  document.
               </div>
            </div><a name="AssertionsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e444" xml:id="section-2011-10-30-15-25-43-46300461-4">
               <div class="title e445">Assertions</div>
               <div class="para e446">Sometimes, filtering profiled content causes structural problems in the
                  resulting document, with required elements missing. Consider this admittedly
                  simplistic example: 
               </div>
               <div class="programlisting e447" xml:space="preserve">&lt;doc profile="A"&gt;
                  ...
                  &lt;warning&gt;
                  &lt;p profile="A"&gt;Some content.&lt;/p&gt;
                  &lt;/warning&gt;
                  ...
                  &lt;/doc&gt;
               </div>
               <div class="para e448">If a 
                  <div class="code e449">warning</div> must always contain at least one 
                  <div class="code e450">p</div>, the
                  above will result in an invalid 
                  <div class="code e451">warning</div> if published in context
                  
                  <div class="quote e452">B</div> rather than  
                  <div class="quote e453">A</div>. This is an easy mistake to
                  make, and more complex nodes could easily end up being invalid without the user
                  noticing, especially in modularised documents, resulting in the problem
                  remaining undiscovered until the document is published.
               </div>
               <div class="para e454">As these problems will only appear later
                  <div class="popupBox e455">
                     <div class="popupLabel" onmouseover="$('#d1e988').show('1000');" onmouseout="$('#d1e988').hide('1000');">[ footnote ]</div>
                     <div id="d1e988" style="display: none;">
                        <div class="footnote">
                           <div class="para e456">The document that is profiled remains valid, of course.</div>
                        </div>
                     </div>
                  </div>, they can be difficult to spot. This can be solved using 
                  <div class="emphasis e457" role="ital">schematron</div> (ISO standard; see 
                  <div class="xref e458" linkend="id-idso-sch"></div>)
                  assertions and validation on a document to check for problems and missing
                  content after applying profiles. Such tests can be automated and used to
                  validate the profiled nodes only. Here's a schematron fragment for checking if
                  the 
                  <div class="code e459">warning</div> contents match the publishing context:
               </div>
               <div class="programlisting e460" xml:space="preserve">&lt;!-- Profiling status for node --&gt;
                  &lt;pattern&gt;
                  &lt;rule context="warning"&gt;
                  &lt;assert test="p/@profile"&gt;No profiling information.&lt;/assert&gt;
                  &lt;report test="p/@profile"&gt;Profiling present.&lt;/report&gt;
                  &lt;/rule&gt;
                  &lt;/pattern&gt;
                  &lt;!-- Match --&gt;
                  &lt;pattern&gt;
                  &lt;rule context="warning"&gt;
                  &lt;report test="contains(/*/@profile,p/@profile)"&gt;Profile matches 
                  publishing context.&lt;/report&gt;
                  &lt;/rule&gt;
                  &lt;/pattern&gt;
                  &lt;!-- No match --&gt;
                  &lt;pattern&gt;
                  &lt;rule context="warning"&gt;
                  &lt;assert test="contains(/*/@profile,p/@profile)"&gt;Profile does not 
                  match publishing context.&lt;/assert&gt;
                  &lt;/rule&gt;
                  &lt;/pattern&gt;
               </div>
               <div class="para e461">Note that complex schematron documents can be automatically generated if the
                  possible profiles are known and the possible changes are defined in a
                  schema.
               </div>
               <div class="para e462">It might be possible to use XML Schema 1.1 assertions but since an assertion
                  on an element cannot refer to siblings or ancestors (
                  <div class="xref e463" linkend="id-xsdassertions"></div>),
                  the assertion would have to be made on descendants only, like so:
               </div>
               <div class="programlisting e464" xml:space="preserve">&lt;xs:schema 
                  xmlns:xs="http://www.w3.org/2001/XMLSchema" 
                  elementFormDefault="qualified"&gt;
                  &lt;xs:element name="doc"&gt;
                  &lt;xs:complexType&gt;
                  &lt;xs:sequence 
                  maxOccurs="unbounded"&gt;
                  &lt;xs:element 
                  name="warning"&gt;
                  &lt;xs:complexType&gt;
                  &lt;xs:sequence 
                  maxOccurs="unbounded"&gt;
                  &lt;xs:element 
                  name="p"&gt;
                  &lt;xs:complexType 
                  mixed="true"&gt;
                  &lt;xs:attribute 
                  name="profile"/&gt;
                  &lt;/xs:complexType&gt;
                  &lt;/xs:element&gt;
                  &lt;/xs:sequence&gt;
                  &lt;xs:attribute 
                  name="profile"/&gt;
                  &lt;/xs:complexType&gt;
                  &lt;/xs:element&gt;
                  &lt;/xs:sequence&gt;
                  &lt;xs:attribute 
                  name="profile"/&gt;
                  &lt;xs:assert 
                  test="contains(@profile,.//*/@profile)"/&gt;
                  &lt;/xs:complexType&gt;
                  &lt;/xs:element&gt;
                  &lt;/xs:schema&gt;
               </div>
               <div class="para e465">This might result in some rather complex expressions, if the assertion
                  required needed to go beyond the basics as illustrated above. I have not further
                  explored this at the time of this writing.
               </div>
            </div><a name="PublishingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e466" xml:id="section-2011-10-29-13-38-13-46080094-1">
               <div class="title e467">Publishing</div>
               <div class="para e468">Publishing documents that include URN profiles remains easy; the URNs can be
                  processed as strings, using string matching, so the filtering of nodes should
                  not be a problem. Processing a translated document that uses untranslated
                  profiles might prove tricky, however. Here is an example of a document
                  originally profiled in Swedish but now translated to English:
               </div>
               <div class="programlisting e469" xml:space="preserve">&lt;doc profile="urn:x-profile:a:en-GB:12"&gt;
                  &lt;p&gt;Information common to products A, B, and C.&lt;/p&gt;
                  &lt;p profile="urn:x-profile:a:sv-SE:12"&gt;Information about product A.&lt;/p&gt;
                  &lt;p profile="urn:x-profile:b:sv-SE:7"&gt;Information about product B.&lt;/p&gt;
                  &lt;p profile="urn:x-profile:c:sv-SE:3"&gt;Information about product C.&lt;/p&gt;
                  &lt;/doc&gt;
                  
               </div>
               <div class="para e470">
                  
                  <div class="emphasis e471" role="ital">None</div> of the profiled 
                  <div class="code e472">p</div> elements is
                  included in the resulting publication. This, of course, could be the desired
                  result, but more likely is that the profiles need to be preprocessed. One way
                  could be to prep the file going to translation, replacing any language/country
                  information in the URNs before translation. More flexible is to define the exact
                  preprocess according to need. For one thing, if the profiled node is not
                  relevant in the target localisation, the profile should remain unchanged
                  <div class="popupBox e473">
                     <div class="popupLabel" onmouseover="$('#d1e1027').show('1000');" onmouseout="$('#d1e1027').hide('1000');">[ footnote ]</div>
                     <div id="d1e1027" style="display: none;">
                        <div class="footnote">
                           <div class="para e474">Or the node removed; translators should not have to see it.</div>
                        </div>
                     </div>
                  </div>.
               </div>
               <div class="note e475">
                  <div class="para e476">It might be better to include every applicable profile localisation
                     directly in the above example, rather than replacing the original one during
                     preprocessing, as suggested by a reviewer of this paper. Or, if the profile
                     was always applicable, leave out the localisation altogether by using a
                     wildcard convention ( such as 
                     <div class="code e477">profile="urn:x-profile:a:*:12"</div>)
                     with suitable assertions when preprocessing. More complex localisation
                     requirements could be similarly handled (
                     <div class="quote e478">
                        <div class="emphasis e479">sv-SE</div>
                        and 
                        <div class="emphasis e480">de-DE</div>, but not
                        
                        <div class="emphasis e481">en-GB</div>
                     </div>, etc) using more complex
                     assertions.
                  </div>
               </div>
               <div class="para e482">Also, the translators should be made aware of any processing requiring exact
                  values (most notably when using profiles for variable text in content); the
                  profile 
                  <div class="emphasis e483">values</div> in a localisation are far more important to
                  the translator than their corresponding URNs. The latter, then, need to be
                  mapped to any relevant values, including values resulting from localisation or
                  from some special processing (i.e. if the latest version of a profile is
                  preferred), before the original document is translated. The values can be placed
                  in a mapping document
                  <div class="popupBox e484">
                     <div class="popupLabel" onmouseover="$('#d1e1052').show('1000');" onmouseout="$('#d1e1052').hide('1000');">[ footnote ]</div>
                     <div id="d1e1052" style="display: none;">
                        <div class="footnote">
                           <div class="para e485">Or in 
                              <div class="code e486">values</div> throwaway attributes, depending on the
                              situation.
                           </div>
                        </div>
                     </div>
                  </div>, provided to the translators but they'd almost certainly prefer
                  preprocessed documents where text variables such as the 
                  <div class="code e487">phrase</div>
                  element in 
                  <div class="xref e488" linkend="section-2011-10-28-9-43-5-73568251-2"></div> include their values rather
                  than the URNs:
               </div>
               <div class="programlisting e489" xml:space="preserve">&lt;p&gt;Information about product &lt;phrase profile="A B C"&gt;A, B and C&lt;/&gt;.&lt;/p&gt;</div>
               <div class="note e490">
                  <div class="para e491">This will not solve the grammatical problem. It simply helps translators
                     by showing the actual values rather than the URNs.
                  </div>
               </div>
            </div><a name="TheGrammaticalProblemSolvedANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e492" xml:id="section_xng_qhz_vj">
               <div class="title e493">The Grammatical Problem Solved</div>
               <div class="para e494">The following sentence using a text variable will potentially cause problems
                  if the number of applicable profiles varies:
                  <div class="itemizedlist e495">
                     <div class="listitem e496">
                        <div class="para e497">A single profile, say 
                           <div class="quote e498">A</div>, is uncomplicated to use in
                           a variable: 
                           <div class="quote e499">A 
                              <div class="emphasis e500">is</div> the latest-generation
                              diesel engine for the environmentally conscious driver.
                           </div>
                           
                        </div>
                     </div>
                     <div class="listitem e501">
                        <div class="para e502">A variable that might result from possibly multiple matching
                           profiles is more difficult: 
                           <div class="quote e503">B and C 
                              <div class="emphasis e504">are</div>
                              high-performance turbo engine
                              <div class="emphasis e505">s</div> for the
                              demanding racing driver.
                           </div>
                           
                        </div>
                     </div>
                  </div>
                  
               </div>
               <div class="programlisting e506" xml:space="preserve">&lt;p&gt;The &lt;phrase profile="A B C"&gt;is the latest generation diesel engine
                  for the environmentally conscious driver.&lt;/&gt;.&lt;/p&gt;
               </div>
               <div class="para e507">Brute force solutions involving marking up inline content to identify
                  grammatical constructs might be manageable if only two need to be handled, if
                  Boolean constructs are accepted, for example, by using expressions such as
                  
                  <div class="code e508">profile="(A AND NOT(B)) OR (B AND NOT(A))"</div> for singular and
                  
                  <div class="code e509">profile="A AND B"</div> for plural form, but even this will quickly
                  become unmanageable for the writer.
               </div>
               <div class="para e510">Far more useful is to add an abstraction layer that defines the
                  
                  <div class="emphasis e511">types</div> of profiles, for example, 
                  <div class="quote e512">diesel
                     engines
                  </div> or 
                  <div class="quote e513">turbo engines</div>. A mapping document might
                  define a group of profiles for the purpose, like so:
               </div>
               <div class="programlisting e514" xml:space="preserve">&lt;group&gt;
                  		&lt;profile&gt;urn:x-profile:abc&lt;/profile&gt;
                  		&lt;included&gt;
                  		&lt;profile&gt;urn:x-profile:a&lt;/profile&gt;
                  		&lt;profile&gt;urn:x-profile:b&lt;/profile&gt;
                  		&lt;values&gt;D5&lt;/values&gt;
                  		&lt;/included&gt;
                  ...
                  &lt;/group&gt;
               </div>
               <div class="para e515">Here, all variants are called 
                  <div class="quote e516">D5</div> but the value could just as
                  well be 
                  <div class="quote e517">D Series Diesel Engine</div> or something else. The point is
                  that the abstraction is needed to a) group the participating profiles into a
                  meaningful semantic group while b) keeping 
                  <div class="emphasis e518">either</div> singular
                  or plural form, but not both, regardless of the number of exact profiles
                  used.
               </div>
               <div class="para e519">A different but useful way to solve the problem is to count the context
                  profiles in the root (one or more) and include markup to handle only the
                  grammatically relevant differences. Singular might be marked up as
                  
                  <div class="code e520">&lt;wrap context="s"&gt;is&lt;/wrap&gt;</div> and plural as
                  
                  <div class="code e521">&lt;wrap context="p"&gt;are&lt;/wrap&gt;</div> or similar.
               </div>
            </div>
         </div>
      </div><a name="OutoflineProfilingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e522" xml:id="section-2011-10-28-12-56-2-95308562-6">
         <div class="title e523">Out-of-line Profiling</div>
         <div class="para e524">The profiling abstraction layer described above provides the basic ideas but more
            fun
            can be had. What if, for example, you needed to profile XML following a schema that
            you
            don't control? There are ID attributes but no profiling semantics. You can't change
            the
            schema directly and processing for local needs would be too expensive
            <div class="popupBox e525">
               <div class="popupLabel" onmouseover="$('#d1e1147').show('1000');" onmouseout="$('#d1e1147').hide('1000');">[ footnote ]</div>
               <div id="d1e1147" style="display: none;">
                  <div class="footnote">
                     <div class="para e526">Agreed, this is a contrived example. I never really bought that classic
                        namespacing argument, 
                        <div class="quote e527">what if you need to import a foreign namespace into
                           yours?
                        </div>
                        
                     </div>
                  </div>
               </div>
            </div>?
         </div>
         <div class="para e528">My immediate reaction when thinking about this was 
            <div class="quote e529">extended XLink</div>.
            XLink (
            <div class="xref e530" linkend="id-xlink"></div>) is an
            all-purpose linking standard that never really reached the level of acceptance I feel
            it
            deserves 
            <div class="popupBox e531">
               <div class="popupLabel" onmouseover="$('#d1e1161').show('1000');" onmouseout="$('#d1e1161').hide('1000');">[ footnote ]</div>
               <div id="d1e1161" style="display: none;">
                  <div class="footnote">
                     <div class="para e532">The lack of a processing model while including behavioural attributes is a
                        frequent criticism and arguably pertains to my suggested use, here. See, for
                        example, Paul Prescod's 
                        <div class="quote e533">XLink: behavior must go!</div> (
                        <div class="xref e534" linkend="id-prescod"></div>).
                     </div>
                  </div>
               </div>
            </div>. Among other things, the spec describes 
            <div class="emphasis e535" role="ital">out-of-line
               links
            </div>, that is, links that are described outside the resources they use,
            in 
            <div class="quote e536">linkbases</div>. The linkbase lists 
            <div class="emphasis e537" role="ital">locators</div> that identify the start and end points of the links, and
            
            <div class="emphasis e538" role="ital">arcs</div> that connect those points with each other. The
            spec allows for 
            <div class="quote e539">multi-ended</div> links, which basically means that the link
            ends can be connected with each other in any combinations, as many times as
            needed.
         </div>
         <div class="figure e540" xml:id="figure-2011-10-30-9-42-53-11614317-">
            <div class="mediaobject e541">
               <div class="imageobject e542">
                  <div class="metaBox e543"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1189').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1189" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e543'
                           </span><span class="metaAttribute">fileref='../../../vol10/graphics/Nordstrom01/Nordstrom01-002.jpg'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e544">A linkbase (the blob to the left) lists locators and arcs that identify nodes and
            their relations in the document to the right. What's cool with extended XLink is that
            the link ends that participate in a link have no idea they are part of one. We can
            describe document semantics outside it.
         </div><a name="ExtendedProfilingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e545" xml:id="section-2011-10-28-12-56-2-95308562-7">
            <div class="title e546">Extended Profiling</div>
            <div class="para e547">Just as I can describe links outside the participant resources, I should be able
               to profile nodes in resources in a linkbase-like construct, like this:
            </div>
            <div class="programlisting e548" xml:space="preserve">&lt;linkbase&gt;
               &lt;locator href="doc.xml#id1" profile="URN1"/&gt;
               &lt;locator href="doc.xml#id1" profile="URN2"/&gt;
               &lt;locator href="doc.xml#id2" profile="URN1"/&gt;
               ...
               &lt;/linkbase&gt;
            </div>
            <div class="para e549">Two separate 
               <div class="code e550">locator</div>s identify the two profiles for the node with
               
               <div class="code e551">id1</div> in 
               <div class="emphasis e552">doc.xml</div>, 
               <div class="quote e553">URN1</div> and
               
               <div class="quote e554">URN2</div>, respectively. A third locator identifies a second node,
               
               <div class="code e555">id2</div>, with the profile 
               <div class="quote e556">URN1</div>. This, essentially, is
               the mapping document I described above (see 
               <div class="xref e557" linkend="section-2011-10-29-13-38-13-46080094-"></div>), so throwaway values could
               easily be included, like so:
            </div>
            <div class="programlisting e558" xml:space="preserve">&lt;linkbase&gt;
               &lt;locator href="doc.xml#id1" profile="URN1" values="A B"/&gt;
               &lt;locator href="doc.xml#id1" profile="URN2" values="C"/&gt;
               &lt;locator href="doc.xml#id2" profile="URN1" values="A B"/&gt;
               ...
               &lt;/linkbase&gt;
            </div>
            <div class="para e559">With URNs identifying the document(s), it is easy to include proper version
               handling and match localisation values with their URNs, like so (this is not
               directly equivalent with the above):
            </div>
            <div class="programlisting e560" xml:space="preserve">&lt;linkbase&gt;
               &lt;locator href="URN-DOC:sv-SE:1#id1" profile="URN1:sv-SE:1" values="A"/&gt;
               &lt;locator href="URN-DOC:en-GB:1#id1" profile="URN1:en-GB:1" values="B"/&gt;
               ...
               &lt;locator href="URN-DOC:sv-SE:2#id1" profile="URN1:sv-SE:2" values="A C"/&gt;
               ...
               &lt;/linkbase&gt;
            </div>
            <div class="para e561">The first two locators describe version 1 of the document in Swedish and English
               containing the 
               <div class="code e562">id1</div> node profiled with URN1, version 1, with localised
               values in Swedish (
               <div class="quote e563">A</div>) and English (
               <div class="quote e564">B</div>), respectively.
               The third locator describes the Swedish version 2 of the same document, profiled
               with version 2 of URN1 and updated values localised for Swedish (
               <div class="quote e565">A</div>
               and 
               <div class="quote e566">C</div>).
            </div>
            <div class="para e567">As with the inline profiling (see 
               <div class="xref e568" linkend="section-2011-10-28-12-56-2-95308562-"></div>), the URN profiles here can
               represent expressions.
            </div><a name="BasicRequirementsfortheDocumentANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e569" xml:id="section-2011-10-30-13-33-4-32060711-2">
               <div class="title e570">Basic Requirements for the Document</div>
               <div class="para e571">Some requirements for that third-party document structure emerge:
                  <div class="itemizedlist e572">
                     <div class="listitem e573">
                        <div class="para e574">The document must be XML.</div>
                     </div>
                     <div class="listitem e575">
                        <div class="para e576">Any relevant node should be identified with IDs or some other way
                           to uniquely identify profiled nodes.
                        </div>
                     </div>
                     <div class="listitem e577">
                        <div class="para e578">For variable text, there should be a placeholder to
                           replace.
                        </div>
                     </div>
                  </div>
                  
               </div>
            </div><a name="XLinkRolesandTitlesPuttoUseANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e579" xml:id="section-2011-10-30-13-33-4-32060711-1">
               <div class="title e580">XLink Roles and Titles Put to Use</div>
               <div class="para e581">The XLink spec describes 
                  <div class="emphasis e582" role="ital">roles</div> that can be
                  applied to other XLink semantics:
               </div>
               <div class="para e583">
                  
                  <div class="quote e584">The value of the role or arcrole attribute must be a URI reference as
                     defined in [IETF RFC 2396], except that if the URI scheme used is allowed to
                     have absolute and relative forms, the URI portion must be absolute. The URI
                     reference identifies some resource that describes the intended
                     property.
                  </div>
                  
               </div>
               <div class="para e585">Sound familiar? A URN, of course, is a type of URI, so roles in XLink can do
                  more or less exactly what I have described above, except, of course, that there
                  can only be one URN per locator. That means that either a set of URN profiles is
                  described in a set of locators, with one URN per locator, or the URNs are
                  combined to other URNs as hinted in 
                  <div class="xref e586" linkend="section-2011-10-29-13-38-13-46080094-2"></div>. Of course, that
                  resulting URN is just a 
                  <div class="quote e587">reference [that] identifies some resource that
                     describes the intended property
                  </div>, so we seem to be well within the
                  intentions of the spec.
               </div>
               <div class="para e588">The spec also describes 
                  <div class="emphasis e589" role="ital">titles</div>:
               </div>
               <div class="para e590">
                  
                  <div class="quote e591">The title attribute is used to describe the meaning of a link or resource
                     in a human-readable fashion, along the same lines as the role or arcrole
                     attribute. 
                  </div>
                  
               </div>
               <div class="para e592">So, here's an XLink version of the above example (stripping namespace stuff
                  and such):
               </div>
               <div class="programlisting e593" xml:space="preserve">&lt;linkbase&gt;
                  &lt;locator href="URN-DOC:sv-SE:1#id1" role="URN1:sv-SE:1" title="A"/&gt;
                  &lt;locator href="URN-DOC:en-GB:1#id1" role="URN1:en-GB:1" title="B"/&gt;
                  ...
                  &lt;locator href="URN-DOC:sv-SE:2#id1" role="URN1:sv-SE:2" title="A C"/&gt;
                  ...
                  &lt;/linkbase&gt;
               </div>
               <div class="para e594">This, of course, is exactly what we need, and in processable form.</div>
            </div>
         </div><a name="OutoflineProcessingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e595" xml:id="section-2011-10-28-12-56-2-95308562-8">
            <div class="title e596">Out-of-line Processing</div>
            <div class="para e597">A lot of the required processing for out-of-line profiles is unchanged from the
               inline version (see 
               <div class="xref e598" linkend="section-2011-10-28-12-56-2-95308562-5"></div>).
               Out-of-line links, whether they are done in linkbases or in overlay documents, add
               some processing and may present practical difficulties, but also hint at a different
               approach when creating or editing the profiles in the editor.
            </div><a name="EditorANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e599" xml:id="section-2011-10-30-15-25-43-46300461-">
               <div class="title e600">Editor</div>
               <div class="para e601">When profiling a document out-of-line, we are essentially editing a linkbase,
                  that is, a separate document. That document does not need to be edited using
                  full XML editing capabilities, only what's needed for locating the nodes and
                  profiling them. This suggests a DITA map-like approach. In quite a few XML
                  editors out there, there is a separate window or pane for editing DITA maps. It
                  is specialised and only needed to handle editing topicrefs and such.
               </div>
               <div class="para e602">Similarly, a linkbase editor needs only include the necessary profiling
                  handling, adding locators to the linkbase using a function in the main editor
                  and then adding profiles in the linkbase editor. For editing existing locators,
                  it should be enough to click on them to locate the corresponding nodes in the
                  editor but remain in the specialised window when editing them.
               </div>
               <div class="para e603">The remaining problem is a practical one: how does one visualise a profile in
                  the main editor window so that the user can easily spot any profiled content.
                  Here, a processing instruction might suffice if the editor has trouble
                  populating the document tree from more than one source.
               </div>
            </div><a name="SchematronUsesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e604" xml:id="section-2011-10-30-15-25-43-46300461-1">
               <div class="title e605">Schematron Uses</div>
               <div class="para e606">Schematron can be used to validate the resulting profiled content and to
                  generate PIs in the target document to indicate profiles, but also to generate
                  the linkbase itself, if the rules describing what can be profiled and how are
                  formalised. If the target document doesn't contain IDs, a schematron-like
                  reporting function implemented in the specialised editor can be used to identify
                  nodes using XPath expressions.
               </div>
            </div><a name="VariableTextANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e607" xml:id="section-2011-10-30-15-25-43-46300461-3">
               <div class="title e608">Variable Text</div>
               <div class="para e609">Variable text is more difficult to implement properly out-of-line, not because
                  of the out-of-line approach itself but because we don't necessarily control the
                  document. The language must be such that the profile value naturally fits into
                  the text flow.
               </div>
               <div class="para e610">If profiling content we don't control, the problem is mostly beyond our
                  control. If there are placeholders, the problem can be solved, but if not, while
                  we can pinpoint a location using a variety of means (anything from a PI to
                  XPointer comes to mind) variable text when profiling out-of-line should probably
                  not be attempted if we don't control the content.
               </div>
            </div><a name="TheGrammaticalProblemRevisitedANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e611" xml:id="section_sfp_bzf_wj">
               <div class="title e612">The Grammatical Problem Revisited</div>
               <div class="para e613">The grammatical solution suggested in 
                  <div class="xref e614" linkend="section_xng_qhz_vj"></div> is
                  even easier to handle in a linkbase, as the profiles are all in one place,
                  regardless of how many modules they are used in. They can easily be preprocessed
                  by wrapping selected groups in abstractions (grouping profiles under a single
                  label), counting them, and otherwise producing any relevant information about
                  them when publishing a document.
               </div>
               <div class="para e615">A reviewer of this paper commented: 
                  <div class="quote e616">Instead of storing the variable
                     text only and using additional wrap element for the grammatical relevant
                     differences, why not store the whole grammatical phrase as variable text?
                     
                  </div>
               </div>
               <div class="para e617">This is perhaps an easier solution for an author to handle than the one I
                  started out with, but one that will cause the duplication of any surrounding
                  grammatical phrases and likely reintroduce copy-paste editing when authors
                  include the complete phrases with the variant information, rather than only the
                  product variants themselves. Applying this on the sentence from 
                  <div class="xref e618" linkend="section_xng_qhz_vj"></div>,
                  we might end up with a number of variants, almost but not quite copies of each
                  other:
               </div>
               <div class="itemizedlist e619">
                  <div class="listitem e620">
                     <div class="para e621">
                        <div class="quote e622">A 
                           <div class="emphasis e623">is</div> the latest-generation diesel engine
                           for the environmentally conscious driver.
                        </div>
                     </div>
                  </div>
                  <div class="listitem e624">
                     <div class="para e625">
                        <div class="quote e626">B 
                           <div class="emphasis e627">is</div> the latest-generation diesel engine
                           for the environmentally conscious driver.
                        </div>
                     </div>
                  </div>
                  <div class="listitem e628">
                     <div class="para e629">
                        <div class="quote e630">C 
                           <div class="emphasis e631">is</div> the latest-generation diesel engine
                           for the environmentally conscious driver.
                        </div>
                     </div>
                  </div>
                  <div class="listitem e632">
                     <div class="para e633">
                        <div class="quote e634">A and B 
                           <div class="emphasis e635">are</div> the latest-generation diesel
                           engines for the environmentally conscious driver.
                        </div>
                     </div>
                  </div>
                  <div class="listitem e636">
                     <div class="para e637">
                        <div class="quote e638">B and C 
                           <div class="emphasis e639">are</div> the latest-generation diesel
                           engines for the environmentally conscious driver.
                        </div>
                     </div>
                  </div>
                  <div class="listitem e640">
                     <div class="para e641">
                        <div class="quote e642">A, B and C 
                           <div class="emphasis e643">are</div> the latest-generation
                           diesel engines for the environmentally conscious
                           driver.
                        </div>
                     </div>
                  </div>
               </div>
               <div class="para e644">And so on, for any permutations that may arise. The conclusion, in my mind, is
                  obvious: any more complex sentences involving 
                  <div class="emphasis e645">named</div>
                  variants in this manner should probably be avoided in favour of a more generic
                  label (say, 
                  <div class="quote e646">diesel engine</div> or 
                  <div class="quote e647">D</div>, in this case) in
                  any real-world document.
               </div>
            </div>
         </div>
      </div><a name="EndNotesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e648">
         <div class="title e649">End Notes</div><a name="InOrOutOfLine?ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e650">
            <div class="title e651">In Or Out Of Line?</div>
            <div class="para e652">Inline (meaning 
               <div class="quote e653">placed in the physical XML file</div>) profiles can be
               messy. If new profiles need to be added to an otherwise unchanged XML file, it must
               nevertheless be edited to include those new profiles. In a system with version
               handling and modularisation, this frequently means that a profile change will result
               in that any module referring to the edited XML file must also be updated.
            </div>
            <div class="para e654">Moving the profiles out of line, to a linkbase, immediately solves this problem.
               With the profiles stored outside the physical XML files, the files only need to be
               edited if their contents (beyond the profiling information) are changed. Adding or
               editing profiles requires changing the linkbase, not the XML modules.
            </div>
            <div class="para e655">On the other hand, inline profiles are easy to display and highlight in an editor
               simply by adding some CSS. Out of line, there needs to be some kind of interaction
               between the editor and the linkbase. This may or may not be practical for an author,
               depending on the situation, and may be difficult to implement.
            </div>
            <div class="para e656">So which one is better? Leaving aside the implementation considerations for a
               moment, in a highly modularised
               <div class="popupBox e657">
                  <div class="popupLabel" onmouseover="$('#d1e1418').show('1000');" onmouseout="$('#d1e1418').hide('1000');">[ footnote ]</div>
                  <div id="d1e1418" style="display: none;">
                     <div class="footnote">
                        <div class="para e658">With multiple reuse levels or significant numbers of reusable modules, or
                           both.
                        </div>
                     </div>
                  </div>
               </div> document management environment where each module is individually
               version handled for full traceability, moving the profiles out of line should be
               considered, especially if editing a module always means that it must be checked out
               and its version updated. A simple profile update inline could require updating not
               only the current module and its translations, but also any module that links to the
               current module, plus their translations.
            </div>
         </div><a name="I'mNotAloneANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e659">
            <div class="title e660">I'm Not Alone</div>
            <div class="para e661">The techniques used when profiling and filtering, of course, are quite common.
               I've mentioned DITA as an example, but the same principles are found everywhere.
               DocBook's profiling attributes (
               <div class="code e662">arch</div>, 
               <div class="code e663">os</div>, etc) come to
               mind, as do the more generic 
               <div class="code e664">role</div> attribute found in many
               schemas.
            </div>
            <div class="para e665">Indirection techniques to handle renaming are, of course, not uncommon, and are
               used in both XML-based systems and outside them. For a comprehensive, and, in many
               ways, different, profiling mechanism, have a look at the S1000D technical
               documentation specification's 
               <div class="quote e666">applicability model</div> (see 
               <div class="xref e667" linkend="id-s1000d-applic-model"></div>
               for an introduction, or download the S1000D spec itself at 
               <div class="xref e668" linkend="id-s1000d-home"></div>).
            </div>
            <div class="para e669">The S1000D applicability model is frequently implemented by S1000D vendors in the
               so-called 
               <div class="emphasis e670">S1000D Common Source Database (CSDB)</div> using a certain
               level of indirection. There is a product lookup database that is set up to manage
               and map product semantics with values (such as aircraft manufacturer names, product
               serial numbers and so on), including versioning. S1000D also includes an assertion
               mechanism, implemented to varying degrees by vendors.
            </div>
            <div class="para e671">Finally, it should be noted that the S1000D applicability model may use
               out-of-line profiling, for example, to manage inline filtering conditions.
            </div>
         </div><a name="ThankYouANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e672">
            <div class="title e673">Thank You</div>
            <div class="para e674">My sincerest thanks must go to the reviewers of this paper.  I have attempted to
               update the paper accordingly, trying to clarify, expand and remove content as
               suggested by the many helpful comments. Any mistakes, omissions and
               misunderstandings are solely mine, however.
            </div>
            <div class="para e675">A far better title than the one originally supplied by me was kindly provided by
               the Balisage program committee.  My original title, I feel, is best left
               unmentioned, but for the new one, my heartfelt (and relieved) thanks must go to
               Tommie &amp; Co. 
            </div>
         </div>
      </div><a name="BibliographyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e676">
         <div class="title e677">Bibliography</div>
         <div class="bibliomixed e678" xml:id="id-dita">DITA 
            <div class="emphasis e679">audience</div> Attribute 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e680" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://docs.oasis-open.org/dita/v1.2/os/spec/langref/audience.html#audience</div>
         </div>
         <div class="bibliomixed e681" xml:id="id-urn">Uniform Resource Names (URN) Namespace Definition Mechanisms 
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e682" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.ietf.org/rfc/rfc3406.txt</div>
         </div>
         <div class="bibliomixed e683" xml:id="id-idso-sch">Schematron ISO
            standard 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e684" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://standards.iso.org/ittf/PubliclyAvailableStandards/index.html</div>
         </div>
         <div class="bibliomixed e685" xml:id="id-xsdassertions">XML Schema 1.1 Structures
            (Assertions) 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e686" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xmlschema11-1/#cAssertions</div>
         </div>
         <div class="bibliomixed e687" xml:id="id-xlink">XML Linking Language (XLink) Version
            1.1 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e688" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xlink11/</div>
         </div>
         <div class="bibliomixed e689" xml:id="id-prescod">XLink: behavior must
            go! 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e690" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.biglist.com/lists/xsl-list/archives/199905/msg00218.html</div>
         </div>
         <div class="bibliomixed e691" xml:id="id-s1000d-home">The S1000D Web
            Site 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e692" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://public.s1000d.org/Pages/Home.aspx</div>
         </div>
         <div class="bibliomixed e693" xml:id="id-s1000d-applic-model">S1000D Applicability Model 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e694" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.ataebiz.org/forum/2008_ata_e-biz_forum_agenda/Applicability_vanRotterdam.pdf</div>
         </div>
      </div>
   </div>
</div>