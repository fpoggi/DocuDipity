<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#UsingAtomCategorizationtoBuildDynamicApplicationsANCHOR" name="UsingAtomCategorizationtoBuildDynamicApplicationsTOC">Using Atom Categorization to Build Dynamic Applications</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ListsStacksandPilesANCHOR" name="ListsStacksandPilesTOC">Lists, Stacks, and Piles</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#GettingOrganizedwithAtomFeedsANCHOR" name="GettingOrganizedwithAtomFeedsTOC">Getting Organized with Atom Feeds</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TermCategorizationinAtomANCHOR" name="TermCategorizationinAtomTOC">Term Categorization in Atom</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#GraphicalModelsforTermsANCHOR" name="GraphicalModelsforTermsTOC">Graphical Models for Terms</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#QueryingtoBuildListsANCHOR" name="QueryingtoBuildListsTOC">Querying to Build Lists</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BuildingApplicationsfromAtomFeedsANCHOR" name="BuildingApplicationsfromAtomFeedsTOC">Building Applications from Atom Feeds</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ArchitectureOverviewANCHOR" name="ArchitectureOverviewTOC">Architecture Overview</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AnExampleANCHOR" name="AnExampleTOC">An Example</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConclusionANCHOR" name="ConclusionTOC">Conclusion</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BibliographyANCHOR" name="BibliographyTOC">Bibliography</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">August 12 - 15, 2008</div>
         <div class="singletermTERMS">alex@milowski.com</div>
         <div class="singletermTERMS">Alexander</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2008</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">category</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">id</div>
         <div class="singletermTERMS">instructions</div>
         <div class="singletermTERMS">index pages</div>
         <div class="singletermTERMS">index</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">lists</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">match</div>
         <div class="singletermTERMS">Milowski</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">pets</div>
         <div class="singletermTERMS">piles</div>
         <div class="singletermTERMS">pile</div>
         <div class="singletermTERMS">pile of information</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
         <div class="singletermTERMS">qualifies</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">rdf:nil</div>
         <div class="singletermTERMS">related</div>
         <div class="singletermTERMS">reconstitute</div>
         <div class="singletermTERMS">R.</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">scheme</div>
         <div class="singletermTERMS">software</div>
         <div class="singletermTERMS">stacks</div>
         <div class="singletermTERMS">scopes</div>
         <div class="singletermTERMS">software</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">term</div>
         <div class="singletermTERMS">the pile</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">xml:base</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="UsingAtomCategorizationtoBuildDynamicApplicationsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.2">
      <div class="title e1">Using Atom Categorization to Build Dynamic Applications</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2008</div>
            <div class="confdates e5">August 12 - 15, 2008</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">Atom feeds provide the ability to categorize both the feed and its
               entries. This categorization provides a simple and easy way for feed authors
               to associated terms and semantics to their feed contents. By using this
               categorization, authors can keep their information organized while
               re-purposing them to build dynamic web applications.
            </div>
         </div>
         <div class="author e8">
            <div class="personname e9">
               <div class="firstname e10">R.</div>
               <div class="othername e11">Alexander</div>
               <div class="surname e12">Milowski</div>
            </div>
            <div class="personblurb e13">
               <div class="para e14">A long-time markup and web geek.</div>
            </div>
            <div class="affiliation e15">
               <div class="orgname e16">Appolux, Inc.</div>
            </div>
            <div class="email e17">alex@milowski.com</div>
         </div>
         <div class="legalnotice e18">
            <div class="para e19">Copyright Â© 2008 R. Alexander Milowski</div>
         </div>
      </div><a name="ListsStacksandPilesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e20">
         <div class="title e21">Lists, Stacks, and Piles</div>
         <div class="para e22">If you could see my desk at home or my office, you'd probably find
            it a horrific disorganized disaster with post-it notes on the desktop and
            monitor, stacks of papers and other items, and giant pile at one end. On
            the other hand, I see it as disorganized ordered mess. I know where to
            find what I need and there is a system of lists, stacks, and piles.
         </div>
         <div class="para e23">The post-it notes contain lists of things I need to do, information
            from "recent queries", reminders on one sort or another, and they are all
            ordered and carefully placed on my desk as to their importance. In
            relation to these lists, I have stacks of bills, papers, and other urgent items
            that need to be filed, where each stack has its purpose
            or category. Finally, I have giant pile of things that were
            formally in stacks. For some reason or another, they've expired but need
            to be filed. Someday I'll get around to that filing and make that giant
            pile not so giant anymore.
         </div>
         <div class="para e24">It shouldn't surprise you to find that my computers are similarly
            organized. It is easy to recognize the stacks of documents shuttered into
            folders by their relationship to each other or my stacks of photos or
            videos from my camera. My desktop has become a giant "pile of things
            downloaded" overtime and the whole computer is somewhat of a giant pile of
            information I've retained.
         </div>
         <div class="para e25">I've come to realized that this isn't going to change. What I need
            is for software and applications to adjust themselves to my way of storing
            information. Not finding what I needed and discovering the usefulness of
            Atom feeds, I created the open-source atomojo 
            <div class="xref e26" linkend="atomojo"></div> project to serve my "disorganized ordered
            mess" nature and store my information.
         </div>
         <div class="para e27">What I discovered was that even though I'm a software developer and
            work with things are often tightly controlled and highly structured, much
            of the information I produce or interact with--media, information bits,
            documents of all kinds--tends to be loosely organized into "stacks" rather
            than tightly controlled "lists". This is especially true when it comes to
            media coming from personal interactions, family, vacations and other
            things not related to business.
         </div>
         <div class="para e28">In fact, I'd say that the immense popularity of web search and the
            introduction of desktop search trends well with the idea that people
            generate stacks and piles of information that are loosely grouped
            together. I'd go even further to say that a "list" is a rare thing and can
            be hard to develop.
         </div>
         <div class="para e29">Let's then face the fact that people don't produce 
            <div class="quote e30">lists</div>
            as much as they produce 
            <div class="quote e31">stacks</div> and 
            <div class="quote e32">piles</div>.  Producing organized and
            structured information takes time and so we just shove our media, documents, and other
            information into the nearest stack (or pile) that looks appropriate. We do
            that with a slightly dishonest hope that we'll come back to it later and
            "get organized."
         </div>
         <div class="para e33">In the end, this information should be the basis for the
            applications and communications that we share with others on the Internet.
            It could drive our websites, our picture galleries, and our commerce
            engines if we only had a way to get it organized. Thus, my messy desk led
            me to believe that if I got organized I could build better dynamic
            applications.
         </div>
      </div><a name="GettingOrganizedwithAtomFeedsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e34">
         <div class="title e35">Getting Organized with Atom Feeds</div>
         <div class="para e36">Atom feeds are like stacks of objects. There is an order to the
            stack from the first entry to the last. You often have to sort through the
            entries from first to last to find what you want. But the feed has a
            purpose and so there is a loose relationship between each entry.
         </div>
         <div class="para e37">While certain information resources have processable content, many
            others are not so easily searched. That is, an image is difficult to
            search against without human interaction unless there are annotations. As
            a result, the metadata encoded in the feed entry is very
            important.
         </div>
         <div class="para e38">With the recent invention of the Atom Publishing Protocol
            (AtomPub) 
            <div class="xref e39" linkend="apprfc"></div>, creation and manipulation
            of both entries and their associated metadata is relatively easy. As such,
            rather than shoving that picture from your last vacation into the nearest
            folder, you can tuck it away nicely into a Atom feed. The consequence is
            the natural next step is to author some metadata.
         </div>
         <div class="para e40">Entries have a rich vocabulary with which you can annotate your
            resources. Just by looking at the entry you can learn about the author,
            titles, summaries, and many other aspects. This enhances the
            ability to retrieve that object later.
         </div><a name="TermCategorizationinAtomANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e41">
            <div class="title e42">Term Categorization in Atom</div>
            <div class="para e43">One of the interesting parts of the Atom vocabulary is the
               
               <div class="code e44">category</div> element associated with both feeds and entries.
               This element has two important attributes called
               
               <div class="quote e45">
                  <div class="code e46">scheme</div>
               </div> and
               
               <div class="quote e47">
                  <div class="code e48">term</div>
               </div>. The 
               <div class="code e49">scheme</div> attribute is
               an URI value that 
               <div class="quote e50">qualifies</div> or 
               <div class="quote e51">scopes</div> the 
               <div class="code e52">term</div>
               attribute's value. The element itself can contain any content--text or
               elements--but none is defined by the Atom Syndication Format 
               <div class="xref e53" linkend="atomrfc"></div>.
            </div>
            <div class="para e54">If you concatenate the 
               <div class="code e55">scheme</div> and 
               <div class="code e56">term</div>
               attribute values and assume a default for when the 
               <div class="code e57">scheme</div>
               attribute is omitted, the result is a URI. This
               value can be interpreted as a leaf term in some unnamed ontology
               that labels the entry or feed with that term. As the
               
               <div class="code e58">category</div> element may contain content, a value can be
               associated with the term.
            </div>
            <div class="para e59">This interpretation means that for each 
               <div class="code e60">category</div>
               element you get a RDF 
               <div class="xref e61" linkend="rdf"></div> triple. This
               triple is constructed such that the subject is the entry or feed,
               the predicate is the term URI, and the object is the value of the
               element. When the 
               <div class="code e62">category</div> element is empty, the value
               defaults to 
               <div class="code e63">rdf:nil</div>.
            </div>
         </div><a name="GraphicalModelsforTermsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e64">
            <div class="title e65">Graphical Models for Terms</div>
            <div class="para e66">Each feed generates a simple graphical model using the unique
               
               <div class="code e67">id</div> element values to represent the subjects in the triples.
               For example, given the feed in 
               <div class="xref e68" linkend="feed-example"></div>,
               the graph in 
               <div class="xref e69" linkend="graph-example"></div> is generated using
               edge labels:
            </div>
            <div class="itemizedlist e70">
               <div class="listitem e71">
                  <div class="para e72">E: http://www.atomojo.org/O/type/entry</div>
               </div>
               <div class="listitem e73">
                  <div class="para e74">pets: http://www.atomojo.org/O/keywords/pets</div>
               </div>
               <div class="listitem e75">
                  <div class="para e76">kind: http://www.atomojo.org/O/keywords/kind</div>
               </div>
               <div class="listitem e77">
                  <div class="para e78">breed: http://www.atomojo.org/O/keywords/breed</div>
               </div>
               <div class="listitem e79">
                  <div class="para e80">color: http://www.atomojo.org/O/keywords/color</div>
               </div>
               <div class="listitem e81">
                  <div class="para e82">name: http://www.atomojo.org/O/keywords/name</div>
               </div>
            </div>
            <div class="figure e83" xml:id="feed-example">
               <div class="title e84">Example Feed</div>
               <div class="programlisting e85" xml:space="preserve">
                  &lt;feed xmlns='http://www.w3.org/2005/Atom'&gt;
                  &lt;title&gt;Pets&lt;/title&gt; &lt;id&gt;id:feed:1&lt;/id&gt;
                  &lt;updated&gt;2008-07-10T15:45:26-07:00&lt;/updated&gt;
                  &lt;category term='pets'/&gt;
                  
                  &lt;entry&gt;
                  &lt;title&gt;My Cat&lt;/title&gt;
                  &lt;id&gt;id:entry:1&lt;/id&gt;
                  &lt;updated&gt;2008-07-10T15:45:26-07:00&lt;/updated&gt;
                  &lt;category term='pet'/&gt;
                  &lt;category term='kind'&gt;cat&lt;/category&gt;
                  &lt;category term='color'&gt;tan/tiger&lt;/category&gt;
                  &lt;category term='name'&gt;bruno&lt;/category&gt;
                  &lt;content type='image/png' src='bruno.png'/&gt;
                  &lt;/entry&gt;
                  
                  &lt;entry&gt;
                  &lt;title&gt;My Dog&lt;/title&gt;
                  &lt;id&gt;id:entry:2&lt;/id&gt;
                  &lt;updated&gt;2008-07-10T15:40:17-07:00&lt;/updated&gt;
                  &lt;category term='pet'/&gt;
                  &lt;category term='kind'&gt;dog&lt;/category&gt;
                  &lt;category term='breed'&gt;siberian husky&lt;/category&gt;
                  &lt;category term='color'&gt;white&lt;/category&gt;
                  &lt;category term='name'&gt;hudson&lt;/category&gt;
                  &lt;content type='image/png' src='hudson.png'/&gt;
                  &lt;/entry&gt;
                  
                  &lt;/feed&gt;
                  
               </div>
            </div>
            <div class="figure e86" xml:id="graph-example">
               <div class="title e87">Feed Graphical Model</div>
               <div class="mediaobject e88">
                  <div class="imageobject e89">
                     <div class="metaBox e90"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e174').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e174" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e90'
                              </span><span class="metaAttribute">fileref='../../../vol1/graphics/Milowski01/Milowski01-001.png'
                              </span><span class="metaAttribute">format='png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </div><a name="QueryingtoBuildListsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e91">
            <div class="title e92">Querying to Build Lists</div>
            <div class="para e93">Being able to query your feeds becomes very important after enough
               content as been collected. That is, your feeds start to look a lot like
               an unorganized 
               <div class="quote e94">pile</div>. Past a certain number, keeping track of just where
               something can be found gets to be very difficult.
            </div>
            <div class="para e95">While the Atom vocabulary provides many interesting elements (e.g.
               title) by which you might search, the entry and feed categorization
               provide a fine-grained set of information on which a query can be
               performed. Simple queries can be used to retrieve entries from feeds
               simply by pulling those entries who have certain terms.
            </div>
            <div class="para e96">We'd like a query that can:</div>
            <div class="itemizedlist e97">
               <div class="listitem e98">
                  <div class="para e99">provide a set of terms for the basis of the query,</div>
               </div>
               <div class="listitem e100">
                  <div class="para e101">allow comparison of any values associated with those
                     terms,
                  </div>
               </div>
               <div class="listitem e102">
                  <div class="para e103">return the query result as a "reconstituted" feed.</div>
               </div>
            </div>
            <div class="para e104">Fortunately, SPARQL 
               <div class="xref e105" linkend="sparql"></div> has
               recently become a W3C recommendation and we can use this to query our
               
               <div class="quote e106">pile</div> of feeds.
            </div>
            <div class="para e107">For example, if we want to retrieve the feed with the keyword
               
               <div class="quote e108">
                  <div class="code e109">pets</div>
               </div>, we could query on the term
               
               <div class="code e110">http://www.atomojo.org/O/keywords/pets</div> as shown in 
               <div class="xref e111" linkend="petsfeed"></div>.
            </div>
            <div class="figure e112" xml:id="petsfeed">
               <div class="title e113">Retrieve the pets feed</div>
               <div class="programlisting e114" xml:space="preserve">
                  PREFIX k: &lt;http://www.atomojo.org/O/keyword/&gt;
                  SELECT ?e WHERE { ?e k:pets () . }
                  
               </div>
            </div>
            <div class="para e115">Similarly, we could restrict the query to return all pet entries
               as in 
               <div class="xref e116" linkend="allpets"></div>.
            </div>
            <div class="figure e117" xml:id="allpets">
               <div class="title e118">Retrieve all pets entries</div>
               <div class="programlisting e119" xml:space="preserve">
                  PREFIX k: &lt;http://www.atomojo.org/O/keyword/&gt;
                  PREFIX t: &lt;http://www.atomojo.org/O/type/&gt;
                  SELECT ?e WHERE { ?e t:entry (); k:pet () . }
                  
               </div>
            </div>
            <div class="para e120">If we want to search by value, we could find the pet named
               'hudson' as in 
               <div class="xref e121" linkend="findhudson"></div>.
            </div>
            <div class="figure e122" xml:id="findhudson">
               <div class="title e123">Find Hudson</div>
               <div class="programlisting e124" xml:space="preserve">
                  PREFIX k: &lt;http://www.atomojo.org/O/keyword/&gt;
                  SELECT ?e WHERE { ?e k:pet () ; k:name "hudson" .}
                  
               </div>
            </div>
            <div class="para e125">As a query language, SPARQL is sufficiently powerful to express
               many types of queries. If the graphical model of the feeds is extended
               to include properties from the atom feed vocabulary, queries can be
               formulated that mix categorization with the feed structure (e.g. find
               all pet entries whose title contains a certain word).
            </div>
            <div class="para e126">Since we are interested in feeds and entries, the real use of the
               query is to 
               <div class="quote e127">reconstitute</div> the result into a feed. This can be done by
               a simple process using these rules:
            </div>
            <div class="orderedlist e128">
               <div class="listitem e129">
                  <div class="para e130">For each matching feed, return an entry that summarizes the
                     feed, its categorization, and a single link of relation 
                     <div class="quote e131">
                        <div class="code e132">related</div>
                     </div>
                     that points to the feed's resource URI.
                  </div>
               </div>
               <div class="listitem e133">
                  <div class="para e134">For each matching entry, return the entry with the
                     
                     <div class="code e135">xml:base</div> attribute set such that the link relations are
                     preserved.
                  </div>
               </div>
            </div>
            <div class="para e136">As a result of this process, the query result is just another feed
               that can be consumed by any Atom-enabled client.
            </div>
         </div>
      </div><a name="BuildingApplicationsfromAtomFeedsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e137">
         <div class="title e138">Building Applications from Atom Feeds</div><a name="ArchitectureOverviewANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e139">
            <div class="title e140">Architecture Overview</div>
            <div class="para e141">With our ability to annotate and query arbitrary content as feed
               entries, we can now describe a dynamic application architecture show in
               
               <div class="xref e142" linkend="architecture"></div> that is based on atomojo's AtomPub and
               SPARQL abilities. On the far left is the application author who is
               responsible for loading content and configuring the application. On the
               far right is the end user of the application who is using a
               browser-based application presented by the system. In the middle is the
               web application server and atomojo server instances.
            </div>
            <div class="figure e143" xml:id="architecture">
               <div class="title e144">Atomojo-based Architecture</div>
               <div class="mediaobject e145">
                  <div class="imageobject e146">
                     <div class="metaBox e147"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e277').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e277" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e147'
                              </span><span class="metaAttribute">fileref='../../../vol1/graphics/Milowski01/Milowski01-002.png'
                              </span><span class="metaAttribute">format='png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e148">The author's responsibility is not only to provide the content
               from 
               <div class="quote e149">the pile</div> and appropriate annotations, but also to provide
               
               <div class="quote e150">instructions</div> through the same means. These instructions provide
               content layouts, rules for content organization, web content such as
               javascript code or CSS stylesheets, and even service components. While
               some of this content is the domain of a web programmer, much of it is
               just simple entries with categorizations as to how to build resources on
               the web application server.
            </div>
            <div class="para e151">The web application server performs several tasks:</div>
            <div class="itemizedlist e152">
               <div class="listitem e153">
                  <div class="para e154">provides content proxies from the atomojo server to deliver
                     content to the browser,
                  </div>
               </div>
               <div class="listitem e155">
                  <div class="para e156">loads and configures layouts for web pages that are to be
                     built from atom feeds,
                  </div>
               </div>
               <div class="listitem e157">
                  <div class="para e158">loads and configures resources that are SPARQL queries to the
                     atomojo server,
                  </div>
               </div>
               <div class="listitem e159">
                  <div class="para e160">loads custom application components for specialized
                     services.
                  </div>
               </div>
            </div>
            <div class="para e161">The configuration information is retrieved from the atomojo server
               by a series of SPARQL queries. These queries allow the configuration
               information to be stored anywhere the author prefers.
            </div>
         </div><a name="AnExampleANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e162">
            <div class="title e163">An Example</div>
            <div class="para e164">When the web application server periodically updates itself, it
               performs a set of queries against the atomojo server to retrieve
               configuration information. For example, to find all the layouts, the
               server uses the
               query shown in 
               <div class="xref e165" linkend="layouts"></div>.  This query
               returns a set of entries that are the instructions for how each feeds is
               processed to produce a web page.
            </div>
            <div class="figure e166" xml:id="layouts">
               <div class="title e167">Query for All Layouts</div>
               <div class="programlisting e168" xml:space="preserve">
                  PREFIX www: &lt;http://www.atomojo.org/O/www/configuration/&gt;
                  SELECT ?e WHERE { ?e www:layout () . }
                  
               </div>
            </div>
            <div class="para e169">A typical layout entry is a media resource entry that contains a
               script (e.g. XSLT) for transforming the feed on the server into
               appropriate web content. While the
               transformation as shown in 
               <div class="xref e170" linkend="layout2html"></div> produces HTML, nothing precludes generation of images or other
               non-XML media types.
            </div>
            <div class="figure e171" xml:id="layout2html">
               <div class="title e172">A Layout Entry</div>
               <div class="programlisting e173" xml:space="preserve">
                  &lt;entry xmlns='http://www.w3.org/2005/Atom'&gt;
                  &lt;title&gt;Default Layout&lt;/title&gt;
                  &lt;id&gt;urn:uuid:18e4d0870ee46-4ff5-8895-bdd0ee0fb226&lt;/id&gt;
                  &lt;published&gt;2008-07-18T11:22:06-07:00&lt;/published&gt;
                  &lt;updated&gt;2008-07-18T11:42:06-07:00&lt;/update&gt;
                  &lt;category scheme='http://www.atomojo.org/O/www/configuration/'
                  term='layout'/&gt;
                  &lt;category scheme='http://www.atomojo.org/O/www/configuration/layout/'
                  term='media-type'&gt;text/html&lt;/category&gt;
                  &lt;content src='default-layout.xsl' type='application/xslt+xml'/&gt;
                  &lt;/entry&gt;
                  
               </div>
            </div>
            <div class="para e174">The layouts are used by internal or custom components where the
               choice of layout is based on a
               number of matching criteria. These layout rules can be restricted to
               match by resource path or require that the feed being rendered to have
               certain terms (i.e. category elements).  This allows the author to select
               the layout based on categorization rather than location in the atomojo
               server.
            </div>
            <div class="para e175">This approach has been used to configure the proxies, layouts,
               queries to the server, and application components as shown in
               
               <div class="xref e176" linkend="configuration"></div>.
            </div>
            <div class="figure e177" xml:id="configuration">
               <div class="title e178">A Configuration Feed</div>
               <div class="programlisting e179" xml:space="preserve">
                  &lt;feed xmlns:app="http://www.w3.org/2007/app" xmlns="http://www.w3.org/2005/Atom" xml:base="./"&gt;
                  &lt;id&gt;urn:uuid:9a1ecf4e-2495-4a42-9b53-37b25dff731e&lt;/id&gt;
                  &lt;updated&gt;2008-07-17T14:38:20-07:00&lt;/updated&gt;
                  &lt;title&gt;Configuration&lt;/title&gt;
                  &lt;author&gt;&lt;name&gt;Alex Milowski&lt;/name&gt;&lt;/author&gt;
                  &lt;link href="" rel="edit"/&gt;
                  &lt;category scheme="http://www.atomojo.org/O/type/feed/" term="hidden"/&gt;
                  &lt;link href="" rel="self"/&gt;
                  
                  &lt;entry&gt;
                  &lt;title type="text"&gt;default-layout.xsl&lt;/title&gt;
                  &lt;id&gt;urn:uuid:18e4d087-ee46-4ff5-8895-bdd0ee0fb226&lt;/id&gt;
                  &lt;published&gt;2008-07-18T11:22:09-07:00&lt;/published&gt;
                  &lt;updated&gt;2008-07-18T11:22:09-07:00&lt;/updated&gt;
                  &lt;app:edited&gt;2008-07-18T12:01:59-07:00&lt;/app:edited&gt;
                  &lt;link href="./_/18e4d087-ee46-4ff5-8895-bdd0ee0fb226" rel="edit"/&gt;
                  &lt;content type="application/xslt+xml" src="default-layout.xsl"/&gt;
                  &lt;category scheme="http://www.atomojo.org/O/www/configuration/"
                  term="layout"/&gt;
                  &lt;category scheme="http://www.atomojo.org/O/www/configuration/layout/"
                  term="media-type"&gt;text/html&lt;/category&gt;
                  &lt;link href="default-layout.xsl" rel="edit-media"/&gt;
                  &lt;/entry&gt;
                  
                  &lt;entry&gt;
                  &lt;published&gt;2008-07-17T14:43:17-07:00&lt;/published&gt;
                  &lt;app:edited&gt;2008-07-17T17:44:55-07:00&lt;/app:edited&gt;
                  &lt;updated&gt;2008-07-17T14:43:17-07:00&lt;/updated&gt;
                  &lt;id&gt;urn:uuid:f080d0ee-a1b2-4012-a916-b0d915ea2cc4&lt;/id&gt;
                  &lt;title type="text"&gt;Proxy&lt;/title&gt;
                  &lt;author&gt;&lt;name&gt;Alex Milowski&lt;/name&gt;&lt;/author&gt;
                  &lt;link href="./_/f080d0ee-a1b2-4012-a916-b0d915ea2cc4" rel="edit"/&gt;
                  &lt;category scheme="http://www.atomojo.org/O/www/configuration/"
                  term="application"/&gt;
                  &lt;category scheme="http://www.atomojo.org/O/www/configuration/application/"
                  term="match"/&gt;
                  &lt;category scheme="http://www.atomojo.org/O/www/configuration/application/"
                  term="proxy"&gt;resources&lt;/category&gt;
                  &lt;/entry&gt;
                  
                  &lt;entry&gt;
                  &lt;published&gt;2008-07-17T17:38:11-07:00&lt;/published&gt;
                  &lt;app:edited&gt;2008-07-17T17:44:24-07:00&lt;/app:edited&gt;
                  &lt;updated&gt;2008-07-17T17:38:11-07:00&lt;/updated&gt;
                  &lt;id&gt;urn:uuid:115b3132-4a9f-432d-bf7d-e366803d286e&lt;/id&gt;
                  &lt;title type="text"&gt;Index&lt;/title&gt;
                  &lt;author&gt;&lt;name&gt;Alex Milowski&lt;/name&gt;&lt;/author&gt;
                  &lt;link href="./_/115b3132-4a9f-432d-bf7d-e366803d286e" rel="edit"/&gt;
                  &lt;category scheme="http://www.atomojo.org/O/www/configuration/"
                  term="application"/&gt;
                  &lt;category scheme="http://www.atomojo.org/O/www/configuration/application/"
                  term="class"&gt;org.atomojo.www.util.script.IndexApplication&lt;/category&gt;
                  &lt;category scheme="http://www.atomojo.org/O/www/configuration/application/"
                  term="match"&gt;/{path}/&lt;/category&gt;
                  &lt;category scheme="http://www.atomojo.org/O/www/configuration/application/"
                  term="match"&gt;/&lt;/category&gt;
                  &lt;category scheme="http://www.atomojo.org/O/www/configuration/application/match/"
                  term="mode"&gt;exact&lt;/category&gt;
                  &lt;/entry&gt;
                  
                  &lt;entry&gt;
                  &lt;published&gt;2008-07-18T13:28:51-07:00&lt;/published&gt;
                  &lt;app:edited&gt;2008-07-18T13:28:51-07:00&lt;/app:edited&gt;
                  &lt;updated&gt;2008-07-18T13:28:51-07:00&lt;/updated&gt;
                  &lt;id&gt;urn:uuid:01ababd0-9c16-4f0f-a4a9-ffecfdecdaf3&lt;/id&gt;
                  &lt;title type="text"&gt;Software Index&lt;/title&gt;
                  &lt;author&gt;&lt;name&gt;Alex Milowski&lt;/name&gt;&lt;/author&gt;
                  &lt;category scheme="http://www.atomojo.org/O/www/configuration/"
                  term="application"/&gt;
                  &lt;category scheme="http://www.atomojo.org/O/www/configuration/application/"
                  term="class"&gt;org.atomojo.www.util.script.IndexApplication&lt;/category&gt;
                  &lt;category scheme="http://www.atomojo.org/O/www/configuration/application/"
                  term="match"&gt;/software/&lt;/category&gt;
                  &lt;category scheme="http://www.atomojo.org/O/www/configuration/application/match/"
                  term="mode"&gt;exact&lt;/category&gt;
                  &lt;category scheme="http://www.atomojo.org/O/www/configuration/application/"
                  term="resource"&gt;software&lt;/category&gt;
                  &lt;link href="./_/01ababd0-9c16-4f0f-a4a9-ffecfdecdaf3" rel="edit"/&gt;
                  &lt;/entry&gt;
                  
                  &lt;entry&gt;
                  &lt;published&gt;2008-07-18T13:26:49-07:00&lt;/published&gt;
                  &lt;app:edited&gt;2008-07-18T13:26:49-07:00&lt;/app:edited&gt;
                  &lt;updated&gt;2008-07-18T13:26:49-07:00&lt;/updated&gt;
                  &lt;id&gt;urn:uuid:3b5319ba-2e8b-4b66-94bc-ecf01bac77f8&lt;/id&gt;
                  &lt;title type="text"&gt;Software Resource&lt;/title&gt;
                  &lt;author&gt;&lt;name&gt;Alex Milowski&lt;/name&gt;&lt;/author&gt;
                  &lt;link href="./_/3b5319ba-2e8b-4b66-94bc-ecf01bac77f8" rel="edit"/&gt;
                  &lt;category scheme="http://www.atomojo.org/O/www/configuration/"
                  term="resource"/&gt;
                  &lt;category scheme="http://www.atomojo.org/O/www/configuration/resource/"
                  term="name"&gt;software&lt;/category&gt;
                  &lt;category scheme="http://www.atomojo.org/O/www/configuration/resource/"
                  term="relation"&gt;terms&lt;/category&gt;
                  &lt;category scheme="http://www.atomojo.org/O/www/configuration/resource/"
                  term="media-type"&gt;application/sparql-query&lt;/category&gt;
                  &lt;category scheme="http://www.atomojo.org/O/www/configuration/resource/"
                  term="query"&gt;
                  PREFIX k: &amp;lt;http://ww.atomojo.org/O/keyword/&amp;gt;
                  PREFIX t: &amp;lt;http://www.atomojo.org/O/type/&amp;gt;
                  SELECT ?e WHERE { ?e t:feed (); k:software () }
                  &lt;/category&gt;
                  &lt;/entry&gt;
                  &lt;/feed&gt;
                  
               </div>
            </div>
            <div class="para e180">In 
               <div class="xref e181" linkend="configuration"></div>, the first entry
               is the layout, the second entry is a proxy for content, and the third is
               an application component that comes packaged with atomojo. This
               component is used to create 
               <div class="quote e182">index pages</div> from feeds using the layouts and is typically
               mapped to 
               <div class="quote e183">index</div> resources (e.g. ends with a forward slash). These
               mappings are shown in the 
               <div class="quote e184">
                  <div class="code e185">match</div>
               </div> terms in the entries.
            </div>
            <div class="para e186">The last two entries are slightly different. Their purpose is to
               use the query facilities of the atomojo server to find all 
               <div class="quote e187">software</div>
               projects on the web site and then present a listing. They do this by
               associating a query to a resource that is then called by another 
               <div class="quote e188">index</div>
               component.
            </div>
            <div class="para e189">The last entry defines a query against the atomojo server for
               retrieving all those feeds that have a keyword of 
               <div class="quote e190">
                  <div class="code e191">software</div>
               </div>. That
               resource is used by the index component defined by the preceding entry.
               These two entries together configure an index page at 
               <div class="quote e192">
                  <div class="code e193">/software/</div>
               </div> on
               the web site.
            </div>
         </div>
      </div><a name="ConclusionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e194">
         <div class="title e195">Conclusion</div>
         <div class="para e196">In 
            <div class="xref e197" linkend="configuration"></div> in the last
            section, the last two entries achieved finding resources in our 
            <div class="quote e198">pile of
               information
            </div>. An author can now put information about software in any feed
            they choose  and, as long as it is
            annotated with a category element with a term value of 
            <div class="quote e199">
               <div class="code e200">software</div>
            </div>, it will
            show up on that software index page.
         </div>
         <div class="para e201">This is not remarkable. Plenty of software system exists that allow
            authored keywords to produce index information and then allow people to
            browse that information. What is interesting here is that we're using
            categorization and terms.
         </div>
         <div class="para e202">Any categorization--both formal and informal--can now be used to
            annotate information stored in the feeds. The annotations are not limited
            to keywords. Also, the combination of different terms and values can be
            used to create a very specific set of informaiton.
         </div>
         <div class="para e203">Similarly, the queries are not limited to simple retrieval
            exercises.  The SPARQL queries can perform complex union and intersection
            operations as well as filtering on term values.  As such, very specific
            data sets can be retrieved from the atomojo server.
         </div>
         <div class="para e204">As time goes by, queries can be developed to use whatever categorization
            evolves from the authors.  These queries can be used to
            re-purpose that original content without much, if any, change to the
            feed metadata.  The resulting feeds can then be associated with a web resource
            independent of how the author chose to organize the original entries and
            feeds. That is, I can create a disorganized pile of information and keep
            my website organized.
         </div>
      </div><a name="BibliographyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e205">
         <div class="title e206">Bibliography</div>
         <div class="bibliomixed e207" xml:id="atomojo">Milowski, R. "Atomojo" 2008
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e208" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://code.google.com/p/atomojo/</div>
         </div>
         <div class="bibliomixed e209" xml:id="atomrfc">Nottingham, M. and Sayre R., "RFC 4287: The
            Atom Syndication Format", December 2005
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e210" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.ietf.org/rfc/rfc4287.txt</div>
         </div>
         <div class="bibliomixed e211" xml:id="apprfc">Gregorio, J. and de hOra, B. "RFC 5023: The
            Atom Publishing Protocol", October 2007
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e212" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.ietf.org/rfc/rfc5023.txt</div>
         </div>
         <div class="bibliomixed e213" xml:id="sparql">Prud'hommeaux, E. and Seaborne, A. "SPARQL
            Query Language for RDF", January 2008
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e214" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/rdf-sparql-query/</div>
         </div>
         <div class="bibliomixed e215" xml:id="rdf">Hayes, P. "RDF Semantics", February 2004
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e216" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/rdf-mt/</div>
         </div>
      </div>
   </div>
</div>