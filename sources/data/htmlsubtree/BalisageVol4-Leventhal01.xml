<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#TheXMLChipat6YearsANCHOR" name="TheXMLChipat6YearsTOC">The XML Chip at 6 Years</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#%0AIntroduction%0AANCHOR" name="%0AIntroduction%0ATOC">
                  Introduction
                  </a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IsthereeconomicbenefittoaspecialpurposechipforXMLprocessing?ANCHOR" name="IsthereeconomicbenefittoaspecialpurposechipforXMLprocessing?TOC">Is there economic benefit to a special-purpose chip for XML processing?</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#%0AIsn'tXMLaccelerationinhardwareanunprovenapproach?%0A%09ANCHOR" name="%0AIsn'tXMLaccelerationinhardwareanunprovenapproach?%0A%09TOC">
                  Isn't XML acceleration in hardware an unproven approach?
                  	</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#%0AIsn'tanXMLchipdestinedtoquickobsolesenceduetofrequencyscaling(Moore'sLaw)andparallelization%0A(multicore)?%0A%09ANCHOR" name="%0AIsn'tanXMLchipdestinedtoquickobsolesenceduetofrequencyscaling(Moore'sLaw)andparallelization%0A(multicore)?%0A%09TOC">
                  Isn't an XML chip destined to quick obsolesence due to frequency scaling (Moore's
                  Law) and parallelization 
                  (multicore)?
                  	</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#%0AThesuccesseswithaccelerationcoprocessorshavebeenfewandfarbetweenGraphicsfloatingpoint%0AcryptographyRAIDTOE%E2%80%93againstmanyfailuresWhywilltheXMLchipbeoneofthoserareexceptions?%0A%09ANCHOR" name="%0AThesuccesseswithaccelerationcoprocessorshavebeenfewandfarbetweenGraphicsfloatingpoint%0AcryptographyRAIDTOE%E2%80%93againstmanyfailuresWhywilltheXMLchipbeoneofthoserareexceptions?%0A%09TOC">
                  The successes with acceleration coprocessors have been few and far between. Graphics,
                  floating point, 
                  cryptography, RAID, TOE – against many failures. Why will the XML chip be one of those
                  rare exceptions?
                  	</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#%0ADon%E2%80%99tall%E2%80%9Ctransformation%E2%80%9Dacceleratorshavethefundamentalproblemthattheaccelerationvalueis%0Alargelyneutralizedbythecopyincopyoutoverhead?Atleastuntilyouhavecachecoherenceand%0AacceleratorshaveaccesstomemoryasequalcitizenswiththeCPUs%0A%09ANCHOR" name="%0ADon%E2%80%99tall%E2%80%9Ctransformation%E2%80%9Dacceleratorshavethefundamentalproblemthattheaccelerationvalueis%0Alargelyneutralizedbythecopyincopyoutoverhead?Atleastuntilyouhavecachecoherenceand%0AacceleratorshaveaccesstomemoryasequalcitizenswiththeCPUs%0A%09TOC">
                  Don’t all “transformation” accelerators have the fundamental problem that the acceleration
                  value is 
                  largely neutralized by the copy-in, copy-out overhead? At least until you have cache
                  coherence and 
                  accelerators have access to memory as equal citizens with the CPUs.
                  	</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#%0AProvetomeyoucan%E2%80%99tdoacceleratedXMLwithaVonNeumanncore%0A%09ANCHOR" name="%0AProvetomeyoucan%E2%80%99tdoacceleratedXMLwithaVonNeumanncore%0A%09TOC">
                  Prove to me you can’t do accelerated XML with a Von Neumann core.
                  	</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#%0AIfIstartaprojecttouseanXMLchipwon%E2%80%99tIfindthatafter3yearsofplanninganddevelopment%0Athat%E2%80%9CMoore%E2%80%99scoresblewupourtailpipeagain%E2%80%9D?%0A%09ANCHOR" name="%0AIfIstartaprojecttouseanXMLchipwon%E2%80%99tIfindthatafter3yearsofplanninganddevelopment%0Athat%E2%80%9CMoore%E2%80%99scoresblewupourtailpipeagain%E2%80%9D?%0A%09TOC">
                  If I start a project to use an XML chip won’t I find that after 3 years of planning
                  and development 
                  that “Moore’s cores blew up our tailpipe again”?
                  	</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">Assertion:</div>
         <div class="singletermTERMS">accelerate</div>
         <div class="singletermTERMS">August 10, 2009</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">Eric</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">hardware acceleration</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">Lower unit cost.</div>
         <div class="singletermTERMS">Lower operating costs.</div>
         <div class="singletermTERMS">latency</div>
         <div class="singletermTERMS">Leventhal</div>
         <div class="singletermTERMS">Lemoine</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">Moore's Law:</div>
         <div class="singletermTERMS">Multicore:</div>
         <div class="singletermTERMS">Michael</div>
         <div class="singletermTERMS">multicore</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">power consumption</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">Senior Product Line Manager</div>
         <div class="singletermTERMS">software performance</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">XML Architect</div>
         <div class="singletermTERMS">XML acceleration</div>
         <div class="singletermTERMS">XML chip</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="TheXMLChipat6YearsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.2">
      <div class="title e1">The XML Chip at 6 Years</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">International Symposium on Processing XML Efficiently: Overcoming Limits on Space,
               Time, or Bandwidth
            </div>
            <div class="confdates e5">August 10, 2009</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">The XML chip is now more than six years old. The diffusion of this technology has
               been very
               limited, due, on the one hand, to the long period of evolutionary development needed
               to develop hardware
               capable of accelerating a significant portion of the XML computing workload and, on
               the other hand, to the 
               fact that the chip was invented by start-up Tarari in a commercial context which required,
               for business reasons,
               a minimum of public disclosure of its design features. It remains, nevertheless, a
               significant
               landmark that the XML chip has been sold and continuously improved for the last six
               years. From the
               perspective of general computing history, the XML chip is an uncommon example of a
               successful
               workload-specific symbolic computing device. With respect to the specific interests
               of the XML community,
               the XML chip is a remarkable validation of one of its core founding principles: normalizing
               on
               a data format, whatever its imperfections, would enable the developers to, eventually,
               create tools to 
               process it efficiently.
            </div>
            <div class="para e8">This paper was prepared for the International Symposium on Processing XML Efficiently:
               Overcoming Limits on Space, Time, or Bandwidth, a day of discussion among, predominately,
               software
               developers working in the area of efficient XML processing. The Symposium is being
               held as a workshop 
               within Balisage, a conference of specialists in markup theory. Given the interests
               of the audience this paper does not
               delve into the design features and principles of the chip itself; rather it presents
               a dialectic on 
               the motivation for the development of an XML chip in view of related and potentially
               competing developments in 
               scaling as it is commonly characterized as a manifestation of Moore's Law, parallelization
               through
               increasing the number of computing cores on general purpose processors (multicore
               Von Neumann architecture),
               and optimization of software.
            </div>
         </div>
         <div class="author e9">
            <div class="personname e10">
               <div class="firstname e11">Michael</div>
               <div class="surname e12">Leventhal</div>
            </div>
            <div class="personblurb e13">
               <div class="para e14">
                  Michael Leventhal has co-led the XML acceleration program at LSI (formerly Tarari)
                  for the last six 
                  years. Mr. Leventhal has been active in the XML developer community since its inception,
                  published 
                  many articles on XML, wrote the first book on the use of XML for the Internet, and
                  participated in 
                  W3C workgroups. He holds a degree in Electrical Engineering and Computer Science from
                  U.C. Berkeley.
                  
               </div>
            </div>
            <div class="affiliation e15">
               <div class="jobtitle e16">
                  Senior Product Line Manager
                  
               </div>
               <div class="orgname e17">
                  LSI Corporation
                  
               </div>
            </div>
         </div>
         <div class="author e18">
            <div class="personname e19">
               <div class="firstname e20">Eric</div>
               <div class="surname e21">Lemoine</div>
            </div>
            <div class="personblurb e22">
               <div class="para e23">
                  Eric Lemoine has co-led the XML acceleration program at LSI (formerly Tarari) for
                  the last six years. 
                  Dr. Lemoine is the lead inventor of many XML hardware-related patents. His main research
                  interest is 
                  the creation of very high performance purpose-built devices for machine-to-machine
                  interoperability. 
                  He received his PhD from the Université de Montpellier for his work on Reconfigurable
                  Hardware, 
                  working closely with pioneers in the field such as Professor Jean Vuillemin.
                  
               </div>
            </div>
            <div class="affiliation e24">
               <div class="jobtitle e25">
                  XML Architect
                  
               </div>
               <div class="orgname e26">
                  LSI Corporation
                  
               </div>
            </div>
         </div>
         <div class="legalnotice e27">
            <div class="para e28">Copyright © 2009 by the authors.  Used with
               			permission.
            </div>
         </div>
         <div class="keywordset e29" role="author">
            <div class="keyword e30">software performance</div>
            <div class="keyword e31">XML acceleration</div>
            <div class="keyword e32">XML chip</div>
            <div class="keyword e33">hardware acceleration</div>
            <div class="keyword e34">multicore</div>
            <div class="keyword e35">latency</div>
            <div class="keyword e36">power consumption</div>
         </div>
      </div><a name="%0AIntroduction%0AANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e37">
         <div class="title e38">
            Introduction
            
         </div>
         <div class="para e39">The XML chip is purpose-built silicon for high performance XML processing. It has
            the potential 
            to reduce server costs, to reduce power consumption, and to reduce latency. The paper
            compares the 
            performance of the XML chip (hybrid specialized hardware and software) with optimized
            XML software for 
            a number of operations. The benefits of the XML chip increase as CPUs get faster,
            especially with the 
            introduction of multi-core technology. There are challenges, notably the cost of copying
            data to and 
            from the co-processor, but the challenges can be overcome. Results show that the use
            of an XML 
            co-processor can reduce CPU cycles per byte of XML processed by amounts ranging from
            a factor of 3 to 
            a factor of 50 depending on the workload, while power consumption can be reduced by
            a factor of 7.
            
         </div>
         <div class="para e40">The purpose of the XML chip is not so much to make XML processing efficient as it
            is to make server 
            usage more efficient and cost-effective. Bandwidth can always be increased by multiplying
            the number 
            of servers but it may not be cost effective to do so. Latency reducation, on the other
            hand, is another 
            prime objective for the XML chip since latency is not improved either by multiplying
            cores or multiplying 
            servers. From the point of view of server efficiency XML is interesting to accelerate
            because it is the 
            closest thing there is to a ubiquitious computing workload. XML is the de facto choice
            for virtually all 
            communication between applications including web traffic (HTML, XHTML, and POX (plain
            old XML)), inter- 
            and intra-enterprise software (Web Services, REST and SOAP styles and POX, transaction
            processing (e.g., 
            financial, health records, government services), and identity management. Jon Bosak
            of Sun once famously 
            said “XML exists to give Java something to do.” Java and .NET as well as a plethora
            of popular scripting 
            languages all prominently feature XML APIs and the vast enterprise applications are
            constructed with XML 
            as the external – and sometimes internal – interface.
            		
         </div>
      </div><a name="IsthereeconomicbenefittoaspecialpurposechipforXMLprocessing?ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e41">
         <div class="title e42">Is there economic benefit to a special-purpose chip for XML processing?</div>
         <div class="popupBox e43">
            <div class="popupLabel" onmouseover="$('#d1e71').show('1000');" onmouseout="$('#d1e71').hide('1000');">[ blockquote ]</div>
            <div id="d1e71" style="display: none;">
               <div class="blockquote">
                  <div class="para e44">
                     <div class="emphasis e45">Assertion:</div> Significant acceleration/offload of XML processing would improve the efficiency and
                     value proposition of 
                     business-grade standard servers.
                  </div>
               </div>
            </div>
         </div>
         <div class="para e46">
            Metrics on the percentage of time spent processing XML on servers are, 
            frankly, not fiable. However, our studies of major enterprise software applications
            has demonstrated a 
            clear potential benefit to XML acceleration for the important class of servers dedicated
            to this task. 
            There is an experimentally-demonstrable argument that XML acceleration will enable
            important classes of 
            applications that clearly consume an unacceptable number of CPU cycles. These include:
            message-level 
            security, federated identity management, and message transformation for inter-application
            communication. 
            These XML-based technologies are key to addressing deep problems in security and identity
            and will further 
            an open, cloud-based flexible computing model. The value of enabling ultra-low cost
            XML processing cannot 
            be fully appreciated only by looking at the computing environment that exists where
            ulta-low cost XML 
            processing capabilities do not exist.
            		
         </div>
         <div class="para e47">
            The specific value-related benefits that can be realized from XML acceleration include:
            			
            <div class="itemizedlist e48">
               <div class="listitem e49">
                  <div class="para e50">Less CPU power needed as processing is offloaded onto a more effective special-purpose
                     
                     			processing unit. 
                     <div class="emphasis e51">Lower unit cost.</div>
                  </div>
               </div>
               <div class="listitem e52">
                  <div class="para e53">Lower power consumption as the XML processing unit is more energy-efficient on XML
                     
                     			workloads. 
                     <div class="emphasis e54">Lower operating costs.</div>
                  </div>
                  <div class="figure e55" floatstyle="0" xml:id="powerstudy">
                     <div class="mediaobject e56">
                        <div class="imageobject e57">
                           <div class="metaBox e58"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e94').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e94" class="metaSource" style="display:none;">                
                                 &lt;imagedata<span class="metaAttribute">class='e58'
                                    </span><span class="metaAttribute">fileref='../../../vol4/graphics/Leventhal01/Leventhal01-001.jpg'
                                    </span><span class="metaAttribute">format='jpg'
                                    </span><span class="metaAttribute">width='100%'
                                    </span>
                                 &gt;
                                 
                              </div>
                           </div>
                        </div>
                        <div class="caption e59">
                           <div class="para e60">Power Consumption over XML Workload</div>
                        </div>
                     </div>
                  </div>
               </div>
               <div class="listitem e61">
                  <div class="para e62">Higher core utilization. Much of the hard work of parallelizing 
                     			applications to take advantage of multicore applications has been done in the XML
                     chip 
                     			in the controller and software interface layer between the application software
                     and hardware. 
                     			
                     <div class="emphasis e63">Reduction in the number of servers needed for peak loads.</div>
                  </div>
               </div>
               <div class="listitem e64">
                  <div class="para e65">Simplifies implementation and maintenance and management through ability 
                     			to meet peak loads, reduction in number of servers, elimination of bottlenecks,
                     less 
                     			programming effort to parallelize applications. 
                     <div class="emphasis e66">Lowers failure rate and cost overruns of major 
                        			IT projects.
                     </div>
                  </div>
               </div>
            </div>
            		
         </div>
      </div><a name="%0AIsn'tXMLaccelerationinhardwareanunprovenapproach?%0A%09ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e67">
         <div class="title e68">
            Isn't XML acceleration in hardware an unproven approach?
            	
         </div>
         <div class="popupBox e69">
            <div class="popupLabel" onmouseover="$('#d1e112').show('1000');" onmouseout="$('#d1e112').hide('1000');">[ blockquote ]</div>
            <div id="d1e112" style="display: none;">
               <div class="blockquote">
                  <div class="para e70">
                     <div class="emphasis e71">Assertion:</div> LSI’s Tarari group has successfully delivered XML acceleration co-processors for
                     over six years. These 
                     products have been used in high-performance, specialized XML processing appliances.
                     	
                  </div>
               </div>
            </div>
         </div>
         <div class="para e72">This technology is not a flash-in-the-pan; it has been proven by demanding customers
            of Tarari 
            	over six years, processing billions of XML messages. It is a remarkable success story
            for 
            	hardware-based acceleration, albeit, not generally well-known due to its initial
            targeting to the 
            	niche market of specialized, network-oriented, XML processing appliances. The work
            on XML acceleration 
            	actually goes back 4 years earlier, originating in a company acquired by Intel. Thus
            a total of ten 
            	years of R&amp;D has been invested in this technology leading to successful commercialization.
            	
         </div>
         <div class="para e73">
            	The Tarari XML processor was used in web services gateways, application-oriented
            networking devices, 
            	and security appliances. Tarari was bought by LSI Corporation in October of 2007.
            LSI continues to sell 
            	an XML processor and to develop the technology. In  May of 2009 HP announced an appliance
            product 
            	integrating the LSI Tarari XML chip and associated software with SAP’s integration
            platform software 
            	NetWeaver PI. This product is first use of the XML chip directly integrated with
            a major enterprise 
            	application software package, as opposed to prior experience with special-purpose
            XML acceleration 
            	appliances and network devices. This development may be an important step in the
            mainstreaming of XML 
            	acceleration hardware.
            	
         </div>
      </div><a name="%0AIsn'tanXMLchipdestinedtoquickobsolesenceduetofrequencyscaling(Moore'sLaw)andparallelization%0A(multicore)?%0A%09ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e74">
         <div class="title e75">
            Isn't an XML chip destined to quick obsolesence due to frequency scaling (Moore's
            Law) and parallelization 
            (multicore)?
            	
         </div>
         <div class="popupBox e76">
            <div class="popupLabel" onmouseover="$('#d1e124').show('1000');" onmouseout="$('#d1e124').hide('1000');">[ blockquote ]</div>
            <div id="d1e124" style="display: none;">
               <div class="blockquote">
                  <div class="para e77">
                     <div class="emphasis e78">Assertion:</div> The XML chip has increased in value with improvements in CPUs. The value proposition
                     has greatly improved 
                     with the introduction of multicore.
                     	
                  </div>
               </div>
            </div>
         </div>
         <div class="para e79">
            <div class="emphasis e80">Moore's Law:</div> Debatable, of course, but the scientists and engineers
            	in the chip making business seem to mainly agree that we've hit the limitations of
            physics in process
            	technology. Which is why frequency is now increasing very slowly (or even decreasing)and
            every chipmaker
            	is now focused on parallelization through multiple cores.
         </div>
         <div class="para e81">
            <div class="emphasis e82">Multicore:</div> Again, plenty of room for disagreement, but a critical 
            	mass of scientists and engineers caution that multiplying cores is not the new equivalent
            to Moore's 
            	Law because parallelization is difficult - and also, often, labor intensive as many
            computer processing
            	tasks must be redesigned by algorithmists and reprogrammed by engineers.
         </div>
         <div class="para e83">
            While bearing the above viewpoints in mind, which strengthens the case for workload-specific
            computing
            solutions, it is also our experience that the XML chip benefits from whatever improvement
            can still be
            eked out from the remaining life in Moore’s Law; as frequency has scaled the relative
            value of the 
            accelerator increases. This is because the chief bottleneck in use of the accelerator
            is the ability to 
            feed the beast – that is, to get enough data fast enough from the network interface
            to the XML 
            co-processor. Same is true for multicore. Multicore helps the accelerator and the
            XML chip also helps 
            multicore because much of the hard work of parallelizing applications to take advantage
            of multicore 
            applications has been done in the XML chip in the controller and software interface
            layer between the 
            application software and hardware.
            	
         </div>
         <div class="para e84">
            Intel, among many other chip manufacturers, promotes the use of workload-specific
            "cores" or accelerators 
            as a complementary part of its multicore strategy. The authors of this paper have
            joined with Intel the
            last couple of years at IDF (Intel Developer Forum), showing the integration of the
            XML accelerator with
            Intel multicore platforms. The figure below is based on the Intel view of the respective
            domains of
            monocore, multicore, and multicore with additional, workload-specific cores such as
            an XML accelerator.
            Multicore + the accelerator is needed to get to the upper right quadrant of efficiency
            and performance.
            
         </div>
         <div class="figure e85" floatstyle="0" xml:id="multicore">
            <div class="mediaobject e86">
               <div class="imageobject e87">
                  <div class="metaBox e88"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e144').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e144" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e88'
                           </span><span class="metaAttribute">fileref='../../../vol4/graphics/Leventhal01/Leventhal01-002.jpg'
                           </span><span class="metaAttribute">format='jpg'
                           </span><span class="metaAttribute">width='80%'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
               <div class="caption e89">
                  <div class="para e90">Multicores and Workload-Specific Cores</div>
               </div>
            </div>
         </div>
      </div><a name="%0AThesuccesseswithaccelerationcoprocessorshavebeenfewandfarbetweenGraphicsfloatingpoint%0AcryptographyRAIDTOE%E2%80%93againstmanyfailuresWhywilltheXMLchipbeoneofthoserareexceptions?%0A%09ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e91">
         <div class="title e92">
            The successes with acceleration coprocessors have been few and far between. Graphics,
            floating point, 
            cryptography, RAID, TOE – against many failures. Why will the XML chip be one of those
            rare exceptions?
            	
         </div>
         <div class="popupBox e93">
            <div class="popupLabel" onmouseover="$('#d1e151').show('1000');" onmouseout="$('#d1e151').hide('1000');">[ blockquote ]</div>
            <div id="d1e151" style="display: none;">
               <div class="blockquote">
                  <div class="para e94">
                     <div class="emphasis e95">Assertion:</div> The success of the XML chip may be said
                     	to be unexpected as it is a symbolic-computing device and not a number cruncher,
                     the primary domain 
                     	where acceleration has been successful. Unique factors have contributed to make this
                     the right
                     	technology to succeed at this time.
                  </div>
               </div>
            </div>
         </div>
         <div class="para e96">
            	First, a ubiquitious symbolic computation data format was a pre-condition, not just
            success in the
            	technology, but just for justification for enough R&amp;D dollars to create the possibility
            of an XML
            	chip. The success of XML might have run counter to expectations as well, but perhaps
            may have become
            	inevitable once the a worldwide information infrastructure became a reality.
         </div>
         <div class="para e97">Second, the evolution of FPGA technology that has taken place was another game-changer
            without
            	which the success of the XML chip would have been impossible. The choice of reconfigurable
            logic has 
            	permitted the designers to pursue an evolutionary development path of approximately
            two major design 
            	iterations per year and countless minor revisions over the lifetime of the product.
            This has been very 
            	advantageous in an area where there was little hard science and engineering history
            to guide us. It 
            	also permitted us to closely track the rapid evolution of microprocessor architecture
            and technology 
            	instead of following one to two years in the wake of new general purpose processor
            introductions. 
            	FPGA has also been the most cost-effective choice at the relatively low production
            volumes 
            	characteristic of the early years of the introduction of a new infrastructure technology.
         </div>
         <div class="para e98">Author Lemoine was a student of the great pioneer of reconfigurable logic, Jean Vuillemin,
            
            	who demonstrated in the late 1980 and early 1990s that the programmable active memory
            could be used 
            	to implement any computing function and serve as universal hardware co-processor
            coupled with the 
            	host computer.
         </div>
         <div class="para e99">XML processing, a byte-oriented symbolic computing problem, is, in the application
            domain, 
            	not an obvious choice for FPGA technology, Symbolic computing is difficult due to
            the lack of known 
            	algorithms for acceleration in this area and a readily reducible problem space where
            bottlenecks have 
            	been identified. The strategy, therefore, had to be evolutionary based on iterative
            and modular design 
            	as experience was accumulated and also as the price-performance and capacity of FPGAs
            has improved, 
            	expanding potential capabilities. It became evident that the development program
            would only have been 
            	feasible with the use of reconfigurable logic; having now spanned 6 years,it has
            consistently yielded 
            	progressively better results and a wider functional footprint.
         </div>
         <div class="para e100">
            Finally, the proof of success is shown simply in the fact that we are still here.
            The XML chip technology 
            has shown staying power, with 10 years of R&amp;D and a solid position in 
            the niche market of XML network appliances. It is already a limited success and is
            ready to enter a wider 
            market.
            	
         </div>
         <div class="para e101">
            The potential for a broader success is predicated on advances which, effectively,
            lower the payoff range 
            for the added cost the co-processor and the continued use of XML as the ubiquitious
            language of 
            computer-to-computer communication. Further expansion of XML use in the emerging IT
            landscape will help 
            with new XML-intensive workloads in message-level security, identity management, inter-application
            message 
            transformation and control-plane management of the cloud.
            	
         </div>
      </div><a name="%0ADon%E2%80%99tall%E2%80%9Ctransformation%E2%80%9Dacceleratorshavethefundamentalproblemthattheaccelerationvalueis%0Alargelyneutralizedbythecopyincopyoutoverhead?Atleastuntilyouhavecachecoherenceand%0AacceleratorshaveaccesstomemoryasequalcitizenswiththeCPUs%0A%09ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e102">
         <div class="title e103">
            Don’t all “transformation” accelerators have the fundamental problem that the acceleration
            value is 
            largely neutralized by the copy-in, copy-out overhead? At least until you have cache
            coherence and 
            accelerators have access to memory as equal citizens with the CPUs.
            	
         </div>
         <div class="popupBox e104">
            <div class="popupLabel" onmouseover="$('#d1e171').show('1000');" onmouseout="$('#d1e171').hide('1000');">[ blockquote ]</div>
            <div id="d1e171" style="display: none;">
               <div class="blockquote">
                  <div class="para e105">
                     <div class="emphasis e106">Assertion:</div> Getting the data to and from the board
                     	is indeed among the major challenges; in the early years the XML chip was often a
                     marginal solution
                     	because of it. With advances in the chip, it is rarely a major challenge today.
                  </div>
               </div>
            </div>
         </div>
         <div class="para e107">
            Copy-in, copy-out is certainly among the challenges with the current generation of
            accelerators. The XML 
            chip is not strictly a transformation processor; many the processing problems it solves
            involve a computed 
            result on the input and may save the copy-out step. Where a full copy-in, copy-out
            sequence is required 
            very high acceleration values may still be obtained in most cases because of the goodness
            of the output 
            structures produced by the accelerator. These structures would be prohibitively costly
            to construct with 
            a software process but once they are constructed by the hardware they can be used
            to greatly accelerate 
            subsequent processing of the XML content in software.
            	
         </div>
         <div class="para e108">
            The key to understanding this is to understand that the XML chip produces only limited
            acceleration for 
            many of the established approaches to constructing XML processing software where copy-in,
            copy-out remains
            a serious problem and produces remarkable levels of acceleration for equally-valid
            approaches that have 
            been little exploited in the past due to their inefficiency without purpose-build
            XML hardware. The LSI 
            XML chip has an extensive API which enables easy construction of applications using
            approaches essentially 
            unique to performance characteristics obtainable using its special features.
         </div>
         <div class="para e109">
            An example of a well-established XML processing approach which yields only limited
            
            acceleration with the XML chip is use of the Document Object Model (DOM). The DOM
            is memory intensive, 
            constructing a tree-structure model of the XML document prior to navigating the document
            to extract the 
            desired data. The cost of construction of the tree may be amortized in a long-lived
            document which is 
            scanned repeatedly and deeply but is generally a poor performer in typical transactional
            applications.  
            The vast majority of XML applications are implemented using the DOM due to the number
            of robust free 
            tools. In some cases an underlying DOM representation can be replaced by our Random
            Access XML (RAX) API. 
            This is the strategy we employed in creating our own version of an XSLT engine, RAX-XSLT.
            	
         </div>
         <div class="para e110">
            We would, however, like very much to accelerate "inefficient" software processes to
            enable acceleration
            with the XML chip to be applied to legacy applications. There are developments in
            computer architecture
            that may make this feasible. Cache-coherent accelerator-friendly architectures may
            be the next wave for 
            special purpose co-processors.  While the integration between the XML accelerator
            and CPU has been designed successfully 
            around the memory-copy problem, eliminating this problem will certainly enable new
            approaches to 
            co-processing.
            	
         </div>
      </div><a name="%0AProvetomeyoucan%E2%80%99tdoacceleratedXMLwithaVonNeumanncore%0A%09ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e111">
         <div class="title e112">
            Prove to me you can’t do accelerated XML with a Von Neumann core.
            	
         </div>
         <div class="popupBox e113">
            <div class="popupLabel" onmouseover="$('#d1e187').show('1000');" onmouseout="$('#d1e187').hide('1000');">[ blockquote ]</div>
            <div id="d1e187" style="display: none;">
               <div class="blockquote">
                  <div class="para e114">
                     <div class="emphasis e115">Assertion:</div> It is the guaranteed structure of that
                     	enables a non-Von Neumann micro-parallelism which gets much more work done on a single
                     tick. The
                     	question really is can a special-purpose device created by a handful of people from
                     the most
                     	efficient design possible beat a general computing device at the same task when thousands
                     have
                     	labored to make that device as fast as possible? The success of the XML chip seems
                     to lie in
                     	XML itself, which challenges the Von Neumann architecture yet has proven highly tractable
                     to
                     	alternate approaches.
                  </div>
               </div>
            </div>
         </div>
         <div class="para e116">
            Nonetheless, there are many things we cannot do at the scale of effort put into the
            XML chip and for this 
            reason our strategy has always been to 
            <div class="emphasis e117">accelerate</div> the software running on the
            host processor. Simply in terms of logic components, We can’t implement that much
            XML processing on our
            chip. The XML chip, asan XML software accelerator, is expressly designed to improve
            the performance of 
            software run on a Von Neumann core.  While we continue to carve more and more of the
            XML processing 
            problem into hardware the problem remains too general and hence too large that we
            would anticipate that a 
            chip will ever fully offload XML processing. The intelligence of our design rests
            in the way we have 
            integrated special-purpose XML hardware with the XML software stack to fully leverage
            the value of the 
            capability of the hardware again and again in software processes.
            	
         </div>
         <div class="para e118">
            The strongest evidence the hybrid of special-purpose hardware with a 
            non-Von Neumann architecture and software running on a Von Neumann architecture is
            in the comparative 
            results obtained with highly optimized XML software and also with our own software
            which emulates the 
            exact functionality of the hardware. XML has been use for over a decade and there
            have been many attempts 
            to create high-performance XML software components. We test our hardware against these
            continuously. Our 
            software which emulates the hardware tends to perform in the higher range, comparable
            to the best of 
            software-only approaches.
            	
         </div>
         <div class="para e119">
            The following table compares the performance of hardware (hybrid specialized hardware
            and software) versus 
            optimized XML software for a number of operations. The measurement is normalized into
            host cycles per byte 
            of processed XML. These are numbers with the current LSI product. 
            	
         </div>
         <div class="table e120" border="1" pgwide="1">
            <div class="caption e121">
               <div class="para e122">
                  Hardware/Software Compared to Software-Only (Von Neumann architecture) Performance
                  	
               </div>
            </div>
            <div class="thead e123">
               <div class="tr e124">
                  <div class="td e125" rowspan="2">
                     XML Operation
                     	
                  </div>
                  <div class="td e126" rowspan="2">
                     Description
                     	
                  </div>
                  <div class="td e127" colspan="2">
                     Host Cycles/Byte
                     	
                  </div>
               </div>
               <div class="tr e128">
                  <div class="td e129">
                     Chip
                     	
                  </div>
                  <div class="td e130">
                     Optimized SW
                     	
                  </div>
               </div>
            </div>
            <div class="tbody e131">
               <div class="tr e132">
                  <div class="td e133">
                     Parser Attack Checks
                     	
                  </div>
                  <div class="td e134">
                     Parallel to parsing; detects buffer overflow and resource exhaustion attacks against
                     parser
                     	
                  </div>
                  <div class="td e135" rowspan="3">
                     10
                     	
                  </div>
                  <div class="td e136">
                     N/A
                     	
                  </div>
               </div>
               <div class="tr e137">
                  <div class="td e138">
                     Well-formed Checks
                     	
                  </div>
                  <div class="td e139">
                     Parser-based well-formed check
                     	
                  </div>
                  <div class="td e140">
                     80-400
                     	
                  </div>
               </div>
               <div class="tr e141">
                  <div class="td e142">
                     Message-based anomaly detection
                     	
                  </div>
                  <div class="td e143">
                     Detects messages which deviate from statistical norm; adaptive; stronger than schema
                     validation
                     	
                  </div>
                  <div class="td e144">
                     N/A
                     	
                  </div>
               </div>
               <div class="tr e145">
                  <div class="td e146">
                     Parsing
                     	
                  </div>
                  <div class="td e147">
                     Token-based parsing with sequential and random-access to all XML objects
                     	
                  </div>
                  <div class="td e148">
                     20
                     	
                  </div>
                  <div class="td e149">
                     SAX 80 DOM 400
                     	
                  </div>
               </div>
               <div class="tr e150">
                  <div class="td e151">
                     Content-based Routing
                     	
                  </div>
                  <div class="td e152">
                     Routing decisions based on large XPath sets
                     	
                  </div>
                  <div class="td e153">
                     30
                     	
                  </div>
                  <div class="td e154">
                     500-1600
                     	
                  </div>
               </div>
               <div class="tr e155">
                  <div class="td e156">
                     Schema Validation
                     	
                  </div>
                  <div class="td e157">
                     XML Schema Validation
                     	
                  </div>
                  <div class="td e158">
                     40
                     	
                  </div>
                  <div class="td e159">
                     600-2000
                     	
                  </div>
               </div>
               <div class="tr e160">
                  <div class="td e161">
                     XSLT
                     	
                  </div>
                  <div class="td e162">
                     XSLT
                     	
                  </div>
                  <div class="td e163">
                     400-900
                     	
                  </div>
                  <div class="td e164">
                     1200-10000
                     	
                  </div>
               </div>
               <div class="tr e165">
                  <div class="td e166">
                     XML Security
                     	
                  </div>
                  <div class="td e167">
                     XML-based Authentication based on XML and WS Security specifications
                     	
                  </div>
                  <div class="td e168">
                     450-800
                     	
                  </div>
                  <div class="td e169">
                     1400-2600
                     	
                  </div>
               </div>
            </div>
         </div>
      </div><a name="%0AIfIstartaprojecttouseanXMLchipwon%E2%80%99tIfindthatafter3yearsofplanninganddevelopment%0Athat%E2%80%9CMoore%E2%80%99scoresblewupourtailpipeagain%E2%80%9D?%0A%09ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e170">
         <div class="title e171">
            If I start a project to use an XML chip won’t I find that after 3 years of planning
            and development 
            that “Moore’s cores blew up our tailpipe again”?
            	
         </div>
         <div class="popupBox e172">
            <div class="popupLabel" onmouseover="$('#d1e290').show('1000');" onmouseout="$('#d1e290').hide('1000');">[ blockquote ]</div>
            <div id="d1e290" style="display: none;">
               <div class="blockquote">
                  <div class="para e173">
                     <div class="emphasis e174">Assertion:</div> You sort of have already asked this. 
                     	The XML chip has been a bold experiment, not, until today, for the faint of heart.
                     But it is starting
                     	to look like a safe choice.
                  </div>
               </div>
            </div>
         </div>
         <div class="para e175">
            The XML chip, as an XML software accelerator, increases in acceleration value as CPUs
            get faster. Since 
            we began commercialization of the technology CPU frequencies have doubled and the
            number of cores has 
            quadrupled while the acceleration value of the co-processor has steadily increased
            with each advance in 
            CPU architecture and performance. We're still here.
            	
         </div>
      </div>
   </div>
</div>