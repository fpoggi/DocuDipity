<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#MultilevelVersioningANCHOR" name="MultilevelVersioningTOC">Multilevel Versioning</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroANCHOR" name="IntroTOC">Intro</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ModularisedXMLExampleANCHOR" name="ModularisedXMLExampleTOC">Modularised XML Example</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TheVersioningModuleineXistANCHOR" name="TheVersioningModuleineXistTOC">The Versioning Module in eXist</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TheProblemANCHOR" name="TheProblemTOC">The  Problem</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BetterVersionManagementforeXistANCHOR" name="BetterVersionManagementforeXistTOC">Better Version Management for eXist</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#SaveCheckinandCheckoutANCHOR" name="SaveCheckinandCheckoutTOC">Save, Check-in and Check-out</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#VersionAbstractionANCHOR" name="VersionAbstractionTOC">Version Abstraction</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#VersionMappingXMLANCHOR" name="VersionMappingXMLTOC">Version Mapping XML</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TranslationsANCHOR" name="TranslationsTOC">Translations</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#TranslationsAsRenditionsANCHOR" name="TranslationsAsRenditionsTOC">Translations As Renditions</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#VersionMappingWithTranslationsANCHOR" name="VersionMappingWithTranslationsTOC">Version Mapping With Translations</a></div>
               </div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#MultipleLevelVersioningANCHOR" name="MultipleLevelVersioningTOC">Multiple Level Versioning</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AddingaSecondStageANCHOR" name="AddingaSecondStageTOC">Adding a Second Stage</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#SaveCheckinandCheckoutRevisedANCHOR" name="SaveCheckinandCheckoutRevisedTOC">Save, Check-in and Check-out Revised</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AddingtotheAbstractionANCHOR" name="AddingtotheAbstractionTOC">Adding to the Abstraction</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#VersionMapAdditionsANCHOR" name="VersionMapAdditionsTOC">Version Map Additions</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#MetadataANCHOR" name="MetadataTOC">Metadata</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ScopeandAdditionalStagesANCHOR" name="ScopeandAdditionalStagesTOC">Scope and Additional Stages</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#ProjectsANCHOR" name="ProjectsTOC">Projects</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#UseLatestRevisitedANCHOR" name="UseLatestRevisitedTOC">Use Latest Revisited</a></div>
               </div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#LinkingANCHOR" name="LinkingTOC">Linking</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#UsingURNsinLinksANCHOR" name="UsingURNsinLinksTOC">Using URNs in Links</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TheCaseforXLinkandLinkbasesANCHOR" name="TheCaseforXLinkandLinkbasesTOC">The Case for XLink and Linkbases</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ImplementationNotesANCHOR" name="ImplementationNotesTOC">Implementation Notes</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#URNGenerationandParsingANCHOR" name="URNGenerationandParsingTOC">URN Generation and Parsing</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#CheckinCheckoutandUpdatingtheVersionMapANCHOR" name="CheckinCheckoutandUpdatingtheVersionMapTOC">Check-in, Check-out and Updating the Version Map</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#LockingANCHOR" name="LockingTOC">Locking</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#BusinessRulesandLinkingANCHOR" name="BusinessRulesandLinkingTOC">Business Rules and Linking</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#PermissionsANCHOR" name="PermissionsTOC">Permissions</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#HandlingeXistVersionsANCHOR" name="HandlingeXistVersionsTOC">Handling eXist Versions</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TheeXistUserInterfaceANCHOR" name="TheeXistUserInterfaceTOC">The eXist User Interface</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#TheEditorANCHOR" name="TheEditorTOC">The Editor</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#AfterwordANCHOR" name="AfterwordTOC">Afterword</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AFewNotesANCHOR" name="AFewNotesTOC">A Few Notes</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#DisclaimerANCHOR" name="DisclaimerTOC">Disclaimer</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#gitandOtherVCSsANCHOR" name="gitandOtherVCSsTOC">git and Other VCSs</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#NotationsforRelatedContentANCHOR" name="NotationsforRelatedContentTOC">Notations for Related Content</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#TerminologyANCHOR" name="TerminologyTOC">Terminology</a></div>
               </div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#FutureWorkANCHOR" name="FutureWorkTOC">Future Work</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BibliographyANCHOR" name="BibliographyTOC">Bibliography</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">approved</div>
         <div class="singletermTERMS">Akoma Ntoso</div>
         <div class="singletermTERMS">August 5 - 8, 2014</div>
         <div class="singletermTERMS">Ari</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">base</div>
         <div class="singletermTERMS">bad configurations management</div>
         <div class="singletermTERMS">base content</div>
         <div class="singletermTERMS">base</div>
         <div class="singletermTERMS">because</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2014</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">Chapter 2</div>
         <div class="singletermTERMS">context</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">documents</div>
         <div class="singletermTERMS">decimal version</div>
         <div class="singletermTERMS">development</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">editing</div>
         <div class="singletermTERMS">edited</div>
         <div class="singletermTERMS">every</div>
         <div class="singletermTERMS">eXist-DB</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
         <div class="singletermTERMS">first written</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
         <div class="singletermTERMS">git ready</div>
         <div class="singletermTERMS">git index</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">integer version</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
         <div class="singletermTERMS">Java</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">lang</div>
         <div class="singletermTERMS">link</div>
         <div class="singletermTERMS">Links</div>
         <div class="singletermTERMS">lock</div>
         <div class="singletermTERMS">latest</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">metadata</div>
         <div class="singletermTERMS">major</div>
         <div class="singletermTERMS">master language</div>
         <div class="singletermTERMS">ml-versioning-2.xml.4854</div>
         <div class="singletermTERMS">ml-versioning-2.xml</div>
         <div class="singletermTERMS">Modularisation</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">Nothing</div>
         <div class="singletermTERMS">Not locking</div>
         <div class="singletermTERMS">not the same</div>
         <div class="singletermTERMS">Nordström</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">optimistic check-out</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">project</div>
         <div class="singletermTERMS">project checkout level</div>
         <div class="singletermTERMS">published</div>
         <div class="singletermTERMS">PTC Windchill Multi-Level Versioning Labels</div>
         <div class="singletermTERMS">projects</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">rev</div>
         <div class="singletermTERMS">reviewing</div>
         <div class="singletermTERMS">recorded level</div>
         <div class="singletermTERMS">Root doc</div>
         <div class="singletermTERMS">renditions</div>
         <div class="singletermTERMS">recorded next step</div>
         <div class="singletermTERMS">Reuse</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">Straight</div>
         <div class="singletermTERMS">straight</div>
         <div class="singletermTERMS">stupid</div>
         <div class="singletermTERMS">stable</div>
         <div class="singletermTERMS">significant</div>
         <div class="singletermTERMS">saves</div>
         <div class="singletermTERMS">stage</div>
         <div class="singletermTERMS">staging</div>
         <div class="singletermTERMS">staging area</div>
         <div class="singletermTERMS">save</div>
         <div class="singletermTERMS">Semantic Profiling Using Indirection</div>
         <div class="singletermTERMS">Semantic Profiling</div>
         <div class="singletermTERMS">Stable</div>
         <div class="singletermTERMS">Stage 1</div>
         <div class="singletermTERMS">Save</div>
         <div class="singletermTERMS">Stage1</div>
         <div class="singletermTERMS">significant</div>
         <div class="singletermTERMS">Stage 2</div>
         <div class="singletermTERMS">Stage 3</div>
         <div class="singletermTERMS">Stage 4</div>
         <div class="singletermTERMS">Stage 0</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">take turns</div>
         <div class="singletermTERMS">The Git Index</div>
         <div class="singletermTERMS">The Staging Area</div>
         <div class="singletermTERMS">The Akoma Ntoso Naming Convention</div>
         <div class="singletermTERMS">them</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
         <div class="singletermTERMS">url</div>
         <div class="singletermTERMS">urn:x-resource:123456:en-GB:18</div>
         <div class="singletermTERMS">urn:x-resource:123456:sv-SE:18</div>
         <div class="singletermTERMS">urn:x-resource:123456:es-ES:18</div>
         <div class="singletermTERMS">urn:x-resource:123456:pl-PL:18</div>
         <div class="singletermTERMS">urn:x-resource:123456:fi-FI:18</div>
         <div class="singletermTERMS">urn:x-resource:123456:en-US:18</div>
         <div class="singletermTERMS">urn:x-resource:123456</div>
         <div class="singletermTERMS">urn:x-resource:123456:en-GB</div>
         <div class="singletermTERMS">urn:x-resource:123456:fi-FI:19</div>
         <div class="singletermTERMS">urn:x-resources:123456:*:1:*</div>
         <div class="singletermTERMS">use-latest</div>
         <div class="singletermTERMS">URN:en-GB:2:19:4:3#some-id</div>
         <div class="singletermTERMS">use-latest="1"</div>
         <div class="singletermTERMS">Use Latest</div>
         <div class="singletermTERMS">use latest</div>
         <div class="singletermTERMS">use latest decimal version</div>
         <div class="singletermTERMS">URL</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
         <div class="singletermTERMS">version</div>
         <div class="singletermTERMS">v:revision</div>
         <div class="singletermTERMS">v:doc($doc,$rev)</div>
         <div class="singletermTERMS">v:history</div>
         <div class="singletermTERMS">Versioning</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">xlink:href</div>
         <div class="singletermTERMS">XML Linking Language (XLink) Version 1.1</div>
         <div class="singletermTERMS">XML databases</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="MultilevelVersioningANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3">
      <div class="title e1">Multilevel Versioning</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2014</div>
            <div class="confdates e5">August 5 - 8, 2014</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">
               
               <div class="quote e8">Straight</div> versioning systems for XML documents that produce a new
               version for every save, such as eXist DB's versioning extension, aren't as useful
               as
               they could be. They produce far too many versions, of which far too few are
               significant, and so each significant version is very hard to find or use. An old
               version, for example, cannot be easily located or reliably referenced. Adding
               check-out and check-in functionality would help alleviate some of the problems but
               not solve them.
            </div>
            <div class="para e9">In this paper, I propose adding a multilevel, XML-based versioning abstraction on
               top of this 
               <div class="quote e10">straight</div> versioning system, where any new versions are
               placed on different levels or stages, based on check-out and check-in operations
               that move the resources up or down in the versioning structure.
            </div>
            <div class="para e11">The multilevel versioning is achieved using several different areas within the
               system, each of which in themselves is version handled using the system's
               
               <div class="quote e12">straight</div> versioning extension and where each save produces a
               system address to a specific (straight) version in that area. These addresses are
               kept track of and mapped to the multilevel versions in an XML-based version mapping
               file when a resource is checked in or out, as defined by the business rules for the
               abstraction.
            </div>
         </div>
         <div class="author e13">
            <div class="personname e14">
               <div class="firstname e15">Ari</div>
               <div class="surname e16">Nordström</div>
            </div>
            <div class="personblurb e17">
               <div class="para e18">Ari Nordström is the resident XML
                  guy at Condesign AB in Göteborg, Sweden. His information structures and
                  solutions are used by Volvo Cars, Ericsson, and many others. His favourite XML
                  specification remains XLink so quite a few of his frequent talks and
                  presentations on XML focus on linking and various aspects of reuse. 
               </div>
               <div class="para e19">Ari spends some of his spare time
                  playing with old 35/70 mm film projectors and has a respectable collection of
                  Dolby cinema processors, which goes some way towards explaining why he wanted to
                  automate cinemas using XML, once upon a time. He has now fully accepted that
                  it's too late.
               </div>
            </div>
         </div>
         <div class="legalnotice e20">
            <div class="para e21">Ari Nordström © 2014</div>
         </div>
         <div class="keywordset e22" role="author">
            <div class="keyword e23">Reuse</div>
            <div class="keyword e24">Modularisation</div>
            <div class="keyword e25">Versioning</div>
            <div class="keyword e26">eXist-DB</div>
            <div class="keyword e27">XML databases</div>
         </div>
      </div><a name="IntroANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e28" xml:id="section_cjv_bnb_5n">
         <div class="title e29">Intro</div><a name="ModularisedXMLExampleANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e30">
            <div class="title e31">Modularised XML Example</div>
            <div class="para e32">Let's say we have a modularised XML document. It consists of a number of linked
               resources, XML or otherwise:
            </div>
            <div class="figure e33" xml:id="figure_qfc_k4b_5n">
               <div class="title e34">Document Tree</div>
               <div class="mediaobject e35">
                  <div class="imageobject e36">
                     <div class="metaBox e37"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e64').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e64" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e37'
                              </span><span class="metaAttribute">fileref='../../../vol13/graphics/Nordstrom01/Nordstrom01-001.png'
                              </span><span class="metaAttribute">width='500px'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e38">Each resource is version handled
               separately, and every significant change to a resource will result in a new version
               of that resource
               <div class="popupBox e39">
                  <div class="popupLabel" onmouseover="$('#d1e69').show('1000');" onmouseout="$('#d1e69').hide('1000');">[ footnote ]</div>
                  <div id="d1e69" style="display: none;">
                     <div class="footnote">
                        <div class="para e40">Using a check-out/check-in procedure that bumps up the version with every
                           check-in.
                        </div>
                     </div>
                  </div>
               </div>. Many of the resources are reused in other documents as well. For
               example, the three warnings are used in many documents and might be edited by a
               separate legal team. 
            </div>
            <div class="para e41">Furthermore, each link includes not only the resource's name but also its exact
               version. This means that while the document pictured above may use version 12 of
               
               <div class="emphasis e42">Warning 3</div>, another document may have linked to a later
               version of that same warning, say version 18. This means that, in a version handling
               system, any modularised document such as the one above can be precisely recreated
               later, using the right versions of each participating resource, as every link
               includes both name and version.
            </div>
         </div><a name="TheVersioningModuleineXistANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e43" xml:id="section_ksr_3bh_5n">
            <div class="title e44">The Versioning Module in eXist</div>
            <div class="para e45">I've implemented the above modularisation and version handling in a document
               management system based on an XML editor coupled with a SQL database and a document
               management layer, but I'd very much like to implement something like that in an
               XML-based database. Something like eXist.
            </div>
            <div class="para e46">I love eXist. It's extremely powerful: it supports handling and storing XML as XML
               using XML technologies from XSLT to XQuery, XProc to XForms, and more, which means
               that geeks such as yours truly who are markup-centric rather than code-centric
               <div class="popupBox e47">
                  <div class="popupLabel" onmouseover="$('#d1e85').show('1000');" onmouseout="$('#d1e85').hide('1000');">[ footnote ]</div>
                  <div id="d1e85" style="display: none;">
                     <div class="footnote">
                        <div class="para e48">A nicer way of grouping together those of us who think 
                           <div class="quote e49">Java</div>
                           is really a drink.
                        </div>
                     </div>
                  </div>
               </div> can do a lot of cool stuff in eXist using those technologies and nothing
               else.
            </div>
            <div class="para e50">There is a simple versioning module available for eXist. It allows you to version
               handle your stored resources, basically adding a new version whenever you hit Save.
               It works quite well for what it is intended, well but there are problems:
            </div>
            <div class="itemizedlist e51">
               <div class="listitem e52">
                  <div class="para e53">You get a lot of versions, most of which are irrelevant.</div>
               </div>
               <div class="listitem e54">
                  <div class="para e55">It is therefore difficult to identify the relevant versions.</div>
               </div>
               <div class="listitem e56">
                  <div class="para e57">There's no concept of a workflow beyond that save operation, no check-outs
                     or check-ins.
                  </div>
               </div>
               <div class="listitem e58">
                  <div class="para e59">Addressing the stored versions is somewhat difficult.</div>
               </div>
               <div class="listitem e60">
                  <div class="para e61">The version number itself is just an integer number, with a single counter
                     for everything version handled. 
                  </div>
               </div>
            </div>
            <div class="para e62">A more code-centric markup geek would probably write a better versioning module
               using Java or some such language, adding basic functionality for check-outs and
               check-ins, metadata for versions, etc. I'm not one of them, unfortunately, so I need
               to make do with what I have, which is XML and the XML-based technologies available
               to me in eXist.
            </div>
         </div><a name="TheProblemANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e63" xml:id="section_ss5_jbh_5n">
            <div class="title e64">The 
               <div class="quote e65">Use Latest</div> Problem
            </div>
            <div class="para e66">There are problems when updating a modularised document such as the one
               above:
            </div>
            <div class="para e67">Let's say, for example, that the link to 
               <div class="emphasis e68">Warning 3</div> needs to
               be updated from the old version 12 to the latest version, 18. It should be a simple
               matter of checking out 
               <div class="emphasis e69">Chapter 2</div>, updating the link, and
               checking in the updated chapter again.
            </div>
            <div class="para e70">But this means that the root document's (
               <div class="emphasis e71">Root doc</div>'s) link to
               
               <div class="emphasis e72">Chapter 2</div> needs to be updated as well, which entails
               checking out the root, updating the link, and checking in the root again.
            </div>
            <div class="para e73">This causes several potential problems:</div>
            <div class="itemizedlist e74">
               <div class="listitem e75">
                  <div class="para e76">Since 
                     <div class="emphasis e77">Chapter 2</div>might have been used elsewhere, what
                     if it had been 
                     <div class="emphasis e78">edited</div> elsewhere? What if that edit was
                     more recent, meaning that 
                     <div class="emphasis e79">Chapter 2</div> had been updated
                     after our example document was first put together, with 
                     <div class="emphasis e80">Warning
                        3
                     </div> in version 12 inserted into 
                     <div class="emphasis e81">Chapter 2</div>?
                     This would mean that 
                     <div class="emphasis e82">Chapter 2</div> might contain
                     incompatible changes. 
                  </div>
               </div>
               <div class="listitem e83">
                  <div class="para e84">The problem is the same for any ancestor module, of course. They might
                     have been edited and updated since the document at hand was published and
                     could therefore include incompatible content.
                  </div>
               </div>
               <div class="listitem e85">
                  <div class="para e86">That later version of 
                     <div class="emphasis e87">Chapter 2</div> might, of course, now
                     also include new links in addition to in-module content.
                  </div>
               </div>
               <div class="listitem e88">
                  <div class="para e89">It would then not be possible to update 
                     <div class="emphasis e90">Chapter 2</div> to
                     include a new version of the 
                     <div class="emphasis e91">Warning 3</div> link without
                     immediately creating a problem for the other documents using
                     
                     <div class="emphasis e92">Chapter 2</div> once someone needed to update
                     
                     <div class="emphasis e93">them</div>.
                  </div>
               </div>
            </div>
            <div class="para e94">So, with all this in mind, what if one always wanted to use the latest versions of
               some of the resources but not others? 
            </div>
            <div class="para e95">Leaf nodes such as images are an obvious choice; it's perfectly reasonable to,
               say, always require the latest approved versions of warnings. In our example, the
               warnings are authored by a separate legal team, so it makes sense that the latest
               version approved is always the one to be used. It would then also make sense to
               automate the handling of links, automatically updating such a link to the latest
               version when editing the rest of the document.
            </div>
            <div class="para e96">Which means that we'll run into the problems outlined above, that is, how to
               (automatically) update the ancestor's link versions, considering that their contents
               (links) have potentially been updated with incompatible content. A change in
               contents means that a new version must result.
            </div>
            <div class="para e97">The problem here is, in the words of Eliot Kimber, 
               <div class="quote e98">bad configurations
                  management
               </div>
               
               <div class="popupBox e99">
                  <div class="popupLabel" onmouseover="$('#d1e196').show('1000');" onmouseout="$('#d1e196').hide('1000');">[ footnote ]</div>
                  <div id="d1e196" style="display: none;">
                     <div class="footnote">
                        <div class="para e100">His comment was given at Balisage 2013, in response to a description of
                           the problems involved in updating a document link tree such as the one in
                           
                           <div class="xref e101" linkend="figure_qfc_k4b_5n"></div>. It's an insightful comment, and one that
                           directly caused this paper to come into being. Incidentally, the paper
                           presented, 
                           <div class="emphasis e102">Semantic Profiling</div> (
                           <div class="xref e103" linkend="id-semantic-profiling"></div>), also used URNs.
                        </div>
                     </div>
                  </div>
               </div>. The document link tree is allowed to be updated freely and
               uncontrollably, creating a situation that is next to impossible to handle. More
               specifically, the idea of always using the latest version does not play well with
               the version management; every resource is updated separately and independently. 
            </div>
            <div class="para e104">From a configuration management point of view, all of the resource versions above
               are equal; no single version is more important than another. There are no workflow
               statuses (
               <div class="quote e105">editing</div>, 
               <div class="quote e106">reviewing</div>, 
               <div class="quote e107">approved</div>,
               etc) for the participating resources. 
               <div class="emphasis e108">Nothing</div> indicates what
               version, if any, is approved. In other words, is updating from version 12 to version
               18 OK in the first place? There is no scope, so always wanting the latest warning
               (or image or some other resource) is a matter of safeguarding against change.
            </div>
            <div class="para e109">You want version handling so you can recreate the exact version of your
               modularised document later, but at the same time, you want to be able to easily
               update links to certain leaf nodes without the hassle of updating every parent link,
               all the way up to the root. Preferably, you want the system to do the updating for
               you, automatically, but the 
               <div class="quote e110">stupid</div> version handling that handles
               every resource separately gets in the way, 
               <div class="emphasis e111">because</div> the
               resources are reused everywhere.
            </div>
            <div class="para e112">This, basically, is what I call the 
               <div class="quote e113">use latest</div> problem.
            </div>
         </div>
      </div><a name="BetterVersionManagementforeXistANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e114" xml:id="section_m1l_434_5n">
         <div class="title e115">Better Version Management for eXist</div>
         <div class="para e116">To introduce version handling that is a bit more advanced than the versioning module
            in eXist, I propose the following:
         </div>
         <div class="para e117">Split the versioning of resources into different areas
            <div class="popupBox e118">
               <div class="popupLabel" onmouseover="$('#d1e242').show('1000');" onmouseout="$('#d1e242').hide('1000');">[ footnote ]</div>
               <div id="d1e242" style="display: none;">
                  <div class="footnote">
                     <div class="para e119">Collections, in eXist.</div>
                  </div>
               </div>
            </div>, where a 
            <div class="quote e120">stable</div> area will only ever contain approved versions
            of documents, that is, the resources that make up a modularised document. This area
            I
            rather appropriately call 
            <div class="emphasis e121">Stable</div>. When a stable document is
            updated, it is first copied, or checked out, into an area intended for editing. I
            call
            this area 
            <div class="emphasis e122">Stage 1</div>.
         </div>
         <div class="figure e123">
            <div class="title e124">Versioning Split Into Two Areas</div>
            <div class="mediaobject e125">
               <div class="imageobject e126">
                  <div class="metaBox e127"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e261').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e261" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e127'
                           </span><span class="metaAttribute">fileref='../../../vol13/graphics/Nordstrom01/Nordstrom01-002.png'
                           </span><span class="metaAttribute">width='500px'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e128">Versioning, then, is represented using a tree structure with two main areas:</div>
         <div class="itemizedlist e129">
            <div class="listitem e130">
               <div class="para e131">
                  <div class="emphasis e132">Stable</div> is exactly what it sounds like: stable. It
                  contains the 
                  <div class="quote e133">major</div> versions of resources and
                  
                  <div class="quote e134">documents</div>, that is, groups of resources.
               </div>
            </div>
            <div class="listitem e135">
               <div class="para e136">
                  
                  <div class="emphasis e137">Stage 1</div> is intended for editing. An author can check out an
                  individual resource from 
                  <div class="emphasis e138">Stable</div> to 
                  <div class="emphasis e139">Stage
                     1
                  </div> to work on the resource. He may also be allowed to check out a
                  whole document.
               </div>
            </div>
         </div>
         <div class="para e140">Both areas are actual collections in the system, version handled using eXist's
            versioning extension module. In other words, every 
            <div class="emphasis e141">Save</div> in
            respective collection results in a new version of the old one (offsetting each save
            using a diff against a first, base, version).
         </div>
         <div class="para e142">Each area, then, is versioned independently from the other. They are designed to be
            used together, however:
         </div>
         <div class="itemizedlist e143">
            <div class="listitem e144">
               <div class="para e145">
                  
                  <div class="emphasis e146">Stable</div> implies integer versions: 1, 2, 3, etc.
               </div>
            </div>
            <div class="listitem e147">
               <div class="para e148">
                  
                  <div class="emphasis e149">Stage 1</div> implies decimal versions: 1.1, 1.2, 1.3, etc; 2.1,
                  2.2, 2.3, etc.
               </div>
            </div>
         </div><a name="SaveCheckinandCheckoutANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e150" xml:id="section_ptj_zk4_5n">
            <div class="title e151">Save, Check-in and Check-out</div>
            <div class="para e152">Direct 
               <div class="emphasis e153">Save</div> operations are only allowed in 
               <div class="emphasis e154">Stage
                  1
               </div>. In other words, they are edited, saved and versioned there, and
               need to be checked in to 
               <div class="emphasis e155">Stable</div> to cause a new
               
               <div class="emphasis e156">Stable</div>. 
               <div class="emphasis e157">Stable</div> resources cannot be
               edited directly.
            </div>
            <div class="para e158">
               
               <div class="emphasis e159">Stable</div> resources can be checked out to 
               <div class="emphasis e160">Stage
                  1
               </div> to be edited, however, in which case they are locked in
               
               <div class="emphasis e161">Stable</div> while awaiting a check-in from 
               <div class="emphasis e162">Stage
                  1
               </div>. A check-in from 
               <div class="emphasis e163">Stage 1</div> to
               
               <div class="emphasis e164">Stable</div> means that the 
               <div class="emphasis e165">Stage 1</div> resource
               is locked from further edits.
            </div>
            <div class="note e166">
               <div class="para e167">The locking of files merits a discussion. See 
                  <div class="xref e168" linkend="section_f5d_ykw_l4"></div>.
               </div>
            </div>
            <div class="para e169">Check-out and check-in operations are as follows:</div>
            <div class="itemizedlist e170">
               <div class="listitem e171">
                  <div class="para e172">Check-out from 
                     <div class="emphasis e173">Stable</div> is a copy to 
                     <div class="emphasis e174">Stage
                        1
                     </div>. The check-out causes a new file version of the resource in
                     
                     <div class="emphasis e175">Stage 1</div>.
                  </div>
               </div>
               <div class="listitem e176">
                  <div class="para e177">Check-in from 
                     <div class="emphasis e178">Stage 1</div> is a copy to
                     
                     <div class="emphasis e179">Stable</div>, locking the resource in 
                     <div class="emphasis e180">Stage
                        1
                     </div> and causing a new file version of the resource in
                     
                     <div class="emphasis e181">Stable</div>.
                  </div>
               </div>
            </div>
         </div><a name="VersionAbstractionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e182" xml:id="section_csw_2m4_5n">
            <div class="title e183">Version Abstraction</div>
            <div class="para e184">While both areas are version handled using the standard versioning system in the
               respective collection, they are connected to each other only implicitly. There is
               therefore a need to create version abstractions for the resources being copied,
               logically connecting the two areas. A basic URN namespace such as the following
               should be enough:
            </div>
            <div class="programlisting e185" xml:space="preserve">urn:x-resource:r1:&lt;doc-number&gt;:&lt;lang&gt;:&lt;stable&gt;:&lt;stage1&gt;</div>
            <div class="para e186">where 
               <div class="code e187">&lt;stable&gt;</div> is the 
               <div class="quote e188">integer version</div> in
               
               <div class="emphasis e189">Stable</div> and 
               <div class="code e190">&lt;stage1&gt;</div> the 
               <div class="quote e191">decimal
                  version
               </div> in 
               <div class="emphasis e192">Stage1</div>
               
               <div class="popupBox e193">
                  <div class="popupLabel" onmouseover="$('#d1e417').show('1000');" onmouseout="$('#d1e417').hide('1000');">[ footnote ]</div>
                  <div id="d1e417" style="display: none;">
                     <div class="footnote">
                        <div class="para e194">Both are integers from 
                           <div class="quote e195">1</div> and up.
                        </div>
                     </div>
                  </div>
               </div>. 
               <div class="code e196">&lt;lang&gt;</div> is a four-position
               <div class="popupBox e197">
                  <div class="popupLabel" onmouseover="$('#d1e427').show('1000');" onmouseout="$('#d1e427').hide('1000');">[ footnote ]</div>
                  <div id="d1e427" style="display: none;">
                     <div class="footnote">
                        <div class="para e198">Plus a position for the hyphen.</div>
                     </div>
                  </div>
               </div> language-and-country code for the resources that require one. For
               example, version 2.1 of a British English document 123456 might be identified like
               so:
            </div>
            <div class="programlisting e199" xml:space="preserve">urn:x-resource:r1:123456:en-GB:2:1</div>
            <div class="para e200">The URNs can be kept track of using an XML-based URN/URL map document, like
               so:
            </div>
            <div class="programlisting e201" xml:space="preserve">&lt;resources&gt;
               &lt;resource&gt;
               &lt;urn&gt;&lt;/urn&gt;
               &lt;url&gt;&lt;/url&gt;
               &lt;/resource&gt;
               ...
               &lt;/resources&gt;
            </div>
            <div class="para e202">A resource mapping document is useful, as links can be made to resource names (and
               specific versions) rather than addresses. In a reasonably well-indexed XML database,
               looking up a URN to find its corresponding URL should be quick, even with many
               resources and a large map.
            </div>
         </div><a name="VersionMappingXMLANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e203" xml:id="section_rs1_vm4_5n">
            <div class="title e204">Version Mapping XML</div>
            <div class="para e205">The resource maps need to do more than just map a name to an address, however.
               Every version, integer or decimal, of every URN needs to not only be mapped to a
               URL, but also to be given a 
               <div class="emphasis e206">context</div>, indicating a relation
               between the two staging areas and, thus, between the different versions of the same
               resource.
            </div>
            <div class="para e207">The URN schema implies a structure for each resource version. Something like this
               <div class="popupBox e208">
                  <div class="popupLabel" onmouseover="$('#d1e449').show('1000');" onmouseout="$('#d1e449').hide('1000');">[ footnote ]</div>
                  <div id="d1e449" style="display: none;">
                     <div class="footnote">
                        <div class="para e209">Leaving, for the moment, out the 
                           <div class="code e210">lang</div> attribute and element
                           content examples.
                        </div>
                     </div>
                  </div>
               </div>:
            </div>
            <div class="programlisting e211" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
               &lt;resource&gt;
               
               &lt;!-- Base URN --&gt;
               &lt;base&gt;&lt;/base&gt;
               
               &lt;!-- Stable version 1 --&gt;
               &lt;version&gt;
               &lt;rev&gt;&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               
               &lt;!-- Stage 1 (decimal versions) --&gt;
               &lt;version&gt;
               &lt;rev&gt;&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               &lt;/version&gt;
               &lt;version&gt;
               &lt;rev&gt;&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               &lt;/version&gt;
               &lt;/version&gt;
               
               &lt;!-- Stable version 2 --&gt;
               &lt;version&gt;
               &lt;rev&gt;&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               
               &lt;!-- Stage 1 (decimal versions) --&gt;
               &lt;version&gt;
               &lt;rev&gt;&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               &lt;/version&gt;
               &lt;version&gt;
               &lt;rev&gt;&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               &lt;/version&gt;
               &lt;/version&gt;
               &lt;/resource&gt;
            </div>
            <div class="para e212">I've included two 
               <div class="emphasis e213">Stable</div> versions, each of them inside a
               
               <div class="code e214">version</div> tag, and two 
               <div class="emphasis e215">Stage 1</div> or decimal
               versions for each 
               <div class="emphasis e216">Stable</div> version. This is a nice, recursive
               
               <div class="code e217">version</div> structure (and yes, there is a reason for it; read
               on).
            </div>
            <div class="para e218">Each 
               <div class="code e219">rev</div> identifies an actual stored version (integer or decimal) of
               a resource, with the resource's URL in 
               <div class="code e220">url</div>. On
               
               <div class="emphasis e221">Stable</div> level, there's only a single 
               <div class="code e222">rev</div> inside
               
               <div class="code e223">version</div>, but it may contain an unlimited number of decimal
               versions.
            </div>
            <div class="para e224">A save operation in 
               <div class="emphasis e225">Stage 1</div> causes a new version of the
               resource to be stored in that area. A new decimal-level 
               <div class="code e226">version</div>
               structure is added to the mapping document, with a new 
               <div class="code e227">rev</div> (counted up
               a notch) and a URL to the decimal-level resource file.
            </div>
            <div class="para e228">When a 
               <div class="emphasis e229">Stage 1</div>, or decimal-level, resource is checked in, the
               resource is copied into the 
               <div class="emphasis e230">Stable</div> area, causing a new (eXist)
               version of the resource to be stored in that area. A new integer-level
               
               <div class="code e231">version</div> is added to the mapping document, with a new
               
               <div class="code e232">rev</div> (counted up a notch) and a URL to the integer-level resource
               file.
            </div>
            <div class="para e233">Using the mapping document and a simple XPath, any version of the base URN can
               easily be retrieved later.
            </div>
         </div><a name="TranslationsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e234" xml:id="section_xk1_pp4_5n">
            <div class="title e235">Translations</div>
            <div class="para e236">Resources, of course, are translated to other languages all the time, so a
               versioning system needs to be able to keep track of the translations, clearly
               identifying which translation is based on which original, etc.  
            </div><a name="TranslationsAsRenditionsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e237" xml:id="section_mvh_pp4_5n">
               <div class="title e238">Translations As Renditions</div>
               <div class="para e239">A document management system will frequently require writing the actual
                  content in one language (the 
                  <div class="quote e240">master language</div>) only and then
                  translating that content into whatever target languages that are needed. This is
                  mostly a design decision, based partly on the authors' preferences and location,
                  but also around the notion that a single language will be used to drive the
                  contents (and versions) forwards, thus minimising problems arising from allowing
                  different languages to 
                  <div class="quote e241">take turns</div> in developing the content
                  <div class="popupBox e242">
                     <div class="popupLabel" onmouseover="$('#d1e535').show('1000');" onmouseout="$('#d1e535').hide('1000');">[ footnote ]</div>
                     <div id="d1e535" style="display: none;">
                        <div class="footnote">
                           <div class="para e243">This is a common occurrence in traditional, desktop-based authoring.
                              Without systems support, a few translations and new versions of the
                              documentation are enough for the writers to lose track of which version
                              that contains the latest information.
                           </div>
                        </div>
                     </div>
                  </div>.
               </div>
               <div class="para e244">Such a system will regard the master-language document as the original bearer
                  of content and the translations simply as 
                  <div class="emphasis e245">renditions</div> of
                  that original. A typical workflow might be as follows:
               </div>
               <div class="orderedlist e246">
                  <div class="listitem e247">
                     <div class="para e248">Update the master-language document through a couple of versions, then
                        lock an approved version.
                     </div>
                  </div>
                  <div class="listitem e249">
                     <div class="para e250">Translate the approved version to any required target languages. These
                        translations are seen as renditions of that particular master-language
                        version.
                     </div>
                  </div>
                  <div class="listitem e251">
                     <div class="para e252">Update the master-language document again, based on the approved and
                        translated version from step 1, going through the required number of
                        versions until done. Lock the approved version.
                     </div>
                  </div>
                  <div class="listitem e253">
                     <div class="para e254">Retranslate the new approved version to any required target
                        languages.
                     </div>
                     <div class="note e255">
                        <div class="para e256">Typically, there is no way to know what differences there are
                           between this new approved version and the old one. In modularised
                           documents, however, some modules may not need updates and will have
                           their versions and any translations unchanged.
                        </div>
                     </div>
                  </div>
               </div>
               <div class="para e257">This works well in some contexts but there are some rather well-defined
                  problems:
               </div>
               <div class="itemizedlist e258">
                  <div class="listitem e259">
                     <div class="para e260">In a large, decentralised organisation, it might be difficult to
                        always author in a single master language. Market-specific requirements
                        frequently drive documentation forwards, and often in a market where the
                        available writers would much prefer their own language.
                     </div>
                  </div>
                  <div class="listitem e261">
                     <div class="para e262">When translating to certain languages, an intermediate language is
                        often desired to keep costs to a minimum due to the availability of
                        translators. It is, for example, much easier to find a good translator
                        working from English to Simplified Chinese than from Swedish to
                        Simplified Chinese.
                     </div>
                  </div>
               </div>
               <div class="para e263">Which brings us back to the URN schema representing a resource:</div>
               <div class="programlisting e264" xml:space="preserve">urn:x-resource:r1:&lt;doc-number&gt;:&lt;lang&gt;:&lt;stable&gt;:&lt;stage1&gt;</div>
               <div class="para e265">I use a similar URN schema to identify originals and their translations in a
                  system that requires the authors to write using a predefined master language and
                  then translating an approved version to any required target languages. So if
                  
                  <div class="code e266">urn:x-resource:123456:en-GB:18</div> is the original, all of these
                  are renditions of that original:
               </div>
               <div class="itemizedlist e267">
                  <div class="listitem e268">
                     <div class="para e269">
                        
                        <div class="code e270">urn:x-resource:123456:sv-SE:18</div>
                        
                     </div>
                  </div>
                  <div class="listitem e271">
                     <div class="para e272">
                        
                        <div class="code e273">urn:x-resource:123456:es-ES:18</div>
                        
                     </div>
                  </div>
                  <div class="listitem e274">
                     <div class="para e275">
                        
                        <div class="code e276">urn:x-resource:123456:pl-PL:18</div>
                        
                     </div>
                  </div>
                  <div class="listitem e277">
                     <div class="para e278">
                        
                        <div class="code e279">urn:x-resource:123456:fi-FI:18</div>
                        
                     </div>
                  </div>
                  <div class="listitem e280">
                     <div class="para e281">
                        
                        <div class="code e282">urn:x-resource:123456:en-US:18</div>
                        
                     </div>
                  </div>
               </div>
               <div class="para e283">Etc. But here's the kicker: there's nothing here to identify one as the master
                  and the others as translations, other than my introductory sentence. We
                  shouldn't have to define a master language, not if the versioning system can
                  keep track of a series of URNs, so rather than actually defining one, it should
                  be better to define a semantic resource:
               </div>
               <div class="para e284">
                  
                  <div class="code e285">urn:x-resource:123456</div>
                  
               </div>
               <div class="para e286">Then add a language to render the 
                  <div class="quote e287">base content</div> with:
               </div>
               <div class="para e288">
                  
                  <div class="code e289">urn:x-resource:123456:en-GB</div>
                  
               </div>
               <div class="para e290">And versioning to identify changes over time:</div>
               <div class="para e291">
                  
                  <div class="code e292">urn:x-resource:123456:en-GB:18</div>
                  
               </div>
               <div class="para e293">If we accept that the underlying semantic resource can be updated using any
                  rendering language, then this one is a perfectly acceptable updated version to
                  version 18:
               </div>
               <div class="para e294">
                  
                  <div class="code e295">urn:x-resource:123456:fi-FI:19</div>
                  
               </div>
               <div class="para e296">It happens to be rendered in Finnish, but 
                  <div class="quote e297">19</div> is the next
                  version of the semantic resource according to the URN schema, above.
               </div>
            </div><a name="VersionMappingWithTranslationsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e298" xml:id="section_vqb_yp4_5n">
               <div class="title e299">Version Mapping With Translations</div>
               <div class="para e300">Keeping the basics of the (semantic) resource and the URN schema representing
                  it in mind, here's a mapping document updated with language handling:
               </div>
               <div class="programlisting e301" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
                  &lt;resource&gt;
                  
                  &lt;!-- Base URN --&gt;
                  &lt;base&gt;&lt;/base&gt;
                  
                  &lt;!-- Stable version 1 --&gt;
                  &lt;version&gt;
                  &lt;rev&gt;&lt;/rev&gt;
                  &lt;url lang="en-GB"&gt;&lt;/url&gt;
                  
                  &lt;!-- 1st decimal version --&gt;
                  &lt;version&gt;
                  &lt;rev&gt;&lt;/rev&gt;
                  &lt;url&gt;&lt;/url&gt;
                  &lt;/version&gt;
                  
                  &lt;!-- 2d decimal version --&gt;
                  &lt;version&gt;
                  &lt;rev&gt;&lt;/rev&gt;
                  &lt;url lang="en-GB"&gt;&lt;/url&gt;
                  &lt;url lang="sv-SE"&gt;&lt;/url&gt;
                  &lt;url lang="fi-FI"&gt;&lt;/url&gt;
                  &lt;/version&gt;
                  &lt;/version&gt;
                  
                  &lt;!-- Stable version 2 --&gt;
                  &lt;version&gt;
                  &lt;rev&gt;&lt;/rev&gt;
                  &lt;url lang="en-GB"&gt;&lt;/url&gt;
                  &lt;url lang="sv-SE"&gt;&lt;/url&gt;
                  &lt;url lang="fi-FI"&gt;&lt;/url&gt;
                  
                  &lt;!-- Stage 1 (decimal versions) --&gt;
                  &lt;version&gt;
                  ...
                  &lt;/version&gt;
                  &lt;/version&gt;
                  &lt;/resource&gt;
               </div>
               <div class="para e302">Let's walk through this. The first 
                  <div class="emphasis e303">Stable</div> version happens
                  to be authored in English (UK):
               </div>
               <div class="programlisting e304" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
                  &lt;resource&gt;
                  
                  &lt;!-- Base URN --&gt;
                  &lt;base&gt;&lt;/base&gt;
                  
                  &lt;!-- Stable version 1 --&gt;
                  &lt;version&gt;
                  &lt;rev&gt;&lt;/rev&gt;
                  &lt;url lang="en-GB"&gt;&lt;/url&gt;
                  
                  &lt;!-- 1st decimal version --&gt;
                  ...
                  &lt;/version&gt;
                  ...
                  &lt;/resource&gt;
                  
               </div>
               <div class="para e305">Then follow two decimal versions. Translations are made based on the second
                  saved iteration because the original language version is considered to be
                  ready:
               </div>
               <div class="programlisting e306" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
                  &lt;resource&gt;
                  
                  ...
                  
                  &lt;!-- Stable version 1 --&gt;
                  &lt;version&gt;
                  ...
                  
                  &lt;!-- 1st decimal version --&gt;
                  &lt;version&gt;
                  ...
                  &lt;/version&gt;
                  
                  &lt;!-- 2d decimal version --&gt;
                  &lt;version&gt;
                  &lt;rev&gt;&lt;/rev&gt;
                  &lt;url lang="en-GB"&gt;&lt;/url&gt;
                  &lt;url lang="sv-SE"&gt;&lt;/url&gt;
                  &lt;url lang="fi-FI"&gt;&lt;/url&gt;
                  &lt;/version&gt;
                  &lt;/version&gt;
                  
                  &lt;!-- Stable version 2 --&gt;
                  ...
                  &lt;/resource&gt;
                  
               </div>
               <div class="para e307">The translations (and original) are then checked in (copied to
                  
                  <div class="emphasis e308">Stable</div>) to form a new stable version:
               </div>
               <div class="programlisting e309" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
                  &lt;resource&gt;
                  
                  ...
                  
                  &lt;!-- Stable version 1 --&gt;
                  &lt;version&gt;
                  ...
                  
                  &lt;!-- 2d decimal version --&gt;
                  &lt;version&gt;
                  &lt;rev&gt;&lt;/rev&gt;
                  &lt;url lang="en-GB"&gt;&lt;/url&gt;
                  &lt;url lang="sv-SE"&gt;&lt;/url&gt;
                  &lt;url lang="fi-FI"&gt;&lt;/url&gt;
                  &lt;/version&gt;
                  &lt;/version&gt;
                  
                  &lt;!-- Stable version 2 --&gt;
                  &lt;version&gt;
                  &lt;rev&gt;&lt;/rev&gt;
                  &lt;url lang="en-GB"&gt;&lt;/url&gt;
                  &lt;url lang="sv-SE"&gt;&lt;/url&gt;
                  &lt;url lang="fi-FI"&gt;&lt;/url&gt;
                  
                  ...
                  &lt;/version&gt;
                  &lt;/resource&gt;
               </div>
               <div class="para e310">The concept of the semantic resource means that while translations (or rather,
                  renditions) are bound to specific versions, all that is required to identify
                  them uniquely is to add the URLs to the actual physical translated files;
                  everything else remains the same.
               </div>
               <div class="note e311">
                  <div class="para e312">There's nothing above to suggest that the original (as in 
                     <div class="quote e313">first
                        written
                     </div>) language is always carried over from one stable version
                     to the next; a first decimal version based on a stable version might entail
                     translating the original-language document to a new language that is then
                     used to update the contents with.
                  </div>
               </div>
            </div>
         </div>
      </div><a name="MultipleLevelVersioningANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e314" xml:id="section_srk_mr4_5n">
         <div class="title e315">Multiple Level Versioning</div>
         <div class="para e316">While the versioning system outlined in 
            <div class="xref e317" linkend="section_m1l_434_5n"></div> is, in my
            mind, better than the basic versioning offered, there are problems:
         </div>
         <div class="itemizedlist e318">
            <div class="listitem e319">
               <div class="para e320">It does not solve the 
                  <div class="quote e321">use latest</div> problem, outlined in 
                  <div class="xref e322" linkend="section_ss5_jbh_5n"></div>.
                  In all fairness, it doesn't attempt to; it simply provides a better abstraction
                  for versioning.
               </div>
            </div>
            <div class="listitem e323">
               <div class="para e324">There will still be a lot of versions in 
                  <div class="emphasis e325">Stage 1</div>. This
                  happens because basically, every new version is a save when working on a
                  resource in that area.
               </div>
            </div>
            <div class="listitem e326">
               <div class="para e327">Also, it is noteworthy that while too many versions are still being saved,
                  overall, too few of them can easily be used to identify
                  
                  <div class="emphasis e328">significant</div> versions
                  <div class="popupBox e329">
                     <div class="popupLabel" onmouseover="$('#d1e707').show('1000');" onmouseout="$('#d1e707').hide('1000');">[ footnote ]</div>
                     <div id="d1e707" style="display: none;">
                        <div class="footnote">
                           <div class="para e330">The problem is that every new version in 
                              <div class="emphasis e331">Stage 1</div>
                              is basically the same; they are all the result of a save.
                           </div>
                        </div>
                     </div>
                  </div> of the works in progress.
               </div>
            </div>
         </div>
         <div class="para e332">So what can be done to identify all significant versions in a resource's version
            history? 
         </div>
         <div class="para e333">One solution is to add markup to the version mapping XML to identify significant
            saves. This requires (author) access to the version map, so that suitable markup can
            be
            added to some saves but not others, but also additions to the save operation itself.
            It
            means supporting a special case of save.
         </div>
         <div class="para e334">This, of course, is the general case of adding workflow handling to the markup. The
            problem with workflow markup, apart from the access needed to the versioning markup
            and
            the additions to the save operation, is that not every check-in comprises a change
            in a
            workflow. Most, in fact, are simply versions that an author considers to be of interest
            for some reason.
         </div>
         <div class="para e335">Another is to check in the resource more often, but that would defeat one of the
            purposes of the 
            <div class="emphasis e336">Stable</div> area, namely to identify stable versions
            only.
         </div>
         <div class="para e337">But there is a simpler, third option.</div><a name="AddingaSecondStageANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e338" xml:id="section_lvy_pr4_5n">
            <div class="title e339">Adding a Second Stage</div>
            <div class="para e340">In my mind, it's far easier, and more logical, and better suited for the
               versioning logic as described by the URN schema and the version map markup, to add
               a
               second (or third, if you consider 
               <div class="emphasis e341">Stable</div> to be one) stage, like
               so:
            </div>
            <div class="figure e342">
               <div class="title e343">Versioning Split Into Three Areas</div>
               <div class="mediaobject e344">
                  <div class="imageobject e345">
                     <div class="metaBox e346"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e740').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e740" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e346'
                              </span><span class="metaAttribute">fileref='../../../vol13/graphics/Nordstrom01/Nordstrom01-003.png'
                              </span><span class="metaAttribute">width='500px'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e347">So, what's the use of a third area?</div>
            <div class="itemizedlist e348">
               <div class="listitem e349">
                  <div class="para e350">The 
                     <div class="emphasis e351">Stable</div> branch is still just that, stable.
                  </div>
               </div>
               <div class="listitem e352">
                  <div class="para e353"> Now, however, 
                     <div class="emphasis e354">Stage 1</div> is the 
                     <div class="quote e355">project checkout
                        level
                     </div>, used for checking out projects, groups of documents, from
                     the stable branch, but the participating resources cannot be directly edited
                     there. 
                     <div class="emphasis e356">Stage 1</div> is used to store
                     
                     <div class="quote e357">significant</div> versions, but also to enable updating links
                     in a controlled fashion. More on this last bit later.
                  </div>
               </div>
               <div class="listitem e358">
                  <div class="para e359">An author can check out an individual resource from 
                     <div class="emphasis e360">Stage
                        1
                     </div> to 
                     <div class="emphasis e361">Stage 2</div> to edit the
                     resource.
                  </div>
               </div>
            </div>
            <div class="para e362">All three areas are still actual collections (and subcollections) in the system,
               still versioned using eXist's versioning module. In other words, every
               
               <div class="emphasis e363">Save</div> results in a new version.
            </div>
            <div class="para e364">Each area still implies an integer-based versioning system:</div>
            <div class="itemizedlist e365">
               <div class="listitem e366">
                  <div class="para e367">
                     
                     <div class="emphasis e368">Stable</div> implies integer versions: 1, 2, 3, etc.
                  </div>
               </div>
               <div class="listitem e369">
                  <div class="para e370">
                     
                     <div class="emphasis e371">Stage 1</div> implies decimal versions: 1.1, 1.2, 1.3, etc;
                     2.1, 2.2, 2.3, etc.
                  </div>
               </div>
               <div class="listitem e372">
                  <div class="para e373">
                     
                     <div class="emphasis e374">Stage 2</div> implies centecimal versions: 1.1.1, 1.1.2,
                     1.1.3, etc; 2.1.1, 2.1.2, 2.1.3, etc.
                  </div>
               </div>
            </div>
         </div><a name="SaveCheckinandCheckoutRevisedANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e375" xml:id="section_esr_qr4_5n">
            <div class="title e376">Save, Check-in and Check-out Revised</div>
            <div class="para e377">The basic idea is largely unchanged, but an added stage offers better
               control.
            </div>
            <div class="para e378">Direct 
               <div class="emphasis e379">Save</div> operations are now only allowed in
               
               <div class="emphasis e380">Stage 2</div>, that is, resources must be checked out from
               
               <div class="emphasis e381">Stage 1</div> to 
               <div class="emphasis e382">Stage 2</div> to be edited, and
               any edits are saved and versioned there. When sufficiently edited (that is, when a
               
               <div class="quote e383">significant</div> version is at hand, it can be checked in to
               
               <div class="emphasis e384">Stage 1</div> to cause a new 
               <div class="emphasis e385">Stage 1</div> version
               of the resource. 
               <div class="emphasis e386">Stage 1</div> resources cannot be edited directly
               but mark those 
               <div class="quote e387">significant</div> versions that are not (yet?)
               stable.
            </div>
            <div class="para e388">Sufficiently 
               <div class="quote e389">significant</div>
               
               <div class="popupBox e390">
                  <div class="popupLabel" onmouseover="$('#d1e840').show('1000');" onmouseout="$('#d1e840').hide('1000');">[ footnote ]</div>
                  <div id="d1e840" style="display: none;">
                     <div class="footnote">
                        <div class="para e391">Finished and approved, that is.</div>
                     </div>
                  </div>
               </div>
               
               <div class="emphasis e392">Stage 1</div> resources can then be checked in from 
               <div class="emphasis e393">Stage
                  1
               </div> to 
               <div class="emphasis e394">Stable</div>, causing a new
               
               <div class="emphasis e395">Stable</div> version to be added.
            </div>
            <div class="para e396">Check-out operations, then, are as follows:</div>
            <div class="itemizedlist e397">
               <div class="listitem e398">
                  <div class="para e399">A check-out from 
                     <div class="emphasis e400">Stable</div> is a copy to 
                     <div class="emphasis e401">Stage
                        1
                     </div>. A
                     direct 
                     <div class="emphasis e402">Save</div> is not allowed. The check-out causes a new
                     file version of the resource in 
                     <div class="emphasis e403">Stage 1</div>.
                  </div>
               </div>
               <div class="listitem e404">
                  <div class="para e405">A check-out from 
                     <div class="emphasis e406">Stage 1</div> is a copy to 
                     <div class="emphasis e407">Stage
                        2
                     </div>.
                     A direct 
                     <div class="emphasis e408">Save</div> is not allowed.
                  </div>
               </div>
               <div class="listitem e409">
                  <div class="para e410">There is no check-out from 
                     <div class="emphasis e411">Stage 2</div>, as it would mean
                     a third stage. A direct 
                     <div class="emphasis e412">Save</div> is allowed and will result
                     in a new file version in 
                     <div class="emphasis e413">Stage 2</div>.
                  </div>
               </div>
            </div>
            <div class="para e414">Check-in operations are as follows:</div>
            <div class="itemizedlist e415">
               <div class="listitem e416">
                  <div class="para e417">A check-in from 
                     <div class="emphasis e418">Stage 2</div> is a copy to 
                     <div class="emphasis e419">Stage
                        1
                     </div>, locking the resource in 
                     <div class="emphasis e420">Stage 2</div> and
                     causing a new file version of the resource in 
                     <div class="emphasis e421">Stage 1</div>.
                     
                     
                  </div>
               </div>
               <div class="listitem e422">
                  <div class="para e423">A check-in from 
                     <div class="emphasis e424">Stage 1</div> is a copy to
                     
                     <div class="emphasis e425">Stable</div>, locking the resource in 
                     <div class="emphasis e426">Stage
                        1
                     </div> and causing a new file version of the resource in
                     
                     <div class="emphasis e427">Stable</div>.
                     
                     
                  </div>
               </div>
            </div>
            <div class="note e428">
               <div class="para e429">It might be prudent to make the check-out/in operations permission-based,
                  requiring special permissions to check in a new 
                  <div class="emphasis e430">Stable</div>
                  version, for example, while allowing a writer to check out from (and in to)
                  
                  <div class="emphasis e431">Stage 1</div>.
               </div>
            </div>
            <div class="para e432">The following exemplifies a document that is updated from
               
               <div class="emphasis e433">Stable</div> version 1 to 2. The numbers inside the circles
               represent an ordered list of check-out and check-in operations.
            </div>
            <div class="figure e434">
               <div class="title e435">Updating from Stable Version 1 to Stable Version 2</div>
               <div class="mediaobject e436">
                  <div class="imageobject e437">
                     <div class="metaBox e438"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e957').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e957" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e438'
                              </span><span class="metaAttribute">fileref='../../../vol13/graphics/Nordstrom01/Nordstrom01-004.png'
                              </span><span class="metaAttribute">width='500px'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e439">While only the 
               <div class="emphasis e440">Stable</div> versions might need to be
               
               <div class="quote e441">published</div>, the 
               <div class="emphasis e442">Stage 1</div> could be seen as
               significant, perhaps for traceability, and as such be saved. As we can see, the
               number of these versions is comparatively small. 
               <div class="emphasis e443">Stage 2</div>, on
               the other hand, is simply the document as a work in progress, and while there may
               be
               a significant number of new versions produced in that area, none of them is seen as
               significant.
            </div>
         </div><a name="AddingtotheAbstractionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e444" xml:id="id-abstraction-addition">
            <div class="title e445">Adding to the Abstraction</div>
            <div class="para e446">The URN schema identifying the resources (see 
               <div class="xref e447" linkend="section_csw_2m4_5n"></div>) can
               easily be expanded, of course:
            </div>
            <div class="programlisting e448" xml:space="preserve">urn:x-resource:r1:&lt;doc-number&gt;:&lt;lang&gt;:&lt;stable&gt;:&lt;stage1&gt;:&lt;stage2&gt;</div>
         </div><a name="VersionMapAdditionsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e449" xml:id="section_gcv_rr4_5n">
            <div class="title e450">Version Map Additions</div>
            <div class="para e451">The version map markup was already recursive, so adding a second stage is
               uncomplicated:
            </div>
            <div class="programlisting e452" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
               &lt;resource&gt;
               
               &lt;!-- Base URN --&gt;
               &lt;base&gt;&lt;/base&gt;
               
               &lt;!-- Stable version 1 --&gt;
               &lt;version&gt;
               &lt;rev&gt;&lt;/rev&gt;
               &lt;url lang="en-GB"&gt;&lt;/url&gt;
               
               &lt;!-- 1st Stage 1 (decimal) version --&gt;
               &lt;version&gt;
               &lt;rev&gt;&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               
               &lt;!-- Stage 2 (centecimal) versions --&gt;
               &lt;version&gt;
               &lt;rev&gt;&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               &lt;/version&gt;
               &lt;version&gt;
               &lt;rev&gt;&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               &lt;/version&gt;
               
               &lt;!-- Translations added --&gt;
               &lt;version&gt;
               &lt;rev&gt;&lt;/rev&gt;
               &lt;url lang="en-GB"&gt;&lt;/url&gt;
               &lt;url lang="sv-SE"&gt;&lt;/url&gt;
               &lt;url lang="fi-FI"&gt;&lt;/url&gt;
               &lt;/version&gt;
               &lt;/version&gt;
               
               &lt;!-- 2d Stage 1 (decimal) version --&gt;
               &lt;!-- Translations checked in from last Stage 2 --&gt;
               &lt;version&gt;
               &lt;rev&gt;&lt;/rev&gt;
               &lt;url lang="en-GB"&gt;&lt;/url&gt;
               &lt;url lang="sv-SE"&gt;&lt;/url&gt;
               &lt;url lang="fi-FI"&gt;&lt;/url&gt;
               &lt;/version&gt;
               &lt;/version&gt;
               
               &lt;!-- Stable version 2 --&gt;
               &lt;version&gt;
               &lt;rev&gt;&lt;/rev&gt;
               &lt;url lang="en-GB"&gt;&lt;/url&gt;
               &lt;url lang="sv-SE"&gt;&lt;/url&gt;
               &lt;url lang="fi-FI"&gt;&lt;/url&gt;
               
               &lt;!-- Stage 1 (decimal versions) --&gt;
               &lt;version&gt;
               &lt;rev&gt;&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               
               &lt;!-- Stage 2 (centecimal) versions --&gt;
               &lt;version&gt;
               &lt;rev&gt;&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               &lt;/version&gt;
               &lt;version&gt;
               &lt;rev&gt;&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               &lt;/version&gt;
               &lt;/version&gt;
               &lt;version&gt;
               &lt;rev&gt;&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               
               &lt;!-- Stage 2 (centecimal) versions --&gt;
               &lt;version&gt;
               &lt;rev&gt;&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               &lt;/version&gt;
               &lt;version&gt;
               &lt;rev&gt;&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               &lt;/version&gt;
               &lt;/version&gt;
               &lt;/version&gt;
               &lt;/resource&gt;
            </div>
            <div class="para e453">The differences here consist mostly of an added recursive 
               <div class="code e454">version</div>,
               listing centecimal versions for each decimal version. Notable is how translations
               are added to the last centecimal iteration following the first decimal version and
               then checked in to 
               <div class="emphasis e455">Stage 1</div>, causing a new decimal
               version:
            </div>
            <div class="programlisting e456" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
               &lt;resource&gt;
               
               &lt;!-- Base URN --&gt;
               &lt;base&gt;&lt;/base&gt;
               
               &lt;!-- Stable version 1 --&gt;
               &lt;version&gt;
               &lt;rev&gt;&lt;/rev&gt;
               &lt;url lang="en-GB"&gt;&lt;/url&gt;
               
               &lt;!-- 1st Stage 1 (decimal) version --&gt;
               &lt;version&gt;
               &lt;rev&gt;&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               
               &lt;!-- Stage 2 (centecimal) versions --&gt;
               &lt;version&gt;
               &lt;rev&gt;&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               &lt;/version&gt;
               &lt;version&gt;
               &lt;rev&gt;&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               &lt;/version&gt;
               
               &lt;!-- Translations added --&gt;
               &lt;version&gt;
               &lt;rev&gt;&lt;/rev&gt;
               &lt;url lang="en-GB"&gt;&lt;/url&gt;
               &lt;url lang="sv-SE"&gt;&lt;/url&gt;
               &lt;url lang="fi-FI"&gt;&lt;/url&gt;
               &lt;/version&gt;
               &lt;/version&gt;
               
               &lt;!-- 2d Stage 1 (decimal) version --&gt;
               &lt;!-- Translations checked in from last Stage 2 --&gt;
               &lt;version&gt;
               &lt;rev&gt;&lt;/rev&gt;
               &lt;url lang="en-GB"&gt;&lt;/url&gt;
               &lt;url lang="sv-SE"&gt;&lt;/url&gt;
               &lt;url lang="fi-FI"&gt;&lt;/url&gt;
               &lt;/version&gt;
               &lt;/version&gt;
               
               ...
               &lt;/resource&gt;
            </div>
            <div class="para e457">This new decimal version is then immediately checked in to
               
               <div class="emphasis e458">Stable</div>, causing a new stable, integer version.
            </div>
         </div><a name="MetadataANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e459">
            <div class="title e460">Metadata</div>
            <div class="para e461">While adding markup to identify significant check-ins (see the beginning of this
               chapter, at 
               <div class="xref e462" linkend="section_srk_mr4_5n"></div>) is, in my humble opinion, not a good idea,
               markup to handle metadata for 
               <div class="emphasis e463">every</div> check-in probably is, as it
               will help locate a specific version later. The versioning module provided by eXist
               will add a timestamp and the user for a save, but other metadata, such as a comment
               field or a list of relevant keywords, need to be added.
            </div>
            <div class="para e464">The version map hints at several useful locations for the metadata:</div>
            <div class="itemizedlist e465">
               <div class="listitem e466">
                  <div class="para e467">For a resource, regardless of version.</div>
               </div>
               <div class="listitem e468">
                  <div class="para e469">For a whole version, be it integer, decimal or centecimal.</div>
               </div>
               <div class="listitem e470">
                  <div class="para e471">For specific content, as identified by the mapped URL.</div>
               </div>
            </div>
            <div class="para e472">Markup-wise, one solution might be something like this:</div>
            <div class="figure e473">
               <div class="title e474">Metadata</div>
               <div class="mediaobject e475">
                  <div class="imageobject e476">
                     <div class="metaBox e477"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1034').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1034" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e477'
                              </span><span class="metaAttribute">fileref='../../../vol13/graphics/Nordstrom01/Nordstrom01-005.png'
                              </span><span class="metaAttribute">width='500px'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e478">The structure and contents of the 
               <div class="code e479">metadata</div> element are beyond the
               scope of this paper, as they concern themselves with metadata for each specific
               version rather than the progression of versions as described here; they simply
               provide human-readable metadata
               <div class="popupBox e480">
                  <div class="popupLabel" onmouseover="$('#d1e1040').show('1000');" onmouseout="$('#d1e1040').hide('1000');">[ footnote ]</div>
                  <div id="d1e1040" style="display: none;">
                     <div class="footnote">
                        <div class="para e481">For example, a free-text comment.</div>
                     </div>
                  </div>
               </div> for a specific version (as identified by the node).
            </div>
         </div><a name="ScopeandAdditionalStagesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e482" xml:id="section_xwr_sr4_5n">
            <div class="title e483">Scope and Additional Stages</div>
            <div class="para e484">Adding a second stage allows us to keep track of significant checked-in versions
               beyond the 
               <div class="emphasis e485">Stable</div> branch. Additional stages might be considered
               to add further semantics to versioning.
            </div>
            <div class="para e486">For example, if the versioning was used to handle the documentation of a large
               software project (everything from Microsoft Office to the Linux kernel springs to
               mind), the 
               <div class="emphasis e487">Stable</div> branch could list major releases in the
               project's lifecycle, 
               <div class="emphasis e488">Stage 1</div> mark updates within those releases
               and 
               <div class="emphasis e489">Stage 2</div> any hotfixes, all of which should be considered to
               identify significant versions aimed at an end user. A 
               <div class="emphasis e490">Stage 3</div>
               and perhaps a 
               <div class="emphasis e491">Stage 4</div> might be needed to handle the versioning
               required for content production, where most versions would never reach the end user
               and only help ease a content author's life.
            </div>
            <div class="note e492">
               <div class="para e493">The additional stages should, of course, be added to the URN schema.</div>
            </div>
            <div class="para e494">Stages, then, are ultimately about scoping and define situations where the
               checked-in versions apply.
            </div><a name="ProjectsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e495" xml:id="id-projects">
               <div class="title e496">Projects</div>
               <div class="para e497">In addition to adding staging levels, the resources frequently need to be
                  grouped when version handled. For example, if checking out a resource, it is
                  often a good idea to check out the document or documents using them.
                  Furthermore, check-outs as discussed here would benefit from defining
                  
                  <div class="emphasis e498">projects</div>, that is, groups of resources that are related
                  for some other reason (resources commonly reused; documents belonging to the
                  same product; all system administration guides; etc).
               </div>
               <div class="para e499">As a resource is frequently reused by several documents, a useful (and easy)
                  way of identifying such resources in the version map is something like
                  this:
               </div>
               <div class="programlisting e500" xml:space="preserve">&lt;map&gt;
                  &lt;resources&gt;
                  &lt;resource&gt;
                  ...
                  &lt;/resource&gt;
                  ...
                  &lt;/resources&gt;
                  
                  &lt;projects&gt;
                  &lt;project&gt;
                  &lt;urn&gt;&lt;/urn&gt;
                  &lt;urn&gt;&lt;/urn&gt;
                  &lt;urn&gt;&lt;/urn&gt;
                  &lt;/project&gt;
                  &lt;project&gt;
                  &lt;urn&gt;&lt;/urn&gt;
                  &lt;urn&gt;&lt;/urn&gt;
                  &lt;/project&gt;
                  &lt;/projects&gt;
                  &lt;/map&gt;
               </div>
               <div class="para e501">A 
                  <div class="code e502">project</div> is an arbitrary group listing resources and project
                  metadata, useful when handling the resources together. Obvious features here
                  include check-out and check-in operations for the project, but I can think of
                  several other uses, most of which are beyond the scope of this paper.
               </div>
               <div class="note e503">
                  <div class="para e504">There are several ways of listing the URNs included in the project,
                     depending on their use. If the project's aim is to handle every decimal
                     version and language of a resource, a wildcard-based shorthand might be
                     preferable (say, 
                     <div class="code e505">urn:x-resources:123456:*:1:*</div>).
                  </div>
               </div>
               <div class="para e506">Projects should, of course, be version handled too, as they will almost
                  certainly change over time. For example, one might handle them as any other
                  resource in the version map and always store 
                  <div class="code e507">project</div> documents in
                  separate files (which requires a way to easily identify them when
                  authoring).
               </div>
            </div><a name="UseLatestRevisitedANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e508" xml:id="id-use-latest-revisited">
               <div class="title e509">Use Latest Revisited</div>
               <div class="para e510">The use latest problem
                  <div class="popupBox e511">
                     <div class="popupLabel" onmouseover="$('#d1e1107').show('1000');" onmouseout="$('#d1e1107').hide('1000');">[ footnote ]</div>
                     <div id="d1e1107" style="display: none;">
                        <div class="footnote">
                           <div class="para e512">Where the latest (approved) version of a leaf node in a document link
                              tree is always preferred and should therefore always be linked to, but
                              where the module doing the linking may have been updated elsewhere, with
                              incompatible changes, and therefore not be possible to update with a new
                              link for the document at hand.
                           </div>
                        </div>
                     </div>
                  </div> is largely a scoping issue and happens because modules are reused
                  everywhere, without defining rules for when and where reuse is allowed
                  <div class="popupBox e513">
                     <div class="popupLabel" onmouseover="$('#d1e1111').show('1000');" onmouseout="$('#d1e1111').hide('1000');">[ footnote ]</div>
                     <div id="d1e1111" style="display: none;">
                        <div class="footnote">
                           <div class="para e514">As mentioned earlier, one (non-) solution is to update the link anyway
                              and create a new (stable) version. This will pass on the problem to
                              someone else and eventually come back to bite you, but nevertheless, you
                              might be tempted to refine it by using merge software and such.
                              Basically, however, it would always result in a situation where a new
                              version could not be assumed to be a 
                              <div class="emphasis e515">development</div> of
                              the last one, but rather an incompatible change.
                           </div>
                        </div>
                     </div>
                  </div>.
               </div>
               <div class="para e516">Better is to add one or more stages and clearly define a scope where using
                  (and perhaps automatically updating links to) the latest approved versions is
                  allowed. For example, if 
                  <div class="emphasis e517">Stage 1</div> handles the releases of a
                  product and its documentation within a major release, it might be reasonable to
                  allow at least some of the reused modules to be automatically updated to their
                  latest versions within that major version.
               </div>
               <div class="para e518">Let's say, for example, that Module A in version 3.1 (
                  <div class="emphasis e519">Stage
                     1
                  </div>) needs a link to a warning inside a warnings document authored
                  by the legal team. The warnings document is also in 
                  <div class="emphasis e520">Stage 1</div>
                  and has version 1.19. Module A is checked out to 
                  <div class="emphasis e521">Stage 2</div>
                  and a link to the warning is added to it, including a fragment ID pinpointing
                  the warning, like so:
               </div>
               <div class="programlisting e522" xml:space="preserve">&lt;link xlink:href="URN:1:19#id-warning"/&gt;</div>
               <div class="para e523">First of all, it is easy to define a business rule that updates the link to
                  the latest available 
                  <div class="emphasis e524">Stage 1</div> (decimal) version when Module
                  A is published, triggered by the fact that the version linked to is a decimal
                  version. It would be easy to look up the latest version in the version map and
                  use that during preprocessing. If such a generic business rule feels a bit too
                  risky, adding markup that further scopes the link is equally easy if somewhat
                  crude:
               </div>
               <div class="programlisting e525" xml:space="preserve">&lt;link xlink:href="URN:1:19#id-warning" use-latest="yes"/&gt;</div>
               <div class="para e526">The logic here is 
                  <div class="quote e527">use latest decimal version</div>. An editor feature
                  that checks the available versions of the warnings document, including new
                  
                  <div class="emphasis e528">Stable</div> versions, and alerts the author if newer ones
                  are available than the one used in Module A should be useful and relatively
                  uncomplicated to implement.
               </div>
               <div class="para e529">More refined, but perhaps a bit complex to handle without a style guide and a
                  good user interface, might be to use the version level as the
                  
                  <div class="code e530">use-latest</div> value
                  <div class="popupBox e531">
                     <div class="popupLabel" onmouseover="$('#d1e1156').show('1000');" onmouseout="$('#d1e1156').hide('1000');">[ footnote ]</div>
                     <div id="d1e1156" style="display: none;">
                        <div class="footnote">
                           <div class="para e532">I've considered renaming the 
                              <div class="emphasis e533">Stable</div> level
                              
                              <div class="emphasis e534">Stage 0</div>, for this reason and others.
                           </div>
                        </div>
                     </div>
                  </div>.
               </div>
               <div class="programlisting e535" xml:space="preserve">&lt;link xlink:href="URN:1:19#id-warning" use-latest="1"/&gt;</div>
               <div class="para e536">This would include every update to the target checked in to 
                  <div class="emphasis e537">Stage
                     1
                  </div> in the scope. An additional dimension of reuse might be to
                  limit the scope to specific project or projects only.
               </div>
            </div>
         </div>
      </div><a name="LinkingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e538">
         <div class="title e539">Linking</div>
         <div class="para e540">This paper is about versioning rather than linking, but since the former will only
            be
            truly useful if there is at least some of the latter, I wish to make a few points
            regarding linking.
         </div><a name="UsingURNsinLinksANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e541" xml:id="id-urns-in-links">
            <div class="title e542">Using URNs in Links</div>
            <div class="para e543">My preferences for URNs stem from my day-to-day work but any other abstraction
               would probably do, as long as there is a way to separate the version component(s)
               <div class="popupBox e544">
                  <div class="popupLabel" onmouseover="$('#d1e1183').show('1000');" onmouseout="$('#d1e1183').hide('1000');">[ footnote ]</div>
                  <div id="d1e1183" style="display: none;">
                     <div class="footnote">
                        <div class="para e545">And the language/country components.</div>
                     </div>
                  </div>
               </div> from the name. Using a name is important, however, assuming that the
               name is persistent and unique where used. Addresses change because resources are
               frequently moved around. Indeed, here, using an address would be very difficult in
               itself.
            </div>
            <div class="para e546">Be as it may, there is little point to the multilevel versioning abstraction if it
               is only ever used for checking in and out monolithic XML documents that never
               include a multilevel version link to anything else. In 
               <div class="xref e547" linkend="id-use-latest-revisited"></div>,
               I do just that, though: the 
               <div class="code e548">link</div> element uses a name-based
               
               <div class="code e549">xlink:href</div> rather than an address-based one.
            </div>
            <div class="para e550">Using a URN in a link should be a simple matter of referencing resources in the
               version map, using the base URN and as many levels of versions as needed (and
               allowed by the business rules and their implementation). For example, an
               implementation might use all version levels available when creating the link
               (resulting in a pointer such as 
               <div class="code e551">URN:en-GB:2:19:4:3#some-id</div>) but then
               update that link when publishing to the latest version in scope, based on the
               business rules in effect.
            </div>
         </div><a name="TheCaseforXLinkandLinkbasesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e552">
            <div class="title e553">The Case for XLink and Linkbases</div>
            <div class="para e554">Until now, I've made few assumptions about the link mechanisms themselves. The
               
               <div class="code e555">link</div> tag above, for example, is an inline reference using XLink
               mostly because I rather prefer XLink and use Simple XLinks all the time, but I think
               the example would be equally valid using, say, XInclude. 
            </div>
            <div class="para e556">I do think, however, that XLink(
               <div class="xref e557" linkend="id-xlink-spec"></div>) might prove to be very powerful, especially if the
               links were placed out of line, in a linkbase. There are several points to be made
               here:
            </div>
            <div class="itemizedlist e558">
               <div class="listitem e559">
                  <div class="para e560">Out-of-line links, of course, would not require updating the resource
                     itself, only the linkbase arc, which would certainly change the specifics of
                     a 
                     <div class="quote e561">use latest</div> implementation and conceivably result in
                     easier-to-maintain business rules.
                  </div>
               </div>
               <div class="listitem e562">
                  <div class="para e563">Extended XLink does also suggest a standardised way for much, if not most,
                     of the version map markup. The URNs listed in a project, for example, would
                     probably benefit from being handled as XLink locator-type elements.
                  </div>
               </div>
            </div>
            <div class="para e564">It would be sort of cool to add the linkbase to the version map directly:</div>
            <div class="figure e565">
               <div class="title e566">Linkbase Added</div>
               <div class="mediaobject e567">
                  <div class="imageobject e568">
                     <div class="metaBox e569"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1231').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1231" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e569'
                              </span><span class="metaAttribute">fileref='../../../vol13/graphics/Nordstrom01/Nordstrom01-006.png'
                              </span><span class="metaAttribute">width='500px'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e570">The 
               <div class="quote e571">Links</div> branch above list the XLink arcs. 
            </div>
            <div class="para e572">There is, to my inner markup geek, something very appealing about this kind of
               all-purpose markup. I get all excited, thinking about how easy it would be to
               create, edit and publish XML with a few XPaths pointing to things across the version
               map XML, but the more practically-minded me questions the feasibility and, above
               all, necessity of including everything in the same, big file when it does not matter
               all that much in a well-indexed XML database where you actually put the markup you
               need to look up later.
            </div>
            <div class="para e573">All of which neatly brings me to the last big topic in this paper.</div>
         </div>
      </div><a name="ImplementationNotesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e574">
         <div class="title e575">Implementation Notes</div>
         <div class="para e576">Now, I know that there is nothing quite so practical as a good theory, but I would
            still like to include a few implementation notes in my limited capacity as a
            non-programmer. I do believe that most if not everything of what's suggested in this
            paper can be implemented using XML technologies only, without having to learn Java,
            even
            though I'll readily admit that Java would help
            <div class="popupBox e577">
               <div class="popupLabel" onmouseover="$('#d1e1246').show('1000');" onmouseout="$('#d1e1246').hide('1000');">[ footnote ]</div>
               <div id="d1e1246" style="display: none;">
                  <div class="footnote">
                     <div class="para e578">Java would probably be especially helpful when constructing suitable
                        versioning triggers in eXist.
                     </div>
                  </div>
               </div>
            </div>.
         </div><a name="URNGenerationandParsingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e579">
            <div class="title e580">URN Generation and Parsing</div>
            <div class="para e581">The URN schema (see 
               <div class="xref e582" linkend="section_csw_2m4_5n"></div> and 
               <div class="xref e583" linkend="id-abstraction-addition"></div>)
               requires a unique base URN that should be generated and handled by the system. At
               its simplest, the base URN is little more than a sequential number, bumped up a
               notch for every new resource, but allowing for different types of base URNs to
               identify different types of resources might be useful.
            </div>
            <div class="para e584">There is also a need to parse the URN, for example, when locating base URNs,
               handling wildcards, updating links, etc.
            </div>
         </div><a name="CheckinCheckoutandUpdatingtheVersionMapANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e585">
            <div class="title e586">Check-in, Check-out and Updating the Version Map</div>
            <div class="para e587">Check-in and check-out are both copy operations from one location to another. In
               eXist, they are handled using XQuery functions for copying resources and, if
               permissions are used, eXist Security Manager functions for checking the appropriate
               permissions and possibly the group of the resource. eXist also provides UNIX-style
               functions for changing permissions, group, etc, for the file that is copied to
               protect it from unwanted changes
               <div class="popupBox e588">
                  <div class="popupLabel" onmouseover="$('#d1e1266').show('1000');" onmouseout="$('#d1e1266').hide('1000');">[ footnote ]</div>
                  <div id="d1e1266" style="display: none;">
                     <div class="footnote">
                        <div class="para e589">For example, checked-out files might simply be have their group changed to
                           a checked-out group.
                        </div>
                     </div>
                  </div>
               </div>.
            </div>
            <div class="para e590">Updating the map is a matter of adding to the resource's versions list. A
               check-out means adding a new version to the next stage further down (from
               
               <div class="emphasis e591">Stage 1</div> to 
               <div class="emphasis e592">Stage 2</div>, for example) and
               starting up the next level revisions in the 
               <div class="code e593">rev</div> tag. A check-in does
               pretty much the same thing but in the other direction, and needs to check the
               existing revisions on that level before adding a new one.
            </div>
            <div class="para e594">For example, let's say that this resource in 
               <div class="emphasis e595">Stage 1</div>,
               revision 2, is checked out:
            </div>
            <div class="programlisting e596" xml:space="preserve">&lt;version&gt;
               &lt;rev&gt;2&lt;/rev&gt;
               &lt;url&gt;xmldb:exist:///...&lt;/url&gt;
               &lt;/version&gt;
            </div>
            <div class="para e597">A new 
               <div class="code e598">version</div> is added, like so:
            </div>
            <div class="programlisting e599" xml:space="preserve">&lt;version&gt;
               &lt;rev&gt;2&lt;/rev&gt;
               &lt;url&gt;xmldb:exist:///...&lt;/url&gt;
               
               &lt;!-- Stage 2 (centecimal) versions --&gt;
               &lt;version&gt;
               &lt;rev&gt;1&lt;/rev&gt;
               &lt;url&gt;xmldb:exist:///...&lt;/url&gt;
               &lt;/version&gt;
               &lt;/version&gt;
            </div>
            <div class="para e600">Even though this example discusses stages 1 and 2, there's actually nothing apart
               from the comment that places them there. The operation here is the same,
               regardless.
            </div>
            <div class="para e601">Checking in is slightly more complicated, but only slightly. Here, the
               
               <div class="emphasis e602">Stage 1</div> revision 2 will be checked in:
            </div>
            <div class="programlisting e603" xml:space="preserve">&lt;resource&gt;
               
               &lt;!-- Base URN --&gt;
               &lt;base&gt;123456&lt;/base&gt;
               
               &lt;!-- Stable version 1 --&gt;
               &lt;version&gt;
               &lt;rev&gt;1&lt;/rev&gt;
               &lt;url&gt;xmldb:exist:///...&lt;/url&gt;
               
               &lt;!-- 1st Stage 1 (decimal) versions --&gt;
               &lt;version&gt;
               &lt;rev&gt;1&lt;/rev&gt;
               &lt;url&gt;xmldb:exist:///...&lt;/url&gt;
               
               &lt;!-- Stage 2 (centecimal) versions --&gt;
               ...
               &lt;/version&gt;
               
               &lt;!-- 2d Stage 1 (decimal) version --&gt;
               &lt;version&gt;
               &lt;rev&gt;2&lt;/rev&gt;
               &lt;url&gt;xmldb:exist:///...&lt;/url&gt;
               &lt;/version&gt;
               &lt;/version&gt;
               &lt;/resource&gt;
            </div>
            <div class="para e604">A new version, revision 2, is added:</div>
            <div class="programlisting e605" xml:space="preserve">&lt;resource&gt;
               
               &lt;!-- Base URN --&gt;
               &lt;base&gt;123456&lt;/base&gt;
               
               &lt;!-- Stable version 1 --&gt;
               &lt;version&gt;
               &lt;rev&gt;1&lt;/rev&gt;
               &lt;url&gt;xmldb:exist:///...&lt;/url&gt;
               
               &lt;!-- 1st Stage 1 (decimal) versions --&gt;
               &lt;version&gt;
               &lt;rev&gt;1&lt;/rev&gt;
               &lt;url&gt;xmldb:exist:///...&lt;/url&gt;
               
               &lt;!-- Stage 2 (centecimal) versions --&gt;
               ...
               &lt;/version&gt;
               
               &lt;!-- 2d Stage 1 (decimal) version --&gt;
               &lt;version&gt;
               &lt;rev&gt;2&lt;/rev&gt;
               &lt;url&gt;xmldb:exist:///...&lt;/url&gt;
               &lt;/version&gt;
               &lt;/version&gt;
               
               &lt;!-- Stable version 2 --&gt;
               &lt;version&gt;
               &lt;rev&gt;2&lt;/rev&gt;
               &lt;url&gt;xmldb:exist:///...&lt;/url&gt;
               &lt;/version&gt;
               &lt;/resource&gt;
            </div>
            <div class="para e606">Both check-out and check-in should be able to use the same basic function for
               adding a new 
               <div class="code e607">version</div>, as long as there is something to check which
               operation has been selected so that the new 
               <div class="code e608">version</div> and the appropriate
               
               <div class="code e609">rev</div> can be added either up or down in the structure.
            </div>
            <div class="note e610">
               <div class="para e611">If there is no further level down from 
                  <div class="emphasis e612">Stage 2</div>, in this
                  example, there should be a little something to disable the check-out function on
                  that level in the editor.
               </div>
            </div>
         </div><a name="LockingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e613" xml:id="section_f5d_ykw_l4">
            <div class="title e614">Locking</div>
            <div class="para e615">The versioning in this paper suggests that resources that are checked in or out
               from a stage are to be locked in that stage. While this paper does not attempt to
               solve every problem created by locking, there are a number of points to be
               made:
            </div>
            <div class="itemizedlist e616">
               <div class="listitem e617">
                  <div class="para e618">A 
                     <div class="emphasis e619">lock</div>, here, primarily signifies that the locked
                     resource is being handled in another stage, not that it is checked out
                     exclusively by a writer (who then leaves the company and causes problems for
                     those remaining behind, etc).
                  </div>
               </div>
               <div class="listitem e620">
                  <div class="para e621">Allowing a document in the editing stage to be edited by two or more
                     writers simultaneously causes various merging problems, all of which are
                     manageable, but the important question is (and please remember that we are
                     discussing content rather than code): 
                     <div class="emphasis e622">why are they editing the
                        same content in the first place?
                     </div> This, to me, hints at an
                     organisational problem.
                  </div>
               </div>
               <div class="listitem e623">
                  <div class="para e624">
                     <div class="emphasis e625">Not locking</div> a resource that is being handled in
                     another stage is entirely feasible, of course. Easiest would be to implement
                     an 
                     <div class="quote e626">optimistic check-out</div>, never locking anything but having
                     the system notify the writer if the resource was already being edited by
                     someone, encouraging communication and collaboration.
                  </div>
                  <div class="para e627">The author's experience, drawn primarily from developing document content
                     rather than code, is that alone, this approach works best within the same
                     time zone, preferably the same building, but is made easier by adding
                     merging tools and means to easily modularising content that is becoming too
                     large to handle.
                  </div>
               </div>
            </div>
         </div><a name="BusinessRulesandLinkingANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e628">
            <div class="title e629">Business Rules and Linking</div>
            <div class="para e630">As mentioned in 
               <div class="xref e631" linkend="id-urns-in-links"></div>, while the link implementation might use an exact
               URN version in the pointer, business rules used when publishing might be used to
               update that link to the latest version within scope. That scope might include
               defining a versioning level, but also further limit the 
               <div class="quote e632">use latest</div>
               function to URNs listed in projects (see 
               <div class="xref e633" linkend="id-projects"></div>). Let's say
               that we created this link:
            </div>
            <div class="programlisting e634" xml:space="preserve">&lt;link xlink:href="urn:x-resources:r1:123456:en-GB:2:2:4" use-latest="1"/&gt;</div>
            <div class="para e635">At the time the link was created, the very latest available version was
               
               <div class="quote e636">2.2.4</div>. However, later, when the document with the link is
               published, the target resource has gone through a number of revisions and the
               version tree now looks like this (leaving out the URLs):
            </div>
            <div class="programlisting e637" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
               &lt;map xmlns="http://www.sgmlguru.org/ns/versions"&gt;
               &lt;resources&gt;
               &lt;resource&gt;
               
               &lt;!-- Base URN --&gt;
               &lt;base&gt;123456&lt;/base&gt;
               
               &lt;!-- Stable version 1 --&gt;
               &lt;version&gt;
               &lt;rev&gt;1&lt;/rev&gt;
               &lt;url lang="en-GB"&gt;&lt;/url&gt;
               
               &lt;!-- 1st Stage 1 (decimal) version --&gt;
               &lt;version&gt;
               ...
               &lt;/version&gt;
               
               &lt;!-- 2d Stage 1 (decimal) version --&gt;
               &lt;version&gt;
               ...
               &lt;/version&gt;
               &lt;/version&gt;
               
               &lt;!-- Stable version 2 --&gt;
               &lt;version&gt;
               &lt;rev&gt;2&lt;/rev&gt;
               &lt;url lang="en-GB"&gt;&lt;/url&gt;
               
               &lt;!-- Stage 1 (decimal versions) --&gt;
               &lt;version&gt;
               &lt;rev&gt;1&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               
               &lt;!-- Stage 2 (centecimal) versions --&gt;
               ...
               &lt;/version&gt;
               &lt;version&gt;
               &lt;rev&gt;2&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               
               &lt;!-- Stage 2 (centecimal) versions --&gt;
               &lt;version&gt;
               &lt;rev&gt;1&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               &lt;/version&gt;
               &lt;version&gt;
               &lt;rev&gt;2&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               &lt;/version&gt;
               &lt;version&gt;
               &lt;rev&gt;3&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               &lt;/version&gt;
               
               &lt;!-- Target at the time of link creation --&gt;
               &lt;version&gt;
               &lt;rev&gt;4&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               &lt;/version&gt;
               
               &lt;version&gt;
               &lt;rev&gt;5&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               &lt;/version&gt;
               &lt;/version&gt;
               
               &lt;!-- New decimal version --&gt;
               &lt;version&gt;
               &lt;rev&gt;3&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               &lt;version&gt;
               &lt;rev&gt;1&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               &lt;/version&gt;
               &lt;version&gt;
               &lt;rev&gt;2&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               &lt;/version&gt;
               &lt;version&gt;
               &lt;rev&gt;3&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               &lt;/version&gt;
               &lt;/version&gt;
               &lt;!-- New decimal version --&gt;
               &lt;version&gt;
               &lt;rev&gt;4&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               &lt;/version&gt;
               &lt;/version&gt;
               
               &lt;!-- New stable version --&gt;
               &lt;version&gt;
               &lt;rev&gt;3&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               &lt;!-- New decimal version from v3 --&gt;
               &lt;version&gt;
               &lt;rev&gt;1&lt;/rev&gt;
               &lt;url&gt;&lt;/url&gt;
               &lt;/version&gt;
               &lt;/version&gt;
               &lt;/resource&gt;
               ...
               &lt;/resources&gt;
               &lt;/map&gt;
            </div>
            <div class="para e638">We can see that two new 
               <div class="emphasis e639">Stage 1</div>, decimal, versions have been
               added to 
               <div class="emphasis e640">Stable</div> version 2., but also, there is now a
               
               <div class="emphasis e641">Stable</div> version 3, based on version 2.4. Since version 2.4
               is the latest 
               <div class="emphasis e642">Stage 1</div> version at the time of publishing and
               it's the level defined by 
               <div class="code e643">use-latest="1"</div> in the link, it is the one
               used as a target. Version 3.1 is outside the defined scope.
            </div>
            <div class="para e644">We could, of course, add a project structure to the version map and further limit
               the scope. The business rules would state that the link update was only updated if
               both source and target were part of the same project. Let's say the projects look
               like this:
            </div>
            <div class="programlisting e645" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
               &lt;map xmlns="http://www.sgmlguru.org/ns/versions"&gt;
               &lt;resources&gt;
               ...
               &lt;/resources&gt;
               
               &lt;projects&gt;
               &lt;project&gt;
               &lt;urn&gt;123456&lt;/urn&gt;
               &lt;urn&gt;111111&lt;/urn&gt;
               &lt;urn&gt;222222&lt;/urn&gt;
               &lt;/project&gt;
               &lt;project&gt;
               &lt;urn&gt;333333&lt;/urn&gt;
               &lt;urn&gt;111111&lt;/urn&gt;
               &lt;/project&gt;
               &lt;/projects&gt;
               &lt;/map&gt;
            </div>
            <div class="para e646">If the link source document was URN 
               <div class="code e647">111111</div> and the target URN
               
               <div class="code e648">222222</div>, the 
               <div class="quote e649">use latest</div> update when publishing would
               be allowed. If the target was 
               <div class="code e650">333333</div>, however, it wouldn't.
            </div>
            <div class="para e651">Implementation-wise, both scoping techniques should be easy to handle in XSLT
               stylesheets used by publishing pipelines.
            </div>
         </div><a name="PermissionsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e652">
            <div class="title e653">Permissions</div>
            <div class="para e654">When implementing the more advanced versioning described in 
               <div class="xref e655" linkend="section_srk_mr4_5n"></div>, I
               think it is a good idea to consider requiring different permissions for check-out
               and check-in, depending on the versioning level. For example, it might be a good
               idea to limit check-outs from 
               <div class="emphasis e656">Stable</div> and 
               <div class="emphasis e657">Stage
                  1
               </div> to a project management role to further control scoping and reuse,
               especially when handling larger documentation projects, while allowing authors and
               project managers alike to check out resources to stages 2 and below.
            </div>
         </div><a name="HandlingeXistVersionsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e658">
            <div class="title e659">Handling eXist Versions</div>
            <div class="para e660">eXist stores versioning information in 
               <div class="code e661">/db/system/versions/db/...</div>,
               mirroring the database's collection structure and including diffed resource versions
               in the mirrored collections. The diffed XML files use names that include the eXist
               revision numbers:
            </div>
            <div class="figure e662" xml:id="id-versioning-in-exist">
               <div class="title e663">Versions in eXist</div>
               <div class="mediaobject e664">
                  <div class="imageobject e665">
                     <div class="metaBox e666"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e1438').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e1438" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e666'
                              </span><span class="metaAttribute">fileref='../../../vol13/graphics/Nordstrom01/Nordstrom01-007.png'
                              </span><span class="metaAttribute">width='500px'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e667">The eXist version-specific metadata is always included, first in the XML diff file
               (for example, 
               <div class="emphasis e668">ml-versioning-2.xml.4854</div>), which makes it easy to
               retrieve when needed:
            </div>
            <div class="programlisting e669" xml:space="preserve">&lt;v:version xmlns:v="http://exist-db.org/versioning"&gt;
               &lt;v:properties&gt;
               &lt;v:document&gt;ml-versioning-2.xml&lt;/v:document&gt;
               &lt;v:user&gt;admin&lt;/v:user&gt;
               &lt;v:date&gt;2014-04-17T09:29:14.085+02:00&lt;/v:date&gt;
               &lt;v:revision&gt;4854&lt;/v:revision&gt;
               &lt;/v:properties&gt;
               ...
               &lt;/v:version&gt;
            </div>
            <div class="para e670">Binary files are also tracked, but accessing them seems to be more difficult as
               the diffing mechanism (obviously) does not work.
            </div>
            <div class="para e671">eXist revisions are recorded in the
               
               <div class="code e672">v:revision</div> element (see above). A specific version can be retrieved
               using the 
               <div class="code e673">v:doc($doc,$rev)</div> XQuery function, so
               the
               
               <div class="code e674">url</div> element in the version mapping markup will need both the base
               URL to the resource and the revision of the version to be retrieved:
            </div>
            <div class="programlisting e675" xml:space="preserve">&lt;url&gt;
               &lt;base&gt;xmldb:exist:///db/work/whitepapers/balisage/2014/multilevel-versioning/ml-versioning-2.xml&lt;/base&gt;
               &lt;rev&gt;4854&lt;/rev&gt;
               &lt;/url&gt;
            </div>
            <div class="para e676">Identifying eXist version 4854 of 
               <div class="emphasis e677">ml-versioning-2.xml</div>.
            </div>
            <div class="note e678">
               <div class="para e679">The 
                  <div class="code e680">base</div> URL, above, denotes the 
                  <div class="emphasis e681">latest</div>
                  version of the document rather than eXist's 
                  <div class="quote e682">base</div> version, which
                  is the first version stored and on which the later versions are based.
               </div>
            </div>
            <div class="para e683">A version update must be triggered in eXist whenever copying the file from one
               area to another - both check-in and check-out are copy operations. eXist provides
               versioning triggers for copy events so capturing the new eXist revision number is
               a
               matter of inserting the 
               <div class="code e684">v:history</div> function after the copy:
            </div>
            <div class="programlisting e685" xml:space="preserve">v:history(doc("/db/path/to/xml"))//v:revision[last()]</div>
            <div class="para e686"> This returns a 
               <div class="code e687">v:revision</div> element, with the eXist revision given in
               
               <div class="code e688">@rev</div>:
            </div>
            <div class="programlisting e689" xml:space="preserve">&lt;v:revision xmlns:v="http://exist-db.org/versioning" rev="5029"&gt;
               &lt;v:date&gt;2014-04-18T18:11:19.211+02:00&lt;/v:date&gt;
               &lt;v:user&gt;admin&lt;/v:user&gt;
               &lt;/v:revision&gt;
            </div>
            <div class="para e690">It is then a simple matter to bump up the URN 
               <div class="code e691">rev</div> and add the
               
               <div class="quote e692">URL</div> to the new 
               <div class="code e693">version</div> in the version map.
            </div>
         </div><a name="TheeXistUserInterfaceANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e694">
            <div class="title e695">The eXist User Interface</div>
            <div class="para e696">At its simplest, the user interface needed in eXist is just what's needed to
               display the version map in a browser, easily produced with an XSLT stylesheet and
               some CSS, plus something to trigger the page with. 
            </div>
            <div class="para e697">The map will probably grow to be quite large, so including a filtering mechanism
               is necessary to show only selected parts of the map (i.e., parts of or the complete
               version history of a specified resource). Functionality to show various metadata for
               specified versions, provide links to physical resources, include map icons to
               indicate the language(s) used, and so on, are other examples of useful
               additions.
            </div>
            <div class="para e698">eXist provides several XForms implementations
               <div class="popupBox e699">
                  <div class="popupLabel" onmouseover="$('#d1e1521').show('1000');" onmouseout="$('#d1e1521').hide('1000');">[ footnote ]</div>
                  <div id="d1e1521" style="display: none;">
                     <div class="footnote">
                        <div class="para e700">XSLTForms and Better Forms are both configured and ready for use, and
                           Orbeon is easy to add.
                        </div>
                     </div>
                  </div>
               </div>, as well as a powerful XQuery (3.0) implementation, to help add
               these.
            </div>
         </div><a name="TheEditorANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e701">
            <div class="title e702">The Editor</div>
            <div class="para e703">Here's where I'm currently really out of my depth, as adding check-out and
               check-in functions to an editor will involve programming. Nevertheless, editor GUI
               considerations apart, the versioning additions should consist mainly of calling the
               XQuery doing the copying, including a flag indicating what operation is used, and
               making the editor aware of what versioning level the resource is at and disabling
               the check-out operation, if there are no further levels to copy to.
            </div>
            <div class="para e704">There should also be a permissions check that disables both operations if the
               author lacks the necessary permissions to run the operation(s).
            </div>
            <div class="para e705">Also, the editor needs linking functionality using the multilevel versioning
               abstraction (URNs rather than addresses in links). This entails opening the target
               so that the user can identify the target (including a node inside the target
               document); easiest should be to map the target's URN and URL locally rather than
               accessing the version map XML from the database.
            </div>
            <div class="para e706">Rather than opening the targets one by one, it might be a good idea to retrieve a
               URN/URL map for the whole project, if using the project concept (see 
               <div class="xref e707" linkend="id-projects"></div>).
            </div>
         </div>
      </div><a name="AfterwordANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e708">
         <div class="title e709">Afterword</div>
         <div class="para e710">The versioning system suggested here came to be partly because I really want a more
            advanced version handling for eXist, but mostly because the more primitive
            
            <div class="quote e711">straight</div> versioning system that introduces this paper was prominently
            figured in my paper from last year's Balisage (
            <div class="xref e712" linkend="id-semantic-profiling"></div>) and
            Eliot Kimber promptly dismissed the problems with updating the document link tree
            as the
            results of bad configuration management. He was right, too, and I hope this is better.
            Thank you, Eliot.
         </div><a name="AFewNotesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e713" xml:id="section_ihn_tfx_l4">
            <div class="title e714">A Few Notes</div><a name="DisclaimerANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e715" xml:id="section_kqs_xf4_n4">
               <div class="title e716">Disclaimer</div>
               <div class="para e717">I am in no way claiming originality in terms of a versioning scheme that
                  includes multilevel numbering (
                  <div class="quote e718">1.1.1</div>, 
                  <div class="quote e719">1.1.2</div>, etc)
                  or the idea of different (and arbitrary) levels of versions defining version
                  significance and version structure. A number of software systems already use
                  such versioning schemes (for example, see 
                  <div class="xref e720" linkend="id-windchill-multilevel"></div>).
               </div>
               <div class="para e721">Somewhat original (having not been able to find anything similar) is my
                  implementation, in the context of an XML database and using an XML-based version
                  mapping format defining an arbitrary level of versions. In particular, my goal
                  here was to define a way to add a versioning layer to an existing,
                  
                  <div class="quote e722">straight</div>, versioning system, one that differentiates between
                  significant versions and simple 
                  <div class="quote e723">saves</div> by providing multiple
                  levels of check-outs and check-ins while leaving the definition of the
                  significance of each level to the end user.
               </div>
            </div><a name="gitandOtherVCSsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e724" xml:id="section_gjw_vkx_l4">
               <div class="title e725">git and Other VCSs</div>
               <div class="para e726">The version mapping document is, of course, by no means unique as a concept.
                  As a reviewer pointed out, part of it is equivalent with the 
                  <div class="emphasis e727">git
                     index
                  </div> file (see 
                  <div class="xref e728" linkend="id-git-index-format"></div>). After all, a lot if it is simply about
                  mapping the names of resources and their versions to URIs. It is XML because XML
                  is easy to handle in eXist, however, and there is a recursive hierarchy because
                  such hierarchies (in my mind) neatly represent the relations between any number
                  of versioning levels, which is not the case with a git index
                  <div class="popupBox e729">
                     <div class="popupLabel" onmouseover="$('#d1e1582').show('1000');" onmouseout="$('#d1e1582').hide('1000');">[ footnote ]</div>
                     <div id="d1e1582" style="display: none;">
                        <div class="footnote">
                           <div class="para e730">The git index file is used when staging resources to be committed,
                              creating a single tree object to be stored in the database.
                           </div>
                        </div>
                     </div>
                  </div>. 
               </div>
               <div class="para e731">The point is that it should be straight-forward in eXist to implement the
                  versioning represented by the XML. I'm sure it is possible to implement
                  multilevel versioning in eXist based on git or some other VCS
                  <div class="popupBox e732">
                     <div class="popupLabel" onmouseover="$('#d1e1588').show('1000');" onmouseout="$('#d1e1588').hide('1000');">[ footnote ]</div>
                     <div id="d1e1588" style="display: none;">
                        <div class="footnote">
                           <div class="para e733">There is, for example, a Subversion module for eXist.</div>
                        </div>
                     </div>
                  </div>, with whatever advantages that they might bring to the table, but
                  the point with this one is to do it in XML with a minimum of non-XML involvement
                  <div class="popupBox e734">
                     <div class="popupLabel" onmouseover="$('#d1e1592').show('1000');" onmouseout="$('#d1e1592').hide('1000');">[ footnote ]</div>
                     <div id="d1e1592" style="display: none;">
                        <div class="footnote">
                           <div class="para e735">The reasons for which are that a) I am a poor programmer, and b) eXist
                              is an XML database and well suited for that approach.
                           </div>
                        </div>
                     </div>
                  </div>.
               </div>
               <div class="para e736">I also realise that git (and other) VCSs have variants of the use latest
                  problem, as pointed out by that same reviewer. While the problem here is
                  similar, it is 
                  <div class="emphasis e737">not the same</div>. As a technical writer with
                  some insight into developing code, I am struck by some subtle differences: 
               </div>
               <div class="para e738">First of all, in theory at least, it should be possible to avoid using an
                  incompatible later version of a piece of code by writing automated tests. This
                  is not possible in the use latest problem as described here. An incompatible
                  change is only possible to detect by an author who can manually spot the
                  differences, provided that s/he has sufficient knowledge in the subject of both
                  the old version [of whatever that is being described] and any forks that
                  happened along the way.
               </div>
               <div class="para e739">The scoping as provided by the stages, then, are simply an agreed-upon, but
                  untestable, convention.
               </div>
               <div class="para e740">Second, while there are similarities between versioned code and versioned
                  content, a major difference is that the documents as described here effectively
                  need to include links addressing arbitrary versions of other resources in the
                  VCS. As far as I understand git, a check-in in git represents a snapshot where
                  any such links will point to a current file in that snapshot, not an historic
                  one. 
               </div>
            </div><a name="NotationsforRelatedContentANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e741" xml:id="section_osh_zkx_l4">
               <div class="title e742">Notations for Related Content</div>
               <div class="para e743">Regarding the notion of translations as renderings of an original, a reviewer
                  kindly linked to the 
                  <div class="emphasis e744">Akoma Ntoso</div> XML vocabulary for legal
                  documents, specifically its URI namespace conventions for handling related
                  content (see 
                  <div class="xref e745" linkend="id-akomantoso"></div>).
               </div>
               <div class="para e746">Using URN abstractions (see 
                  <div class="xref e747" linkend="section_csw_2m4_5n"></div> and 
                  <div class="xref e748" linkend="id-abstraction-addition"></div>) provides me with a useful way to describe the relationships I had in mind,
                  namely versions of original-language resources and their translations, and how
                  they relate to each other. Akoma Ntoso provides a fascinating and complex
                  alternative, going well beyond my relatively uncomplicated naming conventions. I
                  mention them here for comparison, but do not intend to implement them as naming
                  conventions.
               </div>
               <div class="para e749">There are, of course, many other naming conventions in use for XML document
                  management. Worth mentioning is the S1000D standard's Data Module Code, used to
                  identify reusable content in an S1000D system. It is of particular interest
                  because it provides a physical location of the component being described, in
                  addition to mere document handling formalia.
               </div>
               <div class="para e750">My point here is that both of these conventions, as well as many others, are
                  feasible, but none, including my simple URN scheme, is necessarily more right
                  than the other. The idea here is to provide a suitable identifier that includes
                  a version and localisation information, used when uniquely identifying
                  resources.
               </div>
            </div><a name="TerminologyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e751" xml:id="section_qt2_zqx_l4">
               <div class="title e752">Terminology</div>
               <div class="para e753">The terms 
                  <div class="quote e754">stage</div> and 
                  <div class="quote e755">staging</div> are, perhaps,
                  unfortunate, as they are in no way unique to what I propose in this paper. Git,
                  for example, uses the term 
                  <div class="quote e756">staging area</div>, which may cause some
                  confusion (for more, see 
                  <div class="xref e757" linkend="id-git-staging"></div> and 
                  <div class="xref e758" linkend="id-git-index"></div>).
               </div>
               <div class="para e759">The git staging area, however, is an indexing area for a commit to which you
                  can add the files you wish to commit in any way you want to, before they are
                  committed, while 
                  <div class="emphasis e760">every</div> stage discussed here, regardless of
                  level, is intended to be a 
                  <div class="emphasis e761">recorded next step</div> after a
                  commit. The point here is to enable any number of levels of usable versions;
                  git's staging area should not be regarded as a 
                  <div class="quote e762">recorded level</div>
                  other than in terms of determining versioned content.
               </div>
            </div>
         </div><a name="FutureWorkANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e763" xml:id="section_lk2_sfx_l4">
            <div class="title e764">Future Work</div>
            <div class="para e765">There are several things I want to do with all this:</div>
            <div class="itemizedlist e766">
               <div class="listitem e767">
                  <div class="para e768">Doing a basic eXist implementation of the version handling itself is
                     rather obvious, of course. I don't know if it is a case of chronic naïvety
                     or something else, but I think it really shouldn't be all that hard to do in
                     XQuery and an XSLT stylesheet or two. I'm not entirely sure of the parts
                     that involve addressing eXist versions, but I remain hopeful.
                  </div>
               </div>
               <div class="listitem e769">
                  <div class="para e770">Handling the first save and subsequent first check-in. A new document
                     should start in the 
                     <div class="quote e771">save</div> stage and be checked in to the next
                     stage and finally the first stable stage
                     <div class="popupBox e772">
                        <div class="popupLabel" onmouseover="$('#d1e1671').show('1000');" onmouseout="$('#d1e1671').hide('1000');">[ footnote ]</div>
                        <div id="d1e1671" style="display: none;">
                           <div class="footnote">
                              <div class="para e773">If that version is 
                                 <div class="quote e774">0</div> or 
                                 <div class="quote e775">1</div>is probably
                                 a matter of agreed-upon conventions.
                              </div>
                           </div>
                        </div>
                     </div>.
                  </div>
               </div>
               <div class="listitem e776">
                  <div class="para e777">I want to test Extended XLink for the version map and project markup,
                     because I think it would be a good fit. 
                  </div>
               </div>
               <div class="listitem e778">
                  <div class="para e779">Also, I think doing a basic Extended XLink implementation for linking
                     inside eXist would be both interesting and fun, as well as make it easier to
                     use standard markup languages such as DocBook or DITA in such an
                     implementation, without changing either of them but helping implement the
                     version handling that is the topic of this paper.
                  </div>
               </div>
            </div>
         </div>
      </div><a name="BibliographyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e780">
         <div class="title e781">Bibliography</div>
         <div class="bibliomixed e782" xml:id="id-existdb-versioning">"eXist Versioning Extensions". Part of the eXist
            DB documentation. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e783" xlink:actuate="onRequest" xlink:href="http://www.exist-db.org/exist/apps/doc/versioning.xml" xlink:show="new" xlink:type="simple">http://www.exist-db.org/exist/apps/doc/versioning.xml</div>
            
         </div>
         <div class="bibliomixed e784" xml:id="id-db-triggers">"Configuring Database Triggers". Part of the eXist DB
            documentation. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e785" xlink:actuate="onRequest" xlink:href="http://exist-db.org/exist/apps/doc/triggers.xml" xlink:show="new" xlink:type="simple">http://exist-db.org/exist/apps/doc/triggers.xml</div>
            
         </div>
         <div class="bibliomixed e786" xml:id="id-xlink-spec">
            <div class="quote e787">XML Linking Language (XLink) Version 1.1</div>,
            editors Steve DeRose, Eve Maler, David Orchard and Norman Walsh. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e788" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xlink11/" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xlink11/</div>
            
         </div>
         <div class="bibliomixed e789" xml:id="id-semantic-profiling">Nordström, Ari. 
            <div class="quote e790">Semantic Profiling Using
               Indirection
            </div>. Presented at Balisage: The Markup Conference 2013, Montréal,
            Canada, August 6 - 9, 2013. In Proceedings of Balisage: The Markup Conference 2013.
            Balisage Series on Markup Technologies, vol. 10 (2013).
            doi:
            <div class="biblioid doi e791">10.4242/BalisageVol10.Nordstrom01</div>. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e792" xlink:actuate="onRequest" xlink:href="http://www.balisage.net/Proceedings/vol10/html/Nordstrom01/BalisageVol10-Nordstrom01.html" xlink:show="new" xlink:type="simple">http://www.balisage.net/Proceedings/vol10/html/Nordstrom01/BalisageVol10-Nordstrom01.html</div>
            
         </div>
         <div class="bibliomixed e793" xml:id="id-git-index-format">
            <div class="quote e794">The Git Index</div>. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e795" xlink:actuate="onRequest" xlink:href="http://schacon.github.io/gitbook/7_the_git_index.html" xlink:show="new" xlink:type="simple">http://schacon.github.io/gitbook/7_the_git_index.html</div>
         </div>
         <div class="bibliomixed e796" xml:id="id-windchill-multilevel">
            <div class="quote e797">PTC Windchill Multi-Level Versioning
               Labels
            </div>. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e798" xlink:actuate="onRequest" xlink:href="https://firstrobotics.ptc.com/Windchill-WHC/index.jspx?id=ViewVersionConvertUtilAbout&amp;action=show" xlink:show="new" xlink:type="simple">https://firstrobotics.ptc.com/Windchill-WHC/index.jspx?id=ViewVersionConvertUtilAbout&amp;action=show</div>
         </div>
         <div class="bibliomixed e799" xml:id="id-git-staging">
            <div class="quote e800">The Staging Area</div> (a 
            <div class="quote e801">git
               ready
            </div> blog post on January 9 2009. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e802" xlink:actuate="onRequest" xlink:href="http://gitready.com/beginner/2009/01/18/the-staging-area.html" xlink:show="new" xlink:type="simple">http://gitready.com/beginner/2009/01/18/the-staging-area.html</div>
         </div>
         <div class="bibliomixed e803" xml:id="id-git-index">
            <div class="quote e804">What’s The Deal With The Git Index?</div> 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e805" xlink:actuate="onRequest" xlink:href="http://www.gitguys.com/topics/whats-the-deal-with-the-git-index/" xlink:show="new" xlink:type="simple">http://www.gitguys.com/topics/whats-the-deal-with-the-git-index/</div>
         </div>
         <div class="bibliomixed e806" xml:id="id-akomantoso">
            <div class="quote e807">The Akoma Ntoso Naming Convention</div>. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e808" xlink:actuate="onRequest" xlink:href="http://www.akomantoso.org/release-notes/akoma-ntoso-3.0-schema/naming-conventions-1" xlink:show="new" xlink:type="simple">http://www.akomantoso.org/release-notes/akoma-ntoso-3.0-schema/naming-conventions-1</div>
         </div>
      </div>
   </div>
</div>