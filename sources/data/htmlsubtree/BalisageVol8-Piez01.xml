<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#Luminescent:parsingLMNLbyXSLTupconversionANCHOR" name="Luminescent:parsingLMNLbyXSLTupconversionTOC">Luminescent: parsing LMNL by XSLT upconversion</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#LMNL:theLayeredMarkupandAnnotationLanguageANCHOR" name="LMNL:theLayeredMarkupandAnnotationLanguageTOC">LMNL: the Layered Markup and Annotation Language</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#RangesANCHOR" name="RangesTOC">Ranges</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ArbitraryoverlapANCHOR" name="ArbitraryoverlapTOC">Arbitrary overlap</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AnnotationsANCHOR" name="AnnotationsTOC">Annotations</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AtomsANCHOR" name="AtomsTOC">Atoms</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#xLMNL:anXMLbasedrepresentationoftheLMNLdatamodelANCHOR" name="xLMNL:anXMLbasedrepresentationoftheLMNLdatamodelTOC">xLMNL: an XML-based representation of the LMNL data model</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#CompilingLMNLsyntaxintoxLMNLviaXSLTupconversionANCHOR" name="CompilingLMNLsyntaxintoxLMNLviaXSLTupconversionTOC">Compiling LMNL syntax into xLMNL via XSLT upconversion</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#CheckingLMNLsyntaxforwellformednessANCHOR" name="CheckingLMNLsyntaxforwellformednessTOC">Checking LMNL syntax for well-formedness</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#Workingwiththemodel:prototypeLMNLapplicationsANCHOR" name="Workingwiththemodel:prototypeLMNLapplicationsTOC">Working with the model: prototype LMNL applications</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ReflectionsANCHOR" name="ReflectionsTOC">Reflections</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#xLMNLexampleANCHOR" name="xLMNLexampleTOC">xLMNL example</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#LMNLsyntax:ANCHOR" name="LMNLsyntax:TOC">LMNL syntax:</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#CompiledintoxLMNLANCHOR" name="CompiledintoxLMNLTOC">Compiled into xLMNL</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#RNCschemaforxLMNLANCHOR" name="RNCschemaforxLMNLTOC">RNC schema for xLMNL</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#DemonstrationsandsourcecodeANCHOR" name="DemonstrationsandsourcecodeTOC">Demonstrations and source code</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BibliographyANCHOR" name="BibliographyTOC">Bibliography</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">author</div>
         <div class="singletermTERMS">annotated character</div>
         <div class="singletermTERMS">annotations</div>
         <div class="singletermTERMS">atoms</div>
         <div class="singletermTERMS">atom</div>
         <div class="singletermTERMS">August 7 - 10, 2012</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">bubble graphs</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2012</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">character atom</div>
         <div class="singletermTERMS">closer to the text</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">doorstep</div>
         <div class="singletermTERMS">descriptive</div>
         <div class="singletermTERMS">declarative</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
         <div class="singletermTERMS">excerpt</div>
         <div class="singletermTERMS">end</div>
         <div class="singletermTERMS">empty</div>
         <div class="singletermTERMS">error</div>
         <div class="singletermTERMS">element</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
         <div class="singletermTERMS">GI matching constraint</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">https://github.com/wendellpiez/Luminescent</div>
         <div class="singletermTERMS">Half-steps toward LMNL</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">index.html</div>
         <div class="singletermTERMS">inner shells</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
         <div class="singletermTERMS">JITTs (Just-in-time Trees)</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">Luminescent</div>
         <div class="singletermTERMS">logo</div>
         <div class="singletermTERMS">link</div>
         <div class="singletermTERMS">limen</div>
         <div class="singletermTERMS">label</div>
         <div class="singletermTERMS">Literary and Linguistic Computing</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">Markup Overlap: A Review and a Horse</div>
         <div class="singletermTERMS">markup</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">occupy space</div>
         <div class="singletermTERMS">outer shells</div>
         <div class="singletermTERMS">owner limen</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">poor man's (hierarchical) database</div>
         <div class="singletermTERMS">Piez</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
         <div class="singletermTERMS">qua</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">ranges</div>
         <div class="singletermTERMS">range</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">source</div>
         <div class="singletermTERMS">string-range()</div>
         <div class="singletermTERMS">Slides and Materials</div>
         <div class="singletermTERMS">start</div>
         <div class="singletermTERMS">span</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">the model</div>
         <div class="singletermTERMS">tag tree</div>
         <div class="singletermTERMS">The XML data model</div>
         <div class="singletermTERMS">The Layered Markup and Annotation Language (LMNL)</div>
         <div class="singletermTERMS">token</div>
         <div class="singletermTERMS">tag</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
         <div class="singletermTERMS">views</div>
         <div class="singletermTERMS">value</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">xLMNL</div>
         <div class="singletermTERMS">XML Information Set</div>
         <div class="singletermTERMS">XPath 2.0/XQuery Data Model</div>
         <div class="singletermTERMS">XML Information Set (Second Edition)</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="Luminescent:parsingLMNLbyXSLTupconversionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3">
      <div class="title e1">Luminescent: parsing LMNL by XSLT upconversion</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2012</div>
            <div class="confdates e5">August 7 - 10, 2012</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">Among attempts to deal with the overlap problem, LMNL (Layered Markup and Annotation
               Language) has attracted its share of attention but has also never grown much past
               its
               origins as a thought experiment. LMNL’s conceptual model differs from XML’s, and by
               design
               its notation also differs from XML’s. Nonetheless, a pipeline of XSLT transformations
               can
               parse LMNL input and construct an XML representation of LMNL, with the resulting benefit
               that further XML tools can be used to analyze and process documents originating from
               the
               alien notation. The key is to regard the task as an upconversion: structural induction
               performed over plain text. 
            </div>
         </div>
         <div class="author e8">
            <div class="personname e9">
               <div class="firstname e10">Wendell</div>
               <div class="surname e11">Piez</div>
            </div>
            <div class="personblurb e12">
               <div class="para e13">Wendell Piez has been attending Balisage and its antecedent conferences since the
                  early days of XML; among his contributions has been, with Jeni Tennison, the original
                  LMNL
                  proposal (2002).
               </div>
            </div>
            <div class="affiliation e14">
               <div class="orgname e15">Mulberry Technologies, Inc.</div>
            </div>
            <div class="email e16">wapiez@mulberrytech.com</div>
         </div>
         <div class="legalnotice e17">
            <div class="para e18">Copyright © 2012 by the author. Used with permission.</div>
         </div>
      </div>
      <div class="para e19">
         <div class="emphasis e20" role="bold">Luminescent</div> is a prototype parser and compiler for LMNL
         syntax, converting LMNL documents into 
         <div class="emphasis e21" role="bold">xLMNL</div>, an XML-based
         representation of the LMNL model suitable for further processing. It consists of a
         series of
         XSLT 2.0 stylesheets, currently running in a web server (using Cocoon) or in batch
         mode (using
         an XProc pipeline). A second XProc pipeline can apply Schematron validation to the
         intermediate
         formats generated in Luminescent to detect and locate syntax errors in the input
         document.
      </div><a name="LMNL:theLayeredMarkupandAnnotationLanguageANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e22">
         <div class="title e23">LMNL: the Layered Markup and Annotation Language</div>
         <div class="para e24">LMNL (Layered Markup and Annotation Language) is an approach to markup first proposed
            by
            Jeni Tennison and myself in 2002 [
            <div class="xref e25" linkend="tennison2002"></div>]. It emulates XML in some
            respects, but also differs from it in several fundamental ways, suggesting some very
            different
            approaches to modeling text-based information using markup, with some very different
            applications. For this reason, even if an alternative processing stack could never
            be built on
            LMNL (which presumably it could, given enough time, effort and resources), and even
            if LMNL is
            never regarded as a replacement for XML (which it was never intended to be), it turns
            out to
            be fertile laboratory for solutions to modeling problems - including XML-based solutions
            for
            XML platforms.
         </div>
         <div class="para e26">XML is defined [
            <div class="xref e27" linkend="xmlrec"></div>] as a syntax, but implies a model, which was
            described by the (non-normative) 
            <div class="emphasis e28" role="ital">XML Information Set</div> [
            <div class="xref e29" linkend="xmlinfoset"></div>], expressed in any number of code libraries and APIs (both official
            and unofficial), and finally standardized (at least in one variant) in the 
            <div class="emphasis e30" role="ital">XPath 2.0/XQuery Data Model</div> (XDM) [
            <div class="xref e31" linkend="xdm"></div>] . LMNL
            inverts this, being defined first as an abstract model, whose syntax is proposed incidentally,
            as a form of representation (and as such, one among many conceivable). Nevertheless,
            the idea
            is the same: a formal model stabilizes a set of capabilities for tools performing
            useful
            operations over text-based information sets, and provides a basis for interoperability,
            while
            a syntax provides a serialization format and an interface for developers and users.
            Like XML,
            LMNL is conceived in order to support 
            <div class="emphasis e32" role="ital">markup</div>, a means of
            assigning labels and attributing properties and relationships to data points or fields
            in
            text, by means of text; and like XML, LMNL expects to provide a basis for 
            <div class="emphasis e33" role="ital">descriptive</div> and 
            <div class="emphasis e34" role="ital">declarative</div> markup
            applications (although, again like XML, not only those), which support document and
            data
            processing within layered systems that can thus benefit from separation of concerns
            (between
            authoring, editorial, data management, and production tasks, for example), and that
            are not
            locked into single applications. Again like XML, LMNL does this by leaving it to applications
            to define their own sets of names, labels or keywords, to which they can assign whatever
            semantics they see fit. In this respect, LMNL syntax (like XML) is a meta-language
            while LMNL
            itself (like the XDM) is a meta-model: a model (with a design and hence a particular
            set of
            affordances in application) that we use to make models, of documents, families of
            documents,
            and assorted information sets of whatever description.
         </div>
         <div class="para e35">This much is similar; the differences from XML are (primarily) in the design of the
            model
            itself, and (secondarily) in the syntax proposed to represent it. The syntax is designed
            to
            look as little like XML as possible, for two reasons: first, so that LMNL syntax may
            be
            embedded directly into XML syntax, or the reverse; and secondly, to reduce cognitive
            overload
            when thinking about LMNL and XML together, or when thinking about LMNL with the burden
            of
            expectations formed by XML. (At the level of the model, we have similarly tried to
            avoid using
            XML terminology for LMNL concepts except where the connections are strong.) In the
            interests
            of brevity, rather than explicate the model fully and offer rationales for it here,
            I offer a
            simple summary description of the model, and of LMNL syntax, together.
            <div class="note e36">
               <div class="para e37">Readers may wish to review some of the historical LMNL specifications, which can now
                  be found at 
                  <div class="xref e38" linkend="lmnl-markup"></div>.
               </div>
            </div>
         </div><a name="RangesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e39">
            <div class="title e40">Ranges</div>
            <div class="para e41">Where XML has elements, LMNL has 
               <div class="emphasis e42" role="bold">ranges</div>. Unlike XML
               elements, ranges in LMNL have no necessary relation with one another: they are neither
               parents, nor children of each other, nor in any hierarchy at all. Ranges may be named
               (names
               in LMNL are qualified by namespaces in much the way they are in XML), or anonymous.
               The
               assumption is that they will ordinarily have generic names indicating their type,
               like XML
               elements. Ranges are properties of an 
               <div class="emphasis e43" role="bold">owner limen</div> (using
               the Latin word for 
               <div class="quote e44">doorstep</div> to designate this important data object type),
               which belongs either to the document as a whole or an annotation, and which has a
               
               <div class="emphasis e45" role="bold">value</div> comprising a single string (a sequence of contiguous
               characters). The value of the range will be a substring of the value of the limen,
               while its
               position will be the character offset within its limen where its starts.
            </div>
            <div class="para e46">In order to avoid confusion with XML, LMNL syntax uses a different set of delimiters
               to
               identify starts and ends of ranges. This example shows a chunk of LMNL syntax with
               two types
               of ranges, 
               <div class="emphasis e47" role="bold">s</div> and 
               <div class="emphasis e48" role="bold">l</div>, marked
               over the stream of text. 
               <div class="emphasis e49" role="bold">s</div> ranges do not overlap with other
               
               <div class="emphasis e50" role="bold">s</div> ranges, and 
               <div class="emphasis e51" role="bold">l</div> never
               overlaps with 
               <div class="emphasis e52" role="bold">l</div>, but the two types overlap each
               other:
               <div class="programlisting e53" xml:space="preserve">[s}[l}He manages to keep the upper hand{l]
                  [l}On his own farm.{s] [s}He's boss.{s] [s}But as to hens:{l]
                  [l}We fence our flowers in and the hens range.{l]{s]
               </div>
            </div>
            <div class="para e54">In the way that XML has a concise empty-element syntax, empty ranges may also be marked
               with single tags, as in 
               <div class="code e55">[br]</div>. Empty ranges have no value (or their value is an
               empty string), although they do have a position within their owner layer.
            </div>
            <div class="para e56">It is sometimes convenient (although LMNL syntax does not require it) to designate
               a
               single range covering the entire
               document:
               <div class="programlisting e57" xml:space="preserve">[excerpt}
                  [s}[l}He manages to keep the upper hand{l]
                  [l}On his own farm.{s] [s}He's boss.{s] [s}But as to hens:{l]
                  [l}We fence our flowers in and the hens range.{l]{s]
                  {excerpt]
               </div>
            </div>
         </div><a name="ArbitraryoverlapANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e58">
            <div class="title e59">Arbitrary overlap</div>
            <div class="para e60">LMNL supports arbitrary overlap, which is to say overlapping ranges of the same type.
               This is important for certain potential applications such as annotation frameworks
               and range
               indexing, where ranges of text need to be identified that may overlap, while still
               being of
               the same type.
            </div>
            <div class="para e61">In LMNL syntax, this example shows two ranges named 
               <div class="emphasis e62" role="bold">r</div>,
               overlapping each
               other:
               <div class="programlisting e63" xml:space="preserve">[r=r1}A case [r=r2}of{r=r1] arbitrary overlap{r=r2]</div>While
               the range identifier (given after the 
               <div class="code e64">=</div>) is optional, when it is not given, a
               close tag is presumed to match the most recent open tag with the same combination
               of name
               and identifier; thus to express overlap of this kind (rather than one 
               <div class="emphasis e65" role="bold">r</div> range simply being enclosed in the other), the identifier is necessary on
               the tags marking at least one of the ranges involved. But the identifier is not formally
               part of the name.
            </div>
         </div><a name="AnnotationsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e66">
            <div class="title e67">Annotations</div>
            <div class="para e68">While XML elements may have attributes, LMNL ranges may have 
               <div class="emphasis e69" role="bold">annotations</div>. Unlike XML attributes, there is no restriction against assigning
               more than one annotation with the same name to a given range; likewise, the order
               of
               annotations on a range is supported in the model.
            </div>
            <div class="para e70">In the syntax, annotations are represented by using tagging inside
               tagging:
               <div class="programlisting e71" xml:space="preserve">[excerpt [source}The Housekeeper{source] [author}Robert Frost{author]}
                  [s}[l [n}144{n]}He manages to keep the upper hand{l]
                  [l [n}145{n]}On his own farm.{s] [s}He's boss.{s] [s}But as to hens:{l]
                  [l [n}146{n]}We fence our flowers in and the hens range.{l]{s]
                  {excerpt]
               </div>In
               order to reduce tagging overhead, when annotations contain only simple string values,
               their
               close tags may be presented in abbreviated notation (resembling anonymous end
               tags):
               <div class="programlisting e72" xml:space="preserve">...[l [n}145{]}On his own farm.{s [id}s1{]]...</div>In
               addition (as this example also shows), the syntax permits placing annotations on end
               tags,
               not only on start tags.
            </div>
            <div class="para e73">Finally, while attributes in XML assign properties to elements as name-value pairs,
               LMNL
               annotations may be structured. In the LMNL model, annotations are isomorphic to LMNL
               documents: like a document, an annotation has a limen with content and optionally
               ranges
               over that content. Likewise, like ranges (including ranges over annotation content),
               annotations may be annotated.
            </div>
            <div class="para e74">Given this flexibility it is sometimes convenient for annotations, like ranges, to
               be
               empty, having no content but only annotations, which it groups, orders and names.
            </div>
            <div class="para e75">So this is legal syntax and represents a coherent LMNL document
               object:
               <div class="programlisting e76" xml:space="preserve">[excerpt
                  [source [date}1915{][title}The Housekeeper{]]
                  [author
                  [name}Robert Frost{]
                  [dates}1874-1963{]] }
                  [s}[l [n}144{n]}He manages to keep the upper hand{l]
                  [l [n}145{n]}On his own farm.{s] [s}He's boss.{s] [s}But as to hens:{l]
                  [l [n}146{n]}We fence our flowers in and the hens range.{l]{s]
                  {excerpt]
               </div>
            </div>
            <div class="para e77">In this example, the 
               <div class="code e78">excerpt</div> range carries two empty annotations,
               
               <div class="code e79">source</div> and 
               <div class="code e80">author</div>, each of which has annotations of its
               own.
            </div>
            <div class="para e81">This is an especially powerful feature of LMNL, not only because it provides a very
               useful capability in modeling (as it presents annotations in a directed graph structure
               – as if XML attributes could have their own attributes), but also because of its
               implications for the way documentary information is organized and linked. For example,
               a
               LMNL system might well support attaching a document dynamically as an annotation to
               a range
               in another document.
            </div>
         </div><a name="AtomsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e82">
            <div class="title e83">Atoms</div>
            <div class="para e84">At its base, a LMNL document is defined as a sequence of 
               <div class="emphasis e85" role="bold">atoms</div>: the most common type of atom will ordinarily be a 
               <div class="quote e86">character
                  atom
               </div>, represented by a single Unicode character in the syntax. Yet while every
               character in Unicode maps to a corresponding atom, atoms in LMNL are also capable
               of
               representing other information of whatever kind an application may find it useful
               to
               represent in this way.
            </div>
            <div class="para e87">An atom has string length of 1. Consequently, and unlike empty ranges, atoms not only
               have location, but they 
               <div class="quote e88">occupy space</div>, are included in the value of ranges in
               which they participate, and can be marked up. Atoms are identified with their own
               notation,
               
               <div class="code e89">{{ }}</div>, in the syntax.
               <div class="popupBox e90">
                  <div class="popupLabel" onmouseover="$('#d1e199').show('1000');" onmouseout="$('#d1e199').hide('1000');">[ footnote ]</div>
                  <div id="d1e199" style="display: none;">
                     <div class="footnote">
                        <div class="para e91">This raises the question whether characters can be represented with atom syntax,
                           whether they can be annotated, and so forth.
                        </div>
                        <div class="para e92">The character 
                           <div class="quote e93">A</div> may indeed be represented as 
                           <div class="code e94">{{#x41}}</div>
                           (using a shorthand reference) or 
                           <div class="code e95">{{lmnl:char [codepoint}41{]}}</div> using a
                           reserved name for the atom with an annotation to identify it. But add another annotation
                           to the latter form and it will not map back again. (It would be an 
                           <div class="quote e96">annotated
                              character
                           </div>, and as such could not be represented in a Unicode serialization by
                           itself.)
                        </div>
                     </div>
                  </div>
               </div> In this example, an atom named 
               <div class="emphasis e97" role="bold">logo</div> is marked
               up with a range named 
               <div class="emphasis e98" role="bold">link</div>:
               <div class="programlisting e99" xml:space="preserve">[link [href}lmnl-markup.org{]}{{logo [src}lmnl-markup.org/hat.png{]}}{link]</div>
            </div>
         </div>
      </div><a name="xLMNL:anXMLbasedrepresentationoftheLMNLdatamodelANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e100">
         <div class="title e101">xLMNL: an XML-based representation of the LMNL data model</div>
         <div class="para e102">One way LMNL builds on the conceptual foundation of XML is by differentiating between
            operations on the syntax, which imply parsing, and operations on optimized representations
            of
            documents held in memory: 
            <div class="quote e103">the model</div>. This differentiation gives us leverage in
            development, since we have the opportunity to identify either syntax or model as the
            appropriate place for design and implementation, whether that be of the tag set itself
            (considered as a set of labels and constraints over their use), user interfaces,
            transformations or anything else.
         </div>
         <div class="para e104">Paradoxically, while the LMNL model is designed in deliberate contrast to XML, it
            is
            nevertheless useful to specify an XML-based representation of it, for several reasons.
            First,
            it exposes instances conveniently by giving us the opportunity to serialize LMNL documents
            in
            XML syntax. Second, it makes it possible to use XML-based tools (such as XSLT, schema
            technologies, XQuery, XML servers, CMS and database technology) to query and manipulate
            LMNL
            – an advantage for those of us who are well-practiced in these technologies for data
            processing, but not in Java or Python. And thirdly, it clarifies some of the resemblances
            and
            differences between LMNL and other approaches (especially XML-based approaches) to
            the problem
            set.
         </div>
         <div class="para e105">Since 2002, I have experimented with adapting XML to LMNL in several different ways.
            Not
            only can XML elements be construed as LMNL ranges and XML attributes as LMNL annotations
            (this
            is the essence of the CLIX and ECLIX approaches, cf 
            <div class="xref e106" linkend="piez2004"></div>); also,
            XML-based notations for representing overlap, such as milestone-based notations or
            segmented
            and aligned XML elements, can be mapped into LMNL. This provides a framework, at least,
            for
            thinking systematically about how to implement and maintain processes to manage these
            awkward
            and difficult forms of XML.
         </div>
         <div class="para e107">Yet the real power of the LMNL model as such cannot be exploited without a more direct
            representation. 
            <div class="emphasis e108" role="bold">xLMNL</div> is an XML-based representation of the
            model itself: that is to say, it leaves behind the concept of a document as an information
            set
            represented in embedded markup (literal tags applied directly to literal text), and
            simply
            uses XML as a kind of 
            <div class="quote e109">poor man's (hierarchical) database</div>. This gives us many of
            the advantages of an XML platform described above, while making downstream applications
            more
            tractable, inasmuch as they can work directly with LMNL as conceptualized, rather
            than at a
            remove. At the price of being somewhat heavyweight and memory intensive, xLMNL is
            thus a
            useful interim format for testing ideas and demonstrating concepts.
         </div>
         <div class="para e110">Again, the most concise way of presenting this design is by way of an example: the
            xLMNL
            equivalent of the document given above is presented in 
            <div class="xref e111" linkend="xlmnl-example"></div>.
            <div class="note e112">
               <div class="para e113">Note however that the notation itself is not at all concise! In fact there are many
                  redundancies built into xLMNL, as compared to a bare LMNL range model, in order to
                  streamline downstream processes. For example, text layer content is broken up into
                  spans
                  which are indexed to the ranges in which they participate. While a LMNL processor
                  might
                  wish to calculate this on the fly, when working on a static document it makes sense
                  to
                  index them only once, so this is done in xLMNL. It should go without saying that this
                  does
                  not preclude a more lightweight standoff-based XML representation of LMNL.
               </div>
               <div class="para e114">xLMNL has undergone several iterations since I first starting modeling LMNL directly
                  with XML in 2004 [
                  <div class="xref e115" linkend="piez2004"></div>, and see also 
                  <div class="xref e116" linkend="piez2010"></div>]
               </div>
            </div>
         </div>
         <div class="para e117">Developers who work on the overlap problem in XML will recognize this as a standoff
            representation of ranges. As such, it might be generated and maintained in any number
            of ways
            – even (if rather onerously) by hand.
         </div>
         <div class="para e118">Nevertheless, no claim should be inferred that I suppose xLMNL to be at all an optimal
            approach to working with LMNL on an XML platform. The best argument for doing this
            is that
            fairly dramatic demonstrations of the interest of overlapping markup are not all that
            hard to
            come by if one only has a means by which to create them, and xLMNL is a step along
            the
            way.
         </div>
         <div class="para e119">A schema for xLMNL, using Relax NG (compact syntax)
            appears in 
            <div class="xref e120" linkend="xlmnl-schema"></div>.
         </div>
      </div><a name="CompilingLMNLsyntaxintoxLMNLviaXSLTupconversionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e121">
         <div class="title e122">Compiling LMNL syntax into xLMNL via XSLT upconversion</div>
         <div class="para e123">In its current form, the complete Luminescent pipeline has thirteen steps, each of
            which
            is implemented in an XSLT 2.0 transformation. These can be chained together using
            any
            available means; I have used both XProc and Cocoon (which is convenient for hooking
            Luminescent together with further transformations processing xLMNL into various targets).
            Several of the steps could be combined for greater efficiency; the reason to have
            so many
            presently is to maximize transparency for development and debugging.
         </div>
         <div class="para e124">The steps proceed as follows:
            <div class="orderedlist e125">
               <div class="listitem e126">
                  <div class="para e127">Comments are extracted using a regular expression matching on open and close comment
                     delimiters (
                     <div class="code e128">[!--</div> and 
                     <div class="code e129">--]</div>). This has to be done first so that
                     markup inside comments will not be processed in subsequent steps. The result is a
                     single
                     element (representing the root of the tag tree) containing a sequence of strings and
                     elements representing comments.
                  </div>
               </div>
               <div class="listitem e130">
                  <div class="para e131">Tokenization: all open and close tag delimiters, 
                     <div class="code e132">[</div>, 
                     <div class="code e133">{</div>,
                     
                     <div class="code e134">]</div> and 
                     <div class="code e135">}</div> in document content (i.e., not inside comments) are
                     matched and wrapped as XML 
                     <div class="emphasis e136" role="bold">t</div> elements (for 
                     <div class="emphasis e137" role="bold">token</div>). The result is a sequence of strings interspersed with
                     comments and these elements, representing tag delimiters.
                  </div>
               </div>
               <div class="listitem e138">
                  <div class="para e139">The token (
                     <div class="emphasis e140" role="bold">t</div>) elements are marked with line and
                     character offsets, to be carried forward for purposes of any error reporting that
                     has to
                     be performed later.
                  </div>
               </div>
               <div class="listitem e141">
                  <div class="para e142">A sibling recursion is applied to infer tagging from the tokens. A 
                     <div class="emphasis e143" role="bold">tag</div> element is initiated with each open delimiter
                     (
                     <div class="code e144">[</div> or 
                     <div class="code e145">{</div>); each close delimiter (
                     <div class="code e146">]</div> or
                     
                     <div class="code e147">}</div>) ends the 
                     <div class="emphasis e148" role="bold">tag</div> element most recently
                     started. The result is a rudimentary tag tree of the document. Delimiters and comments
                     are retained.
                  </div>
               </div>
               <div class="listitem e149">
                  <div class="para e150">Types are assigned to the tags, which are mapped to 
                     <div class="emphasis e151" role="bold">start</div>, 
                     <div class="emphasis e152" role="bold">end</div>, 
                     <div class="emphasis e153" role="bold">empty</div> and 
                     <div class="emphasis e154" role="bold">atom</div> elements. This works by
                     inferring each type of tag from its open and close delimiters: 
                     <div class="code e155">[r}</div> for
                     start, 
                     <div class="code e156">{r]</div> for end, 
                     <div class="code e157">[e]</div> for empty, and 
                     <div class="code e158">{{a}}</div> for
                     atom. The extra level of delimiters required for atoms is respected; tags with
                     
                     <div class="quote e159">outer shells</div> but no 
                     <div class="quote e160">inner shells</div> (that is, that fail to
                     respect the double-brace syntax of atoms, as in 
                     <div class="code e161">{{atom}}</div>) are marked as
                     errors.
                  </div>
                  <div class="para e162">Simultaneously, tag names (generic identifiers) are extracted from their values. Any
                     tags that have range identifiers with the generic identifier keeps its range identifier
                     as part of its GI. (So a tag 
                     <div class="code e163">[range=r1}</div> is represented as 
                     <div class="code e164">&lt;range
                        gi="range=r1"/&gt;
                     </div>.)
                  </div>
               </div>
               <div class="listitem e165">
                  <div class="para e166">Start tags are marked with unique identifiers (distinct from any range identifiers
                     already given).
                  </div>
               </div>
               <div class="listitem e167">
                  <div class="para e168">By means of another sibling recursion, end tags are marked with the identifier of
                     the most recent start tag with the same GI.
                  </div>
                  <div class="para e169">Since range identifiers are still, at this stage, considered part of the GI, the
                     sibling recursion in this process matches end tags to start tags correctly.
                  </div>
               </div>
               <div class="listitem e170">
                  <div class="para e171">Matching start and end-tag pairs appearing inside tags are promoted into
                     annotations.
                  </div>
                  <div class="para e172">This is the trickiest step, for two reasons. First, abbreviated syntax permitted for
                     simple annotations means that anonymous end tags (
                     <div class="code e173">{]</div>) may be matched with
                     named start tags. Secondly, annotations may contain markup, and so not just any tag
                     directly inside a tag is actually an annotation delimiter (it could mark up a range
                     over
                     content inside the annotation). This process must work, again, via sibling recursion
                     (the third one performed in the pipeline). Where tagging is not correct, 
                     <div class="emphasis e174" role="bold">error</div> elements may be generated.
                  </div>
               </div>
               <div class="listitem e175">
                  <div class="para e176">Character offsets are marked on 
                     <div class="emphasis e177" role="bold">start</div>, 
                     <div class="emphasis e178" role="bold">end</div>, 
                     <div class="emphasis e179" role="bold">empty</div> and 
                     <div class="emphasis e180" role="bold">atom</div> tag elements, and text spans are wrapped (with 
                     <div class="emphasis e181" role="bold">span</div> elements) and marked with character offsets within their
                     owner layer (or 
                     <div class="emphasis e182" role="bold">limen</div> in LMNL terminology: the
                     annotation or document within which they appear). The offsets are determined from
                     the
                     lengths of string content (text nodes in the XML), with any atoms appearing being
                     given
                     length 1, while comments and range markers have length 0.
                  </div>
               </div>
               <div class="listitem e183">
                  <div class="para e184">Proper generic identifiers (range names) are derived from combinations of ranges
                     with their identifiers. (The identifiers are saved as 
                     <div class="emphasis e185" role="bold">label</div> attributes in case they may be wanted.)
                  </div>
               </div>
               <div class="listitem e186">
                  <div class="para e187">Unique identifiers are assigned to ranges; range 
                     <div class="emphasis e188" role="bold">start</div> and 
                     <div class="emphasis e189" role="bold">end</div> tags have the same
                     identifier, while 
                     <div class="emphasis e190" role="bold">empty</div> range tags have their own.
                     Similarly, annotations are marked with unique identifiers, as is the document as a
                     whole.
                  </div>
               </div>
               <div class="listitem e191">
                  <div class="para e192">Layer identifiers are assigned to spans, corresponding to the limen (annotation or
                     document) in which the span appears. Strictly speaking these identifiers are redundant,
                     since the same information is given by the xLMNL document structure; but they are
                     useful
                     for optimizing subsequent (downstream) processes or (potentially) for processing or
                     aggregating LMNL documents described in multiple xLMNL instances.
                  </div>
                  <div class="para e193">The result of this step is a comprehensive 
                     <div class="quote e194">tag tree</div> of the marked up
                     LMNL syntax instance.
                  </div>
                  <div class="para e195">(A later project goal will be to codify this format for interchange; it maps to the
                     earlier CLIX format. This may also prove to be more robust than xLMNL for maintenance
                     of
                     LMNL data sets in XML, since ranges are still represented by tags within the text
                     stream
                     rather than standoff markup.)
                  </div>
               </div>
               <div class="listitem e196">
                  <div class="para e197">The tag tree is converted into xLMNL by reading range elements from start/end tag
                     pairs, or from empty range markers as the case may be. Ranges are marked with the
                     start
                     and end offsets, read from their tags. Spans are marked with pointers to the ranges
                     in
                     which they participate. (A fourth sibling recursion accomplishes this. Again, the
                     information here is redundant but useful.)
                  </div>
               </div>
            </div>
         </div><a name="CheckingLMNLsyntaxforwellformednessANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e198">
            <div class="title e199">Checking LMNL syntax for well-formedness</div>
            <div class="para e200">Rather than stop processing, the pipeline currently emits 
               <div class="emphasis e201" role="bold">error</div> elements when it encounters problems, with codes identifying the issue.
               This appears to work well.
            </div>
            <div class="para e202">In addition, more precise diagnostics are performed by applying Schematron validation
               to
               particular steps in the pipeline. (This is implemented with a second XProc pipeline
               specification that imports the main one, applies Schematron schemas to the results
               of two of
               Luminescent's intermediate formats, aggregates their results together and formats
               them.) For
               example, using Schematron it is easy to check whether all start tags have matching
               end tags
               or vice-versa, or that range or annotation names follow their rules. Because the
               intermediate formats carry forward information on the location of tagging in the original
               LMNL syntax instance, Schematron can report the locations of tagging found to be
               problematic.
            </div>
            <div class="para e203">This is especially important since LMNL syntax becomes hard to read as the markup
               becomes more complex.
               <div class="popupBox e204">
                  <div class="popupLabel" onmouseover="$('#d1e466').show('1000');" onmouseout="$('#d1e466').hide('1000');">[ footnote ]</div>
                  <div id="d1e466" style="display: none;">
                     <div class="footnote">
                        <div class="para e205">This is a problem for which embedded markup, of course, has no built-in solution (as
                           Desmond Schmidt has pointed out, 
                           <div class="xref e206" linkend="schmidt2010"></div>) other than using only
                           tag sets that do not permit complexity – a high price to pay (a baby for less bath
                           water), and not the idea at all. Of course, the syntax is not ultimately the point
                           of
                           the LMNL model (which might be supported in all kinds of different interfaces) but
                           only
                           a means to an end.
                        </div>
                     </div>
                  </div>
               </div> For example, here is a malformed
               instance:
               <div class="programlisting e207" xml:space="preserve">[excerpt [source}The Housekeeper{source] [author}Robert Frost{author]]}
                  [s}[l [n}144{n]}He manages to keep the upper hand{l]
                  [l [n}145{n]}On his own farm.{s] [s}He's boss.{s] [s}But as to hens:{l]
                  [l [n}146{n]}We fence our flowers in and the hens range.{l]{s]
                  {excerpt]
               </div>(The
               error occurs at the end of the first line, where an extra 
               <div class="code e208">]</div> appears before the
               
               <div class="code e209">}</div> ending the start tag.)
            </div>
            <div class="para e210">Schematron reports
               this:
               <div class="programlisting e211" xml:space="preserve">Error UNEXPECTED-TAGGING reported for } at 1:71,
                  C:\Projects\LMNL\Luminescent\lmnl\frost-quote.lmnl
                  No start tag matches end tag {excerpt] at 5:1,
                  C:\Projects\LMNL\Luminescent\lmnl\frost-quote.lmnl
               </div>The
               processor has taken the mistaken 
               <div class="code e212">]</div>, as it must, as the end of the tag; and
               since it therefore makes an empty range marker, the end tag that is supposed to match
               it is
               found to have no start tag.
            </div>
            <div class="para e213">The two errors are detected differently. The first error is reported for any tag
               delimiter that can't be matched with a corresponding delimiter of the opposite kind
               (start
               or end). The second is reported for the failure to follow the constraint that all
               start tags
               must have end tags and vice versa.
            </div>
            <div class="para e214">The line numbers and offsets reported (1:71 and 5:1) correctly locate the problems;
               character 71 of line 1 is the location of the orphaned tag close delimiter 
               <div class="code e215">}</div>
               (which would have closed a start tag had the 
               <div class="code e216">]</div> character not intervened), while
               line 5 character 1 is where the orphaned end tag is located.
            </div>
         </div>
      </div><a name="Workingwiththemodel:prototypeLMNLapplicationsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e217">
         <div class="title e218">Working with the model: prototype LMNL applications</div>
         <div class="para e219">Currently I have several processes running with xLMNL as source. Some of these are
            tuned
            to particular tag sets, while others are generic. A selection is offered in place
            of
            presentation slides for this paper (the zipped package contains a mix of HTML, XML
            and SVG and
            can be reviewed starting from 
            <div class="code e220">index.html</div> using any current web browser).
            <div class="itemizedlist e221">
               <div class="listitem e222">
                  <div class="para e223">A generic diagnostic stylesheet can report which range types overlap with which
                     other range types. (This is most useful to know for process customization.)
                  </div>
               </div>
               <div class="listitem e224">
                  <div class="para e225">XML can be extracted from xLMNL dynamically, using a parameterized listing of range
                     types to be reflected as a hierarchy of XML elements. Ranges of these types are promoted
                     into XML elements; their annotations become, when they have simple values, XML
                     attributes. Ranges not among these types, and annotations that are not cast to
                     attributes, become XML elements representing range delimiters (tags) or annotation
                     structures. Spans of text are kept with pointers to the ranges in which they
                     participate, when these have not been cast to ancestor elements.
                  </div>
                  <div class="para e226">This process can be run independently, but its functionality is also available
                     dynamically as a function call in XSLT, operating on any xLMNL document or annotation
                     (or a subset of spans from within a document or annotation, perhaps those associated
                     with a given range) and casting it into XML.
                  </div>
                  <div class="para e227">This is also a generic process, although the particular ranges to be converted into
                     XML elements is passed in at run time.
                  </div>
               </div>
               <div class="listitem e228">
                  <div class="para e229">SVG graphs and HTML renditions can be generated to display and depict LMNL
                     documents. These transformations, to be sure, are not always trivial; but their
                     difficulties are greatly mitigated by the XML extraction process just mentioned, used
                     to
                     cast LMNL into intermediate XML formats (hierarchical 
                     <div class="quote e230">views</div> of the
                     LMNL).
                  </div>
                  <div class="para e231">These are not generic processes, since of course particular displays are optimized
                     for particular tagging semantics, but some of them do rely on imported functionalities
                     implemented generically (such as the logic that generates SVG 
                     <div class="quote e232">bubble
                        graphs
                     </div>), so it can be shared.
                  </div>
               </div>
            </div>
         </div>
         <div class="para e233">Links to demonstrations are provided in 
            <div class="xref e234" linkend="demonstrations"></div>.
         </div>
      </div><a name="ReflectionsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e235">
         <div class="title e236">Reflections</div>
         <div class="para e237">I can make no pretense as to the efficiency or scalability of this approach. So far,
            it
            has only worked well enough for my purposes: to demonstrate its feasibility in principle,
            and
            to test the specifications. While it has performed adequately well on documents up
            to several
            hundred Kb in size, and experience suggests that processing bottlenecks for Luminescent
            are
            actually more likely coming out of xLMNL rather than into it, I have no data to confirm
            my
            intuitions here. There does appear to be a rich and interesting set of problems at
            hand.
         </div>
         <div class="para e238">Nevertheless, if nothing else, this exercise has suggested some very interesting things
            about markup technologies beyond XML. One of the keys appears to be the separation
            of the
            parsing of the syntax from the construction of the model; so the parse tree is a tree
            only of
            the tags, from which the document model is derived by a different process. (The parse
            itself
            works like a parse of S-expressions, in which open and close delimiters are recursively
            parsed
            into tags.
            <div class="popupBox e239">
               <div class="popupLabel" onmouseover="$('#d1e540').show('1000');" onmouseout="$('#d1e540').hide('1000');">[ footnote ]</div>
               <div id="d1e540" style="display: none;">
                  <div class="footnote">
                     <div class="para e240">In fact the initial insight that led to the development of this pipeline was that
                        if
                        one were to perform simple string substitutions as follows, the result would be S-expression-like:
                        <div class="itemizedlist e241">
                           <div class="listitem e242">
                              <div class="para e243">
                                 <div class="code e244">[</div> and 
                                 <div class="code e245">{</div> (open tag delimiters) become 
                                 <div class="code e246">([</div>
                                 and 
                                 <div class="code e247">({</div>
                              </div>
                           </div>
                           <div class="listitem e248">
                              <div class="para e249">
                                 <div class="code e250">]</div> and 
                                 <div class="code e251">}</div> become 
                                 <div class="code e252">])</div> and
                                 
                                 <div class="code e253">})</div>
                              </div>
                           </div>
                        </div>Performing this substition on this
                        text:
                        <div class="programlisting e254" xml:space="preserve">[poem [by}Apollinaire{]}Et [red}l'unique [gold}cordeau{red]
                           des [green}trompettes{gold] marines{green]{poem]
                        </div>we
                        get:
                        <div class="programlisting e255" xml:space="preserve">([poem ([by})Apollinaire({])})Et ([red})l'unique ([gold})cordeau({red])
                           des ([green})trompettes({gold]) marines({green])({poem])
                        </div>Here,
                        each parenthetical expression represents a tag.
                     </div>
                  </div>
               </div>
            </div>) In this view of things, machine-automated text processing can support a very
            different form of document description than that provided by the operational semantics
            of XML,
            which in order to build a document model from the markup in a single pass, must limit
            itself
            to a syntax in which not just tags but the element structure itself can be described
            by a
            context-free grammar.
            <div class="popupBox e256">
               <div class="popupLabel" onmouseover="$('#d1e578').show('1000');" onmouseout="$('#d1e578').hide('1000');">[ footnote ]</div>
               <div id="d1e578" style="display: none;">
                  <div class="footnote">
                     <div class="para e257">Thus the XML Recommendation has a well-formedness constraint
                        (
                        <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e258" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/REC-xml/#GIMatch</div> in 
                        <div class="xref e259" linkend="xmlrec"></div>) on an
                        XML document that is not, in itself, a definition of syntax, but only a restriction
                        on the
                        way it may be used: end tags must have the same name as the most recent unclosed start
                        tag
                        (the 
                        <div class="quote e260">GI matching constraint</div>). (The reason this is not a definition of
                        syntax is because syntactically, an end tag is an end tag irrespective of whether
                        it
                        matches the most recent start tag; so this rule is not for the integrity of the syntax
                        
                        <div class="emphasis e261" role="ital">qua</div> syntax, but rather in order that a second tree may
                        be built out of the syntax parse tree.) In connection with the production for 
                        <div class="emphasis e262" role="bold">element</div> (
                        <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e263" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/REC-xml/#NT-element</div>),
                        this is how XML is able to bridge from well-formedness to its set of validity constraints
                        – something still undefined for LMNL. To be sure, formally speaking validation is
                        optional in XML, and systems that validate XML not in the sense of the Recommendation
                        (which entails a DTD) but using other models for validation have been implemented
                        several
                        times (and in several different ways) since the Recommendation was published in
                        1998.
                     </div>
                     <div class="para e264">While the GI matching constraint is suspended for LMNL, the question remains how a
                        validation technology can be developed for a range model rather than a graph, such
                        as this
                        constraint enables. But XML and LMNL itself also demonstrate that processing can occur
                        with only implicit validation in the application of a markup language.
                     </div>
                  </div>
               </div>
            </div> Thus its document models are limited to trees and to graphs projected over that
            tree [
            <div class="xref e265" linkend="bos2005"></div>]. While not, formally, more expressive than XML markup (since
            graphs projected over a tree can express the same relations as LMNL markup, as indeed
            they do
            in xLMNL or other XML-based representations of LMNL), LMNL markup is practically so;
            it can
            get 
            <div class="quote e266">closer to the text</div> than XML does, inasmuch as in order to fit within its
            own rules, XML's representation of a document (or at any rate, of a document in which
            overlapping structures or features, or structured annotations, are represented) is
            always
            getting in its own way.
         </div>
         <div class="para e267">Related to this is another aspect of this work: this parsing or compiling process
            does not
            assume a single depth-first traversal of structures implicit in the syntax, and so
            does not
            perform a single pass over the data. Instead, it considers that the entire text is
            available
            to the parser at once, and works by applying several distinct heuristic operations
            in
            sequence: first tags are inferred from delimiting tokens; then different types of
            tags (open,
            close, empty or atom) are recognized; then open/close pairs are matched, etc. Whether
            this
            technique is very novel or interesting, or how it relates to (or evades, or complicates)
            classic problems in text processing, I am not highly qualified to say. Yet it might
            be
            interesting for the sole reason that it serves as a proof of concept for generalized
            plain
            text processing in XSLT.
         </div>
         <div class="para e268">What I as a markup user find most remarkable, however, is what happens once a tool
            chain
            like this is in place. XML practitioners, I think, or at least those of us who work
            with
            structurally complex texts, are familiar with a conflict between the wish to describe
            our
            information accurately, capably and gracefully, and the need to force everything into
            a single
            hierarchy of elements – for reasons having nothing to do with the purposes of the
            markup, but only because the processing infrastructure insists on it, behind the scenes,
            before work has even begun. This conflict is apparent every time we work with (or
            must
            develop) a schema that has to make design compromises in order to address a requirement
            to
            represent things that overlap, introducing one or more of the well-worn but cumbersome
            workarounds for doing so. Sometimes we are faced with truly vexing problems in tagging,
            and
            even in the best case, having to use workarounds generates a certain amount of mental
            background noise. When working with LMNL markup, all this clamor is silenced. Even
            in small
            demonstrations, I am finding it liberating to be able to mark exactly what I wish
            to describe,
            with concern only for its clearest denotation in tags and its fidelity to what I want
            to
            represent in the text. If this is possible at all (and it evidently is), XML's early
            commitment to a single tree representation of something as complex as a text (meaning
            that
            word in the sense that literary scholars do, with everything it entails) appears to
            be a
            premature optimization – in other words, not always an optimization at all. When tags
            in
            plain text can be used to represent whatever structures in and features of text we
            care to
            discover, irrespective of whether they fit easily into a single tree-shaped model,
            then the
            potentials of markup are magnified immensely. We have only just started to explore
            the
            possibilities.
         </div>
      </div><a name="xLMNLexampleANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="appendix e269" xml:id="xlmnl-example">
         <div class="title e270">xLMNL example</div><a name="LMNLsyntax:ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e271">
            <div class="title e272">LMNL syntax:</div>
            <div class="programlisting e273" xml:space="preserve">[excerpt}
               [s}[l [n}144{n]}He manages to keep the upper hand{l]
               [l [n}145{n]}On his own farm.{s] [s}He's boss.{s] [s}But as to hens:{l]
               [l [n}146{n]}We fence our flowers in and the hens range.{l]{s]
               {excerpt   
               [source [date}1915{][title}The Housekeeper{]]
               [author
               [name}Robert Frost{]
               [dates}1874-1963{]] ]
            </div>
         </div><a name="CompiledintoxLMNLANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e274">
            <div class="title e275">Compiled into xLMNL</div>
            <div class="para e276">White space is added for legibility, and LF characters in the data indicated with
               
               <div class="code e277">&amp;#xA;</div>.
            </div>
            <div class="programlisting e278" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
               &lt;x:document xmlns:x="http://lmnl-markup.org/ns/xLMNL" ID="N.d1e1"
               base-uri="file:/c:/Projects/LMNL/Luminescent/lmnl/frost-example.lmnl"&gt;
               &lt;x:content&gt;
               &lt;x:span start="0" end="1" layer="N.d1e1" ranges="R.d1e2"&gt;&amp;#xA;&lt;/x:span&gt;
               &lt;x:span start="1" end="34" layer="N.d1e1" ranges="R.d1e2 R.d1e5 R.d1e6"&gt;He manages
               to keep the upper hand&lt;/x:span&gt;
               &lt;x:span start="34" end="35" layer="N.d1e1" ranges="R.d1e2 R.d1e5"&gt;&amp;#xA;&lt;/x:span&gt;
               &lt;x:span start="35" end="51" layer="N.d1e1" ranges="R.d1e2 R.d1e5 R.d1e15"&gt;On his own
               farm.&lt;/x:span&gt;
               &lt;x:span start="51" end="52" layer="N.d1e1" ranges="R.d1e2 R.d1e15"&gt; &lt;/x:span&gt;
               &lt;x:span start="52" end="62" layer="N.d1e1" ranges="R.d1e2 R.d1e15 R.d1e25"&gt;He's boss.&lt;/x:span&gt;
               &lt;x:span start="62" end="63" layer="N.d1e1" ranges="R.d1e2 R.d1e15"&gt; &lt;/x:span&gt;
               &lt;x:span start="63" end="78" layer="N.d1e1" ranges="R.d1e2 R.d1e15 R.d1e31"&gt;But as
               to hens:&lt;/x:span&gt;
               &lt;x:span start="78" end="79" layer="N.d1e1" ranges="R.d1e2 R.d1e31"&gt;&amp;#xA;&lt;/x:span&gt;
               &lt;x:span start="79" end="122" layer="N.d1e1" ranges="R.d1e2 R.d1e31 R.d1e37"&gt;We fence
               our flowers in and the hens range.&lt;/x:span&gt;
               &lt;x:span start="122" end="123" layer="N.d1e1" ranges="R.d1e2"&gt; &lt;/x:span&gt;
               &lt;/x:content&gt;
               &lt;x:range start="0" end="123" ID="R.d1e2" sl="1" so="1" name="excerpt" el="9" eo="25"&gt;
               &lt;x:annotation ID="N.d1e49" sl="6" so="3" el="6" eo="47" name="source"&gt;
               &lt;x:annotation ID="N.d1e50" sl="6" so="11" el="6" eo="22" name="date"&gt;
               &lt;x:content&gt;
               &lt;x:span start="0" end="4" layer="N.d1e50"&gt;1915&lt;/x:span&gt;
               &lt;/x:content&gt;
               &lt;/x:annotation&gt;
               &lt;x:annotation ID="N.d1e53" sl="6" so="23" el="6" eo="46" name="title"&gt;
               &lt;x:content&gt;
               &lt;x:span start="0" end="15" layer="N.d1e53"&gt;The Housekeeper&lt;/x:span&gt;
               &lt;/x:content&gt;
               &lt;/x:annotation&gt;
               &lt;x:content/&gt;
               &lt;/x:annotation&gt;
               &lt;x:annotation ID="N.d1e56" sl="7" so="3" el="9" eo="23" name="author"&gt;
               &lt;x:annotation ID="N.d1e57" sl="8" so="5" el="8" eo="24" name="name"&gt;
               &lt;x:content&gt;
               &lt;x:span start="0" end="12" layer="N.d1e57"&gt;Robert Frost&lt;/x:span&gt;
               &lt;/x:content&gt;
               &lt;/x:annotation&gt;
               &lt;x:annotation ID="N.d1e60" sl="9" so="5" el="9" eo="22" name="dates"&gt;
               &lt;x:content&gt;
               &lt;x:span start="0" end="9" layer="N.d1e60"&gt;1874-1963&lt;/x:span&gt;
               &lt;/x:content&gt;
               &lt;/x:annotation&gt;
               &lt;x:content/&gt;
               &lt;/x:annotation&gt;
               &lt;/x:range&gt;
               &lt;x:range start="1" end="51" ID="R.d1e5" sl="2" so="1" name="s" el="3" eo="32"/&gt;
               &lt;x:range start="1" end="34" ID="R.d1e6" sl="2" so="4" name="l" el="2" eo="52"&gt;
               &lt;x:annotation ID="N.d1e7" sl="2" so="7" el="2" eo="15" name="n"&gt;
               &lt;x:content&gt;
               &lt;x:span start="0" end="3" layer="N.d1e7"&gt;144&lt;/x:span&gt;
               &lt;/x:content&gt;
               &lt;/x:annotation&gt;
               &lt;/x:range&gt;
               &lt;x:range start="35" end="78" ID="R.d1e15" sl="3" so="1" name="l" el="3" eo="71"&gt;
               &lt;x:annotation ID="N.d1e16" sl="3" so="4" el="3" eo="12" name="n"&gt;
               &lt;x:content&gt;
               &lt;x:span start="0" end="3" layer="N.d1e16"&gt;145&lt;/x:span&gt;
               &lt;/x:content&gt;
               &lt;/x:annotation&gt;
               &lt;/x:range&gt;
               &lt;x:range start="52" end="62" ID="R.d1e25" sl="3" so="34" name="s" el="3" eo="49"/&gt;
               &lt;x:range start="63" end="122" ID="R.d1e31" sl="3" so="51" name="s" el="4" eo="62"/&gt;
               &lt;x:range start="79" end="122" ID="R.d1e37" sl="4" so="1" name="l" el="4" eo="59"&gt;
               &lt;x:annotation ID="N.d1e38" sl="4" so="4" el="4" eo="12" name="n"&gt;
               &lt;x:content&gt;
               &lt;x:span start="0" end="3" layer="N.d1e38"&gt;146&lt;/x:span&gt;
               &lt;/x:content&gt;
               &lt;/x:annotation&gt;
               &lt;/x:range&gt;
               &lt;/x:document&gt;
            </div>
         </div>
      </div><a name="RNCschemaforxLMNLANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="appendix e279" xml:id="xlmnl-schema">
         <div class="title e280">RNC schema for xLMNL</div>
         <div class="programlisting e281" xml:space="preserve">namespace x = "http://lmnl-markup.org/ns/xLMNL"
            
            start =
            element x:document {
            document-model }
            
            document-model =
            attribute base-uri { xsd:anyURI }?,
            attribute ID { xsd:ID },
            attribute name { xsd:QName }?,
            debug-support?,
            (annotation | comment)*,
            ( content,
            range*,
            (annotation | comment)*)?
            
            annotation =
            element x:annotation {
            document-model }
            
            content =
            element x:content {
            element x:span {
            attribute layer { xsd:IDREF },
            attribute ranges { xsd:IDREFS }?,
            attribute start { xsd:integer },
            attribute end { xsd:integer },
            (text
            | element x:atom {
            attribute name { xsd:NCName },
            debug-support?,
            annotation*
            }
            | comment )+
            }*
            }
            range =
            element x:range {
            attribute ID { xsd:ID },
            attribute name { xsd:NCName }?,
            attribute start { xsd:integer },
            attribute end { xsd:integer },
            debug-support?,
            (annotation | comment)*
            }
            
            comment =
            element x:comment { 
            debug-support?,
            text }
            
            
            debug-support =
            attribute sl { xsd:integer },
            attribute so { xsd:integer },
            attribute el { xsd:integer },
            attribute eo { xsd:integer }
         </div>
         <div class="para e282">A full specification for xLMNL would include constraints not captured by this RNG,
            such as
            that offsets (
            <div class="emphasis e283" role="bold">start</div> and 
            <div class="emphasis e284" role="bold">end</div>
            attributes) must be whole numbers (positive integers or 0); values of 
            <div class="emphasis e285" role="bold">end</div> must be greater than or equal to values of 
            <div class="emphasis e286" role="bold">start</div> on the same 
            <div class="emphasis e287" role="bold">range</div>; the difference between
            the 
            <div class="emphasis e288" role="bold">start</div> and 
            <div class="emphasis e289" role="bold">end</div> of a
            
            <div class="emphasis e290" role="bold">span</div> (its length) must be equal to its string length plus
            the count of its 
            <div class="emphasis e291" role="bold">atom</div> children; referential integrity must be
            maintained between spans, ranges and layers (limina), and so forth.
         </div>
      </div><a name="DemonstrationsandsourcecodeANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="appendix e292" xml:id="demonstrations">
         <div class="title e293">Demonstrations and source code</div>
         <div class="para e294">A demonstration showsing results of the Luminescent pipeline accompany this paper,
            in the
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e295" xlink:actuate="onRequest" xlink:href="http://www.balisage.net/Proceedings/vol8/author-pkg/Piez01/BalisageVol8-Piez01.html" xlink:show="new" xlink:type="simple">Slides and Materials</div>
            linked in the Proceedings. Unzip the package and open 
            <div class="code e296">index.html</div>, which will
            describe the examples and present links for examining them.
         </div>
         <div class="para e297">Many browsers will now attempt and may do a reasonable job rendering the SVG examples.
            But
            best results will be obtained from a fully conformant SVG viewer implementation with
            panning
            and zooming to arbitrary levels of scale. (Most browsers will not zoom in as far as
            you may
            want to go.) Apache Squiggle (distributed with Batik) is recommended.
         </div>
         <div class="para e298">Source code for Luminescent is available on github, at
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e299" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">https://github.com/wendellpiez/Luminescent</div>.
         </div>
      </div><a name="BibliographyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e300">
         <div class="title e301">Bibliography</div>
         <div class="bibliomixed e302" xml:id="bos2005" xreflabel="Bos 2005">Bos, Bert. 
            <div class="quote e303">The XML data model</div>.
            2005. See 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e304" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/XML/Datamodel.html</div>
         </div>
         <div class="bibliomixed e305" xml:id="cayless2010" xreflabel="Cayless and Soroka 2010">Cayless, Hugh A., and Adam
            Soroka. 
            <div class="quote e306">On Implementing 
               <div class="code e307">string-range()</div> for TEI
            </div>. Presented at
            Balisage: The Markup Conference 2010 (Montréal, Canada, August 3 - 6, 2010). In 
            <div class="emphasis e308" role="ital">Proceedings of Balisage: The Markup Conference 2010</div>. Balisage Series
            on Markup Technologies, vol. 5 (2010). doi:
            <div class="biblioid doi e309">10.4242/BalisageVol5.Cayless01</div>. 
         </div>
         <div class="bibliomixed e310" xml:id="derose2004" xreflabel="DeRose 2004">DeRose, Steven. 
            <div class="quote e311">Markup Overlap:
               A Review and a Horse
            </div>. Presented at Extreme Markup Languages 2004 (Montréal,
            Canada).
         </div>
         <div class="bibliomixed e312" xml:id="durusau-jitts" xreflabel="Durusau and O'Donnell n.d.">Durusau, Patrick, and
            Matthew Brook O'Donnell. 
            <div class="quote e313">JITTs (Just-in-time Trees)</div>.
            http://www.durusau.net/publications/NY_xml_sig.pdf.
         </div>
         <div class="bibliomixed e314" xml:id="lmnl-markup" xreflabel="lmnl-markup.org">LMNL-markup.org. See
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e315" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.lmnl-markup.org</div>.
         </div>
         <div class="bibliomixed e316" xml:id="piez2004" xreflabel="Piez 2004">Piez, Wendell. 
            <div class="quote e317">Half-steps toward
               LMNL
            </div>. Presented at Extreme Markup Languages 2004 (Montréal, Canada). See
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e318" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.piez.org/wendell/papers/LMNL-halfsteps.pdf</div>.
         </div>
         <div class="bibliomixed e319" xml:id="piez2010" xreflabel="Piez 2010">Piez, Wendell. 
            <div class="quote e320">Towards Hermeneutic
               Markup: An architetural outline
            </div>. Presented at Digital Humanities 2010 (London,
            England). See 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e321" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.piez.org/wendell/papers/dh2010/index.html</div>.
         </div>
         <div class="bibliomixed e322" xml:id="portier2009" xreflabel="Portier and Calabretto 2009">Portier, Pierre-Édouard, and Sylvie Calabretto. “Methodology for the construction
            of multi-structured documents.” Presented at Balisage: The Markup Conference 2009
            (Montréal,
            Canada, August 11 - 14, 2009). In 
            <div class="emphasis e323" role="ital">Proceedings of Balisage: The Markup
               Conference 2009
            </div>. Balisage Series on Markup Technologies, vol. 3 (2009).
            doi:
            <div class="biblioid doi e324">10.4242/BalisageVol3.Portier01</div>.
         </div>
         <div class="bibliomixed e325" xml:id="portier2010" xreflabel="Portier and Calabretto 2010">Portier, Pierre-Édouard, and Sylvie Calabretto. “Multi-structured documents and the
            emergence of annotations vocabularies.” Presented at Balisage: The Markup Conference
            2010,
            Montréal, Canada, August 3 - 6, 2010. In 
            <div class="emphasis e326" role="ital">Proceedings of Balisage: The
               Markup Conference 2010
            </div>. Balisage Series on Markup Technologies, vol. 5 (2010).
            doi:
            <div class="biblioid doi e327">10.4242/BalisageVol5.Portier01</div>. 
         </div>
         <div class="bibliomixed e328" xml:id="pondorf2010" xreflabel="Pondorf and Witt 2010"> Pondorf, Denis, and Andreas
            Witt. 
            <div class="quote e329">Freestyle Markup Language: Specification of an intuitive, powerful,
               polyhierarchical new extensible markup language
            </div>. Presented at Balisage: The Markup
            Conference 2010 (Montréal, Canada, August 3 - 6, 2010). In 
            <div class="emphasis e330" role="ital">Proceedings
               of Balisage: The Markup Conference 2010
            </div>. Balisage Series on Markup Technologies,
            vol. 5 (2010). doi:
            <div class="biblioid doi e331">10.4242/BalisageVol5.Pondorf01</div>. 
         </div>
         <div class="bibliomixed e332" xml:id="schmidt2010" xreflabel="Schmidt 2010">Schmidt, Desmond. 
            <div class="quote e333">The
               inadequacy of embedded markup for cultural heritage texts.
            </div> In 
            <div class="emphasis e334" role="ital">Literary and Linguistic Computing</div> (2010) 25 (3): 337-356. doi: 
            <div class="biblioid doi e335">10.1093/llc/fqq007</div>.
         </div>
         <div class="bibliomixed e336" xml:id="cmsmcq1999" xreflabel="Sperberg-McQueen and Huitfeldt 1999">Sperberg-McQueen, Michael, and Claus Huitfeldt: "Concurrent Document Hierarchies in
            MECS and
            SGML". In 
            <div class="emphasis e337" role="ital">Literary and Linguistic Computing</div> (1999) 14, pp
            29-42. 
         </div>
         <div class="bibliomixed e338" xml:id="stegmann2009" xreflabel="Stegmann and Witt 2009">Stegmann, Jens, and
            Andreas Witt. 
            <div class="quote e339">TEI Feature Structures as a Representation Format for Multiple Annotation
               and Generic XML Documents
            </div>. Presented at Balisage: The Markup Conference 2009,
            Montréal, Canada, August 11 - 14, 2009. In 
            <div class="emphasis e340" role="ital">Proceedings of Balisage: The
               Markup Conference 2009
            </div>. Balisage Series on Markup Technologies, vol. 3 (2009).
            doi:
            <div class="biblioid doi e341">10.4242/BalisageVol3.Stegmann01</div>. 
         </div>
         <div class="bibliomixed e342" xml:id="stuehrenberg2009" xreflabel="Stührenberg and Jettka 2009">Stührenberg,
            Maik, and Daniel Jettka. 
            <div class="quote e343">A toolkit for multi-dimensional markup: The development of SGF
               to XStandoff
            </div>. Presented at Balisage: The Markup Conference 2009 (Montréal, Canada,
            August 11 - 14, 2009). In 
            <div class="emphasis e344" role="ital">Proceedings of Balisage: The Markup Conference
               2009
            </div>. Balisage Series on Markup Technologies, vol. 3 (2009). doi:
            <div class="biblioid doi e345">10.4242/BalisageVol3.Stuhrenberg01</div>. 
         </div>
         <div class="bibliomixed e346" xml:id="tennison2002" xreflabel="Tennison and Piez 2002">Tennison, Jeni, and
            Wendell Piez. 
            <div class="quote e347">The Layered Markup and Annotation Language (LMNL)</div>. Presented at
            Extreme Markup Languages 2002 (Montréal, Canada).
         </div>
         <div class="bibliomixed e348" xml:id="xdm" xreflabel="XDM">Berglund, Anders, Mary Fernández, Ashok Malhotra,
            Jonathan Marsh, Marton Nagy, and Norman Walsh, eds. 
            <div class="emphasis e349" role="ital">XQuery 1.0 and XPath
               2.0 Data Model (XDM) (Second Edition)
            </div> W3C Recommendation 14 December 2010.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e350" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xpath-datamodel/</div>.
         </div>
         <div class="bibliomixed e351" xml:id="xmlinfoset" xreflabel="XML Infoset">Cowan, John, and Richard Tobin, eds.
            
            <div class="emphasis e352" role="ital">XML Information Set (Second Edition)</div>. W3C Recommendation 4
            February 2004. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e353" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xml-infoset/</div>.
         </div>
         <div class="bibliomixed e354" xml:id="xmlrec" xreflabel="XML Recommendation">Tim Bray, Tim, Jean Paoli, C. M.
            Sperberg-McQueen, Eve Maler, and François Yergeau, eds. 
            <div class="emphasis e355" role="ital"> Extensible
               Markup Language (XML) 1.0 (Fifth Edition)
            </div> W3C Recommendation 26 November 2008.
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e356" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/REC-xml/</div>.
         </div>
      </div>
   </div>
</div>