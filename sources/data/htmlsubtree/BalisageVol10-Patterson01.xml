<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#Wheredidallthedocumentkidsgo?ANCHOR" name="Wheredidallthedocumentkidsgo?TOC">Where did all the document kids go?</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ThegreenergrassANCHOR" name="ThegreenergrassTOC">The greener grass</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#July2004:RubyonRailsANCHOR" name="July2004:RubyonRailsTOC">July 2004: Ruby on Rails</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#AparallelstoryANCHOR" name="AparallelstoryTOC">A parallel story</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#Atruestoryofpainandbewilderment:ValidatingXMLANCHOR" name="Atruestoryofpainandbewilderment:ValidatingXMLTOC">A true story of pain and bewilderment: Validating XML</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#hpricotNokogiriandgettingthingsdoneANCHOR" name="hpricotNokogiriandgettingthingsdoneTOC">hpricot, Nokogiri, and getting things done</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#LanguagebindingsmatterandwhyLibXMLwonANCHOR" name="LanguagebindingsmatterandwhyLibXMLwonTOC">Language bindings matter, and why LibXML won</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#NextstepsANCHOR" name="NextstepsTOC">Next steps</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#There%E2%80%99snoexcuseforbeinginaccessibleANCHOR" name="There%E2%80%99snoexcuseforbeinginaccessibleTOC">There’s no excuse for being inaccessible</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#LanguagebindingsareimportantANCHOR" name="LanguagebindingsareimportantTOC">Language bindings are important</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#There%E2%80%99smoretolifethanDOMANCHOR" name="There%E2%80%99smoretolifethanDOMTOC">There’s more to life than DOM.</a></div>
            </div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">August 6 - 9, 2013</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2013</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
         <div class="singletermTERMS">java -jar jenkins.war</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">matt@werkstatt.io</div>
         <div class="singletermTERMS">Matt</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">Patterson</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="Wheredidallthedocumentkidsgo?ANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3">
      <div class="title e1">Where did all the document kids go?</div>
      <div class="subtitle e2">Open-source, markup, and the casual developer</div>
      <div class="info e3">
         <div class="confgroup e4">
            <div class="conftitle e5">Balisage: The Markup Conference 2013</div>
            <div class="confdates e6">August 6 - 9, 2013</div>
         </div>
         <div class="abstract e7">
            <div class="para e8">When I began developing with XML technologies, there were a multitude of toolkits
               and implementations of XML parsers, multiple DOM (and DOM-like) implementations outside
               web browsers, and XSLT implementations everywhere. My current development environments
               seems impoverished in comparison. What happened? The population of web development
               tools, by contrast, has grown by leaps and bounds. Why is the one ecosystem contracting
               and the other growing? One should never underestimate the power of making things more
               accessible to the casual user.
            </div>
         </div>
         <div class="author e9">
            <div class="personname e10">
               <div class="firstname e11">Matt</div>
               <div class="surname e12">Patterson</div>
            </div>
            <div class="personblurb e13">
               <div class="para e14">Matt Patterson is a web developer who has worked with HTML and XML for over 10 years.
                  He lives
                  in Berlin, Germany
               </div>
            </div>
            <div class="email e15">matt@werkstatt.io</div>
         </div>
         <div class="legalnotice e16">
            <div class="para e17">Copyright © 2013 Matt Patterson, some rights reserved:  This work is licensed under
               a 
               <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e18" xlink:actuate="onRequest" xlink:href="http://creativecommons.org/licenses/by-sa/3.0/deed.en_US" xlink:show="new" xlink:title="license" xlink:type="simple">Creative Commons Attribution-ShareAlike 3.0 Unported License</div>.
            </div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e19">
         <div class="title e20">Introduction</div>
         <div class="para e21">It’s a truism that things were different when I was a lad, but with open-source implementations
            of markup technologies there seems to be truth to it.
         </div>
         <div class="para e22">When I began to develop with XML technologies in the very early 2000s there was a
            slew of toolkits and implementations for XML parsers, multiple DOM-like implementations
            outside web browsers, XSLT implementations, etc (almost ad nauseam).
         </div>
         <div class="para e23">Now, GNOME’s LibXML seems to be the de facto standard implementation, used with many
            (non-Java) language bindings, there’s only one open-source XSLT2 implementation, and
            technologies like XQuery seem to be restricted to specialist use and implementations
            on top of XML databases.
         </div>
         <div class="para e24">What happened? Open-source technologies in related areas including document-like data
            stores, document-manipulation (albeit in Javascript running in a browser), have come
            on in leaps and bounds. The XML technology space seems to have contracted and stagnated,
            at least to a casual observer.
         </div>
         <div class="para e25">Why should you care about this? Will it affect you? And if you do care, what can you
            do?
         </div>
      </div><a name="ThegreenergrassANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e26">
         <div class="title e27">The greener grass</div>
         <div class="para e28">For comparison, let’s take a look at open-source web development, and what’s happened
            to that in the last 10 years. Web development is a good comparison point because it
            is, in essence, in the business of markup production.
         </div>
         <div class="para e29">If we go back to 2003 we’re in a world where Perl and variants of the CGI model are
            dominant, and PHP (a variant of the CGI model itself) is fast rising. Python is heavily
            used by self-respecting developers (Google being the poster child for Python at this
            time). MySQL has already won and taken its place as the default database backing the
            web. The common thread is that there are very few frameworks, as we would understand
            them now. The frameworks that are there seem to largely be restricted to proprietary
            toolkits like WebObjects and J2EE. The open-source web development world is making
            do with CGI, templating libraries, and SQL. A uniform API to connect to different
            SQL databases and issue queries is pretty much the height of sophistication.
         </div>
         <div class="para e30">In the XML world, we have LibXML 2 fast emerging, but still not installed by default
            on pretty much every computer system (as it is now). Saxon and Xerces/Xalan are the
            heavyweights here.
         </div><a name="July2004:RubyonRailsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e31">
            <div class="title e32">July 2004: Ruby on Rails</div>
            <div class="para e33">Rails was the first proper full-stack web framework to get significant traction and
               adoption. Django, the Python framework which most closely matches it in terms of scope,
               was first released in July 2005.
            </div>
            <div class="para e34">The release of Rails and Django are not unique, but they are significant enough to
               stand in for the changes in backend web development as a whole.
            </div>
            <div class="para e35">What we see as they pick up speed is an explosion of libraries and plugins and the
               emergence of ecosystems surrounding them. Ruby makes for a nice subject here. Rails
               was largely responsible for it becoming a language with widespread adoption, especially
               outside Japan. If we look at statistics from Github (launched 2008) about the growth
               in number of public repositories for projects written in Ruby, then we see growth
               that looks exponential.
            </div>
            <div class="para e36">Rubygems is Ruby’s package management system, with all public gems hosted by rubygems.org.
               There are currently 55,075 public gems. Looking at Rails itself, the current version
               (released 18 March 2013) has (as of 17 April 2013) been installed 380,730 times.
            </div>
            <div class="para e37">What does this tell us? Apart from the obvious – there’s a lot happening – it’s fairly
               clear that the buzz about web development technologies 10 years ago translated into
               sustained and impressive development of an open-source ecosystem. Contrast that with
               the buzz around XML technologies, say, 15 years ago, and there’s no real comparison.
               The real question is why.
            </div>
         </div>
      </div><a name="AparallelstoryANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e38">
         <div class="title e39">A parallel story</div>
         <div class="para e40">Back in the early 2000’s there were several competing open-source relational databases,
            in addition to Oracle and DB2, where ‘real’ work was done. Of those available open-source
            DB’s, MySQL was the one which became the default choice, quickly almost entirely displacing
            its open-source competitors (and Oracle) from general web development. You’d be hard
            pressed to find anyone who actually understands relational database implementation
            who’ll say that MySQL was the best technology, and many who’ll say it was pretty bad
            in the early days. Yet, in the battle of MySQL vs. everything else, MySQL destroyed
            the competition. Why?
         </div>
         <div class="para e41">There are two critical factors in getting a developer to adopt a technology like a
            relational DB.
         </div>
         <div class="orderedlist e42">
            <div class="listitem e43">
               <div class="para e44">Is it straightforward to install?</div>
            </div>
            <div class="listitem e45">
               <div class="para e46">Is it easy to use?</div>
            </div>
         </div>
         <div class="para e47">MySQL’s great weapon was that it was trivial to install on almost any system with
            a C compiler, and it soon had client bindings for almost all languages.
         </div>
         <div class="para e48">If you wanted to use a relational DB, you could either spend an age figuring out how
            to satisfy the dependencies and configuration requirements for a competing RDBMS or
            you could spend 5 minutes installing MySQL.
         </div>
         <div class="para e49">It was a SQL database, so writing queries for it was easy. It had native bindings
            for your language, so it was easy to integrate. It was quick and worked well enough
            for the 80% case that you didn’t immediately notice its flaws.
         </div>
         <div class="para e50">In short, it was a database for casual users.</div>
      </div><a name="Atruestoryofpainandbewilderment:ValidatingXMLANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e51">
         <div class="title e52">A true story of pain and bewilderment: Validating XML</div>
         <div class="para e53">Recently, I have been experimenting with a web service which has a ReST API with an
            XML serialisation format, and which provides XML Schema grammars for the various endpoints.
            Writing a client in Ruby, and wanting to validate XML I generated as part of my automated
            tests, how could I go about that?
         </div>
         <div class="para e54">My first thought was to shell out to a command line utility and pass or fail tests
            based on the return value, in classic Unix style.
         </div>
         <div class="para e55">So. LibXML’s support is incomplete, a polite way of saying dangerous and broken.</div>
         <div class="para e56">Saxon HE doesn’t include it (which is fine, but meant I couldn’t use it)</div>
         <div class="para e57">Xerces’ command-line utilities (C++ or Java) are really hard to figure out (and the
            JVM startup tax is really hefty when shelling out dozens of times in an automated
            test suite). (Norm Walsh released a wrapper that does schema validation, but I didn’t
            find it until researching for this paper, and I know Norm.)
         </div>
         <div class="para e58">Having tried to do this a few times in the past, it’s at this point that I usually
            give up, because nothing has changed since the last time I went looking.
         </div>
         <div class="para e59">This time, I realised that a Ruby XML/HTML library (Nokogiri, more on this later)
            wrapped Xerces-J under JRuby, and Xerces-J’s XML Schema implementation works. So,
            now I have XML Schema validation integrated into my test suite, but only when it runs
            under JRuby. Under MRI (the standard Ruby implementation) LibXML 2’s broken Schema
            implementation explodes.
         </div>
         <div class="para e60">XML Schema is a technology that’s been a TR since 2001. It seems absurd that, in 2013,
            it’s simplest task – validation – requires so many hoops to be jumped in order to
            integrate it into a sensible, modern, web development workflow.
         </div>
      </div><a name="hpricotNokogiriandgettingthingsdoneANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e61">
         <div class="title e62">hpricot, Nokogiri, and getting things done</div>
         <div class="para e63">One of the side-effects of the HTML/XHTML kerfuffle was that, by and large, tools
            for dealing with HTML (without resorting to regexes) were tools for dealing with XML,
            at least in Python and Ruby. Partly as a legacy of its SGML roots, but mostly because
            humans are incredibly good at being incredibly bad at things, vast swathes of HTML
            content wasn’t (still isn’t) even well-formed HTML, let alone XML. Even more content
            isn’t valid HTML.
         </div>
         <div class="para e64">XML’s default error handling (terror, immediate exit) makes it extremely problematic
            to use with HTML, and HTML constitutes the largest body of markup on the internet.
         </div>
         <div class="para e65">Python’s Beautiful Soup &amp; lxml, and Ruby’s Hpricot provided tools for coping with
            HTML. They ignored the DOM for search interfaces based on idiomatic constructs and
            even CSS.
         </div>
         <div class="para e66">Hpricot was effectively superseded by Nokogiri, which wraps LibXML 2 in an API based
            on Hpricot’s. Before it was installed by default on Mac OS X, Nokogiri was the sole
            reason that a lot of people installed LibXML 2.
         </div>
         <div class="para e67">These libraries are widely used, and successful precisely because of their pragmatic
            and idiomatic approach.
         </div>
      </div><a name="LanguagebindingsmatterandwhyLibXMLwonANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e68">
         <div class="title e69">Language bindings matter, and why LibXML won</div>
         <div class="para e70">If MySQL won because any fool with a C compiler and Make could get it running, LibXML
            2 won because it was actually fast enough to use, and had language bindings for almost
            everything. That was enough for it to creep onto almost every developer’s system as
            part of the base OS install (a side-effect of the XML-as-data-storage fad which meant
            that core OS systems needed to read and write XML). (Mac OS X did this in 2007, the
            last holdout.) Even before then, the pain of installing LibXML 2 + language bindings
            (not inconsiderable if you were installing from source) was far outweighed by the
            orders-of-magnitude better performance than most other libraries outside the Java
            world.
         </div>
         <div class="para e71">LibXML 2 / LibXSLT 1 have what amounts to a frozen feature set though: no XSLT 2,
            no XPath 2, no XQuery, incomplete XML Schema support. Its ubiquity and competence
            far outweigh its restrictions for most people, but that means that very few will ever
            explore beyond XSLT 1 in the way that its introduction allowed many people to explore
            beyond simple document parsing.
         </div>
         <div class="para e72">The standard HTML &amp; XML processing libraries for almost all dynamic languages are
            wrappers around LibXML 2.
         </div>
      </div><a name="NextstepsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e73">
         <div class="title e74">Next steps</div>
         <div class="para e75">What can we do about this state of affairs? Is there a way continue to advance the
            state-of-the-art whilst also making it easy for new developers to jump in?
         </div>
         <div class="para e76">The short answer is that there needs to be. The longer answer, I think, draws on what
            we’ve learnt from MySQL and LibXML.
         </div><a name="There%E2%80%99snoexcuseforbeinginaccessibleANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e77">
            <div class="title e78">There’s no excuse for being inaccessible</div>
            <div class="para e79">Java seems to be where current open-source markup technology development is taking
               place. If you’re not a Java developer it’s often a pain to get started. If you are
               a Java developer it’s often tedious to do common, trivial, tasks.
            </div>
            <div class="para e80">There’s no excuse for being inaccessible to non-Java developers, and there’s no excuse
               for tedium. Let’s take Jenkins as an example. Jenkins is a continuous integration
               server written in Java. There are many CI servers written in many languages. Jenkins
               is beating them all because it’s trivial to get started with it. It bundles a simple
               Java app server in its .war, meaning that, if you want, you can get started with nothing
               more complex than downloading the .war, and running it with 
               <div class="code e81">java -jar jenkins.war</div>. There’s nothing else to it, and that built-in server is enough for almost everyone.
            </div>
            <div class="para e82">Saxon can be used from the command line, but it doesn’t have a dedicated utility,
               which means there’s no man page, and no simple tab-completion for a half-remembered
               command name. xmllint and xsltproc, the utilities shipped with Libxml2 are so useful
               because they are standard command line utilities: they are invoked with a single-word
               command, they have man pages, they aren’t dependent on CLASSPATH or on remembering
               where you put saxon9he.jar.
            </div>
            <div class="para e83">(If Saxon is PostgreSQL, technically superior in almost every way, then LibXML 2 is
               MySQL. LibXML2 is utterly ubiquitous: it’s on your phone.)
            </div>
         </div><a name="LanguagebindingsareimportantANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e84">
            <div class="title e85">Language bindings are important</div>
            <div class="para e86">The popularity of the JVM as a host for implementations of popular dynamic languages
               (JRuby, Jython) and new languages (Scala, Clojure) mean that even Java-native libraries
               like Saxon can be made obvious and easy to use for non-Java developers. Nokogiri uses
               Xerces as its parser and XSLT engine under JRuby, which means that I use JRuby + Nokogiri
               to validate documents against XML Schema (although, obviously, I’m limited to XML
               Schema 1.0). Why not have idiomatic Saxon bindings for other JVM host languages?
            </div>
         </div><a name="There%E2%80%99smoretolifethanDOMANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e87">
            <div class="title e88">There’s more to life than DOM.</div>
            <div class="para e89">hpricot and Nokogiri made it fun and easy to work with complex HTML and XML. Their
               shelving of the DOM API in favour of idiomatic Ruby made many common tasks vastly
               easier than with DOM. That led in turn to Nokogiri’s near-total dominance of XML handling
               in Ruby.
            </div>
            <div class="para e90">Imagine if XQuery were opened up in that way. Imagine if the DSDL validation pipeline
               were made trivial to use. There are lots of XML-clad web APIs out there. Imagine how
               much better documented they’d be with, say, RelaxNG + Schematron that anyone could
               trivially easily use.
            </div>
         </div>
      </div>
   </div>
</div>