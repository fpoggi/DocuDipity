<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#MarkingupchangestoISOstandards:AcasestudyANCHOR" name="MarkingupchangestoISOstandards:AcasestudyTOC">Marking up changes to ISO standards: A case study</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#DocumentComparisonOverviewANCHOR" name="DocumentComparisonOverviewTOC">Document Comparison Overview</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ChangerepresentationANCHOR" name="ChangerepresentationTOC">Change representation</a></div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#TrackedChangesANCHOR" name="TrackedChangesTOC">Tracked Changes</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#FormatspecificsyntaxANCHOR" name="FormatspecificsyntaxTOC">Format-specific syntax</a></div>
               </div>
               <div class="headedContainerTOC">
                  <div class="headedContainerTitleTOC"><a href="#GenericchangerepresentationANCHOR" name="GenericchangerepresentationTOC">Generic change representation</a></div>
               </div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#MakinguseofDTDsandschemaANCHOR" name="MakinguseofDTDsandschemaTOC">Making use of DTDs and schema</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#WhitespaceANCHOR" name="WhitespaceTOC">Whitespace</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#InfosetAugmentationANCHOR" name="InfosetAugmentationTOC">Infoset Augmentation</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#TableComparisonANCHOR" name="TableComparisonTOC">Table Comparison</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#TextformattingchangesANCHOR" name="TextformattingchangesTOC">Text formatting changes</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IDandIDREFattributesANCHOR" name="IDandIDREFattributesTOC">ID and IDREF attributes</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ProcessingInstructionsANCHOR" name="ProcessingInstructionsTOC">Processing Instructions</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#WordCapitalizationANCHOR" name="WordCapitalizationTOC">Word Capitalization</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#HTMLchangevisualizationANCHOR" name="HTMLchangevisualizationTOC">HTML change visualization</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ResultsANCHOR" name="ResultsTOC">Results</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#SummaryANCHOR" name="SummaryTOC">Summary</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BibliographyANCHOR" name="BibliographyTOC">Bibliography</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">added</div>
         <div class="singletermTERMS">August 6 - 9, 2013</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">bold italics</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2013</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">changed</div>
         <div class="singletermTERMS">class</div>
         <div class="singletermTERMS">characters</div>
         <div class="singletermTERMS">Cell 3</div>
         <div class="singletermTERMS">Cell 1</div>
         <div class="singletermTERMS">Cell 2</div>
         <div class="singletermTERMS">Cell 4</div>
         <div class="singletermTERMS">could</div>
         <div class="singletermTERMS">Chief Architect</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">deleted</div>
         <div class="singletermTERMS">document</div>
         <div class="singletermTERMS">deltaV2</div>
         <div class="singletermTERMS">deltaxml:deltaV2="A!=B"</div>
         <div class="singletermTERMS">deltaxml:deltaV2="A=B"</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">href</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">inter-element whitespace</div>
         <div class="singletermTERMS">ignorable whitespace</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">Mitchell</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">new</div>
         <div class="singletermTERMS">nigel.whitaker@deltaxml.com</div>
         <div class="singletermTERMS">Nigel</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">off</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">revisionflag</div>
         <div class="singletermTERMS">rev</div>
         <div class="singletermTERMS">redline</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">status</div>
         <div class="singletermTERMS">Senior Software Engineer</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">tristan.mitchell@deltaxml.com</div>
         <div class="singletermTERMS">Tristan</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
         <div class="singletermTERMS">unchanged</div>
         <div class="singletermTERMS">underline</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="MarkingupchangestoISOstandards:AcasestudyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3">
      <div class="title e1">Marking up changes to ISO standards: A case study</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2013</div>
            <div class="confdates e5">August 6 - 9, 2013</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">The ISO Standards Tags Set (ISOSTS) is a customization of NISO’s Journal Article Tag
               Suite (JATS) developed for the International Standards Organization for authoring
               standards
               documents.
            </div>
            <div class="para e8">As part of the authoring workflow used at ISO, they required the capability to produce
               
               <div class="emphasis e9" role="ital">redline</div> publications of a document in order to show
               changes between different versions of a given standard. Alongside Typefi, who provided
               the functionality for publishing the marked XML into PDF with redlining, we provided
               our XML
               comparison toolset to detect and mark the changes as required.
            </div>
            <div class="para e10">This paper discusses some of the issues we faced while completing this work, including
               the representation of changes in the XML, comparison of tables, ignoring text formatting
               changes, and the use of processing instructions. The paper also looks at the pros
               and cons of various format design decisions that can have an impact on the suitability
               of that
               format to support good comparison.
            </div>
         </div>
         <div class="author e11">
            <div class="personname e12">
               <div class="firstname e13">Tristan</div>
               <div class="surname e14">Mitchell</div>
            </div>
            <div class="personblurb e15">
               <div class="para e16">Tristan joined DeltaXML after graduating with an MEng from Aberystwyth University
                  in 2004. Since then he has been involved in improving the performance of DeltaXML’s
                  comparison
                  software as well as developing new ways of representing change to XML. 
               </div>
               <div class="para e17">Tristan lives in Salisbury, UK, with his wife and two young daughters. Outside of
                  work he enjoys reading about and watching movies and he is also a keen runner.
               </div>
            </div>
            <div class="affiliation e18">
               <div class="jobtitle e19">Senior Software Engineer</div>
               <div class="orgname e20">DeltaXML Ltd.</div>
            </div>
            <div class="email e21">tristan.mitchell@deltaxml.com</div>
         </div>
         <div class="author e22">
            <div class="personname e23">
               <div class="firstname e24">Nigel</div>
               <div class="surname e25">Whitaker</div>
            </div>
            <div class="personblurb e26">
               <div class="para e27">Nigel Whitaker is Chief Architect of DeltaXML and has driven the development of their
                  XML comparison and merge products, their APIs and products related to DITA and
                  DocBook.
               </div>
            </div>
            <div class="affiliation e28">
               <div class="jobtitle e29">Chief Architect</div>
               <div class="orgname e30">DeltaXML Ltd.</div>
            </div>
            <div class="email e31">nigel.whitaker@deltaxml.com</div>
         </div>
         <div class="legalnotice e32">
            <div class="para e33">Copyright © 2013 DeltaXML Ltd.</div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e34" xml:id="intro">
         <div class="title e35">Introduction</div>
         <div class="para e36">The ISO Standards Tags Set (ISOSTS) 
            <div class="citation e37" linkend="isosts">[isosts]</div> is a customization of NISO’s Journal Article Tag Suite (JATS) developed by Mulberry
            Technologies
            
            <div class="citation e38" linkend="mulberry">[mulberry]</div> for the International Standards Organization for authoring standards documents. Documents
            authored in this format can then be
            converted into multiple publishing formats such as Adobe InDesign, PDF, HTML or EPUB,
            using a solution from Typefi called Typefi Publish 
            <div class="citation e39" linkend="typefi-publish">[typefi-publish]</div>. As part of the authoring workflow used at ISO, there was a requirement to produce
            documents in these published formats that displayed changes between
            different versions of a standard using redlining. Redlining is a technique for marking
            changes in a document, typically using text styling to highlight deleted and/or added
            content.
            For example, all deleted text could be highlighted by colouring it red and striking
            through the text. Added content could be highlighted with an underline. It is also
            common practice
            to highlight only added content and mark the position of deleted content using a caret
            such as ‸ or ⁁.
         </div>
         <div class="para e40">Typefi approached us and asked us to be involved in producing a proof of concept,
            building on top of their existing solution for ISO. Our expertise in XML comparison
            and change
            representation matches perfectly with Typefi’s expertise in content layout and document
            publishing to provide a solution to this new requirement for ISO. Our contribution
            included
            producing a tailored comparison of ISOSTS documents, ignoring certain types of change
            that were not important to ISO. The result from this is fed into Typefi Publish which
            handles the
            DeltaXML change representation format, DeltaV2, to produce the redlined final output.
            As an alternative, we also provided modifications to ISO XSLT stylesheets that convert
            ISOSTS into
            XHTML directly. These modifications used CSS to provide the redline change highlighting.
         </div>
      </div><a name="DocumentComparisonOverviewANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e41" xml:id="comparison">
         <div class="title e42">Document Comparison Overview</div>
         <div class="para e43">Comparison is a key component of any system that is dealing with documents that change
            during their lifetime. Understanding the differences between different versions of
            a document
            is absolutely vital and, in some industries, can even be a legal requirement. It is
            therefore important to understand the implications for document comparison when those
            documents are
            stored in an XML format such as ISOSTS.
         </div>
         <div class="para e44">Because of the structure and syntax of XML, line based comparison tools can often
            produce incorrect comparison results. Line based tools are often unaware of XML syntax,
            and
            changes which can usually be ignored, such as indentation, namespace prefixes, and
            attribute ordering can lead to false notification of changes. Consider the following
            two XML
            documents and the line-based comparison provided by a UNIX diff.
         </div>
         <div class="figure e45" xml:id="docA">
            <div class="title e46">Document A</div>
            <div class="programlisting e47" xml:space="preserve">&lt;document xmlns="demo-namespace"&gt;
               &lt;title&gt;This is the document title&lt;/title&gt;
               &lt;p&gt;An example paragraph&lt;/p&gt;
               &lt;p&gt;Lack of namespace awareness makes line based diff ineffective&lt;/p&gt;
               &lt;/document&gt;
            </div>
         </div>
         <div class="figure e48" xml:id="docB">
            <div class="title e49">Document B</div>
            <div class="programlisting e50" xml:space="preserve">&lt;demo:document xmlns:demo="demo-namespace"&gt;
               &lt;demo:title&gt;This is the document title&lt;/demo:title&gt;
               &lt;demo:p&gt;An example paragraph&lt;/demo:p&gt;
               &lt;demo:p&gt;Lack of namespace awareness makes line-based diff ineffective&lt;/demo:p&gt;
               &lt;/demo:document&gt;
            </div>
         </div>
         <div class="figure e51">
            <div class="title e52">Result of comparing 
               <div class="xref e53" linkend="docA"></div> and 
               <div class="xref e54" linkend="docB"></div> with UNIX diff
            </div>
            <div class="programlisting e55" xml:space="preserve">1,5c1,5
               &lt; &lt;document xmlns="demo-namespace"&gt;
               &lt;   &lt;title&gt;This is the document title&lt;/title&gt;
               &lt;   &lt;p&gt;An example paragraph&lt;/p&gt;
               &lt;   &lt;p&gt;Lack of namespace awareness makes line based diff ineffective&lt;/p&gt;
               &lt; &lt;/document&gt;
               ---
               &gt; &lt;demo:document xmlns:demo="demo-namespace"&gt;
               &gt;   &lt;demo:title&gt;This is the document title&lt;/demo:title&gt;
               &gt;   &lt;demo:p&gt;An example paragraph&lt;/demo:p&gt;
               &gt;   &lt;demo:p&gt;Lack of namespace awareness makes line-based diff ineffective&lt;/demo:p&gt;
               &gt; &lt;/demo:document&gt;
            </div>
         </div>
         <div class="para e56">The result of this particular line based comparison gives no advantage over visually
            inspecting the two documents to detect the differences. The tool’s lack of understanding
            of XML
            syntax means that it detects far too much difference in the two documents. 
         </div>
         <div class="para e57">It is possible to improve the results of a line based comparison by canonicalizing
            the documents to be compared to ensure consistent use of namespace prefixes, defined
            attribute
            ordering, and consistent indentation. This will go some way to reducing the amount
            of false differences identified by line based tools but there are still limitations
            with what can be
            achieved. Change identification at the word level is potentially still problematic
            and if the documents reference a DTD for example, correct parsing of the documents
            is necessary for a
            comprehensive comparison since parsing may actually affect the content of the document
            itself (this is covered in more detail in 
            <div class="xref e58" linkend="infoset-aug"></div>).
         </div>
         <div class="para e59">An XML aware tool has the advantage of being able to parse the document, taking into
            account any references to external content (e.g. DTDs, XIncludes) where necessary.
            As well as
            parsing, it is then a simple task to add pre-processing of documents using various
            XSLT steps to perform tasks such as segmenting sentences into individual words. If
            we use an XML
            aware tool such as DeltaXML Core to compare the two documents, we get a result more
            like that shown in 
            <div class="xref e60" linkend="deltaxml-result"></div>. This is an HTML rendering of the underlying
            result format produced by DeltaXML Core.
         </div>
         <div class="figure e61" xml:id="deltaxml-result">
            <div class="title e62">Result of comparing 
               <div class="xref e63" linkend="docA"></div> and 
               <div class="xref e64" linkend="docB"></div> with DeltaXML Core
            </div>
            <div class="mediaobject e65">
               <div class="imageobject e66">
                  <div class="metaBox e67"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e118').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e118" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e67'
                           </span><span class="metaAttribute">fileref='../../../vol10/graphics/Mitchell01/Mitchell01-001.png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
         </div><a name="ChangerepresentationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e68" xml:id="change-representation">
            <div class="title e69">Change representation</div>
            <div class="para e70">Identifying change to XML documents is just the first part of a solution. Once these
               changes have been discovered, there needs to be a way of representing those changes.
               This
               does not necessarily need to be in a result document; in some use cases it may be
               appropriate to produce a report on the changes that have been made. However, in the
               context of
               producing redline documents, it will be necessary to represent the changes within
               the context of the documents themselves. In the case of ISOSTS, this marked document
               is an
               intermediate result file which can subsequently be rendered either as a redlined PDF,
               using Typefi Publish, or as a redlined XHTML document, using the XSLT stylesheet extension
               mentioned in 
               <div class="xref e71" linkend="html-output"></div>.
            </div>
            <div class="para e72">There are several options for representing change within the document context, each
               of which has its own benefits and drawbacks.
            </div><a name="TrackedChangesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e73" xml:id="track-changes">
               <div class="title e74">Tracked Changes</div>
               <div class="para e75">Although tracked change representations are usually intended to be generated during
                  live editing of a document, it is perfectly possible to generate the relevant syntax
                  from
                  changes identified during a comparison. The actual syntax varies depending on the
                  consuming application but many editors use processing instructions to mark changes.
               </div>
               <div class="para e76">The advantage of processing instructions as a representation is that they do not break
                  the validity of the content they are tracking and they do not require modification
                  to a
                  format to enable tracking of change. A major disadvantage is that there is no standard
                  syntax defined; each editor typically uses its own syntax to represent change. This
                  means
                  that, if visualisation of changes is required in multiple editors, changes identified
                  will need to be converted into multiple result formats. There is also the chance that
                  it is
                  not possible to represent specific types of change, e.g. attribute changes, using
                  the syntax provided by a specific editor.
               </div>
               <div class="para e77">This type of change representation was not appropriate in the ISO solution as the
                  final document needed to be a published document that was not viewed in an editing
                  application. In order for changes to be displayed in hard copies of a document, they
                  needed to be represented by styling of the text and, while it is technically possible
                  to
                  convert these processing instructions into styling as part of a publishing process,
                  other representations were deemed more suitable. 
               </div>
            </div><a name="FormatspecificsyntaxANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e78" xml:id="format-syntax">
               <div class="title e79">Format-specific syntax</div>
               <div class="para e80">Some document formats, e.g. DocBook, DITA, and OpenDocument, define elements and/or
                  attributes specifically for marking changes. DocBook, for example, includes a
                  
                  <div class="code e81">revisionflag</div> attribute on most elements that can take the values 
                  <div class="code e82">changed</div>, 
                  <div class="code e83">added</div>, 
                  <div class="code e84">deleted</div>, and 
                  <div class="code e85">off</div>. DITA includes
                  a CDATA 
                  <div class="code e86">rev</div> attribute and a 
                  <div class="code e87">status</div> attribute that can take the values 
                  <div class="code e88">changed</div>, 
                  <div class="code e89">new</div>, 
                  <div class="code e90">deleted</div>, and
                  
                  <div class="code e91">unchanged</div>. These attributes can be used to represent change, and the relevant tools for publishing
                  documents to formats such as HTML and PDF can use them to add
                  styling for change highlighting.
               </div>
               <div class="para e92">The advantage of using this type of syntax is that it is built directly into the language
                  specification. This means that there is often support for making use of such syntax
                  in
                  existing publishing tools. Again, one disadvantage is that the syntax may not be valid
                  on every element that has been changed. In DocBook and DITA, it is not possible to
                  mark
                  attribute changes using the aforementioned syntax. 
               </div>
               <div class="para e93">Of course, not all documentation formats include such syntax in their specification
                  and in this case, we must either amend the specification where possible, or use another
                  approach. This was the case for ISOSTS but as we were not able to edit the specification
                  we opted to use our own generic change representation.
               </div>
            </div><a name="GenericchangerepresentationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e94" xml:id="generic">
               <div class="title e95">Generic change representation</div>
               <div class="para e96">Both options listed above are specific to particular formats or editors and, while
                  they are useful ways of representing change, they do require the use of specific tools
                  or
                  languages. A generic way of representing change in XML is a more preferable solution
                  as it can be applied to any XML format, whether change marking is specified in the
                  language or
                  not and, with appropriate support, could be visualised in any editor.
               </div>
               <div class="para e97">A generic solution should be able to represent change to any part of an XML document
                  including addition/deletion/modification of attributes, and addition/deletion of elements
                  and text. Ideally, it should not cause the XML document to be invalid and it should
                  be simple to process the document to obtain the ‘latest’ version. To ensure consistency
                  across
                  different document formats and editors, such a solution lends itself well to becoming
                  a standard and the W3C has created a Change Tracking Markup Community Group 
                  <div class="citation e98" linkend="w3c-change">[w3c-change]</div> in order to discuss ideas that could potentially lead to a standard.
               </div>
               <div class="para e99">In the meantime, we continue to use our own generic markup format, DeltaV2 
                  <div class="citation e100" linkend="deltav2">[deltav2]</div>, to represent changes to XML documents. This markup
                  uses elements and attributes in a separate namespace to show the input documents in
                  which each element occurred. In the case where an element occurs in both documents,
                  attributes
                  are used to show whether there have been modifications. It is possible to represent
                  attribute changes by converting an element’s changed attributes into an XML subtree
                  containing
                  the relevant information. Text changes are also represented by wrapping different
                  versions of text strings inside elements. An example result representing the changes
                  between the
                  documents defined above (
                  <div class="xref e101" linkend="docA"></div> and 
                  <div class="xref e102" linkend="docB"></div>) is shown below.
               </div>
               <div class="figure e103">
                  <div class="title e104">DeltaV2 Result</div>
                  <div class="programlisting e105" xml:space="preserve">&lt;document xmlns:deltaxml="http://www.deltaxml.com/ns/well-formed-delta-v1"
                     
                     <div class="emphasis e106" role="bold">deltaxml:deltaV2="A!=B"</div> deltaxml:version="2.0" deltaxml:content-type="full-context"&gt;
                     &lt;title 
                     <div class="emphasis e107" role="bold">deltaxml:deltaV2="A=B"</div>&gt;This is the document title&lt;/title&gt;
                     &lt;p 
                     <div class="emphasis e108" role="bold">deltaxml:deltaV2="A=B"</div>&gt;An example paragraph&lt;/p&gt;
                     &lt;p 
                     <div class="emphasis e109" role="bold">deltaxml:deltaV2="A!=B"</div>&gt;Lack of namespace awareness makes line
                     
                     <div class="emphasis e110" role="bold">&lt;deltaxml:textGroup deltaxml:deltaV2="A!=B"&gt;
                        &lt;deltaxml:text deltaxml:deltaV2="A"&gt; &lt;/deltaxml:text&gt;
                        &lt;deltaxml:text deltaxml:deltaV2="B"&gt;-&lt;/deltaxml:text&gt;
                        &lt;/deltaxml:textGroup&gt;
                     </div>
                     based diff ineffective&lt;/p&gt;
                     &lt;/document&gt;
                  </div>
               </div>
            </div>
         </div>
      </div><a name="MakinguseofDTDsandschemaANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e111" xml:id="dtd-use">
         <div class="title e112">Making use of DTDs and schema</div>
         <div class="para e113">We encountered issues with some of the ISO documents we tested as the use of DOCTYPE
            instructions was not consistent. For a given pair of documents, for example, one included
            a
            DOCTYPE instruction but the other did not. This led to issues, particularly with infoset
            augmentation, described below. The ISOSTS standard does not explicitly state the intended
            use
            of the DTD and whether it should be included in instance files in a DOCTYPE instruction.
            This could lead to different behaviour for documents provided by different implementers.
            Many
            specifications, for example the XHTML specification 
            <div class="citation e114" linkend="xhtml-spec">[xhtml-spec]</div>, explicitly state that a conforming document MUST include a DOCTYPE
            instruction.
         </div>
         <div class="para e115">While many XML authors will understand that a DOCTYPE instruction has “something to
            do with validating” the XML they are writing, they will not always be clear about
            the full
            implications of this instruction. While it is true that a DTD provides validation
            of the document being authored, it also has implications on the meaning of whitespace
            in a document
            and on the appearance and/or value of certain attributes.
         </div><a name="WhitespaceANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e116" xml:id="whitespace">
            <div class="title e117">Whitespace</div>
            <div class="para e118">Prior to comparison, it is recommended practice to ‘normalize’ whitespace within the
               input documents. This is because differences in whitespace are not usually significant
               to
               authors and in fact cannot always be represented once a document has been rendered
               in a publishing format. Whitespace normalization, in its simplest sense, converts
               each whitespace
               sequence into a single space character. This means that all indentation and occurrences
               of multiple contiguous spaces are removed, being replaced by a single space. More
               typically
               though, normalization also involves the complete removal of 
               <div class="emphasis e119" role="ital">inter-element whitespace</div>. This is whitespace that is used purely for indentation and
               readability and has no textual meaning at all. A simplistic approach to normalizing
               this kind of whitespace is to remove all PCDATA nodes that contain only whitespace
               characters.
               This leads to problems in mixed content, as can be seen in the example below.
            </div>
            <div class="figure e120">
               <div class="programlisting e121" xml:space="preserve">&lt;document&gt;•
                  ••&lt;p&gt;This◦text◦contains◦&lt;b&gt;bold◦and&lt;/b&gt;*&lt;i&gt;italic&lt;/i&gt;◦text&lt;/p&gt;•
                  &lt;/document&gt;
               </div>
            </div>
            <div class="para e122">The example includes three types of whitespace nodes: inter-element whitespace within
               a PCDATA node that contains only whitespace (marked with a •) that can safely be removed
               entirely, whitespace within a PCDATA node that also contains non-whitespace characters
               (marked with a ◦) that can be normalized to a single space character but should not
               be removed,
               and whitespace within a PCDATA node that contains purely whitespace (marked with a
               *) that should NOT be removed. The difference between the whitespace marked * and
               that marked • is
               not obvious when subsequently processing the XML but the use of a DOCTYPE instruction
               will cause the different types of whitespace to be reported differently by an XML
               parser.
            </div>
            <div class="para e123">Consider a possible DTD for this document, shown below.</div>
            <div class="figure e124">
               <div class="programlisting e125" xml:space="preserve">&lt;!ELEMENT document  (p)* &gt;
                  &lt;!ELEMENT p         (#PCDATA | b | i)* &gt;
                  &lt;!ELEMENT b         (#PCDATA) &gt;
                  &lt;!ELEMENT i         (#PCDATA) &gt;
               </div>
            </div>
            <div class="para e126">With the inclusion of this DTD, the parser can now differentiate between the different
               types of whitespace. Whitespace marked in the previous example as • can now be reported
               as
               
               <div class="emphasis e127" role="ital">ignorable whitespace</div> as the DTD states that no PCDATA can be present as a child of the 
               <div class="code e128">document</div> element. All other whitespace is
               reported using the 
               <div class="emphasis e129" role="ital">characters</div> event and should be treated as ‘normal’ PCDATA. It could still be normalized to a
               single space character but should not
               be removed entirely.
            </div>
         </div><a name="InfosetAugmentationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e130" xml:id="infoset-aug">
            <div class="title e131">Infoset Augmentation</div>
            <div class="para e132">Another important implication of DTD or schema use is infoset augmentation. Infoset
               augmentation means adding data from the DTD or schema to the resulting parsed representation.
               It is often used to specify values of attributes, for example that a table by default
               will have a 1 pixel border.
            </div>
            <div class="para e133">If DOCTYPE instructions are not used consistently in documents to be compared, it
               is quite possible that one of the inputs will undergo infoset augmentation while the
               other one
               does not. This causes misleading comparison results to appear because attributes that
               were added during parsing in one document but not in the other appear as added or
               deleted in the
               result. Such problems can be avoided by consistent use of DOCTYPE instructions.
            </div>
         </div>
      </div><a name="TableComparisonANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e134" xml:id="tables">
         <div class="title e135">Table Comparison</div>
         <div class="para e136">The ISOSTS specification uses the XHTML table model to define how tables are declared.
            While not as complex as the CALS table model, there are still significant issues with
            this
            model if tables are compared as ‘plain’ XML, without knowledge of the table structure.
            One example of this is adding row spanning to a cell.
         </div>
         <div class="figure e137">
            <div class="title e138">Original Table</div>
            <div class="programlisting e139" xml:space="preserve">&lt;table&gt;
               &lt;tbody&gt;
               &lt;tr&gt;&lt;td&gt;Cell 1&lt;/td&gt;&lt;td&gt;Cell 2&lt;/td&gt;&lt;/tr&gt;
               &lt;tr&gt;&lt;td&gt;Cell 3&lt;/td&gt;&lt;td&gt;Cell 4&lt;/td&gt;&lt;/tr&gt;
               &lt;tr&gt;&lt;td&gt;Cell 5&lt;/td&gt;&lt;td&gt;Cell 6&lt;/td&gt;&lt;/tr&gt;
               &lt;/tbody&gt;
               &lt;/table&gt;
            </div>
            <div class="table e140" border="1">
               <div class="caption e141">
                  <div class="para e142">Original Table, rendered</div>
               </div>
               <div class="tbody e143">
                  <div class="tr e144">
                     <div class="td e145">Cell 1</div>
                     <div class="td e146">Cell 2</div>
                  </div>
                  <div class="tr e147">
                     <div class="td e148">Cell 3</div>
                     <div class="td e149">Cell 4</div>
                  </div>
                  <div class="tr e150">
                     <div class="td e151">Cell 5</div>
                     <div class="td e152">Cell 6</div>
                  </div>
               </div>
            </div>
         </div>
         <div class="figure e153">
            <div class="title e154">Modified Table</div>
            <div class="programlisting e155" xml:space="preserve">&lt;table&gt;
               &lt;tbody&gt;
               &lt;tr&gt;&lt;td rowspan="2"&gt;Cell 1&lt;/td&gt;&lt;td&gt;Cell 2&lt;/td&gt;&lt;/tr&gt;
               &lt;tr&gt;&lt;td&gt;Cell 4&lt;/td&gt;&lt;/tr&gt;
               &lt;tr&gt;&lt;td&gt;Cell 5&lt;/td&gt;&lt;td&gt;Cell 6&lt;/td&gt;&lt;/tr&gt;
               &lt;/tbody&gt;
               &lt;/table&gt;
            </div>
            <div class="table e156" border="1">
               <div class="caption e157">
                  <div class="para e158">Modified Table, rendered</div>
               </div>
               <div class="tbody e159">
                  <div class="tr e160">
                     <div class="td e161" rowspan="2">Cell 1</div>
                     <div class="td e162">Cell 2</div>
                  </div>
                  <div class="tr e163">
                     <div class="td e164">Cell 4</div>
                  </div>
                  <div class="tr e165">
                     <div class="td e166">Cell 5</div>
                     <div class="td e167">Cell 6</div>
                  </div>
               </div>
            </div>
         </div>
         <div class="figure e168">
            <div class="title e169">Table Comparison Result</div>
            <div class="programlisting e170" xml:space="preserve">&lt;table deltaxml:deltaV2="A!=B" ...&gt;
               &lt;tbody deltaxml:deltaV2="A!=B"&gt;
               &lt;tr deltaxml:deltaV2="A!=B"&gt;
               &lt;td deltaxml:deltaV2="A!=B"&gt;
               &lt;deltaxml:attributes deltaxml:deltaV2="B"&gt;
               &lt;dxa:rowspan deltaxml:deltaV2="B"&gt;
               &lt;deltaxml:attributeValue deltaxml:deltaV2="B"&gt;2&lt;/deltaxml:attributeValue&gt;
               &lt;/dxa:rowspan&gt;
               &lt;/deltaxml:attributes&gt;
               Cell 1
               &lt;/td&gt;
               &lt;td deltaxml:deltaV2="A=B"&gt;Cell 2&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr deltaxml:deltaV2="A!=B"&gt;
               &lt;td deltaxml:deltaV2="A"&gt;Cell 3&lt;/td&gt;
               &lt;td deltaxml:deltaV2="A=B"&gt;Cell 4&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr deltaxml:deltaV2="A=B"&gt;
               &lt;td&gt;Cell 5&lt;/td&gt;
               &lt;td&gt;Cell 6&lt;/td&gt;
               &lt;/tr&gt;
               &lt;/tbody&gt;
               &lt;/table&gt;
            </div>
            <div class="table e171" border="1">
               <div class="caption e172">
                  <div class="para e173">Rendered result table, using 
                     <div class="emphasis e174" role="bital">bold italics</div> to show deletion
                  </div>
               </div>
               <div class="tbody e175">
                  <div class="tr e176">
                     <div class="td e177" rowspan="2">Cell 1</div>
                     <div class="td e178">Cell 2</div>
                  </div>
                  <div class="tr e179">
                     <div class="td e180">
                        <div class="emphasis e181" role="bital">Cell 3</div>
                     </div>
                     <div class="td e182">Cell 4</div>
                  </div>
                  <div class="tr e183">
                     <div class="td e184">Cell 5</div>
                     <div class="td e185">Cell 6</div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e186">As can be seen, the resultant table does not render well as the second row now includes
            too many cells, thus pushing Cell 4 too far to the right. A better result would be
            to handle
            the change to row spanning by including the problematic rows from the original table,
            marked as deleted, followed by the matching rows from the modified table, marked as
            added. This
            can be seen in the example below.
         </div>
         <div class="figure e187">
            <div class="title e188">An improved table result</div>
            <div class="programlisting e189" xml:space="preserve">&lt;table deltaxml:deltaV2="A!=B" ...&gt;
               &lt;tbody deltaxml:deltaV2="A!=B"&gt;
               &lt;tr deltaxml:deltaV2="A"&gt;
               &lt;td&gt;Cell 1&lt;/td&gt;
               &lt;td&gt;Cell 2&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr deltaxml:deltaV2="A"&gt;
               &lt;td&gt;Cell 3&lt;/td&gt;
               &lt;td&gt;Cell 4&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr deltaxml:deltaV2="B"&gt;
               &lt;td rowspan="2"&gt;Cell 1&lt;/td&gt;
               &lt;td&gt;Cell 2&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr deltaxml:deltaV2="B"&gt;
               &lt;td&gt;Cell 4&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr deltaxml:deltaV2="A=B"&gt;
               &lt;td&gt;Cell 5&lt;/td&gt;
               &lt;td&gt;Cell 6&lt;/td&gt;
               &lt;/tr&gt;
               &lt;/tbody&gt;
               &lt;/table&gt;
            </div>
            <div class="table e190" border="1">
               <div class="caption e191">
                  <div class="para e192">Rendered result table, using 
                     <div class="emphasis e193" role="bital">bold italics</div> to show deletion and 
                     <div class="emphasis e194" role="under">underline</div> to show addition
                  </div>
               </div>
               <div class="tbody e195">
                  <div class="tr e196">
                     <div class="td e197">
                        <div class="emphasis e198" role="bital">Cell 1</div>
                     </div>
                     <div class="td e199">
                        <div class="emphasis e200" role="bital">Cell 2</div>
                     </div>
                  </div>
                  <div class="tr e201">
                     <div class="td e202">
                        <div class="emphasis e203" role="bital">Cell 3</div>
                     </div>
                     <div class="td e204">
                        <div class="emphasis e205" role="bital">Cell 4</div>
                     </div>
                  </div>
                  <div class="tr e206">
                     <div class="td e207" rowspan="2">
                        <div class="emphasis e208" role="under">Cell 1</div>
                     </div>
                     <div class="td e209">
                        <div class="emphasis e210" role="under">Cell 2</div>
                     </div>
                  </div>
                  <div class="tr e211">
                     <div class="td e212">
                        <div class="emphasis e213" role="under">Cell 4</div>
                     </div>
                  </div>
                  <div class="tr e214">
                     <div class="td e215">Cell 5</div>
                     <div class="td e216">Cell 6</div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e217">This is one example of the way that tables are handled intelligently during the comparison
            phase. As mentioned above, the XHTML table model is simpler than the CALS table model
            leading to fewer potential issues during comparison, but there were still a number
            of problems that needed to be solved.
         </div>
      </div><a name="TextformattingchangesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e218" xml:id="formatting">
         <div class="title e219">Text formatting changes</div>
         <div class="para e220">Changing the format of specific pieces of text, e.g. highlighting a word by making
            it bold or italic, is common during text editing but should this constitute a change
            in a redline
            document? The answer will depend on the context of the change, whether the subject
            domain places meaning on such formatting, and whether or not there is a requirement
            to see these kind
            of changes in the redline document. In the case that it should be highlighted, there
            may be different ways of doing so. The document reviewer may wish to see the text
            with its old
            formatting marked as deleted and the text with its new formatting marked as added
            so that a complete view of the change is present. In other situations, it may be sufficient
            to mark
            the text with some other kind of highlighting to show that there has been a formatting
            change but not include details of how the formatting has changed.
         </div>
         <div class="para e221">Many content authors may not even understand that there is an XML structure underlying
            their document and that a format change actually constitutes a structural change.
            Thus, when
            they make a word bold and the resultant comparison result shows the word deleted and
            then added again, they see this as a mistake.
         </div>
         <div class="figure e222">
            <div class="title e223">A result file showing a formatting change</div>
            <div class="programlisting e224" xml:space="preserve">&lt;p deltaxml:deltaV2="A!=B" ... &gt;The addition of
               &lt;deltaxml:textGroup deltaxml:deltaV2="A"&gt;
               &lt;deltaxml:text deltaxml:deltaV2="A"&gt;bold&lt;/deltaxml:text&gt;
               &lt;/deltaxml:textGroup&gt;
               &lt;b deltaxml:deltaV2="B"&gt;bold&lt;/b&gt;
               formatting.
               &lt;/p&gt;
            </div>
         </div>
         <div class="para e225">In order to have the ability of marking formatting changes in a different way, or
            in fact ignoring them completely, we need to have some way of detecting the structural
            change
            without having to mark the underlying text as changed as well. One technique we have
            utilised for this is to pre-process the documents to flatten the structure of formatting
            elements.
            The following example shows a document with a bold word that has had its formatting
            flattened.
         </div>
         <div class="figure e226">
            <div class="title e227">A pre-processed input with flattened formatting</div>
            <div class="programlisting e228" xml:space="preserve">&lt;p xmlns:deltaxml="..."&gt;
               The addition of 
               &lt;deltaxml:format-start&gt;
               &lt;deltaxml:element&gt;&lt;b/&gt;&lt;/deltaxml:element&gt;
               &lt;/deltaxml:format-start&gt;
               bold
               &lt;deltaxml:format-end/&gt;
               formatting.
               &lt;/p&gt;
            </div>
         </div>
         <div class="para e229">This flattened structure can handle formatting elements that are a simple tag, e.g.
            
            <div class="code e230">&lt;b/&gt;</div> or 
            <div class="code e231">&lt;i/&gt;</div> and also more complex formatting such as
            
            <div class="code e232">&lt;span style="font-size:14; font-weight:bold;"/&gt;</div>. Processing the input documents in this way then allows the text to be compared more
            intuitively, as it is all at the
            same level in the XML structure. Format changes are detected as changes to the 
            <div class="code e233">&lt;deltaxml:format-start/&gt;</div> and 
            <div class="code e234">&lt;deltaxml:format-end/&gt;</div> elements and the
            structured formatting can be reconstructed after comparison. There is the potential
            for overlapping structures in the result when formatting is flattened; to solve this
            problem, the
            formatting from one of the input documents, typically the latest or ‘B’ document,
            is given priority when reconstructing.
         </div>
         <div class="para e235">ISO’s requirement was to ignore formatting changes completely and, for content that
            was in both input documents, to include the formatting from the latest or ‘B’ document.
            This
            makes reconstructing the formatting elements a lot simpler because in the case where
            formatting has changed it is possible to ignore all of the elements marked as being
            only in
            document ‘A’.
         </div>
      </div><a name="IDandIDREFattributesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e236" xml:id="ids">
         <div class="title e237">ID and IDREF attributes</div>
         <div class="para e238">ID attributes and their associated IDREFs are typically used for internal cross-referencing
            in documents. It is important that the target of a cross-reference is declared as
            an
            attribute having type ID in order to ensure uniqueness within the document. Unfortunately,
            this uniqueness constraint can cause problems in the result file, which must be overcome.
            Imagine the situation where an image, e.g. an 
            <div class="code e239">&lt;img/&gt;</div> element, is used to display a diagram and defines an ID, e.g. 
            <div class="code e240">&lt;img xml:id="widget"/&gt;</div>. An editor of
            the document decides that this should have been defined using a figure element but,
            to avoid having to update references to the diagram, uses the same id: 
            <div class="code e241">&lt;fig
               xml:id="widget"/&gt;
            </div>. This is all perfectly valid because each document maintains uniqueness of its IDs.
            However, the comparison result file will contain the following content
            because of the requirement to view both added and deleted content in the same document.
         </div>
         <div class="figure e242">
            <div class="programlisting e243" xml:space="preserve">...
               &lt;img deltaxml:deltaV2="A" xml:id="widget" /&gt;
               &lt;fig deltaxml:deltaV2="B" xml:id="widget" /&gt;
               ...
            </div>
         </div>
         <div class="para e244">The document now contains two elements with the same ID value, which makes it invalid.
            This situation can be resolved by renaming the IDs on any deleted, or ‘A’ document
            elements
            and also updating any references to that element (these will be elements in the ‘A’
            document only, that contain an IDREF whose value is the ID in question). The following
            figure shows
            an example of a fixed result file.
         </div>
         <div class="figure e245">
            <div class="title e246">An example fixed result file</div>
            <div class="programlisting e247" xml:space="preserve">&lt;document deltaxml:deltaV2="A!=B" ... &gt;
               &lt;img deltaxml:deltaV2="A" xml:id="widget_deleted_1" /&gt;
               &lt;fig deltaxml:deltaV2="B" xml:id="widget" /&gt;
               &lt;p deltaxml:deltaV2="A"&gt;This reference to the img will be deleted &lt;xref linkend="widget_deleted_1"
               /&gt;&lt;/p&gt;
               &lt;p deltaxml:deltaV2="A=B"&gt;This reference will be kept in the new document &lt;xref linkend="widget"
               /&gt;&lt;/p&gt;
               &lt;/document&gt;
            </div>
         </div>
         <div class="para e248">This document is now valid in respect of its ID uniqueness. The deleted first paragraph
            contains a reference to the old diagram as that is what it was referencing. The remaining
            second paragraph now points to the new version of the diagram. The naming scheme for
            updating deleted ID attributes can ensure uniqueness by using a number suffix that
            does not exist
            in the document. This can be checked against all existing IDs in the document.
         </div>
         <div class="para e249">Another potential use of ID values is to use them during comparison to align elements
            of the same type with matching IDs. This can improve comparison results, particularly
            for
            documents that include repeated sentences and phrases as can be typical in legal documents
            for example. For this technique to work, an element must maintain its ID value across
            different versions of the document so that its identity is consistent. Many XML documents
            are auto-generated from some other format and part of this process will involve the
            generation
            of ID values. If these are randomly generated, they will not be suitable for this
            use as equivalent elements in different versions of a document will not have the same
            ID. Even if they
            are not random and use a naming scheme, e.g. fig1, fig2, fig3 etc., removal of an
            element in this sequence could have a ripple effect on the ID values for all subsequent
            elements,
            again making them unsuitable for use during comparison. This was the case for the
            ISO documents and the ripple effect of ID values changing caused a large amount of
            change to ID
            attributes that had to be handled using the technique above.
         </div>
      </div><a name="ProcessingInstructionsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e250" xml:id="pis">
         <div class="title e251">Processing Instructions</div>
         <div class="para e252">Processing instructions are used to supply a consuming application with information.
            One thing they are increasingly used for is to insert data and/or content into a document
            format that does not allow for that content in its model. This is a way of providing
            a customized extension to a document format but is often used as a quick fix when
            a more
            appropriate solution would be to add the required functionality to the language specification.
            An example of this is the use of a processing instruction to specify the size at which
            a
            table should be rendered on a page. In the ISOSTS documents we tested, we saw the
            use of processing instructions to specify an external image location that 
            <div class="emphasis e253" role="ital">could</div> have been included as an attribute, e.g. 
            <div class="code e254">&lt;img&gt;&lt;?img-id D09291AZ.PNG?&gt;&lt;/img&gt;</div> instead of 
            <div class="code e255">&lt;img href="D09291Az.PNG"/&gt;</div>.
         </div>
         <div class="para e256">One of the problems this causes is that if you compare documents containing such processing
            instructions and you want the result file to include the processing instructions,
            there
            is no sensible way of representing change to them as they are not XML elements. It
            is possible to preserve processing instructions, and even detect change in them by
            first converting
            them into an XML structure, comparing documents, and then converting the XML structure
            back into processing instructions. A potential solution to representing change is
            to duplicate
            the containing element whenever a change is detected in a processing instruction.
            For example, and 
            <div class="code e257">&lt;img/&gt;</div> containing a processing instruction as above with a change to
            the external location of that image could be represented as an image deletion and
            addition e.g. 
            <div class="figure e258">
               <div class="programlisting e259" xml:space="preserve">...
                  &lt;img deltaxml:deltaV2="A"&gt;&lt;?img-id old-image.png?&gt;&lt;/img&gt;
                  &lt;img deltaxml:deltaV2="B"&gt;&lt;?img-id new-image.png?&gt;&lt;/img&gt;
                  ...
               </div>
            </div>
         </div>
         <div class="para e260">This solution is not as good as being able to represent change to an 
            <div class="code e261">href</div> attribute as it is not as easily processed but it provides a reasonable result. This
            can,
            however, be problematic if the element containing the processing instruction is very
            large, e.g. a table containing a processing instruction that gives information on
            how it should be
            rendered. Including two versions of the whole table in order to represent the processing
            instruction change does not give a sensible result.
         </div>
      </div><a name="WordCapitalizationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e262" xml:id="word-case">
         <div class="title e263">Word Capitalization</div>
         <div class="para e264">Word capitalization, like formatting change, is often viewed as an insignificant change
            that should not be highlighted in a redline document. This was indeed the case with
            ISO’s
            requirements. Like formatting, the result document needed to include the version of
            the text that was in the latest, or ‘B’ document.
         </div>
         <div class="para e265">A potential solution to this problem is to pre-process the input documents to ensure
            that all text uses only lower case. For documents whose text is mainly prose, this
            is not
            appropriate as upper case letters are an important feature of the text and should
            be preserved during comparison. Because pre-processing the inputs in this way does
            not make sense for
            the ISOSTS documents, the solution was to post-process the result file to detect those
            text changes where the only difference between the two versions was letter case. The
            following
            figure gives an example of the kind of change that can be detected.
         </div>
         <div class="figure e266">
            <div class="title e267">An example of a text change involving capitalization</div>
            <div class="programlisting e268" xml:space="preserve">&lt;p deltaxml:deltaV2="A!=B" ... &gt;
               Word capitalization is often seen as an
               &lt;deltaxml:textGroup deltaxml:deltaV2="A!=B"&gt;
               &lt;deltaxml:text deltaxml:deltaV2="A"&gt;insignificant&lt;/deltaxml:text&gt;
               &lt;deltaxml:text deltaxml:deltaV2="B"&gt;Insignificant&lt;/deltaxml:text&gt;
               &lt;/deltaxml:textGroup&gt;
               change.
               &lt;/p&gt;
            </div>
         </div>
         <div class="para e269">A text-based comparison of the ‘A’ and ‘B’ branches of the 
            <div class="code e270">&lt;deltaxml:textGroup/&gt;</div> element after converting both strings to all lower-case, shows that there is no
            change. In this situation, we can remove the marked changes and include only the text
            from the ‘B’ document.
         </div>
         <div class="para e271">This technique works well for the cases where a text change is purely a capitalization
            change. More complex changes that involve capitalization in conjunction with addition
            and/or
            deletion of surrounding words will still include the capitalization change in the
            final output. As the capitalization is part of a larger change which will need to
            be reviewed anyway,
            this is not likely to be a significant inconvenience.
         </div>
      </div><a name="HTMLchangevisualizationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e272" xml:id="html-output">
         <div class="title e273">HTML change visualization</div>
         <div class="para e274">As well as the ISOSTS specification, ISO provide XSLT stylesheets that convert an
            ISOSTS document into standalone XHTML.  These stylesheets provide a useful and simple
            way of
            producing a published version of standards documents for previewing during authoring.
            They can also be used to publish an online version of a standard.
         </div>
         <div class="para e275">As well as providing the intermediate change representation for input into Typefi
            Publish, we were able to extend the XSLT stylesheets to provide some redline functionality
            in the
            XHTML output.  In the simplest cases, this involved first categorizing the elements
            in ISOSTS as either block-level or inline elements and then extending the output templates
            to wrap
            block-level elements in a 
            <div class="code e276">&lt;div/&gt;</div> and inline elements in a 
            <div class="code e277">&lt;span/&gt;</div> with these wrappers defining a 
            <div class="code e278">class</div> attribute containing the value of
            the intermediate result’s 
            <div class="code e279">deltaV2</div> attribute where it was ‘A’ or ‘B’. These classes were then styled using CSS to highlight
            deletions with a red background and additions
            with a green background.
         </div>
         <div class="para e280">Other cases were more complicated and involved the overriding of whole processing
            templates in the original XSLT but the final result was a useful rendering of redlining
            in
            XHTML.
         </div>
      </div><a name="ResultsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e281" xml:id="results">
         <div class="title e282">Results</div>
         <div class="para e283">The following figures show an excerpt from each of the different types of redline
            result that were produced. The PDF result was produced using the intermediate result
            delta,
            published through Typefi Publish and the HTML result was produced by transforming
            the intermediate delta file using our XSLT extension to the ISO stylesheets. Unfortunately,
            images
            were not available for the HTML output at the time of writing.
         </div>
         <div class="figure e284">
            <div class="title e285">A PDF rendering of the redline result</div>
            <div class="mediaobject e286">
               <div class="imageobject e287">
                  <div class="metaBox e288"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e541').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e541" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e288'
                           </span><span class="metaAttribute">fileref='../../../vol10/graphics/Mitchell01/Mitchell01-002.png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="figure e289">
            <div class="title e290">An HTML rendering of the redline result</div>
            <div class="mediaobject e291">
               <div class="imageobject e292">
                  <div class="metaBox e293"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e547').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e547" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e293'
                           </span><span class="metaAttribute">fileref='../../../vol10/graphics/Mitchell01/Mitchell01-003.png'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
         </div>
      </div><a name="SummaryANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e294" xml:id="summary">
         <div class="title e295">Summary</div>
         <div class="para e296">Document comparison is a key part of any workflow involving changing documents and,
            with more and more documents being stored as XML, it is important to provide tools
            that
            understand the XML structure and the implications that it has on comparison results.
            As we have demonstrated, there are many subtle areas to consider when looking at XML
            comparison and
            change representation and many of the problems we have encountered could have been
            made simpler by designing the document formats with comparison and change representation
            in mind.
            This case study shows that the problems arising during comparison of structured content
            are not insurmountable and those considering moving to an XML representation for their
            document
            storage should not be reluctant to do so based on any of issues seen here.
         </div>
         <div class="para e297">Structured content offers huge benefits, not least of which is the processability
            of content to multiple published formats. This case study has shown that the production
            of an
            intermediate document containing change representation can be used to produce redline
            documents in both PDF and XHTML. This intermediate file can quite easily be further
            processed to
            select the types of change which should be highlighted and those which should be ignored.
            
         </div>
         <div class="para e298">Coupling this technology with Typefi Publish, which provides the flexibility of multiple
            output formats and professional layout and design capabilities provided ISO with a
            comprehensive solution to their requirements for published redline documents.
         </div>
      </div><a name="BibliographyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e299">
         <div class="title e300">Bibliography</div>
         <div class="bibliomixed e301" xml:id="deltav2">DeltaXML, “DeltaV2 Format”, 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e302" xlink:actuate="onRequest" xlink:href="http://www.deltaxml.com/support/documents/deltav2" xlink:show="new" xlink:type="simple">http://www.deltaxml.com/support/documents/deltav2</div> (accessed July 15 2013) 
         </div>
         <div class="bibliomixed e303" xml:id="isosts">ISO, "ISO Standards Tag Set", 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e304" xlink:actuate="onRequest" xlink:href="http://www.iso.org/schema/isosts/" xlink:show="new" xlink:type="simple">http://www.iso.org/schema/isosts/</div> (accessed July 15 2013)
         </div>
         <div class="bibliomixed e305" xml:id="mulberry">Mulberry Technologies, "Mulberry Technologies Inc", 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e306" xlink:actuate="onRequest" xlink:href="http://www.mulberrytech.com" xlink:show="new" xlink:type="simple">http://www.mulberrytech.com</div> (accessed July 15 2013)
         </div>
         <div class="bibliomixed e307" xml:id="typefi-publish">Typefi, "Typefi Publish", 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e308" xlink:actuate="onRequest" xlink:href="http://www.typefi.com/typefi-publish" xlink:show="new" xlink:type="simple">http://www.typefi.com/typefi-publish</div> (accessed July 15 2013)
         </div>
         <div class="bibliomixed e309" xml:id="w3c-change">W3C, “Change Tracking Markup Community Group”, 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e310" xlink:actuate="onRequest" xlink:href="http://www.w3.org/community/change/" xlink:show="new" xlink:type="simple">http://www.w3.org/community/change/&gt;</div> (accessed July 15 2013)
         </div>
         <div class="bibliomixed e311" xml:id="xhtml-spec">W3C, “XHTML 1.1 - Conformance Definition”, 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e312" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xhtml11/conformance.html#s_conform" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xhtml11/conformance.html#s_conform</div> (accessed July 15 2013)
         </div>
      </div>
   </div>
</div>