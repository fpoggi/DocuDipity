<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#CustomizingageneralpurposeXMLeditor:oXygen'sauthoringenvironmentANCHOR" name="CustomizingageneralpurposeXMLeditor:oXygen'sauthoringenvironmentTOC">Customizing a general purpose XML editor: oXygen's authoring environment</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#XMLandCSSANCHOR" name="XMLandCSSTOC">XML and CSS</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#SimpleeditingconceptsANCHOR" name="SimpleeditingconceptsTOC">Simple editing concepts</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AlternateCSSstylesheetsANCHOR" name="AlternateCSSstylesheetsTOC">Alternate CSS stylesheets</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#CSSsupportANCHOR" name="CSSsupportTOC">CSS support </a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#Show/hideXMLtaginformationANCHOR" name="Show/hideXMLtaginformationTOC">Show/hide XML tag information</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#CustomactionsANCHOR" name="CustomactionsTOC">Custom actions</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#FormcontrolsandinlineactionsANCHOR" name="FormcontrolsandinlineactionsTOC">Form controls and inline actions</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#SampleuserinterfacesANCHOR" name="SampleuserinterfacesTOC">Sample user interfaces</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#ADocBookdocumentANCHOR" name="ADocBookdocumentTOC">A DocBook document</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AI90formfragmentANCHOR" name="AI90formfragmentTOC">A I-90 form fragment</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#AtravelguideANCHOR" name="AtravelguideTOC">A travel guide</a></div>
            </div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">attr</div>
         <div class="singletermTERMS">advantage</div>
         <div class="singletermTERMS">August 5, 2013</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">Bina</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">content</div>
         <div class="singletermTERMS">condition1</div>
         <div class="singletermTERMS">condition2</div>
         <div class="singletermTERMS">ChangeAttributeOperation</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">display : none;</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
         <div class="singletermTERMS">George</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
         <div class="singletermTERMS">InsertFragmentOperation</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
         <div class="singletermTERMS">namespaces</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
         <div class="singletermTERMS">operation1</div>
         <div class="singletermTERMS">operation2</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">XSLTOperation</div>
         <div class="singletermTERMS">XQueryOperation</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="CustomizingageneralpurposeXMLeditor:oXygen'sauthoringenvironmentANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3">
      <div class="title e1">Customizing a general purpose XML editor: oXygen's authoring environment</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">International Symposium on Native XML User Interfaces</div>
            <div class="confdates e5">August 5, 2013</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">oXygen started in 2001 as an IDE for XML and XML related technologies but after some
               years our users wanted to be able to edit XML documents not only as text, in the source
               mode, but also in a way that will be non-intimidating for non-technical people. As
               a result
               of that, we introduced in 2007 support for visually editing XML documents. The rendering
               is
               based on CSS and we allow also custom actions to be defined through configuration
               or through
               Java coding, XSLT or XQuery scripts, etc. With CSS extensions we introduced also form
               based
               controls and actions directly in the user interface, thus making possible to quickly
               create
               interfaces for editing XML documents that completely hide the underlying XML structure
               and
               allow people to edit XML without seeing any of the XML markup.
            </div>
         </div>
         <div class="author e8">
            <div class="personname e9">
               <div class="firstname e10">George</div>
               <div class="surname e11">Bina</div>
            </div>
            <div class="personblurb e12">
               <div class="para e13">George Bina is one of the founders of Syncro Soft, the company that develops oXygen
                  XML Editor. He worked with XML since 1998, initially using XML for different projects
                  and,
                  starting with 2001, on the development of oXygen XML Editor, a tool for XML authoring
                  and
                  development. George is actively involved in the XML related projects contributing
                  to XML
                  related open source projects: Jing (the validation engine for Relax NG, NVDL)
               </div>
            </div>
            <div class="affiliation e14">
               <div class="orgname e15">Syncro Soft</div>
            </div>
         </div>
         <div class="legalnotice e16">
            <div class="para e17">Copyright Â©  2013 Syncro Soft SRL</div>
         </div>
      </div><a name="XMLandCSSANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e18">
         <div class="title e19">XML and CSS</div>
         <div class="para e20">CSS is a W3C standard that can be used to provide styling information to a document.
            While
            CSS is used mainly with HTML there is no such restriction to the standard itself and
            it can be
            used also with any XML document. 
         </div>
         <div class="para e21">The 
            <div class="emphasis e22">advantage</div> of using CSS for XML editing was the fact that we were
            able to use the XML tree itself as the model and just compute the styles for rendering
            each
            node, there is no transformation and mapping between an output format and the XML
            tree. This
            allows to provide feedback to the user on the editing context at the caret position
            in the
            document and to combine that with the schema information to compute the DTD/schema
            valid
            markup that can be inserted at that location in the document.
         </div><a name="SimpleeditingconceptsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e23">
            <div class="title e24">Simple editing concepts</div>
            <div class="para e25">As the position in the visual editing environment matches the position in the XML
               tree
               it is possible to have only 2 simple concepts that an author needs to learn in order
               to edit
               any XML document. The user needs to go to the position where he want to change the
               document
               and then:
               <div class="itemizedlist e26">
                  <div class="listitem e27">
                     <div class="para e28">type to change the content</div>
                  </div>
                  <div class="listitem e29">
                     <div class="para e30">press "Enter" to enter markup</div>
                  </div>
               </div>With these simple concepts an author can change any XML document.
            </div>
            <div class="para e31">To help locate the current position in the document when the XML tags are not displayed
               oXygen provides a number of helpers
               <div class="itemizedlist e32">
                  <div class="listitem e33">
                     <div class="para e34">location tooltip</div>
                  </div>
                  <div class="listitem e35">
                     <div class="para e36">breadcrumb</div>
                  </div>
                  <div class="listitem e37">
                     <div class="para e38">synchronized views: Outline, Model, Attributes, etc.</div>
                  </div>
                  <div class="listitem e39">
                     <div class="para e40">highlight the elements at caret position</div>
                  </div>
                  <div class="listitem e41">
                     <div class="para e42">element range marker</div>
                  </div>
               </div>All these help the user understand what is the current location in the
               document and then the user can perform content and markup changes at that position.
            </div>
         </div><a name="AlternateCSSstylesheetsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e43">
            <div class="title e44">Alternate CSS stylesheets</div>
            <div class="para e45">The specification for associating a CSS with an XML document allows to specify multiple
               CSS stylesheets as alternate stylesheets - thus it is possible to switch between different
               renderings of the XML documents and create specific CSS stylesheets focused on different
               tasks that need to be performed on the XML document.
            </div>
            <div class="para e46">Elements can be also completely removed from the visual interface using a 
               <div class="code e47">display
                  : none;
               </div> property on that element - thus an alternate stylesheet can provide also a
               reduced view on the document. 
            </div>
            <div class="para e48">As en example we provide for DocBook 3 CSS stylesheets
               <div class="itemizedlist e49">
                  <div class="listitem e50">
                     <div class="para e51">the default stylesheet</div>
                  </div>
                  <div class="listitem e52">
                     <div class="para e53">a stylesheet that hides column specifications for tables</div>
                  </div>
                  <div class="listitem e54">
                     <div class="para e55">a stylesheet that highlights the content marked with DocBook specific revision
                        markup
                     </div>
                  </div>
               </div>
            </div>
         </div><a name="CSSsupportANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e56">
            <div class="title e57">CSS support </div>
            <div class="para e58">The CSS support covers CSS version 1, 2 and 3. </div>
            <div class="para e59">From CSS 3 we absolutely needed support for 
               <div class="emphasis e60">namespaces</div> and the
               
               <div class="code e61">attr</div> function to provide access to attribute values and thus be able to
               provide links or to present attribute information in the visual editor. We support
               also the
               additional attribute type parameter for the 
               <div class="code e62">attr</div> function that makes this
               function usable to provide dynamic values for CSS properties, values taken from the
               XML
               document itself.
            </div>
            <div class="note e63">
               <div class="para e64">The 
                  <div class="code e65">attr</div> function gives the attribute information as read only in the
                  
                  <div class="code e66">content</div> property - to be able to edit that we needed to add an
                  extension.
               </div>
            </div>
            <div class="para e67">Other CSS 3 functionality supported covers transparent colors and support for custom
               fonts using the 
               <div class="code e68">@font-face</div> at-rule.
            </div>
         </div>
      </div><a name="Show/hideXMLtaginformationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e69">
         <div class="title e70">Show/hide XML tag information</div>
         <div class="para e71">By default the XML tags are not visible but sometimes it is useful to have them visible
            in
            the visual editing interface. oXygen provides 6 different levels of showing markup
            information
            in the visual editing interface, from no tags at all to full tags with attributes:
            <div class="itemizedlist e72">
               <div class="listitem e73">
                  <div class="para e74">no tags - no tags are visible</div>
               </div>
               <div class="listitem e75">
                  <div class="para e76">partial tags - inline elements are presented with small tag markers that just signal
                     the presence of a tag
                  </div>
               </div>
               <div class="listitem e77">
                  <div class="para e78">inline tags - the tags are visible for inline elements</div>
               </div>
               <div class="listitem e79">
                  <div class="para e80">block tags - the tags are visible for block elements</div>
               </div>
               <div class="listitem e81">
                  <div class="para e82">full tags - the tags are visible for all elements</div>
               </div>
               <div class="listitem e83">
                  <div class="para e84">full tags with attributes - both tags and attributes are visible for all
                     elements
                  </div>
               </div>
            </div>
         </div>
      </div><a name="CustomactionsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e85">
         <div class="title e86">Custom actions</div>
         <div class="para e87">Custom actions are part of the editing experience as they provide easy access to inserting
            comment fragments in XML documents. People are used with using similar actions in
            word
            processing applications and they expect similar support from XML authoring tools.
            
         </div>
         <div class="para e88">In oXygen we developed an architecture that allows defining custom actions mainly
            through
            configuration. We offer a library of common operations that should cover most of the
            processing needs, but user defined operations can also be added. Then, in order to
            define a
            custom action one can specify it like 
         </div>
         <div class="programlisting e89" xml:space="preserve">     if (condition1) then operation1 
            else if (condition2) then operation2 
            else if (condition3) then operation3
            ... 
         </div>
         <div class="para e90">Where 
            <div class="code e91">condition1</div>, 
            <div class="code e92">condition2</div>, etc. are XPath expressions
            evaluated in the current editing context and 
            <div class="code e93">operation1</div>, 
            <div class="code e94">operation2</div>,
            etc. are custom operations configured by setting values to their parameters.
         </div>
         <div class="para e95">Example of common operations are 
            <div class="code e96">InsertFragmentOperation</div>,
            
            <div class="code e97">ChangeAttributeOperation</div>, "UnwrapTagsOperation" etc. and even
            
            <div class="code e98">XSLTOperation</div> and 
            <div class="code e99">XQueryOperation</div> - these last two allowing to use
            XSLT or XQuery scripts to define the logic of the action.
         </div>
      </div><a name="FormcontrolsandinlineactionsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e100">
         <div class="title e101">Form controls and inline actions</div>
         <div class="para e102">This makes possible to create a unified editing area where the user has access to
            all XML
            content, markup and attributes as well as to document specific actions added in the
            context
            they should be used from - no need for additional side views or toolbars.
         </div>
         <div class="para e103">The CSS styles allow the XML document to be nicely rendered and the users can easily
            change the content and the structure. The attribute information however it is not
            accessible
            in a similar way - it can go only into read-only labels and in order to change attributes
            the
            user needs to access them though a side panel or invoking the in-place attribute editor.
            
         </div>
         <div class="para e104">Similarly, the custom actions are generally available on the toolbar, together with
            all
            the other actions, or added to a menu or to a contextual menu. 
         </div>
         <div class="para e105">In order to improve the editing of attribute values and to allow easier access to
            custom
            actions we added a few extension functions that can be used to bind an attribute value
            to a
            form control or to bind a button to a custom action and then put these directly in
            the
            authoring interface. These allow creating simple user interfaces that combine the
            visual CSS
            based authoring useful for mixed content editing with the simplicity of form controls
            and
            custom actions put directly in the authoring view. 
         </div>
      </div><a name="SampleuserinterfacesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e106">
         <div class="title e107">Sample user interfaces</div>
         <div class="para e108">Here you can see a few sample user interfaces.</div><a name="ADocBookdocumentANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e109">
            <div class="title e110">A DocBook document</div>
            <div class="para e111">All the specific support for an XML vocabulary is just a configuration and a set of
               resources that are packaged together is a document type or framework. oXygen provides
               such
               frameworks for many popular XML vocabularies and DocBook is one of them. You can see
               in the
               following figure the rendering of a fragment of a DocBook article.
            </div>
            <div class="figure e112">
               <div class="title e113">The visual rendering of a DocBook document</div>
               <div class="mediaobject e114">
                  <div class="imageobject e115">
                     <div class="metaBox e116"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e209').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e209" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e116'
                              </span><span class="metaAttribute">fileref='../../../vol11/graphics/Bina01/Bina01-001.png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </div><a name="AI90formfragmentANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e117">
            <div class="title e118">A I-90 form fragment</div>
            <div class="para e119">Here it is a standard I-90 form fragment, implemented in XML.</div>
            <div class="figure e120">
               <div class="title e121">The XML that represents the form data</div>
               <div class="mediaobject e122">
                  <div class="imageobject e123">
                     <div class="metaBox e124"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e220').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e220" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e124'
                              </span><span class="metaAttribute">fileref='../../../vol11/graphics/Bina01/Bina01-002.png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="figure e125">
               <div class="title e126">The rendered form</div>
               <div class="mediaobject e127">
                  <div class="imageobject e128">
                     <div class="metaBox e129"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e226').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e226" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e129'
                              </span><span class="metaAttribute">fileref='../../../vol11/graphics/Bina01/Bina01-003.png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </div><a name="AtravelguideANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e130">
            <div class="title e131">A travel guide</div>
            <div class="para e132">These user interfaces, if carefully designed, allow non technical users to encode
               information in XML without actually knowing anything about the underlying XML format
               - they
               surely need to know the subject domain of the information they encode.
            </div>
            <div class="figure e133">
               <div class="title e134">The XML source for a point of interest in a travel guide</div>
               <div class="mediaobject e135">
                  <div class="imageobject e136">
                     <div class="metaBox e137"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e237').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e237" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e137'
                              </span><span class="metaAttribute">fileref='../../../vol11/graphics/Bina01/Bina01-004.png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="figure e138">
               <div class="title e139">The visual rendering of the point of interest from the travel guide</div>
               <div class="mediaobject e140">
                  <div class="imageobject e141">
                     <div class="metaBox e142"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e243').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e243" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e142'
                              </span><span class="metaAttribute">fileref='../../../vol11/graphics/Bina01/Bina01-005.png'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </div>
      </div>
   </div>
</div>