<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#Propertiesofschemamashups:dynamicitysemanticmixinshyperschemasANCHOR" name="Propertiesofschemamashups:dynamicitysemanticmixinshyperschemasTOC">Properties of schema mashups: dynamicity, semantic, mixins, hyperschemas</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#FoundationsofthesystemANCHOR" name="FoundationsofthesystemTOC">Foundations of the system</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#DynamicityorbuildingactivecontentmodelsANCHOR" name="DynamicityorbuildingactivecontentmodelsTOC">Dynamicity, or building active content models</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#SemanticorenhancingthemeaningofdatatypesANCHOR" name="SemanticorenhancingthemeaningofdatatypesTOC">Semantic, or enhancing the meaning of data types</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#MixinsorcollectingschemaflavorsANCHOR" name="MixinsorcollectingschemaflavorsTOC">Mixins, or collecting schema flavors</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#HyperschemasorvalidatinghighlevelXMLcomponentsANCHOR" name="HyperschemasorvalidatinghighlevelXMLcomponentsTOC">Hyperschemas, or validating high-level XML components</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ConclusionandperspectivesANCHOR" name="ConclusionandperspectivesTOC">Conclusion and perspectives</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BibliographyANCHOR" name="BibliographyTOC">Bibliography</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">active sheets</div>
         <div class="singletermTERMS">active tags</div>
         <div class="singletermTERMS">active sheet</div>
         <div class="singletermTERMS">Active sheets</div>
         <div class="singletermTERMS">Active Catalog</div>
         <div class="singletermTERMS">Active Tags technologies</div>
         <div class="singletermTERMS">Active Tags: Mastering XML with XML</div>
         <div class="singletermTERMS">August 12 - 15, 2008</div>
         <div class="singletermTERMS">Active Tags</div>
         <div class="singletermTERMS">Active Schema Language</div>
         <div class="singletermTERMS">Active Catalog</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">Balisage: The Markup Conference 2008</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
         <div class="singletermTERMS">DTD</div>
         <div class="singletermTERMS">data types</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
         <div class="singletermTERMS">https://msv.dev.java.net/</div>
         <div class="singletermTERMS">Hyperschema</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
         <div class="singletermTERMS">Jelly: Executable XML</div>
         <div class="singletermTERMS">JSP: JavaServer Pages Technology</div>
         <div class="singletermTERMS">JSTL: JavaServer Pages Standard Tag Library</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">Principles of Schema Languages</div>
         <div class="singletermTERMS">philippe.poulard@sophia.inria.fr</div>
         <div class="singletermTERMS">Philippe</div>
         <div class="singletermTERMS">Poulard</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">RefleX: An Active Tags engine in Java</div>
         <div class="singletermTERMS">Relax NG: Regular-grammar-based validation</div>
         <div class="singletermTERMS">Relx NG</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">selector="exp:module"</div>
         <div class="singletermTERMS">stylesheets</div>
         <div class="singletermTERMS">Sun Multi-Schema Validator</div>
         <div class="singletermTERMS">Schemas</div>
         <div class="singletermTERMS">Schematron</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">The Active Schema Language</div>
         <div class="singletermTERMS">The XML Control Language</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
         <div class="singletermTERMS">UEL: Unified Expression Language</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">XML and Java (2nd ed.)</div>
         <div class="singletermTERMS">XML Catalogs</div>
         <div class="singletermTERMS">XML Schema Part 1: Structures Second Edition</div>
         <div class="singletermTERMS">XML Schema Part 2: Datatypes (2nd ed.)</div>
         <div class="singletermTERMS">XQuery/XPath Data Model (XDM) 1.0</div>
         <div class="singletermTERMS">XML Path Language</div>
         <div class="singletermTERMS">XProc: An XML Pipeline Language</div>
         <div class="singletermTERMS">XQuery 1.0: An XML Query Language</div>
         <div class="singletermTERMS">XSL Transformations (XSLT) 1.0</div>
         <div class="singletermTERMS">XUnit: XML-based unit tests</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="Propertiesofschemamashups:dynamicitysemanticmixinshyperschemasANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.2" xml:id="Bal2008poul0610">
      <div class="title e1">Properties of schema mashups: dynamicity, semantic, mixins, hyperschemas</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">Balisage: The Markup Conference 2008</div>
            <div class="confdates e5">August 12 - 15, 2008</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">W3C XML Schemas specifications were published in 2001, but a large community still
               uses DTDs.
               Perhaps they didn't adopt new schema technologies because they are still awaiting
               some missing features ?
               What kind of feature would be useful to DTD users and schema practitioners ?
            </div>
            <div class="para e8">Let's transpose the buzzword "mashups" to schema technologies: mashups of several
               schema languages and mashups of schema languages with non-schema languages.
               From this bazaar, we'll discuss some of the emerging features that could make what
               would be the next generation of schema languages:
               dynamicity, semantic, mixins, and hyperschemas.
            </div>
         </div>
         <div class="author e9">
            <div class="personname e10">
               <div class="firstname e11">Philippe</div>
               <div class="surname e12">Poulard</div>
            </div>
            <div class="personblurb e13">
               <div class="para e14">Philippe Poulard is a software engineer at INRIA (french national institute for
                  research in computer science and control) where he is involved in Web-oriented
                  problematics. He has been specialized in XML technologies and e-documentation
                  for 10 years. During this period, he has developed XML and SGML-based solutions
                  and prototypes on behalf of the French Army and INRIA. More recently he has
                  designed and implemented a set of XML technologies named "Active Tags"
                  (http://ns.inria.org/active-tags/). He also teaches
                  XML and Java at Nice/Sophia-Antipolis university and Aix/Marseille university.
                  He has an engineer degree (M.Sc) from the Conservatoire National des Arts et
                  Metiers.
               </div>
            </div>
            <div class="affiliation e15">
               <div class="orgname e16">INRIA</div>
            </div>
            <div class="email e17">philippe.poulard@sophia.inria.fr</div>
         </div>
         <div class="legalnotice e18">
            <div class="para e19">Copyright © 2008 Philippe Poulard. Used by permission.</div>
         </div>
         <div class="keywordset e20" role="author">
            <div class="keyword e21">Schemas</div>
            <div class="keyword e22">Active Tags</div>
            <div class="keyword e23">Active Schema Language</div>
            <div class="keyword e24">Active Catalog</div>
            <div class="keyword e25">W3C XML Schema</div>
            <div class="keyword e26">Relx NG</div>
            <div class="keyword e27">Schematron</div>
            <div class="keyword e28">DTD</div>
            <div class="keyword e29">Hyperschema</div>
            <div class="keyword e30">data types</div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e31">
         <div class="title e32">Introduction</div>
         <div class="para e33">The 
            <div class="xref e34" linkend="WXS-11"></div> specification is in a "last call working draft" status.
            One of the most significant change is perhaps the support of co-occurrence constraints
            that was missing in 1.0 and expected by the community.
            For the other missing stuffs -who knows what they are- we have to wait for W3C XML
            Schema 1.2 and so on.
            In this paper, we'll have a prospective approach: we examine some features that the
            author has already implemented as a demonstration,
            and imagine others that lead us to consider new usages of schema technologies.
         </div>
         <div class="para e35">For this purpose, we introduce an experimental but innovative schema technology: the
            Active Schema Language, or 
            <div class="xref e36" linkend="ASL"></div>.
            The strength of ASL comes from its runtime environment: the 
            <div class="xref e37" linkend="ActiveTags"></div> engine that was presented last year at Extreme Markup Languages in Montreal (
            <div class="xref e38" linkend="Poulard"></div>).
            Active Tags can host several runnable tag libraries and a schema language like ASL
            is just another library like other tag libraries,
            but built on top of this framework that offers to ASL lots of valuable services that
            make it much more simple, powerful and expressive than
            the serie of W3C XML Schema 1.x as well as other schema technologies.
         </div>
         <div class="para e39">Firstly, we will expose the foundations of the system. In the next chapters, we will
            explore 4 simple use cases:
         </div>
         <div class="itemizedlist e40">
            <div class="listitem e41">
               <div class="para e42">Since an Active Tags engine can make cohabit several tag libraries, even declarative
                  languages like schema languages,
                  we'll see hereafter how to design a schema that can build dynamically its content
                  models (named active content model)
                  by interweaving imperative instructions with declarative ones, in order to solve issues
                  that other schema technologies can't address.
               </div>
            </div>
            <div class="listitem e43">
               <div class="para e44">Next, we'll focus on XML data types and the lack of support of semantic data types
                  in schema languages.
                  A simple example will show how ASL can define simply such a data type, and the advantage
                  got for applications that have to deal with XML datas.
               </div>
            </div>
            <div class="listitem e45">
               <div class="para e46">We'll go on with the concept of mixins (borrowed to other kind of languages) adapted
                  to schema languages.
                  Here, we'll mix several schema technologies for extending an attribute definition
                  of a DTD with a data type (other than CDATA, of course).
               </div>
            </div>
            <div class="listitem e47">
               <div class="para e48">Finally, we'll discuss about the validation of software components represented with
                  declarative XML languages.
                  Although schemas languages can validate the static representation of an assembly of
                  components, they are not designed to validate pieces of components assembled at runtime.
                  An hyperschema would act at this higher level.
               </div>
            </div>
         </div>
         <div class="para e49">We will conclude that designing XML languages in a framework such as Active Tags is
            extremely valuable.
            Even (or especially) for declarative languages such as ASL.
         </div>
      </div><a name="FoundationsofthesystemANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e50">
         <div class="title e51">Foundations of the system</div>
         <div class="para e52">In this section, we present an overview of the system and its basic functioning.</div>
         <div class="para e53">Basically, an 
            <div class="xref e54" linkend="XSLT"></div> processor or a schema validator are doing the same things:
            first, since they are languages that rely on XML, instances are parsed, then unmarshalled
            to instances of some classes and assembled, and finally processed according to the
            intended
            semantic of the tags encountered. This is where the differences occurs.
            Processing those steps in a pipeline mode or generating some code in a target language
            are only implementation details.
            We can simply consider XSLT, 
            <div class="xref e55" linkend="WXS"></div>, 
            <div class="xref e56" linkend="RelaxNG"></div>, 
            <div class="xref e57" linkend="SCXML"></div>, 
            <div class="xref e58" linkend="XMLCatalogs"></div>
            and other markup languages designed for processing purpose as tag libraries,
            but none of them rely on a common system.
            Yet, some systems are based on tag libraries such as 
            <div class="xref e59" linkend="JSP"></div>/
            <div class="xref e60" linkend="JSTL"></div> and 
            <div class="xref e61" linkend="Jelly"></div> but the former
            is runnable exclusively within a Web server and both are very far from XML problematics:
            for example, instead of using XPath
            they rely on the 
            <div class="xref e62" linkend="UEL"></div> and are tightly coupled to Java.
         </div>
         <div class="para e63">Active Tags is a system that considers that XML languages designed for processing
            purpose like those mentionned are tag libraries
            runnable in an XML-based environment.
            Active Tags offers to runnable XML languages a set of basic services such as handling
            XML datas
            and non-XML datas with 
            <div class="xref e64" linkend="XPath"></div>, using templates, defining macros, and mapping tags to their
            implementations. This allows a programmer to focus on its implementation without worrying
            about the plumbing details.
         </div>
         <div class="para e65">In the same way that XSLT scripts are called "
            <div class="emphasis e66">stylesheets</div>", Active Tags ones are called "
            <div class="emphasis e67">active sheets</div>".
            Like XSLT, it is XPath centric, and 
            <div class="emphasis e68">active sheets</div> will contain both instructions (the so-called 
            <div class="emphasis e69">active tags</div>) and XML litterals.
            The main difference is that instead of having a single instruction set, an 
            <div class="emphasis e70">active sheet</div> may contain severals, each bound to a namespace URI.
            One of the core module of the system is the XML Control Language, or 
            <div class="xref e71" linkend="XCL"></div>, that supplies a set of tags that covers many common features:
         </div>
         <div class="itemizedlist e72">
            <div class="listitem e73">
               <div class="para e74">Usual control structure actions, such as alternative (
                  <div class="code e75">&lt;xcl:if&gt;</div> 
                  <div class="code e76">&lt;xcl:then&gt;</div> 
                  <div class="code e77">&lt;xcl:else&gt;</div>)
                  or iterative actions (
                  <div class="code e78">&lt;xcl:for-each&gt;</div>).
               </div>
            </div>
            <div class="listitem e79">
               <div class="para e80">XML oriented actions, such as XML parsing (
                  <div class="code e81">&lt;xcl:parse&gt;</div>) and XSLT transforming (
                  <div class="code e82">&lt;xcl:parse-stylesheet&gt;</div> and 
                  <div class="code e83">&lt;xcl:transform&gt;</div>);
                  these actions deal with entity and URI resolving, passing parameters (
                  <div class="code e84">&lt;xcl:param&gt;</div>),
                  error handling and many other options used to tune XML processes.
               </div>
            </div>
            <div class="listitem e85">
               <div class="para e86">XML document creation (
                  <div class="code e87">&lt;xcl:document&gt;</div>, 
                  <div class="code e88">&lt;xcl:element&gt;</div>, 
                  <div class="code e89">&lt;xcl:attribute&gt;</div> etc)
                  and high level Active Update implementation, that allow to perform update operations
                  on XML objects and X-operable objects
                  <div class="popupBox e90">
                     <div class="popupLabel" onmouseover="$('#d1e178').show('1000');" onmouseout="$('#d1e178').hide('1000');">[ footnote ]</div>
                     <div id="d1e178" style="display: none;">
                        <div class="footnote">
                           <div class="para e91">X-operable objects are objects that are exposing their inherent properties as XML
                              properties (name, attributes, children, parent...) and can be processed
                              with XML-related operations and traversed with XPath. For example, one can apply 
                              <div class="code e92">//*</div> on a directory of a file system
                              to get all the files and directories under the tree.
                           </div>
                        </div>
                     </div>
                  </div>
                  (
                  <div class="code e93">&lt;xcl:delete&gt;</div>, 
                  <div class="code e94">&lt;xcl:append&gt;</div>, 
                  <div class="code e95">&lt;xcl:update&gt;</div> etc).
               </div>
            </div>
         </div>
         <div class="para e96">The reader is sent back to 
            <div class="xref e97" linkend="RefleX"></div>, a Java implementation of Active Tags,
            where numbers examples are available and runnable. RefleX supplies a command line
            interface and
            a servlet, and offer means to query relational databases with SQL, XML databases with
            
            <div class="xref e98" linkend="XQuery"></div>, or LDAP repositories.
            Moreover, he will find in RefleX all the standard modules that go along with Active
            Tags (I/O, System, Web, etc) and specific modules
            for designing XML-based test suites (
            <div class="xref e99" linkend="XUnit"></div>) and test suites for Web applications (
            <div class="xref e100" linkend="WUnit"></div>).
         </div>
         <div class="para e101">In this first example, XCL is used in a sequence of three operations for parsing a
            file and transforming it with XSLT:
         </div>
         <div class="programlisting e102" xml:space="preserve">
            &lt;xcl:active-sheet xmlns:xcl="http://ns.inria.org/active-tags/xcl"&gt;
            &lt;xcl:parse name="input" source="file:///path/to/document.xml"/&gt;
            &lt;xcl:parse-stylesheet name="xslt" source="file:///path/to/stylesheet.xsl"/&gt;
            &lt;!--XPath expressions appear in curly braces--&gt;
            &lt;xcl:transform output="file:///path/to/result.html" source="{ $input }"
            stylesheet="{ $xslt }"/&gt;
            &lt;/xcl:active-sheet&gt;
         </div>
         <div class="para e103">
            <div class="emphasis e104">Active sheets</div> can use a single module (like above) or several ones, can be procedural (like above
            once again) or declarative or both like we'll see in the next section.
         </div>
         <div class="para e105">Other core modules include means to bind an implementation to an active tag (i.e.
            which is not an XML litteral):
         </div>
         <div class="programlisting e106" xml:space="preserve">
            &lt;!--bind a Java class to an active tag of the XCL module--&gt;
            &lt;exp:element name="xcl:transform"
            source="res:org.inria.ns.reflex.processor.xcl.TransformAction"/&gt;
            &lt;!--the "res" URI scheme refers to resources found in the classpath;
            this is specific to the RefleX implementation in Java--&gt;
            
         </div>
         <div class="para e107">...and means to lookup for resources such as the actual modules:</div>
         <div class="programlisting e108" xml:space="preserve">
            &lt;!--declare 2 entries related to XCL in the main catalog--&gt;
            &lt;cat:group xml:base="res:///org/inria/ns/reflex/processor/"&gt;
            &lt;!--where to find the XCL module--&gt;
            &lt;cat:resource name="http://ns.inria.org/active-tags/xcl" uri="xcl/module.exp"
            selector="exp:module"/&gt;
            &lt;!--where to find the XCL schema--&gt;
            &lt;cat:resource name="http://ns.inria.org/active-tags/xcl" uri="xcl/schema.asl"
            selector="asl:schema"/&gt;
            &lt;/cat:group&gt;
         </div>
         <div class="para e109">When an 
            <div class="emphasis e110">active sheet</div> is launched, the engine will look in the main catalog (and custom catalogs if any)
            if there is a module for each XML tag it encounters, and load the implementation provided
            by the relevant module, otherwise the actual tag
            stands for a litteral.
         </div>
         <div class="para e111">The so-called 
            <div class="xref e112" linkend="ActiveCatalog"></div> used in Active Tags like shown above is a compatible extension to OASIS XML Catalog:
            the former is designed
            to retrieve resources whereas the latter just to map an URI to another URI. When the
            engine launches a "module request", the reference specified by the entry in the catalog,
            tagged with the
            appropriate role (
            <div class="code e113">selector="exp:module"</div>), will be unmarshalled to the relevant component (the module expected).
         </div>
         <div class="para e114">Other core modules and custom modules can be declared and registered to the engine
            as well.
            So far, nothing about schemas were mentionned; in the same way, there is a module
            definition for ASL
            that bind ASL elements to their implementation, and an entry in the main catalog so
            that ASL is ready to use
            by the engine. Therefore, we are able to design schema instances with ASL, and write
            
            <div class="emphasis e115">active sheets</div>
            for validating XML instances with our schema. We'll see hereafter how to combine XCL
            and ASL to express dynamic content models in a schema.
         </div>
      </div><a name="DynamicityorbuildingactivecontentmodelsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e116">
         <div class="title e117">Dynamicity, or building active content models</div>
         <div class="para e118">Schema processors are building an abstract tree from a schema instance. With a traditional
            grammar-based schema (DTD, W3C XML Schema, Relax NG),
            as the schema instance is hard-coded, the abstract tree is static, making the expressiveness
            of the schema limited to what is allowed by the grammar.
            The flaw with grammars in XML is that they only allow to constraint content models
            in a declarative manner,
            which is in essence very concise and expressive, but when the limits of the declarative
            syntax are reached, there is no way out;
            it is still possible to add a new tag to express the missing declarative tag, but
            the limit still exists a single step further, at the cost of upgrading the language.
         </div>
         <div class="para e119">ASL has been designed in order to be much more expressive without adding tags again
            and again.
            The immediate benefit is to avoid to compromise a user's XML structure just because
            some constraints can't be expressed by grammar-based schemata,
            which happens often with traditional schema languages.
            ASL contains similar constructs than others schema languages: an element declaration
            is still made of sequences (
            <div class="code e120">&lt;asl:sequence&gt;</div>) or choices
            (
            <div class="code e121">&lt;asl:choice&gt;</div>) of element references (
            <div class="code e122">&lt;asl:element ref-name="..."&gt;</div>),
            texts (
            <div class="code e123">&lt;asl:text value="..."&gt;</div>) or attributes (
            <div class="code e124">&lt;asl:attribute&gt;</div>), but they can be mixed with imperative constructs.
            As the content models are computed at runtime while validating, the result abstract
            tree becomes dynamic,
            increasing dramatically the expressiveness of the schema: the content models can adapt
            themselves to the incoming data to validate in an extreme flexible way.
            Additionally, ASL allows to compute dynamically thanks to XPath expressions occurrence
            constraints, that are at best hard-coded in existing schema languages.
         </div>
         <div class="para e125">The following document is an instance of a purchase-order:</div>
         <div class="programlisting e126" xml:space="preserve">
            &lt;purchase-order
            xmlns="http://www.example.com/purchase-order"
            ship-date="2008-08-14"&gt;
            
            &lt;items total="188.93"&gt;
            
            &lt;item partNum="872-AA"&gt;
            &lt;productName&gt;Lawnmower&lt;/productName&gt;
            &lt;quantity&gt;1&lt;/quantity&gt;
            &lt;USPrice&gt;148.95&lt;/USPrice&gt;
            &lt;/item&gt;
            
            &lt;item partNum="926-AA"&gt;
            &lt;productName&gt;Baby Monitor&lt;/productName&gt;
            &lt;quantity&gt;1&lt;/quantity&gt;
            &lt;USPrice&gt;39.98&lt;/USPrice&gt;
            &lt;/item&gt;
            
            &lt;free-item partNum="261-ZZ"&gt;
            &lt;productName&gt;Kamasutra for dummies&lt;/productName&gt;
            &lt;quantity&gt;1&lt;/quantity&gt;
            &lt;/free-item&gt;
            
            &lt;/items&gt;
            
            &lt;/purchase-order&gt;
            
         </div>
         <div class="para e127">It is constrained by structual rules and business rules, in the circumstances a 
            <div class="code e128">&lt;free-item&gt;</div> element is allowed only if the total amount exceeds 500$
            (which makes the above document invalid).
            Due to the lack of expressiveness of existing schema languages, the best we can do
            is to relax some constraints and ignore the business rule.
            The content model of the 
            <div class="code e129">&lt;items&gt;</div> element would be expressed like this in a DTD:
         </div>
         <div class="programlisting e130" xml:space="preserve">&lt;!ELEMENT items (item+,free-item?)&gt;</div>
         <div class="para e131">Unfortunately, an instance like the previous one violates our business rule although
            it is valid regarding the DTD.
            Other schema languages can't do much more better, except 
            <div class="xref e132" linkend="Schematron"></div> that we will talk about hereinafter.
         </div>
         <div class="para e133">ASL allows to write the business rule exactly as it has been expressed, by injecting
            imperative instructions from the XML Control Language within the content model definition:
         </div>
         <div class="programlisting e134" xml:space="preserve">
            &lt;asl:active-schema
            xmlns:xcl="http://ns.inria.org/active-tags/xcl"
            xmlns:asl="http://ns.inria.org/active-schema"
            xmlns:xs="http://www.w3.org/2001/XMLSchema"
            xmlns:po="http://www.example.com/purchase-order"
            target="po"
            &gt;
            
            &lt;!--the root element of a purchase order--&gt;
            &lt;asl:element name="po:purchase-order" root="always"&gt;
            &lt;asl:attribute name="ship-date" type="xs:date"/&gt;
            &lt;asl:sequence&gt;
            &lt;asl:element ref-elem="po:items"/&gt;
            &lt;/asl:sequence&gt;
            &lt;/asl:element&gt;
            
            &lt;!--a dynamic content model--&gt;
            &lt;asl:element name="po:items" root="never"&gt;
            &lt;asl:attribute name="total" type="xs:decimal"/&gt;
            &lt;!--a variable sequence--&gt;
            &lt;asl:sequence&gt;
            &lt;asl:element
            ref-elem="po:item"
            min-occurs="1"
            max-occurs="unbounded"/&gt;
            &lt;!--the test that introduces variability
            asl:element() refers to the current element, actually a &lt;po:items&gt;--&gt;
            &lt;xcl:if test="{ asl:element()/@total &amp;gt; 500 }"&gt;
            &lt;xcl:then&gt;
            &lt;asl:element
            ref-elem="po:free-item"
            min-occurs="0"
            max-occurs="1"/&gt;
            &lt;/xcl:then&gt;
            &lt;/xcl:if&gt;
            &lt;/asl:sequence&gt;
            &lt;/asl:element&gt;
            
            &lt;asl:element name="po:item" root="never"&gt;
            &lt;!--content model here--&gt;
            &lt;/asl:element&gt;
            
            &lt;asl:element name="po:free-item" root="never"&gt;
            &lt;!--content model here--&gt;
            &lt;/asl:element&gt;
            
            &lt;!--other element definitions here--&gt;
            
            &lt;/asl:active-schema&gt;
            
         </div>
         <div class="para e135">This schema demonstrates that an imperative operation is used to build the content
            model during the validation.
            The content model of the 
            <div class="code e136">&lt;items&gt;</div> element will vary according to the total amount found in the incoming document.
            Each of the "realizations" or "instanciations" of the element definition and illustrated
            by the picture below leads to a different abstract tree of the grammar.
            But all are expressed in a single self-adaptative schema.
            A program that would generate a schema wouldn't have the same expressiveness:
            a content model designed on the fly won't necessary produce the same result each time
            it is traversed.
            In fact, the system works like if it was a program that locally build fragments of
            content models while it is traversed during the validation.
            The injection of imperative instructions doesn't change the nature of ASL which is
            declarative.
         </div>
         <div class="mediaobject e137">
            <div class="imageobject e138">
               <div class="metaBox e139"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e291').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e291" class="metaSource" style="display:none;">                
                     &lt;imagedata<span class="metaAttribute">class='e139'
                        </span><span class="metaAttribute">fileref='../../../vol1/graphics/Poulard01/Poulard01-001.jpg'
                        </span><span class="metaAttribute">format='jpg'
                        </span><span class="metaAttribute">width='100%'
                        </span>
                     &gt;
                     
                  </div>
               </div>
            </div>
         </div>
         <div class="para e140">Schematron (as well as assertions in W3C XML Schema 1.1) is a technology that offers
            similar services;
            however, there is a fundamental difference: Schematron act outside content models
            whereas ASL defines them.
            Schematron will report constraints violations after grammar-based validation.
            A tool such as an editor will propose to the user to insert a 
            <div class="code e141">&lt;free-item&gt;</div> whereas Schematron will reject it after the insertion !
            ASL will introduce it in the content model only when the conditions are fulfilled,
            and the editor won't propose it to the user if it doesn't have to.
         </div>
         <div class="para e142">The reader is encouraged to experiment himself dynamic content models by referring
            to the RefleX web site:
            for example how an algorithmic rule can act on a content model and other various use
            cases that are available in RefleX.
         </div>
      </div><a name="SemanticorenhancingthemeaningofdatatypesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e143">
         <div class="title e144">Semantic, or enhancing the meaning of data types</div>
         <div class="para e145">
            <div class="xref e146" linkend="DTLL"></div>, a language for the creation of data type libraries,
            provides a rather good support for data types. But neither DTLL nor W3C XML Schema
            nor XML technologies in general
            offer means to design semantic data types.
            The semantic of a data type is related to its level of abstractions: 
            <div class="xref e147" linkend="Murata"></div> defines the following 4 models with different levels of abstractions (we add a 5th
            at the bottom):
         </div>
         <div class="itemizedlist e148">
            <div class="listitem e149">
               <div class="para e150">Model 4: semantic view: 68° Fahrenheit</div>
            </div>
            <div class="listitem e151">
               <div class="para e152">Model 3: data type view: 
                  <div class="code e153">#xs:decimal temp=68</div>
               </div>
            </div>
            <div class="listitem e154">
               <div class="para e155">Model 2: XML view:</div>
               <div class="mediaobject e156">
                  <div class="imageobject e157">
                     <div class="metaBox e158"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e321').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e321" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e158'
                              </span><span class="metaAttribute">fileref='../../../vol1/graphics/Poulard01/Poulard01-002.jpg'
                              </span><span class="metaAttribute">format='jpg'
                              </span><span class="metaAttribute">width='80%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="listitem e159">
               <div class="para e160">Model 1: string view: 
                  <div class="code e161">&lt;?xml version="1.0"?&gt;&lt;weather-report temp="68" unit="°F"&gt;</div>
               </div>
            </div>
            <div class="listitem e162">
               <div class="para e163">Model 0: byte view: 
                  <div class="code e164">3C 3F 78 6D 6C 20 76 65 72 73 69 6F 6E 3D 22 31 2E 30 22 3F 3E 3C 77 65 61 74 68 65
                     72 2D 72 65 70 6F 72 74 20 74 65 6D 70 3D 22 36 38 22 20 75 6E 69 74 3D 22 B0 46 22
                     3E
                  </div>
               </div>
            </div>
         </div>
         <div class="para e165">The Model 4 is of course the closest to the concerns of a human being. It is available
            for systems like Active Tags that can express reliationships between datas.
         </div>
         <div class="para e166">Unfortunately, XML technologies stop at Model 3, got thanks to a schema; what's happenned
            if we have to sort the following weather report by temperature ?
         </div>
         <div class="programlisting e167" xml:space="preserve">
            &lt;weather-report&gt;
            &lt;city name="Paris"  temp="19" unit="°C"/&gt;
            &lt;city name="Rome"   temp="22" unit="°C"/&gt;
            &lt;city name="Berlin" temp="32" unit="°F"/&gt;&lt;!-- 32°F = 0°C --&gt;
            &lt;city name="Madrid" temp="23" unit="°C"/&gt;
            &lt;city name="London" temp="68" unit="°F"/&gt;&lt;!-- 68°F = 20°C --&gt;
            &lt;/weather-report&gt;
            
         </div>
         <div class="para e168">In Java, a simple class with a compator interface would convert the temperature units
            properly.
            With XML technologies you won't be able to get the right result;
            an inadmissible fact face to other technologies that are able to address this issue.
            Actually, although there are classes of applications where XML is unmarshalled to
            objects of another language that takes the relay to address
            this issue, other classes of applications that relies on the XML data model (
            <div class="xref e169" linkend="XDM"></div>) such as XSLT and XQuery can't go without such data types
            <div class="popupBox e170">
               <div class="popupLabel" onmouseover="$('#d1e342').show('1000');" onmouseout="$('#d1e342').hide('1000');">[ footnote ]</div>
               <div id="d1e342" style="display: none;">
                  <div class="footnote">
                     <div class="para e171">It might be possible to create the target XML result with XQuery, but not to operate
                        the input XDM properly as expected
                        if it doesn't support such data types. Such a query would be like a procedure aside
                        from the typed data, whereas ASL can define
                        a type where the datas and the behaviour are bundled together, like in OO designs.
                     </div>
                  </div>
               </div>
            </div>.
            The environment where typed datas are exposed in surface has to play a fundamental
            role: if OO languages are able to process them,
            native XML languages (XSLT, XQuery, Active Tags) should support them as well.
         </div>
         <div class="para e172">The Active Schema Language supplies means to define data types.
            As expected after validation, an 
            <div class="emphasis e173">active sheet</div> will be able to process the actual typed datas.
            With the help of XCL, we are able to augment the amount of informations of an XML
            document the way we like:
         </div>
         <div class="programlisting e174" xml:space="preserve">
            &lt;asl:active-schema
            xmlns:xcl="http://ns.inria.org/active-tags/xcl"
            xmlns:asl="http://ns.inria.org/active-schema"
            xmlns:xs="http://www.w3.org/2001/XMLSchema-datatypes"
            target=""
            &gt;
            
            &lt;!--the root element of a weather report--&gt;
            &lt;asl:element name="weather-report" root="always"&gt;
            &lt;asl:sequence&gt;
            &lt;asl:element
            ref-elem="city"
            min-occurs="1"
            max-occurs="unbounded"/&gt;
            &lt;/asl:sequence&gt;
            &lt;/asl:element&gt;
            
            &lt;!--a &lt;city&gt; contains only attributes--&gt;
            &lt;asl:element name="city"&gt;
            &lt;asl:attribute name="name" ref-type="xs:string"/&gt;
            &lt;!--the @temp attribute refers to our custom type--&gt;
            &lt;asl:attribute name="temp" ref-type="temperature"/&gt;
            &lt;asl:attribute name="unit"&gt;
            &lt;asl:text value="°C"/&gt;
            &lt;asl:text value="°F"/&gt;
            &lt;/asl:attribute&gt;
            &lt;/asl:element&gt;
            
            &lt;!--#temperature is our custom type
            it will build a typed data based on a #xs:decimal--&gt;
            &lt;asl:type name="temperature" base="xs:decimal" init="{.}"&gt;
            &lt;!--asl:element() refers to the current element, actually a &lt;city&gt;--&gt;
            &lt;xcl:if test="{ asl:element()/@unit='°F' }"&gt;
            &lt;xcl:then&gt;
            &lt;!--if @unit="°F", the value of the typed data is updated
            $asl:data is the structure bound to the attribute that handles
            the current typed data
            "." is the current data, an #xs:decimal--&gt;
            &lt;xcl:update
            referent="{ $asl:data }"
            operand="{ (value(.) - 32) * 5 div 9 }"/&gt;
            &lt;/xcl:then&gt;
            &lt;/xcl:if&gt;
            &lt;/asl:type&gt;
            
            &lt;/asl:active-schema&gt;
            
         </div>
         <div class="para e175">The Active Schema Language (ASL) can defines content models and data types like other
            schema technologies, and also unlike them !
            In the above instance, the typed data that will be bound to the attribute will vary
            according to the temperature unit used in the XML input document.
            The following 
            <div class="emphasis e176">active sheet</div> will sort our weather report correctly:
         </div>
         <div class="programlisting e177" xml:space="preserve">
            &lt;xcl:active-sheet
            xmlns:xcl="http://ns.inria.org/active-tags/xcl"
            xmlns:asl="http://ns.inria.org/active-schema"&gt;
            
            &lt;xcl:parse
            name="wr"
            source="weather-report.xml"/&gt;
            &lt;asl:parse-schema
            name="wr-schema"
            source="weather-report.asl"/&gt;
            &lt;!--the "augment" attribute indicates to bind typed datas to XML items in the XDM--&gt;
            &lt;asl:validate
            schema="{ $wr-schema }"
            node="{ $wr }"
            augment="yes"
            deep="yes"/&gt;
            &lt;xcl:echo
            value="List of cities, sorted in temperature order:"/&gt;
            &lt;xcl:for-each
            name="city"
            select="{ xcl:sort( $wr/*/city, @temp ) }"&gt;
            &lt;xcl:echo
            value="{ $city/@temp }{ $city/@unit } { $city/@name }"/&gt;
            &lt;/xcl:for-each&gt;
            
            &lt;/xcl:active-sheet&gt;
            
         </div>
         <div class="para e178">In the result, we notice that the attribute value remains the same, whereas the bound
            typed data was involved in the sort operation:
         </div>
         <div class="programlisting e179" xml:space="preserve">
            List of cities, sorted in temperature order:
            32°F Berlin
            19°C Paris
            68°F London
            22°C Rome
            23°C Madrid
            
         </div>
         <div class="para e180">Notice that as explained in the foundations of the system, the engine could also be
            launched with a custom catalog that refer to our schema;
            the 
            <div class="code e181">&lt;asl:parse-schema&gt;</div> instruction would then be discarded,
            and the 
            <div class="code e182">&lt;asl:validate&gt;</div> instruction wouldn't refer to it.
         </div>
         <div class="para e183">To go further, we could also imagine another semantic data type that would handle
            a temperature followed immediately with its scale:
         </div>
         <div class="programlisting e184" xml:space="preserve">&lt;city name="London" temp="68°F"/&gt;</div>
         <div class="para e185">...and why not allow a mix of the 2 formats in the same document ? ASL support as
            well this type and types expressed in terms of a choice between several other candidate
            types.
         </div>
         <div class="para e186">Those variants are also available at the RefleX web site. The reader is invited to
            consult the Active Schema Language specification for further informations about semantic
            data types and polymorphic data types.
         </div>
      </div><a name="MixinsorcollectingschemaflavorsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e187">
         <div class="title e188">Mixins, or collecting schema flavors</div>
         <div class="para e189">Schema mixins can be understand as the ability to mix several schemas. Several solutions,
            tools, and techniques are already available:
         </div>
         <div class="itemizedlist e190">
            <div class="listitem e191">
               <div class="para e192">
                  <div class="xref e193" linkend="NVDL"></div> (Namespace-based Validation Dispatching Language) consist on separating the input
                  document to validate
                  according to the namespaces encountered and validating each chunk with the appropriate
                  schema.
                  Although several different schema technologies can be involved, for example Relax
                  NG + W3C XML Schema,
                  each will act on a single namespace URI separately.
               </div>
            </div>
            <div class="listitem e194">
               <div class="para e195">W3C XML Schema has a mechanism for importing and including other pieces of schema.
                  But those external parts must be themselves W3C XML Schema.
               </div>
            </div>
            <div class="listitem e196">
               <div class="para e197">Schematron can be embedded inside a W3C XML Schema, but they are not helping each
                  other.
                  Each does its job independently of the other.
               </div>
            </div>
            <div class="listitem e198">
               <div class="para e199">
                  <div class="xref e200" linkend="MSV"></div> is a Java tool that makes various schema languages converging to a common representation.
                  This allows the same engine to work with DTD, W3C XML Schema, and Relax NG.
               </div>
            </div>
            <div class="listitem e201">
               <div class="para e202">
                  <div class="xref e203" linkend="DSDLp9"></div> is a draft that brings data types and namespace URIs to DTD. But it is an extension
                  to the DTD language.
               </div>
            </div>
            <div class="listitem e204">
               <div class="para e205">Relax NG and ASL (as shown in the previous sections) can use W3C XML Schema datatypes.</div>
            </div>
         </div>
         <div class="para e206">In all that cases, schemas mixins are partially supported. We can't in the same namespace
            design two parts of a schema with two different schema technologies. What does it
            serves for ? Well, some people are addicted to DTDs that after all are part of the
            XML specifications, and DTD content models are in some cases powerful enough. So why
            moving to W3C XML Schema ? Perhaps to gain a little in expressivity, or to take the
            benefits of data types. However, even for this last reason, DTD are still used, the
            more often simply because they are already written. So, we expect from schema mixins
            a deeper entanglement of several schema technologies.
         </div>
         <div class="para e207">Let's take back our previous example: a compatible schema could be also expressed
            with a DTD:
         </div>
         <div class="programlisting e208" xml:space="preserve">
            &lt;!--FILE: weather-report-legacy.dtd--&gt;
            &lt;!ELEMENT weather-report (city)+&gt;
            &lt;!ELEMENT city EMPTY&gt;
            &lt;!ATTLIST city name CDATA #REQUIRED
            temp CDATA #REQUIRED
            unit CDATA #REQUIRED&gt;
            
         </div>
         <div class="para e209">The constraints that has been relaxed in this DTD are:</div>
         <div class="itemizedlist e210">
            <div class="listitem e211">
               <div class="para e212">the temperature is not numeric</div>
            </div>
            <div class="listitem e213">
               <div class="para e214">the unit can't be expressed with an enumeration of values because °C and °F are not
                  valid XML tokens
               </div>
            </div>
            <div class="listitem e215">
               <div class="para e216">the relationship between °C and °F can't be expressed</div>
            </div>
         </div>
         <div class="para e217">As seen previously, we can design apart with ASL the expected types:</div>
         <div class="programlisting e218" xml:space="preserve">
            &lt;!--FILE: weather-report-datatypes.asl--&gt;
            &lt;asl:active-schema
            xmlns:xcl="http://ns.inria.org/active-tags/xcl"
            xmlns:asl="http://ns.inria.org/active-schema"
            xmlns:xs="http://www.w3.org/2001/XMLSchema-datatypes"
            target=""
            &gt;
            
            &lt;!--#temp-units is the type for temperature units--&gt;
            &lt;asl:type name="temp-units"&gt;
            &lt;asl:choice&gt;
            &lt;asl:text value="°C"/&gt;
            &lt;asl:text value="°F"/&gt;
            &lt;/asl:choice&gt;
            &lt;/asl:element&gt;
            
            &lt;!--#temperature is the type introduced in the previous section--&gt;
            &lt;asl:type name="temperature" base="xs:decimal" init="{.}"&gt;
            &lt;!--asl:element() refers to the current element, actually a &lt;city&gt;--&gt;
            &lt;xcl:if test="{ asl:element()/@unit='°F' }"&gt;
            &lt;xcl:then&gt;
            &lt;!--if @unit="°F", the value of the typed data is updated
            $asl:data is the structure bound to the attribute that handles
            the current typed data
            "." is the current data, an #xs:decimal--&gt;
            &lt;xcl:update
            referent="{ $asl:data }"
            operand="{ (value(.) - 32) * 5 div 9 }"/&gt;
            &lt;/xcl:then&gt;
            &lt;/xcl:if&gt;
            &lt;/asl:type&gt;
            
            &lt;/asl:active-schema&gt;
            
         </div>
         <div class="para e219">The last piece of the puzzle is to "patch" the DTD with ASL. For this purpose, a third
            schema specifies how to override the definitions of the DTD:
         </div>
         <div class="programlisting e220" xml:space="preserve">
            &lt;!--FILE: weather-report-master.asl--&gt;
            &lt;asl:active-schema
            xmlns:xcl="http://ns.inria.org/active-tags/xcl"
            xmlns:asl="http://ns.inria.org/active-schema"
            xmlns:xs="http://www.w3.org/2001/XMLSchema-datatypes"
            target=""
            &gt;
            
            &lt;!--redefine only what needed--&gt;
            &lt;asl:element name="city"&gt;
            &lt;asl:attribute name="temp" ref-type="temperature"/&gt;
            &lt;asl:attribute name="unit" ref-type="temp-units"/&gt;
            &lt;!--other definitions are preserved--&gt;
            &lt;asl:apply-definition/&gt;
            &lt;/asl:element&gt;
            
            &lt;/asl:active-schema&gt;
            
         </div>
         <div class="para e221">Of course, the two ASL schemas could be merged in a single schema,
            but having two shemas allow a rather good independence between the definitions of
            the custom types and their usages (the patch operation).
         </div>
         <div class="para e222">As explained previously, an Active Catalog is used to declare the relevant schemas:</div>
         <div class="programlisting e223" xml:space="preserve">&lt;cat:catalog
            xmlns:cat="http://ns.inria.org/active-catalog"
            xmlns:asl="http://ns.inria.org/active-schema"&gt;
            &lt;!--if our XML structure had a namespace URI,
            the name attribute below would contain it litteraly--&gt;
            &lt;cat:resource name="" uri="weather-report-master.asl" selector="asl:schema"/&gt;
            &lt;cat:resource name="" uri="weather-report-datatypes.asl" selector="asl:schema"/&gt;
            &lt;!--asl:schema is the selector for all kind of schemas: DTD, ASL, W3C XML Schema,
            Relax NG, others --&gt;
            &lt;cat:resource name="" uri="weather-report-legacy.dtd" selector="asl:schema"/&gt;
            &lt;/cat:catalog&gt;
            
         </div>
         <div class="para e224">We have already seen that an 
            <div class="emphasis e225">active sheet</div> that performs a
            validation don't need to refer to a parsed schema: the engine will lookup in its catalogs
            for
            the relevant resources. With RefleX, the command line interface and the servlet allow
            to run
            an 
            <div class="emphasis e226">active sheets</div> with a given set of catalogs.
            Notice that the order where the resources appear is important: the definitions in
            the master
            schema mask those in the legacy DTD. This is a strategy proper to schema lookup, and
            other
            kind of resources (modules) have their own lookup strategy. Details are available
            in the
            Active Catalog specification.
         </div>
         <div class="para e227">Other features are available: for example, before applying or after applying the definitions
            of the DTD,
            some content models might be prepend or append to the content model of the DTD if
            needed.
            But a more complex refactorisation of the content model expressed in the DTD wouldn't
            be possible without overwriting it entirely.
         </div>
         <div class="para e228">Unlike the previous examples, mixins are in progress in ASL and are not covered by
            the implementation.
         </div>
         <div class="para e229">Basically, they work like imports and includes in W3C XML Schema but it demonstrates
            clearly that a system based on schema cooperation allow to deal with legacy schemas.
            Moreover, this is a not intrusive technique unlike ISO/DSDL part 9 mentioned earlier
            that require to rewrite DTD interpreters.
            Additionally, with the help of catalogs, we have a schema machinery that prefer to
            rely on dedicated components rather than trying to do everything itself.
         </div>
      </div><a name="HyperschemasorvalidatinghighlevelXMLcomponentsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e230">
         <div class="title e231">Hyperschemas, or validating high-level XML components</div>
         <div class="para e232">In the same way that there is a Relax NG schema for Relax NG, a W3C XML Schema schema
            for W3C XML Schema, let's try to write the ASL schema of ASL.
         </div>
         <div class="para e233">An element definition is composed of attribute definitions or references, choices,
            sequences, etc. Let's start to write it:
         </div>
         <div class="programlisting e234" xml:space="preserve">
            &lt;asl:active-schema
            xmlns:asl="http://ns.inria.org/active-schema"
            xmlns:xs="http://www.w3.org/2001/XMLSchema-datatypes"
            target="asl"
            &gt;
            
            &lt;asl:element name="asl:element"&gt;
            &lt;asl:attribute name="name" ref-type="xs:string"/&gt;
            &lt;asl:choice min-occurs="0" max-occurs="unbounded"&gt;
            &lt;asl:element ref-elem="asl:attribute"/&gt;
            &lt;asl:element ref-elem="asl:choice"/&gt;
            &lt;asl:element ref-elem="asl:sequence"/&gt;
            &lt;!--other stuff here--&gt;
            &lt;/asl:choice&gt;
            &lt;/asl:element&gt;
            
            &lt;/asl:active-schema&gt;
            
         </div>
         <div class="para e235">However, we have seen that ASL doesn't work alone: we can inject foreign instructions
            that the engine will use to build the content model.
            We could then append in the 
            <div class="code e236">&lt;asl:choice&gt;</div> a reference to the XCL namespace, which can be written like this:
         </div>
         <div class="programlisting e237" xml:space="preserve">
            &lt;!--any element in the XCL namespace--&gt;
            &lt;asl:element ref-ns="xcl"
            xmlns:xcl="http://ns.inria.org/active-tags/xcl"/&gt;
            
         </div>
         <div class="para e238">...but it is not enough. In fact, since we don't know how the user will define its
            content model, almost anything should be allowed:
            we can't make assumptions about which tag will help him and which one won't. The content
            model would become:
         </div>
         <div class="programlisting e239" xml:space="preserve">
            &lt;asl:element name="asl:element"&gt;
            &lt;asl:attribute name="name" ref-type="xs:string"/&gt;
            &lt;asl:choice min-occurs="0" max-occurs="unbounded"&gt;
            &lt;asl:element ref-ns="#any"/&gt;
            &lt;/asl:choice&gt;
            &lt;/asl:element&gt;
            
         </div>
         <div class="para e240">...which means basically: well, everything is accepted. Not so useful.
            This is the downside of the system: since almost everything is dynamic, we can't predict
            which tag will come.
            Yet some are acceptable, others aren't.
         </div>
         <div class="para e241">On the opposite, we do know after running the content model (not this one but those
            with the if-then-else statement shown in the chapter about dynamicity) that the realization
            of the schema must conform to the schema that we started to write above (not those
            with ref-ns="#any", but the one before). Unfortunately, it is designed to validate
            XML (its static representation), not to validate the underlying software components
            (its dynamic representation): element definitions, sequences, choices are software
            components whose relationships are expressed with XML tags. We know how to express
            constraints on XML tags, but we don't know how to express constraints on such pluggable
            components because although they are exposed as XML tags they are no longer XML tags
            at runtime.
         </div>
         <div class="para e242">ASL doesn't face this kind of validation. We could imagine schemas that would act
            on a higher dimension of validation -hyperschemas- and schemas that would act on both
            level, multidimensional schemas. This is a funny thought that was encountered while
            designing Active Tags, and that of course can be generalized for components that are
            not related to schemas: in many cases, the author had to express components contents
            in terms of parts that are static and validable with a schema, and parts that are
            dynamic and validable with an hyperschema.
         </div>
         <div class="para e243">So far, no acceptable solution was found.</div>
      </div><a name="ConclusionandperspectivesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e244">
         <div class="title e245">Conclusion and perspectives</div>
         <div class="para e246">Hyperschemas don't have obviously a practical field of application out of the scope
            of Active Tags. However, they pose the right questions to similar systems that would
            need more flexibility and dynamicity in software components assembly.
         </div>
         <div class="para e247">On the opposite, the other use cases exposed (dynamic content models, semantic typed
            data, and mixins) are more pragmatic since they address elegantly and efficiently
            common issues in schema technologies.
         </div>
         <div class="para e248">We have seen that active content models enhance the expressiveness of schemas, that
            if a data has some meaning for you, it should have some meaning too for the applications
            that process it, and that mixins allow DTD-nostalgic people to leverage their usage.
         </div>
         <div class="para e249">Through those few manifestations of "schemas mashups", we have to admit that there
            are better solutions than running schemas alone. Actually, ASL is not so different
            from other schema technologies (DTD, W3C XML Schema, Relax NG, Schematron) but immensely
            more powerful. By extension, ASL should opens the perspective for declarative languages
            in general: Active Tags combine a bunch of XML technologies that would help significantly
            the designers of runnable markup languages.
         </div>
      </div><a name="BibliographyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e250">
         <div class="title e251">Bibliography</div>
         <div class="bibliomixed e252" xml:id="ActiveCatalog" xreflabel="Active Catalog">Poulard, P. 
            <div class="emphasis e253">Active Catalog</div>.
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e254" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://ns.inria.fr/active-tags/active-catalog/active-catalog.html</div>.
         </div>
         <div class="bibliomixed e255" xml:id="ActiveTags" xreflabel="Active Tags">Poulard, P. 
            <div class="emphasis e256">Active Tags technologies</div>.
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e257" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://ns.inria.org/active-tags/</div>.
         </div>
         <div class="bibliomixed e258" xml:id="ASL" xreflabel="ASL">Poulard, P. 
            <div class="emphasis e259">The Active Schema Language</div>.
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e260" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://ns.inria.fr/active-tags/active-schema/active-schema.html</div>.
         </div>
         <div class="bibliomixed e261" xml:id="DSDLp9" xreflabel="ISO/DSDL part 9">
            <div class="emphasis e262">DSDL (Document Schema Definition Languages) — Part 9: Namespace- and datatype-aware
               DTDs
            </div>, ISO/IEC CD 19757-9.
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e263" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://dsdl.org/dsdl-9-rev061103.pdf</div>.
         </div>
         <div class="bibliomixed e264" xml:id="DTLL" xreflabel="DTLL">Tennison J. (2006). 
            <div class="emphasis e265">Datatypes for XML: the Datatyping Library Language (DTLL)</div>. In Proceedings of Extreme Markup Languages, Montréal, Canada. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e266" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.idealliance.org/papers/extreme/proceedings/html/2006/Tennison01/EML2006Tennison01.html</div>.
         </div>
         <div class="bibliomixed e267" xml:id="Jelly" xreflabel="Jelly">
            <div class="emphasis e268">Jelly: Executable XML</div>. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e269" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://jakarta.apache.org/commons/jelly/</div>.
         </div>
         <div class="bibliomixed e270" xml:id="JSP" xreflabel="JSP">
            <div class="emphasis e271">JSP: JavaServer Pages Technology</div>. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e272" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://java.sun.com/products/jsp/</div>.
         </div>
         <div class="bibliomixed e273" xml:id="JSTL" xreflabel="JSTL">
            <div class="emphasis e274">JSTL: JavaServer Pages Standard Tag Library</div>. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e275" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://java.sun.com/products/jsp/jstl/</div>.
         </div>
         <div class="bibliomixed e276" xml:id="Murata" xreflabel="Murata">Murata, M. (2002). 
            <div class="emphasis e277">Principles of Schema Languages</div>. In H. Maruyama (Ed.), 
            <div class="emphasis e278">XML and Java (2nd ed.)</div> (pp. 592-601). Boston, MA: Pearson Education.
         </div>
         <div class="bibliomixed e279" xml:id="MSV" xreflabel="MSV">Kawaguchi, K. 
            <div class="emphasis e280">Sun Multi-Schema Validator</div>. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e281" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">https://msv.dev.java.net/</div>.
         </div>
         <div class="bibliomixed e282" xml:id="NVDL" xreflabel="NVDL">
            <div class="emphasis e283">NVDL: Namespace-based Validation Dispatching Language</div>, ISO/IEC 19757-4 NVDL. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e284" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.nvdl.org/</div>.
         </div>
         <div class="bibliomixed e285" xml:id="XMLCatalogs" xreflabel="OASIS XML Catalogs">Walsh, N. (2005). 
            <div class="emphasis e286">XML Catalogs</div>, OASIS Standard V1.1.
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e287" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.oasis-open.org/committees/download.php/14809/xml-catalogs.html</div>.
         </div>
         <div class="bibliomixed e288" xml:id="Poulard" xreflabel="Poulard">Poulard, P. (2007). 
            <div class="emphasis e289">Active Tags: Mastering XML with XML</div>. In Proceedings of Extreme Markup Languages, Montréal, Canada. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e290" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.idealliance.org/papers/extreme/proceedings/html/2007/Poulard01/EML2007Poulard01.html</div>.
         </div>
         <div class="bibliomixed e291" xml:id="RefleX" xreflabel="RefleX">Poulard, P. 
            <div class="emphasis e292">RefleX: An Active Tags engine in Java</div>.
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e293" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://reflex.gforge.inria.fr/</div>.
         </div>
         <div class="bibliomixed e294" xml:id="RelaxNG" xreflabel="Relax NG">
            <div class="emphasis e295">Relax NG: Regular-grammar-based validation</div>, ISO/IEC FDIS 19757-2.
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e296" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.y12.doe.gov/sgml/sc34/document/0362_files/relaxng-is.pdf</div>.
         </div>
         <div class="bibliomixed e297" xml:id="SCXML" xreflabel="SCXML">
            <div class="emphasis e298">SCXML: State Machine Notation for Control Abstraction</div>, W3C Working Draft. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e299" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/scxml/</div>.
         </div>
         <div class="bibliomixed e300" xml:id="Schematron" xreflabel="Schematron">Jelliffe, R. 
            <div class="emphasis e301">Schematron: A language for making assertions about patterns found in XML documents</div>.
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e302" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.schematron.com/spec.html</div>.
         </div>
         <div class="bibliomixed e303" xml:id="UEL" xreflabel="UEL">
            <div class="emphasis e304">UEL: Unified Expression Language</div>. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e305" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://java.sun.com/products/jsp/reference/techart/unifiedEL.html</div>.
         </div>
         <div class="bibliomixed e306" xml:id="WUnit" xreflabel="WUnit">Poulard, P. 
            <div class="emphasis e307">WUnit: Unit tests for Web applications</div>. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e308" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://reflex.gforge.inria.fr/wunit.html</div>.
         </div>
         <div class="bibliomixed e309" xml:id="WXS" xreflabel="W3C XML Schema">
            <div class="emphasis e310">XML Schema Part 1: Structures Second Edition</div>, W3C Recommendation.
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e311" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xmlschema-1/</div>.
         </div>
         <div class="bibliomixed e312" xml:id="WXS-D" xreflabel="W3C XML Schema: Datatypes">
            <div class="emphasis e313">XML Schema Part 2: Datatypes (2nd ed.)</div>, W3C Recommendation. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e314" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xmlschema-2/</div>.
         </div>
         <div class="bibliomixed e315" xml:id="WXS-11" xreflabel="W3C XML Schema 1.1">
            <div class="emphasis e316">W3C XML Schema Definition Language (XSD) 1.1 Part 1: Structures</div>, W3C Working Draft.
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e317" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xmlschema11-1/</div>.
         </div>
         <div class="bibliomixed e318" xml:id="XCL" xreflabel="XCL">Poulard, P. 
            <div class="emphasis e319">The XML Control Language</div>.
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e320" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://ns.inria.org/active-tags/xcl/xcl.html</div>.
         </div>
         <div class="bibliomixed e321" xml:id="XDM" xreflabel="XDM">
            <div class="emphasis e322">XQuery/XPath Data Model (XDM) 1.0</div>, W3C Recommendation. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e323" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xpath-datamodel/</div>.
         </div>
         <div class="bibliomixed e324" xml:id="XPath" xreflabel="XPath">
            <div class="emphasis e325">XML Path Language</div>, W3C Recommendation. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e326" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xpath</div>.
         </div>
         <div class="bibliomixed e327" xml:id="XProc" xreflabel="XProc">
            <div class="emphasis e328">XProc: An XML Pipeline Language</div>, W3C Working Draft.
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e329" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/2006/WD-xproc-20061117/</div>.
         </div>
         <div class="bibliomixed e330" xml:id="XQuery" xreflabel="XQuery">
            <div class="emphasis e331">XQuery 1.0: An XML Query Language</div>, W3C Recommendation. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e332" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xquery/</div>.
         </div>
         <div class="bibliomixed e333" xml:id="XSLT" xreflabel="XSLT">Clark, J. (1999). 
            <div class="emphasis e334">XSL Transformations (XSLT) 1.0</div>, W3C Recommendation.
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e335" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xslt</div>.
         </div>
         <div class="bibliomixed e336" xml:id="XUnit" xreflabel="XUnit">Poulard, P. 
            <div class="emphasis e337">XUnit: XML-based unit tests</div>. 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e338" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://reflex.gforge.inria.fr/xunit.html</div>.
         </div>
      </div>
   </div>
</div>