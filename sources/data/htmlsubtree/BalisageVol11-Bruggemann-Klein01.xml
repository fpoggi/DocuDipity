<div id="mainContainerTOC">
   <div id="mainContainerTitleTOC" onclick="$('#mainContainerEntriesTOC').toggle('1000');">Table of Content</div>
   <div id="mainContainerEntriesTOC" style="display:none;">
      <div class="headedContainerTOC">
         <div class="headedContainerTitleTOC"><a href="#GeneratingSchemaAwareXMLEditorsinXFormsANCHOR" name="GeneratingSchemaAwareXMLEditorsinXFormsTOC">Generating Schema-Aware XML Editors in XForms</a></div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#IntroductionANCHOR" name="IntroductionTOC">Introduction</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ArchitectureANCHOR" name="ArchitectureTOC">Architecture</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#AtourofprinciplesforXFormseditorsANCHOR" name="AtourofprinciplesforXFormseditorsTOC">A tour of principles for XForms editors</a></div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#DisplayingstructureseditingdatavaluesANCHOR" name="DisplayingstructureseditingdatavaluesTOC">Displaying structures, editing data values</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#Editingstructures:ThedownwardsfacingperspectiveANCHOR" name="Editingstructures:ThedownwardsfacingperspectiveTOC">Editing structures: The downwards-facing perspective</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#Editingstructures:TheupwardfacingperspectiveANCHOR" name="Editingstructures:TheupwardfacingperspectiveTOC">Editing structures: The upward-facing perspective</a></div>
            </div>
            <div class="headedContainerTOC">
               <div class="headedContainerTitleTOC"><a href="#EditingmixedcontentANCHOR" name="EditingmixedcontentTOC">Editing mixed content</a></div>
            </div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ImplementationANCHOR" name="ImplementationTOC">Implementation</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#RelatedworkANCHOR" name="RelatedworkTOC">Related work</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#DiscussionconclusionsandfurtherworkANCHOR" name="DiscussionconclusionsandfurtherworkTOC">Discussion, conclusions and further work</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#AcknowledgementANCHOR" name="AcknowledgementTOC">Acknowledgement</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#ThepurchaseorderexampleANCHOR" name="ThepurchaseorderexampleTOC">The purchase order example</a></div>
         </div>
         <div class="headedContainerTOC">
            <div class="headedContainerTitleTOC"><a href="#BibliographyANCHOR" name="BibliographyTOC">Bibliography</a></div>
         </div>
      </div>
   </div>
</div>
<div id="mainContainerTERMS">
   <div id="mainContainerTitleTERMS" onclick="$('#mainContainerEntriesTERMS').toggle('1000')">Index of Terms</div>
   <div id="mainContainerEntriesTERMS" style="display:none;">
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">a</div>
         <div class="singletermTERMS">Automatic Text Insertion</div>
         <div class="singletermTERMS">August 5, 2013</div>
         <div class="singletermTERMS">Anne</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">b</div>
         <div class="singletermTERMS">brueggem@in.tum.de</div>
         <div class="singletermTERMS">Brüggemann-Klein</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">c</div>
         <div class="singletermTERMS">Coupled Inputs</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">d</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">e</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">f</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">g</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">h</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">i</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">j</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">k</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">l</div>
         <div class="singletermTERMS">Liberal Inputs</div>
         <div class="singletermTERMS">Liberal Edits</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">m</div>
         <div class="singletermTERMS">maalej@in.tum.de</div>
         <div class="singletermTERMS">Mustapha</div>
         <div class="singletermTERMS">Maalej</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">n</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">o</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">p</div>
         <div class="singletermTERMS">Prototype</div>
         <div class="singletermTERMS">Processing XForms in HTML5-Enabled Browsers</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">q</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">r</div>
         <div class="singletermTERMS">Reference Control</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">s</div>
         <div class="singletermTERMS">Stepwise XPath</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">t</div>
         <div class="singletermTERMS">Try and Tell</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">u</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">v</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">x</div>
         <div class="singletermTERMS">xforms:insert</div>
         <div class="singletermTERMS">xforms:delete</div>
         <div class="singletermTERMS">xforms:repeat</div>
         <div class="singletermTERMS">xforms:select1</div>
         <div class="singletermTERMS">XForms 1.1</div>
         <div class="singletermTERMS">XML Schema Part 2: Datatypes Second Edition</div>
         <div class="singletermTERMS">XForms Essentials</div>
         <div class="singletermTERMS">XBL 2.0</div>
         <div class="singletermTERMS">XML Schema Part 1: Structures Second Edition</div>
         <div class="singletermTERMS">XML Schema Part 0: Primer Second Edition</div>
         <div class="singletermTERMS">XML editor</div>
         <div class="singletermTERMS">XForms</div>
         <div class="singletermTERMS">XML Schema</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">y</div>
      </div>
      <div class="letterContainerTERMS">
         <div class="letterlableTERMS">z</div>
      </div>
   </div>
</div>
<div id="mainContainerIML"><a name="GeneratingSchemaAwareXMLEditorsinXFormsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="article e0" version="5.0-subset Balisage-1.3" xml:id="HR-23632987-8973">
      <div class="title e1">Generating Schema-Aware XML Editors in XForms</div>
      <div class="info e2">
         <div class="confgroup e3">
            <div class="conftitle e4">International Symposium on Native XML User Interfaces</div>
            <div class="confdates e5">August 5, 2013</div>
         </div>
         <div class="abstract e6">
            <div class="para e7">From XForms, it is possible to provide simple user interfaces for editing XML
               documents. From an XSD schema, it is possible to see which elements and attributes
               may occur in valid documents and in which combinations. The XFGen system brings
               these together. XFGen builds an XForm from an XSD schema. That XForm can load, edit,
               and save any XML instance conforming to the schema. XFGen guarantees that every user
               interaction with the editor will preserve the validity of the instance. XForms makes
               it easy to edit structurally fixed XML-encoded forms; XFGen’s editors go beyond this
               simple case to allow arbitrary structural changes to the document.
            </div>
         </div>
         <div class="author e8">
            <div class="personname e9">
               <div class="firstname e10">Mustapha</div>
               <div class="surname e11">Maalej</div>
            </div>
            <div class="personblurb e12">
               <div class="para e13"></div>
            </div>
            <div class="affiliation e14">
               <div class="jobtitle e15"></div>
               <div class="orgname e16">Technische Universität München</div>
            </div>
            <div class="email e17">maalej@in.tum.de</div>
         </div>
         <div class="author e18">
            <div class="personname e19">
               <div class="firstname e20">Anne</div>
               <div class="surname e21">Brüggemann-Klein</div>
            </div>
            <div class="personblurb e22">
               <div class="para e23"></div>
            </div>
            <div class="affiliation e24">
               <div class="jobtitle e25"></div>
               <div class="orgname e26">Technische Universität München</div>
            </div>
            <div class="email e27">brueggem@in.tum.de</div>
         </div>
         <div class="legalnotice e28">
            <div class="para e29">Copyright © 2013 by the authors. Used with permission.</div>
         </div>
         <div class="keywordset e30" role="author">
            <div class="keyword e31">XML editor</div>
            <div class="keyword e32">XForms</div>
            <div class="keyword e33">XML Schema</div>
         </div>
      </div><a name="IntroductionANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e34">
         <div class="title e35">Introduction</div>
         <div class="para e36">In his PhD work&nbsp;[
            <div class="xref e37" linkend="MMThesis"></div>], the first author of this paper,
            under the second author's supervision, is designing and implementing a system called
            XFGen, that generates a schema-aware XML editor XFGen(s) for each XSD schema&nbsp;s. The
            key achievement of this work is that the editor XFGen(s) is an XForms document that
            is
            capable of creating or loading, editing and saving any XML instance that conforms
            to the
            schema&nbsp;s; each user interaction with XFGen(s) preserves validity of the XML
            instance against schema&nbsp;s. XFGen(s) is much more than a form editor. It goes beyond
            letting users fill out data fields for a structurally static XML document in that
            it
            enables editing of structure, too. Each editor XFGen(s) is indeed a fully functional
            schema-aware XML editor. Here are some crucial properties of the editors that XFGen
            generates:
         </div>
         <div class="itemizedlist e38">
            <div class="listitem e39">
               <div class="para e40">Strictly schema-aware (schema instances always in schema-conformant
                  state).
               </div>
            </div>
            <div class="listitem e41">
               <div class="para e42">Implemented as an (extended) XForms document.</div>
            </div>
            <div class="listitem e43">
               <div class="para e44">Supporting a large part of XML Schema.</div>
            </div>
            <div class="listitem e45">
               <div class="para e46">Completely independent of XML instances, capable of loading or creating from
                  scratch, editing and saving any schema-conformant document.
               </div>
            </div>
         </div>
         <div class="para e47">The generator XFGen covers nearly the complete XML Schema specification. It handles,
            most importantly:
         </div>
         <div class="itemizedlist e48">
            <div class="listitem e49">
               <div class="para e50">Elements declared as complex types</div>
            </div>
            <div class="listitem e51">
               <div class="para e52">Elements declared with simple content</div>
            </div>
            <div class="listitem e53">
               <div class="para e54">Recursive type definitions</div>
            </div>
            <div class="listitem e55">
               <div class="para e56">Mixed-content declarations</div>
            </div>
            <div class="listitem e57">
               <div class="para e58">Multiple potential top-level elements (elements declared globally)</div>
            </div>
            <div class="listitem e59">
               <div class="para e60">Identity constraints</div>
            </div>
            <div class="listitem e61">
               <div class="para e62">Attribute declarations</div>
            </div>
            <div class="listitem e63">
               <div class="para e64">Predefined simple types</div>
            </div>
            <div class="listitem e65">
               <div class="para e66">A wide range of facets in simple type restrictions</div>
            </div>
            <div class="listitem e67">
               <div class="para e68">Union of simple types</div>
            </div>
            <div class="listitem e69">
               <div class="para e70">Lists of simple type</div>
            </div>
         </div>
         <div class="para e71">Other parts of XML Schema are also supported, but did not require great effort, since
            their support mostly rests on standard schema validation. They are: inheritance,
            substitution groups, namespaces, inclusions, attribute and element groups. Furthermore,
            we wish to emphasize that element and attribute declarations as well as type definitions
            can all be local or global.
         </div>
         <div class="para e72">The remainder of this paper is organized into five sections as follows: The next
            section is about architecture; it illustrates the interplay between components and
            briefly describes the architecture of the editors that XFGen generates. The main part
            of
            the paper is a tour of principles that we have used with XFGen; we cover editing of
            data
            values, editing of non-recursive structures and editing of mixed content. After that,
            we
            have sections about implementation and related work, before we conclude. For further
            illustration, we provide an appendix with editor screen shots for the purchase order
            example from the XML Schema Recommendation&nbsp;
            <div class="xref e73" linkend="XSPrimer"></div>.
         </div>
         <div class="para e74">The complete XForms generator XFGen is ready for demo at Balisage 2013. In this paper,
            we point out some of the challenges of XForms as an implementation technology for
            a
            schema-aware editor and demonstrate some of the principles and techniques that make
            such
            editors possible. A complete description can be found in Maalej's PhD thesis&nbsp;[
            <div class="xref e75" linkend="MMThesis"></div>].
         </div>
      </div><a name="ArchitectureANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e76">
         <div class="title e77">Architecture</div>
         <div class="para e78">Components and their interactions are illustrated in 
            <div class="xref e79" linkend="fig.CMinUML"></div>.
         </div>
         <div class="figure e80" xml:id="fig.CMinUML">
            <div class="title e81">Components and their interaction</div>
            <div class="mediaobject e82">
               <div class="imageobject e83">
                  <div class="metaBox e84"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e130').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e130" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e84'
                           </span><span class="metaAttribute">fileref='../../../vol11/graphics/Bruggemann-Klein01/Bruggemann-Klein01-001.png'
                           </span><span class="metaAttribute">format='png'
                           </span><span class="metaAttribute">width='100%'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="para e85">The editors (XForms documents) that XFGen produces are complex pieces of software
            that
            conceptually follow the Model-View-Controller (MVC) architecture. They are realized
            as
            extended XForms.
         </div>
         <div class="para e86">The data of each editor consist of the XML instance, that is to be edited and can
            be
            loaded, freshly created, replaced and saved on demand, and of some auxiliary state,
            comprising among others prototype structures that can be copied into the XML instance
            during editing under action control. The editor's data are contained in the data-model
            section of the form. The form's data model also holds declarative constraints for
            the
            editor's data, expressed as XForms bindings, and actions that will be triggered during
            the form's life, for example for editing. Conceptually, with respect to MVC, some
            of the
            latter are part of the controller.
         </div>
         <div class="para e87">The view of each editor is defined by templates of XForms widgets, that are embedded
            into a host language, most commonly HTML, but we have also tested XUL. The view is
            generated by XFGen.
         </div>
         <div class="para e88">The controller of each editor consists of XForms actions and custom scripts that XFGen
            inserts into XForms; they are executed by the XForms engine in the XForms client.
         </div>
      </div><a name="AtourofprinciplesforXFormseditorsANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e89">
         <div class="title e90">A tour of principles for XForms editors</div>
         <div class="para e91">What are the principles that govern how the XFGen-generated XForms editors are built?
            In this section we illustrate them incrementally by example. We show the XForms code
            that is generated and how it is executed in a browser, for a series of XSD examples.
            And
            we explain systematically the underlying principles.
         </div><a name="DisplayingstructureseditingdatavaluesANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e92">
            <div class="title e93">Displaying structures, editing data values</div>
            <div class="para e94">We first present simplified editors that allow editing of purely textual element
               content, but just display the document structure, not yet enabling structural
               editing. These editors could be used as classical form editors for a
               structurally-fixed XML-encoded form. At first, we restrict ourselves to elements.
               This is not a severe restriction; it will be easy to add attributes and editing
               support for them. Furthermore, we do not allow mixed content yet. Finally, we
               exclude recursive type definitions for now; this feature of XML Schema requires
               further techniques, that fall outside the scope of this section.
            </div>
            <div class="para e95">The challenge of this section is to generate a static structure of XForms widgets
               that only depends on the input schema but that is able to bind to any XML instance,
               that conforms to the schema, and to display it. The key idea is to generate a
               liberal structure of XForms widgets that is capable of displaying a superset of the
               required XML instances. For example, if the schema uses a choice operator, we
               generate widgets for all alternatives. Each widget tries to bind to some element in
               the XML instance, but only some of them succeed, depending on the choice that the
               current instance realizes. We rely on the fact that "superfluous" widgets do not
               display when the referenced nodes in the current XML instance do not exist. We call
               this principle 
               <div class="emphasis e96" role="bold">Liberal Inputs</div>.
            </div>
            <div class="para e97">Let us look at the schema liberalInputsS, see 
               <div class="xref e98" linkend="fig.liberalInputsS"></div>. It provides one root element, xyz, that can have one or two subsequences of one
               or two subelements a and one or two subelements b. Element a is typed as xsd:int and
               element b is typed as xsd:boolean. Now we are looking at the editor that we have
               generated, the XForms document liberalInputsF, see 
               <div class="xref e99" linkend="fig.liberalInputsF"></div>: It has a repeating group of one widget refering
               to an element a and one widget refering to an element b, each of which enables
               editing of the element's text content. Finally, let us load the editor with the XML
               instance liberalInputsI in 
               <div class="xref e100" linkend="fig.liberalInputsI"></div> that conforms to the
               schema liberalInputsS. Then, the XForms element xforms:repeat iterates over all
               children of element xyz in the current XML instance, displaying the appropriate
               input widget for each element a or b that is met, as illustrated in 
               <div class="xref e101" linkend="fig.liberalInputsB"></div>. This form could in principle display any
               sequence of elements a and b, even those that do not conform to the type of element
               xyz, depending on the XML instance. But we may assume that the XML instance is valid
               with respect to the schema when it is loaded; and the user interactions that we will
               later introduce, always preserve validity. Hence, it does not matter that the widget
               structure is more liberal than the schema.
            </div>
            <div class="figure e102" xml:id="fig.liberalInputsS">
               <div class="title e103">XML Schema liberalInputsS</div>
               <div class="mediaobject e104">
                  <div class="imageobject e105">
                     <div class="metaBox e106"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e169').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e169" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e106'
                              </span><span class="metaAttribute">fileref='../../../vol11/graphics/Bruggemann-Klein01/Bruggemann-Klein01-002.png'
                              </span><span class="metaAttribute">format='png'
                              </span><span class="metaAttribute">width='100%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="figure e107" xml:id="fig.liberalInputsF">
               <div class="title e108">XForms liberalInputsF</div>
               <div class="mediaobject e109">
                  <div class="imageobject e110">
                     <div class="metaBox e111"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e175').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e175" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e111'
                              </span><span class="metaAttribute">fileref='../../../vol11/graphics/Bruggemann-Klein01/Bruggemann-Klein01-003.png'
                              </span><span class="metaAttribute">format='png'
                              </span><span class="metaAttribute">width='100%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="figure e112" xml:id="fig.liberalInputsI">
               <div class="title e113">XML instance liberalInputsI</div>
               <div class="mediaobject e114">
                  <div class="imageobject e115">
                     <div class="metaBox e116"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e181').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e181" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e116'
                              </span><span class="metaAttribute">fileref='../../../vol11/graphics/Bruggemann-Klein01/Bruggemann-Klein01-004.png'
                              </span><span class="metaAttribute">format='png'
                              </span><span class="metaAttribute">width='100%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="figure e117" xml:id="fig.liberalInputsB">
               <div class="title e118">Editor screen shot liberalInputsB</div>
               <div class="mediaobject e119">
                  <div class="imageobject e120">
                     <div class="metaBox e121"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e187').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e187" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e121'
                              </span><span class="metaAttribute">fileref='../../../vol11/graphics/Bruggemann-Klein01/Bruggemann-Klein01-005.png'
                              </span><span class="metaAttribute">format='png'
                              </span><span class="metaAttribute">width='100%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e122">Some further points and easy generalizations:</div>
            <div class="itemizedlist e123">
               <div class="listitem e124">
                  <div class="para e125">XForms processors provide some processor-specific type-aware editing
                     support and complete validation for data values that are typed with
                     pre-defined XML Schema simple types. Hence, the example editor
                     liberalInputsF in 
                     <div class="xref e126" linkend="fig.liberalInputsF"></div> supports XForms
                     processor-dependent type-aware editing and complete validation of the
                     contents of elements a and b out of the box, as seen in 
                     <div class="xref e127" linkend="fig.liberalInputsB"></div>. Custom simple types, which are defined
                     using restriction, union or list, require special treatment that is
                     described in Maalej's PhD thesis&nbsp;[
                     <div class="xref e128" linkend="MMThesis"></div>].
                  </div>
               </div>
               <div class="listitem e129">
                  <div class="para e130">If a schema has several globally declared elements, each of them is
                     allowed as the top-most element of a schema-conformant XML instance.
                     Following the Liberal Inputs principle, we generate a set of widgets for
                     each of these elements, and only one of them will display for any given XML
                     instance that is loaded into the editor, because only one of them will
                     successfully bind to the unique top-level element of the current XML
                     instance. Consequently, we can load the editor with any schema-conformant
                     document, regardless of its root element, and we can also switch to a
                     different root element during an edit session without changing the
                     editor.
                  </div>
               </div>
               <div class="listitem e131">
                  <div class="para e132">The same idea as in the previous item is used when a type definition
                     contains the choice operator.
                  </div>
               </div>
               <div class="listitem e133">
                  <div class="para e134">What if the schema allows for deeper element hierarchies? We must ensure
                     that bindings from widget elements into the XML instance can be expressed in
                     XPath, without consideration for expressive features of XML Schema such as
                     context-dependent element declarations. We achieve that by having the
                     hierarchy of XForms widgets mirror the element hierarchy of the schema,
                     following the XForms pattern 
                     <div class="emphasis e135" role="ital">Stepwise
                        XPath
                     </div>&nbsp;[D2003]]. Then bindings into the XML instance are
                     always defined relatively to the parent level, by element name only. There
                     is a catch, though: If two top-level elements of a type definition have the
                     same name but different types, then we have to generate two different widget
                     structures for them and cannot bind them into the XML instance by the
                     (ambiguous) element name. Fortunately, XML Schema forbids this type of
                     ambiguity.
                  </div>
               </div>
               <div class="listitem e136">
                  <div class="para e137">Why did we preclude recursion in type definitions for the simple schemas
                     that we can handle in this section? Recursion in a type definition would
                     lead to an infinite, non-halting generation of widget structures. To stop
                     recursion when generating XForms widget structures, widgets would have to
                     refer to and reuse previously defined structures, a feature not provided by
                     XForms. Our solution is to expand XForms with a new type of reference
                     control and support it with an extension to the XForms processor. This
                     principle, 
                     <div class="emphasis e138" role="bold">Reference Control</div>, is further
                     explained in Maalej's PhD thesis&nbsp;[
                     <div class="xref e139" linkend="MMThesis"></div>].
                  </div>
               </div>
               <div class="listitem e140">
                  <div class="para e141">It is easy to extend our approach so far to attributes, by adding a set of
                     input widgets to the group of each element declaration, one for each
                     potential attribute. Once more, the Liberal Inputs principle applies.
                  </div>
               </div>
               <div class="listitem e142">
                  <div class="para e143">Just for purposes of display, we could also handle mixed content in
                     element instances, by letting the xforms:repeat iterate not only over
                     sub-elements but also over text node children. We use a different technique,
                     though, for supporting insert and delete of text nodes, which we explain
                     later in this paper.
                  </div>
               </div>
            </div>
            <div class="para e144">We can now algorithmically describe how to generate an XForms editor that allows
               editing of text content but only displays structure&nbsp;[
               <div class="xref e145" linkend="MMThesis"></div>].
            </div>
         </div><a name="Editingstructures:ThedownwardsfacingperspectiveANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e146">
            <div class="title e147">Editing structures: The downwards-facing perspective</div>
            <div class="para e148">One novelty of this work is that our editors support editing not only of data
               values, as demonstrated in the previous section, but also of structures. XForms
               provides some basic support for insertion and deletion of nodes in an XML instance,
               with its actions 
               <div class="code e149">xforms:insert</div> and 
               <div class="code e150">xforms:delete</div> that can
               be triggered under user control. The challenge is to make sure that editors only
               allow for schema-conformant changes of XML instances.
            </div>
            <div class="para e151">In this section, we take the downwards-facing perspective. We demonstrate our
               
               <div class="emphasis e152" role="bold">Prototype</div> principle, which guarantees that only
               such element structures are inserted into an XML instance that by themselves conform
               to their declared type. We'll address the upward-facing perspective, how deletions
               and insertions of children nodes can be forced to respect their parent's type, in
               the next section.
            </div>
            <div class="para e153">If we wish to insert an element that conforms to some type into an XML instance,
               we'll insert a whole structure, with subelements and attributes as required by the
               type. We precompute in XFGen one minimal structure that conforms to the type and
               call it the element's prototype&nbsp;[
               <div class="xref e154" linkend="MMThesis"></div>].
            </div>
            <div class="para e155">The 
               <div class="code e156">xforms:insert</div> action cannot create new structures; rather, it can
               only clone structures that are already present somewhere in the form's model.
               Therefore, XFGen builds an auxiliary instance that holds all prototype element
               structures and attributes of the schema, which can then be cloned and inserted into
               the form's XML instance under action control.
            </div>
            <div class="para e157">Once a prototype has been inserted into the XML instance, the user can further
               edit it. Right now, XFGen computes some arbitrary prototype that conforms to the
               required type definition and cannot be further reduced by omitting attributes or
               subelements. The schema author can influence which prototype is generated by the
               order of choice operands in a type definition. Currently, XFGen always instantiates
               the first choice operand for a prototype.
            </div>
            <div class="para e158">The auxilliary instance with the prototypes for Schema liberalInputsS in 
               <div class="xref e159" linkend="fig.liberalInputsS"></div> is in 
               <div class="xref e160" linkend="fig.liberalInputsP"></div>.
            </div>
            <div class="figure e161" xml:id="fig.liberalInputsP">
               <div class="title e162">Auxilliary instance liberalInputsP</div>
               <div class="mediaobject e163">
                  <div class="imageobject e164">
                     <div class="metaBox e165"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e268').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e268" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e165'
                              </span><span class="metaAttribute">fileref='../../../vol11/graphics/Bruggemann-Klein01/Bruggemann-Klein01-006.png'
                              </span><span class="metaAttribute">format='png'
                              </span><span class="metaAttribute">width='100%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </div><a name="Editingstructures:TheupwardfacingperspectiveANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e166">
            <div class="title e167">Editing structures: The upward-facing perspective</div>
            <div class="para e168">We now address the problem how to support insertion and deletion of children nodes
               such that the result necessarily conforms to the parent node's type.
            </div>
            <div class="para e169">Let us consider schema editControlsS in 
               <div class="xref e170" linkend="fig.editControlsS"></div>, that
               allows top-level element xyz to have subelements a, b and c with the following
               additional constraints: The subelements of xyz either form a nonempty sequence of
               a,
               followed by a nonempty sequence of b, or consist just of a single c. In compact
               regular-expression notation, that is
               (a
               <div class="superscript e171">+</div>b
               <div class="superscript e172">+</div>)|c.
            </div>
            <div class="figure e173" xml:id="fig.editControlsS">
               <div class="title e174">Schema editControlsS</div>
               <div class="mediaobject e175">
                  <div class="imageobject e176">
                     <div class="metaBox e177"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e289').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e289" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e177'
                              </span><span class="metaAttribute">fileref='../../../vol11/graphics/Bruggemann-Klein01/Bruggemann-Klein01-007.png'
                              </span><span class="metaAttribute">format='png'
                              </span><span class="metaAttribute">width='100%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e178">Our goal is to offer a finite number of primitive edit operations, so that any
               schema-conformant sequence u
               <div class="subscript e179">1</div>...u
               <div class="subscript e180">m</div> of
               children of xyz can be transformed into any other schema-conformant sequence
               v
               <div class="subscript e181">1</div>...v
               <div class="subscript e182">n</div> by applying a finite
               number of the primitive edit operations, one after another, in such a way that each
               intermediate step leads also to a schema-conformant intermediate sequence.
            </div>
            <div class="para e183">In our example, we generate the following set of primitive edit operations:</div>
            <div class="itemizedlist e184">
               <div class="listitem e185">
                  <div class="para e186">P1: insert a</div>
               </div>
               <div class="listitem e187">
                  <div class="para e188">P2: insert b</div>
               </div>
               <div class="listitem e189">
                  <div class="para e190">P3: delete a</div>
               </div>
               <div class="listitem e191">
                  <div class="para e192">P4: delete b</div>
               </div>
               <div class="listitem e193">
                  <div class="para e194">P5: delete ab, insert c</div>
               </div>
               <div class="listitem e195">
                  <div class="para e196">P6: delete c, insert ab</div>
               </div>
               <div class="listitem e197">
                  <div class="para e198">P7: insert c</div>
               </div>
               <div class="listitem e199">
                  <div class="para e200">P8: delete c</div>
               </div>
               <div class="listitem e201">
                  <div class="para e202">P9: insert ab</div>
               </div>
               <div class="listitem e203">
                  <div class="para e204">P10: delete ab</div>
               </div>
            </div>
            <div class="para e205">For simplicity's sake, we include "P7: insert c" in our supply of primitive edit
               operations, although it can never be used in a schema-conformant transformation. We
               can only insert a c if we also delete every a and b that might be present. And we
               can break down such a combined operation into a number of primitive edits, first
               deleting any single a and b except one, respectively, with P3 and P4, and then
               deleting the last remaining sequence ab and simultaneously inserting c with P5.
               Following the same argument, P8, P9 and P10 can also never be used in a
               schema-conformant transformation.
            </div>
            <div class="para e206">We cannot do without primitive P5 simulating P5 by the sequence P3 P4 P7, since
               intermediate states would not be schema-conformant.
            </div>
            <div class="para e207">Of course, unwise application of primitive edit operations can lead to
               non-schema-conformant states. If we apply P5 in the middle of sequence aab, between
               a and b, we erroneously get the invalid sequence ac.
            </div>
            <div class="para e208">Our claim is the following: For any complex type definition, we can compute a
               finite number of primitive edit operations such that we can transform any conformant
               sequence into any other conformant sequence using the primitive edit operations and
               having only conformant intermediate states. We stress once more that this is an
               "existential" claim. We do not care at this point, that our primitive edit
               operations can also generate non-conformant sequences when applied at wrong
               positions. Maalej&nbsp;[
               <div class="xref e209" linkend="MMThesis"></div>] has the algorithm to generate a
               sufficiently large but finite set of primitive edit operations. Further research is
               needed to investigate if one can compute a minimal such set or if a minimal set
               would be unique.
            </div>
            <div class="para e210">Following a principle that we call 
               <div class="emphasis e211" role="bold">Liberal Edits</div>,
               we include any of the primitive edit operations as one button in the editor's user
               interface at any position in the sequence of children of xyz, see
               editControlsUI.xml.
            </div>
            <div class="para e212">We can do this generically, without refering to a specific instance, by utilizing
               
               <div class="code e213">xforms:repeat</div>, as previously. Note that we insert one set of
               buttons outside the 
               <div class="code e214">xforms:repeat</div> to handle the beginning of the
               sequence.
            </div>
            <div class="para e215">Finally, we still need to control which of the edit buttons that we have so
               liberally included in our editor are actually active and which are passive (not
               shown), to preclude illegal edits that lead to non-conformant documents.
            </div>
            <div class="para e216">In our example, we could do this with XPath bindings into the instance. We can,
               for example, express that P3 is only active if there is another a among the children
               of xyz, apart from the one that is to be deleted.
            </div>
            <div class="para e217">However, an educated guess leads us to believe that, in the general case, the
               expressive power of XPath is too weak compared to the power of regular expressions
               in XML Schema complex types. Hence, we offer a different approach that we call
               
               <div class="emphasis e218" role="bold">Try and Tell</div>.
            </div>
            <div class="para e219">We bind to each edit button a script that experimentally performs the primitive
               edit operation on a copy of the current instance, validates the result and makes the
               button visible only if the result is in fact valid. These scripts are triggered by
               XForms refresh events that are activated after each user interaction, ensuring
               up-to-date visibility status of each edit button. The scripts are implemented in a
               scripting language for which the XForms processor provides an interface, in our case
               in XBL (see also the section on implementation below.
            </div>
            <div class="para e220">We illustrate the effect of Try and Tell for schema editControls in 
               <div class="xref e221" linkend="fig.editControlsS"></div> with a browser screenshot in 
               <div class="xref e222" linkend="fig.editControlsB"></div>.
            </div>
            <div class="figure e223" xml:id="fig.editControlsB">
               <div class="title e224">Editor screen shot editControlsB</div>
               <div class="mediaobject e225">
                  <div class="imageobject e226">
                     <div class="metaBox e227"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e384').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e384" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e227'
                              </span><span class="metaAttribute">fileref='../../../vol11/graphics/Bruggemann-Klein01/Bruggemann-Klein01-008.png'
                              </span><span class="metaAttribute">format='png'
                              </span><span class="metaAttribute">width='100%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </div><a name="EditingmixedcontentANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e228">
            <div class="title e229">Editing mixed content</div>
            <div class="para e230">In XML Schema, elements that are typed to have element content can orthogonally be
               declared to be of mixed content, allowing text-node children to be interspersed at
               any position in an element's instantiation, at the beginning, the end and between
               element nodes. This is in contrast to the more powerful Relax NG, where the
               appearance of text nodes can be constrained by regular-expression rules in the same
               way as subelements. The orthogonal approach of XML Schema opens up the opportunity
               to decouple handling of text nodes in mixed content from the handling of structured
               content, in a simpler and platform-independent way.
            </div>
            <div class="para e231">In a first attempt, we apply our principle Liberal Inputs to elements that are
               declared to be of mixed content, iterating in the form's user interface not only
               over the elements' child elements but also the child text nodes, generating input
               widgets in the user interface for display and editing of these text nodes. This will
               display and make editable any text nodes that are present in the current document
               instance but does not handle positions in the document instance where text nodes are
               allowed but do currently not exist. For this case, we introduce a new principle,
               
               <div class="emphasis e232" role="bold">Automatic Text Insertion</div>. When the document
               instance is loaded into the form, we automatically trigger a script (written in
               JavaScript) that inserts dummy empty text nodes at any position where a text node
               is
               allowed by the schema but none is present in the instance. Then, input widgets
               appear at any position in the user interface, where text nodes are allowed by the
               schema, displaying an empty input field for the dummy text nodes and the original
               text for text nodes that were already present in the document instance. These text
               nodes can be edited via the input widgets; they can also be "deleted" by resetting
               their content to the empty string.
            </div>
            <div class="para e233">Unfortunately, there is a glitch with this approch: The iteration in the form's
               user interface will also produce the set of buttons for primitive edit operations
               that would consequently also have to be managed. There is, however, a slightly
               different way to deal with text nodes without considering buttons for primitive edit
               operations: We couple the widgets for text nodes to the groups for element nodes
               within an 
               <div class="code e234">xforms:repeat</div> and insert a further widget for a text node
               outside the 
               <div class="code e235">xforms:repeat</div>, to handle the text node that appears before
               the first element. We call this principle 
               <div class="emphasis e236" role="bold">Coupled
                  Inputs
               </div> and demonstrate its application with schema coupledInputsS in
               
               <div class="xref e237" linkend="fig.coupledInputsS"></div>, XForms coupledInputsF in 
               <div class="xref e238" linkend="fig.coupledInputsF"></div> and browser screen shot coupledInputsB in 
               <div class="xref e239" linkend="fig.coupledInputsB"></div>.
            </div>
            <div class="figure e240" xml:id="fig.coupledInputsS">
               <div class="title e241">Schema coupledInputsS</div>
               <div class="mediaobject e242">
                  <div class="imageobject e243">
                     <div class="metaBox e244"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e418').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e418" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e244'
                              </span><span class="metaAttribute">fileref='../../../vol11/graphics/Bruggemann-Klein01/Bruggemann-Klein01-009.png'
                              </span><span class="metaAttribute">format='png'
                              </span><span class="metaAttribute">width='100%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="figure e245" xml:id="fig.coupledInputsF">
               <div class="title e246">XForms coupledInputsF</div>
               <div class="mediaobject e247">
                  <div class="imageobject e248">
                     <div class="metaBox e249"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e424').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e424" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e249'
                              </span><span class="metaAttribute">fileref='../../../vol11/graphics/Bruggemann-Klein01/Bruggemann-Klein01-010.png'
                              </span><span class="metaAttribute">format='png'
                              </span><span class="metaAttribute">width='100%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="figure e250" xml:id="fig.coupledInputsB">
               <div class="title e251">Editor screen shot CoupledInputsB</div>
               <div class="mediaobject e252">
                  <div class="imageobject e253">
                     <div class="metaBox e254"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e430').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e430" class="metaSource" style="display:none;">                
                           &lt;imagedata<span class="metaAttribute">class='e254'
                              </span><span class="metaAttribute">fileref='../../../vol11/graphics/Bruggemann-Klein01/Bruggemann-Klein01-011.png'
                              </span><span class="metaAttribute">format='png'
                              </span><span class="metaAttribute">width='100%'
                              </span>
                           &gt;
                           
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="para e255">The last point to consider is how structural edit operations deal with text nodes.
               Here we modify the edit operation in such a way that empty text nodes are inserted
               as needed and that the contents of text nodes that are deleted together with a
               sequence of neighboring element nodes are copied into the remaining text node in
               front of them.
            </div>
            <div class="para e256">This solution for mixed content is essentially platform independent. It uses a
               custom JavaScript script that is triggered by a built-in XForms event and accesses
               the document instance through the standard DOM interface. Furthermore, it utilizes
               the capability of XForms to associate the script with the event. It is worth
               mentioning, though, that XForms makes it really hard to insert text nodes in the
               middle of a sequence of nodes, demanding to sequentially build up of the sequence
               from front to back.
            </div>
         </div>
      </div><a name="ImplementationANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e257">
         <div class="title e258">Implementation</div>
         <div class="para e259">The system XFGen itself is a standard Java program. it uses Xerces to process XML
            Schema. The XForms documents that XFGen generates require extensions for some XSD
            features (recursive type definitions) or editing tasks (experimental evaluation to
            determine admissible edit operations dynamically). These extensions utilize XBL scripts
            that interact with certain data structures and methods of the XForms
            processor&nbsp;[
            <div class="xref e260" linkend="XBL"></div>]
         </div>
         <div class="para e261">XBL is a scripting language that was introduced by Mozilla and submitted to W3C, but
            has not been standardized by W3C. Some XForms processors, among them Orbeon Forms,
            offer
            interfaces for XBL scripts that can access internal data structures and functions
            of the
            XForms processor. These interfaces are not standardized. We have extended the Firefox
            plugin XForms processor, which incidentally is programmed in XBL itself, with XBL
            functions. Consequently, the more complex XForms documents that XFGen produces run
            only
            on this custom extension of the XForms Firefox plugin on old versions of Firefox.
            We
            refer to Dubinko's text on extending XForms&nbsp;[D2003].]
         </div>
         <div class="para e262">Some XSD features can be more fully supported with an XForms processor that allows
            for
            XPath&nbsp;2.0. Unfortunately, the Firefox plugin XForms processor that we use only
            supports XPath&nbsp;1.0, as required by XForms. Consequently, support for some XSD
            features such as identity constraints is more cumbersome to define or even more limited
            in practice than conceptually necessary.
         </div>
      </div><a name="RelatedworkANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e263">
         <div class="title e264">Related work</div>
         <div class="para e265">We briefly discuss three papers that are related to our work [
            <div class="xref e266" linkend="RadhaICDCIT"></div>][
            <div class="xref e267" linkend="SongICWS"></div>][
            <div class="xref e268" linkend="DeWolfIADIS"></div>].
         </div>
         <div class="para e269">Despite its title and stated intent, the paper by Radha&nbsp;[
            <div class="xref e270" linkend="RadhaICDCIT"></div>] and others does not really contribute anything specific to
            user interfaces. It is mainly concerned with semantic interpretation of XML Schema,
            given a generic DOM representation that sees the schema just as any XML document.
            A Java
            Swing user interface is presented without discussion how it was generated.
         </div>
         <div class="para e271">Song and Lee&nbsp;[
            <div class="xref e272" linkend="SongICWS"></div>] specifically address the XForms target
            platform. Their goal is to support user interfaces for Web Services. They also briefly
            address the task of semantic interpretation of XML Schema. As to schemas, we don't
            see
            that they support recursive type definitions. The editors that are generated can only
            generate new XML documents from scratch, not load existing documents. Editing of
            structures and of mixed content is supported, but only in a "one-way" approach; that
            is,
            edit decisions, for example for one alternative when a choice is given, cannot be
            revised. There is some support for custom simple data types, for some facets in
            restrictions and for union. The paper mentions lists but means presumably the
            enumeration facet, since only a finite number of items in the base type can be supported
            with 
            <div class="code e273">xforms:select1</div>.
         </div>
         <div class="para e274">De Wolf and others&nbsp;[
            <div class="xref e275" linkend="DeWolfIADIS"></div>] discuss problems that need to
            be solved when XForms is used as an implementation platform for an XML editor. They
            seek
            solutions mostly in extensions to the XForms standard. Some but not all of their
            proposed extensions have in fact found their way into the XForms&nbsp;1.1
            specification.
         </div>
         <div class="para e276">Our system XFGen supports a far greater range of XML Schema features than comparable
            systems. We delegate the semantic interpretation of XML Schema to Xerces. We have
            explicitly delineated some principles and algorithms of XFGen; further capabilities
            of
            XFGen are covered by Maalej in his PhD work&nbsp;[
            <div class="xref e277" linkend="MMThesis"></div>].
         </div>
      </div><a name="DiscussionconclusionsandfurtherworkANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e278">
         <div class="title e279">Discussion, conclusions and further work</div>
         <div class="para e280">Maalej in his PhD thesis&nbsp;[
            <div class="xref e281" linkend="MMThesis"></div>] covers further features of
            XML Schema:
         </div>
         <div class="itemizedlist e282">
            <div class="listitem e283">
               <div class="para e284">Recursion in type definitions.</div>
            </div>
            <div class="listitem e285">
               <div class="para e286">Custom simple types (restriction, list, union).</div>
            </div>
            <div class="listitem e287">
               <div class="para e288">Identity constraints.</div>
            </div>
         </div>
         <div class="para e289">In principle, the XML editors that are generated by XFGen could be platform
            independent, but currently, they are not. We would need an alternative XForms processor
            that allows the necessary extensions and also runs in current browser. One candidate
            would be xf.js&nbsp;[
            <div class="xref e290" linkend="xf.js"></div>] in a more fully functional version, where
            we could use JavaScript to support the extensions.
         </div>
         <div class="para e291">In this paper, we have not discussed the user-interface aspects of the editors that
            XFGen generates. We follow a template approach as indicated in 
            <div class="xref e292" linkend="fig.CMinUML"></div>. For the examples in this paper, we have defined basic
            templates with the HTML fieldset element. Obviously, more sophisticated custom templates
            that combine HTML with CSS need to be tried out.
         </div>
         <div class="para e293">Although XFGen handles mixed content, the generated editors presumably work better
            for
            data-driven XML instances than for text-driven ones. Particularly with text-driven
            XML
            documents, we run into the largely unsolved usability problems of general XML editors.
            Our generated editors work probably best in cases in which a classical form-based
            interface is appropriate. Investigate further.
         </div>
         <div class="para e294">Further documentation of this work will appear in Maalej's PhD thesis&nbsp;[
            <div class="xref e295" linkend="MMThesis"></div>].
         </div>
      </div><a name="AcknowledgementANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="section e296">
         <div class="title e297">Acknowledgement</div>
         <div class="para e298">The comments of the anonymous referees have been extraordinarily helpful. Thank
            you!
         </div>
      </div><a name="ThepurchaseorderexampleANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="appendix e299">
         <div class="title e300">The purchase order example</div>
         <div class="para e301">For further illustration, we include the purchase order example from the XML Schema
            Recommendation&nbsp;
            <div class="xref e302" linkend="XSPrimer"></div> with the schema in 
            <div class="xref e303" linkend="fig.purchaseOrderS"></div>, an instance in 
            <div class="xref e304" linkend="fig.purchaseOrderI"></div>
            and two browser screen shots in 
            <div class="xref e305" linkend="fig.purchaseOrderB"></div>.
         </div>
         <div class="figure e306" xml:id="fig.purchaseOrderS">
            <div class="title e307">Schema purchaseOrderS</div>
            <div class="mediaobject e308">
               <div class="imageobject e309">
                  <div class="metaBox e310"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e530').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e530" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e310'
                           </span><span class="metaAttribute">fileref='../../../vol11/graphics/Bruggemann-Klein01/Bruggemann-Klein01-012.png'
                           </span><span class="metaAttribute">format='png'
                           </span><span class="metaAttribute">width='100%'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="figure e311" xml:id="fig.purchaseOrderI">
            <div class="title e312">XML instance purchaseOrderI</div>
            <div class="mediaobject e313">
               <div class="imageobject e314">
                  <div class="metaBox e315"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e536').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e536" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e315'
                           </span><span class="metaAttribute">fileref='../../../vol11/graphics/Bruggemann-Klein01/Bruggemann-Klein01-013.png'
                           </span><span class="metaAttribute">format='png'
                           </span><span class="metaAttribute">width='100%'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="figure e316" xml:id="fig.purchaseOrderB">
            <div class="title e317">Editor screen shots purchaseOrderB</div>
            <div class="mediaobject e318">
               <div class="imageobject e319">
                  <div class="metaBox e320"><img src="resources/manbluflag.jpg" class="metaImage" onclick="$('#d1e542').toggle('1000');" alt="Marker: click here for details..." title="Marker: click here for details..."><div id="d1e542" class="metaSource" style="display:none;">                
                        &lt;imagedata<span class="metaAttribute">class='e320'
                           </span><span class="metaAttribute">fileref='../../../vol11/graphics/Bruggemann-Klein01/Bruggemann-Klein01-014.png'
                           </span><span class="metaAttribute">format='png'
                           </span><span class="metaAttribute">width='100%'
                           </span>
                        &gt;
                        
                     </div>
                  </div>
               </div>
            </div>
         </div>
      </div><a name="BibliographyANCHOR" href="#mainContainerTitleTOC" class="anchor">toc</a><div class="bibliography e321">
         <div class="title e322">Bibliography</div>
         <div class="bibliomixed e323" xml:id="RecXForms1.1" xreflabel="Boy09">John M. Boyer, 
            <div class="emphasis e324">XForms
               1.1
            </div>, W3C Recommendation, W3C, October 2009,
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e325" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/2009/REC-xforms-20091020/.</div>
            
         </div>
         <div class="bibliomixed e326" xml:id="XSDatatypes" xreflabel="BPM04">Paul V. Biron, Kaiser Permanente, and
            Ashok Malhotra, 
            <div class="emphasis e327">XML Schema Part 2: Datatypes Second Edition</div>, W3C
            Recommendation, W3C, October 2004,
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e328" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/.</div>
            
         </div>
         <div class="bibliomixed e329" xml:id="XFormsEssentials" xreflabel="Dub03">Micah Dubinko, 
            <div class="emphasis e330">XForms
               Essentials
            </div>, O’Reilly &amp; Associates, Inc., Sebastopol, CA, USA, 2003. 
         </div>
         <div class="bibliomixed e331" xml:id="XBL" xreflabel="Hic12">Ian Hickson, 
            <div class="emphasis e332">XBL 2.0</div>, W3C
            Candidate Recommendation, W3C, Mai 2012, 
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e333" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/xbl/.</div>
            
         </div>
         <div class="bibliomixed e334" xml:id="MMThesis" xreflabel="Maa13">Mustapha Maalej, 
            <div class="emphasis e335">Generieren von
               XML-Editoren in XForms aus XML Schema
            </div>, Ph.D. Thesis, TU München, 2013, In
            preparation. 
         </div>
         <div class="bibliomixed e336" xml:id="xf.js" xreflabel="NBK13">Tobias Niedl and Anne Brüggemann-Klein,
            
            <div class="emphasis e337">Processing XForms in HTML5-Enabled Browsers</div>, Balisage 2013,
            2013. doi:
            <div class="biblioid doi e338">10.4242/BalisageVol10.Niedl01</div>.
         </div>
         <div class="bibliomixed e339" xml:id="RadhaICDCIT" xreflabel="RRK05">V. Radha, S. Ramakrishna, and N. Pradeep
            Kumar, 
            <div class="emphasis e340">Generic XML Schema Definition (XSD) to GUI Translator.</div>,
            ICDCIT, Lecture Notes in Computer Science, vol. 3816, Springer, 2005, pp. 290–296.
            
         </div>
         <div class="bibliomixed e341" xml:id="SongICWS" xreflabel="SL07">Kisub Song and Kyong-Ho Lee, 
            <div class="emphasis e342">An
               Automated Generation of XForms Interfaces for Web Services
            </div>, 2012 IEEE
            19th International Conference on Web Services (2007), 856–863. 
         </div>
         <div class="bibliomixed e343" xml:id="XSStructures" xreflabel="TBMM04">Henry S. Thompson, David Beech, Murray
            Maloney, and Noah Mendelsohn, 
            <div class="emphasis e344">XML Schema Part 1: Structures Second
               Edition
            </div>, W3C Recommendation, W3C, October 2004,
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e345" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/.</div>
            
         </div>
         <div class="bibliomixed e346" xml:id="XSPrimer" xreflabel="WF04">Priscilla Walmsley and David C. Fallside,
            
            <div class="emphasis e347">XML Schema Part 0: Primer Second Edition</div>, W3C Recommendation,
            W3C, October 2004,
            
            <div xmlns:xlink="http://www.w3.org/1999/xlink" class="link e348" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple">http://www.w3.org/TR/2004/REC-xmlschema-0-20041028/.</div>
            
         </div>
         <div class="bibliomixed e349" xml:id="DeWolfIADIS" xreflabel="WKdW04">Koen De Wolf, Frederik De Keukelaere,
            and Rik Van de Walle, 
            <div class="emphasis e350">Generic XForms-Based User Interface Generation for XML
               Schema
            </div>, Proceedings of the IADIS International Conference e-Society 2004,
            7 2004, pp. 773–782. 
         </div>
      </div>
   </div>
</div>