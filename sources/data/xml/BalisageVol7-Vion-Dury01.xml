<?xml version="1.0" encoding="UTF-8"?><article xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" version="5.0-subset Balisage-1.3"><title>Secured Management of Online XML Document Services through Structure Preserving Asymmetric Encryption</title><info><confgroup><conftitle>Balisage: The Markup Conference 2011</conftitle><confdates>August 2 - 5, 2011</confdates></confgroup><abstract><para>Externalizing document management is a problem when individual or corporate
                privacy is to be ensured. Provided that the decryption key is not known from service
                side, pure storage/archiving of encrypted documents is highly secure, but of poor
                interest as no operation can be performed on hosted data. Thus, current document
                management systems offer restricted privacy mechanisms, roughly based on secured
                communication channels and sometimes encrypted storage. However, many value-added
                processing operations require decrypting the document, and no formal guaranty is
                granted regarding the safety of system behaviors. As an example of known issue,
                there is the problem of data remanence (persisting information on disk after file
                system deletion), bugs or viruses acting on various level of the software
                architecture. This paper describes a method to allow restricted (but yet
                meaningful) ways of processing encrypted XML documents without needing decryption
                phase. The encryption process we propose allows isomorphic encryption of data (XML
                document owned by customers) and operator transformations (verification and
                transformation operated by the Service Provider) in such a way that full secrecy is
                ensured simply because the decoding key is not known by the Service Provider. Once
                transformed, operators can handle encrypted documents with equivalent results up to
                the decryption operation.</para></abstract><author><personname><firstname>Jean-Yves</firstname><surname>Vion-Dury</surname></personname><personblurb><para> Jean-Yves Vion-Dury holds an CS engineering degree from the "Conservatoire
                    National des Arts et Métiers, Paris" (1993) and graduated with a PhD in CS from
                    Université Joseph Fourier, Grenoble in 1999. He has been working at Xerox
                    Research Centre Europe (in Grenoble, France) since 1995, as a research
                    scientist; he has also been on a two year sabbatical with Vincent Quint's team
                    at INRIA in 2002-2004. His research interests relate to various aspect of XML
                    including models, the impact of standards, validation/transformation languages
                    and architectures, with theoretical background in programming languages,
                    compilation, type systems and formal logics. </para><para>Jean-Yves was Program Chair of DocEng (ACM Document Engineering Symposium ) in
                    2004, is member of its Program Committee since 2003, and member of its Steering
                    Committee since 2005. </para></personblurb><affiliation><jobtitle>Senior Scientist</jobtitle><orgname>Xerox Research Centre Europe</orgname></affiliation><email>jean-yves.vion-dury@xeroxlabs.com</email></author><legalnotice><para>Copyright © 2011 Xerox.  All rights reserved.</para></legalnotice></info><section><title>Introduction</title><para>This paper describes a method to allow restricted (but yet meaningful) ways of
            processing encrypted XML documents without needing decryption phase. The encryption
            process we propose allows isomorphic encryption of data (XML document owned by
            customers) and operator transformations (verification and transformation operated by the
            Service Provider) in such a way that full secrecy is ensured simply because the decoding
            key is not known by the Service Provider. Once transformed, operators can handle
            encrypted documents with equivalent results up to the decryption operation.</para><para>Nowadays, when a customer wants an external service provider to host and manage
            confidential documents, he has to fully trust them, their information system and
            internal policies. The confidential documents may be transmitted to the hosting system
            over a secured channel using encryption to protect the sensitive information from any
            spying software potentially able to intercept and interpret the data.</para><para>However, an XML document, once encrypted using standard approaches , is like an opaque
            and flat bit packet on which only two basic operations can be undertaken: integrity
            checking and decryption <footnote><para>The W3C recommendation describes encryption processing
                    <xref linkend="xmlEnc"/> in a way that preserve compatibility with XML
                requirement, but doesn't change the fundamental issue we address.</para></footnote>.
            Therefore, once hosted, the document must be decrypted in order to be able to offer some
            more complex processing such as those involved in basic services, e.g. indexation,
            validation and transformation. And in order to decrypt, the service provider must share
            the decryption key with the customer, which is a risk against which nobody can guaranty
            full protection (see <xref linkend="SCAN"/> and <xref linkend="VaultMate"/> for examples
            of document services in this area today ; note that both use a symmetric ciphering
            method <xref linkend="SKA"/> which requires for the service provider owning the
            customer's private key, and naturally, performing decryption when needed by the
        system).</para></section><section><title>Do not decrypt documents: make operators compatible!</title><para>Our contribution applies on structured documents (typically XML, but any similar
            approaches could be addressed by this method) where an attributed tree-like structure
            captures the syntax and semantic of the data. In XML, it is commonly understood that
            textual content is mainly stored in the leaves (the so called text nodes) whereas
            meta-information such as presentation style are conveyed by namespaces, tag names and
            additional attributes-values pairs.</para><para>According to this, we propose first to encrypt the content of the document (textual
            leaves) using a private key, only known by the document owner, and to encrypt the
            structural part (tag names, namespaces and attribute-value pairs) through an asymmetric
            encryption mechanism (see <xref linkend="PKC"/> for a general presentation) in such a
            way that the resulting document still complies with XML lexical constraints (in other
            words, XML wellformedness property remains ensured). Beyond preserving better isolation
            between the two cryptographic subsystems, private key encryption comes with fast,
            possibly stream based, ciphering algorithms, with obvious application in large document
            processing.</para><para>In asymmetric encryption schemes, a public key allows encryption, whereas decryption
            can only be performed thanks to a secret (private) key.</para><para>The Service provider may use the public key in order to transform its operators in
            such a way that they can be adapted to operate directly on the encrypted documents. The
            central idea of our proposal is here: applying <emphasis role="ital">an encryption
                aware transformation</emphasis> on the operators, so that they become compatible
            with the encrypted instances. In other word, rather that decrypting the customer's
            documents in order to process them, we propose to adapt the operators in order to make
            it possible for them to operate on encrypted document. More precisely, operators are
            transformed using a public encryption key as parameter. Obviously, not all operators can
            be used this way, but only those that do not use textual content but only structural
            information (which still covers a large class of practical applications for structured
            document processing).</para><para>This way, the customer performs the structure-preserving encryption with a public key,
            and the textual content encryption with a private key they will never communicate. The
            composite-encryption algorithm is implemented and furnished by the Service Provider, and
            is run by the customers in their protected space. The resulting document can be sent to
            the Service Provider together with the public key, without particular precaution. The
            provider can archive the ciphered document, together with the public key, and moreover,
            will use the latter to transform the relevant operators in order to operate on the
            customer's documents. The customer data privacy/confidentiality is not put at risk by
            the provider software, communication channels and systems.</para><para>When required, the documents resulting from remote operations (validation reports,
            transformation products…) can be sent back to the customer, who will be able to fully
            decrypt them locally through his two private keys.</para><para>The figure below illustrates the composite encryption process:</para><figure><mediaobject><imageobject><imagedata fileref="../../../vol7/graphics/Vion-Dury01/Vion-Dury01-001.png" format="png" width="60%"/><!--<imagedata fileref="./Bal2011Vion102007.png" format="png" width="100%"/>--></imageobject></mediaobject></figure><itemizedlist><listitem><para>ε<subscript>1</subscript>(β<subscript>1</subscript>) represents an asymmetric
                    encryption process (applied to the structural part of the document) using a
                    public key β<subscript>1</subscript>.</para></listitem><listitem><para>ε <subscript>2</subscript>(α<subscript>2</subscript>) represents the symmetric
                    encryption process (applied to textual content and attribute values) using a
                    private key α<subscript>2</subscript>.</para></listitem><listitem><para>ε (β<subscript>1</subscript>, α<subscript>2</subscript>) represents the
                    combined encryption process over an XML document.</para></listitem></itemizedlist><para>Essentially, this figure expresses the isomorphic properties of our encoding: typing properties of the object are preserved by ε
                (β<subscript>1</subscript>, α<subscript>2</subscript>) , so that some standard
            XML analysis tools can operate before and after encryption as well.</para><note><para>We recall that symmetric encryption ε and decryption
                ε<superscript>-1</superscript> obey to the following laws (here <emphasis role="bital">α</emphasis> is the secret
                private key and <emphasis role="bold">x</emphasis> the message):</para><!--<table xreflabel="symmetric keys">--><table><caption><para><emphasis role="bold">symmetric keys</emphasis></para></caption><tr><td/><td/><td>ε<superscript>-1</superscript>(<emphasis role="bital">α</emphasis> , ε(<emphasis role="bital">α</emphasis> , <emphasis role="bold">x</emphasis>)) = <emphasis role="bold">x</emphasis></td></tr><tr><td><emphasis role="bital">α</emphasis> ≠ <emphasis role="bital">α'</emphasis></td><td> ⇒ </td><td> ε<superscript>-1</superscript>(<emphasis role="bital">α'</emphasis> , ε(<emphasis role="bital">α</emphasis> , <emphasis role="bold">x</emphasis>)) ≠ <emphasis role="bold">x</emphasis></td></tr></table><para>Similarly, for asymmetric encryption functions where (<emphasis role="bital">α</emphasis> is the private key, and <emphasis role="bital">β</emphasis>
            is the public key):</para><table><tr><td/><td/><td> ε<superscript>-1</superscript>(<emphasis role="bital">α</emphasis> ,
                            ε(<emphasis role="bital">β</emphasis> , <emphasis role="bold">x</emphasis>)) = <emphasis role="bold">x</emphasis></td></tr><tr><td> <emphasis role="bital">α</emphasis> ≠ <emphasis role="bital">α'</emphasis> </td><td> ⇒ </td><td>   ε<superscript>-1</superscript>(<emphasis role="bital">α'</emphasis> , ε(<emphasis role="bital">β</emphasis> , <emphasis role="bold">x</emphasis>)) ≠ <emphasis role="bold">x</emphasis> </td></tr></table><para>Keys <emphasis role="bital">α,β</emphasis>, are integers whose valuation space is so huge, that it is practically extremely
                hard for an attacker to guess their value. These laws just capture in an
                abstract way the reversibility of encryption and the sensitivity of underlying algorithms to key
                information.</para></note></section><section><title>Encryption aware transformation of XML operators</title><para>The composite encryption we proposed preserves lexical and logical structure. It is an
            algorithm that encrypts tag names (and attribute names) in such a way that all XML
            lexical constraints remain satisfied, but do not change the tree structure.</para><para>We used in our experiments the combination of an RSA based asymmetric encryption
            applied separately to namespace prefix and local tag/attribute names (general purpose
            XML attributes such as <emphasis role="ital">xmlns</emphasis>, <emphasis role="ital">xml:base</emphasis>, 
            <emphasis role="ital">xml:space</emphasis>, 
            <emphasis role="ital">xml:id</emphasis> are not encrypted, in order to
            allow standard behavior of XML processors) . Then our encryption algorithm translates
            the result into a base16 encoded sequences of ASCII characters and substitutes the new
            names to the old ones. The algorithm process all tags and attributes recursively over
            the tree structure.</para><para>Figure <xref linkend="ex1"/> is an example of such a transformation (note that content encryption has not
            been applied here for illustration purpose). The image shows the original document (the
            specialized DocBook XML schema used for the Balisage conference proceedings...), and the
            second one below shows the same document after the structure preserving encryption (for
            clarity, textual content was not encrypted using symmetric ciphering algorithm).</para><para> We propose now to examine 4 fundamental classes of document operators that
        can be tailored to process structure preserving encrypted documents. </para><orderedlist><listitem><para><emphasis role="ital">Validation Engine</emphasis></para><para>Typically, a tree grammar schema can be automatically modified by changing
                element names, according to the public encryption key.</para><para>For instance, the following grammar:</para><table><tr><td>Html</td><td>→</td><td>html [ Header Body]</td></tr><tr><td>Header</td><td>→</td><td>header [ Base? Title? Meta* (Link | Script)*]</td></tr><tr><td>Body</td><td>→</td><td>body [ ... ]</td></tr></table><para>would become</para><table><tr><td>Html</td><td>→</td><td>_012A321B839B167C [ Header Body]</td></tr><tr><td>Header</td><td>→</td><td>_2842FA3D2B8317A8 [ Base? Title? Meta* (Link | Script)*]</td></tr><tr><td>Body</td><td>→</td><td>_3A78B91537E65F45 [ ... ]</td></tr></table><para>provided that, for a given encryption key β , 
                    ε<subscript>1</subscript>(β "html")     = _012A321B839B167C ,
                    ε<subscript>1</subscript>(β "header") = _2842FA3D2B8317A8 and
                    ε<subscript>1</subscript>(β "body") = _3A78B91537E65F45
                </para><para>If the new labels comply with the inherent lexical constraints of the
                    formalism (in this case XML), then the corresponding recognition automaton can
                    be derived in the standard way in order to check the validity of the encrypted
                    document. RelaxNG, for instance, is a validation standard focused on structural
                    validation, although some extensions allow dealing with attribute or textual
                    content. In latter cases, the transcription cannot be achieved <emphasis role="ital">stricto sensu</emphasis> (no access to encrypted textual
                    content), but we argue that it is always feasible to derive from such grammars a
                    more general schema that only captures the structural information (this can even
                    be automated for the general case).</para></listitem><listitem><para><emphasis role="ital">Document Rewriting and Querying</emphasis></para><para>Many such transformations do not have to deal with textual content. As an
                    example, a table of content construction, outline extraction, link extraction,
                    tags reorganization …</para><para>For instance, the following sample rule from an illustrative tree rewriting system</para><table><tr><td>title[ p[X] p[Y] ]</td><td>→</td><td>title[ p[X Y] ]</td></tr></table><para>Can be transformed like this</para><table><tr><td>_123E456A8421F745 [  _164C3812A7945B14 [X] _164C3812A7945B14[Y] ]</td><td>→</td><td>_123E456A8421F745[ _164C3812A7945B14[X Y] ]</td></tr></table><para>provided that, for a given encryption key β , 
                    ε<subscript>1</subscript>(β "title")     = _123E456A8421F745 ,
                    ε<subscript>1</subscript>(β "p") = _164C3812A7945B14 
                </para><para>Regarding standard technologies such as XSLT or XQuery, they are based on
                    XPath to capture structural information. In our prototype, we rewrite structural
                    XPath expressions in order to encrypt tag names and attribute names. Structural
                    XPath expressions do not use tests on attribute and textual values. Figures <xref linkend="ex3"/>
                    and <xref linkend="ex4"/> show an XSLT stylesheet designed for computing DocBook outlines, before
                    and after transformation. Note that XPath expressions have been rewritten
                    according to tag name ciphering.</para></listitem><listitem><para><emphasis role="ital">Document versioning</emphasis></para><para>These services are based of Tree diff algorithms, based on structural analysis
                    of tree node hierarchy and on node comparison. They are therefore compatible
                    with our encoding proposal, since they do not address diff analysis of original textual
                    content.</para></listitem><listitem><para>
                    <emphasis role="ital">Document Indexation</emphasis>
                </para><para>These algorithms relies on various techniques, most importantly using
                    structural information (see eXist structural indexes <xref linkend="eXist"/>, or Apache‟s Xindice
                    <xref linkend="Xindices"/>) that can be handled using the technique we propose.</para></listitem></orderedlist></section><section><title>Novelty</title><para>The problem of authorizing general arithmetic computation on ciphered data has been coined
            as <emphasis role="ital">fully homomorphic encryption</emphasis> <xref linkend="homoEnc"/>, and has been the
            holy grail of cryptologists for decades. The area is quite active recently, but is
            certainly not mature enough to find practical applications before a long time especially
            because the operators are of algebraic nature (very low level and generic: addition,
            multiplication, subtraction and division) rather than algorithmic.</para><para>The related work section below discusses existing approaches in the field of XML
            databases. In the best case, the authors propose very specific index construction
            algorithms that only allows simplified query over encrypted documents (see <xref linkend="surveyQEncrypt"/>, <xref linkend="semCrypt"/>). Our approach, much broader
            and simple, enable four major operations: transformation, validation, versioning and
            indexing, by using restricted but standardized technologies (XPath, XSLT, XQuery,
            RelaxNG…). More significantly, all proposals we examined so far in the literature made
            use of symmetric encryption. It just means that the provider must share the private key
            with the customer (therefore, representing a potential security hole) or that
            encryption/decryption operation can be done exclusively from the client side.</para></section><section><title>Discussion</title><para>Encrypting tag names may raise a safety issue due to the low entropy level of XML
            vocabulary, especially when the target namespace is known or guessed by an attacker. For
            instance, if the code breaker knows that the document is using the HTML namespace, he
            could try breaking the code using “html” as the plaintext input of the encrypted top
            level tag. Indeed, this approach is particularly vulnerable to (so-called) chosen plaintext attacks.
            A solution is using optimal asymmetric encryption padding  
            <xref linkend="optimalEncPadding"/> <xref linkend="optimalAssymEnc"/> and its more recent
            amelioration <xref linkend="OEAP"/>. We have indeed implemented this latter approach, consisting of using two
            ancillary secure Hash functions (SHA and MD5 in our prototype) and a random pattern in
            order to increase the entropy of input message.</para><para>Our prototype also revealed that, if working with long keys for reaching very high
            level of safety, the tag/attribute names are transformed in very long labels, as
            compared to original ones. However, our prototype did not exhibit any problem with
            respect to this side effect, and runtime and memory performances are almost not
            impacted 
            <footnote><para>We indeed used a hash table to memorize the encrypted code for recurrent
                tag/attribute names.</para></footnote>.</para><para>During the exchange of documents between the client and the provider, one could
            imagine applying a supplemental global encryption using a symmetric scheme with a
            private key that would be shared between the two parties, thanks to a standard secured
            key exchange protocol. Of course this key would be different than the private key used
            by the client to encode the document content, and would provide a supplemental security
            barrier to communication based attacks (this can be done e.g. through the standard HTTPS
            protocol and SSL libraries).</para></section><section><title>Related Work</title><para>In <xref linkend="queriableHD"/>
            <xref linkend="queriableHDpaper"/>, Mittal and Srivastava propose a somehow similar
            approach. However, the authors clearly encode the hierarchical structure into a
            distinct, specific data structure <footnote><para>an RSA encryption (asymmetric scheme <xref linkend="RSA"/>) is
                    applied on both the content and the structure with a common key, leading to a
                    less secure protection since cracking the code through attacks on structure will
                    give direct access to the content.</para></footnote>. As a consequence, standard XML tools cannot be used, since the links
            between structure and content are managed externally. The document is no longer an XML
            document after the encryption and compression operations proposed in this approach.
            Using standard language is an important plus, as the provider may propose to run
            customer made style sheets on customer data. In addition, using standard methodology is a major
            advantage to develop transformations and validation schemas, among others.</para><para>Various approaches have been explored in literature to secure documents hosted by an
            outsourcing service, especially in the field of XML databases. Existing proposals are
            organized around minimizing decryption operations (for obvious response time and CPU
            cost saving; and also for security reasons too, when minimization is based on document
            partitioning <xref linkend="queryingEnc"/>) or preparation of specific indexes to allows
            restricted queries on encrypted documents <xref linkend="SecuringXML"/>
            <xref linkend="surveyQEncrypt"/>. Other studies focused on protecting information during
            encrypted exchanges between the service provider and the client, preventing statistical
            analysis based on expected frequencies of query terms <xref linkend="EfficientSecureQuery"/>. However, our approach does not need to focus on
            communication, since transformation work is done locally on secured documents.</para></section><appendix><title/><figure xml:id="ex1"><mediaobject><imageobject><imagedata fileref="../../../vol7/graphics/Vion-Dury01/Vion-Dury01-002.png" format="png" width="80%"/></imageobject></mediaobject><caption><para>Input document (excerpt) </para></caption></figure><figure xml:id="ex2"><mediaobject><imageobject><imagedata fileref="../../../vol7/graphics/Vion-Dury01/Vion-Dury01-003.png" format="png" width="112%"/><!--<imagedata fileref="./Bal2011Vion102002.png" format="png" width="100%"/>--></imageobject></mediaobject><caption><para>Structural encryption: Input document with encrypted tags</para></caption></figure><figure xml:id="ex3"><mediaobject><imageobject><imagedata fileref="../../../vol7/graphics/Vion-Dury01/Vion-Dury01-004.png" format="png" width="60%"/></imageobject></mediaobject><caption><para>Operator: The XSL stylesheet to be applied to input document</para></caption></figure><figure xml:id="ex4"><mediaobject><imageobject><imagedata fileref="../../../vol7/graphics/Vion-Dury01/Vion-Dury01-005.png" format="png" width="100%"/></imageobject></mediaobject><caption><para>Encryption aware Operator: The XSL stylesheet customized thanks to the public
                    encryption key. This transformed style sheet is intended to be run on provider's
                    site.</para></caption></figure><figure xml:id="ex5"><mediaobject><imageobject><imagedata fileref="../../../vol7/graphics/Vion-Dury01/Vion-Dury01-006.png" format="png" width="85%"/><!--<imagedata fileref="./Bal2011Vion102005.png" format="png" width="80%"/>--></imageobject></mediaobject><caption><para>The result of style sheet application on the fully encrypted input document (sent back by the service provider)</para></caption></figure><figure xml:id="ex6"><mediaobject><imageobject><imagedata fileref="../../../vol7/graphics/Vion-Dury01/Vion-Dury01-007.png" format="png" width="60%"/></imageobject></mediaobject><caption><para>The final result is obtained by decrypting both the structural part and the
                    content part thanks to the two secret keys. This operation is done locally by the
                    customer in a secured environment.</para></caption></figure></appendix><bibliography><title>References</title><!-- 1 --><bibliomixed xml:id="SCAN" xreflabel="1">
            <emphasis role="ital">SCAN</emphasis>, Trusted ICT Security Solution Provider.
            <link xlink:href="http://www.scan-associates.net/product_securedoc.htm" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://www.scan-associates.net/product_securedoc.htm</link>
        </bibliomixed><!-- 2 --><bibliomixed xml:id="VaultMate" xreflabel="2">
            <emphasis role="ital">VaultMate</emphasis>, Enterprise Privacy Solution.
            <link xlink:href="http://www.vaultmate.com/features.php" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://www.vaultmate.com/features.php</link>
        </bibliomixed><!-- 3 --><bibliomixed xml:id="PKC" xreflabel="3">
            <emphasis role="ital">Public-key Cryptography</emphasis>, Wikipedia.
            <link xlink:href="http://en.wikipedia.org/wiki/Public_key_encryption" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://en.wikipedia.org/wiki/Public_key_encryption</link>
        </bibliomixed><!-- 4 --><bibliomixed xml:id="SKA" xreflabel="4">
            <emphasis role="ital">Symmetric-Key Algorithm</emphasis>, Wikipedia.
            <link xlink:href="http://en.wikipedia.org/wiki/Symmetric_key_algorithm" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://en.wikipedia.org/wiki/Symmetric_key_algorithm</link>
        </bibliomixed><!-- 5 --><bibliomixed xml:id="RSA" xreflabel="5">
            <emphasis role="ital">RSA</emphasis>, Wikipedia.
            <link xlink:href="http://en.wikipedia.org/wiki/RSA" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://en.wikipedia.org/wiki/RSA</link>
        </bibliomixed><!-- 6 --><bibliomixed xml:id="homoEnc" xreflabel="6">
            <emphasis role="ital">Homomorphic Encryption</emphasis>, Wikipedia.
            <link xlink:href="http://en.wikipedia.org/wiki/Homomorphic_encryption" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://en.wikipedia.org/wiki/Homomorphic_encryption</link>
        </bibliomixed><!-- 7 --><bibliomixed xml:id="optimalEncPadding" xreflabel="7">
            <emphasis role="ital">Optimal Asymmetric Encryption Padding</emphasis>, Wikipedia.
            <link xlink:href="http://en.wikipedia.org/wiki/Optimal_Asymmetric_Encryption_Padding" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://en.wikipedia.org/wiki/Optimal_Asymmetric_Encryption_Padding</link>
        </bibliomixed><!-- 8 --><bibliomixed xml:id="optimalAssymEnc" xreflabel="8">
            <emphasis role="ital">Optimal Asymmetric Encryption -- How to encrypt with
            RSA</emphasis>, M. Bellare, P. Rogaway. Extended abstract in Advances in Cryptology -
            Eurocrypt '94 Proceedings, Lecture Notes in Computer Science Vol. 950, A. De Santis ed,
            Springer-Verlag, 1995. 
            <link xlink:href="http://www-cse.ucsd.edu/users/mihir/papers/oae.pdf" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://www-cse.ucsd.edu/users/mihir/papers/oae.pdf</link>
        </bibliomixed><!-- 9 --><bibliomixed xml:id="OEAP" xreflabel="9">
            <emphasis role="ital">OAEP Reconsidered</emphasis>, Victor Shoup. IBM Zurich Research
            Lab, Saumerstr. 4, 8803 Ruschlikon, Switzerland. September 18, 2001.
            (Full length version of the extended abstract in Proc. Crypto 2001)
            <link xlink:href="http://www.shoup.net/papers/oaep.pdf" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://www.shoup.net/papers/oaep.pdf</link>
        </bibliomixed><!-- 10 --><bibliomixed xml:id="queryingEnc" xreflabel="10">
            <emphasis role="ital">Querying Encrypted XML Documents</emphasis>, Ravi Chandra Jammalamadaka and Sharad Mehrotra.
            Proceedings of the 10th International Database Engineering and Applications Symposium, p.129-136, December 11-14, 2006
            <link xlink:href="http://dx.doi.org/10.1109/IDEAS.2006.39" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">doi: 10.1109/IDEAS.2006.39</link>
        </bibliomixed><!-- 11 --><bibliomixed xml:id="FIPS-180" xreflabel="11">
            <emphasis role="ital">The FIPS 180-2 publication on Secure Hash Algorithms</emphasis>, NIST.
            <link xlink:href="http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf</link>
        </bibliomixed><!-- 12 --><bibliomixed xml:id="SecuringXML" xreflabel="12">
            <emphasis role="ital">Securing XML data in third-party distribution systems</emphasis>,
            Barbara Carminati, Elena Ferrari, and Elisa Bertino. Proceedings of the 14th ACM
            international conference on Information and knowledge management (CIKM '05), New York,
            NY, USA. <link xlink:href="http://doi.acm.org/10.1145/1099554.1099575" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">doi:
            10.1145/1099554.1099575</link>
        </bibliomixed><!-- 13 --><bibliomixed xml:id="EfficientSecureQuery" xreflabel="13">
            <emphasis role="ital">Efficient Secure Query Evaluation over Encrypted XML Database</emphasis>, 
            Hui Wang and Laks V.S. Lakshmanan.
            VLDB „06, September 12-15, 2006, Seoul, Korea.
        </bibliomixed><!-- 14 --><bibliomixed xml:id="surveyQEncrypt" xreflabel="14">
            <emphasis role="ital">A Survey on Querying Encrypted XML Documents for Databases as a Service</emphasis>,
            Ozan Ünay and Taflan Gündem.
            SIGMOD Record, March 2008 (Vol. 37, No. 1)
        </bibliomixed><!-- 15 --><bibliomixed xml:id="eXist" xreflabel="15">
            <emphasis role="ital">Configuring Database Indexes</emphasis>, eXist Open Source Native Database, 
            <link xlink:href="http://exist.sourceforge.net/indexing.html#structuralidx" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://exist.sourceforge.net/indexing.html#structuralidx</link>
        </bibliomixed><!-- 16 --><bibliomixed xml:id="Xindices" xreflabel="16">
            <emphasis role="ital">Administration Guide</emphasis>, Xindices 1.1, The Apache XML project,
            <link xlink:href="http://xml.apache.org/xindice/1.1/guide-administrator.html#Managing+Indexes" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://xml.apache.org/xindice/1.1/guide-administrator.html#Managing+Indexes</link>
        </bibliomixed><!-- 17 --><bibliomixed xml:id="semCrypt" xreflabel="17">
            <emphasis role="ital">SemCrypt-Ensuring Privacy of Electronic Documents Through Semantic-Based Encrypted Query Processing</emphasis>,
            M. Schrefl, K. Grun, and J. Dorn.
            Proceedings of the 21st International conference on Data Engineering Workshop, 2005, IEEE computer society.
        </bibliomixed><!-- 18 --><bibliomixed xml:id="queriableHD" xreflabel="18">
            <emphasis role="ital">Queriable Hierarchical Data,</emphasis>, Sumit Mittal and Biplav Srivastava.
            US patent, US 2008/0071814 A1
            <link xlink:href="http://www.google.com/patents/about?id=1WuoAAAAEBAJ" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://www.google.com/patents/about?id=1WuoAAAAEBAJ</link>
        </bibliomixed><!-- 19 --><bibliomixed xml:id="queriableHDpaper" xreflabel="19">
            <emphasis role="ital">Exploring Queriability of Encrypted and Compressed XML Data </emphasis>,
            I. Elgedawy, B. Srivastava, and S. Mittal.
            24th International Symposium on Computer and Information Sciences, 14-16 Sept. 2009 (ISCIS 2009). 
            doi: <biblioid class="doi">10.1109/ISCIS.2009.5291834</biblioid> 
        </bibliomixed><!-- 20 --><bibliomixed xml:id="xmlEnc" xreflabel="20">
            <emphasis role="ital">XML Encryption Syntax and Processing</emphasis>, W3C recommendation, 
            10 December 2002.
            <link xlink:href="http://www.w3.org/TR/xmlenc-core/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://www.w3.org/TR/xmlenc-core/</link>
        </bibliomixed></bibliography></article>