<?xml version="1.0" encoding="UTF-8"?><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0-subset Balisage-1.3"><title>XML instances to validate XML schemas</title><info><confgroup><conftitle>International Symposium on Quality Assurance and Quality Control in XML</conftitle><confdates>August 6, 2012</confdates></confgroup><abstract><para>Ever modified an XML schema? Ever broken something while fixing a bug or adding a new feature? As with
                any piece of engineering, the more complex a schema is, the harder it is to maintain. In other domains,
                unit tests dramatically reduce the number of regressions and thus provide a kind of safety net for
                maintainers. Can we learn from these techniques and adapt them to XML schema languages? In this workshop
                session, we develop a schema using unit test techniques, to illustrate their benefits in this
                domain.</para></abstract><author><personname><firstname>Eric</firstname><surname>van der Vlist</surname></personname><personblurb><para>Eric is an independent consultant and trainer. His domain of expertise include Web development and
                    XML technologies.</para><para>He is the creator and main editor of <link xlink:href="http://xmlfr.org" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">XMLfr.org</link>, the
                    main site dedicated to XML technologies in French, the author of the O'Reilly animal books XML
                    Schema and RELAX NG and a member or the ISO DSDL (<link xlink:href="http://dsdl.org" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://dsdl.org</link>) working group focused on XML schema languages.</para><para>He is based in Paris and you can reach him by mail (<link xlink:href="mailto:vdv@dyomedea.com" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">vdv@dyomedea.com</link>) or meet him in one of the many conferences where he presents his
                    projects.</para></personblurb><affiliation><orgname>Dyomedea</orgname></affiliation></author><legalnotice><para>Published under the Creative Commons "cc by" license</para></legalnotice></info><para>The workshop is run as an exchange between a customer (played by Tommie Usdin) and a schema expert (played by
        Eric van der Vlist).</para><para>The customer, who needed a schema for her to-do list XML application, is puzzled by the "test first programming"
        technique imposed by the schema expert.</para><para>At the end of the day (or workshop), will she be converted to this well-known agile or extreme programming
        technique adapted to the development of XML schemas?</para><section><title>Step 1: Getting started</title><para>
            <blockquote><para> Hi Eric, can you help me to write a schema?</para><attribution>Customer</attribution></blockquote>
            <blockquote><para> Hi Tommie, yes, sure, what will the schema be about?</para><attribution>Expert</attribution></blockquote>
            <blockquote><para> I need a vocabulary for my to-do lists, with to-do item... </para><attribution>Customer</attribution></blockquote>
            <blockquote><para> OK, you've told me enough, let's get started.</para><attribution>Expert (interrupting his customer)</attribution></blockquote>
            <blockquote><para> Get started? but I haven't told you anything about it!</para><attribution>Customer</attribution></blockquote>
            <blockquote><para> Right, but it's never too soon to write tests when you do test first programming!</para><attribution>Expert</attribution></blockquote>
        </para><note><para>In test first programming (also called <link xlink:href="http://en.wikipedia.org/wiki/Test-driven_development" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">test driven development</link>), 
                developers create test case (usually unit test cases) before implementing a function. The test suite is
                run, code is written based on the result of these tests and the test suite and code are updated until
                all the tests pass.</para></note><para>Test suite
            (suite.xml):<programlisting xml:space="preserve">&lt;tf:suite xmlns:tf="http://xmlschemata.org/test-first/" xmlns:todo="http://balisage.net/todo#" title="Basic tests"&gt;
    &lt;tf:case title="Root element" expected="valid" id="root"&gt;
        &lt;todo:list/&gt;
    &lt;/tf:case&gt;
&lt;/tf:suite&gt;</programlisting></para><note><para>The vocabulary used to define these test cases has been inspired by the <link xlink:href="http://sut.sourceforge.net/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">SUT</link> (XML Schema Unit Test) project. It's a simple
                vocabulary (composed of only three different elements) allowing to pack several XML instances together
                with the outcome validation result. It uses conventions that you'll discover during the course of this
                workshop. </para></note><figure xml:id="gourds"><title>Test results</title><mediaobject><imageobject><imagedata fileref="../../../vol9/graphics/Vlist02/Vlist02-001.png"/></imageobject></mediaobject></figure><note><para>The test suite is run using a simple <link xlink:href="http://www.orbeon.com/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">Orbeon Forms</link>
                application. The rendering relies on Orbeon Forms <link xlink:href="http://wiki.orbeon.com/forms/doc/developer-guide/orbeon-forms-xforms-compliance-matrix" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">XForms' implementation</link> while the test suite is run using an <link xlink:href="http://wiki.orbeon.com/forms/doc/developer-guide/xml-pipeline-language-xpl" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">Orbeon
                    Forms' XPL</link> pipeline. </para></note></section><section><title>Step 2: Adding a schema</title><para>
            <blockquote><para>You see, you can already write to-do lists!</para><attribution>Expert</attribution></blockquote>
            <blockquote><para>Hold on, we don't have any schema!</para><attribution>Customer</attribution></blockquote>
            <blockquote><para>That's true, but you don't have to write a schema to write XML documents.</para><attribution>Expert</attribution></blockquote>
            <blockquote><para>I know, but you're here to write a schema! Furthermore, right now we accept anything. I don't want
                    to have XML documents with anything as a root element!</para><attribution>Customer</attribution></blockquote>
            <blockquote><para>That's a good reason to write a schema, but before that we need to add a test in our suite
                    first.</para><attribution>Expert</attribution></blockquote>
        </para><para>Test suite
            (suite.xml):<programlisting xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;tf:suite xmlns:tf="http://xmlschemata.org/test-first/" xmlns:todo="http://balisage.net/todo#" title="Basic tests"&gt;
    &lt;tf:case title="TODO list toot element" expected="valid" id="root"&gt;
        &lt;todo:list/&gt;
    &lt;/tf:case&gt;
    &lt;tf:case title="Other root element" expected="error" id="other-root"&gt;
        &lt;todo:title&gt;A title&lt;/todo:title&gt;
    &lt;/tf:case&gt;
&lt;/tf:suite&gt;</programlisting></para><para>
            <blockquote><para>Now that we've updated the test suite, we run it again.</para><attribution>Expert</attribution></blockquote>
        </para><figure><title>Test results</title><mediaobject><imageobject><imagedata fileref="../../../vol9/graphics/Vlist02/Vlist02-002.png"/></imageobject></mediaobject></figure><para>
            <blockquote><para>This result was expected, and we can now proceed to create a schema and attach it to the test
                    suite.</para><attribution>Expert</attribution></blockquote>
        </para><para><programlisting xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xs:schema
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    elementFormDefault="qualified"
    targetNamespace="http://balisage.net/todo#"
    xmlns="http://balisage.net/todo#"&gt;
    
    &lt;xs:element
        name="list"/&gt;
&lt;/xs:schema&gt;</programlisting>todo.xsd</para><para><programlisting xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;tf:suite
    xmlns:tf="http://xmlschemata.org/test-first/"
    xmlns:todo="http://balisage.net/todo#"
    title="Basic tests"&gt;
    &lt;tf:validation
        href="todo.xsd"
        type="xsd"/&gt;
    &lt;tf:case
        title="TODO list toot element"
        expected="valid"
        id="root"&gt;
        &lt;todo:list/&gt;
    &lt;/tf:case&gt;
    &lt;tf:case
        title="Other root element"
        expected="error"
        id="other-root"&gt;
        &lt;todo:title&gt;A title&lt;/todo:title&gt;
    &lt;/tf:case&gt;
&lt;/tf:suite&gt;</programlisting>suite.xml</para><para>
            <blockquote><para>It's time to test again what we've done.</para><attribution>Expert</attribution></blockquote>
        </para><figure><title>Test results</title><mediaobject><imageobject><imagedata fileref="../../../vol9/graphics/Vlist02/Vlist02-003.png"/></imageobject></mediaobject></figure></section><section><title>Step 3: Adding list title elements</title><para>
            <blockquote><para>I am happy to see some progress, at last, but I don't want to accept any content in the to-do list
                    element. Can you add list title elements?</para><attribution>Customer</attribution></blockquote>
            <blockquote><para>Sure, back to the test suite... </para><attribution>Expert</attribution></blockquote>
        </para><para>Test suite
            (suite.xml):<programlisting xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;tf:suite
    xmlns:tf="http://xmlschemata.org/test-first/"
    xmlns:todo="http://balisage.net/todo#"
    title="Basic tests"&gt;
    &lt;tf:validation
        href="todo.xsd"
        type="xsd"/&gt;
    &lt;tf:case
        title="TODO list root element"
        expected="valid"
        id="root"&gt;
        &lt;todo:list/&gt;
    &lt;/tf:case&gt;
    &lt;tf:case
        title="TODO list with a title"
        expected="valid"
        id="list-title"&gt;
        &lt;todo:list&gt;
            &lt;todo:title/&gt;
        &lt;/todo:list&gt;
    &lt;/tf:case&gt;
    &lt;tf:case
        title="Other root element"
        expected="error"
        id="other-root"&gt;
        &lt;todo:title&gt;A title&lt;/todo:title&gt;
    &lt;/tf:case&gt;
&lt;/tf:suite&gt;</programlisting></para><para>
            <blockquote><para>Now that we've updated the test suite, we run it again.</para><attribution>Expert</attribution></blockquote>
        </para><figure><title>Test results</title><mediaobject><imageobject><imagedata fileref="../../../vol9/graphics/Vlist02/Vlist02-004.png"/></imageobject></mediaobject></figure><para>
            <blockquote><para>You see? We do already support list title elements!</para><attribution>Expert</attribution></blockquote>
            <blockquote><para>Sure, but I don't want to accept any content in my to-do list. And the title element should be
                    mandatory. And it should not be empty but have at least one character!</para><attribution>Customer</attribution></blockquote>
            <blockquote><para>Back to the test suite, then...</para><attribution>Expert</attribution></blockquote>
        </para><para>Test suite
            (suite.xml):<programlisting xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;tf:suite
    xmlns:tf="http://xmlschemata.org/test-first/"
    xmlns:todo="http://balisage.net/todo#"
    title="Basic tests"&gt;
    &lt;tf:validation
        href="todo.xsd"
        type="xsd"/&gt;
    &lt;todo:list&gt;
        &lt;tf:case
            title="Empty list element"
            expected="error"
            id="root-empty"/&gt; 
        &lt;todo:title&gt;
            &lt;tf:case title="empty title" expected="error" id="empty-title"/&gt;
            &lt;tf:case title="non empty title" expected="valid" id="non-empty-title"&gt;A title&lt;/tf:case&gt;
        &lt;/todo:title&gt;
        &lt;tf:case
            title="Un expected element"
            expected="error"
            id="unexpected"&gt;
            &lt;todo:foo/&gt;
        &lt;/tf:case&gt;
    &lt;/todo:list&gt;
    &lt;tf:case
        title="Other root element"
        expected="error"
        id="other-root"&gt;
        &lt;todo:title&gt;A title&lt;/todo:title&gt;
    &lt;/tf:case&gt;
&lt;/tf:suite&gt;</programlisting></para><note><para>This is the first example with non-top-level <code>tf:case</code> elements. To understand how this
                works, we must look in more detail to the algorithm used by the framework to split a test suite into
                instances. The algorithm consists in two steps:<itemizedlist><listitem><para>Loop over each <code>tf:case</code> element</para></listitem><listitem><para>Suppression of the <code>tf:case</code> elements and of the top level elements which are
                            not ancestors of the current <code>tf:case</code> element.</para></listitem></itemizedlist>This description may look complex, but the result is a rather intuitive way to define
                sub-trees that are common to several test cases. </para></note><para>
            <blockquote><para>Now that we've updated the test suite, we run it again.</para><attribution>Expert</attribution></blockquote>
        </para><figure><title>Test results</title><mediaobject><imageobject><imagedata fileref="../../../vol9/graphics/Vlist02/Vlist02-005.png"/></imageobject></mediaobject></figure><para>
            <blockquote><para>Looks good, now we can update the schema.</para><attribution>Expert</attribution></blockquote>
        </para><para><programlisting xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xs:schema
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    elementFormDefault="qualified"
    targetNamespace="http://balisage.net/todo#"
    xmlns="http://balisage.net/todo#"&gt;
    
    &lt;xs:element
        name="list"&gt;
        &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
                &lt;xs:element
                    name="title"&gt;
                    &lt;xs:simpleType&gt;
                        &lt;xs:restriction
                            base="xs:token"&gt;
                            &lt;xs:minLength
                                value="1"/&gt;
                        &lt;/xs:restriction&gt;
                    &lt;/xs:simpleType&gt;
                &lt;/xs:element&gt;
            &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
    &lt;/xs:element&gt;
&lt;/xs:schema&gt;</programlisting>todo.xsd</para><para>
            <blockquote><para>And run the test suite again.</para><attribution>Expert</attribution></blockquote>
        </para><figure><title>Test results</title><mediaobject><imageobject><imagedata fileref="../../../vol9/graphics/Vlist02/Vlist02-006.png"/></imageobject></mediaobject></figure></section><section><title>Step 4: Adding to-do item elements</title><para>
            <blockquote><para>Good. Now I want to add to-do items. And lists should have at least one of them, by the way.</para><attribution>Customer</attribution></blockquote>
            <blockquote><para>Sure, back to the test suite...</para><attribution>Expert</attribution></blockquote>
        </para><para>Test suite
            (suite.xml):<programlisting xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;tf:suite
    xmlns:tf="http://xmlschemata.org/test-first/"
    xmlns:todo="http://balisage.net/todo#"
    title="Basic tests"&gt;
    &lt;tf:validation
        href="todo.xsd"
        type="xsd"/&gt;
    &lt;tf:case
        title="Empty list element"
        expected="error"
        id="root-empty"&gt;
        &lt;todo:list/&gt;
    &lt;/tf:case&gt;
    &lt;todo:list&gt;
        &lt;!-- Testing title elements --&gt;
        &lt;todo:title&gt;
            &lt;tf:case
                title="empty title"
                expected="error"
                id="empty-title"/&gt;
            &lt;tf:case
                title="non empty title"
                expected="valid"
                id="non-empty-title"&gt;A title&lt;/tf:case&gt;
        &lt;/todo:title&gt;
        &lt;todo:item&gt;
            &lt;todo:title&gt;A title&lt;/todo:title&gt;
        &lt;/todo:item&gt;
        &lt;tf:case
            title="Un expected element"
            expected="error"
            id="unexpected"&gt;
            &lt;todo:foo/&gt;
        &lt;/tf:case&gt;
    &lt;/todo:list&gt;
    &lt;todo:list&gt;
        &lt;!-- Testing todo items --&gt;
        &lt;todo:title&gt;Testing todo items&lt;/todo:title&gt;
        &lt;tf:case
            title="No todo items"
            expected="error"
            id="no-items"/&gt;
        &lt;todo:item&gt;
            &lt;tf:case
                title="empty item"
                expected="error"
                id="empty-item"/&gt;
            &lt;tf:case
                title="item with a title"
                expected="valid"
                id="item-title"&gt;
                &lt;todo:title&gt;A title&lt;/todo:title&gt;
            &lt;/tf:case&gt;
        &lt;/todo:item&gt;
    &lt;/todo:list&gt;
    &lt;tf:case
        title="Other root element"
        expected="error"
        id="other-root"&gt;
        &lt;todo:title&gt;A title&lt;/todo:title&gt;
    &lt;/tf:case&gt;
&lt;/tf:suite&gt;</programlisting></para><para>
            <blockquote><para>Let's see what we get before any update to the schema.</para><attribution>Expert</attribution></blockquote>
        </para><figure><title>Test results</title><mediaobject><imageobject><imagedata fileref="../../../vol9/graphics/Vlist02/Vlist02-007.png"/></imageobject></mediaobject></figure><para>
            <blockquote><para>It's time to update the schema and fix what needs to be fixed.</para><attribution>Expert</attribution></blockquote>
        </para><para><programlisting xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xs:schema
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    elementFormDefault="qualified"
    targetNamespace="http://balisage.net/todo#"
    xmlns="http://balisage.net/todo#"&gt;
    
    &lt;xs:element
        name="list"&gt;
        &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
                &lt;xs:element
                    name="title"&gt;
                    &lt;xs:simpleType&gt;
                        &lt;xs:restriction
                            base="xs:token"&gt;
                            &lt;xs:minLength
                                value="1"/&gt;
                        &lt;/xs:restriction&gt;
                    &lt;/xs:simpleType&gt;
                &lt;/xs:element&gt;
                &lt;xs:element
                    maxOccurs="unbounded"
                    name="item"&gt;
                    &lt;xs:complexType&gt;
                        &lt;xs:sequence&gt;
                            &lt;xs:element
                                name="title"&gt;
                                &lt;xs:simpleType&gt;
                                    &lt;xs:restriction
                                        base="xs:token"&gt;
                                        &lt;xs:minLength
                                            value="1"/&gt;
                                    &lt;/xs:restriction&gt;
                                &lt;/xs:simpleType&gt;
                            &lt;/xs:element&gt;
                        &lt;/xs:sequence&gt;
                    &lt;/xs:complexType&gt;
                &lt;/xs:element&gt;
            &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
    &lt;/xs:element&gt;
&lt;/xs:schema&gt;</programlisting>todo.xsd</para><para>
            <blockquote><para>And now we can check if we get it right.</para><attribution>Expert</attribution></blockquote>
        </para><figure><title>Test results</title><mediaobject><imageobject><imagedata fileref="../../../vol9/graphics/Vlist02/Vlist02-008.png"/></imageobject></mediaobject></figure></section><section><title>Step 5: Modularizing the schema</title><para>
            <blockquote><para>Eric, you should be ashamed, it's a pure Russian doll schema, not modular at all! Why not define
                    the title and list elements globally?</para><attribution>Customer</attribution></blockquote>
            <blockquote><para>Sure, we can do that! If we just change the structure of the schema, we don't need to update the
                    test suite and can work directly on the schema.</para><attribution>Expert</attribution></blockquote>
        </para><para><programlisting xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xs:schema
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    elementFormDefault="qualified"
    targetNamespace="http://balisage.net/todo#"
    xmlns="http://balisage.net/todo#"&gt;
    
    &lt;xs:element
        name="list"&gt;
        &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
                &lt;xs:element
                    ref="title"/&gt;
                &lt;xs:element
                    maxOccurs="unbounded"
                    ref="item"/&gt;
            &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
    &lt;/xs:element&gt;
    &lt;xs:element
        name="title"&gt;
        &lt;xs:simpleType&gt;
            &lt;xs:restriction
                base="xs:token"&gt;
                &lt;xs:minLength
                    value="1"/&gt;
            &lt;/xs:restriction&gt;
        &lt;/xs:simpleType&gt;
    &lt;/xs:element&gt;
    &lt;xs:element
        name="item"&gt;
        &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
                &lt;xs:element
                    ref="title"/&gt;
            &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
    &lt;/xs:element&gt;
&lt;/xs:schema&gt;</programlisting>todo.xsd</para><para>
            <blockquote><para>But of course, each time we update the schema we must check if we've not introduced any
                    bug.</para><attribution>Expert</attribution></blockquote>
        </para><figure><title>Test results</title><mediaobject><imageobject><imagedata fileref="../../../vol9/graphics/Vlist02/Vlist02-009.png"/></imageobject></mediaobject></figure><para>
            <blockquote><para>Waoo, what's happening now? </para><attribution>Customer</attribution></blockquote>
            <blockquote><para>Now that our elements are global in the schema, we accept a valid title as a root element. Is that
                    what you want?</para><attribution>Expert</attribution></blockquote>
            <blockquote><para>No way, a title is not a valid list!</para><attribution>Customer</attribution></blockquote>
            <blockquote><para>Then we have a number of options... We can go back to local elements, and we can also add a
                    schematron schema to check this constraint.</para><attribution>Expert</attribution></blockquote>
            <blockquote><para>Schematron is fine, we'll probably find many other constraints to check in my to-do lists
                    anyway...</para><attribution>Customer</attribution></blockquote>
            <blockquote><para>OK. We still don't have to update the test suite since we've not changed our requirement. Let's
                    write this Schematron schema then.</para><attribution>Expert</attribution></blockquote>
        </para><para><programlisting xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;schema xmlns="http://purl.oclc.org/dsdl/schematron" queryBinding="xslt2"&gt;
    &lt;ns uri="http://balisage.net/todo#" prefix="todo"/&gt;
    &lt;pattern&gt;
        &lt;rule context="/*"&gt;
            &lt;assert test="self::todo:list"&gt;The root element should be a todo:list&lt;/assert&gt;
        &lt;/rule&gt;
    &lt;/pattern&gt;
&lt;/schema&gt;</programlisting>todo.sch</para><para>
            <blockquote><para>Saying that we don't have to update the test suite wasn't totally accurate because the schemas are
                    referenced in ths test suite.</para><attribution>Expert</attribution></blockquote>
        </para><para>Test suite
            (suite.xml):<programlisting xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;tf:suite
    xmlns:tf="http://xmlschemata.org/test-first/"
    xmlns:todo="http://balisage.net/todo#"
    title="Basic tests"&gt;
    &lt;tf:validation
        href="todo.sch"
        type="sch"/&gt;
    &lt;tf:validation
        href="todo.xsd"
        type="xsd"/&gt;
    &lt;tf:case
        title="Empty list element"
        expected="error"
        id="root-empty"&gt;
        &lt;todo:list/&gt;
    &lt;/tf:case&gt;
    &lt;todo:list&gt;
        &lt;todo:title&gt;
            &lt;tf:case
                title="empty title"
                expected="error"
                id="empty-title"/&gt;
            &lt;tf:case
                title="non empty title"
                expected="valid"
                id="non-empty-title"&gt;A title&lt;/tf:case&gt;
        &lt;/todo:title&gt;
        &lt;todo:item&gt;
            &lt;todo:title&gt;A title&lt;/todo:title&gt;
        &lt;/todo:item&gt;
        &lt;tf:case
            title="Un expected element"
            expected="error"
            id="unexpected"&gt;
            &lt;todo:foo/&gt;
        &lt;/tf:case&gt;
    &lt;/todo:list&gt;
    &lt;todo:list&gt;
        &lt;todo:title&gt;Testing todo items&lt;/todo:title&gt;
        &lt;tf:case
            title="No todo items"
            expected="error"
            id="no-items"/&gt;
        &lt;todo:item&gt;
            &lt;tf:case
                title="empty item"
                expected="error"
                id="empty-item"/&gt;
            &lt;tf:case
                title="item with a title"
                expected="valid"
                id="item-title"&gt;
                &lt;todo:title&gt;A title&lt;/todo:title&gt;
            &lt;/tf:case&gt;
        &lt;/todo:item&gt;
    &lt;/todo:list&gt;
    &lt;tf:case
        title="Other root element"
        expected="error"
        id="other-root"&gt;
        &lt;todo:title&gt;A title&lt;/todo:title&gt;
    &lt;/tf:case&gt;
&lt;/tf:suite&gt;</programlisting></para><para>
            <blockquote><para>Time to see if we've fixed our issue!</para><attribution>Expert</attribution></blockquote>
        </para><figure><title>Test results</title><mediaobject><imageobject><imagedata fileref="../../../vol9/graphics/Vlist02/Vlist02-010.png"/></imageobject></mediaobject></figure><para>
            <blockquote><para>Great, we've made it, thanks!</para><attribution>Customer</attribution></blockquote>
        </para></section><section><title>Want to try it?</title><para>The application used to run the test suite and display its result is available at <link xlink:href="http://svn.xmlschemata.org/repository/downloads/tefisc/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://svn.xmlschemata.org/repository/downloads/tefisc/</link>.</para><para>If you just want to understand how the test suite is split into XML instances, you can have a look at
                <link xlink:href="http://svn.xmlschemata.org/repository/downloads/tefisc/orbeon-resources/apps/tefisc/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">http://svn.xmlschemata.org/repository/downloads/tefisc/orbeon-resources/apps/tefisc/</link> .</para><para>In this directory:<itemizedlist><listitem><para><link xlink:href="http://svn.xmlschemata.org/repository/downloads/tefisc/orbeon-resources/apps/tefisc/split-tests.xsl" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">split-tests.xsl</link> is the XSLT transformation that splits a test suite into top level
                        element test cases. This transformation has no dependence on Orbeon Forms and can be manually
                        run against a test suite.</para></listitem><listitem><para>
                        <link xlink:href="http://svn.xmlschemata.org/repository/downloads/tefisc/orbeon-resources/apps/tefisc/run-test.xpl" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">run-test.xpl</link> is the XPL pipeline that runs a test case.</para></listitem><listitem><para>
                        <link xlink:href="http://svn.xmlschemata.org/repository/downloads/tefisc/orbeon-resources/apps/tefisc/list-suites.xpl" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">list-suites.xpl</link> is the XPL pipeline that gives the list available test cases.</para></listitem><listitem><para>
                        <link xlink:href="http://svn.xmlschemata.org/repository/downloads/tefisc/orbeon-resources/apps/tefisc/view.xhtml" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">view.xhtml</link>  is the XForms application that displays the results.</para></listitem></itemizedlist></para><para>To install this application:<itemizedlist><listitem><para><link xlink:href="http://wiki.orbeon.com/forms/doc/developer-guide/admin/installing" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">Install
                            Orbeon Forms</link></para></listitem><listitem><para>Copy  the  <link xlink:href="http://svn.xmlschemata.org/repository/downloads/tefisc/orbeon-resources/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">orbeon-resources/</link>  directory under <code>/WEB-INF/resources/apps/</code> in your
                        orbeon webapp directory</para></listitem><listitem><para><emphasis role="bold">Or</emphasis>, alternatively, copy the <link xlink:href="http://svn.xmlschemata.org/repository/downloads/tefisc/orbeon-resources/apps/tefisc/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">tefisc/</link> directory wherever you want, edit <link xlink:href="http://svn.xmlschemata.org/repository/downloads/tefisc/orbeon-resources/web.xml.sav" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">web.xml.sav</link> to replace
                            <code>&lt;param-value&gt;/home/vdv/projects/tefisc/orbeon-resources&lt;/param-value&gt;</code>
                        by the location of this directory on your filesystem, replace <code>/WEB-INF/web.xml</code> by
                        this file and restart your application server.</para></listitem></itemizedlist></para></section></article>