<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.3"><title class="po-block e1 e1"><textual class="po-textual">Customizing a general purpose XML editor: oXygen's authoring environment</textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">International Symposium on Native XML User Interfaces</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 5, 2013</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual">oXygen started in 2001 as an IDE for XML and XML related technologies but after some
        years our users wanted to be able to edit XML documents not only as text, in the source
        mode, but also in a way that will be non-intimidating for non-technical people. As a result
        of that, we introduced in 2007 support for visually editing XML documents. The rendering is
        based on CSS and we allow also custom actions to be defined through configuration or through
        Java coding, XSLT or XQuery scripts, etc. With CSS extensions we introduced also form based
        controls and actions directly in the user interface, thus making possible to quickly create
        interfaces for editing XML documents that completely hide the underlying XML structure and
        allow people to edit XML without seeing any of the XML markup.</textual></para></abstract><author class="po-record e8 e8"><personname class="po-record e9 e9"><firstname class="po-field e10 e10"><textual class="po-textual">George</textual></firstname><surname class="po-field e11 e11"><textual class="po-textual">Bina</textual></surname></personname><personblurb class="po-container e12 e12"><para class="po-block e13 e13"><textual class="po-textual">George Bina is one of the founders of Syncro Soft, the company that develops oXygen
          XML Editor. He worked with XML since 1998, initially using XML for different projects and,
          starting with 2001, on the development of oXygen XML Editor, a tool for XML authoring and
          development. George is actively involved in the XML related projects contributing to XML
          related open source projects: Jing (the validation engine for Relax NG, NVDL)</textual></para></personblurb><affiliation class="po-record e14 e14"><orgname class="po-block e15 e15"><textual class="po-textual">Syncro Soft</textual></orgname></affiliation></author><legalnotice class="po-container e16 e16"><para class="po-block e17 e17"><textual class="po-textual">Copyright Â©  2013 Syncro Soft SRL</textual></para></legalnotice></info><section class="po-hcontainer e18 e18"><title class="po-block e19 e19"><textual class="po-textual">XML and CSS</textual></title><para class="po-block e20 e20"><textual class="po-textual">CSS is a W3C standard that can be used to provide styling information to a document. While
      CSS is used mainly with HTML there is no such restriction to the standard itself and it can be
      used also with any XML document. </textual></para><para class="po-block e21 e21"><textual class="po-textual">The </textual><emphasis class="po-inline e22 e22"><textual class="po-textual">advantage</textual></emphasis><textual class="po-textual"> of using CSS for XML editing was the fact that we were
      able to use the XML tree itself as the model and just compute the styles for rendering each
      node, there is no transformation and mapping between an output format and the XML tree. This
      allows to provide feedback to the user on the editing context at the caret position in the
      document and to combine that with the schema information to compute the DTD/schema valid
      markup that can be inserted at that location in the document.</textual></para><section class="po-hcontainer e23 e23"><title class="po-block e24 e24"><textual class="po-textual">Simple editing concepts</textual></title><para class="po-block e25 e25"><textual class="po-textual">As the position in the visual editing environment matches the position in the XML tree
        it is possible to have only 2 simple concepts that an author needs to learn in order to edit
        any XML document. The user needs to go to the position where he want to change the document
        and then:</textual><itemizedlist class="po-table e26 e26"><listitem class="po-container e27 e27"><para class="po-block e28 e28"><textual class="po-textual">type to change the content</textual></para></listitem><listitem class="po-container e29 e29"><para class="po-block e30 e30"><textual class="po-textual">press "Enter" to enter markup</textual></para></listitem></itemizedlist><textual class="po-textual">With these simple concepts an author can change any XML document.</textual></para><para class="po-block e31 e31"><textual class="po-textual">To help locate the current position in the document when the XML tags are not displayed
        oXygen provides a number of helpers</textual><itemizedlist class="po-table e32 e32"><listitem class="po-container e33 e33"><para class="po-block e34 e34"><textual class="po-textual">location tooltip</textual></para></listitem><listitem class="po-container e35 e35"><para class="po-block e36 e36"><textual class="po-textual">breadcrumb</textual></para></listitem><listitem class="po-container e37 e37"><para class="po-block e38 e38"><textual class="po-textual">synchronized views: Outline, Model, Attributes, etc.</textual></para></listitem><listitem class="po-container e39 e39"><para class="po-block e40 e40"><textual class="po-textual">highlight the elements at caret position</textual></para></listitem><listitem class="po-container e41 e41"><para class="po-block e42 e42"><textual class="po-textual">element range marker</textual></para></listitem></itemizedlist><textual class="po-textual">All these help the user understand what is the current location in the
        document and then the user can perform content and markup changes at that position.</textual></para></section><section class="po-hcontainer e43 e43"><title class="po-block e44 e44"><textual class="po-textual">Alternate CSS stylesheets</textual></title><para class="po-block e45 e45"><textual class="po-textual">The specification for associating a CSS with an XML document allows to specify multiple
        CSS stylesheets as alternate stylesheets - thus it is possible to switch between different
        renderings of the XML documents and create specific CSS stylesheets focused on different
        tasks that need to be performed on the XML document.</textual></para><para class="po-block e46 e46"><textual class="po-textual">Elements can be also completely removed from the visual interface using a </textual><code class="po-atom e47 e47"><textual class="po-textual">display
          : none;</textual></code><textual class="po-textual"> property on that element - thus an alternate stylesheet can provide also a
        reduced view on the document. </textual></para><para class="po-block e48 e48"><textual class="po-textual">As en example we provide for DocBook 3 CSS stylesheets</textual><itemizedlist class="po-table e49 e49"><listitem class="po-container e50 e50"><para class="po-block e51 e51"><textual class="po-textual">the default stylesheet</textual></para></listitem><listitem class="po-container e52 e52"><para class="po-block e53 e53"><textual class="po-textual">a stylesheet that hides column specifications for tables</textual></para></listitem><listitem class="po-container e54 e54"><para class="po-block e55 e55"><textual class="po-textual">a stylesheet that highlights the content marked with DocBook specific revision
              markup</textual></para></listitem></itemizedlist></para></section><section class="po-hcontainer e56 e56"><title class="po-block e57 e57"><textual class="po-textual">CSS support </textual></title><para class="po-block e58 e58"><textual class="po-textual">The CSS support covers CSS version 1, 2 and 3. </textual></para><para class="po-block e59 e59"><textual class="po-textual">From CSS 3 we absolutely needed support for </textual><emphasis class="po-inline e60 e60"><textual class="po-textual">namespaces</textual></emphasis><textual class="po-textual"> and the
          </textual><code class="po-atom e61 e61"><textual class="po-textual">attr</textual></code><textual class="po-textual"> function to provide access to attribute values and thus be able to
        provide links or to present attribute information in the visual editor. We support also the
        additional attribute type parameter for the </textual><code class="po-atom e62 e62"><textual class="po-textual">attr</textual></code><textual class="po-textual"> function that makes this
        function usable to provide dynamic values for CSS properties, values taken from the XML
        document itself.</textual></para><note class="po-container e63 e63"><para class="po-block e64 e64"><textual class="po-textual">The </textual><code class="po-atom e65 e65"><textual class="po-textual">attr</textual></code><textual class="po-textual"> function gives the attribute information as read only in the
            </textual><code class="po-atom e66 e66"><textual class="po-textual">content</textual></code><textual class="po-textual"> property - to be able to edit that we needed to add an
          extension.</textual></para></note><para class="po-block e67 e67"><textual class="po-textual">Other CSS 3 functionality supported covers transparent colors and support for custom
        fonts using the </textual><code class="po-atom e68 e68"><textual class="po-textual">@font-face</textual></code><textual class="po-textual"> at-rule.</textual></para></section></section><section class="po-hcontainer e69 e69"><title class="po-block e70 e70"><textual class="po-textual">Show/hide XML tag information</textual></title><para class="po-block e71 e71"><textual class="po-textual">By default the XML tags are not visible but sometimes it is useful to have them visible in
      the visual editing interface. oXygen provides 6 different levels of showing markup information
      in the visual editing interface, from no tags at all to full tags with attributes:</textual><itemizedlist class="po-table e72 e72"><listitem class="po-container e73 e73"><para class="po-block e74 e74"><textual class="po-textual">no tags - no tags are visible</textual></para></listitem><listitem class="po-container e75 e75"><para class="po-block e76 e76"><textual class="po-textual">partial tags - inline elements are presented with small tag markers that just signal
            the presence of a tag</textual></para></listitem><listitem class="po-container e77 e77"><para class="po-block e78 e78"><textual class="po-textual">inline tags - the tags are visible for inline elements</textual></para></listitem><listitem class="po-container e79 e79"><para class="po-block e80 e80"><textual class="po-textual">block tags - the tags are visible for block elements</textual></para></listitem><listitem class="po-container e81 e81"><para class="po-block e82 e82"><textual class="po-textual">full tags - the tags are visible for all elements</textual></para></listitem><listitem class="po-container e83 e83"><para class="po-block e84 e84"><textual class="po-textual">full tags with attributes - both tags and attributes are visible for all
            elements</textual></para></listitem></itemizedlist></para></section><section class="po-hcontainer e85 e85"><title class="po-block e86 e86"><textual class="po-textual">Custom actions</textual></title><para class="po-block e87 e87"><textual class="po-textual">Custom actions are part of the editing experience as they provide easy access to inserting
      comment fragments in XML documents. People are used with using similar actions in word
      processing applications and they expect similar support from XML authoring tools. </textual></para><para class="po-block e88 e88"><textual class="po-textual">In oXygen we developed an architecture that allows defining custom actions mainly through
      configuration. We offer a library of common operations that should cover most of the
      processing needs, but user defined operations can also be added. Then, in order to define a
      custom action one can specify it like </textual></para><programlisting class="po-block e89 e89" xml:space="preserve"><textual class="po-textual">     if (condition1) then operation1 
else if (condition2) then operation2 
else if (condition3) then operation3
... </textual></programlisting><para class="po-block e90 e90"><textual class="po-textual">Where </textual><code class="po-atom e91 e91"><textual class="po-textual">condition1</textual></code><textual class="po-textual">, </textual><code class="po-atom e92 e92"><textual class="po-textual">condition2</textual></code><textual class="po-textual">, etc. are XPath expressions
      evaluated in the current editing context and </textual><code class="po-atom e93 e93"><textual class="po-textual">operation1</textual></code><textual class="po-textual">, </textual><code class="po-atom e94 e94"><textual class="po-textual">operation2</textual></code><textual class="po-textual">,
      etc. are custom operations configured by setting values to their parameters.</textual></para><para class="po-block e95 e95"><textual class="po-textual">Example of common operations are </textual><code class="po-atom e96 e96"><textual class="po-textual">InsertFragmentOperation</textual></code><textual class="po-textual">,
        </textual><code class="po-atom e97 e97"><textual class="po-textual">ChangeAttributeOperation</textual></code><textual class="po-textual">, "UnwrapTagsOperation" etc. and even
        </textual><code class="po-atom e98 e98"><textual class="po-textual">XSLTOperation</textual></code><textual class="po-textual"> and </textual><code class="po-atom e99 e99"><textual class="po-textual">XQueryOperation</textual></code><textual class="po-textual"> - these last two allowing to use
      XSLT or XQuery scripts to define the logic of the action.</textual></para></section><section class="po-hcontainer e100 e100"><title class="po-block e101 e101"><textual class="po-textual">Form controls and inline actions</textual></title><para class="po-block e102 e102"><textual class="po-textual">This makes possible to create a unified editing area where the user has access to all XML
      content, markup and attributes as well as to document specific actions added in the context
      they should be used from - no need for additional side views or toolbars.</textual></para><para class="po-block e103 e103"><textual class="po-textual">The CSS styles allow the XML document to be nicely rendered and the users can easily
      change the content and the structure. The attribute information however it is not accessible
      in a similar way - it can go only into read-only labels and in order to change attributes the
      user needs to access them though a side panel or invoking the in-place attribute editor. </textual></para><para class="po-block e104 e104"><textual class="po-textual">Similarly, the custom actions are generally available on the toolbar, together with all
      the other actions, or added to a menu or to a contextual menu. </textual></para><para class="po-block e105 e105"><textual class="po-textual">In order to improve the editing of attribute values and to allow easier access to custom
      actions we added a few extension functions that can be used to bind an attribute value to a
      form control or to bind a button to a custom action and then put these directly in the
      authoring interface. These allow creating simple user interfaces that combine the visual CSS
      based authoring useful for mixed content editing with the simplicity of form controls and
      custom actions put directly in the authoring view. </textual></para></section><section class="po-hcontainer e106 e106"><title class="po-block e107 e107"><textual class="po-textual">Sample user interfaces</textual></title><para class="po-block e108 e108"><textual class="po-textual">Here you can see a few sample user interfaces.</textual></para><section class="po-hcontainer e109 e109"><title class="po-block e110 e110"><textual class="po-textual">A DocBook document</textual></title><para class="po-block e111 e111"><textual class="po-textual">All the specific support for an XML vocabulary is just a configuration and a set of
        resources that are packaged together is a document type or framework. oXygen provides such
        frameworks for many popular XML vocabularies and DocBook is one of them. You can see in the
        following figure the rendering of a fragment of a DocBook article.</textual></para><figure class="po-container e112 e112"><title class="po-block e113 e113"><textual class="po-textual">The visual rendering of a DocBook document</textual></title><mediaobject class="po-container e114 e114"><imageobject class="po-container e115 e115"><imagedata class="po-meta e116 e116" fileref="../../../vol11/graphics/Bina01/Bina01-001.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure></section><section class="po-hcontainer e117 e117"><title class="po-block e118 e118"><textual class="po-textual">A I-90 form fragment</textual></title><para class="po-block e119 e119"><textual class="po-textual">Here it is a standard I-90 form fragment, implemented in XML.</textual></para><figure class="po-container e120 e120"><title class="po-block e121 e121"><textual class="po-textual">The XML that represents the form data</textual></title><mediaobject class="po-container e122 e122"><imageobject class="po-container e123 e123"><imagedata class="po-meta e124 e124" fileref="../../../vol11/graphics/Bina01/Bina01-002.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><figure class="po-container e125 e125"><title class="po-block e126 e126"><textual class="po-textual">The rendered form</textual></title><mediaobject class="po-container e127 e127"><imageobject class="po-container e128 e128"><imagedata class="po-meta e129 e129" fileref="../../../vol11/graphics/Bina01/Bina01-003.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure></section><section class="po-hcontainer e130 e130"><title class="po-block e131 e131"><textual class="po-textual">A travel guide</textual></title><para class="po-block e132 e132"><textual class="po-textual">These user interfaces, if carefully designed, allow non technical users to encode
        information in XML without actually knowing anything about the underlying XML format - they
        surely need to know the subject domain of the information they encode.</textual></para><figure class="po-container e133 e133"><title class="po-block e134 e134"><textual class="po-textual">The XML source for a point of interest in a travel guide</textual></title><mediaobject class="po-container e135 e135"><imageobject class="po-container e136 e136"><imagedata class="po-meta e137 e137" fileref="../../../vol11/graphics/Bina01/Bina01-004.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><figure class="po-container e138 e138"><title class="po-block e139 e139"><textual class="po-textual">The visual rendering of the point of interest from the travel guide</textual></title><mediaobject class="po-container e140 e140"><imageobject class="po-container e141 e141"><imagedata class="po-meta e142 e142" fileref="../../../vol11/graphics/Bina01/Bina01-005.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure></section></section></article></classedDocument>