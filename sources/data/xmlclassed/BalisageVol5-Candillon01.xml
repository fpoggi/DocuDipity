<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.2"><title class="po-block e1 e1"><textual class="po-textual">XQuery Design Patterns</textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">Balisage: The Markup Conference 2010</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 3 - 6, 2010</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual">Design patterns are widely used inside the object-oriented community.
They are proven mature and reusable solutions that facilitate the development of modules with minimal coupling.
Moreover, design patterns are also high-level constructs that contribute to improve the communication between developers.
</textual></para><para class="po-block e8 e8"><textual class="po-textual">Nowadays, XQuery and its family of specifications are used beyond just querying XML collections and documents.
XQuery is more and more used as a multi-paradigm, fully-fledged programming language.
The aim of this paper is (1) to motivate the need for XQuery design patterns using a real-world example application and
(2) to explore the existence of general design solutions to solve recurring problems in large-scale XQuery applications.
</textual></para></abstract><author class="po-record e9 e9"><personname class="po-record e10 e10"><firstname class="po-field e11 e11"><textual class="po-textual">William</textual></firstname><surname class="po-field e12 e12"><textual class="po-textual">Candillon</textual></surname></personname><personblurb class="po-container e13 e13"><para class="po-block e14 e14"><textual class="po-textual">William Candillon is a software engineer at 28msec. His focus is on the development of large scale web applications in XQuery. William recently graduated from Telecom Lille 1 in France. His final year project was about XQuery Design Patterns.</textual></para></personblurb><email class="po-field e15 e15"><textual class="po-textual">william.candillon@28msec.com</textual></email><affiliation class="po-record e16 e16"><orgname class="po-block e17 e17"><textual class="po-textual">28msec Inc.</textual></orgname></affiliation></author><author class="po-record e18 e18"><personname class="po-record e19 e19"><firstname class="po-field e20 e20"><textual class="po-textual">Matthias</textual></firstname><surname class="po-field e21 e21"><textual class="po-textual">Brantner</textual></surname></personname><personblurb class="po-container e22 e22"><para class="po-block e23 e23"><textual class="po-textual">Matthias Brantner is the chief architect of 28msec, a US-based startup that delivers an XQuery in the cloud implementation. He studied Information Systems at the University of Mannheim in Germany from 1999 until 2004. In 2007, he acquired a PhD from the University of Mannheim, based on his research on rewriting declarative query languages. Matthias has published several papers on XML query processing and co-developed one of the first research native XML databases.</textual></para></personblurb><email class="po-field e24 e24"><textual class="po-textual">matthias.brantner@28msec.com</textual></email><affiliation class="po-record e25 e25"><orgname class="po-block e26 e26"><textual class="po-textual">28msec Inc.</textual></orgname></affiliation></author><author class="po-record e27 e27"><personname class="po-record e28 e28"><firstname class="po-field e29 e29"><textual class="po-textual">Dennis</textual></firstname><surname class="po-field e30 e30"><textual class="po-textual">Knochenwefel</textual></surname></personname><personblurb class="po-container e31 e31"><para class="po-block e32 e32"><textual class="po-textual">Dennis Knochenwefel is a Software Architect at 28msec Inc. Dennis joined 28msec in 2007 after finishing his combined degree in Business Administration and Computer Science at the University of Mannheim, Germany. Already whilst studying, Dennis was eagerly interested in XML-related technologies like XQuery, XSL, or XPath. He is an "IBM Certified Solution Developer XML 1.1 and Related Technologies" and was awarded a grant from the Karl-Steinbuch-Stipendium in 2006 for implementing an XQuery based XML messaging prototype. Currently, he is a keen developer of 28msec's Sausalito development team implementing the scalable XQuery Web Application server Sausalito.</textual></para></personblurb><email class="po-field e33 e33"><textual class="po-textual">dennis.knochenwefel@28msec.com</textual></email><affiliation class="po-record e34 e34"><orgname class="po-block e35 e35"><textual class="po-textual">28msec Inc.</textual></orgname></affiliation></author><legalnotice class="po-container e36 e36"><para class="po-block e37 e37"><textual class="po-textual">Copyright Â© 2006-2010 28msec Inc.</textual></para></legalnotice><keywordset class="po-table e38 e38" role="author"><keyword class="po-field e39 e39"><textual class="po-textual">XQuery</textual></keyword><keyword class="po-field e40 e40"><textual class="po-textual">Design Patterns</textual></keyword></keywordset></info><section class="po-hcontainer e41 e41" xml:id="introduction" xreflabel="1"><title class="po-block e42 e42"><textual class="po-textual">Introduction</textual></title><para class="po-block e43 e43"><textual class="po-textual">During the last decade, design patterns have become increasingly popular as general and reusable solutions to commonly occurring software design problems in the object-oriented community. 
      Nowadays, almost every developed application, component, or API written in an object-oriented language is built using design patterns (e.g. [</textual><xref class="po-milestone e44 e44" linkend="bib01"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, </textual><xref class="po-milestone e45 e45" linkend="bib02"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]).
      Such patterns improve software development in the following perspectives [</textual><xref class="po-milestone e46 e46" linkend="bib03"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]:
      </textual><itemizedlist class="po-table e47 e47"><listitem class="po-container e48 e48"><para class="po-block e49 e49"><emphasis class="po-inline e50 e50" role="bold"><textual class="po-textual">Reusable Software and Design</textual></emphasis><textual class="po-textual">: Design Patterns are often key drivers to provide better encapsulation and reduce coupling between software components.
            As a consequence, software exhibiting design patterns is more reusable, flexible, and extensible.</textual></para></listitem><listitem class="po-container e51 e51"><para class="po-block e52 e52"><emphasis class="po-inline e53 e53" role="bold"><textual class="po-textual">Documentation</textual></emphasis><textual class="po-textual">: Using the name of a pattern in software documentation allows developers to recognize/remember the structure and design of an API instantly.</textual></para></listitem><listitem class="po-container e54 e54"><para class="po-block e55 e55"><emphasis class="po-inline e56 e56" role="bold"><textual class="po-textual">Communication and Teaching</textual></emphasis><textual class="po-textual">: Design patterns constitute a common language to improve the communication between software designers and analysts. Additionally, an established vocabulary eases discussions between developers with a different programming language background.</textual></para></listitem></itemizedlist><textual class="po-textual">
    </textual></para><para class="po-block e57 e57"><textual class="po-textual">Although, being widely accepted and applied within the object-oriented community, design patterns have rarely been evaluated outside of this community. 
      For example, in the functional world they have never been evaluated on a complex application programming level.
      In "Functional Logic Design Patterns" [</textual><xref class="po-milestone e58 e58" linkend="bib05"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] design patterns have been evaluated within a functional language to solve specific problems on a very low level; whereas [</textual><xref class="po-milestone e59 e59" linkend="bib06"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] discusses on a meta level. 
      From this perspective, the fear of Tom DeMarco from 1996 has been proven reasonable:
      </textual><blockquote class="po-container e60 e60"><para class="po-block e61 e61"><textual class="po-textual">"Because Design Patterns bills itself as being concerned with object oriented software alone, I fear that software developers outside the object community may ignore it. This would be a shame. [...] All software designers use patterns; understanding better the reusable abstractions of our work can only make us better at it." [</textual><xref class="po-milestone e62 e62" linkend="bib04"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]</textual></para></blockquote><textual class="po-textual">
    </textual></para><para class="po-block e63 e63"><textual class="po-textual">XQuery [</textual><xref class="po-milestone e64 e64" linkend="bib07"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] -- a functional and declarative language -- has been designed by the World Wide Web Consortium as a general purpose XML processing language, useful in a variety of architectures and environments.
      Although, in the beginning, XQuery was mainly used to query XML data within database systems (e.g. [</textual><xref class="po-milestone e65 e65" linkend="bib20"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]), it has more and more become a complete application programming language.
      One such scenario in which XQuery is used as a full-fledged programming language is called the end-to-end XML architecture.
      In such an architecture, XML is the primary form in which information is stored and processed.
      This information is persistent across successive invocations of programs, and XQuery is the primary language for accessing this information for search, filter, transform, update, and for writing more complex application workflows.
      Moreover, in such programs, XQuery has also become fluent with web entities such as web services, Atom, JSON, HTTP messages, and common authentication techniques such as OpenID or OAuth.
      Together with its extension specifications XQuery Update [</textual><xref class="po-milestone e66 e66" linkend="bib11"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], XQuery Scripting [</textual><xref class="po-milestone e67 e67" linkend="bib12"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], and XQuery Full Text [</textual><xref class="po-milestone e68 e68" linkend="bib13"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], XQuery nowadays plays in the same league as general purpose programming languages such as Java, Python, or Ruby while keeping its edge in terms of expressiveness and first-class support for dealing with web resources.</textual></para><para class="po-block e69 e69"><textual class="po-textual">Overall, these recent changes are directly related to the growth of complex XQuery applications [</textual><xref class="po-milestone e70 e70" linkend="bib14"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].
      One example of such an application is developed by a customer of the company the authors work for.
      This application is an Enterprise Resource Planning (ERP) application entirely written in XQuery on top of the Sausalito Web Application Server [</textual><xref class="po-milestone e71 e71" linkend="bib15"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].
      This application consists of 28.000 lines of XQuery code implemented in 135 XQuery modules.
      
      By auditing this application, we found common symptoms in both the codebase and the development processes:
      </textual><itemizedlist class="po-table e72 e72"><listitem class="po-container e73 e73"><para class="po-block e74 e74"><textual class="po-textual">Modules have strong coupling between each other. They are based on complex collaborations that are reducing their reusability in other frameworks or applications. In most cases, extending or composing a module would require intrusive code refactoring.</textual></para></listitem><listitem class="po-container e75 e75"><para class="po-block e76 e76"><textual class="po-textual">Some recurring structural designs are referred to using a different vocabulary. Even though they can be looked at as identical from an abstract point of view.
           This increases the entry barrier into the codebase significantly.</textual></para></listitem></itemizedlist><textual class="po-textual">
    </textual></para><para class="po-block e77 e77"><textual class="po-textual">
      As described at the beginning of this section, such problems have been solved in the object-oriented community by developing and applying design patterns.
      Encouraged by this observation, we decided to start using design patterns to overcome the misfits described above.
      Besides motivating the use of design patterns for XQuery, the contributions of this paper are 
      (1) to identify misfits in a real-world application and (2) to show how these misfits can be remedied by using design patterns.
      Specifically, we present four design patterns and describe how each of them solves one specific design problem in our (running) example application.</textual></para><para class="po-block e78 e78"><textual class="po-textual">The remainder of this paper is structured as follows.
      In Section </textual><xref class="po-milestone e79 e79" linkend="application"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, we describe the use cases for our running example.
      This example will be used to point out design problems that exist in real world applications.
      In each of the following four sections (i.e. Sections </textual><xref class="po-milestone e80 e80" linkend="cor"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, </textual><xref class="po-milestone e81 e81" linkend="pm"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, </textual><xref class="po-milestone e82 e82" linkend="strategy"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, and </textual><xref class="po-milestone e83 e83" linkend="observer"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">), we present one design pattern to solve one of the identified design problems.
      Section </textual><xref class="po-milestone e84 e84" linkend="conclusion"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> concludes the paper and gives an outlook on future work.</textual></para></section><section class="po-hcontainer e85 e85" xml:id="application" xreflabel="2"><title class="po-block e86 e86"><textual class="po-textual">Running Example: An AtomPub Application</textual></title><para class="po-block e87 e87"><textual class="po-textual">The Atom Publishing Protocol (AtomPub; see </textual><xref class="po-milestone e88 e88" linkend="bib16"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) is an HTTP-based protocol for creating and updating resources on the web.
      Lately, it became widely used to implement APIs for cloud services.
      The most prominent example is probably the Google Data Protocol</textual><footnote class="po-popup e89 e89"><para class="po-block e90 e90"><textual class="po-textual">Google Data Protocol: </textual><link class="po-inline e91 e91" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://code.google.com/apis/gdata/docs/developers-guide.html</textual></link><textual class="po-textual">.</textual></para></footnote><textual class="po-textual">.
      AtomPub is built up on the Atom Syndication Format which is an XML representation of arbitrary collection of resources (e.g. web feeds).
      Hence, XQuery is a natural fit for implementing AtomPub-based (cloud) services.</textual></para><para class="po-block e92 e92"><textual class="po-textual">We use an AtomPub application in order to present design patterns for XQuery.
      This application is particularly well-suited for many (common) patterns because most of it's components need to be reusable by other components of the application.
      Moreover, leveraging existing libraries (e.g. for HTTP communication and authentication) requires some careful design decisions to be made.
      
      Essentially, the AtomPub application consists of two major components: a client and a server.
      
      The client is an XQuery application which should implement the following two basic use cases: 
      </textual><itemizedlist class="po-table e93 e93"><listitem class="po-container e94 e94"><para class="po-block e95 e95"><emphasis class="po-inline e96 e96" role="bold"><textual class="po-textual">Use Case 1:</textual></emphasis><textual class="po-textual"> Send an HTTP request to create an Atom entry.</textual></para></listitem><listitem class="po-container e97 e97"><para class="po-block e98 e98"><emphasis class="po-inline e99 e99" role="bold"><textual class="po-textual">Use Case 2:</textual></emphasis><textual class="po-textual"> Send an HTTP request to retrieve a particular Atom entry. The resulting entry should be transformed into HTML.</textual></para></listitem></itemizedlist><textual class="po-textual">
      
      The server is an application which is running within an XQuery-enabled application server.
      That is, its functions are triggered by HTTP requests.
      Those functions have access to the content of the HTTP request using a (HTTP) module provided by the application server.
      The server acts as a counterpart to the client requests. 
      Specifically, it should be able to accomplish the following two use cases:
      
      </textual><itemizedlist class="po-table e100 e100"><listitem class="po-container e101 e101"><para class="po-block e102 e102"><emphasis class="po-inline e103 e103" role="bold"><textual class="po-textual">Use Case 3:</textual></emphasis><textual class="po-textual"> Receive an AtomPub entry and store it. It should be possible to store entries in arbitrary locations such as the file system or XQuery collections.</textual></para></listitem><listitem class="po-container e104 e104"><para class="po-block e105 e105"><emphasis class="po-inline e106 e106" role="bold"><textual class="po-textual">Use Case 4:</textual></emphasis><textual class="po-textual"> Post a message on Twitter for each entry created in Use Case 3.</textual></para></listitem></itemizedlist><textual class="po-textual">
    </textual></para><para class="po-block e107 e107"><textual class="po-textual">In the next sections of the paper, we show how the design challenges of implementing the described use cases can be solved leveraging design patterns.
      We start with Use Cases 1 and 2 of the client in Sections </textual><xref class="po-milestone e108 e108" linkend="cor"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and </textual><xref class="po-milestone e109 e109" linkend="pm"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, respectively.
      After this, Sections </textual><xref class="po-milestone e110 e110" linkend="strategy"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and </textual><xref class="po-milestone e111 e111" linkend="observer"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> describe the design and implementation of Use Cases 3 and 4.
      The following table depicts the mapping of use cases, sections, required XQuery features, and the names of the pattern that is used to implement the feature in question.
      </textual><table border="1" class="po-container e112 e112"><caption class="po-container e113 e113"><para class="po-block e114 e114"><textual class="po-textual">Mapping between use cases, sections, patterns, and required XQuery features.</textual></para></caption><col align="center" class="po-meta e115 e115" span="1" valign="top" width="15%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></col><col align="center" class="po-meta e116 e116" span="1" valign="top" width="10%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></col><col align="center" class="po-meta e117 e117" span="1" valign="top"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></col><col align="center" class="po-meta e118 e118" span="1" valign="top"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></col><col align="left" class="po-meta e119 e119" span="1" valign="top"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></col><thead class="po-container e120 e120"><tr class="po-table e121 e121" valign="top"><th class="po-field e122 e122"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></th><th class="po-field e123 e123"><textual class="po-textual">Section</textual></th><th class="po-field e124 e124"><textual class="po-textual">Pattern Name</textual></th><th class="po-field e125 e125"><textual class="po-textual">Language</textual></th><th class="po-field e126 e126"><textual class="po-textual">Description</textual></th></tr></thead><tbody class="po-table e127 e127"><tr class="po-table e128 e128"><td class="po-block e129 e129"><textual class="po-textual">Use Case 1</textual></td><td class="po-block e130 e130"><xref class="po-milestone e131 e131" linkend="cor"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref></td><td class="po-block e132 e132"><textual class="po-textual">Chain of Responsibility</textual></td><td class="po-block e133 e133"><textual class="po-textual">XQuery 1.0</textual></td><td class="po-block e134 e134"><textual class="po-textual">Send an HTTP request to create an Atom entry.</textual></td></tr><tr class="po-table e135 e135"><td class="po-block e136 e136"><textual class="po-textual">Use Case 2</textual></td><td class="po-block e137 e137"><xref class="po-milestone e138 e138" linkend="pm"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref></td><td class="po-block e139 e139"><textual class="po-textual">Translator</textual></td><td class="po-block e140 e140"><textual class="po-textual">XQuery 1.1</textual></td><td class="po-block e141 e141"><textual class="po-textual">Transforms an Atom entry to XHTML.</textual></td></tr><tr class="po-table e142 e142"><td class="po-block e143 e143"><textual class="po-textual">Use Case 3</textual></td><td class="po-block e144 e144"><xref class="po-milestone e145 e145" linkend="strategy"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref></td><td class="po-block e146 e146"><textual class="po-textual">Strategy</textual></td><td class="po-block e147 e147"><textual class="po-textual">XQuery 1.1</textual></td><td class="po-block e148 e148"><textual class="po-textual">Store an Atom entry on the server.</textual></td></tr><tr class="po-table e149 e149"><td class="po-block e150 e150"><textual class="po-textual">Use Case 4</textual></td><td class="po-block e151 e151"><xref class="po-milestone e152 e152" linkend="observer"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref></td><td class="po-block e153 e153"><textual class="po-textual">Observer</textual></td><td class="po-block e154 e154"><textual class="po-textual">XQuery 1.1 + Scripting</textual></td><td class="po-block e155 e155"><textual class="po-textual">Advertise new Atom entries on Twitter.</textual></td></tr></tbody></table><textual class="po-textual">
    </textual></para><para class="po-block e156 e156"><textual class="po-textual">The XQuery application can be downloaded from </textual><link class="po-inline e157 e157" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://patterns.28msec.com</textual></link><textual class="po-textual">.
      Each use case is ready to be executed, i.e. the package contains one XQuery main module for each use case.
      </textual><footnote class="po-popup e158 e158"><para class="po-block e159 e159"><textual class="po-textual">Please note that the implementation requires features that might not be present in every XQuery processor (i.e.\ XQuery Scripting, Function Items, and File module). For example, the latest SVN revision (&gt; 8071) of the Zorba XQuery Processor (</textual><link class="po-inline e160 e160" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.zorba-xquery.com</textual></link><textual class="po-textual">) is capable of running all examples.</textual></para></footnote><textual class="po-textual">
    </textual></para></section><section class="po-hcontainer e161 e161" xml:id="cor" xreflabel="3"><title class="po-block e162 e162"><textual class="po-textual">Chain of Responsibility</textual></title><para class="po-block e163 e163"><textual class="po-textual">In this section, we discuss the implementation of Use Case 1.
      That is, we want to develop an XQuery program that publishes an Atom entry to an AtomPub enabled server.
      Since not everybody is allowed to publish an entry, the AtomPub server requires authentication using the basic HTTP authentication mechanism.  
      The AtomPub protocol specifies that an entry is published by sending an HTTP POST request to the server.
      The payload of this request contains the entry to be published.
      The basic HTTP authentication requires the username and password to be part of the HTTP-Header.</textual></para><para class="po-block e164 e164"><textual class="po-textual">For making HTTP calls in an XQuery program, we decided to rely on the (de-facto standard) EXPath HTTP Client (see </textual><xref class="po-milestone e165 e165" linkend="bib17"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).
      This HTTP Client works by passing an XDM element describing the request to a function called </textual><code class="po-atom e166 e166"><textual class="po-textual">send-request</textual></code><textual class="po-textual">.
      For example, a program that is sending a HTTP GET request to </textual><link class="po-inline e167 e167" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.example.com</textual></link><textual class="po-textual"> could look as follows:
      </textual><programlisting class="po-block e168 e168" xml:space="preserve"><textual class="po-textual">
http-client:send-request(
  &lt;http:request href="http://www.example.com/" method="GET" /&gt;
)
      </textual></programlisting><textual class="po-textual">
    </textual></para><para class="po-block e169 e169"><textual class="po-textual">In order to implement our first use case, the AtomPub client could be implemented with a hard wired dependency between the module that is responsible for configuring and sending the HTTP request and the module responsible for the authentication.
      However, this would clearly make the AtomPub client less flexible and reusable in other scenarios.
      For example, changing the authentication mechanism to something like OAuth or OpenID would require intrusive changes to the AtomPub module or would result in another highly redundant codebase.</textual></para><para class="po-block e170 e170"><textual class="po-textual">To improve the flexibility and reusability of our application, we specify the following two design requirements.
      The AtomPub client should be decoupled from 
      </textual><itemizedlist class="po-table e171 e171"><listitem class="po-container e172 e172"><para class="po-block e173 e173"><textual class="po-textual">any authentication mechanism it may collaborate with at runtime.</textual></para></listitem><listitem class="po-container e174 e174"><para class="po-block e175 e175"><textual class="po-textual">a particular implementation of the transport layer, i.e. the HTTP client.</textual></para></listitem></itemizedlist><textual class="po-textual">
    </textual></para><para class="po-block e176 e176"><textual class="po-textual">In order to meet these requirements, we have designed the AtomPub client using the Chain of Responsibility pattern [</textual><xref class="po-milestone e177 e177" linkend="bib03"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].
      The intent of this pattern is as follows:
      </textual><blockquote class="po-container e178 e178"><para class="po-block e179 e179"><textual class="po-textual">Reduce coupling between different modules by moving nested dependencies outside of a module and integrate dependent functions consecutively into a chain. Pass an item along the chain and give each of these functions the chance to manipulate or process the item.</textual></para></blockquote><textual class="po-textual">
    </textual></para><section class="po-hcontainer e180 e180"><title class="po-block e181 e181"><textual class="po-textual">Description</textual></title><para class="po-block e182 e182"><textual class="po-textual">Applying the Chain of Responsibility to our use case results in making a separation between the code that is responsible for sending the request and each of the functions configuring the request (i.e. setup the request for AtomPub and putting authentication information in the request).
        In order to do so, we identify the following participants (also see Fig. </textual><xref class="po-milestone e183 e183" linkend="cor-structure"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">): 
        </textual><itemizedlist class="po-table e184 e184"><listitem class="po-container e185 e185"><para class="po-block e186 e186"><emphasis class="po-inline e187 e187" role="bold"><textual class="po-textual">Request:</textual></emphasis><textual class="po-textual"> The XDM instance representation of an HTTP request.</textual></para></listitem><listitem class="po-container e188 e188"><para class="po-block e189 e189"><emphasis class="po-inline e190 e190" role="bold"><textual class="po-textual">Handler:</textual></emphasis><textual class="po-textual"> Function in the chain which is configuring or processing the request instance.</textual></para></listitem><listitem class="po-container e191 e191"><para class="po-block e192 e192"><emphasis class="po-inline e193 e193" role="bold"><textual class="po-textual">Client:</textual></emphasis><textual class="po-textual">  Initiates the request, passes it to each function in the chain, and returns the result.</textual></para></listitem></itemizedlist><textual class="po-textual">
      </textual></para><para class="po-block e194 e194"><textual class="po-textual">Spreading the functionality among the three participants allows us to easily rewrite the client, for example to use a different authentication strategy.
        In particular, we avoid that different library modules "know about" each other, i.e. they are not imported into each other.
      </textual></para><figure class="po-container e195 e195" floatstyle="1" xml:id="cor-structure" xreflabel="1"><mediaobject class="po-container e196 e196"><imageobject class="po-container e197 e197"><imagedata class="po-meta e198 e198" fileref="../../../vol5/graphics/Candillon01/Candillon01-001.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e199 e199"><para class="po-block e200 e200"><textual class="po-textual">Structure of the Chain of Responsibility.</textual></para></caption></mediaobject></figure></section><section class="po-hcontainer e201 e201"><title class="po-block e202 e202"><textual class="po-textual">Implementation</textual></title><para class="po-block e203 e203"><textual class="po-textual">In this section, we describe one possible implementation of our use case by applying the Chain of Responsibility pattern.
        </textual><footnote class="po-popup e204 e204"><para class="po-block e205 e205"><textual class="po-textual">The code presented in this section can be found within </textual><emphasis class="po-inline e206 e206" role="ital"><textual class="po-textual">AtomPub/chain_of_responsibility.xq</textual></emphasis><textual class="po-textual">.</textual></para></footnote><textual class="po-textual">
      </textual></para><para class="po-block e207 e207"><textual class="po-textual">First, we start with a description of the implementation of the client which is implemented in a function called </textual><code class="po-atom e208 e208"><textual class="po-textual">local:post-entry</textual></code><textual class="po-textual">.
        After this, we describe the two functions </textual><code class="po-atom e209 e209"><textual class="po-textual">atompub-client:post</textual></code><textual class="po-textual"> and </textual><code class="po-atom e210 e210"><textual class="po-textual">http-auth:basic</textual></code><textual class="po-textual">.
        Each of these functions takes as first parameter the request item which is prepared in the body of each function.
        </textual><programlisting class="po-block e211 e211" xml:space="preserve"><textual class="po-textual">
(:
 : This function initializes the HTTP request, passes it to three
 : chained functions (atompub-client:post, http-auth:basic, and 
 : httpclient:send-request), and returns the result of the last 
 : invoked function.
 :)
declare sequential function local:post-entry() as item()*
{
  (: Initialize the request :)
  declare $request  := validate { 
      &lt;http:request href="http://atompubtest.my28msec.com/blog/feed"
                    method="GET" /&gt;
  };
  (: Update the request according to the AtomPub protocol
   : $local:entry is the Atom entry to be sent 
   :)
  atompub-client:post($request, $local:entry);
  (: Basic HTTP Authentication. :)
  http-auth:basic($request, "Username", "Password");
  (: Finally, send the request to the AtomPub server :)
  http-client:send-request($request);
};
        </textual></programlisting><textual class="po-textual">
      </textual></para><para class="po-block e212 e212"><textual class="po-textual">In the code snippet above, the HTTP request element (</textual><code class="po-atom e213 e213"><textual class="po-textual">$request</textual></code><textual class="po-textual">) is declared and initialized containing the URL of the AtomPub server.
        This element is passed along the chain of functions </textual><code class="po-atom e214 e214"><textual class="po-textual">atompub-client:post</textual></code><textual class="po-textual"> and </textual><code class="po-atom e215 e215"><textual class="po-textual">http-auth:basic</textual></code><textual class="po-textual"> ending up in a call to the </textual><code class="po-atom e216 e216"><textual class="po-textual">http-client:send-request()</textual></code><textual class="po-textual"> function.
        The latter function takes over the responsibility of executing the request.
        </textual><programlisting class="po-block e217 e217" xml:space="preserve"><textual class="po-textual">
(:
 : AtomPub POST handler.
 : Update the HTTP request according to the
 : AtomPub protocol specification.
 :)
declare updating function atompub-client:post(
    $request as schema-element(http:request),
    $entry   as schema-element(atom:entry))
{
    replace value of node $request/@method with "POST",
    
    insert node &lt;http:body media-type="application/xml"
                           method="xml"&gt;{$entry}&lt;/http:body&gt;
    as last into $request
};          
          </textual></programlisting><textual class="po-textual">
      </textual></para><para class="po-block e218 e218"><textual class="po-textual">The function </textual><code class="po-atom e219 e219"><textual class="po-textual">atompub-client:post()</textual></code><textual class="po-textual"> "massages" the request item (using XQuery update) according to the AtomPub specification.
        Specifically, this function makes sure that the HTTP request method is set to POST. 
        Moreover, it configures the body of the HTTP request to contain the entry to be published.</textual></para><para class="po-block e220 e220"><textual class="po-textual">After that, the </textual><code class="po-atom e221 e221"><textual class="po-textual">http-auth:basic()</textual></code><textual class="po-textual"> function adds username and password attributes to the request and sets the authentication method to </textual><code class="po-atom e222 e222"><textual class="po-textual">basic</textual></code><textual class="po-textual">.
        </textual><programlisting class="po-block e223 e223" xml:space="preserve"><textual class="po-textual">
(:
 : Basic HTTP Auth handler.
 : Update the HTTP request according to the
 : basic HTTP authentication specification.
 :)
declare updating function http-auth:basic(
    $request  as schema-element(http:request),
    $username as xs:string,
    $password as xs:string)
{
  insert node (attribute username    { $username },
               attribute password    { $password },
               attribute auth-method { "basic" })
  into $request
};          
         </textual></programlisting><textual class="po-textual">
      </textual></para></section><section class="po-hcontainer e224 e224"><title class="po-block e225 e225"><textual class="po-textual">Implementation Considerations</textual></title><para class="po-block e226 e226"><textual class="po-textual">In the implementation presented in the last section, we made some decisions in order to make the essence of the paper easier to understand and improve the readability of the code.
        Neither are these decisions mandatory for implementing Chain of Responsibility nor might they be optimal.
        Therefore this pattern can be implemented in XQuery 1.0.
        In this section, we discuss some alternative implementation aspects.
        </textual><itemizedlist class="po-table e227 e227"><listitem class="po-container e228 e228"><para class="po-block e229 e229"><emphasis class="po-inline e230 e230" role="bold"><textual class="po-textual">Consideration 1:</textual></emphasis><textual class="po-textual"> The implementation of the client, chains the participating functions using XQuery Scripting.
            However, there are many ways to implement the chaining.
            For example, the chain could be implemented using Continuation Passing Style or by using a sequence of function items which are executed consecutively.</textual></para></listitem><listitem class="po-container e231 e231"><para class="po-block e232 e232"><emphasis class="po-inline e233 e233" role="bold"><textual class="po-textual">Consideration 2:</textual></emphasis><textual class="po-textual"> Another decision that we took in order to make the code more crisp is to implement the participating functions (i.e. </textual><code class="po-atom e234 e234"><textual class="po-textual">atompub-client:post</textual></code><textual class="po-textual"> and </textual><code class="po-atom e235 e235"><textual class="po-textual">http-auth:basic</textual></code><textual class="po-textual">) using the XQuery Update Facility.
            Alternative implementations could copy and transform the request element and return it as a result of the function.
            In this case, the client needs to make sure that the returned element is passed as an argument to the next function.</textual></para></listitem></itemizedlist><textual class="po-textual">
      </textual></para></section><section class="po-hcontainer e236 e236"><title class="po-block e237 e237"><textual class="po-textual">Conclusion</textual></title><para class="po-block e238 e238"><textual class="po-textual">The Chain of Responsibility helped us to improve the flexibility and reusability of the modules involved to implement Use Case 1.
        As a result, we gained the following:
        </textual><itemizedlist class="po-table e239 e239"><listitem class="po-container e240 e240"><para class="po-block e241 e241"><emphasis class="po-inline e242 e242" role="bold"><textual class="po-textual">Reduced coupling:</textual></emphasis><textual class="po-textual"> The AtomPub client has been decoupled from the HTTP Client and other optional modules such as HTTP authentication, OAuth Client, or OpenID.</textual></para></listitem><listitem class="po-container e243 e243"><para class="po-block e244 e244"><emphasis class="po-inline e245 e245" role="bold"><textual class="po-textual">Added flexibility:</textual></emphasis><textual class="po-textual"> Any function in the chain can configure the request or even take over the responsibility to process the request.
            More than that, the code can effortlessly be reused in a different setting.
            For example, a different authentication method could be used by replacing the </textual><code class="po-atom e246 e246"><textual class="po-textual">http-auth:basic()</textual></code><textual class="po-textual"> function with an appropriate function from a different authentication module.</textual></para></listitem></itemizedlist><textual class="po-textual">
        </textual></para><para class="po-block e247 e247"><textual class="po-textual">Use Chain of Responsibility if
        </textual><itemizedlist class="po-table e248 e248"><listitem class="po-container e249 e249"><para class="po-block e250 e250"><textual class="po-textual">an execution process can be abstracted in a configurable XDM item, e.g. a request.</textual></para></listitem><listitem class="po-container e251 e251"><para class="po-block e252 e252"><textual class="po-textual">an execution process can be divided into different responsibilities.</textual></para></listitem><listitem class="po-container e253 e253"><para class="po-block e254 e254"><textual class="po-textual">different configuration settings can be freely combined.</textual></para></listitem><listitem class="po-container e255 e255"><para class="po-block e256 e256"><textual class="po-textual">you want to issue a request to one of several functions without specifying the receiver explicitly.</textual></para></listitem></itemizedlist><textual class="po-textual">
      </textual></para></section></section><section class="po-hcontainer e257 e257" xml:id="pm" xreflabel="4"><title class="po-block e258 e258"><textual class="po-textual">Translator</textual></title><para class="po-block e259 e259"><textual class="po-textual">
	  In this section, we present the accomplishment of Use Case 2 (see Sec. </textual><xref class="po-milestone e260 e260" linkend="application"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">): retrieving an Atom feed and rendering it as an HTML page.
      Thanks to XQuery's expressiveness to deal with XML data, transforming an Atom feed into an HTML page is a straightforward operation.
      For example, one could easily come up with a function as follows:
      </textual><programlisting class="po-block e261 e261" xml:space="preserve"><textual class="po-textual">
declare function to-xhtml:get-feed(
  $feed as schema-element(atom:feed))
  as element(xhtml:html)
{
  let $title := $feed/atom:title
  return
    &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
      &lt;head&gt;
        &lt;title&gt;{$title}&lt;/title&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;h1&gt;{$title}&lt;/h1&gt;
        {for $entry in $feed/atom:entry
         return to-xhtml:get-entry($entry)}
      &lt;/body&gt;
    &lt;/html&gt;  
};        
</textual></programlisting><textual class="po-textual">

      However, on the web, most feeds contain heterogeneous data (i.e. they contain elements from multiple different namespaces).
      The most prominent examples are Google's or Twitter's extensions (see </textual><link class="po-inline e262 e262" xlink:actuate="onRequest" xlink:href="http://tinyurl.com/gdata-format" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://tinyurl.com/gdata-format</textual></link><textual class="po-textual"> and </textual><link class="po-inline e263 e263" xlink:actuate="onRequest" xlink:href="http://tinyurl.com/twitter-format" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://tinyurl.com/twitter-format</textual></link><textual class="po-textual">).
      Another example is shown in the following feed that contains instances of the GeoRSS Application Schema.
      </textual><programlisting class="po-block e264 e264" xml:space="preserve"><textual class="po-textual">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;feed xmlns="http://www.w3.org/2005/Atom" 
      xmlns:georss="http://www.georss.org/georss"&gt;
  &lt;title&gt;Where is Waldo?&lt;/title&gt;
  &lt;link href="http://example.org/"/&gt;
  &lt;entry&gt;
    &lt;title&gt;Caecilienstrasse 5, 8032 Zurich, Switzerland&lt;/title&gt;
    &lt;link href="http://example.org/2009/09/09/atom01"/&gt;
    &lt;updated&gt;2009-08-17T07:02:32Z&lt;/updated&gt;
    &lt;georss:point&gt;45.256 -71.92&lt;/georss:point&gt;
   &lt;/entry&gt;
 &lt;/feed&gt;        
        </textual></programlisting><textual class="po-textual">
    </textual></para><para class="po-block e265 e265"><textual class="po-textual">
      Usually, the information contained in such feeds should be converted into HTML as well.
      Obviously, one could extend the </textual><code class="po-atom e266 e266"><textual class="po-textual">get-feed</textual></code><textual class="po-textual"> function above by incorporating nested loops over elements in different namespaces.
      However, this is not desirable for several reasons:

      </textual><itemizedlist class="po-table e267 e267"><listitem class="po-container e268 e268"><para class="po-block e269 e269"><textual class="po-textual">Having to transform a large number of heterogeneous elements will usually lead to ''spaghetti code''.</textual></para></listitem><listitem class="po-container e270 e270"><para class="po-block e271 e271"><textual class="po-textual">Interweaved code lowers the reusability.</textual></para></listitem><listitem class="po-container e272 e272"><para class="po-block e273 e273"><textual class="po-textual">The structure of a feed (i.e. which namespaces are actually contained in a feed), might not be known in advance.</textual></para></listitem></itemizedlist><textual class="po-textual">

      For those reasons, it's clearly favorable to have ''ravioli code'', i.e. code that consists of loosely coupled components.
      Therefore, we have used the design pattern named Translator to implement Use Case 2 </textual><xref class="po-milestone e274 e274" linkend="bib19"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.
      This pattern describes a functional organization that keeps the transformation functions loosely coupled.
      The ultimate goal of Translator is to bring the modular XSLT stylesheet paradigm into XQuery.
      The intent of Translator is defined as follows:
      </textual><blockquote class="po-container e275 e275"><para class="po-block e276 e276"><textual class="po-textual">Separate interpretations of heterogeneous elements </textual><xref class="po-milestone e277 e277" linkend="bib19"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. Translator brings XSLT programming paradigm into XQuery.</textual></para></blockquote><textual class="po-textual">
    </textual></para><section class="po-hcontainer e278 e278"><title class="po-block e279 e279"><textual class="po-textual">Description</textual></title><para class="po-block e280 e280"><textual class="po-textual">
      Since the goal of Translator is to bring the XSLT programming paradigm into XQuery, the participants involved in this pattern have the same names and also have a similar semantics as their complements in XSLT.
      The participants involved are the following: 
      </textual><itemizedlist class="po-table e281 e281"><listitem class="po-container e282 e282"><para class="po-block e283 e283"><emphasis class="po-inline e284 e284" role="bold"><code class="po-atom e285 e285"><textual class="po-textual">apply</textual></code><textual class="po-textual"> function: </textual></emphasis><textual class="po-textual"> The </textual><code class="po-atom e286 e286"><textual class="po-textual">apply</textual></code><textual class="po-textual"> function contains the code that does the transformation of an XDM instance if the </textual><code class="po-atom e287 e287"><textual class="po-textual">match</textual></code><textual class="po-textual"> function returned true.
            The parameters of the </textual><code class="po-atom e288 e288"><textual class="po-textual">apply</textual></code><textual class="po-textual"> function are: (1) The XDM instance to transform, (2) the </textual><code class="po-atom e289 e289"><textual class="po-textual">transform</textual></code><textual class="po-textual"> function itself, and (3) the templates involved in the process.</textual></para></listitem><listitem class="po-container e290 e290"><para class="po-block e291 e291"><emphasis class="po-inline e292 e292" role="bold"><code class="po-atom e293 e293"><textual class="po-textual">match</textual></code><textual class="po-textual"> function: </textual></emphasis><textual class="po-textual">This function decides whether an according </textual><code class="po-atom e294 e294"><textual class="po-textual">apply</textual></code><textual class="po-textual"> function should be executed given a selected XDM instance.</textual></para></listitem><listitem class="po-container e295 e295"><para class="po-block e296 e296"><emphasis class="po-inline e297 e297" role="bold"><code class="po-atom e298 e298"><textual class="po-textual">transform</textual></code><textual class="po-textual"> function: </textual></emphasis><textual class="po-textual">The </textual><code class="po-atom e299 e299"><textual class="po-textual">transform</textual></code><textual class="po-textual"> function is driving the transformation process (i.e. calling </textual><code class="po-atom e300 e300"><textual class="po-textual">match</textual></code><textual class="po-textual"> and </textual><code class="po-atom e301 e301"><textual class="po-textual">apply</textual></code><textual class="po-textual">.
            It is invoked by the client.</textual></para></listitem><listitem class="po-container e302 e302"><para class="po-block e303 e303"><emphasis class="po-inline e304 e304" role="bold"><textual class="po-textual">Template: </textual></emphasis><textual class="po-textual"> A template is a sequence of two function items.
            The first item is representing the </textual><code class="po-atom e305 e305"><textual class="po-textual">match</textual></code><textual class="po-textual"> and the second </textual><code class="po-atom e306 e306"><textual class="po-textual">apply</textual></code><textual class="po-textual"> function, respectively.</textual></para></listitem><listitem class="po-container e307 e307"><para class="po-block e308 e308"><emphasis class="po-inline e309 e309" role="bold"><textual class="po-textual">Client: </textual></emphasis><textual class="po-textual">The client invokes the </textual><code class="po-atom e310 e310"><textual class="po-textual">transform</textual></code><textual class="po-textual"> function by providing the XDM instance to be transformed and a sequence of templates.</textual></para></listitem></itemizedlist></para><para class="po-block e311 e311"><textual class="po-textual">

      Figure </textual><xref class="po-milestone e312 e312" linkend="pm-structure"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> shows the dependencies between the participants for Translator applied to the GeoRSS example describe in the previous section.
      The figure illustrates that
      (1) only the Atom templates (</textual><code class="po-atom e313 e313"><textual class="po-textual">apply</textual></code><textual class="po-textual"> and </textual><code class="po-atom e314 e314"><textual class="po-textual">match</textual></code><textual class="po-textual"> for Atom feeds and entries) need to know the Atom schema,
      (2) the template responsible for transforming GeoRSS only knows the GeoRSS schema, and
      (3) the </textual><code class="po-atom e315 e315"><textual class="po-textual">transform</textual></code><textual class="po-textual"> function orchestrates the transformation process by invoking the function items of the templates.
    </textual></para><figure class="po-container e316 e316" floatstyle="1" xml:id="pm-structure" xreflabel="2"><mediaobject class="po-container e317 e317"><imageobject class="po-container e318 e318"><imagedata class="po-meta e319 e319" fileref="../../../vol5/graphics/Candillon01/Candillon01-002.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e320 e320"><para class="po-block e321 e321"><textual class="po-textual">Structure of Translator.</textual></para></caption></mediaobject></figure><para class="po-block e322 e322"><textual class="po-textual">
      Figure </textual><xref class="po-milestone e323 e323" linkend="pm-collaborations"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> depicts this orchestration of the translation process.
      The client invokes the </textual><code class="po-atom e324 e324"><textual class="po-textual">transform</textual></code><textual class="po-textual"> function passing the XDM instance and the templates as parameters.
      For each template, the </textual><code class="po-atom e325 e325"><textual class="po-textual">transform</textual></code><textual class="po-textual"> function first executes the </textual><code class="po-atom e326 e326"><textual class="po-textual">match</textual></code><textual class="po-textual"> function passing the current XDM instance as parameter.
      If the result of the invocation of </textual><code class="po-atom e327 e327"><textual class="po-textual">match</textual></code><textual class="po-textual"> is true, then the </textual><code class="po-atom e328 e328"><textual class="po-textual">apply</textual></code><textual class="po-textual"> function is invoked on this instance.
      Please note that the </textual><code class="po-atom e329 e329"><textual class="po-textual">apply</textual></code><textual class="po-textual"> function itself may repeatably invoke the </textual><code class="po-atom e330 e330"><textual class="po-textual">transform</textual></code><textual class="po-textual"> function to further transform nested structures.
    </textual></para><figure class="po-container e331 e331" floatstyle="1" xml:id="pm-collaborations" xreflabel="3"><mediaobject class="po-container e332 e332"><imageobject class="po-container e333 e333"><imagedata class="po-meta e334 e334" fileref="../../../vol5/graphics/Candillon01/Candillon01-003.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e335 e335"><para class="po-block e336 e336"><textual class="po-textual">Collaborations in Translator.</textual></para></caption></mediaobject></figure></section><section class="po-hcontainer e337 e337"><title class="po-block e338 e338"><textual class="po-textual">Implementation</textual></title><para class="po-block e339 e339"><textual class="po-textual">In this section, we describe the implementation of Translator for the GeoRSS-to-HTML transformation (see above).</textual><footnote class="po-popup e340 e340"><para class="po-block e341 e341"><textual class="po-textual">You can find the code presented in this section in </textual><emphasis class="po-inline e342 e342" role="ital"><textual class="po-textual">AtomPub/translator.xq</textual></emphasis></para></footnote><textual class="po-textual">.
    We start with a presentation of the </textual><code class="po-atom e343 e343"><textual class="po-textual">transform</textual></code><textual class="po-textual"> function which receives the XDM instance to transform (i.e. the Atom feed) and the transformation templates as parameters.
      </textual><programlisting class="po-block e344 e344" xml:space="preserve"><textual class="po-textual">
declare function converter:transform(
  $i as item()*,
  $templates as function(*)+) as item()*
{
  for $tpl in $templates
  let $template := $tpl()
  let $match    := $template[1]
  let $apply    := $template[2]
  return
    if($match($i)) then
      $apply($i, converter:transform#2, $templates)
    else()
};        
        </textual></programlisting><textual class="po-textual">
    </textual></para><para class="po-block e345 e345"><textual class="po-textual">This function invokes the </textual><code class="po-atom e346 e346"><textual class="po-textual">apply</textual></code><textual class="po-textual"> and </textual><code class="po-atom e347 e347"><textual class="po-textual">match</textual></code><textual class="po-textual"> functions for all templates.
      The example application contains templates for Atom feeds, Atom entries, and GeoRSS points.
      For instance, it contains an </textual><code class="po-atom e348 e348"><textual class="po-textual">xhtml-template</textual></code><textual class="po-textual"> module which contains templates to transform Atom feeds and entries into XHTML.
      Moreover, it contains a module to match and apply GeoRSS points.</textual><footnote class="po-popup e349 e349"><para class="po-block e350 e350"><textual class="po-textual">However, the code is not shown in this  paper but contained in the example application</textual></para></footnote><textual class="po-textual">
      For example, the Atom module contains two templates each consisting of a </textual><code class="po-atom e351 e351"><textual class="po-textual">match</textual></code><textual class="po-textual"> and an </textual><code class="po-atom e352 e352"><textual class="po-textual">apply</textual></code><textual class="po-textual"> function:
      </textual><itemizedlist class="po-table e353 e353"><listitem class="po-container e354 e354"><para class="po-block e355 e355"><textual class="po-textual">Atom feed template: </textual><code class="po-atom e356 e356"><textual class="po-textual">match-feed</textual></code><textual class="po-textual"> and </textual><code class="po-atom e357 e357"><textual class="po-textual">apply-feed</textual></code><textual class="po-textual"> functions.</textual></para></listitem><listitem class="po-container e358 e358"><para class="po-block e359 e359"><textual class="po-textual">Atom entry template: </textual><code class="po-atom e360 e360"><textual class="po-textual">match-entry</textual></code><textual class="po-textual"> and </textual><code class="po-atom e361 e361"><textual class="po-textual">apply-entry</textual></code><textual class="po-textual"> functions.</textual></para></listitem></itemizedlist><textual class="po-textual">
    </textual></para><para class="po-block e362 e362"><textual class="po-textual">
      The functions </textual><code class="po-atom e363 e363"><textual class="po-textual">match-feed</textual></code><textual class="po-textual"> and </textual><code class="po-atom e364 e364"><textual class="po-textual">match-entry</textual></code><textual class="po-textual"> are respectively checking if the XDM instance is an Atom feed or entry.
      </textual><programlisting class="po-block e365 e365" xml:space="preserve"><textual class="po-textual">
 declare function html-templates:match-feed($item) as xs:boolean
{
    $item instance of schema-element(atom:feed)
};       
        </textual></programlisting><textual class="po-textual">
      </textual><programlisting class="po-block e366 e366" xml:space="preserve"><textual class="po-textual">
 declare function html-templates:match-entry($item) as xs:boolean
{
    $item instance of schema-element(atom:entry)
};
        </textual></programlisting><textual class="po-textual">
    </textual></para><para class="po-block e367 e367"><textual class="po-textual">
      Both of the </textual><code class="po-atom e368 e368"><textual class="po-textual">match</textual></code><textual class="po-textual"> functions are associated to </textual><code class="po-atom e369 e369"><textual class="po-textual">apply</textual></code><textual class="po-textual"> functions, namely </textual><code class="po-atom e370 e370"><textual class="po-textual">apply-feed</textual></code><textual class="po-textual"> and </textual><code class="po-atom e371 e371"><textual class="po-textual">apply-entry</textual></code><textual class="po-textual">.
      Each of the </textual><code class="po-atom e372 e372"><textual class="po-textual">apply</textual></code><textual class="po-textual"> functions shown below is invoking the </textual><code class="po-atom e373 e373"><textual class="po-textual">transform</textual></code><textual class="po-textual"> function.
      More specifically, in </textual><code class="po-atom e374 e374"><textual class="po-textual">apply-feed</textual></code><textual class="po-textual">, the </textual><code class="po-atom e375 e375"><textual class="po-textual">transform</textual></code><textual class="po-textual"> function is invoked for each Atom entry in the feed.
      In </textual><code class="po-atom e376 e376"><textual class="po-textual">apply-entry</textual></code><textual class="po-textual">, the </textual><code class="po-atom e377 e377"><textual class="po-textual">transform</textual></code><textual class="po-textual"> function is invoked for all children of an entry.
      If one of the children is contained in the GeoRSS namespace, it will be transformed by a matching template.
      </textual><programlisting class="po-block e378 e378" xml:space="preserve"><textual class="po-textual">
declare function html-templates:apply-feed(
    $feed as schema-element(atom:feed),
    $transform as (function(item()*, function(*)+) as item()*),
    $templates as function(*)+)
{
    &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
        &lt;h1&gt;{$feed/atom:title/text()}&lt;/h1&gt;
        &lt;div id="entries"&gt;{
         for $entry in $feed/atom:entry
         return $transform($entry, $templates)
        }&lt;/div&gt;
    &lt;/html&gt;
};  
</textual></programlisting><textual class="po-textual">
      </textual><programlisting class="po-block e379 e379" xml:space="preserve"><textual class="po-textual">
declare function html-templates:apply-entry(
    $entry as schema-element(atom:entry),
    $transform as (function(item()*, function(*)+) as item()*),
    $templates as function(*)+)
{
    &lt;div class="atom:content"
         xmlns="http://www.w3.org/1999/xhtml"&gt;
      &lt;h2&gt;{$entry/atom:title/text()}&lt;/h2&gt;
      &lt;div class="atom:content"&gt;
      {$entry/atom:content/text()}
      &lt;/div&gt;
      {for $child in $entry/*
       return $transform($child, $templates)}
    &lt;/div&gt;
};
</textual></programlisting><textual class="po-textual">
    </textual></para><para class="po-block e380 e380"><textual class="po-textual">Finally, the client invokes the </textual><code class="po-atom e381 e381"><textual class="po-textual">transform</textual></code><textual class="po-textual"> function for the first time, passing as first argument an instance of an Atom feed to be converted and as second argument the templates as parameters.
    </textual><programlisting class="po-block e382 e382" xml:space="preserve"><textual class="po-textual">
(: Display the Atom feed :)
let $feed := local:get-feed()
return algo:transform($feed, tohtml:get-templates());      
    </textual></programlisting><textual class="po-textual">
    </textual></para></section><section class="po-hcontainer e383 e383"><title class="po-block e384 e384"><textual class="po-textual">Implementation Considerations</textual></title><para class="po-block e385 e385"><textual class="po-textual">In the previous section, we have introduce one possible implementation of Translator.
        In this section, we consider some alternative implementation aspects.
        </textual><itemizedlist class="po-table e386 e386"><listitem class="po-container e387 e387"><para class="po-block e388 e388"><emphasis class="po-inline e389 e389"><textual class="po-textual">Consideration 1:</textual></emphasis><textual class="po-textual"> This pattern is based on functional parametrization therefore XQuery 1.1 is required to implement Translator.</textual></para></listitem><listitem class="po-container e390 e390"><para class="po-block e391 e391"><emphasis class="po-inline e392 e392" role="bold"><textual class="po-textual">Consideration 2:</textual></emphasis><textual class="po-textual"> The </textual><code class="po-atom e393 e393"><textual class="po-textual">transform</textual></code><textual class="po-textual"> function can vary.
              In our implementation, if the given input hasn't been matched by any template, it stops the process. 
            However, alternative implementation of the </textual><code class="po-atom e394 e394"><textual class="po-textual">transform</textual></code><textual class="po-textual"> function may look at the children of the XDM input.
          </textual></para></listitem><listitem class="po-container e395 e395"><para class="po-block e396 e396"><emphasis class="po-inline e397 e397" role="bold"><textual class="po-textual">Consideration 3:</textual></emphasis><textual class="po-textual"> If an </textual><code class="po-atom e398 e398"><textual class="po-textual">apply</textual></code><textual class="po-textual"> function invokes the </textual><code class="po-atom e399 e399"><textual class="po-textual">transform</textual></code><textual class="po-textual"> function, it may invoke it with a different implementation of the </textual><code class="po-atom e400 e400"><textual class="po-textual">transform</textual></code><textual class="po-textual"> function than the one received as parameter.
          The same variation can apply for the templates passed as parameter to the </textual><code class="po-atom e401 e401"><textual class="po-textual">transform</textual></code><textual class="po-textual"> function.</textual></para></listitem></itemizedlist><textual class="po-textual">
        </textual></para></section><section class="po-hcontainer e402 e402"><title class="po-block e403 e403"><textual class="po-textual">Conclusion</textual></title><para class="po-block e404 e404"><textual class="po-textual">By implementing Use Case 2 (Sec. </textual><xref class="po-milestone e405 e405" linkend="application"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) using Translator, we have improved the application on the following perspectives:
        </textual><itemizedlist class="po-table e406 e406"><listitem class="po-container e407 e407"><para class="po-block e408 e408"><textual class="po-textual">Independent modules can collaborate easily on the same XDM instance.</textual></para></listitem><listitem class="po-container e409 e409"><para class="po-block e410 e410"><textual class="po-textual">Extending transformations is easy. With Translator, templates are loosely coupled. New templates can be introduced without affecting the others.</textual></para></listitem></itemizedlist><textual class="po-textual">
        
        In conclusion, use Translator if you want to:
        </textual><itemizedlist class="po-table e411 e411"><listitem class="po-container e412 e412"><para class="po-block e413 e413"><textual class="po-textual">Bring the XSLT programing paradigm to XQuery.</textual></para></listitem><listitem class="po-container e414 e414"><para class="po-block e415 e415"><textual class="po-textual">Transform and/or interpret an heterogeneous XML document with a modular partitioning of the function involved.</textual></para></listitem></itemizedlist><textual class="po-textual">
     </textual></para></section></section><section class="po-hcontainer e416 e416" xml:id="strategy" xreflabel="5"><title class="po-block e417 e417"><textual class="po-textual">Strategy</textual></title><para class="po-block e418 e418"><textual class="po-textual">In this section, we present the design and implementation of parts of the AtomPub server (see Section </textual><xref class="po-milestone e419 e419" linkend="application"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).
      Specifically, we discuss the module that is responsible for retrieving and storing and Atom entry posted to the server.</textual></para><para class="po-block e420 e420"><textual class="po-textual">If an Atom entry is posted to the server, the server must store it and add it to the Atom feed.
      For example, Feeds can be stored in the file system or in a transaction-enabled XML database (i.e. in XQuery collections backed by the database).
      Coupling the AtomPub server module to a specific storage module is not desirable for the following reasons:
      </textual><itemizedlist class="po-table e421 e421"><listitem class="po-container e422 e422"><para class="po-block e423 e423"><textual class="po-textual">If the AtomPub server is depending on many storage modules, the code base becomes larger and harder to maintain.</textual></para></listitem><listitem class="po-container e424 e424"><para class="po-block e425 e425"><textual class="po-textual">Storage modules often depend on the environment. For example, different databases are available on different platforms.</textual></para></listitem></itemizedlist><textual class="po-textual">
    </textual></para><para class="po-block e426 e426"><textual class="po-textual">This problem can be solved by encapsulating each available storage algorithm in a function item.
      Such a particular implementation of a functionality is called a Strategy.
      The intent of the Strategy Pattern is as follows:
      </textual><blockquote class="po-container e427 e427"><para class="po-block e428 e428"><textual class="po-textual">Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm implementations vary independently from clients that use it. [</textual><xref class="po-milestone e429 e429" linkend="bib03"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].</textual></para></blockquote><textual class="po-textual">
    </textual></para><section class="po-hcontainer e430 e430"><title class="po-block e431 e431"><textual class="po-textual">Description</textual></title><para class="po-block e432 e432"><textual class="po-textual">In order to implement our use case with the Strategy Pattern, we have to decouple the AtomPub operations from the storage operations. 
        Therefore, we call the AtomPub operations passing a function item encapsulating the storage Strategy as parameter.
        
        Strategy defines the following participants (cf. </textual><xref class="po-milestone e433 e433" linkend="bib03"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">):
        </textual><itemizedlist class="po-table e434 e434"><listitem class="po-container e435 e435"><para class="po-block e436 e436"><emphasis class="po-inline e437 e437" role="bold"><textual class="po-textual">Strategy: </textual></emphasis><textual class="po-textual">Interface and functionality implicitly defined by the ContextFunction. This interface applies to all ConcreteStrategy implementations.</textual></para></listitem><listitem class="po-container e438 e438"><para class="po-block e439 e439"><emphasis class="po-inline e440 e440" role="bold"><textual class="po-textual">ConcreteStrategy: </textual></emphasis><textual class="po-textual">A specific implementation of a commonly defined Strategy.</textual></para></listitem><listitem class="po-container e441 e441"><para class="po-block e442 e442"><emphasis class="po-inline e443 e443" role="bold"><textual class="po-textual">ContextFunction: </textual></emphasis><textual class="po-textual">Is called with a ConcreteStrategy and all required data as parameters. For example, the ContextFunction </textual><code class="po-atom e444 e444"><textual class="po-textual">atompub:post</textual></code><textual class="po-textual"> is called with the concrete filesystem storage strategy as parameter.</textual></para></listitem><listitem class="po-container e445 e445"><para class="po-block e446 e446"><emphasis class="po-inline e447 e447" role="bold"><textual class="po-textual">Context: </textual></emphasis><textual class="po-textual">Imports a ConcreteStrategy to use and passes it to the ContextFunction as parameter.</textual></para></listitem></itemizedlist><textual class="po-textual">
      </textual></para><para class="po-block e448 e448"><textual class="po-textual">ContextFunction and ConcreteStrategy interact to implement the Strategy chosen by the server. 
        A ContextFunction may pass all data required to the ConcreteStrategy at runtime.
        The client creates and passes a ConcreteStrategy to a ContextFunction.
      </textual></para><figure class="po-container e449 e449" floatstyle="1" xml:id="strategy-motivation" xreflabel="4"><mediaobject class="po-container e450 e450"><imageobject class="po-container e451 e451"><imagedata class="po-meta e452 e452" fileref="../../../vol5/graphics/Candillon01/Candillon01-004.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e453 e453"><para class="po-block e454 e454"><textual class="po-textual">Structure of the Strategy Pattern.</textual></para></caption></mediaobject></figure><para class="po-block e455 e455"><textual class="po-textual">In Figure </textual><xref class="po-milestone e456 e456" linkend="strategy-motivation"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, the </textual><code class="po-atom e457 e457"><textual class="po-textual">atompub:post</textual></code><textual class="po-textual"> function is responsible for creating a new Atom entry.
        The </textual><code class="po-atom e458 e458"><textual class="po-textual">create-strategy</textual></code><textual class="po-textual"> argument is a function item that encapsulates the functionality to store an entry.
        Therefore, it represents a concrete Strategy that stores the entry, for example in a collection.
        Different concrete storage strategies are implemented within different modules that have no dependencies with the AtomPub server module.
        For instance, atompub:post could use one of these strategies:
        </textual><itemizedlist class="po-table e459 e459"><listitem class="po-container e460 e460"><para class="po-block e461 e461"><emphasis class="po-inline e462 e462" role="bold"><textual class="po-textual">File System Store: </textual></emphasis><textual class="po-textual">implements the storage of entries on the file system. I/O operations on the file system are based on Zorba file API [</textual><xref class="po-milestone e463 e463" linkend="bib18"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].</textual></para></listitem><listitem class="po-container e464 e464"><para class="po-block e465 e465"><emphasis class="po-inline e466 e466" role="bold"><textual class="po-textual">Collection Store: </textual></emphasis><textual class="po-textual">implements the storage of entries within collections. This implementation is based on the XQuery Data Definition Facility [</textual><xref class="po-milestone e467 e467" linkend="bib11"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].</textual></para></listitem><listitem class="po-container e468 e468"><para class="po-block e469 e469"><emphasis class="po-inline e470 e470" role="bold"><textual class="po-textual">REST Store: </textual></emphasis><textual class="po-textual">implements a remote storage of entries through a REST API. This store is based on EXPath HTTP Client [</textual><xref class="po-milestone e471 e471" linkend="bib17"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].</textual></para></listitem></itemizedlist><textual class="po-textual">
      </textual></para><para class="po-block e472 e472"><textual class="po-textual">
        Whenever the AtomPub server has to retrieve or create data, it forwards the responsibility to the concrete Strategy which is passed as a function argument.
      </textual></para></section><section class="po-hcontainer e473 e473"><title class="po-block e474 e474"><textual class="po-textual">Implementation</textual></title><para class="po-block e475 e475"><textual class="po-textual">Within this section, we describe one possible implementation of the AtomPub server use case using the Strategy pattern </textual><footnote class="po-popup e476 e476"><para class="po-block e477 e477"><textual class="po-textual">You can find the code presented in this section in </textual><emphasis class="po-inline e478 e478" role="ital"><textual class="po-textual">AtomPub/strategy.xq</textual></emphasis></para></footnote><textual class="po-textual">.</textual></para><para class="po-block e479 e479"><textual class="po-textual">First, we show how a ConcreteStrategy is chosen and used within the Context, i.e. the main module; in our example application we use the concrete file system storage Strategy. 
        After that, we present the usage of the ConcreteStrategy within the </textual><code class="po-atom e480 e480"><textual class="po-textual">atompub:post</textual></code><textual class="po-textual"> ContextFunction.
        Finally, we will present the concrete implementation of the </textual><code class="po-atom e481 e481"><textual class="po-textual">create</textual></code><textual class="po-textual"> algorithm, i.e. a chosen ConcreteStrategy implemented in the </textual><code class="po-atom e482 e482"><textual class="po-textual">store:create</textual></code><textual class="po-textual"> function.</textual></para><para class="po-block e483 e483"><textual class="po-textual">
        The code listing below shows the main server module which handles an Atom entry posting from a client.
        By importing the file system store (not shown in the code snippet below) the main module chooses the concrete store strategy. 
        It then calls </textual><code class="po-atom e484 e484"><textual class="po-textual">atompub:post</textual></code><textual class="po-textual"> passing </textual><code class="po-atom e485 e485"><textual class="po-textual">store:create</textual></code><textual class="po-textual"> as the chosen storage strategy.
        </textual><programlisting class="po-block e486 e486" xml:space="preserve"><textual class="po-textual">
(: 
 : Post the entry, the result is the URI of the entry 
 : using store:create#2 as the storage strategy
 :)
let $feed-uri  := "http://www.example.org/blog"
let $entry-uri := atompub:post($feed-uri, $local:entry, store:create#2)
(: Get the newly created entry :)
return store:retrieve-entry($entry-uri)          
</textual></programlisting><textual class="po-textual">
      </textual></para><para class="po-block e487 e487"><textual class="po-textual">
        The ContextFunction </textual><code class="po-atom e488 e488"><textual class="po-textual">atompub:post</textual></code><textual class="po-textual"> shown below is processing an Atom entry posted by a client.
        It takes three parameters: the feed uri, the entry to be aggregated, and the storage strategy.
        First, the entry is processed.
        Then it is passed as parameter to the invoked strategy function item.
        </textual><programlisting class="po-block e489 e489" xml:space="preserve"><textual class="po-textual">
(: Post an entry :)
declare sequential function atompub:post(
    $feed-uri as xs:string,
    $entry as schema-element(atom:entry),
    $create-strategy 
as (function(xs:string, schema-element(atom:entry)) as item()*)
) as xs:string
{
    (: Prepare the entry :)
    declare $id := util:uuid();
    declare $entry-uri := concat($feed-uri, "/", $id);
    insert nodes (&lt;atom:id&gt;{$id}&lt;/atom:id&gt;,
                  &lt;atom:link href="{$entry-uri}" rel="self" /&gt;)
    into $entry;
    (: Use strategy to store the entry :)
    $create-strategy($feed-uri, $entry);
    (: Return the entry URI :)
    $entry-uri;
};          
        </textual></programlisting><textual class="po-textual">
      </textual></para><para class="po-block e490 e490"><textual class="po-textual">
        The common interface of the </textual><code class="po-atom e491 e491"><textual class="po-textual">create-strategy</textual></code><textual class="po-textual"> algorithm to create an entry is implicitly defined as </textual><code class="po-atom e492 e492"><textual class="po-textual">function(xs:string, schema-element(atom:entry))</textual></code><textual class="po-textual">.
        Within XQuery there is no explicit mechanism to define an interface in the manner of an object oriented language like Java.
        Therefore, one implicit way to define the common interface for the actual Strategy is by definition of the function item parameter within the signature of the ContextFunction.
        
        </textual><programlisting class="po-block e493 e493" xml:space="preserve"><textual class="po-textual">
declare sequential function store:create(
    $feed-uri as xs:string,
    $entry as schema-element(atom:entry))
{
  declare $filename  := store:get-filename($feed-uri);
  declare $meta-feed := validate { 
    fs:read-xml($filename)/atom:feed
  };
  declare $entry-uri := 
    $entry/atom:link[string(@rel) eq "self"]/@href;
  (: Create the entry in the file system :)
  fs:write(store:get-filename($entry-uri), $entry, ());
  (: Update the feed metadata :)
  insert node &lt;atom:link href="{$entry-uri}" rel="entry" /&gt;
  as first into $meta-feed;
  fs:write($filename, $meta-feed, ());
};          
          </textual></programlisting><textual class="po-textual">
        
        As an example of a concrete implementation of the entry creation strategy we present our sample implementation within the file system store above.
        The implementation stores the feed metadata in one file and each entry in a separate file.
        To preserve the order of all contained entries the </textual><code class="po-atom e494 e494"><textual class="po-textual">store:create</textual></code><textual class="po-textual"> function has to insert an </textual><code class="po-atom e495 e495"><textual class="po-textual">atom:link</textual></code><textual class="po-textual"> element into the feed metadata for each new entry which points to the according entry file.
      </textual></para></section><section class="po-hcontainer e496 e496"><title class="po-block e497 e497"><textual class="po-textual">Implementation Considerations</textual></title><para class="po-block e498 e498"><textual class="po-textual">When implementing the Strategy pattern, the Strategy may be optional [</textual><xref class="po-milestone e499 e499" linkend="bib03"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. If no Strategy is provided, we execute the default behavior of the function.</textual></para><para class="po-block e500 e500"><textual class="po-textual">The Strategy implemented in our use case has side effects: it stores data in the file system. Therefore the use of XQuery Scripting Extension depends on the algorithm implementation that needs to be achieved, not on the Strategy pattern itself.</textual></para></section><section class="po-hcontainer e501 e501"><title class="po-block e502 e502"><textual class="po-textual">Conclusion</textual></title><para class="po-block e503 e503"><textual class="po-textual">By adapting the Strategy pattern in our example application we gained the following benefits (cf. </textual><xref class="po-milestone e504 e504" linkend="bib03"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">):
        </textual><itemizedlist class="po-table e505 e505"><listitem class="po-container e506 e506"><para class="po-block e507 e507"><emphasis class="po-inline e508 e508" role="bold"><textual class="po-textual">Reduced coupling: </textual></emphasis><textual class="po-textual">Using Strategy enabled the AtomPub server module to be loosely coupled with any storage module.</textual></para></listitem><listitem class="po-container e509 e509"><para class="po-block e510 e510"><emphasis class="po-inline e511 e511" role="bold"><textual class="po-textual">Reusability: </textual></emphasis><textual class="po-textual">All storage modules are defining a family of algorithms for contexts to use and reuse.</textual></para></listitem><listitem class="po-container e512 e512"><para class="po-block e513 e513"><emphasis class="po-inline e514 e514" role="bold"><textual class="po-textual">Flexibility: </textual></emphasis><textual class="po-textual">Switching code to a different desired behavior can be done by changing only one import statement.</textual></para></listitem></itemizedlist><textual class="po-textual">
        
      </textual></para><para class="po-block e515 e515"><textual class="po-textual">  
        We encourage usage of the Strategy  pattern when
        </textual><itemizedlist class="po-table e516 e516"><listitem class="po-container e517 e517"><para class="po-block e518 e518"><textual class="po-textual">you need different implementations of a specific component having a uniform interface. Using Strategies you can simply configure different behaviors.</textual></para></listitem><listitem class="po-container e519 e519"><para class="po-block e520 e520"><textual class="po-textual">you want to hide specific implementation details from a module.</textual></para></listitem><listitem class="po-container e521 e521"><para class="po-block e522 e522"><textual class="po-textual">you are using several nested </textual><code class="po-atom e523 e523"><textual class="po-textual">if..then..else</textual></code><textual class="po-textual"> statements to emulate configurability for different behaviors within functions. Such functions can be refactored using the Strategy pattern.</textual></para></listitem></itemizedlist><textual class="po-textual">
       </textual></para></section></section><section class="po-hcontainer e524 e524" xml:id="observer" xreflabel="6"><title class="po-block e525 e525"><textual class="po-textual">Observer</textual></title><para class="po-block e526 e526"><textual class="po-textual">In this section, we discuss the implementation of Use Case 4: sending a message on Twitter for each new Atom entry that is created on the server.
    In this use case, the AtomPub module automatically becomes dependent on the module that provides the functionality to send messages on Twitter.
    A requirement for the AtomPub server module is to enable cooperation with an arbitrary number of modules that exist outside the Atom library.
    Moreover, the AtomPub server should not depend on any of these extension modules.
    For example, one could easily think of modules that do logging, spam detection, or email notification.
    However, all such modules should not be tightly coupled because this prevents from using them in other scenarios.
    </textual></para><para class="po-block e527 e527"><textual class="po-textual">The Observer pattern describes how to establish such loosely-coupled collaborations between functions:
      </textual><blockquote class="po-container e528 e528"><para class="po-block e529 e529"><textual class="po-textual">Define a one-to-many dependency between functions so that when one is called, all its dependents are notified automatically [</textual><xref class="po-milestone e530 e530" linkend="bib03"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].</textual></para></blockquote></para><section class="po-hcontainer e531 e531"><title class="po-block e532 e532"><textual class="po-textual">Description</textual></title><para class="po-block e533 e533"><textual class="po-textual">When applying the Observer pattern to our use case, we have decoupled collaborative modules by introducing a subscription mechanism for functions to be invoked on particular events in the application.</textual></para><para class="po-block e534 e534"><textual class="po-textual">The Observer pattern defines the following participants (cf. </textual><xref class="po-milestone e535 e535" linkend="bib03"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">):
        </textual><itemizedlist class="po-table e536 e536"><listitem class="po-container e537 e537"><para class="po-block e538 e538"><emphasis class="po-inline e539 e539" role="bold"><textual class="po-textual">Subject: </textual></emphasis><textual class="po-textual"> keep track of its observers. Subject notifies its observers when an event occurred.</textual></para></listitem><listitem class="po-container e540 e540"><para class="po-block e541 e541"><emphasis class="po-inline e542 e542" role="bold"><textual class="po-textual">Observer: </textual></emphasis><textual class="po-textual"> function invoked to be notified about an event. Observer receives as parameter information about the event that triggered its invocation.</textual></para></listitem><listitem class="po-container e543 e543"><para class="po-block e544 e544"><emphasis class="po-inline e545 e545" role="bold"><textual class="po-textual">Client: </textual></emphasis><textual class="po-textual"> attach Observers to the Subject.</textual></para></listitem></itemizedlist><textual class="po-textual">
      </textual></para><para class="po-block e546 e546"><textual class="po-textual">
        Observers are attached to the Subject.
        If a particular event occurs, the subject invokes all its observers and provides each of them with data about the event that triggered the invocation.
        A Subject can have many Observers, each Observer implementing a different functionality.
      </textual></para><para class="po-block e547 e547"><textual class="po-textual">
        Subjects and Observers are loosely coupled: they can vary independently [</textual><xref class="po-milestone e548 e548" linkend="bib03"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].
        Consider our use case, adding/removing Observers doesn't affect neither the AtomPub server module nor the Twitter Observer function.
        Both modules (AtomPub and Twitter) can operate without the other. The Observer pattern is enables collaborations between these two decoupled modules.
      </textual></para></section><section class="po-hcontainer e549 e549"><title class="po-block e550 e550"><textual class="po-textual">Implementation</textual></title><para class="po-block e551 e551"><textual class="po-textual">In this section, we discuss the implementation of the Observer pattern in our application </textual><footnote class="po-popup e552 e552"><para class="po-block e553 e553"><textual class="po-textual">You can find the code presented in this section in </textual><emphasis class="po-inline e554 e554" role="ital"><textual class="po-textual">AtomPub/observer.xq</textual></emphasis></para></footnote><textual class="po-textual">.
        Figure </textual><xref class="po-milestone e555 e555" linkend="observer-structure"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> describes the structure of our Observer implementation.
        The implementation of the Observer pattern in our application involves the AtomPub server module (the Subject) and the </textual><code class="po-atom e556 e556"><textual class="po-textual">tweet-entry</textual></code><textual class="po-textual"> function (the Observer).</textual></para><figure class="po-container e557 e557" floatstyle="1" xml:id="observer-structure" xreflabel="4"><mediaobject class="po-container e558 e558"><imageobject class="po-container e559 e559"><imagedata class="po-meta e560 e560" fileref="../../../vol5/graphics/Candillon01/Candillon01-005.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e561 e561"><para class="po-block e562 e562"><textual class="po-textual">Structure of Observer.</textual></para></caption></mediaobject></figure><para class="po-block e563 e563"><textual class="po-textual">The </textual><code class="po-atom e564 e564"><textual class="po-textual">on-post</textual></code><textual class="po-textual"> function is responsible for attaching new observers to the AtomPub server module (the Subject).
            The AtomPub server is keeping track of all its observers with the </textual><code class="po-atom e565 e565"><textual class="po-textual">on-post</textual></code><textual class="po-textual"> module variable.
          </textual><programlisting class="po-block e566 e566" xml:space="preserve"><textual class="po-textual">
(: Hold the observer references :)
declare variable $atompub:on-post
  as (function(schema-element(atom:entry)) as item()*)* := ();

(: Add an observer to the post request :)
declare sequential function atompub:on-post(
  $o as (function(schema-element(atom:entry)) as item()*))
{
    set $atompub:on-post := ($atompub:on-post, $o)
};            
          </textual></programlisting><textual class="po-textual">
      </textual></para><para class="po-block e567 e567"><textual class="po-textual">In order for the subject to be able to invoke an Observer, all observers must have the same function signature. For instance, in the AtomPub server module, each observer must be a subtype of </textual><code class="po-atom e568 e568"><textual class="po-textual">function(schema-element(atom:entry)) as item()*</textual></code><textual class="po-textual">.
      The single parameter of the observer, (</textual><code class="po-atom e569 e569"><textual class="po-textual">schema-element(atom:entry)</textual></code><textual class="po-textual">) is an instance of the Atom entry that has been created on the server.
      </textual></para><para class="po-block e570 e570"><textual class="po-textual">
        The </textual><code class="po-atom e571 e571"><textual class="po-textual">tweet-entry</textual></code><textual class="po-textual"> function is the Observer we will use in our use case: it will be executed for each new entry created on the server.
        It takes an Atom entry as parameter and sends a message on Twitter with the following format: entry title, tiny url of the entry.
        The function signature is compatible with the observer signature defined in the AtomPub server module (</textual><code class="po-atom e572 e572"><textual class="po-textual">function(schema-element(atom:entry)) as item()*</textual></code><textual class="po-textual">).
        </textual><programlisting class="po-block e573 e573" xml:space="preserve"><textual class="po-textual">
(: The tweet will be formatted as following: Title + tiny url :)
declare function twitter:tweet-entry(
  $entry as schema-element(atom:entry))
{ 
  (: Get the title :)
  let $title := $entry/atom:title/text()
  (: Create a tiny link :)
  let $uri := twitter:get-tiny-url(
    string($entry/atom:link[@rel = "self"]/@href)
  )
  (: Send the status on twitter :)
  return twitter:tweet(concat($title, ": ", $uri))
};          
        </textual></programlisting><textual class="po-textual">
      </textual></para><para class="po-block e574 e574"><textual class="po-textual">The Client registers the </textual><code class="po-atom e575 e575"><textual class="po-textual">tweet-entry</textual></code><textual class="po-textual"> function as an Observer of the AtomPub server module.
        </textual><programlisting class="po-block e576 e576" xml:space="preserve"><textual class="po-textual">
(: Register the Twitter observer :)
atompub:on-post(twitter:tweet-entry#1);        
      </textual></programlisting><textual class="po-textual">
      </textual></para><para class="po-block e577 e577"><textual class="po-textual">
        When a new Atom entry is added to the server, each Observer is notified and receives the entry as parameter.
        </textual><programlisting class="po-block e578 e578" xml:space="preserve"><textual class="po-textual">
(: Notify observers :)
for $o in $atompub:on-post
return $o($entry);         
          </textual></programlisting><textual class="po-textual">
      </textual></para></section><section class="po-hcontainer e579 e579"><title class="po-block e580 e580"><textual class="po-textual">Implementation Considerations</textual></title><para class="po-block e581 e581"><textual class="po-textual">In the previous section, we introduced an implementation of the observer pattern. In this section, we discuss how this implementation can vary:
        </textual><itemizedlist class="po-table e582 e582"><listitem class="po-container e583 e583"><para class="po-block e584 e584"><emphasis class="po-inline e585 e585" role="bold"><textual class="po-textual">Consideration 1: </textual></emphasis><textual class="po-textual">
              In our implementation, the AtomPub server module is using the XQuery Scripting Extension to keep track of its observers.
              However, variants of the Observer pattern can be implemented using only the XQuery 1.1 core specification.
              For instance, an alternative implementation could access Observers as function parameter:
              </textual><programlisting class="po-block e586 e586" xml:space="preserve"><textual class="po-textual">
let $observers := twitter:tweet-entry#1
return
  atompub:post($feed-uri, $entry, $observers)          
        </textual></programlisting><textual class="po-textual">
          </textual></para></listitem><listitem class="po-container e587 e587"><para class="po-block e588 e588"><emphasis class="po-inline e589 e589" role="bold"><textual class="po-textual">Consideration 2: </textual></emphasis><textual class="po-textual"> Notifying observers has a performance cost in the application.
          Therefore, when implementing Observer, the event granularity must be carefully designed in order to avoid a large number of useless event notification.</textual></para></listitem><listitem class="po-container e590 e590"><para class="po-block e591 e591"><emphasis class="po-inline e592 e592" role="bold"><textual class="po-textual">Consideration 3: </textual></emphasis><textual class="po-textual">
            Observers producing side-effects may trigger an infinite amount of event notifications.
            This can happen if the observer code is triggering the same event that triggered its own invocation.
            If an Observer implementor is writing side-effects, she must avoid this scenarios.
          </textual></para></listitem><listitem class="po-container e593 e593"><para class="po-block e594 e594"><emphasis class="po-inline e595 e595" role="bold"><textual class="po-textual">Consideration 4: </textual></emphasis><textual class="po-textual"> 
            Observers should be independent of each other.
            For instance, consider a spam checker observer that removes a newly created Atom entry because the author's e-mail address is blacklisted.
            In such situation, all observers become dependent on the outcome of the spam checker observer.
            For example, they might process an entry that has already been removed by the spam checker or they could have already sent a notification for a spam post.</textual></para></listitem></itemizedlist><textual class="po-textual">
      </textual></para></section><section class="po-hcontainer e596 e596"><title class="po-block e597 e597"><textual class="po-textual">Conclusion</textual></title><para class="po-block e598 e598"><textual class="po-textual">
        By using Observer to implement Use Case 4, the application has improved in the following perspectives:
        </textual><itemizedlist class="po-table e599 e599"><listitem class="po-container e600 e600"><para class="po-block e601 e601"><textual class="po-textual">The behavior the AtomPub server has been extended, by sending messages to Twitter without any changes to the code of the AtomPub server.</textual></para></listitem><listitem class="po-container e602 e602"><para class="po-block e603 e603"><textual class="po-textual">The AtomPub server module can collaborate with an arbitrary number of functions in the application but stays loosely coupled.</textual></para></listitem></itemizedlist><textual class="po-textual">
      </textual></para><para class="po-block e604 e604"><textual class="po-textual">
        In conclusion, use the Observer pattern if you want to:
        </textual><itemizedlist class="po-table e605 e605"><listitem class="po-container e606 e606"><para class="po-block e607 e607"><textual class="po-textual">Use the Publish/Subscribe messaging paradigm within XQuery.</textual></para></listitem><listitem class="po-container e608 e608"><para class="po-block e609 e609"><textual class="po-textual">To keep state consistency between independent entities in the application.</textual></para></listitem></itemizedlist><textual class="po-textual">
      </textual></para></section></section><section class="po-hcontainer e610 e610" xml:id="conclusion" xreflabel="7"><title class="po-block e611 e611"><textual class="po-textual">Conclusion &amp; Outlook</textual></title><para class="po-block e612 e612"><textual class="po-textual">In this paper, we motivated the need for XQuery design patterns.
      The reason therefore is that there exist more and more large XQuery applications most of them showing symptoms which are well-known in the object-oriented world and have there been solved using design patterns.
      In more detail, we have presented four design problems along the lines of a running example.
      Moreover, we have shown how each of these problems can be solved by applying a particular design pattern.
    </textual></para><para class="po-block e613 e613"><textual class="po-textual">We have chosen to use an AtomPub client and server implementation as a running example.
      For the AtomPub client, we used the Chain of Responsibility (see Sec. </textual><xref class="po-milestone e614 e614" linkend="cor"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) which is using several loosely coupled modules to construct and send an HTTP request.
      Translator (see Sec. </textual><xref class="po-milestone e615 e615" linkend="pm"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) helped us to provide a flexible and extensible HTML rendering engine of Atom entries.
      For the AtomPub server, the Strategy Pattern (Sec. </textual><xref class="po-milestone e616 e616" linkend="strategy"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) allows for configurable storage algorithms by exhibiting higher-order functions.
      Last, the Observer Pattern (Sec. </textual><xref class="po-milestone e617 e617" linkend="observer"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) provided a way to register services (e.g. Twitter notification) which are automatically notified if a state of an observed object changes.</textual></para><para class="po-block e618 e618"><textual class="po-textual">
      Generally, the most important aspect of each of the patterns presented in this paper is to decouple XQuery functions and modules.
      For instance, in the Chain of Responsibility, we achieved this by removing dependencies between functions by agreeing on a common XML Schema element (i.e. the request item).
      The Strategy and Observer patterns both leverage higher-order functions as a decoupling mechanism.
    </textual></para><para class="po-block e619 e619"><textual class="po-textual">
      However, the four patterns presented in this paper are only a starting point.
      In the future, we want to develop an extensive catalog of reusable design solutions for the most recurring XQuery design problems.
      Also, we want to classify these design patterns according to
      (1) language features (i.e. pure functional XQuery, XQuery Update, and XQuery Scripting) and
      (2) categories (i.e. creational, structural, and behavioral).  
    </textual></para><para class="po-block e620 e620"><textual class="po-textual">
      Finally, we hope that XQuery design patterns help the XQuery community to capture recurring design problems and develop extensible XQuery applications.
      Therefore, we started to publish a pattern catalog online at </textual><link class="po-inline e621 e621" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://patterns.28msec.com/</textual></link><textual class="po-textual">.
      We are open and very interested in comments, suggestions, and other contributions to our effort and this catalog.
    </textual></para></section><bibliography class="po-hcontainer e622 e622"><title class="po-block e623 e623"><textual class="po-textual">Bibliography</textual></title><bibliomixed class="po-block e624 e624" xml:id="bib01" xreflabel="Cooper2000"><textual class="po-textual">J. W. Cooper. </textual><emphasis class="po-inline e625 e625" role="ital"><textual class="po-textual">Java design patterns: a tutorial</textual></emphasis><textual class="po-textual">. Addison-Wesley Longman Publishing Co., Inc., Boston, MA, USA, 2000.</textual></bibliomixed><bibliomixed class="po-block e626 e626" xml:id="bib02" xreflabel="Cooper2002"><textual class="po-textual">J. W. Cooper. </textual><emphasis class="po-inline e627 e627" role="ital"><textual class="po-textual">C# design patterns: a tutorial</textual></emphasis><textual class="po-textual">. Addison-Wesley Longman Publishing Co., Inc., Boston, MA, USA, 2002.</textual></bibliomixed><bibliomixed class="po-block e628 e628" xml:id="bib03" xreflabel="Gamma1994"><textual class="po-textual">E. Gamma, R. Helm, R. Johnson, and J. M. Vlissides. </textual><emphasis class="po-inline e629 e629" role="ital"><textual class="po-textual">Design Patterns: Elements of Reusable Object-Oriented Software</textual></emphasis><textual class="po-textual">. Addison-Wesley Professional, illustrated edition edition, November 1994.</textual></bibliomixed><bibliomixed class="po-block e630 e630" xml:id="bib04" xreflabel="DeMarco96"><textual class="po-textual">T. DeMarco. </textual><emphasis class="po-inline e631 e631" role="ital"><textual class="po-textual">Book review: Design patterns: Elements of reusable object-oriented software</textual></emphasis><textual class="po-textual">. IEEE Software Magazine, 1996. </textual><link class="po-inline e632 e632" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.systemsguild.com/GuildSite/TDM/Gamma.html</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e633 e633" xml:id="bib05" xreflabel="AntoyHanus02FLOPS"><textual class="po-textual">S. Antoy and M. Hanus. </textual><emphasis class="po-inline e634 e634" role="ital"><textual class="po-textual">Functional logic design patterns</textual></emphasis><textual class="po-textual">. In 6th Int'l Symp, on Functional and Logic Programming (FLOPS'02), pages 67-87, Aizu, Japan, 9 2002. Springer LNCS 2441. doi: </textual><biblioid class="po-atom e635 doi e635"><textual class="po-textual">10.1007/3-540-45788-7_4</textual></biblioid><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e636 e636" xml:id="bib06" xreflabel="Narbel2007"><textual class="po-textual">P. Narbel. </textual><emphasis class="po-inline e637 e637" role="ital"><textual class="po-textual">A Multiparadigmatic Study of the Object-Oriented Design Patterns</textual></emphasis><textual class="po-textual">. 2007.</textual></bibliomixed><bibliomixed class="po-block e638 e638" xml:id="bib07" xreflabel="XQ11"><textual class="po-textual">W3C. XQuery 1.1: </textual><emphasis class="po-inline e639 e639" role="ital"><textual class="po-textual">An XML Query Language</textual></emphasis><textual class="po-textual">. Website, 2009. </textual><link class="po-inline e640 e640" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xquery-11/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e641 e641" xml:id="bib08" xreflabel="Liu2005"><textual class="po-textual">Liu, Z. H., Krishnaprasad, M., and Arora, V. </textual><emphasis class="po-inline e642 e642" role="ital"><textual class="po-textual">Native xquery processing in oracle xmldb</textual></emphasis><textual class="po-textual">. In SIGMOD '05: Proceedings of the 2005 ACM SIGMOD international conference on Management of data (New York, NY, USA, 2005), ACM, pp. 828-833. doi: </textual><biblioid class="po-atom e643 doi e643"><textual class="po-textual">10.1145/1066157.1066259</textual></biblioid><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e644 e644" xml:id="bib09" xreflabel="Nicola2005"><textual class="po-textual">Nicola, M., and van der Linden, B. </textual><emphasis class="po-inline e645 e645" role="ital"><textual class="po-textual">Native XML Support in db2 Universal Database</textual></emphasis><textual class="po-textual">. In VLDB '05: Proceedings of the 31st international conference on Very large data bases (2005), VLDB Endowment, pp. 1164-1174.</textual></bibliomixed><bibliomixed class="po-block e646 e646" xml:id="bib10" xreflabel="Brian2006"><textual class="po-textual">Brian, D. </textual><emphasis class="po-inline e647 e647" role="ital"><textual class="po-textual">The Definitive Guide to Berkeley DB XML</textual></emphasis><textual class="po-textual">. Apress, Berkely, CA, USA, 2006.</textual></bibliomixed><bibliomixed class="po-block e648 e648" xml:id="bib11" xreflabel="XQUF"><textual class="po-textual">W3C. </textual><emphasis class="po-inline e649 e649" role="ital"><textual class="po-textual">XQuery Update Facility 1.0</textual></emphasis><textual class="po-textual">. Website, 2009. </textual><link class="po-inline e650 e650" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xquery-update-10/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e651 e651" xml:id="bib12" xreflabel="XQSE"><textual class="po-textual">W3C. </textual><emphasis class="po-inline e652 e652" role="ital"><textual class="po-textual">XQuery Scripting Extension 1.0</textual></emphasis><textual class="po-textual">. Website, 2008. </textual><link class="po-inline e653 e653" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xquery-sx-10/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e654 e654" xml:id="bib13" xreflabel="XQFT"><textual class="po-textual">W3C. </textual><emphasis class="po-inline e655 e655" role="ital"><textual class="po-textual">XQuery and XPath Full Text 1.0</textual></emphasis><textual class="po-textual">. Website, 2010. </textual><link class="po-inline e656 e656" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xpath-full-text-10/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e657 e657" xml:id="bib14" xreflabel="Kaufmann2009"><textual class="po-textual">Kaufmann, M., and Kossmann, D. </textual><emphasis class="po-inline e658 e658" role="ital"><textual class="po-textual">Developing an Enterprise Web Application in XQuery</textual></emphasis><textual class="po-textual">. In ICWE (2009), vol. 5648 of Lecture Notes in Computer Science, Springer, pp. 465-468. doi: </textual><biblioid class="po-atom e659 doi e659"><textual class="po-textual">10.1007/978-3-642-02818-2_39</textual></biblioid><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e660 e660" xml:id="bib15" xreflabel="Sausalito2010"><textual class="po-textual">28msec Inc. </textual><emphasis class="po-inline e661 e661" role="ital"><textual class="po-textual">Sausalito Developer Guide</textual></emphasis><textual class="po-textual">. Website, 2010. </textual><link class="po-inline e662 e662" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://sausalito.28msec.com</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e663 e663" xml:id="bib16" xreflabel="RFC5023"><textual class="po-textual">Gregorio, J., and de hOra, B. </textual><emphasis class="po-inline e664 e664" role="ital"><textual class="po-textual">The Atom Publishing Protocol</textual></emphasis><textual class="po-textual">. RFC 5023 (Proposed Standard), Oct. 2007. </textual><link class="po-inline e665 e665" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.ietf.org/rfc/rfc5023.txt</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e666 e666" xml:id="bib17" xreflabel="HTTPClient"><textual class="po-textual">Georges, F. </textual><emphasis class="po-inline e667 e667" role="ital"><textual class="po-textual">HTTP Client Module</textual></emphasis><textual class="po-textual">. Candidate, EXPath, January 2010. </textual><link class="po-inline e668 e668" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.expath.org/modules/http-client.html</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e669 e669" xml:id="bib18" xreflabel="XQDDF"><textual class="po-textual">FLWOR Foundation </textual><emphasis class="po-inline e670 e670" role="ital"><textual class="po-textual">XQuery Data Definition Facility</textual></emphasis><textual class="po-textual">. </textual><link class="po-inline e671 e671" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.zorba-xquery.com/doc/zorba-latest/zorba/html/XQDDF.html</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e672 e672" xml:id="bib19" xreflabel="Translator"><textual class="po-textual">KÃ¼hne, T. </textual><emphasis class="po-inline e673 e673" role="ital"><textual class="po-textual">The Translator Pattern - External Functionality with Homomorphic Mappings</textual></emphasis><textual class="po-textual">. TOOLS '97: Proceedings of the Tools-23: Technology of Object-Oriented Languages and Systems, 1997.</textual></bibliomixed><bibliomixed class="po-block e674 e674" xml:id="bib20" xreflabel="XQueryInAction"><textual class="po-textual">W3C. </textual><emphasis class="po-inline e675 e675" role="ital"><textual class="po-textual">Examples of XML Query In Action</textual></emphasis><textual class="po-textual">. Website, 2010. </textual><link class="po-inline e676 e676" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/XML/Query/#examples</textual></link></bibliomixed></bibliography></article></classedDocument>