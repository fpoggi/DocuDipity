<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.3"><title class="po-block e1 e1"><textual class="po-textual">An extensible API for documents with multiple annotation layers</textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">Balisage: The Markup Conference 2013</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 6 - 9, 2013</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual">Both XML namespaces and standoff annotation are promising approaches to tackle possibly
        overlapping multiple annotation layers in XML instances. The creation and processing of
        standoff instances can be cumbersome – especially when the underlying textual primary data
        is allowed to be modified after the annotation has been added. In this paper we present a
        powerful API that is capable of dealing with these tasks by providing an extension mechanism
        that allows for the easy creation of modules corresponding to a certain namespace (and
        therefore markup language). We use XStandoff as a working example since it is a standoff
        format that highly depends on XML namespaces for different annotation layers.</textual></para></abstract><author class="po-record e8 e8"><personname class="po-record e9 e9"><firstname class="po-field e10 e10"><textual class="po-textual">Nils</textual></firstname><surname class="po-field e11 e11"><textual class="po-textual">Diewald</textual></surname></personname><personblurb class="po-container e12 e12"><para class="po-block e13 e13"><textual class="po-textual">Nils Diewald received a B.A. in German philology and Text Technology and an M.A. in
          Linguistics (with a focus on Computational Linguistics) from Bielefeld University.
          Currently he is employed as a research assistant in the KorAP project at the IDS Mannheim
	  (Institute for the German Language) and is a Ph.D. candidate in Computer Science.
	  His Doctorate Studies focus on communication in social networks,
	  originating from his work as a research assistant in the
          Linguistic Networks project of the BMBF (Federal Ministry of Education and Research).
          Before that, he was a research and graduate assistant in the Sekimo project, part of the
          DFG Research Group on Text-Technological Modelling of Information.</textual></para></personblurb><affiliation class="po-record e14 e14"><orgname class="po-block e15 e15"><textual class="po-textual">Universität Bielefeld</textual></orgname></affiliation><affiliation class="po-record e16 e16"><orgname class="po-block e17 e17"><textual class="po-textual">Institut für Deutsche Sprache (IDS) Mannheim</textual></orgname></affiliation><email class="po-field e18 e18"><textual class="po-textual">nils.diewald@uni-bielefeld.de</textual></email></author><author class="po-record e19 e19"><personname class="po-record e20 e20"><firstname class="po-field e21 e21"><textual class="po-textual">Maik</textual></firstname><surname class="po-field e22 e22"><textual class="po-textual">Stührenberg</textual></surname></personname><personblurb class="po-container e23 e23"><para class="po-block e24 e24"><textual class="po-textual">Maik Stührenberg received his Ph.D. in Computational Linguistics and Text Technology
          from Bielefeld University in 2012. After graduating in 2001 he worked in different
          text-technological projects at Gießen University, Bielefeld University and the Institut
          für Deutsche Sprache (IDS, Institute for the German Language) in Mannheim. He is currently
          employed as research assistant at Bielefeld University.</textual></para><para class="po-block e25 e25"><textual class="po-textual">His main research interests include specifications for structuring multiple annotated
          data, schema languages, and query processing.</textual></para></personblurb><affiliation class="po-record e26 e26"><orgname class="po-block e27 e27"><textual class="po-textual">Universität Bielefeld</textual></orgname></affiliation><email class="po-field e28 e28"><textual class="po-textual">maik.stuehrenberg@uni-bielefeld.de</textual></email></author><legalnotice class="po-container e29 e29"><para class="po-block e30 e30"><textual class="po-textual">Copyright © 2013 by the authors. Used with permission.</textual></para></legalnotice></info><section class="po-hcontainer e31 e31" xml:id="sec_intro"><title class="po-block e32 e32"><textual class="po-textual">Multiple annotated documents</textual></title><para class="po-block e33 e33"><textual class="po-textual">Markup languages are often defined for structuring the information of a specific text
      type, such as web pages (HTML), technical articles or books (DocBook), or a set of information
      items, such as vector graphics (SVG) or protocol information (SOAP). Therefore, their
      structure is (in limits) determined by a document grammar that allows for specific elements
      and attributes. In addition, the different XML-based document grammar formalisms allow to a
      certain degree the combination of elements (and attributes) from different markup languages –
      usually by means of XML namespaces (</textual><xref class="po-milestone e34 e34" linkend="Bray2009"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">). In practice, one host
      language can include islands of foreign markup (guest languages). There are different examples
      for the combination of host and guest markup languages (apart from the already mentioned
      SOAP). A certain XHTML driver (</textual><xref class="po-milestone e35 e35" linkend="Ishikawa2002"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) allows for the combination of
      XHTML (as a host language), MathML and SVG (as guest languages), and the Atom Syndication
      Format (</textual><xref class="po-milestone e36 e36" linkend="Nottingham2005"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) can be used in conjunction with a wide range of
      extensions (e.g. for Threading, see </textual><xref class="po-milestone e37 e37" linkend="Snell2006"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, or Activity Streams, see
        </textual><xref class="po-milestone e38 e38" linkend="Atkins2011"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) while it is also meant to be embedded in parts in the RSS
      format (</textual><xref class="po-milestone e39 e39" linkend="Winer2009"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).</textual></para><para class="po-block e40 e40"><textual class="po-textual">Although XML namespaces support the combination of elements derived from different
      markup languages, they do not change XML's formal model that prohibits overlapping markup.
      However, standoff markup (instead of inline annotation) may be used to circumvent this
      problem. The meta markup language XStandoff (</textual><xref class="po-milestone e41 e41" linkend="Stuehrenberg2009"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) embeds
      (slightly transformed) islands of guest languages (with respective XML namespaces) in
      combination with a standardized standoff approach as key feature for the storage of multiple
      (and possibly overlapping) hierarchies.</textual></para><para class="po-block e42 e42"><textual class="po-textual">Typical problems when dealing with multiple and/or standoff annotations are related to the
      production and processing of instances. Although usually each markup language involved is
      defined by a document grammar on its own, it can often be cumbersome to validate an instance
      combining elements from a large variety of document grammars (although XStandoff is capable of
      validating these instances, adapted XML schema files have to be present for each guest
      language). This behaviour can be controlled by means of the document grammar formalism. For
      example, XML Schema allows different values of its </textual><code class="po-atom e43 e43"><textual class="po-textual">processContents</textual></code><textual class="po-textual"> attribute
      which may occur on the </textual><code class="po-atom e44 e44"><textual class="po-textual">any</textual></code><textual class="po-textual"> element. The value </textual><code class="po-atom e45 e45"><textual class="po-textual">lax</textual></code><textual class="po-textual"> provided in </textual><xref class="po-milestone e46 e46" linkend="lst.xsf.lax"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> (taken from XStandoff's </textual><code class="po-atom e47 e47"><textual class="po-textual">layer</textual></code><textual class="po-textual"> element) </textual><citation class="po-atom e48 e48" linkend="Fallside2004"><quote class="po-inline e49 e49"><textual class="po-textual">instructs an XML processor to validate the element content on
          a can-do basis: It will validate elements and attributes for which it can obtain schema
          information, but it will not signal errors for those it cannot obtain any schema
          information</textual></quote><textual class="po-textual">, Section 5.5, Any Element, Any Attribute</textual></citation><textual class="po-textual">.</textual></para><figure class="po-container e50 e50" xml:id="lst.xsf.lax"><title class="po-block e51 e51"><textual class="po-textual">Controlling validation of foreign namespace elements</textual></title><programlisting class="po-block e52 e52" xml:space="preserve"><textual class="po-textual">&lt;xs:element name="layer"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:sequence&gt;
      &lt;!-- [...] --&gt;
      &lt;xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded" processContents="lax"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</textual></programlisting></figure><para class="po-block e53 e53"><textual class="po-textual">In addition, the </textual><code class="po-atom e54 e54"><textual class="po-textual">namespace</textual></code><textual class="po-textual"> attribute may be used to control the allowed
      namespaces. While XSD 1.0 allows the values </textual><code class="po-atom e55 e55"><textual class="po-textual">##any</textual></code><textual class="po-textual">, </textual><code class="po-atom e56 e56"><textual class="po-textual">##other</textual></code><textual class="po-textual"> or a list
      of namespaces only (including the preserved values </textual><code class="po-atom e57 e57"><textual class="po-textual">##targetNamespace</textual></code><textual class="po-textual"> and
        </textual><code class="po-atom e58 e58"><textual class="po-textual">##local</textual></code><textual class="po-textual">, see </textual><xref class="po-milestone e59 e59" linkend="Thompson2004"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">), RELAX NG supports the exclusion
      of namespaces (by using the </textual><code class="po-atom e60 e60"><textual class="po-textual">except</textual></code><textual class="po-textual"> pattern in combination with
        </textual><code class="po-atom e61 e61"><textual class="po-textual">nsName</textual></code><textual class="po-textual">). XSD 1.1 (</textual><xref class="po-milestone e62 e62" linkend="Gao2012"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) introduced the
        </textual><code class="po-atom e63 e63"><textual class="po-textual">notNamespace</textual></code><textual class="po-textual"> and </textual><code class="po-atom e64 e64"><textual class="po-textual">notQName</textual></code><textual class="po-textual"> attributes.</textual></para><para class="po-block e65 e65"><textual class="po-textual">The production of multiple annotated documents is typically the result of the combination
      of formerly stand-alone documents (or their parts), such as the inclusion of externally
      created SVG graphics in an XHTML host document, or the outcome of a mostly automated process
      (see </textual><xref class="po-milestone e66 e66" linkend="Stuehrenberg2009"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> for a discussion on the production of XStandoff
      instances). What is still lacking is an API (Application Programming Interface)
      that is flexible enough to support the production
      and processing of multiple annotated instances, even if annotations are referring to the same
      primary data by means of standoff annotation. We will demonstrate such an API in the reminder
      of this article.</textual></para></section><section class="po-hcontainer e67 e67" xml:id="sec_loy"><title class="po-block e68 e68"><textual class="po-textual">Creating an extensible API</textual></title><para class="po-block e69 e69"><emphasis class="po-inline e70 e70"><textual class="po-textual">XML::Loy</textual></emphasis><textual class="po-textual"> (</textual><xref class="po-milestone e71 e71" linkend="Diewald2011"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) is a Perl library, that
      provides a simple programming interface for the creation of XML documents with multiple
      namespaces. It is based on </textual><emphasis class="po-inline e72 e72"><textual class="po-textual">Mojo::DOM</textual></emphasis><textual class="po-textual">, an HTML/XML DOM parser that is part
      of the </textual><emphasis class="po-inline e73 e73"><textual class="po-textual">Mojolicious</textual></emphasis><textual class="po-textual"> framework (</textual><xref class="po-milestone e74 e74" linkend="Riedel2008"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).
        </textual><emphasis class="po-inline e75 e75"><textual class="po-textual">Mojo::DOM</textual></emphasis><textual class="po-textual"> povides CSS selector based methods for DOM traversal (</textual><xref class="po-milestone e76 e76" linkend="vanKesteren2013"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">), similar to Javascript's </textual><code class="po-atom e77 e77"><textual class="po-textual">querySelector()</textual></code><textual class="po-textual"> and
        </textual><code class="po-atom e78 e78"><textual class="po-textual">querySelectorAll()</textual></code><textual class="po-textual"> methods.</textual></para><para class="po-block e79 e79"><textual class="po-textual">The basic methods for the manipulation of the XML Document Object Model provided by
        </textual><emphasis class="po-inline e80 e80"><textual class="po-textual">XML::Loy</textual></emphasis><textual class="po-textual"> are </textual><code class="po-atom e81 e81"><textual class="po-textual">add()</textual></code><textual class="po-textual"> and </textual><code class="po-atom e82 e82"><textual class="po-textual">set()</textual></code><textual class="po-textual">. By applying
      these methods new nodes can be introduced as children to every node in the document. While
        </textual><code class="po-atom e83 e83"><textual class="po-textual">add()</textual></code><textual class="po-textual"> always appends additional nodes to the document, </textual><code class="po-atom e84 e84"><textual class="po-textual">set()</textual></code><textual class="po-textual"> only
      appends nodes in case no child of the given type exists. Both methods are invoked by a chosen
      node in the document tree (acting as the parent node of the newly introduced node). They
      accept the element name as a string parameter, followed by an optional hash reference
      containing attributes and a string containing optional textual content of the element. A final
      string can be used to put a comment in front of the element.</textual></para><figure class="po-container e85 e85" xml:id="lst.loy"><title class="po-block e86 e86"><textual class="po-textual">Using </textual><emphasis class="po-inline e87 e87"><textual class="po-textual">XML::Loy</textual></emphasis><textual class="po-textual"> to create a document</textual></title><programlisting class="po-block e88 e88" xml:space="preserve"><textual class="po-textual">use XML::Loy;

my $doc = XML::Loy-&gt;new('document');
$doc-&gt;set(title =&gt; 'My Title');
$doc-&gt;set(title =&gt; 'My New Title');
$doc-&gt;add(paragraph =&gt; { id =&gt; 'p-1' } =&gt; 'First Paragraph');
$doc-&gt;add(paragraph =&gt; { id =&gt; 'p-2' } =&gt; 'Second Paragraph');

print $doc-&gt;to_pretty_xml;</textual></programlisting></figure><para class="po-block e89 e89"><textual class="po-textual">In the example presented in </textual><xref class="po-milestone e90 e90" linkend="lst.loy"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> a new </textual><emphasis class="po-inline e91 e91"><textual class="po-textual">XML::Loy</textual></emphasis><textual class="po-textual">
      document instance is created with a root element </textual><code class="po-atom e92 e92"><textual class="po-textual">document</textual></code><textual class="po-textual">. Applying the
        </textual><code class="po-atom e93 e93"><textual class="po-textual">set()</textual></code><textual class="po-textual"> method, a new </textual><code class="po-atom e94 e94"><textual class="po-textual">title</textual></code><textual class="po-textual"> element is introduced as a child of the
      root element. The second call of </textual><code class="po-atom e95 e95"><textual class="po-textual">set()</textual></code><textual class="po-textual"> overwrites the content of the
        </textual><code class="po-atom e96 e96"><textual class="po-textual">title</textual></code><textual class="po-textual"> element. By using the </textual><code class="po-atom e97 e97"><textual class="po-textual">add()</textual></code><textual class="po-textual"> method we insert multiple
        </textual><code class="po-atom e98 e98"><textual class="po-textual">paragraph</textual></code><textual class="po-textual"> elements without overwriting existing ones. These elements are
      defined with both an </textual><code class="po-atom e99 e99"><textual class="po-textual">id</textual></code><textual class="po-textual"> attribute and textual content.
      By applying the </textual><code class="po-atom e100 e100"><textual class="po-textual">to_pretty_xml()</textual></code><textual class="po-textual"> method, the result can be printed as XML.</textual></para><programlisting class="po-block e101 e101" xml:space="preserve"><textual class="po-textual">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;document&gt;
  &lt;title&gt;My New Title&lt;/title&gt;
  &lt;paragraph id="p-1"&gt;First Paragraph&lt;/paragraph&gt;
  &lt;paragraph id="p-2"&gt;Second Paragraph&lt;/paragraph&gt;
&lt;/document&gt;</textual></programlisting><para class="po-block e102 e102"><textual class="po-textual">The strength of this simple approach for document manipulation is the ability to pass
      these methods to new extension modules that can represent APIs for specific XML namespaces, as
      both host and guest languages. The example given in </textual><xref class="po-milestone e103 e103" linkend="lst.xml.loy.morpheme"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> is
      meant to illustrate these capabilities by creating a simple </textual><emphasis class="po-inline e104 e104"><textual class="po-textual">XML::Loy</textual></emphasis><textual class="po-textual"> extension
      for morpheme annotations.</textual></para><figure class="po-container e105 e105" xml:id="lst.xml.loy.morpheme"><title class="po-block e106 e106"><textual class="po-textual">Creating </textual><emphasis class="po-inline e107 e107"><textual class="po-textual">XML::Loy</textual></emphasis><textual class="po-textual"> extensions</textual></title><programlisting class="po-block e108 e108" xml:space="preserve"><textual class="po-textual">package XML::Loy::Example::Morphemes;
use XML::Loy with =&gt; (
  namespace =&gt; 'http://www.xstandoff.net/morphemes',
  prefix =&gt; 'morph'
);

# Add morphemes root
sub morphemes {
  my $self = shift;
  return $self-&gt;add(morphemes =&gt; @_);
};

# Add morphemes
sub morpheme {
  my $self = shift;
  return unless $self-&gt;type =~ /^(?:morph:)?morphemes$/;
  return $self-&gt;add(morpheme =&gt; @_);
};</textual></programlisting></figure><para class="po-block e109 e109"><textual class="po-textual">The class inherits all XML creation methods from </textual><emphasis class="po-inline e110 e110"><textual class="po-textual">XML::Loy</textual></emphasis><textual class="po-textual"> and thus
      all XML traversal methods from </textual><emphasis class="po-inline e111 e111"><textual class="po-textual">Mojo::DOM</textual></emphasis><textual class="po-textual">. When defining the base class,
      an optional namespace </textual><code class="po-atom e112 e112"><textual class="po-textual">http://www.xstandoff.net/morphemes</textual></code><textual class="po-textual"> is bound to the
        </textual><code class="po-atom e113 e113"><textual class="po-textual">morph</textual></code><textual class="po-textual"> prefix, which means, all invocations of </textual><code class="po-atom e114 e114"><textual class="po-textual">set()</textual></code><textual class="po-textual"> and
        </textual><code class="po-atom e115 e115"><textual class="po-textual">add()</textual></code><textual class="po-textual"> from this class will be bound to the </textual><code class="po-atom e116 e116"><textual class="po-textual">morph</textual></code><textual class="po-textual"> namespace. The
      newly created </textual><code class="po-atom e117 e117"><textual class="po-textual">morphemes()</textual></code><textual class="po-textual"> method appends a </textual><code class="po-atom e118 e118"><textual class="po-textual">morphemes</textual></code><textual class="po-textual"> element bound
      to the given namespace as a child of the invoking node.</textual></para><para class="po-block e119 e119"><textual class="po-textual">To implement simple grammar rules to the API the methods can check the invoking context, for
      example by constraining the introduction of </textual><code class="po-atom e120 e120"><textual class="po-textual">morpheme</textual></code><textual class="po-textual"> elements to
        </textual><code class="po-atom e121 e121"><textual class="po-textual">morphemes</textual></code><textual class="po-textual"> parent nodes only (see the regular expression check
        </textual><code class="po-atom e122 e122"><textual class="po-textual">/^(?:morph:)?morphemes$/</textual></code><textual class="po-textual">).</textual></para><para class="po-block e123 e123"><textual class="po-textual">This newly created API for the </textual><code class="po-atom e124 e124"><textual class="po-textual">http://www.xstandoff.net/morphemes</textual></code><textual class="po-textual"> namespace
      can now be used to create new document instances (see </textual><xref class="po-milestone e125 e125" linkend="lst.xml.loy.example"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">
      and the output shown in </textual><xref class="po-milestone e126 e126" linkend="lst.xml.loy.example.instance"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).</textual></para><figure class="po-container e127 e127" xml:id="lst.xml.loy.example"><title class="po-block e128 e128"><textual class="po-textual">Creating a document by using </textual><emphasis class="po-inline e129 e129"><textual class="po-textual">XML::Loy::Example::Morphemes</textual></emphasis></title><programlisting class="po-block e130 e130" xml:space="preserve"><textual class="po-textual">use XML::Loy::Example::Morphemes;

my $doc = XML::Loy::Example::Morphemes-&gt;new('document');

my $m = $doc-&gt;morphemes;

$m-&gt;morpheme('The');
$m-&gt;morpheme('sun');
$m-&gt;morpheme('shine');
$m-&gt;morpheme('s');
$m-&gt;morpheme('bright');
$m-&gt;morpheme('er');

print $doc-&gt;to_pretty_xml;</textual></programlisting></figure><figure class="po-container e131 e131" xml:id="lst.xml.loy.example.instance"><title class="po-block e132 e132"><textual class="po-textual">The output instance created with
        </textual><emphasis class="po-inline e133 e133"><textual class="po-textual">XML::Loy::Example::Morphemes</textual></emphasis></title><programlisting class="po-block e134 e134" xml:space="preserve"><textual class="po-textual">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;document xmlns="http://www.xstandoff.net/morphemes"&gt;
  &lt;morphemes&gt;
    &lt;morpheme&gt;The&lt;/morpheme&gt;
    &lt;morpheme&gt;sun&lt;/morpheme&gt;
    &lt;morpheme&gt;shine&lt;/morpheme&gt;
    &lt;morpheme&gt;s&lt;/morpheme&gt;
    &lt;morpheme&gt;bright&lt;/morpheme&gt;
    &lt;morpheme&gt;er&lt;/morpheme&gt;
  &lt;/morphemes&gt;
&lt;/document&gt;</textual></programlisting></figure><para class="po-block e135 e135"><textual class="po-textual">By using the generic methods </textual><code class="po-atom e136 e136"><textual class="po-textual">add()</textual></code><textual class="po-textual"> and </textual><code class="po-atom e137 e137"><textual class="po-textual">set()</textual></code><textual class="po-textual"> provided by
        </textual><emphasis class="po-inline e138 e138"><textual class="po-textual">XML::Loy</textual></emphasis><textual class="po-textual">, the class can easily be used for extending an existing
        </textual><emphasis class="po-inline e139 e139"><textual class="po-textual">XML::Loy</textual></emphasis><textual class="po-textual"> based class (i.e. as a guest language inside another host
      language). In the example shown in </textual><xref class="po-milestone e140 e140" linkend="lst.xml.loy.ext2"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> a simplified HTML
      instance is read and instantiated. Elements from the
        </textual><code class="po-atom e141 e141"><textual class="po-textual">http://www.xstandoff.net/morphemes</textual></code><textual class="po-textual"> namespace are appended using the API
      described above (the output is shown in </textual><xref class="po-milestone e142 e142" linkend="lst.xml.loy.ext2.in"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).</textual></para><figure class="po-container e143 e143" xml:id="lst.xml.loy.ext2"><title class="po-block e144 e144"><textual class="po-textual">Using extensions with </textual><emphasis class="po-inline e145 e145"><textual class="po-textual">XML::Loy</textual></emphasis></title><programlisting class="po-block e146 e146" xml:space="preserve"><textual class="po-textual">use XML::Loy;

my $doc = XML::Loy-&gt;new(&lt;&lt;'XML');
&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;html&gt;
  &lt;head&gt;&lt;title&gt;The sun&lt;/title&gt;&lt;/head&gt;
  &lt;body /&gt;
&lt;/html&gt;
XML

$doc-&gt;extension(-Example::Morphemes);
my $p = $doc-&gt;at('body')-&gt;add('p' =&gt; 'The sun shines');
my $m = $p-&gt;morphemes;
$m-&gt;morpheme('bright');
$m-&gt;morpheme('er');

print $doc-&gt;to_pretty_xml;</textual></programlisting></figure><figure class="po-container e147 e147" xml:id="lst.xml.loy.ext2.in"><title class="po-block e148 e148"><textual class="po-textual">The output instance created with </textual><emphasis class="po-inline e149 e149"><textual class="po-textual">XML::Loy</textual></emphasis><textual class="po-textual"> and the
        </textual><emphasis class="po-inline e150 e150"><textual class="po-textual">XML::Loy::Example::Morphemes</textual></emphasis><textual class="po-textual"> extension</textual></title><programlisting class="po-block e151 e151" xml:space="preserve"><textual class="po-textual">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;html xmlns:morph="http://www.xstandoff.net/morphemes"&gt;
  &lt;head&gt;
    &lt;title&gt;The sun&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;p&gt;The sun shines
      &lt;morph:morphemes&gt;
        &lt;morph:morpheme&gt;bright&lt;/morph:morpheme&gt;
        &lt;morph:morpheme&gt;er&lt;/morph:morpheme&gt;
      &lt;/morph:morphemes&gt;
    &lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;</textual></programlisting></figure><para class="po-block e152 e152"><textual class="po-textual">By extending the </textual><emphasis class="po-inline e153 e153"><textual class="po-textual">XML::Loy</textual></emphasis><textual class="po-textual"> base object with the newly created class using
      the </textual><code class="po-atom e154 e154"><textual class="po-textual">extension()</textual></code><footnote class="po-popup e155 e155"><para class="po-block e156 e156"><textual class="po-textual">The leading minus symbol is a shortcut for the </textual><code class="po-atom e157 e157"><textual class="po-textual">XML::Loy</textual></code><textual class="po-textual"> module namespace,
          meaning, that the qualified name is
            </textual><emphasis class="po-inline e158 e158"><textual class="po-textual">XML::Loy::Example::Morphemes</textual></emphasis><textual class="po-textual">. More than one extension can be passed
          at once.</textual></para></footnote><textual class="po-textual"> method, all method calls from the extension class are available for namespace aware
      traversal and manipulation. In general, using such an extensible API provides at least some
      functionality usually made available by document grammars (the nesting of elements for
      example) and adds methods to create and manipulate the respective class of instances.</textual></para></section><section class="po-hcontainer e159 e159" xml:id="sec_xsf"><title class="po-block e160 e160"><textual class="po-textual">XStandoff as an example application</textual></title><para class="po-block e161 e161"><textual class="po-textual">XStandoff's predecessor SGF (Sekimo Generic Format) was developed in 2008 (see </textual><xref class="po-milestone e162 e162" linkend="Stuehrenberg2008"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) as a meta format for storing and analyzing multiple annotated
      instances as part of a linguistic corpus. In 2009 the format was generalized and enhanced.
      Since then, XStandoff combines standoff notation with the formal model of General
      Ordered-Descendant Directed Acyclic Graphs (GODDAG, introduced in </textual><xref class="po-milestone e163 e163" linkend="Sperberg-McQueen2004"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">; see </textual><xref class="po-milestone e164 e164" linkend="Sperberg-McQueen2008a"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> for a more
      recent discussion). The format as such is capable of representing multiple hierarchies and
      specifically challenging structures such as overlaps, discontinuous elements and virtual
      elements. The basic structure of an XStandoff instance consists of the root element
        </textual><code class="po-atom e165 e165"><textual class="po-textual">corpusData</textual></code><textual class="po-textual"> underneath which the child elements </textual><code class="po-atom e166 e166"><textual class="po-textual">meta</textual></code><textual class="po-textual"> (optional),
        </textual><code class="po-atom e167 e167"><textual class="po-textual">resources</textual></code><textual class="po-textual"> (optional), </textual><code class="po-atom e168 e168"><textual class="po-textual">primaryData</textual></code><textual class="po-textual"> (optional in the proposed
      release 2.0, see </textual><xref class="po-milestone e169 e169" linkend="Stuehrenberg2013"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">), </textual><code class="po-atom e170 e170"><textual class="po-textual">segmentation</textual></code><textual class="po-textual"> and
        </textual><code class="po-atom e171 e171"><textual class="po-textual">annotation</textual></code><textual class="po-textual"> are subsumed. </textual><xref class="po-milestone e172 e172" linkend="listing_xsf"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> shows an example
      XStandoff document.</textual><footnote class="po-popup e173 e173"><para class="po-block e174 e174"><textual class="po-textual">More examples can be found at </textual><link class="po-inline e175 e175" xlink:actuate="onRequest" xlink:href="http://www.xstandoff.net/examples" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.xstandoff.net/examples</textual></link><textual class="po-textual">.</textual></para></footnote></para><figure class="po-container e176 e176" xml:id="listing_xsf"><title class="po-block e177 e177"><textual class="po-textual">XStandoff instance</textual></title><programlisting class="po-block e178 e178" xml:space="preserve"><textual class="po-textual">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsf:corpusData xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://www.xstandoff.net/2009/xstandoff/1.1 xsf2_1.1.xsd"
   xmlns="http://www.xstandoff.net/2009/xstandoff/1.1"
   xmlns:xsf="http://www.xstandoff.net/2009/xstandoff/1.1" xml:id="c1" xsfVersion="2.0"&gt;
   &lt;xsf:primaryData start="0" end="24" xml:lang="en" xml:space="preserve" unit="chars"&gt;
      &lt;textualContent&gt;The sun shines brighter.&lt;/textualContent&gt;
   &lt;/xsf:primaryData&gt;
   &lt;xsf:segmentation&gt;
      &lt;xsf:segment xml:id="seg1" type="char" start="0" end="24"/&gt;
      &lt;xsf:segment xml:id="seg2" type="char" start="0" end="3"/&gt;
      &lt;xsf:segment xml:id="seg3" type="char" start="4" end="7"/&gt;
      &lt;xsf:segment xml:id="seg4" type="char" start="8" end="14"/&gt;
      &lt;xsf:segment xml:id="seg5" type="char" start="8" end="13"/&gt;
      &lt;xsf:segment xml:id="seg6" type="char" start="13" end="14"/&gt;
      &lt;xsf:segment xml:id="seg7" type="char" start="15" end="21"/&gt;
      &lt;xsf:segment xml:id="seg8" type="char" start="15" end="20"/&gt;
      &lt;xsf:segment xml:id="seg9" type="char" start="20" end="23"/&gt;
      &lt;xsf:segment xml:id="seg10" type="char" start="21" end="23"/&gt;
   &lt;/xsf:segmentation&gt;
   &lt;xsf:annotation&gt;
      &lt;xsf:level xml:id="l_morph"&gt;
         &lt;xsf:layer xmlns:morph="http://www.xstandoff.net/morphemes"
            xsi:schemaLocation="http://www.xstandoff.net/morphemes morphemes.xsd"&gt;
            &lt;morph:morphemes xsf:segment="seg1"&gt;
               &lt;morph:morpheme xsf:segment="seg2"/&gt;
               &lt;morph:morpheme xsf:segment="seg3"/&gt;
               &lt;morph:morpheme xsf:segment="seg5"/&gt;
               &lt;morph:morpheme xsf:segment="seg6"/&gt;
               &lt;morph:morpheme xsf:segment="seg7"/&gt;
               &lt;morph:morpheme xsf:segment="seg10"/&gt;
            &lt;/morph:morphemes&gt;
         &lt;/xsf:layer&gt;
      &lt;/xsf:level&gt;
      &lt;xsf:level xml:id="l_syll"&gt;
         &lt;xsf:layer xmlns:syll="http://www.xstandoff.net/syllables"
            xsi:schemaLocation="http://www.xstandoff.net/syllables syllables.xsd"&gt;
            &lt;syll:syllables xsf:segment="seg1"&gt;
               &lt;syll:syllable xsf:segment="seg2"/&gt;
               &lt;syll:syllable xsf:segment="seg3"/&gt;
               &lt;syll:syllable xsf:segment="seg4"/&gt;
               &lt;syll:syllable xsf:segment="seg8"/&gt;
               &lt;syll:syllable xsf:segment="seg9"/&gt;
            &lt;/syll:syllables&gt;
         &lt;/xsf:layer&gt;
      &lt;/xsf:level&gt;
   &lt;/xsf:annotation&gt;
&lt;/xsf:corpusData&gt;
</textual></programlisting></figure><para class="po-block e179 e179"><textual class="po-textual">In this example, the sentence </textual><quote class="po-inline e180 e180"><textual class="po-textual">The sun shines brighter.</textual></quote><textual class="po-textual"> is annotated with
      two linguistic levels (and respective layers): morphemes and syllables. We cannot combine both
      annotation layers in an inline annotation, since there is an overlap between the two syllables
        </textual><quote class="po-inline e181 e181"><textual class="po-textual">brigh</textual></quote><textual class="po-textual"> and </textual><quote class="po-inline e182 e182"><textual class="po-textual">ter</textual></quote><textual class="po-textual"> and the two morphemes </textual><quote class="po-inline e183 e183"><textual class="po-textual">bright</textual></quote><textual class="po-textual"> and
        </textual><quote class="po-inline e184 e184"><textual class="po-textual">er</textual></quote><textual class="po-textual"> (see </textual><xref class="po-milestone e185 e185" linkend="fig.overlap"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> for a visualization of the
      overlap).</textual></para><figure class="po-container e186 e186" xml:id="fig.overlap"><title class="po-block e187 e187"><textual class="po-textual">Graphical representation of overlapping hierarchies</textual></title><mediaobject class="po-container e188 e188"><imageobject class="po-container e189 e189"><imagedata class="po-meta e190 e190" fileref="../../../vol10/graphics/Diewald01/Diewald01-001.png" format="png" width="600"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e191 e191"><textual class="po-textual">Each annotation is encapsulated underneath a </textual><code class="po-atom e192 e192"><textual class="po-textual">layer</textual></code><textual class="po-textual"> element (which in turn is
      a child element of a </textual><code class="po-atom e193 e193"><textual class="po-textual">level</textual></code><textual class="po-textual"> element, since it is possible to have more than one
      serialization, that is, layer, for a conceptual level).</textual><footnote class="po-popup e194 e194"><para class="po-block e195 e195"><textual class="po-textual">Think of different POS taggers for example.</textual></para></footnote><textual class="po-textual"> The </textual><code class="po-atom e196 e196"><textual class="po-textual">xsf:segment</textual></code><textual class="po-textual"> attribute is used to link the annotation with the
      respective part of the primary data. Similar to other standoff approaches, XStandoff uses
      character positions for defining segments over textual primary data. Changes of the input text
      result in an out-of-sync situation between primary data and annotation. Processing XStandoff
      instances requires dealing with at least </textual><emphasis class="po-inline e197 e197"><textual class="po-textual">n+1</textual></emphasis><textual class="po-textual"> XML namespaces: one for
      XStandoff itself and one for each of the </textual><emphasis class="po-inline e198 e198"><textual class="po-textual">n</textual></emphasis><textual class="po-textual"> annotation layers.</textual></para><para class="po-block e199 e199"><textual class="po-textual">Up to now, these instances are created by transforming inline annotations via a set of
      XSLT 2.0 stylesheets (see </textual><xref class="po-milestone e200 e200" linkend="Stuehrenberg2009"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> for a detailed discussion). We
      will outline an example API for XStandoff based on </textual><emphasis class="po-inline e201 e201"><textual class="po-textual">XML::Loy</textual></emphasis><textual class="po-textual"> that makes it
      easy to deal with the dynamic creation of multi-layered annotations in the following section</textual><footnote class="po-popup e202 e202"><para class="po-block e203 e203"><textual class="po-textual">The software presented in this section is freely available under the GPL or the
          Artistic License at </textual><link class="po-inline e204 e204" xlink:actuate="onRequest" xlink:href="http://github.com/Akron/XML-Loy-XStandoff" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://github.com/Akron/XML-Loy-XStandoff</textual></link><textual class="po-textual">.</textual></para></footnote><textual class="po-textual">.</textual></para></section><section class="po-hcontainer e205 e205"><title class="po-block e206 e206"><textual class="po-textual">Creating and processing XStandoff instances using XML::Loy</textual></title><para class="po-block e207 e207"><textual class="po-textual">As presented in the previous section, XStandoff associates annotations to primary data by
      defining segment spans</textual><footnote class="po-popup e208 e208"><para class="po-block e209 e209"><textual class="po-textual">In the following example we will limit our view on segments defined by character
          positions. See </textual><xref class="po-milestone e210 e210" linkend="Stuehrenberg2013"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> for examples for other segmentation
          methods supported by XStandoff.</textual></para></footnote><textual class="po-textual"> to which the annotations are linked to via XML ID/IDREF integrity features. There
      are multiple ways to cope with standoff annotation: Compared to the XStandoff-Toolkit
      discussed in </textual><xref class="po-milestone e211 e211" linkend="Stuehrenberg2009"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, our API will provide an additional
      way to access and manipulate both annotations and primary data directly.</textual></para><figure class="po-container e212 e212" xml:id="lst.xml.loy.xsf"><title class="po-block e213 e213"><textual class="po-textual">Creating XStandoff instances with </textual><emphasis class="po-inline e214 e214"><textual class="po-textual">XML::Loy::XStandoff</textual></emphasis></title><programlisting class="po-block e215 e215" xml:space="preserve"><textual class="po-textual">use XML::Loy::XStandoff;

# Create new corpusData
my $cd = XML::Loy::XStandoff-&gt;new('corpusData');

# Set textual content embedded
$cd-&gt;textual_content('The sun shines brighter.');

# Create segmentation
my $seg = $cd-&gt;segmentation;

# Create segments manually
my $seg1 = $seg-&gt;segment(0,24);
my $seg2 = $seg-&gt;segment(0, 3);
my $seg3 = $seg-&gt;segment(4, 7);
my $seg4 = $seg-&gt;segment(8, 13);
my $seg5 = $seg-&gt;segment(13, 14);
my $seg6 = $seg-&gt;segment(15, 21);
my $seg7 = $seg-&gt;segment(21, 23);

print $cd-&gt;to_pretty_xml;</textual></programlisting></figure><para class="po-block e216 e216"><textual class="po-textual">In </textual><xref class="po-milestone e217 e217" linkend="lst.xml.loy.xsf"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> a new </textual><code class="po-atom e218 e218"><textual class="po-textual">corpusData</textual></code><textual class="po-textual"> element is created.
    Next, a </textual><code class="po-atom e219 e219"><textual class="po-textual">textualContent</textual></code><textual class="po-textual"> element is added
    (below an automatically introduced </textual><code class="po-atom e220 e220"><textual class="po-textual">primaryData</textual></code><textual class="po-textual"> element with a unique </textual><code class="po-atom e221 e221"><textual class="po-textual">xml:id</textual></code><textual class="po-textual">).
    Seven manually defined
    </textual><code class="po-atom e222 e222"><textual class="po-textual">segment</textual></code><textual class="po-textual"> elements are appended for selecting spans over the textual primary data
      aligned to the words and the sentence as a whole. </textual><xref class="po-milestone e223 e223" linkend="lst.xml.loy.xsf.in"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> shows
    the output.</textual></para><figure class="po-container e224 e224" xml:id="lst.xml.loy.xsf.in"><title class="po-block e225 e225"><textual class="po-textual">The XStandoff instance created with </textual><emphasis class="po-inline e226 e226"><textual class="po-textual">XML::Loy::XStandoff</textual></emphasis></title><programlisting class="po-block e227 e227" xml:space="preserve"><textual class="po-textual">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;corpusData xmlns="http://www.xstandoff.net/2009/xstandoff/1.1"
            xmlns:xsf="http://www.xstandoff.net/2009/xstandoff/1.1"&gt;
  &lt;primaryData start="0" end="24" xml:id="pd-2531FE9A-..."&gt;
    &lt;textualContent&gt;The sun shines brighter.&lt;/textualContent&gt;
  &lt;/primaryData&gt;
  &lt;segmentation&gt;
    &lt;segment start="0" end="24" type="char" xml:id="seg-2532C88E-..." /&gt;
    &lt;segment start="0" end="3" type="char" xml:id="seg-25330ACE-..." /&gt;
    &lt;segment start="4" end="7" type="char" xml:id="seg-25334E9E-..." /&gt;
    &lt;segment start="8" end="13" type="char" xml:id="seg-2533949E-..." /&gt;
    &lt;segment start="13" end="14" type="char" xml:id="seg-2533DFE4-..." /&gt;
    &lt;segment start="15" end="21" type="char" xml:id="seg-25343052-..." /&gt;
    &lt;segment start="21" end="23" type="char" xml:id="seg-25348368-..." /&gt;
  &lt;/segmentation&gt;
&lt;/corpusData&gt;</textual></programlisting></figure><para class="po-block e228 e228"><textual class="po-textual">The document creation is simple, as most elements such as </textual><code class="po-atom e229 e229"><textual class="po-textual">corpusData</textual></code><textual class="po-textual">,
        </textual><code class="po-atom e230 e230"><textual class="po-textual">textualContent</textual></code><textual class="po-textual"> and </textual><code class="po-atom e231 e231"><textual class="po-textual">segment</textual></code><textual class="po-textual"> have corresponding API methods for
      finding, appending, updating and removing elements of the document. Segments are appended by
      defining their scope.</textual></para><para class="po-block e232 e232"><textual class="po-textual">The manipulation of the primary data is possible by applying the
        </textual><code class="po-atom e233 e233"><textual class="po-textual">segment_content()</textual></code><textual class="po-textual"> method, that associates primary data with segment spans (see
        </textual><xref class="po-milestone e234 e234" linkend="lst.xml.loy.xsf.sc"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).</textual></para><figure class="po-container e235 e235" xml:id="lst.xml.loy.xsf.sc"><title class="po-block e236 e236"><textual class="po-textual">Using the </textual><emphasis class="po-inline e237 e237"><textual class="po-textual">XML::Loy::XStandoff</textual></emphasis><textual class="po-textual"> API</textual></title><programlisting class="po-block e238 e238" xml:space="preserve"><textual class="po-textual"># Get segment content
say $seg-&gt;segment($seg3)-&gt;segment_content;
# 'sun'

# Replace segment content
$seg-&gt;segment($seg3)-&gt;segment_content('moon');

# Interactively replace segment content
$seg-&gt;segment($seg7)-&gt;segment_content(sub {
  my $t = shift;
  # Remove a sequence of 'er' from the string
  $t =~ s/er//;
  return $t;
});

# Show updated textual content
say $cd-&gt;textual_content;
# The moon shines bright.

# Segment positions are updated automatically
for ($seg-&gt;segment($seg6)) {
  say $_-&gt;attrs('start'); # 16
  say $_-&gt;attrs('end');   # 22
};</textual></programlisting></figure><para class="po-block e239 e239"><textual class="po-textual">The textual content virtually delimited by a segment can be retrieved, replaced and
    manipulated, while all other segments stay intact and update their according start and end
    position values by calculating the new offsets in case they change.
    This addresses one of the key problems
    with standoff annotation: Usually, if one alters the primary data without updating the
    corresponding segments, association of annotations and corresponding primary data will break.
    Due to the dynamic access of primary data information provided by this API,
    work with standoff annotations can
    be nearly as flexible as with inline annotations, without the limitations these annotation
    formats have, for example to represent overlapping (see </textual><xref class="po-milestone e240 e240" linkend="fig.overlap"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).</textual></para><para class="po-block e241 e241"><textual class="po-textual">The morpheme extension created in </textual><xref class="po-milestone e242 e242" linkend="sec_loy"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> can be simply adopted
    to represent an annotation layer with overlapping segment spans with an annotation of
    syllables (see </textual><xref class="po-milestone e243 e243" linkend="lst.xml.loy.xsf.ext"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).</textual></para><figure class="po-container e244 e244" xml:id="lst.xml.loy.xsf.ext"><title class="po-block e245 e245"><textual class="po-textual">Extending </textual><emphasis class="po-inline e246 e246"><textual class="po-textual">XML::Loy::XStandoff</textual></emphasis></title><programlisting class="po-block e247 e247" xml:space="preserve"><textual class="po-textual">use XML::Loy::XStandoff;

# Create new corpusData
my $cd = XML::Loy::XStandoff-&gt;new('corpusData');

# Load extensions for Morphemes and Syllables
$cd-&gt;extension(-Example::Morphemes, -Example::Syllables);

# Set textual content embedded
$cd-&gt;textual_content('The sun shines brighter.');

# Start segmentation
my $seg = $cd-&gt;segmentation;
my $all = $seg-&gt;segment(0, 24);

# Create new annotation layer for morphemes
my $m = $cd-&gt;layer-&gt;morphemes;

# Create and associate all necessary segments for all morphemes
$m-&gt;seg($all);
foreach ([0,3], [4,7], [8,13], [13,14], [15,21], [21,23]) {
  $m-&gt;morpheme-&gt;seg($seg-&gt;segment($_-&gt;[0], $_-&gt;[1]));
};

# Create new annotation layer for syllables
my $s = $cd-&gt;layer-&gt;syllables;

# Create and associate all necessary segments for all syllables
# independently, so overlaps are supported
$s-&gt;seg($all);
foreach ([0,3], [4,7], [8,14], [15,20], [20,23]) {
  $s-&gt;syllable-&gt;seg($seg-&gt;segment($_-&gt;[0], $_-&gt;[1]));
};

# Change the primary data of the second morpheme 'sun' to 'moon'
$cd-&gt;find('morpheme')-&gt;[1]-&gt;segment_content('moon');</textual></programlisting></figure><para class="po-block e248 e248"><textual class="po-textual">The resulting document is similar to listing </textual><xref class="po-milestone e249 e249" linkend="listing_xsf"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> but with a modified
    primary data of </textual><quote class="po-inline e250 e250"><textual class="po-textual">The moon shines brighter.</textual></quote><textual class="po-textual"> and updated segment spans.</textual></para><para class="po-block e251 e251"><textual class="po-textual">Another problem with some standoff formats is the association with decoupled primary data
      content. In XStandoff the primary data can be included in the XSF instance (as seen in the
      previous examples) or stored in a separate file and referenced via the
        </textual><code class="po-atom e252 e252"><textual class="po-textual">primaryDataRef</textual></code><textual class="po-textual"> element (in case of larger textual primary data, multimedia-based or
      multiple primary data files). If this file is on a local storage, the API will take care
      of updating the external textual content as well. Trying to modify files that are not
      modifiable (e.g. accessible online only) will result in a
      warning.</textual></para><para class="po-block e253 e253"><textual class="po-textual">Since metadata in XStandoff can be either included inline or referenced in the same way, the handling of
      metadata in our API can be treated alike, with a slight difference
      if the metadata itself is a well-formed XML document. The example given in </textual><xref class="po-milestone e254 e254" linkend="lst.meta.dc"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> assumes a simple metadata document in RDF with a Dublin Core
      namespace at the location </textual><code class="po-atom e255 e255"><textual class="po-textual">files/meta.xml</textual></code><textual class="po-textual"> in the local file system (shown in </textual><xref class="po-milestone e256 e256" linkend="lst.meta.dc.file"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).</textual></para><figure class="po-container e257 e257" xml:id="lst.meta.dc.file"><title class="po-block e258 e258"><textual class="po-textual">RDF metadata instance</textual></title><programlisting class="po-block e259 e259" xml:space="preserve"><textual class="po-textual">&lt;?xml version="1.0"?&gt;
&lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
         xmlns:dc="http://purl.org/dc/elements/1.1/"&gt;  
  &lt;rdf:Description&gt;
    &lt;dc:creator&gt;Nils Diewald&lt;/dc:creator&gt;
    &lt;dc:creator&gt;Maik Stührenberg&lt;/dc:creator&gt;
    &lt;dc:title&gt;An extensible API for documents with multiple annotation layers&lt;/dc:title&gt;
    &lt;dc:language&gt;EN&lt;/dc:language&gt;
  &lt;/rdf:Description&gt;
&lt;/rdf:RDF&gt;</textual></programlisting></figure><figure class="po-container e260 e260" xml:id="lst.meta.dc"><title class="po-block e261 e261"><textual class="po-textual">Accessing external metadata</textual></title><programlisting class="po-block e262 e262" xml:space="preserve"><textual class="po-textual"># Define the metadata as an external file
$cd-&gt;meta(uri =&gt; 'files/meta.xml');

# Retrieve the metadata, resulting in a new XML::Loy object
my $meta = $cd-&gt;meta(as =&gt; [-Loy, -DublinCore]);

# The extension is available in the newly defined object
print $meta-&gt;at('Description')-&gt;dc('title');
# 'An extensible API for documents with multiple annotation layers'</textual></programlisting></figure><para class="po-block e263 e263"><textual class="po-textual">The API enables the reference to the external document and supports the access by defining
    a new </textual><emphasis class="po-inline e264 e264"><textual class="po-textual">XML::Loy</textual></emphasis><textual class="po-textual"> object with an extension for dealing with Dublin Core data.</textual><footnote class="po-popup e265 e265"><para class="po-block e266 e266"><textual class="po-textual">This extension is not described in this article.</textual></para></footnote><textual class="po-textual"> As a result, the Dublin Core annotated </textual><code class="po-atom e267 e267"><textual class="po-textual">title</textual></code><textual class="po-textual"> element can be accessed
    directly, although the data is not embedded in the document.</textual></para></section><section class="po-hcontainer e268 e268"><title class="po-block e269 e269"><textual class="po-textual">Conclusion and future work</textual></title><para class="po-block e270 e270"><textual class="po-textual">We have demonstrated the </textual><emphasis class="po-inline e271 e271"><textual class="po-textual">XML::Loy</textual></emphasis><textual class="po-textual"> API that can be used as a framework
      for development of extensible modules for given namespaces (and therefore markup
      languages). Modules created as extensions can then be used in a simple but yet powerful way to
      create and process multiple annotated instances, even with standoff markup and referenced
      documents for primary and metadata information.</textual></para><para class="po-block e272 e272"><textual class="po-textual">The current implementation of </textual><emphasis class="po-inline e273 e273"><textual class="po-textual">XML::Loy</textual></emphasis><textual class="po-textual"> is written in pure Perl, with
      the focus on demonstrating the flexibility and extensibility of our approach, rather than
      creating a performance optimized system. Since the whole API (including the extension modules
      and examples described in this paper) is available under a free license at </textual><link class="po-inline e274 e274" xlink:actuate="onRequest" xlink:href="http://github.com/Akron/XML-Loy-XStandoff" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://github.com/Akron/XML-Loy-XStandoff</textual></link><textual class="po-textual"> further possible steps could include
      performance optimizations and the creation of an extension repository for popular standardized
      markup languages (such as OLAC, DocBook and TEI).</textual></para></section><section class="po-hcontainer e275 e275"><title class="po-block e276 e276"><textual class="po-textual">Acknowledgements</textual></title><para class="po-block e277 e277"><textual class="po-textual">We would like to thank the anonymous reviewers of this paper for their helpful comments
      and ideas.</textual></para></section><bibliography class="po-hcontainer e278 e278"><title class="po-block e279 e279"><textual class="po-textual">References</textual></title><bibliomixed class="po-block e280 e280" xml:id="Atkins2011" xreflabel="Atkins et al., 2011"><textual class="po-textual">Martin Atkins, Will Norris,
      Chris Messina, Monica Wilkinson, and Rob Dolin (2011). Atom Activity Streams 1.0. </textual><link class="po-inline e281 e281" xlink:actuate="onRequest" xlink:href="http://activitystrea.ms/specs/atom/1.0/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://activitystrea.ms/specs/atom/1.0/</textual></link></bibliomixed><bibliomixed class="po-block e282 e282" xml:id="Bray2009" xreflabel="Bray et al., 2009"><textual class="po-textual">Tim Bray, Dave Hollander, Andrew
      Layman, Richard Tobin, and Henry S. Thompson (2009). Namespaces in XML 1.0 (Third Edition).
      W3C Recommendation, World Wide Web Consortium (W3C). </textual><link class="po-inline e283 e283" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/2009/REC-xml-names-20091208/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/2009/REC-xml-names-20091208/</textual></link></bibliomixed><bibliomixed class="po-block e284 e284" xml:id="Diewald2011" xreflabel="Diewald, 2011"><textual class="po-textual">Nils Diewald (2011). XML::Loy –
      Extensible XML Reader and Writer. </textual><link class="po-inline e285 e285" xlink:actuate="onRequest" xlink:href="http://search.cpan.org/dist/XML-Loy/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://search.cpan.org/dist/XML-Loy/</textual></link></bibliomixed><bibliomixed class="po-block e286 e286" xml:id="Fallside2004" xreflabel="Fallside and Walsmley, 2004"><textual class="po-textual">David C. Fallside
      and Priscilla Walmsley (2004). XML Schema Part 0: Primer Second Edition. W3C Recommendation,
      World Wide Web Consortium (W3C). </textual><link class="po-inline e287 e287" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/2004/REC-xmlschema-0-20041028/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/2004/REC-xmlschema-0-20041028/</textual></link></bibliomixed><bibliomixed class="po-block e288 e288" xml:id="Gao2012" xreflabel="Gao et al., 2012"><textual class="po-textual">Shudi (Sandy) Gao, C. M.
      Sperberg-McQueen, and Henry S. Thompson (2012). W3C XML Schema Definition Language (XSD) 1.1
      Part 1: Structures. W3C Recommendation, World Wide Web Consortium (W3C). </textual><link class="po-inline e289 e289" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/2012/REC-xmlschema11-1-20120405/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/2012/REC-xmlschema11-1-20120405/</textual></link></bibliomixed><bibliomixed class="po-block e290 e290" xml:id="Goecke2010" xreflabel="Goecke et al., 2010"><textual class="po-textual">Daniela Goecke, Harald Lüngen,
      Dieter Metzing, Maik Stührenberg, and Andreas Witt (2010). </textual><emphasis class="po-inline e291 e291" role="ital"><textual class="po-textual">Different
        views on markup. Distinguishing Levels and Layers</textual></emphasis><textual class="po-textual">. In: Witt, A. and Metzing, D.
      (eds.), Linguistic Modeling of Information and Markup Languages. Dordrecht:
      Springer. doi:</textual><biblioid class="po-atom e292 doi e292"><textual class="po-textual">10.1007/978-90-481-3331-4_1</textual></biblioid><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e293 e293" xml:id="Ishikawa2002" xreflabel="Ishikawa, 2002"><textual class="po-textual">Masayasu Ishikawa (2002). An
      XHTML+MathML+SVG Profile. W3C Working Draft, World Wide Web Consortium (W3C). </textual><link class="po-inline e294 e294" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/XHTMLplusMathMLplusSVG/xhtml-math-svg.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/XHTMLplusMathMLplusSVG/xhtml-math-svg.html</textual></link></bibliomixed><bibliomixed class="po-block e295 e295" xml:id="vanKesteren2013" xreflabel="van Kesteren and Hunt, 2013"><textual class="po-textual">Anne Van Kesteren,
      and Lachlan Hunt (2013). Selectors API Level 1. W3C Recommendation, World Wide Web Consortium
      (W3C). </textual><link class="po-inline e296 e296" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/2013/REC-selectors-api-20130221/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/2013/REC-selectors-api-20130221/</textual></link></bibliomixed><bibliomixed class="po-block e297 e297" xml:id="Nottingham2005" xreflabel="Nottingham and Sayre, 2005"><textual class="po-textual">Mark Nottingham, and
      Robert Sayre (2005). The Atom Syndication Format. The Internet Society. </textual><link class="po-inline e298 e298" xlink:actuate="onRequest" xlink:href="http://tools.ietf.org/html/rfc4287" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://tools.ietf.org/html/rfc4287</textual></link></bibliomixed><bibliomixed class="po-block e299 e299" xml:id="Riedel2008" xreflabel="Riedel, 2008"><textual class="po-textual">Sebastian Riedel (2008). Mojolicious.
      Real-time web framework. </textual><link class="po-inline e300 e300" xlink:actuate="onRequest" xlink:href="http://search.cpan.org/dist/Mojolicious/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://search.cpan.org/dist/Mojolicious/</textual></link></bibliomixed><bibliomixed class="po-block e301 e301" xml:id="Snell2006" xreflabel="Snell, 2006"><textual class="po-textual">James M. Snell (2006). Atom Threading
      Extensions. The Internet Society. </textual><link class="po-inline e302 e302" xlink:actuate="onRequest" xlink:href="http://www.ietf.org/rfc/rfc4685.txt" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.ietf.org/rfc/rfc4685.txt</textual></link></bibliomixed><bibliomixed class="po-block e303 e303" xml:id="Sperberg-McQueen2004" xreflabel="Sperberg-McQueen and Huitfeldt, 2004"><textual class="po-textual">C.
      M. Sperberg-McQueen and Claus Huitfeldt (2004). </textual><emphasis class="po-inline e304 e304" role="ital"><textual class="po-textual">GODDAG: A Data
        Structure for Overlapping Hierarchies</textual></emphasis><textual class="po-textual">. In: King, P. and Munson, E. V. (eds.),
      Proceedings of the 5th International Workshop on the Principles of Digital Document Processing
      (PODDP 2000), volume 2023 of Lecture Notes in Computer Science, Springer</textual></bibliomixed><bibliomixed class="po-block e305 e305" xml:id="Sperberg-McQueen2008a" xreflabel="Sperberg-McQueen and Huitfeldt, 2008"><textual class="po-textual">C.
      M. Sperberg-McQueen and Claus Huitfeldt (2008). GODDAG. Presented at the Goddag workshop,
      Amsterdam, 1-5 December 2008</textual></bibliomixed><bibliomixed class="po-block e306 e306" xml:id="Stuehrenberg2008" xreflabel="Stührenberg and Goecke, 2008"><textual class="po-textual">Maik
      Stührenberg and Daniela Goecke (2008). SGF – An integrated model for multiple
      annotations and its application in a linguistic domain. Presented at Balisage: The Markup
      Conference 2008, Montréal, Canada, August 12 - 15, 2008. In: Proceedings of Balisage: The
      Markup Conference 2008. Balisage Series on Markup Technologies, vol. 1. doi:</textual><biblioid class="po-atom e307 doi e307"><textual class="po-textual">10.4242/BalisageVol1.Stuehrenberg01</textual></biblioid></bibliomixed><bibliomixed class="po-block e308 e308" xml:id="Stuehrenberg2009" xreflabel="Stührenberg and Jettka, 2009"><textual class="po-textual">Maik
      Stührenberg and Daniel Jettka (2009). A toolkit for multi-dimensional markup: The development
      of SGF to XStandoff. In Proceedings of Balisage: The Markup Conference 2009. Balisage Series
      on Markup Technologies, vol. 3. doi:</textual><biblioid class="po-atom e309 doi e309"><textual class="po-textual">10.4242/BalisageVol3.Stuhrenberg01</textual></biblioid><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e310 e310" xml:id="Stuehrenberg2013" xreflabel="Stührenberg, 2013"><textual class="po-textual">Maik Stührenberg. A What,
      when, where? Spatial and temporal annotations with XStandoff. In Proceedings of Balisage: The
      Markup Conference 2013. doi:</textual><biblioid class="po-atom e311 doi e311"><textual class="po-textual">10.4242/BalisageVol10.Stuhrenberg01</textual></biblioid><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e312 e312" xml:id="Thompson2004" xreflabel="Thompson et al., 2004"><textual class="po-textual">Henry S. Thompson, David
      Beech, Murray Maloney, and Noah Mendelsohn (2004). XML Schema Part 1: Structures Second
      Edition. W3C Recommendation, World Wide Web Consortium (W3C). </textual><link class="po-inline e313 e313" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/</textual></link></bibliomixed><bibliomixed class="po-block e314 e314" xml:id="Winer2009" xreflabel="Winer, 2009"><textual class="po-textual">Dave Winer (2009). RSS 2.0
        Specification. </textual><link class="po-inline e315 e315" xlink:actuate="onRequest" xlink:href="http://www.rssboard.org/rss-specification" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.rssboard.org/rss-specification</textual></link></bibliomixed></bibliography></article></classedDocument>