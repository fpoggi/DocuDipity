<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.2"><title class="po-block e1 e1"><textual class="po-textual">Reverse Modeling for Domain-Driven Engineering of Publishing Technology</textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">Balisage: The Markup Conference 2010</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 3 - 6, 2010</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual">We report in this paper on a technique that we call reverse modeling. Reverse
            modeling starts with a conceptual model that is formulated in one or more generic
            modeling technologies such as UML or XML Schema. It abstracts from that model a custom,
            domain-specific meta-model and re-formulates the original model as an instance of the
            new meta-model. We demonstrate the value of reverse modeling with two case studies: One
            domain-specific meta-model facilitates design and user interface of a so-called instance
            generator for broadcasting productions metadata. Another one structures the translation
            of XML-encoded printer data for invoices into semantic XML. In a further section of this
            paper, we take a more general view and survey patterns that have evolved in the
            conceptual modeling of documents and data and that implicitly suggest sound
            meta-modeling constructs.</textual></para><para class="po-block e8 e8"><textual class="po-textual">Taken together, the two case studies and the survey of patterns in conceptual models
            bring us one step closer to our superior goal of developing a meta-meta-modeling
            facility whose instances are custom meta-models for conceptual document and data models.
            The research that is presented in this paper brings forward a core set of elementary
            constructors that a meta-meta-modeling facility should provide.</textual></para></abstract><author class="po-record e9 e9"><personname class="po-record e10 e10"><firstname class="po-field e11 e11"><textual class="po-textual">Anne</textual></firstname><surname class="po-field e12 e12"><textual class="po-textual">Brüggemann-Klein</textual></surname></personname><personblurb class="po-container e13 e13"><para class="po-block e14 e14"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></para></personblurb><affiliation class="po-record e15 e15"><orgname class="po-block e16 e16"><textual class="po-textual">Fakultät für Informatik, Technische Universität München</textual></orgname></affiliation></author><author class="po-record e17 e17"><personname class="po-record e18 e18"><firstname class="po-field e19 e19"><textual class="po-textual">Tamer</textual></firstname><surname class="po-field e20 e20"><textual class="po-textual">Demirel</textual></surname></personname><personblurb class="po-container e21 e21"><para class="po-block e22 e22"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></para></personblurb><affiliation class="po-record e23 e23"><orgname class="po-block e24 e24"><textual class="po-textual">Fakultät für Informatik, Technische Universität Münchenn</textual></orgname></affiliation></author><author class="po-record e25 e25"><personname class="po-record e26 e26"><firstname class="po-field e27 e27"><textual class="po-textual">Dennis</textual></firstname><surname class="po-field e28 e28"><textual class="po-textual">Pagano</textual></surname></personname><personblurb class="po-container e29 e29"><para class="po-block e30 e30"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></para></personblurb><affiliation class="po-record e31 e31"><orgname class="po-block e32 e32"><textual class="po-textual">Fakultät für Informatik, Technische Universität München</textual></orgname></affiliation></author><author class="po-record e33 e33"><personname class="po-record e34 e34"><firstname class="po-field e35 e35"><textual class="po-textual">Andreas</textual></firstname><surname class="po-field e36 e36"><textual class="po-textual">Tai</textual></surname></personname><personblurb class="po-container e37 e37"><para class="po-block e38 e38"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></para></personblurb><affiliation class="po-record e39 e39"><orgname class="po-block e40 e40"><textual class="po-textual">Fakultät für Informatik, Technische Universität München</textual></orgname></affiliation></author><legalnotice class="po-container e41 e41"><para class="po-block e42 e42"><textual class="po-textual">Copyright © 2010 by the authors.  Used with permission.</textual></para></legalnotice></info><section class="po-hcontainer e43 e43" xml:id="sec.Introduction"><title class="po-block e44 e44"><textual class="po-textual">Introduction</textual></title><para class="po-block e45 e45"><textual class="po-textual">Modeling is a pivotal activity in the engineering of software systems; it is the key
         method to deal with complexity, adaptivity requirements and change. Models support
         communication and drive software development processes.</textual></para><para class="po-block e46 e46"><textual class="po-textual">In the Engineering Publishing Technology Group, we aim to leverage modeling and other
         proven methods of software engineering for document engineering and electronic publishing.
         One focus has been on the modeling of persistent data [</textual><xref class="po-milestone e47 e47" linkend="EPTatEML2007"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">,</textual><xref class="po-milestone e48 e48" linkend="EPTatBalisage2008"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">,</textual><xref class="po-milestone e49 e49" linkend="EPTatBalisage2009"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. In a 2009 Balisage paper [</textual><xref class="po-milestone e50 e50" linkend="EPTatBalisage2009"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], we have discussed the relationships between conceptual
         data models and their implementations in an XML schema language; furthermore, we have,
         following current thinking in the field, posed three requirements for the modeling of
         persistent data:</textual></para><itemizedlist class="po-table e51 e51"><listitem class="po-container e52 e52"><para class="po-block e53 e53"><textual class="po-textual">Modeling of persistent data must be integrated into system modeling.</textual></para></listitem><listitem class="po-container e54 e54"><para class="po-block e55 e55"><textual class="po-textual">Modeling of persistent data must be independent of data implementation
               technology.</textual></para></listitem><listitem class="po-container e56 e56"><para class="po-block e57 e57"><textual class="po-textual">Modeling of persistent data should be amenable to forward engineering.</textual></para></listitem></itemizedlist><para class="po-block e58 e58"><textual class="po-textual">Our previous work and the three requirements cited above have been inspired by a
         long-standing vision of software engineering, namely to drive the development process by
         models that are systematically transformed into lower-level models and software artifacts,
         that has found its expression in the approach of model-driven
            architecture [</textual><xref class="po-milestone e59 e59" linkend="MellorMDADistilled"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. Recently, the role of
         modeling in software engineering has been even further emphasized: The emerging software
         engineering discipline of domain-driven design [</textual><xref class="po-milestone e60 e60" linkend="EvansDDD"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] puts
         domain models at the heart of software development, letting them delineate so-called
         ubiquiteous languages that are used by domain experts and software engineers alike and that
         are embodied both in the code and in the user interface of systems. Hence, we should like
         to replace the last requirement in the list above by the following item:</textual></para><itemizedlist class="po-table e61 e61"><listitem class="po-container e62 e62"><para class="po-block e63 e63"><textual class="po-textual">Models of persistent data should be amenable to being embodied in every aspect of
               the system.</textual></para></listitem></itemizedlist><para class="po-block e64 e64"><textual class="po-textual">Over the last two years, in two projects we have deviated from the much-travelled road
         of modeling to support forward engineering. In fact, in both projects, we apply a technique
         that we call reverse modeling. Starting with a pre-existing conceptual model that is
         formulated in one or more generic modeling technologies such as UML or XML Schema, we
         abstract from that model a custom, domain-specific meta-model and re-formulate the original
         model as an instance of the new meta-model. In both cases, the new domain-specific
         meta-model explicitly captures salient points of the model that come to bear on system and
         interface design. We are convinced that in both cases reverse modeling leads to a better
         understanding of the domain and to a more flexible system that is resilient against future
         changes in the model.</textual></para><para class="po-block e65 e65"><textual class="po-textual">This paper is organized into four further main sections. In the next section, we present
         our main case study. More precisely, we apply reverse modeling to broadcasting productions
         meta data and demonstrate, how the domain-specific meta-model that we develop reduces
         complexity when building a so-called instance generator for broadcasting productions meta
         data. In the section after that, we reflect on reverse modeling, arguing for
         domain-specific meta-models. The next section applies reverse modeling in the context of
         translating XML-encoded printer data of invoices into semantically meaningful XML. In this
         case study, the meta-model that we develop structures the procedural method of the
         translator. In a further section of this paper, we take a more general view and survey
         patterns that have evolved in the conceptual modeling of documents and data and that
         implicitly suggest sound meta-modeling constructs. Taken together, the two case studies and
         the survey of patterns in conceptual models bring us one step closer to our superior goal
         to develop a meta-meta-modeling facility whose instances are custom meta-models for domain
         document and data models. They bring forward a core set of elementary constructors that a
         meta-meta-modeling facility should provide.</textual></para></section><section class="po-hcontainer e66 e66" xml:id="sec.BMF"><title class="po-block e67 e67"><textual class="po-textual">An instance generator for broadcasting productions metadata</textual></title><para class="po-block e68 e68"><textual class="po-textual">In his Master's Thesis [</textual><xref class="po-milestone e69 e69" linkend="TaiMTh"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] project, Andreas Tai deals
         with several incarnations of a huge data model for broadcasting productions metadata, the
         Broadcast Metadata Exchange Format (BMF). The model incarnations are formulated in a number
         of meta-model technologies, among others UML, XML Schema and a domain-specific registry
         format; these incarnations are aligned with each other but are not equivalent, and the
         relationship between them is not documented in detail. Project goal is a so-called BMF
         instance generator; that is, editing support for XML instances of metadata that illustrate
         sections of the model by example. Intended users are domain experts who explore sections of
         the model by generating XML instances when devising mappings from other metadata models
         into BMF. The initial users are XML experts; yet it is considered a valuable asset if later
         users need to be conversant neither in XML nor in XML Schema. Use of typical schema-driven
         XML editors has been tried out, but has not been found particularly helpful; hence, it is
         ruled out. The BMF instance generator must be resilient against changes in the model. A
         domain-specific meta-model that is constructed by what we call reverse modeling is pivotal
         to the solution, as explained below.</textual></para><section class="po-hcontainer e70 e70"><title class="po-block e71 e71"><textual class="po-textual">Broadcasting productions metadata and their use cases</textual></title><para class="po-block e72 e72"><textual class="po-textual">The Broadcast Metadata Exchange Format (BMF) is a data model that has been developed
            over nearly a decade by the Institut für Rundfunktechnik (IRT, Institute for
            Broadcasting Technology). A universal format, BMF enables the platform independent
            exchange of metadata in IT-based TV production, serving as a lingua franca that
            intermediates between different metadata formats in the domain of TV production.</textual></para><para class="po-block e73 e73"><textual class="po-textual">Briefly, BMF consists of types of different metadata sets such as </textual><emphasis class="po-inline e74 e74" role="ital"><textual class="po-textual">Programme</textual></emphasis><textual class="po-textual"> that group metadata elements such as </textual><emphasis class="po-inline e75 e75" role="ital"><textual class="po-textual">MainTitle</textual></emphasis><textual class="po-textual"> or </textual><emphasis class="po-inline e76 e76" role="ital"><textual class="po-textual">Award</textual></emphasis><textual class="po-textual">. Metadata
            elements associate with simple data types or with other metadata sets. </textual><xref class="po-milestone e77 e77" linkend="bmfDataModelExample"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> demonstrates that metadata element </textual><emphasis class="po-inline e78 e78" role="ital"><textual class="po-textual">MainTitle</textual></emphasis><textual class="po-textual"> is associated with simple type </textual><emphasis class="po-inline e79 e79" role="ital"><textual class="po-textual">String</textual></emphasis><textual class="po-textual"> and that metadata element </textual><emphasis class="po-inline e80 e80" role="ital"><textual class="po-textual">Award</textual></emphasis><textual class="po-textual">
            is associated with a metadata set that is also called </textual><emphasis class="po-inline e81 e81" role="ital"><textual class="po-textual">Award</textual></emphasis><textual class="po-textual">.</textual></para><figure class="po-container e82 e82" xml:id="bmfDataModelExample"><title class="po-block e83 e83"><textual class="po-textual">A segment of the BMF model in UML class-diagram notation</textual></title><mediaobject class="po-container e84 e84"><imageobject class="po-container e85 e85"><imagedata class="po-meta e86 e86" fileref="../../../vol5/graphics/Bruggemann-Klein01/Bruggemann-Klein01-001.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e87 e87"><para class="po-block e88 e88"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></para></caption></mediaobject></figure><para class="po-block e89 e89"><textual class="po-textual">BMF is formulated with different modeling technologies. It was first developed as an
            entity-relationship diagram which later has been replaced with a UML class diagram. To
            leverage data exchange by means of XML documents an XML Schema was dynamically generated
            from the BMF UML class diagram. Furthermore the data model is currently being registered
            at the Society of Motion Picture and Television Engineers (SMPTE), which requires its
            own format for data models [</textual><xref class="po-milestone e90 e90" linkend="SMPTE395M"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">,</textual><xref class="po-milestone e91 e91" linkend="SMPTE335M"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">,</textual><xref class="po-milestone e92 e92" linkend="SMPTERP210"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].</textual></para><para class="po-block e93 e93"><textual class="po-textual">BMF meets its proclaimed goal of covering every use case of metadata exchange in the
            domain of TV production at the price of being large and complex. Yet there are related
            use cases that BMF on its own does not support well, due to its complexity. In this
            paper, we are concerned with the specific such use case of generating sample XML-encoded
            metadata that conform to BMF, e.g. for the purposes of documentation or of
            designing mappings between BMF and other metadata formats. Each of the sample documents
            provides a keyhole view into a small part of BMF. What is needed tool-wise for
            generating such sample documents is a facility to deeply zoom into parts of BMF, to
            select a few illustrative building blocks and to instantiate them, the focus being on
            structures that may be filled with ad-hoc or dummy content.</textual></para><para class="po-block e94 e94"><textual class="po-textual">In the experience of the BMF modeling team at IRT, generic schema-aware XML editors
            are inadequate tools for the specific task of generating sample metadata. This seems to
            be due to the discrepancy in the sizes of the large BMF model and the relatively tiny
            focus that is relevant for the sample, making it quite time-consuming to generate sample
            documents even for XML experts who otherwise routinely use schema-aware editors.</textual></para><para class="po-block e95 e95"><textual class="po-textual">Hence, the group decided to look into specific editing support for BMF sample
            instances, initiating the project “BMF instance generator”, which
            became the topic of Andreas Tai's Master's Thesis </textual><xref class="po-milestone e96 e96" linkend="TaiMTh"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> at
            TU München.</textual></para><para class="po-block e97 e97"><textual class="po-textual">There are two main requirements for the instance generator: First, it must be
            resilient against changes in the BMF model. More precisely, it must be able to adapt
            itself to any new version of the BMF XML Schema. Second, it must cut down time and
            effort to generate sample metadata that conform to the BMF model.</textual></para><para class="po-block e98 e98"><textual class="po-textual">In the remainder of this section, we report on design and implementation of the BMF
            instance generator before drawing conclusions.</textual></para></section><section class="po-hcontainer e99 e99"><title class="po-block e100 e100"><textual class="po-textual">The quest for the domain model</textual></title><para class="po-block e101 e101"><textual class="po-textual">The leitmotiv question that needs to be addressed in the project is: What makes the
            generation of BMF instances so difficult? Apparently, problems that arise from the
            inherent complexity and sheer size of the BMF model are aggravated by the choice of
            technologies that is used to formulate the model, namely UML and XML Schema. These
            technologies bring a complexity to the model that is more due to the intrinsic logic of
            these technologies than to the underlying domain model that they express. They obscure
            the domain model of BMF. Furthermore, the different technologies that are in use to
            represent model information lead to inconsistent conclusions about the BMF domain model
            itself. One point of inconsistency is the order of metadata elements in metadata sets:
            In the UML class diagram, metadata elements are designed as class attributes which in
            UML are unordered; in the XML Schema metadata elements are attached to metadata sets
            within sequence content models that impose order on them.</textual></para><para class="po-block e102 e102"><textual class="po-textual">From this analysis, there arises naturally the question what the real domain model of
            BMF is. In order to get the domain aspect of the model back into focus, we need to strip
            BMF from the specifics of the modeling technologies that it is formulated in and to
            arrive at a more direct formulation of the model than the BMF UML class diagram and BMF
            XML Schema provide. In a process that we call reverse modeling, we first identify the
            building principles that constitute BMF. These building principles must meet the
            following requirements:</textual></para><itemizedlist class="po-table e103 e103"><listitem class="po-container e104 e104"><para class="po-block e105 e105"><textual class="po-textual">They apply to every incarnation of BMF.</textual></para></listitem><listitem class="po-container e106 e106"><para class="po-block e107 e107"><textual class="po-textual">They represent the concept that the modeling team of BMF has of the
                  model.</textual></para></listitem><listitem class="po-container e108 e108"><para class="po-block e109 e109"><textual class="po-textual">They are expressed as directly as possible, and certainly independently of
                  implementation technology.</textual></para></listitem></itemizedlist><para class="po-block e110 e110"><textual class="po-textual">Naturally, there is no magic wand for reverse modeling. We just have to apply sound
            software engineering practices. First, we carefully analyze the existing incarnations of
            BMF, namely the BMF UML class diagram and the BMF XML Schema as well as the registration
            data for BMF at SMPTE. Second, we conduct extensive interviews with the modeling team of
            BMF on the conceptual ideas behind the model. The result is a small set of rules the
            most important of which we describe in natural language:</textual></para><itemizedlist class="po-table e111 e111"><listitem class="po-container e112 e112"><para class="po-block e113 e113"><textual class="po-textual">BMF consists of types of metadata sets that group metadata elements.</textual></para></listitem><listitem class="po-container e114 e114"><para class="po-block e115 e115"><textual class="po-textual">The types of metadata sets are partitioned into packages.</textual></para></listitem><listitem class="po-container e116 e116"><para class="po-block e117 e117"><textual class="po-textual">Metadata elements are unordered</textual></para></listitem><listitem class="po-container e118 e118"><para class="po-block e119 e119"><textual class="po-textual">Metadata elements reference either simple data types or metadata sets.</textual></para></listitem><listitem class="po-container e120 e120"><para class="po-block e121 e121"><textual class="po-textual">The existance of a metadata set that is referenced from a metadata element can
                  be of one of two types: dependent on or independent of the existence of the
                  referer.</textual></para></listitem></itemizedlist><para class="po-block e122 e122"><textual class="po-textual">We view the building principles as a model for the domain model and hence as a
            domain-specific meta-model. With such a domain-specific meta-model, we restrict the
            terminology of the model to the domain. Instead of generic terms such as classes,
            attributes or complex type definitions we only use terms of the meta-model such as
            metadata set and metadata element.</textual></para><para class="po-block e123 e123"><textual class="po-textual">The meta-model reduces complexity in two ways: First, it facilitates a direct
            expression of the model that is independent of implementation technology. Second, it
            explicitly defines and limits the building principles that are used in BMF, thus
            imposing structure on the domain model and, hence, raising understanding to an
            accidental to a more principled level.</textual></para></section><section class="po-hcontainer e124 e124"><title class="po-block e125 e125"><textual class="po-textual">Leveraging the domain-specific meta-model for the instance generator</textual></title><para class="po-block e126 e126"><textual class="po-textual">Our quest for the BMF domain model has led us to discover a domain-specific
            meta-model of which the BMF domain model is an instance. We demonstrate in this section
            how we can leverage the meta-model for the instance generator, reducing complexity and
            making the instance generator resilient against changes in the BMF model.</textual></para><para class="po-block e127 e127"><textual class="po-textual">We structure the instance generator into the following three components:</textual></para><itemizedlist class="po-table e128 e128"><listitem class="po-container e129 e129"><para class="po-block e130 e130"><textual class="po-textual">
                  </textual><emphasis class="po-inline e131 e131" role="bold"><textual class="po-textual">Model advisor</textual></emphasis><textual class="po-textual">: a component that provides all
                  model-related information.</textual></para></listitem><listitem class="po-container e132 e132"><para class="po-block e133 e133"><textual class="po-textual">
                  </textual><emphasis class="po-inline e134 e134" role="bold"><textual class="po-textual">Shopping mall</textual></emphasis><textual class="po-textual">: a component that lets users select
                  model elements for later use.</textual></para></listitem><listitem class="po-container e135 e135"><para class="po-block e136 e136"><textual class="po-textual">
                  </textual><emphasis class="po-inline e137 e137" role="bold"><textual class="po-textual">Building site</textual></emphasis><textual class="po-textual">: a component that enables users to
                  build instances of the BMF model.</textual></para></listitem></itemizedlist><para class="po-block e138 e138"><textual class="po-textual">To illustrate the role of the domain-specific meta-model we look a bit closer at the
            implementation details of the three components.</textual></para><para class="po-block e139 e139"><textual class="po-textual">The model advisor is the key component of the instance generator. The component
            provides an interface to answer all questions that might be directed at the BMF domain
            model, for example:</textual></para><itemizedlist class="po-table e140 e140"><listitem class="po-container e141 e141"><para class="po-block e142 e142"><textual class="po-textual">Which metadata sets are available?</textual></para></listitem><listitem class="po-container e143 e143"><para class="po-block e144 e144"><textual class="po-textual">Which metadata elements are required for a metadata sets?</textual></para></listitem><listitem class="po-container e145 e145"><para class="po-block e146 e146"><textual class="po-textual">Does a metadata element reference a simple type value or another metadata set?
               </textual></para></listitem></itemizedlist><para class="po-block e147 e147"><textual class="po-textual">By the project requirements, the instance generator and, hence, the model advisor
            must refer to the BMF XML Schema for model information. Hence, two questions arise:
            First, the access question, how do we query XML Schema? Second, the interface question,
            how do we relate the BMF domain model to the BMF XML Schema?</textual></para><para class="po-block e148 e148"><textual class="po-textual">As to the access question, one would expect to be able to use XML technology for
            that. Indeed, the work of Wilde and Michel on SCX, an alternative XML representation of
            XML Schema [</textual><xref class="po-milestone e149 e149" linkend="WildeMichelXMLbased"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], and SPATH, an XSLT
            library to query XML schema components [</textual><xref class="po-milestone e150 e150" linkend="WildeMichelSpath1"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">,</textual><xref class="po-milestone e151 e151" linkend="WildeMichelSpath2"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], looks promising. Unfortunately, there is no
            full implementation yet, and development seems to have been discontinued. Therefore, we
            resort to a programming-language interface to XML Schema, namely the Java framework
            Eclipse XSD. Eclipse XSD is part of the Eclipse Modeling Framework (EMF) and closely
            mirrors the abstract data model of XML Schema.</textual></para><para class="po-block e152 e152"><textual class="po-textual">As to the interface question, technically, the model advisor exposes a query
            interface of Java methods for dynamic access of the BMF XML Schema. The model advisor's
            class model </textual><textual class="po-textual">defines the interface in terms of the
            domain meta-model, with query methods refering to domain concepts such as metadata sets
            and metadata elements, not to XML Schema concepts such as type definitions and content
            models; see </textual><xref class="po-milestone e153 e153" linkend="modelAdvisorSignatureExample"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. The implementation is based
            on Eclipse XSD.</textual></para><figure class="po-container e154 e154" xml:id="modelAdvisorSignatureExample"><title class="po-block e155 e155"><textual class="po-textual">Signature of a Java method that queries the BMF domain model</textual></title><programlisting class="po-block e156 e156" xml:space="preserve"><textual class="po-textual">List&lt;String&gt; getMetadataSetNames(String packageName)</textual></programlisting></figure><para class="po-block e157 e157"><textual class="po-textual">Hence, the query interface encapsulates the mapping between the BMF domain model and
            its XML Schema incarnation, and the model advisor's system of classes acts as an
            adaption layer that takes care of changes in the BMF XML Schema. Thus, the model advisor
            is resilient against changes in the BMF XML Schema as long as new versions of the schema
            still conform to the domain meta-model.</textual></para><para class="po-block e158 e158"><textual class="po-textual">To illustrate this with examples, the system will adapt if new types of metadata sets
            are defined or the selection of metadata elements within a type of metadata set is
            modified, because such a change in the domain model only requires Eclipse XSD to refer
            to a different schema at startup time or even at run time. The system will, however, not
            be able to adapt if a new kind of metadata element container is introduced that requires
            metadata elements to be ordered, because such a change in the domain meta-model demands
            an extension of the query interface. </textual></para><para class="po-block e159 e159"><textual class="po-textual">With its stacked architecture of access layer based on Eclipse XSD and adaption layer
            implementing a domain-specific query interface, the model advisor dynamically exposes
            the BMF domain model in its XML Schema
            incarnation — robust in the face of changes in the
            domain model that respect the boundaries of the domain meta-model.</textual></para><para class="po-block e160 e160"><textual class="po-textual">The other two components of the instance generator, namely the shopping mall and the
            building site, obtain the model information they need through the model advisor.</textual></para><para class="po-block e161 e161"><textual class="po-textual">The shopping mall component of the instance generator offers a graphical user
            interface to explore the BMF domain model and to select the metadata sets and metadata
            elements of interest; see </textual><xref class="po-milestone e162 e162" linkend="browsePackages"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and </textual><xref class="po-milestone e163 e163" linkend="addElements"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. The selected model elements are put in a shopping cart for
            later use in the instance generation process. The shopping-mall interface is dynamically
            created by querying the model advisor. Whereas the model advisor gives the programmer
            access to the domain model, the shopping mall visualises the domain model for the end
            user.</textual></para><para class="po-block e164 e164"><textual class="po-textual">Please note how the shopping mall interface integrates domain concepts into the
            shopping-mall metaphor.</textual></para><figure class="po-container e165 e165" xml:id="browsePackages"><title class="po-block e166 e166"><textual class="po-textual">The shopping mall user interface   Shopping for metadata sets</textual></title><mediaobject class="po-container e167 e167"><imageobject class="po-container e168 e168"><imagedata class="po-meta e169 e169" fileref="../../../vol5/graphics/Bruggemann-Klein01/Bruggemann-Klein01-002.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e170 e170"><para class="po-block e171 e171"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></para></caption></mediaobject></figure><figure class="po-container e172 e172" xml:id="addElements"><title class="po-block e173 e173"><textual class="po-textual">The shopping mall user interface   Adding metadata elements to
               metadata set</textual></title><mediaobject class="po-container e174 e174"><imageobject class="po-container e175 e175"><imagedata class="po-meta e176 e176" fileref="../../../vol5/graphics/Bruggemann-Klein01/Bruggemann-Klein01-003.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e177 e177"><para class="po-block e178 e178"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></para></caption></mediaobject></figure><para class="po-block e179 e179"><textual class="po-textual">The shopping-mall interface has been adopted for uses beyond the task of instance
            generation. The collecting of metadata sets and metadata elements into a shopping cart
            provides a new way of browsing through the domain model, notably advancing ease of
            access to the model even for the modeling experts at IRT.</textual></para><para class="po-block e180 e180"><textual class="po-textual">We are now turning our attention to the third instance generator component, the
            building site. This component is able to open a shopping cart that has previously been
            saved in the shopping mall. It tries then to build a BMF instance from the cart's
            content, following user hints that might also be stored in the cart (see </textual><xref class="po-milestone e181 e181" linkend="instanceTree"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">). Afterwards, it offers a graphical user interface that lets
            users edit BMF instances with the help of context-sensitive menues that also are created
            dynamically and indirectly, by querying the domain model through the model
            advisor.</textual></para><figure class="po-container e182 e182" xml:id="instanceTree"><title class="po-block e183 e183"><textual class="po-textual">The building site user interface   Displaying an automatically
               generated BMF instance</textual></title><mediaobject class="po-container e184 e184"><imageobject class="po-container e185 e185"><imagedata class="po-meta e186 e186" fileref="../../../vol5/graphics/Bruggemann-Klein01/Bruggemann-Klein01-004.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e187 e187"><para class="po-block e188 e188"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></para></caption></mediaobject></figure><para class="po-block e189 e189"><textual class="po-textual">Once more, the objects that the user is dealing with, in this case metadata set and
            metadata element instances, are presented directly as domain objects, independently of
            implementation technology. The target representation of an XML instance that conforms to
            the BMF XML Schema is created by an export modul. This divide-and-conquer strategy pays
            itself off when further output formats need to be supported. As a case in point, the
            building site component offers alternative export as a GraphML document that can then be
            visualized with the helpf of the prefuse toolkit; see </textual><xref class="po-milestone e190 e190" linkend="instanceVisualisation"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. This kind of visualisation proves to be
            instrumental in understanding the inter-dependencies of model elements in BMF, again on
            a conceptual domain level.</textual></para><figure class="po-container e191 e191" xml:id="instanceVisualisation"><title class="po-block e192 e192"><textual class="po-textual">Visualizing a BMF instance in GraphML format</textual></title><mediaobject class="po-container e193 e193"><imageobject class="po-container e194 e194"><imagedata class="po-meta e195 e195" fileref="../../../vol5/graphics/Bruggemann-Klein01/Bruggemann-Klein01-005.png" format="png" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e196 e196"><para class="po-block e197 e197"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></para></caption></mediaobject></figure></section><section class="po-hcontainer e198 e198"><title class="po-block e199 e199"><textual class="po-textual">Conclusion</textual></title><para class="po-block e200 e200"><textual class="po-textual">In this section, we have presented the method of reverse modeling, as summarized in
               </textual><xref class="po-milestone e201 e201" linkend="reverseModeling"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. Working backwards from pre-existing model
            incarnations that only implicitly define the domain model, we have identified the
            domain-specific building principles of the implied domain model, thus coming up with a
            domain-specific meta-model, from which an explicit domain model can be derived by
            instantiation.</textual></para><figure class="po-container e202 e202" xml:id="reverseModeling"><title class="po-block e203 e203"><textual class="po-textual">Reverse modeling</textual></title><mediaobject class="po-container e204 e204"><imageobject class="po-container e205 e205"><imagedata class="po-meta e206 e206" fileref="../../../vol5/graphics/Bruggemann-Klein01/Bruggemann-Klein01-006.png" format="png" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e207 e207"><para class="po-block e208 e208"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></para></caption></mediaobject></figure><para class="po-block e209 e209"><textual class="po-textual">We have also demonstrated how we can follow a divide-and-conquer strategy and
            leverage the domain-specific meta-model for the BMF instance generator, so that the two
            main project requirements are met. Consistently reflecting the domain-specific
            meta-model in the system design and the user interface also leads to the unexpected but
            highly welcome benefit that also domain experts who are not conversant in XML technology
            can work easily and productively with the BMF instance generator.</textual></para><para class="po-block e210 e210"><textual class="po-textual">It is also worth mentioning that reverse modeling and the resulting domain-specific
            meta-model raised the level of understanding of the BMF data model. They made a very
            sophisticated data model more usable and manageable. We wish to emphasise that usability
            is not only an important factor in the design of user interfaces. It is also a decisive
            condition for the adoption of a new data model. In our experience, the focussing on the
            domain aspect through reverse modeling has made BMF more accessible to domain users,
            especially to those who do not have knowledge in modeling technologies such as UML or
            XML.</textual></para></section></section><section class="po-hcontainer e211 e211" xml:id="sec.Reflection"><title class="po-block e212 e212"><textual class="po-textual">Reflection: Models, meta-models and domains</textual></title><para class="po-block e213 e213"><textual class="po-textual">As the name suggests, reverse modeling constructs a domain model working backwards from
         one or more legacy incarnations of a pre-existing model, that may be defined only
         implicitly through implementation languages such as XML Schema. We have found in the BMF
         instance generator project that the real value of reverse modeling lies not so much in the
         conceptual model itself but in the domain-specific building principles that allow
         conceptual entities to be composed into larger entities. Such building principles are
         customarily considered to be part of the meta-model. This raises the question how
         domain-specific building principles AKA constructors on the meta-model level are best
         handled when modeling a domain.</textual></para><para class="po-block e214 e214"><textual class="po-textual">By way of an example, let us suppose that we wish to model some entity as a rigid record
         structure that calls for a number of named sub-entities, exactly one for each name from a
         pre-defined list, without restricting the order. In the case that the sub-entities are each
         simply typed, such record structures correspond precisely to tables in first normal form in
         the relational data model.</textual></para><para class="po-block e215 e215"><textual class="po-textual">Naturally, such a model can be expressed in most modeling languages or meta-models,
         including UML, XML Schema, and Relax NG, and so can a more flexible record structure that
         allows sub-entities to be optional, or an even more rigid record structure that imposes
         order on the sub-entities. The point is that generic meta-models such as UML or XML Schema
         differentiate between these variants of record structures only implicitly, for example by
         consistently affixing specific occurence indicators to sub-entity declarations. In a way,
         they simulate a specific variant of record structures with their generic operators without
         making the common building principles behind them explicit by at least naming or ideally
         formally defining them.</textual></para><para class="po-block e216 e216"><textual class="po-textual">The common ground between two record structures, one with sub-entities A, B and C and
         the other with sub-entities D an E is the fact that they </textual><emphasis class="po-inline e217 e217" role="ital"><textual class="po-textual">are</textual></emphasis><textual class="po-textual"> record structures. What is missing in meta-models such as UML, XML
         Schema or Relax NG for this scenario is the ability to explicitly provide a building
         principle for record structures that can be named in a domain-specific way and that can be
         parameterized by sub-entities such as A, B and C in one case and D and E in the other,
         similarly to parameterized types or classes in programming languages.</textual></para><para class="po-block e218 e218"><textual class="po-textual">In contrast, in a meta-model that is customized to a domain that exhibits rigid record
         structures we envision a custom operator that directly and explicitly constructs such a
         record structure from its ingredients. In another scenario that displays more flexible
         record structures, again there would be a custom operator that caters to flexible record
         structures. And in a scenario that exhibits both rigid and flexible record structures,
         there would, of course, be two custom operators, one for each type of record structure. We
         require that in the meta-model we can customize operators: We wish to name them and to
         customize their sub-components as fits the domain. </textual></para><para class="po-block e219 e219"><textual class="po-textual">In the BMF meta-model, we make use of a set operator who assembles named members that
         each can be either of simple type or of set type. We have customized it by naming the set
         operator “metadata set” and its members “metadata
         elements”. The BMF model instantiates the meta-model by recursively giving names
         to metadata sets and their members and by also stating members' types.</textual></para><para class="po-block e220 e220"><textual class="po-textual">We argue in this paper that, compared to generic meta-models, domain-specific
         meta-models that directly and explicity express domain-specific building rules may give
         rise to more concise and less complex models that better capture the essentials of a domain
         and better support system development.</textual></para></section><section class="po-hcontainer e221 e221" xml:id="sec.DADemirel"><title class="po-block e222 e222"><textual class="po-textual">Translating XML-encoded printer data for invoices into semantically meaningful
         XML</textual></title><para class="po-block e223 e223"><textual class="po-textual">In this section, we briefly present a second case study even though it is not as fully
         worked as the BMF study. Yet we feel that it helps to prove the point of the paper.</textual></para><para class="po-block e224 e224"><textual class="po-textual">In his Diploma Thesis [</textual><citation class="po-atom e225 e225" linkend="DemirelDA"><textual class="po-textual">DemirelDA</textual></citation><textual class="po-textual">]
         project, Tamer Demirel tackles the problem of up-converting XML-encoded printer data for
         invoices into semantically meaningful XML. The XML-encoded printer data are gathered from
         PDF versions of the invoices with the help of publicly available XML printer drivers, with
         the XML data representing the invoice data at page level, in terms of positions, font
         information and text strings. The target XML documents need to conform to an XML Schema for
         invoices.</textual></para><para class="po-block e226 e226"><textual class="po-textual">Related invoice data from a single source share a common layout that facilitates
         analysis and offers the opportunity to up-translate the low-level printer data into
         higher-level, semantically meaningful XML data. An XSLT transformation program can be
         controlled by configuration data that express the common layout. In his Diploma Thesis
         project, Tamer Demirel designs and implements an Excel tool that enables clerical workers
         to capture the common layout of related invoice data. These data are saved in XML format
         and then transformed, via XSLT, into an XSLT program that up-translates any invoice data
         instances that conform to the common layout from the printer data into established
         workflows “on the side”, without interfering with non-XML
         practices.</textual></para><para class="po-block e227 e227"><textual class="po-textual">How is all this related to the topic of this paper, reverse modeling? The link is in the
         XML Schema for the target invoice data. This schema models a flexible record structure
         similarly to the one we have presented in the reflection section of this paper, with the
         twist that some field values are not of primitive but of tabular type. Tables generalize
         flexible record structures by allowing for repeated sets of values. This description gives
         rise to a meta-model for invoice data that structurally happens to be quite similiar to the
         meta-model for BMF data that we have introduced earlier. Note, though, that the meta-model
         is customized to the business domain in its use of terminology.</textual></para><para class="po-block e228 e228"><textual class="po-textual">In Tamer Demirel's Diploma Thesis project, the meta-model serves a double purpose:
         First, it structures system design and algorithms for data analysis by dividing all tasks
         into the two separate concersn of record structures and tables. Second, it makes the work
         resilient against change in the schema, since it can be adapted to any schema that follows
         the meta-model.</textual></para></section><section class="po-hcontainer e229 e229" xml:id="sec.Patterns"><title class="po-block e230 e230"><textual class="po-textual">Patterns as a source for meta-models</textual></title><para class="po-block e231 e231"><textual class="po-textual">In the previous two sections, we propose two custom meta-models for domain models and
         demonstrate how to leverage them for two specific publishing applications. In this section,
         we take a more general view and survey patterns that have evolved in the conceptual
         modeling of documents and data and that implicitly suggest sound meta-modeling constructs.
         Taken together, these three sections bring us one step closer to our superior goal to
         develop a meta-meta-modeling facility whose instances are custom meta-models for domain
         document and data models. They accomplish that by identifying a core set of elementary
         constructors that a meta-meta-modeling facility should provide.</textual></para><para class="po-block e232 e232"><textual class="po-textual">Maler and El Andaloussi in their early seminal work on document
            modeling [</textual><xref class="po-milestone e233 e233" linkend="MalerEtAlDTDModeling"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] propose to classify
         document constituents into one of four categories, which we call metadata, organizational
         items, information items and information snippets. Document constituents in any of the four
         categories exhibit specific structures which today would be called patterns.</textual></para><para class="po-block e234 e234"><textual class="po-textual">Metadata are commonly blocked together and associated with the document as a whole or
         with its major divisions, but may also be associated with more fine-grained document
         constituents. As the name “metadata” implies, they hold information
         about a document constituent rather than being part of it. Typical high-level metadata are
         author, publisher, publication date and so on as standardized by the Dublin Core initiative
         and others. Examples for low-level metadata are the height, depth or format of a picture.
         Metadata are typically structured as the flexible type of records that we have used above
         as an example in the reflection section above.</textual></para><para class="po-block e235 e235"><textual class="po-textual">Organizational items structure a document into high-level units. They typically form a
         hierarchy, of which each level is organized as a sequence of specific and often repeatable
         items. Typical organizational items are books with frontmatter, a number of chapters and
         backmatter, of which each chapter is organised into a title, a number of introductory
         paragraphs and a number of sections.</textual></para><para class="po-block e236 e236"><textual class="po-textual">Information items are smaller units of discourse that can be semantically understood out
         of context, such as paragraphs, lists, or quotations. Characteristically, an organizational
         item of the lowest level will be allowed to contain an arbitrary number of information
         items whose type may be freely chosen from a repertoire.</textual></para><para class="po-block e237 e237"><textual class="po-textual">Information items may be shallowly organized into sub-items, as a list is organised into
         list items, but will eventually contain just text, possibly mixed with the smallest and
         lowest type of document constituents, namely information snippets.</textual></para><para class="po-block e238 e238"><textual class="po-textual">Finally, information snippets are small units of information that normally cannot be
         semantically interpreted out of context. Typical information snippets are emphasized
         phrases, cross references and technical terms. Characteristically, information snippets may
         contain text and possibly further information snippets that are freely chosen from some
         repertoire.</textual></para><para class="po-block e239 e239"><textual class="po-textual">A custom meta-model could allow modelers to classify document constituents into any of
         the four categories and to further constrain their type in accordance with the typical
         structures of their category. This could be another use for HyTime's concept of
         architectural forms [</textual><xref class="po-milestone e240 e240" linkend="HyTimeBook"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].</textual></para><para class="po-block e241 e241"><textual class="po-textual">Speaking of information snippets, their characteristic recursive structure of stretches
         of text interspersed with lower-level information snippets are aptly described by the data
         modeling pattern [</textual><xref class="po-milestone e242 e242" linkend="GammaEtAlDesignPatterns"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] called
            </textual><emphasis class="po-inline e243 e243"><textual class="po-textual">Composite</textual></emphasis><textual class="po-textual">, as has been pointed out in a 2007 Extreme Markup
         Languages Paper [</textual><xref class="po-milestone e244 e244" linkend="EPTatEML2007"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. A Composite constructor would
         be a valuable tool in a meta-meta-model facility.</textual></para><para class="po-block e245 e245"><textual class="po-textual">Some work has been done on implementational patterns that are applicable to models
         written in XML Schema [</textual><xref class="po-milestone e246 e246" linkend="KhanEtAlSchemaDesignPatterns"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">,</textual><xref class="po-milestone e247 e247" linkend="LainevoolXMLPatterns"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">,</textual><xref class="po-milestone e248 e248" linkend="StephensonBestPractices"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. Examples
         are the patterns Russion Doll, Venetian Blind, Salami Slice and Garden of Eden, the four
         possibilities that arise when combining local or global element declarations with local or
         global type definitions, respectively. In further studies, we are going to discuss, if any
         of these patterns can be usefully “lifted” from the implementational
         to a conceptual level. We will also mine the literature on data modeling, particularly the
         foundational book by Simsion [</textual><xref class="po-milestone e249 e249" linkend="SimsionDataModeling"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] for
         patterns in data modeling that also apply to document modeling.</textual></para></section><section class="po-hcontainer e250 e250" xml:id="sec.FurtherWork"><title class="po-block e251 e251"><textual class="po-textual">Conclusion and further work</textual></title><para class="po-block e252 e252"><textual class="po-textual">A number of modeling languages or meta-models have been used in the XML context, mostly
         with the goal of integrating XML Schema as an implementation technology into the
         development of XML-based systems. Nečaský [</textual><xref class="po-milestone e253 e253" linkend="NecaskyConceptualModeling"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] surveys conceptual modeling languages that extend
         the entity-relationship model. Bernauer et al. [</textual><xref class="po-milestone e254 e254" linkend="BernauerXMLSchemaUML"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] survey methods of integrating XML Schema into modeling
         with UML. The conference series Extreme Markup Languages and Balisage offer a number of
         papers in the area [</textual><xref class="po-milestone e255 e255" linkend="KimberEtAlUML2DTD"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">,</textual><xref class="po-milestone e256 e256" linkend="EPTatBalisage2009"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">,</textual><xref class="po-milestone e257 e257" linkend="BaumanBalisage2009"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], the latter introducing a subset of
            Guizzardi's [</textual><xref class="po-milestone e258 e258" linkend="GuizzardiUFO"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] Unified Foundational Ontology as
         a conceptual modeling language on a layer of abstraction above UML. All these languages are
         of a generic nature; that is, their meta-models only offer generic constructors that cannot
         be customized to the domain.</textual></para><para class="po-block e259 e259"><textual class="po-textual">We find it beneficial to put modeling into a larger context, taking up ideas from
         domain-driven design. We put forward the notion of domain-specific meta-models that capture
         building principles of domains. This raises the larger research question of a
         meta-meta-modeling facility, instances of which are domain-specific meta-models. We have
         identified potential constructors of a meta-meta-modeling facility by doing reverse
         modeling in two case studies and by studying patterns in conceptual models that can be
         abstracted into constructors.</textual></para><para class="po-block e260 e260"><textual class="po-textual">Benefits of domain-specific meta-models are: Clarity of unterstanding, reduction of
         complexity, support of system design and guidance for user interfaces.</textual></para><para class="po-block e261 e261"><textual class="po-textual">In our work at EPT, we will futher explore customized meta-models. We intend to build
         (or even generate) editors for domain-specific meta-models, for example for forms
         documents. And we will formalize meta-models (that is, define a meta-meta-model), probably
         using abstract state machines [</textual><xref class="po-milestone e262 e262" linkend="ASMBook"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] as a
         technology-neutral specification language.</textual></para></section><section class="po-hcontainer e263 e263" xml:id="sec.Acknowledgments"><title class="po-block e264 e264"><textual class="po-textual">Acknowledgments</textual></title><para class="po-block e265 e265"><textual class="po-textual">We extend our heartfelt thanks to BMF project leader Andreas Ebner as well as to Rico
         Zimmermann und Christoph Nufer at Institut für Rundfunktechnik for expertise, commitment
         and support.</textual></para><para class="po-block e266 e266"><textual class="po-textual">We also gladly acknowledge the long-standing collaboration with Werner Simon and
         Thorsten Reinheimer of ExxTainer AG, who suggested and sponsored Tamer Demirel's Diploma
         Thesis project. We appreciate their vision regarding XML technology in business and their
         competent and engaged supervision of students.</textual></para></section><section class="po-hcontainer e267 e267" xml:id="sec.Dedication"><title class="po-block e268 e268"><textual class="po-textual">Dedication</textual></title><para class="po-block e269 e269"><textual class="po-textual">The first author of this paper, Anne Brüggemann-Klein, dedicates the paper to colleague
         and friend Professor Derick Wood, PhD, on occasion of his 70th birthday this year. Derick
         has been a most influentical scientific mentor to me. I have learned from him much that I
         know about the English language and scientific writing, and I enjoyed our long-standing and
         quite successful research collaboration. I also appreciate that through Derick and his
         wife, Mary Chen, I got a bit of an inside view of Canada and Hongkong. Thank you!</textual></para></section><bibliography class="po-hcontainer e270 e270"><title class="po-block e271 e271"><textual class="po-textual">Literature</textual></title><bibliomixed class="po-block e272 e272" xml:id="BaumanBalisage2009" xreflabel="B09"><textual class="po-textual">B.T. Bauman:
            </textual><emphasis class="po-inline e273 e273"><textual class="po-textual">Prying Apart Semantics and Implementation: Generating XML Schemata directly
            from ontologically sound conceptual models.</textual></emphasis><textual class="po-textual"> Balisage 2009. Available from
         http://www.balisage.net/Proceedings/. doi: </textual><biblioid class="po-atom e274 doi e274"><textual class="po-textual">10.4242/BalisageVol3.Bauman01</textual></biblioid></bibliomixed><bibliomixed class="po-block e275 e275" xml:id="BernauerXMLSchemaUML" xreflabel="BKK04"><textual class="po-textual">M. Bernauer,G.
         Kappel, G. Kramler: </textual><emphasis class="po-inline e276 e276"><textual class="po-textual"> Representing XML Schema in UML—A Comparison of
            Approaches</textual></emphasis><textual class="po-textual">. Technical Report Business Infomatics Group at TU Wien 2004.
         Available from
         http://www.big.tuwien.ac.at/research/publications/2004/0304.pdf.</textual></bibliomixed><bibliomixed class="po-block e277 e277" xml:id="ASMBook" xreflabel="BS03"><textual class="po-textual">E. Börger and R. Stärk: </textual><emphasis class="po-inline e278 e278"><textual class="po-textual">Abstract
            State Machines. A Method for High-Level System Design and Analysis</textual></emphasis><textual class="po-textual">.
         Springer-Verlag 2003. </textual></bibliomixed><bibliomixed class="po-block e279 e279" xml:id="EPTatEML2007" xreflabel="BST07"><textual class="po-textual">A. Brüggemann-Klein, Th. Schöpf,
         K. Toni: </textual><emphasis class="po-inline e280 e280" role="ital"><textual class="po-textual">Principles, Patterns and Procedures of XML Schema Design
            — Reporting from the XBlog Project.</textual></emphasis><textual class="po-textual"> Extreme Markup Languages 2007.
         Available from http://conferences.idealliance.org/extreme/.</textual></bibliomixed><bibliomixed class="po-block e281 e281" xml:id="EPTatBalisage2008" xreflabel="ES08"><textual class="po-textual">A. Brüggemann-Klein, L.
         Singer: </textual><emphasis class="po-inline e282 e282" role="ital"><textual class="po-textual">Hypertext Links and Relationships in XML
            Databases.</textual></emphasis><textual class="po-textual"> Presented at Balisage: The Markup Conference 2008, Montréal,
         Canada, 2008, http://www.balisage.net/. Available from
         http://hyquery.ls-softworks.de/HyperDataSystemsBalisage2008.pdf. doi: </textual><biblioid class="po-atom e283 doi e283"><textual class="po-textual">10.4242/BalisageVol1.Bruggemann-Klein01</textual></biblioid></bibliomixed><bibliomixed class="po-block e284 e284" xml:id="C01" xreflabel="CarlsonXMLAppsUML"><textual class="po-textual">D. Carlson: </textual><emphasis class="po-inline e285 e285" role="ital"><textual class="po-textual">Modeling XML Applications with UML: Practical E-Business
            Applications.</textual></emphasis><textual class="po-textual"> Redwood City, Addison Wesley Longman Publishing,
         2001.</textual></bibliomixed><bibliomixed class="po-block e286 e286" xml:id="ConradEtAlXMLConceptualModeling" xreflabel="CSF00"><textual class="po-textual">R. Conrad, D. Scheffner, J.-C. Freytag. XML
         Conceptual Modeling Using UML. In A.H.F. Laender, S.W. Liddle, V.C. Storey (eds), </textual><emphasis class="po-inline e287 e287" role="ital"><textual class="po-textual">International Conference on Conceptual Modeling (ER 2000)</textual></emphasis><textual class="po-textual">. LNCS
         1920, pp. 558—571. Springer-Verlag 2000. doi: </textual><biblioid class="po-atom e288 doi e288"><textual class="po-textual">10.1007/3-540-45393-8_40</textual></biblioid></bibliomixed><bibliomixed class="po-block e289 e289" xml:id="DemirelDA" xreflabel="D10"><textual class="po-textual">T. Demirel. </textual><emphasis class="po-inline e290 e290" role="ital"><textual class="po-textual">Grundsatzuntersuchung zur Übernahme von nicht-semantischen XML-Druckerdaten in
            semantisches XML auf Basis eines XSD-Schemas.</textual></emphasis><textual class="po-textual"> Diploma Thesis, Technische
         Universität München, 2010.</textual></bibliomixed><bibliomixed class="po-block e291 e291" xml:id="HyTimeBook" xreflabel="DD84"><textual class="po-textual">S.J. DeRose and D.G. Durand:
            </textual><emphasis class="po-inline e292 e292"><textual class="po-textual">Making Hypermedia Work: A User's Guide to HyTime</textual></emphasis><textual class="po-textual">. Kluwer Academic
         Publishers 1984.</textual></bibliomixed><bibliomixed class="po-block e293 e293" xml:id="EvansDDD" xreflabel="E04"><textual class="po-textual">E. Evans: </textual><emphasis class="po-inline e294 e294"><textual class="po-textual">Domain-Driven Design.
            Tackling Complexity in the Heart of Software</textual></emphasis><textual class="po-textual">. Addison-Wesley
         2004.</textual></bibliomixed><bibliomixed class="po-block e295 e295" xml:id="EcksteinEtAlXMLDatenmodellierung" xreflabel="EE04"><textual class="po-textual">R. Eckstein, S. Eckstein. </textual><emphasis class="po-inline e296 e296" role="ital"><textual class="po-textual">XML und Datenmodellierung.</textual></emphasis><textual class="po-textual"> DPunkt-Verlag 2004.</textual></bibliomixed><bibliomixed class="po-block e297 e297" xml:id="GuizzardiUFO" xreflabel="G05"><textual class="po-textual">G. Guizzardi:
         </textual><emphasis class="po-inline e298 e298"><textual class="po-textual">Ontological Foundations for Structural Conceptual Models</textual></emphasis><textual class="po-textual">. Ph.D.
         Thesis, University of Twente, The Netherlands, 2005. Available from
         https://doc.telin.nl/dsweb/Get/Document-55835/Ontological%20Foundations%20for%20Structural%20Conceptual%20Models.pdf.</textual></bibliomixed><bibliomixed class="po-block e299 e299" xml:id="GammaEtAlDesignPatterns" xreflabel="GHJV95"><textual class="po-textual">E. Gamma, R.
         Helm, R. Johnson, J. Vlissides. </textual><emphasis class="po-inline e300 e300"><textual class="po-textual">Design Patterns</textual></emphasis><textual class="po-textual">. Addison-Wesley 1995. </textual></bibliomixed><bibliomixed class="po-block e301 e301" xml:id="KimberEtAlUML2DTD" xreflabel="KH00"><textual class="po-textual">W.E. Kimber, J.D.
         Heintz: </textual><emphasis class="po-inline e302 e302" role="ital"><textual class="po-textual">Using UML To Define XML Document Types.</textual></emphasis><textual class="po-textual">
         Presentation at Extreme Markup Languages 2000. Available from
         http://www.gca.org/attend/2000_conferences/Extreme_2000/.</textual></bibliomixed><bibliomixed class="po-block e303 e303" xml:id="KhanEtAlSchemaDesignPatterns" xreflabel="KS06"><textual class="po-textual">A.
         Khan, M. Sum. </textual><emphasis class="po-inline e304 e304" role="ital"><textual class="po-textual">Introducing Design Patterns in XML Schemata</textual></emphasis><textual class="po-textual">.
         Sun Developer Network 2006.</textual></bibliomixed><bibliomixed class="po-block e305 e305" xml:id="LainevoolXMLPatterns" xreflabel="L10"><textual class="po-textual">T. Lainevool.
            </textual><emphasis class="po-inline e306 e306" role="ital"><textual class="po-textual">Develop Effective XML Documents Using Structural Design
            Patterns.</textual></emphasis><textual class="po-textual"> http://www.LainevoolXMLPatterns.com/.</textual></bibliomixed><bibliomixed class="po-block e307 e307" xml:id="MalerEtAlDTDModeling" xreflabel="MA95"><textual class="po-textual">E. Maler, J. El
         Andaloussi. </textual><emphasis class="po-inline e308 e308" role="ital"><textual class="po-textual">Developing SGML DTDs: From Text to Model to
            Markup.</textual></emphasis><textual class="po-textual"> Prentice Hall 1995.</textual></bibliomixed><bibliomixed class="po-block e309 e309" xml:id="MellorMDADistilled" xreflabel="MSUW04"><textual class="po-textual">S.J. Mellor, K. Scott,
         A. Uhl, D. Weise: </textual><emphasis class="po-inline e310 e310"><textual class="po-textual">MDA Distilled.</textual></emphasis><textual class="po-textual"> Addison-Wesley 2004.</textual></bibliomixed><bibliomixed class="po-block e311 e311" xml:id="NecaskyConceptualModeling" xreflabel="N06"><textual class="po-textual">M.
         Nečaský: </textual><emphasis class="po-inline e312 e312"><textual class="po-textual">Conceptual Modeling for XML: A Survey</textual></emphasis><textual class="po-textual">. Proceedings of the
         Dateso Annual International Workshop on Databases, Texts, Specifications and Objects 2006.
         Available from
         http://ftp.informatik.rwth-aachen.de/Publications/CEUR-WS/Vol-176/</textual></bibliomixed><bibliomixed class="po-block e313 e313" xml:id="PaganoDA" xreflabel="P08"><textual class="po-textual">D. Pagano. </textual><emphasis class="po-inline e314 e314" role="ital"><textual class="po-textual">Modeling
            and Defining XML Applications with UML and XML Schema.</textual></emphasis><textual class="po-textual"> Diploma Thesis,
         Technische Universität München, 2008.</textual></bibliomixed><bibliomixed class="po-block e315 e315" xml:id="EPTatBalisage2009" xreflabel="PB09"><textual class="po-textual">D. Pagano and A.
         Brüggemann-Klein. </textual><emphasis class="po-inline e316 e316"><textual class="po-textual">Engineering Document Applications — From UML Models to XML
            Schemas</textual></emphasis><textual class="po-textual">. Balisage 2009. Available from
         http://www.balisage.net/Proceedings/.  doi:</textual><biblioid class="po-atom e317 doi e317"><textual class="po-textual">10.4242/BalisageVol3.Bruggemann-Klein01</textual></biblioid><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e318 e318" xml:id="StephensonBestPractices" xreflabel="S04"><textual class="po-textual">D.
         Stephenson. </textual><emphasis class="po-inline e319 e319" role="ital"><textual class="po-textual">XML Schema Best Practices</textual></emphasis><textual class="po-textual">. HP Dev Resource
         2004.
         http://devresource.hp.com/drc/resources/vdVlistXMLSchemaBestPractices.jsp.</textual></bibliomixed><bibliomixed class="po-block e320 e320" xml:id="SimsionDataModeling" xreflabel="S07"><textual class="po-textual">G. Simsion:
            </textual><emphasis class="po-inline e321 e321"><textual class="po-textual">Data Modeling Theory and Practice</textual></emphasis><textual class="po-textual">. Technics Publications 2007. </textual></bibliomixed><bibliomixed class="po-block e322 e322" xml:id="SMPTE335M" xreflabel="SMPTE01"><textual class="po-textual">Society of Motion Picture and Television
         Engineers: SMPTE 335M-2001- Metadata Dictionary Structure. SMPTE Standard for Telivision,
         2001. </textual></bibliomixed><bibliomixed class="po-block e323 e323" xml:id="SMPTE395M" xreflabel="SMPTE03"><textual class="po-textual">Society of Motion Picture and Television
         Engineers: SMPTE 395M-2003 - Metadata Groups Registry Structure. SMPTE Standard for
         Telivision, 2003. </textual></bibliomixed><bibliomixed class="po-block e324 e324" xml:id="SMPTERP210" xreflabel="SMPTE08"><textual class="po-textual">Society of Motion Picture and
         Television Engineers: RP210-11-2008 - Data Element Dictionary. SMPTE Recommended Practice,
         2008.</textual></bibliomixed><bibliomixed class="po-block e325 e325" xml:id="TaiMTh" xreflabel="T09"><textual class="po-textual">A. Tai: </textual><emphasis class="po-inline e326 e326"><textual class="po-textual">Requirements analysis,
            conception and implementation of a BMF-Generator on the basis of the BMF-XML
            Schema.</textual></emphasis><textual class="po-textual"> Master's Thesis. Technische Universität München, 2009.</textual></bibliomixed><bibliomixed class="po-block e327 e327" xml:id="WildeMichelSpath1" xreflabel="WM07a"><textual class="po-textual">E. Wilde und F. Michel:
            </textual><emphasis class="po-inline e328 e328" role="ital"><textual class="po-textual">SPath: a path language for XML schema.</textual></emphasis><textual class="po-textual"> In: WWW ’07:
         Proceedings of the 16th international conference on World Wide Web, S. 1343–1344. ACM,
         2007. doi: </textual><biblioid class="po-atom e329 doi e329"><textual class="po-textual">10.1145/1242572.1242842</textual></biblioid><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e330 e330" xml:id="WildeMichelSpath2" xreflabel="WM07b"><textual class="po-textual">E. Wilde und F. Michel:
            </textual><emphasis class="po-inline e331 e331" role="ital"><textual class="po-textual">SPath: A Path Language for XML Schema.</textual></emphasis><textual class="po-textual"> In: Paper
         2007-001 . School of Information, 2007. Available from
         http://dret.net/netdret/docs/wilde-irep07-001-spath.pdf.</textual></bibliomixed><bibliomixed class="po-block e332 e332" xml:id="WildeMichelXMLbased" xreflabel="WM07c"><textual class="po-textual">E. Wilde und F.
         Michel: </textual><emphasis class="po-inline e333 e333" role="ital"><textual class="po-textual">XML-based XML schema access.</textual></emphasis><textual class="po-textual"> In: WWW ’07:
         Proceedings of the 16th international conference on World Wide Web, S. 1351–1352. ACM,
         2007. doi: </textual><biblioid class="po-atom e334 doi e334"><textual class="po-textual">10.1145/1242572.1242846</textual></biblioid><textual class="po-textual">.</textual></bibliomixed></bibliography></article></classedDocument>