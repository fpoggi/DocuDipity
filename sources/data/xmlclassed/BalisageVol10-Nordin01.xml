<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.3" xml:id="HR-23632987-8973"><title class="po-block e1 e1"><textual class="po-textual">Markup and Canada's National Model Building Codes</textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">Balisage: The Markup Conference 2013</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 6 - 9, 2013</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual">This paper offers up a brief publishing oriented view of the Canadian National Building Codes since their first release in 1941 and continues on to describe current work in maintaining the Codes documents and their XML content.</textual></para></abstract><author class="po-record e8 e8"><personname class="po-record e9 e9"><firstname class="po-field e10 e10"><textual class="po-textual">Brent</textual></firstname><surname class="po-field e11 e11"><textual class="po-textual">Nordin</textual></surname></personname><personblurb class="po-container e12 e12"><para class="po-block e13 e13"><textual class="po-textual">I've been playing with markup off and on since about 1990. I served as a Canadian rep to JTC1/SC18/WG8 during the SGML revision days, developed an SGML DTD Viewer product (released about 2 months before Near and Far, which ended my hopes for early retirement), and have worked on markup projects for companies like Frame, Adobe, Boeing, Embraer, National Research Council of Canada, and Schlumberger.</textual></para><para class="po-block e14 e14"><textual class="po-textual">When I`m not playing in markup-land, I work on data-centric security, with as much of an XML twist as I can manage.</textual></para></personblurb></author><legalnotice class="po-container e15 e15"><para class="po-block e16 e16"><textual class="po-textual">Copyright Â© 2013 Brent Nordin.</textual></para><para class="po-block e17 e17"><textual class="po-textual">The National Building Codes content shown in any examples accompanying this paper are reproduced with the permission of the National Research Council of Canada, copyright holder.</textual></para></legalnotice></info><section class="po-hcontainer e18 e18"><title class="po-block e19 e19"><textual class="po-textual">Disclaimer</textual></title><para class="po-block e20 e20"><textual class="po-textual">I have been working as an independent contractor to the National Research Council of Canada (NRC) Canadian Codes Centre (CCC) off and on for 8 years. I have no formal affiliation with either the NRC or the CCC nor am I representing either organization in this paper.</textual></para></section><section class="po-hcontainer e21 e21"><title class="po-block e22 e22"><textual class="po-textual">Acknowledgements</textual></title><para class="po-block e23 e23"><textual class="po-textual">Guy Gosselin - Director, Building Regulations, NRC-CNRC Construction</textual></para><para class="po-block e24 e24"><textual class="po-textual">Guyane Mougeot-Lemay - Building Regulations, Manager, Production &amp; Marketing</textual></para><para class="po-block e25 e25"><textual class="po-textual">Tarek Raafat - Building Regulations, Head, Information Systems</textual></para><para class="po-block e26 e26"><textual class="po-textual">Helen Tikhonova - Building Regulations, Information Systems Specialist</textual></para><para class="po-block e27 e27"><textual class="po-textual">David Taylor - Building Regulations, SGML/XML Specialist and CMS Administrator</textual></para><para class="po-block e28 e28"><textual class="po-textual">Henning Heinemann - Building Regulations, Project Manager, Information Systems</textual></para><para class="po-block e29 e29"><textual class="po-textual">The Building Codes content shown in any of the images or examples accompanying this paper are copyright the National Research Council of Canada and used with permission.</textual></para></section><section class="po-hcontainer e30 e30"><title class="po-block e31 e31"><textual class="po-textual">Roadmap</textual></title><para class="po-block e32 e32"><textual class="po-textual">This paper describes some of the work I've been doing on a project featuring large, complex technical documents - The Canadian National Model Building Codes. I'll start with a short intro to the organizations and processes that maintain and update the Codes. From there I'll give a very selected time line of the Codes dating from a time before computers to the present and on to some current work we are doing. Where the time line intersects with my involvement I will be able to expand the level of detail.</textual></para><para class="po-block e33 e33"><textual class="po-textual">Please assume that anything I describe would not have been possible without the help and guidance of the people mentioned in the acknowledgements section. Guy Gosselin gave me permission to write this paper, Guyane Mougeot-Lemay and Tarek Raafat have provided excellent project management, Helen Tikhonova and David Taylor have provided me with </textual><emphasis class="po-inline e34 e34"><textual class="po-textual">endless</textual></emphasis><textual class="po-textual"> subject matter expertise and feedback at every stage of my work, and Henning Heinemann has done wonders customizing the CMS and integrating my code.</textual></para></section><section class="po-hcontainer e35 e35"><title class="po-block e36 e36"><textual class="po-textual">The Canadian National Model Building Codes</textual></title><para class="po-block e37 e37"><textual class="po-textual">Like many countries, Canada maintains building codes designed to ensure building and occupant safety. Building codes necessarily change over time in order to address new requirements.</textual></para><para class="po-block e38 e38"><textual class="po-textual">Canada`s National Research Council operates the Canadian Codes Centre (CCC) to provide both technical and administrative support to the Canadian Commission on Building and Fire Codes (CCBFC). The CCBFC has nine technical standing committees whose members may be drawn from "... building and fire officials, architects, engineers, contractors and building owners, as well as members of the public".
        </textual></para><para class="po-block e39 e39"><textual class="po-textual">While building codes are a provincial or territorial responsibility, the CCBFC helps coordinate the work with input from the Provincial/Territorial Policy Advisory Committee on Codes (PTPACC) to the extent that many jurisdictions adopt the Model Building Codes directly, while others modify the model codes as appropriate for conditions in their jurisdictions.</textual></para><para class="po-block e40 e40"><textual class="po-textual">These codes currently maintained by the CCC are the following:</textual></para><itemizedlist class="po-table e41 e41"><listitem class="po-container e42 e42"><para class="po-block e43 e43"><textual class="po-textual">National Energy Code of Canada for Buildings 2011 (NECB)</textual></para></listitem><listitem class="po-container e44 e44"><para class="po-block e45 e45"><textual class="po-textual">National Building Code of Canada 2010 (NBC)</textual></para></listitem><listitem class="po-container e46 e46"><para class="po-block e47 e47"><textual class="po-textual">National Fire Code of Canada 2010 (NFC)</textual></para></listitem><listitem class="po-container e48 e48"><para class="po-block e49 e49"><textual class="po-textual">National Plumbing Code of Canada 2010 (NPC)</textual></para></listitem><listitem class="po-container e50 e50"><para class="po-block e51 e51"><textual class="po-textual">National Farm Building Code of Canada 1995 (NFBC)</textual></para></listitem></itemizedlist></section><section class="po-hcontainer e52 e52"><title class="po-block e53 e53"><textual class="po-textual">A Look at the Building Codes</textual></title><section class="po-hcontainer e54 e54"><title class="po-block e55 e55"><textual class="po-textual">1941</textual></title><para class="po-block e56 e56"><textual class="po-textual">Canada's building codes date back to 1941 when the first version of the National Building Code was published. At that time, a typical page from the document looked like </textual><xref class="po-milestone e57 e57" linkend="bc1941"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><figure class="po-container e58 e58" xml:id="bc1941"><title class="po-block e59 e59"><textual class="po-textual">Sample content from the 1941 Building Code</textual></title><mediaobject class="po-container e60 e60"><imageobject class="po-container e61 e61"><imagedata class="po-meta e62 e62" fileref="../../../vol10/graphics/Nordin01/Nordin01-001.png" format="png" width="75%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e63 e63"><textual class="po-textual">Markup and computer based publishing (and computers for that matter) were still off in the future. To keep things moving along and relevant to this conference, I'll gloss over the ensuing forty years of Building Codes development and publishing activity.</textual></para></section><section class="po-hcontainer e64 e64"><title class="po-block e65 e65"><textual class="po-textual">1990</textual></title><para class="po-block e66 e66"><textual class="po-textual">By the late eighties, Codes production had shifted to desktop publishing (Pagemaker) and a typical page looked like </textual><xref class="po-milestone e67 e67" linkend="bc1990"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><figure class="po-container e68 e68" xml:id="bc1990"><title class="po-block e69 e69"><textual class="po-textual">Sample page from the 1990 Building Code</textual></title><mediaobject class="po-container e70 e70"><imageobject class="po-container e71 e71"><imagedata class="po-meta e72 e72" fileref="../../../vol10/graphics/Nordin01/Nordin01-002.png" format="png" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e73 e73"><textual class="po-textual">Even as the Building Codes were being converted to desktop publishing tools, markup and, in particular, the notion of separating document content from document presentation, especially for large technical publications, was becoming more common. So too were the tools and expertise necessary to handle markup.</textual></para></section><section class="po-hcontainer e74 e74"><title class="po-block e75 e75"><textual class="po-textual">1995/6</textual></title><para class="po-block e76 e76"><textual class="po-textual">Despite the claimed advantages of a markup based publishing approach, it was still a leap of faith to go to the expense of converting data from proprietary formats to SGML and retooling the publishing chain. Nonetheless, for the 1995 version of the Codes, the content was converted to SGML with an accompanying DTD. Arbortext was selected as the editing and page composition tool which also required that a FOSI be developed to format the output. The SGML/Arbortext printed copy looked like </textual><xref class="po-milestone e77 e77" linkend="bc1995"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><figure class="po-container e78 e78" xml:id="bc1995"><title class="po-block e79 e79"><textual class="po-textual">Sample page from the 1995 Building Code</textual></title><mediaobject class="po-container e80 e80"><imageobject class="po-container e81 e81"><imagedata class="po-meta e82 e82" fileref="../../../vol10/graphics/Nordin01/Nordin01-003.png" format="png" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e83 e83"><textual class="po-textual">One year later, the Codes were issued in their first electronic version using Dynatext from Electronic Book Technologies. Dynatext was a publishing system that allowed SGML content to be combined with other media like vector and raster graphics and audio and video clips into a book or book collection that could be shipped on a CD. The Dynatext version of the Building Codes looked like </textual><xref class="po-milestone e84 e84" linkend="dynatext"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><figure class="po-container e85 e85" xml:id="dynatext"><title class="po-block e86 e86"><textual class="po-textual">Sample page from the Dynatext electronic Building Code</textual></title><mediaobject class="po-container e87 e87"><imageobject class="po-container e88 e88"><imagedata class="po-meta e89 e89" fileref="../../../vol10/graphics/Nordin01/Nordin01-004.png" format="png" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e90 e90"><textual class="po-textual">The Dynatext release of the Building Codes was important for demonstrating:</textual></para><itemizedlist class="po-table e91 e91"><listitem class="po-container e92 e92"><para class="po-block e93 e93"><textual class="po-textual">The advantage of a non-proprietary data format that could be processed by different tool chains to create very different output products - a particularly important message given the cost of conversion to SGML and the retooling to support the conversion.</textual></para></listitem><listitem class="po-container e94 e94"><para class="po-block e95 e95"><textual class="po-textual">The added value of an electronic document over paper - search, hyper links, light and compact (CD vs. paper), etc.</textual></para></listitem></itemizedlist><para class="po-block e96 e96"><textual class="po-textual">At the time however, a well-thumbed copy of a paper version of the Building Codes, thrown into the cab of a pickup truck on a building site, or stored on a building professional's desk, was a more realistic delivery scenario than a format that required ready access to a laptop or desktop computer.</textual></para></section><section class="po-hcontainer e97 e97"><title class="po-block e98 e98"><textual class="po-textual">2005/6</textual></title><para class="po-block e99 e99"><textual class="po-textual">It was 10 years before the next release of the Building Codes. As before, the paper version of the Codes was edited and composed in Arbortext although by 2005 the DTD and content had been converted from SGML to XML. The conversion was not difficult as the original conversion from Pagemaker to SGML did not take significant advantage of the SGML features that were dropped when XML was designed (although we have had many opportunities to lament the loss of inclusions in the XML DTD - having to allow for change-begin and change-end elements nearly everywhere in the XML DTD is much messier than being able to specify their inclusion once). This sample page from the 2005 version of the Codes (</textual><xref class="po-milestone e100 e100" linkend="bc2005"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) shows a strong resemblance to the 1995 version (</textual><xref class="po-milestone e101 e101" linkend="bc1995"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">), save for the change to a single column format.</textual></para><figure class="po-container e102 e102" xml:id="bc2005"><title class="po-block e103 e103"><textual class="po-textual">Sample page from the 2005 Building Code</textual></title><mediaobject class="po-container e104 e104"><imageobject class="po-container e105 e105"><imagedata class="po-meta e106 e106" fileref="../../../vol10/graphics/Nordin01/Nordin01-005.png" format="png" width="90%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e107 e107"><textual class="po-textual">This is where I come in to the story. By 2005, Dynatext was no longer available and the Canadian Codes Centre had selected the NXT CD publishing tool to create the next electronic version of the Building Codes. My initial brief was to create HTML output from the XML source suitable for import into NXT. As far as possible, the content was to be formatted like the paper copy. The FOSI used for the printed Codes, being a stylesheet itself, provided me with a useful leg up in creating the CSS.</textual></para><para class="po-block e108 e108"><textual class="po-textual">When we started work converting the XML to HTML (using XSLT) for the NXT CD tool
                we did not actually have the NXT software. Our initial conversion delivered a
                2-frame HTML view of the output with a Table of Contents in the left frame and the
                Codes content in the right. </textual><xref class="po-milestone e109 e109" linkend="frame"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> shows a sample.</textual></para><figure class="po-container e110 e110" xml:id="frame"><title class="po-block e111 e111"><textual class="po-textual">Sample page from the 2006 electronic Building Code</textual></title><mediaobject class="po-container e112 e112"><imageobject class="po-container e113 e113"><imagedata class="po-meta e114 e114" fileref="../../../vol10/graphics/Nordin01/Nordin01-006.png" format="png" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e115 e115"><textual class="po-textual">Once the NXT software arrived, and as we learned its specific requirements, we
                modified the conversion scripts to support both the original framed output and the
                NXT output. In the next few sections I'll outline some of the more interesting
                challenges we had to deal with.</textual></para><section class="po-hcontainer e116 e116"><title class="po-block e117 e117"><textual class="po-textual">Output Formatting</textual></title><para class="po-block e118 e118"><textual class="po-textual">I have already mentioned that the plain HTML output and the NXT output were
                    different. The changes were mostly related to the Table of Contents (TOC) and
                    the format of hyper links. Setting up the conversion scripts to handle these
                    differences was fairly straightforward. Formatting was another thing entirely.
                    At the time, we were trying to support Firefox 3, Internet Explorer 6, and CSS 2
                    - it turned out that if we got that right, the NXT output would look OK too. We
                    wanted to have a single CSS style sheet to reduce long term maintenance
                    headaches. Effectively, we were trying to support 3 different rendering engines
                    with one set of HTML files and one style sheet. Our initial conversion scripts
                    tried to take advantage of HTML elements like &lt;P&gt; but the browsers attach
                    some amount of built-in formatting to the HTML elements. Of course the
                    formatting was different for each browser as were the interactions of the
                    predefined formatting with the linked CSS. We simplified the problem by mapping
                    the XML into DIV and SPAN elements for block and running text respectively. As I
                    learned at Balisage in 2011 over a beer one evening, DIV and SPAN were
                    introduced specifically to be unformatted so we were able to limit my hair
                    pulling to resolving differences between how the browsers interpreted CSS2. This
                    was entertaining enough - we had to tweak both the output HTML and the CSS to
                    achieve my goals. For example, one instance we had to wrap output in both DIV
                    and SPAN elements to get similar presentations in Firefox and Internet Explorer.
                    The CSS has a disturbing number of comments like:</textual></para><programlisting class="po-block e119 e119" xml:space="preserve"><textual class="po-textual">
IE and FF have different opinions about how to layout para-nmbrd caused by FF
not honoring sentnum width. Numbers in FF on para-nmbrd text will therefore be
shifted left by 1em plus the difference between the width of the number (including
its trailing ')') and the width of an 'm' character.</textual></programlisting></section><section class="po-hcontainer e120 e120"><title class="po-block e121 e121"><textual class="po-textual">Tables</textual></title><para class="po-block e122 e122"><textual class="po-textual">My claim in the previous section about using only DIV and SPAN elements was true to a point. Tables were that point. Tabular output required engaging the table rendering engines in the browsers and so my HTML output does include HTML table elements. Anyone who has had to convert tables marked up using the Oasis Exchange Table Model into HTML tables knows just how much work this can be. For example, an Oasis table can have multiple TGROUP elements where each TGROUP can support a different number of columns. There is no analog in HTML tables - each table can only have a single number of columns. You therefore have 2 options:</textual></para><itemizedlist class="po-table e123 e123"><listitem class="po-container e124 e124"><para class="po-block e125 e125"><textual class="po-textual">Convert each TGROUP to support the number of columns in the least common multiple of the columns in all TGROUPs.</textual></para></listitem><listitem class="po-container e126 e126"><para class="po-block e127 e127"><textual class="po-textual">Output each TGROUP as a separate table and rely on rendering the tables with no intervening space to look like a single table.</textual></para></listitem></itemizedlist><para class="po-block e128 e128"><textual class="po-textual">The first option is unspeakably horrible as it involves setting up column spans or converting existing column spans (named or positional) and all the references to the span information in the table data amongst other nasties. The latter option is much, much easier but had a dark side that was not apparent at the time. That dark side showed up years later when we converted our output to be accessible. No longer could we present a single logical table as multiple printed tables. We had to present the logical table as a single HTML table with a CAPTION element. Fortunately, and after an extensive review of our content, we found that, while we did have to support multiple TRGOUPS, we did not have different numbers of columns or different types of presentational attributes in each TGROUP.</textual></para><para class="po-block e129 e129"><textual class="po-textual">The tables in the Codes documents are both numerous and often complex. Even things like figuring out which borders to render on a table cell required looking at all the possible places cell borders could be specified starting at the Oasis TABLE element and working down through TGROUP, COLSPEC, ROW, and ENTRY elements. Ultimately, the results worked out well enough. The following table samples (</textual><xref class="po-milestone e130 e130" linkend="table1"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, </textual><xref class="po-milestone e131 e131" linkend="table2"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) give a feeling for the complexity of our tables.</textual></para><figure class="po-container e132 e132" xml:id="table1"><title class="po-block e133 e133"><textual class="po-textual">Sample table</textual></title><mediaobject class="po-container e134 e134"><imageobject class="po-container e135 e135"><imagedata class="po-meta e136 e136" fileref="../../../vol10/graphics/Nordin01/Nordin01-007.png" format="png" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><figure class="po-container e137 e137" xml:id="table2"><title class="po-block e138 e138"><textual class="po-textual">Sample table</textual></title><mediaobject class="po-container e139 e139"><imageobject class="po-container e140 e140"><imagedata class="po-meta e141 e141" fileref="../../../vol10/graphics/Nordin01/Nordin01-008.png" format="png" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure></section><section class="po-hcontainer e142 e142"><title class="po-block e143 e143"><textual class="po-textual">Change Bars</textual></title><para class="po-block e144 e144"><textual class="po-textual">One feature of the Codes documents is that each new version highlights significant changes from the previous version using change bars in the page margins. This is a very common technique in print, but HTML and CSS were not designed to support this level of page fidelity. We settled on using shaded text to highlight the differences (see </textual><xref class="po-milestone e145 e145" linkend="cyclechange"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).</textual></para><figure class="po-container e146 e146" xml:id="cyclechange"><title class="po-block e147 e147"><textual class="po-textual">Version change highlighting</textual></title><mediaobject class="po-container e148 e148"><imageobject class="po-container e149 e149"><imagedata class="po-meta e150 e150" fileref="../../../vol10/graphics/Nordin01/Nordin01-009.png" format="png" width="75%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e151 e151"><textual class="po-textual">The interesting problem was that Arbortext encoded change bars in the XML as switches (empty elements) that told the Arbortext page composition engine to start (or stop) rendering a change bar. You can see the "change-begin" and "change-end" empty elements in the sample below.</textual></para><programlisting class="po-block e152 e152" xml:space="preserve"><textual class="po-textual">
&lt;sentence id="es007023"&gt;&lt;intentref xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="ei000287.xml" xlink:title="Intent"/&gt;&lt;text&gt;Where hangers are used to support &lt;term refid="nmnll-hr"&gt;nominally
horizontal&lt;/term&gt; piping, they shall be&lt;/text&gt;
&lt;clause id="es007023a"&gt;
&lt;text&gt;metal rods of not less than&lt;/text&gt;
&lt;subclause id="es007023a1"&gt;
&lt;text&gt;&lt;</textual><emphasis class="po-inline e153 e153" role="bital"><textual class="po-textual">change-begin</textual></emphasis><textual class="po-textual">/&gt;&lt;meas&gt;6 mm&lt;/meas&gt; diam to support piping &lt;meas&gt;2 inches&lt;/meas&gt; or
less in &lt;term refid="z"&gt;size&lt;/term&gt;,&lt;</textual><emphasis class="po-inline e154 e154" role="bital"><textual class="po-textual">change-end</textual></emphasis><textual class="po-textual">/&gt;&lt;/text&gt;
&lt;/subclause&gt;
&lt;subclause id="es007023a2"&gt;
&lt;text&gt;&lt;</textual><emphasis class="po-inline e155 e155" role="bital"><textual class="po-textual">change-begin</textual></emphasis><textual class="po-textual">/&gt;&lt;meas&gt;8 mm&lt;/meas&gt; diam to support piping &lt;meas&gt;4 inches&lt;/meas&gt; or
less in &lt;term refid="z"&gt;size&lt;/term&gt;, and&lt;</textual><emphasis class="po-inline e156 e156" role="bital"><textual class="po-textual">change-end</textual></emphasis><textual class="po-textual">/&gt;&lt;/text&gt;
&lt;/subclause&gt;
&lt;subclause id="es007023a3"&gt;
&lt;text&gt;&lt;</textual><emphasis class="po-inline e157 e157" role="bital"><textual class="po-textual">change-begin</textual></emphasis><textual class="po-textual">/&gt;&lt;meas&gt;13 mm&lt;/meas&gt; diam to support piping over &lt;meas&gt;4
inches&lt;/meas&gt; in &lt;term refid="z"&gt;size&lt;/term&gt;, or&lt;</textual><emphasis class="po-inline e158 e158" role="bital"><textual class="po-textual">change-end</textual></emphasis><textual class="po-textual">/&gt;&lt;/text&gt;
&lt;/subclause&gt;
&lt;/clause&gt;           
                </textual></programlisting><para class="po-block e159 e159"><textual class="po-textual">What we wanted to do was emit an element start tag when we encountered the
                    element that started the change bar and emit the corresponding end tag when we
                    hit the stop change bar element so that we could wrap content in a DIV or SPAN
                    element (with a CSS class). Of course XSLT does not normally allow a partial
                    element to be emitted in a template. We had to hide what we were doing from the
                    XSLT engine by outputting the start and end tags in different XSLT templates
                    using character entities like so:</textual></para><programlisting class="po-block e160 e160" xml:space="preserve"><textual class="po-textual">
&lt;!-- CHANGE-BEGIN Any changes in this code should be mirrored in CHANGE-END. --&gt;
&lt;xsl:template match="change-begin"&gt;
    &lt;xsl:text&gt;&amp;lt;div class="change-begin"&amp;gt;&lt;/xsl:text&gt;
&lt;/xsl:template&gt;

&lt;!-- CHANGE-END Any changes in this code should be mirrored in CHANGE-BEGIN. --&gt;
&lt;xsl:template match="change-end"&gt;
            &lt;xsl:text&gt;&amp;lt;/div&amp;gt;&lt;/xsl:text&gt;
&lt;/xsl:template&gt;
                </textual></programlisting><para class="po-block e161 e161"><textual class="po-textual">The XSLT output serializer then converted the character entities back into regular &lt; &gt; characters where they would be interpreted as markup (and therefore as a DIV or SPAN wrapping content) by the browsers. Codes text that included &lt; and &gt; characters and that we did not want interpreted as markup had to be hidden by doubly encoding them as &amp;amp;lt; and &amp;amp;gt;.</textual></para><para class="po-block e162 e162"><textual class="po-textual">Of course converting singleton elements functioning as switches to an element wrapping content did not initially produce reliably well-formed output in every case. Subsequent stages of our rendering pipeline choked on the output. Our solution was to manually relocate the offending change singletons in the source XML. In most cases this was as simple as moving a change-begin singleton from preceding a start tag to immediately following the start tag (for example) which left well-formed output that had the same effect as the original change markup.</textual></para><para class="po-block e163 e163"><textual class="po-textual">Ultimately, the NXT output (and interface) looked like </textual><xref class="po-milestone e164 e164" linkend="nxt"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><figure class="po-container e165 e165" xml:id="nxt"><title class="po-block e166 e166"><textual class="po-textual">NXT output</textual></title><mediaobject class="po-container e167 e167"><imageobject class="po-container e168 e168"><imagedata class="po-meta e169 e169" fileref="../../../vol10/graphics/Nordin01/Nordin01-010.png" format="png" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e170 e170"><textual class="po-textual">The NXT output preserves the look of the printed Codes text (in the right pane) and also offers a number of advantages over print:</textual></para><itemizedlist class="po-table e171 e171"><listitem class="po-container e172 e172"><para class="po-block e173 e173"><textual class="po-textual">Active hyper linking within and between Codes documents</textual></para></listitem><listitem class="po-container e174 e174"><para class="po-block e175 e175"><textual class="po-textual">Full text search</textual></para></listitem><listitem class="po-container e176 e176"><para class="po-block e177 e177"><textual class="po-textual">More complete (the electronic output included the intent statements which were not released on paper). These are accessed through the links at the left of each sentence.</textual></para></listitem><listitem class="po-container e178 e178"><para class="po-block e179 e179"><textual class="po-textual">Much more portable</textual></para></listitem></itemizedlist></section></section><section class="po-hcontainer e180 e180"><title class="po-block e181 e181"><textual class="po-textual">2010</textual></title><para class="po-block e182 e182"><textual class="po-textual">Between the time we published the Codes on CD using NXT and the time we had to start preparing for the next release of the Codes in 2010, changes on the NXT side suggested strongly that we have a plan B for releasing an electronic copy of the Codes in 2010. Plan B turned out to rely on Arbortext for both the print and electronic copies of the Codes using Arbortext PDF output. The electronic PDF output, like the SGML and HTML electronic version before it offers active hyper links, a TOC, and search capabilities. As you can imagine, with PDF as the output for both the print and electronic versions of the Codes, the presentation was nearly identical and the entire production process was greatly streamlined. The output looks very much like the 2005 Codes so I haven't included an example here.</textual></para><para class="po-block e183 e183"><textual class="po-textual">For the foreseeable future, Arbortext will be the composition engine for both the print and electronic copies and so this part of my tale ends. The next part of this paper describes a different aspect of the work I've been involved with at the Canadian Codes Centre.</textual></para></section></section><section class="po-hcontainer e184 e184"><title class="po-block e185 e185"><textual class="po-textual">Maintaining and Developing the Building Codes</textual></title><para class="po-block e186 e186"><textual class="po-textual">As we saw at the start of this paper, the Codes have an extensive set of stakeholders all of whom both contribute to and must be kept apprised of development work on the Codes. In addition, once the Codes are adopted by a jurisdiction (province, territory), they acquire legal standing. Until recently, the tracking of each proposed change to the Codes was managed with a MS-Word template like </textual><xref class="po-milestone e187 e187" linkend="pcfword"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. The template shows the original Code text, the proposed change, the rationale for the change, and a variety of administrative and tracking details.</textual></para><figure class="po-container e188 e188" xml:id="pcfword"><title class="po-block e189 e189"><textual class="po-textual">MS-Word Proposed Change Template (heavily edited)</textual></title><mediaobject class="po-container e190 e190"><imageobject class="po-container e191 e191"><imagedata class="po-meta e192 e192" fileref="../../../vol10/graphics/Nordin01/Nordin01-011.png" format="png" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e193 e193"><textual class="po-textual">Keeping the Word templates up to date required a lot of manual work and discipline on the part of the technical committee chairs. In order to provide better process traceability and accountability and to help manage the increased number of documents in production the Canadian Codes Centre implemented a Content Management System (CMS).</textual></para><para class="po-block e194 e194"><textual class="po-textual">The CMS we are using is Interwoven Teamsite. In the CMS, the Word template was replaced with a proper electronic form (the Proposed Change Form or PCF) with work flow, versioning, fielded searching, reporting, and centralized administration - all typical characteristics of a CMS. The new form looks like </textual><xref class="po-milestone e195 e195" linkend="pcfts"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><figure class="po-container e196 e196" xml:id="pcfts"><title class="po-block e197 e197"><textual class="po-textual">Teamsite Proposed Change Form</textual></title><mediaobject class="po-container e198 e198"><imageobject class="po-container e199 e199"><imagedata class="po-meta e200 e200" fileref="../../../vol10/graphics/Nordin01/Nordin01-012.png" format="png" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e201 e201"><textual class="po-textual">This paper is not about the CMS though or even the PCF (which is itself an XML document behind the scenes). I instead want to focus on one aspect of the PCF - the part of the form that contains the text under consideration for change. This corresponds to the second tab in the PCF form: </textual><xref class="po-milestone e202 e202" linkend="pcfcr"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><figure class="po-container e203 e203" xml:id="pcfcr"><title class="po-block e204 e204"><textual class="po-textual">PCF Code Reference Tab</textual></title><mediaobject class="po-container e205 e205"><imageobject class="po-container e206 e206"><imagedata class="po-meta e207 e207" fileref="../../../vol10/graphics/Nordin01/Nordin01-013.png" format="png" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e208 e208"><textual class="po-textual">In </textual><xref class="po-milestone e209 e209" linkend="pcfcr"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, the reference is to an entire article.</textual></para><para class="po-block e210 e210"><textual class="po-textual">As has been hinted at in the sample output shown so far, the Codes documents are highly structured documents following a deep hierarchical model: division/part/section/subsection/article/sentence/clause/subclause in the normative portions of the Codes and a different model for non-normative appendices.</textual></para><para class="po-block e211 e211"><textual class="po-textual">A proposed change might include one or more sentences or higher level constructs (article, subsection, etc.). In the past, the Code text under consideration was cut from a PDF version of the Code document and pasted into the MS-Word PCF template. As anyone who has done this knows, the results can be ugly, especially if the cut text spans a page boundary in the PDF. Quite apart from that problem, the source for the Codes content is maintained as fragments of XML. Converting the source to PDF (for publication), then to Word (the PCF), and then back to XML (for our fragment library including regenerating all the meta data in the XML - IDs, IDREFs, etc.) once changes had been made was largely manual, time-consuming and error-prone. We wanted to try linking the source XML to the Codes revision process somehow so that we could improve the overall throughput, reliability, and integrity of the revision process, at least as far as the content was concerned.</textual></para><para class="po-block e212 e212"><textual class="po-textual">The CMS allows files to be attached to forms so rather than inserting Code text into the form (much like the old Word templates), we decided to attach portions of the XML source to the form. Before I describe our solution, I'll take a short diversion into the XML library that contains the source for the Building Codes document.</textual></para><section class="po-hcontainer e213 e213"><title class="po-block e214 e214"><textual class="po-textual">XML Fragment Library</textual></title><para class="po-block e215 e215"><textual class="po-textual">The XML source for the Codes documents are maintained as a single tree of XML fragments. The leaves contain the bulk of the Codes text (sentences, tables, appendix notes, intent analysis). Higher levels in the tree contain structural information fragments. Tables, appendix notes, and intent analysis fragments are referenced from sentence fragments.</textual></para><para class="po-block e216 e216"><textual class="po-textual">A sample structural fragment looks like:</textual></para><programlisting class="po-block e217 e217" xml:space="preserve"><textual class="po-textual">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE article PUBLIC "-//NRC-IRC//DTD Code_2010//EN"
 "code_2010.dtd" [
&lt;!ENTITY ES000432 SYSTEM "../../../sentence/es/000/es000432.xml"&gt;
&lt;!ENTITY ES000433 SYSTEM "../../../sentence/es/000/es000433.xml"&gt;
]&gt;
&lt;article id="ea000274"&gt;
&lt;title&gt;Group A, Division 2, up to 6 Storeys, Any Area, Sprinklered&lt;/title&gt;
&amp;ES000432;
&amp;ES000433;
&lt;/article&gt;                
            </textual></programlisting><para class="po-block e218 e218"><textual class="po-textual">You can see that the article fragment is little more than a title element followed by entity references to the sentence fragments that make up the article (you can see the SGML heritage here).</textual></para><para class="po-block e219 e219"><textual class="po-textual">One of the sentence fragments in the above article looks like:</textual></para><programlisting class="po-block e220 e220" xml:space="preserve"><textual class="po-textual">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE sentence PUBLIC "-//NRC-IRC//DTD Code_2010//EN"
 "code_2010.dtd"&gt;
&lt;sentence id="es000432"&gt;
&lt;ref.intent xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="ei002082.xml" xlink:title="Intent"/&gt;
&lt;text&gt;A &lt;term refid="bldng"&gt;building &lt;/term&gt; classified as Group A, Division 2, that is
not limited by &lt;term refid="bldng-r"&gt;building area&lt;/term&gt;, is permitted
to conform to &lt;ref.int refid="es000433" type="short"/&gt; provided&lt;/text&gt;
&lt;clause id="es000432a"&gt;
&lt;text&gt;except as permitted by &lt;ref.int pretext="Sentences"
refid="es000398"/&gt; &lt;ref.int pretext="and" refid="es000422"/&gt;, the &lt;term
refid="bldng"&gt;building&lt;/term&gt; is &lt;term refid="prnklrd"&gt;sprinklered&lt;/term
&gt; throughout.&lt;/text&gt;
&lt;/clause&gt;
&lt;/sentence&gt;
            </textual></programlisting><para class="po-block e221 e221"><textual class="po-textual">Each sentence has a corresponding intent analysis which describes why a sentence is important based on a number of objectives and functional requirements. The XLink information points to intent analysis fragments. Appendix notes can be included at any level in the document hierarchy and contain explanatory text, figures, examples, and equations. All content includes many cross-references to other parts of the document (see the ref.int elements above).</textual></para><para class="po-block e222 e222"><textual class="po-textual">The XML fragment library is a directory. The leaf filenames are the same as the ID attribute on that fragment and the IDs capture the semantics of the directory structure. This will be important later.</textual></para></section><section class="po-hcontainer e223 e223"><title class="po-block e224 e224"><textual class="po-textual">Linking the XML Library to the CMS</textual></title><para class="po-block e225 e225"><textual class="po-textual">Clearly, the technical committee chairs could not be expected to know the XML fragment ID of a block of content that they needed to attach to a form. We needed some sort of selection process to allow for easier content selection. Apart from allowing a more useful selection process, we also wanted to ensure that the content we built to attach to the form included everything that a technical committee might need to know about that content in order to amend it. This meant that we not only needed the Code text, but also the intent analysis for each sentence and any appendix notes that applied to the attached text. The old Word forms did not impose any such discipline and so portions of the Codes document were sometimes overlooked during the revision cycle. We called the content blobs composite fragments (CFs). A special version of the main Codes DTD allows for the structure of the composite fragments. </textual></para><para class="po-block e226 e226"><textual class="po-textual">The CMS form editor supports changes to the PCF form made by the committee chairs directly or a side effect of a work flow process. The composite fragments though have to be edited separately as the Teamsite CMS does not understand XML at the level we need. We added a feature to the PCF form that put an "edit" button beside each attached composite fragment. Clicking "edit" will cause the CMS to push the composite fragment down to a local workstation from the CMS server and start up Arbortext on that composite fragment. When an editing session is complete, the edited composite fragment is copied back up to the server.</textual></para><para class="po-block e227 e227"><textual class="po-textual">The mechanism that supports the creation of the composite fragments is
                interesting. Our CMS is a web server based application. Custom Javascript and
                server-side CGI scripts can be used to extend the basic CMS functionality. However,
                we took a different route to integrate our XML fragment library with the CMS. We
                built a separate web server (the DSF Server) to sit between the CMS and the XML
                fragment library. The following diagram shows the main moving parts in our system
                (</textual><xref class="po-milestone e228 e228" linkend="arch"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">):</textual></para><figure class="po-container e229 e229" xml:id="arch"><title class="po-block e230 e230"><textual class="po-textual">System Architecture</textual></title><mediaobject class="po-container e231 e231"><imageobject class="po-container e232 e232"><imagedata class="po-meta e233 e233" fileref="../../../vol10/graphics/Nordin01/Nordin01-014.png" format="png" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e234 e234"><textual class="po-textual">The DSF Server follows the REST architecture. Javascript or CGI scripts on the CMS
                send URLs to the DSF Server which responds with documents or pointers to documents.
                So, for example, if a technical committee chair wanted to attach a sentence from the
                National Plumbing Code to an open PCF, the CMS sends a URL to our DSF server, the
                server creates the composite fragment and returns it to the CMS. The PCF form then
                gets updated with a link to the composite fragment file.</textual></para><para class="po-block e235 e235"><textual class="po-textual">The DSF Server relies on a custom NoSQL database to resolve which XML fragments should be used to populate the composite fragment. This initial content is then parsed for references to other material that must be included in the composite fragment until we have a complete package of content, appendix notes, and intent statements.</textual></para><para class="po-block e236 e236"><textual class="po-textual">A useful side-effect of our DSF Server architecture is that it isolates  the XML fragment library and all our fragment processing from the CMS itself. If the CMS is upgraded or even replaced, we retain all the composite fragment functionality unchanged.</textual></para></section><section class="po-hcontainer e237 e237"><title class="po-block e238 e238"><textual class="po-textual">PCF Rendering</textual></title><para class="po-block e239 e239"><textual class="po-textual">The PCF form (and the composite fragment editing) is useful but we also need to render the forms so that the technical committees can see all the information presented in context from both the PCF form and the attached composite fragments. We render to HTML, PDF and MHT depending on the downstream use. Most of the rendering code comes from the code that was developed to render our Codes to HTML for the NXT CD deliverable in 2006. A small amount of rendering code was added to support the material in the PCF form itself. A rendered PCF form (edited for presentation) looks like </textual><xref class="po-milestone e240 e240" linkend="pcf"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><figure class="po-container e241 e241" xml:id="pcf"><title class="po-block e242 e242"><textual class="po-textual">Rendered Proposed Change Form</textual></title><mediaobject class="po-container e243 e243"><imageobject class="po-container e244 e244"><imagedata class="po-meta e245 e245" fileref="../../../vol10/graphics/Nordin01/Nordin01-015.png" format="png" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e246 e246"><textual class="po-textual">The existing provision section shows that the referenced appendix note has been added to the composite fragment to ensure that a technical committee will consider it in their deliberations. The appendix note does not render in the proposed change section as no changes have been made (yet) and so we suppress its display (more on this below).</textual></para><para class="po-block e247 e247"><textual class="po-textual">Of no small interest, Arbortext supports change tracking while editing, like all good editors. The technical committees wanted to preserve the change tracking in the composite fragments attached to the PCF and display the changes in the rendered PCF. Arbortext change tracking causes new elements to be added to the XML file being edited. The elements are embedded in the edited XML file until such time as a document editor accepts the changes. The change tracking elements are not part of the document model (DTD, Schema) for the XML document - Arbortext deals with them appropriately. However, since the added elements change the element hierarchy in the XML document, any processing that is based on an assumption about the element hierarchy as modeled in the DTD (or Schema) will no longer work. In fact, Arbortext does not recommend working directly with XML files containing change tracking elements.</textual></para><para class="po-block e248 e248"><textual class="po-textual">Our solution to handle change tracking display, developed after several false
                starts, was to introduce a rendering preprocessing step that converted the Arbortext
                change tracking elements into change tracking attributes on every element wrapped by
                the change tracking element. We then strip out the change tracking elements,
                restoring the document to its model conformant state, so we can render it correctly.
                A composite fragment with change tracking like this (clause 'b' in </textual><xref class="po-milestone e249 e249" linkend="ct"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">):</textual></para><programlisting class="po-block e250 e250" xml:space="preserve"><textual class="po-textual">
&lt;atict:add user="U2"&gt;
    &lt;clause id="es001725b" cnum="b*"&gt;
        &lt;text&gt;
            &lt;atict:del user="U1"&gt;comply with Sentence 6.3.1.1.(2)-2015 and&lt;/atict:del&gt;
            &lt;atict:add user="U1"&gt;they are separated a minimum distance from sources
of contaminants in accordance with &lt;/atict:add&gt;Table 6.2.3.12&lt;atict:adduser="U1"&gt;.&lt;/atict:add&gt;
            &lt;atict:del user="U1"&gt; for minimum distances.&lt;/atict:del&gt;
        &lt;/text&gt;
    &lt;/clause&gt;
&lt;/atict:add&gt;
            </textual></programlisting><para class="po-block e251 e251"><textual class="po-textual">Will ultimately display like </textual><xref class="po-milestone e252 e252" linkend="ct"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> (a more complete example of change tracking output).</textual></para><figure class="po-container e253 e253" xml:id="ct"><title class="po-block e254 e254"><textual class="po-textual">Change Tracking</textual></title><mediaobject class="po-container e255 e255"><imageobject class="po-container e256 e256"><imagedata class="po-meta e257 e257" fileref="../../../vol10/graphics/Nordin01/Nordin01-016.png" format="png" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e258 e258"><textual class="po-textual">There are two sets of sequence numbers in the generated PCF output. The rightmost set are the sequence numbers that the content had when it was published and the left most set are generated on the fly as the PCF is rendered. The former set helps tie discussions back to the original published documents and the latter provide context for discussions about changes. Note that the two clauses shown in </textual><xref class="po-milestone e259 e259" linkend="ct"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> are new and therefore have no original numbers (shown as "--)"). The new numbers are critical in situations like this.</textual></para><para class="po-block e260 e260"><textual class="po-textual">We preserve the "user" attributes from the Arbortext change tracking elements as classes in the HTML output. This has allowed us to experiment with presenting the change tracking output differently for each user or class of users so that we can distinguish changes made by an editor from those made by a technical committee for example. If you look carefully at </textual><xref class="po-milestone e261 e261" linkend="ct"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> you can see this in the shaded content. This represents changed material altered by one of the Codes editors. The unshaded changed material was altered by a technical committee chair.</textual></para><para class="po-block e262 e262"><textual class="po-textual">Aside from rendering the change tracking visually, the rendering code exploits the
                change tracking attributes to suppress content in the output. In general we try to
                suppress content that is unchanged so that technical committees, editors, and
                translators can focus on material that has changed. For example, if an article has
                no changes, we will render just the article title to provide some context while
                allowing the technical committees to focus on more relevant material. We are still
                in the early stages of content suppression based on change tracking and we are
                trying to avoid having to deal with requests like "Show me only what I want to see
                at the moment."</textual></para></section><section class="po-hcontainer e263 e263"><title class="po-block e264 e264"><textual class="po-textual">Bursting</textual></title><para class="po-block e265 e265"><textual class="po-textual">Once a Code change has been approved, the XML in the composite fragment attached to the PCF must be returned to the XML library. Since the composite fragment is a single document, we need to burst the composite fragment back into its component pieces (sentences, tables, structural fragments, appendix notes, etc.). The ID attribute semantics tells us what filenames and file paths we need to create for the burst output. For example an ID on a sentence like:</textual></para><programlisting class="po-block e266 e266" xml:space="preserve"><textual class="po-textual">es000001</textual></programlisting><para class="po-block e267 e267"><textual class="po-textual">indicates that this is an English ('e') sentence ('s') with a filename of 'es000001.xml' stored in the XML fragment tree at</textual></para><programlisting class="po-block e268 e268" xml:space="preserve"><textual class="po-textual">library/sentence/es/000/es000001.xml</textual></programlisting><para class="po-block e269 e269"><textual class="po-textual">Bursting also recreates the structural fragments as necessary.</textual></para><para class="po-block e270 e270"><textual class="po-textual">Our bursting process exploits the semantics of the IDs in the composite fragment not only to burst the composite fragment, but also to do a number of internal consistency checks on the composite fragment to help ensure that the burst fragments will be properly linked together. We do not burst the composite fragments directly back into the XML fragment library to allow for final validity and consistency checking on the burst pieces.</textual></para></section></section><section class="po-hcontainer e271 e271"><title class="po-block e272 e272"><textual class="po-textual">Bonus Features</textual></title><para class="po-block e273 e273"><textual class="po-textual">In order to help sell the CMS and in particular the necessity of using an XML editor for the Codes content attached to the PCF form we came up with a couple of interesting (and we hoped addictive) outputs that would have been nearly impossible to do from an MS-Word input. The two features that we built are side-by-side rendering and something we call consolidated print.</textual></para><section class="po-hcontainer e274 e274"><title class="po-block e275 e275"><textual class="po-textual">Side by Side Output</textual></title><para class="po-block e276 e276"><textual class="po-textual">The Codes documents are issued in French and English (Canada is officially bilingual). The primary language for Codes development is English, but anything that is made available during the Codes development cycle to the public must be translated. In order to check translations, it is very useful to be able to line up French and English versions beside each other. French text is often longer than English text so simply printing French and English documents side by side will not help.</textual></para><para class="po-block e277 e277"><textual class="po-textual">We developed code that takes our rendered PCF output, in French and English, and pours the parts of the two documents into a two-column HTML table. Our rendered HTML contains sufficient semantic information about what each part of the document is (via CSS classes) that we can easily  match the French and English text and output appropriate bits into each table row. The browser table layout algorithms then do all the heavy lifting for us by lining up each row in the output table. The side-by-side output looks like </textual><xref class="po-milestone e278 e278" linkend="sbs"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><figure class="po-container e279 e279" xml:id="sbs"><title class="po-block e280 e280"><textual class="po-textual">Side by Side</textual></title><mediaobject class="po-container e281 e281"><imageobject class="po-container e282 e282"><imagedata class="po-meta e283 e283" fileref="../../../vol10/graphics/Nordin01/Nordin01-017.png" format="png" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure></section><section class="po-hcontainer e284 e284"><title class="po-block e285 e285"><textual class="po-textual">Consolidated Print</textual></title><para class="po-block e286 e286"><textual class="po-textual">During the course of a (typically) 5 year development cycle, there can be several hundred proposed changes to the Codes in play. Often a group of changes will affect the same part of the Code document. The fine granularity of the proposed changes mean that it can be difficult to see the overall picture of what a Codes document would look like while it is under development. It is also possible for different technical committees to be working in the same area of the Codes. There is potential for changes to be made that are inconsistent.</textual></para><para class="po-block e287 e287"><textual class="po-textual">We developed some code called consolidated print that allows for any portion of a Codes document to be rendered including any proposed changes that are open against that portion of the document. The code was built into the DSF Server as a new REST URL call. The following is an example of what the consolidated output looks like (see </textual><xref class="po-milestone e288 e288" linkend="cprint"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).</textual></para><figure class="po-container e289 e289" xml:id="cprint"><title class="po-block e290 e290"><textual class="po-textual">Consolidated Print</textual></title><mediaobject class="po-container e291 e291"><imageobject class="po-container e292 e292"><imagedata class="po-meta e293 e293" fileref="../../../vol10/graphics/Nordin01/Nordin01-018.png" format="png" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e294 e294"><textual class="po-textual">The non-shaded text is the original Codes text. There are 3 proposed changes in
                play against the original article (PCFs 663, 670 and 702). PCF 663 is proposing a
                change to the article title, adding a reference to an appendix note and introducing
                a new sentence 1. PCF 670 preserves the original title and PCF 702 duplicates the
                title change but omits the appendix note reference. The consolidated output
                interleaves the original text with all outstanding proposed changes at the sentence
                level which offers a very clear view of the state of the document at any
                time.</textual></para></section></section><section class="po-hcontainer e295 e295"><title class="po-block e296 e296"><textual class="po-textual">Tools</textual></title><para class="po-block e297 e297"><textual class="po-textual">The main tools that we have in our toolbox are:</textual></para><itemizedlist class="po-table e298 e298"><listitem class="po-container e299 e299"><para class="po-block e300 e300"><textual class="po-textual">XSLT - Saxon and libxslt</textual></para></listitem><listitem class="po-container e301 e301"><para class="po-block e302 e302"><textual class="po-textual">Python - The DSF server and composite fragment bursting code is implemented in Python</textual></para></listitem><listitem class="po-container e303 e303"><para class="po-block e304 e304"><textual class="po-textual">CherryPy - This framework provides an excellent web server template for Python programs</textual></para></listitem><listitem class="po-container e305 e305"><para class="po-block e306 e306"><textual class="po-textual">lxml - A Python wrapper for the Gnome project libxml2 and libxslt libraries</textual></para></listitem><listitem class="po-container e307 e307"><para class="po-block e308 e308"><textual class="po-textual">libxml2 - The Gnome project XML parser</textual></para></listitem><listitem class="po-container e309 e309"><para class="po-block e310 e310"><textual class="po-textual">libxslt - The Gnome project XSLT and XPath library</textual></para></listitem><listitem class="po-container e311 e311"><para class="po-block e312 e312"><textual class="po-textual">Interwoven Teamsite - The CMS</textual></para></listitem><listitem class="po-container e313 e313"><para class="po-block e314 e314"><textual class="po-textual">Perl - The extension language of choice for the CMS</textual></para></listitem><listitem class="po-container e315 e315"><para class="po-block e316 e316"><textual class="po-textual">PrinceXML - To handle HTML to PDF conversion</textual></para></listitem><listitem class="po-container e317 e317"><para class="po-block e318 e318"><textual class="po-textual">HTML Tidy - To convert XHTML to backwards compatible HTML</textual></para></listitem></itemizedlist></section><section class="po-hcontainer e319 e319"><title class="po-block e320 e320"><textual class="po-textual">Final Thoughts</textual></title><para class="po-block e321 e321"><textual class="po-textual">I hope this has been an interesting markup focused tour through the Canadian Building
            Codes. I have tried to capture breadth rather than depth in my discussions. If anything
            I have mentioned seems lacking in detail or simply piques your curiousity, please feel
            free to follow up with me. Similarly, if things as presented seem the product of
            unusually prescient designers, I would be more than happy to explain the role played by
            luck and hard work in our efforts.</textual></para><para class="po-block e322 e322"><textual class="po-textual">Since the Codes content was converted to SGML in 1995 we have been able to produce a range of output products without having to migrate the data or lose any data fidelity. We are also finding new ways to process the content to support content maintenance. Along the way, we have been able to make use of current software notions like REST, and NoSQL databases - we are teaching old data new tricks.</textual></para><para class="po-block e323 e323"><textual class="po-textual">All of our processing relies on complex markup that captures the semantics of the
            data. Our processing also makes heavy use of transient metadata (embedded as attributes
            on elements or as processing instructions) with varying lifetimes. A data format, like
            XML, that allows us to easily distinguish metadata from content has been critical to
            much of our work.</textual></para><para class="po-block e324 e324"><textual class="po-textual">The Canadian Building Codes started life well before me and will live on long after I'm gone. This makes aircraft documentation (with which I have a more than passing acquaintance) look fleeting in comparison. It is a great adventure to work in such an environment.</textual></para></section></article></classedDocument>