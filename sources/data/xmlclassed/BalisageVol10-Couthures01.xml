<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.3"><title class="po-block e1 e1"><textual class="po-textual">My document object model can do more than yours</textual></title><subtitle class="po-block e2 e2"><textual class="po-textual">Extending the DOM for data manipulation</textual></subtitle><info class="po-record e3 e3"><confgroup class="po-record e4 e4"><conftitle class="po-field e5 e5"><textual class="po-textual">Balisage: The Markup Conference 2013</textual></conftitle><confdates class="po-field e6 e6"><textual class="po-textual">August 6 - 9, 2013</textual></confdates></confgroup><abstract class="po-container e7 e7"><para class="po-block e8 e8"><textual class="po-textual">Document object models, specifically the browser DOM, were
      designed to represent HTML and XML documents. Languages such as XPath
      were designed to access and traverse the DOM of HTML and XML documents.
      But suppose we wanted to bring the power and convenience of XML
      technologies like XPath to new data types. Could we extend the DOM to
      support CSV files? JSON? ZIP files? Yes we can! This paper explores a
      number of ways in which the DOM can be made to do more. We can loosen
      restrictions, describe new sequence types, and even define new XPath
      axes to make the DOM better and more useful.</textual></para></abstract><author class="po-record e9 e9"><personname class="po-record e10 e10"><firstname class="po-field e11 e11"><textual class="po-textual">Alain</textual></firstname><surname class="po-field e12 e12"><textual class="po-textual">Couthures</textual></surname></personname><personblurb class="po-container e13 e13"><para class="po-block e14 e14"><textual class="po-textual">Alain Couthures is the project leader for XSLTForms which is a
        client-side XForms implementation based on XSLT and Javascript. He is
        an Invited Expert in the W3C Forms Working Group.</textual></para></personblurb><email class="po-field e15 e15"><textual class="po-textual">alain.couthures@agencexml.com</textual></email></author><legalnotice class="po-container e16 e16"><para class="po-block e17 e17"><textual class="po-textual">This work is made available under a Creative Commons Attribution 3.0 License (</textual><link class="po-inline e18 e18" xlink:actuate="onRequest" xlink:href="http://creativecommons.org/licenses/by/3.0/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://creativecommons.org/licenses/by/3.0/</textual></link><textual class="po-textual">).</textual></para></legalnotice></info><section class="po-hcontainer e19 e19"><title class="po-block e20 e20"><textual class="po-textual">Introduction</textual></title><para class="po-block e21 e21"><textual class="po-textual">XML is well-known for two major uses: documents and data exchange.
    Actually, any XML "document" can also be considered as a small consistent
    database. As an example, an invoice requires many tables to be described
    while one XML document is enough for this.</textual></para><para class="po-block e22 e22"><textual class="po-textual">For small amount of data, an XML "document" is usually parsed in
    memory and the DOM API is a common library to manipulate its contents
    within browsers or in Microsoft environments (MSXML, .Net) or in PHP. DOM
    Level 1 was quite limited and was designed for HTML. DOM became
    namespace-aware with DOM2. The latest version of DOM is Level 3 and it has
    be published in 2004. There is a quite recent working draft for DOM4 (6
    December 2012).</textual></para><para class="po-block e23 e23"><textual class="po-textual">There are many critics about the DOM API, probably because it is
    clearly a low-level interface and because complexifying it for full XML
    support was out of interest for HTML-only fans. The DOM structure is also
    not fully appropriate for building an XPath engine (presence of CDATA and
    entities nodes and lack of namespaces nodes) as defined in XDM.</textual></para><para class="po-block e24 e24"><textual class="po-textual">As a matter of fact, DOM3 has not been fully implemented in browsers
    and DOM4 might loose vital functionnalities for building an XPath engine
    with it, such as attributes not been nodes anymore.</textual></para><para class="po-block e25 e25"><textual class="po-textual">XForms 1.0, and later XForms 1.1, has been designed for editing XML
    instances with a browser when embedded in an HTML page. XForms is based on
    XPath and any XForms implementation requires extra features about nodes
    such as properties ("validity", "relevant", "read-only", ...) which cannot
    be found in native DOM implementations in browsers. There are also extra
    XPath functions, such as "instance()", "index()", "event()", defined in
    XForms specifications while XPath engines in browser cannot be extended.
    That is why XSLTForms, a client-side XForms implementation, has its own
    XPath engine written in Javascript and that is why its ancestor project,
    AJAXForms, had even also its own DOM implementation. It was chosen to use
    native XML storage in XSLTForms for performance and for eprouved
    compliance when serializing XML instances with multiple namespaces. Today,
    this has to be reconsidered.</textual></para><para class="po-block e26 e26"><textual class="po-textual">XForms 2.0 is not limited to XML editing. At least, CSV and JSON are
    also supported. The question for an XForms implementer is how to integrate
    these notations at low level for keeping XPath use at authors'
    level.</textual></para><para class="po-block e27 e27"><textual class="po-textual">CSV format might seem to be an old format but it is still used in
    many import/export functions of applications. For relational databases, a
    CSV file is a natural table content.</textual></para><para class="po-block e28 e28"><textual class="po-textual">Mapping JSON in XML and preserving XPath expressions readability is
    not easy. Many attempts have already been done but there is not yet an
    agreement about one in particular for each different situation.</textual></para><para class="po-block e29 e29"><textual class="po-textual">This paper is describing that, with few extensions, CSV and JSON can
    be loaded in an extended DOM structure so an XPath engine can manipulate
    them immediately.</textual></para><para class="po-block e30 e30"><textual class="po-textual">There are yet more challenging notations or file formats which can
    be of interest for authors. Typically, applications with a light server
    side or offline applications want to manipulate files, not just data in
    exchange notation. Many of them are binary formats and they can now be
    manipulated within browsers with Javascript. The most common ones are
    text-processing documents or spreadsheets in a ZIP package.</textual></para><para class="po-block e31 e31"><textual class="po-textual">Possibilities are numerous. For XQuery implementors and developers,
    XQuery instructions might also be parsed into a DOM structure as if there
    was an XQueryX source. Programming languages are defined according to a
    grammar and a grammar is similar to an XML Schema for text sources. For
    Apache administrators, httpd.conf file and log files have a format which
    can be loaded into a DOM structure. There are also emerging notations
    which are simpler or richer than XML and they can surely be parsed and
    stored in an extended DOM structure.</textual></para><para class="po-block e32 e32"><textual class="po-textual">A bigger challenge is to use a DOM structure not only for a tree or
    a forest of trees (such as a document with multiple document elements) but
    for graphs. A navigational approach can be obtained with named axes: the
    data designer can specify different sets of children for a node, each one
    being assigned a name.</textual></para><para class="po-block e33 e33"><textual class="po-textual">A non-planar structure is even possible within a DOM structure, the
    difficulties being about internal ids to be used when parsing and
    serializing. But this is already done by developers with workarounds and a
    way to standardize this would be appreciated.</textual></para></section><section class="po-hcontainer e34 e34"><title class="po-block e35 e35"><textual class="po-textual">Node names</textual></title><para class="po-block e36 e36"><textual class="po-textual">Most data engines (such as relational databases, CSV, JSON,...)
    don't have restrictions for names: any character is possible and an
    enclosing delimiter is used in the corresponding query languages to ensure
    there will be no mismatch. For example, MySQL uses the back-quote
    character, MS-Access uses square brackets. Names without restrictions are
    clearly more user-friendly. XML 1.1 extended possibilities for names but
    was not implemented much...</textual></para><para class="po-block e37 e37"><textual class="po-textual">For the DOM, a name is stored within a string: there is no
    restriction for names due to the DOM structure.</textual></para><para class="po-block e38 e38"><textual class="po-textual">Quote, apostrophe, brackets, angular brackets, parenthesis are
    already used in XML and XPath. So, the back-quote character is a good
    candidate for this purpose:</textual></para><programlisting class="po-block e39 e39" xml:space="preserve"><textual class="po-textual">`+` is now a valid node name in XPath</textual></programlisting><para class="po-block e40 e40"><textual class="po-textual">Encoding within a name is still required in XML and XPath for
    special characters (new line, quotes,...). Those characters can easily be
    escaped as entities.</textual></para><programlisting class="po-block e41 e41" xml:space="preserve"><textual class="po-textual">`&amp;amp;` stands for an ampersand character
`&amp;#10;` stands for a newline character</textual></programlisting></section><section class="po-hcontainer e42 e42"><title class="po-block e43 e43"><textual class="po-textual">Multiple document type nodes and multiple document elements</textual></title><para class="po-block e44 e44"><textual class="po-textual">Multiple document type nodes can be very useful within a ZIP package
    because each ZIP component might have its own document properties (media
    type, encoding, ...).</textual></para><para class="po-block e45 e45"><textual class="po-textual">Multiple document elements is a pertinent feature for many formats
    for which serializers don't guarantee that the end of the contents has be
    reached. This is even an advantage to allow data to be added at the end
    without breaking a well-formed rule. Is it still interesting to always
    double check that all data has been received?</textual></para><para class="po-block e46 e46"><textual class="po-textual">Those two extensions do not require the DOM structure to be
    modified. They impact the parser and the serializer. Methods of the DOM
    API, such as appendChild and so on, have to accept them.</textual></para><para class="po-block e47 e47"><textual class="po-textual">For JSON:</textual></para><programlisting class="po-block e48 e48" xml:space="preserve"><textual class="po-textual">{a: "Hello", b: "World"}

 becomes

document( 
  element("a",
    text("Hello")
  ),
  element("b",
    text("World")
  )
)</textual></programlisting></section><section class="po-hcontainer e49 e49"><title class="po-block e50 e50"><textual class="po-textual">Sequence Node Type</textual></title><para class="po-block e51 e51"><textual class="po-textual">Manipulation of an ordered set of data is possible in many formats.
    For example, JSON allows "arrays" which can be embedded.</textual></para><para class="po-block e52 e52"><textual class="po-textual">There is a known trick when converting a named JSON array into XML:
    just iterate as many elements with the array name. Luckily, even the
    bracket notation is similar in XPath because of the shortcut for
    "[position() = n]". But there are also anonymous arrays in JSON, empty
    arrays and arrays with a unique item. So, this trick is not enough and
    extra meta data becomes mandatory.</textual></para><para class="po-block e53 e53"><textual class="po-textual">Support of a new node type is enough to deal with ordered sets. This
    could be named "Sequence Node Type" because of sequences defined in XPath,
    even if XPath does not allow embedded sequences.</textual></para><para class="po-block e54 e54"><textual class="po-textual">A sequence node can be seen as an element without a name and without
    attributes. Instead of defining such a new node type, it could also be
    considered to allow elements without a name but this would interfere
    within XPath expressions with a selector such as '*'.</textual></para><para class="po-block e55 e55"><textual class="po-textual">It could also be compared to a document fragment being stored with
    the structure instead of just being a temporary embedding node. It would
    then be necessary to add a parameter to each method accepting a document
    fragment to specify whether the document fragment node should be dropped
    or not.</textual></para><para class="po-block e56 e56"><textual class="po-textual">Since a sequence node type is corresponding to a specific need, it
    is better to define a new node type.</textual></para><programlisting class="po-block e57 e57" xml:space="preserve"><textual class="po-textual">["a", "b"] becomes
document( sequence( text("a"), text("b") ) )</textual></programlisting><para class="po-block e58 e58"><textual class="po-textual">It is more problematic to choose a notation in XPath for such
    nodes:</textual></para><itemizedlist class="po-table e59 e59"><listitem class="po-container e60 e60"><para class="po-block e61 e61"><textual class="po-textual">"sequence()" such as in "text()"?</textual></para></listitem><listitem class="po-container e62 e62"><para class="po-block e63 e63"><textual class="po-textual">"#" or "(-)" as a shortcut?</textual></para></listitem></itemizedlist><programlisting class="po-block e64 e64" xml:space="preserve"><textual class="po-textual">"#/text()[1]" returns "a" for ["a", "b"]</textual></programlisting></section><section class="po-hcontainer e65 e65"><title class="po-block e66 e66"><textual class="po-textual">Typed-value Node Type</textual></title><para class="po-block e67 e67"><textual class="po-textual">In DOM3, just elements and attributes can have a data type as
    property and nodes with effective values are only text nodes.</textual></para><para class="po-block e68 e68"><textual class="po-textual">This is not enough for JSON because stand-alone values are possible.
    The following JSON expressions are valid:</textual></para><programlisting class="po-block e69 e69" xml:space="preserve"><textual class="po-textual">[1, true]

null

2.154E-7

["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]</textual></programlisting><para class="po-block e70 e70"><textual class="po-textual">Every value in JSON has a data type and JSON allows numbers,
    strings, booleans and null. From the Javascript point of view, because
    JSON data is directly evaluated, JSON can even contain expressions: for
    example,date object creations are possible.</textual></para><para class="po-block e71 e71"><textual class="po-textual">In CSV, no type is specified and, commonly, a spreadsheet processor
    will try to associate the most fitting type for each value. Import tools
    help users to manually force a type for a column.</textual></para><para class="po-block e72 e72"><textual class="po-textual">But, because the number of header lines is not limited to just one
    line, it is also a possible trick to associate a type to each CSV column
    within the header (when column names are unknown, an empty line can be
    used). For example:</textual></para><programlisting class="po-block e73 e73" xml:space="preserve"><textual class="po-textual">
xs:anyURI,xs:gYear,xs:positiveInteger
http://en.wikipedia.org/wiki/Afghanistan,1960,9616353
http://en.wikipedia.org/wiki/Afghanistan,1961,9799379
http://en.wikipedia.org/wiki/Afghanistan,1962,9989846
http://en.wikipedia.org/wiki/Afghanistan,1963,10188299</textual></programlisting><para class="po-block e74 e74"><textual class="po-textual">As a consequence, for a DOM structure to be used to store JSON or
    CSV data, the text node type is not enough and a new node type has to be
    defined for a typed value.</textual></para><programlisting class="po-block e75 e75" xml:space="preserve"><textual class="po-textual">42 becomes
value("xsd:decimal", 42)</textual></programlisting><programlisting class="po-block e76 e76" xml:space="preserve"><textual class="po-textual">{ a: 42, b: "Hello"} becomes
document( element("a", value("xsd:decimal", 42) ), element("b", value("xsd:string", "Hello") ) )</textual></programlisting><para class="po-block e77 e77"><textual class="po-textual">This has not to be limited to XSD types and really binary types (not
    xsd:hexBinary nor xsd:base64Binary) are required in different situations
    such as ZIP packages with embedded images like in, for example, OpenXML
    files (.xlsx, .docx,...).</textual></para></section><section class="po-hcontainer e78 e78"><title class="po-block e79 e79"><textual class="po-textual">Named axes</textual></title><para class="po-block e80 e80"><textual class="po-textual">Attributes can be considered as low-level elements but there are
    advantages at using them because they are clearly separated from children
    nodes. As a consequence, whether they are present or not, they do not
    interfere when calling XPath nodeset functions upon children. For XPath,
    attributes are accessed with a dedicated axis ("attribute::", with "@" as
    the well-known shorcut). So, in a sense, there are possibly two distinct
    sub-trees under an element.</textual></para><programlisting class="po-block e81 e81" xml:space="preserve"><textual class="po-textual">&lt;person firstname="Paul" lastname="Verdier" &gt;
  &lt;address&gt;17 rue de Rivoli&lt;/address&gt;
  &lt;address&gt;75001 Paris&lt;/address&gt;
  &lt;address&gt;France&lt;/address&gt;
&lt;/person&gt;

could also be serialized as

&lt;person&gt;
  &lt;attribute::firstname&gt;Paul&lt;/attribute::firstname&gt;
  &lt;attribute::lastname&gt;Verdier&lt;/attribute::lastname&gt;
  &lt;address&gt;17 rue de Rivoli&lt;/address&gt;
  &lt;address&gt;75001 Paris&lt;/address&gt;
  &lt;address&gt;France&lt;/address&gt;
&lt;/person&gt;</textual></programlisting><para class="po-block e82 e82"><textual class="po-textual">Allowing developers to define named axes means that an element can
    have multiple children in a specific context which might also be seen as a
    relationship. The name for the axis is the name of the relationship. The
    resulting structure can be compared to the navigational CODASYL database
    model.</textual></para><para class="po-block e83 e83"><textual class="po-textual">This point is not at all difficult to implement (a map of arrays for
    children instead of a unique array) and a corresponding syntax for XPath
    can easily be defined ("child(axis-name)::" for example).</textual></para><para class="po-block e84 e84"><textual class="po-textual">For XML-like serialization, the list of axes could precede the name
    of an element child:</textual></para><programlisting class="po-block e85 e85" xml:space="preserve"><textual class="po-textual">&lt;product&gt;
  &lt;designer::person&gt;Peter&lt;/designer::person&gt;
  &lt;user::person&gt;Jack&lt;/user::person&gt;
  &lt;user::person&gt;Emily&lt;/user::person&gt;
&lt;/product&gt;</textual></programlisting><para class="po-block e86 e86"><textual class="po-textual">When multiple parents are allowed, the structure looks like in the
    network CODASYL database model.</textual></para><para class="po-block e87 e87"><textual class="po-textual">A use case for XML developers is embedding in the same document data
    and specific data types declarations (in the same approach, fonts can be
    embedded within a PDF file). This is possible with the data document
    element and the schema document element being at the top level.</textual></para><para class="po-block e88 e88"><textual class="po-textual">Serialization is more clumsy with a network data model: a child
    element cannot be serialized under each parent element. A specific
    notation can be used to list links such as in multipart messages. This
    will be less human-friendly but XML documents are not often generated
    manually and serialization might be seen as just a way to exchange a
    database.</textual></para><para class="po-block e89 e89"><textual class="po-textual">For example:</textual></para><programlisting class="po-block e90 e90" xml:space="preserve"><textual class="po-textual">&lt;person&gt;
  &lt;attribute::email&gt;
    &lt;attribute::xsi:type xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#email_type"/&gt;
    paul.verdier@rivoli.fr
  &lt;/attribute::email&gt;
&lt;/person&gt;
&lt;xs:simpleType xmlns:xs="http://www.w3.org/2001/XMLSchema" id="email_type"&gt;
  &lt;xs:restriction base="xsd:string"&gt;
    &lt;xs:pattern value="(\w[-._\w]*\w@\w[-._\w]*\w\.\w{2,3})"/&gt;
  &lt;/xs:restriction&gt;
&lt;/xs:simpleType&gt;</textual></programlisting></section><section class="po-hcontainer e91 e91"><title class="po-block e92 e92"><textual class="po-textual">Parsing and serializing</textual></title><para class="po-block e93 e93"><textual class="po-textual">Currently, with the Javascript DOMParser class, only XML and,
    eventually HTML and SVG documents can be parsed in a browser and the
    corresponding mediatype is to be provided as a parameter for the
    parseFromString() method.</textual></para><para class="po-block e94 e94"><textual class="po-textual">Extending support for other media types such as "text/csv" and
    "application/json" allows CSV and JSON being loaded in a DOM structure.
    XSLTForms now supports CSV/XML and JSON/XML conversions written in
    Javascript.</textual></para><para class="po-block e95 e95"><textual class="po-textual">For other formats, a third parameter can be the grammar to be used
    to generate the corresponding tree.</textual></para><para class="po-block e96 e96"><textual class="po-textual">Because data cannot always be stored as a string (binary data, for
    example), another method has also to be defined, such as
    parseFromUint32Array. This allows media types such as "application/zip"
    for ZIP packages to be supported. This has already been prototyped in
    XSLTForms with the zip_inflate and zip_deflate Javascript functions
    written by Masanao Izumo (</textual><link class="po-inline e97 e97" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.onicos.com/staff/iz/amuse/javascript/expert/</textual></link><textual class="po-textual">)
    and there is no performance issue with standard MS-Excel or MS-Word
    files.</textual></para><para class="po-block e98 e98"><textual class="po-textual">When serializing, some links could be internal links. It could be
    possible to add id attributes when required but another mechanism should
    be provided, a sort of internal ids such as keys in XSLT, with its
    specific notation such as internal:key.</textual></para><para class="po-block e99 e99"><textual class="po-textual">Of course, exceptions will be fired because not all DOM structures
    can be serialized in any format. There might be different workarounds to
    serialize a DOM structure in a different media type without data
    loss.</textual></para></section><section class="po-hcontainer e100 e100"><title class="po-block e101 e101"><textual class="po-textual">Conclusion</textual></title><para class="po-block e102 e102"><textual class="po-textual">Trees are everywhere and they can even store links to represent
    graphs. XML notation is a convenient way to serialize not-so-limited trees
    but people can consider that it is too verbeous. The real point is the
    power in data description and data manipulation.</textual></para><para class="po-block e103 e103"><textual class="po-textual">The DOM structure is already used by browsers as an XML Data Model.
    Extending the DOM for non-XML data manipulation is not really difficult
    and XPath is not heavily affected. The resulting structure can support
    plenty of existing data formats. Because it is a low level component,
    upper layers can immediately benefit of it without significant
    modifications.</textual></para><para class="po-block e104 e104"><textual class="po-textual">XSLTForms is directly concerned by an extended DOM implementation
    written in Javascript. It is a good opportunity to easily prototype and
    test new features. This implementation is currently in development and it
    already has its own name: "Fleur".</textual></para></section><bibliography class="po-hcontainer e105 e105"><title class="po-block e106 e106"><textual class="po-textual">Bibliography</textual></title><bibliomixed class="po-block e107 e107" xml:id="dom3core" xreflabel="DOM Level 3 Core"><textual class="po-textual">W3C. </textual><emphasis class="po-inline e108 e108" role="ital"><textual class="po-textual">DOM Level 3 Core W3C Recommendation 4 April 2004</textual></emphasis><textual class="po-textual">
    [online]. </textual><link class="po-inline e109 e109" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/DOM-Level-3-Core/core.html</textual></link></bibliomixed><bibliomixed class="po-block e110 e110" xml:id="linked-csv" xreflabel="Linked CSV"><textual class="po-textual">Jeni Tennison,
    Open Data Institute. </textual><emphasis class="po-inline e111 e111" role="ital"><textual class="po-textual">Linked CSV Unofficial Draft 08
    March 2013</textual></emphasis><textual class="po-textual"> [online]. </textual><link class="po-inline e112 e112" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://jenit.github.io/linked-csv/</textual></link></bibliomixed><bibliomixed class="po-block e113 e113" xml:id="superset" xreflabel="superset"><textual class="po-textual">Eric van der
    Vlist. </textual><emphasis class="po-inline e114 e114" role="ital"><textual class="po-textual">Toward χίμαιραλ/superset 8 August
    2012</textual></emphasis><textual class="po-textual"> [online]. </textual><link class="po-inline e115 e115" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://eric.van-der-vlist.com/blog/2012/08/08/toward-%CF%87%CE%AF%CE%BC%CE%B1%CE%B9%CF%81%CE%B1%CE%BBsuperset/</textual></link></bibliomixed><bibliomixed class="po-block e116 e116" xml:id="embracing-json" xreflabel="Embracing JSON"><textual class="po-textual">Eric van der
    Vlist. </textual><emphasis class="po-inline e117 e117" role="ital"><textual class="po-textual">Embracing JSON? Of course, but how? 10
    February 2013</textual></emphasis><textual class="po-textual"> [online]. </textual><link class="po-inline e118 e118" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://archive.xmlprague.cz/2013/presentations/Embracing_JSON/presentation.html#/start</textual></link></bibliomixed><bibliomixed class="po-block e119 e119" xml:id="dom-attr" xreflabel="Document Object Model - Attr"><textual class="po-textual">Mozilla Developer Network </textual><emphasis class="po-inline e120 e120" role="ital"><textual class="po-textual">Document
    Object Model - Attr</textual></emphasis><textual class="po-textual"> [online]. </textual><link class="po-inline e121 e121" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">https://developer.mozilla.org/en/docs/DOM/Attr</textual></link></bibliomixed><bibliomixed class="po-block e122 e122" xml:id="dom4" xreflabel="DOM4"><textual class="po-textual">W3C. </textual><emphasis class="po-inline e123 e123" role="ital"><textual class="po-textual">DOM4 W3C Working Draft 6 December 2012</textual></emphasis><textual class="po-textual"> [online].
    </textual><link class="po-inline e124 e124" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/dom/</textual></link></bibliomixed><bibliomixed class="po-block e125 e125" xml:id="codasyl" xreflabel="CODASYL"><textual class="po-textual">Nick Scherbakov.
    </textual><emphasis class="po-inline e126 e126" role="ital"><textual class="po-textual">Network (CODASYL) Data Model</textual></emphasis><textual class="po-textual"> [online].
    </textual><link class="po-inline e127 e127" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://coronet.iicm.edu/is/scripts/lesson03.pdf</textual></link></bibliomixed></bibliography></article></classedDocument>