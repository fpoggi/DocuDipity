<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.3"><title class="po-block e1 e1"><textual class="po-textual">Leveraging XML Technology for Web Applications</textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">Balisage: The Markup Conference 2012</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 7 - 10, 2012</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual">As eBooks evolve into interactive applications, our vision at Electronic Publishing
            Group (EPT) is to empower authors to write and deploy not only documents and eBooks but
            whole Web applications using widely available tools without system lock-in. We envision
            XML technology as open, accessible, well supported technology to be leveraged for Web
            applications: Information is represented and manipulated with XML technology. Data and
            programs are deployed on a Web server, stored in an XML database, run by XML processors
            (XSLT, XQuery, XProc) and accessed from XML-aware Web clients (XForms) via the HTTP
            protocol.</textual></para><para class="po-block e8 e8"><textual class="po-textual">We document a calendar system, CalendarX, as a case study. We illustrate our use of
            XML technology and the methodology we employed, drawing on ideas from Domain-Driven
            Design and Abstract State Machines.</textual></para></abstract><author class="po-record e9 e9"><personname class="po-record e10 e10"><firstname class="po-field e11 e11"><textual class="po-textual">Anne</textual></firstname><surname class="po-field e12 e12"><textual class="po-textual">Brüggemann-Klein</textual></surname></personname><personblurb class="po-container e13 e13"><para class="po-block e14 e14"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></para></personblurb><affiliation class="po-record e15 e15"><orgname class="po-block e16 e16"><textual class="po-textual">Fakultät für Informatik, Technische Universität München</textual></orgname></affiliation></author><author class="po-record e17 e17"><personname class="po-record e18 e18"><firstname class="po-field e19 e19"><textual class="po-textual">Jose Tomas</textual></firstname><surname class="po-field e20 e20"><textual class="po-textual">Robles Hahn</textual></surname></personname><personblurb class="po-container e21 e21"><para class="po-block e22 e22"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></para></personblurb><affiliation class="po-record e23 e23"><orgname class="po-block e24 e24"><textual class="po-textual">Fakultät für Informatik, Technische Universität München</textual></orgname></affiliation></author><author class="po-record e25 e25"><personname class="po-record e26 e26"><firstname class="po-field e27 e27"><textual class="po-textual">Marouane</textual></firstname><surname class="po-field e28 e28"><textual class="po-textual">Sayih</textual></surname></personname><personblurb class="po-container e29 e29"><para class="po-block e30 e30"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></para></personblurb><affiliation class="po-record e31 e31"><orgname class="po-block e32 e32"><textual class="po-textual">Fakultät für Informatik, Technische Universität München</textual></orgname></affiliation></author><legalnotice class="po-container e33 e33"><para class="po-block e34 e34"><textual class="po-textual">Copyright © 2012 by the authors. Used with permission.</textual></para></legalnotice></info><section class="po-hcontainer e35 e35" xml:id="sec.Introduction"><title class="po-block e36 e36"><textual class="po-textual">Introduction</textual></title><para class="po-block e37 e37"><textual class="po-textual">As eBooks evolve into interactive applications, our vision at Electronic Publishing
         Group (EPT) is to empower authors to write and deploy not only documents and eBooks but
         whole Web applications using widely available tools without system lock-in. Our work brings
         ideas of end-user development [</textual><xref class="po-milestone e38 e38" linkend="FloydParadigmChange"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] [</textual><xref class="po-milestone e39 e39" linkend="EndUserDevelopmentManifesto"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> ] to the area of Web applications. </textual></para><para class="po-block e40 e40"><textual class="po-textual">XML technology is our technology of choice. Historically, the nature of the entities
         that are encoded with XML and related standards (XML Namespaces, XLink, XML Schema, RDF,
         Docbook, MathML, ePUB, XML syntaxes of HTML including HTML5) has evolved over time.
         Originally, XML encoding was applied to textual documents to support single-source,
         cross-media publishing. Then textual documents expanded their scope, to act as databases
         that can be semantically processed, and data collections were represented as (collections
         of) documents, to be queried or data mined. Finally, we also have snippets of data encoded
         with XML technology, to configure applications or to exchange messages between
         systems</textual></para><para class="po-block e41 e41"><textual class="po-textual">Together with the nature of the entities to be encoded in XML and related languages,
         further XML technologies evolved that support these entities and their use cases: CSS, XSL
         with XSLT and XSL-FO, XQuery, XForms, XProc.</textual></para><para class="po-block e42 e42"><textual class="po-textual">We intend to leverage XML technology for Web applications, looking for a methodology
         that lets domain experts be involved into the software development process from start to
         finish, even empowers them to do their own software development. We envision XML technology
         as open, accessible, well supported technology to be leveraged for Web applications:
         Information is represented and manipulated with XML technology. Data and programs are
         deployed on a Web server, stored in an XML database, run by XML processors (XSLT, XQuery,
         XProc) and accessed from XML-aware Web clients (XForms) via the HTTP protocol.</textual></para><para class="po-block e43 e43"><textual class="po-textual">The required XML technology, such as XML processors and systems to support the various
         XML languages, is in place and accessible to end users. The XRX architecture provides a
         point of reference, how to make use of standard Web servers, Web browsers and the HTTP
         protocol as the plattform on which to run components of XML-based Web applications without
         system locck-in.</textual></para><para class="po-block e44 e44"><textual class="po-textual">It has been argued by Baumann [</textual><xref class="po-milestone e45 e45" linkend="BaumanBalisage2009"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], among others,
         that XML technology is implementation technology. Hence, the missing pieces, as far as we
         can see, are methodology, reference architectures, proven practices, case studies. That is
         the topic of this paper.</textual></para><para class="po-block e46 e46"><textual class="po-textual">By way of methodology, we draw on the principles of Domain-Driven Design [</textual><xref class="po-milestone e47 e47" linkend="EvansDDD"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] and Domain-Specific Languages  [</textual><xref class="po-milestone e48 e48" linkend="FowlerDSLs"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]
         to empower domain experts to develop Web applications. For requirement specification and
         design, we adapt Abstract State Machines (ASMs) [</textual><xref class="po-milestone e49 e49" linkend="ASMBook"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] that are
         refined into XML code.</textual></para><para class="po-block e50 e50"><textual class="po-textual">We illustrate our methodology with a case study, a calendar system that we call
         CalendarX. Robles Hahn [</textual><xref class="po-milestone e51 e51" linkend="RoblesHahnBTh"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] designed and implemented a
         calendar system with XML technology using principles of Domain-Driven Design and employing
         Domain-Specific Languages. In this paper, we propose an extended methodology that is based
         on Abstract State Machines (ASMs): We formally describe requirement specification and
         design by a so-called ASM ground model. We envision use the ASM concept of refinement to
         derive an implementation in terms of XML technology.</textual></para><para class="po-block e52 e52"><textual class="po-textual">This paper is organized into six further sections. First, we briefly discuss the
         application CalendarX with which we demonstrate our methodology. Then we introduce the main
         building blocks of our methodology, namely Domain-Driven Design, Abstract State Machines
         and XML technology. Finally, we discuss the CalendarX domain model, its formal
         specification as an ASM ground model and the CalendarX implementation. We finish with
         conclusions and discussion of further work.</textual></para></section><section class="po-hcontainer e53 e53" xml:id="sec.CalendarXIntro"><title class="po-block e54 e54"><textual class="po-textual">CalendarX: Motivation and Description</textual></title><para class="po-block e55 e55"><textual class="po-textual">We illustrate our approach with a small case study or feasibility study, the calendar
         system CalendarX. We demonstrate how to leverage XML technology for Web applications while
         working towards a methodology that lets domain experts be involved into the software
         development process from start to finish, even empowers them to do their own software
         development.</textual></para><para class="po-block e56 e56"><textual class="po-textual">One may well question our choice of domain, arguing that anybody is a domain expert in
         calendars. That is precisely our reason for choosing this domain: Since this study started
         out as students' work in a lab course and a thesis, there were no independent, external
         domain experts. Students and supervisors had to be able to fill in the roles of domain
         experts and software developers. We feel that we can demonstrate the value of Domain-Driven
         Design nevertheless.</textual></para><para class="po-block e57 e57"><textual class="po-textual">Furthermore, we have found from personal experience that migrating from one calendar
         system to another is troublesome when access to the calendar data is mitigated by software.
         Hence, we have found it worth our while to design and implement a calendar system that
         exposes its data in XML format, applying lessons learnt in the field of document
         processing.</textual></para><para class="po-block e58 e58"><textual class="po-textual">As to the specific data model, the first author has always found the limitations of
         existing calendar systems irritating. Hence, we have taken the chance to add a few special
         requirements for CalendarX [</textual><xref class="po-milestone e59 e59" linkend="RoblesHahnBTh"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. Foremost, we require
         CalendarX to support a rich domain model, going beyond state-of-the-art calendar systems
         such as Microsoft Outlook or Google Calendar and calendar languages such as
            iCalendar [</textual><xref class="po-milestone e60 e60" linkend="iCalendar"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] and xCal [</textual><xref class="po-milestone e61 e61" linkend="xCal"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].</textual></para><para class="po-block e62 e62"><emphasis class="po-inline e63 e63" role="bold"><textual class="po-textual">Rich event model</textual></emphasis><textual class="po-textual"> CalendarX is capable of expressing a
         relationship between events that do not follow a single repetition pattern. For example, an
         event that takes place on a Monday from 10 to 11 am and on a Wednesday from 2 to 4 pm can
         be represented as a single event, that holds information common to both instances, such as
         event description, category and location.</textual></para><para class="po-block e64 e64"><emphasis class="po-inline e65 e65" role="bold"><textual class="po-textual">Rich recurrence pattern model</textual></emphasis><textual class="po-textual"> CalendarX supports the
         usual recurrence patterns, but also combinations of patterns, including exception patterns.
         For example, we can specify that an event recurs every first Monday and every third Tuesday
         of the month, but not during school holidays.</textual></para><para class="po-block e66 e66"><textual class="po-textual">To summarize, we consider CalendarX a good case study and we have taken the chance to
         design and implement a calendar system with extended functionality that we personally wish
         to use.</textual></para></section><section class="po-hcontainer e67 e67" xml:id="sec.Methodologies"><title class="po-block e68 e68"><textual class="po-textual">Methodology and Technology</textual></title><section class="po-hcontainer e69 e69" xml:id="subSec.DDD"><title class="po-block e70 e70"><textual class="po-textual">Domain-Driven Design and Domain-Specific Languages</textual></title><para class="po-block e71 e71"><textual class="po-textual">Domain-Driven Design (DDD) [</textual><xref class="po-milestone e72 e72" linkend="EvansDDD"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] is a design philosophy
            originally aimed at dealing with complex software projects. Primary focus is on the
            concepts and the functionality of the domain of the software; that is, the subject area
            to which the user applies the program. Concepts and functionality are captured in a
            model; that is, a rigorously organized and selective abstraction of the subset of domain
            knowledge that is relevant to the software.</textual></para><para class="po-block e73 e73"><textual class="po-textual">One of the key points of DDD is ubiquitious language: Domain experts and software
            engineers use a common core subset of the domain language for communication, model
               </textual><emphasis class="po-inline e74 e74" role="ital"><textual class="po-textual">and</textual></emphasis><textual class="po-textual"> implementation, thus intimately connecting these
            two concerns.</textual></para><para class="po-block e75 e75"><textual class="po-textual">DDD extends a design methodology that was propagated in the 1980s: Participatory
               Design [</textual><xref class="po-milestone e76 e76" linkend="FloydParadigmChange"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] [</textual><xref class="po-milestone e77 e77" linkend="PDPrinciplesPractice"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. It does not only involve domain experts in
            requirement elicitation and system design but lets the domain model drive the whole
            software development process, up to the point that the implementation
            “becomes” the model. DDD enables domain experts to become more deeply
            involved into the software development process and eventually to develop their own
            software.</textual></para><para class="po-block e78 e78"><textual class="po-textual">Domain-Specific Languages (DSLs) are programming or descriptional languages of
            limited expressiveness that target a specific domain. In the context of XML technology,
            schema-constrained sets of documents form DSLs that work particularly well within a DDD
            design philosophy, since their semantics are embodied in the domain model and their
            syntax can be derived from the domain model [</textual><xref class="po-milestone e79 e79" linkend="EPTatEML2007"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].</textual></para></section><section class="po-hcontainer e80 e80" xml:id="subSec.ASMs"><title class="po-block e81 e81"><textual class="po-textual">Abstract State Machines</textual></title><para class="po-block e82 e82"><textual class="po-textual">The DDD design philosophy is open with respect to mechanisms with which to express
            the domain model and the connections to system articfacts. We wish for a more formal,
            precise specification of the domain model and the linking between the domain model and
            the implementation that is able to let the domain model shine through, in the spirit of
            DDD. Our methodology for these issues is inspired by Abstract State Machines
               (ASMs) [</textual><xref class="po-milestone e83 e83" linkend="ASMBook"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. ASMs are suited because of their notational
            flexibility, formal semantics, low protocol overhead and concept of step-wise refinement
            for linking levels of abstraction from high-level specification to low-level
            implementation.</textual></para><para class="po-block e84 e84"><textual class="po-textual">ASMs are best described as abstract software systems (machines) written in pseudo
            code that operate on abstract data (state). ASMs are homogeneously used to formally
            represent artifacts on all levels of software development, from requirements (ground
            model) to implementation. The ASMs of the different levels are linked by so-called
            refinement steps.</textual></para><para class="po-block e85 e85"><textual class="po-textual">The notion of abstract data and a pseudo code operational model make ASMs a natural
            tool for domain experts. Their precise semantics and notion of refinement make ASMs a
            great tool for formal specification of software systems and their development process
            that works well within the DDD design philosophy.</textual></para></section><section class="po-hcontainer e86 e86" xml:id="subSec.ImplementationTechnology"><title class="po-block e87 e87"><textual class="po-textual">Implementation Technology</textual></title><para class="po-block e88 e88"><textual class="po-textual">We employ a basic set of XML technologies to implement CalendarX: XML for
            representing data, XML Schema for constraining data, XQuery for querying and processing
            data, and XForms embedded into XHTML with CSS for the user interface.</textual></para><para class="po-block e89 e89"><textual class="po-textual">We build Web applications from these technologies using the XRX architectural style,
            based on XForms on the client, RESTful communication and XQuery on the
               server. [</textual><xref class="po-milestone e90 e90" linkend="XRXIntro"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] [</textual><xref class="po-milestone e91 e91" linkend="XRXExplained"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. The
            greatest advantage of XRX lies in the use of a single data model (XML) on the server and
            on the client, eliminating the translation complexity of other architectures (</textual><emphasis class="po-inline e92 e92" role="bold"><textual class="po-textual">zero translation</textual></emphasis><textual class="po-textual">). Other benefits of the XRX architecture
            include:</textual></para><itemizedlist class="po-table e93 e93"><listitem class="po-container e94 e94"><para class="po-block e95 e95"><textual class="po-textual">XML technology everywhere: The zero-translation architecture enables the use of
                  XML technologies throughout the application. XML technologies suffice for all
                  programming tasks on the client and on the server.</textual></para></listitem><listitem class="po-container e96 e96"><para class="po-block e97 e97"><textual class="po-textual">Declarative language on the client: The effort required to implement the client
                  user interface is greatly reduced thanks to the declarative nature of XForms. The
                  developer does not have to spend time programming complex scripts for user
                  interface widgets and input validation. XForms just needs to be told what
                  functionality is desired and the XForms engine will deal with buttons, text boxes,
                  getting data to and from the server, and so on.</textual></para></listitem><listitem class="po-container e98 e98"><para class="po-block e99 e99"><textual class="po-textual">Separation of concers: The XRX architecture encourages separation of concerns
                  in multiple ways. On the client, XForms keeps the user interface code separate
                  from the data model. The REST interface keeps the server separate from the client,
                  as both communicate with each other only through the interface.</textual></para></listitem></itemizedlist><para class="po-block e100 e100"><textual class="po-textual">The use of XML in all layers of a Web application makes use of the full potential of
            the XML family of technologies.</textual></para><para class="po-block e101 e101"><textual class="po-textual">We deploy CalendarX on a software platform that consists of the following
            components:</textual></para><itemizedlist class="po-table e102 e102"><listitem class="po-container e103 e103"><para class="po-block e104 e104"><textual class="po-textual">Orbeon XForms processor: It runs within an Apache Tomcat Server and compiles
                  XForms documents into XHTML and Javascript code that can be handled by any modern
                  browser. We have tested it with Firefox and Chrome.</textual></para></listitem><listitem class="po-container e105 e105"><para class="po-block e106 e106"><textual class="po-textual">eXist XML database with XQuery support, running also within Tomcat.</textual></para></listitem><listitem class="po-container e107 e107"><para class="po-block e108 e108"><textual class="po-textual">Communication between these components and the browser via a REST
                  protocol.</textual></para></listitem></itemizedlist><para class="po-block e109 e109"><textual class="po-textual">All CalendarX code is XML technology (XML, XML Schema, XForms, XHTML, and XQuery)
            that is linked to the domain model with ASM methods. No Web application frameworks,
            other object representations or programming languages are used. The CalendarX code
            truely expresses the domain model.</textual></para></section></section><section class="po-hcontainer e110 e110" xml:id="sec.CalenderXDomainModel"><title class="po-block e111 e111"><textual class="po-textual">The CalendarX Domain Model</textual></title><section class="po-hcontainer e112 e112" xml:id="subSec.CalendarXConceptualModel"><title class="po-block e113 e113"><textual class="po-textual">Modeling the calendar data</textual></title><para class="po-block e114 e114"><textual class="po-textual">We start modeling CalendarX with concepts in the calendar domain that need to be
            represented as data in the system, and their relations.</textual></para><para class="po-block e115 e115"><textual class="po-textual">Our first stab at a conceptual model is a UML class diagram that captures calendar
            concepts, as pictured in </textual><xref class="po-milestone e116 e116" linkend="fig.CMinUML"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><figure class="po-container e117 e117" xml:id="fig.CMinUML"><title class="po-block e118 e118"><textual class="po-textual">Modeling calendar concepts</textual></title><mediaobject class="po-container e119 e119"><imageobject class="po-container e120 e120"><imagedata class="po-meta e121 e121" fileref="../../../vol8/graphics/Bruggemann-Klein01/Bruggemann-Klein01-001.png" format="png" width="15cm"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e122 e122"><textual class="po-textual">CalendarX has a top-level concept, </textual><code class="po-atom e123 e123"><textual class="po-textual">CalendarX</textual></code><textual class="po-textual">. A </textual><code class="po-atom e124 e124"><textual class="po-textual">CalendarX</textual></code><textual class="po-textual">
            object contains collections of </textual><code class="po-atom e125 e125"><textual class="po-textual">Calendar</textual></code><textual class="po-textual">, </textual><code class="po-atom e126 e126"><textual class="po-textual">User</textual></code><textual class="po-textual">,
               </textual><code class="po-atom e127 e127"><textual class="po-textual">Pattern</textual></code><textual class="po-textual">, </textual><code class="po-atom e128 e128"><textual class="po-textual">Location</textual></code><textual class="po-textual"> and </textual><code class="po-atom e129 e129"><textual class="po-textual">Contact</textual></code><textual class="po-textual"> objects that
            participate in relationships as indicated in the conceptual model.</textual></para><para class="po-block e130 e130"><textual class="po-textual">In order to satisfy the richness requirements, the CalendarX conceptual model
            features a novel kind of concept that is not present in other calendar models:
               </textual><code class="po-atom e131 e131"><textual class="po-textual">SuperEvent</textual></code><textual class="po-textual">. A </textual><code class="po-atom e132 e132"><textual class="po-textual">SuperEvent</textual></code><textual class="po-textual"> object defines a potentially
            infinite series of </textual><code class="po-atom e133 e133"><textual class="po-textual">Event</textual></code><textual class="po-textual"> objects via recurrence patterns. More precisely,
            the series of </textual><code class="po-atom e134 e134"><textual class="po-textual">Event</textual></code><textual class="po-textual"> objects is generated on demand from
               </textual><code class="po-atom e135 e135"><textual class="po-textual">EventRule</textual></code><textual class="po-textual"> objects, with each </textual><code class="po-atom e136 e136"><textual class="po-textual">EventRule</textual></code><textual class="po-textual"> object being related
            to a </textual><code class="po-atom e137 e137"><textual class="po-textual">Pattern</textual></code><textual class="po-textual"> object. The </textual><code class="po-atom e138 e138"><textual class="po-textual">Pattern</textual></code><textual class="po-textual"> object defines a set of dates
            for </textual><code class="po-atom e139 e139"><textual class="po-textual">Event</textual></code><textual class="po-textual"> objects, while the associated </textual><code class="po-atom e140 e140"><textual class="po-textual">EventRule</textual></code><textual class="po-textual"> object
            defines common attribute settings that are shared by the </textual><code class="po-atom e141 e141"><textual class="po-textual">Event</textual></code><textual class="po-textual"> objects
            generated by the </textual><code class="po-atom e142 e142"><textual class="po-textual">EventRule</textual></code><textual class="po-textual"> object, such as </textual><code class="po-atom e143 e143"><textual class="po-textual">startTime</textual></code><textual class="po-textual">,
               </textual><code class="po-atom e144 e144"><textual class="po-textual">endTime</textual></code><textual class="po-textual"> or </textual><code class="po-atom e145 e145"><textual class="po-textual">location</textual></code><textual class="po-textual">. A </textual><code class="po-atom e146 e146"><textual class="po-textual">SuperEvent</textual></code><textual class="po-textual"> object may
            contain several </textual><code class="po-atom e147 e147"><textual class="po-textual">EventRule</textual></code><textual class="po-textual"> objects, one for each combination of attribute
            settings that need to be represented.</textual></para><para class="po-block e148 e148"><textual class="po-textual">The UML class diagram leaves room for interpretation regarding relationships between
            concepts. Hence, a few words to clarify our intentions: Associations (simple line
            symbols) carry explicit navigational arrows, specifying which objects in a relationship
            should be accessible from other objects. Further types of relationships are composition
            (“owns-a”, closed diamond symbol) and aggregation (“has-a”,
            open-diamond symbol). We require that composition relationships can be navigated in both
            directions, aggregation relationships just in one. The star occurrence operator always
            indicates unordered collections in our diagram.</textual></para><para class="po-block e149 e149"><textual class="po-textual">In earlier work [</textual><xref class="po-milestone e150 e150" linkend="EPTatEML2007"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">][</textual><xref class="po-milestone e151 e151" linkend="EPTatBalisage2009"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] we have discussed how to translate the constraints of
            a UML class diagram into XML Schema so that related objects that instantiate the class
            diagram correspond exactly to instances of the schema, as illustrated in </textual><xref class="po-milestone e152 e152" linkend="fig.UML2SchemaDiagram"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">:</textual></para><figure class="po-container e153 e153" xml:id="fig.UML2SchemaDiagram"><title class="po-block e154 e154"><textual class="po-textual">Correspondence between UML class diagram and XML Schema</textual></title><mediaobject class="po-container e155 e155"><imageobject class="po-container e156 e156"><imagedata class="po-meta e157 e157" fileref="../../../vol8/graphics/Bruggemann-Klein01/Bruggemann-Klein01-002.png" format="png" width="15cm"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e158 e158"><textual class="po-textual">We have extended this method of translation by ensuring referential integrity of
            relationships with XML Schema key constraints. More importantly, following ideas
            presented in earlier work [</textual><xref class="po-milestone e159 e159" linkend="EPTatBalisage2010"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], we are developing
            a meta model for the subset of XML Schema that we need, including a formal ASM
            specification of its validation rules and a DSL for representing the instances as XML
               documents [</textual><xref class="po-milestone e160 e160" linkend="EPTGoldenBraidXMLT"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. The resulting XML Schema for
            CalendarX and an instance document are referenced in the supporting-materials
            section.</textual></para><para class="po-block e161 e161"><textual class="po-textual">The XML Schema incorporates the principles of DDD. It is a direct representation of
            the calendar data model, as part of the CalendarX domain model.</textual></para><para class="po-block e162 e162"><textual class="po-textual">This finalizes the modeling of calendar data as part of the CalendarX domain
            model.</textual></para></section><section class="po-hcontainer e163 e163" xml:id="subSec.CalendarXUI"><title class="po-block e164 e164"><textual class="po-textual">Modeling CalendarX Functionality and User Interface</textual></title><para class="po-block e165 e165"><textual class="po-textual">Our starting point for modeling the dynamics of CalendarX is the user interface. We
            model the views and activities that are available from the views. We continue to use
            class diagrams, now including methods, as a first modeling language.</textual></para><section class="po-hcontainer e166 e166"><title class="po-block e167 e167"><textual class="po-textual">Views</textual></title><para class="po-block e168 e168"><textual class="po-textual">CalendarX is accessed via a number of pages or screens that offer information and
               choices of interaction.</textual></para><para class="po-block e169 e169"><textual class="po-textual">The four main pages are </textual><code class="po-atom e170 e170"><textual class="po-textual">DayView</textual></code><textual class="po-textual">, </textual><code class="po-atom e171 e171"><textual class="po-textual">WeekView</textual></code><textual class="po-textual">,
                  </textual><code class="po-atom e172 e172"><textual class="po-textual">MonthView</textual></code><textual class="po-textual"> and </textual><code class="po-atom e173 e173"><textual class="po-textual">RangeView</textual></code><textual class="po-textual">. These four view pages display a
               calendar's event data for a specific date, for the seven consecutive dates starting
               from a specific date, for a specific month in a specific year and for an arbitrary
               range of dates, respectively. Note that we leave open the start date for a week
               (often Monday or Sunday) at this point; we leave details such as these for further
               refinement of the domain model. Pages </textual><code class="po-atom e174 e174"><textual class="po-textual">DayView</textual></code><textual class="po-textual">, </textual><code class="po-atom e175 e175"><textual class="po-textual">WeekView</textual></code><textual class="po-textual"> and
                  </textual><code class="po-atom e176 e176"><textual class="po-textual">MonthView</textual></code><textual class="po-textual"> are specific cases of </textual><code class="po-atom e177 e177"><textual class="po-textual">RangeView</textual></code><textual class="po-textual">. Page
                  </textual><code class="po-atom e178 e178"><textual class="po-textual">RangeView</textual></code><textual class="po-textual"> references the (finitely many) </textual><code class="po-atom e179 e179"><textual class="po-textual">Event</textual></code><textual class="po-textual"> objects
               that are to be displayed by a specific view.</textual></para><para class="po-block e180 e180"><textual class="po-textual">Note that we describe the information that is needed to build the page and the
               information that is displayed on a page in a purely logical form for now. Questions
               of layout and methods of interaction are left to further stages of refinement.</textual></para><para class="po-block e181 e181"><textual class="po-textual">In addition to the view pages, the full version of CalendarX has </textual><code class="po-atom e182 e182"><textual class="po-textual">Edit</textual></code><textual class="po-textual">
               pages that are capable of displaying calendar data and their relations for editing
               purposes. We leave modeling of </textual><code class="po-atom e183 e183"><textual class="po-textual">Edit</textual></code><textual class="po-textual"> pages to future refinements.
               Questions of data representation will be addressed below.</textual></para><para class="po-block e184 e184"><textual class="po-textual">We abstract page </textual><code class="po-atom e185 e185"><textual class="po-textual">RangeView</textual></code><textual class="po-textual"> and indirectly the other view pages to an
               abstract page </textual><code class="po-atom e186 e186"><textual class="po-textual">View</textual></code><textual class="po-textual"> that holds information and offers choices of
               interaction that are common to all view pages of CalendarX: A </textual><code class="po-atom e187 e187"><textual class="po-textual">View</textual></code><textual class="po-textual">
               object provides a status message and holds information about the current calendar,
               date info and further filter info. The date info is a combination
                  </textual><code class="po-atom e188 e188"><textual class="po-textual">dateInfo</textual></code><textual class="po-textual"> of day, month and year information that may be partial but
               must be consistent; it is used as potentially partial information to compute specific
               date info for specific types of view. The filter info </textual><code class="po-atom e189 e189"><textual class="po-textual">filterInfo</textual></code><textual class="po-textual">
               constrains the events that are to be displayed, for example according to category or
               venue.</textual></para><para class="po-block e190 e190"><textual class="po-textual">Questions of authentification and authorization are left to further refinements of
               the domain model.</textual></para><para class="po-block e191 e191"><textual class="po-textual">Hence, we need to extend our conceptual model with page types, as demonstrated in
                  </textual><xref class="po-milestone e192 e192" linkend="fig.CMPages"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><figure class="po-container e193 e193" xml:id="fig.CMPages"><title class="po-block e194 e194"><textual class="po-textual">Modeling pages</textual></title><mediaobject class="po-container e195 e195"><imageobject class="po-container e196 e196"><imagedata class="po-meta e197 e197" fileref="../../../vol8/graphics/Bruggemann-Klein01/Bruggemann-Klein01-003.png" format="png" width="15cm"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure></section><section class="po-hcontainer e198 e198"><title class="po-block e199 e199"><textual class="po-textual">Interaction</textual></title><para class="po-block e200 e200"><textual class="po-textual">The state of the system CalendarX comprises an object </textual><code class="po-atom e201 e201"><textual class="po-textual">currentPage</textual></code><textual class="po-textual"> of
               type </textual><code class="po-atom e202 e202"><textual class="po-textual">View</textual></code><textual class="po-textual">, carrying page-specific information as indicated above. A
                  </textual><code class="po-atom e203 e203"><textual class="po-textual">Page</textual></code><textual class="po-textual"> object offers user selections: the next page type to be visited
               and which </textual><code class="po-atom e204 e204"><textual class="po-textual">calendar</textual></code><textual class="po-textual">, </textual><code class="po-atom e205 e205"><textual class="po-textual">dateInfo</textual></code><textual class="po-textual"> and </textual><code class="po-atom e206 e206"><textual class="po-textual">filterInfo</textual></code><textual class="po-textual">
               values to use for the next page. These choices are stored in global attributes that
               we name </textual><code class="po-atom e207 e207"><textual class="po-textual">nextPage</textual></code><textual class="po-textual">, </textual><code class="po-atom e208 e208"><textual class="po-textual">nextCalendar</textual></code><textual class="po-textual">, </textual><code class="po-atom e209 e209"><textual class="po-textual">nextDateInfo</textual></code><textual class="po-textual">
               and </textual><code class="po-atom e210 e210"><textual class="po-textual">nextFilterInfo</textual></code><textual class="po-textual">.</textual></para><para class="po-block e211 e211"><textual class="po-textual">Hence, we envision CalendarX to move, under user control, between control states
               that we label </textual><code class="po-atom e212 e212"><textual class="po-textual">dayView</textual></code><textual class="po-textual">, </textual><code class="po-atom e213 e213"><textual class="po-textual">weekView</textual></code><textual class="po-textual">, </textual><code class="po-atom e214 e214"><textual class="po-textual">monthView</textual></code><textual class="po-textual">,
                  </textual><code class="po-atom e215 e215"><textual class="po-textual">rangeView</textual></code><textual class="po-textual"> and </textual><code class="po-atom e216 e216"><textual class="po-textual">view</textual></code><textual class="po-textual">, according to the page types; we also
               have states </textual><code class="po-atom e217 e217"><textual class="po-textual">start</textual></code><textual class="po-textual"> and </textual><code class="po-atom e218 e218"><textual class="po-textual">quit</textual></code><textual class="po-textual">. The choice of state is stored
               in </textual><code class="po-atom e219 e219"><textual class="po-textual">nextPage</textual></code><textual class="po-textual">.</textual></para><para class="po-block e220 e220"><textual class="po-textual">When CalendarX enters the control state that is indicated by the current value of
                  </textual><code class="po-atom e221 e221"><textual class="po-textual">nextPage</textual></code><textual class="po-textual">, information items </textual><code class="po-atom e222 e222"><textual class="po-textual">nextCalendar</textual></code><textual class="po-textual">,
                  </textual><code class="po-atom e223 e223"><textual class="po-textual">nextDateInfo</textual></code><textual class="po-textual"> and </textual><code class="po-atom e224 e224"><textual class="po-textual">nextFilterInfo</textual></code><textual class="po-textual"> are also available.
               CalendarX uses this information to create a new </textual><code class="po-atom e225 e225"><textual class="po-textual">View</textual></code><textual class="po-textual"> object of
               appropriate type, setting view attributes, computing specific date information from
                  </textual><code class="po-atom e226 e226"><textual class="po-textual">nextDateInfo</textual></code><textual class="po-textual">, and computing specific </textual><code class="po-atom e227 e227"><textual class="po-textual">Event</textual></code><textual class="po-textual"> objects from
               date information, </textual><code class="po-atom e228 e228"><textual class="po-textual">nextCalendar</textual></code><textual class="po-textual"> and </textual><code class="po-atom e229 e229"><textual class="po-textual">nextFilterInfo</textual></code><textual class="po-textual">. It also
               computes a status message.</textual></para><para class="po-block e230 e230"><textual class="po-textual">The system assigns the newly constructed page to </textual><code class="po-atom e231 e231"><textual class="po-textual">currentPage</textual></code><textual class="po-textual">,
               displays that page and awaits user input for user selections, which are initialized
               with their current values.</textual></para><para class="po-block e232 e232"><textual class="po-textual">The user enters data and signals completion of selection, and the system responds
               with a new iteration. Alternatively, the user may signal the intention to exit the
               system by setting </textual><code class="po-atom e233 e233"><textual class="po-textual">nextPage</textual></code><textual class="po-textual"> to </textual><code class="po-atom e234 e234"><textual class="po-textual">quit</textual></code><textual class="po-textual">, prompting CalendarX to
               quit operation.</textual></para><para class="po-block e235 e235"><textual class="po-textual">Creating view pages involves computing the associated events. For example, the
               method </textual><code class="po-atom e236 e236"><textual class="po-textual">events()</textual></code><textual class="po-textual"> for </textual><code class="po-atom e237 e237"><textual class="po-textual">DayView</textual></code><textual class="po-textual"> uses the </textual><code class="po-atom e238 e238"><textual class="po-textual">date</textual></code><textual class="po-textual">
               attribute of type </textual><code class="po-atom e239 e239"><textual class="po-textual">Date</textual></code><textual class="po-textual">, the </textual><code class="po-atom e240 e240"><textual class="po-textual">calendar</textual></code><textual class="po-textual"> attribute of type
                  </textual><code class="po-atom e241 e241"><textual class="po-textual">Calendar</textual></code><textual class="po-textual"> and the </textual><code class="po-atom e242 e242"><textual class="po-textual">filterInfo</textual></code><textual class="po-textual"> of type
                  </textual><code class="po-atom e243 e243"><textual class="po-textual">FilterInfo</textual></code><textual class="po-textual"> of the object that it operates on. It calls a method
                  </textual><code class="po-atom e244 e244"><textual class="po-textual">getEventsForDay(date: Date): Event*</textual></code><textual class="po-textual"> on </textual><code class="po-atom e245 e245"><textual class="po-textual">Calendar</textual></code><textual class="po-textual"> object
                  </textual><code class="po-atom e246 e246"><textual class="po-textual">calendar</textual></code><textual class="po-textual">, filters them according to </textual><code class="po-atom e247 e247"><textual class="po-textual">filterInfo</textual></code><textual class="po-textual"> and
               returns the result. The methods </textual><code class="po-atom e248 e248"><textual class="po-textual">events()</textual></code><textual class="po-textual"> for </textual><code class="po-atom e249 e249"><textual class="po-textual">WeekView</textual></code><textual class="po-textual">,
                  </textual><code class="po-atom e250 e250"><textual class="po-textual">MonthView</textual></code><textual class="po-textual"> and </textual><code class="po-atom e251 e251"><textual class="po-textual">RangeView</textual></code><textual class="po-textual"> delegate to
                  </textual><code class="po-atom e252 e252"><textual class="po-textual">events()</textual></code><textual class="po-textual"> for </textual><code class="po-atom e253 e253"><textual class="po-textual">DayView</textual></code><textual class="po-textual">, calling it repeatedly for each
                  </textual><code class="po-atom e254 e254"><textual class="po-textual">Date</textual></code><textual class="po-textual"> that is returned by general methods
                  </textual><code class="po-atom e255 e255"><textual class="po-textual">datesForWeek(startDate:Date): Date*</textual></code><textual class="po-textual"> and
                  </textual><code class="po-atom e256 e256"><textual class="po-textual">datesForMonth(monthYear:MonthYear): Date*</textual></code><textual class="po-textual">, gathering the filtered
               return values of these calls into the result sequence of </textual><code class="po-atom e257 e257"><textual class="po-textual">Event</textual></code><textual class="po-textual">
               objects.</textual></para><para class="po-block e258 e258"><textual class="po-textual">Getting the events for the week that starts at </textual><code class="po-atom e259 e259"><textual class="po-textual">firstDay</textual></code><textual class="po-textual"> for
                  </textual><code class="po-atom e260 e260"><textual class="po-textual">Calendar</textual></code><textual class="po-textual"> object </textual><code class="po-atom e261 e261"><textual class="po-textual">c</textual></code><textual class="po-textual"> filtered by </textual><code class="po-atom e262 e262"><textual class="po-textual">filterInfo</textual></code><textual class="po-textual"> of
               type </textual><code class="po-atom e263 e263"><textual class="po-textual">FilterInfo</textual></code><textual class="po-textual"> entails the following steps:</textual></para><itemizedlist class="po-table e264 e264"><listitem class="po-container e265 e265"><para class="po-block e266 e266"><textual class="po-textual">Look for all </textual><code class="po-atom e267 e267"><textual class="po-textual">SuperEvent</textual></code><textual class="po-textual"> objects </textual><code class="po-atom e268 e268"><textual class="po-textual">se</textual></code><textual class="po-textual"> that are part
                     of </textual><code class="po-atom e269 e269"><textual class="po-textual">c</textual></code><textual class="po-textual">.</textual></para></listitem><listitem class="po-container e270 e270"><para class="po-block e271 e271"><textual class="po-textual">Compute all days </textual><code class="po-atom e272 e272"><textual class="po-textual">d</textual></code><textual class="po-textual"> in the week that starts at
                        </textual><code class="po-atom e273 e273"><textual class="po-textual">firstDay</textual></code><textual class="po-textual">.</textual></para></listitem><listitem class="po-container e274 e274"><para class="po-block e275 e275"><textual class="po-textual">For each of these </textual><code class="po-atom e276 e276"><textual class="po-textual">se</textual></code><textual class="po-textual"> objects apply
                        </textual><code class="po-atom e277 e277"><textual class="po-textual">getEventsForWeek(d)</textual></code><textual class="po-textual">.</textual></para></listitem><listitem class="po-container e278 e278"><para class="po-block e279 e279"><textual class="po-textual">Filter the union of all the resulting sets of events according to
                        </textual><code class="po-atom e280 e280"><textual class="po-textual">filterInfo</textual></code><textual class="po-textual">.</textual></para></listitem><listitem class="po-container e281 e281"><para class="po-block e282 e282"><textual class="po-textual">Return the result.</textual></para></listitem></itemizedlist><para class="po-block e283 e283"><textual class="po-textual">If we complete this specification, we notice that we need a method
                  </textual><code class="po-atom e284 e284"><textual class="po-textual">matches(date:Date)</textual></code><textual class="po-textual"> for </textual><code class="po-atom e285 e285"><textual class="po-textual">Pattern</textual></code><textual class="po-textual"> that tests if a
                  </textual><code class="po-atom e286 e286"><textual class="po-textual">Pattern</textual></code><textual class="po-textual"> object covers </textual><code class="po-atom e287 e287"><textual class="po-textual">date</textual></code><textual class="po-textual">.</textual></para><para class="po-block e288 e288"><textual class="po-textual">We list below the methods that we have mentioned above, grouped by types:</textual></para><itemizedlist class="po-table e289 e289"><listitem class="po-container e290 e290"><para class="po-block e291 e291"><code class="po-atom e292 e292"><textual class="po-textual">DayView</textual></code></para><itemizedlist class="po-table e293 e293"><listitem class="po-container e294 e294"><para class="po-block e295 e295"><textual class="po-textual">Constructor </textual><code class="po-atom e296 e296"><textual class="po-textual">DayView(c: Calendar, dI: DateInfo, fI:
                              FilterInfo)</textual></code></para></listitem><listitem class="po-container e297 e297"><para class="po-block e298 e298"><code class="po-atom e299 e299"><textual class="po-textual">setDate()</textual></code></para></listitem><listitem class="po-container e300 e300"><para class="po-block e301 e301"><code class="po-atom e302 e302"><textual class="po-textual">events(): Event*</textual></code></para></listitem></itemizedlist></listitem><listitem class="po-container e303 e303"><para class="po-block e304 e304"><code class="po-atom e305 e305"><textual class="po-textual">WeekView</textual></code></para><itemizedlist class="po-table e306 e306"><listitem class="po-container e307 e307"><para class="po-block e308 e308"><textual class="po-textual">Constructor </textual><code class="po-atom e309 e309"><textual class="po-textual">WeekView(c: Calendar, dI: DateInfo, fI:
                              FilterInfo)</textual></code></para></listitem><listitem class="po-container e310 e310"><para class="po-block e311 e311"><code class="po-atom e312 e312"><textual class="po-textual">setFirstDate()</textual></code></para></listitem><listitem class="po-container e313 e313"><para class="po-block e314 e314"><code class="po-atom e315 e315"><textual class="po-textual">events(): Event*</textual></code></para></listitem></itemizedlist></listitem><listitem class="po-container e316 e316"><para class="po-block e317 e317"><code class="po-atom e318 e318"><textual class="po-textual">MonthView</textual></code></para><itemizedlist class="po-table e319 e319"><listitem class="po-container e320 e320"><para class="po-block e321 e321"><textual class="po-textual">Constructor </textual><code class="po-atom e322 e322"><textual class="po-textual">MonthView(c: Calendar, dI: DateInfo, fI:
                              FilterInfo)</textual></code></para></listitem><listitem class="po-container e323 e323"><para class="po-block e324 e324"><code class="po-atom e325 e325"><textual class="po-textual">setMonthYear()</textual></code></para></listitem><listitem class="po-container e326 e326"><para class="po-block e327 e327"><code class="po-atom e328 e328"><textual class="po-textual">events(): Event*</textual></code></para></listitem></itemizedlist></listitem><listitem class="po-container e329 e329"><para class="po-block e330 e330"><code class="po-atom e331 e331"><textual class="po-textual">RangeView</textual></code></para><itemizedlist class="po-table e332 e332"><listitem class="po-container e333 e333"><para class="po-block e334 e334"><textual class="po-textual">Constructor </textual><code class="po-atom e335 e335"><textual class="po-textual">RangeView(c: Calendar, dI: DateInfo, fI:
                              FilterInfo)</textual></code></para></listitem><listitem class="po-container e336 e336"><para class="po-block e337 e337"><code class="po-atom e338 e338"><textual class="po-textual">setFirstDate()</textual></code></para></listitem><listitem class="po-container e339 e339"><para class="po-block e340 e340"><code class="po-atom e341 e341"><textual class="po-textual">setLastDate()</textual></code></para></listitem><listitem class="po-container e342 e342"><para class="po-block e343 e343"><code class="po-atom e344 e344"><textual class="po-textual">events(): Event*</textual></code></para></listitem></itemizedlist></listitem><listitem class="po-container e345 e345"><para class="po-block e346 e346"><code class="po-atom e347 e347"><textual class="po-textual">View</textual></code></para><itemizedlist class="po-table e348 e348"><listitem class="po-container e349 e349"><para class="po-block e350 e350"><textual class="po-textual">Constructor </textual><code class="po-atom e351 e351"><textual class="po-textual">View(c: Calendar, dI: DateInfo, fI:
                              FilterInfo)</textual></code></para></listitem><listitem class="po-container e352 e352"><para class="po-block e353 e353"><code class="po-atom e354 e354"><textual class="po-textual">setStatusMessage()</textual></code></para></listitem></itemizedlist></listitem><listitem class="po-container e355 e355"><para class="po-block e356 e356"><code class="po-atom e357 e357"><textual class="po-textual">Calendar</textual></code><textual class="po-textual">, </textual><code class="po-atom e358 e358"><textual class="po-textual">SuperEvent</textual></code><textual class="po-textual">,
                     </textual><code class="po-atom e359 e359"><textual class="po-textual">EventRule</textual></code></para><itemizedlist class="po-table e360 e360"><listitem class="po-container e361 e361"><para class="po-block e362 e362"><code class="po-atom e363 e363"><textual class="po-textual">getEventsForDay(date: Date): Event*</textual></code></para></listitem></itemizedlist></listitem><listitem class="po-container e364 e364"><para class="po-block e365 e365"><code class="po-atom e366 e366"><textual class="po-textual">Pattern</textual></code></para><itemizedlist class="po-table e367 e367"><listitem class="po-container e368 e368"><para class="po-block e369 e369"><code class="po-atom e370 e370"><textual class="po-textual">matches(date: Date): Boolean</textual></code></para></listitem></itemizedlist></listitem><listitem class="po-container e371 e371"><para class="po-block e372 e372"><code class="po-atom e373 e373"><textual class="po-textual">Event</textual></code></para><itemizedlist class="po-table e374 e374"><listitem class="po-container e375 e375"><para class="po-block e376 e376"><code class="po-atom e377 e377"><textual class="po-textual">filter(filterInfo: FilterInfo): P(Event)</textual></code><textual class="po-textual">, where the
                           returned set of </textual><code class="po-atom e378 e378"><textual class="po-textual">Event</textual></code><textual class="po-textual"> objects </textual><code class="po-atom e379 e379"><textual class="po-textual">P(Event)</textual></code><textual class="po-textual"> has at
                           most one element</textual></para></listitem></itemizedlist></listitem><listitem class="po-container e380 e380"><para class="po-block e381 e381"><textual class="po-textual">Global</textual></para><itemizedlist class="po-table e382 e382"><listitem class="po-container e383 e383"><para class="po-block e384 e384"><code class="po-atom e385 e385"><textual class="po-textual">datesForWeek(startDate: Date): Date*</textual></code></para></listitem><listitem class="po-container e386 e386"><para class="po-block e387 e387"><code class="po-atom e388 e388"><textual class="po-textual">datesForMonth(month: Month, year: Year): Date*</textual></code></para></listitem></itemizedlist></listitem></itemizedlist></section><section class="po-hcontainer e389 e389"><title class="po-block e390 e390"><textual class="po-textual">Interim summary</textual></title><para class="po-block e391 e391"><textual class="po-textual">What have we achieved so far? We have created a domain model for CalendarX that
               captures data and functionality, including abstract user interface, navigation and
               data access. We are now going to formalize the domain model with the goal of deriving
               an implementation for CalendarX based on XML technology.</textual></para></section></section></section><section class="po-hcontainer e392 e392" xml:id="sec.ASMGroundModel"><title class="po-block e393 e393"><textual class="po-textual">Formalizing the CalendarX domain model as an ASM</textual></title><para class="po-block e394 e394"><textual class="po-textual">We are looking for a methodology that embodies the DDD design philosophy in the target
         area of Web applications that are solely built with XML technology. We wish to formalize
         the domain model while keeping to the ubiquitious language that the domain model
         establishes.</textual></para><para class="po-block e395 e395"><textual class="po-textual">We have recently become acquainted with the method of Abstract State Machines
            (ASMs) [</textual><xref class="po-milestone e396 e396" linkend="ASMBook"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] that seems to be highly suitable, as explained
         above. So we have decided to explore this method for this project.</textual></para><para class="po-block e397 e397"><textual class="po-textual">ASMs are virtual machines that capture state in the form of algebras. This means that an
         ASM defines a vocabulary of set and function symbols and that it specifies functions and
         constraints with the help of algebraic expressions over this vocabulary.</textual></para><para class="po-block e398 e398"><textual class="po-textual">It is straightforward to translate our conceptual and page models into an algebraic
         vocabulary with type and identity constraints. For example, we will have set symbols
            </textual><code class="po-atom e399 e399"><textual class="po-textual">Calendar</textual></code><textual class="po-textual">, </textual><code class="po-atom e400 e400"><textual class="po-textual">SuperEvent</textual></code><textual class="po-textual"> and </textual><code class="po-atom e401 e401"><textual class="po-textual">String</textual></code><textual class="po-textual"> that denote
         pairwise disjoint sets. There is a function named </textual><code class="po-atom e402 e402"><textual class="po-textual">Calendar.description</textual></code><textual class="po-textual"> with
         domain </textual><code class="po-atom e403 e403"><textual class="po-textual">Calendar</textual></code><textual class="po-textual"> and range </textual><code class="po-atom e404 e404"><textual class="po-textual">String</textual></code><textual class="po-textual">. We use the standard
         object-oriented notation </textual><code class="po-atom e405 e405"><textual class="po-textual">c.description()</textual></code><textual class="po-textual"> for
            </textual><code class="po-atom e406 e406"><textual class="po-textual">Calendar.description(c)</textual></code><textual class="po-textual">. Setting the value for </textual><code class="po-atom e407 e407"><textual class="po-textual">description</textual></code><textual class="po-textual"> at
         argument </textual><code class="po-atom e408 e408"><textual class="po-textual">c</textual></code><textual class="po-textual"> in </textual><code class="po-atom e409 e409"><textual class="po-textual">Calendar</textual></code><textual class="po-textual"> as “Anne's private calendar”
         is achieved by setting </textual><code class="po-atom e410 e410"><textual class="po-textual">c.description()="Anne's private calendar"</textual></code><textual class="po-textual">, using
         standard object-oriented notation. This is called an update expression in ASM terminology.
         Updates are used to redefine functions at runtime and so change system state. Of course, we
         can reuse the function name </textual><code class="po-atom e411 e411"><textual class="po-textual">description</textual></code><textual class="po-textual"> for other domains, including
            </textual><code class="po-atom e412 e412"><textual class="po-textual">SuperEvent</textual></code><textual class="po-textual">, since the sets that represent concepts are considered to be
         pairwise disjoint as long as they are not related by inheritance. In case of inheritance we
         employ the object-oriented semantics of overwriting methods and polymorphy.</textual></para><para class="po-block e413 e413"><textual class="po-textual">The composition relationship between </textual><code class="po-atom e414 e414"><textual class="po-textual">Calendar</textual></code><textual class="po-textual"> and </textual><code class="po-atom e415 e415"><textual class="po-textual">SuperEvent</textual></code><textual class="po-textual">
         is modeled by a function </textual><code class="po-atom e416 e416"><textual class="po-textual">superEvents</textual></code><textual class="po-textual"> with domain </textual><code class="po-atom e417 e417"><textual class="po-textual">Calendar</textual></code><textual class="po-textual"> and
         range </textual><code class="po-atom e418 e418"><textual class="po-textual">P(SuperEvent)</textual></code><textual class="po-textual">, the power set of </textual><code class="po-atom e419 e419"><textual class="po-textual">SuperEvent</textual></code><textual class="po-textual">, that is
         reversible in the following sense: For any </textual><code class="po-atom e420 e420"><textual class="po-textual">SuperEvent</textual></code><textual class="po-textual"> object </textual><code class="po-atom e421 e421"><textual class="po-textual">se</textual></code><textual class="po-textual">
         there is exactly one </textual><code class="po-atom e422 e422"><textual class="po-textual">Calendar</textual></code><textual class="po-textual"> object </textual><code class="po-atom e423 e423"><textual class="po-textual">c</textual></code><textual class="po-textual"> so that </textual><code class="po-atom e424 e424"><textual class="po-textual">se</textual></code><textual class="po-textual"> is
         in </textual><code class="po-atom e425 e425"><textual class="po-textual">superEvents(c)</textual></code><textual class="po-textual">. With this constraint, </textual><code class="po-atom e426 e426"><textual class="po-textual">superEvents</textual></code><textual class="po-textual"> models
         precisely the composition relation that can be navigated in both directions.</textual></para><para class="po-block e427 e427"><textual class="po-textual">The full translation of the conceptual and page models into an ASM vocabulary with
         constraints is referenced in the supporting-materials section. This section also specifies
         the constructor functions, methods and auxilliary functions that are listed above. These
         functions are static; that is, they are independent of system state. The ASM methodology
         considers static functions as part of the initial state and leaves open how and at what
         level of abstraction they are specified.</textual></para><para class="po-block e428 e428"><textual class="po-textual">We note already, even before we have specified any changes of state, that the ASM
         notation is more precise than the UML class diagram notation, which required us to define
         constraints outside of the diagram that can be covered explicitly by the ASM notation. We
         will reap the full benefits of ASMs when specifying CalendarX functionality and user
         interface.</textual></para><para class="po-block e429 e429"><textual class="po-textual">An ASM program is designated as an initial state. It is a collection of statements of
         the form</textual></para><blockquote class="po-container e430 e430"><para class="po-block e431 e431"><emphasis class="po-inline e432 e432" role="bold"><textual class="po-textual">if</textual></emphasis><textual class="po-textual">
            </textual><emphasis class="po-inline e433 e433" role="ital"><textual class="po-textual">condition</textual></emphasis><textual class="po-textual">
            </textual><emphasis class="po-inline e434 e434" role="bold"><textual class="po-textual">then</textual></emphasis><textual class="po-textual">
            </textual><emphasis class="po-inline e435 e435" role="ital"><textual class="po-textual">updates</textual></emphasis></para></blockquote><para class="po-block e436 e436"><textual class="po-textual">The semantics of such a statement are straightforward: If the Boolean condition
            </textual><emphasis class="po-inline e437 e437" role="ital"><textual class="po-textual">condition</textual></emphasis><textual class="po-textual"> is met, then state updates </textual><emphasis class="po-inline e438 e438" role="ital"><textual class="po-textual">updates</textual></emphasis><textual class="po-textual"> are performed.</textual></para><para class="po-block e439 e439"><textual class="po-textual">Updates are changes in the ASMs algebra; that is, additions or deletions of elements to
         or from a set or changes in the definition of a function. For example, if we wish to add a
         new </textual><code class="po-atom e440 e440"><textual class="po-textual">SuperEvent</textual></code><textual class="po-textual"> object </textual><code class="po-atom e441 e441"><textual class="po-textual">se</textual></code><textual class="po-textual"> to a Calendar object </textual><code class="po-atom e442 e442"><textual class="po-textual">c</textual></code><textual class="po-textual">, we
         would redefine </textual><code class="po-atom e443 e443"><textual class="po-textual">c.superEvents()</textual></code><textual class="po-textual"> as </textual><code class="po-atom e444 e444"><textual class="po-textual">c.superEvents() ∪ {se}</textual></code><textual class="po-textual">,
         writing this as an update statement</textual></para><blockquote class="po-container e445 e445"><para class="po-block e446 e446"><code class="po-atom e447 e447"><textual class="po-textual">c.superEvents()=c.superEvents() ∪ {se}</textual></code></para></blockquote><para class="po-block e448 e448"><textual class="po-textual">In ASMs, all updates of all statements whose condition is true are performed
         simultaneously (or not at all if the update instructions are inconsistens).</textual></para><para class="po-block e449 e449"><textual class="po-textual">Before the next round of computations is performed, the ASM accepts user input: that is,
         specifically designated input variables are set from the outside.</textual></para><para class="po-block e450 e450"><textual class="po-textual">Hence, the modus operandi of an ASM is in repeating phases. The machine starts in the
         initial state, with input variables set.</textual></para><para class="po-block e451 e451"><textual class="po-textual">During each phase, it first executes the updates specified that apply in the current
         state and moves into a new state. Then, second, it accepts changes of the input variables
         from outside.</textual></para><para class="po-block e452 e452"><textual class="po-textual">In the CalendarX ASM, we have input states </textual><code class="po-atom e453 e453"><textual class="po-textual">nextPage</textual></code><textual class="po-textual"> with potential values
            </textual><code class="po-atom e454 e454"><textual class="po-textual">start</textual></code><textual class="po-textual">, </textual><code class="po-atom e455 e455"><textual class="po-textual">dayView</textual></code><textual class="po-textual">, </textual><code class="po-atom e456 e456"><textual class="po-textual">weekView</textual></code><textual class="po-textual">, </textual><code class="po-atom e457 e457"><textual class="po-textual">monthView</textual></code><textual class="po-textual">,
            </textual><code class="po-atom e458 e458"><textual class="po-textual">monthView</textual></code><textual class="po-textual">, </textual><code class="po-atom e459 e459"><textual class="po-textual">view</textual></code><textual class="po-textual"> and </textual><code class="po-atom e460 e460"><textual class="po-textual">quit</textual></code><textual class="po-textual"> as well as
            </textual><code class="po-atom e461 e461"><textual class="po-textual">nextCalendar</textual></code><textual class="po-textual"> of type </textual><code class="po-atom e462 e462"><textual class="po-textual">Calendar</textual></code><textual class="po-textual">, which must be a calendar in the
         CalendarX database, </textual><code class="po-atom e463 e463"><textual class="po-textual">nextDateInfo</textual></code><textual class="po-textual"> of type </textual><code class="po-atom e464 e464"><textual class="po-textual">PartialDate</textual></code><textual class="po-textual">, and
            </textual><code class="po-atom e465 e465"><textual class="po-textual">nextFilterInfo</textual></code><textual class="po-textual"> of type </textual><code class="po-atom e466 e466"><textual class="po-textual">FilterInfo</textual></code><textual class="po-textual">.</textual></para><para class="po-block e467 e467"><textual class="po-textual">Each phase of the ASM CalendarX program corresponds to one navigation step from one page
         to another. The input variable </textual><code class="po-atom e468 e468"><textual class="po-textual">nextPage</textual></code><textual class="po-textual"> determines which type of page is to be
         built. The input variables </textual><code class="po-atom e469 e469"><textual class="po-textual">nextDateInfo</textual></code><textual class="po-textual">, </textual><code class="po-atom e470 e470"><textual class="po-textual">nextCalendar</textual></code><textual class="po-textual"> and
            </textual><code class="po-atom e471 e471"><textual class="po-textual">nextFilterInfo</textual></code><textual class="po-textual"> determine from what information it is built.</textual></para><para class="po-block e472 e472"><textual class="po-textual">This is the CalendarX ASM:</textual></para><blockquote class="po-container e473 e473"><para class="po-block e474 e474"><emphasis class="po-inline e475 e475" role="bold"><textual class="po-textual">if</textual></emphasis><textual class="po-textual">
            </textual><code class="po-atom e476 e476"><textual class="po-textual">nextState==start</textual></code><textual class="po-textual">
            </textual><emphasis class="po-inline e477 e477" role="bold"><textual class="po-textual">then</textual></emphasis></para><blockquote class="po-container e478 e478"><para class="po-block e479 e479"><textual class="po-textual">
               </textual><code class="po-atom e480 e480"><textual class="po-textual">currentPage=new View(nextCalendar,nextDateInfo, nextFilterInfo)</textual></code><textual class="po-textual">
            </textual></para></blockquote><para class="po-block e481 e481"><emphasis class="po-inline e482 e482" role="bold"><textual class="po-textual">if</textual></emphasis><textual class="po-textual">
            </textual><code class="po-atom e483 e483"><textual class="po-textual">nextState==dayView</textual></code><textual class="po-textual">
            </textual><emphasis class="po-inline e484 e484" role="bold"><textual class="po-textual">then</textual></emphasis></para><blockquote class="po-container e485 e485"><para class="po-block e486 e486"><textual class="po-textual">
               </textual><code class="po-atom e487 e487"><textual class="po-textual">currentPage=new DayView(nextCalendar,nextDateInfo, nextFilterInfo)</textual></code><textual class="po-textual">
            </textual></para></blockquote><para class="po-block e488 e488"><emphasis class="po-inline e489 e489" role="bold"><textual class="po-textual">if</textual></emphasis><textual class="po-textual">
            </textual><code class="po-atom e490 e490"><textual class="po-textual">nextState==weekView</textual></code><textual class="po-textual">
            </textual><emphasis class="po-inline e491 e491" role="bold"><textual class="po-textual">then</textual></emphasis></para><blockquote class="po-container e492 e492"><para class="po-block e493 e493"><textual class="po-textual">
               </textual><code class="po-atom e494 e494"><textual class="po-textual">currentPage=new WeekView(nextCalendar,nextDateInfo, nextFilterInfo)</textual></code><textual class="po-textual">
            </textual></para></blockquote><para class="po-block e495 e495"><emphasis class="po-inline e496 e496" role="bold"><textual class="po-textual">if</textual></emphasis><textual class="po-textual">
            </textual><code class="po-atom e497 e497"><textual class="po-textual">nextState==monthView</textual></code><textual class="po-textual">
            </textual><emphasis class="po-inline e498 e498" role="bold"><textual class="po-textual">then</textual></emphasis></para><blockquote class="po-container e499 e499"><para class="po-block e500 e500"><textual class="po-textual">
               </textual><code class="po-atom e501 e501"><textual class="po-textual">currentPage=new MonthView(nextCalendar,nextDateInfo, nextFilterInfo)</textual></code><textual class="po-textual">
            </textual></para></blockquote><para class="po-block e502 e502"><emphasis class="po-inline e503 e503" role="bold"><textual class="po-textual">if</textual></emphasis><textual class="po-textual">
            </textual><code class="po-atom e504 e504"><textual class="po-textual">nextState==rangeView</textual></code><textual class="po-textual">
            </textual><emphasis class="po-inline e505 e505" role="bold"><textual class="po-textual">then</textual></emphasis></para><blockquote class="po-container e506 e506"><para class="po-block e507 e507"><textual class="po-textual">
               </textual><code class="po-atom e508 e508"><textual class="po-textual">currentPage=new RangeView(nextCalendar,nextDateInfo, nextFilterInfo)</textual></code><textual class="po-textual">
            </textual></para></blockquote><para class="po-block e509 e509"><emphasis class="po-inline e510 e510" role="bold"><textual class="po-textual">if</textual></emphasis><textual class="po-textual">
            </textual><code class="po-atom e511 e511"><textual class="po-textual">nextState==quit</textual></code><textual class="po-textual">
            </textual><emphasis class="po-inline e512 e512" role="bold"><textual class="po-textual">then</textual></emphasis></para><blockquote class="po-container e513 e513"><para class="po-block e514 e514"><textual class="po-textual"> stop operation </textual></para></blockquote></blockquote><para class="po-block e515 e515"><textual class="po-textual">The CalendarX ASM makes use of static constructor functions </textual><code class="po-atom e516 e516"><textual class="po-textual">new DayView()</textual></code><textual class="po-textual">,
            </textual><code class="po-atom e517 e517"><textual class="po-textual">new WeekView()</textual></code><textual class="po-textual">, </textual><code class="po-atom e518 e518"><textual class="po-textual">new MonthView()</textual></code><textual class="po-textual">, </textual><code class="po-atom e519 e519"><textual class="po-textual">new RangeView()</textual></code><textual class="po-textual">
         and </textual><code class="po-atom e520 e520"><textual class="po-textual">new View()</textual></code><textual class="po-textual"> that we have already specified.</textual></para><section class="po-hcontainer e521 e521"><title class="po-block e522 e522"><textual class="po-textual">Interim Summary</textual></title><para class="po-block e523 e523"><textual class="po-textual">What have we achieved so far? We have created a domain model for CalendarX that
            captures data and functionality. And we have fully formalized the CalendarX domain model
            as an Abstract State Machine (ASM) while staying within the realm of the domain
            language. The result is what in the ASM world is called a ground model, an ASM that
            formally captures the requirements of a system.</textual></para></section></section><section class="po-hcontainer e524 e524" xml:id="sec.implementation"><title class="po-block e525 e525"><textual class="po-textual">The CalendarX Implementation</textual></title><para class="po-block e526 e526"><textual class="po-textual">Robles Hahn as part of his Bachelor Thesis [</textual><xref class="po-milestone e527 e527" linkend="RoblesHahnBTh"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] and a
         number of groups of students as work in the lab courses “XML Technology” in the
         academic year 2011/2012 have implemented CalendarX as a Web application, on the basis of a
         domain model, using only XML technology as indicated above.</textual></para><para class="po-block e528 e528"><textual class="po-textual">Currently, we are exploring the ASM concept of refinement that derives the
         implementation in a more systematic way from the specification, in accord with the DDD
         philosophy. This involves mapping objects to XML represenations, methods to XQuery
         functions, and function calls and return values to HTTP request and response
         entities.</textual></para><para class="po-block e529 e529"><textual class="po-textual">We are going to relate our experiences with this approach in an expanded version of this
         paper.</textual></para></section><section class="po-hcontainer e530 e530" xml:id="sec.Conclusion"><title class="po-block e531 e531"><textual class="po-textual">Conclusions and further work</textual></title><itemizedlist class="po-table e532 e532"><listitem class="po-container e533 e533"><para class="po-block e534 e534"><textual class="po-textual">The principle of Domain-Driven Design has been fully validated for this
               project.</textual></para></listitem><listitem class="po-container e535 e535"><para class="po-block e536 e536"><textual class="po-textual">Formal specification and systematic derivation of implementation make building
               CalendarX straightforward.</textual></para></listitem><listitem class="po-container e537 e537"><para class="po-block e538 e538"><textual class="po-textual">The implementations of CalendarX are largely platform independent, as far as XML
               technology is used. For example, Orbeon Forms and XSLTForms can be used
               interchangably as XForms processors. However, there are some areas where platform
               dependencies still exist, particularly in access to HTTP data via eXist extension
               modules to XQuery. We plan to address these issues with another standardized XML
               technology, namely XProc. With XProc, we can then also derive in a declarative way
               the orchestration of server-side functions from the ASM model, replacing some clumsy
               XQuery functions or Orbeon flowscripts.</textual></para></listitem><listitem class="po-container e539 e539"><para class="po-block e540 e540"><textual class="po-textual">ASMs have been useful for clarification but so far not mission-critical. We need
               to explore them further for step-wise refinement from ground model to implementation.
            </textual></para></listitem><listitem class="po-container e541 e541"><para class="po-block e542 e542"><textual class="po-textual">There is some functionality we want to add: First of all, editing of calendar
               data, which we expect to be mostly an XForms challenge. Next, printing of calendar
               data; student solutions use SVG, generated with XSLT; our idea is to make this
               technology accessible to domain experts via a higher-level graphics DSL. Finally,
               access control, concurrent access, safety and liveness requirements; the quickest
               route seems to recur to Web application frameworks as suggested by Davis [</textual><xref class="po-milestone e543 e543" linkend="DavisOnREST"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].</textual></para></listitem><listitem class="po-container e544 e544"><para class="po-block e545 e545"><textual class="po-textual">Our methodology might be best suited to smaller projects that are amenable to
               end-user computing. This is OK. After all, large publishing projects such as
               producing an electronic Oxford English Dictionary have not been exercises in personal
               publishing, either. Boundaries might be pushed a bit further with other case studies,
               though.</textual></para></listitem></itemizedlist></section><appendix class="po-hcontainer e546 e546"><title class="po-block e547 e547"><textual class="po-textual">Supporting materials</textual></title><para class="po-block e548 e548"><textual class="po-textual">Please visit http://www11.in.tum.de/lehrstuhl/personen/sayih/2012BalisageVol8-Bruggemann-Klein01-documents for supporting materials,
         particularly</textual><itemizedlist class="po-table e549 e549"><listitem class="po-container e550 e550"><para class="po-block e551 e551"><textual class="po-textual">XML Schema document for CalendarX plus an instance.</textual></para></listitem><listitem class="po-container e552 e552"><para class="po-block e553 e553"><textual class="po-textual">ASM model for CalendarX.</textual></para></listitem></itemizedlist></para></appendix><bibliography class="po-hcontainer e554 e554"><title class="po-block e555 e555"><textual class="po-textual">Literature</textual></title><bibliomixed class="po-block e556 e556" xml:id="BaumanBalisage2009" xreflabel="B09"><textual class="po-textual">B.T. Bauman: </textual><emphasis class="po-inline e557 e557"><textual class="po-textual">Prying Apart
            Semantics and Implementation: Generating XML Schemata directly from ontologically sound
            conceptual models.</textual></emphasis><textual class="po-textual"> Balisage 2009. Available from
         http://www.balisage.net/Proceedings/. doi:</textual><biblioid class="po-atom e558 doi e558"><textual class="po-textual">10.4242/BalisageVol3.Bauman01</textual></biblioid><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e559 e559" xml:id="BrüggeEtAlsOOSWE" xreflabel="BD04"><textual class="po-textual">B. Brügge and A.H. Dutoit. </textual><emphasis class="po-inline e560 e560" role="ital"><textual class="po-textual">Object-Oriented Software Engineering: Using UML, Patterns and
            Java.</textual></emphasis><textual class="po-textual"> Second Edition, Prentice Hall 2004. </textual></bibliomixed><bibliomixed class="po-block e561 e561" xml:id="EPTatBalisage2010" xreflabel="BDPT10"><textual class="po-textual"> Brüggemann-Klein A, Demirel T,
         Pagano D und Tai A: </textual><emphasis class="po-inline e562 e562" role="ital"><textual class="po-textual">Reverse Modeling for Domain-Driven Engineering of
            Publishing Technology.</textual></emphasis><textual class="po-textual"> Balisage Series on Markup Technologies 2010. Available
         from http://www.balisage.net/Proceedings/. doi:</textual><biblioid class="po-atom e563 doi e563"><textual class="po-textual">10.4242/BalisageVol5.Bruggemann-Klein01</textual></biblioid><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e564 e564" xml:id="ASMBook" xreflabel="BS03"><textual class="po-textual">E. Börger and R. Stärk: </textual><emphasis class="po-inline e565 e565"><textual class="po-textual">Abstract
            State Machines. A Method for High-Level System Design and Analysis</textual></emphasis><textual class="po-textual">.
         Springer-Verlag 2003. </textual></bibliomixed><bibliomixed class="po-block e566 e566" xml:id="EPTatBalisage2008" xreflabel="BS08"><textual class="po-textual">A. Brüggemann-Klein, L. Singer:
            </textual><emphasis class="po-inline e567 e567" role="ital"><textual class="po-textual">Hypertext Links and Relationships in XML Databases.</textual></emphasis><textual class="po-textual">
         Presented at Balisage: The Markup Conference 2008, Montréal, Canada, 2008,
         http://www.balisage.net/. Available from
         http://hyquery.ls-softworks.de/HyperDataSystemsBalisage2008.pdf. doi:</textual><biblioid class="po-atom e568 doi e568"><textual class="po-textual">10.4242/BalisageVol1.Bruggemann-Klein01</textual></biblioid><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e569 e569" xml:id="EPTGoldenBraidXMLT" xreflabel="BS12"><textual class="po-textual">A. Brüggemann-Klein and M. Sayih:
            </textual><emphasis class="po-inline e570 e570"><textual class="po-textual">Metamodels for XML Schema</textual></emphasis><textual class="po-textual">. Work in Progress 2012.</textual></bibliomixed><bibliomixed class="po-block e571 e571" xml:id="EPTatEML2007" xreflabel="BST07"><textual class="po-textual">A. Brüggemann-Klein, Th. Schöpf, K. Toni:
            </textual><emphasis class="po-inline e572 e572" role="ital"><textual class="po-textual">Principles, Patterns and Procedures of XML Schema Design —
            Reporting from the XBlog Project.</textual></emphasis><textual class="po-textual"> Extreme Markup Languages 2007. Available
         from http://conferences.idealliance.org/extreme/.</textual></bibliomixed><bibliomixed class="po-block e573 e573" xml:id="CagleOnREST" xreflabel="C08"><textual class="po-textual">K. Cagle.
         </textual><emphasis class="po-inline e574 e574"><textual class="po-textual">REST-Oriented Architectures.</textual></emphasis><textual class="po-textual">. Balisage 2008. Available from
         http://www.balisage.net/Proceedings/. doi:</textual><biblioid class="po-atom e575 doi e575"><textual class="po-textual">10.4242/BalisageVol1.Cagle01</textual></biblioid><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e576 e576" xml:id="xCal" xreflabel="DDL09"><textual class="po-textual">C. Daboo, M. Douglass, and St. Lees.
            </textual><emphasis class="po-inline e577 e577"><textual class="po-textual">xCal: The XML format for iCalendar.</textual></emphasis><textual class="po-textual"> May 2011. Available from
         http://tools.ietf.org/pdf/draft-daboo-et-al-icalendar-in-xml-09.pdf.</textual></bibliomixed><bibliomixed class="po-block e578 e578" xml:id="DavisOnREST" xreflabel="D11"><textual class="po-textual">C. Davis.
         </textual><emphasis class="po-inline e579 e579"><textual class="po-textual">Programming Application Logic for RESTful Services Using XML
            Technologies.</textual></emphasis><textual class="po-textual">. Balisage 2011. Available from
         http://www.balisage.net/Proceedings/. doi:</textual><biblioid class="po-atom e580 doi e580"><textual class="po-textual">10.4242/BalisageVol7.Davis01</textual></biblioid><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e581 e581" xml:id="iCalendar" xreflabel="D09"><textual class="po-textual">B. Desruisseaux, ed. </textual><emphasis class="po-inline e582 e582"><textual class="po-textual">Internet
            Calendaring and Scheduling Core Object Specification (iCalendar)</textual></emphasis><textual class="po-textual">. September
         2009. Available from http://tools.ietf.org/pdf/rfc5545.pdf. </textual></bibliomixed><bibliomixed class="po-block e583 e583" xml:id="EvansDDD" xreflabel="E04"><textual class="po-textual">E. Evans: </textual><emphasis class="po-inline e584 e584" role="ital"><textual class="po-textual">Domain-Driven
            Design. Tackling Complexity in the Heart of Software</textual></emphasis><textual class="po-textual">. Addison-Wesley
         2004.</textual></bibliomixed><bibliomixed class="po-block e585 e585" xml:id="EndUserDevelopmentManifesto" xreflabel="FGSM04"><textual class="po-textual">G. Fischer, E. Giaccardi,
         Y. Ye, A.G. Sutcliffe, N. Mehandijev: </textual><emphasis class="po-inline e586 e586" role="ital"><textual class="po-textual">Meta-Design: A Manifesto for
            End-User Development.</textual></emphasis><textual class="po-textual"> CACM Vol 47 No 9, 2004. </textual></bibliomixed><bibliomixed class="po-block e587 e587" xml:id="FloydParadigmChange" xreflabel="F88"><textual class="po-textual">Ch. Floyd: </textual><emphasis class="po-inline e588 e588" role="ital"><textual class="po-textual">Outline of a Paradigm Change in Software Engineering.</textual></emphasis><textual class="po-textual"> ACM SIGSOFT Vol 13 NO
         2, 1988.</textual></bibliomixed><bibliomixed class="po-block e589 e589" xml:id="FowlerDSLs" xreflabel="F11"><textual class="po-textual">M. Fowler: </textual><emphasis class="po-inline e590 e590" role="ital"><textual class="po-textual">Domain-Specific Languages.</textual></emphasis><textual class="po-textual"> Addison-Wesley 2011.</textual></bibliomixed><bibliomixed class="po-block e591 e591" xml:id="XRXIntro" xreflabel="McC07"><textual class="po-textual">D. McCreary: </textual><emphasis class="po-inline e592 e592" role="ital"><textual class="po-textual">Introducing the XRX Architecture: XForms/REST/XQuery.</textual></emphasis><textual class="po-textual"> Available from
         http://datadictionary.blogspot.de/2007/12/introducing-xrx-architecture.html
         2007.</textual></bibliomixed><bibliomixed class="po-block e593 e593" xml:id="XRXExplained" xreflabel="Mc08"><textual class="po-textual">D. McCreary: </textual><emphasis class="po-inline e594 e594" role="ital"><textual class="po-textual">XRX:
            Simple, Elegant, Disruptive.</textual></emphasis><textual class="po-textual"> Available from
         http://www.oreillynet.com/xml/blog/2008/05/xrx_a_simple_elegant_disruptiv_1.html
         2008.</textual></bibliomixed><bibliomixed class="po-block e595 e595" xml:id="EPTatBalisage2009" xreflabel="PB09"><textual class="po-textual">D. Pagano and A. Brüggemann-Klein.
            </textual><emphasis class="po-inline e596 e596"><textual class="po-textual">Engineering Document Applications — From UML Models to XML Schemas</textual></emphasis><textual class="po-textual">.
         Balisage 2009. Available from http://www.balisage.net/Proceedings/. doi:</textual><biblioid class="po-atom e597 doi e597"><textual class="po-textual">10.4242/BalisageVol3.Bruggemann-Klein01</textual></biblioid><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e598 e598" xml:id="RoblesHahnBTh" xreflabel="RH11"><textual class="po-textual">J.T. Robles Hahn: </textual><emphasis class="po-inline e599 e599" role="ital"><textual class="po-textual">An XML Application for a Calendar System using Domain-Driven Design.</textual></emphasis><textual class="po-textual">
         Bachelor Thesis. Technische Universität München 2011.</textual></bibliomixed><bibliomixed class="po-block e600 e600" xml:id="PDPrinciplesPractice" xreflabel="SchN93"><textual class="po-textual"> D. Schuler, A. Namioka (Eds):
            </textual><emphasis class="po-inline e601 e601" role="ital"><textual class="po-textual">Participatory Design: Principles and Practices.</textual></emphasis><textual class="po-textual">
         Lawrence Erlbaum Associates, Hillsdale, NJ, 1993. </textual></bibliomixed></bibliography></article></classedDocument>