<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.3" xml:id="HR-23632987-8973"><title class="po-block e1 e1"><textual class="po-textual">Easy XML Serialization of C# and Java Objects</textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">Balisage: The Markup Conference 2011</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 2 - 5, 2011</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual">Object serialization is the process of rendering an object into a state that can be stored persistently. 
        Serializing objects to XML brings many advantages over binary encoding because XML is human and computer readable,
        and it also aims to have better interoperability between different programming languages. This paper presents
        Web Objects in XML (WOX), an efficient and easy to use XML serializer for C# and Java objects. It allows to serialize
        Java objects to XML, de-serialize them to C#, and viceversa. Our serialization approach does not need code annotations 
        or any other type of configuration from the user in order to serialize objects. The XML encoding used in our WOX serializer can 
        represent objects in other object-oriented programming languages. We describe the main features and uses of the WOX serializer,
        its implementation, and the XML representation generated along with some examples.</textual></para></abstract><author class="po-record e8 e8"><personname class="po-record e9 e9"><firstname class="po-field e10 e10"><textual class="po-textual">Carlos</textual></firstname><othername class="po-field e11 e11"><textual class="po-textual">R.</textual></othername><surname class="po-field e12 e12"><textual class="po-textual">Jaimez-Gonzalez</textual></surname></personname><personblurb class="po-container e13 e13"><para class="po-block e14 e14"><textual class="po-textual">Carlos is currently an Associate Professor at the Information Technology
          Department of the Universidad Autonoma Metropolitana in Mexico City, where he is responsible of the
          Web Technologies and Systems Research Group. He holds a PhD from the School of Computer 
          Science and Electronic Engineering of the University of Essex, UK. His research interests include 
          web services, distributed objects, XML and related technologies, interoperability, systems integration, 
          web application development, and technologies for enhancing education.</textual></para><para class="po-block e15 e15"><textual class="po-textual">Carlos has also been involved in several software projects for the industry; working as a Software 
          Developer, Team Leader, and Database Officer. He is a Microsoft Certified Systems Engineer (MCSE), 
          Database Administrator (MCDBA), and Solution Developer (MCSD).</textual></para></personblurb><affiliation class="po-record e16 e16"><jobtitle class="po-field e17 e17"><textual class="po-textual">Associate Professor</textual></jobtitle><orgname class="po-block e18 e18"><textual class="po-textual">Departamento de Tecnologias de la Informacion, Universidad Autonoma Metropolitana - Unidad Cuajimalpa, Mexico</textual></orgname></affiliation><email class="po-field e19 e19"><textual class="po-textual">cjaimez@correo.cua.uam.mx</textual></email></author><author class="po-record e20 e20"><personname class="po-record e21 e21"><firstname class="po-field e22 e22"><textual class="po-textual">Simon</textual></firstname><othername class="po-field e23 e23"><textual class="po-textual">M.</textual></othername><surname class="po-field e24 e24"><textual class="po-textual">Lucas</textual></surname></personname><personblurb class="po-container e25 e25"><para class="po-block e26 e26"><textual class="po-textual">Simon M. Lucas is a Professor of Computer Science at the University of Essex, UK. His main research interests 
          are in machine learning and games. He has published widely in these fields with over 130 peer-reviewed papers and 
          is the Founding Editor-in-Chief of the IEEE Transactions on Computational Intelligence and AI in Games.</textual></para><para class="po-block e27 e27"><textual class="po-textual">Professor Lucas was chair of IAPR Technical Committee 5 on Benchmarking and Software (2002–2006) and is the 
         inventor of the scanning n-tuple classifier, a fast and accurate OCR method. He was appointed inaugural chair of 
         the IEEE CIS Games Technical Committee in July 2006, has chaired or co-chaired many international conferences, 
         including the First IEEE Symposium on Computational Intelligence and Games in 2005. He is also an associate editor 
         of the IEEE Transactions on Evolutionary Computation, and the Springer Journal of Memetic Computing. He was an 
         invited keynote speaker or tutorial speaker at IEEE CEC 2007, IEEE WCCI 2008, IEEE CIG 2008, PPSN 2008,IEEE CEC 2009 
         and IEEE CEC 2010. He leads the newly established Game Intelligence Group at the University of Essex.</textual></para></personblurb><affiliation class="po-record e28 e28"><jobtitle class="po-field e29 e29"><textual class="po-textual">Professor</textual></jobtitle><orgname class="po-block e30 e30"><textual class="po-textual">School of Computer Science and Electronic Engineering, University of Essex, UK</textual></orgname></affiliation><email class="po-field e31 e31"><textual class="po-textual">sml@essex.ac.uk</textual></email></author><author class="po-record e32 e32"><personname class="po-record e33 e33"><firstname class="po-field e34 e34"><textual class="po-textual">Erick</textual></firstname><othername class="po-field e35 e35"><textual class="po-textual">J.</textual></othername><surname class="po-field e36 e36"><textual class="po-textual">Lopez-Ornelas</textual></surname></personname><personblurb class="po-container e37 e37"><para class="po-block e38 e38"><textual class="po-textual">Erick is currently an Associate Professor at the Information Technology
          Department of the Universidad Autonoma Metropolitana in Mexico City. He holds a PhD from the Universite
          Paul Sabatier (France). He worked as researcher in the high resolution remote perception laboratory
          in Toulouse, France, in the areas of processing of high resolution satelital images, and geographical
          information systems. His research interests include the analysis of high resolution images,
          and the  processing, visualization, and extraction of knowledge from spatial information.</textual></para></personblurb><affiliation class="po-record e39 e39"><jobtitle class="po-field e40 e40"><textual class="po-textual">Associate Professor</textual></jobtitle><orgname class="po-block e41 e41"><textual class="po-textual">Departamento de Tecnologias de la Informacion, Universidad Autonoma Metropolitana - Unidad Cuajimalpa, Mexico</textual></orgname></affiliation><email class="po-field e42 e42"><textual class="po-textual">elopez@correo.cua.uam.mx</textual></email></author><legalnotice class="po-container e43 e43"><para class="po-block e44 e44"><textual class="po-textual">Copyright © 2011 by the authors. Used with permission.</textual></para></legalnotice><keywordset class="po-table e45 e45" role="author"><keyword class="po-field e46 e46"><textual class="po-textual">XML serializer</textual></keyword><keyword class="po-field e47 e47"><textual class="po-textual">Java objects</textual></keyword><keyword class="po-field e48 e48"><textual class="po-textual">C# objects</textual></keyword><keyword class="po-field e49 e49"><textual class="po-textual">Interoperability</textual></keyword><keyword class="po-field e50 e50"><textual class="po-textual">XML representation</textual></keyword></keywordset></info><section class="po-hcontainer e51 e51"><title class="po-block e52 e52"><textual class="po-textual">Introduction</textual></title><para class="po-block e53 e53"><textual class="po-textual">Object serialization is the process of rendering an object into a state that can be stored persistently. 
      Serializing objects to XML brings many advantages over binary encoding because XML is human and computer readable,
      and it also aims to have better interoperability between different programming languages. Interoperability is 
      an important issue in distributed object-based systems, because it allows the communication of 
      programs (clients and servers) written in different object-oriented programming languages. There are some fundamental 
      issues that have to be agreed by the different programming languages to be able to reach interoperability. Some of these 
      are related to the data type mapping, object representation, messages, serialization and de-serialization.</textual></para><para class="po-block e54 e54"><emphasis class="po-inline e55 e55" role="ital"><textual class="po-textual">Data type mapping</textual></emphasis><textual class="po-textual">. Data types are one of the main issues when it comes to interoperability between different 
      programming languages. There must be an agreed mapping between the data types in the programming language X and the data 
      types in the programming language Y. One way to solve this problem is a mapping table with the different data types 
      supported by the different programming languages.</textual></para><para class="po-block e56 e56"><emphasis class="po-inline e57 e57" role="ital"><textual class="po-textual">Object representation</textual></emphasis><textual class="po-textual">. There must be a standard way of representing objects, either the object is written in Java, 
      C#, or other object-oriented programming language. A standard format must be established to represent the supported 
      structures in the different programming languages: classes, primitive data types, arrays, and user-defined classes. 
      This must also include a standard way to represent remote object references.</textual></para><para class="po-block e58 e58"><emphasis class="po-inline e59 e59" role="ital"><textual class="po-textual">Messages</textual></emphasis><textual class="po-textual">. They represent the way clients and servers communicate. Messages are used to make requests or receive 
      responses, and they must also be written in a standard way to be understood by clients and servers.</textual></para><para class="po-block e60 e60"><emphasis class="po-inline e61 e61" role="ital"><textual class="po-textual">Serialization and de-serialization</textual></emphasis><textual class="po-textual">. In the context of data storage and transmission, serialization is the process 
      of rendering an object into a state that can be saved persistently into a storage medium, such as a file, database, or 
      a stream to be transmitted through the network. De-serialization is the opposite process, which puts the serialized 
      version of the object into a live object. Serialization and de-serialization are processes heavily used when dealing 
      with distributed object-based systems.</textual></para><para class="po-block e62 e62"><textual class="po-textual">In this paper we present Web Objects in XML (WOX), an efficient and easy to use XML serializer for interoperability 
      between the C# and Java programming languages. The WOX serializer is a stand-alone library based on XML (woxSerializer.jar 
      for the Java programming language, and woxSerializer.dll for the C# programming language), which is able to serialize
      Java and C# objects to XML and back again. One of its main features is the generation of standard XML, which is language 
      independent. This means that if we serialize a Java object to XML, we could take the generated XML to reconstruct the 
      object back to C#; and viceversa. It is worth noticing that our serialization approach does not need code annotations 
      or any other type of configuration from the user in order to serialize objects. </textual></para><para class="po-block e63 e63"><textual class="po-textual">We have made our WOX serializer publicly available as an open-source project,
      which can be downloaded from </textual><link class="po-inline e64 e64" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://woxserializer.sourceforge.net/</textual></link><textual class="po-textual">. It must be noticed that the
      WOX serializer presented in this paper is an improved and interoperable version of the serializer that is part of
      the WOX framework reported in [Jaimez 2007], which has been used to develop distributed object-based applications.
      Many people have been using our WOX interoperable serializer since we made it available. As a consequence of this work, 
      the MSDN Magazine (a Microsoft Magazine) published an article, in its October 2010 issue [Khan 2010], about interoperability between 
      Java and .NET, where they mention and recommend the use of our work for interoperability between applications. We consider this as a 
      valuable example that demonstrates that our work has had an impact on the MSDN community.</textual></para><para class="po-block e65 e65"><textual class="po-textual">The rest of the paper is organized as follows. Existing XML serializers are discussed in the next section. 
      A following section describes the main features and uses of the WOX serializer. Then, we dedicate another section to the implementation 
      of the WOX serializer. The XML representation generated by the WOX serializer is presented in a subsequent section along with some examples. 
      Finally, conclusions and further work are discussed in the final section.</textual></para></section><section class="po-hcontainer e66 e66"><title class="po-block e67 e67"><textual class="po-textual">Existing XML Serializers</textual></title><para class="po-block e68 e68"><textual class="po-textual">We have not found any out of the box XML serializer to interoperate 
      between different programming languages. In this section we present a series of frameworks and libraries to 
      serialize objects to XML. All of the libraries explored (except one of them) are not able to generate a standard 
      XML object representation to interoperate between different programming languages.</textual></para><para class="po-block e69 e69"><emphasis class="po-inline e70 e70" role="ital"><textual class="po-textual">XStream</textual></emphasis><textual class="po-textual">. This is a Java library [XStream 2010] to serialize objects to XML and back again. XStream is able 
      to serialize most objects without the need for custom mappings. The XML generated is easy to understand. One of 
      its features is the use of aliases, which offer a way to use different tags or attribute names in the XML produced. 
      Class types, package names, and field names can be mapped to XML tags. This library is a good option to have an 
      object serialized to XML, but the main limitation is that it is only implemented in Java.</textual></para><para class="po-block e71 e71"><emphasis class="po-inline e72 e72" role="ital"><textual class="po-textual">Koala</textual></emphasis><textual class="po-textual">. Koala XML serialization [Koala 1998] is a Java application that provides a way to serialize and 
      de-serialize any Java objects in an XML document. The serialization mechanism of Koala relies in the Java 
      Serializable interface. This application is called KOML for Koala Object Markup Language, which is also a 100% 
      pure Java solution. The website of this project has not been updated since 1998.</textual></para><para class="po-block e73 e73"><emphasis class="po-inline e74 e74" role="ital"><textual class="po-textual">XMOP</textual></emphasis><textual class="po-textual">. XML Metadata Object Persistence [XMOP 2000] allows some degree of interoperability between object 
      technologies such as Java, and Microsoft COM. In the case of Java, it provides automatic serialization capabilities 
      only for simple classes. For those classes that contain string and array members, developers have to hand code the 
      serialization methods. In the case of COM, it does not provide automatic serialization for simple nor complex objects. 
      Developers have to code COM serialization/persistence through some interfaces provided. XMOP employs the Simple 
      Object Definition Language (SODL) and its DTD. Using introspection an object is serialized in the XMOP document format, 
      which is a description of the interfaces, properties and methods of an object. Although the XML representation 
      generated by XMOP is interoperable between programming languages, the developer has to do considerable effort to hand 
      code the serialization methods for the objects to be serialized.</textual></para><para class="po-block e75 e75"><emphasis class="po-inline e76 e76" role="ital"><textual class="po-textual">JSX</textual></emphasis><textual class="po-textual">. Java Serialization to XML [JSX 2002] serializes only Java objects to XML. JSX can persist any Java object in 
      a human readable format, where the XML generated is nice and clean. Another of its benefits is that it provides the 
      evolution techniques of the Java Object Serialization. This library used to be free, but it now provides a trial period 
      of 30 days, after which the user must pay to use it.</textual></para><para class="po-block e77 e77"><emphasis class="po-inline e78 e78" role="ital"><textual class="po-textual">Castor</textual></emphasis><textual class="po-textual">. The Castor project [Castor 2010] is an open source data binding framework for Java. It provides Java-to-XML 
      binding and Java-to-SQL persistence. The Java-to-XML framework enables the user to deal with the data defined in an XML 
      document through an object model which represents that data. Castor can marshal almost any Java object to and from XML. 
      One restriction is that the Java classes of the objects to be serialized must follow the Java Bean conventions. Castor 
      uses a set of class descriptors and field descriptors to describe how an object should be serialized and de-serialized 
      from XML. Castor can work in two different modes: the introspection mode does not require any configuration from the 
      user; but in the mapping mode, the user provides a user-defined mapping file that allows the definition of a customized 
      mapping between Java classes and XML.</textual></para><para class="po-block e79 e79"><emphasis class="po-inline e80 e80" role="ital"><textual class="po-textual">JAXB</textual></emphasis><textual class="po-textual">. The Java Architecture for XML Binding [JAXB 2010] is a framework for processing XML documents. Unmarshalling 
      an XML document with JAXB results in a tree of objects, with the nodes in this tree corresponding to XML elements, which 
      contain attributes and the content as instance variables. In order to extract this information and convert it to objects 
      from the XML document it is needed an XML Schema (which defines the structural relationships and data types). The XML 
      Schema is compiled, and a set of Java classes is generated, which define the types required for accessing elements, 
      attributes and other content. In this approach the user is required to know the structure of the XML document, and 
      create an XML Schema in order to map it to Java objects.</textual></para><para class="po-block e81 e81"><textual class="po-textual">Although there are other existing libraries to serialize objects or messages to XML and viceversa, they are not 
      stand-alone, but they are part of a framework for web services, such as XML-RPC [Winer 1999], or those that implement 
      the SOAP standard [SOAP 2003]. Web service frameworks like those use XML serialization internally, and are out 
      of the scope of this paper.</textual></para><para class="po-block e82 e82"><textual class="po-textual">The next section presents some of the main features of our WOX serializer, which can be used to generate standard 
      XML representations of objects, and is able to interoperate between C# and Java.</textual></para></section><section class="po-hcontainer e83 e83"><title class="po-block e84 e84"><textual class="po-textual">WOX Features and Uses</textual></title><para class="po-block e85 e85"><textual class="po-textual">The main features of the WOX serializer are listed below. 
    </textual><itemizedlist class="po-table e86 e86"><listitem class="po-container e87 e87"><para class="po-block e88 e88"><emphasis class="po-inline e89 e89" role="ital"><textual class="po-textual">Stand-alone</textual></emphasis><textual class="po-textual">. It runs as a stand-alone library to serialize and de-serialize Java or C# objects.</textual></para></listitem><listitem class="po-container e90 e90"><para class="po-block e91 e91"><emphasis class="po-inline e92 e92" role="ital"><textual class="po-textual">Easy to use</textual></emphasis><textual class="po-textual">. There is an Easy class, in both programming languages, that provides serialization and de-serialization methods.</textual></para></listitem><listitem class="po-container e93 e93"><para class="po-block e94 e94"><emphasis class="po-inline e95 e95" role="ital"><textual class="po-textual">Simple XML</textual></emphasis><textual class="po-textual">. The XML generated by the WOX serializer is simple, easy to understand, and language independent.</textual></para></listitem><listitem class="po-container e96 e96"><para class="po-block e97 e97"><emphasis class="po-inline e98 e98" role="ital"><textual class="po-textual">Classes require no modifications</textual></emphasis><textual class="po-textual">. The classes of objects to be serialized do not require to be changed with default 
                  constructors, getters, setters, or any other modifications.</textual></para></listitem><listitem class="po-container e99 e99"><para class="po-block e100 e100"><emphasis class="po-inline e101 e101" role="ital"><textual class="po-textual">Field visibility</textual></emphasis><textual class="po-textual">. Private fields in classes are serialized just as any other field. The WOX serializer serializes 
                  fields regardless their visibility.</textual></para></listitem><listitem class="po-container e102 e102"><para class="po-block e103 e103"><emphasis class="po-inline e104 e104" role="ital"><textual class="po-textual">Interoperability between Java and C#</textual></emphasis><textual class="po-textual">. WOX can serialize a Java object to XML, and reconstruct the XML back to a C# 
                  object; and viceversa.</textual></para></listitem><listitem class="po-container e105 e105"><para class="po-block e106 e106"><emphasis class="po-inline e107 e107" role="ital"><textual class="po-textual">Standard XML object representation</textual></emphasis><textual class="po-textual">. This could potentially allow to have WOX serializers in different object-oriented 
                  programming languages. There are two WOX serializers already developed: one for Java, and one for C#.</textual></para></listitem><listitem class="po-container e108 e108"><para class="po-block e109 e109"><emphasis class="po-inline e110 e110" role="ital"><textual class="po-textual">WOX data types mapping</textual></emphasis><textual class="po-textual">. There is a WOX mapping table that specifies how data types in Java and C# are mapped to WOX data types.</textual></para></listitem><listitem class="po-container e111 e111"><para class="po-block e112 e112"><emphasis class="po-inline e113 e113" role="ital"><textual class="po-textual">Robust to class changes</textual></emphasis><textual class="po-textual">. If classes change, default values will be used for newly added fields.</textual></para></listitem><listitem class="po-container e114 e114"><para class="po-block e115 e115"><emphasis class="po-inline e116 e116" role="ital"><textual class="po-textual">Arrays</textual></emphasis><textual class="po-textual">. Uni-dimensional and multi-dimensional arrays of primitive types and objects of any class are handled by the serializer.</textual></para></listitem><listitem class="po-container e117 e117"><para class="po-block e118 e118"><emphasis class="po-inline e119 e119" role="ital"><textual class="po-textual">Base-64</textual></emphasis><textual class="po-textual">. Byte arrays are base-64 encoded for efficiency.</textual></para></listitem><listitem class="po-container e120 e120"><para class="po-block e121 e121"><emphasis class="po-inline e122 e122" role="ital"><textual class="po-textual">Collection classes</textual></emphasis><textual class="po-textual">. Lists and Maps are provided as WOX data types. They are mapped to the ArrayList 
                  and HashMap classes in Java; and the ArrayList and Hashtable classes in C#.</textual></para></listitem><listitem class="po-container e123 e123"><para class="po-block e124 e124"><emphasis class="po-inline e125 e125" role="ital"><textual class="po-textual">Object references</textual></emphasis><textual class="po-textual">. TheWOX serializer is capable to handle duplicate and circular object references with id and idref attributes.</textual></para></listitem><listitem class="po-container e126 e126"><para class="po-block e127 e127"><emphasis class="po-inline e128 e128" role="ital"><textual class="po-textual">Class and Type</textual></emphasis><textual class="po-textual">. Objects of these classes are saved by their String name.</textual></para></listitem><listitem class="po-container e129 e129"><para class="po-block e130 e130"><emphasis class="po-inline e131 e131" role="ital"><textual class="po-textual">Small footprint</textual></emphasis><textual class="po-textual">. The woxSerializer.jar file (which contains only .class files) is only 25KB.</textual></para></listitem></itemizedlist><textual class="po-textual">
      </textual></para><para class="po-block e132 e132"><textual class="po-textual">The WOX serializer can be used by any program that needs to interoperate between C# or Java, or simply to serialize 
      objects to XML from any of those programming languages. Some of the purposes where the WOX serializer can be used are listed below. 
    </textual><itemizedlist class="po-table e133 e133"><listitem class="po-container e134 e134"><para class="po-block e135 e135"><emphasis class="po-inline e136 e136" role="ital"><textual class="po-textual">Transport an object</textual></emphasis><textual class="po-textual">. Serializing an object allows you send it through a network. Then it can be reconstructed at the other end.</textual></para></listitem><listitem class="po-container e137 e137"><para class="po-block e138 e138"><emphasis class="po-inline e139 e139" role="ital"><textual class="po-textual">Store an object</textual></emphasis><textual class="po-textual">. Persisting objects with the WOX serializer is easy. You can use them later by reconstructing them to the 
                  appropriate programming language.</textual></para></listitem><listitem class="po-container e140 e140"><para class="po-block e141 e141"><emphasis class="po-inline e142 e142" role="ital"><textual class="po-textual">Represent an object in a standard format</textual></emphasis><textual class="po-textual">. The XML generated byWOX aims to be independent of the programming language in which 
                  the object was created.</textual></para></listitem><listitem class="po-container e143 e143"><para class="po-block e144 e144"><emphasis class="po-inline e145 e145" role="ital"><textual class="po-textual">Work with Java and C# objects</textual></emphasis><textual class="po-textual">. Java and C# objects can be serialized and de-serialized to and from XML.</textual></para></listitem><listitem class="po-container e146 e146"><para class="po-block e147 e147"><emphasis class="po-inline e148 e148" role="ital"><textual class="po-textual">Testing</textual></emphasis><textual class="po-textual">. An object can be serialized to inspect its current state (fields and nested objects). This can help for debugging purposes.</textual></para></listitem><listitem class="po-container e149 e149"><para class="po-block e150 e150"><emphasis class="po-inline e151 e151" role="ital"><textual class="po-textual">Duplicate an object</textual></emphasis><textual class="po-textual">. Serialization is an easy way to duplicate objects.</textual></para></listitem></itemizedlist><textual class="po-textual">
      </textual></para></section><section class="po-hcontainer e152 e152"><title class="po-block e153 e153"><textual class="po-textual">WOX Implementation</textual></title><para class="po-block e154 e154"><textual class="po-textual">The implementation of the WOX serializer is described in this section through three different flow charts, which 
      illustrate how the WOX serializer writes any object to XML. This section has also been presented in [Jaimez 2011].
      The flow chart in </textual><xref class="po-milestone e155 e155" linkend="FigFlowChart01Basic"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> shows 
      the base functionality. There are some notes indicated with numbers inside a dotted square (A1 to A7) which are explained 
      below.</textual></para><figure class="po-container e156 e156" xml:id="FigFlowChart01Basic"><title class="po-block e157 e157"><textual class="po-textual">Flow chart A</textual></title><mediaobject class="po-container e158 e158"><imageobject class="po-container e159 e159"><imagedata class="po-meta e160 e160" fileref="../../../vol7/graphics/Jaimez01/Jaimez01-001.jpg" format="jpg"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e161 e161"><para class="po-block e162 e162"><textual class="po-textual">Flow chart A: Base of the WOX serializer.</textual></para></caption></figure><para class="po-block e163 e163"><textual class="po-textual">A1. We represent a NULL object as an EMPTY object in XML.</textual></para><para class="po-block e164 e164"><textual class="po-textual">A2. We use a Map to store object references. This avoids the duplication of objects in the XML representation, and 
      the unnecessary serialization processing of objects that were already serialized. This Map is also used to handle adequately 
      recursive object references, because the serializer puts an object in the Map as soon as it goes through it (it is the first 
      step in the serialization process). This means that if this object is nested inside another object, the serializer will not 
      serialize it again, because when it reaches this object, the serializer will find out that its reference is already in the Map, 
      which handles the problem of recursive references.</textual></para><para class="po-block e165 e165"><textual class="po-textual">A3. If the object is already in the Map, it is not necessary to serialize it again (a reference to the object will be 
      stored instead). The Map is populated as the serializer finds new objects. The </textual><code class="po-atom e166 e166"><textual class="po-textual">idref</textual></code><textual class="po-textual"> XML attribute specifies the 
      object </textual><code class="po-atom e167 e167"><textual class="po-textual">id</textual></code><textual class="po-textual"> in the Map that corresponds to the object found. It is important to notice that the
      </textual><code class="po-atom e168 e168"><textual class="po-textual">id</textual></code><textual class="po-textual"> and </textual><code class="po-atom e169 e169"><textual class="po-textual">idref</textual></code><textual class="po-textual"> attributes are not the same as those normally used in the XML sense; but they
      are used to identify uniquely objects that have already been serialized.</textual></para><para class="po-block e170 e170"><textual class="po-textual">A4. We say that an object is stringable if it is of any of the following classes: </textual><code class="po-atom e171 e171"><textual class="po-textual">Byte</textual></code><textual class="po-textual">, </textual><code class="po-atom e172 e172"><textual class="po-textual">Short</textual></code><textual class="po-textual">, 
      </textual><code class="po-atom e173 e173"><textual class="po-textual">Integer</textual></code><textual class="po-textual">, </textual><code class="po-atom e174 e174"><textual class="po-textual">Long</textual></code><textual class="po-textual">, </textual><code class="po-atom e175 e175"><textual class="po-textual">Float</textual></code><textual class="po-textual">, </textual><code class="po-atom e176 e176"><textual class="po-textual">Double</textual></code><textual class="po-textual">, </textual><code class="po-atom e177 e177"><textual class="po-textual">Character</textual></code><textual class="po-textual">, </textual><code class="po-atom e178 e178"><textual class="po-textual">Boolean</textual></code><textual class="po-textual">, 
      </textual><code class="po-atom e179 e179"><textual class="po-textual">Class</textual></code><textual class="po-textual">, </textual><code class="po-atom e180 e180"><textual class="po-textual">String</textual></code><textual class="po-textual">.</textual></para><para class="po-block e181 e181"><textual class="po-textual">A5. Other objects in their stringable versions can be seen below.
</textual><programlisting class="po-block e182 e182" xml:space="preserve"><textual class="po-textual">&lt;object type="boolean" value="true" id="11" /&gt;
&lt;object type="char" value="\u0009" id="15" /&gt;
&lt;object type="int" value"785" id="21" /&gt;</textual></programlisting><textual class="po-textual">
    </textual></para><para class="po-block e183 e183"><textual class="po-textual">A6. The serializer will process the array. The process to serialize an array is illustrated in the Flow chart B shown in Figure 2.</textual></para><para class="po-block e184 e184"><textual class="po-textual">A7. At this point the serializer has found another type of object (not a stringable object, not an array). It is a 
      user-defined class or other type of object not covered in the previous cases. The serializer will write this object, 
      and go through each of its fields (attributes) to serialize them. The process to serialize each of the object fields 
      (attributes) is illustrated in Figure 3.</textual></para><para class="po-block e185 e185"><textual class="po-textual">The flow chart in </textual><xref class="po-milestone e186 e186" linkend="FigFlowChart02Arrays"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> shows the functionality of the WOX serializer to deal with 
      arrays. The flow chart has some notes indicated with numbers inside a dotted square (B1 to B3), which are explained below.</textual></para><figure class="po-container e187 e187" xml:id="FigFlowChart02Arrays"><title class="po-block e188 e188"><textual class="po-textual">Flow chart B</textual></title><mediaobject class="po-container e189 e189"><imageobject class="po-container e190 e190"><imagedata class="po-meta e191 e191" fileref="../../../vol7/graphics/Jaimez01/Jaimez01-002.jpg" format="jpg"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e192 e192"><para class="po-block e193 e193"><textual class="po-textual">Flow chart B: Arrays.</textual></para></caption></figure><para class="po-block e194 e194"><textual class="po-textual">B1. The serializer checks the class of the object against an array that holds all the possible primitive uni-dimensional arrays.</textual></para><para class="po-block e195 e195"><textual class="po-textual">B2. It is not a uni-dimensional array. It could be a n-dimensional array, or an array of objects of user-defined classes.</textual></para><para class="po-block e196 e196"><textual class="po-textual">B3. The type of the primitive array found is any of the following: </textual><code class="po-atom e197 e197"><textual class="po-textual">int</textual></code><textual class="po-textual">, </textual><code class="po-atom e198 e198"><textual class="po-textual">boolean</textual></code><textual class="po-textual">, </textual><code class="po-atom e199 e199"><textual class="po-textual">short</textual></code><textual class="po-textual">, 
      </textual><code class="po-atom e200 e200"><textual class="po-textual">long</textual></code><textual class="po-textual">, </textual><code class="po-atom e201 e201"><textual class="po-textual">char</textual></code><textual class="po-textual">, </textual><code class="po-atom e202 e202"><textual class="po-textual">float</textual></code><textual class="po-textual"> or </textual><code class="po-atom e203 e203"><textual class="po-textual">double</textual></code><textual class="po-textual">. Some examples of primitive arrays serialized to XML 
      by the WOX serializer are shown below.
</textual><programlisting class="po-block e204 e204" xml:space="preserve"><textual class="po-textual">&lt;array type="int" length="6" id="10"&gt;45 67 78 32 34 79&lt;/array&gt;
&lt;array type="char" length="3" id="19"&gt;\u0065 \u0004 \u0067&lt;/array&gt;</textual></programlisting><textual class="po-textual">
    </textual></para><para class="po-block e205 e205"><textual class="po-textual">The flow chart in </textual><xref class="po-milestone e206 e206" linkend="FigFlowChart03Fields"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> shows the functionality of the WOX serializer to deal with fields of an object. The 
      flow chart has some notes indicated with numbers inside a dotted square (C1 to C3), which are explained below.</textual></para><figure class="po-container e207 e207" xml:id="FigFlowChart03Fields"><title class="po-block e208 e208"><textual class="po-textual">Flow chart C</textual></title><mediaobject class="po-container e209 e209"><imageobject class="po-container e210 e210"><imagedata class="po-meta e211 e211" fileref="../../../vol7/graphics/Jaimez01/Jaimez01-003.jpg" format="jpg"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e212 e212"><para class="po-block e213 e213"><textual class="po-textual">Flow chart C: Fields of an object.</textual></para></caption></figure><para class="po-block e214 e214"><textual class="po-textual">C1. The WOX serializer considers the following as primitive data types: </textual><code class="po-atom e215 e215"><textual class="po-textual">byte</textual></code><textual class="po-textual">, </textual><code class="po-atom e216 e216"><textual class="po-textual">short</textual></code><textual class="po-textual">, 
      </textual><code class="po-atom e217 e217"><textual class="po-textual">int</textual></code><textual class="po-textual">, </textual><code class="po-atom e218 e218"><textual class="po-textual">long</textual></code><textual class="po-textual">, </textual><code class="po-atom e219 e219"><textual class="po-textual">float</textual></code><textual class="po-textual">, </textual><code class="po-atom e220 e220"><textual class="po-textual">double</textual></code><textual class="po-textual">, </textual><code class="po-atom e221 e221"><textual class="po-textual">char</textual></code><textual class="po-textual">, </textual><code class="po-atom e222 e222"><textual class="po-textual">boolean</textual></code><textual class="po-textual">.</textual></para><para class="po-block e223 e223"><textual class="po-textual">C2. In this case stringable objects are treated as fields of a parent object. A stringable object is not labeled 
      as object when it is the field of another object (observe that it also lacks of the id attribute). This aims to have 
      a more compact encoding.</textual></para><para class="po-block e224 e224"><textual class="po-textual">C3. An example of the XML generated for a field of an object is shown below. The field is an object of type 
      </textual><code class="po-atom e225 e225"><textual class="po-textual">ser.Person</textual></code><textual class="po-textual">, which also has two more fields: </textual><code class="po-atom e226 e226"><textual class="po-textual">name</textual></code><textual class="po-textual"> of type </textual><code class="po-atom e227 e227"><textual class="po-textual">string</textual></code><textual class="po-textual">, and 
      </textual><code class="po-atom e228 e228"><textual class="po-textual">age</textual></code><textual class="po-textual"> of type </textual><code class="po-atom e229 e229"><textual class="po-textual">int</textual></code><textual class="po-textual">.
</textual><programlisting class="po-block e230 e230" xml:space="preserve"><textual class="po-textual">&lt;field name="fieldName"&gt;
   &lt;object type="ser.Person" id="9"&gt;
      &lt;field name="name" type="string" value="Carlos" /&gt;
      &lt;field name="age" type="int" value="30" /&gt;
   &lt;/object&gt;
&lt;/field&gt;</textual></programlisting><textual class="po-textual">
    </textual></para></section><section class="po-hcontainer e231 e231"><title class="po-block e232 e232"><textual class="po-textual">WOX XML Representation</textual></title><para class="po-block e233 e233"><textual class="po-textual">In this section we will introduce the data type mapping 
      table used by WOX, and show the XML representation of different types of WOX objects: simple objects with primitive types, 
      uni-dimensional primitive arrays, multi-dimensional primitive arrays, object arrays, lists, maps, and user-defined 
      objects (which also have fields with different types of objects).</textual></para><section class="po-hcontainer e234 e234"><title class="po-block e235 e235"><textual class="po-textual">Data Type Mapping Table</textual></title><para class="po-block e236 e236"><textual class="po-textual">Table 1 shows the data type mapping used in WOX with the Java and C# programming languages. The 
        first column shows the data types used in WOX, and the second and third columns represent the 
        corresponding data types in Java and C#, respectively.</textual></para><table class="po-container e237 e237"><caption class="po-container e238 e238"><para class="po-block e239 e239"><textual class="po-textual">Data type mapping between WOX, Java and C#</textual></para></caption><col align="right" class="po-meta e240 e240" span="1" valign="top"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></col><col class="po-meta e241 e241" span="1" valign="top"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></col><col align="center" class="po-meta e242 e242" span="1" valign="top"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></col><thead class="po-container e243 e243"><tr class="po-table e244 e244" valign="top"><th class="po-field e245 e245"><textual class="po-textual">WOX</textual></th><th class="po-field e246 e246"><textual class="po-textual">Java</textual></th><th class="po-field e247 e247"><textual class="po-textual">C#</textual></th></tr></thead><tbody class="po-table e248 e248"><tr class="po-table e249 e249" valign="top"><td class="po-block e250 e250"><textual class="po-textual">byte</textual></td><td class="po-block e251 e251"><textual class="po-textual">byte/Byte</textual></td><td class="po-block e252 e252"><textual class="po-textual">sbyte (SByte)</textual></td></tr><tr class="po-table e253 e253" valign="top"><td class="po-block e254 e254"><textual class="po-textual">short</textual></td><td class="po-block e255 e255"><textual class="po-textual">short/Short</textual></td><td class="po-block e256 e256"><textual class="po-textual">short (Int16)</textual></td></tr><tr class="po-table e257 e257" valign="top"><td class="po-block e258 e258"><textual class="po-textual">int</textual></td><td class="po-block e259 e259"><textual class="po-textual">int/Int</textual></td><td class="po-block e260 e260"><textual class="po-textual">int (Int32)</textual></td></tr><tr class="po-table e261 e261" valign="top"><td class="po-block e262 e262"><textual class="po-textual">long</textual></td><td class="po-block e263 e263"><textual class="po-textual">long/Long</textual></td><td class="po-block e264 e264"><textual class="po-textual">long (Int64)</textual></td></tr><tr class="po-table e265 e265" valign="top"><td class="po-block e266 e266"><textual class="po-textual">float</textual></td><td class="po-block e267 e267"><textual class="po-textual">float/Float</textual></td><td class="po-block e268 e268"><textual class="po-textual">float (Single)</textual></td></tr><tr class="po-table e269 e269" valign="top"><td class="po-block e270 e270"><textual class="po-textual">double</textual></td><td class="po-block e271 e271"><textual class="po-textual">double/Double</textual></td><td class="po-block e272 e272"><textual class="po-textual">double (Double)</textual></td></tr><tr class="po-table e273 e273" valign="top"><td class="po-block e274 e274"><textual class="po-textual">char</textual></td><td class="po-block e275 e275"><textual class="po-textual">char/Character</textual></td><td class="po-block e276 e276"><textual class="po-textual">char (Char)</textual></td></tr><tr class="po-table e277 e277" valign="top"><td class="po-block e278 e278"><textual class="po-textual">boolean</textual></td><td class="po-block e279 e279"><textual class="po-textual">boolean/Boolean</textual></td><td class="po-block e280 e280"><textual class="po-textual">bool (Bool)</textual></td></tr><tr class="po-table e281 e281" valign="top"><td class="po-block e282 e282"><textual class="po-textual">string</textual></td><td class="po-block e283 e283"><textual class="po-textual">String</textual></td><td class="po-block e284 e284"><textual class="po-textual">string (String)</textual></td></tr><tr class="po-table e285 e285" valign="top"><td class="po-block e286 e286"><textual class="po-textual">object</textual></td><td class="po-block e287 e287"><textual class="po-textual">Object</textual></td><td class="po-block e288 e288"><textual class="po-textual">object (Object)</textual></td></tr><tr class="po-table e289 e289" valign="top"><td class="po-block e290 e290"><textual class="po-textual">array</textual></td><td class="po-block e291 e291"><textual class="po-textual">Any Array</textual></td><td class="po-block e292 e292"><textual class="po-textual">Any Array</textual></td></tr><tr class="po-table e293 e293" valign="top"><td class="po-block e294 e294"><textual class="po-textual">list</textual></td><td class="po-block e295 e295"><textual class="po-textual">ArrayList</textual></td><td class="po-block e296 e296"><textual class="po-textual">ArrayList</textual></td></tr><tr class="po-table e297 e297" valign="top"><td class="po-block e298 e298"><textual class="po-textual">map</textual></td><td class="po-block e299 e299"><textual class="po-textual">HashMap</textual></td><td class="po-block e300 e300"><textual class="po-textual">Hashtable</textual></td></tr><tr class="po-table e301 e301" valign="top"><td class="po-block e302 e302"><textual class="po-textual">class</textual></td><td class="po-block e303 e303"><textual class="po-textual">Class</textual></td><td class="po-block e304 e304"><textual class="po-textual">Type</textual></td></tr></tbody></table><para class="po-block e305 e305"><textual class="po-textual">The WOX serializer produces the same XML representation for any object, provided that their fields
        are only the Java and C# data types listed in Table 1, or any nested objects of user-defined classes which 
        have fields of those data types. This also includes the list and map data types from the collection APIs 
        of both programming languages.</textual></para></section><section class="po-hcontainer e306 e306"><title class="po-block e307 e307"><textual class="po-textual">Simple object with primitive types</textual></title><para class="po-block e308 e308"><textual class="po-textual">In this subsection we illustrate the XML representation of WOX primitive types, which include: 
        </textual><code class="po-atom e309 e309"><textual class="po-textual">byte</textual></code><textual class="po-textual">, </textual><code class="po-atom e310 e310"><textual class="po-textual">short</textual></code><textual class="po-textual">, </textual><code class="po-atom e311 e311"><textual class="po-textual">int</textual></code><textual class="po-textual">, </textual><code class="po-atom e312 e312"><textual class="po-textual">long</textual></code><textual class="po-textual">, </textual><code class="po-atom e313 e313"><textual class="po-textual">float</textual></code><textual class="po-textual">, 
        </textual><code class="po-atom e314 e314"><textual class="po-textual">double</textual></code><textual class="po-textual">, </textual><code class="po-atom e315 e315"><textual class="po-textual">char</textual></code><textual class="po-textual">, and </textual><code class="po-atom e316 e316"><textual class="po-textual">boolean</textual></code><textual class="po-textual">. The complete list of the data types 
        supported by WOX is shown in Table 1.</textual></para><para class="po-block e317 e317"><xref class="po-milestone e318 e318" linkend="FigProductClass"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> shows the </textual><code class="po-atom e319 e319"><textual class="po-textual">Product</textual></code><textual class="po-textual"> class, which has five fields of primitive types: </textual><code class="po-atom e320 e320"><textual class="po-textual">name</textual></code><textual class="po-textual"> 
        of type </textual><code class="po-atom e321 e321"><textual class="po-textual">string</textual></code><textual class="po-textual">, </textual><code class="po-atom e322 e322"><textual class="po-textual">price</textual></code><textual class="po-textual"> of type </textual><code class="po-atom e323 e323"><textual class="po-textual">double</textual></code><textual class="po-textual">, </textual><code class="po-atom e324 e324"><textual class="po-textual">grams</textual></code><textual class="po-textual"> of type 
        </textual><code class="po-atom e325 e325"><textual class="po-textual">int</textual></code><textual class="po-textual">, </textual><code class="po-atom e326 e326"><textual class="po-textual">reg</textual></code><textual class="po-textual"> of type </textual><code class="po-atom e327 e327"><textual class="po-textual">boolean</textual></code><textual class="po-textual">, and </textual><code class="po-atom e328 e328"><textual class="po-textual">categ</textual></code><textual class="po-textual"> of type </textual><code class="po-atom e329 e329"><textual class="po-textual">char</textual></code><textual class="po-textual">.</textual></para><figure class="po-container e330 e330" xml:id="FigProductClass"><title class="po-block e331 e331"><textual class="po-textual">Product class</textual></title><mediaobject class="po-container e332 e332"><imageobject class="po-container e333 e333"><imagedata class="po-meta e334 e334" fileref="../../../vol7/graphics/Jaimez01/Jaimez01-004.jpg" format="jpg"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e335 e335"><para class="po-block e336 e336"><textual class="po-textual">Product class with primitive fields.</textual></para></caption></figure><para class="po-block e337 e337"><textual class="po-textual">The XML representation in WOX of a </textual><code class="po-atom e338 e338"><textual class="po-textual">Product</textual></code><textual class="po-textual"> object is shown below. The XML is simple and clean.     
</textual><programlisting class="po-block e339 e339" xml:space="preserve"><textual class="po-textual">&lt;object type="Product" id="0"&gt;
   &lt;field name="name" type="string" value="Corn" /&gt;
   &lt;field name="price" type="double" value="3.98" /&gt;
   &lt;field name="grams" type="int" value="500" /&gt;
   &lt;field name="reg" type="boolean" value="true" /&gt;
   &lt;field name="categ" type="char" value="\u0041" /&gt;
&lt;/object&gt;</textual></programlisting><textual class="po-textual">      
      </textual></para><para class="po-block e340 e340"><textual class="po-textual">The root of the XML document is an </textual><code class="po-atom e341 e341"><textual class="po-textual">object</textual></code><textual class="po-textual"> element, with its </textual><code class="po-atom e342 e342"><textual class="po-textual">type</textual></code><textual class="po-textual"> attribute 
        equals </textual><code class="po-atom e343 e343"><textual class="po-textual">Product</textual></code><textual class="po-textual">, which is the class of the object. The </textual><code class="po-atom e344 e344"><textual class="po-textual">id</textual></code><textual class="po-textual"> attribute is used to handle 
        object references (in this case we only have one object - the </textual><code class="po-atom e345 e345"><textual class="po-textual">product</textual></code><textual class="po-textual"> object). Every field in the 
        </textual><code class="po-atom e346 e346"><textual class="po-textual">product</textual></code><textual class="po-textual"> object is represented by </textual><code class="po-atom e347 e347"><textual class="po-textual">field</textual></code><textual class="po-textual"> elements, which have the following attributes: 
        </textual><code class="po-atom e348 e348"><textual class="po-textual">name</textual></code><textual class="po-textual"> (the name of the field in the class), </textual><code class="po-atom e349 e349"><textual class="po-textual">type</textual></code><textual class="po-textual"> (the WOX data type of the field), 
        and </textual><code class="po-atom e350 e350"><textual class="po-textual">value</textual></code><textual class="po-textual"> (the value of the field for that particular object). Primitive types are represented in 
        WOX as </textual><code class="po-atom e351 e351"><textual class="po-textual">field</textual></code><textual class="po-textual"> elements.</textual></para><para class="po-block e352 e352"><textual class="po-textual">Observe that the </textual><code class="po-atom e353 e353"><textual class="po-textual">categ</textual></code><textual class="po-textual"> field is of type </textual><code class="po-atom e354 e354"><textual class="po-textual">char</textual></code><textual class="po-textual">. WOX data type </textual><code class="po-atom e355 e355"><textual class="po-textual">char</textual></code><textual class="po-textual"> 
        is represented as a Unicode value.</textual></para></section><section class="po-hcontainer e356 e356"><title class="po-block e357 e357"><textual class="po-textual">Uni-dimensional primitive arrays</textual></title><para class="po-block e358 e358"><textual class="po-textual">Uni-dimensional primitive arrays contain primitives as their elements. Primitives include the following 
        data types: </textual><code class="po-atom e359 e359"><textual class="po-textual">byte</textual></code><textual class="po-textual">, </textual><code class="po-atom e360 e360"><textual class="po-textual">short</textual></code><textual class="po-textual">, </textual><code class="po-atom e361 e361"><textual class="po-textual">int</textual></code><textual class="po-textual">, </textual><code class="po-atom e362 e362"><textual class="po-textual">long</textual></code><textual class="po-textual">, </textual><code class="po-atom e363 e363"><textual class="po-textual">float</textual></code><textual class="po-textual">, 
        </textual><code class="po-atom e364 e364"><textual class="po-textual">double</textual></code><textual class="po-textual">, </textual><code class="po-atom e365 e365"><textual class="po-textual">char</textual></code><textual class="po-textual">, and </textual><code class="po-atom e366 e366"><textual class="po-textual">boolean</textual></code><textual class="po-textual">. For a complete list of the data types supported 
        by WOX see the Data types mapping table.</textual></para><para class="po-block e367 e367"><textual class="po-textual">Primitive arrays are treated differently from other arrays, because they are serialized in a very efficient way. 
        We will show two examples of the XML representation for primitive arrays. The first one is a stand-alone array, 
        in which the array itself is the root object. In the second example, the primitive array is part of an object (it 
        is declared as a field in a class).</textual></para><para class="po-block e368 e368"><textual class="po-textual">The XML representation of a stand-alone primitive array is shown below. The XML is simple and efficient. The 
        root is an </textual><code class="po-atom e369 e369"><textual class="po-textual">object</textual></code><textual class="po-textual"> element, with its </textual><code class="po-atom e370 e370"><textual class="po-textual">type</textual></code><textual class="po-textual"> attribute equals </textual><code class="po-atom e371 e371"><textual class="po-textual">array</textual></code><textual class="po-textual">, which 
        indicates that the object represented in this case is an array. The </textual><code class="po-atom e372 e372"><textual class="po-textual">elementType</textual></code><textual class="po-textual"> attribute provides the 
        data type of the primitive array, and the </textual><code class="po-atom e373 e373"><textual class="po-textual">length</textual></code><textual class="po-textual"> attribute indicates the number of elements in the array. 
        The </textual><code class="po-atom e374 e374"><textual class="po-textual">id</textual></code><textual class="po-textual"> attribute is used to handle object references (in this example we only have one object - the 
        array itself). The elements of the array are separated by spaces, and presented as only one string.
</textual><programlisting class="po-block e375 e375" xml:space="preserve"><textual class="po-textual">&lt;object type="array" elementType="double" length="5" id="0"&gt;
   12.45 878.98 987.98 435.87 537.87
&lt;/object&gt;</textual></programlisting><textual class="po-textual">
      </textual></para><para class="po-block e376 e376"><textual class="po-textual">The XML representation of an object that contains three uni-dimensional primitive arrays as fields is shown 
        below. The primitive arrays are declared as fields of the </textual><code class="po-atom e377 e377"><textual class="po-textual">TestArray</textual></code><textual class="po-textual"> class, which is illustrated in 
        </textual><xref class="po-milestone e378 e378" linkend="FigTestArrayClass"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><figure class="po-container e379 e379" xml:id="FigTestArrayClass"><title class="po-block e380 e380"><textual class="po-textual">TestArray class</textual></title><mediaobject class="po-container e381 e381"><imageobject class="po-container e382 e382"><imagedata class="po-meta e383 e383" fileref="../../../vol7/graphics/Jaimez01/Jaimez01-005.jpg" format="jpg"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e384 e384"><para class="po-block e385 e385"><textual class="po-textual">TestArray class with three primitive array.</textual></para></caption></figure><para class="po-block e386 e386"><textual class="po-textual">In this case, the arrays are not root objects, but they are now fields of the root object. The </textual><code class="po-atom e387 e387"><textual class="po-textual">codes</textual></code><textual class="po-textual"> 
        field is a primitive array of </textual><code class="po-atom e388 e388"><textual class="po-textual">char</textual></code><textual class="po-textual"> elements, the </textual><code class="po-atom e389 e389"><textual class="po-textual">values</textual></code><textual class="po-textual"> field is a primitive array of 
        </textual><code class="po-atom e390 e390"><textual class="po-textual">int</textual></code><textual class="po-textual"> elements, and the </textual><code class="po-atom e391 e391"><textual class="po-textual">answers</textual></code><textual class="po-textual"> field is a primitive array of </textual><code class="po-atom e392 e392"><textual class="po-textual">boolean</textual></code><textual class="po-textual"> elements. 
        It should be noticed that arrays are also objects with their </textual><code class="po-atom e393 e393"><textual class="po-textual">type</textual></code><textual class="po-textual"> attribute equals </textual><code class="po-atom e394 e394"><textual class="po-textual">array</textual></code><textual class="po-textual">.
</textual><programlisting class="po-block e395 e395" xml:space="preserve"><textual class="po-textual">&lt;object type="TestArray" id="0"&gt;
   &lt;field name="codes"&gt;
      &lt;object type="array" elementType="char" length="5" id="1"&gt;
         \u0065 \u0074 \u0072 \u0067 \u0077
      &lt;/object&gt;
   &lt;/field&gt;
   &lt;field name="values"&gt;
      &lt;object type="array" elementType="int" length="5" id="2"&gt;
         23 56 78 33 69
      &lt;/object&gt;
   &lt;/field&gt;
   &lt;field name="answers"&gt;
      &lt;object type="array" elementType="bool" length="5" id="3"&gt;
         true false true false false
      &lt;/object&gt;
   &lt;/field&gt;
&lt;/object&gt;</textual></programlisting><textual class="po-textual">
      </textual></para><para class="po-block e396 e396"><textual class="po-textual">The root is an </textual><code class="po-atom e397 e397"><textual class="po-textual">object</textual></code><textual class="po-textual"> element, with the </textual><code class="po-atom e398 e398"><textual class="po-textual">type</textual></code><textual class="po-textual"> attribute equals </textual><code class="po-atom e399 e399"><textual class="po-textual">TestArray</textual></code><textual class="po-textual">, 
        which is the class of the root object. The root element has three field elements as children, which correspond to 
        the three primitive arrays. Each array is a field of the root object, and they are treated as </textual><code class="po-atom e400 e400"><textual class="po-textual">object</textual></code><textual class="po-textual"> 
        elements, with </textual><code class="po-atom e401 e401"><textual class="po-textual">type</textual></code><textual class="po-textual">, </textual><code class="po-atom e402 e402"><textual class="po-textual">elementType</textual></code><textual class="po-textual">, </textual><code class="po-atom e403 e403"><textual class="po-textual">lenght</textual></code><textual class="po-textual">, and </textual><code class="po-atom e404 e404"><textual class="po-textual">id</textual></code><textual class="po-textual"> attributes. The 
        elements of each array are separated by spaces and written as one simple string.</textual></para></section><section class="po-hcontainer e405 e405"><title class="po-block e406 e406"><textual class="po-textual">Multi-dimensional primitive arrays</textual></title><para class="po-block e407 e407"><textual class="po-textual">Multi-dimensional primitive arrays can also be serialized as stand-alone arrays, or as part of an object. Below 
        we show the XML representation of an object of the </textual><code class="po-atom e408 e408"><textual class="po-textual">TestMultiArray</textual></code><textual class="po-textual"> class. The </textual><code class="po-atom e409 e409"><textual class="po-textual">TestMultiArray</textual></code><textual class="po-textual">
        class, which is illustrated in </textual><xref class="po-milestone e410 e410" linkend="FigTestMultiArrayClass"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, has one bi-dimensional array of </textual><code class="po-atom e411 e411"><textual class="po-textual">int</textual></code><textual class="po-textual"> elements as its field.
</textual><programlisting class="po-block e412 e412" xml:space="preserve"><textual class="po-textual">&lt;object type="TestMultiArray" id="0"&gt;
   &lt;field name="matrix"&gt;
      &lt;object type="array" elementType="int[]" length="3" id="1"&gt;
         &lt;object type="array" elementType="int" length="5" id="2"&gt;23 56 89 36 68&lt;/object&gt;
         &lt;object type="array" elementType="int" length="4" id="3"&gt;87 64 88 32&lt;/object&gt;
         &lt;object type="array" elementType="int" length="6" id="4"&gt;78 80 21 29 34 67&lt;/object&gt;
      &lt;/object&gt;
   &lt;/field&gt;
&lt;/object&gt;</textual></programlisting><textual class="po-textual">
      </textual></para><figure class="po-container e413 e413" xml:id="FigTestMultiArrayClass"><title class="po-block e414 e414"><textual class="po-textual">TestMultiArray class</textual></title><mediaobject class="po-container e415 e415"><imageobject class="po-container e416 e416"><imagedata class="po-meta e417 e417" fileref="../../../vol7/graphics/Jaimez01/Jaimez01-006.jpg" format="jpg"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e418 e418"><para class="po-block e419 e419"><textual class="po-textual">TestMultiArray class with one multi-dimensional primitive array as field.</textual></para></caption></figure><para class="po-block e420 e420"><textual class="po-textual">We can observe that the root is an </textual><code class="po-atom e421 e421"><textual class="po-textual">object</textual></code><textual class="po-textual"> element, with its </textual><code class="po-atom e422 e422"><textual class="po-textual">type</textual></code><textual class="po-textual"> attribute equals 
        </textual><code class="po-atom e423 e423"><textual class="po-textual">TestMultiArray</textual></code><textual class="po-textual">, which is the class of the root object. The root element has only one child: a 
        </textual><code class="po-atom e424 e424"><textual class="po-textual">field</textual></code><textual class="po-textual"> element, which is a bi-dimensional primitive array. Since this is a bi-dimensional array, it 
        is actually serialized as an array of arrays. It is an array of three elements of type </textual><code class="po-atom e425 e425"><textual class="po-textual">int[]</textual></code><textual class="po-textual">, where 
        every element is an array of type </textual><code class="po-atom e426 e426"><textual class="po-textual">int</textual></code><textual class="po-textual">. The first array has five elements, the second array has four 
        elements, and the last array has six elements. The elements of each array are separated by spaces and presented 
        as one simple string.</textual></para><para class="po-block e427 e427"><textual class="po-textual">It should be noted that every </textual><code class="po-atom e428 e428"><textual class="po-textual">object</textual></code><textual class="po-textual"> element has an </textual><code class="po-atom e429 e429"><textual class="po-textual">id</textual></code><textual class="po-textual"> attribute, which is used to 
        handle object references. Arrays of more than two dimensions (multi-dimensional) are represented in XML following the 
        same idea shown in this subsection.</textual></para></section><section class="po-hcontainer e430 e430"><title class="po-block e431 e431"><textual class="po-textual">Object arrays</textual></title><para class="po-block e432 e432"><textual class="po-textual">The main difference between primitive arrays and object arrays is that the elements in primitive arrays are 
        serialized to a simple string with spaces to separate each element; whereas in object arrays their elements are 
        treated as individual and separate objects.</textual></para><para class="po-block e433 e433"><textual class="po-textual">Object arrays can also be uni-dimensional or multi-dimensional, just like primitive arrays. We will only illustrate 
        the XML representation of a uni-dimensional object array. We will use the </textual><code class="po-atom e434 e434"><textual class="po-textual">Product</textual></code><textual class="po-textual"> class shown previously 
        in </textual><xref class="po-milestone e435 e435" linkend="FigProductClass"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. The XML representation of an array with three </textual><code class="po-atom e436 e436"><textual class="po-textual">Product</textual></code><textual class="po-textual"> objects is 
        shown below.
</textual><programlisting class="po-block e437 e437" xml:space="preserve"><textual class="po-textual">&lt;object type="array" elementType="Product" length="3" id="0"&gt;
   &lt;object type="Product" id="1"&gt;
      &lt;field name="name" type="string" value="Beans" /&gt;
      &lt;field name="price" type="double" value="1.75" /&gt;
      &lt;field name="grams" type="int" value="250" /&gt;
      &lt;field name="reg" type="boolean" value="true" /&gt;
      &lt;field name="categ" type="char" value="\u0042" /&gt;
   &lt;/object&gt;
   &lt;object type="Product" id="2"&gt;
      &lt;field name="name" type="string" value="Rice" /&gt;
      &lt;field name="price" type="double" value="3.89" /&gt;
      &lt;field name="grams" type="int" value="750" /&gt;
      &lt;field name="reg" type="boolean" value="true" /&gt;
      &lt;field name="categ" type="char" value="\u0052" /&gt;
   &lt;/object&gt;
   &lt;object type="Product" id="3"&gt;
      &lt;field name="name" type="string" value="Bread" /&gt;
      &lt;field name="price" type="double" value="1.06" /&gt;
      &lt;field name="grams" type="int" value="300" /&gt;
      &lt;field name="reg" type="boolean" value="false" /&gt;
      &lt;field name="categ" type="char" value="\u0048" /&gt;
   &lt;/object&gt;
&lt;/object&gt;</textual></programlisting><textual class="po-textual">
      </textual></para><para class="po-block e438 e438"><textual class="po-textual">The root is an </textual><code class="po-atom e439 e439"><textual class="po-textual">object</textual></code><textual class="po-textual"> element, which is the array of three </textual><code class="po-atom e440 e440"><textual class="po-textual">Product</textual></code><textual class="po-textual"> objects. 
        The </textual><code class="po-atom e441 e441"><textual class="po-textual">elementType</textual></code><textual class="po-textual"> attribute specifies the date type of the array, and the </textual><code class="po-atom e442 e442"><textual class="po-textual">length</textual></code><textual class="po-textual"> attribute 
        indicates the number of elements in the array.</textual></para><para class="po-block e443 e443"><textual class="po-textual">Each </textual><code class="po-atom e444 e444"><textual class="po-textual">product</textual></code><textual class="po-textual"> in the array has </textual><code class="po-atom e445 e445"><textual class="po-textual">type</textual></code><textual class="po-textual"> and </textual><code class="po-atom e446 e446"><textual class="po-textual">id</textual></code><textual class="po-textual"> attributes, and five </textual><code class="po-atom e447 e447"><textual class="po-textual">field</textual></code><textual class="po-textual"> 
        elements (children) to represent the five fields in a </textual><code class="po-atom e448 e448"><textual class="po-textual">Product</textual></code><textual class="po-textual"> object: </textual><code class="po-atom e449 e449"><textual class="po-textual">name</textual></code><textual class="po-textual">, </textual><code class="po-atom e450 e450"><textual class="po-textual">price</textual></code><textual class="po-textual">, 
        </textual><code class="po-atom e451 e451"><textual class="po-textual">grams</textual></code><textual class="po-textual">, </textual><code class="po-atom e452 e452"><textual class="po-textual">reg</textual></code><textual class="po-textual">, and </textual><code class="po-atom e453 e453"><textual class="po-textual">categ</textual></code><textual class="po-textual">. Every </textual><code class="po-atom e454 e454"><textual class="po-textual">field</textual></code><textual class="po-textual"> element specifies the </textual><code class="po-atom e455 e455"><textual class="po-textual">name</textual></code><textual class="po-textual">, 
        </textual><code class="po-atom e456 e456"><textual class="po-textual">type</textual></code><textual class="po-textual">, and </textual><code class="po-atom e457 e457"><textual class="po-textual">value</textual></code><textual class="po-textual"> attributes.</textual></para></section><section class="po-hcontainer e458 e458"><title class="po-block e459 e459"><textual class="po-textual">Lists</textual></title><para class="po-block e460 e460"><code class="po-atom e461 e461"><textual class="po-textual">Lists</textual></code><textual class="po-textual"> are similar to arrays in WOX. A </textual><code class="po-atom e462 e462"><textual class="po-textual">List</textual></code><textual class="po-textual"> in WOX is the equivalent to 
        </textual><code class="po-atom e463 e463"><textual class="po-textual">java.util.ArrayList</textual></code><textual class="po-textual"> in Java, and </textual><code class="po-atom e464 e464"><textual class="po-textual">System.Collections.ArrayList</textual></code><textual class="po-textual"> in C#, as can be seen in Table 1 
        previously shown. A </textual><code class="po-atom e465 e465"><textual class="po-textual">List</textual></code><textual class="po-textual"> in WOX is represented in a simple form, and can be de-serialized either to Java or C#.</textual></para><para class="po-block e466 e466"><textual class="po-textual">The XML representation of a list of </textual><code class="po-atom e467 e467"><textual class="po-textual">Course</textual></code><textual class="po-textual"> objects is shown below. The </textual><code class="po-atom e468 e468"><textual class="po-textual">Course</textual></code><textual class="po-textual"> class, which is 
        illustrated in </textual><xref class="po-milestone e469 e469" linkend="FigCourseClass"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, has three fields: </textual><code class="po-atom e470 e470"><textual class="po-textual">code</textual></code><textual class="po-textual"> of type </textual><code class="po-atom e471 e471"><textual class="po-textual">int</textual></code><textual class="po-textual">, </textual><code class="po-atom e472 e472"><textual class="po-textual">name</textual></code><textual class="po-textual"> of type 
        </textual><code class="po-atom e473 e473"><textual class="po-textual">string</textual></code><textual class="po-textual">, and </textual><code class="po-atom e474 e474"><textual class="po-textual">term</textual></code><textual class="po-textual"> of type </textual><code class="po-atom e475 e475"><textual class="po-textual">int</textual></code><textual class="po-textual">.
</textual><programlisting class="po-block e476 e476" xml:space="preserve"><textual class="po-textual">&lt;object type="list" elementType="Object" length="3" id="0"&gt;
   &lt;object type="Course" id="1"&gt;
      &lt;field name="code" type="int" value="6756" /&gt;
      &lt;field name="name" type="string" value="XML" /&gt;
      &lt;field name="term" type="int" value="3" /&gt;
   &lt;/object&gt;
   &lt;object type="Course" id="2"&gt;
      &lt;field name="code" type="int" value="9865" /&gt;
      &lt;field name="name" type="string" value="DB" /&gt;
      &lt;field name="term" type="int" value="2" /&gt;
   &lt;/object&gt;
   &lt;object type="Course" id="3"&gt;
      &lt;field name="code" type="int" value="1134" /&gt;
      &lt;field name="name" type="string" value="Java" /&gt;
      &lt;field name="term" type="int" value="2" /&gt;
   &lt;/object&gt;
&lt;/object&gt;</textual></programlisting><textual class="po-textual">
      </textual></para><figure class="po-container e477 e477" xml:id="FigCourseClass"><title class="po-block e478 e478"><textual class="po-textual">Course class</textual></title><mediaobject class="po-container e479 e479"><imageobject class="po-container e480 e480"><imagedata class="po-meta e481 e481" fileref="../../../vol7/graphics/Jaimez01/Jaimez01-007.jpg" format="jpg"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e482 e482"><para class="po-block e483 e483"><textual class="po-textual">Course class with three fields.</textual></para></caption></figure><para class="po-block e484 e484"><textual class="po-textual">The root is an </textual><code class="po-atom e485 e485"><textual class="po-textual">object</textual></code><textual class="po-textual"> element, which represents the list of three </textual><code class="po-atom e486 e486"><textual class="po-textual">Course</textual></code><textual class="po-textual"> objects. Each 
        </textual><code class="po-atom e487 e487"><textual class="po-textual">course</textual></code><textual class="po-textual"> has its </textual><code class="po-atom e488 e488"><textual class="po-textual">type</textual></code><textual class="po-textual">, and </textual><code class="po-atom e489 e489"><textual class="po-textual">id</textual></code><textual class="po-textual"> attributes, and its three </textual><code class="po-atom e490 e490"><textual class="po-textual">field</textual></code><textual class="po-textual"> elements 
        (children): </textual><code class="po-atom e491 e491"><textual class="po-textual">code</textual></code><textual class="po-textual">, </textual><code class="po-atom e492 e492"><textual class="po-textual">name</textual></code><textual class="po-textual">, and </textual><code class="po-atom e493 e493"><textual class="po-textual">term</textual></code><textual class="po-textual">. Every </textual><code class="po-atom e494 e494"><textual class="po-textual">field</textual></code><textual class="po-textual"> element specifies its 
        </textual><code class="po-atom e495 e495"><textual class="po-textual">name</textual></code><textual class="po-textual">, </textual><code class="po-atom e496 e496"><textual class="po-textual">type</textual></code><textual class="po-textual">, and </textual><code class="po-atom e497 e497"><textual class="po-textual">value</textual></code><textual class="po-textual"> attributes.</textual></para></section><section class="po-hcontainer e498 e498"><title class="po-block e499 e499"><textual class="po-textual">Maps</textual></title><para class="po-block e500 e500"><textual class="po-textual">A </textual><code class="po-atom e501 e501"><textual class="po-textual">Map</textual></code><textual class="po-textual"> is an object that maps keys to values. A map cannot contain duplicate keys, and each key can map 
        to at most one value. A </textual><code class="po-atom e502 e502"><textual class="po-textual">Map</textual></code><textual class="po-textual"> in WOX is the equivalent to </textual><code class="po-atom e503 e503"><textual class="po-textual">java.util.HashMap</textual></code><textual class="po-textual"> in Java, and 
        </textual><code class="po-atom e504 e504"><textual class="po-textual">System.Collections.Hashtable</textual></code><textual class="po-textual"> in C#, as can be seen in Table 1 previously shown. A </textual><code class="po-atom e505 e505"><textual class="po-textual">Map</textual></code><textual class="po-textual"> in WOX 
        is represented in a simple form, and can be de-serialized either to Java or C#.</textual></para><para class="po-block e506 e506"><textual class="po-textual">The XML representation of a map of </textual><code class="po-atom e507 e507"><textual class="po-textual">Course</textual></code><textual class="po-textual"> objects is shown below. The </textual><code class="po-atom e508 e508"><textual class="po-textual">Course</textual></code><textual class="po-textual"> class, 
        which is illustrated in </textual><xref class="po-milestone e509 e509" linkend="FigCourseClass"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, has three fields: </textual><code class="po-atom e510 e510"><textual class="po-textual">code</textual></code><textual class="po-textual"> of type </textual><code class="po-atom e511 e511"><textual class="po-textual">int</textual></code><textual class="po-textual">, </textual><code class="po-atom e512 e512"><textual class="po-textual">name</textual></code><textual class="po-textual"> of type 
        </textual><code class="po-atom e513 e513"><textual class="po-textual">string</textual></code><textual class="po-textual">, and </textual><code class="po-atom e514 e514"><textual class="po-textual">term</textual></code><textual class="po-textual"> of type </textual><code class="po-atom e515 e515"><textual class="po-textual">int</textual></code><textual class="po-textual">.
</textual><programlisting class="po-block e516 e516" xml:space="preserve"><textual class="po-textual">&lt;object type="map" id="0"&gt;
   &lt;object type="entry"&gt;
      &lt;object type="int" value="1134" id="1" /&gt;
      &lt;object type="Course" id="2"&gt;
         &lt;field name="code" type="int" value="1134" /&gt;
         &lt;field name="name" type="string" value="Java"/&gt;
         &lt;field name="term" type="int" value="2" /&gt;
      &lt;/object&gt;
   &lt;/object&gt;
   &lt;object type="entry"&gt;
      &lt;object type="int" value="6756" id="3" /&gt;
      &lt;object type="Course" id="4"&gt;
         &lt;field name="code" type="int" value="6756" /&gt;
         &lt;field name="name" type="string" value="XML" /&gt;
         &lt;field name="term" type="int" value="3" /&gt;
      &lt;/object&gt;
   &lt;/object&gt;
   &lt;object type="entry"&gt;
      &lt;object type="int" value="9865" id="5" /&gt;
      &lt;object type="Course" id="8"&gt;
         &lt;field name="code" type="int" value="9865" /&gt;
         &lt;field name="name" type="string" value="DB" /&gt;
         &lt;field name="term" type="int" value="2" /&gt;
      &lt;/object&gt;
   &lt;/object&gt;
&lt;/object&gt;</textual></programlisting><textual class="po-textual">
      </textual></para><para class="po-block e517 e517"><textual class="po-textual">The root is an </textual><code class="po-atom e518 e518"><textual class="po-textual">object</textual></code><textual class="po-textual"> element, which is the map of four </textual><code class="po-atom e519 e519"><textual class="po-textual">entry</textual></code><textual class="po-textual"> objects. Each 
        </textual><code class="po-atom e520 e520"><textual class="po-textual">entry</textual></code><textual class="po-textual"> object has two children: the first object represents the key, and the second object is the value 
        associated with that key. The </textual><code class="po-atom e521 e521"><textual class="po-textual">key</textual></code><textual class="po-textual"> is an object of type </textual><code class="po-atom e522 e522"><textual class="po-textual">int</textual></code><textual class="po-textual">, and the </textual><code class="po-atom e523 e523"><textual class="po-textual">value</textual></code><textual class="po-textual"> is an 
        object of type </textual><code class="po-atom e524 e524"><textual class="po-textual">Course</textual></code><textual class="po-textual">. The XML representation of a </textual><code class="po-atom e525 e525"><textual class="po-textual">Course</textual></code><textual class="po-textual"> object was previously explained.</textual></para></section><section class="po-hcontainer e526 e526"><title class="po-block e527 e527"><textual class="po-textual">Object references</textual></title><para class="po-block e528 e528"><textual class="po-textual">In order to avoid duplicate objects in the XML representation of an object, the WOX serializer uses object references, 
        which are handled by using id and idref attributes. </textual><xref class="po-milestone e529 e529" linkend="FigReferences"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> shows an array of </textual><code class="po-atom e530 e530"><textual class="po-textual">Product</textual></code><textual class="po-textual"> 
        objects with duplicates.</textual></para><figure class="po-container e531 e531" xml:id="FigReferences"><title class="po-block e532 e532"><textual class="po-textual">Object references</textual></title><mediaobject class="po-container e533 e533"><imageobject class="po-container e534 e534"><imagedata class="po-meta e535 e535" fileref="../../../vol7/graphics/Jaimez01/Jaimez01-008.jpg" format="jpg"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e536 e536"><para class="po-block e537 e537"><textual class="po-textual">Array of Product objects with duplicates.</textual></para></caption></figure><para class="po-block e538 e538"><textual class="po-textual">The use of object references in the XML representation of this array of </textual><code class="po-atom e539 e539"><textual class="po-textual">Product</textual></code><textual class="po-textual"> objects is illustrated 
        below. The </textual><code class="po-atom e540 e540"><textual class="po-textual">Product</textual></code><textual class="po-textual"> class was introduced previously, which has five attributes: </textual><code class="po-atom e541 e541"><textual class="po-textual">name</textual></code><textual class="po-textual"> 
        of type </textual><code class="po-atom e542 e542"><textual class="po-textual">string</textual></code><textual class="po-textual">, </textual><code class="po-atom e543 e543"><textual class="po-textual">price</textual></code><textual class="po-textual"> of type </textual><code class="po-atom e544 e544"><textual class="po-textual">double</textual></code><textual class="po-textual">, </textual><code class="po-atom e545 e545"><textual class="po-textual">grams</textual></code><textual class="po-textual"> of type </textual><code class="po-atom e546 e546"><textual class="po-textual">int</textual></code><textual class="po-textual">, 
        </textual><code class="po-atom e547 e547"><textual class="po-textual">reg</textual></code><textual class="po-textual"> of type </textual><code class="po-atom e548 e548"><textual class="po-textual">boolean</textual></code><textual class="po-textual">, and </textual><code class="po-atom e549 e549"><textual class="po-textual">categ</textual></code><textual class="po-textual"> of type </textual><code class="po-atom e550 e550"><textual class="po-textual">char</textual></code><textual class="po-textual">.
</textual><programlisting class="po-block e551 e551" xml:space="preserve"><textual class="po-textual">&lt;object type="array" elementType="Product" length="6" id="0"&gt;
   &lt;object type="Product" id="1"&gt;
      &lt;field name="name" type="string" value="Beans" /&gt;
      &lt;field name="price" type="double" value="1.75" /&gt;
      &lt;field name="grams" type="int" value="250" /&gt;
      &lt;field name="reg" type="bool" value="true" /&gt;
      &lt;field name="categ" type="char" value="\u0042" /&gt;
   &lt;/object&gt;
   &lt;object type="Product" id="2"&gt;
      &lt;field name="name" type="string" value="Rice" /&gt;
      &lt;field name="price" type="double" value="3.89" /&gt;
      &lt;field name="grams" type="int" value="750" /&gt;
      &lt;field name="reg" type="bool" value="true" /&gt;
      &lt;field name="categ" type="char" value="\u0052" /&gt;
   &lt;/object&gt;
   &lt;object idref="1" /&gt;
   &lt;object type="Product" id="3"&gt;
      &lt;field name="name" type="string" value="Bread" /&gt;
      &lt;field name="price" type="double" value="1.06" /&gt;
      &lt;field name="grams" type="int" value="300" /&gt;
      &lt;field name="reg" type="bool" value="false" /&gt;
      &lt;field name="categ" type="char" value="\u0048" /&gt;
   &lt;/object&gt;
   &lt;object idref="3" /&gt;
   &lt;object idref="1" /&gt;
&lt;/object&gt;</textual></programlisting><textual class="po-textual">
      </textual></para><para class="po-block e552 e552"><textual class="po-textual">The duplicated </textual><code class="po-atom e553 e553"><textual class="po-textual">Product</textual></code><textual class="po-textual"> objects in the array are not duplicated in the XML representation that WOX 
        generates. They are referenced by using the </textual><code class="po-atom e554 e554"><textual class="po-textual">idref</textual></code><textual class="po-textual"> attribute, which actually refers to the unique 
        </textual><code class="po-atom e555 e555"><textual class="po-textual">id</textual></code><textual class="po-textual"> given to every object. It can be observed that the XML representation of the array has the three 
        object references for the duplicated objects (two for product </textual><code class="po-atom e556 e556"><textual class="po-textual">p1</textual></code><textual class="po-textual"> identified by </textual><code class="po-atom e557 e557"><textual class="po-textual">id="1"</textual></code><textual class="po-textual">, 
        and one for product </textual><code class="po-atom e558 e558"><textual class="po-textual">p3</textual></code><textual class="po-textual">, identified by </textual><code class="po-atom e559 e559"><textual class="po-textual">id="3"</textual></code><textual class="po-textual">.</textual></para></section></section><section class="po-hcontainer e560 e560"><title class="po-block e561 e561"><textual class="po-textual">Conclusions and Further Work</textual></title><para class="po-block e562 e562"><textual class="po-textual">In this paper we have presented Web Objects in XML (WOX), an efficient and easy to use XML serializer for 
      interoperability between the C# and Java programming languages. The WOX serializer is a stand-alone library based on XML 
      which is able to serialize Java and C# objects to XML and back again. One of its main features is the generation of standard 
      XML, which is language independent. This means that if we serialize a Java object to XML, we could take the generated XML 
      to reconstruct the object back to C#; and viceversa. Our serialization approach does not need code annotations or any other 
      type of configuration from the user in order to serialize objects.</textual></para><para class="po-block e563 e563"><textual class="po-textual">We have made our WOX serializer publicly available as an open-source project, which can be downloaded from 
      </textual><link class="po-inline e564 e564" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://woxserializer.sourceforge.net/</textual></link><textual class="po-textual">. As a consequence of this work, 
      the MSDN Magazine (a Microsoft Magazine) published an article, in its October 2010 issue [Khan 2010], about interoperability between 
      Java and .NET, where they mention and recommend the use of our work for interoperability between applications. We consider this as a 
      valuable example that demonstrates that our work has had an impact on the MSDN community.</textual></para><para class="po-block e565 e565"><textual class="po-textual">In this paper we described the main features and uses of the WOX serializer, and we also dedicated a section to give its implementation
      details. We showed the XML representation for the most representative structures and objects in both Java and C#, along with 
      some examples. We believe that the XML object representation that WOX uses is efficient, clean, easy to understand, and can 
      represent objects in other object-oriented programming languages. Further work is needed to develop our XML serializer in other 
      object-oriented programming languages, and allow interoperability among them. We have already started our analysis to develop 
      a WOX serializer for the C++ object-oriented programming language.</textual></para></section><bibliography class="po-hcontainer e566 e566"><title class="po-block e567 e567"><textual class="po-textual">Bibliography</textual></title><bibliomixed class="po-block e568 e568" xml:id="mul301" xreflabel="Castor 2010"><textual class="po-textual">Castor. The Castor Project, 2010, available at 
       </textual><link class="po-inline e569 e569" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.castor.org/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e570 e570" xml:id="mul302" xreflabel="SOAP 2003"><textual class="po-textual">WWW Consortium. Latest SOAP Versions, 2003, available at 
       </textual><link class="po-inline e571 e571" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/tr/soap/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e572 e572" xml:id="mul303" xreflabel="Jaimez 2007"><textual class="po-textual">Jaimez, C., Lucas, S., Implementing a State-based Application Using Web Objects in XML,
       In Proceedings of the 9th International Symposium on Distributed Objects, Middleware, and Applications (DOA 2007), 
       Lecture Notes in Computer Science, Volume 4803/2007, pp. 577-594, 
       Vilamoura, Algarve, Portugal, 25-30 November 2007, available at
       </textual><link class="po-inline e573 e573" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.springerlink.com/content/u842871w0l551002/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e574 e574" xml:id="mul304" xreflabel="Jaimez 2011"><textual class="po-textual">Jaimez, C., Lucas, S., Interoperability of Java and C# with Web Objects in XML,
       In Proceedings of the IADIS International Conference e-Society (ES 2011), pp. 518-522, 
       Avila, Spain, 10-13 March 2011, available at
       </textual><link class="po-inline e575 e575" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.iadisportal.org/e-society-2011-proceedings</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e576 e576" xml:id="mul305" xreflabel="JAXB 2010"><textual class="po-textual">JAXB: The Java Architecture for XML Binding, 2010, available at 
       </textual><link class="po-inline e577 e577" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">https://jaxb.dev.java.net/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e578 e578" xml:id="mul306" xreflabel="JSX 2002"><textual class="po-textual">JSX: Java Serialization to XML, 2002, available at 
       </textual><link class="po-inline e579 e579" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://jsx.org/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e580 e580" xml:id="mul307" xreflabel="Khan 2010"><textual class="po-textual">Khan, I., Interoperability: Runtime Data Sharing Through an Enterprise Distributed Cache, 
       MSDN Magazine, October 2010, available at </textual><link class="po-inline e581 e581" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://msdn.microsoft.com/en-us/magazine/gg232763.aspx</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e582 e582" xml:id="mul308" xreflabel="Koala 1998"><textual class="po-textual">Koala XML serialization, 1998, available at 
       </textual><link class="po-inline e583 e583" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://old.koalateam.com/xml/serialization/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e584 e584" xml:id="mul309" xreflabel="Winer 1999"><textual class="po-textual">Winer D. XML-RPC specification, 1999, available at 
       </textual><link class="po-inline e585 e585" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.xmlrpc.com/spec</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e586 e586" xml:id="mul310" xreflabel="XMOP 2000"><textual class="po-textual">XMOP: XML Metadata Object Persistence, 2000, available at 
       </textual><link class="po-inline e587 e587" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.openhealth.org/documents/xmop.htm/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e588 e588" xml:id="mul311" xreflabel="XStream 2010"><textual class="po-textual">XStream: A Java Library to Serialize Objects to XML, 2010, available at 
       </textual><link class="po-inline e589 e589" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://xstream.codehaus.org/index.html/</textual></link><textual class="po-textual">.</textual></bibliomixed></bibliography></article></classedDocument>