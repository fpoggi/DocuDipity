<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.3" xml:id="Bal2011sall0227"><title class="po-block e1 e1"><textual class="po-textual">Determining the Impact of Eric Clapton on Music Using RDF Graphs</textual></title><subtitle class="po-block e2 e2"><textual class="po-textual">Selected Challenges of Semantics Across and Within Datasets</textual></subtitle><info class="po-record e3 e3"><confgroup class="po-record e4 e4"><conftitle class="po-field e5 e5"><textual class="po-textual">Balisage: The Markup Conference 2011</textual></conftitle><confdates class="po-field e6 e6"><textual class="po-textual">August 2 - 5, 2011</textual></confdates></confgroup><abstract class="po-container e7 e7"><para class="po-block e8 e8"><textual class="po-textual">
                As music is a topic of interest to many, it is no surprise that 
                developers have applied web and semantic technology to provide various RDF datasets 
                for describing relationships among musical artists, albums, 
                songs, genres, and more. As avid fans of blues and rock music, we 
                wondered if we could construct SPARQL queries to examine properties and 
                relationships between performers in order to answer global questions 
                such as "Who has had the greatest impact on rock music?" Our primary 
                focus was Eric Clapton, a musical artist with a decades-spanning career 
                who has enjoyed both a very successful solo career as well as having 
                performed in several world-renowned bands.
                </textual></para><para class="po-block e9 e9"><textual class="po-textual">The application of semantic technology to a public 
                dataset can provide useful insights into how similar approaches can be 
                applied to realistic domain problems, such as finding relationships 
                between persons of interest. Clearly understood semantics of available 
                RDF properties in the dataset is of course crucial but is a substantial 
                challenge especially when leveraging information from similar yet 
                different data sources.</textual></para><para class="po-block e10 e10"><textual class="po-textual">This paper explores the use of DBpedia and MusicBrainz data sources 
                using OpenLink Virtuoso Universal Server with a Drupal frontend. Much 
                attention is given to the challenges we encountered, especially with 
                respect to relatively large datasets of community-entered open data sources of varying quality
                and the strategies we employed or recommend to overcome the challenges.               
            </textual></para></abstract><author class="po-record e11 e11"><personname class="po-record e12 e12"><firstname class="po-field e13 e13"><textual class="po-textual">Ronald</textual></firstname><othername class="po-field e14 e14"><textual class="po-textual">P.</textual></othername><surname class="po-field e15 e15"><textual class="po-textual">Reck</textual></surname></personname><personblurb class="po-container e16 e16"><para class="po-block e17 e17"><textual class="po-textual"> For over a decade Ronald P. Reck has operated the consulting company, </textual><link class="po-inline e18 e18" xlink:actuate="onRequest" xlink:href="http://www.rrecktek.com/" xlink:show="new" xlink:type="simple"><textual class="po-textual">RRecktek LLC</textual></link><textual class="po-textual">, outside of
                    Washington DC metropolitan area. RRecktek LLC has enjoyed over one hundred
                    contracts ranging from the data warehousing of state, local, and federal law
                    enforcement incident reports outside of submarine bases for The Navy Criminal
                    Investigative Service (NCIS) to vocabulary projects for the management and
                    dissemination of controlled vocabularies for the Directorate of National
                    Intelligence (DNI) as a member of the Intelligence Community Metadata Working
                    Group staff and a "simple" content management system for build out drawings for
                    global telecom company. Among the companies served include Nextel, Winstar, ANS
                    +COre, AOL, Standard &amp; Poors, The Federal Communications Commission,
                    Kiplingers Newletter, Radio Free Asia, Eastman Kodak, The United States
                    Information Agency, The Council of Better Business Bureaus, Department of
                    Defense Health Affairs and others. He prides himself on developing scalable,
                    open source architectural strategies for difficult problems. Ron resides with his
                    lovely wife Olga and the best son in the entire world. 
                </textual></para></personblurb><affiliation class="po-record e19 e19"><jobtitle class="po-field e20 e20"><textual class="po-textual">Principal</textual></jobtitle><orgname class="po-block e21 e21"><textual class="po-textual">RRecktek LLC.</textual></orgname></affiliation><email class="po-field e22 e22"><textual class="po-textual">rreck@rrecktek.com</textual></email></author><author class="po-record e23 e23"><personname class="po-record e24 e24"><firstname class="po-field e25 e25"><textual class="po-textual">Kenneth</textual></firstname><othername class="po-field e26 e26"><textual class="po-textual">B.</textual></othername><surname class="po-field e27 e27"><textual class="po-textual">Sall</textual></surname></personname><personblurb class="po-container e28 e28"><para class="po-block e29 e29"><textual class="po-textual"> Ken Sall has been supporting the US federal government in XML efforts since
                    1998. His customers include NASA, General Services Administration (GSA),
                    Department of Homeland Security (DHS), and the Intelligence Community. Sall has been
                    an active contributor to XML and data standardization efforts including the Federal
                    Enterprise Architecture - Data Reference Model (FEA DRM), the National Information
                    Exchange Model (NIEM), and the Intelligence Community Metadata Standards for
                    Publication (IC MSP), as well as participating in several federal XML and data
                    management working groups. As the author of 
                    </textual><link class="po-inline e30 e30" xlink:actuate="onRequest" xlink:href="http://www.amazon.com/XML-Family-Specifications-Practical-Guide/dp/0201703599/" xlink:show="new" xlink:type="simple"><textual class="po-textual">XML Family of Specifications: A
                    Practical Guide</textual></link><textual class="po-textual"> (Addison-Wesley, 2002), he basks in the glory of quarterly
                    statements from his publisher that no longer include payments. Music is his
                    passion. XML too. 
                </textual></para></personblurb><affiliation class="po-record e31 e31"><jobtitle class="po-field e32 e32"><textual class="po-textual">Principal Systems Engineer/XML Data Analyst</textual></jobtitle><orgname class="po-block e33 e33"><textual class="po-textual">Ken Sall Consulting</textual></orgname></affiliation><email class="po-field e34 e34"><textual class="po-textual">kensall@gmail.com</textual></email></author><author class="po-record e35 e35"><personname class="po-record e36 e36"><firstname class="po-field e37 e37"><textual class="po-textual">Wendy</textual></firstname><othername class="po-field e38 e38"><textual class="po-textual">A.</textual></othername><surname class="po-field e39 e39"><textual class="po-textual">Swanbeck</textual></surname></personname><personblurb class="po-container e40 e40"><para class="po-block e41 e41"><textual class="po-textual">
                    Wendy Swanbeck has worked as a software engineer for over 20 years. In the
                    past she has worked on a variety of projects including graphical design
                    programs, mainframe control systems, and CAD design software for commercial and
                    government projects. More recently she has been working at Eastman Kodak Company
                    writing software for networking systems, color management and photo manipulation
                    GUI software. She also donates some of her time creating websites for groups
                    that need it. Her passion is to architect and write clean, flexible and robust
                    software using the right tools for the job.
                </textual></para></personblurb><affiliation class="po-record e42 e42"><jobtitle class="po-field e43 e43"><textual class="po-textual">Principal</textual></jobtitle><orgname class="po-block e44 e44"><textual class="po-textual">Wendy Swanbeck</textual></orgname></affiliation><email class="po-field e45 e45"><textual class="po-textual">Wendy.Swanbeck@verizon.net</textual></email></author><legalnotice class="po-container e46 e46"><para class="po-block e47 e47"><textual class="po-textual">Copyright Â© 2011 Ronald P. Reck, Kenneth B. Sall, Wendy A. Swanbeck.  All rights reserved.</textual></para></legalnotice><keywordset class="po-table e48 e48" role="author"><keyword class="po-field e49 e49"><textual class="po-textual">RDF</textual></keyword><keyword class="po-field e50 e50"><textual class="po-textual">SPARQL</textual></keyword><keyword class="po-field e51 e51"><textual class="po-textual">OWL</textual></keyword><keyword class="po-field e52 e52"><textual class="po-textual">semantics</textual></keyword><keyword class="po-field e53 e53"><textual class="po-textual">Semantic Web</textual></keyword><keyword class="po-field e54 e54"><textual class="po-textual">ontology</textual></keyword><keyword class="po-field e55 e55"><textual class="po-textual">Open Data</textual></keyword><keyword class="po-field e56 e56"><textual class="po-textual">LOD</textual></keyword><keyword class="po-field e57 e57"><textual class="po-textual">SVG</textual></keyword><keyword class="po-field e58 e58"><textual class="po-textual">Graphviz</textual></keyword><keyword class="po-field e59 e59"><textual class="po-textual">Drupal</textual></keyword><keyword class="po-field e60 e60"><textual class="po-textual">music</textual></keyword></keywordset></info><mediaobject class="po-container e61 e61"><imageobject class="po-container e62 e62"><imagedata class="po-meta e63 e63" fileref="../../../vol7/graphics/Sall01/Sall01-001.png" format="png" width="90%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><section class="po-hcontainer e64 e64"><title class="po-block e65 e65"><textual class="po-textual">Introduction and Pre-History</textual></title><para class="po-block e66 e66"><textual class="po-textual">A long, long time ago in a galaxy much like our own, one of the authors, Ken Sall,
            was fascinated by the number of musicians who had played with John Mayall. </textual><footnote class="po-popup e67 e67" xml:id="intro01"><para class="po-block e68 e68"><textual class="po-textual">He believes it was circa 1972 in Buffalo, New York. But his recollection
                    of the Seventies is much like his recollection of the Sixties.</textual></para></footnote><textual class="po-textual">          
            Armed only with paper, pencil and lots of record album jackets, he drew a diagram 
            with Mayall at the center and arcs pointing to musicians who played with him, such as
            Eric Clapton, Peter Green, Mick Taylor, etc. Then he drew arcs from these musicians to others they
            had played with. Soon he reached the limit of the paper. Since this was prior to the 
            emergence of the PC, there was no option to scroll or easily copy to a larger drawing
            area. But Ken held onto this labor of trivia for nearly 40 years.
            (</textual><emphasis class="po-inline e69 e69" role="ital"><textual class="po-textual">See </textual></emphasis><xref class="po-milestone e70 e70" linkend="mayall"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.)
            Meanwhile, Pete Frame developed far more detailed and visually appealing 
            rock family trees </textual><xref class="po-milestone e71 e71" linkend="pframe"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, 
            some of which appeared in various publications such as Rolling Stone magazine
            and the </textual><emphasis class="po-inline e72 e72" role="ital"><textual class="po-textual">Encyclopedia of Rock</textual></emphasis><textual class="po-textual">. 
        </textual></para><para class="po-block e73 e73"><textual class="po-textual">
            Nearly everyone is familiar with the Six Degrees of Kevin Bacon
            trivia game </textual><xref class="po-milestone e74 e74" linkend="kbacon"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.
            The Bacon number is based on a game where actors were rated on distance they were away from the actor
            Kevin Bacon. Actors who appeared in a movie with Kevin Bacon were given a Bacon number of 1, and actors
            having only been in movies with actors with a Bacon number of 1 were given a Bacon number of 2.
            Each degree of separation lead to increasing the Bacon number by 1.
            The object is to connect any movie star to Mr. Bacon with no more than six hops based on 
            two people appearing in either the same movie or commercial.        
            This is a popular special case
            of the more general Six Degrees of Separation </textual><xref class="po-milestone e75 e75" linkend="sixDegrees"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">
            also known as the </textual><quote class="po-inline e76 e76"><textual class="po-textual">Human Web</textual></quote><textual class="po-textual">. The idea is that any two people on the planet can be
            connected by no more than six hops.
            According to Wikipedia," Mathematicians use an analogous notion of collaboration distance".
        </textual></para><figure class="po-container e77 e77" xml:id="mayall"><title class="po-block e78 e78"><textual class="po-textual">John Mayall Connections</textual></title><mediaobject class="po-container e79 e79"><imageobject class="po-container e80 e80"><imagedata class="po-meta e81 e81" fileref="../../../vol7/graphics/Sall01/Sall01-002.jpg" format="jpg" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e82 e82"><para class="po-block e83 e83"><textual class="po-textual">Dozens of musicians are within a few degrees of separation from John Mayall (circa 1972).</textual></para></caption></figure></section><section class="po-hcontainer e84 e84"><title class="po-block e85 e85"><textual class="po-textual">Problem Statement</textual></title><para class="po-block e86 e86"><textual class="po-textual"> 
            Using semantic technology, we can certainly improve upon hand copying of data from
            record album jackets. If we can refer to a recording artist with all the associations to
            other musicians and to the albums they appeared on together, we can produce more
            complete graphs than what is shown in </textual><xref class="po-milestone e87 e87" linkend="mayall"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.
            </textual><textual class="po-textual">
            As avid fans of blues and rock music, we wondered if we could construct SPARQL queries
            to examine properties and relationships between performers in order to answer global
            questions such as "Who has had the greatest impact on rock music?" Our primary focus was
            Eric Clapton, a musical artist with a decades-spanning career who has enjoyed both a
            very successful solo career as well as having performed in several world-renowned bands.
            Then using Drupal and SVG to visualize the results, we could traverse the musician
            graphs in a straightforward manner. 
        </textual></para><para class="po-block e88 e88"><textual class="po-textual">This paper explores the use of DBpedia and MusicBrainz data sources using OpenLink
            Virtuoso Universal Server with a Drupal frontend. Much attention is given to the
            challenges we encountered, especially with respect to community-entered open data
            sources and the strategies we employed to overcome the challenges.
            One such challenge we encountered was that there were several properties by which an artist
            could be connected to another and the semantics were not well-defined, as discussed later.
        </textual></para><para class="po-block e89 e89"><textual class="po-textual">
           We should be able to draw inferences from the data. According to Dean Allemang and Jim Hendler:</textual></para><blockquote class="po-container e90 e90"><para class="po-block e91 e91"><textual class="po-textual">In the context of the Semantic Web, inferencing simply means that given some stated information,
                we can determine other related information that we can also consider as if it had been stated.              
            </textual></para><attribution class="po-block e92 e92"><xref class="po-milestone e93 e93" linkend="SemWebBook"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref></attribution></blockquote><para class="po-block e94 e94"><textual class="po-textual">For example, ultimately we plan to use RDF and SPARQL to address questions such as these:
            </textual><orderedlist class="po-table e95 e95" xml:id="problemList" xreflabel="Problems"><listitem class="po-container e96 e96"><para class="po-block e97 e97"><textual class="po-textual">Which recording artist has directly played with the most musicians?</textual></para></listitem><listitem class="po-container e98 e98"><para class="po-block e99 e99"><textual class="po-textual">Which recording artist has the most connections within six degrees?</textual></para></listitem><listitem class="po-container e100 e100"><para class="po-block e101 e101"><textual class="po-textual">Which musician has been a session man for the most number of artists?</textual></para></listitem><listitem class="po-container e102 e102"><para class="po-block e103 e103"><textual class="po-textual">Which recording artist was most active during a particular decade?</textual></para></listitem><listitem class="po-container e104 e104"><para class="po-block e105 e105"><textual class="po-textual">Among all artists of a particular genre, who has played with the most other musicians?</textual></para></listitem><listitem class="po-container e106 e106"><para class="po-block e107 e107"><textual class="po-textual">Which rock artist's extended graph has the most other artists in 2 degrees? 3 degrees? 4 degrees?</textual></para></listitem><listitem class="po-container e108 e108"><para class="po-block e109 e109"><textual class="po-textual">Who has appeared on the most albums?</textual></para></listitem><listitem class="po-container e110 e110"><para class="po-block e111 e111"><textual class="po-textual">If we weight results by the length of time a band stays together, how does that impact other queries?</textual></para></listitem><listitem class="po-container e112 e112"><para class="po-block e113 e113"><textual class="po-textual">Can we distinguish between legitimate releases and unofficial releases?</textual></para></listitem><listitem class="po-container e114 e114"><para class="po-block e115 e115"><textual class="po-textual">What additional inferences can be made when multiple graphs are queried?</textual></para></listitem><listitem class="po-container e116 e116"><para class="po-block e117 e117"><textual class="po-textual">Can results be corroborated by comparing results to ground truths (i.e. documented in </textual><link class="po-inline e118 e118" xlink:actuate="onRequest" xlink:href="http://recordresearch.com/" xlink:show="new" xlink:type="simple"><textual class="po-textual">Joel Whitburn's Billboard books</textual></link><textual class="po-textual">)?</textual></para></listitem><listitem class="po-container e119 e119"><para class="po-block e120 e120"><textual class="po-textual">Which musician-related properties are reversible (inverse makes sense)?</textual></para></listitem><listitem class="po-container e121 e121"><para class="po-block e122 e122"><textual class="po-textual">How can we differentiate between a musician's playing in a band, being associated with other musicians, 
                    starring together in a live show, and others collaborating with the musician?</textual></para></listitem><listitem class="po-container e123 e123"><para class="po-block e124 e124"><textual class="po-textual">Does total number of songs or album released correlate with other measures of success?</textual></para></listitem><listitem class="po-container e125 e125"><para class="po-block e126 e126"><textual class="po-textual">Who created the most songs?</textual></para></listitem><listitem class="po-container e127 e127"><para class="po-block e128 e128"><textual class="po-textual">Which song has been recorded the most times by any artists? 
                    ("Yesterday" and "White Christmas" are typically cited.)</textual></para></listitem><listitem class="po-container e129 e129"><para class="po-block e130 e130"><textual class="po-textual">Is there a predominant record label in the music world?</textual></para></listitem><listitem class="po-container e131 e131"><para class="po-block e132 e132"><textual class="po-textual">Which solo artist has had the longest career?</textual></para></listitem><listitem class="po-container e133 e133"><para class="po-block e134 e134"><textual class="po-textual">Which band has been together (in some form) the longest time?</textual></para></listitem><listitem class="po-container e135 e135"><para class="po-block e136 e136"><textual class="po-textual">What is the average age of a musician when he/she first joined a band?</textual></para></listitem><listitem class="po-container e137 e137"><para class="po-block e138 e138"><textual class="po-textual">For bands with changing membership, can we conclude which configuration lasted the longest?</textual></para></listitem><listitem class="po-container e139 e139"><para class="po-block e140 e140"><textual class="po-textual">What is the "Eric Clapton number" (a la Kevin Bacon number) for various musicians?</textual></para></listitem><listitem class="po-container e141 e141"><para class="po-block e142 e142"><textual class="po-textual">Can we use our own knowledge of Eric Clapton to clarify some of the semantics behind some of the RDF data we encounter?</textual></para></listitem></orderedlist><textual class="po-textual">                
        </textual></para><para class="po-block e143 e143"><textual class="po-textual">
            Our notion of a musical artist's activity and impact can be explained in general terms. We consider
            </textual><emphasis class="po-inline e144 e144" role="ital"><textual class="po-textual">activity</textual></emphasis><textual class="po-textual"> to be correlated with the number of recordings produced. 
            Another factor that we chose not to consider is an artist's concert performances 
            unless they resulted in a commercially available recording.
            An artist's </textual><emphasis class="po-inline e145 e145" role="ital"><textual class="po-textual">impact</textual></emphasis><textual class="po-textual"> is more subjective. The greater the number of
            musicians that play with a performer (the greater the number of associations), the greater the
            potential impact of the performer, provided that the performer is not simply a session man. 
            Another measure that would have proved extremely helpful in determining both
            activity and impact in a more quantitative manner would be the use of Billboard chart data.
            Unfortunately, use of Billboard data is not royalty free.</textual><footnote class="po-popup e146 e146"><para class="po-block e147 e147"><textual class="po-textual">
                    According to </textual><xref class="po-milestone e148 e148" linkend="billboardAlbums"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, 
                    Clapton released 41 albums (including reissues) from 1970 to 2005. (He has released three more as of July 2011.) 
                    This includes eleven Top 10 albums
                    and three number 1 albums. Whitburn devised a formula for ranking artists by their chart success,
                    with rankings per decade and overall. According to Whitburn's calculations as of 2006, 
                    Clapton ranked #10 in the 1990's and ranked #12 all-time; he ranks #21 in most charted albums.
                </textual></para></footnote><textual class="po-textual">
        </textual></para><para class="po-block e149 e149"><textual class="po-textual">
            Furthermore, our working definitions  of activity and impact is primarily based on commercial recordings of an artist.
            We acknowledge that some artists tend to perform numerous live concerts and yet have produced
            relatively few commerical recordings; many of these concerts may be available on bootleg recordings.
            The argument could easily be made that the number of concerts and/or number of bootleg recordings
            are correlated with activity and/or impact. We have chosen not to consider these factors at this time.
        </textual></para></section><section class="po-hcontainer e150 e150" xml:id="dataSources" xreflabel="Data Sources"><title class="po-block e151 e151"><textual class="po-textual">Data Sources</textual></title><para class="po-block e152 e152"><textual class="po-textual">Fortunately in 2011, there is a tremendous wealth of information about musicians freely
            available on the Web either in structured markup, especially triples, that lends itself to
            SPARQL queries. For example, Wikipedia tells us that Eric Clapton </textual><xref class="po-milestone e153 e153" linkend="eclapton"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> is associated with:
            Dire Straits, The Yardbirds, John Mayall &amp; the Bluesbreakers, Powerhouse, Cream, Free Creek, 
            The Dirty Mac, Blind Faith, J.J. Cale, The Plastic Ono Band, Delaney, Bonnie &amp; Friends, Derek and the Dominos, and T.D.F.
            By comparison, Ringo Starr </textual><xref class="po-milestone e154 e154" linkend="rstarr"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> is associated with The Beatles, Rory Storm and the Hurricanes, 
            Ringo Starr &amp; His All-Starr Band, and Plastic Ono Band. On the surface, Ringo's direct associations are fewer,
            but actually Ringo Starr &amp; His All-Starr Band has had 11 different lineups (to date)
            with a total of 42 unique musicians, most of whom have a number of associations as well. </textual><xref class="po-milestone e155 e155" linkend="allStarBand"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">
        </textual></para><para class="po-block e156 e156"><textual class="po-textual">The various data sources we leveraged are discussed in the following subsections.</textual></para><section class="po-hcontainer e157 e157" xml:id="wikipediaSection" xreflabel="Wikipedia Section"><title class="po-block e158 e158"><textual class="po-textual">Wikipedia and Infoboxes</textual></title><para class="po-block e159 e159"><textual class="po-textual">
                The primary (although indirect) source for our RDF data was Wikipedia which
                is a major source of detailed information about musicians, among many other things. To understand both
                the kinds of properties available and their open community origins, some details about
                Wikipedia are in order.
            </textual></para><para class="po-block e160 e160"><textual class="po-textual">
                As illustrated by the excerpt from </textual><xref class="po-milestone e161 e161" linkend="claptonWikipedia"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> below, 
                the </textual><link class="po-inline e162 e162" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/Eric_Clapton" xlink:show="new" xlink:type="simple"><textual class="po-textual">main page</textual></link><textual class="po-textual"> for a musical artist
                contains an abstract at the top, a contents navigation box below the abstract with a variable number
                of section links pointing to the main content of the page, 
                and a so-called </textual><emphasis class="po-inline e163 e163" role="ital"><textual class="po-textual">infobox</textual></emphasis><textual class="po-textual"> in the upper right.
                In addition to a main page,
                most musical artists with more than a handful of albums or singles have a separate 
                </textual><link class="po-inline e164 e164" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/Eric_Clapton_discography" xlink:show="new" xlink:type="simple"><textual class="po-textual">discography page</textual></link><textual class="po-textual"> with
                varying amount of detail and organization regarding studio albums, live albums, compilations, singles, etc.
                The discography is linked to the musician's main page and vice versa.
            </textual></para><figure class="po-container e165 e165" xml:id="claptonWikipedia" xreflabel="Clapton's Wikipedia page"><title class="po-block e166 e166"><textual class="po-textual">Eric Clapton's Wikipedia Page (excerpt with Infobox on right)</textual></title><mediaobject class="po-container e167 e167"><imageobject class="po-container e168 e168"><imagedata class="po-meta e169 e169" fileref="../../../vol7/graphics/Sall01/Sall01-003.png" format="png" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e170 e170"><para class="po-block e171 e171"><textual class="po-textual">Wikipedia. "Eric Clapton -- Wikipedia, The Free Encyclopedia". 2011.</textual></para></caption></figure><para class="po-block e172 e172"><textual class="po-textual"> An </textual><link class="po-inline e173 e173" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/Help:Infobox" xlink:show="new" xlink:type="simple"><textual class="po-textual">infobox</textual></link><textual class="po-textual"> is
                a fixed-format table designed to be added to the top right-hand corner of Wikipedia
                articles to consistently and concisely present a summary of some common aspects that
                the articles of the same category (i.e., musical artist) share, as well as to
                improve navigation to other interrelated articles (i.e., music genres). Infoboxes
                are an instance of MediaWiki's template feature; there are numerous infobox
                templates arranged by broad </textual><link class="po-inline e174 e174" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/Category:Infobox_templates" xlink:show="new" xlink:type="simple"><textual class="po-textual">categories</textual></link><textual class="po-textual"> such as </textual><link class="po-inline e175 e175" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/Category:Arts_and_culture_infobox_templates" xlink:show="new" xlink:type="simple"><textual class="po-textual">arts and culture infobox templates</textual></link><textual class="po-textual">, which is further divided into 10
                subcategories including templates for film, fictional characters, and music. There
                are over 50 templates in the subcategory </textual><link class="po-inline e176 e176" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/Category:Music_infobox_templates" xlink:show="new" xlink:type="simple"><textual class="po-textual">music
                    infobox templates</textual></link><textual class="po-textual"> of which the most relevant to our work is the </textual><link class="po-inline e177 e177" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/Template:Infobox_musical_artist" xlink:show="new" xlink:type="simple"><textual class="po-textual">template for the infobox of musicial artists</textual></link><textual class="po-textual">. (See the right side of
                    </textual><xref class="po-milestone e178 e178" linkend="infoboxTable"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> below.) This infobox template is used by
                Wikipedia authors to create infoboxes such as Clapton's, shown in the left side of the table. The
                correspondence between the template and the resultant infobox is apparent when
                viewed side by side. Most of the properties that we used in our queries (e.g., name,
                genres, associated acts, etc.) are based on the contents of the infobox, with the
                notable exception of albums (from the discography page).
            </textual></para><table cellspacing="50" class="po-container e179 e179" xml:id="infoboxTable" xreflabel="Table 1"><caption class="po-container e180 e180"><para class="po-block e181 e181"><textual class="po-textual">Clapton's Infobox (left) and Generic Musical Artist Infobox Template (right) [cited 03 Apr 2011]</textual></para></caption><tbody align="center" class="po-table e182 e182"><tr align="center" class="po-table e183 e183"><td class="po-block e184 e184"><textual class="po-textual">
                            </textual><inlinemediaobject class="po-null e185 e185"><imageobject class="po-container e186 e186"><imagedata class="po-meta e187 e187" fileref="../../../vol7/graphics/Sall01/Sall01-004.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></inlinemediaobject><textual class="po-textual">                          
                        </textual></td><td class="po-block e188 e188"><textual class="po-textual">
                            </textual><inlinemediaobject class="po-null e189 e189"><imageobject class="po-container e190 e190"><imagedata class="po-meta e191 e191" fileref="../../../vol7/graphics/Sall01/Sall01-005.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></inlinemediaobject><textual class="po-textual">                           
                        </textual></td></tr></tbody></table><para class="po-block e192 e192"><textual class="po-textual">
                The wiki source markup of the infobox is shown in </textual><xref class="po-milestone e193 e193" linkend="infoboxMarkup"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. For a much more complete
                explanation of the Wikipedia extraction process employed by DBpedia including a discussion of 
                the design and development of infobox templates,
                see </textual><xref class="po-milestone e194 e194" linkend="Auer1"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and </textual><xref class="po-milestone e195 e195" linkend="Auer2"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.
                </textual><figure class="po-container e196 e196" xml:id="infoboxMarkup" xreflabel="Figure 3"><title class="po-block e197 e197"><textual class="po-textual">Wiki Source Markup for Clapton Infobox</textual></title><mediaobject class="po-container e198 e198"><imageobject class="po-container e199 e199"><imagedata class="po-meta e200 e200" fileref="../../../vol7/graphics/Sall01/Sall01-006.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e201 e201"><para class="po-block e202 e202"><textual class="po-textual">Compare markup to rendering shown in Table 1.</textual></para></caption></figure><textual class="po-textual">
            </textual></para></section><section class="po-hcontainer e203 e203" xml:id="dbpediaSection" xreflabel="DBpedia Section"><title class="po-block e204 e204"><textual class="po-textual">DBpedia</textual></title><para class="po-block e205 e205"><textual class="po-textual">
                One of the two primary dataset we used was DBpedia 3.6 en (English) based on Wikipedia dumps from October/November 2010.
                DBpedia </textual><xref class="po-milestone e206 e206" linkend="dbp01"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> is a community effort to provide sophisticated query access to the structured content of
                Wikipedia, thereby allowing a small group of researchers and developers to enhance Wikipedia by linking to additional datasets.
                The DBpedia 3.6 release announcement
                describes the content in detail:            
                </textual><blockquote class="po-container e207 e207"><para class="po-block e208 e208"><textual class="po-textual">
                    "The new DBpedia dataset </textual><xref class="po-milestone e209 e209" linkend="dbp02"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> describes more than 3.5 million things, of which
                    1.67 million are classified in a consistent ontology, including 364,000
                    persons, 462,000 places, 99,000 music albums, 54,000 films, 16,500 video
                    games, 148,000 organizations, 148,000 species and 5,200 diseases.
                    
                    The DBpedia dataset features labels and abstracts for 3.5 million things in
                    up to 97 different languages; 1,850,000 links to images and 5,900,000 links
                    to external web pages; 6,500,000 external links into other RDF datasets, and
                    632,000 Wikipedia categories.
                    
                    The dataset consists of 672 million pieces of information (RDF triples) out
                    of which 286 million were extracted from the English edition of Wikipedia
                    and 386 million were extracted from other language editions and links to
                    external datasets."
                    </textual></para></blockquote><textual class="po-textual">
            </textual></para><para class="po-block e210 e210"><textual class="po-textual">  The DBpedia Ontology </textual><xref class="po-milestone e211 e211" linkend="dbp03"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> is a cross-domain ontology 
                    created from the most commonly used infoboxes within Wikipedia. 
                    The ontology currently covers over 272 classes with 1,300 different properties and 1.667 million resources,
                    364,000 of which are Persons.  
                    DBpedia predicate IRIs </textual><footnote class="po-popup e212 e212"><para class="po-block e213 e213"><textual class="po-textual">IRI is Internationalized Resource Identifier, a generalization of the Uniform Resource Identifier (IRI) 
                            enabling the use of Unicode. In this paper, we refer to IRI rather than URI since SPARQL
                        technically permits IRIs.</textual></para></footnote><textual class="po-textual"> begin with either </textual><code class="po-atom e214 e214"><textual class="po-textual">http://dbpedia.org/ontology</textual></code><textual class="po-textual"> or 
                </textual><code class="po-atom e215 e215"><textual class="po-textual">http://dbpedia.org/property</textual></code><textual class="po-textual">; entitites are designated 
                by </textual><code class="po-atom e216 e216"><textual class="po-textual">http://dbpedia.org/resource</textual></code><textual class="po-textual">.
                </textual></para><para class="po-block e217 e217"><textual class="po-textual">
                    We initially used a simple SPARQL query </textual><xref class="po-milestone e218 e218" linkend="sparql01"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> to determine what properties are relevant to a musician
                    as shown in the following two listings. Some musicians had less than the 23 properties shown;
                    others had more. Note that the </textual><code class="po-atom e219 e219"><textual class="po-textual">resource</textual></code><textual class="po-textual"> IRI designating the musician is a straightforward rendering of
                    the artist's name in English with underscores replacing spaces: 
                    </textual><code class="po-atom e220 e220"><textual class="po-textual">http://dbpedia.org/resource/Eric_Clapton</textual></code><textual class="po-textual">.
                   </textual><figure class="po-container e221 e221"><title class="po-block e222 e222"><textual class="po-textual">Display Properties Defined for Eric Clapton (as object)</textual></title><programlisting class="po-block e223 e223" xml:space="preserve"><textual class="po-textual">
                       
            SELECT DISTINCT (?predicate) WHERE {
                ?s ?predicate &lt;http://dbpedia.org/resource/Eric_Clapton&gt;.
            } ORDER BY ?predicate         
                       
                       </textual></programlisting></figure><textual class="po-textual">             
                    </textual><figure class="po-container e224 e224" xml:id="ClaptonPropertiesV1" xreflabel="Clapton's DBpedia Properties - Version 1"><title class="po-block e225 e225"><textual class="po-textual">Clapton's DBpedia Properties - Version 1 (23 Predicates)</textual></title><programlisting class="po-block e226 e226" xml:space="preserve"><textual class="po-textual">
                http://dbpedia.org/ontology/artist
                http://dbpedia.org/ontology/associatedBand
                http://dbpedia.org/ontology/associatedMusicalArtist
                http://dbpedia.org/ontology/composer
                http://dbpedia.org/ontology/musicComposer
                http://dbpedia.org/ontology/musicalArtist
                http://dbpedia.org/ontology/musicalBand
                http://dbpedia.org/ontology/partner
                http://dbpedia.org/ontology/producer
                http://dbpedia.org/ontology/spouse
                http://dbpedia.org/ontology/starring
                http://dbpedia.org/ontology/wikiPageDisambiguates
                http://dbpedia.org/ontology/writer
                http://dbpedia.org/property/associatedActs
                http://dbpedia.org/property/before
                http://dbpedia.org/property/currentMembers
                http://dbpedia.org/property/music
                http://dbpedia.org/property/pastMembers
                http://dbpedia.org/property/producer
                http://dbpedia.org/property/spouse
                http://dbpedia.org/property/starring
                http://dbpedia.org/property/writer
                http://www.w3.org/2002/07/owl#sameAs
                    </textual></programlisting></figure><textual class="po-textual">
                    In a later section, we discuss alternative property-related queries with different results.
                </textual></para><para class="po-block e227 e227"><textual class="po-textual">Wikipedia-like categories can also be specified in queries. The following query returns
                    the short list of musical artists who have three distinctions: Grammy Award winners, Rock and Roll Hall of Fame inductees, and
                    MTV Video Music Awards winners.
                </textual></para><programlisting class="po-block e228 e228" xml:space="preserve"><textual class="po-textual">
                
        SELECT  ?allAwards
        { 
         ?allAwards &lt;http://purl.org/dc/terms/subject&gt; 
                              &lt;http://dbpedia.org/resource/Category:Grammy_Award_winners&gt;.
         ?allAwards &lt;http://purl.org/dc/terms/subject&gt; 
                              &lt;http://dbpedia.org/resource/Category:Rock_and_Roll_Hall_of_Fame_inductees&gt;.
         ?allAwards &lt;http://purl.org/dc/terms/subject&gt; 
                              &lt;http://dbpedia.org/resource/Category:MTV_Video_Music_Awards_winners&gt;
        } ORDER BY ?allAwards                
                
            </textual></programlisting><para class="po-block e229 e229"><textual class="po-textual">The thrice-honored, distinguished musical artists are:
            </textual><footnote class="po-popup e230 e230"><para class="po-block e231 e231"><textual class="po-textual">If we add one more clause to the query asking also for 
                    </textual><code class="po-atom e232 e232"><textual class="po-textual">http://dbpedia.org/resource/Category:English_rock_guitarists</textual></code><textual class="po-textual">, 
                    then Eric Clapton is the only result.</textual></para></footnote><textual class="po-textual">
            </textual></para><programlisting class="po-block e233 e233" xml:space="preserve"><textual class="po-textual">
                
        http://dbpedia.org/resource/Aerosmith
        http://dbpedia.org/resource/Bruce_Springsteen
        http://dbpedia.org/resource/Elton_John
        http://dbpedia.org/resource/Eric_Clapton
        http://dbpedia.org/resource/Johnny_Cash
        http://dbpedia.org/resource/Madonna_%28entertainer%29
        http://dbpedia.org/resource/Metallica
        http://dbpedia.org/resource/Michael_Jackson
        http://dbpedia.org/resource/R.E.M.
        http://dbpedia.org/resource/The_Beatles
        http://dbpedia.org/resource/The_Rolling_Stones
        http://dbpedia.org/resource/U2
        http://dbpedia.org/resource/Van_Halen                
                
            </textual></programlisting><para class="po-block e234 e234"><textual class="po-textual">
                The </textual><link class="po-inline e235 e235" xlink:actuate="onRequest" xlink:href="http://mappings.dbpedia.org/server/ontology/classes/MusicalArtist" xlink:show="new" xlink:type="simple"><textual class="po-textual">full list of predicates relating to MusicalArtist</textual></link><textual class="po-textual"> 
                is quite large. The figure below is a partial view of the </textual><link class="po-inline e236 e236" xlink:actuate="onRequest" xlink:href="http://dbpedia.org/page/Eric_Clapton" xlink:show="new" xlink:type="simple"><textual class="po-textual">DBpedia "About: Eric Clapton"</textual></link><textual class="po-textual"> page.
                    The IRI </textual><code class="po-atom e237 e237"><textual class="po-textual">http://dbpedia.org/resource/Eric_Clapton</textual></code><textual class="po-textual"> forwards to this page.
                        </textual><figure class="po-container e238 e238"><title class="po-block e239 e239"><textual class="po-textual">Dereferencing the Eric Clapton DBpedia IRI (excerpt)</textual></title><mediaobject class="po-container e240 e240"><imageobject class="po-container e241 e241"><imagedata class="po-meta e242 e242" fileref="../../../vol7/graphics/Sall01/Sall01-007.png" format="png" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><imageobject class="po-container e243 e243"><imagedata class="po-meta e244 e244" fileref="../../../vol7/graphics/Sall01/Sall01-008.png" format="png" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><textual class="po-textual">            
                </textual></para></section><section class="po-hcontainer e245 e245" xml:id="musicbrainzSection" xreflabel="MusicBrainz Section"><title class="po-block e246 e246"><textual class="po-textual">MusicBrainz</textual></title><para class="po-block e247 e247"><textual class="po-textual">MusicBrainz </textual><xref class="po-milestone e248 e248" linkend="musicBrainz"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> is another comprehensive public database for musician information; it
                contains detailed data about artists, release groups, releases, tracks, record labels and many relationships between them.
                As described in the </textual><link class="po-inline e249 e249" xlink:actuate="onRequest" xlink:href="http://musicbrainz.org/doc/MusicBrainz_Database#Data_Overview" xlink:show="new" xlink:type="simple"><textual class="po-textual">database overview</textual></link><textual class="po-textual">,
                MusicBrainz defines artist attributes including the artist's name, aliases, GUID, annotation, type (individual or group), and
                begin and end dates (birth/death of an individual or formation/disbanding for a group).  A release group is a logical grouping
                of variant releases (deluxe/limited editions, reissues/remasters, international variations, box sets, etc.). One example is
                the release group describing several 
                </textual><link class="po-inline e250 e250" xlink:actuate="onRequest" xlink:href="http://musicbrainz.org/release-group/ced848a4-b94b-3f34-b08b-6dc8bf8aed8f.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">variants of Clapton's 461 Ocean Boulevard album</textual></link><textual class="po-textual">.
                Each release group is identified by type (album, single, EP, compilation, soundtrack, live, etc.), as well as by artist, title, and ID.
                An individual release has the same properties as a release group as well as status (official, bootleg, etc.), Amazon ASIN,
                annotation, language, release event (date, country, format, label, etc.) and more. Each track has properties such as
                duration (in milliseconds) and PUID (the MusicIP acoustic fingerprint identifier for the track) as well as artist, title, and ID.
                Record labels are also described with a number of detailed attributes. 
            </textual></para><para class="po-block e251 e251"><textual class="po-textual">
                Every MusicBrainz ID (MBID) is a permanent GUID. There is a direct relationship between an artist's MBID, a IRI that
                identifies the artist, and a web page that collects information about the artist. For example:
                </textual><itemizedlist class="po-table e252 e252"><listitem class="po-container e253 e253"><para class="po-block e254 e254"><textual class="po-textual">Eric Clapton's MBID is 618b6900-0618-4f1e-b835-bccb17f84294</textual></para></listitem><listitem class="po-container e255 e255"><para class="po-block e256 e256"><textual class="po-textual">Eric Clapton's IRI is </textual><link class="po-inline e257 e257" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://musicbrainz.org/mm-2.1/artist/618b6900-0618-4f1e-b835-bccb17f84294</textual></link><textual class="po-textual"> (points to basic RDF metadata)</textual></para></listitem><listitem class="po-container e258 e258"><para class="po-block e259 e259"><textual class="po-textual">His MusicBrainz page is </textual><link class="po-inline e260 e260" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://musicbrainz.org/artist/618b6900-0618-4f1e-b835-bccb17f84294.html</textual></link></para></listitem></itemizedlist><textual class="po-textual">            
            </textual></para><para class="po-block e261 e261"><textual class="po-textual"> Below is a screenshot of the
                </textual><link class="po-inline e262 e262" xlink:actuate="onRequest" xlink:href="http://musicbrainz.org/artist/618b6900-0618-4f1e-b835-bccb17f84294.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">Eric Clapton MusicBrainz page</textual></link><textual class="po-textual">.
                MusicBrainz offers a tremendous amount of detail about releases as exemplified by the page for Clapton's classic
                </textual><link class="po-inline e263 e263" xlink:actuate="onRequest" xlink:href="http://musicbrainz.org/show/release/relationships.html?releaseid=3923" xlink:show="new" xlink:type="simple"><textual class="po-textual">From the Cradle</textual></link><textual class="po-textual"> blues album.
                    </textual><figure class="po-container e264 e264"><title class="po-block e265 e265"><textual class="po-textual">Eric Clapton's MusicBrainz Main Page</textual></title><mediaobject class="po-container e266 e266"><imageobject class="po-container e267 e267"><imagedata class="po-meta e268 e268" fileref="../../../vol7/graphics/Sall01/Sall01-009.png" format="png" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><textual class="po-textual">                     
            </textual></para><para class="po-block e269 e269"><textual class="po-textual">
                MusicBrainz also provides a </textual><link class="po-inline e270 e270" xlink:actuate="onRequest" xlink:href="http://wiki.musicbrainz.org/XML_Web_Service" xlink:show="new" xlink:type="simple"><textual class="po-textual">web service interface</textual></link><textual class="po-textual"> to its extensive database.
                Requests may be English-like such as </textual><link class="po-inline e271 e271" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://musicbrainz.org/ws/1/artist/?type=xml&amp;name=Eric+Clapton</textual></link><textual class="po-textual"> or
                may contain MBIDs such as </textual><link class="po-inline e272 e272" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://musicbrainz.org/mm-2.1/album/1301e027-b038-4017-9b4c-7655bff78f6b</textual></link><textual class="po-textual"> for the 
                "461 Ocean Boulevard" album, shown below. (Release dates of 1974 and three from 1996 are collapsed 
                in the screenshot.)
                </textual><figure class="po-container e273 e273"><title class="po-block e274 e274"><textual class="po-textual"> Web Service Result - Query for 461 Ocean Boulevard</textual></title><mediaobject class="po-container e275 e275"><imageobject class="po-container e276 e276"><imagedata class="po-meta e277 e277" fileref="../../../vol7/graphics/Sall01/Sall01-010.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><textual class="po-textual">   
            </textual></para><para class="po-block e278 e278"><textual class="po-textual">
                MusicBrainz maintains numerous </textual><link class="po-inline e279 e279" xlink:actuate="onRequest" xlink:href="http://musicbrainz.org/statistics" xlink:show="new" xlink:type="simple"><textual class="po-textual">database statistics</textual></link><textual class="po-textual">,
                a small sampling of which appear below. It is interesting to note that in the three months since the draft version
                of this paper, although the number of Recordings increased by approximately 37,000,
                the Artist count dropped by roughly 8,000.  This seems to suggest the dynamic nature of the data both in terms
                of quantity and in how recordings are categorized. (For example, artists may have appeared under variant name 
                spellings.) We could not find a definition for the new term </textual><emphasis class="po-inline e280 e280" role="ital"><textual class="po-textual">Works</textual></emphasis><textual class="po-textual"> in the
                </textual><link class="po-inline e281 e281" xlink:actuate="onRequest" xlink:href="http://musicbrainz.org/doc/MusicBrainz_Terminology" xlink:show="new" xlink:type="simple"><textual class="po-textual">terminology page</textual></link><textual class="po-textual"> or other
                </textual><link class="po-inline e282 e282" xlink:actuate="onRequest" xlink:href="http://musicbrainz.org/doc/MusicBrainz_Documentation" xlink:show="new" xlink:type="simple"><textual class="po-textual">MusicBrainz documentation</textual></link><textual class="po-textual">.
            </textual></para><table class="po-container e283 e283" frame="border"><caption class="po-container e284 e284"><para class="po-block e285 e285"><emphasis class="po-inline e286 e286" role="bold"><textual class="po-textual">Selected MusicBrainz Statistics</textual></emphasis><textual class="po-textual"> [accessed 10 April 2011; updated 26 June 2011]</textual></para></caption><tbody class="po-table e287 e287"><tr class="po-table e288 e288"><td class="po-block e289 e289"><textual class="po-textual">Artists</textual></td><td class="po-block e290 e290"><textual class="po-textual">612,428</textual></td></tr><tr class="po-table e291 e291"><td class="po-block e292 e292"><textual class="po-textual">Release Groups</textual></td><td class="po-block e293 e293"><textual class="po-textual">787,918</textual></td></tr><tr class="po-table e294 e294"><td class="po-block e295 e295"><textual class="po-textual">Releases</textual></td><td class="po-block e296 e296"><textual class="po-textual">952,743</textual></td></tr><tr class="po-table e297 e297"><td class="po-block e298 e298"><textual class="po-textual">Disc IDs</textual></td><td class="po-block e299 e299"><textual class="po-textual">460,876</textual></td></tr><tr class="po-table e300 e300"><td class="po-block e301 e301"><textual class="po-textual">Recordings [tracks]</textual></td><td class="po-block e302 e302"><textual class="po-textual">10,307,311</textual></td></tr><tr class="po-table e303 e303"><td class="po-block e304 e304"><textual class="po-textual">Labels</textual></td><td class="po-block e305 e305"><textual class="po-textual">52,156</textual></td></tr><tr class="po-table e306 e306"><td class="po-block e307 e307"><textual class="po-textual">Works</textual></td><td class="po-block e308 e308"><textual class="po-textual">276,864</textual></td></tr><tr class="po-table e309 e309"><td class="po-block e310 e310"><textual class="po-textual">Relationships [links]</textual></td><td class="po-block e311 e311"><textual class="po-textual">3,160,096</textual></td></tr></tbody></table><para class="po-block e312 e312"><textual class="po-textual">
                The MusicBrainz </textual><link class="po-inline e313 e313" xlink:actuate="onRequest" xlink:href="http://musicbrainz.org/doc/Data_Quality" xlink:show="new" xlink:type="simple"><textual class="po-textual"> data quality</textual></link><textual class="po-textual"> page
                states that one of the goals is "Establish a method to determine the quality of an artist and the releases that belong to that artist. 
                This provides consumers of MusicBrainz a clue about the relative quality rating of the data in the database."
                The page explains the connection between the quality number, voting periods, and strictness regarding edits.
            </textual></para><blockquote class="po-container e314 e314"><para class="po-block e315 e315"><textual class="po-textual">To accomplish these goals, this feature will allow editors to indicate the quality for a given artist. 
                    An artist can be of unknown, low, medium or high data quality. The data quality indicator determines what 
                    level of effort is required to change the artist information or to add/remove albums from an artist. 
                    An artist with unknown or medium quality will roughly require the amount of effort that MusicBrainz currently 
                    requires to edit the database. An artist with low data quality will make it easier to add/remove albums or
                    to change the artist information (name, sortname, aliases). And an artist with high data quality will 
                    require more effort to add/remove albums or the change the artist information. 
                    The data quality concept also applies to releases in the same manner. Changing a release with low data
                    quality will be easier than changing a release with high data quality.
                </textual></para></blockquote></section><section class="po-hcontainer e316 e316" xml:id="freebaseSection" xreflabel="Freebase Section"><title class="po-block e317 e317"><textual class="po-textual">Freebase</textual></title><para class="po-block e318 e318"><textual class="po-textual"> Initially we considered using music data from Freebase </textual><xref class="po-milestone e319 e319" linkend="freebaseHome"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, an open, community-based, Creative Commons licensed
                repository of structured data describing millions of entities (i.e., person, place,
                thing) which are connected as a graph. Freebase IDs can be used to uniquely identify
                entities from any web-reachable source. At the time of this writing, the 1.22 GB
                (uncompressed) music segment of Freebase contained 9 million topics and 33 million
                facts. The music category contains classical, opera, and many other genres in
                addition to blues and rock music. Data is formatted as approximately 50 separate Tab
                Separated Values files with filenames such as group_member.tsv,
                group_membership.tsv, musical_group.tsv, guitarist.tsv, album.tsv, artist.tsv,
                release.tsv, and track.tsv (the largest file at roughly 671 MB). A total of over
                151,000 groups are listed in musical_group.tsv. </textual><footnote class="po-popup e320 e320"><para class="po-block e321 e321"><textual class="po-textual">The full Freebase data set in TSV format is 1.3 GB compressed. The entire
                        Freebase data dump is also available as quadruples in a 3.36 GB download.
                        When uncompressed, the single file freebase-datadump-quadruples.tsv is 27.3
                        GB. </textual></para></footnote><textual class="po-textual">
            </textual></para><para class="po-block e322 e322"><textual class="po-textual"> Freebase data can be used in several ways. MQL (Metaweb Query Language) </textual><xref class="po-milestone e323 e323" linkend="mql"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> is a query API analogous to SPARQL for RDF. MQL uses JSON
                objects as queries via standard HTTP requests and responses. For example, the IRI
                below will return all the genres associated with Eric Clapton (line breaks added for
                readability). </textual><programlisting class="po-block e324 e324" xml:space="preserve"><textual class="po-textual">
                       
        http://api.freebase.com/api/service/mqlread?query={%20%22query%22:
        {%20%22active_start%22:null,%20%22genre%22:[],%20%22name%22:%22Eric%20Clapton%22,
        %20%22type%22:%22/music/artist%22%20}%20}                   
                    
                </textual></programlisting><textual class="po-textual"> will produce the following result,
                indicating all the genres associated with Eric Clapton: </textual></para><para class="po-block e325 e325"><textual class="po-textual">
                </textual><figure class="po-container e326 e326"><title class="po-block e327 e327"><textual class="po-textual">Freebase Genre Results for Eric Clapton</textual></title><programlisting class="po-block e328 e328" xml:space="preserve"><textual class="po-textual">
                {
                  "code": "/api/status/ok",
                  "result": {
                    "active_start": null,
                    "genre": [
                      "Blues",
                      "Rock music",
                      "Blues-rock",
                      "Pop rock",
                      "Hard rock",
                      "Psychedelic rock",
                      "Reggae"
                    ],
                    "name": "Eric Clapton",
                    "type": "/music/artist"
                  },
                  "status": "200 OK",
                  "transaction_id": "cache;cache03.p01.sjc1:8101;2011-01-26T22:45:13Z;0054"
                }
                </textual></programlisting></figure><textual class="po-textual"> We will see later that this list of genres differs from other data
                sources. </textual></para><para class="po-block e329 e329"><textual class="po-textual">For any given group, band members are non-sequential within the
                group_membership.tsv file. The relevant lines for the members of Blind Faith are
                collected in the table below.</textual></para><table class="po-container e330 e330"><caption class="po-container e331 e331"><para class="po-block e332 e332"><emphasis class="po-inline e333 e333" role="bold"><textual class="po-textual">Members of Blind Faith - from
                        Freebase</textual></emphasis></para></caption><thead class="po-container e334 e334"><tr class="po-table e335 e335"><th class="po-field e336 e336"><textual class="po-textual">id</textual></th><th class="po-field e337 e337"><textual class="po-textual">member</textual></th><th class="po-field e338 e338"><textual class="po-textual">group</textual></th><th class="po-field e339 e339"><textual class="po-textual">(role)</textual></th><th class="po-field e340 e340"><textual class="po-textual">start</textual></th><th class="po-field e341 e341"><textual class="po-textual">end</textual></th></tr></thead><tbody class="po-table e342 e342"><tr class="po-table e343 e343"><td class="po-block e344 e344"><textual class="po-textual">/m/01tfhrr</textual></td><td class="po-block e345 e345"><textual class="po-textual">Ginger Baker</textual></td><td class="po-block e346 e346"><textual class="po-textual">Blind Faith</textual></td><td class="po-block e347 e347"><textual class="po-textual"> </textual></td><td class="po-block e348 e348"><textual class="po-textual">1968</textual></td><td class="po-block e349 e349"><textual class="po-textual">1969-10</textual></td></tr><tr class="po-table e350 e350"><td class="po-block e351 e351"><textual class="po-textual">/m/01tfhry</textual></td><td class="po-block e352 e352"><textual class="po-textual">Steve Winwood</textual></td><td class="po-block e353 e353"><textual class="po-textual">Blind Faith</textual></td><td class="po-block e354 e354"><textual class="po-textual"> </textual></td><td class="po-block e355 e355"><textual class="po-textual">1968</textual></td><td class="po-block e356 e356"><textual class="po-textual">1969-10</textual></td></tr><tr class="po-table e357 e357"><td class="po-block e358 e358"><textual class="po-textual">/m/01wvwr8</textual></td><td class="po-block e359 e359"><textual class="po-textual">Ric Grech</textual></td><td class="po-block e360 e360"><textual class="po-textual">Blind Faith</textual></td><td class="po-block e361 e361"><textual class="po-textual"> </textual></td><td class="po-block e362 e362"><textual class="po-textual">1968</textual></td><td class="po-block e363 e363"><textual class="po-textual">1969-10</textual></td></tr><tr class="po-table e364 e364"><td class="po-block e365 e365"><textual class="po-textual">/m/01tfhrk</textual></td><td class="po-block e366 e366"><textual class="po-textual">Eric Clapton</textual></td><td class="po-block e367 e367"><textual class="po-textual">Blind Faith</textual></td><td class="po-block e368 e368"><textual class="po-textual"> </textual></td><td class="po-block e369 e369"><textual class="po-textual">1968</textual></td><td class="po-block e370 e370"><textual class="po-textual">1969-10</textual></td></tr></tbody></table><para class="po-block e371 e371"><textual class="po-textual"> The group_membership.tsv file contains dozens of entries for Clapton, one line
                for each band or other association in which he participated. Each entry (line) is
                identified by a different ID. For example:
                </textual><programlisting class="po-block e372 e372" xml:space="preserve"><textual class="po-textual">
       /m/01t73cp	Eric Clapton	Derek and the Dominos                   
                </textual></programlisting><textual class="po-textual">
            </textual></para><para class="po-block e373 e373"><link class="po-inline e374 e374" xlink:actuate="onRequest" xlink:href="http://www.freebase.com/view/en/eric_clapton" xlink:show="new" xlink:type="simple"><textual class="po-textual">Eric Clapton's
                    main Freebase page</textual></link><textual class="po-textual"> is shown below. The IRI format for Clapton as a topic
                is </textual><code class="po-atom e375 e375"><textual class="po-textual">http://www.freebase.com/view/en/eric_clapton</textual></code><textual class="po-textual">. </textual><figure class="po-container e376 e376"><title class="po-block e377 e377"><textual class="po-textual">Eric Clapton's Freebase Page</textual></title><mediaobject class="po-container e378 e378"><imageobject class="po-container e379 e379"><imagedata class="po-meta e380 e380" fileref="../../../vol7/graphics/Sall01/Sall01-011.png" format="png" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><textual class="po-textual">
            </textual></para><para class="po-block e381 e381"><textual class="po-textual">Ultimately we elected not to use Freebase as a data source because we, like
                others, were unable to locate the complete Freebase dataset rendered as RDF and
                determined that the conversion process would be non-trivial. In fact, we found
                mailing list and forum messages with others expressing the same problem. Initially
                we had downloaded the dataset in its native format and considered converting it into
                RDF. This would have been possible although many of the lines contained a fourth
                element consisting of a number of values concatenated together; it was unclear how
                that could be cleanly converted into a named graph. After the rough draft of our
                paper was submitted, we discovered that RDF data is available manually by following
                a link labeled "RDF" near the bttom of each Freebase page. It appears that
                this RDF is rendered at execution time since there is a slight delay in the display
                of the RDF. For example, follow the </textual><link class="po-inline e382 e382" xlink:actuate="onRequest" xlink:href="http://rdf.freebase.com/rdf/en.eric_clapton" xlink:show="new" xlink:type="simple"><textual class="po-textual">RDF link on the Eric
                    Clapton page</textual></link><textual class="po-textual">. Had we discovered this sooner we might have attempted to
                obtain the Freebase RDF for Rock and Roll stars using some automated process.
            </textual></para></section></section><section class="po-hcontainer e383 e383"><title class="po-block e384 e384"><textual class="po-textual">Methodology</textual></title><para class="po-block e385 e385"><textual class="po-textual">In this section, we discuss our frontend and backend development platform, a few term definitions,
        and details concerning the Graphviz visualization which is still under development as of this July writing.
        </textual></para><section class="po-hcontainer e386 e386"><title class="po-block e387 e387"><textual class="po-textual">Development Environment</textual></title><para class="po-block e388 e388"><textual class="po-textual">The front end to our SPARQL queries was a guest virtual machine running under Sun
                VirtualBox 3.1.6_OSE. on a Dell Inspiron with an Intel Core 2 Quad CPU Q9400 running
                at 2.66GHz. The guest operating system is the 10.10 server release of Ubuntu Linux.
                </textual><textual class="po-textual"> The
                database machine leverages 2 Intel Xeon X5650 CPUs overclocked to 3.12GHz with 48
                gigabytes of RAM. From the perspective of the 10.10 Ubuntu Desktop operating system,
                the 2 hexcore processors are regarded as 24 processors (149867.81 BogoMIPS). </textual></para><para class="po-block e389 e389"><textual class="po-textual">
                Our RDF store was the open source (freely-available) version of
                OpenLink Virtuoso Universal Server </textual><xref class="po-milestone e390 e390" linkend="virtuoso"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> (Version 06.01.3127) running in "Full Mode". Configuration changes were made to 
                maximize use of available RAM by making a change to the </textual><code class="po-atom e391 e391"><textual class="po-textual">virtuoso.ini</textual></code><textual class="po-textual"> file: 
                "NumberOfBuffers = 7000000".
            </textual></para><para class="po-block e392 e392"><textual class="po-textual">
                On the frontend, our queries were facilitated by Drupal 6.18 with the modules listed in the
                </textual><xref class="po-milestone e393 e393" linkend="drupalModules"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> appendix.
                It was necessary to configure PHP to allow Drupal more memory, so "memory_limit = 512M" 
                was added to </textual><code class="po-atom e394 e394"><textual class="po-textual">/etc/php5/apache2/php.ini</textual></code><textual class="po-textual">.
            </textual></para><para class="po-block e395 e395"><textual class="po-textual">Drupal 7.0 became available during 2011, but we elected not to migrate to that version.
                Although Drupal 7.0 does have substantially better support for RDF data than earlier 
                versions, that is likely to only effect people publishing information that was
                authored or stored inside Drupal. Our use of Drupal was for collaborative development of and storing of
                queries, as well as for the visualization capabilities.</textual></para></section><section class="po-hcontainer e396 e396" xml:id="workingDefs" xreflabel="Working Definitions"><title class="po-block e397 e397"><textual class="po-textual">Working Definitions of Key Properties</textual></title><para class="po-block e398 e398"><textual class="po-textual">The definition list below presents our current thinking about several key concepts that
            are covered in details in later sections; some refer to </textual><xref class="po-milestone e399 e399" linkend="openCyc"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.
            </textual></para><variablelist class="po-table e400 e400"><varlistentry class="po-record e401 e401"><term class="po-block e402 e402"><link class="po-inline e403 e403" xlink:actuate="onRequest" xlink:href="http://dbpedia.org/ontology/musicalArtist" xlink:show="new" xlink:type="simple"><textual class="po-textual">dbpedia-owl:musicalArtist</textual></link></term><listitem class="po-container e404 e404"><para class="po-block e405 e405"><textual class="po-textual">a person who is either a musician who plays one or more instruments,
                        or is a singer, or is a music composer; similar (but not identical) to
                        </textual><code class="po-atom e406 e406"><textual class="po-textual">http://musicbrainz.org/mm/mm-2.1#Artist</textual></code></para></listitem></varlistentry><varlistentry class="po-record e407 e407"><term class="po-block e408 e408"><link class="po-inline e409 e409" xlink:actuate="onRequest" xlink:href="http://dbpedia.org/ontology/associatedMusicalArtist" xlink:show="new" xlink:type="simple"><textual class="po-textual">dbpedia-owl:associatedMusicalArtist</textual></link></term><listitem class="po-container e410 e410"><para class="po-block e411 e411"><textual class="po-textual">both the subject and object of this predicate are musicians;
                        similar to </textual><code class="po-atom e412 e412"><textual class="po-textual">http://musicbrainz.org/ar/ar-1.0#collaboratedWith</textual></code></para></listitem></varlistentry><varlistentry class="po-record e413 e413"><term class="po-block e414 e414"><link class="po-inline e415 e415" xlink:actuate="onRequest" xlink:href="http://dbpedia.org/property/associatedActs" xlink:show="new" xlink:type="simple"><textual class="po-textual">dbpprop:associatedActs</textual></link></term><listitem class="po-container e416 e416"><para class="po-block e417 e417"><textual class="po-textual">this is mapped either to associatedBand (for subjects who are individual artists) or
                        associatedMusicalArtist (for bands)</textual></para></listitem></varlistentry><varlistentry class="po-record e418 e418"><term class="po-block e419 e419"><link class="po-inline e420 e420" xlink:actuate="onRequest" xlink:href="http://dbpedia.org/ontology/associatedBand" xlink:show="new" xlink:type="simple"><textual class="po-textual">dbpedia-owl:associatedBand</textual></link></term><listitem class="po-container e421 e421"><para class="po-block e422 e422"><textual class="po-textual">
                            OpenCyc: An element of </textual><link class="po-inline e423 e423" xlink:actuate="onRequest" xlink:href="http://sw.opencyc.org/concept/Mx4rvgEZGJwpEbGdrcN5Y29ycA" xlink:show="new" xlink:type="simple"><textual class="po-textual">Band_MusicGroup</textual></link><textual class="po-textual"> 
                            is a (small or large) group of musicians who play 
                            non-Classical music together on either a regular or intermittent schedule. 
                        </textual></para></listitem></varlistentry><varlistentry class="po-record e424 e424"><term class="po-block e425 e425"><link class="po-inline e426 e426" xlink:actuate="onRequest" xlink:href="http://dbpedia.org/ontology/genre" xlink:show="new" xlink:type="simple"><textual class="po-textual">dbpedia-owl:genre</textual></link></term><listitem class="po-container e427 e427"><para class="po-block e428 e428"><textual class="po-textual">a categorization of music into types that can be distinguished from other types of music;
                    can be applied to a musical artist, a band, an album, or individual songs.</textual></para></listitem></varlistentry></variablelist></section><section class="po-hcontainer e429 e429"><title class="po-block e430 e430"><textual class="po-textual">RDF Visualization Coding</textual></title><para class="po-block e431 e431"><textual class="po-textual">
                In order to better understand our result sets a form of visualization was 
                implemented as a custom Drupal module, written in PHP.  
                The front end was a simple HTML form with JQuery and AJAX for displaying the information.  
                Main processing was handled by the PHP module setup to intercept a post to a particular URL.  
                The PHP module first accesses the POST data and extracts the input search term which became the subject of the following SPARQL query:
             </textual><programlisting class="po-block e432 e432" xml:space="preserve"><textual class="po-textual">
                 
                 SELECT DISTINCT ?predicate ?object 
                 WHERE {&lt;" . $subject . "&gt; ?predicate ?object } 
                 ORDER BY ?predicate
                 
             </textual></programlisting><textual class="po-textual"> 
                where in our initial implementation </textual><code class="po-atom e433 e433"><textual class="po-textual">$subject</textual></code><textual class="po-textual"> is replaced by the musician subject requested by the user.
                XML output is specified by the request as the desired return format.
            </textual></para><para class="po-block e434 e434"><textual class="po-textual">
                The next step was to convert the XML results output from the query to the
                Graphviz input format </textual><link class="po-inline e435 e435" xlink:actuate="onRequest" xlink:href="http://www.graphviz.org/content/dot-language" xlink:show="new" xlink:type="simple"><textual class="po-textual">DOT language</textual></link><textual class="po-textual">. 
                Graphviz </textual><xref class="po-milestone e436 e436" linkend="graphvizHome"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> is open source graph visualization software that converts
                descriptions of graphs in a simple text language either to diagrams in various formats 
                (e.g., images, SVG, PDF, Postscript) or for display in an interactive graph browser.
            </textual></para><para class="po-block e437 e437"><textual class="po-textual">
                Using the </textual><code class="po-atom e438 e438"><textual class="po-textual">SimpleXMLElement</textual></code><textual class="po-textual"> class (from the PHP library), the code loops through the 
                results of the SPARQL query &lt;binding&gt; elements, accessing the ânameâ attribute of each one. 
                If the name attribute is âpredicateâ (from the ?predicate variable in our SPARQL query), 
                the predicate is obtained from the &lt;uri&gt; subelement.  
                If the name attribute is âobjectâ (from the ?object variable in the query), 
                the value is obtained from the &lt;uri&gt; subelement or the &lt;literal&gt; subelement, 
                depending on which is present in the XML output of the query.  
                If the &lt;uri&gt; subelement is found, we use the uri target for display, 
                but use the complete uri for the link, for use in future queries that the user can select.
                
            </textual></para><para class="po-block e439 e439"><textual class="po-textual"> The Graphviz text input file is constructed incrementally by adding Graphviz
                format input statements for each &lt;binding&gt; element. Since Graphviz defines
                links and colors in a separate section of the file, the XML &lt;binding&gt; elements
                are searched a second time to create the Graphviz </textual><code class="po-atom e440 e440"><textual class="po-textual">[label]</textual></code><textual class="po-textual"> entries. (To
                improve performance, we may do this in a single loop populating two sections of the
                Graphviz input at once.) A static set of predefined colors is defined in the module.
                As new predicates (i.e., artist, associatedMusicalArtist, associatedBand,
                musicComposer, producer, writer, etc.) are encountered, new colors are assigned by
                taking the next one from the list and associating it with the new predicate.
                Use of an associative array allows predicates of the same type to be assigned the same color.
                The Graphviz input string is completed when all the &lt;binding&gt; elements have
                been processed and a header and footer are added. 
            </textual></para><para class="po-block e441 e441"><textual class="po-textual"> The SVG data is created by sending the Graphviz input string to the
                graphviz_filter_process method available by means of a Graphviz filter module
                installed on the Drupal site. The SVG description is serialized by the filter
                module. At this point the return information is structured using the Drupal function
                    </textual><code class="po-atom e442 e442"><textual class="po-textual">drupal_json</textual></code><textual class="po-textual"> to create JSON formatted data. The SVG data and the XML
                data are each added as named elements of the JSON data and returned to the caller.
            </textual></para><para class="po-block e443 e443"><textual class="po-textual"> To use this module, an HTML page with a short embedded JQuery script invokes the
                module and displays the results. The HTML defines an input text field, a search
                button and two &lt;div&gt; elements which initially contain no content. They are
                given the IDs outputGraph and outputTable so content can be associated later using
                JavaScript (JQuery).The user interface is a simple text field into which the user
                types the name of the musician subject and then presses a search button which runs a
                JQuery function that posts the input field to the module previously described using
                AJAX. The AJAX method waits for the data to be returned from the module in JSON
                format. When the JSON data arrives, the returned SVG data and XML data are assigned
                to the &lt;div&gt; elements with the correct IDs. 
            </textual></para><para class="po-block e444 e444"><textual class="po-textual">The figure below shows one of the Graphviz digraphs.
                
            </textual><figure class="po-container e445 e445" xml:id="digraphFig" xreflabel="Graphviz SVG Digraph"><title class="po-block e446 e446"><textual class="po-textual">Sample Graphviz SVG Digraph (linebreaks added for readability)</textual></title><programlisting class="po-block e447 e447" xml:space="preserve"><textual class="po-textual">
                
digraph G {
/*
* @title = CLAPTON
* @formats = svg
*/
rankdir=LR
&amp;quot;http://dbpedia.org/resource/Eric_Clapton&amp;quot;-&amp;gt;&amp;quot;Unplugged_(Eric_Clapton_album)&amp;quot;[ label = &amp;quot;artist&amp;quot; ]
&amp;quot;http://dbpedia.org/resource/Eric_Clapton&amp;quot;-&amp;gt;&amp;quot;Just_One_Night_(album)&amp;quot;[ label = &amp;quot;artist&amp;quot; ]
&amp;quot;http://dbpedia.org/resource/Eric_Clapton&amp;quot;-&amp;gt;&amp;quot;Behind_the_Sun_(Eric_Clapton_album)&amp;quot;[ label = &amp;quot;artist&amp;quot; ]
&amp;quot;http://dbpedia.org/resource/Eric_Clapton&amp;quot;-&amp;gt;&amp;quot;Journeyman_(album)&amp;quot;[ label = &amp;quot;artist&amp;quot; ]
&amp;quot;http://dbpedia.org/resource/Eric_Clapton&amp;quot;-&amp;gt;&amp;quot;Back_Home_(Eric_Clapton_album)&amp;quot;[ label = &amp;quot;artist&amp;quot; ]
&amp;quot;http://dbpedia.org/resource/Eric_Clapton&amp;quot;-&amp;gt;&amp;quot;Reptile_(album)&amp;quot;[ label = &amp;quot;artist&amp;quot; ]
&amp;quot;http://dbpedia.org/resource/Eric_Clapton&amp;quot;-&amp;gt;&amp;quot;Live_in_Japan_(George_Harrison_album)&amp;quot;[ label = &amp;quot;artist&amp;quot; ]
&amp;quot;http://dbpedia.org/resource/Eric_Clapton&amp;quot;-&amp;gt;&amp;quot;August_(album)&amp;quot;[ label = &amp;quot;artist&amp;quot; ]
&amp;quot;http://dbpedia.org/resource/Eric_Clapton&amp;quot;-&amp;gt;&amp;quot;Steppin&amp;#039;_Out_(Eric_Clapton_album)&amp;quot;[ label = &amp;quot;artist&amp;quot; ]
&amp;quot;http://dbpedia.org/resource/Eric_Clapton&amp;quot;-&amp;gt;&amp;quot;Edge_of_Darkness_(soundtrack)&amp;quot;[ label = &amp;quot;artist&amp;quot; ]
&amp;quot;http://dbpedia.org/resource/Eric_Clapton&amp;quot;-&amp;gt;&amp;quot;Backless&amp;quot;[ label = &amp;quot;artist&amp;quot; ]
&amp;quot;http://dbpedia.org/resource/Eric_Clapton&amp;quot;-&amp;gt;&amp;quot;461_Ocean_Boulevard&amp;quot;[ label = &amp;quot;artist&amp;quot; ]
&amp;quot;http://dbpedia.org/resource/Eric_Clapton&amp;quot;-&amp;gt;&amp;quot;No_Reason_to_Cry&amp;quot;[ label = &amp;quot;artist&amp;quot; ]
&amp;quot;http://dbpedia.org/resource/Eric_Clapton&amp;quot;-&amp;gt;&amp;quot;Slowhand&amp;quot;[ label = &amp;quot;artist&amp;quot; ]
&amp;quot;http://dbpedia.org/resource/Eric_Clapton&amp;quot;-&amp;gt;&amp;quot;Pilgrim_(Eric_Clapton_album)&amp;quot;[ label = &amp;quot;artist&amp;quot; ]
&amp;quot;http://dbpedia.org/resource/Eric_Clapton&amp;quot;-&amp;gt;&amp;quot;From_the_Cradle&amp;quot;[ label = &amp;quot;artist&amp;quot; ]
&amp;quot;http://dbpedia.org/resource/Eric_Clapton&amp;quot;-&amp;gt;&amp;quot;One_More_Car,_One_More_Ride] &lt;/span&gt; &lt;/div&gt;
&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style="color: black;"&gt; 
[log] =&gt; [] &lt;/span&gt; &lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style="color: black;"&gt; 
[revision_timestamp] =&gt; [1300136539] &lt;/span&gt; &lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style="color: black;"&gt; 
[format] =&gt; [4] &lt;/span&gt; &lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style="color: black;"&gt; 
[name] =&gt; [wendy] &lt;/span&gt; &lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style="color: black;"&gt; 
[picture] =&gt; [] &lt;/span&gt; &lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style="color: black;"&gt; 
[data] =&gt; [a:1:{s:13:&amp;quot;form_build_id&amp;quot;;s:37:&amp;quot;form-18d527e00db0361bf4cea1b231176078&amp;quot;;}] &lt;/span&gt; &lt;/div&gt;
&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style="color: green;"&gt; 
[rdf] =&gt; array ( &lt;/span&gt; &lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style="color: green;"&gt; ) &lt;/span&gt; &lt;/div&gt;
&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style="color: green;"&gt; 
[path] =&gt; [content/claptonsvg] &lt;/span&gt; &lt;/div&gt;&lt;div&gt;&amp;nbsp;);&lt;/div&gt;&lt;/div&gt;&lt;/fieldset&gt;&lt;/div&gt;
&lt;div&gt;&lt;fieldset class="toggler"&gt;
&lt;legend&gt;&lt;strong&gt;&lt;a href="#"&gt;&lt;em&gt;view&lt;/em&gt; $node-&gt;112&lt;/a&gt;&lt;/strong&gt;&lt;/legend&gt;
&lt;div class="content" style="display: none;"&gt;&lt;div&gt;&amp;nbsp;$node = (&lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;span style="color: black;"&gt; 
[nid] =&gt; [112] &lt;/span&gt; &lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style="color: black;"&gt; 
[type] =&gt; [graph] &lt;/span&gt; &lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style="color: black;"&gt; 
[language] =&gt; [] &lt;/span&gt; &lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style="color: black;"&gt; 
[uid] =&gt; [3] &lt;/span&gt; &lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style="color: black;"&gt; 
[status] =&gt; [1] &lt;/span&gt; &lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style="color: black;"&gt;
[created] =&gt; [1300117673] &lt;/span&gt; &lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style="color: black;"&gt; 
[changed] =&gt; [1300136539] &lt;/span&gt; &lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style="color: black;"&gt; 
[comment] =&gt; [0] &lt;/span&gt; &lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style="color: black;"&gt; 
[promote] =&gt; [1] &lt;/span&gt; &lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style="color: black;"&gt; 
[moderate] =&gt; [0] &lt;/span&gt; &lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style="color: black;"&gt; 
[sticky] =&gt; [0] &lt;/span&gt; &lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style="color: black;"&gt; 
[tnid] =&gt; [0] &lt;/span&gt; &lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style="color: black;"&gt; 
[translate] =&gt; [0] &lt;/span&gt; &lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style="color: black;"&gt; 
[vid] =&gt; [112] &lt;/span&gt; &lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style="color: black;"&gt; 
[revision_uid] =&gt; [3] &lt;/span&gt; &lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style="color: black;"&gt; 
[title] =&gt; [claptonSvg] &lt;/span&gt; &lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style="color: black;"&gt;
[body] =&gt; [&amp;lt;div class=&amp;quot;graphviz graphviz-&amp;quot;svg&amp;gt;
&amp;lt;object type=&amp;quot;image/svg+xml&amp;quot;
data=&amp;quot;http://www.vocabutek.com/sites/default/files/graphviz/ca80a36e3d121526b2b93ec1f1e076a3.svg&amp;quot;&amp;gt;
  &amp;lt;embed type=&amp;quot;image/svg+xml&amp;quot; 
  src=&amp;quot;http://www.vocabutek.com/sites/default/files/graphviz/ca80a36e3d121526b2b93ec1f1e076a3.svg&amp;quot;
  pluginspage=&amp;quot;http://www.adobe.com/svg/viewer/install/&amp;quot; /&amp;gt;
&amp;lt;/object&amp;gt;
&amp;lt;/div&amp;gt;
]                
                
                </textual></programlisting></figure><textual class="po-textual">
                The SVG graphic produced by this Graphviz DOT file was too large to present here.
                See </textual><xref class="po-milestone e448 e448" linkend="vocabutek"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.
            </textual></para></section><section class="po-hcontainer e449 e449"><title class="po-block e450 e450"><textual class="po-textual">Interface Screenshots</textual></title><para class="po-block e451 e451"><textual class="po-textual">
                A sampling of our interface on </textual><xref class="po-milestone e452 e452" linkend="vocabutek"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> is presented in the following figures.
                As of this writing, the Graphviz visualization is expected to undergo changes.
                </textual><xref class="po-milestone e453 e453" linkend="qEntry"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> illustrates how we entered queries in the Drupal interface to test.
            </textual></para><figure class="po-container e454 e454" xml:id="qEntry"><title class="po-block e455 e455"><textual class="po-textual">Query Entry</textual></title><mediaobject class="po-container e456 e456"><imageobject class="po-container e457 e457"><imagedata class="po-meta e458 e458" fileref="../../../vol7/graphics/Sall01/Sall01-012.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e459 e459"><xref class="po-milestone e460 e460" linkend="qResult"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> displays the result of executing the query shown in </textual><xref class="po-milestone e461 e461" linkend="qEntry"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><figure class="po-container e462 e462" xml:id="qResult"><title class="po-block e463 e463"><textual class="po-textual">Query Result</textual></title><mediaobject class="po-container e464 e464"><imageobject class="po-container e465 e465"><imagedata class="po-meta e466 e466" fileref="../../../vol7/graphics/Sall01/Sall01-013.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e467 e467"><textual class="po-textual">We used the Drupal adminstration content management to organize queries into cascading menus, as shown
            in </textual><xref class="po-milestone e468 e468" linkend="qAdmin"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><figure class="po-container e469 e469" xml:id="qAdmin"><title class="po-block e470 e470"><textual class="po-textual">Query Administration - Menu Organization</textual></title><mediaobject class="po-container e471 e471"><imageobject class="po-container e472 e472"><imagedata class="po-meta e473 e473" fileref="../../../vol7/graphics/Sall01/Sall01-014.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e474 e474"><textual class="po-textual">The result of the query organzation is shown in </textual><xref class="po-milestone e475 e475" linkend="qMenus"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref></para><figure class="po-container e476 e476" xml:id="qMenus"><title class="po-block e477 e477"><textual class="po-textual">Cascading Menus</textual></title><mediaobject class="po-container e478 e478"><imageobject class="po-container e479 e479"><imagedata class="po-meta e480 e480" fileref="../../../vol7/graphics/Sall01/Sall01-015.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e481 e481"><xref class="po-milestone e482 e482" linkend="qVisualize"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> illustrates the interface for running a query to send to Graphviz for
            rendering in SVG. Pre-tested queries can be copy/pasted into a single string (topmost text field) or new
            queries can be entered. The subject defaults to Eric Clapton but any musician can be entered.</textual></para><figure class="po-container e483 e483" xml:id="qVisualize"><title class="po-block e484 e484"><textual class="po-textual">Visualize a Query - Copy/Paste or Enter</textual></title><mediaobject class="po-container e485 e485"><imageobject class="po-container e486 e486"><imagedata class="po-meta e487 e487" fileref="../../../vol7/graphics/Sall01/Sall01-016.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e488 e488"><textual class="po-textual">Finally, </textual><xref class="po-milestone e489 e489" linkend="qGraphviz"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> depicts part of the SVG resulting from a query, as 
            rendered by Graphviz. (This is one aspect we plan to improve over time.)</textual></para><figure class="po-container e490 e490" xml:id="qGraphviz"><title class="po-block e491 e491"><textual class="po-textual">Graphviz AssociatedBand SVG</textual></title><mediaobject class="po-container e492 e492"><imageobject class="po-container e493 e493"><imagedata class="po-meta e494 e494" fileref="../../../vol7/graphics/Sall01/Sall01-017.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure></section></section><section class="po-hcontainer e495 e495" xml:id="results" xreflabel="Challenges and Results"><title class="po-block e496 e496"><textual class="po-textual">Challenges and Results</textual></title><para class="po-block e497 e497"><textual class="po-textual">Our results were hampered by various anomalies or complications discovered in the data sources
            especially in terms of semantics. 
            In this section, we present some of the problems we encountered and either how they were solved or how they might be approached
            in the future.
        </textual></para><section class="po-hcontainer e498 e498"><title class="po-block e499 e499"><textual class="po-textual">Properties of a Musical Artist</textual></title><para class="po-block e500 e500"><textual class="po-textual">We next consider a different view of Clapton predicates.
                The query below returns properties with an object value that contains the string "Eric Clapton".</textual></para><para class="po-block e501 e501"><textual class="po-textual">
                </textual><figure class="po-container e502 e502"><title class="po-block e503 e503"><textual class="po-textual">Find Predicates for Which Clapton is (all or part of) the Object</textual></title><programlisting class="po-block e504 e504" xml:space="preserve"><textual class="po-textual">
                            
        SELECT DISTINCT ?predicate  WHERE  {
            ?s ?predicate ?o.
            FILTER regex(?o, "Eric Clapton").
        } ORDER BY ?predicate                       
                                                     
                      </textual></programlisting></figure><textual class="po-textual">
            </textual></para><para class="po-block e505 e505"><textual class="po-textual">
                Compare the result below to that presented in figure </textual><xref class="po-milestone e506 e506" linkend="ClaptonPropertiesV1"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.
                
                </textual><figure class="po-container e507 e507" xml:id="claptonPropertiesV2" xreflabel="Clapton's DBpedia Properties - Version 2"><title class="po-block e508 e508"><textual class="po-textual">Clapton's DBpedia Properties - Version 2 (44 Predicates)</textual></title><programlisting class="po-block e509 e509" xml:space="preserve"><textual class="po-textual">
                http://dbpedia.org/ontology/abstract
                http://dbpedia.org/ontology/alias
                http://dbpedia.org/property/after
                http://dbpedia.org/property/album
                http://dbpedia.org/property/alias
                http://dbpedia.org/property/allWriting
                http://dbpedia.org/property/altArtist
                http://dbpedia.org/property/artist
                http://dbpedia.org/property/associatedActs
                http://dbpedia.org/property/aux
                http://dbpedia.org/property/before
                http://dbpedia.org/property/caption
                http://dbpedia.org/property/chronology
                http://dbpedia.org/property/composer
                http://dbpedia.org/property/cover
                http://dbpedia.org/property/description
                http://dbpedia.org/property/extra
                http://dbpedia.org/property/founders
                http://dbpedia.org/property/fromAlbum
                http://dbpedia.org/property/img
                http://dbpedia.org/property/imgCapt
                http://dbpedia.org/property/label
                http://dbpedia.org/property/lastAlbum
                http://dbpedia.org/property/lyrics
                http://dbpedia.org/property/music
                http://dbpedia.org/property/musicalguests
                http://dbpedia.org/property/name
                http://dbpedia.org/property/namedAfter
                http://dbpedia.org/property/nextAlbum
                http://dbpedia.org/property/note
                http://dbpedia.org/property/notes
                http://dbpedia.org/property/partner
                http://dbpedia.org/property/pastMembers
                http://dbpedia.org/property/producer
                http://dbpedia.org/property/recordedBy
                http://dbpedia.org/property/shortDescription
                http://dbpedia.org/property/starring
                http://dbpedia.org/property/text
                http://dbpedia.org/property/thisAlbum
                http://dbpedia.org/property/title
                http://dbpedia.org/property/writer
                http://purl.org/dc/elements/1.1/title
                http://www.w3.org/2000/01/rdf-schema#label
                http://xmlns.com/foaf/0.1/name                           
                        </textual></programlisting></figure><textual class="po-textual">
            </textual></para><para class="po-block e510 e510"><textual class="po-textual">
                When we subsequently connected the DBpedia and MusicBrainz data sources as discussed in
                </textual><xref class="po-milestone e511 e511" linkend="bridgingSources"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> below, we obtained a third view of Clapton's properties,
                shown in figure </textual><xref class="po-milestone e512 e512" linkend="claptonPropertiesCombined"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.
            </textual></para></section><section class="po-hcontainer e513 e513"><title class="po-block e514 e514"><textual class="po-textual">Along Comes the Association</textual></title><para class="po-block e515 e515"><textual class="po-textual">
                The paramount requirement in determining an Eric Clapton Number is the ability to
                unambiguously identify those musicians with whom he directly worked. Originally we
                thought this would be rather straightforward. Properties that seemed relevant to
                making that determination included:
                </textual><itemizedlist class="po-table e516 e516"><listitem class="po-container e517 e517"><para class="po-block e518 e518"><code class="po-atom e519 e519"><textual class="po-textual">http://dbpedia.org/property/associatedActs</textual></code></para></listitem><listitem class="po-container e520 e520"><para class="po-block e521 e521"><code class="po-atom e522 e522"><textual class="po-textual">http://dbpedia.org/ontology/associatedBand</textual></code></para></listitem><listitem class="po-container e523 e523"><para class="po-block e524 e524"><code class="po-atom e525 e525"><textual class="po-textual">http://dbpedia.org/ontology/associatedMusicalArtist</textual></code></para></listitem><listitem class="po-container e526 e526"><para class="po-block e527 e527"><code class="po-atom e528 e528"><textual class="po-textual">http://dbpedia.org/property/starring</textual></code></para></listitem><listitem class="po-container e529 e529"><para class="po-block e530 e530"><code class="po-atom e531 e531"><textual class="po-textual">http://dbpedia.org/property/musicalguests</textual></code></para></listitem></itemizedlist><textual class="po-textual">
                The </textual><code class="po-atom e532 e532"><textual class="po-textual">musicalguests</textual></code><textual class="po-textual"> property was eliminated because it relates only to variety shows such as 
                "The Late Show". The </textual><code class="po-atom e533 e533"><textual class="po-textual">starring</textual></code><textual class="po-textual"> property also proved to be unreliable since multiple
                musicians might have all been considered stars of a performance but might not have played together.
                One case in point is the </textual><link class="po-inline e534 e534" xlink:actuate="onRequest" xlink:href="http://dbpedia.org/page/The_Concert_for_Bangladesh" xlink:show="new" xlink:type="simple"><textual class="po-textual">The Concert for Bangladesh</textual></link><textual class="po-textual">; 
                a query returned Klaus Voorman, Billy Preston,
                Bob Dylan, Eric Clapton, George Harrison, Leon Russell, Ravi Shankar, and Ringo Starr. While
                most of these performers did share the stage at one time during the concert, Ravi Shankar did not
                perform with the others. Furthermore, members of the band Badfinger did play with most of the
                others, but they were not returned by the query although we note that Badfinger is cited in the abstract of
                the Wikipedia article in the list of stars of the supergroup.  On the other hand, if we look at the infobox
                on the </textual><link class="po-inline e535 e535" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/Concert_For_Bangladesh" xlink:show="new" xlink:type="simple"><textual class="po-textual">concert's Wikipedia page</textual></link><textual class="po-textual">, 
                Badfinger is not listed as one of the stars.
            </textual></para><para class="po-block e536 e536"><textual class="po-textual">
                We considered the </textual><code class="po-atom e537 e537"><textual class="po-textual">associatedActs</textual></code><textual class="po-textual"> property since that is the term used in the infobox.
                As seen in </textual><xref class="po-milestone e538 e538" linkend="infoboxTable"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, the infobox on </textual><link class="po-inline e539 e539" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/Eric_Clapton" xlink:show="new" xlink:type="simple"><textual class="po-textual">Clapton's Wikipedia page</textual></link><textual class="po-textual"> 
                lists these associated acts:
                "The Yardbirds, John Mayall &amp; the Bluesbreakers, Powerhouse, Cream, Free Creek, The Dirty Mac,
                Blind Faith, J.J. Cale, The Plastic Ono Band, Delaney, Bonnie &amp; Friends, Derek and the Dominos".        
            </textual></para><para class="po-block e540 e540"><textual class="po-textual"> Our initial attempt to retrieve these artists was a little surprising. Our query
                was: </textual><programlisting class="po-block e541 e541" xml:space="preserve"><textual class="po-textual">
                    
        SELECT DISTINCT  ?who
        {  &lt;http://dbpedia.org/resource/Eric_Clapton&gt; &lt;http://dbpedia.org/property/associatedActs&gt; ?who.
        } ORDER BY ?who                    
                    
                </textual></programlisting><textual class="po-textual"> The result, shown below, was one long string
                </textual><footnote class="po-popup e542 e542"><para class="po-block e543 e543"><textual class="po-textual">Technically this is an object value comprised of a number of strings concatenated into a single field.</textual></para></footnote><textual class="po-textual">
                the contents of which represented a superset of the associated acts on the
                Wikipedia page. The additional associated acts are underlined below.
                </textual><programlisting class="po-block e544 e544" xml:space="preserve"><textual class="po-textual">  
        "The Yardbirds, John Mayall &amp; the Bluesbreakers, Powerhouse, Cream, Free Creek, Dire Straits, 
        </textual><emphasis class="po-inline e545 e545" role="under"><textual class="po-textual">George Harrison</textual></emphasis><textual class="po-textual">, The Dirty Mac, Blind Faith, </textual><emphasis class="po-inline e546 e546" role="under"><textual class="po-textual">Freddie King, Phil Collins</textual></emphasis><textual class="po-textual">, 
        J.J. Cale, The Plastic Ono Band, Delaney, Bonnie &amp; Friends, Derek and the Dominos, 
        </textual><emphasis class="po-inline e547 e547" role="under"><textual class="po-textual">T.D.F., Jeff Beck, Paul McCartney, Steve Winwood, B.B. King, The Beatles, The Band</textual></emphasis><textual class="po-textual">"@en
                </textual></programlisting><textual class="po-textual">
                It is unclear how there could be this disparity since the DBpedia data is derived
                from Wikipedia. Although several of the underlined performers played with Clapton,
                they were not in bands together (as far as we could determine). Furthermore, several
                of the bands listed on the original Wikipedia page are arguably not exactly bands in
                the general sense since they existed only briefly and for a specific purpose. The Dirty
                Mac were a supergroup consisting of Eric Clapton, John Lennon, Keith Richards and
                Mitch Mitchell that came together for The Rolling Stones' TV special. Free Creek was
                a band composed of many musical artists, including Eric Clapton, Jeff Beck, Keith
                Emerson, for one super-session album. Powerhouse only recorded a few songs, only three of
                which were released on a compilation album. These "bands" are certainly not
                on a par with the others in the infobox since they were never intended to exist beyond
                their stated purpose.
            </textual></para><para class="po-block e548 e548"><textual class="po-textual">
                Perhaps our interpretation of the </textual><code class="po-atom e549 e549"><textual class="po-textual">associatedActs</textual></code><textual class="po-textual"> property was incorrect? Further
                examination of the DBpedia and Wikipedia documentation pointed us to the 
                </textual><link class="po-inline e550 e550" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/Template:Infobox_musical_artist" xlink:show="new" xlink:type="simple"><textual class="po-textual">template for the infobox of musicial artists</textual></link><textual class="po-textual">, 
                shown on the right side of </textual><xref class="po-milestone e551 e551" linkend="infoboxTable"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> in the earlier Wikipedia section.       
                The template </textual><link class="po-inline e552 e552" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/Template:Infobox_musical_artist#associated_acts" xlink:show="new" xlink:type="simple"><textual class="po-textual">description of associated_acts</textual></link><textual class="po-textual">
                from Wikipedia follows. (Numbers have been added for ease of reference and 
                the text has been reformatted.)
                </textual><programlisting class="po-block e553 e553" xml:space="preserve"><textual class="po-textual">
            This field is for professional relationships with other musicians or bands
            that are significant and notable to this artist's career.                  
            This field can include, for example, any of the following:           
            a1) For individuals: groups of which he or she has been a member
            a2) Other acts with which this act has collaborated on multiple occasions, 
               or on an album, or toured with as a single collaboration act playing together
            a3) Groups which have spun off from this group
            a4) A group from which this group has spun off            
            Separate multiple entries with commas. 
            
            The following uses of this field should be avoided:           
            b1) Association of groups with members' solo careers
            b2) Groups with only one member in common
            b3) Association of producers, managers, etc. (who are themselves acts) 
               with other acts (unless the act essentially belongs to the producer, 
               as in the case of a studio orchestra formed by and working exclusively 
               with a producer)
            b4) One-time collaboration for a single, or on a single song
            b5) Groups that are merely similar
                </textual></programlisting><textual class="po-textual">
                Based on (a1), (a2) and (b4), it would seem that Powerhouse and arguably The Dirty Mac and Free Creek
                should be eliminated from the list of groups of which Clapton was a member.
                </textual><footnote class="po-popup e554 e554"><para class="po-block e555 e555"><textual class="po-textual">We believe this is indicative of the 
                        </textual><link class="po-inline e556 e556" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/Open_world_assumption" xlink:show="new" xlink:type="simple"><textual class="po-textual">open world assumption</textual></link><textual class="po-textual"> in formal logic.</textual></para></footnote><textual class="po-textual">
                
            </textual></para><para class="po-block e557 e557"><textual class="po-textual">
                Further investigation brought us to the numerous
                </textual><link class="po-inline e558 e558" xlink:actuate="onRequest" xlink:href="http://mappings.dbpedia.org/index.php?title=Special%3AAllPages&amp;from=&amp;to=&amp;namespace=204" xlink:show="new" xlink:type="simple"><textual class="po-textual">DBpedia Infobox Mappings</textual></link><textual class="po-textual">
                and specifically to the </textual><link class="po-inline e559 e559" xlink:actuate="onRequest" xlink:href=" http://mappings.dbpedia.org/index.php/Mapping:Infobox_musical_artist" xlink:show="new" xlink:type="simple"><textual class="po-textual">ontology mapping for the Infobox for Musical Artists</textual></link><textual class="po-textual">.
                The (infobox) template property </textual><code class="po-atom e560 e560"><textual class="po-textual">Associated_acts</textual></code><textual class="po-textual"> maps to two ontology properties,
                </textual><code class="po-atom e561 e561"><textual class="po-textual">associatedBand</textual></code><textual class="po-textual"> and </textual><code class="po-atom e562 e562"><textual class="po-textual">associatedMusicalArtist</textual></code><textual class="po-textual">, meaning that the infobox property
                can refer to either a group (case (a3) and (a4) above) or to an individual (cases (a1) and (a2)).
            </textual></para><para class="po-block e563 e563"><textual class="po-textual">
                Therefore we turned our attention to queries involving the ontology properties
                </textual><code class="po-atom e564 e564"><textual class="po-textual">associatedBand</textual></code><textual class="po-textual"> and </textual><code class="po-atom e565 e565"><textual class="po-textual">associatedMusicalArtist</textual></code><textual class="po-textual">. The following query
                asks for the bands in which Clapton was a member.
                </textual><programlisting class="po-block e566 e566" xml:space="preserve"><textual class="po-textual">
                    
        SELECT DISTINCT  ?who WHERE
        {&lt;http://dbpedia.org/resource/Eric_Clapton&gt; &lt;http://dbpedia.org/ontology/associatedBand&gt; ?who.
        } ORDER BY ?who                    
                    
                </textual></programlisting><textual class="po-textual">
                The results are shown below. Note that the results are nearly identical to the string superset 
                shown earlier. (The only exception is X-sample and a few band name variations.)
                The same results are obtained if the predicate is replaced by </textual><code class="po-atom e567 e567"><textual class="po-textual">http://dbpedia.org/ontology/associatedMusicalArtist</textual></code><textual class="po-textual">.
                </textual><programlisting class="po-block e568 e568" xml:space="preserve"><textual class="po-textual">
                    
        http://dbpedia.org/resource/B.B._King
        http://dbpedia.org/resource/Blind_Faith
        http://dbpedia.org/resource/Cream_%28band%29
        http://dbpedia.org/resource/Delaney,_Bonnie_&amp;_Friends
        http://dbpedia.org/resource/Derek_and_the_Dominos
        http://dbpedia.org/resource/Dire_Straits
        http://dbpedia.org/resource/Eric_Clapton%27s_Powerhouse
        http://dbpedia.org/resource/Freddie_King
        http://dbpedia.org/resource/Free_Creek_%28band%29
        http://dbpedia.org/resource/George_Harrison
        http://dbpedia.org/resource/J.J._Cale
        http://dbpedia.org/resource/Jeff_Beck
        http://dbpedia.org/resource/John_Mayall_&amp;_the_Bluesbreakers
        http://dbpedia.org/resource/Paul_McCartney
        http://dbpedia.org/resource/Phil_Collins
        http://dbpedia.org/resource/Steve_Winwood
        http://dbpedia.org/resource/The_Band
        http://dbpedia.org/resource/The_Beatles
        http://dbpedia.org/resource/The_Dirty_Mac
        http://dbpedia.org/resource/The_Plastic_Ono_Band
        http://dbpedia.org/resource/The_Yardbirds
        http://dbpedia.org/resource/X-sample                    
                    
                </textual></programlisting><textual class="po-textual">
            </textual></para><para class="po-block e569 e569"><textual class="po-textual">
                When we reverse the order of the subject and object, the results can be interpreted as musicians who have
                played on Clapton's albums. The query:
                </textual><programlisting class="po-block e570 e570" xml:space="preserve"><textual class="po-textual">
                    
      SELECT DISTINCT  ?who WHERE
      {?who &lt;http://dbpedia.org/ontology/associatedBand&gt; &lt;http://dbpedia.org/resource/Eric_Clapton&gt;.
      } ORDER BY ?who              
                    
                </textual></programlisting><textual class="po-textual">
                yields these results:
                </textual><programlisting class="po-block e571 e571" xml:space="preserve"><textual class="po-textual">
                    
        http://dbpedia.org/resource/Aashish_Khan
        http://dbpedia.org/resource/Alan_Clark_%28keyboardist%29
        http://dbpedia.org/resource/Albert_Lee
        http://dbpedia.org/resource/Andy_Fairweather_Low
        http://dbpedia.org/resource/B.B._King
        http://dbpedia.org/resource/Billy_Preston
        http://dbpedia.org/resource/Bobby_Keys
        http://dbpedia.org/resource/Chris_Stainton
        http://dbpedia.org/resource/Chuck_Leavell
        http://dbpedia.org/resource/Dave_Carlock
        http://dbpedia.org/resource/Dave_Mason
        http://dbpedia.org/resource/Doyle_Bramhall_II
        http://dbpedia.org/resource/Freddie_King
        http://dbpedia.org/resource/Ian_Wallace_%28drummer%29
        http://dbpedia.org/resource/Jamie_Oldaker
        http://dbpedia.org/resource/Jeff_Beck
        http://dbpedia.org/resource/Jesse_Ed_Davis
        http://dbpedia.org/resource/Jim_Gordon_%28musician%29
        http://dbpedia.org/resource/Leon_Russell
        http://dbpedia.org/resource/Mac_and_Katie_Kissoon
        http://dbpedia.org/resource/Marc_Benno
        http://dbpedia.org/resource/Marcella_Detroit
        http://dbpedia.org/resource/Nathan_East
        http://dbpedia.org/resource/Otis_Spann
        http://dbpedia.org/resource/P._P._Arnold
        http://dbpedia.org/resource/Phil_Collins
        http://dbpedia.org/resource/Phil_Palmer
        http://dbpedia.org/resource/Pino_Palladino
        http://dbpedia.org/resource/Plastic_Ono_Band
        http://dbpedia.org/resource/Ray_Cooper
        http://dbpedia.org/resource/Reverend_Zen
        http://dbpedia.org/resource/Richard_Cole
        http://dbpedia.org/resource/Rita_Coolidge
        http://dbpedia.org/resource/Rob_Fraboni
        http://dbpedia.org/resource/Sheryl_Crow
        http://dbpedia.org/resource/Steve_Ferrone
        http://dbpedia.org/resource/Steve_Jordan_%28musician%29
        http://dbpedia.org/resource/Stevie_Ray_Vaughan
        http://dbpedia.org/resource/The_Shaun_Murphy_Band
        http://dbpedia.org/resource/Yvonne_Elliman                    
                    
                </textual></programlisting><textual class="po-textual">
                The same results are obtained if the predicate is replaced by </textual><code class="po-atom e572 e572"><textual class="po-textual">http://dbpedia.org/ontology/associatedMusicalArtist</textual></code><textual class="po-textual">.
            </textual></para><para class="po-block e573 e573"><textual class="po-textual">
                How are </textual><code class="po-atom e574 e574"><textual class="po-textual">associatedBand</textual></code><textual class="po-textual">, </textual><code class="po-atom e575 e575"><textual class="po-textual">associatedMusicalArtist</textual></code><textual class="po-textual">, and </textual><code class="po-atom e576 e576"><textual class="po-textual">associatedActs</textual></code><textual class="po-textual"> related? 
                We believe the relationship varies across performers depending upon how individual collaborators interpreted the terms.
                Consider the following similar queries and their very different results, including many performers who are
                unfamiliar to all of the present authors.  
              </textual><figure class="po-container e577 e577"><title class="po-block e578 e578"><textual class="po-textual">Comparsion of associatedBand, associatedActs and associatedMusicalArtist</textual></title><programlisting class="po-block e579 e579" xml:space="preserve"><textual class="po-textual">
  
   SELECT  ?artist (count (?who) as ?count) {  
      ?artist  &lt;http://dbpedia.org/ontology/associatedBand&gt; ?who.         
   }  ORDER BY DESC (?count) LIMIT 10 
   
    http://dbpedia.org/resource/Stan_Levey                                            80
    http://dbpedia.org/resource/Frank_Fenter                                          46
    http://dbpedia.org/resource/Gary_Kellgren                                         42
    http://dbpedia.org/resource/Norman_Granz                                          42
    http://dbpedia.org/resource/Tim_&amp;_Bob                                             39
    http://dbpedia.org/resource/Frankie_Banali                                        38
    http://dbpedia.org/resource/Neil_Cooper_%28ROIR%29                                37
    http://dbpedia.org/resource/Ian_Wallace_%28drummer%29                             34
    http://dbpedia.org/resource/Tha_Dogg_Pound                                        34
    http://dbpedia.org/resource/DonGuralEsko                                          31   
    ------------------------------------------------------------------------------------

   SELECT  ?artist (count (?who) as ?count) {  
      ?artist  &lt;http://dbpedia.org/property/associatedActs&gt; ?who. 
   }  ORDER BY DESC (?count) LIMIT 10   
   
    http://dbpedia.org/resource/Gary_Kellgren                                         42
    http://dbpedia.org/resource/Johnny_Goudie                                         36
    http://dbpedia.org/resource/Even_Steven_Levee                                     33
    http://dbpedia.org/resource/Shelter_%28band%29                                    29
    http://dbpedia.org/resource/Emmylou_Harris                                        29
    http://dbpedia.org/resource/Conny_Plank                                           27
    http://dbpedia.org/resource/Exit-13                                               27
    http://dbpedia.org/resource/K.Will                                                27
    http://dbpedia.org/resource/Warren_Zevon                                          27
    http://dbpedia.org/resource/Damian_LeGassick                                      25  
    ------------------------------------------------------------------------------------

   SELECT ?person (count(?person) as ?count) {
      ?artist &lt;http://dbpedia.org/ontology/associatedMusicalArtist&gt; ?person.
   } ORDER BY DESC (?count) LIMIT 10

    http://dbpedia.org/resource/Snoop_Dogg                                            81
    http://dbpedia.org/resource/Ozzy_Osbourne                                         63
    http://dbpedia.org/resource/Wu-Tang_Clan                                          56
    http://dbpedia.org/resource/Dr._Dre                                               52
    http://dbpedia.org/resource/Guns_N%27_Roses                                       52
    http://dbpedia.org/resource/Lil_Wayne                                             51
    http://dbpedia.org/resource/Morning_Musume                                        50
    http://dbpedia.org/resource/Jay-Z                                                 50
    http://dbpedia.org/resource/Bob_Dylan                                             48
    http://dbpedia.org/resource/Miles_Davis                                           48
  
              </textual></programlisting></figure><textual class="po-textual">
            </textual></para></section><section class="po-hcontainer e580 e580" xml:id="bridgingSources" xreflabel="Bridging Data Sources"><title class="po-block e581 e581"><textual class="po-textual">Bridging the Data Sources</textual></title><para class="po-block e582 e582"><textual class="po-textual">
                In order to address some of the more difficult questions or compare results between data sources,
                we needed a way to combine the RDF datasets, or at least to connect musical artist identifiers
                across DBpedia and MusicBrainz. 
            </textual></para><para class="po-block e583 e583"><textual class="po-textual"> We employed the OpenLink Virtuoso Universal Server </textual><xref class="po-milestone e584 e584" linkend="virtuoso"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> as
                an RDF store. While there are other very good RDF stores such as </textual><link class="po-inline e585 e585" xlink:actuate="onRequest" xlink:href="http://4store.org/" xlink:show="new" xlink:type="simple"><textual class="po-textual">4store</textual></link><textual class="po-textual">, the Virtuoso Universal Server </textual><footnote class="po-popup e586 e586"><para class="po-block e587 e587"><textual class="po-textual">The OpenLink Virtuoso Universal Server supports relational data
                        management, XML and RDF data management, free text content management with
                        full text indexing and web services, and functions as a document web server,
                        linked data server and web application server.</textual></para></footnote><textual class="po-textual"> is compelling because it supports reasoning. </textual><link class="po-inline e588 e588" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/Backward_chaining" xlink:show="new" xlink:type="simple"><textual class="po-textual">Backward-chaining
                    reasoning</textual></link><textual class="po-textual"> is the ability to derive new information based on existing
                information at run time. This contrasts with forward chaining reasoning in which derived information
                is expressed explicitly. An example of forward chaining reasoning would be creating
                and adding triples that represented new information that was inherent in information the
                datastore already contained. 
                </textual><footnote class="po-popup e589 e589"><para class="po-block e590 e590"><textual class="po-textual">"Inference is moreso the means or mechanisms by which reasoning
                        occurs. Reasoning is the 'goal' whereas inferencing is the
                        'implementation'". -- From </textual><link class="po-inline e591 e591" xlink:actuate="onRequest" xlink:href="http://answers.semanticweb.com/questions/3036/whats-the-difference-between-reasoning-and-inferencing" xlink:show="new" xlink:type="simple"><textual class="po-textual">answers.semanticweb.com</textual></link><textual class="po-textual">. </textual></para></footnote><textual class="po-textual"> 
                There are two major costs to leveraging backward chaining reasoning. The
                first and foremost cost is that derived information is created each time it is needed; it is therefore quite likely
                that the same information is derived repeatedly at run time. The advantage, however,
                is that the derived information does not take up any space in the database. The
                second requirement for leveraging backward chaining reasoning in Virtuoso is the use
                of specific predicates, none of which were available in the native datasets with
                which we worked. 
            </textual></para><para class="po-block e592 e592"><textual class="po-textual"> 
                Given that the IRI for Eric Clapton was different in DBPedia and MusicBrainz, we used forward
                chaining to express the relatedness between these two IRIâs and thereby facilitating
                backward chaining reasoning in queries. We used the SPARQL
                </textual><code class="po-atom e593 e593"><textual class="po-textual">INSERT</textual></code><textual class="po-textual"> directive to create new statements which made
                assertions explicit as a forward-chaining reasoning strategy. Specifically, the
                assertions we added leveraged the </textual><code class="po-atom e594 e594"><textual class="po-textual">owl:sameAs</textual></code><footnote class="po-popup e595 e595"><para class="po-block e596 e596"><link class="po-inline e597 e597" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/owl-ref/#sameAs-def" xlink:show="new" xlink:type="simple"><textual class="po-textual">owl:sameAs</textual></link><textual class="po-textual"> is often used in establishing mappings between two or more ontologies.</textual></para></footnote><textual class="po-textual"> predicates 
                </textual><link class="po-inline e598 e598" xlink:actuate="onRequest" xlink:href="http://docs.openlinksw.com/virtuoso/rdfsparqlrule.html#rdfsameas" xlink:show="new" xlink:type="simple"><textual class="po-textual">Virtuoso defines</textual></link><textual class="po-textual"> to empower
                reasoning. The
                following query was used to create an assertion stating that the DBpedia Subject IRI of type
                </textual><code class="po-atom e599 e599"><textual class="po-textual">http://dbpedia.org/ontology/MusicalArtist</textual></code><textual class="po-textual"> corresponds to the MusicBrainz Subject IRIs of type
                </textual><code class="po-atom e600 e600"><textual class="po-textual">http://musicbrainz.org/mm/mm-2.1#Artist</textual></code><textual class="po-textual"> whenever the DBpedia
                </textual><code class="po-atom e601 e601"><textual class="po-textual">rdf-schema#label</textual></code><textual class="po-textual"> matches the MusicBrainz </textual><code class="po-atom e602 e602"><textual class="po-textual">dc:title</textual></code><textual class="po-textual">
                exactly. </textual><programlisting class="po-block e603 e603" xml:space="preserve"><textual class="po-textual">
                    
            SPARQL INSERT in GRAPH inference/sameAs&gt; 
            {?mbiri &lt;http://www.w3.org/2002/07/owl#sameAs&gt; ?s} 
            WHERE { 
            ?s &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/MusicalArtist&gt;. 
            ?s &lt;http://www.w3.org/2000/01/rdf-schema#label&gt; ?dbpedianame. 
            ?mbiri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://musicbrainz.org/mm/mm-2.1#Artist&gt;. 
            ?mbiri &lt;http://purl.org/dc/elements/1.1/title&gt; ?mbname. 
            FILTER (str(?mbname) = str (?dbpedianame)) };    
                    
                </textual></programlisting><textual class="po-textual">
                This query resulted in the addition of 16,029 </textual><code class="po-atom e604 e604"><textual class="po-textual">owl:sameAs</textual></code><textual class="po-textual"> assertions to our datastore which took 
                109,692,665 msec (30.47 hours) to complete.
            </textual></para><para class="po-block e605 e605"><textual class="po-textual">Since neither these assertions nor the DBpedia and MusicBrainz assertions were in
                the same </textual><code class="po-atom e606 e606"><textual class="po-textual">NAMED GRAPH</textual></code><textual class="po-textual">, it was necessary to use another unique
                capability of the Virtuoso Universal Server called </textual><code class="po-atom e607 e607"><textual class="po-textual">GRAPH GROUPs</textual></code><textual class="po-textual">. 
                This enabled us to refer to multiple </textual><code class="po-atom e608 e608"><textual class="po-textual">NAMED GRAPHs</textual></code><textual class="po-textual"> as if they were one. First we
                created a </textual><code class="po-atom e609 e609"><textual class="po-textual">GRAPH GROUP</textual></code><textual class="po-textual"> with the following command: 
            </textual></para><programlisting class="po-block e610 e610" xml:space="preserve"><textual class="po-textual">
            DB.DBA.RDF_GRAPH_GROUP_CREATE ('http://group.dbpedia.inference','1'); 
            </textual></programlisting><para class="po-block e611 e611"><textual class="po-textual">
                Then we placed the previously created </textual><code class="po-atom e612 e612"><textual class="po-textual">owl:sameAs</textual></code><textual class="po-textual"> assertions, as well as
                the </textual><code class="po-atom e613 e613"><textual class="po-textual">NAMED GRAPHs</textual></code><textual class="po-textual"> containing DBpedia assertions and the MusicBrainz assertions 
                into the </textual><code class="po-atom e614 e614"><textual class="po-textual">GRAPH GROUP</textual></code><textual class="po-textual">:   
            </textual></para><programlisting class="po-block e615 e615" xml:space="preserve"><textual class="po-textual">
            DB.DBA.RDF_GRAPH_GROUP_INS('http://group.dbpedia.inference' , 'inference/sameAs'); 
            DB.DBA.RDF_GRAPH_GROUP_INS('http://group.dbpedia.inference' , 'http://mytest.com');
            DB.DBA.RDF_GRAPH_GROUP_INS('http://group.dbpedia.inference' , 'http://musicbrainz.com');                
            </textual></programlisting><para class="po-block e616 e616"><textual class="po-textual">
                To demonstrate that the </textual><code class="po-atom e617 e617"><textual class="po-textual">owl:sameAs</textual></code><textual class="po-textual"> assertions we are indeed
                intersecting the two datasets, consider the following query that determines the properties
                connecting Eric Clapton to resources. Compare this to the figure
                </textual><xref class="po-milestone e618 e618" linkend="ClaptonPropertiesV1"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.
            </textual></para><programlisting class="po-block e619 e619" xml:space="preserve"><textual class="po-textual">
                
            DEFINE input:same-as "yes" 
            SELECT DISTINCT ?predicate  
            FROM &lt;http://group.dbpedia.inference&gt; WHERE 
             {  
             ?s ?predicate &lt;http://dbpedia.org/resource/Eric_Clapton&gt;.             
             } ORDER BY ?predicate 
                
            </textual></programlisting><para class="po-block e620 e620"><textual class="po-textual">
                The result of this query is 30 properties which is 7 more than the result when querying only DBpedia,
                6 of which come from MusicBrainz. Compare this result to the previous query results shown in
                figures </textual><xref class="po-milestone e621 e621" linkend="ClaptonPropertiesV1"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and </textual><xref class="po-milestone e622 e622" linkend="claptonPropertiesV2"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.
            </textual></para><figure class="po-container e623 e623" xml:id="claptonPropertiesCombined" xreflabel="Clapton's Properties Combined"><title class="po-block e624 e624"><textual class="po-textual">Clapton's Properties in Combined Datastore (DBpedia and MusicBrainz) (30 predicates)</textual></title><programlisting class="po-block e625 e625" xml:space="preserve"><textual class="po-textual">
                
            http://dbpedia.org/ontology/artist
            http://dbpedia.org/ontology/associatedBand
            http://dbpedia.org/ontology/associatedMusicalArtist
            http://dbpedia.org/ontology/composer
            http://dbpedia.org/ontology/musicComposer
            http://dbpedia.org/ontology/musicalArtist
            http://dbpedia.org/ontology/musicalBand
            http://dbpedia.org/ontology/partner
            http://dbpedia.org/ontology/producer
            http://dbpedia.org/ontology/spouse
            http://dbpedia.org/ontology/starring
            http://dbpedia.org/ontology/wikiPageDisambiguates
            http://dbpedia.org/ontology/writer
            http://dbpedia.org/property/associatedActs
            http://dbpedia.org/property/before
            http://dbpedia.org/property/currentMembers
            http://dbpedia.org/property/music
            http://dbpedia.org/property/pastMembers
            http://dbpedia.org/property/producer
            http://dbpedia.org/property/spouse
            http://dbpedia.org/property/starring
            http://dbpedia.org/property/writer
            http://musicbrainz.org/ar/ar-1.0#composer
            http://musicbrainz.org/ar/ar-1.0#instrument
            http://musicbrainz.org/ar/ar-1.0#performer
            http://musicbrainz.org/ar/ar-1.0#producer
            http://musicbrainz.org/ar/ar-1.0#toArtist
            http://musicbrainz.org/ar/ar-1.0#vocal
            http://purl.org/dc/elements/1.1/creator
            http://www.w3.org/2002/07/owl#sameAs                
                
            </textual></programlisting></figure><para class="po-block e626 e626"><textual class="po-textual">
                Any queries that benefit from using a single IRI to refer to the same artist in both datasets 
                becomes available by adding </textual><code class="po-atom e627 e627"><textual class="po-textual">DEFINE input:same-as "yes"</textual></code><textual class="po-textual"> before our result clause.
            </textual></para><para class="po-block e628 e628"><textual class="po-textual">
                The same 30 results can be obtained with the </textual><code class="po-atom e629 e629"><textual class="po-textual">UNION</textual></code><textual class="po-textual"> query below. However, this query
                requires knowledge of the GUID-based MusicBrainz IRI for each musician of interest,
                whereas the above query takes advantage of the previously established
                correspondence between the methods of artist identification in DBpedia and MusicBrainz.
                Therefore, the </textual><code class="po-atom e630 e630"><textual class="po-textual">owl:sameAs</textual></code><textual class="po-textual"> approach is clearly the better solution.
            </textual></para><programlisting class="po-block e631 e631" xml:space="preserve"><textual class="po-textual">
                
            SELECT DISTINCT ?predicate WHERE {
             { 
             ?s ?predicate &lt;http://dbpedia.org/resource/Eric_Clapton&gt;.             
             } 
            UNION
             { 
             ?s ?predicate &lt;http://musicbrainz.org/mm-2.1/artist/618b6900-0618-4f1e-b835-bccb17f84294&gt;.             
             } 
            } ORDER BY ?predicate                
                                
            </textual></programlisting></section><section class="po-hcontainer e632 e632"><title class="po-block e633 e633"><textual class="po-textual">You Say It's Your Birthday?</textual></title><para class="po-block e634 e634"><textual class="po-textual"> Given the ability to bridge the two datasets, we can now issue queries that
                compare data values across the sets. The query below obtains the birthdates for each
                musical artist in both sources and returns the discrepancies. </textual></para><programlisting class="po-block e635 e635" xml:space="preserve"><textual class="po-textual">
                
         DEFINE input:same-as "yes" select ?musician ?DBPdate  ?MBdate 
         {
          ?s &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/MusicalArtist&gt;. 
          ?s &lt;http://dbpedia.org/ontology/birthDate&gt; ?DBPdate . 
          ?s &lt;http://musicbrainz.org/mm/mm-2.1#beginDate&gt; ?MBdate. 
          ?s &lt;http://www.w3.org/2000/01/rdf-schema#label&gt; ?musician. 
          FILTER (str(?MBdate) != str (?DBPdate))
         } 
        ORDER BY ?musician               
                
            </textual></programlisting><para class="po-block e636 e636"><textual class="po-textual"> A sampling of the nearly </textual><emphasis class="po-inline e637 e637" role="ital"><textual class="po-textual">one thousand</textual></emphasis><textual class="po-textual"> mismatched
                birthdates follows. Typically the differences are one day, one month, or one year,
                but note several major differences. We have yet to independently verify all of the
                discrepancies, but we note that the birthday of George Harrison is incorrect in
                MusicBrainz. In fact, MusicBrainz often uses "00-00" dates indicating only the year
                is known. It is probably safe to conjecture that Courtney Love is not 21 and Five
                For Fighting (singer-songwriter John Ondrasik) is not 14, so these birthdates are
                more likely when their musical careers started. Wikipedia confirms that 1997 is indeed
                the first "year active" for Five For Fighting, but Love's initial "year
                active" is 1982. Clearly the interpretation of MusicBrainz's </textual><code class="po-atom e638 e638"><textual class="po-textual">beginDate</textual></code><textual class="po-textual"> property
                varies across artists.
                Our tentative conclusion is that DBpedia is more accurate than
                MusicBrainz with respect to birthdates. </textual></para><programlisting class="po-block e639 e639" xml:space="preserve"><textual class="po-textual">
            musician            DBPdate 	 MBdate
        50 Cent                1975-07-06 	1976-07-06
        Andy Partridge         1953-11-11 	1953-12-11
        Astrud Gilberto        1940-03-29 	1940-03-30
        Blind Willie Johnson   1897-01-22 	1902-00-00     [5 year difference]
        Blind Willie McTell    1898-05-05 	1901-05-05     [3 year difference]
        Carl Perkins           1932-04-09 	1928-08-16     [4 year difference]
        Courtney Love          1964-07-09 	1990-00-00     [extremely different!]
        David Lee Roth         1954-10-10 	1955-10-10
        Eddie Van Halen        1955-01-26 	1956-01-26
        Edgar Winter           1947-12-28 	1946-12-28
        Five for Fighting      1965-01-07 	1997-00-00     [extremely different!]
        Frankie Valli          1934-05-03 	1937-05-03     [3 year difference]
        George Harrison        1943-02-25 	1943-02-24
        Jennifer Lopez         1969-07-24 	1970-07-24
            </textual></programlisting></section><section class="po-hcontainer e640 e640"><title class="po-block e641 e641"><textual class="po-textual">Top Record Labels</textual></title><para class="po-block e642 e642"><textual class="po-textual">
                One of our original questions was "Is there a predominant record label in the music world?"
                The following query answers that question.
            </textual></para><programlisting class="po-block e643 e643" xml:space="preserve"><textual class="po-textual">
               
          SELECT ?label (count(?label) as ?count)
           {
           ?artist &lt;http://dbpedia.org/ontology/recordLabel&gt; ?label
           } 
          ORDER BY DESC (?count) LIMIT 20      
                
            </textual></programlisting><para class="po-block e644 e644"><textual class="po-textual">The results are shown below.</textual></para><programlisting class="po-block e645 e645" xml:space="preserve"><textual class="po-textual">
                
        http://dbpedia.org/resource/Columbia_Records         5762
        http://dbpedia.org/resource/EMI                      4215
        http://dbpedia.org/resource/Warner_Bros._Records     3518
        http://dbpedia.org/resource/Epic_Records             3509
        http://dbpedia.org/resource/Atlantic_Records         3502
        http://dbpedia.org/resource/Capitol_Records          3264
        http://dbpedia.org/resource/Virgin_Records           2926
        http://dbpedia.org/resource/RCA_Records              2590
        http://dbpedia.org/resource/MCA_Records              1975
        http://dbpedia.org/resource/Mercury_Records          1919
        http://dbpedia.org/resource/Island_Records           1800
        http://dbpedia.org/resource/A&amp;M_Records              1697
        http://dbpedia.org/resource/Sony_BMG                 1513
        http://dbpedia.org/resource/Elektra_Records          1480
        http://dbpedia.org/resource/Reprise_Records          1406
        http://dbpedia.org/resource/Arista_Records           1382
        http://dbpedia.org/resource/Geffen_Records           1372
        http://dbpedia.org/resource/Universal_Music_Group    1339
        http://dbpedia.org/resource/Universal_Records        1277
        http://dbpedia.org/resource/Interscope_Records       1226  
            
            </textual></programlisting></section><section class="po-hcontainer e646 e646" xml:id="genres" xreflabel="Musical Genres"><title class="po-block e647 e647"><textual class="po-textual">Musical Genres</textual></title><para class="po-block e648 e648"><textual class="po-textual">In order to determine which artist is most influential in rock music, we needed to be able to
                reliably specify the genre of interest. However, formulating queries involving genres is more difficult than it would seem. DBpedia (and presumably Wikipedia)
            defines 2,887 musical genres of which 330 contain "rock" in their label. Rock-related genres literally run the gamut
            from A to Z -- Aboriginal_rock to Zulu_rock (really!). To our surprise, the single concept of "rock and roll music"
            is represented by 18 distinctly different IRIs, as determined by the following query.
            </textual><footnote class="po-popup e649 e649"><para class="po-block e650 e650"><textual class="po-textual">Actually, there is a 19th IRI if the query is not constrained to require the string "roll": 
                    </textual><link class="po-inline e651 e651" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://dbpedia.org/resource/Rock_music</textual></link><textual class="po-textual">. This link redirects to a page which among other things lists 
                    many subgenres of rock.
                </textual></para></footnote><textual class="po-textual">
            </textual></para><programlisting class="po-block e652 e652" xml:space="preserve"><textual class="po-textual">
                
            SELECT DISTINCT (?genre)
              {
              ?album &lt;http://dbpedia.org/ontology/genre&gt; ?genre.
              ?album &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Album&gt;.
              FILTER regex (?genre, "[Rr]ock") .
              FILTER regex (?genre, "[Rr]oll") .
              }
             ORDER BY ?genre                
                
            </textual></programlisting><para class="po-block e653 e653"><textual class="po-textual">The variants of "rock and roll" are:</textual></para><programlisting class="po-block e654 e654" xml:space="preserve"><textual class="po-textual">
                
            http://dbpedia.org/resource/British_Rock_and_Roll
            http://dbpedia.org/resource/Real_Rock_and_Roll
            http://dbpedia.org/resource/Rock%27n%27Roll
            http://dbpedia.org/resource/Rock%27n%27roll
            http://dbpedia.org/resource/Rock%27n_roll
            http://dbpedia.org/resource/Rock_%27N%27_Roll
            http://dbpedia.org/resource/Rock_%27n%27_Roll
            http://dbpedia.org/resource/Rock_%27n%27_roll
            http://dbpedia.org/resource/Rock_%27n_Roll
            http://dbpedia.org/resource/Rock_&amp;_Roll
            http://dbpedia.org/resource/Rock_&amp;_roll
            http://dbpedia.org/resource/Rock_N%27_Roll
            http://dbpedia.org/resource/Rock_and_Roll
            http://dbpedia.org/resource/Rock_and_Roll_music
            http://dbpedia.org/resource/Rock_and_roll
            http://dbpedia.org/resource/Rock_n%27_Roll
            http://dbpedia.org/resource/Rock_n_Roll
            http://dbpedia.org/resource/Spanish_language_rock_and_roll               
                
            </textual></programlisting><para class="po-block e655 e655"><textual class="po-textual">The first and last results above could be considered outliers since they are 
                narrowings of the generic rock and roll classification.</textual></para><para class="po-block e656 e656"><textual class="po-textual">
                Although Clapton is identified by only a few genres on Wikipedia, his albums fall into 18 genres,
                as determined by the query:
            </textual></para><programlisting class="po-block e657 e657" xml:space="preserve"><textual class="po-textual">
                
            SELECT DISTINCT (?genre) WHERE 
            	{
            	?s &lt;http://dbpedia.org/ontology/artist&gt; &lt;http://dbpedia.org/resource/Eric_Clapton&gt;.
            	?s &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Album&gt;.
            	?s &lt;http://dbpedia.org/ontology/genre&gt; ?genre
            	}
            ORDER BY ?genre                
                
            </textual></programlisting><para class="po-block e658 e658"><textual class="po-textual">Genres associated with Clapton's albums follow. Note four variants each for the 
                concepts "blues-rock" and "rock and roll".</textual></para><programlisting class="po-block e659 e659" xml:space="preserve"><textual class="po-textual">
                
            http://dbpedia.org/resource/Acoustic_blues
            http://dbpedia.org/resource/Blues
            http://dbpedia.org/resource/Blues-Rock
            http://dbpedia.org/resource/Blues-rock
            http://dbpedia.org/resource/Blues_Rock
            http://dbpedia.org/resource/Blues_rock
            http://dbpedia.org/resource/British_Blues
            http://dbpedia.org/resource/Electric_blues
            http://dbpedia.org/resource/Folk_music
            http://dbpedia.org/resource/Jazz
            http://dbpedia.org/resource/Orchestral
            http://dbpedia.org/resource/Pop_music
            http://dbpedia.org/resource/Reggae
            http://dbpedia.org/resource/Rock_%28music%29
            http://dbpedia.org/resource/Rock_and_Roll
            http://dbpedia.org/resource/Rock_and_roll
            http://dbpedia.org/resource/Rock_music
            http://dbpedia.org/resource/Soul_blues    
                 
            </textual></programlisting><para class="po-block e660 e660"><textual class="po-textual">For any given album, more than one genre may apply. For example, the 1975 album 
                "There's One in Every Crowd" is classified as both reggae and blues-rock.
            For those wondering which Clapton album could possibly be considered jazz or orchestral, that distinction
            belongs to the first "Lethal Weapon" soundtrack, which is also designated as blues. 
            However, the genre query above does not capture all genres associated with Clapton. For example,
            the genre for "Lethal Weapon 3" soundtrack is simply "soundtrack".
            </textual><textual class="po-textual">
            </textual></para><para class="po-block e661 e661"><textual class="po-textual">
            If we wish to display all of Clapton's blues and rock albums, we could use a query such as:
            </textual></para><programlisting class="po-block e662 e662" xml:space="preserve"><textual class="po-textual">
                
            SELECT DISTINCT (?genre) ?album WHERE 
            	{
            	?album &lt;http://dbpedia.org/ontology/artist&gt; &lt;http://dbpedia.org/resource/Eric_Clapton&gt;.
            	?album &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Album&gt;.
            	?album &lt;http://dbpedia.org/ontology/genre&gt; ?genre .
                FILTER ( regex (?genre, "[Rr]ock") ||  regex (?genre, "[Bb]lues"))
            	}
            ORDER BY ?album                
                
            </textual></programlisting><para class="po-block e663 e663"><textual class="po-textual">
                To display all of Clapton's albums and their associated genre(s), we used the following query:
            </textual></para><programlisting class="po-block e664 e664" xml:space="preserve"><textual class="po-textual">
                
            SELECT ?album ?genre WHERE 
            	{
            	?album &lt;http://dbpedia.org/ontology/artist&gt; &lt;http://dbpedia.org/resource/Eric_Clapton&gt;.
            	?album &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Album&gt;.
            	?album &lt;http://dbpedia.org/ontology/genre&gt; ?genre .
            	}
            ORDER BY ?album                
                
            </textual></programlisting><para class="po-block e665 e665"><textual class="po-textual">
                The result including albums with several genres listed follows. (The common portion of the IRI,
                </textual><code class="po-atom e666 e666"><textual class="po-textual">http://dbpedia.org/resource/</textual></code><textual class="po-textual"> has been removed from each resource to make the results 
                more readable.)
            </textual></para><programlisting class="po-block e667 e667" xml:space="preserve"><textual class="po-textual">
                
                                 album                                         genre
            24_Nights                                                       Rock_music
            24_Nights                                                       Blues
            461_Ocean_Boulevard                                             Blues-rock
            Another_Ticket                                                  Blues-rock
            August_%28album%29                                              Rock_music
            August_%28album%29                                              Pop_music
            Back_Home_%28Eric_Clapton_album%29                              Blues-Rock
            Backless                                                        Rock_and_roll
            Backtrackin%27                                                  Rock_%28music%29
            Behind_the_Sun_%28Eric_Clapton_album%29                         Rock_music
            Behind_the_Sun_%28Eric_Clapton_album%29                         Pop_music
            Blues_%28Eric_Clapton_album%29                                  Blues-rock
            Clapton_%282010_album%29                                        Blues-rock
            Clapton_Chronicles:_The_Best_of_Eric_Clapton                    Rock_and_Roll
            Crossroads_%28Eric_Clapton_album%29                             Blues-rock
            Crossroads_2:_Live_in_the_Seventies                             Blues-rock
            E._C._Was_Here                                                  Blues-rock
            Eric_Clapton%27s_Rainbow_Concert                                Blues-rock
            Eric_Clapton_%28album%29                                        Rock_and_Roll
            From_the_Cradle                                                 Blues
            From_the_Cradle                                                 Electric_blues
            From_the_Cradle                                                 Soul_blues
            From_the_Cradle                                                 British_Blues
            Guitar_Boogie                                                   Rock_and_roll
            Guitar_Boogie                                                   Blues-rock
            Journeyman_%28album%29                                          Blues-rock
            Just_One_Night_%28album%29                                      Blues-rock
            Lethal_Weapon_%28soundtrack%29                                  Jazz
            Lethal_Weapon_%28soundtrack%29                                  Blues
            Lethal_Weapon_%28soundtrack%29                                  Orchestral
            Live_in_Hyde_Park_%28Eric_Clapton_album%29                      Rock_music
            Live_in_Hyde_Park_%28Eric_Clapton_album%29                      Blues
            Live_in_Japan_%28George_Harrison_album%29                       Rock_and_roll
            Me_and_Mr._Johnson                                              Blues
            Money_and_Cigarettes                                            Blues-rock
            No_Reason_to_Cry                                                Rock_and_roll
            One_More_Car,_One_More_Rider                                    Blues-rock
            Pilgrim_%28Eric_Clapton_album%29                                Rock_music
            Pilgrim_%28Eric_Clapton_album%29                                Blues
            Pilgrim_%28Eric_Clapton_album%29                                Pop_music
            Reptile_%28album%29                                             Rock_music
            Reptile_%28album%29                                             Blues
            Riding_with_the_King_%28B._B._King_and_Eric_Clapton_album%29    Blues-rock
            Riding_with_the_King_%28B._B._King_and_Eric_Clapton_album%29    Blues_rock
            Slowhand 	                                                    Rock_music
            Steppin%27_Out_%28Eric_Clapton_album%29 	                    Blues-rock
            The_Cream_of_Clapton                                            Rock_music
            The_Cream_of_Clapton                                            Blues_Rock
            The_Cream_of_Eric_Clapton 	                                    Rock_music
            The_History_of_Eric_Clapton                                     Rock_music
            The_History_of_Eric_Clapton                                     Blues
            There%27s_One_in_Every_Crowd                                    Reggae
            There%27s_One_in_Every_Crowd                                    Blues-rock
            Time_Pieces:_The_Best_of_Eric_Clapton                           Blues_Rock
            Unplugged_%28Eric_Clapton_album%29 	                            Folk_music
            Unplugged_%28Eric_Clapton_album%29 	                            Acoustic_blues
                
            </textual></programlisting><para class="po-block e668 e668"><textual class="po-textual">
                However, if we omit a reference to genre and simply ask for Clapton's albums
                using the query:              
            </textual></para><programlisting class="po-block e669 e669" xml:space="preserve"><textual class="po-textual">
                
            SELECT ?album WHERE 
            	{
            	?album &lt;http://dbpedia.org/ontology/artist&gt; &lt;http://dbpedia.org/resource/Eric_Clapton&gt;.
            	?album &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Album&gt;.
            	}
            ORDER BY ?album                  
                
            </textual></programlisting><para class="po-block e670 e670"><textual class="po-textual">
                then the results contain 7 additional albums (below). We have not been able to determine the 
                reason for this disparity since there is genre information for each of them when we dereference
                their IRIs on the DBpedia site.
            </textual></para><programlisting class="po-block e671 e671" xml:space="preserve"><textual class="po-textual">
        Clapton_%281973_album%29                dbpprop:genre    Rock       
        [compilation from 1973]
        
        Complete_Clapton                        dbpprop:genre    Blues      
        [compilation from 2007]
        
        Edge_of_Darkness_%28soundtrack%29       dbpprop:genre    Soundtracks 
        [18 minute 1985 soundtrack for British TV series]
        
        Eric_Clapton_at_His_Best                dbpprop:genre    Rock         
        [compilation from 1972]
        
        Lethal_Weapon_3_%28soundtrack%29        dbpprop:genre    Orchestral, Jazz, and Blues   
        [Wikipedia soundtrack entry shares page with the movie; 2 infoboxes]
        
        Live_from_Madison_Square_Garden_%28Eric_Clapton_and_Steve_Winwood_album%29  dbpprop:genre  Blues/Rock            
        [note the slash]
        
        Rush_%28soundtrack%29                   dbpedia-owl:type dbpedia:Soundtrack  
        [Wikipedia soundtrack entry shares page with the movie; but no album infobox]                
            </textual></programlisting><para class="po-block e672 e672"><textual class="po-textual"> 
                A better solution for managing the permutations between the
                representations for the genre concept "Rock and Roll" as well as its narrowings would be to
                again use reasoning. The semantically equivalent variant genres could be represented as 
                </textual><code class="po-atom e673 e673"><textual class="po-textual">rdfs:subProperties</textual></code><textual class="po-textual"> of one
                another, thereby enabling a single genre representation to refer to many. </textual><footnote class="po-popup e674 e674"><para class="po-block e675 e675"><textual class="po-textual">However, we chose to use </textual><code class="po-atom e676 e676"><textual class="po-textual">rdfs:subClassOf</textual></code><textual class="po-textual"> because it was the most appropriate RDFS property that the 
                        Virtuoso database reasoner supported.</textual></para></footnote><textual class="po-textual"> This would
                require analogous steps to where we created and loaded assertions, defined a graph,
                define a graph group, and in this case define a </textual><code class="po-atom e677 e677"><textual class="po-textual">rule_set</textual></code><textual class="po-textual"> in Virtuoso. Then, using the
                proper syntax we could query using that </textual><code class="po-atom e678 e678"><textual class="po-textual">rule_set</textual></code><textual class="po-textual"> to include exactly the genres we
                intend to use in our queries. A less elegant approach would be to enumerate them one by one and construct a
                </textual><code class="po-atom e679 e679"><textual class="po-textual">UNION</textual></code><textual class="po-textual"> of results. 
            </textual></para></section></section><section class="po-hcontainer e680 e680"><title class="po-block e681 e681"><textual class="po-textual">Limitations and Further Efforts</textual></title><para class="po-block e682 e682"><textual class="po-textual">We recognize several limitations in our work to date:
            </textual><itemizedlist class="po-table e683 e683"><listitem class="po-container e684 e684"><para class="po-block e685 e685"><textual class="po-textual">data inconsistencies</textual></para></listitem><listitem class="po-container e686 e686"><para class="po-block e687 e687"><textual class="po-textual">need for further RDF visualization work</textual></para></listitem><listitem class="po-container e688 e688"><para class="po-block e689 e689"><textual class="po-textual">need to address more of the original problems</textual></para></listitem><listitem class="po-container e690 e690"><para class="po-block e691 e691"><textual class="po-textual">constructing queries across datasets</textual></para></listitem></itemizedlist><textual class="po-textual">  
            Each is discussed in the following subsections.
        </textual></para><section class="po-hcontainer e692 e692"><title class="po-block e693 e693"><textual class="po-textual">Data Inconsistencies</textual></title><para class="po-block e694 e694"><textual class="po-textual">While we would wish the source RDF data could be regarded as ground truth, we realize there are
            several problems with our sources.
                </textual><itemizedlist class="po-table e695 e695"><listitem class="po-container e696 e696"><para class="po-block e697 e697"><emphasis class="po-inline e698 e698" role="ital"><textual class="po-textual">Errors of omission: </textual></emphasis><textual class="po-textual"> Since the original data in Wikipedia is community-entered,
                    it is predictable that certain facts will be missing from the data but are in fact true. Some
                    of thes facts may be obscure while others may be more obvious to a subject matter expert 
                    for the given topic. For example, what if Eric Clapton were to enter his own data about himself?</textual></para></listitem></itemizedlist><textual class="po-textual">
                </textual><itemizedlist class="po-table e699 e699"><listitem class="po-container e700 e700"><para class="po-block e701 e701"><emphasis class="po-inline e702 e702" role="ital"><textual class="po-textual">Poor data curation: </textual></emphasis><textual class="po-textual"> In some cases, Wikipedia data may
                    have been present and complete, but there might have been problems in the extraction process from Wikipedia
                    to DBpedia.</textual></para></listitem></itemizedlist><textual class="po-textual">
                </textual><itemizedlist class="po-table e703 e703"><listitem class="po-container e704 e704"><para class="po-block e705 e705"><emphasis class="po-inline e706 e706" role="ital"><textual class="po-textual">Erroneous data: </textual></emphasis><textual class="po-textual"> Such problems are due to simple data entry errors, 
                        unintentional errors in stating what the data entry person considers facts,
                    or possibly intentional falsehoods or unsubstantiated facts.</textual></para></listitem></itemizedlist><textual class="po-textual">                
                </textual><itemizedlist class="po-table e707 e707"><listitem class="po-container e708 e708"><para class="po-block e709 e709"><emphasis class="po-inline e710 e710" role="ital"><textual class="po-textual">Unclear semantics: </textual></emphasis><textual class="po-textual"> The various properties which were of importance to us were
                    generally not defined in the ontology, as discussed in </textual><xref class="po-milestone e711 e711" linkend="workingDefs"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. We struggled to interpret
                    these terms in a consistent manner. It is possible that individuals who care less about the precision of 
                    information may have entered relationships not necessarily using the correct semantics.
                    We believe that the ambiguity of the musician-related properties was the most significant
                    problem with the reliability of the data and therefore the biggest challenge in testing our
                    hypothesis.</textual></para></listitem></itemizedlist><textual class="po-textual">
            </textual></para></section><section class="po-hcontainer e712 e712"><title class="po-block e713 e713"><textual class="po-textual">Further RDF Visualization Work</textual></title><para class="po-block e714 e714"><textual class="po-textual"> Since AJAX facilitates updating a web page without reloading the entire page,
                we plan to insert additional links within the SVG graphic to add more
                interactivity, invoking additional queries. Links could also be added during the
                module processing. CSS and XSLT could also be used to enhance the XML
                presentation. </textual></para><para class="po-block e715 e715"><textual class="po-textual"> The current visualization graph is quite wide and long, making it difficult to
                view in a web browser without additional panning and zooming capabilities. Useful
                visualization of the result set is difficult but we intend to improve the
                visualization to facilitate traversing the dataset using hyperlinks. The
                hyperlinks are there now, but there is currently a problem with the JavaScript
                </textual><code class="po-atom e716 e716"><textual class="po-textual">POST</textual></code><textual class="po-textual"> method. 
            </textual></para></section><section class="po-hcontainer e717 e717"><title class="po-block e718 e718"><textual class="po-textual">Further Attempts to Address the Original Problems</textual></title><para class="po-block e719 e719"><textual class="po-textual">
                We initially formulated nearly two dozen questions [see </textual><xref class="po-milestone e720 e720" linkend="problemList"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]
                that we believed we could use the DBpedia and MusicBrainz
                RDF  datasets to answer. As of this July writing, few of these questions have been answered definitively. 
                If properly bounded, the following are the questions we should be able to address in the future.
            </textual></para><orderedlist class="po-table e721 e721"><listitem class="po-container e722 e722"><para class="po-block e723 e723"><textual class="po-textual">Which recording artist has directly played with the most musicians?</textual></para></listitem><listitem class="po-container e724 e724"><para class="po-block e725 e725"><textual class="po-textual">Which recording artist has the most connections within six degrees?</textual></para></listitem><listitem class="po-container e726 e726"><para class="po-block e727 e727"><textual class="po-textual">Which musician has been a session man for the most number of artists?</textual></para></listitem><listitem class="po-container e728 e728"><para class="po-block e729 e729"><textual class="po-textual">Which recording artist was most active during a particular decade?</textual></para></listitem><listitem class="po-container e730 e730"><para class="po-block e731 e731"><textual class="po-textual">Among all artists of a particular genre, who has played with the most other musicians?</textual></para></listitem><listitem class="po-container e732 e732"><para class="po-block e733 e733"><textual class="po-textual">Which rock artist's extended graph has the most other artists in 2 degrees? 3 degrees? 4 degrees?</textual></para></listitem><listitem class="po-container e734 e734"><para class="po-block e735 e735"><textual class="po-textual">Who has appeared on the most albums?</textual></para></listitem><listitem class="po-container e736 e736"><para class="po-block e737 e737"><textual class="po-textual">Which musician-related properties are reversible (inverse makes sense)?</textual></para></listitem><listitem class="po-container e738 e738"><para class="po-block e739 e739"><textual class="po-textual">Who created the most songs?</textual></para></listitem><listitem class="po-container e740 e740"><para class="po-block e741 e741"><textual class="po-textual">Which song has been recorded the most times by any artists? 
                    ("Yesterday" and "White Christmas" are typically cited.)</textual></para></listitem><listitem class="po-container e742 e742"><para class="po-block e743 e743"><textual class="po-textual">What is the average age of a musician when he/she first joined a band?</textual></para></listitem></orderedlist><para class="po-block e744 e744"><textual class="po-textual">
                Other questions we may potentially be able to address include:
            </textual></para><orderedlist class="po-table e745 e745"><listitem class="po-container e746 e746"><para class="po-block e747 e747"><textual class="po-textual">If we weight results by the length of time a band stays together, how does that impact other queries?</textual></para></listitem><listitem class="po-container e748 e748"><para class="po-block e749 e749"><textual class="po-textual">Does total number of songs or album released correlate with other measures of success?</textual></para></listitem><listitem class="po-container e750 e750"><para class="po-block e751 e751"><textual class="po-textual">Which solo artist has had the longest career?</textual></para></listitem><listitem class="po-container e752 e752"><para class="po-block e753 e753"><textual class="po-textual">Which band has been together (in some form) the longest time?</textual></para></listitem><listitem class="po-container e754 e754"><para class="po-block e755 e755"><textual class="po-textual">For bands with changing membership, can we conclude which configuration lasted the longest?</textual></para></listitem><listitem class="po-container e756 e756"><para class="po-block e757 e757"><textual class="po-textual">What is the "Eric Clapton number" (a la Kevin Bacon number) for various musicians?</textual></para></listitem></orderedlist></section><section class="po-hcontainer e758 e758"><title class="po-block e759 e759"><textual class="po-textual">Queries Across Datasets</textual></title><para class="po-block e760 e760"><textual class="po-textual">
               Since we have established a mechanism to 
               refer to a given artist in both datasets using a single IRI,
               we are prepared to ask queries that span the datasets, including
               queries that would not be possible without both sources. A few such queries are as follows:
           </textual></para><itemizedlist class="po-table e761 e761"><listitem class="po-container e762 e762"><para class="po-block e763 e763"><textual class="po-textual">Which albums of a given artist occur in one dataset but not the other?
                   Since we are using Virtuoso which does not support the SPARQL 1.1 </textual><code class="po-atom e764 e764"><textual class="po-textual">MINUS</textual></code><textual class="po-textual"> construct,
                   we would need to use OpenLink's proprietary approach. </textual><footnote class="po-popup e765 e765"><para class="po-block e766 e766"><textual class="po-textual">It is possible that </textual><code class="po-atom e767 e767"><textual class="po-textual">NOT EXISTS</textual></code><textual class="po-textual"> in SPARQL 1.0 would be sufficient.</textual></para></footnote></para></listitem><listitem class="po-container e768 e768"><para class="po-block e769 e769"><textual class="po-textual">Which albums that occur in both datasets have the same title and record producer but different release dates?
                   This might be difficult to determine because of differences in representation of the record producer name.
               </textual></para></listitem><listitem class="po-container e770 e770"><para class="po-block e771 e771"><textual class="po-textual">For a given artist, return their spouse(s) and children even if they themselves were not
               musical artists. MusicBrainz only has names of children if they themselves are artists (e.g., has
               John Lennon's sons but not Paul McCartney's children).</textual></para></listitem></itemizedlist></section><section class="po-hcontainer e772 e772"><title class="po-block e773 e773"><textual class="po-textual">Put the LOD Right on Me</textual></title><para class="po-block e774 e774"><textual class="po-textual">
               Regrettably, we focused most of our attention on DBpedia, MusicBrainz and Freebase web sites, rather than 
               casting a broader net to the </textual><link class="po-inline e775 e775" xlink:actuate="onRequest" xlink:href="http://www.w3.org/wiki/SweoIG/TaskForces/CommunityProjects/LinkingOpenData" xlink:show="new" xlink:type="simple"><textual class="po-textual">Linking Open Data</textual></link><textual class="po-textual"> 
               community effort initiated by the  W3C's (now closed) Semantic Web Education and Outreach (SWEO) Interest Group.
               As we were finalizing this paper, we discovered several key 
               resources that could prove extremely useful in answering some of our original
               questions; we hope to explore resources such as the following over the next year:
           </textual></para><itemizedlist class="po-table e776 e776"><listitem class="po-container e777 e777"><para class="po-block e778 e778"><link class="po-inline e779 e779" xlink:actuate="onRequest" xlink:href="http://www.delicious.com/kidehen/linked_data_demo" xlink:show="new" xlink:type="simple"><textual class="po-textual">Demos including DBpedia and MusicBrainz</textual></link><textual class="po-textual"> (and many others)</textual></para></listitem><listitem class="po-container e780 e780"><para class="po-block e781 e781"><link class="po-inline e782 e782" xlink:actuate="onRequest" xlink:href="http://wiki.dbpedia.org/Downloads32" xlink:show="new" xlink:type="simple"><textual class="po-textual">DBpedia Extended Datasets</textual></link><textual class="po-textual"> 
                       for MusicBrainz and Freebase</textual></para></listitem><listitem class="po-container e783 e783"><para class="po-block e784 e784"><link class="po-inline e785 e785" xlink:actuate="onRequest" xlink:href="http://richard.cyganiak.de/2007/10/lod/" xlink:show="new" xlink:type="simple"><textual class="po-textual">LOD cloud diagram</textual></link><textual class="po-textual">, an imagemap showing datasets published in Linked Data format (maintained by Richard Cyganiak and Anja Jentzsch)</textual></para></listitem><listitem class="po-container e786 e786"><para class="po-block e787 e787"><link class="po-inline e788 e788" xlink:actuate="onRequest" xlink:href="http://ckan.org/" xlink:show="new" xlink:type="simple"><textual class="po-textual">Comprehensive Knowledge Archive Network (CKAN)</textual></link><textual class="po-textual">
                       web-based software for storage and distribution of data supported by the 
                       </textual><link class="po-inline e789 e789" xlink:actuate="onRequest" xlink:href="http://okfn.org/" xlink:show="new" xlink:type="simple"><textual class="po-textual">Open Knowledge Foundation</textual></link></para></listitem><listitem class="po-container e790 e790"><para class="po-block e791 e791"><link class="po-inline e792 e792" xlink:actuate="onRequest" xlink:href="http://musicontology.com/" xlink:show="new" xlink:type="simple"><textual class="po-textual">Music Ontology</textual></link><textual class="po-textual"> especially 
                       </textual><link class="po-inline e793 e793" xlink:actuate="onRequest" xlink:href="http://musicontology.com/#term_MusicArtist" xlink:show="new" xlink:type="simple"><textual class="po-textual">MusicArtist</textual></link><textual class="po-textual">, 
                       </textual><link class="po-inline e794 e794" xlink:actuate="onRequest" xlink:href="http://musicontology.com/#term_musicbrainz_guid" xlink:show="new" xlink:type="simple"><textual class="po-textual">musicbrainz_guid</textual></link><textual class="po-textual"> and
                       </textual><link class="po-inline e795 e795" xlink:actuate="onRequest" xlink:href="http://musicontology.com/#term_supporting_musician" xlink:show="new" xlink:type="simple"><textual class="po-textual">supporting_musician</textual></link></para></listitem><listitem class="po-container e796 e796"><para class="po-block e797 e797"><link class="po-inline e798 e798" xlink:actuate="onRequest" xlink:href="http://linkeddatabook.com/book" xlink:show="new" xlink:type="simple"><textual class="po-textual">Linked Data: Evolving the Web into a Global Data Space</textual></link><textual class="po-textual">,  
                       a new book by Tom Heath and Christian Bizer (2011)</textual></para></listitem></itemizedlist></section></section><section class="po-hcontainer e799 e799"><title class="po-block e800 e800"><textual class="po-textual">Advantages and Disadvantages</textual></title><para class="po-block e801 e801"><textual class="po-textual">Next we offer our subjective opinion about the relative advantages and disadvantages of our approach
            as compared to simply using the </textual><link class="po-inline e802 e802" xlink:actuate="onRequest" xlink:href="http://dbpedia.org/sparql" xlink:show="new" xlink:type="simple"><textual class="po-textual">DBpedia SPARQL endpoint</textual></link><textual class="po-textual"> 
            (which also runs on a Virtuoso server).
        </textual></para><section class="po-hcontainer e803 e803"><title class="po-block e804 e804"><textual class="po-textual">Advantages of Our Approach</textual></title><para class="po-block e805 e805"><textual class="po-textual">
                Our Drupal frontend to a dedicated Virtuoso server under our fine-grained control afforded us several advantages
                </textual><footnote class="po-popup e806 e806"><para class="po-block e807 e807"><textual class="po-textual">We note, however, that the 
                        </textual><link class="po-inline e808 e808" xlink:actuate="onRequest" xlink:href="http://blog.dbpedia.org/2011/01/31/dbpedia-36-ami-available/" xlink:show="new" xlink:type="simple"><textual class="po-textual">DBpedia Amazon Machine Instance (AMI)</textual></link><textual class="po-textual"> 
                        released earlier in 2011 shares several of the advantages discussed in this section.</textual></para></footnote><textual class="po-textual">, namely:
                </textual><itemizedlist class="po-table e809 e809"><listitem class="po-container e810 e810"><para class="po-block e811 e811"><emphasis class="po-inline e812 e812" role="ital"><textual class="po-textual">No execution timeout -</textual></emphasis><textual class="po-textual"> Time-intensive queries were allowed to run
                            to completion rather than being subject to an externally specified time limit on a shared server.
                        </textual></para></listitem><listitem class="po-container e813 e813"><para class="po-block e814 e814"><emphasis class="po-inline e815 e815" role="ital"><textual class="po-textual">Higher limits -</textual></emphasis><textual class="po-textual"> SPARQL endpoints shared by multiple users are
                            often constrained to a limited number of results (i.e., 2000 for DBpedia endpoint). We did not
                            need to limit the number of results returned since our number of "users" never exceeded three.
                        </textual></para></listitem><listitem class="po-container e816 e816"><para class="po-block e817 e817"><emphasis class="po-inline e818 e818" role="ital"><textual class="po-textual">Direct access to raw RDF at command line level -</textual></emphasis><textual class="po-textual"> When results
                            were not as expected or did not seem to make sense, the ability to examine the actual RDF files
                            (which had been ingested into our datastore) in our Linux environment was invaluable.
                        </textual></para></listitem><listitem class="po-container e819 e819"><para class="po-block e820 e820"><emphasis class="po-inline e821 e821" role="ital"><textual class="po-textual">Collaborative SPARQL development for saving queries in Drupal -</textual></emphasis><textual class="po-textual">
                            As the three authors worked remotely, it was quite helpful to enter our SPARQL queries into
                            a Drupal interface, run the queries, save the queries, and optionally enter them into a cascading
                            menu system for each other to try so we could discuss results.
                        </textual></para></listitem><listitem class="po-container e822 e822"><para class="po-block e823 e823"><emphasis class="po-inline e824 e824" role="ital"><textual class="po-textual">More precise SPARQL timing metrics -</textual></emphasis><textual class="po-textual"> Again, since we could
                            control which other processes were running and other variables that would otherwise impact
                            timing metrics, we could more accurately time our queries. For example, we found it took
                            on average 3477.6 msec for a query with one </textual><code class="po-atom e825 e825"><textual class="po-textual">FILTER</textual></code><textual class="po-textual"> statement comprised of two 
                            </textual><code class="po-atom e826 e826"><textual class="po-textual">regex</textual></code><textual class="po-textual"> expressions joined by "&amp;&amp;" compared to only
                            731 msec for a similar query in which each </textual><code class="po-atom e827 e827"><textual class="po-textual">regex</textual></code><textual class="po-textual"> expression was the parameter of
                            a separate </textual><code class="po-atom e828 e828"><textual class="po-textual">FILTER</textual></code><textual class="po-textual"> statement. See the first example in the </textual><xref class="po-milestone e829 e829" linkend="genres"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> section.
                        </textual></para></listitem><listitem class="po-container e830 e830"><para class="po-block e831 e831"><emphasis class="po-inline e832 e832" role="ital"><textual class="po-textual">Test harness for repeatedly running the same query -</textual></emphasis><textual class="po-textual"> We employed
                            a perl test harness for iterative execution and averaging of results. For example, the previously
                            mentioned </textual><code class="po-atom e833 e833"><textual class="po-textual">FILTER</textual></code><textual class="po-textual"> and </textual><code class="po-atom e834 e834"><textual class="po-textual">regex</textual></code><textual class="po-textual"> tests were run 1,000 times.
                        </textual></para></listitem><listitem class="po-container e835 e835"><para class="po-block e836 e836"><emphasis class="po-inline e837 e837" role="ital"><textual class="po-textual">Examination of error messages -</textual></emphasis><textual class="po-textual"> We had access to server logging
                            of error messages.
                        </textual></para></listitem></itemizedlist><textual class="po-textual">                
            </textual></para></section><section class="po-hcontainer e838 e838"><title class="po-block e839 e839"><textual class="po-textual">Disadvantages of Our Approach</textual></title><para class="po-block e840 e840"><textual class="po-textual">
                </textual><itemizedlist class="po-table e841 e841"><listitem class="po-container e842 e842"><para class="po-block e843 e843"><emphasis class="po-inline e844 e844" role="ital"><textual class="po-textual">Static datastore -</textual></emphasis><textual class="po-textual"> After we ingested the RDF files, our datastore
                            did not change so it could not take advantage of possible improvements in the DBpedia and Musicbrainz 
                            data throughout the first half of 2011. On the other hand, this was also an advatange since it meant
                            we were not subject to subtle changes that might have impacted previous queries.
                        </textual></para></listitem><listitem class="po-container e845 e845"><para class="po-block e846 e846"><emphasis class="po-inline e847 e847" role="ital"><textual class="po-textual">Limited knowledge of inner workings -</textual></emphasis><textual class="po-textual"> Since we were not members
                            of either the DBpedia or Musicbrainz developer communities, we were not privy to any internal documentation
                            that might have answered some of the questions we raised and helped us to address some of the problems we
                            encountered. In a volunteer developer collaborative environment, it is likely that user-facing 
                            documentation may lag behind actual implementation changes; relevant examples may also be lacking.
                        </textual></para></listitem></itemizedlist><textual class="po-textual">
            </textual></para></section></section><section class="po-hcontainer e848 e848"><title class="po-block e849 e849"><textual class="po-textual">Recommendations</textual></title><para class="po-block e850 e850"><textual class="po-textual">
            The problems we encountered suggest several recommendations we would like to share with the DBPedia and MusicBrainz communities:
            </textual><orderedlist class="po-table e851 e851"><listitem class="po-container e852 e852"><para class="po-block e853 e853"><emphasis class="po-inline e854 e854" role="bold"><textual class="po-textual">Publish example SPARQL queries:</textual></emphasis><textual class="po-textual"> Although sample data is readily available
                        on the music sites, we did not find SPARQL queries, just endpoints to explore.
                    </textual></para></listitem><listitem class="po-container e855 e855"><para class="po-block e856 e856"><emphasis class="po-inline e857 e857" role="bold"><textual class="po-textual">Provide detailed explanation of IRI conventions and property semantics:</textual></emphasis><textual class="po-textual"> We
                        found that it was not always obvious what the significance was for IRI differences, nor what non-alphabetic
                        characters should be used in multi-word IRIs. For example, what is the difference between
                        </textual><code class="po-atom e858 e858"><textual class="po-textual">http://dbpedia.org/ontology</textual></code><textual class="po-textual"> and  </textual><code class="po-atom e859 e859"><textual class="po-textual">http://dbpedia.org/property</textual></code><textual class="po-textual"> IRIs?
                    </textual></para></listitem><listitem class="po-container e860 e860"><para class="po-block e861 e861"><emphasis class="po-inline e862 e862" role="bold"><textual class="po-textual">Include examples of intersecting graphs from other music-oriented sites:</textual></emphasis><textual class="po-textual">
                        In the spirit of </textual><link class="po-inline e863 e863" xlink:actuate="onRequest" xlink:href="http://www.w3.org/wiki/SweoIG/TaskForces/CommunityProjects/LinkingOpenData" xlink:show="new" xlink:type="simple"><textual class="po-textual">Linking Open Data</textual></link><textual class="po-textual">, 
                        it would be helpful if both DBpedia and MusicBrainz created and posted
                        demos (or links to demos) on their sites to illustrate linking of their data sources to other popular music data stores.
                    </textual></para></listitem></orderedlist><textual class="po-textual">
        </textual></para></section><section class="po-hcontainer e864 e864"><title class="po-block e865 e865"><textual class="po-textual">Conclusions</textual></title><para class="po-block e866 e866"><textual class="po-textual">
            Although at this time we have fallen far short of our lofty goal of answering two dozen complex questions
            by means of RDF and SPARQL, we believe we have uncovered several significant challenges 
            regarding the consistency of the data sources and the interpretation of the semantics
            underlying various key properties of musical artists. We believe similar problems would be
            encountered with using other large community-entered datasets of relatively low quality.
        </textual></para><para class="po-block e867 e867"><textual class="po-textual">
            While Wikipedia editors often focus on crafting the most accessible presentation of encyclopedic 
            information for human consumption, there are other factors to consider. Individuals working with data at the
            semantic level could improve the semantic representation by isolating outliers, as in
            the case of multiple representations of the "Rock and Roll music" genre concept.
            Data quality and therefore utility would be greatly enhanced
            by making the necessary modifications to "normalize" or decrease
            spurious diversity that is not based on any actual or intended semantic distinction.
            </textual><footnote class="po-popup e868 e868"><para class="po-block e869 e869"><textual class="po-textual">For example, see </textual><link class="po-inline e870 e870" xlink:actuate="onRequest" xlink:href="http://pedantic-web.org/" xlink:show="new" xlink:type="simple"><textual class="po-textual">The Pedantic Web</textual></link><textual class="po-textual">,
                    especially </textual><link class="po-inline e871 e871" xlink:actuate="onRequest" xlink:href="http://pedantic-web.org/fops.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">Frequently Observed Problems on the Web of Data</textual></link><textual class="po-textual">.</textual></para></footnote><textual class="po-textual">         
        </textual></para><para class="po-block e872 e872"><textual class="po-textual">
            In the end, any accurate measure of impact a given musician has on a genre is likely to be the product of a
            weighted measurement of several variables and is therefore largely subjective. The number
            of bands someone played with, the number of songs they wrote, the number of albums they
            produced or the length of time they were active are only part of the equation. An artist
            who wrote a single song that has enjoyed frequent airplay for decades and/or was covered by artists in many
            different genres clearly demonstrates a substantial impact. Other measurements not available in
            the RDF datasets are likely to be even more revealing of an artist's true impact, such as the
            number of concerts they played, the number of people who recognize their name, and their
            success on music charts (i.e., Billboard).
        </textual></para><para class="po-block e873 e873"><textual class="po-textual">
            By the same token, a strong argument could be made that an individual musician whose
            career lasted only a short time with a limited repertoire but perhaps created or
            influenced a new genre could be regard to have a major impact. Therefore, one
            would have to somehow compare Eric Clapton to early genre pioneers. For example, Robert
            Johnson, a major influence on Clapton, recorded only 29 songs and basically enjoyed only
            a 2-year (1936-37) recording career. Yet Clapton himself has called Johnson "the
            most important blues singer that ever lived".</textual><footnote class="po-popup e874 e874"><para class="po-block e875 e875"><textual class="po-textual">Booklet accompanying Johnson's </textual><emphasis class="po-inline e876 e876" role="ital"><textual class="po-textual">Complete Recordings</textual></emphasis><textual class="po-textual"> box set, 
                    Stephen LaVere, Sony Music Entertainment, 1990, Clapton quote on p. 26.</textual></para></footnote><textual class="po-textual">    
            Johnson was ranked fifth in </textual><emphasis class="po-inline e877 e877" role="ital"><textual class="po-textual">Rolling Stone's</textual></emphasis><textual class="po-textual"> list of 100 Greatest Guitarists of All Time.
        </textual></para><para class="po-block e878 e878"><textual class="po-textual"> 
            Given our knowledge and supporting resources surrounding Eric Clapton's career, we believe
            that some of what we perceive as errors are indeed just that -- mistakes. Whether those
            mistakes are based on individuals simply being incorrect, or not understanding the
            semantics really does not matter in the final analysis. What this highlights, for us, 
            is a limitation induced
            by the </textual><link class="po-inline e879 e879" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/Open_World_Assumption" xlink:show="new" xlink:type="simple"><textual class="po-textual">Open World Assumption</textual></link><textual class="po-textual">. 
            When an assertion is not made, we cannot also assume its
            negation. Having assertions stating that Clapton created 30 albums does not mean he did
            not create 45. Likewise, because we know that Clapton did participate in collaboration
            efforts like Powerhouse, The Dirty Mac and Free Creek, we cannot state unequivocally that
            it happened only a
            single time and therefore violates the semantics of the </textual><code class="po-atom e880 e880"><textual class="po-textual">associatedActs</textual></code><textual class="po-textual"> predicate.
        </textual></para></section><appendix class="po-hcontainer e881 e881" xml:id="triplesCounts" xreflabel="Triples Counts"><title class="po-block e882 e882"><textual class="po-textual">Triple Counts</textual></title><programlisting class="po-block e883 e883" xml:id="musicbrainzTriples" xml:space="preserve" xreflabel="Musicbrainz Triples Count"><textual class="po-textual">
	      </textual><emphasis class="po-inline e884 e884" role="bital"><textual class="po-textual">Musicbrainz Triples Count</textual></emphasis><textual class="po-textual"> 
            
        4301998 albums.rdf
        1824953 albums_tracklists.rdf
        1712434 artists.rdf
         427027 relations_artist_to_artist.rdf
         292955 albums_tags.rdf
         188708 tracks.rdf
         114285 relations_album_to_artist.rdf
        --------------------------------------
        8,862,360 total triples            
        </textual></programlisting><programlisting class="po-block e885 e885" xml:id="dbpediaAssertions" xml:space="preserve" xreflabel="DBPedia Assertions"><textual class="po-textual">
	      </textual><emphasis class="po-inline e886 e886" role="bital"><textual class="po-textual">DBpedia Assertions</textual></emphasis><textual class="po-textual"> 
            
         130166251 page_links_en.nt
          43640719 infobox_properties_en.nt
          23917050 wikipedia_links_en.nt
          13795664 mappingbased_properties_en.nt
          12161691 article_categories_en.nt  
           9485630 revisions_en.nt
           9485630 page_ids_en.nt
           7972385 labels_en.nt
           6173940 instance_types_en.nt
           5907507 external_links_en.nt
           4615815 images_en.nt
           4503651 redirects_en.nt
           3261096 short_abstracts_en.nt
           3261096 long_abstracts_en.nt
           2529082 skos_categories_en.nt
           1745873 persondata_en.nt
           1544820 geo_coordinates_en.nt
            928708 disambiguations_en.nt
            910517 article_related_geo_countries_en.nt
            632615 category_labels_en.nt
            414195 homepages_en.nt
            387336 specific_mappingbased_properties_en.nt
             81602 infobox_property_definitions_en.nt
              1555 pnd_en.nt 
        ---------------------------------------------------	  
         287,524,428 total assertions           
        </textual></programlisting></appendix><appendix class="po-hcontainer e887 e887" xml:id="drupalModules" xreflabel="Drupal Modules"><title class="po-block e888 e888"><textual class="po-textual">Drupal 6.18 Modules</textual></title><programlisting class="po-block e889 e889" xml:space="preserve"><textual class="po-textual">
        Admin role 6.x-1.3
        Administration menu 6.x-1.6
        Advanced help 6.x-1.2
        Backup and Migrate 6.x-2.4
        Colorpicker 6.x-2.1
        Content Construction Kit (CCK) 6.x-2.9
        Date 6.x-2.7
        Devel 6.x-1.23
        Drupal For Firebug 6.x-1.4
        Google Visualization API 6.x-1.3
        Graphviz Filter 6.x-1.6
        Graphviz Styles 6.x-1.0
        jQuery Update 6.x-2.0-alpha1
        Masquerade 6.x-1.5
        Node export 6.x-2.24
        Node import 6.x-1.0
        Pathauto 6.x-1.5
        RDF CCK 6.x-2.x-dev (2011-Feb-25)
        Resource Description Framework (RDF) 6.x-1.0-alpha8
        SPARQL 6.x-1.0-alpha1
        Includes: SPARQL API
        Sphinx (Sphinx search integration) 6.x-1.3
        Tagadelic 6.x-1.2
        Taxonomy import/export via XML 6.x-1.3
        Taxonomy Manager 6.x-2.2
        Taxonomy Menu 6.x-2.9
        Token 6.x-1.15
        Views 6.x-2.12      
        </textual></programlisting></appendix><bibliography class="po-hcontainer e890 e890"><title class="po-block e891 e891"><textual class="po-textual">Bibiography</textual></title><bibliomixed class="po-block e892 e892" xml:id="Auer1" xreflabel="Auer and Lehmann 2007"><textual class="po-textual">
            Auer, SÃ¶ren; Lehmann, Jens: 
            </textual><emphasis class="po-inline e893 e893" role="ital"><textual class="po-textual">What Have Innsbruck and Leipzig in Common? Extracting Semantics from Wiki Content.</textual></emphasis><textual class="po-textual">
            ISBN-13: 978-3-540-72666-1. Springer Verlag. Â© 2007.
            Lecture Notes in Computer Science, 2007, Volume 4519/2007, pp. 503-517, DOI: 10.1007/978-3-540-72667-8_36.
            </textual><link class="po-inline e894 e894" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.springerlink.com/content/3131t21p634191n2/</textual></link><textual class="po-textual"> and
            </textual><link class="po-inline e895 e895" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.71.1314&amp;rep=rep1&amp;type=pdf</textual></link><textual class="po-textual">.
        </textual></bibliomixed><bibliomixed class="po-block e896 e896" xml:id="Auer2" xreflabel="Auer et al 2007"><textual class="po-textual">
            Auer, SÃ¶ren; Bizer, Christian; Kobilarov, Georgi; Lehmann, Jens; Cyganiak, Richard; Ives, Zachary:
            </textual><emphasis class="po-inline e897 e897" role="ital"><textual class="po-textual">DBpedia: A Nucleus for a Web of Open Data.</textual></emphasis><textual class="po-textual">
            ISBN-13: 978-3-540-76297-3.  Springer Verlag. Â© 2007.
            Lecture Notes in Computer Science, 2007, Volume 4825/2007, pp. 722-735, DOI: 10.1007/978-3-540-76298-0_52.
            </textual><link class="po-inline e898 e898" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.springerlink.com/content/rm32474088w54378/</textual></link><textual class="po-textual"> and
            </textual><link class="po-inline e899 e899" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.informatik.uni-leipzig.de/~auer/publication/dbpedia.pdf</textual></link><textual class="po-textual">.
        </textual></bibliomixed><bibliomixed class="po-block e900 e900" xml:id="SemWebBook" xreflabel="Allemang and Hendler 2008"><textual class="po-textual">
            Allemang, Dean; Hendler, James A.:
            </textual><emphasis class="po-inline e901 e901" role="ital"><textual class="po-textual">Semantic Web for the Working Ontologist: Effective Modeling in RDFS and OWL.</textual></emphasis><textual class="po-textual">
            ISBN-13: 978-0-12-373556-0. Elsevier Inc. Â© 2008.
            </textual><link class="po-inline e902 e902" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.workingontologist.org/index.html</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e903 e903" xml:id="kbacon" xreflabel="Bacon"><textual class="po-textual">
            </textual><emphasis class="po-inline e904 e904" role="ital"><textual class="po-textual">Six Degrees of Kevin Bacon</textual></emphasis><textual class="po-textual">. [online]. [cited 08 Apr 2011].
            </textual><link class="po-inline e905 e905" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://en.wikipedia.org/wiki/Six_Degrees_of_Kevin_Bacon</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e906 e906" xml:id="butcher" xreflabel="Butcher 2010"><textual class="po-textual">
            Butcher, Matt et al. </textual><emphasis class="po-inline e907 e907" role="ital"><textual class="po-textual">Drupal 7 Module Development.</textual></emphasis><textual class="po-textual"> 
            ISBN-10: 1849511160. First edition.
            Packt Publishing Â© 2010. [cited 08 Apr 2011].
            </textual><link class="po-inline e908 e908" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.amazon.com/Drupal-Module-Development-Matt-Butcher/dp/1849511160/</textual></link><textual class="po-textual">  
        </textual></bibliomixed><bibliomixed class="po-block e909 e909" xml:id="eclapton" xreflabel="Clapton"><textual class="po-textual">
            </textual><emphasis class="po-inline e910 e910" role="ital"><textual class="po-textual">Eric Clapton's Wikipedia page</textual></emphasis><textual class="po-textual">. [online]. [cited 08 Apr 2011].
            </textual><link class="po-inline e911 e911" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://en.wikipedia.org/wiki/Eric_clapton</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e912 e912" xml:id="claptonFAQ" xreflabel="Clapton FAQ"><textual class="po-textual">
            </textual><emphasis class="po-inline e913 e913" role="ital"><textual class="po-textual">Eric Clapton Frequently Asked Questions</textual></emphasis><textual class="po-textual">,
            part of </textual><emphasis class="po-inline e914 e914" role="ital"><textual class="po-textual">The Eric Clapton Fan Club Magazine</textual></emphasis><textual class="po-textual">. [online]. [cited 08 Apr 2011].
            </textual><link class="po-inline e915 e915" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.whereseric.com/eric-clapton-faq</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e916 e916" xml:id="dbp01" xreflabel="DBpedia Dataset"><textual class="po-textual">
            </textual><emphasis class="po-inline e917 e917" role="ital"><textual class="po-textual">The DBpedia Dataset</textual></emphasis><textual class="po-textual">. [online]. [cited 08 Apr 2011].
            </textual><link class="po-inline e918 e918" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://wiki.dbpedia.org/Datasets</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e919 e919" xml:id="dbp03" xreflabel="DBpedia Ontology"><textual class="po-textual">
            </textual><emphasis class="po-inline e920 e920" role="ital"><textual class="po-textual">The DBpedia Ontology</textual></emphasis><textual class="po-textual">. [online]. [cited 08 Apr 2011].
            </textual><link class="po-inline e921 e921" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://wiki.dbpedia.org/Ontology</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e922 e922" xml:id="dbp02" xreflabel="DBpedia Release"><textual class="po-textual">
            </textual><emphasis class="po-inline e923 e923" role="ital"><textual class="po-textual">DBpedia 3.6 released</textual></emphasis><textual class="po-textual">. [online]. [cited 08 Apr 
            2011]. </textual><link class="po-inline e924 e924" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://blog.dbpedia.org/2011/01/17/dbpedia-36-released/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e925 e925" xml:id="sparqlByExample" xreflabel="Feigenbaum and Prud'hommeaux 2008"><textual class="po-textual">
            </textual><emphasis class="po-inline e926 e926" role="ital"><textual class="po-textual">SPARQL By Example - A Tutorial</textual></emphasis><textual class="po-textual">. [online] [cited 08 Apr 2011].
            Feigenbaum, Lee and Prud'hommeaux, Eric. Cambridge Semantics, 2008. Updated 2011-01-25.
            </textual><link class="po-inline e927 e927" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.cambridgesemantics.com/2008/09/sparql-by-example/</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e928 e928" xml:id="sparqlCheatSheet" xreflabel="Feigenbaum 2008"><textual class="po-textual">
            </textual><emphasis class="po-inline e929 e929" role="ital"><textual class="po-textual">SPARQL by Example: The Cheat Sheet</textual></emphasis><textual class="po-textual">. [online] [cited 08 Apr 2011].
            Feigenbaum, Lee. Cambridge Semantics, 2008.
            </textual><link class="po-inline e930 e930" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.slideshare.net/LeeFeigenbaum/sparql-cheat-sheet</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e931 e931" xml:id="pframe" xreflabel="Frame 1983"><textual class="po-textual">
            </textual><emphasis class="po-inline e932 e932" role="ital"><textual class="po-textual">Peter Frame's Rock Family Trees</textual></emphasis><textual class="po-textual">. [online and 3 books]. [cited 08 Apr
            2011]. </textual><link class="po-inline e933 e933" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.familyofrock.com/browse/details/trees.html</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e934 e934" xml:id="freebaseHome" xreflabel="Freebase"><textual class="po-textual">
            </textual><emphasis class="po-inline e935 e935" role="ital"><textual class="po-textual">Freebase home page</textual></emphasis><textual class="po-textual">. [online]. [cited 08 Apr 
            2011]. </textual><link class="po-inline e936 e936" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.freebase.com/</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e937 e937" xml:id="freebaseData" xreflabel="Freebase Data Dumps"><textual class="po-textual">
            </textual><emphasis class="po-inline e938 e938" role="ital"><textual class="po-textual">Freebase Data Dumps</textual></emphasis><textual class="po-textual">. [online]. [cited 08 Apr 
            2011]. </textual><link class="po-inline e939 e939" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://wiki.freebase.com/wiki/Data_dumps/</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e940 e940" xml:id="graphvizHome" xreflabel="Graphviz"><textual class="po-textual">
            </textual><emphasis class="po-inline e941 e941" role="ital"><textual class="po-textual">Graphviz home page</textual></emphasis><textual class="po-textual">. [online]. [cited 08 Apr 
            2011]. </textual><link class="po-inline e942 e942" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.graphviz.org/</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e943 e943" xml:id="mql" xreflabel="MQL"><textual class="po-textual">
            </textual><emphasis class="po-inline e944 e944" role="ital"><textual class="po-textual">Metaweb Query Language</textual></emphasis><textual class="po-textual">. [online]. [cited 08 Apr 
            2011]. </textual><link class="po-inline e945 e945" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://wiki.freebase.com/wiki/MQL</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e946 e946" xml:id="musicBrainz" xreflabel="MusicBrainz"><textual class="po-textual">
            </textual><emphasis class="po-inline e947 e947" role="ital"><textual class="po-textual">MusicBrainz home page</textual></emphasis><textual class="po-textual">. [online]. [cited 08 Apr 2011]. 
            </textual><link class="po-inline e948 e948" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://musicbrainz.org/</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e949 e949" xml:id="newman" xreflabel="Newman 2010"><textual class="po-textual">
            Newman, Mark. </textual><emphasis class="po-inline e950 e950" role="ital"><textual class="po-textual">Networks - An Introduction.</textual></emphasis><textual class="po-textual"> 
            ISBN-10: 9780199206650. First edition.
            Oxford University Press, USA Â© 2010. [cited 08 Apr 2011].
            </textual><link class="po-inline e951 e951" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.amazon.com/Networks-Introduction-Mark-Newman/dp/0199206651/</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e952 e952" xml:id="openCyc" xreflabel="OpenCyc for the Semantic Web"><textual class="po-textual">
            </textual><emphasis class="po-inline e953 e953" role="ital"><textual class="po-textual">OpenCyc for the Semantic Web</textual></emphasis><textual class="po-textual">. [online]. [Cited 26 Jun 2011].
            </textual><link class="po-inline e954 e954" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://sw.opencyc.org/</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e955 e955" xml:id="sixDegrees" xreflabel="Six Degrees"><textual class="po-textual">
            </textual><emphasis class="po-inline e956 e956" role="ital"><textual class="po-textual">Six Degrees of Separation</textual></emphasis><textual class="po-textual">. [online]. [Cited 08 Apr 2011].
            </textual><link class="po-inline e957 e957" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://en.wikipedia.org/wiki/Six_degrees_of_separation</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e958 e958" xml:id="sparql01" xreflabel="SPARQL 1.0"><textual class="po-textual">
            </textual><emphasis class="po-inline e959 e959" role="ital"><textual class="po-textual">SPARQL Query Language for RDF</textual></emphasis><textual class="po-textual">. [online] [cited 08 Apr 2011].
            W3C Recommendation 15 January 2008. W3C Â© 2006-2007
            </textual><link class="po-inline e960 e960" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/rdf-sparql-query/</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e961 e961" xml:id="rstarr" xreflabel="Starr"><textual class="po-textual">
            </textual><emphasis class="po-inline e962 e962" role="ital"><textual class="po-textual">Ringo Starr's Wikipedia page</textual></emphasis><textual class="po-textual">. [online] [cited 08 Apr 2011].
            </textual><link class="po-inline e963 e963" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://en.wikipedia.org/wiki/Ringo_Starr</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e964 e964" xml:id="allStarBand" xreflabel="Ringo Starr &amp; His All-Starr Band"><textual class="po-textual">
            </textual><emphasis class="po-inline e965 e965" role="ital"><textual class="po-textual">Ringo Starr &amp; His All-Starr Band Wikipedia page</textual></emphasis><textual class="po-textual">. [online] [cited 08 Apr 2011].
            </textual><link class="po-inline e966 e966" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://en.wikipedia.org/wiki/Ringo_Starr_%26_His_All-Starr_Band</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e967 e967" xml:id="vandykWestgate" xreflabel="VanDyke and Westgate 2007"><textual class="po-textual">
            VanDyk, John K and Westgate, Matt </textual><emphasis class="po-inline e968 e968" role="ital"><textual class="po-textual">Pro Drupal Development.</textual></emphasis><textual class="po-textual"> 
            ISBN-10: 1590597559. First edition.
            APress Â© 2007. [cited 08 Apr 2011].
            </textual><link class="po-inline e969 e969" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.amazon.com/Pro-Drupal-Development-John-VanDyk/dp/1590597559/</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e970 e970" xml:id="virtuoso" xreflabel="Virtuoso Universal Server"><textual class="po-textual">
            </textual><emphasis class="po-inline e971 e971" role="ital"><textual class="po-textual">OpenLink Virtuoso Universal Server</textual></emphasis><textual class="po-textual">. [online]. [cited 08 Apr 
            2011]. </textual><link class="po-inline e972 e972" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://virtuoso.openlinksw.com/</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e973 e973" xml:id="virtuosoSparql" xreflabel="Virtuoso SPARQL Tutorial"><textual class="po-textual">
            </textual><emphasis class="po-inline e974 e974" role="ital"><textual class="po-textual">Virtuoso SPARQL Tutorial, Part 2</textual></emphasis><textual class="po-textual">. [online]. [cited 08 Apr 
            2011]. </textual><link class="po-inline e975 e975" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://virtuoso.openlinksw.com/presentations/SPARQL_Tutorials/SPARQL_Tutorials_Part_2/SPARQL_Tutorials_Part_2.html</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e976 e976" xml:id="vocabutek" xreflabel="Vocabutek Web Site"><textual class="po-textual">
            </textual><emphasis class="po-inline e977 e977" role="ital"><textual class="po-textual">Ron Reck's demo site</textual></emphasis><textual class="po-textual">. [online] [cited 08 Apr 2011].
            </textual><link class="po-inline e978 e978" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.vocabutek.com/</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e979 e979" xml:id="billboardAlbums" xreflabel="Whitburn 2006"><textual class="po-textual">
            Whitburn, Joel. </textual><emphasis class="po-inline e980 e980" role="ital"><textual class="po-textual">The Billboard Albums</textual></emphasis><textual class="po-textual">. 
            ISBN-13 0-89820-166-7. Sixth edition.
            Record Research Inc. Â© 2006. 
            [Data from 1956-2006; other editions are entitled </textual><emphasis class="po-inline e981 e981" role="ital"><textual class="po-textual">Top Pop Albums</textual></emphasis><textual class="po-textual">.]
            </textual><link class="po-inline e982 e982" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">https://www.recordresearch.com</textual></link><textual class="po-textual">
        </textual></bibliomixed></bibliography></article></classedDocument>