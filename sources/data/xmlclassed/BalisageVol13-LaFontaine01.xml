<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.3"><title class="po-block e1 e1"><textual class="po-textual">Standard Change Tracking for XML</textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">Balisage: The Markup Conference 2014</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 5 - 8, 2014</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual">XML is generally accepted as the default markup language for structured document
                and data management systems worldwide. But, in spite of the fact that XML document
                standards have matured over the past decade and despite its widespread use, XML
                still has a significant shortcoming that limits its usefulness in this role. It has
                no native ability to track changes. There is rudimentary support for change tracking
                in some document formats, but a full solution is not available. The consensus
                emerging is that this is an XML problem rather than a DITA, DocBook or XHTML
                problem.</textual></para><para class="po-block e8 e8"><textual class="po-textual">A generic change-tracking standard would transform the utility of XML. It would
                allow documents to be moved from one XML editor to another, complete with change
                history and the ability to roll back to previous versions; it would allow editing
                applications to track changes in any XML document type; and software designed to
                handle change in XML could be applied to many different XML document types.</textual></para><para class="po-block e9 e9"><textual class="po-textual">The W3C now has a Community Group (W3C Change Community Group
                http://www.w3.org/community/change/) looking into developing a standard solution.
                This paper outlines one proposed solution to this important problem.</textual></para><para class="po-block e10 e10"><textual class="po-textual">The purpose of the proposed change tracking format is to represent successive
                changes or edits to an XML document, typically in one or more editing sessions. This
                paper describes how such changes may be represented in XML markup or in Processing
                Instructions. The tracked changes are designed to be used either as an independent
                addition to a file or integrated into the applicable schema.</textual></para></abstract><author class="po-record e11 e11"><personname class="po-record e12 e12"><firstname class="po-field e13 e13"><textual class="po-textual">Robin</textual></firstname><surname class="po-field e14 e14"><textual class="po-textual">La Fontaine</textual></surname></personname><personblurb class="po-container e15 e15"><para class="po-block e16 e16"><textual class="po-textual">Robin is the founder and CEO of DeltaXML. He holds an Engineering Science
                    degree from Oxford University and an MSc in Computer Science. His background
                    includes computer aided design software and he has been addressing the
                    challenges and opportunities associated with information change for many
                    years.</textual></para></personblurb></author><legalnotice class="po-container e17 e17"><para class="po-block e18 e18"><textual class="po-textual">Copyright © 2014 DeltaXML Limited. All Rights Reserved.</textual></para></legalnotice></info><section class="po-hcontainer e19 e19"><title class="po-block e20 e20"><textual class="po-textual">Introduction and Background</textual></title><para class="po-block e21 e21"><textual class="po-textual">The lack of any standardised change-tracking capability in XML document formats places
            a real constraint on the potential of an otherwise universally accepted tool for
            document and data management. For while change tracking is commonly available in most
            other document editing systems, the change-tracking capability of XML editors is
            typically fairly basic; many do not track attribute changes and there is no common
            standard. The result is that documents with changes tracked cannot be moved between XML
            editors unless some form of transformation is applied, and this can result in loss of
            information.</textual></para><para class="po-block e22 e22"><textual class="po-textual">There is a real opportunity to make XML much more powerful by creating a standard way
            to track changes in XML documents which would mean that:</textual></para><itemizedlist class="po-table e23 e23"><listitem class="po-container e24 e24"><para class="po-block e25 e25"><textual class="po-textual">documents with tracked changes could be moved from one XML editor to
                    another</textual></para></listitem><listitem class="po-container e26 e26"><para class="po-block e27 e27"><textual class="po-textual">XML editors could track changes in any XML document type</textual></para></listitem><listitem class="po-container e28 e28"><para class="po-block e29 e29"><textual class="po-textual">every XML document type could include a change history and the ability to
                    roll-back to previous versions</textual></para></listitem><listitem class="po-container e30 e30"><para class="po-block e31 e31"><textual class="po-textual">software designed to handle change in XML could be applied to many different
                    XML document types</textual></para></listitem></itemizedlist><para class="po-block e32 e32"><textual class="po-textual">Today, every XML document type takes its own approach to change tracking. For example,
            OOXML is built on the underlying binary model within Microsoft Word; ODF has only a
            limited capability to track some changes; DITA uses rev and status attributes to
            indicate changes and DocBook similarly has a revisionflag attribute - but neither can
            track attribute or structural changes.</textual></para><para class="po-block e33 e33"><textual class="po-textual">XML editors track changes either by additional markup or using Processing Instructions
            (PI). Additional markup has the advantage of structure but at the cost of modifying the
            underlying schema. PIs have the advantage of preserving the latest state of the document
            in valid XML markup but the PIs do not have structure and so are limited in the changes
            they can track. </textual></para><para class="po-block e34 e34"><textual class="po-textual">This paper introduces a possible solution that takes into account the current
            approaches, building on their strengths and addressing their weaknesses. The primary use
            case here is tracking the successive changes that are made to a document by a single
            editor over some period of time. The format does not address the issue of merging
            changes from a number of different editors, or merging different versions of a single
            document that have been independently edited. The format does cater for the situation
            where there is a dependency between changes, for example modifying a word in an inserted
            paragraph; in this situation, the word modification change depends on the paragraph
            insertion change. It should always be possible to reject each change in reverse order,
            i.e. starting with the last change and moving back through earlier changes, and thus end
            up with the original document.</textual></para><section class="po-hcontainer e35 e35"><title class="po-block e36 e36"><textual class="po-textual">Status</textual></title><para class="po-block e37 e37"><textual class="po-textual">This work was originally done to demonstrate how change tracking within the Open
                Document Format (ODF) could be improved and extended but was subsequently offered to
                the wider XML community when the ODF Committee opted, instead, to track edit
                operations rather than changes, using an Operational Transformation approach – a
                solution that could not be applied in a generic way to benefit other XML
                groups</textual></para><para class="po-block e38 e38"><textual class="po-textual">This proposal was submitted to a Community Group established by the W3C in 2012 to
                explore change tracking [</textual><xref class="po-milestone e39 e39" linkend="W3C-group"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. There is also a sandbox [</textual><xref class="po-milestone e40 e40" linkend="sandbox"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] to demonstrate how it works in an interactive way. The
                approach was implemented and a large number of examples were created and validated
                against a Schematron rule set [</textual><xref class="po-milestone e41 e41" linkend="examples"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. XSLT style sheets were
                also written to extract the final version from a change-tracked document and to undo
                the latest change in a change-tracked document.</textual></para><para class="po-block e42 e42"><textual class="po-textual">The OpenDocument Format (ODF) is used in the worked examples in this paper.</textual></para><para class="po-block e43 e43"><textual class="po-textual">The original work was supported with a grant from Stichting NLnet.</textual></para></section><section class="po-hcontainer e44 e44"><title class="po-block e45 e45"><textual class="po-textual">State-of-the-art for XML Change Tracking</textual></title><para class="po-block e46 e46"><textual class="po-textual">There are many different approaches to tracking document changes in XML. A fuller
                review of different approaches can be found in [</textual><xref class="po-milestone e47 e47" linkend="lafontaine-xmlprague"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], which looks at different use cases for situations where change to XML is
                important and reviews the different approaches used by some of the more popular
                formats, including OpenDocument, Open XML, DocBook, DITA and editors including
                XMetaL, oXygen and Xopus.  </textual></para><para class="po-block e48 e48"><textual class="po-textual">In this paper we will use some of those examples of change tracking in current
                systems in order to provide some context to the later presentation of the approach
                being considered within the W3C Community Group.</textual></para><para class="po-block e49 e49"><textual class="po-textual">There are several different ways of representing changes in XML. Although in
                general these are applied to the changes between two documents, some of them can be
                extended to show or represent changes between multiple documents, or multiple
                versions of the same document. It is interesting to note that all the examples use
                an in-line representation of changes, i.e. the changes are represented within the
                document itself, rather than as a separate file.</textual></para><para class="po-block e50 e50"><textual class="po-textual">It is not possible, in this paper, to do a complete review of the capabilities of
                all the existing change tracking systems, and the small example below does not do
                justice to their capabilities. They each have different capabilities for
                representing changes such as changes to attributes, changes to formatting, and
                changes to structure. Perhaps the greatest challenge to any change tracking
                mechanism is the ability to represent changes to structure, and this includes the
                well-known problem of representing overlapping hierarchies [</textual><xref class="po-milestone e51 e51" linkend="Overlapping"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], but with the added twist that the content has also
                typically changed. Although a detailed discussion of this is beyond the scope of
                this paper, the proposal does address this issue, which is important in the context
                of document editing.</textual></para><para class="po-block e52 e52"><textual class="po-textual">The example used here is to change "The </textual><emphasis class="po-inline e53 e53" role="bold"><textual class="po-textual">very</textual></emphasis><textual class="po-textual"> quick
                brown fox jumped over lazy dog." to "The quick brown fox jumped over </textual><emphasis class="po-inline e54 e54" role="bold"><textual class="po-textual">the</textual></emphasis><textual class="po-textual"> lazy dog.", where </textual><emphasis class="po-inline e55 e55" role="bold"><textual class="po-textual">bold</textual></emphasis><textual class="po-textual">
                text shows changes. The examples have been shortened by removing some information that
                is not relevant to the discussion, and have been pretty-printed for clarity.</textual></para><section class="po-hcontainer e56 e56"><title class="po-block e57 e57"><textual class="po-textual">Line based diff</textual></title><para class="po-block e58 e58"><textual class="po-textual">The traditional output of the UNIX </textual><code class="po-atom e59 e59"><textual class="po-textual">diff</textual></code><textual class="po-textual"> utility shows changes between
                    two text documents on a line by line basis. It is obviously possible to show
                    differences between two XML documents in a similar way.
                    </textual><programlisting class="po-block e60 e60" xml:space="preserve"><textual class="po-textual">&lt;         &lt;p&gt;The very quick brown fox jumped over lazy dog.&lt;/p&gt;
---
&gt;         &lt;p&gt;The quick brown fox jumped over the lazy dog.&lt;/p&gt;</textual></programlisting></para><para class="po-block e61 e61"><textual class="po-textual">This representation has a number of limitations for XML because of its sytnax and
                    tree structure neither of which is reflected in the line-based structure. It may be
                    useful to accept or reject changes based on lines for a regular text document, but
                    this is unlikely to work for an XML document where the structure is often easily
                    destroyed by moving lines from one document to another.</textual></para></section><section class="po-hcontainer e62 e62"><title class="po-block e63 e63"><textual class="po-textual">Processing instructions</textual></title><para class="po-block e64 e64"><textual class="po-textual">Because processing instructions are in effect external to the main structure
                    of an XML document, they are commonly used to mark additions and deletions in
                    XML editors. Examples include XMetaL [</textual><xref class="po-milestone e65 e65" linkend="XMetaL"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], Xopus [</textual><xref class="po-milestone e66 e66" linkend="Xopus"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], and oXygen [</textual><xref class="po-milestone e67 e67" linkend="oXygen"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].</textual></para><para class="po-block e68 e68"><textual class="po-textual">One of the great advantages of using processing instructions to represent changes
                    is that the underlying XML file can still be validated by ignoring the processing
                    instructions. This implies that any deleted content will be within a processing
                    instruction, and any added content will be marked by a start and end marker, each of
                    which is a processing
                    instruction.</textual><programlisting class="po-block e69 e69" xml:space="preserve"><textual class="po-textual">&lt;topic id="topic-1"&gt;
    &lt;title&gt;Topic title&lt;/title&gt;
    &lt;body&gt;
        &lt;p&gt;The &lt;?oxy_delete author="robin" 
                timestamp="20100113T140621+0000"
                content="very"?&gt; quick
            brown fox jumped over
            &lt;?oxy_insert_start author="robin" 
            timestamp="20100113T140625+0000"?&gt;the
            &lt;?oxy_insert_end?&gt;lazy dog.&lt;/p&gt;
    &lt;/body&gt;
    &lt;/topic&gt;</textual></programlisting></para><para class="po-block e70 e70"><textual class="po-textual">In this example, you can see that if all of the processing instructions are
                    removed, the result is a valid file which represents all the changes being
                    accepted.</textual></para></section><section class="po-hcontainer e71 e71"><title class="po-block e72 e72"><textual class="po-textual">Revision flags</textual></title><para class="po-block e73 e73"><textual class="po-textual"> Attributes are often used to show revisions to parts of an XML document in order
                    to generate output showing where a document has been revised. This mechanism is
                    built into the XML format itself, and any processor would need to know about this in
                    order to reflect the changes. Examples include DocBook and
                    DITA.</textual><programlisting class="po-block e74 e74" xml:space="preserve"><textual class="po-textual">&lt;topic xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/"&gt;
    &lt;title&gt;Topic title&lt;/title&gt;
    &lt;body&gt;
        &lt;p&gt;The &lt;ph rev="deltaxml-delete"&gt;very &lt;/ph&gt;
                quick brown fox jumped over 
                &lt;ph rev="deltaxml-add"&gt;the &lt;/ph&gt;lazy dog.&lt;/p&gt;
    &lt;/body&gt;
&lt;/topic&gt;
</textual></programlisting></para><para class="po-block e75 e75"><textual class="po-textual">In this example, the revision flags have been inserted by comparing two versions
                    of a document, and putting revision flags around text that has been either added or
                    deleted. The added or deleted text can then be decorated in the publishing pipeline,
                    either to PDF or HTML.</textual></para></section><section class="po-hcontainer e76 e76"><title class="po-block e77 e77"><textual class="po-textual">Tracked changes</textual></title><para class="po-block e78 e78"><textual class="po-textual"> Some document formats use a more sophisticated version of revision flags to
                    show where text has been added or deleted. These tracked changes are represented
                    in the XML structure, and the editing system may enable the editor to accept or
                    reject them. Tracked changes are typically not able to represent all the
                    possible changes to a document, but will satisfy the needs of a typical editor.
                    Examples include Arbortext, OpenDocument Format (ODF) and Open XML. </textual></para><para class="po-block e79 e79"><textual class="po-textual">The example below is Arbortext track change format, which unlike other XML
                    editors uses markup to show changes.</textual><programlisting class="po-block e80 e80" xml:space="preserve"><textual class="po-textual">&lt;para&gt;
	The 
	&lt;atict:del user="deltaxml" time="1403627577"&gt;
		very
	&lt;/atict:del&gt;
	quick brown fox jumped over 
	&lt;atict:add user="deltaxml" time="1403627577"&gt;
		the
	&lt;/atict:add&gt;
	lazy dog. 
&lt;/para&gt; </textual></programlisting></para><para class="po-block e81 e81"><textual class="po-textual">The example below is OpenDocument text format,
                    ODT.</textual><programlisting class="po-block e82 e82" xml:space="preserve"><textual class="po-textual">&lt;office:body&gt;
	&lt;office:text&gt;
		&lt;text:tracked-changes&gt;
			&lt;text:changed-region text:id="ct528047904"&gt;
				&lt;text:deletion&gt;
					&lt;text:p text:style-name="Standard"&gt;
						very
					&lt;/text:p&gt;
				&lt;/text:deletion&gt;
			&lt;/text:changed-region&gt;
			&lt;text:changed-region text:id="ct645104016"&gt;
				&lt;text:insertion /&gt;
			&lt;/text:changed-region&gt;
		&lt;/text:tracked-changes&gt;
		&lt;text:p text:style-name="Standard"&gt;
			The 
			&lt;text:change text:change-id="ct528047904" /&gt;
			&lt;text:s /&gt;
			quick brown fox jumped over 
			&lt;text:change-start text:change-id="ct645104016" /&gt;
			the 
			&lt;text:change-end text:change-id="ct645104016" /&gt;
			lazy dog.
		&lt;/text:p&gt;
	&lt;/office:text&gt;
&lt;/office:body&gt;</textual></programlisting></para><para class="po-block e83 e83"><textual class="po-textual">In this example of tracked changes, notice that the deleted text is held in a
                    separate place from the main body text. This means that the main body of the
                    document is very close to the new version of the document, i.e. with all the changes
                    accepted. However, it is not trivial to reinsert the deleted text in its correct
                    position, with all of the text decoration intact.</textual></para><para class="po-block e84 e84"><textual class="po-textual">Microsoft Word also has a change tracking mechanism using a similar in-line
                    markup, though the deleted text is held in situ, as shown below.</textual><programlisting class="po-block e85 e85" xml:space="preserve"><textual class="po-textual">&lt;w:body&gt;
	&lt;w:p w:rsidR="00D41E6C" w:rsidRDefault="005B7EF1"&gt;
		&lt;w:r&gt;
			&lt;w:t xml:space="preserve"&gt;
				The 
			&lt;/w:t&gt;
		&lt;/w:r&gt;
		&lt;w:del w:id="0" w:author="Robin La Fontaine" w:date="2014-06-24T16:07:00Z"&gt;
			&lt;w:r w:rsidDel="005B7EF1"&gt;
				&lt;w:delText xml:space="preserve"&gt;
					very 
				&lt;/w:delText&gt;
			&lt;/w:r&gt;
		&lt;/w:del&gt;
		&lt;w:r&gt;
			&lt;w:t xml:space="preserve"&gt;
				quick brown fox jumped over 
			&lt;/w:t&gt;
		&lt;/w:r&gt;
		&lt;w:ins w:id="1" w:author="Robin La Fontaine" w:date="2014-06-24T16:08:00Z"&gt;
			&lt;w:r&gt;
				&lt;w:t xml:space="preserve"&gt;
					the 
				&lt;/w:t&gt;
			&lt;/w:r&gt;
		&lt;/w:ins&gt;
		&lt;w:r&gt;
			&lt;w:t&gt;
				lazy dog.
			&lt;/w:t&gt;
		&lt;/w:r&gt;
	&lt;/w:p&gt;
&lt;/w:body&gt;
</textual></programlisting></para></section><section class="po-hcontainer e86 e86"><title class="po-block e87 e87"><textual class="po-textual">Generic XML deltas</textual></title><para class="po-block e88 e88"><textual class="po-textual">A delta file can be defined such that it represents the differences between
                    two arbitrary XML documents, in XML. Any XML format that is capable of updating
                    one XML document into another could be described as a generic delta, for example
                    XQuery Update Facility[</textual><xref class="po-milestone e89 e89" linkend="XQuery"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], XSLT [</textual><xref class="po-milestone e90 e90" linkend="XSLT"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]
                    or DeltaXML [</textual><xref class="po-milestone e91 e91" linkend="DeltaXML"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. Typically this will operate in one
                    direction only (XQuery Update Facility, XSLT), though a symmetrical
                    representation is also possible (DeltaXML). The delta may be a transformation,
                    defining how to get from one document to another, or a data representation,
                    defining what is different between the documents.</textual></para><para class="po-block e92 e92"><textual class="po-textual">XQuery Update Facility and XSLT are both declarative transformations and can
                    represent complex changes. They are intended to be executable transformations
                    between two XML documents and will, in conjunction with the execution engine,
                    convert one document into another. They are not intended to be used as a
                    change-tracking mechanism. They do not meet any of the needs of the use case
                    scenarios described here. </textual></para><para class="po-block e93 e93"><textual class="po-textual">A delta file that is a data representation describes, in some way, the
                    differences between two documents. A useful derivation of such a generic XML
                    delta file would be one that contained not only the changes but also the
                    original data, all in XML. Both of the original documents could be generated
                    from such a delta representation. Ideally such a delta representation would not
                    duplicate content that is common to the two documents. It is possible to
                    transform this type of data representation into any of the other types of
                    representation listed above, although the reverse is in general not possible.
                    Therefore this generic delta representation is very versatile. An example of
                    this is the full-context delta used by DeltaXML, shown in the example
                    below.</textual><programlisting class="po-block e94 e94" xml:space="preserve"><textual class="po-textual">&lt;para deltaxml:deltaV2="A!=B" 
        deltaxml:version="2.0" 
        deltaxml:content-type="full-context"&gt;
	The 
	&lt;deltaxml:textGroup deltaxml:deltaV2="A"&gt;
		&lt;deltaxml:text deltaxml:deltaV2="A"&gt;
			very 
		&lt;/deltaxml:text&gt;
	&lt;/deltaxml:textGroup&gt;
	quick brown fox jumped over 
	&lt;deltaxml:textGroup deltaxml:deltaV2="B"&gt;
		&lt;deltaxml:text deltaxml:deltaV2="B"&gt;
			the 
		&lt;/deltaxml:text&gt;
	&lt;/deltaxml:textGroup&gt;
	lazy dog. 
&lt;/para&gt;</textual></programlisting></para><para class="po-block e95 e95"><textual class="po-textual">In this example, all of the data from both documents, A and B, is present and has
                    the same look and feel as the original documents. The delta element wrappers and
                    attributes indicate where the documents differ. Either version of the document can
                    quite easily be extracted from this representation, for example using XSLT or
                    XQuery. Note that the actual delta file will not comply with the original DTD/schema
                    because of the additional delta wrapper elements and attributes, but each version
                    that is extracted will be valid against the DTD/schema. Although not shown in this
                    example, the format is capable of representing changes to attributes and elements as
                    well as text. The format also extends to represent changes between more than two
                    documents, for example the changes between two concurrent edits and the document
                    from which the edits are derived.</textual></para><para class="po-block e96 e96"><textual class="po-textual"> However, this representation is not well-suited to the change tracking
                    scenario where a large number of small changes need to be represented. This is
                    because the representation has quite large overhead for small changes, and it is
                    focused on the problem of representing a large number of changes between a small
                    number of documents, rather than a large number of changes to a single
                    document.</textual></para></section></section></section><section class="po-hcontainer e97 e97"><title class="po-block e98 e98"><textual class="po-textual">Approach to Standard Change Tracking for XML</textual></title><para class="po-block e99 e99"><textual class="po-textual">Generic change tracking for XML is a complex problem. It needs to cover not only
            addition, deletion and modification of elements and attributes but also changes to the
            XML structure, for example when a paragraph element is split into two, or a &lt;div/&gt;
            element is wrapped around some other elements. A solution which would meet all the
            requirements of XML change tracking would inevitably be complex, but it may not be
            essential for many applications. </textual></para><para class="po-block e100 e100"><textual class="po-textual">A more simple approach can produce significant and useful results and this is covered
            in the basic change tracking capability described as Level 1, which is the subject of
            this paper. Moving to a more powerful solution will give a better user experience but at
            the cost of increased complexity. This is covered in Level 2.</textual></para><para class="po-block e101 e101"><textual class="po-textual">Level 1 provides the ability to modify attributes, add and delete elements, and add
            and delete text. It also enables changes to be grouped into transactions where a single
            transaction moves the document from one valid state to another. Changes can be
            represented as markup or PIs in a way that allows loss-less transformation between them,
            thus gaining the advantages of both. </textual></para><para class="po-block e102 e102"><textual class="po-textual">Level 2 adds to this the ability to add or delete element structure around existing
            content and to split and merge elements in more complex ways. In terms of changes to XML
            documents, the content (typically text) takes priority over the structure (typically
            paragraphs, tables and text decoration). In other words, an editor does not want to see
            change to content when only the structure or styling has been changed. As an example of
            this, when a newline is inserted in the middle of a paragraph, i.e. to split it into two
            paragraphs, the editor does not expect to see change to those paragraphs but rather the
            insertion of a new line. This does not always fit well with the underlying XML
            structure, and could not be represented in Level 1. Level 2 addresses this, but it is a
            complex issue and the solution is therefore more complicated. We do not cover Level 2 in
            this paper, but this is covered in detail in [</textual><xref class="po-milestone e103 e103" linkend="proposal"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].</textual></para><section class="po-hcontainer e104 e104"><title class="po-block e105 e105"><textual class="po-textual">Validation</textual></title><para class="po-block e106 e106"><textual class="po-textual">The proposed change tracking format avoids complex semantic rules relating to the
                correctness of changes. Rather it takes a generic approach so that almost any change
                can be represented, and then defines correctness in terms of the validity of the
                state before and after the change. This enables a simple, intuitive and powerful
                statement for the validity of a change (and this may include syntactic and semantic
                validity): if the document before the change is valid and the document after the
                change is valid, then the change is valid.</textual></para></section><section class="po-hcontainer e107 e107"><title class="po-block e108 e108"><textual class="po-textual">Discarding Changes</textual></title><para class="po-block e109 e109"><textual class="po-textual">The format takes account of the task of a reader application that may not be able
                to understand changes at all or in certain areas. For example, if a reader is unable
                to represent any changes, it must be easy to read in the latest version of a
                document. This would also apply to individual fragments or subtrees within the
                document.</textual></para></section><section class="po-hcontainer e110 e110"><title class="po-block e111 e111"><textual class="po-textual">Complex Changes</textual></title><para class="po-block e112 e112"><textual class="po-textual">A single action by an editor may generate changes in a number of different places
                in the document. For example, a global change or 'replace all' will generate changes
                throughout a document, or deleting a column in a table will generate several
                disjoint changes in the underlying XML representation. Therefore there is clearly a
                need to represent a number of small atomic changes as a single action. Also the
                format provides some flexibility in the way these can be grouped, so that for
                example a global change can be accepted/rejected in one action or each change
                handled separately.</textual></para></section><section class="po-hcontainer e113 e113"><title class="po-block e114 e114"><textual class="po-textual">Overhead and Readability</textual></title><para class="po-block e115 e115"><textual class="po-textual">A localised change should have a simple, intuitive, and localised representation
                within a document. For example, when an attribute is changed the format should not
                generate a large amount of structure to represent that change. On the other hand,
                the format should not require a lot of parsing of attribute values or other
                information in order to determine the nature of a change. These criteria may
                conflict, and in such cases a balance between these issues should be sought and
                explained.</textual></para></section><section class="po-hcontainer e116 e116"><title class="po-block e117 e117"><textual class="po-textual">Representation in XML</textual></title><para class="po-block e118 e118"><textual class="po-textual">This proposal includes alternative representations for the changes in XML, i.e.
                markup and Processing Instructions (PIs). The reason for this is that markup is the
                proper native XML way to represent such information but has the significant
                disadvantage that it affects the nature of the document. On the other hand, if all
                changes are wrapped in PIs, then the document remains as a ‘normal’ document and can
                be validated and processed as usual because the PIs are simply discarded on reading
                the document. The approach taken is, in general, to convert the outermost change
                tracking element into a PI and wrap everything else within it. Therefore the
                conversion to and from PIs is quite simple and there is only one structure that
                needs to be defined. This approach may be too simple in practice and further
                development may be needed here. Attribute changes present a particular problem, and
                a view must be taken on whether it is best to represent these before or after the
                start tag of an element.</textual></para></section></section><section class="po-hcontainer e119 e119"><title class="po-block e120 e120"><textual class="po-textual">Definitions and underlying rules</textual></title><section class="po-hcontainer e121 e121"><title class="po-block e122 e122"><textual class="po-textual">Atomic Change: the basic building block</textual></title><para class="po-block e123 e123"><textual class="po-textual">An Atomic Change is a change such as the addition of an element or removal of an
                attribute, which represents a single syntactic change. The representation may
                involve more than one element or attribute. It is not appropriate to limit an Atomic
                Change to one that cannot be subdivided. For example, the deletion of an element and
                its contents, i.e. its attributes and children, is considered to be atomic, whereas
                in principle this could be split into a collection of atomic changes that removes
                each leaf node in the XML structure. Further, even these leaf nodes could in
                principle have their textual content removed one character at a time. Forcing
                systems to record change at this level of detail is inappropriate.</textual></para><para class="po-block e124 e124"><textual class="po-textual">Each atomic change is part of one and only one Change Transaction (CT), described
                later. This is enforced because each atomic change references the ID of the CT to
                which it belongs. This grouping is very important, because it means that we can form
                a change out of any number of atomic changes. This implies that we only need a few
                atomic change operations, and these can be combined in complex ways to create
                CTs.</textual></para></section><section class="po-hcontainer e125 e125"><title class="po-block e126 e126"><textual class="po-textual">Change Transaction: a change from one valid state to another</textual></title><para class="po-block e127 e127"><textual class="po-textual">A Change Transaction (CT) consists of one or more Atomic Changes, and is uniquely
                identified by an identifier (ID). If more than one Atomic Change is involved, there
                is no ordering of these, they are considered to happen as a single operation. A CT
                is therefore an indivisible change, which is represented as a single
                transaction.</textual></para><para class="po-block e128 e128"><textual class="po-textual">One CT may depend on others. In other words, it may not be possible to apply a
                particular CT unless some other CT on which it depends is applied first. For
                example, if some text has been added, and then one of the words is deleted, it is
                not possible to accept the deletion if the addition has been rejected.</textual></para><para class="po-block e129 e129"><textual class="po-textual">Where a document has more than one CT, the order of the CTs must be defined. If we
                want to support an undo operation, then the ordering would be important. In general,
                changes made by an editor are done in a certain order, because a particular change
                may depend on a previous change. This ordering therefore represents the default
                dependency, i.e. by default each CT depends on all the previous CTs. A particular
                application may be able to provide more intelligent information on the dependencies,
                and this is achieved with grouping.</textual></para></section><section class="po-hcontainer e130 e130"><title class="po-block e131 e131"><textual class="po-textual">Change Transaction grouping: controlling interaction and dependency</textual></title><para class="po-block e132 e132"><textual class="po-textual">CTs can be grouped either in a specific order (CT Stack) or as a set (CT Set).
                These groupings are for convenience, for example to allow a global edit (change
                all), or an editing session, to be undone in one operation. A CT group may only
                reference previously-defined CTs or CT groups, to avoid circular definitions.</textual></para></section><section class="po-hcontainer e133 e133"><title class="po-block e134 e134"><textual class="po-textual">Final state of a document: discard all the tracked changes</textual></title><para class="po-block e135 e135"><textual class="po-textual">The final version of a document is the final state of its root element. The final
                state of an element is the element and its attributes and the final state of all its
                content. When determining the final state, any deleted element is ignored, and the
                change history of any attributes is ignored. The format is designed so that the
                final state of a document can be determined by simply ignoring certain elements,
                ignoring elements with particular attributes and ignoring some attributes. For the
                PI representation, it is simply necessary to ignore all the Pis.</textual></para></section><section class="po-hcontainer e136 e136"><title class="po-block e137 e137"><textual class="po-textual">Validation</textual></title><para class="po-block e138 e138"><textual class="po-textual">A CT is valid if the document before the CT is valid, and the document after the
                CT is applied is valid. This is a very simple definition of semantic correctness,
                and means therefore that we do not need a lot of complex rules about what
                combination of changes are correct.</textual></para><para class="po-block e139 e139"><textual class="po-textual">Therefore we can say that a document is valid if its final state is valid and all
                the CTs it contains are valid. We are using the term ‘valid’ here to mean whatever
                validation is relevant to the document, including any relevant syntax and semantic
                rules.</textual></para></section><section class="po-hcontainer e140 e140"><title class="po-block e141 e141"><textual class="po-textual">Additions, deletions and moves</textual></title><para class="po-block e142 e142"><textual class="po-textual">An element can only come into existence once and go out of existence once. Once an
                element has gone out of existence, or died, no further changes can be made to that
                element or its content. This is an important (but also intuitive) simplification
                because it means we do not need to cater for elements going out of existence and
                then coming back into existence again, which would make the format much more
                complex.</textual></para></section><section class="po-hcontainer e143 e143"><title class="po-block e144 e144"><textual class="po-textual">Moves: one or more additions linked to a deletion</textual></title><para class="po-block e145 e145"><textual class="po-textual">Text and/or elements may be moved to one or more other locations in a document.
                This is represented as an element being deleted from one place and added in one or
                more other places in the document. The change history of an element is not moved
                with the element. </textual></para><para class="po-block e146 e146"><textual class="po-textual">Content that has been moved from position A to position B can be moved again from
                B but it is deleted from A and so cannot be moved from A in a later
                operation.</textual></para></section><section class="po-hcontainer e147 e147"><title class="po-block e148 e148"><textual class="po-textual">Namespaces</textual></title><para class="po-block e149 e149"><textual class="po-textual">The namespaces are defined as follows (the deltaxml.com namespace is only used as
                an example):</textual></para><programlisting class="po-block e150 e150" xml:space="preserve"><textual class="po-textual">xmlns:delta="http://www.deltaxml.com/ns/track-changes/delta-namespace"
xmlns:ac="http://www.deltaxml.com/ns/track-changes/attribute-change-namespace"</textual></programlisting></section></section><section class="po-hcontainer e151 e151"><title class="po-block e152 e152"><textual class="po-textual">Change Transaction (CT) Structure</textual></title><para class="po-block e153 e153"><textual class="po-textual">There must be a position in the document where the change transactions are defined,
            each being identified by an identifier (ID). Each will have some associated meta
            information such as the name of the author who made the change, and the date.</textual></para><para class="po-block e154 e154"><textual class="po-textual">The ordering of the change transactions is important. If a user wishes to undo the
            changes one by one, then this can be achieved by undoing the change transaction at the
            end of the list and then moving up the list.</textual></para><para class="po-block e155 e155"><textual class="po-textual">As mentioned above, it is also possible to group CTs in a change transaction group (CT
            group). This will have similar meta information to a CT, and will reference CTs or other
            CT groups that it groups together, i.e. that are its members. Again, all the members
            must be previously-defined CT or CT groups. The effect of undoing a CT group will be to
            undo a number of CTs, which would then be removed from the list.</textual></para><para class="po-block e156 e156"><textual class="po-textual">A software application that does not understand this grouping can ignore the groups,
            and the result will be some loss of structure but no effect on the underlying tracked
            changes. It is only a CT that has an effect on the document, the CT groups merely
            provide structure for user convenience.</textual></para><para class="po-block e157 e157"><textual class="po-textual">A CT group may be ordered (CT stack, delta:change-transaction-stack) or unordered (CT
            set, delta:change-transaction-set). The members of a CT set can be accepted or rejected
            in any order. The members of a CT stack must be accepted or rejected in the defined
            order, i.e. undo last member first. </textual></para><para class="po-block e158 e158"><textual class="po-textual">Example:</textual></para><programlisting class="po-block e159 e159" xml:space="preserve"><textual class="po-textual">
&lt;delta:tracked-changes&gt;
    &lt;delta:change-transaction delta:change-id="ct1"&gt;
        &lt;delta:change-info&gt;
            &lt;dc:creator&gt;Robin&lt;/dc:creator&gt;
            &lt;dc:date&gt;2010-06-02T15:48:00&lt;/dc:date&gt;
        &lt;/delta:change-info&gt;
    &lt;/delta:change-transaction&gt;
    &lt;delta:change-transaction delta:change-id="ct2" 
        delta:edit-operation="make-bold"&gt;
        &lt;delta:change-info&gt;
            &lt;dc:creator&gt;Robin&lt;/dc:creator&gt;
            &lt;dc:date&gt;2010-06-02T15:48:01&lt;/dc:date&gt;
        &lt;/delta:change-info&gt;
    &lt;/delta:change-transaction&gt;
    &lt;delta:change-transaction delta:change-id="ct3"
     delta:edit-operation="text-edit"&gt;
        &lt;delta:change-info&gt;
            &lt;dc:creator&gt;Robin&lt;/dc:creator&gt;
            &lt;dc:date&gt;2010-06-02T15:48:01&lt;/dc:date&gt;
        &lt;/delta:change-info&gt;
    &lt;/delta:change-transaction&gt;
    &lt;delta:change-transaction-set delta:change-group-id="cs4"&gt;
        &lt;delta:change-info&gt;
            &lt;dc:creator&gt;Robin&lt;/dc:creator&gt;
            &lt;dc:date&gt;2010-06-02T15:48:01&lt;/dc:date&gt;
        &lt;/delta:change-info&gt;
        &lt;delta:change-log&gt;Global edit&lt;/delta:change-log&gt;
        &lt;delta:change-references&gt;
            &lt;delta:change-ref delta:change-idref="ct2"/&gt;
            &lt;delta:change-ref delta:change-idref="ct3"/&gt;
        &lt;/delta:change-references&gt;
    &lt;/delta:change-transaction-set&gt;
    ...
&lt;/delta:tracked-changes&gt;
</textual></programlisting></section><section class="po-hcontainer e160 e160"><title class="po-block e161 e161"><textual class="po-textual">Tracking Changes: Level 1</textual></title><para class="po-block e162 e162"><textual class="po-textual">This section details the attributes and elements needed to support the representation
            of atomic changes, which are the lowest level changes that can be represented. All
            changes can be represented using these atomic changes. </textual></para><para class="po-block e163 e163"><textual class="po-textual">It is possible to move back from the final version of a document through successive
            changes to previous versions of a document. It may not be easy to extract an arbitrary
            version, but it is always possible to undo the last CT and thus work back through
            versions, i.e. the state between each edit action or CT.</textual></para><section class="po-hcontainer e164 e164"><title class="po-block e165 e165"><textual class="po-textual">Change Tracking attributes: Level 1</textual></title><informaltable border="1" class="po-container e166 e166"><col class="po-meta e167 e167" span="1" width="120"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></col><col class="po-meta e168 e168" span="1" width="172"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></col><col class="po-meta e169 e169" span="1" width="318"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></col><tr class="po-table e170 e170" valign="top"><td class="po-block e171 e171" colspan="1" rowspan="1"><emphasis class="po-inline e172 e172" role="bold"><textual class="po-textual">Attribute </textual></emphasis></td><td class="po-block e173 e173" colspan="1" rowspan="1"><emphasis class="po-inline e174 e174" role="bold"><textual class="po-textual">Values</textual></emphasis></td><td class="po-block e175 e175" colspan="1" rowspan="1"><emphasis class="po-inline e176 e176" role="bold"><textual class="po-textual">Description</textual></emphasis></td></tr><tr class="po-table e177 e177" valign="top"><td class="po-block e178 e178" colspan="1" rowspan="1"><textual class="po-textual">delta:insertion-type</textual></td><td class="po-block e179 e179" colspan="1" rowspan="1"><textual class="po-textual">'insert-with-content'</textual></td><td class="po-block e180 e180" colspan="1" rowspan="1"><textual class="po-textual">Indicates how an element was created. Absence means
                        the element existed in the oldest version of the document.</textual></td></tr><tr class="po-table e181 e181" valign="top"><td class="po-block e182 e182" colspan="1" rowspan="1"><textual class="po-textual">delta:insertion-change-idref</textual></td><td class="po-block e183 e183" colspan="1" rowspan="1"><textual class="po-textual">References a delta:change-id</textual></td><td class="po-block e184 e184" colspan="1" rowspan="1"><textual class="po-textual">References the CT that brought this element into
                        existence. Present on all elements with an delta:insertion-type
                        attribute.</textual></td></tr><tr class="po-table e185 e185" valign="top"><td class="po-block e186 e186" colspan="1" rowspan="1"><textual class="po-textual">delta:removal-change-idref</textual></td><td class="po-block e187 e187" colspan="1" rowspan="1"><textual class="po-textual">References a delta:change-id</textual></td><td class="po-block e188 e188" colspan="1" rowspan="1"><textual class="po-textual">References the CT that removed some content from the
                        document. Can appear on a delta:removed-content element.</textual></td></tr><tr class="po-table e189 e189" valign="top"><td class="po-block e190 e190" colspan="1" rowspan="1"><textual class="po-textual">ac:XXX</textual></td><td class="po-block e191 e191" colspan="1" rowspan="1"><textual class="po-textual">Details of the attribute change, comma
                        separated</textual></td><td class="po-block e192 e192" colspan="1" rowspan="1"><textual class="po-textual">ac: is a defined namespace, XXX is a generated
                        attribute name, each new XXX represents a change to one attribute.</textual></td></tr><tr class="po-table e193 e193" valign="top"><td class="po-block e194 e194" colspan="1" rowspan="1"><textual class="po-textual">delta:move-id</textual></td><td class="po-block e195 e195" colspan="1" rowspan="1"><textual class="po-textual">Defines an ID for a move</textual></td><td class="po-block e196 e196" colspan="1" rowspan="1"><textual class="po-textual">Can appear on a delta:removed-content or delta:merge
                        element.</textual></td></tr><tr class="po-table e197 e197" valign="top"><td class="po-block e198 e198" colspan="1" rowspan="1"><textual class="po-textual">delta:move-idref</textual></td><td class="po-block e199 e199" colspan="1" rowspan="1"><textual class="po-textual">References an ID for a move</textual></td><td class="po-block e200 e200" colspan="1" rowspan="1"><textual class="po-textual">Can appear on an element with
                        delta:insertion-type='insert-with-content' to indicate the element and
                        content was moved from elsewhere to this place. Can appear on
                        delta:inserted-text-start to indicate the text was moved from elsewhere to
                        this place.</textual></td></tr><tr class="po-table e201 e201" valign="top"><td class="po-block e202 e202" colspan="1" rowspan="1"><textual class="po-textual">delta:change-id</textual></td><td class="po-block e203 e203" colspan="1" rowspan="1"><textual class="po-textual">Defines an ID for a CT</textual></td><td class="po-block e204 e204" colspan="1" rowspan="1"><textual class="po-textual">Identifies a CT</textual></td></tr><tr class="po-table e205 e205" valign="top"><td class="po-block e206 e206" colspan="1" rowspan="1"><textual class="po-textual">delta:inserted-text-end-id</textual></td><td class="po-block e207 e207" colspan="1" rowspan="1"><textual class="po-textual">Defines an ID for a delta:inserted-text-end</textual></td><td class="po-block e208 e208" colspan="1" rowspan="1"><textual class="po-textual">Identifies the end element of a text insertion.</textual></td></tr><tr class="po-table e209 e209" valign="top"><td class="po-block e210 e210" colspan="1" rowspan="1"><textual class="po-textual">delta:inserted-text-end-idref</textual></td><td class="po-block e211 e211" colspan="1" rowspan="1"><textual class="po-textual">Reference to delta:inserted-text-end-id</textual></td><td class="po-block e212 e212" colspan="1" rowspan="1"><textual class="po-textual">Identifies the end element for some inserted
                        text.</textual></td></tr><tr class="po-table e213 e213" valign="top"><td class="po-block e214 e214" colspan="1" rowspan="1"><textual class="po-textual">delta:edit-operation</textual></td><td class="po-block e215 e215" colspan="1" rowspan="1"><textual class="po-textual">Values defined in the standard or by a particular
                        editing application</textual></td><td class="po-block e216 e216" colspan="1" rowspan="1"><textual class="po-textual">Optional on CT, CT set and CT stack to identify the
                        type of edit-operation that this represents, e.g. text-to-table,
                        global-replace, make-bold, libreOffice:macro23 </textual></td></tr></informaltable></section><section class="po-hcontainer e217 e217"><title class="po-block e218 e218"><textual class="po-textual">Change Tracking Elements: Level 1</textual></title><informaltable border="1" class="po-container e219 e219"><col class="po-meta e220 e220" span="1" width="120"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></col><col class="po-meta e221 e221" span="1" width="384"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></col><tr class="po-table e222 e222" valign="top"><td class="po-block e223 e223" colspan="1" rowspan="1"><emphasis class="po-inline e224 e224" role="bold"><textual class="po-textual">Element </textual></emphasis></td><td class="po-block e225 e225" colspan="1" rowspan="1"><emphasis class="po-inline e226 e226" role="bold"><textual class="po-textual">Description</textual></emphasis></td></tr><tr class="po-table e227 e227" valign="top"><td class="po-block e228 e228" colspan="1" rowspan="1"><textual class="po-textual">delta:removed-content</textual></td><td class="po-block e229 e229" colspan="1" rowspan="1"><textual class="po-textual">Contains element, PCDATA or mixed content that has
                        been removed.</textual></td></tr><tr class="po-table e230 e230" valign="top"><td class="po-block e231 e231" colspan="1" rowspan="1"><textual class="po-textual">delta:inserted-text-start</textual></td><td class="po-block e232 e232" colspan="1" rowspan="1"><textual class="po-textual">Identifies the start point of some inserted
                        text.</textual></td></tr><tr class="po-table e233 e233" valign="top"><td class="po-block e234 e234" colspan="1" rowspan="1"><textual class="po-textual">delta:inserted-text-end</textual></td><td class="po-block e235 e235" colspan="1" rowspan="1"><textual class="po-textual">Identifies the end point of some inserted text.</textual></td></tr></informaltable></section><section class="po-hcontainer e236 e236"><title class="po-block e237 e237"><textual class="po-textual">Add an element and its content (insert-with-content)</textual></title><section class="po-hcontainer e238 e238"><title class="po-block e239 e239"><textual class="po-textual">Description</textual></title><para class="po-block e240 e240"><textual class="po-textual">The whole element is added with its content.</textual></para></section><section class="po-hcontainer e241 e241"><title class="po-block e242 e242"><textual class="po-textual">Example</textual></title><para class="po-block e243 e243"><textual class="po-textual">Addition of a paragraph.</textual></para><programlisting class="po-block e244 e244" xml:space="preserve"><textual class="po-textual">&lt;text:p delta:insertion-type="insert-with-content"  
    delta:insertion-change-idref='ct1234'&gt;
This paragraph is inserted.&lt;/text:p&gt;</textual></programlisting><para class="po-block e245 e245"><textual class="po-textual">Example PI:</textual></para><programlisting class="po-block e246 e246" xml:space="preserve"><textual class="po-textual">&lt;text:p&gt;&lt;?delta-tracked-change-attributes delta:insertion-type="insert-with-content"  
    delta:insertion-change-idref='ct1234'?&gt;
This paragraph is inserted.&lt;/text:p&gt;</textual></programlisting></section><section class="po-hcontainer e247 e247"><title class="po-block e248 e248"><textual class="po-textual">Comments and Rationale</textual></title><para class="po-block e249 e249"><textual class="po-textual">An added item may contain changes within it, but the changes must all be after
                    it was added.</textual></para></section></section><section class="po-hcontainer e250 e250"><title class="po-block e251 e251"><textual class="po-textual">Delete an element and its content (remove-with-content)</textual></title><section class="po-hcontainer e252 e252"><title class="po-block e253 e253"><textual class="po-textual">Description</textual></title><para class="po-block e254 e254"><textual class="po-textual">The whole element is deleted with its content.</textual></para></section><section class="po-hcontainer e255 e255"><title class="po-block e256 e256"><textual class="po-textual">Example</textual></title><para class="po-block e257 e257"><textual class="po-textual">Deletion of a paragraph.</textual></para><programlisting class="po-block e258 e258" xml:space="preserve"><textual class="po-textual">&lt;delta:removed-content delta:removal-change-idref='ct456'&gt;
  &lt;text:p&gt;
   This paragraph is deleted.
  &lt;/text:p&gt;
&lt;/delta:removed-content&gt;</textual></programlisting><para class="po-block e259 e259"><textual class="po-textual">Addition and deletion of a paragraph is shown like this:</textual></para><programlisting class="po-block e260 e260" xml:space="preserve"><textual class="po-textual">&lt;delta:removed-content delta:removal-change-idref='ct456'&gt;
  &lt;text:p delta:insertion-type="insert-with-content" 
    delta:insertion-change-idref='ct1234'&gt;
  This paragraph is added then later deleted.
  &lt;/text:p&gt;
&lt;/delta:removed-content&gt;</textual></programlisting><para class="po-block e261 e261"><textual class="po-textual">Deletion of a paragraph – PI example.</textual></para><programlisting class="po-block e262 e262" xml:space="preserve"><textual class="po-textual">&lt;?delta:removed-content delta:removal-change-idref='ct456'&gt;
  &lt;text:p&gt;
   This paragraph is deleted.
  &lt;/text:p&gt;
?&gt;</textual></programlisting><para class="po-block e263 e263"><textual class="po-textual">Addition and deletion of a paragraph is shown like this – PI example:</textual></para><programlisting class="po-block e264 e264" xml:space="preserve"><textual class="po-textual">&lt;?delta:removed-content delta:removal-change-idref='ct456'&gt;
  &lt;text:p delta:insertion-type="insert-with-content" 
    delta:insertion-change-idref='ct1234'&gt;
  This paragraph is added then later deleted.
  &lt;/text:p&gt;
?&gt;</textual></programlisting></section><section class="po-hcontainer e265 e265"><title class="po-block e266 e266"><textual class="po-textual">Comments and Rationale</textual></title><para class="po-block e267 e267"><textual class="po-textual">A deleted item may contain changes within it, but the changes must all be
                    before its deletion.</textual></para></section></section><section class="po-hcontainer e268 e268"><title class="po-block e269 e269"><textual class="po-textual">Add an attribute to an element</textual></title><section class="po-hcontainer e270 e270"><title class="po-block e271 e271"><textual class="po-textual">Description</textual></title><para class="po-block e272 e272"><textual class="po-textual">This construct provides the ability to add a new attribute to an
                    element.</textual></para></section><section class="po-hcontainer e273 e273"><title class="po-block e274 e274"><textual class="po-textual">Example</textual></title><para class="po-block e275 e275"><textual class="po-textual">If a fragment starts as</textual></para><programlisting class="po-block e276 e276" xml:space="preserve"><textual class="po-textual">&lt;text:p text:style-name="Standard"&gt;
How an attribute is added
&lt;/text:p&gt;</textual></programlisting><para class="po-block e277 e277"><textual class="po-textual">and goes to </textual></para><programlisting class="po-block e278 e278" xml:space="preserve"><textual class="po-textual">&lt;text:p text:style-name="Standard" text:outline-level="3"&gt;
How an attribute is added
&lt;/text:p&gt;</textual></programlisting><para class="po-block e279 e279"><textual class="po-textual">then this is represented as</textual></para><programlisting class="po-block e280 e280" xml:space="preserve"><textual class="po-textual">&lt;text:p text:style-name="Standard" text:outline-level="3"
ac:change001="ct1,insert,text:outline-level"&gt;
How an attribute is added
&lt;/text:p&gt;</textual></programlisting><para class="po-block e281 e281"><textual class="po-textual">where change001 is a generated attribute name and the name is not significant
                    – it must be different for each attribute change recorded for this element. The
                    content is a comma separated list of:</textual></para><orderedlist class="po-table e282 e282"><listitem class="po-container e283 e283"><para class="po-block e284 e284"><textual class="po-textual">The change transaction (CT) ID. This is a reference to the ID.</textual></para></listitem><listitem class="po-container e285 e285"><para class="po-block e286 e286"><textual class="po-textual">The type of change: insert, remove, modify</textual></para></listitem><listitem class="po-container e287 e287"><para class="po-block e288 e288"><textual class="po-textual">The name of the attribute that is changed</textual></para></listitem><listitem class="po-container e289 e289"><para class="po-block e290 e290"><textual class="po-textual">The old value of the attribute – this is not needed for an added
                            attribute because the value will either be in the element or, if the
                            attribute is later deleted it will be recorded there.</textual></para></listitem></orderedlist><para class="po-block e291 e291"><textual class="po-textual">PI example:</textual></para><programlisting class="po-block e292 e292" xml:space="preserve"><textual class="po-textual">&lt;text:p text:style-name="Standard" text:outline-level="3"&gt;
&lt;?attribute-change "ct1,insert,text:outline-level" ?&gt;
How an attribute is added
&lt;/text:p&gt;</textual></programlisting></section><section class="po-hcontainer e293 e293"><title class="po-block e294 e294"><textual class="po-textual">Comments and Rationale</textual></title><para class="po-block e295 e295"><textual class="po-textual">All information on the change is local to the element changed. The attribute
                    local name is generated because multiple changes are possible, and this avoids
                    adding to a string (value) of some attribute and then parsing it. Minimal
                    parsing of the ac:change001 attribute value is needed. The latest attributes are
                    always listed in full, making extraction of the latest version simple. </textual></para></section></section><section class="po-hcontainer e296 e296"><title class="po-block e297 e297"><textual class="po-textual">Delete an attribute from an element</textual></title><section class="po-hcontainer e298 e298"><title class="po-block e299 e299"><textual class="po-textual">Description</textual></title><para class="po-block e300 e300"><textual class="po-textual">This construct provides the ability to delete an attribute from an
                    element.</textual></para></section><section class="po-hcontainer e301 e301"><title class="po-block e302 e302"><textual class="po-textual">Example</textual></title><para class="po-block e303 e303"><textual class="po-textual">If a fragment starts as</textual></para><programlisting class="po-block e304 e304" xml:space="preserve"><textual class="po-textual">&lt;text:p text:style-name="Standard" text:outline-level="3"&gt;
How an attribute is deleted
&lt;/text:p&gt;</textual></programlisting><para class="po-block e305 e305"><textual class="po-textual">and goes to </textual></para><programlisting class="po-block e306 e306" xml:space="preserve"><textual class="po-textual">&lt;text:p text:style-name="Standard" &gt;
How an attribute is deleted
&lt;/text:p&gt;</textual></programlisting><para class="po-block e307 e307"><textual class="po-textual">then this is represented as</textual></para><programlisting class="po-block e308 e308" xml:space="preserve"><textual class="po-textual">&lt;text:p text:style-name="Standard" 
ac:change001="ct1,remove,text:outline-level,3"&gt;
How an attribute is deleted
&lt;/text:p&gt;</textual></programlisting><para class="po-block e309 e309"><textual class="po-textual">PI example:</textual></para><programlisting class="po-block e310 e310" xml:space="preserve"><textual class="po-textual">&lt;text:p text:style-name="Standard" &gt;
&lt;?attribute-change "ct1,remove,text:outline-level,3" ?&gt;
How an attribute is deleted
&lt;/text:p&gt;</textual></programlisting></section><section class="po-hcontainer e311 e311"><title class="po-block e312 e312"><textual class="po-textual">Comments and Rationale</textual></title><para class="po-block e313 e313"><textual class="po-textual">This follows the same principles as an inserted attribute.</textual></para></section></section><section class="po-hcontainer e314 e314"><title class="po-block e315 e315"><textual class="po-textual">Change the value of an attribute</textual></title><section class="po-hcontainer e316 e316"><title class="po-block e317 e317"><textual class="po-textual">Description</textual></title><para class="po-block e318 e318"><textual class="po-textual">This construct provides the ability to change the value of an attribute on an
                    element.</textual></para></section><section class="po-hcontainer e319 e319"><title class="po-block e320 e320"><textual class="po-textual">Example</textual></title><para class="po-block e321 e321"><textual class="po-textual">If a fragment starts as</textual></para><programlisting class="po-block e322 e322" xml:space="preserve"><textual class="po-textual">&lt;text:p text:style-name="Standard"&gt;
The style on the paragraph will be changed.
&lt;/text:p&gt;</textual></programlisting><para class="po-block e323 e323"><textual class="po-textual">and goes to </textual></para><programlisting class="po-block e324 e324" xml:space="preserve"><textual class="po-textual">&lt;text:p text:style-name="Code"&gt;
The style on the paragraph will be changed.
&lt;/text:p&gt;</textual></programlisting><para class="po-block e325 e325"><textual class="po-textual">then this is represented as</textual></para><programlisting class="po-block e326 e326" xml:space="preserve"><textual class="po-textual">&lt;text:p text:style-name="Code"
ac:change001="ct1,modify,text:style-name,Standard"&gt;
The style on the paragraph will be changed.
&lt;/text:p&gt;</textual></programlisting><para class="po-block e327 e327"><textual class="po-textual">PI example:</textual></para><programlisting class="po-block e328 e328" xml:space="preserve"><textual class="po-textual">&lt;text:p text:style-name="Code"&gt;
&lt;?attribute-change "ct1,modify,text:style-name,Standard" ?&gt;
The style on the paragraph will be changed.
&lt;/text:p&gt;</textual></programlisting></section><section class="po-hcontainer e329 e329"><title class="po-block e330 e330"><textual class="po-textual">Comments and Rationale</textual></title><para class="po-block e331 e331"><textual class="po-textual">This follows the same principles as an added or deleted attribute. </textual></para></section></section><section class="po-hcontainer e332 e332"><title class="po-block e333 e333"><textual class="po-textual">Move an element (move)</textual></title><section class="po-hcontainer e334 e334"><title class="po-block e335 e335"><textual class="po-textual">Description</textual></title><para class="po-block e336 e336"><textual class="po-textual">This construct describes the origin and the destination of content that is
                    moved from one position in a document to another. Move provides a link between
                    some removed content (move-from) and some inserted content (move-to), but this
                    link simply provides additional information about the change transaction. If an
                    application does not understand the concept of move, the move information can be
                    ignored without compromising the content and structure of the document before
                    the move or the content and structure of the document after the move.</textual></para><para class="po-block e337 e337"><textual class="po-textual">The move representation allows content to be deleted and then inserted in one
                    or more other positions in the document. A delta:move-id attribute must have one
                    or more delta:move-idref references to it.</textual></para></section><section class="po-hcontainer e338 e338"><title class="po-block e339 e339"><textual class="po-textual">Example</textual></title><para class="po-block e340 e340"><textual class="po-textual">If a fragment is moved from this position</textual></para><programlisting class="po-block e341 e341" xml:space="preserve"><textual class="po-textual">&lt;text:p&gt;
This paragraph will be moved.
&lt;/text:p&gt;
&lt;text:h text:style-name="Heading_20_1" text:outline-level="1"&gt;
This is the heading for the paragraph
&lt;/text:h&gt;</textual></programlisting><para class="po-block e342 e342"><textual class="po-textual">to this </textual></para><programlisting class="po-block e343 e343" xml:space="preserve"><textual class="po-textual">&lt;text:h text:style-name="Heading_20_1" text:outline-level="1"&gt;
This is the heading for the paragraph
&lt;/text:h&gt;
&lt;text:p&gt;
This paragraph will be moved.
&lt;/text:p&gt;</textual></programlisting><para class="po-block e344 e344"><textual class="po-textual">then this is represented as</textual></para><programlisting class="po-block e345 e345" xml:space="preserve"><textual class="po-textual">&lt;delta:removed-content delta:removal-change-idref="ct123" delta:move-id="mv33" &gt;
    &lt;text:p &gt;
    This paragraph will be moved.
    &lt;/text:p&gt;
&lt;/delta:removed-content&gt; 
&lt;text:h text:style-name="Heading_20_1" text:outline-level="1"&gt;
This is the heading for the paragraph
&lt;/text:h&gt;
&lt;text:p delta:insertion-type="insert-with-content" delta:move-idref="mv33"
 delta:insertion-change-idref="ct123"&gt;
This paragraph will be moved.
&lt;/text:p&gt;</textual></programlisting><para class="po-block e346 e346"><textual class="po-textual">PI example</textual></para><programlisting class="po-block e347 e347" xml:space="preserve"><textual class="po-textual">&lt;?delta:removed-content delta:removal-change-idref="ct123" delta:move-id="mv33" &gt;
    &lt;text:p &gt;
    This paragraph will be moved.
    &lt;/text:p&gt;
?&gt; 
&lt;text:h text:style-name="Heading_20_1" text:outline-level="1"&gt;
This is the heading for the paragraph
&lt;/text:h&gt;
&lt;text:p &gt;
&lt;?delta-tracked-change-attributes delta:insertion-type="insert-with-content" 
delta:move-idref="mv33" delta:insertion-change-idref="ct123"?&gt;
This paragraph will be moved.
&lt;/text:p&gt;</textual></programlisting></section><section class="po-hcontainer e348 e348"><title class="po-block e349 e349"><textual class="po-textual">Comments and Rationale</textual></title><para class="po-block e350 e350"><textual class="po-textual">Move from and move to are linked by the delta:move-id attribute and
                    delta:move-idref attributes. When content is moved, all its change history is
                    reset, e.g. a move-from paragraph has the change history and the move-to has no
                    history, it is as if it has been added new. This avoids duplicating history
                    (causing ID duplicates etc) and the history is not lost because it is there in
                    the original position.</textual></para><para class="po-block e351 e351"><textual class="po-textual">The delta:move-id attribute appears on a delta:removed-content or delta:merge
                    element and therefore there is no 1:1 relationship between a move-from element,
                    whose parent has a delta:move-id attribute, and the move-to element. It would be
                    possible to specify this relationship to a finer level of granularity by using
                    multiple delta:removed-content elements rather than one.</textual></para></section></section><section class="po-hcontainer e352 e352"><title class="po-block e353 e353"><textual class="po-textual">Add text (PCDATA)</textual></title><section class="po-hcontainer e354 e354"><title class="po-block e355 e355"><textual class="po-textual">Description</textual></title><para class="po-block e356 e356"><textual class="po-textual">This construct allows the insertion of text. It is similar to the existing
                    mechanism. This construct shall only be used within an element that allows
                    PCDATA content.</textual></para></section><section class="po-hcontainer e357 e357"><title class="po-block e358 e358"><textual class="po-textual">Example</textual></title><para class="po-block e359 e359"><textual class="po-textual">If a fragment starts as</textual></para><programlisting class="po-block e360 e360" xml:space="preserve"><textual class="po-textual">&lt;text:p&gt;
How text is added.
&lt;/text:p&gt;</textual></programlisting><para class="po-block e361 e361"><textual class="po-textual">and goes to </textual></para><programlisting class="po-block e362 e362" xml:space="preserve"><textual class="po-textual">&lt;text:p&gt;
How text is very easily added.
&lt;/text:p&gt;</textual></programlisting><para class="po-block e363 e363"><textual class="po-textual">then this is represented as</textual></para><programlisting class="po-block e364 e364" xml:space="preserve"><textual class="po-textual">&lt;text:p&gt;
How text is &lt;delta:inserted-text-start delta:inserted-text-id="it632507360" 
delta:insertion-change-idref="ct1"/&gt;very easily 
&lt;delta:inserted-text-end delta:inserted-text-idref="it632507360"/&gt;added.
&lt;/text:p&gt;</textual></programlisting><para class="po-block e365 e365"><textual class="po-textual">PI example:</textual></para><programlisting class="po-block e366 e366" xml:space="preserve"><textual class="po-textual">&lt;text:p&gt;
How text is &lt;?delta:inserted-text-start delta:inserted-text-id="it632507360" 
delta:insertion-change-idref="ct1" ?&gt;very easily 
&lt;?delta:inserted-text-end delta:inserted-text-idref="it632507360" ?&gt;added.
&lt;/text:p&gt;</textual></programlisting><para class="po-block e367 e367"><textual class="po-textual">Second example: If a fragment starts as</textual></para><programlisting class="po-block e368 e368" xml:space="preserve"><textual class="po-textual">&lt;text:p&gt;
How text is
&lt;/text:p&gt;</textual></programlisting><para class="po-block e369 e369"><textual class="po-textual">and goes to </textual></para><programlisting class="po-block e370 e370" xml:space="preserve"><textual class="po-textual">&lt;text:p&gt;
How text is very easily added.
&lt;/text:p&gt;
&lt;text:p&gt;
And the addition is into a second paragraph.
&lt;/text:p&gt;</textual></programlisting><para class="po-block e371 e371"><textual class="po-textual">then this is represented as</textual></para><programlisting class="po-block e372 e372" xml:space="preserve"><textual class="po-textual">&lt;text:p&gt;
How text is &lt;delta:inserted-text-start delta:inserted-text-id="it123" delta:insertion-change-idref="ct3"/&gt;very easily added.&lt;delta:inserted-text-end delta:inserted-text-idref="it123"/&gt;
&lt;/text:p&gt;
&lt;text:p delta:insertion-type="insert-with-content" delta:insertion-change-idref="ct3"&gt;
And the addition is into a second paragraph.
&lt;/text:p&gt;</textual></programlisting></section><section class="po-hcontainer e373 e373"><title class="po-block e374 e374"><textual class="po-textual">Comments and Rationale</textual></title><para class="po-block e375 e375"><textual class="po-textual">Additions may not always be within a single element, but the
                    delta:inserted-text-start and delta:inserted-text-end must both have the same
                    parent element when they are created, and the content between them must be
                    PCDATA only. Therefore when a second paragraph is added as per the second
                    example, the first atomic change terminates and the paragraph is added in the
                    normal way. The CT reference provides a link to indicate these occur at the same
                    time as a single addition. This avoids having two ways to add an element and
                    avoids the need to track across the element hierarchy to find the corresponding
                    end of an addition.</textual></para><para class="po-block e376 e376"><textual class="po-textual">Additions must therefore always be non-overlapping and the start and end of a
                    change must be within a single element, when they are formed. Of course they may
                    not be within a single element at some later stage due to other changes, but in
                    this case it would not be possible to 'undo' it. This rule adds clarity at the
                    slight cost to the writer application and the considerable gain for the reader.
                    Since any number of atomic changes can be associated with a single CT, there is
                    no loss of information.</textual></para></section></section><section class="po-hcontainer e377 e377"><title class="po-block e378 e378"><textual class="po-textual">Delete mixed or PCDATA content</textual></title><section class="po-hcontainer e379 e379"><title class="po-block e380 e380"><textual class="po-textual">Description</textual></title><para class="po-block e381 e381"><textual class="po-textual">This construct allows the deletion of text. It is similar to the existing
                    mechanism. This construct shall only be used within an element that allows
                    PCDATA content.</textual></para><section class="po-hcontainer e382 e382"><title class="po-block e383 e383"><textual class="po-textual">Example</textual></title><para class="po-block e384 e384"><textual class="po-textual">If a fragment starts as</textual></para><programlisting class="po-block e385 e385" xml:space="preserve"><textual class="po-textual">&lt;text:p&gt;
How text is deleted or removed from a paragraph.
&lt;/text:p&gt;</textual></programlisting><para class="po-block e386 e386"><textual class="po-textual">and goes to </textual></para><programlisting class="po-block e387 e387" xml:space="preserve"><textual class="po-textual">&lt;text:p&gt;
How text is removed from a paragraph.
&lt;/text:p&gt;</textual></programlisting><para class="po-block e388 e388"><textual class="po-textual">then this is represented as</textual></para><programlisting class="po-block e389 e389" xml:space="preserve"><textual class="po-textual">&lt;text:p&gt;
How text is &lt;delta:removed-content delta:removal-change-idref="ct2"&gt;deleted or &lt;/delta:removed-content&gt;removed from a paragraph.
&lt;/text:p&gt;</textual></programlisting><para class="po-block e390 e390"><textual class="po-textual">Second example: If a fragment starts as</textual></para><programlisting class="po-block e391 e391" xml:space="preserve"><textual class="po-textual">&lt;text:p&gt;
How text is deleted or &lt;text:span text:style="bold"&gt;removed&lt;/text:span&gt; like this from a paragraph.
&lt;/text:p&gt;</textual></programlisting><para class="po-block e392 e392"><textual class="po-textual">and goes to </textual></para><programlisting class="po-block e393 e393" xml:space="preserve"><textual class="po-textual">&lt;text:p&gt;
How text is deleted from a paragraph.
&lt;/text:p&gt;</textual></programlisting><para class="po-block e394 e394"><textual class="po-textual">then this is represented as</textual></para><programlisting class="po-block e395 e395" xml:space="preserve"><textual class="po-textual">&lt;text:p&gt;
How text is deleted 
&lt;delta:removed-content delta:removal-change-idref="ct2"&gt;
  or 
  &lt;text:span text:style="bold"&gt; removed&lt;/text:span&gt;
  like this
&lt;/delta:removed-content&gt;
from a paragraph.
&lt;/text:p&gt;</textual></programlisting></section></section><section class="po-hcontainer e396 e396"><title class="po-block e397 e397"><textual class="po-textual">Comments and Rationale</textual></title><para class="po-block e398 e398"><textual class="po-textual">The deleted text is contained within a single element because it will never be
                    subdivided or added to after its deletion. The deleted text element contains at
                    least some deleted text, and may contain other elements. </textual></para><para class="po-block e399 e399"><textual class="po-textual">A deleted item may contain changes within it, but the changes must all be
                    before its deletion.</textual></para></section></section></section><section class="po-hcontainer e400 e400"><title class="po-block e401 e401"><textual class="po-textual">Integration with a host format</textual></title><para class="po-block e402 e402"><textual class="po-textual">We have identified two different ways of integrating this track change format,
            discussed below.</textual></para><section class="po-hcontainer e403 e403"><title class="po-block e404 e404"><textual class="po-textual">Stand-alone use of 'XML Track Changes'</textual></title><para class="po-block e405 e405"><textual class="po-textual">The format can be used as an independent addition to an existing XML host format.
                In this scenario no changes are made to the schema of the host format, but the track
                change elements and attributes are used to represent changes and edits to a
                document. The following generic tools may be used to extract different versions of
                the document, and to validate a version of the document that has tracked changes
                represented.</textual></para><orderedlist class="po-table e406 e406"><listitem class="po-container e407 e407"><para class="po-block e408 e408"><textual class="po-textual">Schematron checker to check a change-tracked document (Schematron
                        Checker)</textual></para></listitem><listitem class="po-container e409 e409"><para class="po-block e410 e410"><textual class="po-textual">XSLT stylesheet to extract the final document from a change-tracked
                        document (XSLT Extractor)</textual></para></listitem><listitem class="po-container e411 e411"><para class="po-block e412 e412"><textual class="po-textual">XSLT stylesheet to roll back the last change transaction from a
                        change-tracked document (XSLT Roll-back)</textual></para></listitem></orderedlist><para class="po-block e413 e413"><textual class="po-textual">These tools allow a complete integrity check as follows:</textual></para><orderedlist class="po-table e414 e414"><listitem class="po-container e415 e415"><para class="po-block e416 e416"><textual class="po-textual">Execute the Schematron Checker to check the document.</textual></para></listitem><listitem class="po-container e417 e417"><para class="po-block e418 e418"><textual class="po-textual">Use XSLT Extractor to extract the last version of the document</textual></para></listitem><listitem class="po-container e419 e419"><para class="po-block e420 e420"><textual class="po-textual">Check the last version of the document against the normal document schema
                        and/or other integrity checks.</textual></para></listitem><listitem class="po-container e421 e421"><para class="po-block e422 e422"><textual class="po-textual">If there are no Change Transactions in the document, the checking is
                        finished.</textual></para></listitem><listitem class="po-container e423 e423"><para class="po-block e424 e424"><textual class="po-textual">Use XSLT Roll-back to roll back the tracked change</textual></para></listitem><listitem class="po-container e425 e425"><para class="po-block e426 e426"><textual class="po-textual">Return to 1 to continue checking.</textual></para></listitem></orderedlist><para class="po-block e427 e427"><textual class="po-textual">An application reading the change-tracked document would need to recognise the
                change tracking elements and treat these in a special way so that the final version
                of the document ends up in memory with some ancillary in-memory data structure to
                denote the changes.</textual></para></section><section class="po-hcontainer e428 e428"><title class="po-block e429 e429"><textual class="po-textual">Host-integrated 'XML Track Changes'</textual></title><para class="po-block e430 e430"><textual class="po-textual">In this scenario there will be a RelaxNG schema which specifies the host format
                with change tracking schema integrated with it. The stand-alone testing mentioned
                above would still be valid and work, but as well as that the change-tracked document
                could be checked against a schema.</textual></para><para class="po-block e431 e431"><textual class="po-textual">Note: More work is needed to develop this integration for a particular host format
                such as ODF, and it has a significant impact on the RelaxNG schema.</textual></para></section><section class="po-hcontainer e432 e432"><title class="po-block e433 e433"><textual class="po-textual">Schema Integration</textual></title><para class="po-block e434 e434"><textual class="po-textual">Integration of Level 1 is simpler than integration of Level 2.</textual></para><para class="po-block e435 e435"><textual class="po-textual">It is possible to represent any changes to a document in each level, but Level 2
                provide a more natural representation of typical document editing actions. Level 2
                seek to make minimal changes to the document content or text while allowing complex
                changes to the structure surrounding that textual content.</textual></para></section><section class="po-hcontainer e436 e436"><title class="po-block e437 e437"><textual class="po-textual">Schema Integration Level 1</textual></title><para class="po-block e438 e438"><textual class="po-textual">This level is provided as a guide for other use cases of this tracked-change
                representation. Level 1 has not been fully tested independently of Level 2.</textual></para><para class="po-block e439 e439"><textual class="po-textual">Rule 1: The element delta:tracked-changes must be allowed at one point in the
                document.</textual></para><para class="po-block e440 e440"><textual class="po-textual">Rule 2: Any element in the host format that has one or more attributes which can
                be added, deleted or values changed, need to allow attributes in the ac:
                namespace.</textual></para><para class="po-block e441 e441"><textual class="po-textual">Rule 3: All elements that can be added or deleted with their content (including
                any element that allows no content, i.e. is always empty) need to allow the
                attribute delta:insertion-type with value 'insert-with-content' and be permitted as
                a child of delta:removed-content (unless this allows any element, see RelaxNG for
                details). (Note that this is not necessarily all elements, for example an element
                that is only used as a required item and never in a choice would not be in this
                category.)</textual></para><para class="po-block e442 e442"><textual class="po-textual">Rule 4: All elements that allow element content must have their content model
                modified so that they allow delta:removed-content to appear anywhere as a child
                element.</textual></para><para class="po-block e443 e443"><textual class="po-textual">Rule 5: All elements that allow PCDATA content, including elements that allow
                mixed content, need to allow for text content to be added (Rule 4 allows text to be
                deleted).</textual></para></section></section><section class="po-hcontainer e444 e444"><title class="po-block e445 e445"><textual class="po-textual">Conclusions</textual></title><para class="po-block e446 e446"><textual class="po-textual">The need to track changes to XML documents and data frequently extends beyond the most
            common application of changes to documents. For example there is keen interest from the
            Strategy Markup Language (StratML) [</textual><xref class="po-milestone e447 e447" linkend="StratML"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] group responsible for
            defining strategic plans in XML; these plans change, and the way they have changed is
            important and needs to be recorded. But, if every group develops its own solution then
            the advantage of common tools would be lost and each group would be left to find its own
            way forward. It would be a considerable amount of work!</textual></para><para class="po-block e448 e448"><textual class="po-textual">There have been comments that the full solution proposed, including both Level 1 and
            Level 2, is complex. That is true and it probably makes sense to limit the initial
            approach, a first or draft standard, to fairly simple changes as addressed by Level 1,
            and then in the light of experience and implementations move on to tackle the more
            complex area of structural changes. Level 1 can represent any change to any XML
            document, but for structural changes some content may need to be duplicated. Level 2 is
            really only needed when content duplication is undesirable, for example when the XML
            represents written documents.</textual></para><para class="po-block e449 e449"><textual class="po-textual">This paper has shown that a generic approach to representing tracked changes in XML is
            possible, and the advantages to having a standard XML solution are considerable. More
            experimental work is needed to see if there are better approaches and a draft standard
            needs to be developed. Then, in the light of experience and implementations, we can move
            on to address the more complex area of structural changes.</textual></para></section><bibliography class="po-hcontainer e450 e450"><title class="po-block e451 e451"><textual class="po-textual">References</textual></title><bibliomixed class="po-block e452 e452" xml:id="W3C-group" xreflabel="1"><textual class="po-textual">W3C Change Community Group,
            </textual><link class="po-inline e453 e453" xlink:actuate="onRequest" xlink:href="http://www.w3.org/community/change/" xlink:show="new" xlink:type="simple"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></link></bibliomixed><bibliomixed class="po-block e454 e454" xml:id="sandbox" xreflabel="2"><textual class="po-textual">XML Change Tracking Prototype: Sandbox,
            </textual><link class="po-inline e455 e455" xlink:actuate="onRequest" xlink:href="http://www.deltaxml.com/samples/track-changes/sandbox" xlink:show="new" xlink:type="simple"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></link></bibliomixed><bibliomixed class="po-block e456 e456" xml:id="examples" xreflabel="3"><textual class="po-textual">Robin La Fontaine, Nigel Whitaker and Tristan
            Mitchell, Representing Changes in Open Document Format: Worked examples and XSLT style
            sheets, July 2010, </textual><link class="po-inline e457 e457" xlink:actuate="onRequest" xlink:href="http://www.deltaxml.com/support/downloads/DeltaXML-TC4.tar.gz" xlink:show="new" xlink:type="simple"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></link><textual class="po-textual">
            (5.1Mb)</textual></bibliomixed><bibliomixed class="po-block e458 e458" xml:id="proposal" xreflabel="4"><textual class="po-textual">Robin La Fontaine, XML Change Tracking:
            Representing Change Tracking in any XML Document, DeltaXML Ltd., Draft 7, 2012,
            </textual><link class="po-inline e459 e459" xlink:actuate="onRequest" xlink:href="http://www.deltaxml.com/support/documents/articles-and-papers/XML-change-tracking.pdf" xlink:show="new" xlink:type="simple"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></link></bibliomixed><bibliomixed class="po-block e460 e460" xml:id="lafontaine-xmlprague" xreflabel="5"><textual class="po-textual">Robin La Fontaine, Approaches to Change tracking in XML, XML Prague 2010 Prague CZ,
            </textual><link class="po-inline e461 e461" xlink:actuate="onRequest" xlink:href="http://www.deltaxml.com/support/documents/articles-and-papers/xml-change-tracking-review.pdf" xlink:show="new" xlink:type="simple"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></link></bibliomixed><bibliomixed class="po-block e462 e462" xml:id="XMetaL" xreflabel="6"><textual class="po-textual">
            XMetaL authoring system </textual><link class="po-inline e463 e463" xlink:actuate="onRequest" xlink:href="http://xmetal.com" xlink:show="new" xlink:type="simple"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e464 e464" xml:id="Xopus" xreflabel="7"><textual class="po-textual">
            Xopus online editing, </textual><link class="po-inline e465 e465" xlink:actuate="onRequest" xlink:href="http://xopus.com/" xlink:show="new" xlink:type="simple"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e466 e466" xml:id="oXygen" xreflabel="8"><textual class="po-textual">
            oXygen XML editor, </textual><link class="po-inline e467 e467" xlink:actuate="onRequest" xlink:href="http://www.oxygenxml.com/" xlink:show="new" xlink:type="simple"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e468 e468" xml:id="XQuery" xreflabel="9"><textual class="po-textual">
            XQuery Update Facility 1.0, </textual><link class="po-inline e469 e469" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xquery-update-10/" xlink:show="new" xlink:type="simple"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e470 e470" xml:id="XSLT" xreflabel="10"><textual class="po-textual">
            XSL Transformations (XSLT), </textual><link class="po-inline e471 e471" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xslt" xlink:show="new" xlink:type="simple"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e472 e472" xml:id="DeltaXML" xreflabel="11"><textual class="po-textual">
            DeltaXML: Two and Three Document DeltaV2 Format, </textual><link class="po-inline e473 e473" xlink:actuate="onRequest" xlink:href="http://www.deltaxml.com/support/documents/deltav2" xlink:show="new" xlink:type="simple"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e474 e474" xml:id="StratML" xreflabel="12"><textual class="po-textual">Strategy Markup Language (StratML),
            </textual><link class="po-inline e475 e475" xlink:actuate="onRequest" xlink:href="http://xml.fido.gov/stratml/index.htm" xlink:show="new" xlink:type="simple"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></link></bibliomixed><bibliomixed class="po-block e476 e476" xml:id="Overlapping" xreflabel="13"><textual class="po-textual">Modeling overlapping structures, Yves
            Marcoux, Michael Sperberg-McQueen, Claus Huitfeldt, 
            </textual><link class="po-inline e477 e477" xlink:actuate="onRequest" xlink:href="http://www.balisage.net/Proceedings/vol10/html/Marcoux01/BalisageVol10-Marcoux01.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></link><textual class="po-textual">, doi:</textual><biblioid class="po-atom e478 doi e478"><textual class="po-textual">10.4242/BalisageVol10.Marcoux01</textual></biblioid></bibliomixed></bibliography></article></classedDocument>