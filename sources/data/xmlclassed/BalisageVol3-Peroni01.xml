<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.2" xml:id="Bal2009pero0115"><title class="po-block e1 e1"><textual class="po-textual">Towards markup support for full GODDAGs and beyond: the EARMARK approach</textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">Balisage: The Markup Conference 2009</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 11 - 14, 2009</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual">One of the most evident tenets of the literature on overlapping markup is that the
                philosophy of documents as trees (as dictated by meta-markup languages such as SGML
                and XML) is a simplification that sometimes fails and requires corrections. These
                corrections have been proposed at the markup level (e.g., milestones, segmentation),
                at the meta-markup level (e.g., LMNL, TexMecs, XCONCUR, etc.) or at level of the
                abstract model (e.g., GODDAG). Unfortunately full GODDAGs do not allow
                linearizations in general, and as such a restricted version of GODDAG, r-GODDAG, has
                been proposed that is guaranteed to be linearizable (in TexMecs) and still allows
                many nice features beyond trees.</textual></para><para class="po-block e8 e8"><textual class="po-textual">In this paper we discuss that the problem of linearizing more-than-hierarchical
                structures lies basically in the embedding of markup within content and that no such
                problem arises with an appropriate standoff approach, that is able to represent full
                GODDAGs without restrictions. This gives ample opportunities to deal with
                interesting markup features that are describable with GODDAGs but not with
                r-GODDAGs, such as non-contiguous elements and virtual elements.</textual></para><para class="po-block e9 e9"><textual class="po-textual">Besides, we discuss whether a specific constraint of full GODDAGs is really
                necessary once all residual hopes of embeddability are given up, and we further
                propose a minimal extension to GODDAG, genially called "extended GODDAG" (e-GODDAG)
                that, by removing the requirement for names in non-terminal nodes, adds support for
                additional interesting markup features such as content repetitions. In truth,
                e-GODDAGs are even less embeddable than full GODDAGs, but they are just as easily
                dealt with by using stand-off markup.</textual></para><para class="po-block e10 e10"><textual class="po-textual">We further propose a meta-syntax for non-embedded markup, called EARMARK, that can
                be used for stand-off annotations of textual content, and that naturally represents
                e-GODDAGs with fully W3C-compliant technologies. EARMARK is based on an
                ontologically precise definition of markup that instantiates the markup of a text
                document as an OWL document, and through appropriate OWL and SWRL characterizations
                it can define structures such as trees, r-GODDAGs, full GODDAGs and e-GODDAGs, and
                can be used to generate validity constraints (including co-constraints), and to
                verify adherence to content model patterns.</textual></para><para class="po-block e11 e11"><textual class="po-textual">As mentioned, in general the embedding of a full EARMARK document is not straightforward,
                but approaches can be taken in that direction: just like segmentation and
                fragmentation are strategies to embed in a strictly-hierarchical language a
                r-GODDAG-specific feature such as overlapping elements, similarly a number of
                strategies exist to provide embedding of GODDAG and e-GODDAG features in less
                expressive syntaxes. In the final part of the paper we discuss our wish to provide
                at the metalanguage level a series of embedding strategies of the non-hierarchical
                features of EARMARK, i.e. a number of language-independent mechanisms to express
                e-GODDAGs structures into XML (as well as in TexMecs and in LMNL) and that can be
                recognized as such (i.e., as strategies, as tricks) by tools and readers alike,
                especially for further uses of such documents.</textual></para></abstract><author class="po-record e12 e12"><personname class="po-record e13 e13"><firstname class="po-field e14 e14"><textual class="po-textual">Angelo</textual></firstname><surname class="po-field e15 e15"><textual class="po-textual">Di Iorio</textual></surname></personname><personblurb class="po-container e16 e16"><para class="po-block e17 e17"><textual class="po-textual">Angelo Di Iorio holds a Ph.D. in Computer Science, from the University of
                    Bologna. His thesis is positioned over markup languages and document engineering
                    areas, being focused on design patterns for digital documents and automatic
                    processes of analysis and segmentation. During his PhD he has also worked on
                    collaborative authoring, document versioning, content formatting, and semantic
                    web technologies. His research interests have recently extended towards layout
                    languages and algorithms. He is a member of the W3C XSL-FO working group, and
                    author of several conference and journal papers on markup languages, digital
                    publishing and Web technologies.</textual></para></personblurb><affiliation class="po-record e18 e18"><orgname class="po-block e19 e19"><textual class="po-textual">Department of Computer Science, University of Bologna</textual></orgname></affiliation><email class="po-field e20 e20"><textual class="po-textual">diiorio@cs.unibo.it</textual></email></author><author class="po-record e21 e21"><personname class="po-record e22 e22"><firstname class="po-field e23 e23"><textual class="po-textual">Silvio</textual></firstname><surname class="po-field e24 e24"><textual class="po-textual">Peroni</textual></surname></personname><personblurb class="po-container e25 e25"><para class="po-block e26 e26"><textual class="po-textual">Silvio Peroni holds a degree in Computer Science at the University of Bologna.
                    The main research interests in his current Ph.D. career include Semantic Web
                    technologies, markup languages for complex documents, design patterns for
                    digital documents and automatic processes of analysis and segmentation. He has
                    published 4 scientific papers about these subjects.</textual></para></personblurb><affiliation class="po-record e27 e27"><orgname class="po-block e28 e28"><textual class="po-textual">Department of Computer Science, University of Bologna</textual></orgname></affiliation><email class="po-field e29 e29"><textual class="po-textual">speroni@cs.unibo.it</textual></email></author><author class="po-record e30 e30"><personname class="po-record e31 e31"><firstname class="po-field e32 e32"><textual class="po-textual">Fabio</textual></firstname><surname class="po-field e33 e33"><textual class="po-textual">Vitali</textual></surname></personname><personblurb class="po-container e34 e34"><para class="po-block e35 e35"><textual class="po-textual">Fabio Vitali is associate professor in Computer Science at the University of
                    Bologna, where he teaches Web Technologies and Human-Computer Interaction. His
                    interests lie in models and languages for document management and hypertext
                    support, and has published more than 60 papers in national and international
                    venues. He is member of the W3C Working Group on XML Schema, and member of the
                    scientific committee of several conferences and journals in Web engineering and
                    technologies. He is author of important standards in the legislative XML Domain,
                    and work on issues related to digital publishing, Web technologies and Semantic
                    Web technologies.</textual></para></personblurb><affiliation class="po-record e36 e36"><orgname class="po-block e37 e37"><textual class="po-textual">Department of Computer Science, University of Bologna</textual></orgname></affiliation><email class="po-field e38 e38"><textual class="po-textual">fabio@cs.unibo.it</textual></email></author><legalnotice class="po-container e39 e39"><para class="po-block e40 e40"><textual class="po-textual">Copyright Â© 2009 by the authors.  Used with
                permission.</textual></para></legalnotice></info><section class="po-hcontainer e41 e41"><title class="po-block e42 e42"><textual class="po-textual">Introduction</textual></title><para class="po-block e43 e43"><textual class="po-textual">Not everybody working with markup languages needs support for overlaps and multiple
            hierarchies. But those that need it, usually need it badly. So badly, in fact, that a
            robust slice of markup literature is devoted to it, specialized scientific events have
            taken place, and a number of extremely varied approaches have been proposed in the last
            years for this issue. </textual></para><para class="po-block e44 e44"><textual class="po-textual">Some of these approaches were proposed at the language level: many XML languages (TEI
                </textual><xref class="po-milestone e45 e45" linkend="bib-1"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> being the most evident) took the decision to add specific
            language-dependent markup structures devoted to supporting overlapping. Some of such
            solutions, such as milestones and fragmentation, are so general and widely applicable
            that have been proposed even outside of the specificity of just one markup language
            (e.g., see </textual><xref class="po-milestone e46 e46" linkend="bib-20"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">), as architectural forms available in general in
            XML languages. Further approaches have been to create new meta-markup languages,
            inspired by but independent from XML such as TexMecs, LMNL, XCONCUR, that provide at the
            metalanguage itself support for more than a single hierarchy. This makes it possible for
            any language defined within the syntax to make use of the features for overlaps, without
            the need for further special tools to make sense of the annotations. </textual></para><para class="po-block e47 e47"><textual class="po-textual">At the conceptual level, what has shown its limits is the idea of forcing tree-like
            structures over documents. While some may be fully described by trees, some just are not,
            and we need more powerful abstract data structures to describe them. GODDAGs </textual><xref class="po-milestone e48 e48" linkend="bib-5"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> have been proposed exactly for this purpose: direct acyclic
            ddgraphs with ordered children relax exactly the kind of constraints of trees that were
            in the way for sophisticated markup features such as overlap. Unfortunately, generalized
            GODDAGs do not allow an immediate linearization in form of an XML-like syntax (even if
            extended in some way), but a variant, restricted GODDAGs (</textual><xref class="po-milestone e49 e49" linkend="bib-5"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and
            then </textual><xref class="po-milestone e50 e50" linkend="bib-23"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">), does allow a linearization in TexMECS. In general,
            though, the linearization of full generalized GODDAGs does not allow to keep all information
            expressed in the original graph. Many additional useful features of
            GODDAGs (e.g., virtual elements) can only be converted in XML structures by recurring to 
            procedural tricks. </textual></para><para class="po-block e51 e51"><textual class="po-textual">In this paper we discuss whether the problem of generalized GODDAGs lies in the
            embedding nature of meta-markup languages such as XML, TexMecs and LMNL, and whether by
            getting rid of embeddability altogether we can exploit the full potentiality of GODDAGs.
            Furthermore, we propose a minimal extension to GODDAGs to provide full support of
            repeated content in GODDAGs (currently only allowed if appearing in different
            substructures), thereby generalizing the idea of repeatability of markup structures. </textual></para><para class="po-block e52 e52"><textual class="po-textual">Additionally, in this paper we propose a meta language for GODDAGs and extended
            GODDAGs that relies 100% on well-known and widely available W3C technologies: EARMARK
                (</textual><emphasis class="po-inline e53 e53" role="ital"><textual class="po-textual">Extreme Annotational RDF Markup</textual></emphasis><textual class="po-textual">) is a language for
            standoff annotations over documents that is based on an OWL ontology and uses RDF
            annotations as its linearization approach. EARMARK annotations are facts expressed about
            OWL classes such as ranges and markup elements whose properties are fully and explicitly
            described in the OWL ontology itself, and minimally depend on syntactic constraint that
            are inherent of embedded languages. Thus all standard hierarchy assertions as usually
            expressed in XML are available in EARMARK, but the language also supports overlapping
            structures, virtual elements, anonymous elements and structured attributes, that are
            available with more sophisticated non-XML languages such as TexMECS or LMNL, as well as
            unsupported features such as repeated structures, content variants and partially
            overlapping multiple hierarchies</textual><footnote class="po-popup e54 e54" xml:id="sdfootnote1sym"><para class="po-block e55 e55"><textual class="po-textual">Defined as the âset of partial or independent overlapping hierarchies in which
                    the textual content between the tags is visible in some hierarchies but not in
                    othersâ </textual><xref class="po-milestone e56 e56" linkend="bib-2"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para></footnote><textual class="po-textual"> etc. are trivially expressed in EARMARK, and contribute to generate a
            language that is suited to fully support generalized GODDAGs and extended GODDAGs. </textual></para><para class="po-block e57 e57"><textual class="po-textual">EARMARK documents are therefore OWL documents that can be expressed as RDF assertions,
            and using plain and standard W3C technologies a number of Semantic Web tools can be used
            for generating, converting, querying and displaying EARMARK documents. Particularly
            relevant here is the process of embedding EARMARK documents in traditional embedded
            languages, such as XML or TexMecs. Of course, not all EARMARK assertions can be directly
            transformed into XML markup structures. The specific subset of the EARMARK document that
            can be expressed in the destination syntax (e.g., any of the possible tree substructures
            for XML, or of the r-GODDAG substructures for TexMecs) can be directly generated, and
            the remaining ones need to be either left out or forcedly embedded using any of a number
            of well-known or newly-introduced syntactic tricks (up to, of course, leaving part of
            the EARMARK markup directly as RDF fragments within the destination document). </textual></para><para class="po-block e58 e58"><textual class="po-textual">Providing a recognizable and repeatable two-way process for generating EARMARK
            documents out of embedded documents, and vice versa for generating embedded documents
            out of EARMARK document with embedding tricks represents also a chance to collect and
            generalize all such embedding tricks, and providing an additional conversion model
            between different syntaxes. All in all, we propose EARMARK as the most natural
            syntactical rendering of GODDAGs (and e-GODDAGs, of course) and as the intermediate
            representation of any conversion path for documents, XML or otherwise, that use
            overlapping features of any form, i.e., as a generalization of the conversion algorithms
            for overlapping structures proposed in </textual><xref class="po-milestone e59 e59" linkend="bib-7"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. </textual></para></section><section class="po-hcontainer e60 e60"><title class="po-block e61 e61"><textual class="po-textual">Embedding multiple hierarchies</textual></title><para class="po-block e62 e62"><textual class="po-textual">There comes a time, in marking up documents, where different types of annotations need
            to be placed upon the same content, and different markup needs to be used. Sometimes
            these different annotations nest easily, and sometimes they do not. Trying to express
            these different annotations using a hierarchical metamarkup language such as XML is,
                </textual><emphasis class="po-inline e63 e63" role="ital"><textual class="po-textual">per se</textual></emphasis><textual class="po-textual">, unfeasible: each structure needs to be
            described by its own hierarchy, and the overlapping situations pose a big problem,
            since, as we know, XML is not naturally equipped to deal with them. </textual></para><para class="po-block e64 e64"><textual class="po-textual">Some approaches to deal with overlapping structures in markup languages were proposed
            in past years. Each approach tries mediating between the support for overlapping and the
            hierarchical organization of XML documents, as illustrated in </textual><xref class="po-milestone e65 e65" linkend="bib-20"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">,
            as well as in </textual><xref class="po-milestone e66 e66" linkend="bib-1"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, </textual><xref class="po-milestone e67 e67" linkend="bib-8"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and </textual><xref class="po-milestone e68 e68" linkend="bib-7"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. The five main overlap-handling techniques described in
            literature can be summarized in the following:</textual></para><itemizedlist class="po-table e69 e69"><listitem class="po-container e70 e70"><para class="po-block e71 e71"><textual class="po-textual">
                    </textual><emphasis class="po-inline e72 e72" role="ital"><textual class="po-textual">milestones</textual></emphasis><textual class="po-textual">, through which one hierarchy is
                    expressed using the standard hierarchical XML markup and the elements belonging
                    to the other ones are represented through a pair of empty elements representing the
                    start and the end tags, and connected to each other by special
                    attributes.</textual></para></listitem><listitem class="po-container e73 e73"><para class="po-block e74 e74"><textual class="po-textual">
                    </textual><emphasis class="po-inline e75 e75" role="ital"><textual class="po-textual">flat milestones</textual></emphasis><textual class="po-textual">, that represents each of the
                    hierarchy elements as a milestone, i.e., an empty element placed where the start
                    or the end tag should be, all of them contained as children of the same root
                    element.</textual></para></listitem><listitem class="po-container e76 e76"><para class="po-block e77 e77"><textual class="po-textual">
                    </textual><emphasis class="po-inline e78 e78" role="ital"><textual class="po-textual">fragmentation</textual></emphasis><textual class="po-textual">, in which one hierarchy (the
                    primary) is expressed though the standard hierarchical XML markup, and the
                    elements of the secondary hierarchies are fragmented within the primary elements
                    as needed to suit the primary hierarchy and are connected to each other by
                    special attributes.</textual></para></listitem><listitem class="po-container e79 e79"><para class="po-block e80 e80"><textual class="po-textual">
                    </textual><emphasis class="po-inline e81 e81" role="ital"><textual class="po-textual">twin documents</textual></emphasis><textual class="po-textual">, in which each hierarchy is
                    represented by a different document, which contains the same textual
                    content but marks up the elements according to the individual hierarchy.</textual></para></listitem><listitem class="po-container e82 e82"><para class="po-block e83 e83"><textual class="po-textual">
                    </textual><emphasis class="po-inline e84 e84" role="ital"><textual class="po-textual">stand-off markup</textual></emphasis><textual class="po-textual">, which puts all the textual
                    content in a single structure with the possible specification of the shared
                    hierarchy, and puts the remaining elements in other structures (e.g., files) with the
                    positional association of each starting and ending location to the main
                    structure, using, for instance, XPointer </textual><xref class="po-milestone e85 e85" linkend="bib-9"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> locations.
                </textual></para></listitem></itemizedlist><para class="po-block e86 e86"><textual class="po-textual">A separate approach is to give up the XML requirements of a single hierarchy, and
            try new approaches where multiple hierarchies can be specified in the same text flow.
            The data structure itself, of course, is not a tree anymore, and needs to become
            something more general. The </textual><emphasis class="po-inline e87 e87" role="ital"><textual class="po-textual">General Ordered-Descendant Directed
                Acyclic Graph</textual></emphasis><textual class="po-textual">
            </textual><xref class="po-milestone e88 e88" linkend="bib-5"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, or </textual><emphasis class="po-inline e89 e89" role="ital"><textual class="po-textual">GODDAG</textual></emphasis><textual class="po-textual">, is the most
            relevant data structure that has been used to specify complex markup hierarchies, such
            as overlapping between elements and fragmentation.</textual></para><para class="po-block e90 e90"><textual class="po-textual">Although GODDAG is not able to handle directly other features such as anonymous
            elements and structured attributes, yet another different non-XML approach for these and
            other well-known overlapping scenarios is given by </textual><emphasis class="po-inline e91 e91" role="ital"><textual class="po-textual">Layered Markup
                anNotation Language</textual></emphasis><textual class="po-textual">
            </textual><xref class="po-milestone e92 e92" linkend="bib-6"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, or </textual><emphasis class="po-inline e93 e93" role="ital"><textual class="po-textual">LMNL</textual></emphasis><textual class="po-textual">. Contrarily to
            GODDAG, that expresses the many hierarchies with a graph, LMNL uses a XML-like syntax
            where named or anonymous elements can overlap with other ones in one or more element
                </textual><emphasis class="po-inline e94 e94" role="ital"><textual class="po-textual">layers</textual></emphasis><textual class="po-textual">.</textual></para><para class="po-block e95 e95"><textual class="po-textual">A similar approach is used by XConcur </textual><xref class="po-milestone e96 e96" linkend="bib-24"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. An XConcur document
            is made of multiple layers coexisting in the same multi-root structure, written in a
            XML-like syntax: each layer represents an independent hierarchy that can be extracted as
            a single unit and validated against a DTD, XML-Schema or RelaxNG schema. Relationships
            and constraints between multiple hierarchies are ruled by a related constraint language
            called XConcur-CL. XConcur documents end up being very complex and few tools to
            manipulate them are available.</textual></para></section><section class="po-hcontainer e97 e97"><title class="po-block e98 e98"><textual class="po-textual">Could singing songs be such a big deal?</textual></title><para class="po-block e99 e99"><textual class="po-textual">To illustrate some of the difficulties in handling complex structures, let us examine
            a fictitious karaoke application in which lyrics are displayed on a screen in sync with
            a recording of the instrumental parts of the corresponding song; in order to make the
            example even more interesting, let us consider the situation whereby, beside the
            screenfuls of lyrics, the application would also show the chords of the song for any
            additional instrument playing along, and a few fun facts popups here and there to keep
            the attention of the readers. </textual></para><para class="po-block e100 e100"><textual class="po-textual">We will use as an example for our discussion the song "And I love her" by the Beatles,
            one of the most famous and sung songs of the history of modern music. The lyrics of the original
            version appear in </textual><xref class="po-milestone e101 e101" linkend="Tablyrics"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><table border="1" class="po-container e102 e102" xml:id="Tablyrics" xreflabel="Table 1"><caption class="po-container e103 e103"><para class="po-block e104 e104"><textual class="po-textual">Lyrics and structure of âAnd I love
                    herâ by The Beatles</textual></para></caption><tbody class="po-table e105 e105"><tr class="po-table e106 e106"><th class="po-field e107 e107"><textual class="po-textual">
                        </textual><para class="po-block e108 e108"><textual class="po-textual">Title</textual></para><textual class="po-textual">
                    </textual></th><td class="po-block e109 e109"><textual class="po-textual">
                        </textual><para class="po-block e110 e110"><textual class="po-textual">And I love her</textual></para><textual class="po-textual">
                    </textual></td></tr><tr class="po-table e111 e111"><th class="po-field e112 e112"><textual class="po-textual">
                        </textual><para class="po-block e113 e113"><textual class="po-textual">1</textual></para><textual class="po-textual">
                    </textual></th><td class="po-block e114 e114"><textual class="po-textual">
                        </textual><para class="po-block e115 e115"><textual class="po-textual">I give her all my love / That's all I do / And if you saw my love /
                            You'd love her too</textual></para><textual class="po-textual">
                    </textual></td></tr><tr class="po-table e116 e116"><th class="po-field e117 e117"><textual class="po-textual">
                        </textual><para class="po-block e118 e118"><textual class="po-textual">Chorus</textual></para><textual class="po-textual">
                    </textual></th><td class="po-block e119 e119"><textual class="po-textual">
                        </textual><para class="po-block e120 e120"><textual class="po-textual">I love her</textual></para><textual class="po-textual">
                    </textual></td></tr><tr class="po-table e121 e121"><th class="po-field e122 e122"><textual class="po-textual">
                        </textual><para class="po-block e123 e123"><textual class="po-textual">2</textual></para><textual class="po-textual">
                    </textual></th><td class="po-block e124 e124"><textual class="po-textual">
                        </textual><para class="po-block e125 e125"><textual class="po-textual">She gives me ev'rything / And tenderly / The kiss my lover brings /
                            She brings to me</textual></para><textual class="po-textual">
                    </textual></td></tr><tr class="po-table e126 e126"><th class="po-field e127 e127"><textual class="po-textual">
                        </textual><para class="po-block e128 e128"><textual class="po-textual">Chorus</textual></para><textual class="po-textual">
                    </textual></th><td class="po-block e129 e129"><textual class="po-textual">
                        </textual><para class="po-block e130 e130"><textual class="po-textual">And I love her</textual></para><textual class="po-textual">
                    </textual></td></tr><tr class="po-table e131 e131"><th class="po-field e132 e132"><textual class="po-textual">
                        </textual><para class="po-block e133 e133"><textual class="po-textual">3</textual></para><textual class="po-textual">
                    </textual></th><td class="po-block e134 e134"><textual class="po-textual">
                        </textual><para class="po-block e135 e135"><textual class="po-textual">A love like ours / Could never die / As long as I / Have you near
                            me</textual></para><textual class="po-textual">
                    </textual></td></tr><tr class="po-table e136 e136"><th class="po-field e137 e137"><textual class="po-textual">
                        </textual><para class="po-block e138 e138"><textual class="po-textual">4</textual></para><textual class="po-textual">
                    </textual></th><td class="po-block e139 e139"><textual class="po-textual">
                        </textual><para class="po-block e140 e140"><textual class="po-textual">Bright are the stars that shine / Dark is the sky / I know this love
                            of mine / Will never die</textual></para><textual class="po-textual">
                    </textual></td></tr><tr class="po-table e141 e141"><th class="po-field e142 e142"><textual class="po-textual">
                        </textual><para class="po-block e143 e143"><textual class="po-textual">Chorus</textual></para><textual class="po-textual">
                    </textual></th><td class="po-block e144 e144"><textual class="po-textual">
                        </textual><para class="po-block e145 e145"><textual class="po-textual">And I love her</textual></para><textual class="po-textual">
                    </textual></td></tr><tr class="po-table e146 e146"><th class="po-field e147 e147"><textual class="po-textual">
                        </textual><para class="po-block e148 e148"><textual class="po-textual">4</textual></para><textual class="po-textual">
                    </textual></th><td class="po-block e149 e149"><textual class="po-textual">
                        </textual><para class="po-block e150 e150"><textual class="po-textual">Bright are the stars that shine / Dark is the sky / I know this love
                            of mine / Will never die</textual></para><textual class="po-textual">
                    </textual></td></tr><tr class="po-table e151 e151"><th class="po-field e152 e152"><textual class="po-textual">
                        </textual><para class="po-block e153 e153"><textual class="po-textual">Chorus</textual></para><textual class="po-textual">
                    </textual></th><td class="po-block e154 e154"><textual class="po-textual">
                        </textual><para class="po-block e155 e155"><textual class="po-textual">And I love her</textual></para><textual class="po-textual">
                    </textual></td></tr></tbody></table><para class="po-block e156 e156"><textual class="po-textual">The first difficulty for our karaoke application is to handle more than one structure
            at the same time. We may be interesting in building multiple structures over the same
            content:</textual></para><itemizedlist class="po-table e157 e157"><listitem class="po-container e158 e158"><para class="po-block e159 e159"><textual class="po-textual">the lyrics organized in stanzas and verses</textual></para></listitem><listitem class="po-container e160 e160"><para class="po-block e161 e161"><textual class="po-textual">the notation for the time-driven excerpts of lyrics as shown on screen during
                    the playback</textual></para></listitem><listitem class="po-container e162 e162"><para class="po-block e163 e163"><textual class="po-textual">additional time-driven visualization of the chords, with different time
                    intervals</textual></para></listitem><listitem class="po-container e164 e164"><para class="po-block e165 e165"><textual class="po-textual">the (either time-driven or content-driven) visualization of pop-ups with fun
                    fact sentences</textual></para></listitem></itemizedlist><para class="po-block e166 e166"><textual class="po-textual">Furthermore, we may need to deal with small difference in lyrics if the gender of the
            loved one is female, as in Beatles' original (âand I love herâ) or male, as in several
            covers (âand I love himâ).</textual></para><section class="po-hcontainer e167 e167" xml:id="xml"><title class="po-block e168 e168"><textual class="po-textual">Dark is the overlapping sky</textual></title><para class="po-block e169 e169"><textual class="po-textual">Let us concentrate on a single stanza of the song, the fourth, and its
                refrain:</textual></para><programlisting class="po-block e170 e170" xml:space="preserve"><textual class="po-textual">Bright are the stars that shine / Dark is the sky / I know this love of mine / Will never die / And I love her</textual></programlisting><para class="po-block e171 e171"><textual class="po-textual"> The first hierarchy represents the lyrics. We may employ an XHTML vocabulary, using the
                class attribute for characterizing containers (e.g. âstanzaâ and ârefrainâ),
                obtaining a clear and straightforward structure.</textual></para><programlisting class="po-block e172 e172" xml:space="preserve"><textual class="po-textual">&lt;body&gt;
    &lt;div class="stanza" title="4"&gt;
        &lt;p&gt;Bright are the stars that shine&lt;/p&gt;
        &lt;p&gt;Dark is the sky&lt;/p&gt;
        &lt;p&gt;I know this love of mine&lt;/p&gt;
        &lt;p&gt;Will never die&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class="refrain"&gt;
        &lt;p&gt;And I love her&lt;/p&gt;
    &lt;/div&gt;
&lt;/body&gt;</textual></programlisting><para class="po-block e173 e173"><textual class="po-textual"> The harmony of the song uses two chords, Em and Bm, for each of the first three
                lines, then moving to the bridge G for the last line and then the refrain in A and
                D. The A chord starts while the melody is still singing the second part of the last
                line of the stanza. A possible, trivial hierarchy for chords would then be: </textual></para><programlisting class="po-block e174 e174" xml:space="preserve"><textual class="po-textual">&lt;chords&gt;
    &lt;Em&gt;Bright are the&lt;/Em&gt;
    &lt;Bm&gt;stars that shine&lt;/Bm&gt;
    &lt;Em&gt;Dark is the&lt;/Em&gt;
    &lt;Bm&gt;sky&lt;/Bm&gt;
    &lt;Em&gt;I know this&lt;/Em&gt;
    &lt;Bm&gt;love of mine&lt;/Bm&gt;
    &lt;G&gt;Will never&lt;/G&gt;
    &lt;A&gt;die And I&lt;/A&gt;
    &lt;D&gt;love her&lt;/D&gt;
&lt;/chords&gt;</textual></programlisting><para class="po-block e175 e175"><textual class="po-textual"> We have a different issue with the timings for the lyrics. We want each line to
                appear exactly when the music calls for it to be sung, but at the same time we want that the next
                line is shown, too, so that the singer gets ready to sing it aftwerward. Thus each line
                has to appear twice in each screenful, as in the following XML fragment: </textual></para><programlisting class="po-block e176 e176" xml:space="preserve"><textual class="po-textual">&lt;timing&gt;
    &lt;screenful starts=â68â&gt;
        &lt;main&gt;Bright are the stars that shine&lt;/main&gt;
        &lt;next&gt;Dark is the sky&lt;/next&gt;
    &lt;/screenful&gt;
    &lt;screenful starts=â72â&gt;
        &lt;main&gt;Dark is the sky&lt;/main&gt;
        &lt;next&gt;I know this love of mine&lt;/next&gt;
    &lt;/screenful&gt;
    &lt;screenful starts=â76â&gt;
        &lt;main&gt;I know this love of mine&lt;/main&gt;
        &lt;next&gt;Will never die&lt;/next&gt;
    &lt;/screenful&gt;
    &lt;screenful starts=â80â&gt;
        &lt;main&gt;Will never die&lt;/main&gt;
        &lt;next&gt;And I love her&lt;/next&gt; 
    &lt;/screenful&gt;
    &lt;screenful starts=â84â&gt;
        &lt;main&gt;And I love her&lt;/main&gt;
    &lt;/screenful&gt;
&lt;/timing&gt;</textual></programlisting><para class="po-block e177 e177"><textual class="po-textual"> Only this is not nice: each line appears twice in the screen, and therefore twice
                in the XML document, and forcing them to appear only once in the XML structure would
                either require overlapping, or forcing some structural semantics into procedural
                attributes, that would imply implementing ad hoc visualization tools, as in: </textual></para><programlisting class="po-block e178 e178" xml:space="preserve"><textual class="po-textual">       &lt;p main=â68â&gt;Bright are the stars that shine&lt;/p&gt;
       &lt;p main=â72â next=â68â&gt;Dark is the sky&lt;/p&gt;
       &lt;p main=â76â next=â72â&gt;I know this love of mine&lt;/p&gt;
       &lt;p main=â80â next=â76â&gt;Will never die&lt;/p&gt;
       &lt;p main=â84â next=â80â&gt;And I love her&lt;/p&gt;</textual></programlisting><para class="po-block e179 e179"><textual class="po-textual"> We do not like this approach and will not consider it further. Yet the
                multiplicity of the lines is worrisome, as it creates a redundancy that has to be
                carefully considered. </textual></para><para class="po-block e180 e180"><textual class="po-textual">As for the pop-ups, we want to show some additional text exactly at the right time
                â i.e. when the song gets to the precise point of the lyrics associated to these
                paragraphs. It is not even given that pop-ups are aligned with whole lines, indeed
                it could very well happen that the association transcends line boundaries, as in the
                following: </textual></para><programlisting class="po-block e181 e181" xml:space="preserve"><textual class="po-textual">&lt;funfacts&gt;
 &lt;popup&gt;
  &lt;lyrics&gt;this love of mine Will never die&lt;/lyrics&gt;
  &lt;fact&gt;
   &lt;p&gt;Paul McCartney wrote this about his girlfriend, 
      an actress named Jane Asher.&lt;/p&gt;
  &lt;/fact&gt;
 &lt;/popup&gt;
&lt;/funfacts&gt;</textual></programlisting><para class="po-block e182 e182"><textual class="po-textual"> As we have seen, each of these structures, taken individually, is a single
                hierarchy and could be easily managed with a traditional XML document. There is a
                final issue related to text variants: depending on the preferences of the singer, we
                may want to decline the lyrics in the masculine or feminine gender. As such, we end
                up with two variants of the refrain, and no syntactically evident way to point out
                which variant to show and which to ignore in each given run of the application: </textual></para><programlisting class="po-block e183 e183" xml:space="preserve"><textual class="po-textual">    &lt;div class="refrain"&gt;
        &lt;p&gt;And I love &lt;span class=âfeminineâ &gt;her&lt;/span&gt;
                      &lt;span class=âmasculineâ&gt;him&lt;/span&gt;&lt;/p&gt;
    &lt;/div&gt;</textual></programlisting><para class="po-block e184 e184"><textual class="po-textual"> This is not declarative at all: it is the application's job to know that when the
                feminine version is chosen, elements of class feminine are present (i.e., shown) and
                elements of class masculine are absent (i.e., hidden), and vice-versa: the class
                attribute suddenly impacts not only on the presentation of the lines, but on their
                presence and content, too.</textual></para><para class="po-block e185 e185"><textual class="po-textual">Finally, the issue of repetitions has a further and subtler issue, that impacts on
                the difference between the content of a document and its </textual><emphasis class="po-inline e186 e186" role="ital"><textual class="po-textual">structured</textual></emphasis><textual class="po-textual"> content. </textual></para><para class="po-block e187 e187"><textual class="po-textual">In the Beatles' song there are some repetitions of quite large structures, such as
                the refrain and the fourth stanza. It could be considered a pointless exercise in
                futility to decide whether the refrains of a song are to be considered as one
                instance of content to be repeated as needed after each stanza, or many different
                instances whose content happens to be identical. Yet, the praxis of transcription of
                song lyrics is usually to qualify the refrain lyrics as such the first time they are
                sung, and then refer back to them all other times without actually repeating the
                content, and as such we will treat them in our example. Yet the refrains are
                necessary handled, in an XML document, by repeating the entire structure,
                duplicating the markup code and the text. We could introduce it the first time
                    only</textual><footnote class="po-popup e188 e188" xml:id="sdfootnote2sym"><para class="po-block e189 e189"><textual class="po-textual">We will ignore, for the time being, that in the lyrics that are actually
                        sung by the Beatles the first refrain is slightly different from the other
                        ones, since they sing âI love herâ instead of âand I love herâ</textual></para></footnote><textual class="po-textual">, and refer to it in some way the other times â for example, through an
                âhrefâ attribute â in the other parts of the lyrics. Similarly we could handle the
                repetition of the fourth stanza, i.e., as follows:</textual></para><programlisting class="po-block e190 e190" xml:space="preserve"><textual class="po-textual">&lt;body&gt;
    &lt;h1&gt;And I love her&lt;/h1&gt;
    &lt;div id=âfirstâ class="stanza" title="1"&gt;[...]&lt;/div&gt;
    </textual><emphasis class="po-inline e191 e191" role="bold"><textual class="po-textual">&lt;div id=ârefrainâ class="refrain"&gt;</textual></emphasis><textual class="po-textual">
				</textual><emphasis class="po-inline e192 e192" role="bold"><textual class="po-textual">&lt;p&gt;And I love her&lt;/p&gt;</textual></emphasis><textual class="po-textual">
				</textual><emphasis class="po-inline e193 e193" role="bold"><textual class="po-textual">&lt;/div&gt;</textual></emphasis><textual class="po-textual">
    &lt;div id=âsecondâ class="stanza" title="2"&gt;[...]&lt;/div&gt;
    </textual><emphasis class="po-inline e194 e194" role="bold"><textual class="po-textual">&lt;div href=â#refrainâ /&gt;</textual></emphasis><textual class="po-textual">
    &lt;div id=âthirdâ class="stanza" title="3"&gt;[...]&lt;/div&gt;
    &lt;div id=âfourthâ class="stanza" title="4"&gt;[...]&lt;/div&gt;
    </textual><emphasis class="po-inline e195 e195" role="bold"><textual class="po-textual">&lt;div href=â#refrainâ /&gt;</textual></emphasis><textual class="po-textual">
    &lt;div href=â#fourthâ /&gt;
    </textual><emphasis class="po-inline e196 e196" role="bold"><textual class="po-textual">&lt;div href=â#refrainâ /&gt;</textual></emphasis><textual class="po-textual">
&lt;/body&gt;</textual></programlisting><para class="po-block e197 e197"><textual class="po-textual"> Unfortunately, we believe again that this approach is not declarative enough: it
                is the application's job to understand that the last three div elements are not
                empty, but refer to the previous-declared elements and repeat their content.</textual></para><para class="po-block e198 e198"><textual class="po-textual"> XML entity references could be used to express repetitions too: content can be
                declared as an entity to be resolved when users view the document. From a merely
                presentation perspective, such an approach would be enough as all the repeated
                content is retrieved and merged into the final XML file. On the other hand,
                processing entities in a more sophisticated way still require entangled and
                application-dependant operations. For instance, it is rather complex to add metadata
                about entities, to extract information about that content, to process those
                fragments via XSLT or to validate entity fragments.</textual></para><para class="po-block e199 e199"><textual class="po-textual">Joining the above mentioned different hierarchies in a single document and dealing
                with the issues mentioned so far presents issues that are not manageable
                with the plain XML armamentarium, and requires special approaches: </textual></para><itemizedlist class="po-table e200 e200"><listitem class="po-container e201 e201"><para class="po-block e202 e202"><textual class="po-textual">the timing of the A chord overlaps two lines of the lyrics;</textual></para></listitem><listitem class="po-container e203 e203"><para class="po-block e204 e204"><textual class="po-textual">the timed display of the lyrics requires each line to be shown multiple
                        times;</textual></para></listitem><listitem class="po-container e205 e205"><para class="po-block e206 e206"><textual class="po-textual">the popups introduce additional text content to the document, and do so
                        independently of the stanza and line structure of the lyrics;</textual></para></listitem><listitem class="po-container e207 e207"><para class="po-block e208 e208"><textual class="po-textual">text variants require elements that exist or do not exist depending on
                        context;</textual></para></listitem><listitem class="po-container e209 e209"><para class="po-block e210 e210"><textual class="po-textual">repetitions require that content is specified once, and referred to many
                        times. </textual></para></listitem></itemizedlist><para class="po-block e211 e211"><textual class="po-textual">Some of these structural issues can be handled by standard overlapping approaches,
                and other can be dealt with by introducing ad hoc, non-declarative markup that is
                procedurally interpreted by specialized tools. But it is at the level of the data
                structure model that we prefer to study the problem. </textual></para></section><section class="po-hcontainer e212 e212"><title class="po-block e213 e213"><textual class="po-textual">Restricted GODDAG</textual></title><para class="po-block e214 e214"><textual class="po-textual">Handling overlapping elements requires a more expressive data structure than
                trees, such as directed graphs. </textual><emphasis class="po-inline e215 e215" role="ital"><textual class="po-textual">Restricted GODDAG</textual></emphasis><textual class="po-textual">
                (</textual><xref class="po-milestone e216 e216" linkend="bib-5"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and </textual><xref class="po-milestone e217 e217" linkend="bib-23"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) are able to deal with the
                lyrics/chord overlap, as shown in </textual><xref class="po-milestone e218 e218" linkend="rGODDAG"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><figure class="po-container e219 e219" floatstyle="1" xml:id="rGODDAG" xreflabel="Figure 1"><mediaobject class="po-container e220 e220"><imageobject class="po-container e221 e221"><imagedata class="po-meta e222 e222" fileref="../../../vol3/graphics/Peroni01/Peroni01-001.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e223 e223"><para class="po-block e224 e224"><textual class="po-textual">The rGODDAG structure to handle lyrics and chords overlapping. The red
                            dashed line represents, here and in the following figures, the document
                            order. </textual></para></caption></mediaobject></figure><para class="po-block e225 e225"><textual class="po-textual">Restricted GODDAGS gives strong support for overlapping structures and guarantees
                their full linearizability into TexMECS documents </textual><xref class="po-milestone e226 e226" linkend="bib-18"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><para class="po-block e227 e227"><textual class="po-textual">Restricted GODDAGs, on the other hand, will not help us with the management of
                popups. Restricted GODDAGS have some strong constraints that prevent this:</textual></para><itemizedlist class="po-table e228 e228"><listitem class="po-container e229 e229"><para class="po-block e230 e230"><textual class="po-textual">each r-GODDAG node dominates a contiguous sequence of leaf nodes (i.e.,
                        nodes that contain text);</textual></para></listitem><listitem class="po-container e231 e231"><para class="po-block e232 e232"><textual class="po-textual">no two r-GODDAG nodes that are not connected by a dominance relation,
                        dominate the same subsequence of leaf nodes.</textual></para></listitem></itemizedlist><para class="po-block e233 e233"><textual class="po-textual">For our popups, these constraints appear quite strong, and particularly the first
                one. Basically, the requirement of contiguity prevents two hierarchies to overlap on
                some leaf nodes whenever the content of other leaf nodes is different. </textual></para><para class="po-block e234 e234"><textual class="po-textual">In our example, inserting in the same document both the lyrics
                structure and the one related to the popups implies breaking the contiguousness of
                one of the two hierarchies, because there is always a node that breaks the constraint.</textual></para><para class="po-block e235 e235"><textual class="po-textual">Consider the situation in which a popup is associated to the string âthis love of
                mine Will never dieâ. If the content of the fun fact is put at the end of the
                lyrics, as shown in </textual><xref class="po-milestone e236 e236" linkend="rGODDAGfactfail"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, the elements âfunfactsâ and
                âfactâ both dominate non-contiguous leaf nodes, as âthis love of mineâ is
                non-contiguous with âPaul McCartney...â, thus breaking the constraint.</textual></para><figure class="po-container e237 e237" floatstyle="1" xml:id="rGODDAGfactfail" xreflabel="Figure 2"><mediaobject class="po-container e238 e238"><imageobject class="po-container e239 e239"><imagedata class="po-meta e240 e240" fileref="../../../vol3/graphics/Peroni01/Peroni01-002.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e241 e241"><para class="po-block e242 e242"><textual class="po-textual">The first tentative to make an r-GODDAG for describing both lyrics and
                            fun fact.</textual></para></caption></mediaobject></figure><para class="po-block e243 e243"><textual class="po-textual">If, on the other hand, the content of the fun fact is put before or after the
                lines it refers to (</textual><xref class="po-milestone e244 e244" linkend="rGODDAGbodyfail"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">), the element âbodyâ will
                dominate non-contiguous leaf nodes (two of them will be interrupted by the âPaul
                McCartney...â node that does not belong to that hierarchy) and therefore violate the
                constraint.</textual></para><figure class="po-container e245 e245" floatstyle="1" xml:id="rGODDAGbodyfail" xreflabel="Figure 3"><mediaobject class="po-container e246 e246"><imageobject class="po-container e247 e247"><imagedata class="po-meta e248 e248" fileref="../../../vol3/graphics/Peroni01/Peroni01-003.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e249 e249"><para class="po-block e250 e250"><textual class="po-textual">The second tentative to make an r-GODDAG for describing both lyrics
                            and fun facts.</textual></para></caption></mediaobject></figure><para class="po-block e251 e251"><textual class="po-textual">So, even if a restricted GODDAG is a more expressive data structure than a tree,
                it is still not sufficient to handle complex scenarios such as the ones described.
                The overall point of the contiguity constraint is to allow for embedding markup
                within text; thus r-GODDAG structures are indeed representable with milestones or
                fragmentation in XML, or with TexMECS documents, but more complex structures are
                still unavailable, such as those involving non-contiguous leaf nodes.</textual></para></section><section class="po-hcontainer e252 e252"><title class="po-block e253 e253"><textual class="po-textual">A more general data structure: the GODDAG</textual></title><para class="po-block e254 e254"><textual class="po-textual">If we give up the feature of embedding, we already have a data structure for
                handling complex overlapping scenarios: the full GODDAG, which does not require the
                two constraints mentioned above: it does not require leaf nodes to follow document order, 
                and it does not require that any two different nodes dominate
                different sets of leaf nodes.</textual></para><para class="po-block e255 e255"><textual class="po-textual">Without these restrictions, we can describe all four hierarchies in a GODDAG, as
                shown in </textual><xref class="po-milestone e256 e256" linkend="GODDAG"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. The obvious disadvantage of this data structure
                is that embedding everything in a linear structure such as an XML
                document implies either losing some information or recurring to procedural tricks that
                would subject the structural meaning of the document to specific tools.</textual></para><figure class="po-container e257 e257" floatstyle="1" xml:id="GODDAG" xreflabel="Figure 4"><mediaobject class="po-container e258 e258"><imageobject class="po-container e259 e259"><imagedata class="po-meta e260 e260" fileref="../../../vol3/graphics/Peroni01/Peroni01-004.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e261 e261"><para class="po-block e262 e262"><textual class="po-textual">A GODDAG for the four hierarchies defined for the song. Document order
                            is not shown since where it is not obvious (e.g., in the lyrics lines
                            it is completely arbitrary).</textual></para></caption></mediaobject></figure><para class="po-block e263 e263"><textual class="po-textual">In </textual><xref class="po-milestone e264 e264" linkend="GODDAG"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> the full GODDAG structure of the three data hierarchies is
                shown: lyrics (in blue), the time in which the lyrics are shown (in yellow), the
                chords (in violet) and the fun facts popups (in green). Non-bordered nodes are
                content, bordered nodes represent markup: rectangles are XML elements, and
                rounded rectangles are XML attributes.</textual></para><para class="po-block e265 e265"><textual class="po-textual">Moreover, through GODDAG we can handle cases of textual variants and some simple
                cases of repetitions (for instance, specifying the presence of the class attribute
                in multiple div elements, and even  specifying that the refrain text appears in
                multiple places, but is really only defined once). </textual></para><para class="po-block e266 e266"><textual class="po-textual">GODDAG can also be employed for textual variants: as shown in </textual><xref class="po-milestone e267 e267" linkend="textualVariation"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, since the refrain uses âherâ if the lyrics are
                feminine and âhimâ otherwise, we actually generate two different and almost
                identical lyrics hierarchies that point to the text in different manners depending
                on the chosen gender. </textual></para><figure class="po-container e268 e268" floatstyle="1" xml:id="textualVariation" xreflabel="Figure 5"><mediaobject class="po-container e269 e269"><imageobject class="po-container e270 e270"><imagedata class="po-meta e271 e271" fileref="../../../vol3/graphics/Peroni01/Peroni01-005.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e272 e272"><para class="po-block e273 e273"><textual class="po-textual">A GODDAG with repetitions and textual variants depending on the gender
                            of the lyrics.</textual></para></caption></mediaobject></figure><para class="po-block e274 e274"><textual class="po-textual">Clearly, the best thing we can do for linearizing all these kinds of structures
                presented in this section is to use stand-off markup or twin documents techniques in
                order to embed all the elements in a rationally unique document. Expressing all 
                information in a single XML tree requires some procedural tricks: elements 
                with procedural values, for instance, are an acceptable
                trade-off between the structure and the relative document representation.</textual></para></section><section class="po-hcontainer e275 e275"><title class="po-block e276 e276"><textual class="po-textual">Beyond GODDAG: extensions for repeatability</textual></title><para class="po-block e277 e277"><textual class="po-textual">Even if the GODDAG is able to handle perfectly all the above-mentioned scenarios,
                there are more things that are interesting to represent, such as a different type of
                repetition. The screenful of lines of the karaoke example is interesting in that
                sense. </textual></para><figure class="po-container e278 e278" floatstyle="1" xml:id="repetitions" xreflabel="Figure 6"><mediaobject class="po-container e279 e279"><imageobject class="po-container e280 e280"><imagedata class="po-meta e281 e281" fileref="../../../vol3/graphics/Peroni01/Peroni01-006.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e282 e282"><para class="po-block e283 e283"><textual class="po-textual">This graph describes the structure of âAnd I Love Herâ avoiding the
                            explicit repetitions (refrain and fourth stanza).</textual></para></caption></mediaobject></figure><para class="po-block e284 e284"><textual class="po-textual">In </textual><xref class="po-milestone e285 e285" linkend="repetitions"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> we show a plausible graph for describing the
                entire structure of âAnd I Love Herâ that avoids the explicit repetitions of the
                refrain and the fourth stanza. Note that the body element has many arcs going to the
                div of the refrain, and two going to the div of the fourth stanza, and that we had
                to specify the order of the arcs themselves.</textual></para><para class="po-block e286 e286"><textual class="po-textual">Unfortunately, GODDAGs do not support this kind of repetitions. In fact, for any
                non-terminal node </textual><emphasis class="po-inline e287 e287" role="ital"><textual class="po-textual">n</textual></emphasis><textual class="po-textual">, the sets of arcs from
                    </textual><emphasis class="po-inline e288 e288" role="ital"><textual class="po-textual">n</textual></emphasis><textual class="po-textual"> is ordered and, if two arcs </textual><emphasis class="po-inline e289 e289" role="ital"><textual class="po-textual">nâa</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e290 e290" role="ital"><textual class="po-textual">nâb</textual></emphasis><textual class="po-textual"> exist and if 
                </textual><emphasis class="po-inline e291 e291" role="ital"><textual class="po-textual">a</textual></emphasis><textual class="po-textual">
                is equal to </textual><emphasis class="po-inline e292 e292" role="ital"><textual class="po-textual">b</textual></emphasis><textual class="po-textual">, then </textual><emphasis class="po-inline e293 e293" role="ital"><textual class="po-textual">nâa</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e294 e294" role="ital"><textual class="po-textual">nâb</textual></emphasis><textual class="po-textual"> are the same arc. 
                This prevents us from creating
                multiple arcs from body to the refrain divs, which is exactly what we are trying to
                do.</textual></para><para class="po-block e295 e295"><textual class="po-textual">In order to avoid this constraint, we need to extend the definition of GODDAGs. In
                particular, we believe that we can solve our problem by simply relaxing the rule
                that requires non-terminal nodes in GODDAGs to have a general identifier (a label)
                associated to them. We call </textual><emphasis class="po-inline e296 e296" role="ital"><textual class="po-textual">anonymous</textual></emphasis><textual class="po-textual"> all
                non-terminal nodes that do not have such general identifier and we refer to this new
                GODDAG as </textual><emphasis class="po-inline e297 e297" role="ital"><textual class="po-textual">extended GODDAG</textual></emphasis><textual class="po-textual"> (or </textual><emphasis class="po-inline e298 e298" role="ital"><textual class="po-textual">e-GODDAG</textual></emphasis><textual class="po-textual">). Anonymous e-GODDAG nodes allow the definition of
                anonymous elements </textual><emphasis class="po-inline e299 e299" role="ital"><textual class="po-textual">a la</textual></emphasis><textual class="po-textual"> LMNL </textual><xref class="po-milestone e300 e300" linkend="bib-6"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, and at the same time provide the necessary infrastructure for our repeating
                refrains.</textual></para><para class="po-block e301 e301"><textual class="po-textual">Through e-GODDAG, in fact, we are now able to allow the previous repetitions: we
                have to add as many anonymous nodes as needed for any repetition we need. Since
                anonymous nodes do not introduce markup or content, they can be used to disambiguate
                multiple arcs going from and to the same nodes: each repeated arc from </textual><emphasis class="po-inline e302 e302" role="ital"><textual class="po-textual">body</textual></emphasis><textual class="po-textual"> to </textual><emphasis class="po-inline e303 e303" role="ital"><textual class="po-textual">div</textual></emphasis><textual class="po-textual"> is therefore
                interrupted by a different intermediate anonymous node</textual><footnote class="po-popup e304 e304" xml:id="sdfootnote4sym"><para class="po-block e305 e305"><textual class="po-textual">An issue to consider relates to another GODDAG constraint: no node can
                        dominate another node both directly and indirectly. That simply means that
                        we need to add an anonymous node for each repeated arc of a node, and just
                        the ones after the first one, so that the we only have indirect dominance in all of
                        them.</textual></para></footnote><textual class="po-textual">. </textual></para></section></section><section class="po-hcontainer e306 e306"><title class="po-block e307 e307"><textual class="po-textual">EARMARKing cats and docs</textual></title><para class="po-block e308 e308"><textual class="po-textual">The problems described in the previous section derive mostly from the very act of
            embedding annotations: multiple overlapping annotations, especially when referring to
            the same text multiple times and reordering the document order, do not naturally fit in
            a linear structure of an XML document, and analogously there is no natural position for
            embedding annotations to the whole document.</textual></para><para class="po-block e309 e309"><textual class="po-textual">The opposite approach â full externalization of annotations </textual><emphasis class="po-inline e310 e310" role="ital"><textual class="po-textual">a
                la</textual></emphasis><textual class="po-textual"> RDF â does not satisfy our requirements, for different motivations.
            RDF annotations do not change the annotated resource in any way, but refer to it via
            URIs. The problem we face in this case is that there exists no URI referring to a
            fragment of text that is not wrapped within an XML or XHTML element provided with an ID.
            And since XHTML or XML elements need to follow a nice, hierarchical,
            document-order-compatible structure, we are back to the beginning with the problem of
            overlapping hierarchies that play with multiplicities and reshuffling of the document
            order.</textual></para><para class="po-block e311 e311"><textual class="po-textual">An approach has been recently proposed in </textual><xref class="po-milestone e312 e312" linkend="bib-3"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> in order to try to
            offer a way to identify precise document locations, called </textual><emphasis class="po-inline e313 e313" role="ital"><textual class="po-textual">pointers</textual></emphasis><textual class="po-textual">, through different means (character positions, string indexing,
            etc.) and languages (XPath </textual><xref class="po-milestone e314 e314" linkend="bib-12"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, XPointer </textual><xref class="po-milestone e315 e315" linkend="bib-9"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">,
            etc.). Unfortunately some languages mentioned, such as XPointer, were never standardized
            by the W3C and there is no sign that they will ever be in the foreseeable future.
            Furthermore, from the RDF point of view all URIs are opaque strings referring to
            different resources, and as such it would be difficult to create ontologies and make
            inferences that differentiate assertions on text fragments from assertions on elements
            or other structures, the required infrastructure to verify overlapping or
            superimposition of assertions.</textual></para><para class="po-block e316 e316"><textual class="po-textual">There is another (less important) consideration that comes down against a fully
            externalized approach: the fact that assertions are disjoint from the original document
            and require a more articulated process for storing and transfer (this is known as the 
            so-called fragility of standoff markup). Consider the case of
            textual variations in our karaoke example: it would be useful to handle all variations
            (and any other overlapping hierarchy) within a unique document, easier to move and
            manipulate. The </textual><emphasis class="po-inline e317 e317" role="ital"><textual class="po-textual">variant graph</textual></emphasis><textual class="po-textual"> approach, introduced in
                </textual><xref class="po-milestone e318 e318" linkend="bib-2"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, goes in that direction and allows users to express these
            differences and to extract multiple text linearizations, depending on the particular
            context.</textual></para><para class="po-block e319 e319"><textual class="po-textual">Our approach takes inspiration from this work and from the GODDAG-related theories.
            The goal is to introduce a new syntactic approach for overlapping markup that combines
            advantages of embedded and external annotations into a unified framework. In this
            section we define an ontology-based model for expressing such complex overlapping
            structures, similar but more general of existing research efforts such as </textual><xref class="po-milestone e320 e320" linkend="bib-4"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and </textual><xref class="po-milestone e321 e321" linkend="bib-11"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.
        </textual></para><para class="po-block e322 e322"><textual class="po-textual">A very central point of our proposal is the reliance on Semantic Web
            technologies. The reason is that we want to create tools that can exploit existing
            modules, that can be integrated with other applications and that can be extended by
            other researchers too.</textual></para><para class="po-block e323 e323"><textual class="po-textual">As expected, RDF and OWL are the candidates for our proposal. Actually, we propose an
            intermediate language built on the top of RDF and OWL data model, that can be
            straightforwardly translated into these standards. We called this language </textual><emphasis class="po-inline e324 e324" role="ital"><textual class="po-textual">EARMARK</textual></emphasis><textual class="po-textual"> (</textual><emphasis class="po-inline e325 e325" role="ital"><textual class="po-textual">Extreme Annotational RDF
                Markup</textual></emphasis><textual class="po-textual">). EARMARK allows us to build e-GODDAG-equivalent data structures
            that encode all the aforementioned scenarios. High-level data structures can be then
            instantiated into W3C standard documents, easy to integrate in legacy tools and
            environments.</textual></para><para class="po-block e326 e326"><textual class="po-textual">Basically, EARMARK allows us create assertions on text fragments by using an
            intermediate ontology that subsumes the XPointer schemas in a manageable way and builds
            from there the concepts of markup structures and generic identifiers useful for the
            specification of elements and attributes.</textual></para><section class="po-hcontainer e327 e327"><title class="po-block e328 e328"><textual class="po-textual">General model</textual></title><para class="po-block e329 e329"><textual class="po-textual">This section describes the model behind EARMARK, </textual><emphasis class="po-inline e330 e330" role="ital"><textual class="po-textual">Extreme
                    Annotational RDF Markup. </textual></emphasis><textual class="po-textual">The model itself is defined through an OWL
                document specifying classes and relationships. Through these classes we can produce
                EARMARK documents with assertions about individuals.</textual></para><para class="po-block e331 e331"><textual class="po-textual">We introduce four concepts: </textual><emphasis class="po-inline e332 e332" role="ital"><textual class="po-textual">docuverses</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e333 e333" role="ital"><textual class="po-textual">locations</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e334 e334" role="ital"><textual class="po-textual">ranges</textual></emphasis><textual class="po-textual"> and
                    </textual><emphasis class="po-inline e335 e335" role="ital"><textual class="po-textual">markup items</textual></emphasis><textual class="po-textual">. Each of them is represented in
                EARMARK with a different (and disjoint) OWL class. The following code snippets are
                written using Turtle </textual><xref class="po-milestone e336 e336" linkend="bib-13"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">
                </textual><footnote class="po-popup e337 e337" xml:id="sdfootnote5sym"><para class="po-block e338 e338"><textual class="po-textual">In all code examples we will also be implying the following
                        prefixes:</textual></para><para class="po-block e339 e339"><textual class="po-textual">
                        </textual><programlisting class="po-block e340 e340" xml:space="preserve"><textual class="po-textual">
    @prefix :        &lt;http://www.essepuntato.it/2008/12/earmark#&gt; .
    @prefix rdf:     &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
    @prefix rdfs:    &lt;http://www.w3.org/2000/01/rdf-schema#&gt; .
    @prefix owl:     &lt;http://www.w3.org/2002/07/owl#&gt; .
    @prefix xsd:     &lt;http://www.w3.org/2001/XMLSchema#&gt; .
    @prefix swrl:    &lt;http://www.w3.org/2003/11/swrl#&gt; .
    @prefix swrlb:   &lt;http://www.w3.org/2003/11/swrlb#&gt; .</textual></programlisting><textual class="po-textual">
                    </textual></para></footnote><textual class="po-textual">.</textual></para><para class="po-block e341 e341"><textual class="po-textual">The textual content of a EARMARK document is conceptually separated from the
                annotations, and is referred to by means of assertions on the specific class called
                âDocuverseâ. This class (and its name) is based on the concept introduced by Ted
                Nelson in his Xanadu Project </textual><xref class="po-milestone e342 e342" linkend="bib-14"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> to refer to the collection of
                text fragments that can be interconnected to each other and transcluded into new
                documents. </textual></para><para class="po-block e343 e343"><textual class="po-textual">The individuals of this class represent the object of discourse, i.e. all the text
                containers related to a particular EARMARK document.</textual></para><programlisting class="po-block e344 e344" xml:space="preserve"><textual class="po-textual">:Docuverse
      a       owl:Class ;
      rdfs:subClassOf owl:Thing .

:has-text
      a       owl:FunctionalProperty , owl:DatatypeProperty ;
      rdfs:domain :Docuverse ;
      rdfs:range xsd:string .

:has-uri
      a       owl:FunctionalProperty , owl:DatatypeProperty ;
      rdfs:domain :Docuverse ;
      rdfs:range xsd:anyURI .</textual></programlisting><para class="po-block e345 e345"><textual class="po-textual"> Any individual of the </textual><emphasis class="po-inline e346 e346" role="ital"><textual class="po-textual">Docuverse</textual></emphasis><textual class="po-textual"> class â commonly
                called a </textual><emphasis class="po-inline e347 e347" role="ital"><textual class="po-textual">docuverse</textual></emphasis><textual class="po-textual"> (lowercase to distinguish it
                from the class) â might </textual><emphasis class="po-inline e348 e348" role="ital"><textual class="po-textual">contain</textual></emphasis><textual class="po-textual"> or </textual><emphasis class="po-inline e349 e349" role="ital"><textual class="po-textual">refer to</textual></emphasis><textual class="po-textual"> the text fragments representing the actual
                content of the document. That is expressed through two properties: </textual><emphasis class="po-inline e350 e350" role="ital"><textual class="po-textual">has-uri</textual></emphasis><textual class="po-textual"> if the content is stored at a particular URI and
                    </textual><emphasis class="po-inline e351 e351" role="ital"><textual class="po-textual">has-text</textual></emphasis><textual class="po-textual"> if the content lies in the document
                itself.</textual></para><para class="po-block e352 e352"><textual class="po-textual">A </textual><emphasis class="po-inline e353 e353" role="ital"><textual class="po-textual">location</textual></emphasis><textual class="po-textual"> is the expression of a position in a
                particular docuverse. It is an instance of the class
                    â</textual><emphasis class="po-inline e354 e354" role="ital"><textual class="po-textual">Location</textual></emphasis><textual class="po-textual">â. The property </textual><emphasis class="po-inline e355 e355" role="ital"><textual class="po-textual">at</textual></emphasis><textual class="po-textual"> defines a precise point in the docuverse, while the property
                    </textual><emphasis class="po-inline e356 e356" role="ital"><textual class="po-textual">refers-to </textual></emphasis><textual class="po-textual">indicates the docuverse the location
                refers to.</textual></para><programlisting class="po-block e357 e357" xml:space="preserve"><textual class="po-textual">:Location
      a       owl:Class ;
      rdfs:subClassOf owl:Thing .

:refers-to
      a       owl:FunctionalProperty , owl:ObjectProperty ;
      rdfs:domain :Location ;
      rdfs:range :Docuverse .

:at   a       owl:FunctionalProperty , owl:DatatypeProperty ;
      rdfs:domain :Location ;
      rdfs:range xsd:string .</textual></programlisting><para class="po-block e358 e358"><textual class="po-textual"> The value for the property </textual><emphasis class="po-inline e359 e359" role="ital"><textual class="po-textual">at </textual></emphasis><textual class="po-textual">is a string. The
                overall ontology is then independent from the actual addressing mechanism. In fact,
                we expect several syntaxes to be used there, including XPointers.</textual></para><para class="po-block e360 e360"><textual class="po-textual">We then define the class â</textual><emphasis class="po-inline e361 e361" role="ital"><textual class="po-textual">Rangeâ</textual></emphasis><textual class="po-textual"> for any text
                lying between two locations:</textual></para><programlisting class="po-block e362 e362" xml:space="preserve"><textual class="po-textual">:Range
      a       owl:Class ;
      rdfs:subClassOf owl:Thing .

:begins
      a       owl:FunctionalProperty , owl:ObjectProperty ;
      rdfs:domain :Range ;
      rdfs:range :Location .

:ends
      a       owl:FunctionalProperty , owl:ObjectProperty ;
      rdfs:domain :Range ;
      rdfs:range :Location .</textual></programlisting><para class="po-block e363 e363"><textual class="po-textual"> A range, i.e, an individual of the class Range, is defined by a starting and an
                ending location through the properties </textual><emphasis class="po-inline e364 e364" role="ital"><textual class="po-textual">begins</textual></emphasis><textual class="po-textual"> and
                    </textual><emphasis class="po-inline e365 e365" role="ital"><textual class="po-textual">ends</textual></emphasis><textual class="po-textual"> respectively. These locations must refer
                to the same docuverse. Since this restriction cannot be directly expressed in OWL,
                we add the following SWRL </textual><xref class="po-milestone e366 e366" linkend="bib-15"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> rules to enforce that
                    constraint</textual><footnote class="po-popup e367 e367" xml:id="sdfootnote6sym"><para class="po-block e368 e368"><textual class="po-textual">Because of the functional property declarations of âbeginsâ and âendâ and
                        the SWRL rules illustrated, an EARMARK document will be consistent if and
                        only if the constraint is valid. Otherwise, there will be a range with two
                        locations that refer to two different documents.</textual></para></footnote><textual class="po-textual">:</textual></para><equation class="po-container e369 e369" xml:id="swrl1" xreflabel="(1)"><mediaobject class="po-container e370 e370"><imageobject class="po-container e371 e371"><imagedata class="po-meta e372 e372" fileref="../../../vol3/graphics/Peroni01/Peroni01-007.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></equation><equation class="po-container e373 e373" xml:id="swrl2" xreflabel="(2)"><mediaobject class="po-container e374 e374"><imageobject class="po-container e375 e375"><imagedata class="po-meta e376 e376" fileref="../../../vol3/graphics/Peroni01/Peroni01-008.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></equation><para class="po-block e377 e377"><textual class="po-textual">There is no restriction on locations used for the
                </textual><emphasis class="po-inline e378 e378" role="ital"><textual class="po-textual">begins</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e379 e379" role="ital"><textual class="po-textual">ends</textual></emphasis><textual class="po-textual">
                properties. That is very useful: it allows us to define ranges that âfollowâ
                or âreverseâ the text order of the docuverse they refer to. For instance, the string
                âdessertsâ can be considered both in document order, with the </textual><emphasis class="po-inline e380 e380" role="ital"><textual class="po-textual">begins</textual></emphasis><textual class="po-textual"> location lower than the </textual><emphasis class="po-inline e381 e381" role="ital"><textual class="po-textual">ends</textual></emphasis><textual class="po-textual">
                location or in the opposite one, forming âstressedâ</textual><emphasis class="po-inline e382 e382" role="ital"><textual class="po-textual">
                    </textual><footnote class="po-popup e383 e383" xml:id="sdfootnote7sym"><para class="po-block e384 e384"><textual class="po-textual">An interesting example of </textual><emphasis class="po-inline e385 e385" role="ital"><textual class="po-textual">semordnilap,
                            </textual></emphasis><textual class="po-textual">http://en.wikipedia.org/wiki/Palindrome#Semordnilaps</textual></para></footnote><textual class="po-textual">
                </textual></emphasis><textual class="po-textual">. Thus, the properties âbeginsâ and âendsâ define the way a range must be
                read.</textual></para><para class="po-block e386 e386"><textual class="po-textual">The class â</textual><emphasis class="po-inline e387 e387" role="ital"><textual class="po-textual">MarkupItem</textual></emphasis><textual class="po-textual">â is the superclass defining
                artefacts to be interpreted as markup (such as elements and attributes).</textual></para><programlisting class="po-block e388 e388" xml:space="preserve"><textual class="po-textual">:MarkupItem
      a       owl:Class ;
      rdfs:subClassOf owl:Thing .

:has-general-identifier
      a       owl:FunctionalProperty , owl:DatatypeProperty ;
      rdfs:domain :MarkupItem ;
      rdfs:range xsd:string .</textual></programlisting><para class="po-block e389 e389"><textual class="po-textual"> A </textual><emphasis class="po-inline e390 e390" role="ital"><textual class="po-textual">markupitem</textual></emphasis><textual class="po-textual"> individual is a sequence (rdf:Bag
                or rdf:Seq) of individuals belonging to the classes MarkupItem and Range. Is it then
                possible to define elements containing nested elements or text, or attributes
                containing values, as well as overlapped and complex structures.</textual></para><para class="po-block e391 e391"><textual class="po-textual">A markupitem might have a name, specified in the property â</textual><emphasis class="po-inline e392 e392" role="ital"><textual class="po-textual">has-general-identifier</textual></emphasis><textual class="po-textual">â (recalling the SGML term to refer to the
                name of elements </textual><xref class="po-milestone e393 e393" linkend="bib-16"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">). Note that we can classify markup items
                as </textual><emphasis class="po-inline e394 e394" role="ital"><textual class="po-textual">anonymous â </textual></emphasis><textual class="po-textual">as possible in LMNL</textual><xref class="po-milestone e395 e395" linkend="bib-6"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and e-GODDAG â by simply not asserting a general identifier
                for the items. </textual></para><para class="po-block e396 e396"><textual class="po-textual">All the concepts represented by an EARMARK document are expressed using these four
                disjoint classes and their relative properties:</textual></para><programlisting class="po-block e397 e397" xml:space="preserve"><textual class="po-textual">[]    a       owl:AllDisjointClasses ;
      owl:members (:Docuverse :Location :MarkupItem :Range) .</textual></programlisting></section><section class="po-hcontainer e398 e398"><title class="po-block e399 e399"><textual class="po-textual"> Detailed model</textual></title><para class="po-block e400 e400"><textual class="po-textual">The model discussed so far gives us a general picture of the EARMARK framework
                and, as expected, is not enough to describe all the scenarios we are interested in.
                We then need to refine our model. Such a refinement is actually a specialization of
                three classes â all except âRangeâ â in subclasses that apply specific
                restrictions.</textual></para><para class="po-block e401 e401"><textual class="po-textual">First of all, the class Docuverse is specified into a âStringDocuverseâ (the
                content is specified as value of </textual><emphasis class="po-inline e402 e402" role="ital"><textual class="po-textual">has-text</textual></emphasis><textual class="po-textual"> and no
                value is associated to </textual><emphasis class="po-inline e403 e403" role="ital"><textual class="po-textual">has-uri</textual></emphasis><textual class="po-textual">) or an
                âURIDocuverseâ (the actual content is located at the URL specified in </textual><emphasis class="po-inline e404 e404" role="ital"><textual class="po-textual">has-uri</textual></emphasis><textual class="po-textual"> and no value is given to </textual><emphasis class="po-inline e405 e405" role="ital"><textual class="po-textual">has-text</textual></emphasis><textual class="po-textual">).</textual></para><programlisting class="po-block e406 e406" xml:space="preserve"><textual class="po-textual">:StringDocuverse
      a       owl:Class ;
      rdfs:subClassOf :Docuverse ;
      owl:equivalentClass
              [ a       owl:Class ;
                owl:intersectionOf (:Docuverse [ a       owl:Restriction ;
                            owl:cardinality "1"^^xsd:nonNegativeInteger ;
                            owl:onProperty :has-text
                          ] [ a       owl:Restriction ;
                            owl:cardinality "0"^^xsd:nonNegativeInteger ;
                            owl:onProperty :has-uri
                          ])
              ] .

:URIDocuverse
      a       owl:Class ;
      rdfs:subClassOf :Docuverse ;
      owl:equivalentClass
              [ a       owl:Class ;
                owl:intersectionOf (:Docuverse [ a       owl:Restriction ;
                            owl:cardinality "0"^^xsd:nonNegativeInteger ;
                            owl:onProperty :has-text
                          ] [ a       owl:Restriction ;
                            owl:cardinality "1"^^xsd:nonNegativeInteger ;
                            owl:onProperty :has-uri
                          ])
              ] .

[]    a       owl:AllDisjointClasses ;
      owl:members (:StringDocuverse :URIDocuverse) .</textual></programlisting><para class="po-block e407 e407"><textual class="po-textual"> Depending on particular scenarios or on the kind of docuverse we are dealing with
                â it could be plain-text, XML, LaTeX, a picture, etc. â we need to be able to use
                different kinds of locations. Therefore, the class âLocationâ has at least three
                different disjoint subclasses:</textual></para><programlisting class="po-block e408 e408" xml:space="preserve"><textual class="po-textual">:CharNumberLocation
      a       owl:Class ;
      rdfs:subClassOf :Location .

:XPathLocation
      a       owl:Class ;
      rdfs:subClassOf :Location .

:XPointerLocation
      a       owl:Class ;
      rdfs:subClassOf :Location .

[]    a       owl:AllDisjointClasses ;
      owl:members (:CharNumberLocation :XPathLocation :XPointerLocation) .</textual></programlisting><itemizedlist class="po-table e409 e409"><listitem class="po-container e410 e410"><para class="po-block e411 e411"><textual class="po-textual">âCharNumberLocationâ defines a location by counting characters. In that
                        case, the string value of the âatâ property must be an integer</textual><footnote class="po-popup e412 e412" xml:id="sdfootnote8sym"><para class="po-block e413 e413"><textual class="po-textual">It is a positive integer (including zero) if we are counting from
                                the begin of the document to the end, and a negative integer for
                                vice versa.</textual></para></footnote><textual class="po-textual"> that identifies an unambiguous position in the character
                        stream;</textual></para></listitem><listitem class="po-container e414 e414"><para class="po-block e415 e415"><textual class="po-textual">âXPathLocationâ defines a location as a node of an XML docuverse. In this
                        case, the property âatâ will be an XPath expression </textual><xref class="po-milestone e416 e416" linkend="bib-12"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">;</textual></para></listitem><listitem class="po-container e417 e417"><para class="po-block e418 e418"><textual class="po-textual">âXPointerLocationâ defines a precise point in a docuverse. In that case,
                        the expression âxpointer(point(.42))â, for instance, indicates the cursor
                        in-between the 42nd and the 43rd character; with âxpointer(point(/1/9.3))â
                        we mean the cursor between the 3rd and the 4th character of the ninth node
                        of the root, and so on.</textual></para></listitem></itemizedlist><para class="po-block e419 e419"><textual class="po-textual">MarkupItem is specialized in three disjointed sub-classes: âElementâ, âAttributeâ
                and âCommentâ, that allow a more precise characterization of markup items.</textual></para><programlisting class="po-block e420 e420" xml:space="preserve"><textual class="po-textual">:Element
      a       owl:Class ;
      rdfs:subClassOf :MarkupItem .

:Attribute
      a       owl:Class ;
      rdfs:subClassOf :MarkupItem .

:Comment
      a       owl:Class ;
      rdfs:subClassOf :MarkupItem .

[]    a       owl:AllDisjointClasses ;
      owl:members (:Attribute :Comment :Element) .</textual></programlisting><para class="po-block e421 e421"><textual class="po-textual"> Through this classification, shown also in </textual><xref class="po-milestone e422 e422" linkend="earmarkontology"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, we
                can describe all the concepts introduced by XML, LMNL or TexMecs, including virtual
                elements </textual><xref class="po-milestone e423 e423" linkend="bib-17"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">
                </textual><xref class="po-milestone e424 e424" linkend="bib-18"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, structured attributes </textual><xref class="po-milestone e425 e425" linkend="bib-6"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and so on. </textual></para><figure class="po-container e426 e426" floatstyle="1" xml:id="earmarkontology" xreflabel="Figure 7"><mediaobject class="po-container e427 e427"><imageobject class="po-container e428 e428"><imagedata class="po-meta e429 e429" fileref="../../../vol3/graphics/Peroni01/Peroni01-009.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject><caption class="po-container e430 e430"><para class="po-block e431 e431"><textual class="po-textual">The class hierarchy of the EARMARK ontology.</textual></para></caption></mediaobject></figure><para class="po-block e432 e432"><textual class="po-textual">In order to discuss such potentialities, the next section analyses in detail the
                EARMARK encoding of the aforementioned karaoke example.</textual></para></section><section class="po-hcontainer e433 e433"><title class="po-block e434 e434"><textual class="po-textual">âAnd I Love Herâ in EARMARK</textual></title><para class="po-block e435 e435"><textual class="po-textual">The approach to mark up a complex document with EARMARK is composed of the
                following steps:</textual></para><itemizedlist class="po-table e436 e436"><listitem class="po-container e437 e437"><para class="po-block e438 e438"><textual class="po-textual">creation of one or more docuverses depending on the number of data streams
                        we must handle;</textual></para></listitem><listitem class="po-container e439 e439"><para class="po-block e440 e440"><textual class="po-textual">identification of the ranges within the docuverses;</textual></para></listitem><listitem class="po-container e441 e441"><para class="po-block e442 e442"><textual class="po-textual">identification of the </textual><emphasis class="po-inline e443 e443" role="ital"><textual class="po-textual">leaf</textual></emphasis><textual class="po-textual"> markup items,
                        i.e. those containing attributes and ranges only;</textual></para></listitem><listitem class="po-container e444 e444"><para class="po-block e445 e445"><textual class="po-textual">identification of the </textual><emphasis class="po-inline e446 e446" role="ital"><textual class="po-textual">internal</textual></emphasis><textual class="po-textual"> markup
                        items, i.e. those containing markup items or a mixed content of markup items
                        and ranges.</textual></para></listitem></itemizedlist><para class="po-block e447 e447"><textual class="po-textual">Let us take into consideration the fragment of the lyrics of âAnd I Love Herâ by
                The Beatles, introduced in </textual><xref class="po-milestone e448 e448" linkend="xml"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><para class="po-block e449 e449"><textual class="po-textual">In EARMARK strings are placed in one or more docuverses. As mentioned, there are
                two different types of docuverses: </textual><emphasis class="po-inline e450 e450" role="ital"><textual class="po-textual">autonomous
                    resources</textual></emphasis><textual class="po-textual"> (i.e., independent files identified by a URIs, appropriate
                for the actual lyrics of the song and the content of the fun fact popups) and
                    </textual><emphasis class="po-inline e451 e451" role="ital"><textual class="po-textual">local strings</textual></emphasis><textual class="po-textual"> (i.e. an internal data value,
                appropriate for strings that do not exist as independent units like attribute
                values, metadata, and so on).</textual></para><para class="po-block e452 e452"><textual class="po-textual">For the XML version of âAnd I Love Herâ</textual><footnote class="po-popup e453 e453" xml:id="sdfootnote9sym"><para class="po-block e454 e454"><textual class="po-textual">The complete Turtle example if âAnd I Love Herâ is available at
                        âhttp://www.essepuntato.it/2009/01/andiloveher.ttlâ.</textual></para></footnote><textual class="po-textual">, we will employ four docuverses: </textual></para><itemizedlist class="po-table e455 e455"><listitem class="po-container e456 e456"><para class="po-block e457 e457"><textual class="po-textual">an independent text file with the lyrics;</textual></para></listitem><listitem class="po-container e458 e458"><para class="po-block e459 e459"><textual class="po-textual">a local string containing strings for all attribute values;</textual></para></listitem><listitem class="po-container e460 e460"><para class="po-block e461 e461"><textual class="po-textual">a local string containing the timings of the screenfuls of lyrics;</textual></para></listitem><listitem class="po-container e462 e462"><para class="po-block e463 e463"><textual class="po-textual">an independent file with a selection of fun facts. This could just as well
                        be an existing, independent HTML resource such as the one in
                        http://www.songfacts.com/detail.php?id=43.</textual></para></listitem></itemizedlist><para class="po-block e464 e464"><textual class="po-textual">Note that we have immediately introduced the machinery for overlapping elements
                and shared text fragments. We can also add any additional annotation (such as
                spaces, separators, etc.) to each docuverse in order to make it more readable. We
                will be explicitly ignoring the non-relevant text within the docuverses. </textual></para><para class="po-block e465 e465"><textual class="po-textual">The Turtle translation of the docuverses could be</textual><footnote class="po-popup e466 e466" xml:id="sdfootnote10sym"><para class="po-block e467 e467"><textual class="po-textual">The prefix âeâ refers to
                        âhttp://www.essepuntato.it/2009/01/andiloveher#â.</textual></para></footnote><textual class="po-textual">:</textual></para><programlisting class="po-block e468 e468" xml:space="preserve"><textual class="po-textual">
     e:lyrics
         a :URIDocuverse ; :has-uri "http://www.essepuntato.it/2009/01/andiloveher.txt"^^xsd:anyURI .
     
     e:funfacts    
         a :URIDocuverse ; :has-uri "http://www.songfacts.com/detail.php?id=43"^^xsd:anyURI .
     
     e:attribute_values    
         a :StringDocuverse ; :has-text "stanza - refrain - 4"^^xsd:string .
     
     e:time_values    
         a :StringDocuverse ; :has-text "68 - 72 - 76 â 80 - 84"^^xsd:string .</textual></programlisting><para class="po-block e469 e469"><textual class="po-textual"> All the strings defining the actual text content of an EARMARK document are
                identified by ranges. Ranges refer to any of the docuverses, and can overlap and
                invert order. For example, the ranges for the refrain and the last chord overlap
                over the same range.</textual></para><para class="po-block e470 e470"><textual class="po-textual">We next define a range for each text node of the song, encoded as element or
                attribute, e.g.:</textual></para><programlisting class="po-block e471 e471" xml:space="preserve"><textual class="po-textual">
    e:r_refrain_1    
        a :Range ; :begins e:location0-lyrics ; :ends e:location6-lyrics .
    
    e:r_refrain_2    
        a :Range ; :begins e:location6-lyrics ; :ends e:location14-lyrics .
    
    e:r_attribute_class_refrain 
        a :Range ; :begins e:location9-attribute_values ; :ends e:location16-attribute_values .
    
    e:location0-lyrics    
        a :XPointerLocation ; :refers-to lyrics ; :at "xpointer(point(.0))"^^xsd:string .
    
    e:location6-lyrics    
        a :XPointerLocation ; :refers-to lyrics ; :at "xpointer(point(.6))"^^xsd:string .
    
    e:location14-lyrics    
        a :XPointerLocation ; :refers-to lyrics ; :at "xpointer(point(.14))"^^xsd:string .
    
    e:location9-attribute_values    
        a :XPointerLocation ; :refers-to attribute_values ; :at "xpointer(point(.9))"^^xsd:string .
    
    e:location16-attribute_values    
        a :XPointerLocation ; :refers-to attribute_values ; :at "xpointer(point(.16))"^^xsd:string .</textual></programlisting><para class="po-block e472 e472"><textual class="po-textual"> Some ranges can be used more than once in the final EARMARK document. For
                instance, the âr_refrain_2â range is used both in the refrain of the song and in the
                last chord of the refrain.</textual></para><para class="po-block e473 e473"><textual class="po-textual">Using these ranges we can now create the leaf markup items, i.e. all the
                attributes and all the </textual><emphasis class="po-inline e474 e474" role="ital"><textual class="po-textual">first-level</textual></emphasis><textual class="po-textual"> elements. The
                latter are all the elements that have a simple content, i.e., sequences of ranges
                and attributes only.</textual></para><para class="po-block e475 e475"><textual class="po-textual">Given an e-GODDAG node </textual><emphasis class="po-inline e476 e476" role="ital"><textual class="po-textual">N</textual></emphasis><textual class="po-textual">, an EARMARK markup item
                is made as follows:</textual></para><itemizedlist class="po-table e477 e477"><listitem class="po-container e478 e478"><para class="po-block e479 e479"><textual class="po-textual">it has an identifier generated randomly;</textual></para></listitem><listitem class="po-container e480 e480"><para class="po-block e481 e481"><textual class="po-textual">the name of </textual><emphasis class="po-inline e482 e482" role="ital"><textual class="po-textual">N</textual></emphasis><textual class="po-textual">, if it exists, is the
                        general identifier;</textual></para></listitem><listitem class="po-container e483 e483"><para class="po-block e484 e484"><textual class="po-textual">all children non-terminal nodes of </textual><emphasis class="po-inline e485 e485" role="ital"><textual class="po-textual">N</textual></emphasis><textual class="po-textual"> are
                        translated into individual markup items. They are recursively generated with
                        these same rules;</textual></para></listitem><listitem class="po-container e486 e486"><para class="po-block e487 e487"><textual class="po-textual">the ranges corresponding to the text content end up as the sequence of the
                        new markup item.</textual></para></listitem></itemizedlist><para class="po-block e488 e488"><textual class="po-textual">In the next piece of code we take into consideration both the e-GODDAG structure
                and the implicitly given XML description for all the markup items, that defines the
                kind â </textual><emphasis class="po-inline e489 e489" role="ital"><textual class="po-textual">element</textual></emphasis><textual class="po-textual"> or </textual><emphasis class="po-inline e490 e490" role="ital"><textual class="po-textual">attribute</textual></emphasis><textual class="po-textual"> â of each of them. For instance, the Turtle translation of
                the attribute class and of the p element of the refrain, using the ranges previously
                defined, is:</textual></para><programlisting class="po-block e491 e491" xml:space="preserve"><textual class="po-textual">
    e:attr_refrain_class    
        a :Attribute , [ a rdf:Bag ; rdf:_1 e:r_attribute_class_refrain ] ;    
        :has-general-identifier "class"^^xsd:string .
    
    e:refrain_div    
        a :Element , [ a rdf:Seq ; rdf:_1 e:attr_refrain_class ; rdf:_2 e:refrain_p ] ;    
        :has-general-identifier "div"^^xsd:string .
    
    e:refrain_p    
        a :Element , [ a rdf:Seq ; rdf:_1 e:r_refrain_1 ; rdf:_2 e:r_refrain_2 ] ;    
        :has-general-identifier "p"^^xsd:string .</textual></programlisting><para class="po-block e492 e492"><textual class="po-textual"> The difference between those leaf elements that are simply sequences of ranges
                and those that are sequences of attributes and ranges mirrors the difference between
                types in XML Schema </textual><xref class="po-milestone e493 e493" linkend="bib-19"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, with the former resembling simple
                type elements with simple content, and the latter resembling complex type elements
                with simple content and attributes.</textual></para><para class="po-block e494 e494"><textual class="po-textual">The expressiveness of e-GODDAG's is clearly within EARMARK's : through EARMARK we
                can express general digraphs with or without </textual><emphasis class="po-inline e495 e495" role="ital"><textual class="po-textual">repeatable
                    edges</textual></emphasis><textual class="po-textual"> depending on the particular context we are taking into
                consideration.</textual></para><para class="po-block e496 e496"><textual class="po-textual">Through such digraphs we can handle particular scenarios that involve overlapping
                â i.e. different elements partially dominate the same content, such as with chords
                and lines â as well as virtual elements â i.e. non-contiguous ranges are contained
                by a markup item, such as with the fun fact pop-up.</textual></para><para class="po-block e497 e497"><textual class="po-textual">Finally, it is interesting to note that EARMARK is actually more expressive than
                e-GODDAGs. Consider the case of unordered items. Although e-GODDAGs always considers
                ordered markup items and ranges within a container, EARMARK allows us to specify
                whether the items are ordered or not, by simply using ârdf:Seqâ and ârdf:Bagâ
                container classes. The ordering of inner elements becomes a matter of explicit
                choice rather than implicitly given by the markup embedding.</textual></para><para class="po-block e498 e498"><textual class="po-textual">Consequently, EARMARK even allows us to specify sequences of attributes, elements
                and ranges in any arbitrary order. Differently than XML, LMNL and TexMECS, EARMARK
                makes possible sequences in which attributes, elements and ranges are freely mixed
                in any order, including elements followed by attributes followed by other elements
                and so on. Moreover, the same global identifier can be specified for multiple
                attributes in the sequence (i.e., EARMARK allows multiple attributes with the same
                name for the same element). These situations are not directly expressible in any embedded
                markup model.</textual></para></section></section><section class="po-hcontainer e499 e499" xml:id="embedding"><title class="po-block e500 e500"><textual class="po-textual">Embedding EARMARK documents</textual></title><para class="po-block e501 e501"><textual class="po-textual">The process of generating a linearized structure (such as an XML document) from a set
            of EARMARK annotations is not immediate, mostly because of the substantially greater
            expressive power of EARMARK annotations. Without loss of generality, we will be
            describing a conversion to XML, since converting to LMNL or TexMecs will constitute a
            much simpler exercise of stopping the linearization a few steps earlier. </textual></para><para class="po-block e502 e502"><textual class="po-textual">Although the conversion of any EARMARK subset that already describes a tree is
            obviously immediate and fully automatic, several different options exist for any further
            EARMARK annotations that we wish to linearize. Since these additional annotations are at
            odds with a tree-like structure, we need to use a few embedding tricks to obtain a
            well-formed XML document, and of course the choice of tricks to use is wide and rich. In
            this section we will explore the task of linearizing a chosen tree-shaped subset of the
            EARMARK document, and in the following section we will describe a few options for the
            remaining assertions. </textual></para><para class="po-block e503 e503"><textual class="po-textual">The construction of the tree we envision is bottom up:</textual></para><itemizedlist class="po-table e504 e504"><listitem class="po-container e505 e505"><para class="po-block e506 e506"><textual class="po-textual">the first step is deciding which docuverses (or fragments thereof) will
                    constitute the content of the document, which the content of the attributes, and
                    which, if any, will be ignored;</textual></para></listitem><listitem class="po-container e507 e507"><para class="po-block e508 e508"><textual class="po-textual">then a subset of the first-level elements needs to be chosen, as well as the
                    ranges they contain. Of course, no overlapping or reverse order ranges can be
                    accepted as such;</textual></para></listitem><listitem class="po-container e509 e509"><para class="po-block e510 e510"><textual class="po-textual">there might well be the situation whereby multiple independent sets of
                    first-level elements exist, each of which is by itself non-overlapping, but
                    combined with others would. In this situation, of course, only one set can be
                    selected as the main hierarchy, and all others will need to employ an embedding
                    trick to be expressed in the final linearized document. One possible way to do
                    so is to create independent sets of elements and hierarchy over elements, and
                    then choose the largest set as composing the principal hierarchy, and all others
                    as candidates for tricks;</textual></para></listitem><listitem class="po-container e511 e511"><para class="po-block e512 e512"><textual class="po-textual">mixed content elements are sequences of ranges and first-level elements, and
                    are generated once all contained elements are ready;</textual></para></listitem><listitem class="po-container e513 e513"><para class="po-block e514 e514"><textual class="po-textual">similarly, structure elements (only containing other elements) are available
                    for creation once their content is already generated;</textual></para></listitem><listitem class="po-container e515 e515"><para class="po-block e516 e516"><textual class="po-textual">finally, attributes and their ranges are selected as well and converted into
                    linearized form and associated to their elements;</textual></para></listitem><listitem class="po-container e517 e517"><para class="po-block e518 e518"><textual class="po-textual">the final result of this linearization is possibly a selection of separate and
                    disjoint trees, each linearizing a connected component of the EARMARK document.
                    It is then a linearization choice either to generate several independent XML
                    documents or to employ the </textual><emphasis class="po-inline e519 e519" role="ital"><textual class="po-textual">universal root
                        </textual></emphasis><textual class="po-textual">pattern</textual><footnote class="po-popup e520 e520" xml:id="sdfootnote11sym"><para class="po-block e521 e521"><textual class="po-textual"> http://www.xmlpatterns.com/UniversalRootMain.shtml</textual></para></footnote><textual class="po-textual"> and include these structures within a single </textual><emphasis class="po-inline e522 e522" role="ital"><textual class="po-textual">new</textual></emphasis><textual class="po-textual"> elements that become their container.</textual></para></listitem></itemizedlist><para class="po-block e523 e523"><textual class="po-textual">Whatever is left out of this linearization process needs to be approached using one or
            more of the methods described in the next section.</textual></para></section><section class="po-hcontainer e524 e524"><title class="po-block e525 e525"><textual class="po-textual">Handling the remaining EARMARK structures</textual></title><para class="po-block e526 e526"><textual class="po-textual">Some kinds of EARMARK structures are not directly linearizable by embedding. In order
            to allow a full representation of the EARMARK document we therefore need to apply some
            stratagem to force the hierarchical structure to accept these </textual><emphasis class="po-inline e527 e527" role="ital"><textual class="po-textual">remaining structures</textual></emphasis><textual class="po-textual">.</textual></para><para class="po-block e528 e528"><textual class="po-textual">Reasonably, frequent unmanaged structures would include:</textual></para><itemizedlist class="po-table e529 e529"><listitem class="po-container e530 e530"><para class="po-block e531 e531"><textual class="po-textual">overlapping leaf elements referring to contiguous ranges;</textual></para></listitem><listitem class="po-container e532 e532"><para class="po-block e533 e533"><textual class="po-textual">overlapping leaf elements referring to non-contiguous ranges;</textual></para></listitem><listitem class="po-container e534 e534"><para class="po-block e535 e535"><textual class="po-textual">shared ranges;</textual></para></listitem><listitem class="po-container e536 e536"><para class="po-block e537 e537"><textual class="po-textual">text variants;</textual></para></listitem><listitem class="po-container e538 e538"><para class="po-block e539 e539"><textual class="po-textual">overlapping structural elements;</textual></para></listitem><listitem class="po-container e540 e540"><para class="po-block e541 e541"><textual class="po-textual">structured attributes.</textual></para></listitem></itemizedlist><para class="po-block e542 e542"><textual class="po-textual">In </textual><xref class="po-milestone e543 e543" linkend="embedding"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> we listed the EARMARK assertions that could not be
            directly translated into an XML document. Let us examine a few potential approaches
            (which we call </textual><emphasis class="po-inline e544 e544" role="ital"><textual class="po-textual">embedding </textual></emphasis><textual class="po-textual">
            </textual><emphasis class="po-inline e545 e545" role="ital"><textual class="po-textual">tricks</textual></emphasis><textual class="po-textual">) for forcing the conversion. A few of such
            approaches, as well as algorithms for passing from one to the other, are described in
                </textual><xref class="po-milestone e546 e546" linkend="bib-7"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">
        </textual></para><section class="po-hcontainer e547 e547"><title class="po-block e548 e548"><textual class="po-textual">Milestones</textual></title><para class="po-block e549 e549"><textual class="po-textual">Plain overlapping leaf elements (i.e. elements that partially share the text
                content, but no lower structures) may be forced into an XML structure via </textual><emphasis class="po-inline e550 e550" role="ital"><textual class="po-textual">milestones</textual></emphasis><textual class="po-textual"> as proposed in CLIX </textual><xref class="po-milestone e551 e551" linkend="bib-20"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><para class="po-block e552 e552"><textual class="po-textual">The open and close tags of the unconverted elements are considered as individual
                empty elements placed in the positions where they should reside. The attribute role
                specifies whether the empty element corresponds to a start or end tag, and the
                    </textual><emphasis class="po-inline e553 e553" role="ital"><textual class="po-textual">sID</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e554 e554" role="ital"><textual class="po-textual">eID</textual></emphasis><textual class="po-textual">
                attributes connect the two elements in a single conceptual one. </textual></para><programlisting class="po-block e555 e555" xml:space="preserve"><textual class="po-textual">&lt;body&gt;
    &lt;div class=âstanzaâ title=â4â&gt;
        &lt;p&gt;
            &lt;chord name=âGâ&gt;Will never&lt;/chord&gt;
            &lt;chord name=âAâ clix:role=âstart-rangeâ clix:sID=âAâ/&gt;
            die
        &lt;/p&gt;
    &lt;/div&gt;
    &lt;div class=ârefrainâ&gt;
        &lt;p&gt;
             And I
             &lt;chord name=âAâ clix:role=âend-rangeâ clix:eID=âAâ/&gt; 
             &lt;chord name=âDâ&gt;love her&lt;/chord&gt;
        &lt;/p&gt;
    &lt;/div&gt;
&lt;/body&gt;</textual></programlisting><para class="po-block e556 e556"><textual class="po-textual"> Although easy to implement and appreciate, milestones are nonetheless limited in
                that only frontier overlapping (i.e., overlapping on ranges) is expressible. </textual></para></section><section class="po-hcontainer e557 e557"><title class="po-block e558 e558"><textual class="po-textual">Fragmentation</textual></title><para class="po-block e559 e559"><textual class="po-textual">Another approach is to use fragmentation as introduced by the TEI guidelines </textual><xref class="po-milestone e560 e560" linkend="bib-1"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><para class="po-block e561 e561"><textual class="po-textual">Overlapping elements are separated in many multiple fragments each of which
                properly nests within their container. Individual fragments are then connected via
                attributes such as </textual><emphasis class="po-inline e562 e562" role="ital"><textual class="po-textual">next</textual></emphasis><textual class="po-textual"> or </textual><emphasis class="po-inline e563 e563" role="ital"><textual class="po-textual">previous</textual></emphasis><textual class="po-textual">. </textual></para><programlisting class="po-block e564 e564" xml:space="preserve"><textual class="po-textual">&lt;body&gt;
    &lt;div class=âstanzaâ title=â4â&gt;
        &lt;p&gt;
            &lt;chord name=âGâ&gt;Will never&lt;/chord&gt;
            &lt;chord name=âAâ xml:id=âa1â next=âa2â&gt;die&lt;/chord&gt;
        &lt;/p&gt;
    &lt;/div&gt;
    &lt;div class=ârefrainâ&gt;
        &lt;p&gt;
             &lt;chord name=âAâ xml:id=âa2â&gt;And I&lt;/chord&gt; 
             &lt;chord name=âDâ&gt;love her&lt;/chord&gt;
        &lt;/p&gt;
    &lt;/div&gt;
&lt;/body&gt;</textual></programlisting></section><section class="po-hcontainer e565 e565"><title class="po-block e566 e566"><textual class="po-textual"> Repetitions</textual></title><para class="po-block e567 e567"><textual class="po-textual">The easiest embedding trick for dealing with shared ranges is simply to multiply
                the instances of the corresponding text and possibly annotate that all instances
                except the first one is redundant.</textual></para><programlisting class="po-block e568 e568" xml:space="preserve"><textual class="po-textual">&lt;p&gt;
    &lt;span class=ârepeatâ title=âr_refrain_1â&gt;And I &lt;/span&gt;
    &lt;span class=ârepeatâ title=âr_refrain_2â&gt;love her&lt;/span&gt;
&lt;/p&gt;</textual></programlisting></section><section class="po-hcontainer e569 e569"><title class="po-block e570 e570"><textual class="po-textual"> Hidden variants</textual></title><para class="po-block e571 e571"><textual class="po-textual">When we have multiple variants of the same text, we may want to hide in
                substructures (such as attributes or subelements) the alternative variants.</textual></para><programlisting class="po-block e572 e572" xml:space="preserve"><textual class="po-textual">&lt;p&gt;And I love &lt;span class=âalternativeâ title=âhimâ&gt;her&lt;/span&gt;&lt;/p&gt;</textual></programlisting></section><section class="po-hcontainer e573 e573"><title class="po-block e574 e574"><textual class="po-textual"> RDFa</textual></title><para class="po-block e575 e575"><textual class="po-textual">RDFa </textual><xref class="po-milestone e576 e576" linkend="bib-21"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> allows arbitrary assertions to be placed on
                existing elements. It is understood that if an assertion exists over a text fragment
                that is not wrapped within an existing element, a generic element (such as the HTML
                    </textual><emphasis class="po-inline e577 e577" role="ital"><textual class="po-textual">span</textual></emphasis><textual class="po-textual">) is added to allow for RDFa assertions to
                attach to the corresponding content. </textual></para><para class="po-block e578 e578"><textual class="po-textual">For instance, support for overlapping inner structures are difficult to provide in
                either fragmentation or milestones, but become possible in RDFa. Consider for
                instance the sequence which contains individual chord elements and overlaps with the
                    </textual><emphasis class="po-inline e579 e579" role="ital"><textual class="po-textual">div</textual></emphasis><textual class="po-textual"> element containing individual </textual><emphasis class="po-inline e580 e580" role="ital"><textual class="po-textual">p</textual></emphasis><textual class="po-textual"> elements. </textual></para><para class="po-block e581 e581"><textual class="po-textual">RDFa thus supports the specification of a virtual instance of the class Chords,
                expressed as a sequence of three instances of the Chord class (in fact, one instance
                each of subclasses GChord, AChord and DChord of the Chord class) as follows:</textual></para><programlisting class="po-block e582 e582" xml:space="preserve"><textual class="po-textual">&lt;body about=â#Chsâ typeof=â#Chordsâ&gt;
    &lt;div typeof=ârdf:Seqâ property=ârdf:_1â href=â#Gâ&gt;
        &lt;p property=ârdf:_2â href=â#Aâ&gt;
            &lt;span about=â#Gâ typeof=â#GChordâ property=â#hasâ&gt;
                Will never
            &lt;/span&gt;
            &lt;span 
                about=â#Aâ typeof=â#AChordâ property=â#has-first-partâ&gt;
                die
            &lt;/span&gt;
        &lt;/p&gt;
    &lt;/div&gt;
    &lt;div property=ârdf:_3â href=â#Dâ&gt;
        &lt;p&gt;
             &lt;span about=â#Aâ property=â#has-second-partâ&gt;
                 And I
             &lt;/span&gt;
             &lt;span about=â#Dâ typeof=â#DChordâ property=âhasâ&gt;
                 love her
             &lt;/span&gt;
        &lt;/p&gt;
    &lt;/lg&gt;
&lt;/body&gt;</textual></programlisting></section><section class="po-hcontainer e583 e583"><title class="po-block e584 e584"><textual class="po-textual"> Embedded RDF </textual></title><para class="po-block e585 e585"><textual class="po-textual">When all else fails, the fallback approach is simply to place the remaining
                assertions as an RDF/XML block in the XML structure, either in a block properly
                thought out for external vocabularies, or converted into some local vocabulary, or
                even as a lump of XML elements placed in a random position within the document. </textual></para><para class="po-block e586 e586"><textual class="po-textual">This is useful, for instance, for dealing with structured attributes </textual><emphasis class="po-inline e587 e587" role="ital"><textual class="po-textual">a la</textual></emphasis><textual class="po-textual"> LMNL </textual><xref class="po-milestone e588 e588" linkend="bib-6"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. In the following
                example, a RDF block is inserted in the XML document to provide support for the
                attribute </textual><emphasis class="po-inline e589 e589" role="ital"><textual class="po-textual">name</textual></emphasis><textual class="po-textual"> of the </textual><emphasis class="po-inline e590 e590" role="ital"><textual class="po-textual">chord</textual></emphasis><textual class="po-textual"> element, which contains a structure of two different values
                wrapped by elements </textual><emphasis class="po-inline e591 e591" role="ital"><textual class="po-textual">normal</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e592 e592" role="ital"><textual class="po-textual">jazzy</textual></emphasis><textual class="po-textual">. This allows the </textual><emphasis class="po-inline e593 e593" role="ital"><textual class="po-textual">name</textual></emphasis><textual class="po-textual"> of the </textual><emphasis class="po-inline e594 e594" role="ital"><textual class="po-textual">chord</textual></emphasis><textual class="po-textual"> to cater for both
                a pop and a jazz rendering of the tune, while at the same time remaining one
                attribute of one element. </textual></para><programlisting class="po-block e595 e595" xml:space="preserve"><textual class="po-textual">&lt;body&gt;
  &lt;rdf:RDF     xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns="http://www.essepuntato.it/2008/12/earmark#"&gt;
       &lt;Attribute rdf:about="#attr_chord_structured"&gt;
          &lt;has-general-identifier rdf:datatype="xsd:string"&gt;
            name
          &lt;/has-general-identifier&gt;
          &lt;rdf:type&gt;
            &lt;rdf:Seq&gt;
                &lt;rdf:li rdf:resource="#normal"/&gt;
                &lt;rdf:li rdf:resource="#jazzy"/&gt;
            &lt;/rdf:Seq&gt;
          &lt;/rdf:type&gt;
       &lt;/Attribute&gt;
       &lt;Element rdf:about="#normal"&gt;
          &lt;has-general-identifier rdf:datatype="xsd:string"&gt;
            normal
          &lt;/has-general-identifier&gt;
          &lt;rdf:type&gt;
            &lt;rdfs:Bag&gt;
                &lt;rdf:li rdf:resource="#r_chord_D"/&gt;
            &lt;/rdfs:Bag&gt;
          &lt;/rdf:type&gt;
       &lt;/Element&gt;
       &lt;Element rdf:about="#jazzy"&gt;
          &lt;has-general-identifier rdf:datatype="xsd:string"&gt;
            jazzy
          &lt;/has-general-identifier&gt;
          &lt;rdf:type&gt;
            &lt;rdfs:Bag&gt;
              &lt;rdf:li rdf:resource="#r_chord_Dmaj7"/&gt;
            &lt;/rdfs:Bag&gt;
          &lt;rdf:type&gt;
       &lt;/Element&gt;
  &lt;rdf:RDF&gt;
  ...
&lt;/body&gt;</textual></programlisting></section></section><section class="po-hcontainer e596 e596"><title class="po-block e597 e597"><textual class="po-textual"> Conclusions</textual></title><para class="po-block e598 e598"><textual class="po-textual">In this paper we presented the Extreme Annotational RDF Markup (EARMARK), a proposal
            for expressing GODDAGs (and e-GODDAG) structures in a general metamarkup language that
            does not rely on embedding, and that integrates the advantages of standoff annotations
            and embedded markup into a single unifying framework. </textual></para><para class="po-block e599 e599"><textual class="po-textual">Through EARMARK authors can express a large number of markup assertions and
            observations that would otherwise be non expressible, including overlapping elements,
            elements over non contiguous ranges, repeated structures, text variants, overlapping
            hierarchies, structured attributes, etc.</textual></para><para class="po-block e600 e600"><textual class="po-textual">In further work we plan both to explore the application of the structural patterns
            defined in </textual><xref class="po-milestone e601 e601" linkend="bib-22"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, trying to give a formal ontological demonstration
            if an EARMARK document follows them, and to explore, both formally and pragmatically,
            the expressive power of the EARMARK language and its applications.</textual></para></section><section class="po-hcontainer e602 e602"><title class="po-block e603 e603"><textual class="po-textual">Acknowledgements</textual></title><para class="po-block e604 e604"><textual class="po-textual">The authors wish to thank all that have commented on this paper and on EARMARK in general. 
            The anonymous reviewers of this and other EARMARK papers were incredibly useful in smoothing
            out both the basic concepts and the written explanation of the most oscure parts of the proposal. 
            The participants to the Goddag Workshop in Amsterdam (December 2008) have in no small part 
            provided thought fodder for what ended up becoming EARMARK. Finally, we wish to thank explicitly 
            Michael Sperberg-McQueen and Federico Meschini for their help, comments and suggestions.</textual></para></section><bibliography class="po-hcontainer e605 e605"><title class="po-block e606 e606"><textual class="po-textual">Bibliography</textual></title><bibliomixed class="po-block e607 e607" xml:id="bib-21" xreflabel="[1]"><textual class="po-textual">Adida, B., Birbeck, M., McCarron, S.,
            Pemberton, S. (2008). RDFa in XHTML: Syntax and processing. W3C Recommendation. World
            Wide Web Consortium. </textual><link class="po-inline e608 e608" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/rdfa-syntax/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e609 e609" xml:id="bib-13" xreflabel="[2]"><textual class="po-textual">Becket, D., Berners-Lee, T. (2008). Turtle -
            Terse RDF Triple Language. W3C Team Submission.
                </textual><link class="po-inline e610 e610" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TeamSubmission/turtle/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e611 e611" xml:id="bib-12" xreflabel="[3]"><textual class="po-textual">Berglund, A., Boag, S., Chamberlin, D.,
            FernÃ¡ndez, M. F., Kay, M., Robie, J., SimÃ©on, J. (2007). XML Path Language (XPath) 2.0.
            W3C Recommendation. </textual><link class="po-inline e612 e612" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xpath20/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e613 e613" xml:id="bib-22" xreflabel="[4]"><textual class="po-textual">Dattolo, A., Di Iorio, A., Duca, S., Feliziani,
            A.A., Vitali, F. (2007). Structural patterns for descriptive documents. In the
            Proceedings of the Seventh International Conference on Web Engineering 2007, Como,
            Italy, 2007.</textual></bibliomixed><bibliomixed class="po-block e614 e614" xml:id="bib-9" xreflabel="[5]"><textual class="po-textual">DeRose, S., Maler, E., Daniel, R. (2001). XML
            Pointer Language (XPointer) Version 1.0. W3C Candidate Recommendation.</textual></bibliomixed><bibliomixed class="po-block e615 e615" xml:id="bib-20" xreflabel="[6]"><textual class="po-textual">DeRose. S. (2004). Markup overlap: A review and
            a horse. In Extreme Markup Languages.</textual></bibliomixed><bibliomixed class="po-block e616 e616" xml:id="bib-16" xreflabel="[7]"><textual class="po-textual">Goldfarb, C. F. (1990). The SGML Handbook.
            Oxford University Press, USA.</textual></bibliomixed><bibliomixed class="po-block e617 e617" xml:id="bib-15" xreflabel="[8]"><textual class="po-textual">Horrocks, I., Patel-Schneider, P. F., Boley, H.
            Tabet, S., Grosof, B., Dean, M. (2004). SWRL: A Semantic Web Rule Language Combining OWL
            and RuleML. W3C Member Submission.
            </textual><link class="po-inline e618 e618" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/Submission/SWRL/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e619 e619" xml:id="bib-18" xreflabel="[9]"><textual class="po-textual">Huitfeldt, C., Sperberg-McQueen, C. M. (2001).
            TexMECS: An experimental markup meta-language for complex documents.</textual></bibliomixed><bibliomixed class="po-block e620 e620" xml:id="bib-3" xreflabel="[10]"><textual class="po-textual">Iglesias, C., Squillace, M. (2009). Pointer
            Methods in RDF. W3C Working Draft availables in
                </textual><link class="po-inline e621 e621" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/Pointer-in-RDF</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e622 e622" xml:id="bib-10" xreflabel="[11]"><textual class="po-textual">Manola, F., Miller, E. (2004). RDF Primer. W3C
            Recommendation. </textual><link class="po-inline e623 e623" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/rdf-primer/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e624 e624" xml:id="bib-23" xreflabel="[12]"><textual class="po-textual">Marcoux, Y. (2008). Graph characterization of
            overlap-only TexMECS and other overlapping markup formalisms. Paper presented at the
            Balisage: The Markup Conference. doi: </textual><biblioid class="po-atom e625 doi e625"><textual class="po-textual">10.4242/BalisageVol1.Marcoux01</textual></biblioid><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e626 e626" xml:id="bib-7" xreflabel="[13]"><textual class="po-textual">Marinelli, P., Vitali, F., Zacchiroli, S.
            (2008). Towards the unification of formats for overlapping markup. The New Review of
            Hypermedia and Multimedia.</textual></bibliomixed><bibliomixed class="po-block e627 e627" xml:id="bib-14" xreflabel="[14]"><textual class="po-textual">Nelson, T. (1980). Literary Machines: The
            report on, and of, Project Xanadu concerning word processing, electronic publishing,
            hypertext, thinkertoys, tomorrow's intellectual... including knowledge, education and
            freedom - Mindful Press, Sausalito, CA, USA.</textual></bibliomixed><bibliomixed class="po-block e628 e628" xml:id="bib-24" xreflabel="[15]"><textual class="po-textual">Oliver Schonefeld und Andreas Witt (2006).
            Towards validation of concurrent markup. In: Proceedings of the Extreme Markup 2006,
            MontrÃ©al, Canada.</textual></bibliomixed><bibliomixed class="po-block e629 e629" xml:id="bib-2" xreflabel="[16]"><textual class="po-textual">Schmidt, D., Colomb, R. (2009). A data
            structure for representing multi-version texts online. International Journal of
            Human-Computer Studies.</textual></bibliomixed><bibliomixed class="po-block e630 e630" xml:id="bib-1" xreflabel="[17]"><textual class="po-textual">Sperberg-McQueen, C. M., Burnard, L. (2005).
            TEI P5 Guidelines for Electronic Text Encoding and Interchange (revised). The
            Association for Computers and the Humanities.</textual></bibliomixed><bibliomixed class="po-block e631 e631" xml:id="bib-17" xreflabel="[18]"><textual class="po-textual">Sperberg-McQueen, C. M., Huitfeldt, C. (2008).
            Markup Discontinued: Discontinuity in TexMecs, Goddag structures, and rabbit/duck
            grammars. doi: </textual><biblioid class="po-atom e632 doi e632"><textual class="po-textual">10.4242/BalisageVol1.Sperberg-McQueen01</textual></biblioid><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e633 e633" xml:id="bib-5" xreflabel="[19]"><textual class="po-textual">Sperberg-McQueen, C.M., Huitfeldt, C. (2004).
            GODDAG: A Data Structure for Overlapping Hierarchies. Lecture Notes In Computer Science.
            Springer.</textual></bibliomixed><bibliomixed class="po-block e634 e634" xml:id="bib-8" xreflabel="[20]"><textual class="po-textual">Tennison, J. (2008). Representing Overlap in
            XML. Article from âJeni's Musingsâ blog, available in
                </textual><link class="po-inline e635 e635" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.jenitennison.com/blog/node/97</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e636 e636" xml:id="bib-6" xreflabel="[21]"><textual class="po-textual">Tennison, J., Piez, W. (2002). The Layered
            Markup and Annotation Language (LMNL). Paper presented at the Late breaking at Extreme
            Markup. Montreal, Canada.</textual></bibliomixed><bibliomixed class="po-block e637 e637" xml:id="bib-19" xreflabel="[22]"><textual class="po-textual">Thompson, H. S., Beech, D., Maloney, M.,
            Mendelsohn, N. (2001). XML Schema Part 1: Structures. W3C Recommendation.
                </textual><link class="po-inline e638 e638" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xmlschema-1/</textual></link><textual class="po-textual">.</textual></bibliomixed><bibliomixed class="po-block e639 e639" xml:id="bib-4" xreflabel="[23]"><textual class="po-textual">Tummarello, G., Morbidni, C., Pierazzo, E.
            (2005). Toward textual encoding based on RDF. 9th ICCC Conference on Electronic
            Publishing (ELPUB 2005). Leuven, Belgium.</textual></bibliomixed><bibliomixed class="po-block e640 e640" xml:id="bib-11" xreflabel="[24]"><textual class="po-textual">W3C OWL Working Group (2009). OWL 2 Web
            Ontology Language Document Overview. W3C Working Draft.
                </textual><link class="po-inline e641 e641" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/owl2-overview/</textual></link><textual class="po-textual">.</textual></bibliomixed></bibliography></article></classedDocument>