<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.3"><title class="po-block e1 e1"><textual class="po-textual">Including XSLT stylesheets testing in continuous integration process</textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">Balisage: The Markup Conference 2011</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 2 - 5, 2011</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual"> XSLT stylesheets are just like any other programming language code units: they
                need to be written, debugged, refactored and tested. In these days of « Agility »,
                refactoring and continuous integration play major roles in development process. How
                to assert that XSLT stylesheets refactoring are still producing correct outputs? How
                to early detect defects? This paper proposes a practical approach to include XSLT
                stylesheets testing in continuous integration process, based on </textual><link class="po-inline e8 e8" xlink:actuate="onRequest" xlink:href="http://code.google.com/p/xspec/" xlink:show="new" xlink:type="simple"><textual class="po-textual">XSpec</textual></link><textual class="po-textual">, a </textual><link class="po-inline e9 e9" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/Behavior_Driven_Development" xlink:show="new" xlink:type="simple"><textual class="po-textual">Behavior
                    Driven Development</textual></link><textual class="po-textual"> (BDD) framework for </textual><link class="po-inline e10 e10" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xslt20" xlink:show="new" xlink:type="simple"><textual class="po-textual">XSLT</textual></link><textual class="po-textual">, and on Java helpers
                provided by </textual><link class="po-inline e11 e11" xlink:actuate="onRequest" xlink:href="http://code.google.com/p/jxsl/" xlink:show="new" xlink:type="simple"><textual class="po-textual">Jxsl</textual></link><textual class="po-textual">, a Java
                XSL code library.</textual></para></abstract><author class="po-record e12 e12"><personname class="po-record e13 e13"><firstname class="po-field e14 e14"><textual class="po-textual">Benoit</textual></firstname><surname class="po-field e15 e15"><textual class="po-textual">Mercier</textual></surname></personname><personblurb class="po-container e16 e16"><para class="po-block e17 e17"><textual class="po-textual">Benoit Mercier has been working as researcher and analyst at the Franqus research group of the University of Sherbrooke (Quebec, Canada) since 2006 where he collaborates to the development of a new North American French dictionary. His main interests include computer linguistic, Free Software development and technology watch. His is also a European Commission official since 2000. He started and animated the Commission IT Network (CITnet), an internal collaboration platform for IT specialists (almost 2000 individuals) and is the author of the 2003-2006 version of the strategy for internal use of Open Source Software at the European Commission.</textual></para></personblurb><email class="po-field e18 e18"><textual class="po-textual">benoit.mercier@usherbrooke.ca</textual></email><affiliation class="po-record e19 e19"><jobtitle class="po-field e20 e20"><textual class="po-textual">Analyst</textual></jobtitle><orgname class="po-block e21 e21"><textual class="po-textual">Faculté des lettres et sciences humaines, Université de Sherbrooke</textual></orgname></affiliation></author><legalnotice class="po-container e22 e22"><para class="po-block e23 e23"><textual class="po-textual">Copyright © 2011 Benoit Mercier</textual></para></legalnotice></info><section class="po-hcontainer e24 e24"><title class="po-block e25 e25"><textual class="po-textual">Problem</textual></title><para class="po-block e26 e26"><textual class="po-textual">Writing XSLT stylesheets is similar to writing code in any kind of programming
            language. The aim is to build a working piece of code that will produce predictable
            results to meet functional requirements. Software development is evolving at a fast
            pace and more and more new methodologies are emerging in order to guide development
            process. One of the key aspects shared by all these methodologies is testing, to
            guarantee software behaviour predictability and consistency. To be really efficient and
            useful, testing should be made easy for developers and tests scenario executions should
            be triggered automatically as soon as code has been modified. This is nowadays part of a
            common best practice called Continuous Integration (CI). But XSLT stylesheets are in a
            poor relation in this context. There are few unit testing frameworks available for XSLT
            and none of them are easily embeddable in CI processes and tools. </textual></para><para class="po-block e27 e27"><textual class="po-textual">This paper tries to demonstrate that XSLT stylesheet testing can be made simple by
            using the </textual><link class="po-inline e28 e28" xlink:actuate="onRequest" xlink:href="http://code.google.com/p/xspec/" xlink:show="new" xlink:type="simple"><textual class="po-textual">XSpec</textual></link><textual class="po-textual">
            </textual><link class="po-inline e29 e29" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/Behavior_Driven_Development" xlink:show="new" xlink:type="simple"><textual class="po-textual">Behavior
                Driven Development</textual></link><textual class="po-textual"> (BDD) framework for XSLT through the use of  </textual><link class="po-inline e30 e30" xlink:actuate="onRequest" xlink:href="http://code.google.com/p/jxsl/" xlink:show="new" xlink:type="simple"><textual class="po-textual">Jxsl</textual></link><textual class="po-textual"> Java wrapper library and can
            be easily integrated into existing or new CI environment. It is an awareness-raising
            document to help XSLT stylesheet developers to change their outlooks so as to foster the
            adoption of testing as a new valuable tool at their disposal. </textual></para></section><section class="po-hcontainer e31 e31"><title class="po-block e32 e32"><textual class="po-textual">Solution</textual></title><para class="po-block e33 e33"><textual class="po-textual">The proposed solution to achieve continuous integration of XSLT stylesheets adds three
            possibly new components to the usual toolkit (IDE, version control system, etc.) used by
            XSLT developers: </textual><itemizedlist class="po-table e34 e34"><listitem class="po-container e35 e35"><para class="po-block e36 e36"><textual class="po-textual">an XSLT test framework;</textual></para></listitem><listitem class="po-container e37 e37"><para class="po-block e38 e38"><textual class="po-textual">a Java unit testing wrapper;</textual></para></listitem><listitem class="po-container e39 e39"><para class="po-block e40 e40"><textual class="po-textual">a continuous integration server.</textual></para></listitem></itemizedlist></para><para class="po-block e41 e41"><textual class="po-textual">The following sections describe the selected tools and their respective roles in the
            process.</textual></para><section class="po-hcontainer e42 e42"><title class="po-block e43 e43"><textual class="po-textual">XSLT test framework</textual></title><para class="po-block e44 e44"><textual class="po-textual">This is the core of the solution. Writing tests should be easy, intuitive and
                frictionless. XSpec framework meets these conditions[</textual><xref class="po-milestone e45 e45" linkend="xspec-01"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. BDD approach, tool quality,
                authors and recent project activities have lead to its selection from among various
                other projects like Juxy, XSLTUnit or UTF-X for instance.</textual></para><para class="po-block e46 e46"><textual class="po-textual">The general idea is to write XSpec documents to describe stylesheet behaviours.
                XSpec documents are XML documents which adhere to the </textual><link class="po-inline e47 e47" xlink:actuate="onRequest" xlink:href="http://code.google.com/p/xspec/source/browse/trunk/xspec.rnc" xlink:show="new" xlink:type="simple"><textual class="po-textual">XSpec
                    RELAX NG schema</textual></link><textual class="po-textual">. XSpec scenarios are straightforward to write for XSLT
                developers. Stylesheet templates and functions can be tested against contextual data
                (XML documents, fragments or mock object) by creating test scenarios. Here is a
                sample XSpec file.</textual></para><programlisting class="po-block e48 e48" xml:space="preserve"><textual class="po-textual">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;x:description xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="toHtmlWithIds.xsl"&gt;

    &lt;x:scenario label="When processing a list of books"&gt;

        &lt;!-- apply template rules to this element --&gt;
        &lt;x:context href="xsltestengine-data/books-a.xml/&gt;

        &lt;!-- check the result --&gt;
        &lt;x:expect label="There must be 12 button to books" test="count(//button) = 12"/&gt;

    &lt;/x:scenario&gt;

&lt;/x:description&gt;

            </textual></programlisting><para class="po-block e49 e49"><textual class="po-textual">The precise way to write XSpec document is described in the official documentation
                    [</textual><xref class="po-milestone e50 e50" linkend="xspec-02"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].</textual></para><para class="po-block e51 e51"><textual class="po-textual">Systematically writing XSpec test scenarios for each XSLT stylesheets produced is
                a first step towards improving bug detection, guaranteeing compliance to
                specifications, business and technical requirements, safer refactoring, etc. But
                XSpec documents alone are not sufficient. Running tests is still under the sole
                responsibility and good will of the developer. Tests should be run on a regular
                basis to allow early error detection. Such systems exist and are widely used for
                other programming languages. How could XSpec files be integrated in those existing
                solutions?</textual></para></section><section class="po-hcontainer e52 e52"><title class="po-block e53 e53"><textual class="po-textual">Java unit testing wrapper</textual></title><para class="po-block e54 e54"><textual class="po-textual">In order to be able to benefit from other languages testing tools availability,
                XSpec test executions should be wrapped up in one of these languages. This is one of
                the goals of the Jxsl project [</textual><xref class="po-milestone e55 e55" linkend="jxsl-01"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]: to offer Java wrapper objects for XSpec test
                configuration and executions.</textual></para><para class="po-block e56 e56"><textual class="po-textual">Jxsl provides method to execute XSpec tests directly from Java code, one at a time
                    (</textual><emphasis class="po-inline e57 e57" role="ital"><textual class="po-textual">XspecTestScenarioRunner</textual></emphasis><textual class="po-textual">) or in batch mode
                    (</textual><emphasis class="po-inline e58 e58" role="ital"><textual class="po-textual">XspecTestSuiteRunner</textual></emphasis><textual class="po-textual">). This is useful for
                embedding test executions in custom Java code. But Jxsl also contains wrapper for
                the JUnit unit testing framework (TestNG support is coming). That means that an
                existing Java project can add XSpec file testing to its standard JUnit test
                suites.</textual></para><para class="po-block e59 e59"><textual class="po-textual">To enable XSLT unit testing with XSpec in an existing Java project, it is as
                simple as creating a new class in the project test package that extends </textual><emphasis class="po-inline e60 e60" role="ital"><textual class="po-textual">XspecScenarioJUnitTest</textual></emphasis><textual class="po-textual"> and to provide a Spring bean
                configuration file called </textual><emphasis class="po-inline e61 e61" role="ital"><link class="po-inline e62 e62" xlink:actuate="onRequest" xlink:href="http://jxsl.googlecode.com/svn/trunk/src/test/resources/xspec-context.xml" xlink:show="new" xlink:type="simple"><textual class="po-textual">xspec-context.xml</textual></link></emphasis><textual class="po-textual">. Here is a complete and functional
                implementation. </textual></para><programlisting class="po-block e63 e63" xml:space="preserve"><textual class="po-textual">package com.mycompany.test.xspec;

import com.servicelibre.jxsl.scenario.test.xspec.XspecScenarioJUnitTest;
import java.io.File;

public class XspecUnitTesting extends XspecScenarioJUnitTest {

    public XspecUnitTesting(File xspecFile) {
       super(xspecFile);
    }
}</textual></programlisting><para class="po-block e64 e64"><textual class="po-textual">Jxsl offers a Maven archetype to get started quickly.  This archetype is also very
                useful for non Java developers. Java 1.5+ JRE and Maven 2.9+ are required. The
                archetype can be generated with the following command:</textual></para><programlisting class="po-block e65 e65" xml:space="preserve"><textual class="po-textual">
mvn archetype:generate -DarchetypeGroupId=com.servicelibre  \
                       -DarchetypeArtifactId=xspec-test \ 
                       -DarchetypeVersion=0.1.5 \ 
                       -DarchetypeCatalog=http://jxsl.googlecode.com/svn/trunk/archetypes                
            </textual></programlisting><para class="po-block e66 e66"><textual class="po-textual">The only things to configure to get started is the XSpec file locations . This is
                achieved by editing the </textual><code class="po-atom e67 e67"><textual class="po-textual">src/test/resources/xspec-context.xml</textual></code><textual class="po-textual"> file.
                Tests can now be run with the following
                command:</textual><programlisting class="po-block e68 e68" xml:space="preserve"><textual class="po-textual">mvn test</textual></programlisting></para><para class="po-block e69 e69"><textual class="po-textual">XSpec test executions have now be integrated into some Java unit testing code in
                order to benefit from all the tools available for triggering and monitoring standard
                Java unit tests. The Maven project build from the archetype could also be used to
                integrate XSpec testing in XML editor like Oxygen XML Editor (through External tools
                configuration).</textual></para></section><section class="po-hcontainer e70 e70"><title class="po-block e71 e71"><textual class="po-textual">Build tool and continuous integration server</textual></title><para class="po-block e72 e72"><textual class="po-textual">XSpec tests wrapped up in Java unit tests can now be triggered as part of a
                standard Java project build process. Build tool like Maven does this automatically
                by convention. Ant can be configured to run JUnit tests as follows :</textual></para><programlisting class="po-block e73 e73" xml:space="preserve"><textual class="po-textual">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project name="jxsl" default="test" basedir="."&gt;

	&lt;target name="init"&gt;
		&lt;property name="resources" location="${basedir}/../resources"/&gt;
	&lt;/target&gt;

	&lt;target name="test" depends="init"&gt;
		&lt;echo&gt;basedir=${basedir}&lt;/echo&gt;
		&lt;junit dir="${basedir}" fork="true" haltonerror="true" &gt;
			&lt;test name="com.servicelibre.jxsl.scenario.test.xspec.XspecScenarioJUnitTest"/&gt;

			&lt;classpath&gt;
				&lt;pathelement path="${resources}/jxsl/jxsl-with-dependencies.jar"/&gt;
				&lt;pathelement path="${user.home}/.m2/repository/net/sf/saxon/saxon/9.3.0.2j/saxon-9.3.0.2j.jar"/&gt;
				&lt;path path="${basedir}"/&gt; &lt;!-- for xspec-context.xml Spring bean configuration file --&gt;
			&lt;/classpath&gt;

			&lt;formatter type="brief" usefile="false"/&gt;
		&lt;/junit&gt;
	&lt;/target&gt;

&lt;/project&gt;

            </textual></programlisting><para class="po-block e74 e74"><textual class="po-textual">Today, not having a CI server in place when doing software development is almost
                like not using a version control system: a risky bet.  CI server ensures, at least,
                that code are regularly built and tested successfully in a clean environment
                (understand « not on the developer computer ») .  There are several popular CI
                servers: </textual><link class="po-inline e75 e75" xlink:actuate="onRequest" xlink:href="http://hudson-ci.org" xlink:show="new" xlink:type="simple"><textual class="po-textual">Hudson</textual></link><textual class="po-textual">/</textual><link class="po-inline e76 e76" xlink:actuate="onRequest" xlink:href="http://jenkins-ci.org/" xlink:show="new" xlink:type="simple"><textual class="po-textual">Jenkins</textual></link><textual class="po-textual">, </textual><link class="po-inline e77 e77" xlink:actuate="onRequest" xlink:href="http://continuum.apache.org/" xlink:show="new" xlink:type="simple"><textual class="po-textual">Continuum</textual></link><textual class="po-textual">, </textual><link class="po-inline e78 e78" xlink:actuate="onRequest" xlink:href="http://www.atlassian.com/software/bamboo/" xlink:show="new" xlink:type="simple"><textual class="po-textual">Bamboo</textual></link><textual class="po-textual">, </textual><link class="po-inline e79 e79" xlink:actuate="onRequest" xlink:href="http://www.jetbrains.com/teamcity/" xlink:show="new" xlink:type="simple"><textual class="po-textual">TeamCity</textual></link><textual class="po-textual">, etc.</textual></para><para class="po-block e80 e80"><textual class="po-textual">XSpec tests should be run regularly by a CI server.  </textual></para><para class="po-block e81 e81"><inlinemediaobject class="po-null e82 e82"><imageobject class="po-container e83 e83"><imagedata class="po-meta e84 e84" fileref="../../../vol7/graphics/Mercier01/Mercier01-001.jpg"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></inlinemediaobject></para><para class="po-block e85 e85"><textual class="po-textual">In order to catch errors even more early, it is suggested to trigger test
                executions on commit in the version control system. This is usually done via
                server-side hook scripts. Resources on hook scripts for common version control
                systems:</textual></para><itemizedlist class="po-table e86 e86"><listitem class="po-container e87 e87"><para class="po-block e88 e88"><textual class="po-textual">Subversion: </textual><link class="po-inline e89 e89" xlink:actuate="onRequest" xlink:href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.create.hooks" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.create.hooks</textual></link></para></listitem><listitem class="po-container e90 e90"><para class="po-block e91 e91"><textual class="po-textual">GIT: </textual><link class="po-inline e92 e92" xlink:actuate="onRequest" xlink:href="http://book.git-scm.com/5_git_hooks.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://book.git-scm.com/5_git_hooks.html</textual></link></para></listitem><listitem class="po-container e93 e93"><para class="po-block e94 e94"><textual class="po-textual">Mercurial: </textual><link class="po-inline e95 e95" xlink:actuate="onRequest" xlink:href="http://hgbook.red-bean.com/read/handling-repository-events-with-hooks.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://hgbook.red-bean.com/read/handling-repository-events-with-hooks.html</textual></link></para></listitem></itemizedlist><para class="po-block e96 e96"><textual class="po-textual">Here is a sample Subversion hook script that triggers a project rebuild by
                Hudson</textual><programlisting class="po-block e97 e97" xml:space="preserve"><textual class="po-textual">#!/bin/sh

# POST-COMMIT HOOK

USER=hudson
PASSWORD=*****
HUDSON_SERVER=hostname:8081
HUDSON_COMMAND=polling

HTTP_PREFIX=http://${USER}:${PASSWORD}@${HUDSON_SERVER}

wget -b ${HTTP_PREFIX}/job/hudson_project_name/${HUDSON_COMMAND} &gt; /dev/null
</textual></programlisting></para></section></section><section class="po-hcontainer e98 e98"><title class="po-block e99 e99"><textual class="po-textual">Conclusion</textual></title><para class="po-block e100 e100"><textual class="po-textual">With the proposed solution, XSLT developers, even without any knowledge of Java, are
            now able to easily create a Maven project from an archetype, configure it to run their
            own XSpec files and trigger test executions by a CI server at each commit in their
            version control system.</textual></para></section><section class="po-hcontainer e101 e101"><title class="po-block e102 e102"><textual class="po-textual">Acknowledgments</textual></title><para class="po-block e103 e103"><textual class="po-textual">This project would not have been possible without the support of the Franqus Research
            Group of the Faculté des lettres et sciences humaines, Université de Sherbrooke. The
            author wishes to express his gratitude to colleague and friend, Dominic Marcotte, who
            offered invaluable assistance and support.</textual></para></section><bibliography class="po-hcontainer e104 e104"><title class="po-block e105 e105"><textual class="po-textual">Work cited</textual></title><bibliomixed class="po-block e106 e106" xml:id="jxsl-01"><textual class="po-textual">            
            </textual><quote class="po-inline e107 e107"><textual class="po-textual">jxsl, Java XSL code library</textual></quote><textual class="po-textual">
            </textual><link class="po-inline e108 e108" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://code.google.com/p/jxsl</textual></link><textual class="po-textual">.
            Accessed 2011-06-10.
        </textual></bibliomixed><bibliomixed class="po-block e109 e109" xml:id="xspec-01"><textual class="po-textual">            
            </textual><quote class="po-inline e110 e110"><textual class="po-textual">XSpec, BDD framework for XSLT</textual></quote><textual class="po-textual">
            </textual><link class="po-inline e111 e111" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://code.google.com/p/xspec</textual></link><textual class="po-textual">.
            Accessed 2011-06-10.
        </textual></bibliomixed><bibliomixed class="po-block e112 e112" xml:id="xspec-02"><textual class="po-textual">
            </textual><quote class="po-inline e113 e113"><textual class="po-textual">How to write XSpec scenarios</textual></quote><textual class="po-textual"> (part of the XSpec documentation),
                </textual><link class="po-inline e114 e114" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://code.google.com/p/xspec/wiki/WritingScenarios</textual></link><textual class="po-textual">. Accessed
            2011-06-10. </textual></bibliomixed></bibliography></article></classedDocument>