<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.2" xml:id="HR-23632987-8973"><title class="po-block e1 e1"><textual class="po-textual">XML Pipeline Processing in the Browser</textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">Balisage: The Markup Conference 2010</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 3 - 6, 2010</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual">With the growing interest in end-to-end XML web application development models, many web applications are becoming predominantly XML-based, requiring XML processing capabilities not only on the-server-side, but often also on the client-side. This paper discusses the potential benefits of using XProc for XML pipeline processing in the web browser and describes the developments of a JavaScript-based XProc implementation.</textual></para></abstract><author class="po-record e8 e8"><personname class="po-record e9 e9"><firstname class="po-field e10 e10"><textual class="po-textual">Vojtěch</textual></firstname><surname class="po-field e11 e11"><textual class="po-textual">Toman</textual></surname></personname><personblurb class="po-container e12 e12"><para class="po-block e13 e13"><textual class="po-textual">Vojtěch Toman is a Consultant Software Engineer in the Information Intelligence Group of EMC Corporation where he is involved in the development of XML content management and delivery solutions. Previously, he worked for X-Hive Corporation B.V., a vendor of native XML data management technologies, which was acquired by EMC in 2007.</textual></para><para class="po-block e14 e14"><textual class="po-textual">Vojtěch is an active member of the W3C XML Processing Model Working Group and is the main developer of EMC's XProc implementation. He studied Computer Science at the Charles University in Prague, the Czech Republic, specializing in XML data compression and optimized processing.</textual></para></personblurb><affiliation class="po-record e15 e15"><jobtitle class="po-field e16 e16"><textual class="po-textual">Consultant Software Engineer</textual></jobtitle><orgname class="po-block e17 e17"><textual class="po-textual">EMC Corporation</textual></orgname></affiliation><email class="po-field e18 e18"><textual class="po-textual">toman_vojtech@emc.com</textual></email></author><legalnotice class="po-container e19 e19"><para class="po-block e20 e20"><textual class="po-textual">Copyright © 2010 EMC Corporation.  All rights reserved.</textual></para></legalnotice><keywordset class="po-table e21 e21" role="author"><keyword class="po-field e22 e22"><textual class="po-textual">XML</textual></keyword><keyword class="po-field e23 e23"><textual class="po-textual">XProc</textual></keyword><keyword class="po-field e24 e24"><textual class="po-textual">JavaScript</textual></keyword><keyword class="po-field e25 e25"><textual class="po-textual">GWT</textual></keyword><keyword class="po-field e26 e26"><textual class="po-textual">client-side</textual></keyword><keyword class="po-field e27 e27"><textual class="po-textual">XRX</textual></keyword></keywordset></info><section class="po-hcontainer e28 e28"><title class="po-block e29 e29"><textual class="po-textual">Introduction</textual></title><para class="po-block e30 e30"><textual class="po-textual">Looking back at the past couple of years, it is clear that web browsers have come a long way and have evolved tremendously. With increasing support for open standards and rapid performance improvements, modern web browsers are no longer just tools for viewing web content - they have become complete platforms for developing complex applications.</textual></para><para class="po-block e31 e31"><textual class="po-textual">Traditionally, the programming model in the web browser environment has been based primarily around HTML and JavaScript – and surprisingly, not much has changed in this regard: we still use (more or less) the same markup language for describing the structure and content of web pages, and implement the dynamic logic in the same scripting language. What has changed, however, is how we combine these two technologies: from the first static web pages with only a minimum of scripting to the highly dynamic and interactive applications of today, often built on top of entire JavaScript frameworks and libraries.</textual></para><para class="po-block e32 e32"><textual class="po-textual">With the major browsers gradually working out the performance and compatibility issues, JavaScript has become powerful (and usable) enough not only for web pages scripting, but also as an enabling tool for other web technologies for which there is no (or very little) native browser support. So we now have, for instance, a number of JavaScript XForms implementations</textual><footnote class="po-popup e33 e33"><para class="po-block e34 e34"><link class="po-inline e35 e35" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/MarkUp/Forms/wiki/XForms_Implementations</textual></link></para></footnote><textual class="po-textual">, libraries for cross-browser rendering of SVG</textual><footnote class="po-popup e36 e36"><para class="po-block e37 e37"><textual class="po-textual">See, for example, </textual><link class="po-inline e38 e38" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.amplesdk.com/</textual></link></para></footnote><textual class="po-textual">, or even a JavaScript implementation of Flash</textual><footnote class="po-popup e39 e39"><para class="po-block e40 e40"><link class="po-inline e41 e41" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://wiki.github.com/tobeytailor/gordon/</textual></link></para></footnote><textual class="po-textual">; and many more.</textual></para><para class="po-block e42 e42"><textual class="po-textual">JavaScript has also brought XML to the web applications world, in particular thanks to the AJAX programming model that introduced an XML-based communication mechanism between the client-side JavaScript and the server-side. Obviously, the ability to deal with XML data relies on the availability of XML processing APIs: DOM-based access has always been the standard in JavaScript, and most modern browsers also support other technologies such as XSLT or XPath.</textual></para><para class="po-block e43 e43"><textual class="po-textual">With the recent interest in the XRX (XForms/REST/XQuery </textual><xref class="po-milestone e44 e44" linkend="xrx"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) architecture and native, end-to-end XML environments in general, web applications (both on the server-side and client-side) are becoming more centered around the XML data model; modern XForms-driven user interfaces are an example. However, JavaScript is still often used to implement the client-side XML processing logic (parsing of XML documents, extracting relevant information etc.) and to bind the various XML-based components together (populating an XForms instance etc.). While this approach works, it often requires hard-coding the processing logic in JavaScript and writing plumbing code (often browser-specific). This can make the applications difficult to develop and maintain, and to be interoperable with different web browsers.</textual></para><para class="po-block e45 e45"><textual class="po-textual">But integrating and orchestrating XML processes is exactly what XProc: An XML Pipeline Language </textual><xref class="po-milestone e46 e46" linkend="xproc10"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> is trying to address. The declarative, pipeline-oriented approach to XML processing in XProc provides a flexible integration layer on top of other XML technologies (such as XQuery, XSLT or, for instance, schema validation) that makes developing complex XML processing flows easier and more transparent.</textual></para><para class="po-block e47 e47"><textual class="po-textual">Although XProc is probably viewed as a primarily server-side technology, we believe that it can have useful applications on the client-side, too. Based on our recent experimentation with porting Calumet, EMC's XProc implementation to JavaScript, this paper discusses some examples of using XProc in the web browser environment. </textual></para></section><section class="po-hcontainer e48 e48"><title class="po-block e49 e49"><textual class="po-textual">Calumet: Sharing the XML Peace Pipe with JavaScript</textual></title><para class="po-block e50 e50"><textual class="po-textual">To our knowledge, all currently available XProc implementations are essentially server-side applications. This is definitely the case with XML Calabash </textual><xref class="po-milestone e51 e51" linkend="xmlcalabash"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and EMC's Calumet </textual><xref class="po-milestone e52 e52" linkend="emccalumet"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, which are both Java-based. Other projects that we are aware of also make use of server-side technologies.</textual></para><para class="po-block e53 e53"><textual class="po-textual">At EMC, when we started thinking about bringing Calumet to the browser, we were basically facing two options: either re-implement the processor in JavaScript from scratch, or port the existing code base to JavaScript somehow. (As our objective was a truly cross-browser solution with no additional requirements on the client-side, we didn't want to go the route of writing an XProc browser plug-in.) Eventually, we decided for the latter option: porting existing Java sources to JavaScript.</textual></para><para class="po-block e54 e54"><textual class="po-textual">This decision was motivated mainly by our previous experience with the Google Web Toolkit, or GWT </textual><xref class="po-milestone e55 e55" linkend="gwt"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, a framework for building dynamic web applications - in Java, without having to write any JavaScript</textual><footnote class="po-popup e56 e56"><para class="po-block e57 e57"><textual class="po-textual">Of course, it is possible to combine JavaScript with GWT quite easily; GWT-based applications can invoke external JavaScript functionality and vice versa.</textual></para></footnote><textual class="po-textual">. The central component of GWT is the GWT compiler that takes the application Java sources and converts them into highly optimized JavaScript that runs in a variety of browsers, without any need for extension plug-ins or presence of Java runtime on the client machine. GWT supports only a subset of the JRE functionality as not everything that Java provides can be mapped to JavaScript; however, the set of supported features is still comprehensive enough to bring most of the power and benefits of Java to the web application development context.</textual></para><para class="po-block e58 e58"><textual class="po-textual">Porting Calumet to GWT turned out to be mostly a mechanical process: refactoring out dependencies on features not supported by GWT from the original Java code, and implementing adapters for accessing the browser DOM functionality. Especially the latter turned out to be critical for the overall function of the XProc engine and its interoperability with different browsers.</textual></para><para class="po-block e59 e59"><textual class="po-textual">The result is an XProc processor with a standard </textual><quote class="po-inline e60 e60"><textual class="po-textual">server</textual></quote><textual class="po-textual"> Java version and a JavaScript version that can run in a web browser. </textual><xref class="po-milestone e61 e61" linkend="fig.demo"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> shows a screenshot of a simple demo application built on top of the GWT version of Calumet. The demo was presented at the XML Prague '10 DemoJam event.</textual></para><figure class="po-container e62 e62" xml:id="fig.demo"><title class="po-block e63 e63"><textual class="po-textual">GWT Calumet Demo Application</textual></title><mediaobject class="po-container e64 e64"><imageobject class="po-container e65 e65"><imagedata class="po-meta e66 e66" fileref="../../../vol5/graphics/Toman01/Toman01-001.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><section class="po-hcontainer e67 e67"><title class="po-block e68 e68"><textual class="po-textual">XProc Compliance</textual></title><para class="po-block e69 e69"><textual class="po-textual">A large part of the code base is shared between the Java and GWT versions. This not only reduces code duplication, but also ensures that both versions of Calumet are aligned in terms of functionality and the level of XProc support. As of July 2010, the GWT version supports 34 out of the total 41 steps from the standard XProc step library </textual><xref class="po-milestone e70 e70" linkend="xproc10"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> (the Java version supports all steps); </textual><xref class="po-milestone e71 e71" linkend="tbl.xproc-missing-func"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> provides an overview of the missing functionality.</textual></para><table class="po-container e72 e72" xml:id="tbl.xproc-missing-func"><caption class="po-container e73 e73"><para class="po-block e74 e74"><textual class="po-textual">XProc Standard Step Library - Missing Functionality</textual></para></caption><col align="left" class="po-meta e75 e75" span="1"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></col><col align="left" class="po-meta e76 e76" span="1"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></col><col align="left" class="po-meta e77 e77" span="1"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></col><thead class="po-container e78 e78"><tr class="po-table e79 e79"><th align="left" class="po-field e80 e80"><textual class="po-textual">Step</textual></th><th align="left" class="po-field e81 e81"><textual class="po-textual">Supported</textual></th><th align="left" class="po-field e82 e82"><textual class="po-textual">Remarks</textual></th></tr></thead><tbody class="po-table e83 e83"><tr class="po-table e84 e84"><td class="po-block e85 e85"><textual class="po-textual">p:directory-list</textual></td><td class="po-block e86 e86"><textual class="po-textual">No</textual></td><td class="po-block e87 e87"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e88 e88"><td class="po-block e89 e89"><textual class="po-textual">p:http-request</textual></td><td class="po-block e90 e90"><textual class="po-textual">Yes</textual></td><td class="po-block e91 e91"><textual class="po-textual">Only simple GET requests</textual></td></tr><tr class="po-table e92 e92"><td class="po-block e93 e93"><textual class="po-textual">p:load</textual></td><td class="po-block e94 e94"><textual class="po-textual">Yes</textual></td><td class="po-block e95 e95"><textual class="po-textual">DTD validation not supported</textual></td></tr><tr class="po-table e96 e96"><td class="po-block e97 e97"><textual class="po-textual">p:unescape-markup</textual></td><td class="po-block e98 e98"><textual class="po-textual">No</textual></td><td class="po-block e99 e99"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e100 e100"><td class="po-block e101 e101"><textual class="po-textual">p:xinclude</textual></td><td class="po-block e102 e102"><textual class="po-textual">Yes</textual></td><td class="po-block e103 e103"><textual class="po-textual">XPointer not supported</textual></td></tr><tr class="po-table e104 e104"><td class="po-block e105 e105"><textual class="po-textual">p:xslt</textual></td><td class="po-block e106 e106"><textual class="po-textual">Yes</textual></td><td class="po-block e107 e107"><textual class="po-textual">Only XSLT 1.0 supported (browser-native)</textual></td></tr><tr class="po-table e108 e108"><td class="po-block e109 e109"><textual class="po-textual">p:exec</textual></td><td class="po-block e110 e110"><textual class="po-textual">No</textual></td><td class="po-block e111 e111"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e112 e112"><td class="po-block e113 e113"><textual class="po-textual">p:hash</textual></td><td class="po-block e114 e114"><textual class="po-textual">Yes</textual></td><td class="po-block e115 e115"><textual class="po-textual">CRC32 not supported</textual></td></tr><tr class="po-table e116 e116"><td class="po-block e117 e117"><textual class="po-textual">p:validate-with-relax-ng</textual></td><td class="po-block e118 e118"><textual class="po-textual">No</textual></td><td class="po-block e119 e119"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e120 e120"><td class="po-block e121 e121"><textual class="po-textual">p:validate-with-xml-schema</textual></td><td class="po-block e122 e122"><textual class="po-textual">No</textual></td><td class="po-block e123 e123"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e124 e124"><td class="po-block e125 e125"><textual class="po-textual">p:xquery</textual></td><td class="po-block e126 e126"><textual class="po-textual">No</textual></td><td class="po-block e127 e127"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e128 e128"><td class="po-block e129 e129"><textual class="po-textual">p:xsl-formatter</textual></td><td class="po-block e130 e130"><textual class="po-textual">No</textual></td><td class="po-block e131 e131"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr></tbody></table><para class="po-block e132 e132"><textual class="po-textual">The GWT version has most of the features of the original Java version: from high compliance with the XProc specification to extensibility and customizability. For instance, it is possible to register extension steps or custom URI handlers with both the Java and GWT versions.</textual></para><para class="po-block e133 e133"><xref class="po-milestone e134 e134" linkend="tbl.xproc-ts"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> below summarizes the current results of running the GWT version of Calumet against the XProc Test Suite </textual><xref class="po-milestone e135 e135" linkend="xprocts"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. The XProc Test Suite comprises four main categories of tests:</textual></para><itemizedlist class="po-table e136 e136"><listitem class="po-container e137 e137"><para class="po-block e138 e138"><textual class="po-textual">Required tests (that all conformant XProc processors must pass)</textual></para></listitem><listitem class="po-container e139 e139"><para class="po-block e140 e140"><textual class="po-textual">Optional tests (that conformant XProc processors are not required to pass)</textual></para></listitem><listitem class="po-container e141 e141"><para class="po-block e142 e142"><textual class="po-textual">Serialization tests (that test the XML Serialization </textual><xref class="po-milestone e143 e143" linkend="xmlserialization"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> features)</textual></para></listitem><listitem class="po-container e144 e144"><para class="po-block e145 e145"><textual class="po-textual">Extension tests (that test the support for XProc extensibility)</textual></para></listitem></itemizedlist><table class="po-container e146 e146" xml:id="tbl.xproc-ts"><caption class="po-container e147 e147"><para class="po-block e148 e148"><textual class="po-textual">GWT Calumet XProc Test Suite Results</textual></para></caption><col align="left" class="po-meta e149 e149" span="1"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></col><col align="left" class="po-meta e150 e150" span="1"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></col><thead class="po-container e151 e151"><tr class="po-table e152 e152"><th align="left" class="po-field e153 e153"><textual class="po-textual">Category</textual></th><th align="left" class="po-field e154 e154"><textual class="po-textual">Percent passed</textual></th></tr></thead><tbody class="po-table e155 e155"><tr class="po-table e156 e156"><td class="po-block e157 e157"><textual class="po-textual">Required</textual></td><td class="po-block e158 e158"><textual class="po-textual">81.85%</textual></td></tr><tr class="po-table e159 e159"><td class="po-block e160 e160"><textual class="po-textual">Optional</textual></td><td class="po-block e161 e161"><textual class="po-textual">45.45%</textual></td></tr><tr class="po-table e162 e162"><td class="po-block e163 e163"><textual class="po-textual">Serialization</textual></td><td class="po-block e164 e164"><textual class="po-textual">68.00%</textual></td></tr><tr class="po-table e165 e165"><td class="po-block e166 e166"><textual class="po-textual">Extension</textual></td><td class="po-block e167 e167"><textual class="po-textual">100.00%</textual></td></tr></tbody></table><para class="po-block e168 e168"><textual class="po-textual">As can be seen from </textual><xref class="po-milestone e169 e169" linkend="tbl.xproc-ts"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, GWT Calumet scores relatively well with the required tests (passing over 80% of the tests), as well as with the serialization and extension tests. The biggest gap is in the optional tests that depend on functionality that is difficult to implement in JavaScript (for instance, XQuery or schema validation) and some of which will probably not be supported in the GWT version of Calumet any time soon. However, this limitation can be overcome easily in the web browser environment by using the standard XProc HTTP Request step and invoking a server-side service that provides the missing functionality. Alternatively, the missing steps themselves can be implemented as callbacks to the server-side if necessary.</textual></para></section><section class="po-hcontainer e170 e170"><title class="po-block e171 e171"><textual class="po-textual">Preliminary Performance Results</textual></title><para class="po-block e172 e172"><textual class="po-textual">The GWT version of Calumet has been tested successfully with most of the major browsers. Work is currently underway on implementing the gaps in the standard XProc step library support and also on improving the performance and reducing the size of generated JavaScript. The current size of the JavaScript code (without compression) is about 550 KiB, but we are confident that this can be brought down - the original Java code was not written with GWT in mind and many of the programming constructs used in the code are perhaps too generic for efficient translation to JavaScript.</textual></para><para class="po-block e173 e173"><textual class="po-textual">Regarding the performance of the GWT version of the processor, there are noticeable (and expected) differences between different browsers, especially with more complex pipelines that involve evaluating many XPath expressions or creating large numbers of intermediate XML documents. But surprisingly, the most expensive part of running an XProc pipeline turned out to be the initial phase: parsing the pipeline source, resolving imports, performing the static analysis, and establishing the evaluation order of the steps in the pipeline. While executing the pipeline itself generally requires only milliseconds or tens of milliseconds (in Gecko- or WebKit-based browsers on a 2.33 GHz dual-core workstation with 4 GB of RAM), preparing and statically checking the pipeline often takes considerably more time (from 50 to 300 milliseconds depending on the web browser and the complexity of the pipeline); a clear area for further performance optimizations.</textual></para><para class="po-block e174 e174"><textual class="po-textual">Having the possibility to run - and test - the same code base in two completely different environments (Java and in-browser JavaScript) actually resulted in an interesting synergistic effect between the two versions of the processor: code that performs reasonably well in Java may prove to be a performance bottleneck in JavaScript (or the other way around); but fixing the issue usually has a positive effect in both environments.</textual></para></section></section><section class="po-hcontainer e175 e175"><title class="po-block e176 e176"><textual class="po-textual">Applications of Client-side XProc</textual></title><para class="po-block e177 e177"><textual class="po-textual">From the start, our work on the JavaScript port of Calumet was driven by a number of use cases that we were trying to address to validate that the whole concept is viable. This section describes some of these use cases.</textual></para><section class="po-hcontainer e178 e178"><title class="po-block e179 e179"><textual class="po-textual">AJAX and Dynamic Web Applications</textual></title><para class="po-block e180 e180"><textual class="po-textual">Modern dynamic web applications often rely on heavy use of JavaScript and AJAX for interacting with the server-side. In the XML-based model, the result of an AJAX request is an XML document that needs to be processed in some way; most often by traversing the XML structure using the DOM API. For example, in a web shop application, an AJAX callback might be used to call a </textual><code class="po-atom e181 e181"><textual class="po-textual">productlist</textual></code><textual class="po-textual"> service and to display the results in a dynamically constructed HTML table. This would typically involve iterating over the result elements in the returned XML document and creating a table row for each result.</textual></para><para class="po-block e182 e182"><textual class="po-textual">While this approach works, hard-coding the AJAX XML response processing in JavaScript may not always be the best option. First, it requires knowledge of the AJAX and DOM APIs as well as awareness of various browser quirks, and second, the processing model becomes set in stone, often hard to change or even understand. This may be critical for larger-scale enterprise applications, or in any application in general that requires a flexible (and maintanable) processing model the developers can build on.</textual></para><para class="po-block e183 e183"><textual class="po-textual">The example below attempts to translate the usual </textual><quote class="po-inline e184 e184"><textual class="po-textual">AJAX request - process response - update host page</textual></quote><textual class="po-textual"> pattern to XProc. The XProc pipeline starts with an HTTP request to the </textual><quote class="po-inline e185 e185"><code class="po-atom e186 e186"><textual class="po-textual">productlist</textual></code></quote><textual class="po-textual"> service. The XML document returned by the service is then processed by creating an HTML table row for each </textual><code class="po-atom e187 e187"><textual class="po-textual">product</textual></code><textual class="po-textual"> element in the document. After that, all table rows are inserted into a table wrapper which is then injected into the host page. In the example, a custom extension is used that makes it possible to address elements of the host page using their ID. In our case, the </textual><code class="po-atom e188 e188"><textual class="po-textual">p:store</textual></code><textual class="po-textual"> step effectively replaces the element with the ID </textual><quote class="po-inline e189 e189"><code class="po-atom e190 e190"><textual class="po-textual">search-results</textual></code></quote><textual class="po-textual"> by the generated HTML table.</textual></para><programlisting class="po-block e191 e191" xml:space="preserve"><textual class="po-textual">&lt;p:declare-step xmlns:p="http://www.w3.org/ns/xproc"
                xmlns:c="http://www.w3.org/ns/xproc-step"
                xmlns:xhtml="http://www.w3.org/1999/xhtml"
                version="1.0"&gt;

  &lt;p:http-request&gt;
    &lt;p:input port="source"&gt;
      &lt;p:inline&gt;
        &lt;c:request method="GET" href="/productlist"/&gt;
      &lt;/p:inline&gt;
    &lt;/p:input&gt;
  &lt;/p:http-request&gt;

  &lt;p:for-each name="for"&gt;
    &lt;p:iteration-source select="//product"/&gt;
    &lt;p:output port="result" sequence="true"/&gt;

    &lt;p:variable name="product-name" select="/product/@name"/&gt;

    &lt;p:string-replace match="xhtml:td/text()"
                      replace="concat('&amp;quot;', $product-name, '&amp;quot;')"&gt;
      &lt;p:input port="source"&gt;
        &lt;p:inline&gt;
          &lt;xhtml:tr&gt;
            &lt;xhtml:td&gt;tmp&lt;/xhtml:td&gt;
          &lt;/xhtml:tr&gt;
        &lt;/p:inline&gt;
      &lt;/p:input&gt;
    &lt;/p:string-replace&gt;
  &lt;/p:for-each&gt;

  &lt;p:insert match="xhtml:tbody" position="first-child"&gt;
    &lt;p:input port="source"&gt;
      &lt;p:inline&gt;
        &lt;xhtml:table id="search-results"&gt;
          &lt;xhtml:tbody/&gt;
        &lt;/xhtml:table&gt;
      &lt;/p:inline&gt;
    &lt;/p:input&gt;
    &lt;p:input port="insertion"&gt;
      &lt;p:pipe step="for" port="result"/&gt;
    &lt;/p:input&gt;
  &lt;/p:insert&gt;

  &lt;p:store href="domid:search-results"/&gt;

&lt;/p:declare-step&gt;</textual></programlisting><para class="po-block e192 e192"><textual class="po-textual">XML is not the only format that can be used in AJAX environments. JSON, or JavaScript Object Notation </textual><xref class="po-milestone e193 e193" linkend="json"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, is an increasingly popular, text-based format for data interchange that is both light-weight and very easy to work with in JavaScript (on the syntactic level, JSON is just a subset of JavaScript). In the web applications world, JSON and XML can be seen as competing formats where JSON is often presented as the simpler and more efficient alternative to XML. Leaving aside the (often emotional) arguments between the JSON and XML proponents as to which format is better, it is obvious that both JSON and XML have much in common: they are both open formats, readable by machines and humans; they are self-describing; and they are well supported by a wide variety of tools. The strength of JSON lies mainly in representing simple data structures, where XML is often seen as too heavy-weight; XML, on the other hand, is generally better suited for semistructured data.</textual></para><para class="po-block e194 e194"><textual class="po-textual">For the use case discussed in this section, one could argue that using AJAX and JSON would be a much better fit than XProc. Indeed: the 40 lines of XProc code (plus the necessary GWT or JavaScript code for actually executing the pipeline) could probably be replaced with only a handful of lines of simple JavaScript. The overhead of an XProc solution is also likely to be much higher compared to plain JavaScript: the XProc pipeline needs to be parsed and analyzed first, and the data is then processed using relatively expensive (at least in the browser) XML manipulations.</textual></para><para class="po-block e195 e195"><textual class="po-textual">So is there a benefit in adopting the inherently </textual><quote class="po-inline e196 e196"><textual class="po-textual">heavier</textual></quote><textual class="po-textual"> XProc approach where a simpler and more efficient alternative exists? We argue there is, although it depends strongly on the particular use case. XProc is not a hammer for everything: it is first and foremost an XML processing language, and it should be used as such. Client-side XProc therefore makes most sense in user interfaces that are XML-driven, consume or produce XML data, or require non-trivial XML processing. In other situations, other approaches may be more appropriate.</textual></para><para class="po-block e197 e197"><textual class="po-textual">The XProc pipeline above is admittedly very minimal, and from the dynamic web applications perspective it does not show anything new that could not be done with existing approaches. The interesting part lies in what XProc can offer beyond this point. While the example pipeline may seem as unnecessary overhead for the simple problem (populating an HTML table based on data returned from the server), the perspective begins to shift when further processing of the server-side results is needed. The XProc pipeline can query or transform the data easily, enrich it, or combine it with data obtained from other services; all using a unified, declarative, and flexible XML processing model.</textual></para></section><section class="po-hcontainer e198 e198"><title class="po-block e199 e199"><textual class="po-textual">Client-side XML Presentation</textual></title><para class="po-block e200 e200"><textual class="po-textual">A common task in XML-based web applications is presenting the XML data (either static or dynamically generated) to the user. Typically, this is done by transforming the XML data on the server-side to HTML or some other format understood by the browser. Most of these transformations can be expressed in the form of XProc pipelines, and with a reasonably compliant client-side XProc implementation, it should be possible to move the processing to the client-side completely. Delegating the rendering to the client-side can not only reduce the load on the server, but in many cases, it can also simplify the server-side functionality in general and make it less coupled with the front-end technology.</textual></para><para class="po-block e201 e201"><textual class="po-textual">The pipeline below takes an XML document, resolves possible XInclude references, and applies an XSLT stylesheet to the resolved document; all with standard XProc and completely in the browser.</textual></para><programlisting class="po-block e202 e202" xml:space="preserve"><textual class="po-textual">&lt;p:pipeline xmlns:p="http://www.w3.org/ns/xproc"
            version="1.0"&gt;

  &lt;p:xinclude/&gt;

  &lt;p:xslt&gt;
    &lt;p:input port="stylesheet"&gt;
      &lt;p:document href="style.xsl"/&gt;
    &lt;/p:input&gt;
  &lt;/p:xslt&gt;

&lt;/p:pipeline&gt;</textual></programlisting><para class="po-block e203 e203"><textual class="po-textual">The previous pipeline is obviously a very simple one, but the potential of using XProc as a client-side XML rendering tool is obvious: one can imagine using XProc for bringing popular XML vocabularies like, for instance, DocBook </textual><xref class="po-milestone e204 e204" linkend="docbook"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> or DITA </textual><xref class="po-milestone e205 e205" linkend="dita"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> to the browser.</textual></para><para class="po-block e206 e206"><textual class="po-textual">The example below shows a pipeline that takes a DITA topic and returns its HTML rendition. While the pipeline itself is trivial, the </textual><code class="po-atom e207 e207"><textual class="po-textual">dita:topic-to-xhtml</textual></code><textual class="po-textual"> step will most likely perform rather complex XML processing: from resolving the various DITA link types to content filtering to applying an XSLT stylesheet. Or... maybe not: the black-box nature of XProc steps provides great freedom by allowing different implementations of the same step </textual><quote class="po-inline e208 e208"><textual class="po-textual">interface</textual></quote><textual class="po-textual"> - which is not only convenient when writing (and testing) the pipelines, but it also makes it possible to adapt the pipelines to the needs of a particular user audience or to different browser environments. Thus, the pipeline below can, for instance, do full-blown client-side DITA processing in web browsers that are known to be fast (or compliant) enough, and delegate to the server-side in other cases.</textual></para><programlisting class="po-block e209 e209" xml:space="preserve"><textual class="po-textual">&lt;p:pipeline xmlns:p="http://www.w3.org/ns/xproc"
            xmlns:dita="http://example.org/ns/dita"
            version="1.0"&gt;

  &lt;p:import href="dita-lib.xpl"/&gt;

  &lt;dita:topic-to-xhtml/&gt;

&lt;/p:pipeline&gt;</textual></programlisting></section><section class="po-hcontainer e210 e210"><title class="po-block e211 e211"><textual class="po-textual">Interactive Processing</textual></title><para class="po-block e212 e212"><textual class="po-textual">An interesting application of XProc pipelines in web browser is using them as a driver for interactive client-side procedures. In such an obvious user interface-oriented platform as a web browser, it is possible to imagine XProc extension steps that would add interaction with the end-user to the XML processing logic - for example, by displaying dynamically generated dialogs or messages on the screen. This would make XProc a simple (yet powerful) alternative to other approaches for representing interactive processes: from simple data collection procedures to complex and often highly dynamic maintenance and diagnostic procedures found, for instance, in the military and in the aerospace industry.</textual></para><para class="po-block e213 e213"><textual class="po-textual">In the area of interactive processing, client-side XForms is a technology that combines exceptionally well with XProc: as an XML-based standard, it is very easy to load - or even dynamically generate - XForms-based dialogs in XProc pipelines. Similarly, the XForms submissions, which are XML documents as well, can be processed naturally in XProc.</textual></para><para class="po-block e214 e214"><textual class="po-textual">The pipeline below shows how XForms could be used with XProc in an imaginary aircraft maintenance system; in this case, the example is a simple </textual><quote class="po-inline e215 e215"><textual class="po-textual">circuit breaker check</textual></quote><textual class="po-textual"> procedure. The pipeline has two options, an aircraft model number and its variant. Depending on a specific combination of the model and the variant, the maintenance mechanic is presented with a dialog (an XForm) that allows him to enter information about the state of the circuit breaker. When the mechanic submits the dialog, the pipeline displays a message that tells the mechanic to switch on the breaker if it was in the OFF position.</textual></para><programlisting class="po-block e216 e216" xml:space="preserve"><textual class="po-textual">&lt;p:declare-step xmlns:p="http://www.w3.org/ns/xproc"
                xmlns:am="http://example.org/ns/aircraft-maintenance"
                xmlns:xf="http://www.w3.org/2002/xforms"
                version="1.0"&gt;

  &lt;p:option name="model" required="true"/&gt;
  &lt;p:option name="variant" required="true"/&gt;

  &lt;p:import href="aircraft-maintenance-lib.xpl"/&gt;

  &lt;p:choose&gt;
    &lt;p:when test="$model = '777' and ($variant='200' or $variant='200ER')"&gt;
      &lt;am:dialog href="forms/777-200-circuit-breaker-check.xfm"/&gt;
    &lt;/p:when&gt;
    &lt;p:when test="$model = '777'"&gt;
      &lt;am:dialog href="forms/777-circuit-breaker-check.xfm"/&gt;
    &lt;/p:when&gt;
    &lt;p:when test="$model = '787'"&gt;
      ...
    &lt;/p:when&gt;
    ...
  &lt;/p:choose&gt;
  
  &lt;p:choose&gt;
    &lt;p:when test="/state = 'OFF'"&gt;
      &lt;am:message&gt;
        &lt;p:input port="source"&gt;
          &lt;p:inline&gt;
            &lt;p xmlns="http://www.w3.org/1999/xhtml"&gt;                                                              
              Switch the circuit breaker to the ON position.
            &lt;/p&gt;
          &lt;/p:inline&gt;
        &lt;/p:input&gt;
      &lt;/am:message&gt;
    &lt;/p:when&gt;
    &lt;p:otherwise&gt;
      &lt;p:sink/&gt;
    &lt;/p:otherwise&gt;
  &lt;/p:choose&gt;

&lt;/p:declare-step&gt;</textual></programlisting></section></section><section class="po-hcontainer e217 e217"><title class="po-block e218 e218"><textual class="po-textual">Conclusion and Future Work</textual></title><para class="po-block e219 e219"><textual class="po-textual">Although XProc is still a relatively new technology, it is already finding its way into the XML application developers' tool set. Extending and complementing the family of established XML processing languages such as XSLT and XQuery, XProc provides a unifying and flexible integration layer that makes orchestration of XML processes easier.</textual></para><para class="po-block e220 e220"><textual class="po-textual">In the web applications world, XML processing has traditionally been done primarily on the server-side. However, with the recent advances in modern web browsers and the growing interest in end-to-end XML application architectures, we can see that more and more XML processing is being done on the client-side. We believe that the problems that XProc is attempting to address - the impedance mismatch between different XML processing models, and the need to write plumbing code - apply equally to the server-side and the client-side (although on the client-side this may not be that visible - yet).</textual></para><para class="po-block e221 e221"><textual class="po-textual">This paper discussed some of the possibilities of using XProc pipelines in the web browser environment, motivated by our recent work on porting EMC's Calumet XProc processor to JavaScript (using the Google Web Toolkit). What initially started more as a proof-of-concept effort has lead to some interesting outcomes. Not only did it prove that performing complex XML processing in JavaScript in the web browser is possible, it also showed that client-side XProc can have useful practical applications that are worth exploring.</textual></para><para class="po-block e222 e222"><textual class="po-textual">The current GWT port of Calumet is still very much work-in-progress. While it is reasonably stable already and supports a relatively large portion of the XProc specification, the code still needs to be optimized and fine-tuned for different web browsers. Also, work needs to be done on providing convenient XProc processing APIs in JavaScript. In GWT-based applications, the </textual><quote class="po-inline e223 e223"><textual class="po-textual">native</textual></quote><textual class="po-textual"> Java API of Calumet can be used, but for the case of traditional HTML/JavaScript applications, a JavaScript interface will be necessary. An additional option that we are considering is to support embedding XProc pipelines in the HTML </textual><code class="po-atom e224 e224"><textual class="po-textual">script</textual></code><textual class="po-textual"> element; however, that direction still needs to be researched.</textual></para><para class="po-block e225 e225"><textual class="po-textual">Future versions of the Calumet XProc processor will most likely be distributed as a dual Java/JavaScript package; work is still ongoing on the JavaScript version, but the progress with the development and the results achieved so far are encouraging.</textual></para></section><bibliography class="po-hcontainer e226 e226"><title class="po-block e227 e227"><textual class="po-textual">Bibliography</textual></title><bibliomixed class="po-block e228 e228" xml:id="dita" xreflabel="DITA"><textual class="po-textual">Michael Priestley, JoAnn Hackos, eds. Darwin Information Typing Architecture (DITA) Architectural Specification v1.1. OASIS Standard. 1 August 2007. </textual><link class="po-inline e229 e229" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://docs.oasis-open.org/dita/v1.1/OS/archspec/archspec.html</textual></link></bibliomixed><bibliomixed class="po-block e230 e230" xml:id="docbook" xreflabel="DocBook"><link class="po-inline e231 e231" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.docbook.org/</textual></link></bibliomixed><bibliomixed class="po-block e232 e232" xml:id="emccalumet" xreflabel="EMC Calumet"><link class="po-inline e233 e233" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://developer.emc.com/xmltech/</textual></link></bibliomixed><bibliomixed class="po-block e234 e234" xml:id="gwt" xreflabel="Google Web Toolkit"><link class="po-inline e235 e235" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://code.google.com/webtoolkit/</textual></link></bibliomixed><bibliomixed class="po-block e236 e236" xml:id="json" xreflabel="JSON"><link class="po-inline e237 e237" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://json.org/</textual></link></bibliomixed><bibliomixed class="po-block e238 e238" xml:id="xmlserialization" xreflabel="W3C Serialization"><textual class="po-textual">Scott Boag, Michael Kay, Joanne Tong, Norman Walsh, and Henry Zongaro, eds. XSLT 2.0 and XQuery 1.0 Serialization. W3C Recommendation. 23 January 2007. </textual><link class="po-inline e239 e239" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xslt-xquery-serialization/</textual></link></bibliomixed><bibliomixed class="po-block e240 e240" xml:id="xforms11" xreflabel="W3C XForms"><textual class="po-textual">John M. Boyer, ed. XForms 1.1. W3C Recommendation. 20 October 2009. </textual><link class="po-inline e241 e241" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xforms11/</textual></link></bibliomixed><bibliomixed class="po-block e242 e242" xml:id="xproc10" xreflabel="W3C XProc"><textual class="po-textual">Norman Walsh, Alex Milowski, and Henry S. Thompson, eds. XProc: An XML Pipeline Language. W3C Proposed Recommendation. 9 March 2010. </textual><link class="po-inline e243 e243" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xproc/</textual></link></bibliomixed><bibliomixed class="po-block e244 e244" xml:id="xmlcalabash" xreflabel="XML Calabash"><link class="po-inline e245 e245" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://xmlcalabash.com/</textual></link></bibliomixed><bibliomixed class="po-block e246 e246" xml:id="xprocts" xreflabel="XProc Test Suite"><link class="po-inline e247 e247" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://tests.xproc.org/</textual></link></bibliomixed><bibliomixed class="po-block e248 e248" xml:id="xrx" xreflabel="XRX"><link class="po-inline e249 e249" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://en.wikibooks.org/wiki/XRX/</textual></link></bibliomixed></bibliography></article></classedDocument>