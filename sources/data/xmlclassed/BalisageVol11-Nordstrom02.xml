<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.3"><title class="po-block e1 e1"><textual class="po-textual">ProX: XML for interfacing with XML for processing XML (and an XForm to go with
        it)</textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">International Symposium on Native XML User Interfaces</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 5, 2013</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual">The </textual><emphasis class="po-inline e8 e8"><textual class="po-textual">process XML</textual></emphasis><textual class="po-textual"> or </textual><emphasis class="po-inline e9 e9"><textual class="po-textual">ProX</textual></emphasis><textual class="po-textual"> for short was
                introduced to create an abstraction layer around running XProc pipelines. While
                XProc is XML, running XProc pipelines using an actual engine involves a lot more,
                usually batch or shell scripts that configure the engine and whatever inputs and
                options, etc, that the pipeline defines, which is something of a pain. Offering the
                resulting configuration options to an end user in a GUI is difficult at best and a
                nightmare for any conscientious developer.</textual></para><para class="po-block e10 e10"><textual class="po-textual">This paper describes an XML-based abstraction layer that defines all those
                configuration options. The XML is made available to the user so s/he can configure
                the pipeline and whatever options it has, and save the configured process as an
                instance that is then converted to a shell script that runs the configured pipeline,
                greatly simplifying the configuration.</textual></para></abstract><author class="po-record e11 e11"><personname class="po-record e12 e12"><firstname class="po-field e13 e13"><textual class="po-textual">Ari</textual></firstname><surname class="po-field e14 e14"><textual class="po-textual">Nordström</textual></surname></personname><personblurb class="po-container e15 e15"><para class="po-block e16 e16"><textual class="po-textual">Ari Nordström is the resident XML guy at Condesign AB in Göteborg, Sweden. His
                    information structures and solutions are used by Volvo Cars, Ericsson, and many
                    others, with more added every year. His favourite XML specification remains
                    XLink so quite a few of his frequent talks and presentations on XML focus on
                    linking. </textual></para><para class="po-block e17 e17"><textual class="po-textual">Ari spends some of his spare time projecting films at the Draken Cinema in
                    Göteborg, which should explain why he wants to automate cinemas using XML. He
                    now realises it's too late, however.</textual></para></personblurb><email class="po-field e18 e18"><textual class="po-textual">ari.nordstrom@condesign.se</textual></email></author><legalnotice class="po-container e19 e19"><para class="po-block e20 e20"><textual class="po-textual">Copyright © Ari Nordström 2013</textual></para></legalnotice></info><section class="po-hcontainer e21 e21" xml:id="section_tfb_3rg_wj"><title class="po-block e22 e22"><textual class="po-textual">ProX</textual></title><section class="po-hcontainer e23 e23" xml:id="section_rw3_rrg_wj"><title class="po-block e24 e24"><textual class="po-textual">Reasons</textual></title><para class="po-block e25 e25"><textual class="po-textual">XProc pipelines describe step-by-step processing of XML using XML. One step might
                normalise a bunch of XML modules, the next validate the result and the last convert
                the normalised XML to something more human-readable. It's easy to add various
                conditionals, insert XQueries and include additional steps from XProc libraries, and
                so on.</textual></para><para class="po-block e26 e26"><textual class="po-textual">I think it is a very, very cool spec (</textual><xref class="po-milestone e27 e27" linkend="id-xproc-spec"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).</textual></para><para class="po-block e28 e28"><textual class="po-textual">The pipelines are frequently extremely configurable, with options and parameters
                and outputs and various pipeline engine-specific configuration options, and they
                might be used as-is with several different stylesheets or other inputs. These in
                turn may be configurable, defining index generation, TOC generation, paper sizes and
                other options the stylesheet author has graciously provided as configurable with
                parameters.</textual></para><para class="po-block e29 e29"><textual class="po-textual">A pipeline is run using a pipeline engine of some description, frequently from a
                shell script (for Calabash), from inside an XQuery, or some other kind of script.
                The various configuration options, inputs, etc, are all defined in that script,
                using whatever format and syntax the script uses. And here lies the problem.</textual></para><para class="po-block e30 e30"><textual class="po-textual">Even though XProc is XML, processes XML, and uses XML as input, you have to write
                that script. And the more complex or flexible the pipeline is, the more variations
                there are when writing that script. And that script is not XML.</textual></para><para class="po-block e31 e31"><textual class="po-textual">The pipelines are often part of a larger process that may or may not include other
                pipelines. The end user might want to choose between several different pipelines,
                then configure the one chosen with the various options and parameters, choose
                between several input stylesheets and finally configure the chosen stylesheet. And
                all this ends up in a script that is supposed to run the pipeline - the process that
                surrounds the pipeline, actually.</textual></para><para class="po-block e32 e32"><textual class="po-textual">It follows that the pipeline is only as flexible as the means to configure
                it.</textual></para></section><section class="po-hcontainer e33 e33" xml:id="section_k4v_b5g_wj"><title class="po-block e34 e34"><textual class="po-textual">Logic</textual></title><para class="po-block e35 e35"><textual class="po-textual">Enter the process XML. It describes XProc pipelines and their configuration,
                including any available stylesheets and other input, but also puts them all in the
                context of </textual><emphasis class="po-inline e36 e36"><textual class="po-textual">processes</textual></emphasis><textual class="po-textual"> that surround the pipelines, and it does
                it all in XML files. There might be a </textual><emphasis class="po-inline e37 e37"><textual class="po-textual">Print</textual></emphasis><textual class="po-textual"> process that
                includes pipelines for producing PDF, and MIF, a </textual><emphasis class="po-inline e38 e38"><textual class="po-textual">Web</textual></emphasis><textual class="po-textual"> process
                that produces ePUB and HTML, and perhaps a </textual><emphasis class="po-inline e39 e39"><textual class="po-textual">Report</textual></emphasis><textual class="po-textual"> process with
                pipelines that output reports.</textual></para><para class="po-block e40 e40"><textual class="po-textual">The structure is roughly this:</textual></para><figure class="po-container e41 e41"><title class="po-block e42 e42"><textual class="po-textual">ProX Structure</textual></title><mediaobject class="po-container e43 e43"><imageobject class="po-container e44 e44"><imagedata class="po-meta e45 e45" fileref="../../../vol11/graphics/Nordstrom02/Nordstrom02-001.jpg" width="300px"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e46 e46"><textual class="po-textual">The Process XML, ProX for short</textual><footnote class="po-popup e47 e47"><para class="po-block e48 e48"><textual class="po-textual">Turns out </textual><quote class="po-inline e49 e49"><textual class="po-textual">XProc</textual></quote><textual class="po-textual"> was already taken, as was
                            </textual><quote class="po-inline e50 e50"><textual class="po-textual">XPipe</textual></quote><textual class="po-textual"> and some other exciting variations.</textual></para></footnote><textual class="po-textual">, is a </textual><emphasis class="po-inline e51 e51"><textual class="po-textual">blueprint</textual></emphasis><textual class="po-textual"> that lists all available processes,
                their associated pipelines, the command lines that configure these pipelines,
                including the available input files used by the pipelines and the parameters used to
                configure the inputs. It's a description of what is possible and the choices that
                need to be made before there can be a specific pipeline to run.</textual></para><para class="po-block e52 e52"><textual class="po-textual">Choosing a process limits the available pipelines to those listed inside that
                process, choosing a pipeline limits the available command lines to those defined for
                that pipeline, and so on, like this:</textual></para><figure class="po-container e53 e53"><title class="po-block e54 e54"><textual class="po-textual">ProX Logic</textual></title><mediaobject class="po-container e55 e55"><imageobject class="po-container e56 e56"><imagedata class="po-meta e57 e57" fileref="../../../vol11/graphics/Nordstrom02/Nordstrom02-002.png" width="300px"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e58 e58"><textual class="po-textual">With all choices made, the blueprint is narrowed down to an
                    </textual><emphasis class="po-inline e59 e59"><textual class="po-textual">instance</textual></emphasis><textual class="po-textual"> that describes the running of a specific pipeline,
                like so:</textual></para><figure class="po-container e60 e60"><title class="po-block e61 e61"><textual class="po-textual">A Configured Pipeline</textual></title><mediaobject class="po-container e62 e62"><imageobject class="po-container e63 e63"><imagedata class="po-meta e64 e64" fileref="../../../vol11/graphics/Nordstrom02/Nordstrom02-003.png" width="300px"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e65 e65"><textual class="po-textual">The blueprint is an abstraction layer for a generic pipeline engine, setting the
                contexts in which it can run, how, and using what. The instance describes everything
                needed to run a specific process in a specific context, which is really useful
                because the instance can be converted to a suitable scripting format, whatever that
                format may be.</textual></para><para class="po-block e66 e66"><textual class="po-textual">All that is required, then, is some processing to make the choices available to a
                user, some more processing to generate a script from the process instance, and
                finally run that script.</textual></para></section><section class="po-hcontainer e67 e67" xml:id="section_pym_nyg_wj"><title class="po-block e68 e68"><textual class="po-textual">Uses</textual></title><para class="po-block e69 e69"><textual class="po-textual">I'm implementing ProX in a CMS as I write this. The CMS will be able to output
                various formats and media using XProc pipelines, and quite a few of those pipelines
                and their input stylesheets are very configurable. Until now, it has not been
                possible to offer the end users these configuration options; even including a simple
                validation in a publishing process has been cumbersome at best.</textual></para><para class="po-block e70 e70"><textual class="po-textual">Some rather different requirements come from an eXist-based Publish on Demand
                solution used to output individualised PDF documents for thousands of users,
                filtered from a large and infinitely variable content base. The end users are not
                allowed to change a single parameter, anywhere - their whole publishing user
                interface consists of a </textual><emphasis class="po-inline e71 e71"><textual class="po-textual">Publish</textual></emphasis><textual class="po-textual"> button - but the publishing
                chain is complex, involving about a dozen pipelines that all gather content from
                various sources, convert and manipulate it, and validate the results before sending
                it on to the next step. When things go wrong, it is useful to if the publishing
                chain can be configured in various ways to spot where the problem is.</textual></para><para class="po-block e72 e72"><textual class="po-textual">ProX will offer configurable publishing processes for system administrators. It
                will also help describe what processes there are in a given context (the complete
                blueprint document) and list the specific requirements for running a specific
                pipeline.</textual></para></section></section><section class="po-hcontainer e73 e73" xml:id="section_ifr_jxg_wj"><title class="po-block e74 e74"><textual class="po-textual">ProX in Some Detail</textual></title><para class="po-block e75 e75"><textual class="po-textual">The ProX schema is not particularly complicated. basically, it describes one or more
                </textual><emphasis class="po-inline e76 e76"><textual class="po-textual">processes</textual></emphasis><textual class="po-textual"> defined in a system. Every such process may use one
            or more pipelines, and every pipeline may be configured with various command line
            options, including zero or more input files frequently grouped as
                </textual><emphasis class="po-inline e77 e77"><textual class="po-textual">packages</textual></emphasis><footnote class="po-popup e78 e78"><para class="po-block e79 e79"><textual class="po-textual">Note that the </textual><code class="po-atom e80 e80"><textual class="po-textual">packages</textual></code><textual class="po-textual"> structure in the illustration is common to
                    all processes. Packages may also be included at process level, in which case
                    they only apply to that process.</textual></para></footnote><textual class="po-textual"> (more about this below). The packages are usually XSLT stylesheets, and
            these, again, can be configured in various ways.</textual></para><figure class="po-container e81 e81"><title class="po-block e82 e82"><textual class="po-textual">Processes</textual></title><mediaobject class="po-container e83 e83"><imageobject class="po-container e84 e84"><imagedata class="po-meta e85 e85" fileref="../../../vol11/graphics/Nordstrom02/Nordstrom02-004.png" width="300px"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e86 e86"><textual class="po-textual">The total XML is a list of things that are possible. The user will need to pick one
            process, one pipeline, one set of command line options and the appropriate input
            packages to end up with a specific process.</textual></para><section class="po-hcontainer e87 e87" xml:id="section_c3v_mxg_wj"><title class="po-block e88 e88"><textual class="po-textual">Processes</textual></title><para class="po-block e89 e89"><textual class="po-textual">The </textual><code class="po-atom e90 e90"><textual class="po-textual">process</textual></code><textual class="po-textual"> structure groups related pipelines. </textual></para><figure class="po-container e91 e91" xml:id="id-process-fig"><title class="po-block e92 e92"><textual class="po-textual">A Single Process</textual></title><mediaobject class="po-container e93 e93"><imageobject class="po-container e94 e94"><imagedata class="po-meta e95 e95" fileref="../../../vol11/graphics/Nordstrom02/Nordstrom02-005.jpg" width="300px"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e96 e96"><textual class="po-textual">The grouping is intentionally somewhat arbitrary. If a process is defined as
                    </textual><quote class="po-inline e97 e97"><textual class="po-textual">Delivery</textual></quote><textual class="po-textual">, the associated pipelines might be </textual><quote class="po-inline e98 e98"><textual class="po-textual">Print</textual></quote><textual class="po-textual">,
                    </textual><quote class="po-inline e99 e99"><textual class="po-textual">Web</textual></quote><textual class="po-textual"> and </textual><quote class="po-inline e100 e100"><textual class="po-textual">ePUB</textual></quote><textual class="po-textual">, handling those outputs for delivery,
                but, depending on the situation, a process might just as easily be defined as
                    </textual><emphasis class="po-inline e101 e101"><textual class="po-textual">Print Publishing</textual></emphasis><textual class="po-textual">, leaving the online formats to another
                process, say, </textual><emphasis class="po-inline e102 e102"><textual class="po-textual">Web Publishing</textual></emphasis><textual class="po-textual">. </textual></para><note class="po-container e103 e103"><para class="po-block e104 e104"><textual class="po-textual">Note that the </textual><code class="po-atom e105 e105"><textual class="po-textual">packages</textual></code><textual class="po-textual"> are common to all pipelines in this
                    particular process.</textual></para></note></section><section class="po-hcontainer e106 e106" xml:id="section_dcm_nxg_wj"><title class="po-block e107 e107"><textual class="po-textual">Pipelines</textual></title><para class="po-block e108 e108"><textual class="po-textual">A </textual><emphasis class="po-inline e109 e109"><textual class="po-textual">pipeline</textual></emphasis><textual class="po-textual"> is an abstraction for a single XProc pipeline</textual><footnote class="po-popup e110 e110"><para class="po-block e111 e111"><textual class="po-textual">Or, conceivably, a single step.</textual></para></footnote><textual class="po-textual"> and its associated inputs and configuration options.</textual></para><figure class="po-container e112 e112" xml:id="id-pipeline-fig"><title class="po-block e113 e113"><textual class="po-textual">A Single Pipeline</textual></title><mediaobject class="po-container e114 e114"><imageobject class="po-container e115 e115"><imagedata class="po-meta e116 e116" fileref="../../../vol11/graphics/Nordstrom02/Nordstrom02-006.jpg" width="300px"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e117 e117"><textual class="po-textual">The </textual><code class="po-atom e118 e118"><textual class="po-textual">pipeline</textual></code><textual class="po-textual"> element includes a </textual><code class="po-atom e119 e119"><textual class="po-textual">script</textual></code><textual class="po-textual"> element that that
                points out the actual XProc script, defined in a package, and one or more
                    </textual><code class="po-atom e120 e120"><textual class="po-textual">cmdline</textual></code><textual class="po-textual"> groups, that is, related configuration options for the
                script. </textual></para></section><section class="po-hcontainer e121 e121" xml:id="section_qrx_nxg_wj"><title class="po-block e122 e122"><textual class="po-textual">Command Lines</textual></title><para class="po-block e123 e123"><textual class="po-textual">A </textual><emphasis class="po-inline e124 e124"><textual class="po-textual">command line</textual></emphasis><textual class="po-textual"> (</textual><code class="po-atom e125 e125"><textual class="po-textual">cmdline</textual></code><textual class="po-textual">) is a group of related
                configuration options for running the pipeline that group is associated with. A
                pipeline may include one or more command lines.</textual></para><figure class="po-container e126 e126"><title class="po-block e127 e127"><textual class="po-textual">A Single Command Line Group</textual></title><mediaobject class="po-container e128 e128"><imageobject class="po-container e129 e129"><imagedata class="po-meta e130 e130" fileref="../../../vol11/graphics/Nordstrom02/Nordstrom02-007.jpg" width="300px"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e131 e131"><textual class="po-textual">The </textual><code class="po-atom e132 e132"><textual class="po-textual">cmdline</textual></code><textual class="po-textual"> started out as the love child of various aspects of the
                XProc spec and the XProc engine of (many people's) choice, Calabash, but the current
                version attempts to be more generic in nature. It groups related configuration
                options for an associated pipeline so that once the listed choices have been made,
                the resulting </textual><code class="po-atom e133 e133"><textual class="po-textual">cmdline</textual></code><textual class="po-textual"> instance is ready to run as-is.</textual></para><para class="po-block e134 e134"><textual class="po-textual">The </textual><code class="po-atom e135 e135"><textual class="po-textual">cmdline</textual></code><textual class="po-textual"> contains two basic parts, an engine configuration with
                engine-specific options from configuration files to Saxon options, and an XProc
                pipeline semantics-specific part that is more of a reflection of the spec</textual><footnote class="po-popup e136 e136"><para class="po-block e137 e137"><textual class="po-textual">ProX is very much a work in progress, and the design currently reflects
                        the requirements of the system it is being implemented in.</textual></para></footnote><textual class="po-textual">.</textual></para><para class="po-block e138 e138"><textual class="po-textual">The pipeline semantics define inputs, outputs, options, parameters, etc, that may
                be defined either beforehand or at runtime by the system. </textual></para><para class="po-block e139 e139"><textual class="po-textual">The </textual><code class="po-atom e140 e140"><textual class="po-textual">inputs</textual></code><textual class="po-textual"> structure defines every choice available for selection
                through one or more </textual><code class="po-atom e141 e141"><textual class="po-textual">input</textual></code><textual class="po-textual"> elements.</textual></para><figure class="po-container e142 e142"><title class="po-block e143 e143"><textual class="po-textual">A Single Input</textual></title><mediaobject class="po-container e144 e144"><imageobject class="po-container e145 e145"><imagedata class="po-meta e146 e146" fileref="../../../vol11/graphics/Nordstrom02/Nordstrom02-008.jpg" width="300px"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e147 e147"><textual class="po-textual">The </textual><code class="po-atom e148 e148"><textual class="po-textual">input</textual></code><textual class="po-textual"> element defines every kind of input available to the
                pipeline. Note that not every input is made available as a choice for the user; some
                are provided at runtime by the system, most notably the XML to be processed by the pipeline</textual><footnote class="po-popup e149 e149"><para class="po-block e150 e150"><textual class="po-textual">Not every pipeline needs the XML to be defined at runtime, either. For
                        example, the system might use a pipeline to produce reports.</textual></para></footnote><textual class="po-textual">. The markup includes attributes for processing user-selectable input
                (see </textual><xref class="po-milestone e151 e151" linkend="section_h2y_zwy_wj"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).</textual></para><para class="po-block e152 e152"><textual class="po-textual">Some inputs may require parameters to be set. Typically, an XSLT stylesheet
                package will use parameters to define various properties, so these are made
                available in the </textual><code class="po-atom e153 e153"><textual class="po-textual">input</textual></code><textual class="po-textual"> structure that points out the stylesheet. They
                are also listed with their packages (see </textual><xref class="po-milestone e154 e154" linkend="section_ty5_4xg_wj"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).</textual></para></section><section class="po-hcontainer e155 e155" xml:id="section_ty5_4xg_wj"><title class="po-block e156 e156"><textual class="po-textual">Packages</textual></title><para class="po-block e157 e157"><textual class="po-textual">A </textual><emphasis class="po-inline e158 e158"><textual class="po-textual">package</textual></emphasis><textual class="po-textual"> is a group of related files needed for some aspect
                of pipeline processing. Commonly, a package is referenced as a single
                    </textual><quote class="po-inline e159 e159"><textual class="po-textual">resource</textual></quote><textual class="po-textual"> by an input port.</textual></para><figure class="po-container e160 e160"><title class="po-block e161 e161"><textual class="po-textual">A Single Package</textual></title><mediaobject class="po-container e162 e162"><imageobject class="po-container e163 e163"><imagedata class="po-meta e164 e164" fileref="../../../vol11/graphics/Nordstrom02/Nordstrom02-009.jpg" width="300px"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e165 e165"><textual class="po-textual">The main part of </textual><code class="po-atom e166 e166"><textual class="po-textual">package</textual></code><textual class="po-textual"> is a list of links (</textual><code class="po-atom e167 e167"><textual class="po-textual">locator</textual></code><textual class="po-textual">
                elements) to the files that are part of the package</textual><footnote class="po-popup e168 e168"><para class="po-block e169 e169"><textual class="po-textual">A package may include binary files.</textual></para></footnote><textual class="po-textual">, of which one or more may be identified as </textual><quote class="po-inline e170 e170"><textual class="po-textual">main</textual></quote><textual class="po-textual"> file that
                imports the other files for use. </textual></para><para class="po-block e171 e171"><textual class="po-textual">Packages are used by the process XML as an abstraction layer for an input; an
                input always points out a package rather than a single file. The system can locate
                the participating files using the package's file list when needed without having to
                look elsewhere.</textual></para><para class="po-block e172 e172"><textual class="po-textual">The XProc script is also defined in a package rather than directly as a URL in the
                    </textual><code class="po-atom e173 e173"><textual class="po-textual">script</textual></code><textual class="po-textual"> element. For a script comprising several physical files,
                this is very useful. Similarly, the XProc engine configuration file (such as the one
                used by Calabash) (and any other such files) is listed in a package so that the
                system can retrieve everything required by a specific ProX instance before the
                process runs.</textual></para><para class="po-block e174 e174"><textual class="po-textual">Last but not least, a package may list the parameters that are available for that
                package. A configurable parameter is marked as such using an attribute on
                    </textual><code class="po-atom e175 e175"><textual class="po-textual">parameter</textual></code><textual class="po-textual">, and also includes the parameter's data type</textual><footnote class="po-popup e176 e176"><para class="po-block e177 e177"><textual class="po-textual">This is necessary when generating the user interface that allows the user
                        to configure the parameter.</textual></para></footnote><textual class="po-textual">. Some parameters may be required, which is also reflected by the markup. </textual></para><note class="po-container e178 e178"><para class="po-block e179 e179"><textual class="po-textual">The parameters defined in </textual><code class="po-atom e180 e180"><textual class="po-textual">package</textual></code><textual class="po-textual"> list package options that
                        </textual><emphasis class="po-inline e181 e181"><textual class="po-textual">may</textual></emphasis><textual class="po-textual"> be user-configurable. The parameters listed with a
                    specific </textual><code class="po-atom e182 e182"><textual class="po-textual">input</textual></code><textual class="po-textual"> in a </textual><code class="po-atom e183 e183"><textual class="po-textual">cmdline</textual></code><textual class="po-textual"> are those that the system
                    administrator had actally made available for configuration.</textual></para></note></section><section class="po-hcontainer e184 e184" xml:id="section_w3l_pk5_wj"><title class="po-block e185 e185"><textual class="po-textual">Naming</textual></title><para class="po-block e186 e186"><textual class="po-textual">ProX is being implemented in a URN-based system as I write this. Every resource in
                it is identified and linked to using URNs rather than URLs - XML, obviously, but
                also images and other content, as well as stylesheets, schemas, etc. The URNs are
                unique within the system and include version and localisation information, like
                so:</textual></para><programlisting class="po-block e187 e187" xml:space="preserve"><textual class="po-textual">urn:x-cassis:cos:00093445:sv-SE:0.19</textual></programlisting><para class="po-block e188 e188"><textual class="po-textual">Every resource is version handled, so it is easy to retrieve a specific version.
                And here's the neat part: ProX packages in the system identify resources in the
                exact same way. A package is a list of URNs with with specific versions, meaning
                that a specific package always identifies specific versions of every participating
                file. Prox files in the system are identified in the same way so any package version
                is identifiable and retrievable.</textual></para></section><section class="po-hcontainer e189 e189" xml:id="section_kh4_zc5_wj"><title class="po-block e190 e190"><textual class="po-textual">Modularisation</textual></title><para class="po-block e191 e191"><textual class="po-textual">The ProX XML does not need to be a single file. Processes, pipelines, command
                lines and packages can all be modularised and reused. Note, for example, the
                    </textual><code class="po-atom e192 e192"><textual class="po-textual">inset</textual></code><textual class="po-textual"> elements in </textual><xref class="po-milestone e193 e193" linkend="id-process-fig"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> that are siblings to the </textual><code class="po-atom e194 e194"><textual class="po-textual">pipeline</textual></code><textual class="po-textual"> and
                    </textual><code class="po-atom e195 e195"><textual class="po-textual">package</textual></code><textual class="po-textual"> elements; these are intended to link to pipeline and
                package modules, respectively.</textual></para></section><section class="po-hcontainer e196 e196" xml:id="section_ncf_1d5_wj"><title class="po-block e197 e197"><textual class="po-textual">Metadata</textual></title><para class="po-block e198 e198"><textual class="po-textual">Every major ProX component (</textual><code class="po-atom e199 e199"><textual class="po-textual">process</textual></code><textual class="po-textual">, </textual><code class="po-atom e200 e200"><textual class="po-textual">pipeline</textual></code><textual class="po-textual">,
                    </textual><code class="po-atom e201 e201"><textual class="po-textual">cmdline</textual></code><textual class="po-textual">, </textual><code class="po-atom e202 e202"><textual class="po-textual">package</textual></code><textual class="po-textual">) includes metadata used to identify
                the component in a GUI, but also to include context-sensitive help in that
                GUI.</textual></para></section><section class="po-hcontainer e203 e203" xml:id="section_x11_mjz_wj"><title class="po-block e204 e204"><textual class="po-textual">Writing ProX</textual></title><para class="po-block e205 e205"><textual class="po-textual">It is, of course, possible to write ProX XML in any XML editor. For my current
                project, I've added an XMetaL-based environment that includes some styling but
                otherwise uses the same features as the standard authoring environment in the
                system, with an integration to the database with check-in/out and versioning,
                URN-based linking, etc. </textual></para><figure class="po-container e206 e206"><title class="po-block e207 e207"><textual class="po-textual">Adding A Package Locator</textual></title><mediaobject class="po-container e208 e208"><imageobject class="po-container e209 e209"><imagedata class="po-meta e210 e210" fileref="../../../vol11/graphics/Nordstrom02/Nordstrom02-010.jpg" width="300px"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e211 e211"><textual class="po-textual">Here, authoring ProX is easy. Packages are compiled by including XLinks to the
                modules and then linked to from the elements that need them, using already
                implemented XLink- and URN-based linking functionality.</textual></para></section></section><section class="po-hcontainer e212 e212" xml:id="section_hg4_rxg_wj"><title class="po-block e213 e213"><textual class="po-textual">The ProX User Interface</textual></title><para class="po-block e214 e214"><textual class="po-textual">The ProX blueprint was designed to be visualised in a GUI so the right process and
            pipeline can be selected and configured</textual><footnote class="po-popup e215 e215"><para class="po-block e216 e216"><textual class="po-textual">How much of the process is configurable is decided by the author of the
                    blueprint.</textual></para></footnote><textual class="po-textual">. Conceivably, the system might allow for several different versions of the
            basic blueprint, each for its intended user. A power user might have several
            configuration options available to her while the casual user might only be allowed to
            choose between the basic processes, leaving the details to the system.</textual></para><para class="po-block e217 e217"><textual class="po-textual">The basic selection procedure is largely sequential. Here's the first concept
            GUI:</textual></para><figure class="po-container e218 e218" xml:id="id-orig-concept-gui"><title class="po-block e219 e219"><textual class="po-textual">GUI Concept</textual></title><mediaobject class="po-container e220 e220"><imageobject class="po-container e221 e221"><imagedata class="po-meta e222 e222" fileref="../../../vol11/graphics/Nordstrom02/Nordstrom02-011.png" width="300px"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e223 e223"><textual class="po-textual">The pipeline, command line and package steps may all include additional configuration,
            but the principle should be clear.</textual></para><section class="po-hcontainer e224 e224" xml:id="section_qzm_yn5_wj"><title class="po-block e225 e225"><textual class="po-textual">Generating the GUI, Pt 1</textual></title><para class="po-block e226 e226"><textual class="po-textual">There's an obvious candidate for creating a dynamic user interface based on XML
                input: W3C's </textual><emphasis class="po-inline e227 e227"><textual class="po-textual">XForms</textual></emphasis><textual class="po-textual"> specification (</textual><xref class="po-milestone e228 e228" linkend="id-xforms-spec"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">). XForms
                has a somewhat bad reputation (see, for example, </textual><xref class="po-milestone e229 e229" linkend="id-mvc-xforms-eric-vdl"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">,
                Eric van der Vlist's terrific paper on [some of] the problems and some suggested
                solutions ), with some even claiming it to be dead for all practical purposes, but
                it is one of the few choices available for the purpose.</textual></para><para class="po-block e230 e230"><textual class="po-textual">My first attempt at creating a ProX user interface used an XSLT stylesheet to
                generate a </textual><emphasis class="po-inline e231 e231"><textual class="po-textual">FreeMind</textual></emphasis><textual class="po-textual"> mind map:</textual></para><figure class="po-container e232 e232"><title class="po-block e233 e233"><textual class="po-textual">Generated Mind Map</textual></title><mediaobject class="po-container e234 e234"><imageobject class="po-container e235 e235"><imagedata class="po-meta e236 e236" fileref="../../../vol11/graphics/Nordstrom02/Nordstrom02-012.png" width="300px"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e237 e237"><textual class="po-textual">The FreeMind mind map format is XML, and thus easy to grasp and convert to (</textual><xref class="po-milestone e238 e238" linkend="id-freemind-xsd"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">). The
                idea here is to insert FreeMind marker symbols to the selected options (nodes) and
                then convert the resulting FreeMind XML back to ProX, only including the marked
                nodes. </textual></para><para class="po-block e239 e239"><textual class="po-textual">Of course, this approach is not without its flaws. Nothing stops you from
                inserting markers </textual><emphasis class="po-inline e240 e240"><textual class="po-textual">everywhere</textual></emphasis><textual class="po-textual">, which would result in useless
                ProX markup. We need something that allows exactly what the markup allows, so while
                a tree representation is useful and intuitive, it is only useful if a node can be
                easily selected and its unselected siblings locked (including a clear visualisation
                of the changed state).</textual></para><para class="po-block e241 e241"><textual class="po-textual">The FreeMind format may or may not allow this, but I chose instead to have a
                closer look at XForms.</textual></para></section><section class="po-hcontainer e242 e242" xml:id="section_sqy_ms5_wj"><title class="po-block e243 e243"><textual class="po-textual">Design Choices</textual></title><para class="po-block e244 e244"><textual class="po-textual">The process abstraction reflects a pipeline configuration from a process and
                systems perspective, and the resulting workflow for a user in the above user
                interfaces mostly reflects this approach. This is not necessarily wrong but the
                user's view regarding processing her content might actually be very different. </textual></para><section class="po-hcontainer e245 e245" xml:id="section_e5s_zzf_xj"><title class="po-block e246 e246"><textual class="po-textual">The User's POV</textual></title><para class="po-block e247 e247"><textual class="po-textual">The original idea described a workflow like this:</textual><orderedlist class="po-table e248 e248"><listitem class="po-container e249 e249"><para class="po-block e250 e250"><textual class="po-textual">Select process</textual></para></listitem><listitem class="po-container e251 e251"><para class="po-block e252 e252"><textual class="po-textual">Select pipeline</textual></para></listitem><listitem class="po-container e253 e253"><para class="po-block e254 e254"><textual class="po-textual">Select the pipeline's command line</textual></para></listitem><listitem class="po-container e255 e255"><para class="po-block e256 e256"><textual class="po-textual">Select among the stylesheet packages given as alternatives in the
                                command line</textual></para></listitem></orderedlist><textual class="po-textual">
                </textual></para><para class="po-block e257 e257"><textual class="po-textual">This is really just a formalisation of </textual><emphasis class="po-inline e258 e258"><textual class="po-textual">one</textual></emphasis><textual class="po-textual"> way of
                    expressing a pipeline process. Only the last two (command line and stylesheet)
                    included user-configurable options and the basic idea was to have them show up
                    in a subform only when that step was selected.</textual></para><para class="po-block e259 e259"><textual class="po-textual">The user probably doesn't care about the difference between configuring a
                    pipeline and configuring a stylesheet, however. The objective is to run a
                    process without distractions to the extent possible so better is probably:</textual><orderedlist class="po-table e260 e260"><listitem class="po-container e261 e261"><para class="po-block e262 e262"><textual class="po-textual">Select process</textual></para></listitem><listitem class="po-container e263 e263"><para class="po-block e264 e264"><textual class="po-textual">Select pipeline</textual></para></listitem><listitem class="po-container e265 e265"><para class="po-block e266 e266"><textual class="po-textual">Select and configure stylesheet (or rather, process output)</textual></para></listitem></orderedlist><textual class="po-textual">
                </textual></para><para class="po-block e267 e267"><textual class="po-textual">And depending on the situation, this might be even more appropriate:</textual><orderedlist class="po-table e268 e268"><listitem class="po-container e269 e269"><para class="po-block e270 e270"><textual class="po-textual">Select process</textual></para></listitem><listitem class="po-container e271 e271"><para class="po-block e272 e272"><textual class="po-textual">Select and configure output</textual></para></listitem></orderedlist><textual class="po-textual">
                </textual></para><para class="po-block e273 e273"><textual class="po-textual">This is perhaps too simplistic. While the user doesn't necessarily care about
                    the difference between a process and a pipeline, the concept of a process
                    surrounding the pipeline was introduced because the processes might be so
                    different from each other that the abstraction becomes meaningful. The original
                    concept (see </textual><xref class="po-milestone e274 e274" linkend="id-orig-concept-gui"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) lists </textual><emphasis class="po-inline e275 e275"><textual class="po-textual">Delivery</textual></emphasis><textual class="po-textual">,
                        </textual><emphasis class="po-inline e276 e276"><textual class="po-textual">Reviews</textual></emphasis><textual class="po-textual">, </textual><emphasis class="po-inline e277 e277"><textual class="po-textual">Validation</textual></emphasis><textual class="po-textual"> and
                        </textual><emphasis class="po-inline e278 e278"><textual class="po-textual">Reports</textual></emphasis><textual class="po-textual"> as examples of different processes, the idea
                    being to reflect different work flows with some very different outputs as
                    expected results.</textual></para><para class="po-block e279 e279"><textual class="po-textual">I'd argue that the distinction is meaningful.</textual></para><para class="po-block e280 e280"><textual class="po-textual">But do users need to know or care about the difference between the command
                    line and stylesheet selections? Here, the answer is probably no. The pipeline
                    does something in the defined workflow while the command line and stylesheet
                    options configure the output. The difference between configuring the pipeline
                    and the stylesheet is a subtle one; unless you are an admin, you probably won't
                    care. Better (than the the concept GUI in </textual><xref class="po-milestone e281 e281" linkend="id-orig-concept-gui"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">)
                    is something like this:</textual></para><figure class="po-container e282 e282" xml:id="figure_dlj_rmj_xj"><title class="po-block e283 e283"><textual class="po-textual">Pipeline, Cmdline Configuration Mixed</textual></title><mediaobject class="po-container e284 e284"><imageobject class="po-container e285 e285"><imagedata class="po-meta e286 e286" fileref="../../../vol11/graphics/Nordstrom02/Nordstrom02-013.jpg" width="300px"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e287 e287"><textual class="po-textual">To the end user, this XForm is about configuring </textual><emphasis class="po-inline e288 e288"><textual class="po-textual">output</textual></emphasis><textual class="po-textual">,
                    not what's behind the scenes. The underlying XML does not change; with the GUI
                    is adapted for different user categories, the same XML can provide an admin with
                    a different UI. The difference happens depending on how the initial ProX is
                    processed to generate a form.</textual></para><para class="po-block e289 e289"><textual class="po-textual">The </textual><quote class="po-inline e290 e290"><textual class="po-textual">right</textual></quote><textual class="po-textual"> answer, then, is that these are all possible, simply
                    by preprocessing ProX and by writing appropriate XForms.</textual></para></section><section class="po-hcontainer e291 e291" xml:id="section_n4d_s1g_xj"><title class="po-block e292 e292"><textual class="po-textual">The Admin's POV</textual></title><para class="po-block e293 e293"><textual class="po-textual">The underlying XML is in no way changed when simplifying the selection process
                    for a user. What changes is the form, and possibly some preprocessing. The above
                    suggests a simple GUI, with most of the configuration already made. All the
                    admin needs to do is to write the ProX blueprint with
                        </textual><emphasis class="po-inline e294 e294"><textual class="po-textual">complete</textual></emphasis><textual class="po-textual"> command lines, with all of the choices split
                    into separate command line groups as listed in the GUI. </textual></para><para class="po-block e295 e295"><textual class="po-textual">The GUI shown in </textual><xref class="po-milestone e296 e296" linkend="figure_dlj_rmj_xj"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> is generated from this example:</textual></para><programlisting class="po-block e297 e297" xml:space="preserve"><textual class="po-textual">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?xml-model href="file:/home/ari/mystuff/SGML/DTD/Process-XML/RelaxNG/processes.rnc" type="application/relax-ng-compact-syntax"?&gt;
&lt;processes 
   id="processes-2013-4-9-16-53-8-39562387-" 
   xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
   
   &lt;!-- Print Publishing Process --&gt;
   &lt;process id="id-pdf-process"&gt;
      &lt;metadata id="metadata-2013-4-9-16-53-8-39562387-"&gt;
         &lt;title id="title-2013-4-9-16-53-8-39562387-"&gt;Print Publishing&lt;/title&gt;
         &lt;description id="description-2013-4-9-16-53-8-39562387-"&gt;
            &lt;p id="p-2013-4-9-16-53-8-39562387-"&gt;Print publishing for COSML documents&lt;/p&gt;
         &lt;/description&gt;
      &lt;/metadata&gt;
      &lt;pipelines id="pipelines-2013-4-9-16-53-8-39562387-"&gt;
         
         &lt;!-- PDF Pipeline --&gt;
         &lt;pipeline id="id-pipeline-pdf-1"&gt;
            &lt;metadata id="metadata-2013-4-9-16-53-8-39562387-1"&gt;
               &lt;title id="title-2013-4-9-16-53-8-39562387-1"&gt;Publish PDF&lt;/title&gt;
               &lt;description id="description-2013-4-9-16-53-8-39562387-1"&gt;
                  &lt;p id="p-2013-4-9-16-53-8-39562387-1"&gt;Normalizes, validates and converts a COSML document to PDF&lt;/p&gt;
               &lt;/description&gt;
            &lt;/metadata&gt;
            &lt;script xmlns:xlink="http://www.w3.org/1999/xlink" type="pkg"
               id="script-2013-4-9-16-53-8-39562387-"
               xlink:href="urn:x-cassis:r1:cos:00002712:sv-SE:0.1#id-xproc-pdf"
               xlink:title=" XProc Pipeline for Normalize, Validate and PDF Normalizes, validates and publishes in PDF a COSML document "/&gt;
            &lt;cmdlines id="cmdlines-2013-4-9-16-53-8-39562387-"&gt;
               
               &lt;!-- COSML Internal XSL --&gt;
               &lt;cmdline id="id-cmdline-cos-internal-pdf"&gt;
                  &lt;metadata id="metadata-2013-4-9-16-53-8-39562387-2"&gt;
                     &lt;title id="title-2013-4-9-16-53-8-39562387-2"&gt;COS Internal Template&lt;/title&gt;
                     &lt;description id="description-2013-4-9-16-53-8-39562387-2"&gt;
                        &lt;p id="p-2013-4-9-16-53-8-39562387-2"&gt;Configures the pipeline for the "COS Internal" template&lt;/p&gt;
                     &lt;/description&gt;
                  &lt;/metadata&gt;
                  &lt;engine-config&gt;
                     &lt;config type="pkg" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#id-conf-calabash"/&gt;
                  &lt;/engine-config&gt;
                  &lt;inputs id="inputs-2013-4-9-16-53-8-39562387-"&gt;
                     &lt;input choice="no" id="input-2013-4-9-16-53-8-39562387-"&gt;
                        &lt;port id="port-2013-4-9-16-53-8-39562387-"&gt;document&lt;/port&gt;
                        &lt;value 
                           xmlns:xlink="http://www.w3.org/1999/xlink" 
                           type="external"
                           xlink:type="simple" 
                           id="value-2013-4-9-16-53-8-39562387-"
                           mimetype="application/xml"&gt;DOCUMENT-PLACEHOLDER&lt;/value&gt;
                     &lt;/input&gt;
                     &lt;input choice="no" id="input-2013-4-9-16-53-8-39562387-1"&gt;
                        &lt;port id="port-2013-4-9-16-53-8-39562387-1"&gt;stylesheet&lt;/port&gt;
                        &lt;value 
                           xmlns:xlink="http://www.w3.org/1999/xlink" 
                           type="pkg"
                           xlink:href="urn:x-cassis:r1:cos:00002712:sv-SE:0.1#id-xslfo-cosml"
                           xlink:type="simple" id="value-2013-4-9-16-53-8-39562387-1"
                           xlink:title=" XSL-FO Package for COSML PDF Converts COSML documents to XSL-FO format for COS PDF layout "/&gt;
                        &lt;params id="params-2013-4-9-16-53-8-39562387-"&gt;
                           &lt;!-- Index generation --&gt;
                           &lt;param 
                              choice="yes" 
                              ctype="boolean" 
                              id="param-2013-4-9-16-53-8-39562387-"&gt;
                              &lt;port id="port-2013-4-9-16-53-8-39562387-2"&gt;xslt-params&lt;/port&gt;
                              &lt;name id="name-2013-4-9-16-53-8-39562387-"&gt;generate.index&lt;/name&gt;
                              &lt;value 
                                 xmlns:xlink="http://www.w3.org/1999/xlink" 
                                 type="string"
                                 xlink:type="simple" 
                                 id="value-2013-4-9-16-53-8-39562387-2"&gt;false&lt;/value&gt;
                           &lt;/param&gt;
                           &lt;!-- XEP Extensions --&gt;
                           &lt;param 
                              choice="no" 
                              id="param-2013-4-9-16-53-8-39562387-1"&gt;
                              &lt;port id="port-2013-4-9-16-53-8-39562387-3"&gt;xslt-params&lt;/port&gt;
                              &lt;name id="name-2013-4-9-16-53-8-39562387-1"&gt;xep.extensions&lt;/name&gt;
                              &lt;value xmlns:xlink="http://www.w3.org/1999/xlink" type="string"
                                 xlink:type="simple" id="value-2013-4-9-16-53-8-39562387-3"
                                 &gt;0&lt;/value&gt;
                           &lt;/param&gt;
                           &lt;!-- XSL-FO Bookmark Generation --&gt;
                           &lt;param 
                              choice="yes" 
                              ctype="boolean"
                              id="param-2013-4-9-16-53-8-39562387-2"&gt;
                              &lt;port id="port-2013-4-9-16-53-8-39562387-4"&gt;xslt-params&lt;/port&gt;
                              &lt;name id="name-2013-4-9-16-53-8-39562387-2"&gt;xslfo.bookmarks&lt;/name&gt;
                              &lt;value 
                                 xmlns:xlink="http://www.w3.org/1999/xlink" 
                                 type="string"
                                 xlink:type="simple" id="value-2013-4-9-16-53-8-39562387-4"&gt;true&lt;/value&gt;
                           &lt;/param&gt;
                           &lt;!-- TOC Generation --&gt;
                           &lt;param 
                              choice="yes" 
                              ctype="boolean"
                              id="param-2013-4-9-16-53-8-39514778-2"&gt;
                              &lt;port id="port-2013-4-9-16-53-8-9653444-4"&gt;xslt-params&lt;/port&gt;
                              &lt;name id="name-2013-4-9-16-53-8-1928364-2"&gt;create.toc&lt;/name&gt;
                              &lt;value 
                                 xmlns:xlink="http://www.w3.org/1999/xlink" 
                                 type="string"
                                 xlink:type="simple" 
                                 id="value-2013-7-10-16-53-8-764625737-3"&gt;true&lt;/value&gt;
                           &lt;/param&gt;
                           &lt;!-- TOC Depth --&gt;
                           &lt;param 
                              choice="yes" 
                              ctype="list1"
                              id="param-2013-4-9-16-53-8-2385485-2"&gt;
                              &lt;port id="port-2013-7-10-16-34-8-9283444-4"&gt;xslt-params&lt;/port&gt;
                              &lt;name id="name-2013-7-10-16-50-3-1946564-2"&gt;toc.depth&lt;/name&gt;
                              &lt;value 
                                 xmlns:xlink="http://www.w3.org/1999/xlink" 
                                 type="string"
                                 xlink:type="simple" 
                                 id="value-2013-7-10-16-53-8-764625737-4"&gt;2&lt;/value&gt;
                              &lt;value
                                 xmlns:xlink="http://www.w3.org/1999/xlink"
                                 id="value-13-07-10-12345-1" 
                                 type="string"&gt;1&lt;/value&gt;
                              &lt;value
                                 xmlns:xlink="http://www.w3.org/1999/xlink"
                                 id="value-13-07-10-12345-2" 
                                 type="string"&gt;3&lt;/value&gt;
                           &lt;/param&gt;
                        &lt;/params&gt;
                     &lt;/input&gt;
                     &lt;input choice="no" id="input-2013-4-9-16-53-8-39562387-2"&gt;
                        &lt;port id="port-2013-4-9-16-53-8-39562387-5"&gt;stylesheet-norm&lt;/port&gt;
                        &lt;value 
                           xmlns:xlink="http://www.w3.org/1999/xlink" 
                           type="pkg"
                           xlink:href="urn:x-cassis:r1:cos:00002712:sv-SE:0.1#id-normalize"
                           xlink:type="simple" id="value-2013-4-9-16-53-8-39562387-5"
                           xlink:title=" Normalize XSLT Stylesheet for applics filtering and module normalization for COSML documents "/&gt;
                     &lt;/input&gt;
                  &lt;/inputs&gt;
                  &lt;options id="options-2013-4-9-16-53-8-39562387-"&gt;
                     &lt;option choice="no" id="option-2013-4-9-16-53-8-39562387-"&gt;
                        &lt;name id="name-2013-4-9-16-53-8-39562387-3"&gt;pdf&lt;/name&gt;
                        &lt;value 
                           xmlns:xlink="http://www.w3.org/1999/xlink" 
                           type="external"
                           xlink:type="simple" 
                           id="value-2013-4-9-16-53-8-39562387-6"&gt;PDF-PLACEHOLDER.pdf&lt;/value&gt;
                     &lt;/option&gt;
                  &lt;/options&gt;
               &lt;/cmdline&gt;
               
               &lt;!-- COSML Formal XSL --&gt;
               &lt;cmdline id="id-cmdline-cos-formal-pdf"&gt;
                  &lt;metadata id="metadata-2013-4-9-16-53-8-39562387-3"&gt;
                     &lt;title id="title-2013-4-9-16-53-8-39562387-3"&gt;COS Formal Template&lt;/title&gt;
                     &lt;description id="description-2013-4-9-16-53-8-39562387-3"&gt;
                        &lt;p id="p-2013-4-9-16-53-8-39562387-3"&gt;Configures the pipeline for the "COS Formal" template&lt;/p&gt;
                     &lt;/description&gt;
                  &lt;/metadata&gt;
                  &lt;engine-config&gt;
                     &lt;config type="pkg" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#id-conf-calabash"/&gt;
                  &lt;/engine-config&gt;
                  &lt;inputs id="inputs-2013-4-9-16-53-8-39562387-1"&gt;
                     &lt;input choice="no" id="input-2013-4-9-16-53-8-39562387-3"&gt;
                        &lt;port id="port-2013-4-9-16-53-8-39562387-6"&gt;document&lt;/port&gt;
                        &lt;value 
                           xmlns:xlink="http://www.w3.org/1999/xlink" 
                           type="external"
                           xlink:type="simple" 
                           id="value-2013-4-9-16-53-8-39562387-7"&gt;DOCUMENT-PLACEHOLDER&lt;/value&gt;
                     &lt;/input&gt;
                     &lt;input choice="no" id="input-2013-4-9-16-53-8-39562387-4"&gt;
                        &lt;port id="port-2013-4-9-16-53-8-39562387-7"&gt;stylesheet&lt;/port&gt;
                        &lt;value 
                           xmlns:xlink="http://www.w3.org/1999/xlink" 
                           type="pkg"
                           xlink:href="package-xslfo-cosml.xml#id-xslfo-cosml" 
                           xlink:type="simple"
                           id="value-2013-4-9-16-53-8-39562387-8"/&gt;
                     &lt;/input&gt;
                     &lt;input choice="no" id="input-2013-4-9-16-53-8-39562387-5"&gt;
                        &lt;port id="port-2013-4-9-16-53-8-39562387-8"&gt;stylesheet-norm&lt;/port&gt;
                        &lt;value 
                           xmlns:xlink="http://www.w3.org/1999/xlink" type="pkg"
                           xlink:href="package-normalize.xml#id-normalize" 
                           xlink:type="simple"
                           id="value-2013-4-9-16-53-8-39562387-9"/&gt;
                     &lt;/input&gt;
                  &lt;/inputs&gt;
                  &lt;options id="options-2013-4-9-16-53-8-39562387-1"&gt;
                     &lt;option choice="no" id="option-2013-4-9-16-53-8-39562387-1"&gt;
                        &lt;name id="name-2013-4-9-16-53-8-39562387-4"&gt;pdf&lt;/name&gt;
                        &lt;value 
                           xmlns:xlink="http://www.w3.org/1999/xlink" 
                           type="external"
                           xlink:type="simple" 
                           id="value-2013-4-9-16-53-8-39562387-10"
                           mimetype="application/pdf"&gt;PDF-PLACEHOLDER.pdf&lt;/value&gt;
                     &lt;/option&gt;
                  &lt;/options&gt;
               &lt;/cmdline&gt;
            &lt;/cmdlines&gt;
         &lt;/pipeline&gt;
      &lt;/pipelines&gt;
      
      &lt;!-- Packages for Print --&gt;
      &lt;packages 
         xml:base="file:///e:/SGML/DTD/Cassis/Process-XML/"
         id="packages-2013-4-9-16-53-8-39562387-"&gt;
         
         &lt;!-- XProc Normalize, Validate, XSLFO Pipeline Package --&gt;
         &lt;package id="id-xproc-pdf"&gt;
            &lt;metadata id="metadata-2013-4-9-16-53-8-39562387-4"&gt;
               &lt;title id="title-2013-4-9-16-53-8-39562387-4"&gt;XProc Pipeline for Normalize, Validate and PDF&lt;/title&gt;
               &lt;description id="description-2013-4-9-16-53-8-39562387-4"&gt;
                  &lt;p id="p-2013-4-9-16-53-8-39562387-4"&gt;Normalizes, validates and publishes in PDF a COSML document&lt;/p&gt;
               &lt;/description&gt;
            &lt;/metadata&gt;
            &lt;!-- publish-cosml-pdf.xpl --&gt;
            &lt;locator 
               type="main" 
               xlink:href="urn:x-cassis:r1:cos:00002715:sv-SE:0.1"
               xmlns:xlink="http://www.w3.org/1999/xlink" 
               id="locator-2013-4-10-10-32-24-12830403-" /&gt;
         &lt;/package&gt;
         
         
         &lt;!-- COSML Internal XSL-FO Package --&gt;
         &lt;package id="id-xslfo-cosml"&gt;
            &lt;metadata id="metadata-2013-4-9-16-53-8-39562387-5"&gt;
               &lt;title id="title-2013-4-9-16-53-8-39562387-5"&gt;XSL-FO Package for COSML PDF&lt;/title&gt;
               &lt;description id="description-2013-4-9-16-53-8-39562387-5"&gt;
                  &lt;p id="p-2013-4-9-16-53-8-39562387-5"&gt;Converts COSML documents to XSL-FO format
                     for COS PDF layout&lt;/p&gt;
               &lt;/description&gt;
            &lt;/metadata&gt;
            
            &lt;!-- Stylesheet parameters --&gt;
            &lt;params id="params-2013-4-9-16-53-8-39562387-1"&gt;
               &lt;!-- Index generation --&gt;
               &lt;param id="param-2013-4-9-16-53-8-39562387-3"&gt;
                  &lt;port id="port-2013-4-9-16-53-8-39562387-9"&gt;xslt-params&lt;/port&gt;
                  &lt;name id="name-2013-4-9-16-53-8-39562387-5"&gt;generate.index&lt;/name&gt;
                  &lt;value type="string" id="value-2013-4-9-16-53-8-39562387-11"&gt;0&lt;/value&gt;
               &lt;/param&gt;
               &lt;!-- XEP Extensions --&gt;
               &lt;param id="param-2013-4-9-16-53-8-39562387-4"&gt;
                  &lt;port id="port-2013-4-9-16-53-8-39562387-10"&gt;xslt-params&lt;/port&gt;
                  &lt;name id="name-2013-4-9-16-53-8-39562387-6"&gt;xep.extensions&lt;/name&gt;
                  &lt;value type="string" id="value-2013-4-9-16-53-8-39562387-12"&gt;0&lt;/value&gt;
               &lt;/param&gt;
               &lt;!-- XSL-FO Bookmark Generation --&gt;
               &lt;param id="param-2013-4-9-16-53-8-39562387-5"&gt;
                  &lt;port id="port-2013-4-9-16-53-8-39562387-11"&gt;xslt-params&lt;/port&gt;
                  &lt;name id="name-2013-4-9-16-53-8-39562387-7"&gt;xslfo.bookmarks&lt;/name&gt;
                  &lt;value type="string" id="value-2013-4-9-16-53-8-39562387-13"&gt;1&lt;/value&gt;
               &lt;/param&gt;
            &lt;/params&gt;
            
            &lt;!-- XSLT --&gt;
            &lt;locator xmlns:xlink="http://www.w3.org/1999/xlink"
               xlink:href="urn:x-cassis:r1:cos:00000232:sv-SE:0.6" 
               xlink:title="COS Internal XSLT"
               type="main" id="locator-2013-4-9-16-53-8-39562387-1"/&gt;
            &lt;locator xmlns:xlink="http://www.w3.org/1999/xlink"
               xlink:href="urn:x-cassis:r1:cos:00000074:sv-SE:0.11"
               id="locator-2013-4-9-16-53-8-39562387-2"/&gt;
            &lt;locator xmlns:xlink="http://www.w3.org/1999/xlink"
               xlink:href="urn:x-cassis:r1:cos:00000059:sv-SE:0.2"
               id="locator-2013-4-9-16-53-8-39562387-3"/&gt;
            &lt;locator xmlns:xlink="http://www.w3.org/1999/xlink"
               xlink:href="urn:x-cassis:r1:cos:00000070:sv-SE:0.15"
               id="locator-2013-4-9-16-53-8-39562387-4" 
               xlink:title="Layout"/&gt;
            &lt;locator xmlns:xlink="http://www.w3.org/1999/xlink"
               xlink:href="urn:x-cassis:r1:cos:00000876:sv-SE:0.2"
               id="locator-2013-4-9-16-53-8-39562387-5" 
               xlink:title="bookmarks.xsl"/&gt;
            &lt;locator xmlns:xlink="http://www.w3.org/1999/xlink"
               xlink:href="urn:x-cassis:r1:cos:00000075:sv-SE:0.17"
               id="locator-2013-4-9-16-53-8-39562387-6"/&gt;
            &lt;locator xmlns:xlink="http://www.w3.org/1999/xlink"
               xlink:href="urn:x-cassis:r1:cos:00000072:sv-SE:0.10"
               id="locator-2013-4-9-16-53-8-39562387-7" 
               xlink:title="meta-data.xsl"/&gt;
            &lt;locator xmlns:xlink="http://www.w3.org/1999/xlink"
               xlink:href="urn:x-cassis:r1:cos:00000078:sv-SE:0.9"
               id="locator-2013-4-9-16-53-8-39562387-8" 
               xlink:title="TOC"/&gt;
            &lt;locator xmlns:xlink="http://www.w3.org/1999/xlink"
               xlink:href="urn:x-cassis:r1:cos:00000062:sv-SE:0.9"
               id="locator-2013-4-9-16-53-8-39562387-9"/&gt;
            &lt;locator xmlns:xlink="http://www.w3.org/1999/xlink"
               xlink:href="urn:x-cassis:r1:cos:00000233:sv-SE:0.8"
               id="locator-2013-4-9-16-53-8-39562387-10"/&gt;
            &lt;locator xmlns:xlink="http://www.w3.org/1999/xlink"
               xlink:href="urn:x-cassis:r1:cos:00000061:sv-SE:0.29"
               id="locator-2013-4-9-16-53-8-39562387-11"/&gt;
            &lt;locator xmlns:xlink="http://www.w3.org/1999/xlink"
               xlink:href="urn:x-cassis:r1:cos:00000065:sv-SE:0.6"
               id="locator-2013-4-9-16-53-8-39562387-12"/&gt;
            &lt;locator xmlns:xlink="http://www.w3.org/1999/xlink"
               xlink:href="urn:x-cassis:r1:cos:00000071:sv-SE:0.6"
               id="locator-2013-4-9-16-53-8-39562387-13"/&gt;
            &lt;locator xmlns:xlink="http://www.w3.org/1999/xlink"
               xlink:href="urn:x-cassis:r1:cos:00000077:sv-SE:0.6"
               id="locator-2013-4-9-16-53-8-39562387-14"/&gt;
            &lt;locator xmlns:xlink="http://www.w3.org/1999/xlink"
               xlink:href="urn:x-cassis:r1:cos:00000079:sv-SE:0.7"
               id="locator-2013-4-9-16-53-8-39562387-15"/&gt;
            &lt;locator xmlns:xlink="http://www.w3.org/1999/xlink"
               xlink:href="urn:x-cassis:r1:cos:00000060:sv-SE:0.7"
               id="locator-2013-4-9-16-53-8-39562387-16"/&gt;
            &lt;locator xmlns:xlink="http://www.w3.org/1999/xlink"
               xlink:href="urn:x-cassis:r1:cos:00000064:sv-SE:0.8"
               id="locator-2013-4-9-16-53-8-39562387-17"/&gt;
            &lt;locator xmlns:xlink="http://www.w3.org/1999/xlink"
               xlink:href="urn:x-cassis:r1:cos:00000066:sv-SE:0.2"
               id="locator-2013-4-9-16-53-8-39562387-18"/&gt;
            &lt;locator xmlns:xlink="http://www.w3.org/1999/xlink"
               xlink:href="urn:x-cassis:r1:cos:00000069:sv-SE:0.3"
               id="locator-2013-4-9-16-53-8-39562387-19"/&gt;
            &lt;locator xmlns:xlink="http://www.w3.org/1999/xlink"
               xlink:href="urn:x-cassis:r1:cos:00000063:sv-SE:0.3"
               id="locator-2013-4-9-16-53-8-39562387-20"/&gt;
            &lt;locator xmlns:xlink="http://www.w3.org/1999/xlink"
               xlink:href="urn:x-cassis:r1:cos:00000785:sv-SE:0.6"
               id="locator-2013-4-9-16-53-8-39562387-21"/&gt;
            &lt;locator xmlns:xlink="http://www.w3.org/1999/xlink"
               xlink:href="urn:x-cassis:r1:cos:00000076:sv-SE:0.10" type="aux" xlink:title="Strings"
               id="locator-2013-4-9-16-53-8-39562387-22"/&gt;
            &lt;locator xmlns:xlink="http://www.w3.org/1999/xlink"
               xlink:href="urn:x-cassis:r1:cos:00000230:sv-SE:0.1" type="aux"
               id="locator-2013-4-9-16-53-8-39562387-23"/&gt;
            &lt;locator xmlns:xlink="http://www.w3.org/1999/xlink"
               xlink:href="urn:x-cassis:r1:cos:00000426:sv-SE:0.1" type="aux"
               id="locator-2013-4-9-16-53-8-39562387-24" xlink:title="tux.jpg"/&gt;
         &lt;/package&gt;
      &lt;/packages&gt;
   &lt;/process&gt;
   
   &lt;!-- Wep PublishingProcess --&gt;
   &lt;process id="id-web-process"&gt;
      &lt;metadata id="metadata-2013-4-9-16-53-8-39562387-6"&gt;
         &lt;title id="title-2013-4-9-16-53-8-39562387-6"&gt;Web Publishing&lt;/title&gt;
         &lt;description id="description-2013-4-9-16-53-8-39562387-6"&gt;
            &lt;p id="p-2013-4-9-16-53-8-39562387-6"&gt;Publishes COSML documents for web output&lt;/p&gt;
         &lt;/description&gt;
      &lt;/metadata&gt;
      
      &lt;pipelines id="pipelines-2013-4-9-16-53-8-39562387-1"&gt;
         
         &lt;!-- Pipeline for HTML --&gt;
         &lt;pipeline id="id-pipeline-web-1"&gt;
            &lt;metadata id="metadata-2013-4-9-16-53-8-39562387-7"&gt;
               &lt;title id="title-2013-4-9-16-53-8-39562387-7"&gt;Publish HTML&lt;/title&gt;
               &lt;description id="description-2013-4-9-16-53-8-39562387-7"&gt;
                  &lt;p id="p-2013-4-9-16-53-8-39562387-7"&gt;Normalizes, validates and publishes COSML documents as single-file HTML&lt;/p&gt;
               &lt;/description&gt;
            &lt;/metadata&gt;
            &lt;script id="script-2013-4-9-16-53-8-39562387-1"
               xlink:href="urn:x-cassis:r1:cos:00002712:sv-SE:0.6#package-2013-5-19-11-12-49-71312191-1"
               xlink:title="XProc COSML2XHTMLNormalises, validates and converts COSML to XHTML."
               type="pkg"/&gt;
            &lt;cmdlines id="cmdlines-2013-4-9-16-53-8-39562387-1"&gt;
               
               &lt;!-- Single-file HTML Config --&gt;
               &lt;cmdline id="id-cmdline-single-file-HTML-1"&gt;
                  &lt;metadata id="metadata-2013-4-9-16-53-8-39562387-8"&gt;
                     &lt;title id="title-2013-4-9-16-53-8-39562387-8"&gt;COS HTML&lt;/title&gt;
                     &lt;description id="description-2013-4-9-16-53-8-39562387-8"&gt;
                        &lt;p id="p-2013-4-9-16-53-8-39562387-8"&gt;Configures the pipeline for single-file HTML&lt;/p&gt;
                     &lt;/description&gt;
                  &lt;/metadata&gt;
                  &lt;engine-config&gt;
                     &lt;config type="pkg" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#id-conf-calabash"/&gt;
                  &lt;/engine-config&gt;
                  &lt;inputs&gt;
                     &lt;input&gt;
                        &lt;port&gt;document&lt;/port&gt;
                        &lt;value 
                           id="id-html-docroot"
                           input-type="doc-root" 
                           type="external"/&gt;
                     &lt;/input&gt;
                     &lt;input id="input-2013-5-19-11-12-49-71312191-1"&gt;
                        &lt;port&gt;stylesheet&lt;/port&gt;
                        &lt;value
                           xlink:href="urn:x-cassis:r1:cos:00002712:sv-SE:0.6#package-2013-5-19-11-12-49-71312191-"
                           xlink:title="COSML XHTML XSLTConverts COSML to XHTML" 
                           type="pkg"/&gt;
                     &lt;/input&gt;
                     &lt;input id="input-2013-5-19-11-12-49-71312191-"&gt;
                        &lt;port&gt;stylesheet-norm&lt;/port&gt;
                        &lt;value 
                           xlink:href="urn:x-cassis:r1:cos:00002712:sv-SE:0.6#id-normalize"
                           xlink:title=" Normalize XSLT Stylesheet for applics filtering and module normalization for COSML documents "
                           type="pkg"/&gt;
                     &lt;/input&gt;
                  &lt;/inputs&gt;
                  &lt;options&gt;
                     &lt;option&gt;
                        &lt;name&gt;htm&lt;/name&gt;
                        &lt;value 
                           id="id-htm-out"
                           type="external" 
                           output-type="primary"/&gt;
                     &lt;/option&gt;
                  &lt;/options&gt;
               &lt;/cmdline&gt;
            &lt;/cmdlines&gt;
         &lt;/pipeline&gt;
      &lt;/pipelines&gt;
      
      &lt;!-- Web Publishing Packages --&gt;
      &lt;packages&gt;
         
         &lt;!-- XProc for COSML to XHTML --&gt;
         &lt;package id="package-2013-5-19-11-12-49-71312191-1"&gt;
            &lt;metadata&gt;
               &lt;title&gt;XProc COSML2XHTML&lt;/title&gt;
               &lt;description&gt;
                  &lt;p&gt;XProc to normalise, validate and convert COSML to XHTML.&lt;/p&gt;
               &lt;/description&gt;
            &lt;/metadata&gt;
            &lt;locator 
               id="id-xhtml-xproc"
               type="main" 
               xlink:href="urn:x-cassis:r1:cos:00002756:sv-SE:0.2"
               xlink:title="publish-cosml-html.xpl" 
               xmlns:xlink="http://www.w3.org/1999/xlink"/&gt;
         &lt;/package&gt;
         
         &lt;!-- XSLT for COSML to XHTML --&gt;
         &lt;package id="package-2013-5-19-11-12-49-71312191-"&gt;
            &lt;metadata&gt;
               &lt;title&gt;COSML XHTML XSLT&lt;/title&gt;
               &lt;description&gt;
                  &lt;p&gt;Converts COSML to XHTML&lt;/p&gt;
               &lt;/description&gt;
            &lt;/metadata&gt;
            &lt;locator 
               id="id-xhtml-xslt"
               xlink:href="urn:x-cassis:r1:cos:00002755:sv-SE:0.1"
               xlink:title="cosml2html-ti.xsl" 
               xmlns:xlink="http://www.w3.org/1999/xlink"
               type="main"/&gt;
         &lt;/package&gt;
      &lt;/packages&gt;
   &lt;/process&gt;
   
   &lt;!-- Content Validation Process --&gt;
   &lt;process id="process-2013-5-19-11-12-49-71312191-"&gt;
      &lt;metadata&gt;
         &lt;title&gt;Content Validation&lt;/title&gt;
         &lt;description&gt;
            &lt;p&gt;Content validation processes&lt;/p&gt;
         &lt;/description&gt;
      &lt;/metadata&gt;
      
      &lt;!-- Content Validation Pipelines --&gt;
      &lt;pipelines&gt;
         
         &lt;!-- Xref Check Pipeline --&gt;
         &lt;pipeline id="pipeline-2013-5-19-11-12-49-71312191-"&gt;
            &lt;metadata&gt;
               &lt;title&gt;Cross-reference Check&lt;/title&gt;
               &lt;description&gt;
                  &lt;p&gt;Pipeline for checking cross-references in COSML documents&lt;/p&gt;
               &lt;/description&gt;
            &lt;/metadata&gt;
            &lt;script
               xlink:href="urn:x-cassis:r1:cos:00002712:sv-SE:0.6#package-2013-5-19-11-12-49-71312191-3"
               xlink:title="XProc Xref CheckGenerates a module list for XML in scope, checks the xrefs and produces a report"
               type="pkg"/&gt;
            &lt;cmdlines&gt;
               
               &lt;!-- Xref Validation Config --&gt;
               &lt;cmdline id="cmdline-2013-5-19-11-12-49-71312191-"&gt;
                  &lt;metadata&gt;
                     &lt;title&gt;Xref Check Configuration&lt;/title&gt;
                     &lt;description&gt;
                        &lt;p&gt;Configures the cross-reference check and report&lt;/p&gt;
                     &lt;/description&gt;
                  &lt;/metadata&gt;
                  &lt;engine-config&gt;
                     &lt;config type="pkg" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#id-conf-calabash"/&gt;
                  &lt;/engine-config&gt;
                  &lt;inputs&gt;
                     &lt;input&gt;
                        &lt;port&gt;map&lt;/port&gt;
                        &lt;value 
                           type="external" 
                           input-type="map"/&gt;
                     &lt;/input&gt;
                     &lt;input id="input-2013-5-19-11-12-49-71312191-2"&gt;
                        &lt;port&gt;stylesheet&lt;/port&gt;
                        &lt;value
                           xlink:href="urn:x-cassis:r1:cos:00002712:sv-SE:0.6#package-2013-5-19-11-12-49-71312191-2"
                           xlink:title="XSLT Xref CheckValidates cross-references in publication"
                           type="pkg"/&gt;
                     &lt;/input&gt;
                  &lt;/inputs&gt;
                  &lt;options&gt;
                     &lt;option&gt;
                        &lt;name&gt;htm&lt;/name&gt;
                        &lt;value id="id-value-xref-htm" type="external" mimetype="text/xhtml"/&gt;
                     &lt;/option&gt;
                     &lt;option&gt;
                        &lt;name&gt;file-url&lt;/name&gt;
                        &lt;value id="id-file-url" type="external" mimetype="text/xml"/&gt;
                     &lt;/option&gt;
                  &lt;/options&gt;
               &lt;/cmdline&gt;
            &lt;/cmdlines&gt;
         &lt;/pipeline&gt;
      &lt;/pipelines&gt;
      
      &lt;packages&gt;
         
         &lt;!-- XProc for Xref Check --&gt;
         &lt;package id="package-2013-5-19-11-12-49-71312191-3"&gt;
            &lt;metadata&gt;
               &lt;title&gt;XProc Xref Check&lt;/title&gt;
               &lt;description&gt;
                  &lt;p&gt;Generates a module list for XML in scope, checks the xrefs and produces a report&lt;/p&gt;
               &lt;/description&gt;
            &lt;/metadata&gt;
            &lt;locator 
               id="id-xproc-xref"
               xlink:href="urn:x-cassis:r1:cos:00002757:sv-SE:0.2"
               xlink:title="xref-check-cosml.xpl" 
               xmlns:xlink="http://www.w3.org/1999/xlink" 
               type="main"/&gt;
         &lt;/package&gt;
         
         &lt;!-- XSLT for Xref Check --&gt;
         &lt;package id="package-2013-5-19-11-12-49-71312191-2"&gt;
            &lt;metadata&gt;
               &lt;title&gt;XSLT Xref Check&lt;/title&gt;
               &lt;description&gt;
                  &lt;p&gt;Validates cross-references in publication&lt;/p&gt;
               &lt;/description&gt;
            &lt;/metadata&gt;
            &lt;locator 
               id="id-xslt-xref"
               xlink:href="urn:x-cassis:r1:cos:00002754:sv-SE:0.1"
               xlink:title="link-target-check-multifile.xsl"
               xmlns:xlink="http://www.w3.org/1999/xlink" 
               type="main"/&gt;
         &lt;/package&gt;
      &lt;/packages&gt;
   &lt;/process&gt;
   
   &lt;packages id="packages-2013-4-9-16-53-8-39562387-1"&gt;
      
      &lt;!-- XSLT for Normalizing COSML --&gt;
      &lt;package id="id-normalize" type="xslt"&gt;
         &lt;metadata id="metadata-2013-4-9-16-53-8-39562387-9"&gt;
            &lt;title id="title-2013-4-9-16-53-8-39562387-9"&gt;Normalize XSLT&lt;/title&gt;
            &lt;description id="description-2013-4-9-16-53-8-39562387-9"&gt;
               &lt;p id="p-2013-4-9-16-53-8-39562387-9"&gt;Stylesheet for applics filtering and module
                  normalization for COSML documents&lt;/p&gt;
            &lt;/description&gt;
         &lt;/metadata&gt;
         &lt;!-- No parameters required. --&gt;
         &lt;locator 
            xmlns:xlink="http://www.w3.org/1999/xlink"
            xlink:href="urn:x-cassis:r1:cos:00000073:sv-SE:0.4"
            id="locator-2013-4-9-16-53-8-39562387-26" 
            type="main" 
            xlink:title="Normalize XSLT"/&gt;
      &lt;/package&gt;
      
      &lt;!-- Calabash Engine Configuration File --&gt;
      &lt;package id="id-conf-calabash"&gt;
         &lt;metadata id="metadata-2013-5-2-21-40-30-37001288-"&gt;
            &lt;title id="title-2013-5-2-21-40-30-37001288-"&gt;Calabash Configuration&lt;/title&gt;
            &lt;description id="description-2013-5-2-21-40-30-37001288-"&gt;
               &lt;p id="p-2013-5-2-21-40-30-37001288-"&gt;Configures Calabash&lt;/p&gt;
            &lt;/description&gt;
         &lt;/metadata&gt;
         &lt;locator 
            xlink:href="urn:x-cassis:r1:cos:00002745:sv-SE:0.1"
            xmlns:xlink="http://www.w3.org/1999/xlink" 
            type="main" 
            id="id-loc-calabash-config"/&gt;
      &lt;/package&gt;
      
      
      
      &lt;!-- Wrapper ProX Resources --&gt;
      &lt;package id="id-wrapper-resources"&gt;
         &lt;metadata id="metadata-2013-5-2-21-40-30-37001288-1"&gt;
            &lt;title id="title-2013-5-2-21-40-30-37001288-1"&gt;Wrapper Pipeline Processing&lt;/title&gt;
            &lt;description id="description-2013-5-2-21-40-30-37001288-1"&gt;
               &lt;p id="p-2013-5-2-21-40-30-37001288-1"&gt;These files are used for running the wrapper pipeline.&lt;/p&gt;
            &lt;/description&gt;
         &lt;/metadata&gt;

         &lt;locator xlink:href="urn:x-cassis:r1:cos:00002735:sv-SE:0.1"
            xmlns:xlink="http://www.w3.org/1999/xlink" id="id-wrapper-xpl"/&gt;
         
         &lt;locator xlink:href="urn:x-cassis:r1:cos:00002732:sv-SE:0.1"
            xmlns:xlink="http://www.w3.org/1999/xlink" id="id-prox-fix"/&gt;
         
         &lt;locator xlink:href="urn:x-cassis:r1:cos:00002733:sv-SE:0.1"
            xmlns:xlink="http://www.w3.org/1999/xlink" id="id-urn2url"/&gt;
         
         &lt;locator xlink:href="urn:x-cassis:r1:cos:00002731:sv-SE:0.1"
            xmlns:xlink="http://www.w3.org/1999/xlink" id="id-prox2bat"/&gt;
         
         &lt;locator xlink:href="urn:x-cassis:r1:cos:00002734:sv-SE:0.1"
            xmlns:xlink="http://www.w3.org/1999/xlink" id="id-prox2shell-config"/&gt;
      &lt;/package&gt;
      
      &lt;!-- XForms --&gt;
      &lt;package id="id-xform"&gt;
         &lt;metadata&gt;
            &lt;title&gt;ProX XForms Package&lt;/title&gt;
            &lt;description&gt;
               &lt;p&gt;XForms for selecting and configuring a process, based on a ProX blueprint.&lt;/p&gt;
            &lt;/description&gt;
         &lt;/metadata&gt;
         &lt;locator 
            xlink:href="urn:prox:xform:0.1" 
            type="main" 
            id="id-loc-xform"/&gt;
      &lt;/package&gt;
   &lt;/packages&gt;
&lt;/processes&gt;
</textual></programlisting><para class="po-block e298 e298"><textual class="po-textual">The point here is that this could easily be (mostly) all that is required;
                    while additional configuration may be useful, it is perfectly feasible to limit
                    the choices to a straight-forward wizard-like behaviour.</textual></para></section></section><section class="po-hcontainer e299 e299" xml:id="section_h2y_zwy_wj"><title class="po-block e300 e300"><textual class="po-textual">Configuration and Parameter Handling</textual></title><para class="po-block e301 e301"><textual class="po-textual">The ProX RNC schema includes a set of attributes used by any element that may
                offer configuration choices by the user:</textual></para><programlisting class="po-block e302 e302" xml:space="preserve"><textual class="po-textual">choice.att =
    attribute choice { "yes" | "no" }?,  # [ a:defaultValue = "no" ] 
    attribute group { xsd:IDREF }?,
    attribute ctype { "boolean" | "list" | "list1" | xsd:string | xsd:decimal | xsd:date }?,
    attribute req { "yes" | "no" }?</textual></programlisting><para class="po-block e303 e303"><textual class="po-textual">The </textual><code class="po-atom e304 e304"><textual class="po-textual">choice</textual></code><textual class="po-textual"> attribute indicates if the parameter is configurable,
                while </textual><code class="po-atom e305 e305"><textual class="po-textual">ctype</textual></code><textual class="po-textual"> indicates the type of user input required. </textual></para><para class="po-block e306 e306"><textual class="po-textual">The </textual><code class="po-atom e307 e307"><textual class="po-textual">group</textual></code><textual class="po-textual"> attribute is an </textual><code class="po-atom e308 e308"><textual class="po-textual">IDREF</textual></code><textual class="po-textual"> to a related parameter
                and indicates a dependency to that parameter. For example, a parameter may be used
                to set the table of contents depth, but it is useless if another parameter has
                turned off the TOC generation. The first parameter needs to include a
                    </textual><code class="po-atom e309 e309"><textual class="po-textual">group</textual></code><textual class="po-textual">
                </textual><code class="po-atom e310 e310"><textual class="po-textual">IDREF</textual></code><textual class="po-textual"> to the second so only relevant options are made available when
                configuring a ProX blueprint. </textual></para><para class="po-block e311 e311"><textual class="po-textual">The configuration options available in a </textual><code class="po-atom e312 e312"><textual class="po-textual">cmdline</textual></code><textual class="po-textual"> are made available
                to the user by defining them as choices in the ProX blueprint. For example, logging
                alternatives might be made available like so:</textual></para><programlisting class="po-block e313 e313" xml:space="preserve"><textual class="po-textual">&lt;engine-config&gt;
    &lt;config 
        type="pkg" 
        xmlns:xlink="http://www.w3.org/1999/xlink" 
        xlink:href="calabash-config.xml"/&gt;
    &lt;log-style 
        id="id-log" 
        choice="yes" 
        ctype="list1" 
        style="off"/&gt;
    &lt;log-style 
        group="id-log" 
        choice="yes" 
        ctype="list1" 
        style="plain"/&gt;
&lt;/engine-config&gt;</textual></programlisting><para class="po-block e314 e314"><textual class="po-textual">Here, the logging options are made available as a </textual><quote class="po-inline e315 e315"><textual class="po-textual">list1</textual></quote><textual class="po-textual">, much like
                a </textual><quote class="po-inline e316 e316"><textual class="po-textual">radio button</textual></quote><textual class="po-textual"> list for a user interface. Note the </textual><code class="po-atom e317 e317"><textual class="po-textual">id</textual></code><textual class="po-textual">
                and </textual><code class="po-atom e318 e318"><textual class="po-textual">group</textual></code><textual class="po-textual"> attributes in the first and second </textual><code class="po-atom e319 e319"><textual class="po-textual">log-style</textual></code><textual class="po-textual">
                elements: the </textual><code class="po-atom e320 e320"><textual class="po-textual">group</textual></code><textual class="po-textual"> attribute is an </textual><code class="po-atom e321 e321"><textual class="po-textual">IDREF</textual></code><textual class="po-textual"> that references
                the </textual><code class="po-atom e322 e322"><textual class="po-textual">id</textual></code><textual class="po-textual"> in the first. The choice that contains the </textual><code class="po-atom e323 e323"><textual class="po-textual">id</textual></code><textual class="po-textual">
                attribute referenced by the other is the default.</textual></para><para class="po-block e324 e324"><textual class="po-textual">A true/false </textual><code class="po-atom e325 e325"><textual class="po-textual">schema-aware</textual></code><textual class="po-textual"> option may only have two values and can
                therefore be represented like this:</textual></para><programlisting class="po-block e326 e326" xml:space="preserve"><textual class="po-textual">&lt;schema-aware process="true" choice="yes" ctype="boolean"/&gt;</textual></programlisting><para class="po-block e327 e327"><textual class="po-textual">Here, a default value is given in the </textual><code class="po-atom e328 e328"><textual class="po-textual">process</textual></code><textual class="po-textual"> attribute. Note the
                    </textual><code class="po-atom e329 e329"><textual class="po-textual">ctype</textual></code><textual class="po-textual"> attribute that </textual><emphasis class="po-inline e330 e330"><textual class="po-textual">identifies the type to be used when
                    representing the choice for the user</textual></emphasis><textual class="po-textual">. The XForm template will show
                this as a checkbox in normal circumstances.</textual></para><para class="po-block e331 e331"><textual class="po-textual">Data types are necessary when representing XSLT parameter alternatives. This one
                decides if an index should be generated by a PDF publishing pipeline:</textual></para><programlisting class="po-block e332 e332" xml:space="preserve"><textual class="po-textual">&lt;!-- Index generation --&gt;
&lt;param 
    choice="yes" 
    ctype="boolean" 
    id="param-2013-4-9-16-53-8-39562387-"&gt;
    &lt;port id="port-2013-4-9-16-53-8-39562387-2"&gt;xslt-params&lt;/port&gt;
    &lt;name id="name-2013-4-9-16-53-8-39562387-"&gt;generate.index&lt;/name&gt;
    &lt;value 
        xmlns:xlink="http://www.w3.org/1999/xlink" 
        type="string"
        xlink:type="simple" 
        id="value-2013-4-9-16-53-8-39562387-2"&gt;false&lt;/value&gt;
&lt;/param&gt;</textual></programlisting><para class="po-block e333 e333"><code class="po-atom e334 e334"><textual class="po-textual">choice="yes"</textual></code><textual class="po-textual"> means that this is a user-configurable option, with the
                default given by the contents. This will render as a checkbox (see </textual><xref class="po-milestone e335 e335" linkend="id-param-config"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">), as
                    </textual><code class="po-atom e336 e336"><textual class="po-textual">param/@ctype="boolean"</textual></code><textual class="po-textual"> is used to bind it to an
                    </textual><code class="po-atom e337 e337"><textual class="po-textual">xs:boolean</textual></code><textual class="po-textual"> in the XForm. </textual></para><para class="po-block e338 e338"><textual class="po-textual">These two parameters decide if and how a TOC will be generated:</textual></para><programlisting class="po-block e339 e339" xml:space="preserve"><textual class="po-textual">&lt;!-- TOC Generation --&gt;
&lt;param 
    choice="yes" 
    ctype="boolean"
    id="param-2013-4-9-16-53-8-39514778-2"&gt;
    &lt;port id="port-2013-4-9-16-53-8-9653444-4"&gt;xslt-params&lt;/port&gt;
    &lt;name id="name-2013-4-9-16-53-8-1928364-2"&gt;create.toc&lt;/name&gt;
    &lt;value 
        xmlns:xlink="http://www.w3.org/1999/xlink" 
        type="string"
        xlink:type="simple" 
        id="value-2013-7-10-16-53-8-764625737-3"&gt;true&lt;/value&gt;
&lt;/param&gt;
&lt;!-- TOC Depth --&gt;
&lt;param 
    choice="yes" 
    ctype="list1"
    id="param-2013-4-9-16-53-8-2385485-2"
    group="value-2013-7-10-16-53-8-764625737-3"&gt;
    &lt;port id="port-2013-7-10-16-34-8-9283444-4"&gt;xslt-params&lt;/port&gt;
    &lt;name id="name-2013-7-10-16-50-3-1946564-2"&gt;toc.depth&lt;/name&gt;
    &lt;value 
        xmlns:xlink="http://www.w3.org/1999/xlink" 
        type="string"
        xlink:type="simple" 
        id="value-2013-7-10-16-53-8-764625737-4"&gt;2&lt;/value&gt;
    &lt;value
        xmlns:xlink="http://www.w3.org/1999/xlink"
        id="value-13-07-10-12345-1" 
        type="string"&gt;1&lt;/value&gt;
    &lt;value
        xmlns:xlink="http://www.w3.org/1999/xlink"
        id="value-13-07-10-12345-2" 
        type="string"&gt;3&lt;/value&gt;
&lt;/param&gt;</textual></programlisting><para class="po-block e340 e340"><textual class="po-textual">The first </textual><code class="po-atom e341 e341"><textual class="po-textual">param</textual></code><textual class="po-textual"> is an ON/OFF switch for TOC generation (hence the
                    </textual><code class="po-atom e342 e342"><textual class="po-textual">@ctype="boolean"</textual></code><textual class="po-textual">), while the second allows choosing the number of
                section levels to be included in the TOC. Since the second </textual><code class="po-atom e343 e343"><textual class="po-textual">param</textual></code><textual class="po-textual"> would
                be meaningless without the first being set to </textual><quote class="po-inline e344 e344"><textual class="po-textual">true</textual></quote><textual class="po-textual">, the second
                    </textual><code class="po-atom e345 e345"><textual class="po-textual">param</textual></code><textual class="po-textual"> includes a </textual><code class="po-atom e346 e346"><textual class="po-textual">group</textual></code><textual class="po-textual"> attribute that is an
                    </textual><code class="po-atom e347 e347"><textual class="po-textual">IDREF</textual></code><textual class="po-textual"> to the first </textual><code class="po-atom e348 e348"><textual class="po-textual">param</textual></code><textual class="po-textual">, which means that the second
                value depends on the first. The </textual><code class="po-atom e349 e349"><textual class="po-textual">group</textual></code><textual class="po-textual"> reference is used in the XForm to
                show or hide controls, depending on their relevance.</textual></para><para class="po-block e350 e350"><textual class="po-textual">The second </textual><code class="po-atom e351 e351"><textual class="po-textual">param</textual></code><textual class="po-textual"> has </textual><code class="po-atom e352 e352"><textual class="po-textual">ctype="list1"</textual></code><textual class="po-textual">, which means that the
                listed </textual><code class="po-atom e353 e353"><textual class="po-textual">value</textual></code><textual class="po-textual">s should be represented as a </textual><code class="po-atom e354 e354"><textual class="po-textual">list1</textual></code><textual class="po-textual"> in the
                XForm. The first is used as default when processing.</textual></para><note class="po-container e355 e355"><para class="po-block e356 e356"><textual class="po-textual">When compiling the package that lists a stylesheet's participating module, the
                    package needs to always include definitions for any parameters that are not
                    explicitly set by the stylesheets. </textual></para></note></section><section class="po-hcontainer e357 e357" xml:id="section_hzm_by3_xj"><title class="po-block e358 e358"><textual class="po-textual">System Context</textual></title><para class="po-block e359 e359"><textual class="po-textual">The ProX blueprint configuration described above only tells how to configure a
                process, not what XML if any it processes, other than indirectly. It tells
                    </textual><emphasis class="po-inline e360 e360"><textual class="po-textual">how</textual></emphasis><textual class="po-textual"> to do something, not </textual><emphasis class="po-inline e361 e361"><textual class="po-textual">what</textual></emphasis><textual class="po-textual"> it
                should apply the process to. Of course, for any process involving an XML file to be
                processed, there will be a matching input in the pipeline, but the point here is
                that the XML is only identified at runtime, </textual><emphasis class="po-inline e362 e362"><textual class="po-textual">if</textual></emphasis><textual class="po-textual"> it is identified</textual><footnote class="po-popup e363 e363"><para class="po-block e364 e364"><textual class="po-textual">Some processes may not need an XML file to apply the process to.</textual></para></footnote><textual class="po-textual">.</textual></para><para class="po-block e365 e365"><textual class="po-textual">The system where proX is being implemented allows for two basic workflows: either
                the process is configured first and the XML to be processed is pointed out later, or
                the other way around. The first is useful for new processes and for any process that
                does not involve an XML file. If an XML file needs to be selected, it can be located
                by the system using its in-place browsing capabilities after the ProX instance is
                configured and saved, that is, when a publishing process has been fully configured
                and saved.</textual></para><para class="po-block e366 e366"><textual class="po-textual">Today, the system uses something called a </textual><quote class="po-inline e367 e367"><textual class="po-textual">configuration</textual></quote><textual class="po-textual"> to point
                out the XML to be processed. The configuration is an XML file that points out a root
                XML file, including language and version, along with some system-specific metadata,
                and then publishes it using an XSL-FO stylesheet</textual><footnote class="po-popup e368 e368"><para class="po-block e369 e369"><textual class="po-textual">The system will fetch any XML modules linked by the root XML, after wich a
                        normalisation process is carried out, and only then are the FO stylesheets
                        applied.</textual></para></footnote><textual class="po-textual">: </textual></para><programlisting class="po-block e370 e370" xml:space="preserve"><textual class="po-textual">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;CassisTIConfiguration&gt;
  &lt;Versioning&gt;-1&lt;/Versioning&gt;
  &lt;VersionInfo /&gt;
  &lt;PortalID&gt;0&lt;/PortalID&gt;
  &lt;ConfigURN&gt;urn:x-cassis:r1:cos:00002216:sv-SE:0.2&lt;/ConfigURN&gt;
  &lt;ConfigID&gt;2216&lt;/ConfigID&gt;
  &lt;ConfigVersionID&gt;-1&lt;/ConfigVersionID&gt;
  &lt;ForProcessMgr&gt;true&lt;/ForProcessMgr&gt;
  &lt;Name&gt;Balisage 2012 Whitepaper&lt;/Name&gt;
  &lt;NoOfNamingFields&gt;0&lt;/NoOfNamingFields&gt;
  &lt;NamingFields /&gt;
  &lt;Code /&gt;
  &lt;Description&gt;Balisage 2012 whitepaper&lt;/Description&gt;
  &lt;ThumbNailImage /&gt;
  &lt;Modules /&gt;
  &lt;XmlModuleID&gt;2112&lt;/XmlModuleID&gt;
  &lt;XmlModuleFolderID&gt;83&lt;/XmlModuleFolderID&gt;
  &lt;XmlModuleName&gt;Bal2012nord0128.xml&lt;/XmlModuleName&gt;
  &lt;XmlModuleURN&gt;urn:x-cassis:r1:cos:00002112:sv-SE:0.43&lt;/XmlModuleURN&gt;
  &lt;XmlModuleLanguageID&gt;2&lt;/XmlModuleLanguageID&gt;
  &lt;XmlModuleVersionMajor&gt;0&lt;/XmlModuleVersionMajor&gt;
  &lt;XmlModuleVersionMinor&gt;43&lt;/XmlModuleVersionMinor&gt;
  &lt;LanguageID&gt;2&lt;/LanguageID&gt;
  &lt;VersionMajor&gt;0&lt;/VersionMajor&gt;
  &lt;VersionMinor&gt;2&lt;/VersionMinor&gt;
  &lt;Applicabilities /&gt;
  &lt;Applics /&gt;
&lt;/CassisTIConfiguration&gt;</textual></programlisting><para class="po-block e371 e371"><textual class="po-textual">With ProX-based pipeline processing added, the XSL-FO is just one of several
                stylesheets run by the pipelines, and so, if a system configuration pointing out a
                root XML file is opened first, the user must </textual><emphasis class="po-inline e372 e372"><textual class="po-textual">associate</textual></emphasis><textual class="po-textual"> a saved
                process with the configuration or configure a new one before the XML can be
                processed.</textual></para><para class="po-block e373 e373"><textual class="po-textual">The </textual><quote class="po-inline e374 e374"><textual class="po-textual">configuration</textual></quote><textual class="po-textual"> files that point out the root XML and some
                system-specific metadata now also list each and every saved ProX instance (basically
                an instance of the blueprint code in </textual><xref class="po-milestone e375 e375" linkend="section_n4d_s1g_xj"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">)
                associated with that specific configuration, including a default PDF publishing
                instance, so there will be at least one process to use. New ones can be defined
                later.</textual></para><programlisting class="po-block e376 e376" xml:space="preserve"><textual class="po-textual">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;CassisTIConfiguration&gt;
  ...
  &lt;Description&gt;Balisage 2012 whitepaper&lt;/Description&gt;
  ...
  &lt;Processes&gt;
    &lt;Process&gt;
      &lt;!-- Blueprint --&gt;
      &lt;ProXBlueprint&gt;
        &lt;ID&gt;&lt;!-- System ID --&gt;&lt;/ID&gt;
        &lt;URN&gt;&lt;!-- Blueprint URN --&gt;&lt;/URN&gt;
        &lt;ProXName&gt;&lt;!-- Name of blueprint --&gt;&lt;/ProXName&gt;
      &lt;/ProXBlueprint&gt;
      &lt;!-- Instances associated with config, selectable by user --&gt;
      &lt;ProXInstance&gt;
        &lt;ID&gt;&lt;/ID&gt;
        &lt;URN&gt;urn:x-cassis:r1:cos:00008295:en-GB:0.5&lt;/URN&gt;
        &lt;ProXName&gt;PDF Publishing&lt;/ProXName&gt;
      &lt;/ProXInstance&gt;
    &lt;/Process&gt;
    ...
  &lt;/Processes&gt;
&lt;/CassisTIConfiguration&gt;</textual></programlisting><para class="po-block e377 e377"><textual class="po-textual">The configuration file is used by the system by something called </textual><emphasis class="po-inline e378 e378"><textual class="po-textual">Process
                    Manager</textual></emphasis><textual class="po-textual"> as a shortcut for processing XML, including translation
                handling of the XML. I tend to liken it to a postit note placed on a specific XML
                document (comprising of several modules in specific versions), describing a specific
                process such as the PDF publishing for customer delivery of a specific version and
                translation of the document. For more on this, see </textual><xref class="po-milestone e379 e379" linkend="id-balVol08-Nordstrom01"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para></section></section><section class="po-hcontainer e380 e380" xml:id="section_rvp_fr5_wj"><title class="po-block e381 e381"><textual class="po-textual">XForms: Generating the GUI, Pt 2</textual></title><para class="po-block e382 e382"><textual class="po-textual">I set out to do the user interface with XForms, but as promising the standard was for
            me, getting my head around the MVC model was not easy.</textual></para><para class="po-block e383 e383"><textual class="po-textual">My first hypothesis was to read the relevant nodes from the blueprint, list the
                </textual><code class="po-atom e384 e384"><textual class="po-textual">process</textual></code><textual class="po-textual"> metadata's </textual><code class="po-atom e385 e385"><textual class="po-textual">title</textual></code><textual class="po-textual"> contents in a
                </textual><code class="po-atom e386 e386"><textual class="po-textual">select1</textual></code><textual class="po-textual">
            </textual><code class="po-atom e387 e387"><textual class="po-textual">itemset</textual></code><textual class="po-textual">, select one and copy it to the target instance, then repeat for the
                </textual><code class="po-atom e388 e388"><textual class="po-textual">pipeline</textual></code><textual class="po-textual">, </textual><code class="po-atom e389 e389"><textual class="po-textual">cmdline</textual></code><textual class="po-textual"> and </textual><code class="po-atom e390 e390"><textual class="po-textual">package</textual></code><textual class="po-textual"> choices. This
            was a wizard-like approach, with every wizard step showing and hiding the appropriate
            configurations in a switch/case form.</textual></para><para class="po-block e391 e391"><textual class="po-textual">Having banged my head against the wall trying a </textual><code class="po-atom e392 e392"><textual class="po-textual">copy</textual></code><textual class="po-textual"> inside an
                </textual><code class="po-atom e393 e393"><textual class="po-textual">itemset</textual></code><textual class="po-textual">, Mark Lawson pointed out that </textual><emphasis class="po-inline e394 e394"><textual class="po-textual">XSLTForms</textual></emphasis><textual class="po-textual">
            does not support </textual><code class="po-atom e395 e395"><textual class="po-textual">copy</textual></code><textual class="po-textual"> and suggested a far easier way. In a somewhat
            shortened form:</textual></para><programlisting class="po-block e396 e396" xml:space="preserve"><textual class="po-textual">
&lt;?xml-stylesheet href="xsltforms/xsltforms-1.0RC/xsltforms/xsltforms.xsl" type="text/xsl"?&gt;
&lt;?xsltforms-options debug="no"?&gt;
&lt;html 
    xmlns="http://www.w3.org/1999/xhtml" 
    xmlns:ev="http://www.w3.org/2001/xml-events" 
    xmlns:xs="http://www.w3.org/2001/XMLSchema" 
    xmlns:xf="http://www.w3.org/2002/xforms"&gt;
    &lt;head&gt;
        &lt;link type="text/css" rel="stylesheet" href="style.css"/&gt;
        &lt;title&gt;Cassis Process Configuration&lt;/title&gt;
        
        &lt;!-- Model --&gt;
        &lt;xf:model&gt;
            &lt;!-- Temp data from the selections --&gt;
            &lt;xf:instance id="scratchpad"&gt;
                &lt;data xmlns=""&gt;
                    &lt;theprocess/&gt;
                    &lt;thepipeline/&gt;
                    &lt;thecmds/&gt;
                    &lt;thepackages/&gt;
                    &lt;commonpackages/&gt;
                &lt;/data&gt;
            &lt;/xf:instance&gt;
            
            &lt;!-- Target for built process --&gt;
            &lt;xf:instance id="mytarget"&gt;
                &lt;data xmlns=""&gt;
                    &lt;processes&gt; &lt;/processes&gt;
                &lt;/data&gt;
            &lt;/xf:instance&gt;
            
            &lt;!-- Source ProX Blueprint --&gt;
            &lt;xf:instance 
                src="prox-blueprint.xml" 
                id="mysource"/&gt;
            &lt;xf:bind 
                type="xs:boolean" 
                nodeset="instance('mysource')//param[@ctype='boolean']/value"/&gt;
            
            &lt;!-- Set the list defaults to be first values in the ProX instance --&gt;
            &lt;xf:action ev:event="xforms-ready"&gt;
                &lt;xf:setvalue 
                    ref="theprocess" 
                    value="instance('mysource')/process[1]/@id"/&gt;
                &lt;xf:setvalue 
                    ref="thepipeline" 
                    value="instance('mysource')/process[1]/pipelines/pipeline[1]/@id"/&gt;
                &lt;xf:setvalue 
                    ref="thecmds" 
                    value="instance('mysource')/process[1]/pipelines/pipeline[1]/cmdlines/cmdline[1]/@id"/&gt;
                &lt;xf:setvalue 
                    ref="thepackages"/&gt;
                &lt;xf:setvalue 
                    ref="commonpackages" 
                    value="instance('mysource')/processes/packages"/&gt;
            &lt;/xf:action&gt;
            
            &lt;!-- Save the configured proX instance --&gt;
            &lt;xf:submission 
                ref="instance('mytarget')/processes" 
                replace="instance" 
                method="put" 
                action="prox-instance.xml" 
                id="save"/&gt;
        &lt;/xf:model&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h3&gt;Process Configuration&lt;/h3&gt;
        &lt;table&gt;
            &lt;tr&gt;
                &lt;td&gt;
                    &lt;!-- Process --&gt;
                    &lt;fieldset&gt;
                        &lt;legend&gt;Process&lt;/legend&gt;
                        &lt;div class="block-form"&gt;
                            &lt;xf:select1 
                                appearance="compact" 
                                incremental="false" 
                                ref="theprocess"&gt;
                                &lt;xf:label/&gt;
                                &lt;xf:item id="item-proc-dummy"&gt;
                                    &lt;xf:label&gt;Select a process&lt;/xf:label&gt;
                                    &lt;xf:value&gt;Nothing&lt;/xf:value&gt;
                                &lt;/xf:item&gt;
                                &lt;xf:itemset 
                                    id="item-proc" 
                                    nodeset="instance('mysource')/process"&gt;
                                    &lt;xf:label ref="./metadata/title"/&gt;
                                    &lt;xf:value ref="./@id"/&gt;
                                &lt;/xf:itemset&gt;
                                &lt;xf:setvalue 
                                    ref="../thepipeline" 
                                    ev:event="DOMFocusIn" 
                                    value="'Nothing'"/&gt;
                            &lt;/xf:select1&gt;
                        &lt;/div&gt;
                    &lt;/fieldset&gt;
                &lt;/td&gt;
                &lt;td&gt;
                    &lt;!-- Pipeline --&gt;
                    &lt;fieldset&gt;
                        &lt;legend&gt;Pipeline&lt;/legend&gt;
                        &lt;div class=" block-form"&gt;
                            &lt;xf:select1 
                                appearance="compact" 
                                incremental="false" 
                                ref="thepipeline" 
                                id="id-pipe"&gt;
                                &lt;xf:label/&gt;
                                &lt;xf:item id="item-pipe-dummy"&gt;
                                    &lt;xf:label&gt;Select a pipeline&lt;/xf:label&gt;
                                    &lt;xf:value&gt;Nothing&lt;/xf:value&gt;
                                &lt;/xf:item&gt;
                                &lt;xf:itemset 
                                    id="item-pipe" 
                                    nodeset="instance('mysource')/process[@id = instance('scratchpad')/theprocess]/pipelines/pipeline"&gt;
                                    &lt;xf:label ref="./metadata/title"/&gt;
                                    &lt;xf:value ref="@id"/&gt;
                                &lt;/xf:itemset&gt;
                                &lt;xf:setvalue 
                                    ref="../thecmds" 
                                    ev:event="DOMFocusIn" 
                                    value="'Nothing'"/&gt;
                            &lt;/xf:select1&gt;
                        &lt;/div&gt;
                    &lt;/fieldset&gt;
                &lt;/td&gt;
                &lt;td&gt;
                    &lt;!-- Commands --&gt;
                    &lt;fieldset&gt;
                        &lt;legend&gt;Output&lt;/legend&gt;
                        &lt;div class="block-form"&gt;
                            &lt;xf:select1 
                                appearance="compact" 
                                incremental="false" 
                                ref="thecmds" 
                                id="id-cmd"&gt;
                                &lt;xf:label/&gt;
                                &lt;xf:item id="item-cmd-dummy"&gt;
                                    &lt;xf:label&gt;Select output options&lt;/xf:label&gt;
                                    &lt;xf:value&gt;Nothing&lt;/xf:value&gt;
                                &lt;/xf:item&gt;
                                &lt;xf:itemset 
                                    id="item-cmd" 
                                    nodeset="instance('mysource')/process[@id = instance('scratchpad')/theprocess]/pipelines/pipeline[@id = instance('scratchpad')/thepipeline]/cmdlines/cmdline"&gt;
                                    &lt;xf:label ref="metadata/title"/&gt;
                                    &lt;xf:value ref="@id"/&gt;
                                &lt;/xf:itemset&gt;
                            &lt;/xf:select1&gt;
                        &lt;/div&gt;
                    &lt;/fieldset&gt;
                    
                &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td class="debug"&gt;
                    &lt;xf:output ref="instance('mysource')//process[@id=instance('scratchpad')/theprocess]/metadata/title"&gt;
                        &lt;xf:label&gt;Selected: &lt;/xf:label&gt;
                    &lt;/xf:output&gt;
                &lt;/td&gt;
                
                &lt;td class="debug"&gt;
                    &lt;xf:output ref="instance('mysource')//pipeline[@id=instance('scratchpad')/thepipeline]/metadata/title"&gt;
                        &lt;xf:label&gt;Selected: &lt;/xf:label&gt;
                    &lt;/xf:output&gt;
                &lt;/td&gt;
                &lt;td class="debug"&gt;
                    &lt;xf:output ref="instance('mysource')//cmdline[@id=instance('scratchpad')/thecmds]/metadata/title"&gt;
                        &lt;xf:label&gt;Selected: &lt;/xf:label&gt;
                    &lt;/xf:output&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
        &lt;xf:trigger&gt;
            &lt;xf:label&gt;Save&lt;/xf:label&gt;
            &lt;xf:action ev:event="DOMActivate"&gt;
                &lt;xf:delete nodeset="instance('mytarget')/processes/process"/&gt;
                &lt;xf:delete nodeset="instance('mytarget')/processes/packages"/&gt;
                &lt;xf:insert context="instance('mytarget')/processes" origin="instance('mysource')/process[@id = instance('scratchpad')/theprocess]"/&gt;
                &lt;xf:insert context="instance('mytarget')/processes" origin="instance('mysource')/packages" if="instance('mysource')/packages"/&gt;
                &lt;xf:delete nodeset="instance('mytarget')/processes/process[1]/pipelines/pipeline[@id != instance('scratchpad')/thepipeline]"/&gt;
                &lt;xf:delete nodeset="instance('mytarget')/processes/process[1]/pipelines/pipeline[1]/cmdlines/cmdline[@id != instance('scratchpad')/thecmds]"/&gt;
                &lt;xf:send submission="save"/&gt;
            &lt;/xf:action&gt;
        &lt;/xf:trigger&gt;
    &lt;/body&gt;
&lt;/html&gt;</textual></programlisting><para class="po-block e397 e397"><textual class="po-textual">Note the following:</textual><itemizedlist class="po-table e398 e398"><listitem class="po-container e399 e399"><para class="po-block e400 e400"><textual class="po-textual">The </textual><code class="po-atom e401 e401"><textual class="po-textual">scratchpad</textual></code><textual class="po-textual"> instance, containing IDs of the selected ProX
                        components.</textual></para></listitem><listitem class="po-container e402 e402"><para class="po-block e403 e403"><textual class="po-textual">The </textual><code class="po-atom e404 e404"><textual class="po-textual">target</textual></code><textual class="po-textual"> instance and the </textual><code class="po-atom e405 e405"><textual class="po-textual">trigger</textual></code><textual class="po-textual"> that writes
                        to it near the end.</textual></para></listitem><listitem class="po-container e406 e406"><para class="po-block e407 e407"><textual class="po-textual">And, of course, the </textual><code class="po-atom e408 e408"><textual class="po-textual">select1</textual></code><textual class="po-textual">s handling the
                            </textual><code class="po-atom e409 e409"><textual class="po-textual">process</textual></code><textual class="po-textual">, </textual><code class="po-atom e410 e410"><textual class="po-textual">pipeline</textual></code><textual class="po-textual"> and </textual><code class="po-atom e411 e411"><textual class="po-textual">cmdline</textual></code><textual class="po-textual">
                        </textual><code class="po-atom e412 e412"><textual class="po-textual">ID</textual></code><textual class="po-textual">s, respectively.</textual></para></listitem></itemizedlist><textual class="po-textual">
        </textual></para><para class="po-block e413 e413"><textual class="po-textual">This produces a GUI that writes the selected </textual><code class="po-atom e414 e414"><textual class="po-textual">id</textual></code><textual class="po-textual"> to the scratchpad,
            refreshing the next </textual><code class="po-atom e415 e415"><textual class="po-textual">select1</textual></code><textual class="po-textual">
            </textual><code class="po-atom e416 e416"><textual class="po-textual">itemset</textual></code><textual class="po-textual">, until done, like so:</textual></para><figure class="po-container e417 e417" xml:id="figure_hxq_rnj_xj"><title class="po-block e418 e418"><textual class="po-textual">The Basic ProX GUI</textual></title><mediaobject class="po-container e419 e419"><imageobject class="po-container e420 e420"><imagedata class="po-meta e421 e421" fileref="../../../vol11/graphics/Nordstrom02/Nordstrom02-013.jpg" width="300px"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e422 e422"><textual class="po-textual">The result is saved to a target ProX instance: </textual><code class="po-atom e423 e423"><textual class="po-textual">instance('mysource')/process[@id
                = instance('scratchpad')/theprocess]</textual></code><textual class="po-textual"> is copied using </textual><code class="po-atom e424 e424"><textual class="po-textual">insert</textual></code><textual class="po-textual">. The
            pipelines and command lines that do </textual><emphasis class="po-inline e425 e425"><textual class="po-textual">not</textual></emphasis><textual class="po-textual"> match the IDs in the
            scratchpad instance, </textual><code class="po-atom e426 e426"><textual class="po-textual">pipeline[@id != instance('scratchpad')/thepipeline]</textual></code><textual class="po-textual">
            and </textual><code class="po-atom e427 e427"><textual class="po-textual">cmdline[@id != instance('scratchpad')/thecmds]</textual></code><textual class="po-textual">, respectively, are then
            deleted from the target. </textual></para><section class="po-hcontainer e428 e428" xml:id="section_psw_1t5_wj"><title class="po-block e429 e429"><textual class="po-textual">Single-Choice Problems</textual></title><para class="po-block e430 e430"><textual class="po-textual">The first working GUI looked like this:</textual></para><figure class="po-container e431 e431"><title class="po-block e432 e432"><textual class="po-textual">Bal2013nord-2-012812.jpg</textual></title><mediaobject class="po-container e433 e433"><imageobject class="po-container e434 e434"><imagedata class="po-meta e435 e435" fileref="../../../vol11/graphics/Nordstrom02/Nordstrom02-014.jpg" width="300px"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e436 e436"><textual class="po-textual">With two or more of each choice, it worked perfectly, but if only single choice
                was available, this resulted in the IDs not being updated in the scratchpad
                instance:</textual></para><figure class="po-container e437 e437" xml:id="figure_dhq_cd1_xj"><title class="po-block e438 e438"><textual class="po-textual">Pipeline ID Not Updated</textual></title><mediaobject class="po-container e439 e439"><imageobject class="po-container e440 e440"><imagedata class="po-meta e441 e441" fileref="../../../vol11/graphics/Nordstrom02/Nordstrom02-015.jpg" width="300px"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e442 e442"><textual class="po-textual">Note that while the process is selected and its ID listed, the pipeline ID listed
                in the scratchpad debug output (below the form) belongs to a previous selection
                rather than the apparently selected one. The </textual><code class="po-atom e443 e443"><textual class="po-textual">cmdline</textual></code><textual class="po-textual">
                </textual><code class="po-atom e444 e444"><textual class="po-textual">ID</textual></code><textual class="po-textual"> in the scratchpad also belongs to a previous selection, but the
                current </textual><code class="po-atom e445 e445"><textual class="po-textual">cmdline</textual></code><textual class="po-textual"> selection does not show any values at all. If the
                current state was written to a process instance, the selections would be wrong and
                the process would fail.</textual></para><para class="po-block e446 e446"><textual class="po-textual">This happened because the selected </textual><code class="po-atom e447 e447"><textual class="po-textual">process</textual></code><textual class="po-textual"> contained only a single
                    </textual><code class="po-atom e448 e448"><textual class="po-textual">pipeline</textual></code><textual class="po-textual"> and value changed-events do not fire as expected in
                single-item lists. </textual></para><para class="po-block e449 e449"><textual class="po-textual">Better is to add a </textual><emphasis class="po-inline e450 e450"><textual class="po-textual">static</textual></emphasis><textual class="po-textual">
                </textual><code class="po-atom e451 e451"><textual class="po-textual">item</textual></code><textual class="po-textual">s before the </textual><code class="po-atom e452 e452"><textual class="po-textual">itemset</textual></code><textual class="po-textual">s, like this:</textual></para><programlisting class="po-block e453 e453" xml:space="preserve"><textual class="po-textual">&lt;xf:select1 
    appearance="compact" 
    incremental="false" 
    ref="theprocess"&gt;
    &lt;xf:label/&gt;
    &lt;xf:item id="item-proc-dummy"&gt;
        &lt;xf:label&gt;Select a process&lt;/xf:label&gt;
        &lt;xf:value&gt;Nothing&lt;/xf:value&gt;
    &lt;/xf:item&gt;
    &lt;xf:itemset ...&gt;
        ...
    &lt;/xf:itemset&gt;
    ...
&lt;/xf:select1&gt;</textual></programlisting><para class="po-block e454 e454"><textual class="po-textual">This introduces a </textual><quote class="po-inline e455 e455"><textual class="po-textual">dummy</textual></quote><textual class="po-textual"> value, ensuring that the form is updated
                regardless of the number of items. To make sure that the selection of a
                    </textual><quote class="po-inline e456 e456"><textual class="po-textual">parent</textual></quote><textual class="po-textual"> forces the update of the </textual><quote class="po-inline e457 e457"><textual class="po-textual">child</textual></quote><textual class="po-textual">, you set the
                value of the </textual><quote class="po-inline e458 e458"><textual class="po-textual">child</textual></quote><textual class="po-textual"> to a dummy value, forcing the user to actively
                choose an option. For example, if you change the pipeline selection, this makes sure
                that the next option in line, the command line list, is updated with a static
                value:</textual></para><programlisting class="po-block e459 e459" xml:space="preserve"><textual class="po-textual">&lt;xf:select1 ...&gt;
    &lt;xf:label/&gt;
    ...
    &lt;xf:setvalue 
        ref="../thecmds" 
        ev:event="DOMFocusIn" 
        value="'Nothing'"/&gt;
&lt;/xf:select1&gt;</textual></programlisting><para class="po-block e460 e460"><textual class="po-textual">This setup has all kinds of advantages: styling becomes easier (a nonexistent list
                can't be easily fixed in the CSS, as far as I know; see </textual><xref class="po-milestone e461 e461" linkend="figure_dhq_cd1_xj"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">),
                subforms that configure aspects of the selected group can be shown, and conditions
                for saving the configured process can be imposed, not allowing a Save before all
                selections have been made.</textual></para></section><section class="po-hcontainer e462 e462"><title class="po-block e463 e463"><textual class="po-textual">User-configurable Parameters</textual></title><para class="po-block e464 e464"><textual class="po-textual">The user-configurable stylesheet parameters are set in the </textual><code class="po-atom e465 e465"><textual class="po-textual">input</textual></code><textual class="po-textual">
                structure (see </textual><xref class="po-milestone e466 e466" linkend="section_qrx_nxg_wj"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) that links to the package. Here's a complete
                    </textual><code class="po-atom e467 e467"><textual class="po-textual">input</textual></code><textual class="po-textual"> for a stylesheet used by a PDF publishing pipeline:</textual></para><programlisting class="po-block e468 e468" xml:space="preserve"><textual class="po-textual">&lt;input choice="no" id="input-2013-4-9-16-53-8-39562387-1"&gt;
                        &lt;port id="port-2013-4-9-16-53-8-39562387-1"&gt;stylesheet&lt;/port&gt;
                        &lt;value 
                           xmlns:xlink="http://www.w3.org/1999/xlink" 
                           type="pkg"
                           xlink:href="urn:x-cassis:r1:cos:00002712:sv-SE:0.1#id-xslfo-cosml"
                           xlink:type="simple" id="value-2013-4-9-16-53-8-39562387-1"
                           xlink:title=" XSL-FO Package for COSML PDF Converts COSML documents 
                                         to XSL-FO format for COS PDF layout "/&gt;
                        &lt;params id="params-2013-4-9-16-53-8-39562387-"&gt;
                           &lt;!-- Index generation --&gt;
                           &lt;param 
                              choice="yes" 
                              ctype="boolean" 
                              id="param-2013-4-9-16-53-8-39562387-"&gt;
                              &lt;port id="port-2013-4-9-16-53-8-39562387-2"&gt;xslt-params&lt;/port&gt;
                              &lt;name id="name-2013-4-9-16-53-8-39562387-"&gt;generate.index&lt;/name&gt;
                              &lt;value 
                                 xmlns:xlink="http://www.w3.org/1999/xlink" 
                                 type="string"
                                 xlink:type="simple" 
                                 id="value-2013-4-9-16-53-8-39562387-2"&gt;false&lt;/value&gt;
                           &lt;/param&gt;
                           &lt;!-- XEP Extensions --&gt;
                           &lt;param 
                              choice="no" 
                              id="param-2013-4-9-16-53-8-39562387-1"&gt;
                              &lt;port id="port-2013-4-9-16-53-8-39562387-3"&gt;xslt-params&lt;/port&gt;
                              &lt;name id="name-2013-4-9-16-53-8-39562387-1"&gt;xep.extensions&lt;/name&gt;
                              &lt;value xmlns:xlink="http://www.w3.org/1999/xlink" type="string"
                                 xlink:type="simple" id="value-2013-4-9-16-53-8-39562387-3"
                                 &gt;0&lt;/value&gt;
                           &lt;/param&gt;
                           &lt;!-- XSL-FO Bookmark Generation --&gt;
                           &lt;param 
                              choice="yes" 
                              ctype="boolean"
                              id="param-2013-4-9-16-53-8-39562387-2"&gt;
                              &lt;port id="port-2013-4-9-16-53-8-39562387-4"&gt;xslt-params&lt;/port&gt;
                              &lt;name id="name-2013-4-9-16-53-8-39562387-2"&gt;xslfo.bookmarks&lt;/name&gt;
                              &lt;value 
                                 xmlns:xlink="http://www.w3.org/1999/xlink" 
                                 type="string"
                                 xlink:type="simple" id="value-2013-4-9-16-53-8-39562387-4"&gt;true&lt;/value&gt;
                           &lt;/param&gt;
                           &lt;!-- TOC Generation --&gt;
                           &lt;param 
                              choice="yes" 
                              ctype="boolean"
                              id="param-2013-4-9-16-53-8-39514778-2"&gt;
                              &lt;port id="port-2013-4-9-16-53-8-9653444-4"&gt;xslt-params&lt;/port&gt;
                              &lt;name id="name-2013-4-9-16-53-8-1928364-2"&gt;create.toc&lt;/name&gt;
                              &lt;value 
                                 xmlns:xlink="http://www.w3.org/1999/xlink" 
                                 type="string"
                                 xlink:type="simple" 
                                 id="value-2013-7-10-16-53-8-764625737-3"&gt;true&lt;/value&gt;
                           &lt;/param&gt;
                           &lt;!-- TOC Depth --&gt;
                           &lt;param 
                              choice="yes" 
                              ctype="list1"
                              id="param-2013-4-9-16-53-8-2385485-2"
                              group="value-2013-7-10-16-53-8-764625737-3"&gt;
                              &lt;port id="port-2013-7-10-16-34-8-9283444-4"&gt;xslt-params&lt;/port&gt;
                              &lt;name id="name-2013-7-10-16-50-3-1946564-2"&gt;toc.depth&lt;/name&gt;
                              &lt;value 
                                 xmlns:xlink="http://www.w3.org/1999/xlink" 
                                 type="string"
                                 xlink:type="simple" 
                                 id="value-2013-7-10-16-53-8-764625737-4"&gt;2&lt;/value&gt;
                              &lt;value
                                 xmlns:xlink="http://www.w3.org/1999/xlink"
                                 id="value-13-07-10-12345-1" 
                                 type="string"&gt;1&lt;/value&gt;
                              &lt;value
                                 xmlns:xlink="http://www.w3.org/1999/xlink"
                                 id="value-13-07-10-12345-2" 
                                 type="string"&gt;3&lt;/value&gt;
                           &lt;/param&gt;
                        &lt;/params&gt;
                     &lt;/input&gt;</textual></programlisting><para class="po-block e469 e469"><textual class="po-textual">Note that not all of the parameters are made available as choices
                    (</textual><code class="po-atom e470 e470"><textual class="po-textual">choice="no"</textual></code><textual class="po-textual">).</textual></para><para class="po-block e471 e471"><textual class="po-textual">Having the parameter definitions include data types greatly simplifies generating
                a GUI. As the values are not usually typed in the stylesheets that use them, the
                proX blueprint author must take care to define data types for every parameter made
                available as a user-configurable option.</textual></para><para class="po-block e472 e472"><textual class="po-textual">The configuration options are shown or hidden using a grouping of forms in
                combination with CSS that hides a disabled group in the XForm</textual><footnote class="po-popup e473 e473"><para class="po-block e474 e474"><textual class="po-textual">Provided that they are made available to the user in the first
                        place.</textual></para></footnote><textual class="po-textual">. The following group generates controls for a selected command line
                    (</textual><code class="po-atom e475 e475"><textual class="po-textual">cmdline</textual></code><textual class="po-textual">). It is hidden if there are no user-configurable
                parameters for that </textual><code class="po-atom e476 e476"><textual class="po-textual">cmdline</textual></code><textual class="po-textual">.</textual></para><programlisting class="po-block e477 e477" xml:space="preserve"><textual class="po-textual">&lt;xf:group 
    ref="instance('mysource')//cmdline[@id=instance('scratchpad')/thecmds]//param[@choice='yes' 
         and @ctype='boolean']"&gt;
    &lt;div class="block-form"&gt;
        &lt;fieldset class="config"&gt;
            &lt;legend&gt;Configuration&lt;/legend&gt;
            
            &lt;xf:repeat 
                id="b-ctrl"
                nodeset="instance('mysource')//cmdline[@id=instance('scratchpad')/thecmds]//param[@choice='yes' and @ctype='boolean']"&gt;
                &lt;xf:input 
                    ref="value" 
                    appearance="full"&gt;
                    &lt;xf:label&gt;
                        &lt;xf:output ref="../name"/&gt;
                    &lt;/xf:label&gt;
                &lt;/xf:input&gt;
            &lt;/xf:repeat&gt;
            
            &lt;xf:repeat 
                nodeset="instance('mysource')//cmdline[@id=instance('scratchpad')/thecmds]//param[@ctype='list1' and (not(@group) or (@group=//param[@choice='yes']/@id))]"&gt;
                &lt;xf:select1 
                    appearance="minimal" 
                    incremental="false" 
                    ref="value"&gt;
                    &lt;xf:label&gt;
                        &lt;xf:output ref="../name"/&gt;
                    &lt;/xf:label&gt;
                    &lt;xf:itemset nodeset="instance('mysource')//cmdline[@id=instance('scratchpad')/thecmds]//param[@ctype='list1' and (not(@group) or (@group=//param[@choice='yes']/@id))]/value"&gt;
                        &lt;xf:label ref="."/&gt;
                        &lt;xf:value ref="@id"/&gt;
                    &lt;/xf:itemset&gt;
                &lt;/xf:select1&gt;
            &lt;/xf:repeat&gt;
        &lt;/fieldset&gt;
    &lt;/div&gt;
&lt;/xf:group&gt;</textual></programlisting><para class="po-block e478 e478"><textual class="po-textual">The current GUI design gathers all configurable options within the
                    </textual><code class="po-atom e479 e479"><textual class="po-textual">cmdline</textual></code><textual class="po-textual"> group rather than having any of them appear when the
                pipeline is selected. This is a design choice rather than a technical one; see </textual><xref class="po-milestone e480 e480" linkend="section_sqy_ms5_wj"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><figure class="po-container e481 e481" xml:id="id-param-config"><title class="po-block e482 e482"><textual class="po-textual">Parameter Configuration</textual></title><mediaobject class="po-container e483 e483"><imageobject class="po-container e484 e484"><imagedata class="po-meta e485 e485" fileref="../../../vol11/graphics/Nordstrom02/Nordstrom02-016.jpg" width="300px"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e486 e486"><textual class="po-textual">The above is able to generate boolean and single-choice list controls. Of course,
                other controls may be added, for example, to select a date or enter a text string to
                be included in the process output.</textual></para></section></section><section class="po-hcontainer e487 e487" xml:id="section_igv_5t5_wj"><title class="po-block e488 e488"><textual class="po-textual">Initiating and Running ProX</textual></title><para class="po-block e489 e489"><textual class="po-textual">Running the overall process, that is, initiating and running the ProX XForms template,
            saving the resulting ProX instance and converting it to a shell script or batch file (or
            some other file executing a pipeline engine) involves the following:</textual><orderedlist class="po-table e490 e490"><listitem class="po-container e491 e491"><para class="po-block e492 e492"><textual class="po-textual">Locate and fetch the ProX blueprint. Normalise, if necessary.</textual></para></listitem><listitem class="po-container e493 e493"><para class="po-block e494 e494"><textual class="po-textual">Locate and fetch all files that are part of the processing as defined by
                        the blueprint, including the input XML, stylesheets, XProc, XForms XHTML,
                        configuration files, etc. Map their URNs to temporary URLs in a resource map
                        XML file (see </textual><xref class="po-milestone e495 e495" linkend="id-resource-map"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).</textual></para></listitem><listitem class="po-container e496 e496"><para class="po-block e497 e497"><textual class="po-textual">Generate any runtime URLs for the target files for the process, as defined
                        by the blueprint. Map these in the resource map XML, adding the ProX IDs
                        (see </textual><xref class="po-milestone e498 e498" linkend="id-targets"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) where needed.</textual></para></listitem><listitem class="po-container e499 e499"><para class="po-block e500 e500"><textual class="po-textual">Preprocess the XForms XHTML, adding the URL to the ProX blueprint and
                        other information required by the XForm.</textual></para></listitem><listitem class="po-container e501 e501"><para class="po-block e502 e502"><textual class="po-textual">Open the the XForms XHTML.</textual></para></listitem><listitem class="po-container e503 e503"><para class="po-block e504 e504"><textual class="po-textual">Make choices in the XForm as necessary. Save (and close) the a ProX
                        instance. </textual></para></listitem><listitem class="po-container e505 e505"><para class="po-block e506 e506"><textual class="po-textual">Replace any URNs in the source XML to be processed with matching temporary
                        URNs.</textual></para></listitem><listitem class="po-container e507 e507"><para class="po-block e508 e508"><textual class="po-textual">Add runtime information to the ProX instance (input XML, target URLs,
                        etc). </textual></para></listitem><listitem class="po-container e509 e509"><para class="po-block e510 e510"><textual class="po-textual">Convert the ProX instance to a shell script.</textual></para></listitem><listitem class="po-container e511 e511"><para class="po-block e512 e512"><textual class="po-textual">Run the script.</textual></para></listitem><listitem class="po-container e513 e513"><para class="po-block e514 e514"><textual class="po-textual">Capture the output.</textual></para></listitem></orderedlist></para><para class="po-block e515 e515"><textual class="po-textual">All of the above is handled by a wrapper XProc pipeline (</textual><xref class="po-milestone e516 e516" linkend="id-wrapper"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).</textual></para><section class="po-hcontainer e517 e517" xml:id="id-resource-map"><title class="po-block e518 e518"><textual class="po-textual">The Resource Map</textual></title><para class="po-block e519 e519"><textual class="po-textual">When processing an XML file, the system needs to list all files required by the
                wrapper pipeline process and the resulting child pipeline process in a
                    </textual><emphasis class="po-inline e520 e520"><textual class="po-textual">resource map XML file</textual></emphasis><textual class="po-textual">, mapping their URNs to temporary
                URLs. This includes the XML to be processed, of course, but also any images and
                other non-XML data. Every XSLT stylesheet required for the processing (for the
                wrapper process as well as the child process) must be listed, as must all XProc
                scripts and whatever files they require.</textual></para><para class="po-block e521 e521"><textual class="po-textual">Also, the system must generate temporary URLs (and, depending on the result, URNs)
                for any resulting files.</textual></para><para class="po-block e522 e522"><textual class="po-textual">The resource map is then used as the sole input by the wrapper pipeline
                process.</textual></para><para class="po-block e523 e523"><textual class="po-textual">All of these files are either listed directly in the ProX blueprint (when known),
                or pointed out indirectly, using the attribute </textual><citation class="po-atom e524 e524"><textual class="po-textual">type</textual></citation><textual class="po-textual"> set to
                    </textual><quote class="po-inline e525 e525"><textual class="po-textual">external</textual></quote><textual class="po-textual">. A ProX process starts with the generation of a basic
                resource map file, using a simple XSLT stylesheet applied to the ProX
                blueprint.</textual></para><para class="po-block e526 e526"><textual class="po-textual">The resource map looks like this:</textual></para><programlisting class="po-block e527 e527" xml:space="preserve"><textual class="po-textual">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;resource-map&gt;
   
   &lt;!-- Source Modules Listed here --&gt;
   &lt;docs&gt;
      
      &lt;!-- NOTE: The doc lists can contain duplicate modules, with the same URN/URL
           pairs. The ProX wrapper XProc and XSLT will handle them. --&gt;
      
      &lt;!-- Document #1 --&gt;
      &lt;!-- One doc, with root and modules incl images --&gt;
      &lt;doc id=""&gt;
         
         &lt;!-- Root document from Process Manager configuration --&gt;
         &lt;!-- ProX instance needs this value --&gt;
         &lt;!-- //*/@type=''external' and //*/@input-type='doc-root' --&gt;
         &lt;root&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:testroot&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/test-root.xml&lt;/url&gt;
               &lt;type&gt;doc-root&lt;/type&gt;
               &lt;prox-id&gt;value-2013-4-9-16-53-8-39562387-&lt;/prox-id&gt;
            &lt;/resource&gt;
         &lt;/root&gt;
         
         &lt;!-- All modules linked from root or its descendants --&gt;
         &lt;!-- XML, images, etc --&gt;
         &lt;modules&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:image1&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/image3.jpg&lt;/url&gt;
               &lt;type&gt;jpg&lt;/type&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:inset1&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/inset1.xml&lt;/url&gt;
               &lt;type&gt;xml&lt;/type&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:inset2&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/inset2.xml&lt;/url&gt;
               &lt;type&gt;xml&lt;/type&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:inset3&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/inset3.xml&lt;/url&gt;
               &lt;type&gt;xml&lt;/type&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:inset4&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/inset4.xml&lt;/url&gt;
               &lt;type&gt;xml&lt;/type&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:block-inset1&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/block-inset1.xml&lt;/url&gt;
               &lt;type&gt;xml&lt;/type&gt;
            &lt;/resource&gt;
         &lt;/modules&gt;    
      &lt;/doc&gt;
      
      
      &lt;!-- Document #2 --&gt;
      &lt;doc id=""&gt;
         
         &lt;!-- Root document from Process Manager configuration --&gt;
         &lt;!-- ProX instance needs this value --&gt;
         &lt;!-- //*/@type=''external' and //*/@input-type='doc-root' --&gt;
         &lt;root&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:testroot&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/test-root.xml&lt;/url&gt;
               &lt;type&gt;doc-root&lt;/type&gt;
               &lt;prox-id&gt;id-html-docroot&lt;/prox-id&gt;
            &lt;/resource&gt;
         &lt;/root&gt;
         
         &lt;!-- All modules linked from root or its descendants --&gt;
         &lt;!-- XML, images, etc --&gt;
         &lt;modules&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:image1&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/image3.jpg&lt;/url&gt;
               &lt;type&gt;jpg&lt;/type&gt;
               &lt;transl&gt;1&lt;/transl&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:inset1&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/inset1.xml&lt;/url&gt;
               &lt;type&gt;xml&lt;/type&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:inset2&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/inset2.xml&lt;/url&gt;
               &lt;type&gt;xml&lt;/type&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:inset3&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/inset3.xml&lt;/url&gt;
               &lt;type&gt;xml&lt;/type&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:inset4&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/inset4.xml&lt;/url&gt;
               &lt;type&gt;xml&lt;/type&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:block-inset1&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/block-inset1.xml&lt;/url&gt;
               &lt;type&gt;xml&lt;/type&gt;
            &lt;/resource&gt;
         &lt;/modules&gt;    
      &lt;/doc&gt;
      
   &lt;/docs&gt;
   
   
   &lt;!-- Runtime targets --&gt;
   &lt;targets&gt;
      &lt;resource&gt;
         &lt;urn&gt;URN-FOR-OUTPUT&lt;/urn&gt;
         &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/my-pdf-internal-file.pdf&lt;/url&gt;
         &lt;type&gt;primary&lt;/type&gt;
         &lt;prox-id&gt;value-2013-4-9-16-53-8-39562387-6&lt;/prox-id&gt;
      &lt;/resource&gt;
      &lt;resource&gt;
         &lt;urn&gt;URN2-FOR-OUTPUT&lt;/urn&gt;
         &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/my-pdf-formal-file.pdf&lt;/url&gt;
         &lt;type&gt;primary&lt;/type&gt;
         &lt;prox-id&gt;value-2013-4-9-16-53-8-39562387-10&lt;/prox-id&gt;
      &lt;/resource&gt;
      &lt;resource&gt;
         &lt;urn&gt;URN-FOR-XREF-XHTML-LOG&lt;/urn&gt;
         &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/my-xref-check.htm&lt;/url&gt;
         &lt;type&gt;primary&lt;/type&gt;
         &lt;prox-id&gt;id-value-xref-htm&lt;/prox-id&gt;
      &lt;/resource&gt;
      &lt;resource&gt;
         &lt;urn&gt;URN-FOR-FILES-LIST-XML&lt;/urn&gt;
         &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/files.xml&lt;/url&gt;
         &lt;type&gt;secondary&lt;/type&gt;
         &lt;prox-id&gt;id-file-url&lt;/prox-id&gt;
      &lt;/resource&gt;
      &lt;resource&gt;
         &lt;urn&gt;URN-FOR-HTM-OUT&lt;/urn&gt;
         &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/my-xhtml-out.htm&lt;/url&gt;
         &lt;type&gt;primary&lt;/type&gt;
         &lt;prox-id&gt;id-htm-out&lt;/prox-id&gt;
      &lt;/resource&gt;
   &lt;/targets&gt;
   
   &lt;!-- ProX blueprint and saved instance(s) --&gt;
   &lt;prox&gt;
      &lt;!-- Blueprint used to get instance is here --&gt;
      &lt;blueprints&gt;
         &lt;resource id="id-prox-blueprint"&gt;
            &lt;urn&gt;URN-OF-PROX-BLUEPRINT&lt;/urn&gt;
            &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/prox-blueprint.xml&lt;/url&gt;
            &lt;type&gt;&lt;/type&gt;
            &lt;prox-id&gt;&lt;/prox-id&gt;
         &lt;/resource&gt;    
      &lt;/blueprints&gt;
      
      &lt;!-- Saved instance to run with wrapper is here --&gt;
      &lt;!-- All these are associated with .config files --&gt;
      &lt;!-- Input to wrapper pipeline --&gt;
      &lt;instances&gt;
         &lt;resource id="id-prox-saved-instance"&gt;
            &lt;urn&gt;URN-OF-SAVED-PROX-INSTANCE&lt;/urn&gt;
            &lt;!--&lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/test-instance.xml&lt;/url&gt;--&gt;
            &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/prox-instance.xml&lt;/url&gt;
            &lt;type&gt;&lt;/type&gt;
            &lt;prox-id&gt;&lt;/prox-id&gt;
         &lt;/resource&gt;
      &lt;/instances&gt;
   &lt;/prox&gt;
   
   &lt;!-- Resources used by ProX Processes --&gt;
   &lt;prox-resources&gt;
      
      &lt;!-- PDF Publishing XProc --&gt;
      &lt;package&gt;
         &lt;name&gt;XProc Pipeline for Normalize, Validate
                  and PDF&lt;/name&gt;
         &lt;resources&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00002715:sv-SE:0.1&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/XProc/publish-cosml-pdf.xpl&lt;/url&gt;
               &lt;prox-id&gt;locator-2013-4-10-10-32-24-12830403-&lt;/prox-id&gt;
            &lt;/resource&gt;
         &lt;/resources&gt;
      &lt;/package&gt;
      
      &lt;!-- PDF Publishing XSL-FO, Internal --&gt;
      &lt;package&gt;
         &lt;name&gt;XSL-FO Package for COSML PDF&lt;/name&gt;
         &lt;resources&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00000232:sv-SE:0.6&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/FO/cos-fo-internal.xsl&lt;/url&gt;
               &lt;prox-id&gt;locator-2013-4-9-16-53-8-39562387-1&lt;/prox-id&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00000074:sv-SE:0.11&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/FO/param.xsl&lt;/url&gt;
               &lt;prox-id&gt;locator-2013-4-9-16-53-8-39562387-2&lt;/prox-id&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00000059:sv-SE:0.2&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/FO/attribute-set.xsl&lt;/url&gt;
               &lt;prox-id&gt;locator-2013-4-9-16-53-8-39562387-3&lt;/prox-id&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00000070:sv-SE:0.15&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/FO/layout.xsl&lt;/url&gt;
               &lt;prox-id&gt;locator-2013-4-9-16-53-8-39562387-4&lt;/prox-id&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00000876:sv-SE:0.2&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/FO/bookmarks.xsl&lt;/url&gt;
               &lt;prox-id&gt;locator-2013-4-9-16-53-8-39562387-5&lt;/prox-id&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00000075:sv-SE:0.17&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/FO/static-content.xsl&lt;/url&gt;
               &lt;prox-id&gt;locator-2013-4-9-16-53-8-39562387-6&lt;/prox-id&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00000072:sv-SE:0.10&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/FO/meta-data.xsl&lt;/url&gt;
               &lt;prox-id&gt;locator-2013-4-9-16-53-8-39562387-7&lt;/prox-id&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00000078:sv-SE:0.9&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/FO/toc.xsl&lt;/url&gt;
               &lt;prox-id&gt;locator-2013-4-9-16-53-8-39562387-8&lt;/prox-id&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00000062:sv-SE:0.9&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/FO/body.xsl&lt;/url&gt;
               &lt;prox-id&gt;locator-2013-4-9-16-53-8-39562387-9&lt;/prox-id&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00000233:sv-SE:0.8&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/FO/sections.xsl&lt;/url&gt;
               &lt;prox-id&gt;locator-2013-4-9-16-53-8-39562387-10&lt;/prox-id&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00000061:sv-SE:0.29&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/FO/block.xsl&lt;/url&gt;
               &lt;prox-id&gt;locator-2013-4-9-16-53-8-39562387-11&lt;/prox-id&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00000065:sv-SE:0.6&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/FO/inline.xsl&lt;/url&gt;
               &lt;prox-id&gt;locator-2013-4-9-16-53-8-39562387-12&lt;/prox-id&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00000071:sv-SE:0.6&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/FO/list.xsl&lt;/url&gt;
               &lt;prox-id&gt;locator-2013-4-9-16-53-8-39562387-13&lt;/prox-id&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00000077:sv-SE:0.6&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/FO/table.xsl&lt;/url&gt;
               &lt;prox-id&gt;locator-2013-4-9-16-53-8-39562387-14&lt;/prox-id&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00000079:sv-SE:0.7&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/FO/xref.xsl&lt;/url&gt;
               &lt;prox-id&gt;locator-2013-4-9-16-53-8-39562387-15&lt;/prox-id&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00000060:sv-SE:0.7&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/FO/back.xsl&lt;/url&gt;
               &lt;prox-id&gt;locator-2013-4-9-16-53-8-39562387-16&lt;/prox-id&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00000064:sv-SE:0.8&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/FO/index.xsl&lt;/url&gt;
               &lt;prox-id&gt;locator-2013-4-9-16-53-8-39562387-17&lt;/prox-id&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00000066:sv-SE:0.2&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/FO/inset.xsl&lt;/url&gt;
               &lt;prox-id&gt;locator-2013-4-9-16-53-8-39562387-18&lt;/prox-id&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00000069:sv-SE:0.3&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/FO/l10n.xsl&lt;/url&gt;
               &lt;prox-id&gt;locator-2013-4-9-16-53-8-39562387-19&lt;/prox-id&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00000063:sv-SE:0.3&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/FO/extension.xsl&lt;/url&gt;
               &lt;prox-id&gt;locator-2013-4-9-16-53-8-39562387-20&lt;/prox-id&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00000785:sv-SE:0.6&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/FO/demo.xsl&lt;/url&gt;
               &lt;prox-id&gt;locator-2013-4-9-16-53-8-39562387-21&lt;/prox-id&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00000076:sv-SE:0.10&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/FO/strings.xml&lt;/url&gt;
               &lt;prox-id&gt;locator-2013-4-9-16-53-8-39562387-22&lt;/prox-id&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00000230:sv-SE:0.1&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/FO/logotyp.jpg&lt;/url&gt;
               &lt;prox-id&gt;locator-2013-4-9-16-53-8-39562387-23&lt;/prox-id&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00000426:sv-SE:0.1&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/FO/tux.jpg&lt;/url&gt;
               &lt;prox-id&gt;locator-2013-4-9-16-53-8-39562387-24&lt;/prox-id&gt;
            &lt;/resource&gt;
         &lt;/resources&gt;
      &lt;/package&gt;
      
      &lt;!-- XHTML Publishing XProc --&gt;
      &lt;package&gt;
         &lt;name&gt;XProc COSML2XHTML&lt;/name&gt;
         &lt;resources&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00002756:sv-SE:0.2&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/XProc/publish-cosml-html.xpl&lt;/url&gt;
               &lt;prox-id&gt;id-xhtml-xproc&lt;/prox-id&gt;
            &lt;/resource&gt;
         &lt;/resources&gt;
      &lt;/package&gt;
      
      &lt;!-- XHTML Publishing XSLT --&gt;
      &lt;package&gt;
         &lt;name&gt;COSML XHTML XSLT&lt;/name&gt;
         &lt;resources&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00002755:sv-SE:0.1&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/Conversions/cosml2html-ti.xsl&lt;/url&gt;
               &lt;prox-id&gt;id-xhtml-xslt&lt;/prox-id&gt;
            &lt;/resource&gt;
         &lt;/resources&gt;
      &lt;/package&gt;
      
      &lt;!-- Xref Check XProc --&gt;
      &lt;package&gt;
         &lt;name&gt;XProc Xref Check&lt;/name&gt;
         &lt;resources&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00002757:sv-SE:0.2&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/XProc/xref-check-cosml.xpl&lt;/url&gt;
               &lt;prox-id&gt;id-xproc-xref&lt;/prox-id&gt;
            &lt;/resource&gt;
         &lt;/resources&gt;
      &lt;/package&gt;
      
      &lt;!-- Xref Check XSLT --&gt;
      &lt;package&gt;
         &lt;name&gt;XSLT Xref Check&lt;/name&gt;
         &lt;resources&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00002754:sv-SE:0.1&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/Conversions/link-target-check-multifile.xsl&lt;/url&gt;
               &lt;prox-id&gt;id-xslt-xref&lt;/prox-id&gt;
            &lt;/resource&gt;
         &lt;/resources&gt;
      &lt;/package&gt;
      
      &lt;!-- Standard Normalize XSLT for Publishing --&gt;
      &lt;package&gt;
         &lt;name&gt;Normalize XSLT&lt;/name&gt;
         &lt;resources&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00000073:sv-SE:0.4&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Cassis/FO/normalize.xsl&lt;/url&gt;
               &lt;prox-id&gt;locator-2013-4-9-16-53-8-39562387-26&lt;/prox-id&gt;
            &lt;/resource&gt;
         &lt;/resources&gt;
      &lt;/package&gt;
      
      &lt;!-- Calabash Engine Configuration --&gt;
      &lt;package&gt;
         &lt;name&gt;Calabash Configuration&lt;/name&gt;
         &lt;resources&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00002745:sv-SE:0.1&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/xmlcalabash-1.0.9-94/conf-calabash.xml&lt;/url&gt;
               &lt;prox-id&gt;id-loc-calabash-config&lt;/prox-id&gt;
            &lt;/resource&gt;
         &lt;/resources&gt;
      &lt;/package&gt;
   &lt;/prox-resources&gt;
   
   
   &lt;!-- Wrapper stuff --&gt;
   &lt;wrapper-pipeline&gt;
      
      &lt;!-- Wrapper Pipeline Resources --&gt;
      &lt;package&gt;
         &lt;name&gt;Wrapper Pipeline Processing&lt;/name&gt;
         &lt;resources&gt;
            &lt;!-- Wrapper Pipeline --&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00002735:sv-SE:0.1&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/prox-wrapper.xpl&lt;/url&gt;
               &lt;prox-id&gt;id-wrapper-xpl&lt;/prox-id&gt;
            &lt;/resource&gt;
            &lt;!-- ProX Instance Update --&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00002732:sv-SE:0.1&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/prox-fix.xsl&lt;/url&gt;
               &lt;prox-id&gt;id-prox-fix&lt;/prox-id&gt;
            &lt;/resource&gt;
            &lt;!-- URN2URL for XML Input --&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00002733:sv-SE:0.1&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/urn2url.xsl&lt;/url&gt;
               &lt;prox-id&gt;id-urn2url&lt;/prox-id&gt;
            &lt;/resource&gt;
            &lt;!-- ProX Instance Conversion to Shell Script --&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00002731:sv-SE:0.1&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/prox2shell.xsl&lt;/url&gt;
               &lt;prox-id&gt;id-prox2bat&lt;/prox-id&gt;
            &lt;/resource&gt;
            &lt;!-- Engine parameters required by ProX to Shell Script conversion --&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:x-cassis:r1:cos:00002734:sv-SE:0.1&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/prox2shell-config.xml&lt;/url&gt;
               &lt;prox-id&gt;id-prox2shell-config&lt;/prox-id&gt;
            &lt;/resource&gt;
         &lt;/resources&gt;
      &lt;/package&gt;
      
      &lt;!-- XForm for ProX Process Configuration --&gt;
      &lt;package&gt;
         &lt;name&gt;ProX XForm&lt;/name&gt;
         &lt;resources&gt;
            &lt;!-- XForm for proX Blueprint Handling --&gt;
            &lt;resource&gt;
               &lt;urn&gt;urn:prox:xform:0.1&lt;/urn&gt;
               &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/prox-xform.xml&lt;/url&gt;
               &lt;prox-id&gt;id-loc-xform&lt;/prox-id&gt;
            &lt;/resource&gt;
         &lt;/resources&gt;
      &lt;/package&gt;
   &lt;/wrapper-pipeline&gt;
&lt;/resource-map&gt;
</textual></programlisting><para class="po-block e528 e528"><textual class="po-textual">This is a complete resource map example, matching the example ProX blueprint in
                    </textual><xref class="po-milestone e529 e529" linkend="section_n4d_s1g_xj"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.
                Note that some of the URNs are for testing purposes only, while others come from the
                actual system.</textual></para><para class="po-block e530 e530"><textual class="po-textual">The resource map is very much like a recipe; it lists every ingredient for every
                ProX process.</textual></para><section class="po-hcontainer e531 e531"><title class="po-block e532 e532"><textual class="po-textual">Docs</textual></title><para class="po-block e533 e533"><textual class="po-textual">The </textual><code class="po-atom e534 e534"><textual class="po-textual">docs</textual></code><textual class="po-textual"> structure lists the input XML and any linked files. More
                    than one document may be listed, and some of those documents may be duplicates
                    because they originate from different pipelines or processes (as is the case in
                    the above resource map). For example, the same document may be used for both PDF
                    and web publishing in a single resulting process instance, and therefore be
                    listed several times. The wrapper pipeline will only process distinct values,
                    however, and there will be no physical duplicates in the temporary processing
                    folder.</textual></para></section><section class="po-hcontainer e535 e535" xml:id="id-targets"><title class="po-block e536 e536"><textual class="po-textual">Targets</textual></title><para class="po-block e537 e537"><textual class="po-textual">The </textual><code class="po-atom e538 e538"><textual class="po-textual">targets</textual></code><textual class="po-textual"> structure lists the runtime target URLs generated by
                    the system. Every target URL is paired with a </textual><emphasis class="po-inline e539 e539"><textual class="po-textual">ProX ID</textual></emphasis><textual class="po-textual"> so
                    that the subsequent processing can place the right URL in the right place in the
                    ProX instance:</textual></para><programlisting class="po-block e540 e540" xml:space="preserve"><textual class="po-textual">&lt;targets&gt;
    ...
    &lt;resource&gt;
        &lt;urn&gt;URN-FOR-FILES-LIST-XML&lt;/urn&gt;
        &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/files.xml&lt;/url&gt;
        &lt;type&gt;secondary&lt;/type&gt;
        &lt;prox-id&gt;id-file-url&lt;/prox-id&gt;
    &lt;/resource&gt;
    &lt;resource&gt;
        &lt;urn&gt;URN-FOR-HTM-OUT&lt;/urn&gt;
        &lt;url&gt;file:///home/ari/mystuff/SGML/DTD/Process-XML/refactor/my-xhtml-out.htm&lt;/url&gt;
        &lt;type&gt;primary&lt;/type&gt;
        &lt;prox-id&gt;id-htm-out&lt;/prox-id&gt;
    &lt;/resource&gt;
&lt;/targets&gt;</textual></programlisting><para class="po-block e541 e541"><textual class="po-textual">Notable is that ProX defines different types of output: </textual><quote class="po-inline e542 e542"><textual class="po-textual">primary</textual></quote><textual class="po-textual">
                    (see above) means that the file is something that the system should save, while
                        </textual><quote class="po-inline e543 e543"><textual class="po-textual">secondary</textual></quote><textual class="po-textual"> is a throwaway, a temporary URL that can be
                    discarded. There's also </textual><quote class="po-inline e544 e544"><textual class="po-textual">log</textual></quote><textual class="po-textual">, that means that the file can be
                    displayed by the system when the process has completed, but what happens to the
                    file later is up to the system to decide.</textual></para></section><section class="po-hcontainer e545 e545"><title class="po-block e546 e546"><textual class="po-textual">ProX Resources</textual></title><para class="po-block e547 e547"><textual class="po-textual">The </textual><code class="po-atom e548 e548"><textual class="po-textual">prox</textual></code><textual class="po-textual"> and </textual><code class="po-atom e549 e549"><textual class="po-textual">prox-resources</textual></code><textual class="po-textual"> structures list the ProX
                    blueprint and the ProX (runtime) instance URN/URL pairs, and the files used by
                    the processes described by the blueprint. The latter include any XSLT, XProc,
                    XML, etc, required for processing, but also any other types of files, whatever
                    they may be.</textual></para></section><section class="po-hcontainer e550 e550"><title class="po-block e551 e551"><textual class="po-textual">Wrapper Resources</textual></title><para class="po-block e552 e552"><textual class="po-textual">The </textual><code class="po-atom e553 e553"><textual class="po-textual">wrapper-pipeline</textual></code><textual class="po-textual"> structure lists the resources required by
                    the wrapper pipeline, including the XForm and the wrapper pipeline
                    itself.</textual></para></section></section><section class="po-hcontainer e554 e554" xml:id="id-wrapper"><title class="po-block e555 e555"><textual class="po-textual">The Wrapper Pipeline</textual></title><para class="po-block e556 e556"><textual class="po-textual">The wrapper pipeline has but one main task: to configure the child pipeline
                process. In principle, this involves producing a ProX instance from the blueprint,
                and then converting that instance to a shell script that is used to run the child
                pipeline process.</textual></para><para class="po-block e557 e557"><textual class="po-textual">The wrapper pipeline requires a single input, the resource map XML file. It
                assumes that the process is carried out in a temporary folder, and that every
                required file is listed in the resource map and moved by the system to the temp
                folder; currently, there is no way for the wrapper to ask the system for a specific
                file based on its URN, even though that functionality is planned in a future
                version.</textual></para><para class="po-block e558 e558"><textual class="po-textual">In a perfect world, the wrapper should be initiated by the system and then take
                over all of the processing, including configuring</textual><footnote class="po-popup e559 e559"><para class="po-block e560 e560"><textual class="po-textual">The XForm needs to know the URL of the ProX blueprint to be used, and it
                        needs to be handed a temporary URL for the runtime ProX instance that
                        results (and a permanent new URN, if the process is saved for later).</textual></para></footnote><textual class="po-textual"> and opening the XForm used to configure the Prox blueprint, wait for the
                user to make her choices and save the resulting instance, and then continue the
                wrapper pipeline process in preparation for the child process. In reality, there are
                a few problems, however:</textual></para><para class="po-block e561 e561"><textual class="po-textual">There is currently no </textual><quote class="po-inline e562 e562"><textual class="po-textual">wait step</textual></quote><textual class="po-textual"> defined in the XProc spec (see Kurt
                Cagle's proposal at </textual><xref class="po-milestone e563 e563" linkend="id-kurt-cagle-xproc"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, or my subsequent thread at </textual><xref class="po-milestone e564 e564" linkend="id-wait-for-user"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">). There
                is no easy way to have a pipeline wait for user input before continuing. What comes
                the closest is an XProc hack that looks something like this</textual><footnote class="po-popup e565 e565"><para class="po-block e566 e566"><textual class="po-textual">And yes, the hack does include conditionals for OS X and Windows, in
                        addition to Linux. Know that OS X is a pain if you want to try this at
                        home.</textual></para></footnote><textual class="po-textual">:</textual></para><programlisting class="po-block e567 e567" xml:space="preserve"><textual class="po-textual">&lt;!-- Open ProX Blueprint in Browser --&gt;
&lt;!-- Opens with an XForms profile in order
         to start a separate browser instance --&gt;
&lt;p:choose name="browse"&gt;
    &lt;!-- Linux --&gt;
    &lt;p:when test="$os='linux'"&gt;
        &lt;p:exec 
            cx:depends-on="fix-xform"
            command="/usr/bin/iceweasel"&gt;
            &lt;p:input port="source"&gt;
                &lt;p:empty/&gt;
            &lt;/p:input&gt;
            &lt;p:with-option name="args" select="concat('-P &amp;quot;XForms&amp;quot; -no-remote ',$xform-url)"/&gt;
        &lt;/p:exec&gt;
        &lt;p:sink/&gt;
    &lt;/p:when&gt;
    
    &lt;!-- Mac OS X --&gt;
    &lt;p:when test="$os='osx'"&gt;
        ...
    &lt;/p:when&gt;
    
    &lt;!-- Windows --&gt;
    &lt;p:when test="$os='win'"&gt;
        ...
    &lt;/p:when&gt;
&lt;/p:choose&gt;</textual></programlisting><para class="po-block e568 e568"><textual class="po-textual">What happens here is basically that while there is no way to tell something like
                an </textual><code class="po-atom e569 e569"><textual class="po-textual">http-request</textual></code><textual class="po-textual"> to wait, at least Calabash will happily wait for the
                    </textual><code class="po-atom e570 e570"><textual class="po-textual">p:exec</textual></code><textual class="po-textual"> to complete (meaning in the above example that the browser
                process is killed) before continuing with the next step, </textual><emphasis class="po-inline e571 e571"><textual class="po-textual">if</textual></emphasis><textual class="po-textual"> the
                XForm is opened in a new thread; if you use your default browser and it happens to
                be running, the wrapper won't know that it should wait. The hack also requires the
                use of the </textual><code class="po-atom e572 e572"><textual class="po-textual">cx:depends-on</textual></code><textual class="po-textual"> extension step to make sure that they'll all
                wait until the </textual><code class="po-atom e573 e573"><textual class="po-textual">p:exec</textual></code><textual class="po-textual"> is done.</textual></para><para class="po-block e574 e574"><textual class="po-textual">After the ProX instance is saved and the browse process killed, the wrapper
                continues by preprocessing the input XML (see below) and the ProX instance that was
                just saved (also see below), before finally converting the instance to a shell
                script, running that shell script, and handling any logs or reports resulting from
                the wrapper or child processes.</textual></para><para class="po-block e575 e575"><textual class="po-textual">When the wrapper process ends, it is up to the system to take care of the
                resulting files and to delete any temporary content, including the temp folder where
                the action took place.</textual></para><section class="po-hcontainer e576 e576"><title class="po-block e577 e577"><textual class="po-textual">URN to URL</textual></title><para class="po-block e578 e578"><textual class="po-textual">The input XML is frequently modularised, like so: </textual></para><figure class="po-container e579 e579"><title class="po-block e580 e580"><textual class="po-textual">Modularised XML</textual></title><mediaobject class="po-container e581 e581"><imageobject class="po-container e582 e582"><imagedata class="po-meta e583 e583" fileref="../../../vol11/graphics/Nordstrom02/Nordstrom02-017.png" width="300px"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e584 e584"><textual class="po-textual">The system uses URNs for all of its linking, which means that whenever an XML
                    document is published, each participating module must first be preprocessed to
                    replace the URN-based links with temporary URL-based ones. Only then can the XML
                    be normalised</textual><footnote class="po-popup e585 e585"><para class="po-block e586 e586"><emphasis class="po-inline e587 e587"><textual class="po-textual">If</textual></emphasis><textual class="po-textual"> the child pipeline normalises it; the wrapper
                            does not.</textual></para></footnote><textual class="po-textual">.</textual></para><para class="po-block e588 e588"><textual class="po-textual">The wrapper pipeline runs an XSLT script that maps URNs to URLs using the
                    resource map. </textual></para></section><section class="po-hcontainer e589 e589"><title class="po-block e590 e590"><textual class="po-textual">ProX Fixes</textual></title><para class="po-block e591 e591"><textual class="po-textual">A similar preprocessing step is required on the saved ProX instance. It
                    contains a number of URNs that need to be replaced with URLs, but also several
                    empty runtime targets that need values from the resource map.</textual></para></section><section class="po-hcontainer e592 e592" xml:id="section_jws_pxg_wj"><title class="po-block e593 e593"><textual class="po-textual">Converting to a Shell Script</textual></title><para class="po-block e594 e594"><textual class="po-textual">The preprocessed ProX instance is then converted to a shell script (in the
                    case of Calabash) using an XSLT stylesheet:</textual></para><programlisting class="po-block e595 e595" xml:space="preserve"><textual class="po-textual">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="2.0"&gt;
    
    &lt;xsl:output method="xml" indent="no"/&gt;
    &lt;xsl:strip-space 
        elements="cmdline script engine-config inputs options params"/&gt;
    
    &lt;xsl:param 
        name="map-url"/&gt;
    
    &lt;xsl:param 
        name="os"/&gt;
    
    &lt;xsl:param 
        name="debug" 
        select="'yes'"/&gt;
    
    &lt;xsl:template match="/"&gt;
        &lt;bat&gt;
            &lt;xsl:choose&gt;
                &lt;xsl:when test="$os='win'"&gt;
                    &lt;xsl:text&gt;REM Generated for Windows&lt;/xsl:text&gt;
                    &lt;xsl:text&gt;&amp;#x0A;&lt;/xsl:text&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:when test="$os='osx'"&gt;
                    &lt;xsl:value-of
                        select="document('prox-xslt2bat-configuration.xml')/config/calabash/shell[@os='osx']/text()"/&gt;
                    &lt;xsl:text&gt;&amp;#x0A;&lt;/xsl:text&gt;
                    &lt;xsl:text&gt;# Generated for OS X&lt;/xsl:text&gt;
                    &lt;xsl:text&gt;&amp;#x0A;&lt;/xsl:text&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:when test="$os='linux'"&gt;
                    &lt;xsl:value-of
                        select="document('prox-xslt2bat-configuration.xml')/config/calabash/shell[@os='linux']/text()"/&gt;
                    &lt;xsl:text&gt;&amp;#x0A;&lt;/xsl:text&gt;
                    &lt;xsl:text&gt;# Generated for Linux&lt;/xsl:text&gt;
                    &lt;xsl:text&gt;&amp;#x0A;&lt;/xsl:text&gt;
                &lt;/xsl:when&gt;
            &lt;/xsl:choose&gt;
            &lt;xsl:apply-templates/&gt;    
        &lt;/bat&gt;
    &lt;/xsl:template&gt;
    
    &lt;xsl:template match="processes"&gt;
        &lt;xsl:apply-templates/&gt;
    &lt;/xsl:template&gt;
    
    &lt;xsl:template match="process"&gt;
        &lt;xsl:apply-templates select=".//metadata"/&gt;
        &lt;xsl:text&gt;java -classpath &lt;/xsl:text&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="$os='win'"&gt;
                &lt;xsl:value-of
                    select="document('prox-xslt2bat-configuration.xml')/config/calabash/classpath[@os='win']/text()"/&gt;        
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$os='osx'"&gt;
                &lt;xsl:value-of
                    select="document('prox-xslt2bat-configuration.xml')/config/calabash/classpath[@os='osx']/text()"/&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$os='linux'"&gt;
                &lt;xsl:value-of
                    select="document('prox-xslt2bat-configuration.xml')/config/calabash/classpath[@os='linux']/text()"/&gt;
            &lt;/xsl:when&gt;
        &lt;/xsl:choose&gt;
        
        &lt;xsl:text&gt; com.xmlcalabash.drivers.Main &lt;/xsl:text&gt;
        &lt;xsl:apply-templates select="pipelines/pipeline"/&gt;
        
        &lt;!-- Debug mode --&gt;
        &lt;xsl:if test="$debug='yes'"&gt;
            &lt;xsl:choose&gt;
                &lt;xsl:when test="$os='osx' or $os='linux'"&gt;
                    &lt;xsl:text&gt;&amp;#x0A;&lt;/xsl:text&gt;
                    &lt;xsl:text&gt;read -p "Press [Enter] to continue..."&lt;/xsl:text&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:when test="$os='win'"&gt;
                    &lt;xsl:text&gt;&amp;#x0A;&lt;/xsl:text&gt;
                    &lt;xsl:text&gt;pause&lt;/xsl:text&gt;
                &lt;/xsl:when&gt;
            &lt;/xsl:choose&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;
    
    &lt;xsl:template match="pipeline"&gt;
        &lt;!--        &lt;xsl:apply-templates select="metadata"/&gt;--&gt;
        &lt;xsl:apply-templates select="cmdlines/cmdline"/&gt;
        &lt;xsl:text&gt; &lt;/xsl:text&gt;
        &lt;xsl:apply-templates select="script"/&gt;
    &lt;/xsl:template&gt;
    
    &lt;xsl:template match="script"&gt;
        &lt;!-- @xlink:href refers to package --&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="@type='pkg'"&gt;
                &lt;xsl:call-template name="fragment-id"/&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:value-of select="."/&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;
    
    &lt;xsl:template match="cmdline"&gt;
        &lt;xsl:apply-templates select="engine-config"/&gt;
        &lt;xsl:apply-templates select="inputs"/&gt;
        &lt;xsl:apply-templates select="outputs"/&gt;
        &lt;xsl:apply-templates select="options"/&gt;
        &lt;xsl:apply-templates select="params"/&gt;
    &lt;/xsl:template&gt;
    
    &lt;!-- XProc Engine-specific Configuration --&gt;
    &lt;xsl:template match="enginge-config"&gt;
        &lt;xsl:apply-templates select="config"/&gt;
    &lt;/xsl:template&gt;
    
    &lt;xsl:template match="config"&gt;
        &lt;xsl:text&gt;--config&lt;/xsl:text&gt;
        &lt;xsl:text&gt; &lt;/xsl:text&gt;
        &lt;xsl:call-template name="fragment-id"/&gt;
        &lt;xsl:text&gt; &lt;/xsl:text&gt;
    &lt;/xsl:template&gt;
    
    
    
    &lt;!-- Inputs --&gt;
    
    &lt;xsl:template match="inputs"&gt;
        &lt;xsl:apply-templates select="input"/&gt;
    &lt;/xsl:template&gt;
    
    &lt;xsl:template match="input"&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="matches(port,'map')"&gt;
                &lt;!-- Standard input for map URL --&gt;
                &lt;xsl:text&gt;--input map=&lt;/xsl:text&gt;
                &lt;xsl:value-of select="$map-url"/&gt;
                &lt;xsl:text&gt; &lt;/xsl:text&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:text&gt;--input &lt;/xsl:text&gt;
                &lt;xsl:value-of select="port"/&gt;
                &lt;xsl:text&gt;=&lt;/xsl:text&gt;
                &lt;xsl:apply-templates select="value"/&gt;
                &lt;xsl:text&gt; &lt;/xsl:text&gt;
                &lt;xsl:apply-templates select="params"/&gt;        
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;
    
    
    
    &lt;!-- Options --&gt;
    
    &lt;xsl:template match="options"&gt;
        &lt;xsl:apply-templates select="option"/&gt;
    &lt;/xsl:template&gt;
    
    &lt;xsl:template match="option"&gt;
        &lt;xsl:value-of select="name"/&gt;
        &lt;xsl:text&gt;=&lt;/xsl:text&gt;
        &lt;xsl:apply-templates select="value"/&gt;
        &lt;xsl:text&gt; &lt;/xsl:text&gt;
    &lt;/xsl:template&gt;
    
    
    
    &lt;!-- Parameters for XSLT --&gt;
    
    &lt;xsl:template match="params"&gt;
        &lt;xsl:apply-templates select="param"/&gt;
    &lt;/xsl:template&gt;
    
    &lt;xsl:template match="param"&gt;
        &lt;xsl:text&gt;--with-param &lt;/xsl:text&gt;
        &lt;xsl:value-of select="port"/&gt;
        &lt;xsl:text&gt;@&lt;/xsl:text&gt;
        &lt;xsl:value-of select="name"/&gt;
        &lt;xsl:text&gt;=&lt;/xsl:text&gt;
        &lt;xsl:apply-templates select="value"/&gt;
        &lt;xsl:text&gt; &lt;/xsl:text&gt;
    &lt;/xsl:template&gt;
    
    &lt;xsl:template match="value"&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="@type='pkg'"&gt;
                &lt;xsl:call-template name="fragment-id"/&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="@type='external'"&gt;
                &lt;!-- "ti" previously --&gt;
                &lt;!-- External value --&gt;
                &lt;xsl:value-of select="." exclude-result-prefixes="#all"/&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="@type='uri'"&gt;
                &lt;!-- Single-resource URI --&gt;
                &lt;xsl:value-of select="."/&gt;
            &lt;/xsl:when&gt;
            &lt;!-- Fallback: single file assumed --&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:value-of select="."/&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;
    
    &lt;xsl:template name="fragment-id"&gt;
        &lt;xsl:variable name="href" select="./@xlink:href"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="contains(@xlink:href,'#')"&gt;
                &lt;xsl:value-of
                    select="//package[@id=substring-after($href,'#')]/locator[@type='main']/@xlink:href"/&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:value-of select="//package[@id=$href]/locator[@type='main']/@xlink:href"/&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;
    
    
    
    &lt;!-- Metadata Handling --&gt;
    
    &lt;xsl:template match="metadata"&gt;
        &lt;xsl:apply-templates/&gt;
    &lt;/xsl:template&gt;
    
    &lt;xsl:template match="title"&gt;
        &lt;xsl:text&gt;echo &lt;/xsl:text&gt;
        &lt;xsl:value-of select="normalize-space(.)"/&gt;
    &lt;/xsl:template&gt;
    
    &lt;xsl:template match="description"&gt;
        &lt;xsl:apply-templates select="p"/&gt;
    &lt;/xsl:template&gt;
    
    &lt;xsl:template match="p"&gt;
        &lt;xsl:text&gt;echo &lt;/xsl:text&gt;
        &lt;xsl:value-of select="normalize-space(.)"/&gt;
    &lt;/xsl:template&gt;
    
    
&lt;/xsl:stylesheet&gt;
</textual></programlisting><para class="po-block e596 e596"><textual class="po-textual">This does not process any engine-specific options, nor does it handle
                        </textual><code class="po-atom e597 e597"><textual class="po-textual">data-input</textual></code><textual class="po-textual">s.</textual></para><para class="po-block e598 e598"><textual class="po-textual">Note that the XSLT uses a configuration file that lists the
                        </textual><code class="po-atom e599 e599"><textual class="po-textual">CLASSPATH</textual></code><textual class="po-textual">s and other OS- and system-specific strings.</textual></para></section></section><section class="po-hcontainer e600 e600"><title class="po-block e601 e601"><textual class="po-textual">Child Process and Capturing Output</textual></title><para class="po-block e602 e602"><textual class="po-textual">The shell script (or batch file) that results from the conversion is saved and
                then run using a </textual><code class="po-atom e603 e603"><textual class="po-textual">p:exec</textual></code><textual class="po-textual"> step:</textual></para><programlisting class="po-block e604 e604" xml:space="preserve"><textual class="po-textual">&lt;!-- Store generated shell script and run it --&gt;
&lt;p:choose&gt;
    &lt;!-- Linux --&gt;
    &lt;p:when test="$os='linux'"&gt;
        &lt;!-- Save shell script --&gt;
        &lt;p:store method="text" name="save-bat"&gt;
            &lt;p:with-option name="href" select="'out2.sh'"/&gt;
        &lt;/p:store&gt;
        &lt;!-- Run --&gt;
        &lt;p:exec 
            source-is-xml="false" 
            result-is-xml="false" 
            name="run-bat" 
            cx:depends-on="save-bat"&gt;
            &lt;p:with-option name="command" select="'sh'"/&gt;
            &lt;p:with-option name="args" select="'./out2.sh'"/&gt;
            &lt;p:with-option name="cwd" select="substring($tmp-url,6, string-length($tmp-url)-1)"/&gt;
            &lt;p:log port="errors" href="error.txt"/&gt;
            &lt;p:input port="source"&gt;
                &lt;p:empty/&gt;
            &lt;/p:input&gt;
        &lt;/p:exec&gt;
        &lt;p:sink/&gt;
    &lt;/p:when&gt;
    
    &lt;!-- OS X --&gt;
    &lt;p:when test="$os='osx'"&gt;
        ...
    &lt;/p:when&gt;
    
    &lt;!-- Windows --&gt;
    &lt;p:when test="$os='win'"&gt;
        ...
    &lt;/p:when&gt;
&lt;/p:choose&gt;</textual></programlisting><para class="po-block e605 e605"><textual class="po-textual">And yes, again, there are OS-specific hacks in there. While the system is purely
                Windows, I much prefer developing on Linux or Mac, and so made the necessary changes
                for at least a rudimentary OS independence.</textual></para></section><section class="po-hcontainer e606 e606" xml:id="section_fc4_2bz_wj"><title class="po-block e607 e607"><textual class="po-textual">XForms Engine</textual></title><para class="po-block e608 e608"><textual class="po-textual">The XForm currently runs on </textual><emphasis class="po-inline e609 e609"><textual class="po-textual">XSLTForms</textual></emphasis><textual class="po-textual">. The decision to use
                XSLTForms was a practical one; I'm running it locally for ProX user interfaces,
                without a server, but XSLTForms is just as easy to get to run on the server.</textual></para><para class="po-block e610 e610"><textual class="po-textual">There are some mostly minor but noteworthy issues:</textual><itemizedlist class="po-table e611 e611"><listitem class="po-container e612 e612"><para class="po-block e613 e613"><textual class="po-textual">
                            </textual><code class="po-atom e614 e614"><textual class="po-textual">xf:code</textual></code><textual class="po-textual"> is not implemented so </textual><code class="po-atom e615 e615"><textual class="po-textual">xf:insert</textual></code><textual class="po-textual"> must
                            be used instead. No biggie, but it helps to know about it.</textual></para></listitem><listitem class="po-container e616 e616"><para class="po-block e617 e617"><textual class="po-textual">For local use (seems to be the same on Windows, OS X and Linux), the
                            stylesheet PI pointing out the XSLT not only needs to be relative; the
                            XSLT needs to be in a descendant directory. This is very strange and it
                            took me some time before I noticed what was going on.</textual></para></listitem><listitem class="po-container e618 e618"><para class="po-block e619 e619"><textual class="po-textual">Local submissions using relative URLs (for example, as described at
                                </textual><link class="po-inline e620 e620" xlink:actuate="onRequest" xlink:href="https://en.wikibooks.org/wiki/XForms/Submit" xlink:show="new" xlink:type="simple"><textual class="po-textual">https://en.wikibooks.org/wiki/XForms/Submit</textual></link><textual class="po-textual">) fail silently
                            on a Windows machine. It seems that Microsoft never introduced a
                            standard way of expressing their relative file paths, but
                                </textual><code class="po-atom e621 e621"><textual class="po-textual">action="file://myfile.xml"</textual></code><textual class="po-textual"> works.</textual></para></listitem><listitem class="po-container e622 e622"><para class="po-block e623 e623"><textual class="po-textual">Local submits, even with the right relative URLs, will always enforce
                            a </textual><emphasis class="po-inline e624 e624"><textual class="po-textual">Save As</textual></emphasis><textual class="po-textual"> dialogue. This is annoying but only a
                            problem locally where the file system is, in fact, at risk.</textual></para></listitem><listitem class="po-container e625 e625"><para class="po-block e626 e626"><textual class="po-textual">And, depending on the platform, the Java applet run when submitting
                            can cause endless grief, from warnings when running it to failing,
                            either silently or with a bang. OS X is particularly difficult in this
                            respect.</textual></para></listitem><listitem class="po-container e627 e627"><para class="po-block e628 e628"><textual class="po-textual">And lastly, XSLTForms converts XForms to HTML and JavaScript. Running
                            this locally can cause some unpredictability, depending on the browser.
                            On Windows, </textual><emphasis class="po-inline e629 e629"><textual class="po-textual">Internet Explorer</textual></emphasis><textual class="po-textual"> can frequently refuse
                            to run code that works without a hitch in </textual><emphasis class="po-inline e630 e630"><textual class="po-textual">Firefox</textual></emphasis><textual class="po-textual">
                            and </textual><emphasis class="po-inline e631 e631"><textual class="po-textual">Safari</textual></emphasis><textual class="po-textual">. On the other hand, on that same Windows
                            machine, </textual><emphasis class="po-inline e632 e632"><textual class="po-textual">Safari</textual></emphasis><textual class="po-textual"> then quit running XSLTForms
                            altogether, following a Java update.</textual></para></listitem></itemizedlist><textual class="po-textual">
            </textual></para><para class="po-block e633 e633"><textual class="po-textual">Run from a server, XSLTForms works like a charm.</textual></para></section><section class="po-hcontainer e634 e634" xml:id="section_xs1_jcz_wj"><title class="po-block e635 e635"><textual class="po-textual">XProc Engine</textual></title><para class="po-block e636 e636"><textual class="po-textual">Currently, I'm using Calabash (</textual><xref class="po-milestone e637 e637" linkend="id-xmlcalabash"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) to run the pipelines configured with ProX. This is
                unlikely to change any time soon for the system being implemented now; there aren't
                that many viable alternatives that aren't part of a competitor's product. ProX
                started out as a reflection of the Calabash way of doing things.</textual></para><para class="po-block e638 e638"><textual class="po-textual">There are other systems, though, where another engine might better match the
                system's requirements. </textual><emphasis class="po-inline e639 e639"><textual class="po-textual">eXist</textual></emphasis><textual class="po-textual">, for example, includes
                    </textual><emphasis class="po-inline e640 e640"><textual class="po-textual">xprocxq</textual></emphasis><textual class="po-textual"> (</textual><xref class="po-milestone e641 e641" linkend="id-xprocxq"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">), an XQuery-based XProc engine that is configured using
                an XML-based set of parameters. Converting a ProX instance to the xprocxq format
                should be uncomplicated but the engine's current state in eXist makes it difficult
                to test. A new version for </textual><emphasis class="po-inline e642 e642"><textual class="po-textual">MarkLogic</textual></emphasis><textual class="po-textual"> was announced recently,
                and presented (</textual><xref class="po-milestone e643 e643" linkend="id-jimf-xmllondon"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) at </textual><emphasis class="po-inline e644 e644"><textual class="po-textual">XML London</textual></emphasis><textual class="po-textual"> in June
                2013.</textual></para></section></section><section class="po-hcontainer e645 e645"><title class="po-block e646 e646"><textual class="po-textual">End Notes</textual></title><section class="po-hcontainer e647 e647"><title class="po-block e648 e648"><textual class="po-textual">What The Future Holds</textual></title><para class="po-block e649 e649"><textual class="po-textual">ProX is still a work in progress, even though it's now running locally and on a
                pre-release system. Here are some of my future plans:</textual></para><itemizedlist class="po-table e650 e650"><listitem class="po-container e651 e651"><para class="po-block e652 e652"><textual class="po-textual">Add (and expand?) metadata where needed. The main structures
                            (</textual><code class="po-atom e653 e653"><textual class="po-textual">process</textual></code><textual class="po-textual">, </textual><code class="po-atom e654 e654"><textual class="po-textual">pipeline</textual></code><textual class="po-textual">, </textual><code class="po-atom e655 e655"><textual class="po-textual">cmdline</textual></code><textual class="po-textual">)
                        include metadata used to generate help for these sections, but just as
                        useful would be to add it to all user-configurable structures. Stylesheet
                        parameters, for one, would greatly benefit from help texts, but also from
                        better GUI display names (see </textual><xref class="po-milestone e656 e656" linkend="id-param-config"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).</textual></para></listitem><listitem class="po-container e657 e657"><para class="po-block e658 e658"><textual class="po-textual">GUI localisation. XForms is not easily modularised in reusable components
                        (it's not, at all), but it would be useful to move any GUI labels and help
                        texts to a file that can be localised.</textual></para></listitem><listitem class="po-container e659 e659"><para class="po-block e660 e660"><textual class="po-textual">A ProX implementation for eXist. XProc is not currently well supported in
                        eXist itself. </textual><emphasis class="po-inline e661 e661"><textual class="po-textual">xprocxq</textual></emphasis><textual class="po-textual"> is more or less broken in it, as
                        is the </textual><emphasis class="po-inline e662 e662"><textual class="po-textual">Calabash</textual></emphasis><textual class="po-textual"> module, but it is perfectly feasible to
                        run XProc pipelines outside eXist itself using James Sulak's XProc extension
                        library (</textual><xref class="po-milestone e663 e663" linkend="id-sulak"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, </textual><xref class="po-milestone e664 e664" linkend="id-xmlprague-2013-existential"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).</textual></para></listitem><listitem class="po-container e665 e665"><para class="po-block e666 e666"><textual class="po-textual">Various XForms additions and fixes, specifically a standardised XForm
                        preprocessing step in the wrapper script that might be used to handle a
                        modularised XForms GUI.</textual></para></listitem><listitem class="po-container e667 e667"><para class="po-block e668 e668"><textual class="po-textual">To lessen the dependency on the resource map XML: Resource retrieval in
                        the system based on a known URN (something like </textual><code class="po-atom e669 e669"><textual class="po-textual">getUrl(Urn)</textual></code><textual class="po-textual">).
                        Also, target URL generation and better handling of the temporary folder in
                        the system.</textual></para></listitem><listitem class="po-container e670 e670"><para class="po-block e671 e671"><textual class="po-textual">Prepare and release an open source version of the ProX package. A few of
                        the scripts in ProX are system-specific, but it should be straight-forward
                        to do a generic version.</textual></para></listitem></itemizedlist></section><section class="po-hcontainer e672 e672" xml:id="section_qsd_bbh_wj"><title class="po-block e673 e673"><textual class="po-textual">Last But Not Least</textual></title><para class="po-block e674 e674"><textual class="po-textual">
                </textual><emphasis class="po-inline e675 e675"><textual class="po-textual">Huge</textual></emphasis><textual class="po-textual"> thanks must go to Mark Lawson, who not only pointed out
                that </textual><code class="po-atom e676 e676"><textual class="po-textual">xf:copy</textual></code><textual class="po-textual"> is currently not supported by
                    </textual><emphasis class="po-inline e677 e677"><textual class="po-textual">XSLTForms</textual></emphasis><textual class="po-textual">, but also wrote the XForm that is the basis for
                the ProX GUI (see </textual><xref class="po-milestone e678 e678" linkend="section_rvp_fr5_wj"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">). That's another way of saying that he provided
                all of the basic XForms logic and I only had to add to it.</textual></para><para class="po-block e679 e679"><textual class="po-textual">Thanks also to Norman Walsh, without whom I certainly wouldn't be writing a paper
                involving XProc, to Jim Fuller, who has provided me with valuable XProc hints and
                tips on numerous occasions, and to my friend Henrik Mårtensson who patiently helped
                me get ProX to run on my Mac.</textual></para><para class="po-block e680 e680"><textual class="po-textual">Thanks must also go to the Balisage program committee and their brilliant blurb.
                If you read this, the blurb is probably why.</textual></para><para class="po-block e681 e681"><textual class="po-textual">Finally, any errors and omissions on these pages should be attributed to me, and
                me only. You can lead a horse to the water but you can't make it drink.</textual></para></section></section><bibliography class="po-hcontainer e682 e682"><title class="po-block e683 e683"><textual class="po-textual">Bibliography</textual></title><bibliomixed class="po-block e684 e684" xml:id="id-balVol08-Nordstrom01"><textual class="po-textual">Using XML to Implement XML, Ari Nordström. 
                </textual><link class="po-inline e685 e685" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.balisage.net/Proceedings/vol8/html/Nordstrom01/BalisageVol8-Nordstrom01.html</textual></link><textual class="po-textual">. doi:</textual><biblioid class="po-atom e686 doi e686"><textual class="po-textual">10.4242/BalisageVol8.Nordstrom01</textual></biblioid></bibliomixed><bibliomixed class="po-block e687 e687" xml:id="id-xproc-spec"><textual class="po-textual">XProc: An XML Pipeline Language,
                Recommendation. </textual><link class="po-inline e688 e688" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xproc/</textual></link></bibliomixed><bibliomixed class="po-block e689 e689" xml:id="id-xmlcalabash"><textual class="po-textual">XML
            Calabash. </textual><link class="po-inline e690 e690" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://xmlcalabash.com/</textual></link></bibliomixed><bibliomixed class="po-block e691 e691" xml:id="id-calabash"><textual class="po-textual">XML Calabash Reference, Norman Walsh. 
                </textual><link class="po-inline e692 e692" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://xmlcalabash.com/docs/reference/</textual></link></bibliomixed><bibliomixed class="po-block e693 e693" xml:id="id-xprocxq"><textual class="po-textual">xprocxq in eXist, James Fuller. Documentation currently
            missing at </textual><link class="po-inline e694 e694" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://exist-db.org/exist/apps/doc/xproc/xproc.xml</textual></link></bibliomixed><bibliomixed class="po-block e695 e695" xml:id="id-freemind-xsd"><textual class="po-textual">FreeMind XML format.  </textual><link class="po-inline e696 e696" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://freemind.cvs.sourceforge.net/viewvc/freemind/freemind/freemind.xsd?revision=1.2&amp;view=markup</textual></link></bibliomixed><bibliomixed class="po-block e697 e697" xml:id="id-xforms-spec"><textual class="po-textual">XForms 1.1
                Recommendation. </textual><link class="po-inline e698 e698" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xforms/</textual></link></bibliomixed><bibliomixed class="po-block e699 e699" xml:id="id-mvc-xforms-eric-vdl"><textual class="po-textual">When MVC becomes a burden for XForms, Eric van
            der Vlist.  </textual><link class="po-inline e700 e700" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://eric.van-der-vlist.com/blog/2013/06/17/when-mvc-becomes-a-burden-for-xforms-xml-london-2013/</textual></link></bibliomixed><bibliomixed class="po-block e701 e701" xml:id="id-kurt-cagle-xproc"><textual class="po-textual">Re: Immediate Market Needs for
                XProc. </textual><link class="po-inline e702 e702" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://lists.w3.org/Archives/Public/xproc-dev/2009May/0030.html</textual></link></bibliomixed><bibliomixed class="po-block e703 e703" xml:id="id-wait-for-user"><textual class="po-textual">Wait for User Input (xproc-dev
                thread). </textual><link class="po-inline e704 e704" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://lists.w3.org/Archives/Public/xproc-dev/2013May/0008.html</textual></link></bibliomixed><bibliomixed class="po-block e705 e705" xml:id="id-jimf-xmllondon"><textual class="po-textual">Architecture of xproc.xq an XProc processor.  </textual><link class="po-inline e706 e706" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://es.slideshare.net/jimfuller2009/xml-london-2013-architecture-of-xprocxq-an-xproc-processor</textual></link></bibliomixed><bibliomixed class="po-block e707 e707" xml:id="id-sulak"><textual class="po-textual">eXist XProc Extension
                Library. </textual><link class="po-inline e708 e708" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">https://github.com/jsulak/eXist-XProc-Library</textual></link></bibliomixed><bibliomixed class="po-block e709 e709" xml:id="id-xmlprague-2013-existential"><textual class="po-textual">eXistential Issues in Farming, XML Prague
                2013. </textual><link class="po-inline e710 e710" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://archive.xmlprague.cz/2013/files/xmlprague-2013-proceedings.pdf</textual></link></bibliomixed></bibliography></article></classedDocument>