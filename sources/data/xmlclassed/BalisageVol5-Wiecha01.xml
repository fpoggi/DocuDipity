<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.2" xml:id="HR-23632987-8973"><title class="po-block e1 e1"><textual class="po-textual">Where XForms Meets the Glass</textual></title><subtitle class="po-block e2 e2"><textual class="po-textual">Bridging Between Data and Interaction Design</textual></subtitle><info class="po-record e3 e3"><confgroup class="po-record e4 e4"><conftitle class="po-field e5 e5"><textual class="po-textual">Balisage: The Markup Conference 2010</textual></conftitle><confdates class="po-field e6 e6"><textual class="po-textual">August 3 - 6, 2010</textual></confdates></confgroup><abstract class="po-container e7 e7"><para class="po-block e8 e8"><textual class="po-textual">We have observed two prevalent design paradigms for web applications: those who start from
      an existing data or process definition and project from that outward toward the user, and those
      conversely who start from a sense of desired user experience and derive from that required
      data and process elements.  Design methods which seem natural to one community may look
      overly abstract, layered with unnecessary separation of concerns, and academic to no purpose.
      Conversely, others may be frustrated by a seeming lack of concern for reuse, valid content, and
      support for multiple design roles all of which may argue for additional architectural layers.
      Due to affinity of current web presentation technology to JSON encoded data, many times the 
      choice to start with user experience precludes re-use of existing XML data.  
      We present an approach to bridging this methodology and data divide by working within the conventions of existing 
      web application frameworks to introduce incremental separation of concerns such as Model-View
      layering with interfaces and behavior suited to the introduction of XML-based technologies
      such as XForms at the model layer.  In this way we hope to provide incremental means to adopt
      first a separation of concerns that supports packaging and reuse of model data and behavior, 
      and secondly an XML-based technology for such data models that supports convenient projection
      of existing business data and process definitions to the client for user interaction.</textual></para></abstract><author class="po-record e9 e9"><personname class="po-record e10 e10"><firstname class="po-field e11 e11"><textual class="po-textual">Charlie</textual></firstname><surname class="po-field e12 e12"><textual class="po-textual">Wiecha</textual></surname></personname><personblurb class="po-container e13 e13"><para class="po-block e14 e14"><textual class="po-textual">A Research Staff Member at IBM's T.J. Watson lab, Charlie is interested in web programming models and middleware.
        He is a member of the W3C XForms Working Group, previously Chaired the W3C Rich Web Application Backplane Incubator Group,
        and more recently has been exploring extensions to AJAX frameworks to simplify authoring of web applications focusing
        on accessing and interating with rich data and business processes.</textual></para></personblurb><affiliation class="po-record e15 e15"><jobtitle class="po-field e16 e16"><textual class="po-textual">Research Staff Member</textual></jobtitle><orgname class="po-block e17 e17"><textual class="po-textual">IBM T.J. Watson Research Center, Yorktown Heights, NY</textual></orgname></affiliation><email class="po-field e18 e18"><textual class="po-textual">wiecha@us.ibm.com</textual></email></author><author class="po-record e19 e19"><personname class="po-record e20 e20"><firstname class="po-field e21 e21"><textual class="po-textual">Rahul</textual></firstname><surname class="po-field e22 e22"><textual class="po-textual">Akolkar</textual></surname></personname><personblurb class="po-container e23 e23"><para class="po-block e24 e24"><textual class="po-textual">Rahul Akolkar is part of the Advanced Enterprise Middleware department at the IBM Watson Research Center in New York.
		He is a member of the W3C Voice Browser Working Group, where he is co-editor of the State Chart XML and Voice XML 3.0
		specifications. He has contributed to various open source projects, and is an elected Member of the Apache Software
		Foundation.</textual></para></personblurb><affiliation class="po-record e25 e25"><jobtitle class="po-field e26 e26"><textual class="po-textual">Senior Software Engineer</textual></jobtitle><orgname class="po-block e27 e27"><textual class="po-textual">IBM T.J. Watson Research Center, Yorktown Heights, NY</textual></orgname></affiliation><email class="po-field e28 e28"><textual class="po-textual">akolkar@us.ibm.com</textual></email></author><author class="po-record e29 e29"><personname class="po-record e30 e30"><firstname class="po-field e31 e31"><textual class="po-textual">Andrew</textual></firstname><surname class="po-field e32 e32"><textual class="po-textual">Spyker</textual></surname></personname><personblurb class="po-container e33 e33"><para class="po-block e34 e34"><textual class="po-textual">
          As a Senior Technical Staff Member (STSM) in the WebSphere Application Server development teams, 
          Andrew focuses on three major areas. With five years of experience leading the WebSphere Application Server 
          performance team, he advises the performance team. As a SOA runtime architect, 
          he owns driving consistency across IBM SOA runtimes with focus on benchmarking strategy, performance, 
          and XML consistency. Finally, Andrew owns the creation and driving of the XML strategy of the WebSphere portfolio. 
          Currently he is the chief architect of the WebSphere Application Server XML Feature Pack.
        </textual></para></personblurb><affiliation class="po-record e35 e35"><jobtitle class="po-field e36 e36"><textual class="po-textual">Senior Technical Staff Member</textual></jobtitle><orgname class="po-block e37 e37"><textual class="po-textual">IBM Software Group, Research Triangle Park, NC</textual></orgname></affiliation><email class="po-field e38 e38"><textual class="po-textual">aspyker@us.ibm.com</textual></email></author><legalnotice class="po-container e39 e39"><para class="po-block e40 e40"><textual class="po-textual">Copyright © 2010 IBM Corporation.  Used by permission.</textual></para></legalnotice><keywordset class="po-table e41 e41" role="author"><keyword class="po-field e42 e42"><textual class="po-textual">XForms</textual></keyword><keyword class="po-field e43 e43"><textual class="po-textual">AJAX</textual></keyword><keyword class="po-field e44 e44"><textual class="po-textual">Web</textual></keyword></keywordset></info><section class="po-hcontainer e45 e45"><title class="po-block e46 e46"><textual class="po-textual">Introduction to Web 2.0 Application Frameworks</textual></title><para class="po-block e47 e47"><textual class="po-textual">
    With the rise of Web 2.0 applications, the balance of processing for end-user interaction represented by the server vs. the browser has shifted
    increasingly toward the browser.  There are two benefits of this shift.  First, interactions that can be handled without submission to the server 
    can decrease latency when processing is entirely related to the UI and located on the client.  
    As an example, adding and removing a “zip code” form element based upon a selection of “United States” 
    in another “Country” form element can be done entirely in the browser without a server round trip for a new page.  
    Second, data load/save operations can run asynchronously while users interact with a web page.  
    As an example, an initial page can load with partial data in a table, but as the user interacts with that table, 
    more data could be loaded from the server without requiring the user to wait for an entire web page refresh.
    </textual></para><para class="po-block e48 e48"><textual class="po-textual">
    Many of the above examples are powered by a programming style in the browser called AJAX (Asynchronous JavaScript and XML).  
    As will be explained later, despite the name, XML is not required and more frequently than not the data is JSON encoded.
    </textual></para><para class="po-block e49 e49"><textual class="po-textual">
    There are multiple frameworks that build upon JavaScript and AJAX that help with abstraction of page interaction and 
    events and provide cross browser portability.  Many of these frameworks provide “widget” libraries that build upon 
    HTML, CSS, and JavaScript to provide commonly known UI controls such as trees, tables, input form elements.  
    The widgets provide the View in a typical MVC (Model View Controller </textual><citation class="po-atom e50 e50" linkend="MVCdefined"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></citation><textual class="po-textual">) architecture.  
    These widgets read and write data (for example the text “90210” in the “zip code” form element) 
    either to the page DOM data or to abstracted data stores.  This storage provides the Model in the MVC pattern.  
    Manipulation of the data is typically done in JavaScript-based event handlers (the Controller in MVC).  
    As part of this manipulation, when the data is read and written to the server asynchronously, it is common to 
    encode this data as JSON data.  Encoding the data as JSON data is typical as JSON data natively loads into 
    JavaScript and aligns well with the JavaScript programming model skills the programmer is already using within the framework.
    </textual></para><para class="po-block e51 e51"><textual class="po-textual">
      Given this set of Web 2.0 languages, programming models, and components,  
      most developers work to create an optimal user experience within the natural affordances of the available technologies.  
      We believe this often implies following a "glass to data" design process where the UI implies a model that is close to its structure
      but likely differs from back-end data designs. 
      Also, the encoding for data in this style will likely be 
      JSON based upon prevelant development experience.   As this Web 2.0 interface needs to be integrated with 
      existing enterprise data on the server, there will be a collision both in data structures and in encoding technologies.
      Typically this collision is worked around by writing transformation routines on the server between 
      JSON, Web 2.0 model and XML, enterprise data model.  This transformation then needs to be maintained and 
      adjusted whenever either the Web 2.0 model or enterprise data model changes which is costly.
    </textual></para><para class="po-block e52 e52"><textual class="po-textual">
    A design process that starts rather from back-end data structures and works toward front-end UI design we refer to as
    "data to glass" design.  There are AJAX data stores that partly support this design style and 
    allow XML data sources to be the backing store for 
    widgets (such as Dojo’s dojo.data interface </textual><citation class="po-atom e53 e53" linkend="DojoToolkit"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></citation><textual class="po-textual">). 
    While these stores can handle some XML data, the data needs to adhere to the exact XML format as required by the data store.  
    This can be problematic if the XML instance was authored without consideration of the data store.  
    Some examples of the problems are shown in Andrew Spyker’s blog post on 
    “The Pain of XML in Web 2.0” </textual><citation class="po-atom e54 e54" linkend="SpykerWeb20XML"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></citation><textual class="po-textual">.
    </textual></para><para class="po-block e55 e55"><textual class="po-textual">
    There are two ways to solve this cost of transformation.  One option, which has been gaining traction, 
    is to throw away the enterprise model and XML.  One can take the JSON objects and work with them via 
    JavaScript on the server via Rhino </textual><citation class="po-atom e56 e56" linkend="rhino"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></citation><textual class="po-textual">.  One can also take the JSON objects and persist them with 
    JSON document stores such as CouchDB </textual><citation class="po-atom e57 e57" linkend="couchDB"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></citation><textual class="po-textual">.  Additionally there are efforts to
    create schema definition languages and query languages for JSON.  With all of these JSON facilities on the server
    and strong support for JSON in the browser, it is easy to consider replacing the XML enteprise model with a
    JSON enterprise model especially for quickly developed applications.
    </textual></para><para class="po-block e58 e58"><textual class="po-textual">
    A second option will be presented in this paper.  We introduce a more complete MVC design pattern in 
    frameworks such as Dojo to enable authors to converge front- and back-end models logically, perform required transformations
    to adapt data for more effective user interaction, and interact with both JSON and XML models
    using Web 2.0 widgets.  In this way, a choice of Web 2.0 interfaces doesn’t collide with the enterprise XML data model.
    </textual></para></section><section class="po-hcontainer e59 e59"><title class="po-block e60 e60"><textual class="po-textual">Overview of XForms and Lightweight Runtimes</textual></title><para class="po-block e61 e61"><textual class="po-textual">
      XForms is an XML technology that defines a Model-View framework for data-centric applications delivered over the web or installed clients.
      XForms model elements include support for data "instances", for content being presented to or obtained from the user.  Instances
      may have associated "bind" elements which define validation, read-only, or relevance constraints as well as calculations that 
      propagate across related values through the application of an XPath-based dependency graph.  XForms has been implemented in a variety
      of client-based and server-based platforms as described on the W3C Forms Working Group site  </textual><citation class="po-atom e62 e62" linkend="XFormsImpls"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></citation><textual class="po-textual">.
    </textual></para><para class="po-block e63 e63"><textual class="po-textual">
      XForms is not a complete language for interactive applications but is designed to be embedded in a "host" language such as HTML.
      In addition to host languages for interactive applications, XForms is also included in the Open Document Format </textual><citation class="po-atom e64 e64" linkend="ODF10"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></citation><textual class="po-textual">
      specification as the data model for form-related content in text, spreadsheet, and presentation documents.  Such formats are
      increasingly being seen as valid formats for user interactivity with a blurring between web, office, and "rich" client platforms
      under way. Other host languages have included vendor-specific languages such as IBM's XML Forms Definition Language </textual><citation class="po-atom e65 e65" linkend="XFDL"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></citation><textual class="po-textual">.
    </textual></para><para class="po-block e66 e66"><textual class="po-textual">
      XForms has traditionally required the implementation of native platform support or platform
      extensions (for example in the Mozilla Firefox browser </textual><citation class="po-atom e67 e67" linkend="MozillaFF"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></citation><textual class="po-textual">).  Such implementations are an excellent means of delivering 
      XForms function with typically a level of performance and function comparable to native implementations.  Obstacles to the
      rapid adoption of XForms have resulted, however, from the need for and development time/expense of multiple implementations
      for adequate platform coverage and the attendant user burden of installing and maintaining current configurations of the extension.
    </textual></para><para class="po-block e68 e68"><textual class="po-textual">
      With the rapid performance improvements in JavaScript runtimes on most current browsers, script-based implementations of XForms
      are becoming increasingly popular.  Some implementations transcode XForms into (X)HTML and JavaScript </textual><citation class="po-atom e69 e69" linkend="XSLTXForms"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></citation><textual class="po-textual"> while others maintain the
      original source document structure by attaching script-based "behaviors" to original XForms elements thus providing the runtime
      processing model for each element type </textual><citation class="po-atom e70 e70" linkend="ubiquity"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></citation><textual class="po-textual">.  In either case there is a need to bind XForms data models, with their 
      included instances, binds, actions, and submission elements, to appropriate view elements to create a complete model/view interactive
      application.
    </textual></para><para class="po-block e71 e71"><textual class="po-textual">
      In the remainder of this paper, we explore two options for constructing the view elements of a complete XForms application such
      as the sample loan application shown in </textual><xref class="po-milestone e72 e72" linkend="ubiquity-loan-form"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.
    </textual></para><figure class="po-container e73 e73" xml:id="ubiquity-loan-form"><title class="po-block e74 e74"><textual class="po-textual">An example loan form in the Ubiquity AjAX XForms framework</textual></title><mediaobject class="po-container e75 e75"><imageobject class="po-container e76 e76"><imagedata class="po-meta e77 e77" fileref="../../../vol5/graphics/Wiecha01/Wiecha01-001.png" format="png" width="500px"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e78 e78"><para class="po-block e79 e79"><textual class="po-textual">
          The Ubiquity XForms library is an AJAX implementation of the XForms language using JavaScript functions on the client
          to attach behaviors to each XML element in an XForms page.  Unlike prior implementations of XForms based on browser
          plug-ins or extensions, the Ubiquity library is loaded dynamically with the page and requires no installation or
          update maintenance.  Existing AJAX libraries, such as Dojo or the Yahoo User Interface library (YUI) are used to
          provide concrete presentation controls such as the calendar widget shown in the figure.
        </textual></para></caption></figure><para class="po-block e80 e80"><textual class="po-textual">
      In the first approach,
      which we argue is more natural for application authors starting from a data or process centric point of view, we outline briefly
      the two-layer view consisting of abstract controls for user intent such as "select", "repeat", or "trigger" coupled with concrete
      widgets or controls for actual presentation and interaction such as "button", "check box", or "radio button".  The Ubiquity AJAX
      implementation of XForms </textual><citation class="po-atom e81 e81" linkend="ubiquity"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></citation><textual class="po-textual"> provides a very complete example of this approach and readers are directed to the samples for
      information beyond the scope of this paper.  
    </textual></para><para class="po-block e82 e82"><textual class="po-textual">The second option maintains the model/view separation of XForms but adopts only 
      a single layer view consisting of the existing widgets in an AJAX library such as Dojo augmented to support model/view binding.
      We believe the architectural principles illustrated here with Dojo are applicable to other AJAX libraries, albeit likely with
      changes to the specific interfaces used to support data binding and property change notification, and we have
      used Dojo as an illustrative example of a desirable broader evolution in Web 2.0 programming models.
    </textual></para><para class="po-block e83 e83"><textual class="po-textual">
      To assure a natural design experience for current AJAX developers, the key concept in this approach is to first introduce a
      general model/view binding mechanism in Dojo which can apply to an extensible set of model technologies, whether XForms, other XML, or
      simple JavaScript-based models.  Having provided Dojo with a first-class MVC framework, XForms can then serve as a
      preferred model technology for those wishing an XML-based or more declarative authoring approach than conventional AJAX design.
    </textual></para></section><section class="po-hcontainer e84 e84"><title class="po-block e85 e85"><textual class="po-textual">Model-View-Controller Patterns in UI Design</textual></title><para class="po-block e86 e86"><textual class="po-textual">MVC design in XForms consists of a data model with instances, binds, and submissions as shown in the example loan model fragment
      here:</textual></para><programlisting class="po-block e87 e87" xml:space="preserve"><textual class="po-textual">
	&lt;xforms:model id="loan_model"&gt;
	  &lt;xforms:instance id="loan"&gt;
		&lt;loanrecord xmlns=""&gt;
		  &lt;startdate&gt;2008-08-08&lt;/startdate&gt;
		  &lt;borrower&gt;
			&lt;name&gt;John Q. Public&lt;/name&gt;
			&lt;addr&gt;123 Main St. Tinyville&lt;/addr&gt;
		  &lt;/borrower&gt;
		  &lt;principal currency="USD"&gt;10000&lt;/principal&gt;
		  &lt;duration&gt;12&lt;/duration&gt;
		  &lt;interestrate&gt;5&lt;/interestrate&gt;
		  &lt;monthly-payment&gt;&lt;/monthly-payment&gt;
		  &lt;totalpayout&gt;&lt;/totalpayout&gt;
		&lt;/loanrecord&gt;
	  &lt;/xforms:instance&gt;
	  
	  &lt;xforms:instance id="rate"&gt;
		&lt;rate  xmlns=""&gt;&lt;/rate&gt;
	  &lt;/xforms:instance&gt;
	  
	  &lt;xforms:bind nodeset="instance('rate')" 
		calculate="instance('loan')/interestrate div 1200.0"/&gt;
	  
	  &lt;xforms:bind nodeset="totalpayout" 
		calculate="../monthly-payment * ../duration" 
		relevant="../monthly-payment &gt; 0 and ../duration &gt; 0"/&gt;
		
	  &lt;!-- other model elements omitted for brevity...
		See http://code.google.com/p/ubiquity-xforms/source/browse/trunk/samples/Loan/loan.html
		for the full source. --&gt;
		
	&lt;/xforms:model&gt;
          
      </textual></programlisting><para class="po-block e88 e88"><textual class="po-textual">
      Model data are presented to the user for interaction via a set of abstract view controls such as select, repeat, group,
      trigger, and input or output.  These controls are "abstract" in the sense that they express interaction intent but
      not the specific look and feel of the user interface.  Thus there are controls for single and multiple selection vs.
      radio buttons and check boxes.  An additional mapping mechanism associated concrete presentation components,
      such as Dojo widgets, with their corresponding abstract XForms controls.
      See </textual><citation class="po-atom e89 e89" linkend="XForms11"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></citation><textual class="po-textual"> for a complete definition of the XForms language.  The following fragment shows the
      abstract controls for a subset of the example loan application above:</textual></para><programlisting class="po-block e90 e90" xml:space="preserve"><textual class="po-textual">
    &lt;html:body&gt;
	
	  &lt;xforms:input ref="startdate" datatype="xforms:date"&gt; 
	    &lt;xforms:label&gt;Agreement Date: &lt;/xforms:label&gt;
	  &lt;/xforms:input&gt; 
  
	  &lt;xforms:select1 ref="principal/@currency" appearance="minimal" incremental="true"&gt;
	    &lt;xforms:label&gt;Choose currency:&lt;/xforms:label&gt; 
	    &lt;xforms:item&gt;
		  &lt;xforms:label&gt;US Dollars&lt;/xforms:label&gt;
		  &lt;xforms:value&gt;USD&lt;/xforms:value&gt;
	    &lt;/xforms:item&gt;
	    &lt;xforms:item&gt;
		  &lt;xforms:label&gt;Canadian Dollars&lt;/xforms:label&gt;
		  &lt;xforms:value&gt;CDN&lt;/xforms:value&gt;
	    &lt;/xforms:item&gt;
	    &lt;xforms:item&gt;
		  &lt;xforms:label&gt;Euros&lt;/xforms:label&gt;
		  &lt;xforms:value&gt;EUR&lt;/xforms:value&gt;
	    &lt;/xforms:item&gt;
	  &lt;/xforms:select1&gt;
	
	  &lt;xforms:output class="regular" &gt;
	    &lt;xforms:label&gt;Monthly Payment: &lt;/xforms:label&gt;
	  &lt;/xforms:output&gt;
  
    &lt;/html:body&gt;
    </textual></programlisting><para class="po-block e91 e91"><textual class="po-textual">
      XPath-based binding expressions (@ref in the example) connect abstract controls to data in the model.  UI changes are written to
      the corresponding model element text content while model changes are signalled to the
      UI with a set of defined events indicating changes in model element values, validity, relevance, R/O status, or required status.
      Atomic elements such
      as those shown bind to single data elements in the model.  Repeat controls expand their child content as a template for each
      entry in their nodeset-based binding.  
      See </textual><citation class="po-atom e92 e92" linkend="XForms11"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></citation><textual class="po-textual"> for a more complete discussion of single and multiple node model-view binding and update notification events.
    </textual></para><para class="po-block e93 e93"><textual class="po-textual">
      Of particular interest to our discussion here is the manner in which Birbeck refines XForms abstract controls 
      with presentation specific elements 
      in the Ubiquity framework to complete their graphic and interaction design </textual><citation class="po-atom e94 e94" linkend="ubiquity"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></citation><textual class="po-textual">.  The first input control in the example above is
      refined in this way using a calendar widget from
      the Yahoo User Interface (YUI) </textual><citation class="po-atom e95 e95" linkend="YUI"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></citation><textual class="po-textual"> library as shown in </textual><xref class="po-milestone e96 e96" linkend="MVC"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.
    </textual></para><figure class="po-container e97 e97" xml:id="MVC"><title class="po-block e98 e98"><textual class="po-textual">Model-View-Controller design in XForms web applications</textual></title><mediaobject class="po-container e99 e99"><imageobject class="po-container e100 e100"><imagedata class="po-meta e101 e101" fileref="../../../vol5/graphics/Wiecha01/Wiecha01-002.png" format="png" width="500px"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e102 e102"><para class="po-block e103 e103"><textual class="po-textual">
          XForms data models contain instance elements for data values, bind elements for calculations
          and Model-Item-Properties indicating data relevance, R/O status, and validity, and submission elements to
          interact with the server.  XForms views contain elements for abstract user intent such as single or multiple
          selection, grouping, switch/case, repeated content, and atomic controls such as input, output, and secret for passwords.
          Concrete presentations are bound to abstract controls and map between physical interaction and display events
          and their corresponding abstract XForms controls.
        </textual></para></caption></figure><para class="po-block e104 e104"><textual class="po-textual">
      The manner in which abstract to concrete control refinement takes place in the Ubiquity library (using the MVC design in </textual><xref class="po-milestone e105 e105" linkend="MVC"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">)
      combines the three-layers of model, abstract view, and concrete widgets into a single coherent runtime structure.
      Each layer is actually present at runtime and participates in event handling and synchronization with the other layers.
      Alternative approaches transcode source XForms markup into dynamic HTML, maintaining the end-user functionality of the
      form but losing the original document structure at runtime in the client.
    </textual></para><para class="po-block e106 e106"><textual class="po-textual">
      In the design shown in </textual><xref class="po-milestone e107 e107" linkend="MVC"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, the XML programming model is therefore maintained and visible from the model through to abstract 
      user interface.  AJAX widgets such as the calendar in </textual><xref class="po-milestone e108 e108" linkend="MVC"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> are plugged into their abstract controls
      algorithmically (under rule based or stylesheet control).  An automated mapping from abstract to concrete control offers significant
      productivity gains, eliminating the need for an additional manual authoring stage at the concrete presentation level, but with the
      potential for loss of control or expressivity at that final "on the glass" layer.  Depending on the sophistication of the mapping
      machinery this loss of control can be potentially eliminated and the rules for associating abstract and concrete controls refined and customized
      as needed.
    </textual></para></section><section class="po-hcontainer e109 e109"><title class="po-block e110 e110"><textual class="po-textual">Supporting MVC Design in AJAX: Case Study Using Dojo</textual></title><para class="po-block e111 e111"><textual class="po-textual">
      In the above example, we have shown how data in XForms models -- usually obtained from back-end data stores or business processes --
      may conveniently be projected out to the client and bound to abstract controls for user interaction.  This design process is
      largely data-driven, i.e. begins with a definition of data schemas and process models and works from there out toward user
      interaction.  While it is indeed possible to use XForms in other ways, it is our impression that in most cases it is not the
      specifics of on-the-glass interaction or graphical design that predominates but rather the functional data-driven aspects of the
      design that come first.
    </textual></para><para class="po-block e112 e112"><textual class="po-textual">
      Rich Internet Applications (RIAs), by contrast, are often driven initially by user experience and visual design considerations.
      Exactly what constitutes an RIA is hard to pin down, but often they are a means to access and interact with a variety of
      media types including video, images, animations, and formatted text intermixed in composite user interfaces.  While it is rare that
      data-oriented (e.g. CRUD </textual><citation class="po-atom e113 e113" linkend="CRUD"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></citation><textual class="po-textual">) operations do not appear in an RIA, they are typically hidden or implicit behind the "flashier" aspects
      of rich media interaction.
    </textual></para><para class="po-block e114 e114"><textual class="po-textual">
      It is our belief, nonetheless, that RIAs architecturally share many if not most of the features of data-centric "forms" applications
      as outlined above - and indeed, that the architectural features in forms runtimes, including separation of concerns between
      model, view, and control (both abstract and concrete) are as important to media-rich RIAs as to data-rich ones.  The question, then,
      is how to extend popular RIA frameworks with these features in a way that preserves their appeal for presentation and interaction
      oriented design methods but still allows for binding to data and reuse of model-based artifacts behind the facade of rich media.
    </textual></para><para class="po-block e115 e115"><textual class="po-textual">
      Taking Dojo as an example of a mature AJAX framework, we have reworked the sample loan application from </textual><xref class="po-milestone e116 e116" linkend="ubiquity-loan-form"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and implemented it
      in a rigorous model-view pattern using native Dojo constructs.  Our approach is to establish a first-class MVC pattern in Dojo either by 
      convention in the usage of current componentry or by extensions to existing Dojo libraries to fully support the separation of
      concerns and behavioral patterns present in a pure XForms-based application. 
    </textual></para><figure class="po-container e117 e117" xml:id="dojo-loan"><title class="po-block e118 e118"><textual class="po-textual">The loan application using Dojo Model-View-Controller design patterns</textual></title><mediaobject class="po-container e119 e119"><imageobject class="po-container e120 e120"><imagedata class="po-meta e121 e121" fileref="../../../vol5/graphics/Wiecha01/Wiecha01-003.png" format="png" width="500px"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e122 e122"><para class="po-block e123 e123"><textual class="po-textual">
          A near functional equivalent of the XForms loan application implemented using pure Dojo/AJAX components.
          The data model is implemented as a Dojo package with JS objects for instance data and JS functions for
          constraints such as rate conversions and relevance (and other Model-Item-Property) calculations.  The view consists of Dojo widgets
          extended with Model-View binding behavior to receive data and Model-Item-Property updates as model values change.
        </textual></para></caption></figure><para class="po-block e124 e124"><textual class="po-textual">
      We require separation of model data and presentation controls at either an abstract or concrete layer.  
      We require the ability within the model
      to observe changes in data elements and bind those changes to functions to compute derived values.  The model should provide a degree
      of encapsulation so that internal operations are shielded from observation and allowed to complete before external observers in the
      view or elsewhere are notified.
      Finally, all of these aspects of modularity, encapsulation, within-model bindings, and model-view bindings should be expressable
      with a minimum of application level machinery -- rather, the framework itself should support the core notions of modularity, dependency, 
      and binding and not require authors to emulate them with lower-level APIs.
    </textual></para><figure class="po-container e125 e125" xml:id="MVC_in_Dojo"><title class="po-block e126 e126"><textual class="po-textual">Extending Dojo with Model-View-Controller design patterns</textual></title><mediaobject class="po-container e127 e127"><imageobject class="po-container e128 e128"><imagedata class="po-meta e129 e129" fileref="../../../vol5/graphics/Wiecha01/Wiecha01-004.png" format="png" width="500px"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e130 e130"><para class="po-block e131 e131"><textual class="po-textual">MVC design in Dojo extends Dojo widgets to bind to data models and receive value and Model-Item-Property updates.  
          Any data model technology, whether script or XML-based, that can be wrappered with the extended widget MVC APIs may be used.
          A single layer view is adopted in contrast to the two-layer abstract vs. concrete view in traditional XForms.  Controls in the
          view are Dojo widgets (shown in green) which expand into HTML fragments replacing their original markup elements under
          template-based control.  In the figure an HTML fragment for the calendar is shown as one such subtree generated by its 
          managing Calendar widget.
        </textual></para></caption></figure><para class="po-block e132 e132"><textual class="po-textual">
      </textual><xref class="po-milestone e133 e133" linkend="MVC_in_Dojo"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> outlines the means to realize these goals in the existing Dojo framework.  We have reimplemented the key aspects of the
      loan application data model as a Dojo class as shown to the right of the figure.  Dojo has introduced a new abstraction for property
      change notification (the dojo.Stateful API introduced in the Dojo 1.5 release </textual><citation class="po-atom e134 e134" linkend="DojoToolkit"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></citation><textual class="po-textual">).
      Those elements of the data model intended for eventual binding to UI controls are therefore implemented as such dojo data sources
      to simplify UI updates as well as allow for an approximation to the data-dependency graph in XForms within the script-based Dojo
      data model.  Other data elements, used strictly for internal model record keeping and not subject to user alteration, do not require
      this notification support and hence may be implemented by author's choice in a variety of other JavaScript types.
    </textual></para><programlisting class="po-block e135 e135" xml:space="preserve"><textual class="po-textual">
      var loan_init = {
        // Initial values for the loan form are defined in this JS variable to be passed
        // into the model constructor at the end of this fragment.
        
        // We have extended Form widgets in Dojo to bind to data having both "value" and 
        // other properties such as required, validity, and read/only status...
        
        "StartDate": { "value": "2008-08-08", "required": false, "valid": true }, 
        
        // Data fields can be assigned values directly and will be remapped into the above structure when
        // initializing the model, avoiding the need for authors to specify properties when their 
        // default values are acceptable...
        
        "Borrower" : "John Doe",    
        "Street"   :  "",
        "City"     :  "",
        "County"   :  "",
        "State"    :  "",
        "Zip"      :  "",
        "Country"  :  "US",
      
        "Principal":  "1000",
        "Currency" :  "USD",
        "Duration" :  "12",
        "InterestRate" : "6"
      };
      
      // The loanModel variable will have properties for each of the above data fields grouped as
      // "loanModel.loanInstance.Borrower"  etc.  
      
      // Derived loan values introduced by the model, such as monthly interest rate, appear as
      // "loanModel.infoInstance.MonthlyRate"
      
      // This separation into two groups of fields is an application design decision intended
      // to illustrate separating model inputs and outputs from fields introduced to 
      // support user interaction or temporary values during model execution.
      
      var loanModel = new patterns.loan.StatefulModel( { 'loan': loan_init } );
    </textual></programlisting><para class="po-block e136 e136"><textual class="po-textual">
      The code fragment below uses the standard Dojo JavaScript class mechanism to define a set of internal functions for computing monthly interest rates and payments,
      and total loan payouts given loan principal, duration, and interest rate.  Such internal functions are written by convention
      with an "_" prefix, but are still attached as visible properties of the loanModel
      variable given the lack of formal encapsulation in the Dojo class mechanism.
      In this example, the only public properties required on the loanModel are the data instances themselves which are provided to allow
      for binding from UI widgets.
    </textual></para><programlisting class="po-block e137 e137" xml:space="preserve"><textual class="po-textual">
      
      dojo.provide("patterns.loan.StatefulModel");    // name of the module being exported from this file
      dojo.require("mvc.stateful.StatefulItems");     // dependencies on other Dojo modules
      dojo.require("mvc.data._base");     
      
      // our StatefulModel class extends the _base class
      
      dojo.declare("patterns.loan.StatefulModel", mvc.data._base, {   
        loanInstance: null,	 // loan parameters, becomes public property
        infoInstance: null,	 // record keeping info form and derived loan values, also public property
      
        info_init: {
          "MonthlyRate"    : { "value": "0.005", "relevant": true },  // data fields have "value" and
          "Monthly_Payment": { "value": "0",     "relevant": true },  // other properties bound to form
          "TotalPayout"    : { "value": "0",     "relevant": true }   // widgets for validity, relevance, etc
        },
      
        constructor: function (args) {
          // StatefulItems is just a container object for a set of fields, each of which implements 
          // the dojo.Stateful interface for get/set and property change notifications...
          
          this.loanInstance = new mvc.stateful.StatefulItems( { 'data': args.loan } );
          this.infoInstance = new mvc.stateful.StatefulItems( { 'data': this.info_init } );
      
          // simple dependence of monthly rate on APR...
          this.bindValue( this.infoInstance.MonthlyRate,      // the target field being assigned a value
            this.loanInstance.InterestRate,                   // the input field whose change will trigger
            this._APR2MonthlyRate );                          // return value from this function sets target
      
          // monthly_payment = f( principal, monthlyrate, duration )
          this.bindInputs( [                                  // when we have multiple input fields to monitor
            this.loanInstance.Principal,                      // they are just given as an array
            this.infoInstance.MonthlyRate,                    // and we don't specify a single output field
            this.loanInstance.Duration                        // since in general more than one value may be set
            ],
            this._computeMonthlyPayment );                    // Then the callback function sets model directly
      
          // totalpayout = f( monthly_payment, duration )
          this.bindInputs( [ 
            this.infoInstance.Monthly_Payment, 
            this.loanInstance.Duration 
            ],
            this._computeTotalPayout );
      
          this.bindRelevance( this.infoInstance.MonthlyRate,  // bindRelevance is similar to bindValue above
            this.loanInstance.InterestRate,                   // but the boolean return value is assigned to
            this._monthlyRelevance );                         // the "relevant" property of the target field
            
          this.bindRelevance( this.infoInstance.Monthly_Payment, 
            this.loanInstance.InterestRate, 
            this._monthlyRelevance );
            
          this.bindRelevance( this.infoInstance.TotalPayout, 
            this.loanInstance.InterestRate, 
            this._monthlyRelevance );			
        },
      
      _APR2MonthlyRate: function(newValue) {			
        // recompute the monthly rate as APR/12 then /100 for percentage
        // just need to return the value, will be assigned to the target field for us...
      
        var monthly = parseInt( newValue ) / 1200.0;  
        return monthly+="";
      },
      
      _computeMonthlyPayment: function() {
        // form of callback used in bindInputs does not provide single input value
        // and the function must set its outputs directly...
        
        var principal = parseFloat( this.loanInstance.Principal.get("value") );
        var duration = parseFloat( this.loanInstance.Duration.get("value") );
        var rate = parseFloat( this.infoInstance.MonthlyRate.get("value") );
        var monthly;
      
        if ( rate == 0 ) monthly = 0;
          else monthly = principal * rate / ( 1 - Math.pow( 1.0 + rate, -1.0 * duration ) );
        this.infoInstance.Monthly_Payment.set("value", monthly+="" );
      },
      
      _computeTotalPayout: function() {
        var monthly = parseFloat( this.infoInstance.Monthly_Payment.get("value") );
        var duration = parseFloat( this.loanInstance.Duration.get("value") );
      
        var total = monthly * duration;
        this.infoInstance.TotalPayout.set("value", total+="" );
      },
      
      _monthlyRelevance: function(newValue) {
        // callbacks for metadata like relevance get the new value of their
        // monitored field and return a boolean for its relevance...
        
        if ( newValue &gt;= 0 ) return true;
        else return false;
      }
      
    });
      
    </textual></programlisting><para class="po-block e138 e138"><textual class="po-textual">
      The existing dojo.Stateful interface provides a simple abstraction above event listeners
      that combines a getter/setter pattern along with property change registration using a </textual><code class="po-atom e139 e139"><textual class="po-textual">watch</textual></code><textual class="po-textual"> method.  
      We have extended this library to provide for simple binding functions ("bindValues", "bindInputs" above) where
      multiple incoming fields are input to a composing function whose return value is then assigned to an output field.  These
      bind functions seen in the model code above are intended to stand-in for the first-class dependency
      graph provided by XForms and its </textual><code class="po-atom e140 e140"><textual class="po-textual">bind</textual></code><textual class="po-textual"> expressions.  
    </textual></para><programlisting class="po-block e141 e141" xml:space="preserve"><textual class="po-textual">
    &lt;body class="tundra"&gt;
      &lt;label for="principalInput"&gt;Principal:&lt;/label&gt;
      &lt;!-- the mvc.form library extends the usual dijit.form package with Model-View bindings.
      
          The refID attribute binds to a data model field implementing the dojo.Stateful interface
          allowing the widget to listen to changes in the value, relevant, required, readonly
          and valid properties.  
          
          These flags are merged with corresponding view states to determine the overall state of the control.  
          For example, an input field must be valid both at the view level (has correct lexical value) 
          and at the model level (semantic validity).
      --&gt;
      
      &lt;input id="principalInput" dojoType="mvc.form.NumberTextBox"
        refID="loanModel.loanInstance.Principal"&gt;
      &lt;/input&gt;
        
      &lt;label for="durationInput"&gt;Duration:&lt;/label&gt;
      &lt;input id="durationInput" dojoType="mvc.form.NumberTextBox"
        refID="loanModel.loanInstance.Duration"&gt;
      &lt;/input&gt;
                  
      &lt;!-- etc --&gt;
    &lt;/body&gt;
      
    </textual></programlisting><para class="po-block e142 e142"><textual class="po-textual">
      Data binding uses the same mechanism both within the model, to watch model changes and compute derived values, and to watch changes in the model
      to refresh relevant controls (Dojo widgets) in the view.  
      The dojo.Stateful interface is used in an extended widget library to register for changes in model values as well as a set of
      form-related properties such as relevance, readonly, required, and valid -- the familiar Model Item Properties from XForms.
      Widget implementations handle both data and property bindings and updates implicitly, based on the value of the
      </textual><code class="po-atom e143 e143"><textual class="po-textual">refID</textual></code><textual class="po-textual"> attribute, freeing authors from the need
      to write significant amounts of wiring as application code and hence we hope stimulating the use of Model-View patterns
      by AJAX authors more widely in the future.
    </textual></para></section><section class="po-hcontainer e144 e144"><title class="po-block e145 e145"><textual class="po-textual">Where XForms Data Meets Dojo Widgets</textual></title><para class="po-block e146 e146"><textual class="po-textual">
      Having prepared Dojo for a first-class model-view separation, we are now ready to re-introduce an XML-based data model.
      such as the one from XForms, as one of an extensible set of model technologies that can play within this extended MVC pattern
      We have implemented a wrapper for XForms models which allows widgets to bind to models
      using the wrapper's support for the change notification interfaces described above.  The internal operation of the XForms model, including
      its dependency graph for spreadsheet-like value propagations, constraints for validity, relevance, and the other Model Item Properties,
      and the model submission and action features may be used directly behind such a Dojo-based view.
      This model-view separation should allow for cleaner and simpler views while at the same time packaging validation and 
      calculation logic in the model for better reuse.
    </textual></para><figure class="po-container e147 e147" xml:id="MVC_in_Dojo_using_XForms_data_models"><title class="po-block e148 e148"><textual class="po-textual">Dojo MVC design patterns using XForms models</textual></title><mediaobject class="po-container e149 e149"><imageobject class="po-container e150 e150"><imagedata class="po-meta e151 e151" fileref="../../../vol5/graphics/Wiecha01/Wiecha01-005.png" format="png" width="500px"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e152 e152"><para class="po-block e153 e153"><textual class="po-textual">
          Having introduced a first-class MVC design into Dojo form widgets, XForms models with an appropriate API wrapper can 
          now bind directly to common Dojo widgets for presentation and interaction.  The standard XForms bind constructs can be used
          as a fully declarative dependency graph for value and Model-Item-Property calculation replacing the script-based functions
          in the Dojo models in earlier figures.  Common coding conventions for UI design, however, may continue to be used for
          interaction design at the view layer.
        </textual></para></caption></figure><para class="po-block e154 e154"><textual class="po-textual">
      </textual><xref class="po-milestone e155 e155" linkend="dojo-NumberTextBox"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> is our first example of using Dojo widgets for presentation while delegating validation to the XForms model.
      A Dojo "NumberTextBox" widget is bound to the "Principal" data element in the XForms model using the extended
      APIs discussed above -- the "ref" attribute on the widget gives the XPath query expression into the model
      as it would appear on an XForms control.  Internally, the widget uses the dojo.Stateful APIs
      to connect to the specified data element and to respond to changes in its value, validity, or other Model Item Property </textual><citation class="po-atom e156 e156" linkend="XForms11"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></citation><textual class="po-textual">.
      The widget provides alternative presentations for the focus and non-focus states of the control -- inserting formatting
      syntax to conform to conventions for comma or period separated numeric or currency values.  While focused, the pure
      numeric value is drawn to allow for easier editing.
    </textual></para><figure class="po-container e157 e157" xml:id="dojo-NumberTextBox"><title class="po-block e158 e158"><textual class="po-textual">Dojo NumberTextBox widget bound to XForms models</textual></title><mediaobject class="po-container e159 e159"><imageobject class="po-container e160 e160"><imagedata class="po-meta e161 e161" fileref="../../../vol5/graphics/Wiecha01/Wiecha01-006.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><programlisting class="po-block e162 e162" xml:space="preserve"><textual class="po-textual">
      &lt;body&gt;
        &lt;label for="dojoPrincipal"&gt;Principal:&lt;/label&gt;
        &lt;div id="dojoPrincipal" dojoType="mvc.form.NumberTextBox" 
          model="loan_model" 
          ref="instance('loan')/principal"&gt;
        &lt;/div&gt;
      &lt;/body&gt;
    </textual></programlisting><para class="po-block e163 e163"><textual class="po-textual">
      Validation in vanilla Dojo is handled entirely on the widget.  There are validating subclasses of many of the forms-related
      widgets which allow for regular expressions or script-based validation handlers to be attached to value change events
      on the widget itself.  Through the use of the XForms model we are able to support a more refined lifecycle of validation
      in which "lexical" and "syntactic" levels of validation remain attached to the widget while "semantic" validation
      occurs behind the view in the model layer.  Validation thus may fail early at the view layer, giving immediate feedback
      to the user, or succeed lexically or syntactically but still fail semantically in the model.  Such "semantic" failures
      will typically be due to factors that we want outside the scope of the widget to handle.  
    </textual></para><para class="po-block e164 e164"><textual class="po-textual">
      As an example, a phone number may consist correctly only of numeric digits and syntactically be valid in terms of a set of area code, exchange, and extension
      string of the right length, but still fail model validation if that number is not in actual use.  The latter validation
      will require in general a back-end data base lookup or minimally a comparison with a set of valid phone numbers cached in
      the model.  Managing this lookup is more complex, and has more potential for reuse, than would be supported by leaving
      this logic at the widget level.
    </textual></para><para class="po-block e165 e165"><textual class="po-textual">
      "Vanilla" Dojo also has the capability to compute dynamic widget values using the existing dojo.data APIs.  Selection boxes,
      for example, may query data sources in a variety of alternative formats using a common interface and populate
      pull-down lists or provide keystroke-level autocompletion based on the dynamic context of the application.
      </textual><xref class="po-milestone e166 e166" linkend="dojo_select"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> shows such a "FilteringSelect" widget with an XPath query into the XForms model to extract the currently valid
      set of currency types for the loan application.  The value-added feature obtained by use of the XForms model is the
      ability for such queries to operate not only over static XML data in the model, but to reference computed values
      derived using the XForms dependency graph -- transparently to the view author.
    </textual></para><figure class="po-container e167 e167" xml:id="dojo_select"><title class="po-block e168 e168"><textual class="po-textual">Dojo "filtering" select using dynamic data queried from XForms models</textual></title><mediaobject class="po-container e169 e169"><imageobject class="po-container e170 e170"><imagedata class="po-meta e171 e171" fileref="../../../vol5/graphics/Wiecha01/Wiecha01-007.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><programlisting class="po-block e172 e172" xml:space="preserve"><textual class="po-textual">
    &lt;xforms:model id="loan_model"&gt;
      &lt;xforms:instance id="loan"&gt;
        &lt;LoanRecord xmlns=""&gt;
          &lt;principal currency="USD"&gt;10000&lt;/principal&gt;
          &lt;currencies&gt;
            &lt;currency&gt;USD&lt;/currency&gt;
            &lt;currency&gt;CDN&lt;/currency&gt;
            &lt;currency&gt;Euro&lt;/currency&gt;
            &lt;currency&gt;Pound&lt;/currency&gt;
            &lt;currency att="calc"&gt;&lt;/currency&gt;
          &lt;/currencies&gt;
        &lt;/LoanRecord&gt;
      &lt;/xforms:instance&gt;
        
      &lt;xforms:bind nodeset="instance('loan')/currencies/currency[@att = 'calc']" 
          calculate="concat(../currency[1], ' or ', ../currency[2])"&gt;
      &lt;/xforms:bind&gt;
    &lt;/xforms:model&gt;
      
    &lt;body&gt;
      &lt;label for="combo"&gt;Currency:&lt;/label&gt;
      &lt;select id="combo" dojoType="mvc.form.FilteringSelect" 
        model="loan_model" 
        nodeset="instance('loan')/currencies/currency"
        ref="instance('loan')/principal/@currency"&gt;
      &lt;/select&gt;
    &lt;/body&gt;
    </textual></programlisting><para class="po-block e173 e173"><textual class="po-textual">
      The ability for xforms:bind elements to maintain a dependency graph of dynamic data  
      provides a convenient transformation layer between data structures appropriate to the backend
      business process or web service and those suitable for user interaction.  
      Values may be aggregated or disaggregated using XForms
      on the way out to the user and inversely transformed and validated on the way back in toward the database or business
      process engine.
      </textual><xref class="po-milestone e174 e174" linkend="dojo_chart"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and </textual><xref class="po-milestone e175 e175" linkend="dojo_grid"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> show chart and tabular views of a set of data from the XForms model, giving hypothetical revenue streams
      over time from 4 different geographies.  In the views, we want to see just the total trends, summing over geography.
      The XForms model can do this sum easily using an XForms bind expression as shown in the code fragment below.  
     
    </textual></para><figure class="po-container e176 e176" xml:id="dojo_chart"><title class="po-block e177 e177"><textual class="po-textual">Dojo charting using data queried from XForms models</textual></title><mediaobject class="po-container e178 e178"><imageobject class="po-container e179 e179"><imagedata class="po-meta e180 e180" fileref="../../../vol5/graphics/Wiecha01/Wiecha01-008.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><figure class="po-container e181 e181" xml:id="dojo_grid"><title class="po-block e182 e182"><textual class="po-textual">Dojo grid view using data queried from XForms models</textual></title><mediaobject class="po-container e183 e183"><imageobject class="po-container e184 e184"><imagedata class="po-meta e185 e185" fileref="../../../vol5/graphics/Wiecha01/Wiecha01-009.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e186 e186"><textual class="po-textual">
      The Dojo chart component requires input data to provide "x" and "y" properties which are computed by the
      two xforms:bind expressions shown below.  The "x" position is simply the index of the month in the input
      data set, and the "y" value is the sum for each month over the regions where there is contributing revenue.
      The grid component is a flexible Dojo widget able to take input from data sources and generate HTML tables
      under the given </textual><code class="po-atom e187 e187"><textual class="po-textual">div</textual></code><textual class="po-textual"> element with incremental updates as data elements change or rows are added and deleted.
    </textual></para><para class="po-block e188 e188"><textual class="po-textual">
      As an additional affordance to AJAX developers, we have extended the Ubiquity data model runtime to populate
      the XPath-based data model by import and export of JSON values using a convention where properties are mapped
      to element names, structures to child content, and arrays to repeating elements.  There are no standards
      yet controlling XML to JSON mapping (see </textual><citation class="po-atom e189 e189" linkend="JSON2XML"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></citation><textual class="po-textual"> for various examples) so this approach, while useful, is not
      exhaustive.
    </textual></para><programlisting class="po-block e190 e190" xml:space="preserve"><textual class="po-textual">
    &lt;script id="json_sales" type="application/json"&gt;
    {
      "sales" : {
        "month" : [
          {
            "name"  : "January",
            "region" : [ "1", "2", "4", "1"],
            "comments" : "This was a really good month"
          },
          {
            "name"  : "February",
            "region" : [ "2", "1", "3", "1"],
            "comments" : "This was another good month"
          },
          {
            "name"  : "March",
            "region" : [ "1", "1", "1", "1"],
            "comments" : "Not so great..."
          },
          {
            "name"  : "April",
            "region" : [ "1", "2", "4", "1"],
            "comments" : "This was a really good month"
          },
          {
            "name"  : "May",
            "region" : [ "2", "2", "3", "2"],
            "comments" : "This was ok"
          }                             
        ]
      }
    }
    &lt;/script&gt;
      
    &lt;xforms:model id="loan_model"&gt;
      &lt;xforms:instance id="sales" src="#json_sales"/&gt;
      
      &lt;xforms:bind nodeset="instance('sales')/month/x" calculate="position()"/&gt;
      &lt;xforms:bind nodeset="instance('sales')/month/y" calculate="sum(../region)"/&gt;
    &lt;/xforms:model&gt;
      
    &lt;body&gt;
      &lt;div dojoType="dojox.charting.DataChart" 
        type="dojox.charting.plot2d.Columns" 
        store="loan_model"
        query="instance('sales')/month"
      &lt;/div&gt;
        
      &lt;div dojoType="dojox.grid.DataGrid" 
        store="loan_model"
        query="instance('sales')/month"
      &lt;/div&gt;
    &lt;/body&gt;
      
    </textual></programlisting></section><section class="po-hcontainer e191 e191"><title class="po-block e192 e192"><textual class="po-textual">Next steps</textual></title><para class="po-block e193 e193"><textual class="po-textual">
      Apart from providing an abstract set of UI controls, the XForms view layer specifies a means for relative data binding
      where XPath locators on child controls are evaluated relative to their parent control's context.  As shown in </textual><xref class="po-milestone e194 e194" linkend="MVC"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, 
      control grouping can be used to define reusable content where child elements can bind anywhere in the model consistent
      with the relative offsets from their parent locators.  Further, child bindings are reevaluated whenever parent bindings change.
      In this way, complex patterns such as Master/Detail </textual><citation class="po-atom e195 e195" linkend="PerrinsPatterns"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></citation><textual class="po-textual"> views may be coordinated with a single change to the detail
      grouping control.  We intend to explore further extensions to widget behavior in Dojo to support this hierarchical data binding behavior.
      In parallel, we will likely implement a set of simple container widgets which can provide grouping context and repetition
      over child content similar to the </textual><code class="po-atom e196 e196"><textual class="po-textual">xforms:group</textual></code><textual class="po-textual"> and </textual><code class="po-atom e197 e197"><textual class="po-textual">xforms:repeat</textual></code><textual class="po-textual"> elements.
    </textual></para></section><section class="po-hcontainer e198 e198"><title class="po-block e199 e199"><textual class="po-textual">Discussion and Conclusions</textual></title><para class="po-block e200 e200"><textual class="po-textual">
      We reviewed briefly the Ubiquity XForms </textual><citation class="po-atom e201 e201" linkend="ubiquity"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></citation><textual class="po-textual"> AJAX implementation which embeds XML
      forms in web pages supported entirely by JavaScript -- i.e. without requiring any plug-in or extension technology.  
      We described the use of AJAX widgets such as YUI calendars </textual><xref class="po-milestone e202 e202" linkend="MVC"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> as custom
      controls rendering the concrete presentation and interaction with abstract XForms controls.  We argued
      this "data to glass" style of authoring has considerable benefits in terms of simplicity and end-to-end
      consistency of an XML programming model.  Nonetheless, we considered an inverse "glass to data" approach to design
      starting with native Dojo constructs familiar to current developers and working back towards implied data structures.  
      As a preparatory step, we defined a rigorous
      model-view separation in Dojo and then used this pattern to support XForms-based data models with native Dojo
      controls as the view layer.
    </textual></para><para class="po-block e203 e203"><textual class="po-textual">
      While not strictly necessary for integrating XML-based models into Dojo, we have focused on understanding and documenting
      model-view patterns in JavaScript-based Dojo programming as a key end in itself.
      We believe that defining and adopting such patterns will both benefit existing
      developer communities as well as speed the adoption of emerging XML-based technologies in the client over time.
      Given greater acceptance of the underlying architectural patterns in languages like XForms,
      albeit with script-based implementations as alternatives, the rate of the XML-based implementations of these same patterns should increase.
    </textual></para><para class="po-block e204 e204"><textual class="po-textual">
      In real design, there is most likely a mixture of design styles which argue for both approaches -- data first and
      user experience first.  In addition, there will likely remain a mixture of preferences for modeling technologies,
      using both XML and script-based programming models.  Probably the key factor is to move to a more rigorous
      separation of concerns, in the direction attempted by this paper, such that a diversity of design methods
      and technologies can be adopted as fitting the requirements of the problem domain and skills or goals of 
      designers and developers.
    </textual></para><para class="po-block e205 e205"><textual class="po-textual">
      We see folks going "data to glass" that are working from existing enterprise application and 
      expanding them to new web channels.  They struggle with the new world, not only dealing with bridging their 
      existing data to the web 2.0 world, but also moving from a server centric presentation technology to a 
      client centric presentation technology.  While it might seem likely that these customers would avoid the 
      issue and let the data dictate the approach, they cannot as they have hired skills in Web 2.0 that may never 
      fully understand the data.  They need to ensure the data used in the Web 2.0 client has full fidelity with the enterprise 
      data it represents as they cannot afford to maintain the mappings between multiple data formats.  
      Data to glass design occurs frequently in behind the firewall applications focused on internal users.  
      Its tempting to avoid using Web 2.0 constructs in such internal facing applications, but even internal users 
      assume they will have Web 2.0 responsive and feeling applications as they use Web 2.0 consumer focused 
      applications for mail, collaboration, travel booking, etc.
    </textual></para><para class="po-block e206 e206"><textual class="po-textual">
      Contrarily, the more consumer focused applications tend to start "glass to data".  
      While it might be tempting to discount such applications, one should realize the impact of presentation 
      technology on server side implementations as well.  Many times these glass data format of JSON is well
      understood by Web 2.0 developers and it's easy and convenient for them to justify extending this data
      concepts onto the server replacing the use of XML altogether.  It is important to create this bridge
      from the glass to the data to allow the best technologies to be used in 
      each tier.  Without the bridge, technologies will be choosen out of what is easiest to get done the most 
      quickly - not choosen upon technical merit.
    </textual></para></section><section class="po-hcontainer e207 e207"><title class="po-block e208 e208"><textual class="po-textual">Acknowledgements</textual></title><para class="po-block e209 e209"><textual class="po-textual">
      We are grateful to our colleagues Mark Birbeck and John Boyer at the Ubiquity XForms open source project </textual><citation class="po-atom e210 e210" linkend="ubiquity"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></citation><textual class="po-textual"> for their innovation on 
      the underlying AJAX-based implementation of XForms reviewed at the top of this paper.  In addition, we have 
      patterned the Dojo loan application after one written originally for Ubiquity by John Boyer and reused the style sheet work for the loan as implemented by Erik Johnson.
      We thank the reviewers for their careful and thoughtful comments on the paper content and style, all faults in executing on their
      suggestions remaining of course with the authors.
    </textual></para></section><bibliography class="po-hcontainer e211 e211"><title class="po-block e212 e212"><textual class="po-textual">Bibliography</textual></title><bibliomixed class="po-block e213 e213" xml:id="couchDB" xreflabel="CouchDB"><textual class="po-textual">
      </textual><emphasis class="po-inline e214 e214" role="ital"><textual class="po-textual">CouchDB project</textual></emphasis><textual class="po-textual">
      </textual><link class="po-inline e215 e215" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://couchdb.apache.org/</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e216 e216" xml:id="CRUD" xreflabel="CRUD"><textual class="po-textual">
      </textual><emphasis class="po-inline e217 e217" role="ital"><textual class="po-textual">Create, read, update and delete pattern</textual></emphasis><textual class="po-textual">
      </textual><link class="po-inline e218 e218" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://en.wikipedia.org/wiki/Create,_read,_update_and_delete</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e219 e219" xml:id="DojoToolkit" xreflabel="Dojo Toolkit"><textual class="po-textual">
      </textual><emphasis class="po-inline e220 e220" role="ital"><textual class="po-textual">Dojo Toolkit</textual></emphasis><textual class="po-textual">
      </textual><link class="po-inline e221 e221" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.dojotoolkit.org</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e222 e222" xml:id="JSON2XML" xreflabel="JSON2XML"><textual class="po-textual">
      </textual><emphasis class="po-inline e223 e223" role="ital"><textual class="po-textual">JSON and XML import/export</textual></emphasis><textual class="po-textual">
      </textual><link class="po-inline e224 e224" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://json.org/</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e225 e225" xml:id="MozillaFF" xreflabel="Mozilla XForms"><textual class="po-textual">
      </textual><emphasis class="po-inline e226 e226" role="ital"><textual class="po-textual">Mozilla FireFox XForms Extension</textual></emphasis><textual class="po-textual">
      </textual><link class="po-inline e227 e227" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.mozilla.org/projects/xforms/</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e228 e228" xml:id="MVCdefined" xreflabel="MVC"><textual class="po-textual">
      </textual><emphasis class="po-inline e229 e229" role="ital"><textual class="po-textual">Model-View-Control pattern</textual></emphasis><textual class="po-textual">
      </textual><link class="po-inline e230 e230" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://en.wikipedia.org/wiki/Model-view-controller</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e231 e231" xml:id="ODF10" xreflabel="ODF 1.0"><textual class="po-textual">
      </textual><emphasis class="po-inline e232 e232" role="ital"><textual class="po-textual">Open Document Format 1.0</textual></emphasis><textual class="po-textual">
      </textual><link class="po-inline e233 e233" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=office</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e234 e234" xml:id="rhino" xreflabel="Rhino"><textual class="po-textual">
      </textual><emphasis class="po-inline e235 e235" role="ital"><textual class="po-textual">Mozilla Rhino project</textual></emphasis><textual class="po-textual">
      </textual><link class="po-inline e236 e236" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.mozilla.org/rhino/</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e237 e237" xml:id="ubiquity" xreflabel="Ubiquity XForms"><textual class="po-textual">Birbeck, M., Boyer, J.
      </textual><emphasis class="po-inline e238 e238" role="ital"><textual class="po-textual">Ubiquity XForms Open Source Project</textual></emphasis><textual class="po-textual">
      </textual><link class="po-inline e239 e239" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://code.google.com/p/ubiquity-xforms/</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e240 e240" xml:id="PerrinsPatterns" xreflabel="UI Patterns"><textual class="po-textual">Perrins, M.
      </textual><emphasis class="po-inline e241 e241" role="ital"><textual class="po-textual">The 12 Patterns for User Interface Design</textual></emphasis><textual class="po-textual">
      </textual><link class="po-inline e242 e242" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://mattperrins.wordpress.com/2008/12/21/the-12-patterns-for-user-interface-design/</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e243 e243" xml:id="XFDL" xreflabel="XFDL"><textual class="po-textual">
      </textual><emphasis class="po-inline e244 e244" role="ital"><textual class="po-textual">XML Form Definition Language</textual></emphasis><textual class="po-textual">
      </textual><link class="po-inline e245 e245" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://en.wikipedia.org/wiki/Extensible_Forms_Description_Language</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e246 e246" xml:id="XForms11" xreflabel="XForms 1.1"><textual class="po-textual">
      </textual><emphasis class="po-inline e247 e247" role="ital"><textual class="po-textual">W3C XForms 1.1 Recommendation</textual></emphasis><textual class="po-textual">
      </textual><link class="po-inline e248 e248" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xforms/</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e249 e249" xml:id="XFormsImpls" xreflabel="XForms Implementations"><textual class="po-textual">
      </textual><emphasis class="po-inline e250 e250" role="ital"><textual class="po-textual">Implementations of XForms</textual></emphasis><textual class="po-textual">
      </textual><link class="po-inline e251 e251" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/MarkUp/Forms/wiki/XForms_Implementations</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e252 e252" xml:id="SpykerWeb20XML" xreflabel="XML in Web 2.0"><textual class="po-textual">Spyker, A.
      </textual><emphasis class="po-inline e253 e253" role="ital"><textual class="po-textual">The Pain of XML in Web 2.0</textual></emphasis><textual class="po-textual">
      </textual><link class="po-inline e254 e254" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://webspherecommunity.blogspot.com/2010/02/pain-of-xml-in-web-20.html</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e255 e255" xml:id="XSLTXForms" xreflabel="XSLT XForms"><textual class="po-textual">Couthures, A.
      </textual><emphasis class="po-inline e256 e256" role="ital"><textual class="po-textual">XSLT XForms Project</textual></emphasis><textual class="po-textual">
      </textual><link class="po-inline e257 e257" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.agencexml.com/xsltforms</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e258 e258" xml:id="YUI" xreflabel="Yahoo UI library"><textual class="po-textual">
      </textual><emphasis class="po-inline e259 e259" role="ital"><textual class="po-textual">Yahoo User Interface Framework</textual></emphasis><textual class="po-textual">
      </textual><link class="po-inline e260 e260" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://developer.yahoo.com/yui/</textual></link><textual class="po-textual">
    </textual></bibliomixed></bibliography></article></classedDocument>