<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.2" xml:id="Bal2009zhol0812"><title class="po-block e1 e1"><textual class="po-textual">TNTBase: Versioned Storage for XML</textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">Balisage: The Markup Conference 2009</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 11 - 14, 2009</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual">
                Version control systems like CVS and Subversion have transformed collaboration
                workflows in software engineering and made possible the globally distributed project
                teams we know from the Open Source phenomenon. On the other hand, XML is coming of age
                as a basis for document formats, and even though XML as a text-based format is
                amenable to version control in principle, the fact that version control systems work
                on files makes difficult the integration of fragment access techniques like XPath,
                XQuery that are currently revolutionizing XML workflows.
            </textual></para><para class="po-block e8 e8"><textual class="po-textual">
                In this paper we present the </textual><emphasis class="po-inline e9 e9"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> system, an open-source versioned XML
                database obtained by integrating Berkeley DB XML into the Subversion Server. The
                system is intended as a basis for collaborative editing and sharing XML-based
                documents. It integrates versioning and fragment access needed for fine-granular 
                document content management.
            </textual></para></abstract><author class="po-record e10 e10"><personname class="po-record e11 e11"><firstname class="po-field e12 e12"><textual class="po-textual">Vyacheslav</textual></firstname><surname class="po-field e13 e13"><textual class="po-textual">Zholudev</textual></surname></personname><personblurb class="po-container e14 e14"><para class="po-block e15 e15"><textual class="po-textual">Vyacheslav Zholudev graduated in May of 2007 from Saint-Petersburg State University with a Master degree in Computer Science. He is continuing his studies at Jacobs University Bremen as a Ph.D student. Since September of 2007 he has been part of the KWARC research group under the supervision of Prof. Michael Kohlhase.</textual></para></personblurb><affiliation class="po-record e16 e16"><jobtitle class="po-field e17 e17"><textual class="po-textual">PhD Student</textual></jobtitle><orgname class="po-block e18 e18"><textual class="po-textual">Jacobs University Bremen</textual></orgname></affiliation><affiliation class="po-record e19 e19"><jobtitle class="po-field e20 e20"><textual class="po-textual">Research Assistant</textual></jobtitle><orgname class="po-block e21 e21"><textual class="po-textual">DFKI Bremen</textual></orgname></affiliation><email class="po-field e22 e22"><textual class="po-textual">v.zholudev@jacobs-university.de</textual></email></author><author class="po-record e23 e23"><personname class="po-record e24 e24"><firstname class="po-field e25 e25"><textual class="po-textual">Michael</textual></firstname><surname class="po-field e26 e26"><textual class="po-textual">Kohlhase</textual></surname></personname><personblurb class="po-container e27 e27"><para class="po-block e28 e28"><textual class="po-textual">Dr. Michael Kohlhase is a professor for Computer Science at Jacobs University Bremen and Deputy Director of the German Research Center for Artificial Intelligence (DFKI). </textual></para><para class="po-block e29 e29"><textual class="po-textual">He studied pure mathematics at the Universities of Tübingen and Bonn (1983-1989) and
                    continued with computer science, in particular, higher-order unification and automated
                    theorem proving (Ph.D. 1994, Saarland University). Since then, he has taken up research in
                    computational logic, kwnowledge representation, and natural language semantics.</textual></para><para class="po-block e30 e30"><textual class="po-textual">His current research interests include automated theorem proving and knowledge
                    representation for mathematics, inference-based techniques for natural language
                    processing, and computer-supported education. He has pursued these interests during
                    extended visits to Carnegie Mellon University, SRI International, and the Universities of
                    Amsterdam, Edinburgh, and Auckland.</textual></para><para class="po-block e31 e31"><textual class="po-textual">Michael Kohlhase is a recipient of the dissertation award of the Association of German
                    Artificial Intelligence Institutes (AKI; 1995) and of a Heisenberg stipend of the German
                    Research Council (DFG 2000-2003). He was a member of the Special Research Action 378
                    (Resource-Adaptive Cognitive Processes), leading projects on both automated theorem
                    proving and computational linguistics. Michael Kohlhase is trustee of the MKM and
                    CALCULEMUS Conferences, a member of the W3C MathML working group, and the president of the
                    OpenMath Society.</textual></para></personblurb><affiliation class="po-record e32 e32"><jobtitle class="po-field e33 e33"><textual class="po-textual">Professor</textual></jobtitle><orgname class="po-block e34 e34"><textual class="po-textual">Jacobs University Bremen</textual></orgname></affiliation><affiliation class="po-record e35 e35"><jobtitle class="po-field e36 e36"><textual class="po-textual">Vice Director</textual></jobtitle><orgname class="po-block e37 e37"><textual class="po-textual">DFKI Bremen</textual></orgname></affiliation><email class="po-field e38 e38"><textual class="po-textual">m.kohlhase@jacobs-university.de</textual></email></author><legalnotice class="po-container e39 e39"><para class="po-block e40 e40"><textual class="po-textual">Copyright © 2009 Vyacheslav Zholudev, Michael Kohlhase.  Licensed under the Creative Commons License (http://creativecommons.org/licenses/by-sa/3.0/).</textual></para></legalnotice></info><section class="po-hcontainer e41 e41" xml:id="intro"><title class="po-block e42 e42"><textual class="po-textual">Introduction</textual></title><para class="po-block e43 e43"><textual class="po-textual">
            With the rapid growth of computers and Internet resources the communication between humans
            became much more efficient. The number of electronic documents and the speed of
            communication are growing rapidly. We see the development of a deep web (web content
            stored in Databases) from which the surface Web (what we see in our browsers) is
            generated. With the merging of XML fragment access techniques (most notably
            URIs [</textual><xref class="po-milestone e44 e44" linkend="BLFM98"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] and XPath [</textual><xref class="po-milestone e45 e45" linkend="CD99"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, </textual><xref class="po-milestone e46 e46" linkend="BBC07"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]) and database
            techniques and the ongoing development of XML-based document formats, we are seeing the
            beginnings of a deep web of XML documents, where surface documents are assembled,
            aggregated and mashed up from background information in XML databases by techniques like
            XQuery [</textual><xref class="po-milestone e47 e47" linkend="XQu07"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], and document (fragment) collections are managed by XQuery
            Update [</textual><xref class="po-milestone e48 e48" linkend="XQU08"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].            
        </textual></para><para class="po-block e49 e49"><textual class="po-textual">
            At the same time, the Web is constantly changing - it has been estimated that 20% of
            the surface Web changes daily and 30%
            monthly [</textual><xref class="po-milestone e50 e50" linkend="CGM00"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, </textual><xref class="po-milestone e51 e51" linkend="FMNW03"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. While archiving services like the
            </textual><emphasis class="po-inline e52 e52" role="rom"><textual class="po-textual">Wayback Machine</textual></emphasis><textual class="po-textual"> try to get a grip on this for the surface level, we really need
            an infrastructure for managing changes in the XML-based deep web.
        </textual></para><para class="po-block e53 e53"><textual class="po-textual">
            Unfortunately, support for this has been very frugal. Version Control systems like CVS and
            Subversion [</textual><xref class="po-milestone e54 e54" linkend="SVN08"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] which have transformed collaboration workflows in software
            engineering are deeply text-based (wrt. diff/patch/merge) and do not integrate well with
            XML databases and XQuery. Some relational databases address temporal
            aspects [</textual><xref class="po-milestone e55 e55" linkend="DDL02"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], but this does not seem to have counterparts in the XML
            database or XQuery world. Wikis provide simple versioning functionalities, but these are
            largely hand-crafted into each system's (relational) database design.
        </textual></para><para class="po-block e56 e56"><textual class="po-textual">
            In this paper we present the </textual><emphasis class="po-inline e57 e57" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> system, an open-source versioned XML database
            obtained by integrating Berkeley DB XML [</textual><xref class="po-milestone e58 e58" linkend="Ber09b"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] into the Subversion
            Server [</textual><xref class="po-milestone e59 e59" linkend="SVN08"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. The system is intended as an enabling technology that provides a
            basis for future XML-based document management systems that support collaborative editing
            and sharing by integrating the enabling technologies of versioning and fragment access
            needed for fine-granular document content management.  Our aim is to make possible
            workflows and globally distributed project teams as we know them from Open Source
            projects.
        </textual></para><para class="po-block e60 e60"><textual class="po-textual">
            The </textual><emphasis class="po-inline e61 e61" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> system is developed in the context of the 
            </textual><emphasis class="po-inline e62 e62" role="ital"><textual class="po-textual">OMDoc</textual></emphasis><textual class="po-textual"> project 
            (Open Mathematical Documents [</textual><xref class="po-milestone e63 e63" linkend="omd"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, </textual><xref class="po-milestone e64 e64" linkend="Koh06"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]), an XML-based representation
            format for the structure of mathematical knowledge and communication. Correspondingly, the
            development requirements for the </textual><emphasis class="po-inline e65 e65" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> come out of OMDoc-based applications and
            their storage needs. We are experimenting with a math search engine [</textual><xref class="po-milestone e66 e66" linkend="KS06"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">],
            a collaborative community-based reader panta rhei [</textual><xref class="po-milestone e67 e67" linkend="pan"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], the semantic wiki
            SWiM [</textual><xref class="po-milestone e68 e68" linkend="Lan08"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], the learning system for mathematics
            ActiveMath [</textual><xref class="po-milestone e69 e69" linkend="Act08"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], and a system for the verification of statements about
            programs VeriFun [</textual><xref class="po-milestone e70 e70" linkend="Ver08"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">].
        </textual></para><para class="po-block e71 e71"><textual class="po-textual">
            But </textual><emphasis class="po-inline e72 e72" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> as described here is independent of all of these and has no
            specialization to mathematical content. This will be added at another layer,
            re-implementing an earlier system [</textual><xref class="po-milestone e73 e73" linkend="FK00"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, </textual><xref class="po-milestone e74 e74" linkend="KF01"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, </textual><xref class="po-milestone e75 e75" linkend="FK06"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">],
            but other XML-based systems could be supported as well, e.g. semantic Wikis like
            IkeWiKi [</textual><xref class="po-milestone e76 e76" linkend="Sch06"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], KiWi [</textual><xref class="po-milestone e77 e77" linkend="SEG09"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], eLearning
            Systems [</textual><xref class="po-milestone e78 e78" linkend="CNX08"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, </textual><xref class="po-milestone e79 e79" linkend="Tea06"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], scientific document archives, etc.
        </textual></para><para class="po-block e80 e80"><textual class="po-textual">
            In the next section we will review the state of the art in versioning and XML databases,
            describing the two systems we combine and extend for </textual><emphasis class="po-inline e81 e81" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual">.  In
            Section </textual><xref class="po-milestone e82 e82" linkend="sec_system"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> we an overview of a </textual><emphasis class="po-inline e83 e83" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> architecture and interfaces it
            exposes.  To make an every part of the architecture picture clear we will continue with
            describing the core of </textual><emphasis class="po-inline e84 e84" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> - the XML-enabled repository in
            Section </textual><xref class="po-milestone e85 e85" linkend="sec_xmlenrep"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and the Java accessory library in
            Section </textual><xref class="po-milestone e86 e86" linkend="sec_dbxmlaccessor"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. Section </textual><xref class="po-milestone e87 e87" linkend="sec_vfs"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> showcases an advanced feature of
            </textual><emphasis class="po-inline e88 e88" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual">: Virtual Files. Section </textual><xref class="po-milestone e89 e89" linkend="sec_concl"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> concludes the paper.
        </textual></para></section><section class="po-hcontainer e90 e90" xml:id="sec_state"><title class="po-block e91 e91"><textual class="po-textual">State of the Art</textual></title><para class="po-block e92 e92"><textual class="po-textual">
            The </textual><emphasis class="po-inline e93 e93" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> system is based on two widespread open-source systems: Subversion and
            Berkeley DB XML. We provide a short description of those aspects of the systems that are
            relevant to TNTBase and discuss what is missing for versioned XML-storage.
        </textual></para><section class="po-hcontainer e94 e94" xml:id="rel_svn"><title class="po-block e95 e95"><textual class="po-textual">Subversion</textual></title><para class="po-block e96 e96"><textual class="po-textual">
                Subversion (SVN) is one of the most popular open-source client-server version control
                systems. On a server side SVN maintains versions and history of documents and directories in a
                repository. Users work with such a
                repository by </textual><emphasis class="po-inline e97 e97" role="ital"><textual class="po-textual">checking out</textual></emphasis><textual class="po-textual"> to a local working space the directory tree (a working
                copy). This maintenance is performed by the SVN client utility. 
                After a working copy is checked out users can perform various actions with it [</textual><xref class="po-milestone e98 e98" linkend="CSFP04"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]: change,
                update from a repository or propagate changes back to a repository, changing properties of
                directories or files, merging different source trees, etc. The </textual><emphasis class="po-inline e99 e99" role="ital"><textual class="po-textual">update</textual></emphasis><textual class="po-textual"> command
                performs merging of a local working copy with the latest version in a repository. In case
                when automated merging is not solvable, a user has to edit conflicting files
                manually. Afterwards in order to propagate local changes back to a repository a user
                performs a </textual><emphasis class="po-inline e100 e100" role="ital"><textual class="po-textual">commit</textual></emphasis><textual class="po-textual">. Using above mentioned commands comprises the typical workflow
                encountered by SVN users. We have covered only the basic concepts, but that is enough to
                get a rough conception of SVN. In Section </textual><xref class="po-milestone e101 e101" linkend="sec_xmlenrep"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> we will show that 
                the </textual><emphasis class="po-inline e102 e102" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> core is a substitution of an SVN server. 
            </textual></para><para class="po-block e103 e103"><textual class="po-textual">
                SVN is not aware of content inside a repository (apart from distinguishing binary and text
                files). For SVN users it does not make a difference whether they store text files, PDFs or
                XSLT stylesheets. In particular, SVN does not support native XML processing like XML
                databases. By XML-processing we mean possibilities to query XML-documents, index them in
                order to improve querying performance, benefit from XQuery Update
                facilities [</textual><xref class="po-milestone e104 e104" linkend="XQU08"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] or utilize transactional mechanism in order to keep
                collection of XML documents consistent. Thus when we are talking about XML storing we
                should look at the XML-databases which is a subject of the next subsection.
            </textual></para><para class="po-block e105 e105"><textual class="po-textual">
                Another limitation of SVN is that the smallest versioned entity in its repository is a
                file. But for some users it might be desirable to abstract away from the notion of files,
                and work with XML objects like a section in scientific papers in the DocBook format or
                theorems or proofs in mathematical documents. Roughly speaking, a user should be able to
                get away from the file metaphor (see [</textual><xref class="po-milestone e106 e106" linkend="MK08"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] for further ideas).
            </textual></para></section><section class="po-hcontainer e107 e107" xml:id="rel_bdbxml"><title class="po-block e108 e108"><textual class="po-textual">Berkeley DB XML</textual></title><para class="po-block e109 e109"><textual class="po-textual">
                Berkeley DB XML (DB XML) is an open-source, XML-native embedded database. Embeddedness
                means that it is distributed as a library with a number of API for various programming
                languages like C++, Java, Perl, Ruby and some others. This approach does not have an
                overhead by having surrounding environment like servlets or stand-alone servers. Also the
                embeddedness eliminates some database administration costs. DB XML is built on top of
                Berkeley DB [</textual><xref class="po-milestone e110 e110" linkend="Ber09a"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] which is used by such applications as SVN (the
                consequences of this are discussed in Section </textual><xref class="po-milestone e111 e111" linkend="sec_xmlenrep"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">), the RPM Package
                Manager </textual><xref class="po-milestone e112 e112" linkend="RPM09"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, the MySQL database </textual><xref class="po-milestone e113 e113" linkend="MyS08"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and Postfix </textual><xref class="po-milestone e114 e114" linkend="Pos09"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">,
                to name just a few of the most notable. Berkeley DB is an open source, embeddable database
                with zero administration; and DB XML inherits its advantages and features
                (e.g. portability, transactions, replications, easy deployment, etc.) from it. Naturally DB
                XML extends this with the typical XML-native database features:
                XQuery-based [</textual><xref class="po-milestone e115 e115" linkend="XQu07"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] access to documents (with XQuery Update facilities
                support), support of transactions, preparsed queries, content-based indexing, scalability,
                recovery and locking mechanisms and the ability to work in multi-threaded and multi-process
                environments. Furthermore DB XML has established a reputation of being a scalable and
                very productive XML-native database that makes it a good choice to base the </textual><emphasis class="po-inline e116 e116" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual">
                system on.
            </textual></para><para class="po-block e117 e117"><textual class="po-textual">
                But unfortunately DB XML does not support versioning which is becoming more and more important when 
                managing collections of XML documents. Some of the products [</textual><xref class="po-milestone e118 e118" linkend="Ipe09"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, </textual><xref class="po-milestone e119 e119" linkend="Mar09"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, </textual><xref class="po-milestone e120 e120" linkend="Ora09b"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] 
                on the XML-native databases market actually support versioning in a way, but this versioning has a bunch of limitations 
                in comparison to ordinary version control systems like SVN or CVS, and moreover they all have a commercial license. 
                On the other hand there is no popular version control systems which treat XML in a special way.
                This should be a goal of </textual><emphasis class="po-inline e121 e121" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> as well.
            </textual></para></section></section><section class="po-hcontainer e122 e122" xml:id="sec_system" xreflabel="The System Design and Interfaces"><title class="po-block e123 e123"><textual class="po-textual">The System Design and Interfaces</textual></title><para class="po-block e124 e124"><textual class="po-textual">
            The </textual><emphasis class="po-inline e125 e125" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> architecture is presented in Figure </textual><xref class="po-milestone e126 e126" linkend="tntbase_figure"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. 
            We tried to keep it simple and understandable for readers by not showing irrelevant parts of the system. 
            The core of </textual><emphasis class="po-inline e127 e127" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> is </textual><emphasis class="po-inline e128 e128" role="ital"><textual class="po-textual">xSVN</textual></emphasis><textual class="po-textual"> (see Section </textual><xref class="po-milestone e129 e129" linkend="sec_xmlenrep"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">). 
            It is managed by Apache's </textual><emphasis class="po-inline e130 e130" role="ital"><textual class="po-textual">mod_dav_svn</textual></emphasis><textual class="po-textual"> module or accessed by </textual><emphasis class="po-inline e131 e131" role="ital"><textual class="po-textual">DB XML Accessor</textual></emphasis><textual class="po-textual"> 
            (see Section </textual><xref class="po-milestone e132 e132" linkend="sec_dbxmlaccessor"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) locally on the same machine.
            Apache's mod_dav_svn module exposes an HTTP interface exactly like it is done in SVN. 
            Thereby a user of </textual><emphasis class="po-inline e133 e133" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> is able to 
            work with </textual><emphasis class="po-inline e134 e134" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> repository exactly 
            in the same way as with a normal SVN repository via HTTP protocol 
            including Apache's SVN authentication via </textual><emphasis class="po-inline e135 e135" role="ital"><textual class="po-textual">authz</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e136 e136" role="ital"><textual class="po-textual">groups</textual></emphasis><textual class="po-textual"> files. 
            The non-XML content can be managed as well in </textual><emphasis class="po-inline e137 e137" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual">, but only via discussed xSVN's HTTP interface. 	
        </textual></para><figure class="po-container e138 e138" floatstyle="1" xml:id="tntbase_figure" xreflabel="TNTBase architecture"><mediaobject class="po-container e139 e139"><imageobject class="po-container e140 e140"><imagedata class="po-meta e141 e141" fileref="../../../vol3/graphics/Zholudev01/Zholudev01-001.png" format="png" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e142 e142"><para class="po-block e143 e143"><textual class="po-textual">TNTBase architecture</textual></para></caption></figure><para class="po-block e144 e144"><textual class="po-textual">
            DB XML Accessor is able to work with XML-content in an xSVN repository. Actually
            it works directly only with a part of it, namely with an xSVN container by utilizing DB XML
            API. All indispensable information needed for XML-specific tasks is incorporated in a DB
            XML container using additional documents or metadata fields of documents.  </textual><emphasis class="po-inline e145 e145" role="ital"><textual class="po-textual">SVNKitAdapter</textual></emphasis><textual class="po-textual">
            comes into play when the revision information needs to be accessed, and acts as a mediator
            between an xSVN repository and DB XML Accessor. And in turn when DB XML Accessor intends
            to create a new revision in a \xSVN repository it also exploits SVNKitAdapter
            functionality. In Figure </textual><xref class="po-milestone e146 e146" linkend="tntbase_figure"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> note that SVNKitAdapter does not work
            directly with \xSVN, but accesses it via HTTP as SVNKit [</textual><xref class="po-milestone e147 e147" linkend="SVN07"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] can not access BDB-based
            repositories via the local protocol. But because we expose SVN HTTP access, this is
            not a problem.
        </textual></para><para class="po-block e148 e148"><textual class="po-textual">
            DB XML Accessor realizes a number of useful features but is able to access an xSVN
            repository only locally. In order to exhibit all its functionality to the world, RESTful
            interface of </textual><emphasis class="po-inline e149 e149" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> is provided for users. The full specification can be found at
            </textual><link class="po-inline e150 e150" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">https://trac.mathweb.org/tntbase/wiki/info</textual></link><textual class="po-textual">, but to get a rough idea what a user is
            able to do with it, see Sections </textual><xref class="po-milestone e151 e151" linkend="sec_dbxmlaccessor"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">
            and </textual><xref class="po-milestone e152 e152" linkend="sec_vfs"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> devoted to the DB XML Accessor features.  We use the
            Jersey [</textual><xref class="po-milestone e153 e153" linkend="Jer09"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] library to implement a RESTful interface in
            </textual><emphasis class="po-inline e154 e154" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual">. Jersey is a reference implementations of JAX-RS (JSR 311), the Java API
            for RESTful Web Services [</textual><xref class="po-milestone e155 e155" linkend="JSR09"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] and has simplified our implementation
            considerably. 
        </textual></para><para class="po-block e156 e156"><textual class="po-textual">
            Apart from RESTful interface, </textual><emphasis class="po-inline e157 e157" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> provides a test web-form that allows users to
            play with a subset of the </textual><emphasis class="po-inline e158 e158" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> functionality before using RESTful style of
            communication. For simple testing of RESTful interfaces we would suggest the Firefox
            plugin which could be found at </textual><link class="po-inline e159 e159" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">https://addons.mozilla.org/en-US/firefox/addon/9780</textual></link><textual class="po-textual">.
            Also an XML-content browser is available online that shows the </textual><emphasis class="po-inline e160 e160" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> file system
            content including virtual files. Unfortunately </textual><emphasis class="po-inline e161 e161" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> now supports authentication
            only when accessing its SVN interface. The united authentication for all interfaces is a
            subject for future work</textual><footnote class="po-popup e162 e162"><para class="po-block e163 e163"><textual class="po-textual">
                    see Ticket https://trac.mathweb.org/tntbase/ticket/3
                </textual></para></footnote><textual class="po-textual">.
        </textual></para><para class="po-block e164 e164"><textual class="po-textual">
            Currently readers can access a test </textual><emphasis class="po-inline e165 e165" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> system by two URLs: SVN interface at
            </textual><link class="po-inline e166 e166" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">https://alpha.tntbase.mathweb.org/repos/lectures/</textual></link><textual class="po-textual"> and other interfaces at
            </textual><link class="po-inline e167 e167" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://alpha.tntbase.mathweb.org:8080/lectures/</textual></link><textual class="po-textual">. Additional information about
            </textual><emphasis class="po-inline e168 e168" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> can be found on its TRAC page at </textual><link class="po-inline e169 e169" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">https://trac.mathweb.org/tntbase/</textual></link><textual class="po-textual">.
        </textual></para></section><section class="po-hcontainer e170 e170" xml:id="sec_xmlenrep" xreflabel="xSVN"><title class="po-block e171 e171"><textual class="po-textual">xSVN, an XML-enabled Repository</textual></title><para class="po-block e172 e172"><textual class="po-textual">
            The architecture of xSVN and thus </textual><emphasis class="po-inline e173 e173" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> is motivated 
            by the following observation: Both the SVN server
            and the DB XML library are based on Berkeley DB (BDB). The SVN server uses it to store
            repository information</textual><footnote class="po-popup e174 e174"><para class="po-block e175 e175"><textual class="po-textual">In fact SVN can also use a file-system based storage
                    back end (SVN FS), but this does not affect </textual><emphasis class="po-inline e176 e176" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual">.</textual></para></footnote><textual class="po-textual">, and DB XML uses for storing raw bytes of XML and for supporting
            consistency, recoverability and transactions. Moreover, transactions can be shared
            between BDB and DB XML. Let us look at the situation in more detail</textual><footnote class="po-popup e177 e177"><para class="po-block e178 e178"><textual class="po-textual">The
                    more comprehensive information could be found at
                    </textual><link class="po-inline e179 e179" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://svn.collab.net/repos/svn/trunk/subversion/libsvn_fs_base/notes/structure</textual></link><textual class="po-textual">
                    for the full story</textual></para></footnote><textual class="po-textual">.
        </textual></para><para class="po-block e180 e180"><textual class="po-textual">
            The SVN BDB-based file system uses multiple tables to store different repository
            information like information about locks, revisions, transactions, files, and directories,
            etc.. The two important tables for us are </textual><emphasis class="po-inline e181 e181" role="ital"><textual class="po-textual">representations</textual></emphasis><textual class="po-textual"> and 
            </textual><emphasis class="po-inline e182 e182" role="ital"><textual class="po-textual">strings</textual></emphasis><textual class="po-textual">. The </textual><emphasis class="po-inline e183 e183" role="ital"><textual class="po-textual">strings</textual></emphasis><textual class="po-textual"> table 
            stores only raw bytes and one entry of this table could be any of these:
            </textual><itemizedlist class="po-table e184 e184"><listitem class="po-container e185 e185"><para class="po-block e186 e186"><textual class="po-textual">a file's contents or a delta</textual><footnote class="po-popup e187 e187"><para class="po-block e188 e188"><textual class="po-textual">a difference between two versions of the same
                        entity (directory entry lists, files, property lists) in a special format</textual></para></footnote><textual class="po-textual"> that reconstructs file contents
                    </textual></para></listitem><listitem class="po-container e189 e189"><para class="po-block e190 e190"><textual class="po-textual">a directory entry list in special format called </textual><emphasis class="po-inline e191 e191" role="ital"><textual class="po-textual">skel</textual></emphasis><textual class="po-textual"> or 
                    a delta that reconstructs a directory entry list skel</textual></para></listitem><listitem class="po-container e192 e192"><para class="po-block e193 e193"><textual class="po-textual">a property list skel or a delta that reconstructs a property list skel</textual></para></listitem></itemizedlist><textual class="po-textual">
        </textual></para><figure class="po-container e194 e194" floatstyle="1" xml:id="xsvn_figure" xreflabel="xSVN Repository"><mediaobject class="po-container e195 e195"><imageobject class="po-container e196 e196"><imagedata class="po-meta e197 e197" fileref="../../../vol3/graphics/Zholudev01/Zholudev01-002.png" format="png" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e198 e198"><para class="po-block e199 e199"><textual class="po-textual">xSVN Repository</textual></para></caption></figure><para class="po-block e200 e200"><textual class="po-textual">
            From looking at a </textual><emphasis class="po-inline e201 e201" role="ital"><textual class="po-textual">strings</textual></emphasis><textual class="po-textual"> entry alone there is no way to tell what kind of data it
            represents; the SVN server uses the </textual><emphasis class="po-inline e202 e202" role="ital"><textual class="po-textual">representations</textual></emphasis><textual class="po-textual"> table for this. Its entries are
            links that address entries in the </textual><emphasis class="po-inline e203 e203" role="ital"><textual class="po-textual">strings</textual></emphasis><textual class="po-textual"> table together with information about
            what kind of </textual><emphasis class="po-inline e204 e204" role="ital"><textual class="po-textual">strings</textual></emphasis><textual class="po-textual"> entry it references, and - if it is a delta - what it is a
            delta against. Note that the SVN server stores only the youngest revision (called the
            </textual><emphasis class="po-inline e205 e205" role="ital"><textual class="po-textual">head revision</textual></emphasis><textual class="po-textual">) explicitly in the </textual><emphasis class="po-inline e206 e206" role="ital"><textual class="po-textual">strings</textual></emphasis><textual class="po-textual"> table. Other revisions of
            whatever entity (a file, a directory or a property list) are re-computed by recursively
            applying inverse deltas from the head revision.
        </textual></para><para class="po-block e207 e207"><textual class="po-textual">
            To extend SVN to xSVN (an </textual><emphasis class="po-inline e208 e208" role="ital"><textual class="po-textual">XML-enabled repository</textual></emphasis><textual class="po-textual">), we only need to subjoin the
            DB XML library to SVN and add a new type of entry in the </textual><emphasis class="po-inline e209 e209" role="ital"><textual class="po-textual">representations</textual></emphasis><textual class="po-textual"> table that
            points to the last version of that document in the DB XML </textual><emphasis class="po-inline e210 e210" role="ital"><textual class="po-textual">container</textual></emphasis><textual class="po-textual"> (see
            Figure </textual><xref class="po-milestone e211 e211" linkend="xsvn_figure"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">). Containers are entities in DB XML that are used for storing
            XML documents in. Literally, a container is a file on disk that contains all the data
            associated with your documents, including metadata and indices. For every xSVN repository
            we use only one container located in the same folder as BDB tables, and therefore it
            allows us to share the same BDB environment exploited by an SVN back end.
        </textual></para><para class="po-block e212 e212"><textual class="po-textual">
            From an end-user perspective there is no difference between SVN and xSVN: all the
            SVN commands are still available and have the same behavior. But for XML documents the
            internals are different. Assume that we commit a newly added XML file</textual><footnote class="po-popup e213 e213"><para class="po-block e214 e214"><textual class="po-textual">xSVN considers a file as an XML document if its extension is </textual><emphasis class="po-inline e215 e215" role="ital"><textual class="po-textual">.xml</textual></emphasis><textual class="po-textual"> or its
                    </textual><emphasis class="po-inline e216 e216" role="ital"><textual class="po-textual">svn:mime-type</textual></emphasis><textual class="po-textual"> property is set to either </textual><emphasis class="po-inline e217 e217" role="ital"><textual class="po-textual">text/xml</textual></emphasis><textual class="po-textual"> or
                    </textual><emphasis class="po-inline e218 e218" role="ital"><textual class="po-textual">application/xml</textual></emphasis><textual class="po-textual">. This behavior can be easily adapted, for instance, by checking
                    if a file starts with </textual><emphasis class="po-inline e219 e219" role="ital"><textual class="po-textual">&lt;?xml</textual></emphasis><textual class="po-textual">. Even now an SVN repository administrator 
                    can benefit from using automated property setting, 
                    i.e. associate certain file extensions with </textual><emphasis class="po-inline e220 e220" role="ital"><textual class="po-textual">text/xml</textual></emphasis><textual class="po-textual"> 
                    </textual><emphasis class="po-inline e221 e221" role="ital"><textual class="po-textual">svn:mime-type</textual></emphasis><textual class="po-textual"> property. 
                    For example, </textual><emphasis class="po-inline e222 e222" role="ital"><textual class="po-textual">*.xslt</textual></emphasis><textual class="po-textual"> or </textual><emphasis class="po-inline e223 e223" role="ital"><textual class="po-textual">*.xsd</textual></emphasis><textual class="po-textual"> would obtain 
                    </textual><emphasis class="po-inline e224 e224" role="ital"><textual class="po-textual">text/xml</textual></emphasis><textual class="po-textual"> mime-type on adding to a 
                    working copy and therefore will be treated as XML files for xSVN.</textual></para></footnote><textual class="po-textual">. Its content does not go 
            to the </textual><emphasis class="po-inline e225 e225" role="ital"><textual class="po-textual">strings</textual></emphasis><textual class="po-textual"> table, but instead a file is added to DB XML container with a name
                which is equal to the reference key stored in the also newly created
            </textual><emphasis class="po-inline e226 e226" role="ital"><textual class="po-textual">representations</textual></emphasis><textual class="po-textual"> entry of </textual><emphasis class="po-inline e227 e227" role="ital"><textual class="po-textual">DB XML full-text</textual></emphasis><textual class="po-textual"> type.  When we commit a number
                of files and even one of the XML files is not well-formed then the commit fails and no data
                are added into an xSVN repository, which conforms to the notion of a transaction in SVN
                and DB XML. When we want to checkout or update a working copy, xSVN knows what files are
                stored in DB XML, and those files are read from a DB XML container. Another important thing
                is the scenario when we commit another version of an XML file. The older revision is
                deleted from DB XML, the newer revision is added to DB XML and a delta between these
                revisions are stored in the </textual><emphasis class="po-inline e228 e228" role="ital"><textual class="po-textual">strings</textual></emphasis><textual class="po-textual"> table. This delta has a normal text SVN format, and
                the SVN deltification algorithms have not been changed in xSVN. Thus we are still able to
                receive older revisions of XML documents. For non-XML files the workflow of xSVN is
                absolutely the same as in SVN: data are stored in the same BDB tables, and the code
                behaves entirely in the same way. Thereby we are also able to store text or binary data in
                xSVN which can supplement the collection of XML files (e.g. licensing information or
                generated out of XML PDFs). And moreover we can add or commit XML and non-XML files in the
                same transaction.
        </textual></para><para class="po-block e229 e229"><textual class="po-textual">
            As was mentioned above, xSVN deltification algorithms are inherited from normal
            SVN. The natural course of things for XML storage would be to substitute or extend these
            algorithms by XML-diff algorithms. We currently decided against this because SVN is a
            very complex system with differencing algorithms being an evidence of it. The more parts
            are subject for replacement or modification, the more efforts it requires and the less
            stable system becomes in comparison with the original well-tested one. Moreover, the
            text-based diff-algorithms are efficient, fast and reliable, nicely fit in with SVN
            architecture (to be precise, they are a part of it). Finally, it is not clear that there
            is any advantage to changing the deltification </textual><emphasis class="po-inline e230 e230" role="ital"><textual class="po-textual">on the server</textual></emphasis><textual class="po-textual">. It is however
            clear that XML differencing brings great advantages </textual><emphasis class="po-inline e231 e231" role="ital"><textual class="po-textual">in the client</textual></emphasis><textual class="po-textual"> both in terms
            of smaller and less invasive deltas, and more informative conflict resolution
            strategies. But for transport in the server these "semantic differences" can be
            transformed into text-based diffs. If future research turns up advantages for supporting "semantic
            differences" in the server, we will integrate this into the xSVN server, otherwise we
            leave semantic differencing to the client layer integrated into </textual><emphasis class="po-inline e232 e232" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual">.
        </textual></para><para class="po-block e233 e233"><textual class="po-textual">
            In conclusion: xSVN, as we presented it so far, offers a versioned XML storage, but without additional modules
            it is useless as the only difference from SVN is that it refuses to commit ill-formed XML
            documents. 
        </textual></para></section><section class="po-hcontainer e234 e234" xml:id="sec_dbxmlaccessor" xreflabel="DB XML Accessor"><title class="po-block e235 e235"><textual class="po-textual">The DB XML Accessor Library</textual></title><para class="po-block e236 e236"><textual class="po-textual">
            So far we have introduced xSVN, an enhanced in our sense SVN, which stores the last revisions of XML files 
            in DB XML instead of BDB. The next decision was to implement a Java library (DB XML Accessor) 
            for internal usage which will serve as another brick to build the </textual><emphasis class="po-inline e237 e237" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> system. 
            So we have a DB XML container that contains all of the newest revisions of XML files, 
            and we have a Java API for accessing this container. How do we proceed?
        </textual></para><section class="po-hcontainer e238 e238" xml:id="sec_querying" xreflabel="Querying XML Documents"><title class="po-block e239 e239"><textual class="po-textual">Querying XML Documents</textual></title><para class="po-block e240 e240"><textual class="po-textual">
                We will start with a short description how querying is done in DB XML and in 
                DB XML Accessor. As in nearly every XML-native database, the query language in DB XML is XQuery. 
                To address the whole container in DB XML we use </textual><emphasis class="po-inline e241 e241" role="ital"><textual class="po-textual">collection('dbxml:/&lt;container_name&gt;')</textual></emphasis><textual class="po-textual">. 
                To access a particular document in a container DB XML uses 
                </textual><emphasis class="po-inline e242 e242" role="ital"><textual class="po-textual">doc('dbxml:/&lt;container_name&gt;/&lt;doc_name_inside_container&gt;')</textual></emphasis><textual class="po-textual"> syntax.
            </textual></para><para class="po-block e243 e243"><textual class="po-textual">
                DB XML Accessor utilizes slightly extended and simplified syntax of accessing documents in a DB XML container. 
                Since we have only one container in xSVN, to access all documents in a container just use 
                </textual><emphasis class="po-inline e244 e244" role="ital"><textual class="po-textual">collection()</textual></emphasis><textual class="po-textual">, to access a particular document use </textual><emphasis class="po-inline e245 e245" role="ital"><textual class="po-textual">doc(&lt;path_to_doc&gt;)</textual></emphasis><textual class="po-textual">. 
            </textual></para><para class="po-block e246 e246"><textual class="po-textual">
                Here we should say something about how the latter query is transformed to DB XML syntax. 
                As we mentioned in Section </textual><xref class="po-milestone e247 e247" linkend="sec_xmlenrep"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, we use reference keys from the 
                </textual><emphasis class="po-inline e248 e248" role="ital"><textual class="po-textual">representations</textual></emphasis><textual class="po-textual">
                table as documents names in DB XML. There is another way to preserve a path and a document name in DB XML.
                To accomplish this DB XML document metadata are used. 
                Each document in a container can have an arbitrary set of metadata fields of different types. 
                This metadata could be also indexed by DB XML, which might improve performance of particular queries. 
                So when xSVN adds a new XML document into a container, it also sets a document location in a repository, 
                a document name and a full path of a document. For instance, if we have a document </textual><emphasis class="po-inline e249 e249" role="ital"><textual class="po-textual">paper.xml</textual></emphasis><textual class="po-textual"> 
                in the </textual><emphasis class="po-inline e250 e250" role="ital"><textual class="po-textual">/Balisage</textual></emphasis><textual class="po-textual"> folder, then the location in a repository would be 
                </textual><emphasis class="po-inline e251 e251" role="ital"><textual class="po-textual">/Balisage</textual></emphasis><textual class="po-textual">, 
                the document name - </textual><emphasis class="po-inline e252 e252" role="ital"><textual class="po-textual">paper.xml</textual></emphasis><textual class="po-textual">, and the full path - </textual><emphasis class="po-inline e253 e253" role="ital"><textual class="po-textual">/Balisage/paper.xml</textual></emphasis><textual class="po-textual">. 
                At first glance this information might seem redundant, especially taking into account that 
                xSVN stores all of these in BDB tables. But by this approach we do not lose much except 
                some storage space and writing performance when index of metadata should be updated. 
                But we gain much more, now we are independent in DB XML Accessor from BDB tables, 
                and each of the metadata fields can improve performance on particular queries which deal with documents paths.    
            </textual></para><para class="po-block e254 e254"><textual class="po-textual">
                Thanks to the mentioned above metadata fields, it is possible to access a subset of documents in a container. 
                For this one should use </textual><emphasis class="po-inline e255 e255" role="ital"><textual class="po-textual">collection(&lt;arbitrary_path&gt;)</textual></emphasis><textual class="po-textual"> in 
                DB XML Accessor. For example </textual><emphasis class="po-inline e256 e256" role="ital"><textual class="po-textual">collection(/doc*//test//paper??.xml)</textual></emphasis><textual class="po-textual"> 
                would address all documents which names corresponds to the pattern </textual><emphasis class="po-inline e257 e257" role="ital"><textual class="po-textual">paper??.xml</textual></emphasis><textual class="po-textual"> 
                (a '?' is just a wildcard) and they contain </textual><emphasis class="po-inline e258 e258" role="ital"><textual class="po-textual">test</textual></emphasis><textual class="po-textual"> directory in the path and the 
                first directory of which starts with </textual><emphasis class="po-inline e259 e259" role="ital"><textual class="po-textual">doc</textual></emphasis><textual class="po-textual">.
            </textual></para><para class="po-block e260 e260"><textual class="po-textual">
                Also DB XML Accessor exposes methods for retrieving contents and paths of documents which 
                are located at some arbitrary paths. Wildcards or '//', which stands for an arbitrary number of subfolders in a path, 
                could also be used. All these queries would not be so efficient if we did not introduce a file system concept 
                in xSVN container. Why did we have to introduce a file system? The answer is simple: 
                DB XML does not have any hierarchical structure inside its containers. The next sections explains how we have introduced it. 
            </textual></para></section><section class="po-hcontainer e261 e261" xml:id="sec_fs" xreflabel="File System in an xSVN Container"><title class="po-block e262 e262"><textual class="po-textual">File System in an xSVN Container</textual></title><para class="po-block e263 e263"><textual class="po-textual">
                We already introduced the file path metadata fields in Section </textual><xref class="po-milestone e264 e264" linkend="sec_querying"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. 
                Using them it is possible to reproduce the file system
                tree, but unfortunately it is not always efficiently. Assume that we want to find out what
                directories and files are located in a particular folder. For this we would have to
                execute a substring query on our file path metadata field. If a DB XML container contains
                a huge collection of documents then we could have a big delay while performing a seemingly
                simple task.  The solution was to introduce ad-hoc XML documents in an xSVN container, one
                for each directory. We call such XML documents as </textual><emphasis class="po-inline e265 e265" role="ital"><textual class="po-textual">file system documents
                (FSDs)</textual></emphasis><textual class="po-textual">. FSDs have a special name format: </textual><emphasis class="po-inline e266 e266" role="ital"><textual class="po-textual">tnt:&lt;directory_path&gt;</textual></emphasis><textual class="po-textual">. 
                Each of these FSDs contains a list of directory entries in XML format. For example for directory
                </textual><emphasis class="po-inline e267 e267" role="ital"><textual class="po-textual">/Balisage/papers</textual></emphasis><textual class="po-textual"> we might have the following FSD inside an xSVN container (its
                name is </textual><emphasis class="po-inline e268 e268" role="ital"><textual class="po-textual">tnt:/Balisage/papers/</textual></emphasis><textual class="po-textual">):
            </textual></para><programlisting class="po-block e269 e269" xml:space="preserve"><textual class="po-textual">
                &lt;entries xmlns="http://tntbase.mathweb.org/ns"&gt;
                    &lt;dir name="sources"/&gt;
                    &lt;dir name="references"/&gt;
                    &lt;file name="paper_zholudev.xml"/&gt;
                    &lt;file name="paper_kohlhase.xml"/&gt;
                    &lt;vfile name="notations.vf" id="dbxml_54"/&gt;  &lt;!--will be explained later --&gt;
                &lt;/entries&gt;
            </textual></programlisting><para class="po-block e270 e270"><textual class="po-textual">
                Now we can easily and efficiently find out about entries in the particular directory using XQuery. 
                Here we should mention that such FSDs exist only for a folder which contain XML files or folders which contain XML files. 
                Thereby we do not interfere with other content of an xSVN repository like text files or images. 
                xSVN takes care about consistency in such FSDs, e.g. if a folder becomes empty after deletion of XML files, 
                then the corresponding FSD is removed from a DB XML container and the folder is removed from the parent's folder entries 
                and so on recursively. Also if we add some XML files to a newly created folder, then the file system structure 
                is created recursively. 
            </textual></para></section><section class="po-hcontainer e271 e271" xml:id="sec_write" xreflabel="Write Access to TNTBase"><title class="po-block e272 e272"><textual class="po-textual">Write Access to </textual><emphasis class="po-inline e273 e273" role="ital"><textual class="po-textual">TNTBase</textual></emphasis></title><para class="po-block e274 e274"><textual class="po-textual">
                So far we discussed only how to retrieve content and query an xSVN container by DB XML
                Accessor. But is it possible to write to xSVN using DB XML Accessor, or perform an
                XQUpdate query? The answer is positive. Then the next question arises, what would happen
                with revisions of XML files inside an xSVN repository?  Shortly the answer is that the
                updated XML files will get a new revision in xSVN, then will be deltified, and a delta will be
                stored in BDB. Thus all history of modifications will be preserved. Let us discuss how we
                have accomplished that.
            </textual></para><para class="po-block e275 e275"><textual class="po-textual">
                In DB XML Accessor we use the </textual><emphasis class="po-inline e276 e276" role="ital"><textual class="po-textual">SVNKitAdapter</textual></emphasis><textual class="po-textual"> library, which is based on the
                SVNKit - a Java library that re-implements the SVN client
                functionality. This allows us to work directly with an xSVN repository without a need to
                have a local working copy. In particular, SVNKit follows the SVN protocol to makes sure
                that no changes are lost on a commit; it forces an in-memory update and construct a delta
                between the local and the (updated) head revision. Only this delta is sent to a repository
                by SVNKit. But things get more complicated if we intend to modify an XML document by XQUpdate
                facilities. Then DB XML Accessor substitutes the original XQUpdate with a transform
                function (see [</textual><xref class="po-milestone e277 e277" linkend="XQU08"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] for more details), which returns a modified document but
                does not modify a document internally in DB XML. Then this modified part is sent via
                SVNKitAdapter to xSVN in the usual way: SVNKit creates a new revision of a file and stores
                a delta against the previous version. Thus we can again retrieve a version of a file
                before executing XQUpdate. The xSVN log message would tell users how this change has
                occurred.
            </textual></para></section><section class="po-hcontainer e278 e278"><title class="po-block e279 e279"><textual class="po-textual">Querying Previous Revisions</textual></title><para class="po-block e280 e280"><textual class="po-textual">
                Even though the xSVN container only stores the head revision of XML files we can query
                previous revisions of XML files: DB XML Accessor can </textual><emphasis class="po-inline e281 e281" role="ital"><textual class="po-textual">cache</textual></emphasis><textual class="po-textual"> XML files in the same
                xSVN container for the respective revision. Then we are able to query XML files
                exactly like we describe it in Section </textual><xref class="po-milestone e282 e282" linkend="sec_querying"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> but additionally providing a
                revision of interest. Note that only those files that have been cached before will be
                queried. Analogously we can remove a set of documents from a cache. Then they will not be
                queried. The advantage of this approach is that we choose manually the interesting subset
                of a revision thereby avoiding redundant filling of an xSVN container and eliminating
                unnecessary results. Also we are able to cache the single file unlike SVN when we are able
                to checkout or export only folders. Note that we can even cache the head revision, even
                though the head xSVN container already contains it. This can be useful when we intend to
                query against the documents of an exact revision: documents of the head revision can
                evolve, but cached documents remain the same.
            </textual></para><para class="po-block e283 e283"><textual class="po-textual">
                All caching is mediated by SVNKitAdapter, which retrieves the necessary revisions from an
                xSVN repository. Then these revisions are added to a DB XML container with a special
                metadata field that denotes a revision number. This metadata field is also indexed, which
                improves performance on querying. All XML documents of the latest revision have a revision
                meta field equal to '-1'. This field allows us to distinguish different revisions when
                querying without loosing performance. In order to cache the latest revision, one should
                provide the exact number of it.    
            </textual></para></section><section class="po-hcontainer e284 e284" xml:id="sec_caching" xreflabel="Caching Query Results"><title class="po-block e285 e285"><textual class="po-textual">Caching Query Results</textual></title><para class="po-block e286 e286"><textual class="po-textual">
                DB XML Accessor can cache query results in situations where a query incurs a large
                processing load, but the files that contribute to a query result change rarely. The user
                must simply pass a corresponding option to a query engine and receive a unique access
                handle with the computed result. Of course it is also possible to clean an xSVN container
                from cached results if they are not needed any longer or became obsolete. Internally, DB
                XML Accessor stores query results as separate documents. To distinguish them from
                e.g. FSDs introduced in Section </textual><xref class="po-milestone e287 e287" linkend="sec_vfs"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, we introduce a </textual><emphasis class="po-inline e288 e288" role="ital"><textual class="po-textual">type</textual></emphasis><textual class="po-textual"> metadata field
                which is also applied for virtual files (see Section </textual><xref class="po-milestone e289 e289" linkend="sec_vfs"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).
            </textual></para></section></section><section class="po-hcontainer e290 e290" xml:id="sec_vfs" xreflabel="Virtual Files"><title class="po-block e291 e291"><textual class="po-textual">Virtual Files</textual></title><para class="po-block e292 e292"><textual class="po-textual">
            In this section we introduce a powerful concept - a </textual><emphasis class="po-inline e293 e293" role="ital"><textual class="po-textual">Virtual File (VF)</textual></emphasis><textual class="po-textual">. A VF is a
            </textual><emphasis class="po-inline e294 e294" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> file system entity which is a result of a particular XQuery expression, i.e. a
            VF is characterized by XQuery expression and a revision number this expression operates
            on. For instance if we create a VF with XQuery that returns the list of references from
            all scientific papers in a repository, then the content of a VF would be the list of
            references.            
        </textual></para><section class="po-hcontainer e295 e295"><title class="po-block e296 e296"><textual class="po-textual">Creating a Virtual File and Getting Information about Virtual Files</textual></title><para class="po-block e297 e297"><textual class="po-textual">
                A VF is a file system entity that records the following information:
            </textual></para><itemizedlist class="po-table e298 e298"><listitem class="po-container e299 e299"><para class="po-block e300 e300"><textual class="po-textual">an XQuery expression together with a list of namespace declarations which are used
                    by it. The VF contents are determined by this XQUery expression. If XQuery provided is
                    not valid, then TNTBase notifies the user and does not create the VF.</textual></para></listitem><listitem class="po-container e301 e301"><para class="po-block e302 e302"><textual class="po-textual">a revision number that a VF operates on. Note that if we did not cache any
                    documents for that revision, then the content of a VF will be empty.</textual></para></listitem><listitem class="po-container e303 e303"><para class="po-block e304 e304"><textual class="po-textual">a description of what a VF does. This will simplify understanding for other users of
                    VF intention. This field can be blank of course.</textual></para></listitem><listitem class="po-container e305 e305"><para class="po-block e306 e306"><textual class="po-textual">a VF path in a repository. It will be not allowed to create a VF if a file system
                    entity already exists in the specified path. Even though it is possible to create a VF
                    in folders which do not exist yet. In this case a directory structure will be created
                    automatically.</textual></para></listitem></itemizedlist><para class="po-block e307 e307"><textual class="po-textual">
                For instance, if somebody is interested in all definitions from mathematical documents in a folder where a VF is being created, 
                then (s)he can provide the following information to DB XML Accessor:
            </textual></para><itemizedlist class="po-table e308 e308"><listitem class="po-container e309 e309"><para class="po-block e310 e310"><textual class="po-textual">
                    XQuery: </textual><emphasis class="po-inline e311 e311" role="ital"><textual class="po-textual">collection(./*.omdoc)//ns:definitions</textual></emphasis><textual class="po-textual"> together with the
                    namespaces: </textual><emphasis class="po-inline e312 e312" role="ital"><textual class="po-textual">(ns, http://www.mathweb.org/omdoc)</textual></emphasis><textual class="po-textual">. Note that the first
                    '.' in the XQuery means the folder where a VF is being created.
                </textual></para></listitem><listitem class="po-container e313 e313"><para class="po-block e314 e314"><textual class="po-textual">Revision number: </textual><emphasis class="po-inline e315 e315" role="ital"><textual class="po-textual">-1</textual></emphasis><textual class="po-textual">. Stands for the latest revision</textual></para></listitem><listitem class="po-container e316 e316"><para class="po-block e317 e317"><textual class="po-textual">Description: </textual><emphasis class="po-inline e318 e318" role="ital"><textual class="po-textual">This VF returns all definitions from the current folder</textual></emphasis></para></listitem><listitem class="po-container e319 e319"><para class="po-block e320 e320"><textual class="po-textual">Path: </textual><emphasis class="po-inline e321 e321" role="ital"><textual class="po-textual">/omdoc/theories/defs.vf</textual></emphasis><textual class="po-textual">. A VF </textual><emphasis class="po-inline e322 e322" role="ital"><textual class="po-textual">defs.vf</textual></emphasis><textual class="po-textual"> 
                    will be created in the folder </textual><emphasis class="po-inline e323 e323" role="ital"><textual class="po-textual">/omdoc/theories</textual></emphasis></para></listitem></itemizedlist><para class="po-block e324 e324"><textual class="po-textual">
                After a VF has been created, one can easily retrieve its 'content', i.e. in our example all definitions in OMDoc documents in the </textual><emphasis class="po-inline e325 e325" role="ital"><textual class="po-textual">/omdoc/theories</textual></emphasis><textual class="po-textual"> folder. 
                For the sake of example, a reader might also find useful Figure </textual><xref class="po-milestone e326 e326" linkend="vf_figure"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. 
            </textual></para><figure class="po-container e327 e327" floatstyle="1" xml:id="vf_figure" xreflabel="Definitions virtual file"><mediaobject class="po-container e328 e328"><imageobject class="po-container e329 e329"><imagedata class="po-meta e330 e330" fileref="../../../vol3/graphics/Zholudev01/Zholudev01-003.jpg" format="jpg" width="80%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e331 e331"><para class="po-block e332 e332"><textual class="po-textual">Definitions virtual file</textual></para></caption></figure><para class="po-block e333 e333"><textual class="po-textual">
                That is a typical creation procedure that is supported by DB XML Accessor. When a VF is
                created a new entity is added to a corresponding FSD. This entity is called </textual><emphasis class="po-inline e334 e334" role="ital"><textual class="po-textual">vfile</textual></emphasis><textual class="po-textual">
                and also contains a name of a newly created DB XML document that encapsulates information
                about a VF. We call such a document as a </textual><emphasis class="po-inline e335 e335" role="ital"><textual class="po-textual">VF encapsulated document (VFED)</textual></emphasis><textual class="po-textual">. To
                retrieve the content of a VF the corresponding FSD is checked for the VF. If a VF exists,
                then a name of a VFED is read. When we know the name of a VFED, then we are able to
                receive an XQuery expression from that document. As soon as we have an XQuery expression
                we can execute it and deliver results to a user. Namespace declarations which have been
                provided during a creation of a VF are used during XQuery execution and are stored in a
                VFED.
            </textual></para><para class="po-block e336 e336"><textual class="po-textual">
                VFEDs are tagged with the metadata
                field </textual><emphasis class="po-inline e337 e337" role="ital"><textual class="po-textual">type</textual></emphasis><textual class="po-textual"> discussed in Section </textual><xref class="po-milestone e338 e338" linkend="sec_caching"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. Therefore we can easily pick out only VFs and retrieve information
                about them in an xSVN container like their descriptions, revisions they operate on, their
                names, etc. Thus we are not get lost in the variety of VFs that users might have created. 
            </textual></para></section><section class="po-hcontainer e339 e339"><title class="po-block e340 e340"><textual class="po-textual">Caching and Querying Virtual Files</textual></title><para class="po-block e341 e341"><textual class="po-textual">
                To make VFs more like VIEWS in relational data bases, DB XML Accessor also allows them to
                be queried, but only if their content has been cached. This allows the user to specify
                which VFs participate in querying. Note that if XML files which form the content of a VF
                have been changed, the cache of a VF is not changed. This is a target for a future
                work</textual><footnote class="po-popup e342 e342"><para class="po-block e343 e343"><textual class="po-textual">see Ticket </textual><link class="po-inline e344 e344" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">https://trac.mathweb.org/tntbase/ticket/50</textual></link></para></footnote><textual class="po-textual">. Caching also might be useful
                when a user intends to receive a content of a VF quickly and is sure that the cache
                contains up-to-date data. This is especially worthwhile when an XQuery expression of a VF is computationally expensive.
            </textual></para><para class="po-block e345 e345"><textual class="po-textual">
                When DB XML Accessor receives a command to cache a content of a VF (during creation of a
                VF, receiving VF's content or just via simple re-cache command), then the VF's content is
                stored in an xSVN container in the corresponding VFED. Results are wrapped in the special
                XML elements that are indexed. When querying VFs a user should use the same query syntax
                as (s)he uses for usual XML documents. That is possible because each VFED contains
                metadata fields for a VF path and its name. So for DB XML Accessor it does not make too
                much difference what is being queried: XML documents of the latest revision, cached
                documents of former revisions or VFs.
            </textual></para></section><section class="po-hcontainer e346 e346"><title class="po-block e347 e347"><textual class="po-textual">Editing Virtual Files</textual></title><para class="po-block e348 e348"><textual class="po-textual">
                We complete this section by introducing another operation that could be performed on
                VFs. We are talking about editing VFs, i.e. in some cases (which we will explain a bit
                later) it is possible to retrieve a VF for editing, modify it and submit changes
                back. Then the files from which a VF was formed will be modified in xSVN and will receive
                a new revision. Returning back to our example with a VF that contains definitions of
                mathematical objects, if we modify all definitions in this file, then all OMDoc files in
                the folder </textual><emphasis class="po-inline e349 e349" role="ital"><textual class="po-textual">/omdoc/theories</textual></emphasis><textual class="po-textual"> that contain definitions will be modified accordingly
                and committed to xSVN.
            </textual></para><para class="po-block e350 e350"><textual class="po-textual">
                This approach has a number of limitations, some of them are quite obvious and
                straightforward:
            </textual></para><itemizedlist class="po-table e351 e351"><listitem class="po-container e352 e352"><para class="po-block e353 e353"><textual class="po-textual">A VF we intend to modify should operate on the latest revision, since we can not
                    change a particular revision in xSVN, because once committed a revision becomes
                    persistent in a repository.</textual></para></listitem><listitem class="po-container e354 e354"><para class="po-block e355 e355"><textual class="po-textual">We can edit only those VFs whose results are elements of some XML documents in DB
                    XML, to be precise attributes or XML nodes. We rely on DB XML query engine to figure
                    that out. If a result type is an XML node or attribute from DB XML point of view then we
                    allow to edit such elements and show them in a list of results to be modified. But we
                    can not edit pure text values which come from XML elements since text elements could be
                    mixed with other XML elements, and when we retrieve such a text we lose the information
                    before/after which nested element this text element has come from.</textual></para></listitem><listitem class="po-container e356 e356"><para class="po-block e357 e357"><textual class="po-textual">The VF content is a set of results. Every result should be wrapped in a special XML
                    element that contains the special information to allow DB XML Accessor to propagate
                    changes back to original files. A user is only allowed to edit inside such elements,
                    otherwise important information could be lost.</textual></para></listitem></itemizedlist><para class="po-block e358 e358"><textual class="po-textual">
                This allow us to get rid of a notion of files in a way and operate on the level of
                objects and version them, although internally in xSVN the minimal versioned entity is
                still a file. Let us provide an example of the VF
                that contains a list of creators in OMDoc files.
            </textual></para><programlisting class="po-block e359 e359" xml:space="preserve"><textual class="po-textual">
                &lt;?xml version="1.0" encoding="UTF-8"?&gt;
                &lt;tnt:vfile name="defs.vf" mode="edit" xmlns:tnt="http://tntbase.mathweb.org/ns" 
                    xmlns="http://www.mathweb.org/omdoc" xmlns:dc="http://purl.org/dc/elements/1.1/"&gt;
                    &lt;tnt:note&gt;
                        WARNING: do not edit 'results' elements, edit only within them! 
                        Otherwise TNTBase will not be able to version the corresponding 
                        original files! Appending additional result elements may harm 
                        your TNTBase content. Additional elements under 'tnt:vfile' other 
                        than 'tnt:result' will be ignored 
                    &lt;/tnt:note&gt;
                    &lt;tnt:result file_path="/ecc.omdoc" element_path="/omdoc/metadata" 
                        element_name="dc:creator" element_type="element" id="1"&gt;
                        &lt;dc:creator role="trl"&gt;Michael Kohlhase&lt;/dc:creator&gt;
                    &lt;/tnt:result&gt;
                    &lt;tnt:result file_path="/ecc.omdoc" element_path="/omdoc/metadata" 
                        element_name="dc:creator" element_type="element" id="2"&gt;
                        &lt;dc:creator role="ant"&gt;The OpenMath Society&lt;/dc:creator&gt;
                    &lt;/tnt:result&gt;
                    &lt;tnt:result file_path="/omstd/arithmetics1.omdoc" element_path="/omdoc/
                        symbol/metadata"  element_name="dc:creator" element_type="element" id="3"&gt;
                        &lt;dc:creator role="ant"&gt;The TNTBase Society&lt;/dc:creator&gt;
                    &lt;/tnt:result&gt;
                &lt;/tnt:vfile&gt;
            </textual></programlisting><para class="po-block e360 e360"><textual class="po-textual">
                This file is obtained for editing and as was discussed above contain wrappers with a set of attributes. 
                Elements with the same name and path in the same documents are distinguished by the </textual><emphasis class="po-inline e361 e361" role="ital"><textual class="po-textual">id</textual></emphasis><textual class="po-textual"> attribute.
            </textual></para><para class="po-block e362 e362"><textual class="po-textual">
                A couple of words how it is realized in DB XML Accessor.  
                As we can see out of the example, every result of a VF is wrapped in a special XML element that contains the information about an original document, 
                a path in the original document, a name of an element, a type of an element (an attribute or a node) and a unique id. 
                All these items allow us to construct a unified XQUpdate expression for an every modified original document. 
                So in our example, if we modify each element, then it means that we should propagate changes to two documents: 
                </textual><emphasis class="po-inline e363 e363" role="ital"><textual class="po-textual">/ecc.omdoc</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e364 e364" role="ital"><textual class="po-textual">/omstd/arithmetics1.omdoc</textual></emphasis><textual class="po-textual">. For the former one XQUpdate will contain two replacement statements, 
                for the latter one - only one replacement statement. Then the technique described in Section </textual><xref class="po-milestone e365 e365" linkend="sec_write"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> is applied. 
            </textual></para></section></section><section class="po-hcontainer e366 e366" xml:id="sec_concl" xreflabel="Conclusion and Future Work"><title class="po-block e367 e367"><textual class="po-textual">Conclusion and Future Work</textual></title><para class="po-block e368 e368"><textual class="po-textual">
            We have presented the </textual><emphasis class="po-inline e369 e369" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> system, a
            versioned XML database system that can act as a storage solution for an XML-based deep
            web. The implementation effort has reached a state, where the system has enough features
            to be used in experimental applications. </textual><emphasis class="po-inline e370 e370" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> may significantly ease
            implementation and experimentation of XML-based applications, as it allows us to offload the
            storage layer to a separate system. Moreover users which require only versioning
            functionality may use </textual><emphasis class="po-inline e371 e371" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> as a version control system whereas more exigent
            users can experiment with additional features of the system.        
        </textual></para><para class="po-block e372 e372"><textual class="po-textual">
            The next development goals will be to stabilize the system further, to improve performance
            and extend it with special infrastructure for the OMDoc language. As an extended case
            study we want to develop </textual><emphasis class="po-inline e373 e373" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> into an archive and content management system
            for scientific publications and semi-formal theories. A practical limitation that needs to
            be overcome on the way to this is the lack of a unified authentication and rights
            management subsystem.
        </textual></para><figure class="po-container e374 e374" floatstyle="1" xml:id="example_figure" xreflabel="Distributed Scientific Publishing"><mediaobject class="po-container e375 e375"><imageobject class="po-container e376 e376"><imagedata class="po-meta e377 e377" fileref="../../../vol3/graphics/Zholudev01/Zholudev01-004.png" format="png" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e378 e378"><para class="po-block e379 e379"><textual class="po-textual">Distributed Scientific Publishing</textual></para></caption></figure><para class="po-block e380 e380"><textual class="po-textual">
            In the near future, we want to study how the difference-based architecture inherent in
            version control systems can be extended to a distribution model. Consider for instance the
            situation in Figure </textual><xref class="po-milestone e381 e381" linkend="example_figure"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">: Michael started to work on his paper with future
            intentions to propagate it to Jacobs University. During the creation Normen wants to have
            a cache copy of a Michael's paper on his computer and look after the changes. From time to
            time Michael pushes his work to Jacobs University and the corresponding people at Jacobs
            checks the correctness of the paper. Then assume Figure </textual><xref class="po-milestone e382 e382" linkend="example_figure"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">(b). When
            everything is done from Michael's side he wants to pass the rights for primary editing to
            university and only receive updates from it. Notice that Normen still depends on the
            Michael's updates. Now Jacobs University propagates its changes of the paper to some
            Journal and its stuff validates the correctness. Here is the same scenario as with Michael
            and Jacobs University in Figure </textual><xref class="po-milestone e383 e383" linkend="example_figure"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">(a). Finally (see
            Figure </textual><xref class="po-milestone e384 e384" linkend="example_figure"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">(c)) Jacobs University passes the rights for original editing of
            the paper to a Journal (like Michael did with Jacobs) and Normen decides to switch the
            source of cached copy to Jacobs since he thinks that Jacobs contains more actual
            information. We assume that all the individuals and institutions in our examples are
            running </textual><emphasis class="po-inline e385 e385" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> installations that store the relevant documents. Some instance of
            these are "originals", others are working copies that are updated from them and that
            commit to them. Crucially the </textual><emphasis class="po-inline e386 e386" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> take over all the necessary caching and
            communication of differences to make the process transparent and effortless to the users.
            The preliminary idea is to implement a client library inside a </textual><emphasis class="po-inline e387 e387" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> web
            application that will be taught to speak to other instances of </textual><emphasis class="po-inline e388 e388" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> and receive
            information from them. This library would exploit the SVNKitAdapter module, which will be
            in charge of checking compatibility of documents versions and commit or update necessary
            paths in an xSVN repository.
        </textual></para><para class="po-block e389 e389"><textual class="po-textual">
            Also our plans include the further work regarding virtual files. 
            Some efficiency improvements should be done as well as more intelligent caching should be implemented. 
            By "more intelligent" here we mean that the cache of virtual files should be updated automatically when the original files 
            in a repository which form a VF content are changed. That would also mean the gain of performance since every time when we receive a content
            of a VF or query it, we can be sure that the cache is up-to-date and we do not need to regenerate it.
        </textual></para><para class="po-block e390 e390"><textual class="po-textual">
            Finally, we plan to extend the XQuery family of languages with primitives for versioning
            to develop the full potential of the </textual><emphasis class="po-inline e391 e391" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> system. The main operations here
            will be the propagation of changes, conflicts and non-interference judgments along
            semantic dependency relation; see [</textual><xref class="po-milestone e392 e392" linkend="MK08"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] for first ideas. Currently much of the
            necessary content relations are language-dependent, but we will try to distill query and
            propagation primitives that can be implemented in the </textual><emphasis class="po-inline e393 e393" role="ital"><textual class="po-textual">TNTBase</textual></emphasis><textual class="po-textual"> system level.
        </textual></para></section><bibliography class="po-hcontainer e394 e394"><title class="po-block e395 e395"><textual class="po-textual">Bibliography</textual></title><bibliomixed class="po-block e396 e396" xml:id="Act08" xreflabel="Act08"><textual class="po-textual">
            </textual><emphasis class="po-inline e397 e397" role="ital"><textual class="po-textual">ActiveMath</textual></emphasis><textual class="po-textual">, seen September 2008. Web page at </textual><link class="po-inline e398 e398" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.activemath.org/</textual></link><textual class="po-textual">.
        </textual></bibliomixed><bibliomixed class="po-block e399 e399" xml:id="BBC07" xreflabel="BBC+07"><textual class="po-textual">
            Anders Berglund, Scott Boag, Don Chamberlin, Mary F. Fernandez, Michael Kay,
            Jonathan Robie, and Jerome Simeon. XML Path Language (XPath) Version 2.0. W3C
            recommendation, The World Wide Web Consortium, January 2007.                        
        </textual></bibliomixed><bibliomixed class="po-block e400 e400" xml:id="Ber09a" xreflabel="Ber09a"><textual class="po-textual">
            Berkeley DB, seen January 2009. Available at </textual><link class="po-inline e401 e401" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.oracle.com/technology/products/berkeley-db/index.html</textual></link><textual class="po-textual">.
        </textual></bibliomixed><bibliomixed class="po-block e402 e402" xml:id="Ber09b" xreflabel="Ber09b"><textual class="po-textual">
            Berkeley DB XML, seen January 2009. Available at </textual><link class="po-inline e403 e403" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.oracle.com/database/berkeley-db/xml/index.html</textual></link><textual class="po-textual">.
        </textual></bibliomixed><bibliomixed class="po-block e404 e404" xml:id="BLFM98" xreflabel="BLFM98"><textual class="po-textual">
            Tim Berners-Lee, R. Fielding, and L. Masinter. Uniform Resource Identifiers (URI),
            Generic Syntax. RFC 2717, Internet Engineering Task Force, 1998.
        </textual></bibliomixed><bibliomixed class="po-block e405 e405" xml:id="CD99" xreflabel="CD99"><textual class="po-textual">
            James Clark and Steve DeRose. XML Path Language (XPath) Version 1.0. W3C
            recommendation, The World Wide Web Consortium, November 1999.
        </textual></bibliomixed><bibliomixed class="po-block e406 e406" xml:id="CGM00" xreflabel="CGM00"><textual class="po-textual">
            J. Cho and H. Garcia-Molina. The evolution of the web and implications for an
            incremental crawler. In Proc. of the 26th International Conference on Very Large
            Databases, pages 200-209, 2000.
        </textual></bibliomixed><bibliomixed class="po-block e407 e407" xml:id="CNX08" xreflabel="CNX08"><textual class="po-textual">
            </textual><emphasis class="po-inline e408 e408" role="ital"><textual class="po-textual">Connexions</textual></emphasis><textual class="po-textual">. Web page at </textual><link class="po-inline e409 e409" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://cnx.org</textual></link><textual class="po-textual">, seen June 2008.
        </textual></bibliomixed><bibliomixed class="po-block e410 e410" xml:id="CSFP04" xreflabel="CSFP04"><textual class="po-textual">
            Ben Collins-Sussman, Brian W. Fitzpatrick, and Michael Pilato. </textual><emphasis class="po-inline e411 e411"><textual class="po-textual">Version Control With
                Subversion</textual></emphasis><textual class="po-textual">. O'Reilly &amp; Associates, Inc., Sebastopol, CA, USA, 2004.
        </textual></bibliomixed><bibliomixed class="po-block e412 e412" xml:id="DDL02" xreflabel="DDL02"><textual class="po-textual">
            C.J. Date, Hugh Darwen, and Nikos Lorentzos. </textual><emphasis class="po-inline e413 e413"><textual class="po-textual">Temporal Data &amp; the Relational
                Model</textual></emphasis><textual class="po-textual">. The Morgan Kaufmann Series in Data Management Systems. Morgan
            Kaufmann, 2002.
        </textual></bibliomixed><bibliomixed class="po-block e414 e414" xml:id="FK00" xreflabel="FK00"><textual class="po-textual">
            Andreas Franke and Michael Kohlhase. System description: </textual><emphasis class="po-inline e415 e415"><textual class="po-textual">MBase</textual></emphasis><textual class="po-textual">, an open mathematical
            knowledge base. In David McAllester, editor, </textual><emphasis class="po-inline e416 e416"><textual class="po-textual">Automated Deduction - CADE-17</textual></emphasis><textual class="po-textual">, number 1831 in LNAI, pages 455-459. Springer Verlag, 2000.
        </textual></bibliomixed><bibliomixed class="po-block e417 e417" xml:id="FK06" xreflabel="FK06"><textual class="po-textual">
            Andreas Franke and Michael Kohlhase. MBase, an open mathematical knowledge
            base. In OMDoc - </textual><emphasis class="po-inline e418 e418"><textual class="po-textual">An open markup format for mathematical documents [Version 1.2]</textual></emphasis><textual class="po-textual">
            [Koh06], chapter 26.4.
        </textual></bibliomixed><bibliomixed class="po-block e419 e419" xml:id="FMNW03" xreflabel="FMNW03"><textual class="po-textual">
            Dennis Fetterly, Mark Manasse, Marc Najork, and Janet Wiener. A large-scale
            study of the evolution of web pages. In WWW2003. ACM Press, 2003.
        </textual></bibliomixed><bibliomixed class="po-block e420 e420" xml:id="Ipe09" xreflabel="Ipe09"><textual class="po-textual">
            Ipedo XML Database, seen March 2009. Available at </textual><link class="po-inline e421 e421" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.ipedo.com/html/ipedo_xml_db.html</textual></link><textual class="po-textual">.
        </textual></bibliomixed><bibliomixed class="po-block e422 e422" xml:id="Jer09" xreflabel="Jer09"><textual class="po-textual">
            Reference Implementation for building RESTful Web services, seen April 2009. Available
            at </textual><link class="po-inline e423 e423" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">https://jersey.dev.java.net/</textual></link><textual class="po-textual">.
        </textual></bibliomixed><bibliomixed class="po-block e424 e424" xml:id="JSR09" xreflabel="JSR09"><textual class="po-textual">
            JSR 311: JAX-RS: The Java API for RESTful Web Services, seen April 2009. Available
            at </textual><link class="po-inline e425 e425" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">https://jsr311.dev.java.net/nonav/releases/1.0/index.html</textual></link><textual class="po-textual">.
        </textual></bibliomixed><bibliomixed class="po-block e426 e426" xml:id="KF01" xreflabel="KF01"><textual class="po-textual">
            Michael Kohlhase and Andreas Franke. MBase: Representing knowledge and context
            for the integration of mathematical software systems. </textual><emphasis class="po-inline e427 e427"><textual class="po-textual">Journal of Symbolic Computation;
                Special Issue on the Integration of Computer Algebra and Deduction Systems</textual></emphasis><textual class="po-textual">,
            32(4):365-402, 2001. doi: </textual><biblioid class="po-atom e428 doi e428"><textual class="po-textual">10.1006/jsco.2000.0468</textual></biblioid><textual class="po-textual">.
        </textual></bibliomixed><bibliomixed class="po-block e429 e429" xml:id="Koh06" xreflabel="Koh06"><textual class="po-textual">
            Michael Kohlhase. OMDoc - </textual><emphasis class="po-inline e430 e430"><textual class="po-textual">An open markup format for mathematical documents [Version 1.2]</textual></emphasis><textual class="po-textual">. Number 4180 in LNAI. Springer Verlag, 2006.
        </textual></bibliomixed><bibliomixed class="po-block e431 e431" xml:id="Koh08" xreflabel="Koh08"><textual class="po-textual">
            Michael Kohlhase. Using LaTeX as a semantic markup format. Mathematics in Computer Science, 2008. doi: </textual><biblioid class="po-atom e432 doi e432"><textual class="po-textual">10.1007/s11786-008-0055-5</textual></biblioid><textual class="po-textual">.
        </textual></bibliomixed><bibliomixed class="po-block e433 e433" xml:id="KS06" xreflabel="KS06"><textual class="po-textual">
            Michael Kohlhase and Ioan Sucan. A search engine for mathematical formulae. In
            Tetsuo Ida, Jacques Calmet, and Dongming Wang, editors, </textual><emphasis class="po-inline e434 e434"><textual class="po-textual">Proceedings of Artificial
                Intelligence and Symbolic Computation</textual></emphasis><textual class="po-textual">, AISC'2006, number 4120 in LNAI, pages 241-253. Springer Verlag, 2006. doi: </textual><biblioid class="po-atom e435 doi e435"><textual class="po-textual">10.1007/11856290_21</textual></biblioid><textual class="po-textual">.
        </textual></bibliomixed><bibliomixed class="po-block e436 e436" xml:id="Lan08" xreflabel="Lan08"><textual class="po-textual">
            Christoph Lange. SWiM: A semantic wiki for mathematical knowledge management.
            Web page at </textual><link class="po-inline e437 e437" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://kwarc.info/projects/swim/</textual></link><textual class="po-textual">, seen October 2008.
        </textual></bibliomixed><bibliomixed class="po-block e438 e438" xml:id="Mar09" xreflabel="Mar09"><textual class="po-textual">
            MarkLogic Server, seen March 2009. Available at </textual><link class="po-inline e439 e439" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.marklogic.com/product/marklogic-server.html</textual></link><textual class="po-textual">.
        </textual></bibliomixed><bibliomixed class="po-block e440 e440" xml:id="Mil07" xreflabel="Mil07"><textual class="po-textual">
            Bruce Miller. </textual><emphasis class="po-inline e441 e441"><textual class="po-textual">LaTeXML</textual></emphasis><textual class="po-textual">: A LaTeX to xml converter. Web Manual at </textual><link class="po-inline e442 e442" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://dlmf.nist.gov/LaTeXML/</textual></link><textual class="po-textual">, seen September2007.
        </textual></bibliomixed><bibliomixed class="po-block e443 e443" xml:id="MK08" xreflabel="MK08"><textual class="po-textual">
            Normen Mueller and Michael Kohlhase. Fine-Granular Version Control &amp; Redundancy
            Resolution. In Joachim Baumeister and Martin Atzmueller, editors, </textual><emphasis class="po-inline e444 e444"><textual class="po-textual">Wissens- und Erfahrungsmanagement
                LWA (Lernen, Wissensentdeckung und Adaptivitaet) Conference Proceedings</textual></emphasis><textual class="po-textual">, volume 448, 2008.
        </textual></bibliomixed><bibliomixed class="po-block e445 e445" xml:id="MyS08" xreflabel="MyS08"><textual class="po-textual">
            Mysql, seen June 2008. Homepage at http://www.mysql.com/.
        </textual></bibliomixed><bibliomixed class="po-block e446 e446" xml:id="omd" xreflabel="omd"><textual class="po-textual">
            The OMDoc repository. Web page at </textual><link class="po-inline e447 e447" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://omdoc.org</textual></link><textual class="po-textual">.
        </textual></bibliomixed><bibliomixed class="po-block e448 e448" xml:id="Ora09a" xreflabel="Ora09a"><textual class="po-textual">
            Oracle Database, seen April 2009. Available at </textual><link class="po-inline e449 e449" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.oracle.com/database/index.html</textual></link><textual class="po-textual">.
        </textual></bibliomixed><bibliomixed class="po-block e450 e450" xml:id="Ora09b" xreflabel="Ora09b"><textual class="po-textual">
            Oracle XML DB, seen April 2009. Available at </textual><link class="po-inline e451 e451" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.oracle.com/technology/tech/xml/xmldb/index.html</textual></link><textual class="po-textual">.
        </textual></bibliomixed><bibliomixed class="po-block e452 e452" xml:id="pan" xreflabel="pan"><textual class="po-textual">
            The panta rhei Project. </textual><link class="po-inline e453 e453" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://trac.kwarc.info/panta-rhei</textual></link><textual class="po-textual">. Seen March 2009.
        </textual></bibliomixed><bibliomixed class="po-block e454 e454" xml:id="Pos09" xreflabel="Pos09"><textual class="po-textual">
            Postfix, seen May 2009. Homepage at http://www.postfix.org/.
        </textual></bibliomixed><bibliomixed class="po-block e455 e455" xml:id="RPM09" xreflabel="RPM09"><textual class="po-textual">
            The rpm package manager, seen May 2009. Homepage at http://www.rpm.org/.
        </textual></bibliomixed><bibliomixed class="po-block e456 e456" xml:id="Sch06" xreflabel="Sch06"><textual class="po-textual">
            Sebastian Schaffert. IkeWiki: A semantic wiki for collaborative knowledge management.
            In </textual><emphasis class="po-inline e457 e457"><textual class="po-textual">1st International Workshop on Semantic Technologies in Collaborative Applications
                STICA 06, Manchester, UK</textual></emphasis><textual class="po-textual">, June 2006.
        </textual></bibliomixed><bibliomixed class="po-block e458 e458" xml:id="SEG09" xreflabel="SEG09"><textual class="po-textual">
            Sebastian Schaffert, Julia Eder, Szaby Gr&#127;unwald, Thomas Kurz, Mihai Radulescu,
            Rolf Sint, and Stephanie Stroka. KiWi - a platform for semantic social software. In
            Christoph Lange, Sebastian Schaffert, Hala Skaf-Molli, and Max Voelkel, editors, </textual><emphasis class="po-inline e459 e459"><textual class="po-textual">Proceedings
            of the 4th Workshop on Semantic Wikis, European Semantic Web Conference
            2009</textual></emphasis><textual class="po-textual">, Hersonissos, Greece, June 2009. In press.
        </textual></bibliomixed><bibliomixed class="po-block e460 e460" xml:id="SVN07" xreflabel="SVN07"><textual class="po-textual">
            SVNKit - The only pure Java Subversion library in the world!, seen September 2007.
            Available at </textual><link class="po-inline e461 e461" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://svnkit.com/</textual></link><textual class="po-textual">.
        </textual></bibliomixed><bibliomixed class="po-block e462 e462" xml:id="SVN08" xreflabel="SVN08"><textual class="po-textual">
            Subversion, seen June 2008. Available at </textual><link class="po-inline e463 e463" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://subversion.tigris.org/</textual></link><textual class="po-textual">.
        </textual></bibliomixed><bibliomixed class="po-block e464 e464" xml:id="Tea06" xreflabel="Tea06"><textual class="po-textual">
            Connexions Team. Connexions: Sharing knowledge and building communities.
            White paper at </textual><link class="po-inline e465 e465" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://cnx.org/aboutus/publications/ConnexionsWhitePaper.pdf</textual></link><textual class="po-textual">, 2006.
        </textual></bibliomixed><bibliomixed class="po-block e466 e466" xml:id="Ver08" xreflabel="Ver08"><textual class="po-textual">
            VeriFun: A verifier for functional programs, seen February 2008. System homepage at </textual><link class="po-inline e467 e467" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.verifun.de/</textual></link><textual class="po-textual">.
        </textual></bibliomixed><bibliomixed class="po-block e468 e468" xml:id="XQu07" xreflabel="XQu07"><textual class="po-textual">
            XQuery: An XML Query Language, seen December 2007. Available at </textual><link class="po-inline e469 e469" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xquery/</textual></link><textual class="po-textual">.
        </textual></bibliomixed><bibliomixed class="po-block e470 e470" xml:id="XQU08" xreflabel="XQU08"><textual class="po-textual">
            XQUpdate: XQuery Update Facility 1.0, seen February 2008. Available at </textual><link class="po-inline e471 e471" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xquery-update-10/</textual></link><textual class="po-textual">.
        </textual></bibliomixed></bibliography></article></classedDocument>