<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.3"><title class="po-block e1 e1"><textual class="po-textual">Tag Libraries for XSLT and XQuery</textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">Balisage: The Markup Conference 2011</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 2 - 5, 2011</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual">XML has mature tools for validation, transformation, and query,
but current tools require a level of programming skills that many users
who need dynamic documents do not have. Using the organizational pattern
of tag libraries (borrowed from Java tag libraries), we propose to divide
responsibilities for dynamic documents between two classes of people.
Tag-library developers implement query, transformation, or component formatting
for predefined tags in a library; document authors create dynamic documents
by embedding elements from the tag library in HTML, XSL-FO, or other documents;
when the document is processed, elements from the tag library are replaced
by automatically generated content. A callback mechanism allows the document author
to pass document fragments to the tag library for parameterization. Document authors
can use tag libraries in ways not foreseen by the tag library developers and
can combine tag libraries from different developers. A robust tag-library solution
will foster better collaboration between XML developers and creators of XML documents.
</textual></para></abstract><author class="po-record e8 e8"><personname class="po-record e9 e9"><firstname class="po-field e10 e10"><textual class="po-textual">Erik</textual></firstname><surname class="po-field e11 e11"><textual class="po-textual">Hennum</textual></surname></personname><personblurb class="po-container e12 e12"><para class="po-block e13 e13"><textual class="po-textual">Erik Hennum is a Senior Engineer at MarkLogic Corporation. He has worked with XML and RDF representations for document repositories and processing over 10 years including projects with taxonomy definition and subject classification. He was a member of the OASIS DITA Technical Committee from inception to the DITA 1.2 specification.</textual></para></personblurb><affiliation class="po-record e14 e14"><jobtitle class="po-field e15 e15"><textual class="po-textual">Senior Application Engineer</textual></jobtitle><orgname class="po-block e16 e16"><textual class="po-textual">MarkLogic Inc.</textual></orgname></affiliation><email class="po-field e17 e17"><textual class="po-textual">efhennum@gmail.com</textual></email></author><author class="po-record e18 e18"><personname class="po-record e19 e19"><firstname class="po-field e20 e20"><textual class="po-textual">Vyacheslav</textual></firstname><surname class="po-field e21 e21"><textual class="po-textual">Zholudev</textual></surname></personname><personblurb class="po-container e22 e22"><para class="po-block e23 e23"><textual class="po-textual">Vyacheslav Zholudev graduated in May 2007 from Saint-Petersburg State University, Russia with a Master degree
    in Computer Science.  He is continuing his studies at Jacobs University Bremen as a Ph.D. student.  Since
    September of 2007 he has been working in the KWARC research group (Knowledge Adaptation and Reasoning for
    Content) under the supervision of Prof. Michael Kohlhase.</textual></para></personblurb><affiliation class="po-record e24 e24"><jobtitle class="po-field e25 e25"><textual class="po-textual">PhD Student</textual></jobtitle><orgname class="po-block e26 e26"><textual class="po-textual">Jacobs University Bremen</textual></orgname></affiliation><email class="po-field e27 e27"><textual class="po-textual">v.zholudev@jacobs-university.de</textual></email></author><legalnotice class="po-container e28 e28"><para class="po-block e29 e29"><textual class="po-textual">Copyright Â© 2011 Erik Hennum and Vyacheslav Zholudev</textual></para></legalnotice></info><section class="po-hcontainer e30 e30" xml:id="sec-intro"><title class="po-block e31 e31"><textual class="po-textual">Introduction</textual></title><para class="po-block e32 e32"><textual class="po-textual">XML provides mature facilities for processing and presenting information.
The solution developer's toolkit includes
XSLT (see </textual><xref class="po-milestone e33 e33" linkend="XSL2"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) to transform XML documents from one vocabulary
to another, 
XQuery (see </textual><xref class="po-milestone e34 e34" linkend="XQ1"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) to retrieve and modify persisted XML documents
for applications, and
XHTML (see </textual><xref class="po-milestone e35 e35" linkend="XH"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) and XSL-FO to present information on the screen or
in print.
These standards have become essential tools for web applications,
publishing pipelines, electronic interchange, and many other challenges.
Having successfully addressed such fundamental challenges,
the XML community can now refine the toolkit.
In particular, the XML community can consider whether lessons learned by other
communities could have benefits for the XML technology portfolio. 
</textual></para><para class="po-block e36 e36"><textual class="po-textual">The experience of the Java community with tag libraries offers
one such opportunity.  Java introduced tag libraries to broaden
the appeal of an existing, successful technology, JSP (Java Server Pages)
(see </textual><xref class="po-milestone e37 e37" linkend="JSP"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).
Widespread adoption exposed a fundamental issue with JSP:  
JSP required skill levels that limited the set of users who could
define dynamic documents and, by exposing robust programming capabilities,
provided for a poor separation of concerns.
The Java community solved these problems by introducing tag libraries.</textual></para><para class="po-block e38 e38"><textual class="po-textual">In the Java technology stack, tag libraries are function libraries
called by embedding a markup vocabulary (the tags) within documents.
The approach is open-ended in that each tag library supplies its own
markup vocabulary.
</textual></para><para class="po-block e39 e39"><textual class="po-textual">The canonical example of a tag library retrieves rows from a database
for layout and styling in a document. The following example fragment has
a single </textual><code class="po-atom e40 e40"><textual class="po-textual">taglib:attendees</textual></code><textual class="po-textual"> tag:
</textual></para><programlisting class="po-block e41 e41" xml:space="preserve"><textual class="po-textual">
&lt;html:table&gt;
    &lt;taglib:attendees&gt;
        &lt;html:tr&gt;
            &lt;html:td&gt;${last-name}&lt;/html:td&gt;
            &lt;html:td&gt;${first-name}&lt;/html:td&gt;
        &lt;/html:tr&gt;
    &lt;/taglib:attendees&gt;
&lt;/html:table&gt;
</textual></programlisting><para class="po-block e42 e42"><textual class="po-textual">The </textual><code class="po-atom e43 e43"><textual class="po-textual">taglib:attendees</textual></code><textual class="po-textual"> tag calls a function in a tag library
(whose Java implementation is omitted here).  The function implementation retrieves
attendees from a database and repeats the content of the tag for each attendee.
When generating output from the tag content, the function replaces the embedded
</textual><code class="po-atom e44 e44"><textual class="po-textual">${last-name}</textual></code><textual class="po-textual"> and </textual><code class="po-atom e45 e45"><textual class="po-textual">${first-name}</textual></code><textual class="po-textual"> expressions with the
last name and first name values for the currently processed attendee.  Thus,
a generated result document would resemble the following example:</textual></para><programlisting class="po-block e46 e46" xml:space="preserve"><textual class="po-textual">
&lt;html:table&gt;
        ...
        &lt;html:tr&gt;
            &lt;html:td&gt;Fitzgerald&lt;/html:td&gt;
            &lt;html:td&gt;Elena&lt;/html:td&gt;
        &lt;/html:tr&gt;
        &lt;html:tr&gt;
            &lt;html:td&gt;Green&lt;/html:td&gt;
            &lt;html:td&gt;Alfonso&lt;/html:td&gt;
        &lt;/html:tr&gt;
        &lt;html:tr&gt;
            &lt;html:td&gt;Hutz&lt;/html:td&gt;
            &lt;html:td&gt;Egberto&lt;/html:td&gt;
        &lt;/html:tr&gt;
        ...
&lt;/html:table&gt;
</textual></programlisting><para class="po-block e47 e47"><textual class="po-textual">As the example shows, the tag library approach provides for 
a useful division of responsibilities.
The tag library developer is responsible for packaging functionality (often
information retrieval and manipulation as in the example but also a widget gallery
or anything else that can be executed with a simple interface) as an embeddable
vocabulary.
The tag document author is responsible for assembling the tag library vocabulary
with static elements (often providing style and layout specifications) to produce
a dynamic document.
By fostering collaboration between these audiences, tag libraries extend
the reach of both participants.
The Java community has confirmed the value of this collaboration with comprehensive
toolkits such as JSF (Java Server Faces).
</textual></para><para class="po-block e48 e48"><textual class="po-textual">While XSLT and XQuery have always had the ability to combine
literal result elements with dynamic content, the XML technology stack
currently lacks a complete solution for providing this kind of division
of responsibilities.
This paper proposes adapting the Java Tag Library approach by implementing
</textual><emphasis class="po-inline e49 e49"><textual class="po-textual">tag libraries</textual></emphasis><textual class="po-textual"> in XSLT or XQuery and making use
of tag vocabularies in XHTML, XSL-FO, or other XML documents.
We use </textual><emphasis class="po-inline e50 e50"><textual class="po-textual">XSTag</textual></emphasis><textual class="po-textual"> (for XML Style Tags) as the working title
for this variant on the tag library approach.
</textual></para></section><section class="po-hcontainer e51 e51" xml:id="sec-concepts"><title class="po-block e52 e52"><textual class="po-textual">Essential Terms, Concepts, and Limitations</textual></title><para class="po-block e53 e53"><textual class="po-textual">The introduction made casual use of several terms that we summarize
more formally here:
</textual></para><variablelist class="po-table e54 e54"><varlistentry class="po-record e55 e55"><term class="po-block e56 e56"><textual class="po-textual">tag</textual></term><listitem class="po-container e57 e57"><para class="po-block e58 e58"><textual class="po-textual">An XML element that can be embedded in a document to call
a function in a tag library to produce dynamic XML result nodes.
</textual></para></listitem></varlistentry><varlistentry class="po-record e59 e59"><term class="po-block e60 e60"><textual class="po-textual">tag vocabulary</textual></term><listitem class="po-container e61 e61"><para class="po-block e62 e62"><textual class="po-textual">The tag element set that declares the functions
exposed by a tag library.</textual></para></listitem></varlistentry><varlistentry class="po-record e63 e63"><term class="po-block e64 e64"><textual class="po-textual">tag library</textual></term><listitem class="po-container e65 e65"><para class="po-block e66 e66"><textual class="po-textual">A function library (typically implemented in XSLT or XQuery)
exposed by means of a tag vocabulary.  (Note that this sense of the term differs
from other senses such as the documentation for an XML vocabulary.)</textual></para></listitem></varlistentry><varlistentry class="po-record e67 e67"><term class="po-block e68 e68"><textual class="po-textual">host vocabulary</textual></term><listitem class="po-container e69 e69"><para class="po-block e70 e70"><textual class="po-textual">A static XML vocabulary for documents; typically a presentation 
vocabulary such as XHTML or XSL-FO.</textual></para></listitem></varlistentry><varlistentry class="po-record e71 e71"><term class="po-block e72 e72"><textual class="po-textual">tag document</textual></term><listitem class="po-container e73 e73"><para class="po-block e74 e74"><textual class="po-textual">A document that mixes a host vocabulary and the tag vocabularies
from one or more tag libraries, potentially with other dynamic constructs such as
embedded XPath expressions and XSTag statements (a small set of flow control,
evaluation, and constructor statements equivalent to the core statements
from Java Tag Libraries).  Because the tag vocabularies are not part of the 
host vocabulary, tag documents are typically well formed rather than validated.
In practice, this limitation is not burdensome because the generated result
document should be inspected anyway after most changes to the tag document.
</textual></para></listitem></varlistentry><varlistentry class="po-record e75 e75"><term class="po-block e76 e76"><textual class="po-textual">handler</textual></term><listitem class="po-container e77 e77"><para class="po-block e78 e78"><textual class="po-textual">A document fragment that is supplied by the tag document but 
parameterized by the tag library.  The </textual><xref class="po-milestone e79 e79" linkend="sec-intro"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">
gives a handler example in the content of the </textual><code class="po-atom e80 e80"><textual class="po-textual">taglib:attendees</textual></code><textual class="po-textual"> tag,
which is a document fragment that receives the last-name and first-name parameters
from the tag library.
A tag library can support handlers for any kind of event that might occur
during the execution of the tag including different phases of execution
or different element types encountered. 
</textual></para></listitem></varlistentry><varlistentry class="po-record e81 e81"><term class="po-block e82 e82"><textual class="po-textual">tag processor</textual></term><listitem class="po-container e83 e83"><para class="po-block e84 e84"><textual class="po-textual">An engine that reads a tag document and one or more tag libraries and 
generates a result document. 
        </textual></para></listitem></varlistentry><varlistentry class="po-record e85 e85"><term class="po-block e86 e86"><textual class="po-textual">result document</textual></term><listitem class="po-container e87 e87"><para class="po-block e88 e88"><textual class="po-textual">A document produced by processing the dynamic elements within
a tag document. A result document can be validated with the schema of the
host vocabulary.
</textual></para></listitem></varlistentry></variablelist><para class="po-block e89 e89"><textual class="po-textual">The essential features of the XSTag approach are as follows:
</textual></para><itemizedlist class="po-table e90 e90"><listitem class="po-container e91 e91"><para class="po-block e92 e92"><textual class="po-textual">Simplicity of the tag document.  By constructing documents with
special XML elements instead of programming with calls and variable assignments,
people with less expertise can successfully generate dynamic documents.
In particular, the use of special XML elements puts the emphasis
on the semantics of the tag rather than the syntax of the tag call.
From the perspective of the tag document author, the XML element
effectively is the call to a function (without needing any other annotations).
</textual></para></listitem><listitem class="po-container e93 e93"><para class="po-block e94 e94"><textual class="po-textual">Assembly of tag libraries by the tag document.  This feature
removes the need for programming expertise to produce new combinations of libraries and
thus maximizes the potential reuse of tag libraries.
(UNIX pipes provide a good demonstration of the benefitss of assembly by the consumer.)
</textual></para></listitem><listitem class="po-container e95 e95"><para class="po-block e96 e96"><textual class="po-textual">Both pull and push processing (see </textual><xref class="po-milestone e97 e97" linkend="PUSHPULL"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) in the tag
document. Tags let the tag document pull processing defined in a tag library,
while handlers let the tag library push processing control to the tag document.
Having both pull and push capabilities adds some conceptual complexity but
simplifies tag documents for cases similar to the example in the introduction.
In particular, handlers give the tag document author the ability
to interleave tags from different tag libraries at the fine-grained level in ways
unforeseen by the tag library developer.
</textual></para></listitem></itemizedlist><para class="po-block e98 e98"><textual class="po-textual">The XSTag approach is not a solution for every document processing challenge.
The tag library approach is designed for producing dynamic documents (especially HTML)
through layout and configuration or styling of components and data provided
by reusable libraries.
In particular, handlers are sufficient for push processing of a pre-defined set
of events that occur during execution of one tag.  
Handlers don't provide a good tool for transformation of a complex document
from one large vocabulary into a different vocabulary.
</textual></para><para class="po-block e99 e99"><textual class="po-textual">Before explaining our approach in detail, we review some existing solutions
for document authors.
</textual></para></section><section class="po-hcontainer e100 e100"><title class="po-block e101 e101"><textual class="po-textual">Related Work</textual></title><para class="po-block e102 e102"><textual class="po-textual">Several XML initiatives address the challenges of dynamic documents,
including:
</textual></para><variablelist class="po-table e103 e103"><varlistentry class="po-record e104 e104"><term class="po-block e105 e105"><textual class="po-textual">Simplified Stylesheets</textual></term><listitem class="po-container e106 e106"><para class="po-block e107 e107"><textual class="po-textual">XSLT provides Simplified Stylesheets (see </textual><xref class="po-milestone e108 e108" linkend="XSL2"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) as a method
for embedding XSLT statements inside a result element at the root level of a document.
Limited to the statements valid within an XSLT template, Simplified Stylesheets
cannot include or import other stylesheets and cannot provide matching templates.
In addition, template calls in Simplified Stylesheets use the xsl:call statement
and thus emphasize the XSLT syntax of the call.
</textual></para><para class="po-block e109 e109"><textual class="po-textual">As a result, Simplified Stylesheets have some key limitations
with respect to the simplicity of the document, to assembly of libraries by a document,
and to push processing defined in a document.
An additional stylesheet can include or import Simplified Stylesheets
but this approach requires programming expertise to integrate documents
and libraries.
</textual></para></listitem></varlistentry><varlistentry class="po-record e110 e110"><term class="po-block e111 e111"><textual class="po-textual">Cocoon XSP</textual></term><listitem class="po-container e112 e112"><para class="po-block e113 e113"><textual class="po-textual">XSP (see </textual><xref class="po-milestone e114 e114" linkend="XSP"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) provides a method for replacing placeholders
in XML documents with the results from Java logic using bindings defined with XSLT.
Because Cocoon runs in a Java web application environment, the primary focus of XSP is leveraging 
Java capabilities for producing content within XML documents.
</textual></para></listitem></varlistentry><varlistentry class="po-record e115 e115"><term class="po-block e116 e116"><textual class="po-textual">XBL</textual></term><listitem class="po-container e117 e117"><para class="po-block e118 e118"><textual class="po-textual">XBL (see </textual><xref class="po-milestone e119 e119" linkend="XBL2"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) provides flexible aggregation
of content fragments and of client resources such as JavaScript methods.
XBL has seen only partial implementation and limited adoption, perhaps because the
sophistication of the binding mechanisms is challenging for document authors.
</textual></para></listitem></varlistentry><varlistentry class="po-record e120 e120"><term class="po-block e121 e121"><textual class="po-textual">Template placeholder replacement</textual></term><listitem class="po-container e122 e122"><para class="po-block e123 e123"><textual class="po-textual">The general approach of writing stylesheets to replace placeholders
in a template document with dynamically generated content
was worked out ten years ago (see </textual><xref class="po-milestone e124 e124" linkend="XSTEMP"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).
RunDMC (see </textual><xref class="po-milestone e125 e125" linkend="RDMC"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) is a more recent XSLT-based framework exemplifying
the approach.
RunDMC includes the ability to parameterize dynamic generation with content supplied
by the placeholder.
While encouraging simple documents, template placeholders typically don't address
assembly of libraries by a document or push processing defined in a document.
These tasks typically remain the responsibility of the template processor,
minimizing the potential for a library approach.
</textual></para></listitem></varlistentry><varlistentry class="po-record e126 e126"><term class="po-block e127 e127"><textual class="po-textual">XForms</textual></term><listitem class="po-container e128 e128"><para class="po-block e129 e129"><textual class="po-textual">XForms (see </textual><xref class="po-milestone e130 e130" linkend="XForms"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) supports forms interaction
with a separation of model, view, and controller.  Such interactions are behaviors
of the runtime document.  Thus, XForms solves a fundamentally different
problem than dynamic composition of the runtime document.  For instance,
a tag library could encapsulate the XForm model, view, and bindings
for a form, providing a simpler interface for inserting the form into
the document.  As another example, a tag library could encapsulate alternative
event handlers, providing a gallery of options of predefined behaviors for a
specific form.
</textual></para></listitem></varlistentry></variablelist></section><section class="po-hcontainer e131 e131"><title class="po-block e132 e132"><textual class="po-textual">Similarities and Differences Between XSTag and Java Tag Libraries</textual></title><para class="po-block e133 e133"><textual class="po-textual">While borrowing heavily from Java Tag Libraries, XSTag also differs
in some important ways:
</textual></para><variablelist class="po-table e134 e134"><varlistentry class="po-record e135 e135"><term class="po-block e136 e136"><textual class="po-textual">Expression language</textual></term><listitem class="po-container e137 e137"><para class="po-block e138 e138"><textual class="po-textual">Java Tag Libraries can embed a simple expressions in attribute values or
element content. Scenarios for use of expressions include:
</textual></para><itemizedlist class="po-table e139 e139"><listitem class="po-container e140 e140"><para class="po-block e141 e141"><textual class="po-textual">Evaluating variables</textual></para></listitem><listitem class="po-container e142 e142"><para class="po-block e143 e143"><textual class="po-textual">Manipulating string, numeric, and date values</textual></para></listitem><listitem class="po-container e144 e144"><para class="po-block e145 e145"><textual class="po-textual">Extracting values from XML documents</textual></para></listitem><listitem class="po-container e146 e146"><para class="po-block e147 e147"><textual class="po-textual">Copying portions of XML documents</textual></para></listitem></itemizedlist><para class="po-block e148 e148"><textual class="po-textual">XSTag follows XQuery in supporting delimited XPath expressions
in both attribute value and element content (thus differing from XSLT,
which allows delimited XPath expressions only in attribute values).
</textual></para></listitem></varlistentry><varlistentry class="po-record e149 e149"><term class="po-block e150 e150"><textual class="po-textual">Basic Statements</textual></term><listitem class="po-container e151 e151"><para class="po-block e152 e152"><textual class="po-textual">Java Tag Libraries provide a reserved XML vocabulary for basic statements
within a tag document including capturing the result of an expression
in a variable, conditional branching, looping and so on.
</textual></para><para class="po-block e153 e153"><textual class="po-textual">These statements have equivalents in the XSLT statements allowed within
a template including xsl:choose, xsl:if, and xsl:variable.  
While tag libraries can minimize the need for such statements, 
the availability of such statements can have practical importance as a workaround.
</textual></para></listitem></varlistentry><varlistentry class="po-record e154 e154"><term class="po-block e155 e155"><textual class="po-textual">Function Binding</textual></term><listitem class="po-container e156 e156"><para class="po-block e157 e157"><textual class="po-textual">Java Tag Libraries use declarations to associate
XML elements with Java functions.
In an XML processing contexts, such indirection seems potentially confusing 
instead of useful.
Instead, XSTag binds a tag call in the tag document to a tag definition with the
same QName in the tag library.
</textual></para></listitem></varlistentry><varlistentry class="po-record e158 e158"><term class="po-block e159 e159"><textual class="po-textual">Handlers and Parameters</textual></term><listitem class="po-container e160 e160"><para class="po-block e161 e161"><textual class="po-textual">Java Tag Libraries refer to a handler as a </textual><emphasis class="po-inline e162 e162"><textual class="po-textual">tag body</textual></emphasis><textual class="po-textual">.
In Java Tag Libraries, a tag can have at most one handler.
The Java tag body is also a closure with respect to the tag document
in that variables in scope within the tag document can be evaluated
in the tag body.
</textual></para><para class="po-block e163 e163"><textual class="po-textual">While the limitation to one handler is adequate for regular relational data,
a single handler is not enough to process an XML tree structure or complex
XML data vocabularies.
XSLT has template match rules and XQuery has typeswitch expressions for this reason.
To process XML content with a tag, different dynamic content must be produced
for different elements.
For that reason, XSTag allows multiple handlers for a single tag
and permits atomic values or XML nodes as parameters.
</textual></para></listitem></varlistentry><varlistentry class="po-record e164 e164"><term class="po-block e165 e165"><textual class="po-textual">Tag Document Inclusion</textual></term><listitem class="po-container e166 e166"><para class="po-block e167 e167"><textual class="po-textual">Java Tag Libraries have inclusion statements to insert
one tag document inside another tag document.
Such inclusion statements resemble a tag call.
Rather that introduce two different kinds of tag calls,
XSTag supports reuse of document fragments through basic tag libraries
with tags that merely return a static document fragment.
</textual></para></listitem></varlistentry></variablelist><para class="po-block e168 e168"><textual class="po-textual">Having reviewed alternative strategies and Java Tag Libraries
background, we now introduce our approach for processing tag libraries.
</textual></para></section><section class="po-hcontainer e169 e169"><title class="po-block e170 e170"><textual class="po-textual">Tag Processors</textual></title><para class="po-block e171 e171"><textual class="po-textual">The </textual><emphasis class="po-inline e172 e172"><textual class="po-textual">tag processor</textual></emphasis><textual class="po-textual"> is responsible for
parsing the tag document and imported tag libraries and 
producing </textual><emphasis class="po-inline e173 e173"><textual class="po-textual">a result document</textual></emphasis><textual class="po-textual">.  Whether implemented
by interpretting the sources or by preprocessing and then executing XSLT, XQuery, or
some other language, the steps for producing a result document are conceptually similar:
</textual></para><orderedlist class="po-table e174 e174"><listitem class="po-container e175 e175"><para class="po-block e176 e176"><textual class="po-textual">The tag processor descends the XML tree of a tag document, defining variables  
           in scope within a branch. Those variable are outside any tag call and, essentially, are constants.
           The tag processor also evaluates any expressions outside of a tag call, replacing each expression
           with its result. 
        </textual></para></listitem><listitem class="po-container e177 e177"><para class="po-block e178 e178"><textual class="po-textual">When the tag processor reaches a tag call, it performs evaluation and replacement
          on expressions outside of any handler.  We call this phase </textual><emphasis class="po-inline e179 e179"><textual class="po-textual">the time of the call.</textual></emphasis><textual class="po-textual">
          Conceptually, for any expression within a handler, the tag processor replaces any variable
          defined outside the handler with its value at the time of the call.
          That is, a handler is a closure with respect to the tag document outside
          the tag call.
        </textual></para></listitem><listitem class="po-container e180 e180"><para class="po-block e181 e181"><textual class="po-textual">As the tag processor is executing the tag, when the processor 
          reaches a call to a handler, the processor evaluates the expressions 
          in the handler, replacing parameters of the handler with their values before
          replacing each expression with its result.
          This phase is called </textual><emphasis class="po-inline e182 e182"><textual class="po-textual">the time of handler processing</textual></emphasis><textual class="po-textual">.
        </textual></para></listitem></orderedlist><para class="po-block e183 e183"><textual class="po-textual">As shown in </textual><xref class="po-milestone e184 e184" linkend="workflow-illo"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, a tag processor can be
implemented in XSLT as a preprocessor that generates XSLT modules for execution
by a general-purpose XSLT processor; a parallel approach is possible in XQuery.
</textual></para><figure class="po-container e185 e185" xml:id="workflow-illo" xreflabel="Workflow"><title class="po-block e186 e186"><textual class="po-textual">Tag Processing Workflow</textual></title><mediaobject class="po-container e187 e187"><imageobject class="po-container e188 e188"><imagedata class="po-meta e189 e189" fileref="../../../vol7/graphics/Hennum01/Hennum01-001.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e190 e190"><para class="po-block e191 e191"><textual class="po-textual">Preprocessing a tag document and tag libraries and
then executing XSLT or XQuery.</textual></para></caption></figure></section><section class="po-hcontainer e192 e192"><title class="po-block e193 e193"><textual class="po-textual">XSTag Syntax</textual></title><para class="po-block e194 e194"><textual class="po-textual">Due to the division of responsibilities, 
    tag libraries and tag documents have different audiences and thus
    different syntax. 
    </textual></para><section class="po-hcontainer e195 e195" xml:id="sec-xstag-top"><title class="po-block e196 e196"><textual class="po-textual">Top-Level Elements of Tag Libraries</textual></title><para class="po-block e197 e197"><textual class="po-textual">The XSTag statements in the tag library and tag document have
a namespace to distinguish them from other XML vocabularies.   
(For our prototype, we have used </textual><code class="po-atom e198 e198"><textual class="po-textual">http://code.google.com/p/xstag/ns/2011/</textual></code><textual class="po-textual">.)
Throughout the paper, the XSTag namespace is indicated with the prefix </textual><code class="po-atom e199 e199"><textual class="po-textual">xst</textual></code><textual class="po-textual">.
</textual></para><para class="po-block e200 e200"><textual class="po-textual">Tag libraries can be implemented using a basic statement set
that all XSTag processors must support or using the language
of the tag processor (either XSLT or XQuery in our prototype) to implement
the tag.
Basic and processor-specific tag libraries have similar declarations for
the root element and its top-level child elements:
      </textual></para><variablelist class="po-table e201 e201"><varlistentry class="po-record e202 e202"><term class="po-block e203 e203"><code class="po-atom e204 e204"><textual class="po-textual">xst:taglib</textual></code></term><listitem class="po-container e205 e205"><para class="po-block e206 e206"><textual class="po-textual">The required root element, which must have an </textual><code class="po-atom e207 e207"><textual class="po-textual">version</textual></code><textual class="po-textual">
            attribute identifying the level of the tag processor.
            In addition, a processor-specific tag library must provide a </textual><code class="po-atom e208 e208"><textual class="po-textual">for</textual></code><textual class="po-textual"> attribute identifying
            the tag processor language (such as </textual><code class="po-atom e209 e209"><textual class="po-textual">xslt</textual></code><textual class="po-textual"> or </textual><code class="po-atom e210 e210"><textual class="po-textual">xquery</textual></code><textual class="po-textual">).
            A basic tag library may omit the </textual><code class="po-atom e211 e211"><textual class="po-textual">for</textual></code><textual class="po-textual"> attribute or supply the </textual><code class="po-atom e212 e212"><textual class="po-textual">xstag</textual></code><textual class="po-textual"> value
            for the attribute.
            </textual></para></listitem></varlistentry><varlistentry class="po-record e213 e213"><term class="po-block e214 e214"><code class="po-atom e215 e215"><textual class="po-textual">xst:import</textual></code></term><listitem class="po-container e216 e216"><para class="po-block e217 e217"><textual class="po-textual">An optional statement to import other libraries.  The body of tags
            can call the functions or tags supplied by the imported library.
            The </textual><code class="po-atom e218 e218"><textual class="po-textual">for</textual></code><textual class="po-textual"> attribute identifies the tag processor when the import should only be resolved
            for that processor.  If the </textual><code class="po-atom e219 e219"><textual class="po-textual">for</textual></code><textual class="po-textual"> attribute is set to </textual><code class="po-atom e220 e220"><textual class="po-textual">xstag</textual></code><textual class="po-textual"> or omitted,
            the imported library is a basic tag library, and the import should always be resolved.
            </textual></para></listitem></varlistentry><varlistentry class="po-record e221 e221"><term class="po-block e222 e222"><code class="po-atom e223 e223"><textual class="po-textual">xst:tag</textual></code><textual class="po-textual"> and </textual><code class="po-atom e224 e224"><textual class="po-textual">xst:param</textual></code></term><listitem class="po-container e225 e225"><para class="po-block e226 e226"><textual class="po-textual">Declares a tag and its parameters. 
The </textual><code class="po-atom e227 e227"><textual class="po-textual">name</textual></code><textual class="po-textual"> attribute must supply 
a QName, e.g. </textual><code class="po-atom e228 e228"><textual class="po-textual">&lt;xst:tag name="pref:myTag"&gt;...&lt;/xst:tag&gt;</textual></code><textual class="po-textual">, 
where prefix </textual><code class="po-atom e229 e229"><textual class="po-textual">pref</textual></code><textual class="po-textual"> is bound to some namespace, and </textual><code class="po-atom e230 e230"><textual class="po-textual">myTag</textual></code><textual class="po-textual"> is the name of the tag.
The tag element should have an </textual><code class="po-atom e231 e231"><textual class="po-textual">as</textual></code><textual class="po-textual"> attribute to declare the return type of the tag,
using any atomic or node type allowed in XPath.
Omitting the </textual><code class="po-atom e232 e232"><textual class="po-textual">as</textual></code><textual class="po-textual"> attribute is equivalent to specifying
the </textual><code class="po-atom e233 e233"><textual class="po-textual">item()</textual></code><textual class="po-textual"> XPath type and thus requiring calls to tolerate any item.
</textual></para><para class="po-block e234 e234"><textual class="po-textual">Similar to XSLT, parameters take a </textual><code class="po-atom e235 e235"><textual class="po-textual">name</textual></code><textual class="po-textual"> attribute and
can take the </textual><code class="po-atom e236 e236"><textual class="po-textual">as</textual></code><textual class="po-textual"> attribute
to declare any atomic or node type and a </textual><code class="po-atom e237 e237"><textual class="po-textual">select</textual></code><textual class="po-textual"> attribute or content to declare a default value
if the tag call does not pass the parameter.
In addition, one of the tag parameter can have an </textual><code class="po-atom e238 e238"><textual class="po-textual">implicit</textual></code><textual class="po-textual"> attribute set to true,
which allows a shortcut in tag calls (please see </textual><xref class="po-milestone e239 e239" linkend="sec_tag-doc"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).
</textual></para><para class="po-block e240 e240"><textual class="po-textual">In addition to the standard XPath atomic or node types, parameters can also have a
</textual><emphasis class="po-inline e241 e241"><textual class="po-textual">handler</textual></emphasis><textual class="po-textual"> type. A handler type resembles an XPath 2.1 function signature but requires
a name for each parameter of the handler. The handler is required or optional on the tag call
based on whether its signature has a required or optional return value.
A tag's handler parameter may contain a default handler definition.
</textual></para></listitem></varlistentry></variablelist><para class="po-block e242 e242"><textual class="po-textual">Basic tag libraries and processor-specific tag libraries differ
in the implementation of the body of the tag definition.
        </textual></para><section class="po-hcontainer e243 e243" xml:id="sec_xstag-tl"><title class="po-block e244 e244"><textual class="po-textual">Basic Tag Libraries</textual></title><para class="po-block e245 e245"><textual class="po-textual">Within a basic tag library, tag definitions are implemented with basic tag statements.
        These statements are modeled on a subset of XSLT instead of introducing a new vocabulary
        so that XSLT developers can easily write tag libraries and so that advanced document authors
        who learn how to write basic tag libraries can progress to XSLT.
        </textual></para><variablelist class="po-table e246 e246"><varlistentry class="po-record e247 e247"><term class="po-block e248 e248"><textual class="po-textual">branching and looping</textual></term><listitem class="po-container e249 e249"><para class="po-block e250 e250"><code class="po-atom e251 e251"><textual class="po-textual">xst:choose/xst:when/xst:otherwise, xst:for-each, xst:if</textual></code><textual class="po-textual">
            </textual></para><para class="po-block e252 e252"><textual class="po-textual">The </textual><code class="po-atom e253 e253"><textual class="po-textual">xst:for-each</textual></code><textual class="po-textual"> element differs from </textual><code class="po-atom e254 e254"><textual class="po-textual">xslt:for-each</textual></code><textual class="po-textual"> in requiring
            a </textual><code class="po-atom e255 e255"><textual class="po-textual">name</textual></code><textual class="po-textual"> attribute for the current iterated item.</textual></para></listitem></varlistentry><varlistentry class="po-record e256 e256"><term class="po-block e257 e257"><textual class="po-textual">variables and evaluation</textual></term><listitem class="po-container e258 e258"><para class="po-block e259 e259"><code class="po-atom e260 e260"><textual class="po-textual">xst:content, xst:variable</textual></code><textual class="po-textual">
            </textual></para><para class="po-block e261 e261"><textual class="po-textual">Because XSLT has three alternatives (</textual><code class="po-atom e262 e262"><textual class="po-textual">xsl:copy-of, xsl:sequence, xsl:value-of</textual></code><textual class="po-textual">)
            for inserting the result of an expression, we have introduced a </textual><code class="po-atom e263 e263"><textual class="po-textual">xst:content</textual></code><textual class="po-textual"> statement
            for inserting the result of an expression as content within an element.
            </textual></para></listitem></varlistentry><varlistentry class="po-record e264 e264"><term class="po-block e265 e265"><textual class="po-textual">constructors</textual></term><listitem class="po-container e266 e266"><para class="po-block e267 e267"><code class="po-atom e268 e268"><textual class="po-textual">xst:attribute, xst:comment, xst:element, xst:namespace,
              xst:processing-instruction, xst:text</textual></code></para></listitem></varlistentry><varlistentry class="po-record e269 e269"><term class="po-block e270 e270"><textual class="po-textual">calls</textual></term><listitem class="po-container e271 e271"><para class="po-block e272 e272"><code class="po-atom e273 e273"><textual class="po-textual">xst:call</textual></code><textual class="po-textual"> with either the </textual><code class="po-atom e274 e274"><textual class="po-textual">name</textual></code><textual class="po-textual"> attribute to call a function
            in an imported function library (such as a callable template in an imported XSLT module or
            a declared function in an imported XQuery library module), the </textual><code class="po-atom e275 e275"><textual class="po-textual">tag</textual></code><textual class="po-textual"> attribute to call
            a tag in the current library or an imported tag library, or the </textual><code class="po-atom e276 e276"><textual class="po-textual">handler</textual></code><textual class="po-textual"> attribute
            to call a handler passed by the tag call.
            Similar to XSLT, the call can take </textual><code class="po-atom e277 e277"><textual class="po-textual">xst:with-param</textual></code><textual class="po-textual"> subelements to pass
            parameters.  When calling a tag, the call can also take </textual><code class="po-atom e278 e278"><textual class="po-textual">xst:with-handler</textual></code><textual class="po-textual"> subelements
	        to pass handlers to the called tag (similar to an XPath 2.1 function object).</textual></para></listitem></varlistentry></variablelist><para class="po-block e279 e279"><textual class="po-textual">
          A tag library can define a handler only as the default implementation for a handler parameter
          (and not, for instance, as the content of a variable).  
        </textual></para><para class="po-block e280 e280"><textual class="po-textual">Intentionally less powerful than XSLT or XQuery, basic tag libraries provide functionality
        that can be supported on any tag processor. 
        Basic tag libraries can support reuse of headers and footers through simple tags
        that take no parameters and return a document fragment.
        </textual></para></section><section class="po-hcontainer e281 e281" xml:id="sec_xstag-ex"><title class="po-block e282 e282"><textual class="po-textual">Example of a Basic Tag Library</textual></title><para class="po-block e283 e283"><textual class="po-textual">
          As an example, we will use the typical XML example of a book store. 
          For simplicity we consider a flat book structure in XML documents. Assume that we have multiple XML documents 
          that contain  a list of books where each of those may contain the following information: 
          a title, genre, multiple authors, a description, a publish date and price.
          Some sample data in this structure:
        </textual></para><programlisting class="po-block e284 e284" xml:space="preserve"><textual class="po-textual">
      
&lt;books id="publisherX"&gt;
  &lt;book id="203"&gt; 
    &lt;title&gt;XQuery Kick Start&lt;/title&gt; 
    &lt;author&gt;James McGovern&lt;/author&gt; 
    &lt;author&gt;...&lt;/author&gt;
    ...    
    &lt;genre&gt;Computer&lt;/genre&gt;    
    &lt;year&gt;2010&lt;/year&gt; 
    &lt;price&gt;46.99&lt;/price&gt;
    &lt;description&gt; This book is about ... &lt;/description&gt;    
  &lt;/book&gt;      
&lt;/books&gt;
            
        </textual></programlisting><para class="po-block e285 e285"><textual class="po-textual">
        To support a book store use case, a basic tag library with a single tag definition might resemble
        the following example: 
      </textual></para><programlisting class="po-block e286 e286" xml:space="preserve"><textual class="po-textual">
          
&lt;xst:taglib version="0.2"
  xmlns:fn  = "http://www.w3.org/2005/xpath-functions"
  xmlns:xst = "http://code.google.com/p/xstag/ns/2011/"
  xmlns:tag = "http://code.google.com/p/xstag/ns/demo/tag/books"&gt;

  &lt;xst:tag name="tag:books" as="element()*"&gt;
    &lt;!-- tag definition parameters --&gt; 
    &lt;xst:param name="years" as="xs:gYear*"/&gt;
    &lt;xst:param name="onBook" implicit="true"
        as="handler($title as xs:string, $authors as xs:string+) 
                    as element()?"&gt;
      &lt;!-- default handler implementation --&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;xst:content select="$title"/&gt;&lt;/td&gt;
        &lt;td&gt;&lt;xst:content select="fn:string-join($authors, '; ')"/&gt;&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/xst:param&gt;
    &lt;!-- The tag definition body --&gt;
    &lt;!-- getting the books for the requested years --&gt;
    &lt;xst:variable name="books" as="element()*"
        select="document('books.xml')/books/book[fn:empty($years) or data(year)=$years]"/&gt;
    &lt;!-- processing each book by calling the handler --&gt;
    &lt;xst:for-each name="book" select="$books"&gt;
      &lt;xst:call handler="$onBook"&gt;
        &lt;xst:with-param name="title"   select="$book/title/fn:string(.)"/&gt;
        &lt;xst:with-param name="authors" select="fn:string-join($book/author/fn:string(.), ', ')"/&gt;
      &lt;/xst:call&gt;
    &lt;/xst:for-each&gt;
  &lt;/xst:tag&gt;
&lt;/xst:taglib&gt;
          
      </textual></programlisting><para class="po-block e287 e287"><textual class="po-textual">The above tag library contains only one tag definition that is bound to
	namespace </textual><code class="po-atom e288 e288"><textual class="po-textual">http://code.google.com/p/xstag/ns/demo/tag/books</textual></code><textual class="po-textual"> 
    via the prefix </textual><code class="po-atom e289 e289"><textual class="po-textual">tag</textual></code><textual class="po-textual">. The </textual><code class="po-atom e290 e290"><textual class="po-textual">books</textual></code><textual class="po-textual"> tag
	takes two parameters:  a list of xs:gYear values that denote years
	of publications and a handler parameter that, in turn, takes a title and
	a list of authors. If a tag caller does not provide
	a </textual><emphasis class="po-inline e291 e291"><textual class="po-textual">handler definition</textual></emphasis><textual class="po-textual"> then the default implementation within the handler
	is used.  In the example, the default
	handler implementation returns an HTML table row that contains two columns: a book title and
	concatenated list of authors.  The default handler assumes that the tag document will wrap
	an HTML table around the call to the </textual><code class="po-atom e292 e292"><textual class="po-textual">books</textual></code><textual class="po-textual"> tag.
    </textual></para><para class="po-block e293 e293"><textual class="po-textual">The handler definition body retrieves books based on
	supplied years.
	Then, for each retrieved book element, the tag definition body calls the
	handler definition with the </textual><code class="po-atom e294 e294"><textual class="po-textual">title</textual></code><textual class="po-textual"> and </textual><code class="po-atom e295 e295"><textual class="po-textual">authors</textual></code><textual class="po-textual">
	parameters of the handler.    
    </textual></para></section><section class="po-hcontainer e296 e296"><title class="po-block e297 e297"><textual class="po-textual">Processor-Specific Tag Libraries</textual></title><para class="po-block e298 e298"><textual class="po-textual">A processor-specific tag library has the same 
top-level statements (see </textual><xref class="po-milestone e299 e299" linkend="sec-xstag-top"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) as
a basic tag library including the tag declaration statements
(that is, the </textual><code class="po-atom e300 e300"><textual class="po-textual">xst:tag</textual></code><textual class="po-textual"> and </textual><code class="po-atom e301 e301"><textual class="po-textual">xst:param</textual></code><textual class="po-textual"> statements).
The root </textual><code class="po-atom e302 e302"><textual class="po-textual">xst:tag-lib</textual></code><textual class="po-textual"> statement must have a </textual><code class="po-atom e303 e303"><textual class="po-textual">for</textual></code><textual class="po-textual">
attribute identifying the processor-specific language
of the tag library.
The body of the tag definitions must be implemented
in the processor-specific language.
For instance, an XQuery-specific tag library uses XQuery statements
after the </textual><code class="po-atom e304 e304"><textual class="po-textual">xst:param</textual></code><textual class="po-textual"> elements inside the </textual><code class="po-atom e305 e305"><textual class="po-textual">xst:tag</textual></code><textual class="po-textual"> definition.
        </textual></para><para class="po-block e306 e306"><textual class="po-textual">The only exception applies to calls to handlers. 
The tag processor must be able to parse these calls, so calls to handlers must embed
the </textual><code class="po-atom e307 e307"><textual class="po-textual">xst:call</textual></code><textual class="po-textual"> statement where appropriate within the tag definition.
        </textual></para><para class="po-block e308 e308"><textual class="po-textual">  
The example from </textual><xref class="po-milestone e309 e309" linkend="sec_xstag-ex"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> could be rewritten as an XQuery-specific
tag library as follows:
        </textual></para><programlisting class="po-block e310 e310" xml:space="preserve"><textual class="po-textual">

&lt;xst:taglib version="0.2"
  for="xquery"
  xmlns:fn  = "http://www.w3.org/2005/xpath-functions"
  xmlns:xst = "http://code.google.com/p/xstag/ns/2011/"
  xmlns:tag = "http://code.google.com/p/xstag/ns/demo/tag/books"&gt;

  &lt;xst:tag name="tag:books" as="element()*"&gt;
    &lt;!-- tag definition parameters --&gt; 
    &lt;xst:param name="years" as="xs:gYear*"/&gt;
    &lt;xst:param name="onBook" implicit="true"
        as="handler($title as xs:string, $authors as xs:string+) 
                    as element()?"&gt;
      &lt;!-- default handler implementation --&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;xst:content select="$title"/&gt;&lt;/td&gt;
        &lt;td&gt;&lt;xst:content select="fn:string-join($authors, '; ')"/&gt;&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/xst:param&gt;
    &lt;!-- The tag definition body --&gt;
    &lt;!-- getting the books for the requested years --&gt;
    let $books as element()* :=
        document('books.xml')/books/book[fn:empty($years) or data(year)=$years]
    &lt;!-- processing each book by calling the handler --&gt;
    for $book in $books
    return
      &lt;xst:call handler="$onBook"&gt;
        &lt;xst:with-param name="title"   select="$book/title/fn:string(.)"/&gt;
        &lt;xst:with-param name="authors" select="fn:string-join($book/author/fn:string(.), ', ')"/&gt;
      &lt;/xst:call&gt;
  &lt;/xst:tag&gt;
&lt;/xst:taglib&gt;

          </textual></programlisting><para class="po-block e311 e311"><textual class="po-textual">The revision above does the same thing as the basic tag library but in XQuery.
Reasons for using a processor-specific tag library
include familiarity with the language as well as requirements that exceed
the limited capabilities of basic tag libraries. 
    </textual></para></section></section><section class="po-hcontainer e312 e312" xml:id="sec_tag-doc"><title class="po-block e313 e313"><textual class="po-textual">Tag Documents</textual></title><para class="po-block e314 e314"><textual class="po-textual">A </textual><emphasis class="po-inline e315 e315"><textual class="po-textual">tag document</textual></emphasis><textual class="po-textual"> calls a tag provided by a tag library
      by embedding an XML element with the same QName as the tag.
      The element making the tag call can have: </textual><itemizedlist class="po-table e316 e316"><listitem class="po-container e317 e317"><para class="po-block e318 e318"><textual class="po-textual">Subelements or attributes that supply parameters of the tag.
            </textual></para></listitem><listitem class="po-container e319 e319"><para class="po-block e320 e320"><textual class="po-textual">Subelements that supply handler definitions for handler parameters of the tag.
The container subelement must take an </textual><code class="po-atom e321 e321"><textual class="po-textual">xst:handles</textual></code><textual class="po-textual"> attribute that lists the parameters
received by the handler. 
</textual></para><para class="po-block e322 e322"><textual class="po-textual">If the tag definition passes a parameter to the handler definition
that the handler definition does need, the handler definition can simply ignore
the parameter.  In particular, the </textual><code class="po-atom e323 e323"><textual class="po-textual">xst:handles</textual></code><textual class="po-textual">
attribute does not have to list parameters that aren't used in the handler definition.
The order of parameters in the </textual><code class="po-atom e324 e324"><textual class="po-textual">xst:handles</textual></code><textual class="po-textual">
attribute does not matter.
</textual></para></listitem></itemizedlist><textual class="po-textual">
      </textual></para><para class="po-block e325 e325"><textual class="po-textual">A tag document can only define handlers as part of a tag call. A tag call can be nested
        within a handler.</textual></para><para class="po-block e326 e326"><textual class="po-textual">If a tag has an implicit parameter (as explained in </textual><xref class="po-milestone e327 e327" linkend="sec-xstag-top"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">), the
tag element can omit the subelement container and contain the content of the parameter
directly. When containing the content of an implicit handler, the tag call must supply
</textual><code class="po-atom e328 e328"><textual class="po-textual">xst:handles</textual></code><textual class="po-textual"> attribute.</textual></para><para class="po-block e329 e329"><textual class="po-textual">Variable scope is limited to following siblings and their descendants. Handlers can refer
        to variables in scope. An example of a tag document: </textual></para><programlisting class="po-block e330 e330" xml:space="preserve"><textual class="po-textual">
        
&lt;html xst:version="0.2"
  xmlns:xst = "http://code.google.com/p/xstag/ns/2011/"
  xmlns:fn  = "http://www.w3.org/2005/xpath-functions"
  xmlns:tag = "http://code.google.com/p/xstag/ns/demo/tag/books"
  &gt;
  &lt;!-- Importing a books tag library --&gt;
  &lt;xst:import href="BooksTaglib.xstag"/&gt;
  &lt;xst:variable name="years" select="(2010, 2009, 2008)"/&gt;
  &lt;head&gt;
      &lt;title&gt;Books for {$years} years&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;table&gt;
      &lt;tag:books years="{$years}" xst:handles="$title, $authors"&gt;
        &lt;tr&gt;
          &lt;td&gt;{$title}&lt;/td&gt;
          &lt;td&gt;{fn:string-join($authors, ', ')}&lt;/td&gt;
          &lt;td&gt;{fn:count($authors)}&gt;&lt;/td&gt;
        &lt;/tr&gt;        
      &lt;/tag:books&gt;
    &lt;/table&gt;
  &lt;/body&gt;
&lt;/html&gt;

      </textual></programlisting><para class="po-block e331 e331"><textual class="po-textual">The example above creates an HTML document with a table of
	books for particular years. This tag document makes use
	of a tag library presented in </textual><xref class="po-milestone e332 e332" linkend="sec_xstag-tl"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. 
	First of all we import the tag library using the import statement:
        </textual><code class="po-atom e333 e333"><textual class="po-textual">&lt;xst:import href="BooksTaglib.xstag"/&gt;</textual></code><textual class="po-textual">. 
	In order to use tags from that library, the namespace for
	the tag call element (</textual><code class="po-atom e334 e334"><textual class="po-textual">tag:books</textual></code><textual class="po-textual">) 
	has to match the namespace for the tag definition element but does not have to have the
	same prefix.
      </textual></para><para class="po-block e335 e335"><textual class="po-textual">Our tag has two parameters (refer to </textual><xref class="po-milestone e336 e336" linkend="sec_xstag-tl"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">
	for more details): a sequence of publishing years and
	a handler parameter that takes a string parameter for a title and a
	sequence of strings for the list of authors.
	The </textual><code class="po-atom e337 e337"><textual class="po-textual">tag:books</textual></code><textual class="po-textual"> tag call contains
	a </textual><code class="po-atom e338 e338"><textual class="po-textual">years</textual></code><textual class="po-textual"> attribute to supply the </textual><code class="po-atom e339 e339"><textual class="po-textual">years</textual></code><textual class="po-textual"> parameter
	and content to supply the handler definition for the </textual><code class="po-atom e340 e340"><textual class="po-textual">onBook</textual></code><textual class="po-textual"> handler parameter.
      </textual></para><para class="po-block e341 e341"><textual class="po-textual">The </textual><code class="po-atom e342 e342"><textual class="po-textual">xst:handles</textual></code><textual class="po-textual"> attribute on the tag call identifies the set of parameters
	that the handler expects the tag definition to pass.
      </textual></para><para class="po-block e343 e343"><textual class="po-textual">While a tag processor can check consistency by looking at both a tag
	library and a tag document,
	there are some advantages to having the </textual><code class="po-atom e344 e344"><textual class="po-textual">xst:handles</textual></code><textual class="po-textual"> attribute:
      </textual></para><itemizedlist class="po-table e345 e345"><listitem class="po-container e346 e346"><para class="po-block e347 e347"><textual class="po-textual">By looking for the </textual><code class="po-atom e348 e348"><textual class="po-textual">xst:handles</textual></code><textual class="po-textual"> attribute,
a document author can find the handlers (for instance, after taking on 
maintenance responsibility for someone else's  tag document).
        </textual></para></listitem><listitem class="po-container e349 e349"><para class="po-block e350 e350"><textual class="po-textual">A tag processor can compare the parameters expected by a
          handler definition with the parameters declared formally for the handler by the tag definition and detect
          errors if, for instance, a change in the tag library invalidates the tag document.
        </textual></para></listitem><listitem class="po-container e351 e351"><para class="po-block e352 e352"><textual class="po-textual">A tag processor can also check to confirm that every variable reference in
          the tag document is in scope either within the tag document or as a parameter
          of the handler definition.
        </textual></para></listitem></itemizedlist><para class="po-block e353 e353"><textual class="po-textual">The </textual><code class="po-atom e354 e354"><textual class="po-textual">xst:handles</textual></code><textual class="po-textual"> attribute does not control the handler call 
        from the tag definition to the handler definition. 
        Instead, the handles attribute declares the tag document's expecations
        for how the tag definition will call the handler (in this respect, similar
        to a C external function signature for a function defined in a library). 
      </textual></para><para class="po-block e355 e355"><textual class="po-textual">Results of tag calls can be bound to some variables and those variables
	can be reused in other tag calls.
        </textual></para></section></section><section class="po-hcontainer e356 e356"><title class="po-block e357 e357"><textual class="po-textual">Tag Processor Implementation</textual></title><para class="po-block e358 e358"><textual class="po-textual">Prototype XSLT and XQuery implementations of XSTag are available
at </textual><code class="po-atom e359 e359"><textual class="po-textual">http://code.google.com/p/xstag/</textual></code><textual class="po-textual">.
</textual></para><para class="po-block e360 e360"><textual class="po-textual">The XSLT implementation makes use of Dimitre Novatchev's technique for 
    dynamic templates (see </textual><xref class="po-milestone e361 e361" linkend="FXSL"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">):</textual></para><itemizedlist class="po-table e362 e362"><listitem class="po-container e363 e363"><para class="po-block e364 e364"><textual class="po-textual">A tag call is preprocessed to a call passing a temporary XML document that has a
      subelement for each handler and a subelement capturing the state of each variable
      defined outside the call but referenced in a handler. </textual></para></listitem><listitem class="po-container e365 e365"><para class="po-block e366 e366"><textual class="po-textual">A handler is preprocessed to a match template for the handler subelement, assigning local
      variables from the state subelements for each out of scope variable that is referenced in the
      handler. </textual></para></listitem><listitem class="po-container e367 e367"><para class="po-block e368 e368"><textual class="po-textual"> A tag template is preprocessed to a named template with a single parameter for the
      temporary XML document and local variables for the handler subelements that (when not provided
      by the temporary document) default to the content of the handler parameter. </textual></para></listitem><listitem class="po-container e369 e369"><para class="po-block e370 e370"><textual class="po-textual"> A handler call is preprocessed to an apply on the handler subelement of the call
      document. </textual></para></listitem></itemizedlist><para class="po-block e371 e371"><textual class="po-textual">In the XQuery implementation:</textual></para><itemizedlist class="po-table e372 e372"><listitem class="po-container e373 e373"><para class="po-block e374 e374"><textual class="po-textual"> If the XQuery processor supports closures, a preprocessor can convert a handler into a
      closure that is passed as part of the tag call. The preprocessor can treat the handlers in a
      tag library as a function item parameter. </textual></para></listitem><listitem class="po-container e375 e375"><para class="po-block e376 e376"><textual class="po-textual"> If the XQuery processor supports function items, a preprocessor can convert a handler
      into function and pass the function to the tag. The preprocessor can also capture the state at
      the point of call and restore the state within the constructed function by passing a temporary
      XML document (as in the XSLT implementation). </textual></para></listitem><listitem class="po-container e377 e377"><para class="po-block e378 e378"><textual class="po-textual"> Otherwise, a preprocessor can generate a copy of the tag library for each tag document,
      generating a function for each handler from the tag document and passing and restoring the
      state as a temporary XML document. 
    </textual></para></listitem></itemizedlist><para class="po-block e379 e379"><textual class="po-textual">Both the XSLT and XQuery implementations in the prototype have limitations,
especially in their support for processor-specific tag libraries.
</textual></para></section><section class="po-hcontainer e380 e380"><title class="po-block e381 e381"><textual class="po-textual">Potential Investigations</textual></title><para class="po-block e382 e382"><textual class="po-textual">Tag library developers must provide guidance
to tag document authors on the use of the library.
To make that easier and more consistent, a mechanism similar to JavaDoc
is important for maintaining documentation source within tag libraries
and generating viewable documentation.
Existing projects such as XSLTdoc </textual><xref class="po-milestone e383 e383" linkend="XSLD"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">
or xqDoc </textual><xref class="po-milestone e384 e384" linkend="XQD"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">
may be adaptable for this purpose.
</textual></para><para class="po-block e385 e385"><textual class="po-textual">All of the examples in this paper focus on events during
single-pass generation of a result document within an XML processing
environment.
Other scenario are equally possible:
</textual></para><itemizedlist class="po-table e386 e386"><listitem class="po-container e387 e387"><para class="po-block e388 e388"><textual class="po-textual">For Client UI scenarios, a tag library could generate HTML documents
that use JavaScript to process some handlers in response to UI events
such as button clicks.
</textual></para></listitem><listitem class="po-container e389 e389"><para class="po-block e390 e390"><textual class="po-textual">For AJAX scenarios, a tag library could generate HTML documents
that process some handlers by connecting to a service on a server.
</textual></para></listitem></itemizedlist><para class="po-block e391 e391"><textual class="po-textual">More generally, tag documents and basic tag libraries with a simpler
expression language than XPath could be converted to JavaScript and executed
on the client.
The advent of JavaScript-based XSLT and XQuery implementations also raises
the possibility of using XPath in the browser.
The specifics for processing some tag calls on document request, some tag calls
entirely on the client, and some tags calls through AJAX requests requires
more investigation.
</textual></para><para class="po-block e392 e392"><textual class="po-textual">Tag libraries benefit from the movement by the current draft
XQuery and XSLT standards to support function objects.
Where the processor supports function objects with closure over variables
in scope for the function definition, handlers become trivial to implement.
The current XQuery draft envisions such function objects.  The tag library
approach suggests the value of such function objects for XSLT as well.
</textual></para><para class="po-block e393 e393"><textual class="po-textual">A more interesting possibility would be incorporating a tag library
capability within the XSLT and XQuery standards as a shared definition (similar
to XPath).  
Tag library developers would benefit because (especially in XQuery)
a more natural syntax could be specified for a processor-specific tag library
that is difficult to support with a preprocessor.
Tag document authors would also benefit from direct processing instead of
preprocessing.
For instance, type coercion errors during runtime processing could be traced
directly to the tag document or tag library source for better debugging output.
</textual></para></section><section class="po-hcontainer e394 e394"><title class="po-block e395 e395"><textual class="po-textual">Conclusion</textual></title><para class="po-block e396 e396"><textual class="po-textual">Java Tag Libraries have seen wide adoption as a strategy
for dynamic documents
because of the division of responsibilities between tag document authors
and tag library developers and because of the ability to combine tag libraries
as needed for new solutions.
In particular, the approach removes the need to write binding logic to add or
change the libraries used in a document.
</textual></para><para class="po-block e397 e397"><textual class="po-textual">This paper demonstrates the feasibility of adapting the Java Tag Libraries
approach for use with XML technologies.
Tag libraries can support a set of data retrieval
and manipulation functions as well as UI components.  Tag documents can support these
functions by embedding tags within a presentation vocabulary such as XHTML or
XSL-FO.  In particular, tag documents can pass handlers to tag libraries
for parameterization of document content by the tag library.
</textual></para><para class="po-block e398 e398"><textual class="po-textual">Tag libraries can be implemented in either XSLT or XQuery, enlarging the
environments in which tag libraries can be deployed as well as the pool
of potential tag library developers.
A tag document can be processed in both environments, allowing
tag document authors to provide designs for either kind of environment without
having to learn a new syntax.
Through the contract of the tag signature -- the parameters and handlers
and return type passed to the tag -- contributors can apply their distinct
expertise to collaborate for information processing and presentation. 
    </textual></para></section><section class="po-hcontainer e399 e399" xml:id="glossary"><title class="po-block e400 e400"><textual class="po-textual">Glossary</textual></title><para class="po-block e401 e401"><textual class="po-textual">Some terms introduced in </textual><xref class="po-milestone e402 e402" linkend="sec-concepts"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">
also appear here for completeness.</textual></para><variablelist class="po-table e403 e403"><varlistentry class="po-record e404 e404"><term class="po-block e405 e405"><textual class="po-textual">tag document</textual></term><listitem class="po-container e406 e406"><para class="po-block e407 e407"><textual class="po-textual">A document that mixes a static XML vocabulary (such as XHTML or XSL-FO) with XPath
          expressions, XML Simple Tag statements, and tags from one or more tag libraries to produce
          dynamic documents.</textual></para></listitem></varlistentry><varlistentry class="po-record e408 e408"><term class="po-block e409 e409"><textual class="po-textual">tag library</textual></term><listitem class="po-container e410 e410"><para class="po-block e411 e411"><textual class="po-textual">A function library (typically implemented in XSLT or XQuery) that produces XML content
          for a tag document. </textual></para></listitem></varlistentry><varlistentry class="po-record e412 e412"><term class="po-block e413 e413"><textual class="po-textual">simple tag statement</textual></term><listitem class="po-container e414 e414"><para class="po-block e415 e415"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></para></listitem></varlistentry><varlistentry class="po-record e416 e416"><term class="po-block e417 e417"><textual class="po-textual">tag call</textual></term><listitem class="po-container e418 e418"><para class="po-block e419 e419"><textual class="po-textual">An element in a tag document processed as a function call to a tag definition with the
          same QName, supplying parameters with its attributes and content and replaced by the
          return value from the tag definition.</textual></para></listitem></varlistentry><varlistentry class="po-record e420 e420"><term class="po-block e421 e421"><textual class="po-textual">tag definition</textual></term><listitem class="po-container e422 e422"><para class="po-block e423 e423"><textual class="po-textual">A function provided by a tag library that processes parameters to produce XML content.
        </textual></para></listitem></varlistentry><varlistentry class="po-record e424 e424"><term class="po-block e425 e425"><textual class="po-textual">tag parameter</textual></term><listitem class="po-container e426 e426"><para class="po-block e427 e427"><textual class="po-textual">An atomic value, XML node (typically one or more elements), or handler definition
          passed by a tag call to a tag definition to control production of the XML content or to
          supply content for insertion into the XML content.</textual></para></listitem></varlistentry><varlistentry class="po-record e428 e428"><term class="po-block e429 e429"><textual class="po-textual">tag definition body</textual></term><listitem class="po-container e430 e430"><para class="po-block e431 e431"><textual class="po-textual">Content of a tag definition followed after declaration of all tag parameters. 
          A tag definition body defines the logic how a tag call will be executed.
        </textual></para></listitem></varlistentry><varlistentry class="po-record e432 e432"><term class="po-block e433 e433"><textual class="po-textual">parameter container</textual></term><listitem class="po-container e434 e434"><para class="po-block e435 e435"><textual class="po-textual">A subelement of the tag call supplying a tag parameter with its content; the
          subelement has a namespace prefix that is the same as the prefix of the tag call and a
          local name that's the same as the name of the tag parameter. </textual></para></listitem></varlistentry><varlistentry class="po-record e436 e436"><term class="po-block e437 e437"><textual class="po-textual">handler definition</textual></term><listitem class="po-container e438 e438"><para class="po-block e439 e439"><textual class="po-textual">An XML fragment that is passed as a tag parameter and that is processed with values
          generated during execution of the tag definition; a callback.</textual></para></listitem></varlistentry><varlistentry class="po-record e440 e440"><term class="po-block e441 e441"><textual class="po-textual">handler definition call</textual></term><listitem class="po-container e442 e442"><para class="po-block e443 e443"><textual class="po-textual">Processing of a handler definition with values during execution of a tag
          definition.</textual></para></listitem></varlistentry><varlistentry class="po-record e444 e444"><term class="po-block e445 e445"><textual class="po-textual">handler definition parameter</textual></term><listitem class="po-container e446 e446"><para class="po-block e447 e447"><textual class="po-textual">A value passed by the tag definition to a handler definition. </textual></para></listitem></varlistentry><varlistentry class="po-record e448 e448"><term class="po-block e449 e449"><textual class="po-textual">tag processor</textual></term><listitem class="po-container e450 e450"><para class="po-block e451 e451"><textual class="po-textual">
          An implementation of the tag library and tag document functionality that takes them as an input and 
          produces </textual><emphasis class="po-inline e452 e452"><textual class="po-textual">a result document</textual></emphasis><textual class="po-textual">. 
        </textual></para></listitem></varlistentry><varlistentry class="po-record e453 e453"><term class="po-block e454 e454"><textual class="po-textual">result document</textual></term><listitem class="po-container e455 e455"><para class="po-block e456 e456"><textual class="po-textual">
          A document produced by a tag processor based on tag libraries and a single tag document that import those libraries. 
        </textual></para></listitem></varlistentry></variablelist></section><bibliography class="po-hcontainer e457 e457"><title class="po-block e458 e458"><textual class="po-textual">Bibliography</textual></title><bibliomixed class="po-block e459 e459" xml:id="FXSL"><textual class="po-textual">
      Novatchev, Dimitre, Functional programming in XSLT using the FXSL library, In Proc. Of the
Extreme Markup Languages Conference 2003, seen July 2011.
      Available at </textual><link class="po-inline e460 e460" xlink:actuate="onRequest" xlink:href="http://conferences.idealliance.org/extreme/html/2003/Novatchev01/EML2003Novatchev01.html#t2-2" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://conferences.idealliance.org/extreme/html/2003/Novatchev01/EML2003Novatchev01.html#t2-2</textual></link><textual class="po-textual">.
    </textual></bibliomixed><bibliomixed class="po-block e461 e461" xml:id="JSP"><textual class="po-textual">
      JavaServer Pages Technology, seen July 2011.
      Available at </textual><link class="po-inline e462 e462" xlink:actuate="onRequest" xlink:href="http://www.oracle.com/technetwork/java/javaee/jsp/index.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.oracle.com/technetwork/java/javaee/jsp/index.html</textual></link><textual class="po-textual">.
    </textual></bibliomixed><bibliomixed class="po-block e463 e463" xml:id="PUSHPULL"><textual class="po-textual">
      Push, Pull, Next!, Bob DuCharme, seen July 2011.
      Available at </textual><link class="po-inline e464 e464" xlink:actuate="onRequest" xlink:href="http://www.xml.com/pub/a/2005/07/06/tr.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.xml.com/pub/a/2005/07/06/tr.html</textual></link><textual class="po-textual">.
    </textual></bibliomixed><bibliomixed class="po-block e465 e465" xml:id="RDMC"><textual class="po-textual">
      A peek inside RunDMC, seen July 2011.
      Available at </textual><link class="po-inline e466 e466" xlink:actuate="onRequest" xlink:href="http://developer.marklogic.com/blog/a-peek-inside-rundmc-part-2" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://developer.marklogic.com/blog/a-peek-inside-rundmc-part-2</textual></link><textual class="po-textual">.
    </textual></bibliomixed><bibliomixed class="po-block e467 e467" xml:id="XBL2"><textual class="po-textual">
      XML Binding Language (XBL) 2.0, seen July 2011.
      Available at </textual><link class="po-inline e468 e468" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xbl/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xbl/</textual></link><textual class="po-textual">.
    </textual></bibliomixed><bibliomixed class="po-block e469 e469" xml:id="XForms"><textual class="po-textual">
      XForms 1.1, seen July 2011.
      Available at </textual><link class="po-inline e470 e470" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xforms/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xforms/</textual></link><textual class="po-textual">.
    </textual></bibliomixed><bibliomixed class="po-block e471 e471" xml:id="XQ1"><textual class="po-textual">
      XQuery 1.0: An XML Query Language (Second Edition), seen July 2011.
      Available at </textual><link class="po-inline e472 e472" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xquery/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xquery/</textual></link><textual class="po-textual">.
    </textual></bibliomixed><bibliomixed class="po-block e473 e473" xml:id="XQ3"><textual class="po-textual">
      XQuery 3.0: An XML Query Language (W3C Working Draft 14 June 2011), seen July 2011.
      Available at </textual><link class="po-inline e474 e474" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xquery-30/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xquery-30/</textual></link><textual class="po-textual">.
    </textual></bibliomixed><bibliomixed class="po-block e475 e475" xml:id="XSL2"><textual class="po-textual">
      XSL Transformations (XSLT) Version 2.0, seen July 2011.
      Available at </textual><link class="po-inline e476 e476" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xslt20/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xslt20/</textual></link><textual class="po-textual">.
    </textual></bibliomixed><bibliomixed class="po-block e477 e477" xml:id="XSP"><textual class="po-textual">
      XSP Logicsheet Guide, seen July 2011.
      Available at </textual><link class="po-inline e478 e478" xlink:actuate="onRequest" xlink:href="http://cocoon.apache.org/2.1/userdocs/xsp/logicsheet.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://cocoon.apache.org/2.1/userdocs/xsp/logicsheet.html</textual></link><textual class="po-textual">.
    </textual></bibliomixed><bibliomixed class="po-block e479 e479" xml:id="XSLD"><textual class="po-textual">
      XSLTdoc - A Code Documentation Tool for XSLT, seen July 2011.
      Available at </textual><link class="po-inline e480 e480" xlink:actuate="onRequest" xlink:href="http://www.pnp-software.com/XSLTdoc/index.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.pnp-software.com/XSLTdoc/index.html</textual></link><textual class="po-textual">.
    </textual></bibliomixed><bibliomixed class="po-block e481 e481" xml:id="XQD"><textual class="po-textual">
      XSLTdoc - A Code Documentation Tool for XSLT, seen July 2011.
      Available at </textual><link class="po-inline e482 e482" xlink:actuate="onRequest" xlink:href="http://xqdoc.org/xqdoc_comments_doc.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://xqdoc.org/xqdoc_comments_doc.html</textual></link><textual class="po-textual">.
    </textual></bibliomixed><bibliomixed class="po-block e483 e483" xml:id="XH"><textual class="po-textual">
      XHTML 1.0: The Extensible HyperText Markup Language (Second Edition), seen July 2011.
      Available at </textual><link class="po-inline e484 e484" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/xhtml1/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/xhtml1/</textual></link><textual class="po-textual">.
    </textual></bibliomixed><bibliomixed class="po-block e485 e485" xml:id="XSTEMP"><textual class="po-textual">
      Style-free XSLT Style Sheets, Eric van der Vlist, seen July 2011.
      Available at </textual><link class="po-inline e486 e486" xlink:actuate="onRequest" xlink:href="http://www.xml.com/pub/a/2000/07/26/xslt/xsltstyle.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.xml.com/pub/a/2000/07/26/xslt/xsltstyle.html</textual></link><textual class="po-textual">.
    </textual></bibliomixed></bibliography></article></classedDocument>