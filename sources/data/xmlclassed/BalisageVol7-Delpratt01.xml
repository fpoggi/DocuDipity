<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.3" xml:id="HR-23632987-8973"><title class="po-block e1 e1"><textual class="po-textual">The Effects of Bytecode Generation in XSLT and XQuery</textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">Balisage: The Markup Conference 2011</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 2 - 5, 2011</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual">This paper attempts to analyze the performance benefits that are achievable by
                adding a code generation phase to an XSLT or XQuery engine. This is not done in
                isolation, but in comparison with the benefits delivered by high-level query
                rewriting. The two techniques are complementary and independent, but can compete for
                resources in the development team, so it is useful to understand their relative
                importance. We use the Saxon XSLT/XQuery processor as a case study, where we can now
                translate the logic of queries into Java bytecode. We provide an experimental
                evaluation of the performance of Saxon with the addition of this feature compared to
                the existing Saxon product. Saxon's Enterprise Edition already delivers a
                performance benefit over the open source product using the join optimizer and other
                features. What can we learn from these to achieve further performance gains through
                direct byte code generation?</textual></para></abstract><author class="po-record e8 e8"><personname class="po-record e9 e9"><firstname class="po-field e10 e10"><textual class="po-textual">O'Neil</textual></firstname><othername class="po-field e11 e11"><textual class="po-textual">Davion</textual></othername><surname class="po-field e12 e12"><textual class="po-textual">Delpratt</textual></surname></personname><personblurb class="po-container e13 e13"><para class="po-block e14 e14"><textual class="po-textual">Dr Delpratt is a software developer at Saxonica. Before joining Saxonica, he
                    completed his post-graduate studies at the University of Leicester. His thesis
                    title was 'In-memory Representations of XML documents', which coincided with a
                    C++ software development of a memory efficient DOM implementation, called
                    Succinct DOM.</textual></para></personblurb><affiliation class="po-record e15 e15"><orgname class="po-block e16 e16"><textual class="po-textual">Saxonica</textual></orgname></affiliation><email class="po-field e17 e17"><textual class="po-textual">oneil@saxonica.com</textual></email></author><author class="po-record e18 e18"><personname class="po-record e19 e19"><firstname class="po-field e20 e20"><textual class="po-textual">Michael</textual></firstname><surname class="po-field e21 e21"><textual class="po-textual">Kay</textual></surname></personname><personblurb class="po-container e22 e22"><para class="po-block e23 e23"><textual class="po-textual">Michael Kay has been developing the Saxon product since 1998, initially as a
                    spare-time activity at ICL and then Software AG, but since 2004 within the
                    Saxonica company which he founded. He holds a Ph.D from the University of
                    Cambridge where he studied under the late Maurice Wilkes, and spent 24 years
                    with ICL, mainly on development of database software. He is the editor of the
                    W3C XSLT specification.</textual></para></personblurb><affiliation class="po-record e24 e24"><orgname class="po-block e25 e25"><textual class="po-textual">Saxonica</textual></orgname></affiliation><email class="po-field e26 e26"><textual class="po-textual">mike@saxonica.com</textual></email></author><legalnotice class="po-container e27 e27"><para class="po-block e28 e28"><textual class="po-textual">Copyright Â© 2011 by the authors. Used with permission.</textual></para></legalnotice><keywordset class="po-table e29 e29" role="author"><keyword class="po-field e30 e30"><textual class="po-textual">XSLT</textual></keyword><keyword class="po-field e31 e31"><textual class="po-textual">XQuery</textual></keyword><keyword class="po-field e32 e32"><textual class="po-textual">java</textual></keyword><keyword class="po-field e33 e33"><textual class="po-textual">bytecode</textual></keyword></keywordset></info><section class="po-hcontainer e34 e34" xml:id="Introduction"><title class="po-block e35 e35"><textual class="po-textual">Introduction</textual></title><para class="po-block e36 e36"><textual class="po-textual">Many modern compilers generate code in an intermediate representation which is then
            interpreted by a virtual machine. One of the best known examples is Java: its
            intermediate code (known simply as bytecode) has proved flexible enough to be used as a
            target by many other high-level languages, allowing these languages to be mixed in the
            same Java Virtual Machine (JVM). XSLT and XQuery are no different from other languages
            in this respect, and a number of processors for these languages have used code
            generation to boost performance. There are few reports, however, that enable the
            effectiveness of this technique to be assessed, largely because of the difficulty in
            attributing performance differences to one particular optimization technique. This paper
            attempts to evaluate the impact of introducing code generation into the Saxon processor,
            enabling such a comparison to be made.</textual></para><para class="po-block e37 e37"><textual class="po-textual">One well-known XSLT processor that compiles queries to Java bytecode is XSLTC [</textual><xref class="po-milestone e38 e38" linkend="XSLTC"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. [</textual><xref class="po-milestone e39 e39" linkend="XSLTC"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] at a superficial level works by
            parsing the XSLT into an Abstract Syntax Tree (AST) which then goes through a
            type-checking phase before being compiled into Java bytecode. The output is a so-called
                </textual><emphasis class="po-inline e40 e40" role="ital"><textual class="po-textual">translet</textual></emphasis><textual class="po-textual"> class which can be used for
            transformations or saved to disk for re-use later. For XSLTC (which is distributed as
            part of the Apache Xalan-J package), the aim is not only to deliver enhanced performance
            in the runtime execution of queries, but also to produce a compact executable (the
            translet) which can be readily shipped around the network and executed anywhere.</textual></para><para class="po-block e41 e41"><textual class="po-textual">Code generation is also believed to be used in a number of proprietary XSLT
            processors, such as the Datapower processor [</textual><xref class="po-milestone e42 e42" linkend="DataPower"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] and
            Microsoft's .NET processor. However, no technical details of these products have been
            published in the literature.</textual></para><para class="po-block e43 e43"><textual class="po-textual">Saxon first introduced Java code generation as long ago as version 4.2 [</textual><xref class="po-milestone e44 e44" linkend="Kay1999"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] (some six months before XSLT 1.0 was published in 1999).
            However, this proved to be something of a blind alley, since it became clear that much
            greater performance gains could be realized through other optimization techniques, and
            that the existence of a code generator actually made these techniques more difficult to
            introduce. The architecture of Saxon at this time was to interpret the DOM of the source
            stylesheet directly instead of building an expression tree. This design made it
            impossible to do any extensive optimisation rewrites, as it is done now. One of the
            present authors [</textual><xref class="po-milestone e45 e45" linkend="Kay2006a"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] argued that </textual><quote class="po-inline e46 e46"><textual class="po-textual"> high-level
                optimizations are more important, and that compiling expressions to bytecode might
                reduce the scope for high-level optimizations, if only by making them more complex
                to implement and debug.</textual></quote><textual class="po-textual">As a result, the code generation was "shelved" while
            the architecture was changed to introduce tree rewriting. </textual></para><para class="po-block e47 e47"><textual class="po-textual">Eventually code generation re-emerged in version 8.9 (Feb 2007), supporting XQuery
            only. It still took the form of Java source code generation, rather than bytecode
            generation. But it cannot be counted a great success: we are aware of very little usage.
            This is for several reasons:</textual></para><para class="po-block e48 e48"><textual class="po-textual">
            </textual><itemizedlist class="po-table e49 e49"><listitem class="po-container e50 e50"><para class="po-block e51 e51"><textual class="po-textual">From a user perspective the generation of java source code is cumbersome,
                        requiring three phases: firstly they must generate the Java source code to a
                        file, then the Java source must be compiled, and finally the query can be
                        executed.</textual></para></listitem><listitem class="po-container e52 e52"><para class="po-block e53 e53"><textual class="po-textual">The performance gains are modest (typically 25% improvement).</textual></para></listitem><listitem class="po-container e54 e54"><para class="po-block e55 e55"><textual class="po-textual">There are numerous restrictions concerning the subset of the language that
                        is supported in this mode.</textual></para></listitem></itemizedlist><textual class="po-textual">
        </textual></para><para class="po-block e56 e56"><textual class="po-textual">This paper describes a new approach in which we hope to eliminate these problems. In
            particular, we believe that a 25% speed-up is not enough to encourage users to go to a
            great deal of effort in the way they execute their stylesheets and queries, but it will
            be much appreciated if it comes with no effort. There is a commercial factor which
            motivates this: Saxon is distributed in two versions, a free open-source product and a
            commercial paid-for version. While the commercial Enterprise Edition already has many
            features that users value, including features that can be used to deliver improved
            performance, users are sometimes disappointed to find it does not always run faster "out
            of the box". Code generation is an obvious way to remedy this, and ensure that users who
            pay their dues get some immediate benefit, with no need to change a single line of
            code.</textual></para><para class="po-block e57 e57"><textual class="po-textual">Our objectives in adding code generation to Saxon are rather different from those for
            XSLTC, and this affects the approach we have adopted. In particular, we are not
            primarily interested in producing an executable that can be saved to disk or sent around
            the network. Rather, we want to integrate code generation and interpretation closely, so
            that we only generate code where there is a performance benefit to be gained, and
            continue to interpret otherwise. This should ensure that there are no language
            restrictions or differences when using code generation; it allows development effort to
            be focused where the potential gains are largest; and it limits the extent to which the
            existence of a code generation phase working off the expression tree limits our freedom
            to evolve the design of the expression tree itself when implementing new rewrite
            optimizations. </textual></para><para class="po-block e58 e58"><textual class="po-textual">The remainder of this paper is organized as follows. Firstly, we discuss the
            high-level optimization of Saxon. Secondly, we discuss the bytecode generation feature
            of Saxon. Then we give an experimental evalaution of the running time performance of
            bytecode generation compared to Saxon interpreted mode. We base our experiments on the
            XMark benchmark queries, and conclude our findings.</textual></para></section><section class="po-hcontainer e59 e59"><title class="po-block e60 e60"><textual class="po-textual">High-level Optimization</textual></title><para class="po-block e61 e61"><textual class="po-textual">The Saxon XSLT/XQuery processor includes a number of internal processes to compile,
            simplify and execute queries or stylesheets efficiently. In our discussion we will only
            make reference to XQuery, however in the Saxon internals very similar processes apply to
            XSLT.</textual></para><para class="po-block e62 e62"><textual class="po-textual">Queries are parsed by a XSLT/XQuery compiler into a Abstract Syntax Tree (AST), which
            is a in-memory expression tree structure representing the logical structure of the
            query. In the case of XSLT, this tree combines the two sublanguages, XSLT and XPath,
            into a single integrated structure. References to variables and functions are largely
            resolved during parsing, an operation that is only slightly complicated by the fact that
            forwards references are permitted. Saxon then perfoms three optimization steps to
            produce the final AST that is interpreted at runtime. The first step is the
            normalisation of the AST, the second step is the type checking of the sub-expressions,
            and the third is expression rewriting. Detail of these are provided in the literature
                [</textual><xref class="po-milestone e63 e63" linkend="Kay2008"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], [</textual><xref class="po-milestone e64 e64" linkend="Kay2006b"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] and [</textual><xref class="po-milestone e65 e65" linkend="Kay2005"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. We summarize these steps below. </textual></para><para class="po-block e66 e66"><textual class="po-textual">The optimizations require several depth-first traversals of the tree. In Saxon a
            visitor object provides a depth-first navigation of the expression tree. This class
            supports the various optimization steps involved in the processing of an expression
            tree, as it requires a recursive walk visiting each node in turn. A stack is also
            maintained as each node is visited, which holds the current ancestor nodes. The
            expression tree consists of many kinds of expression nodes, each of which implement the
            Expression interface. (This is the classic Interpreter design pattern.) The Expression
            class contains three important methods: </textual><emphasis class="po-inline e67 e67"><textual class="po-textual">simplify</textual></emphasis><textual class="po-textual">,
                </textual><emphasis class="po-inline e68 e68"><textual class="po-textual">typeCheck</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e69 e69"><textual class="po-textual">optimize</textual></emphasis><textual class="po-textual">. </textual><orderedlist class="po-table e70 e70"><listitem class="po-container e71 e71"><para class="po-block e72 e72"><emphasis class="po-inline e73 e73"><textual class="po-textual">Normalisation</textual></emphasis><textual class="po-textual">. As in databases this is an important
                        step, where we minimize redundancies in queries. In Saxon the expression
                        visitor is used to walk the tree. At each expression node the </textual><emphasis class="po-inline e74 e74" role="ital"><textual class="po-textual">simplify</textual></emphasis><textual class="po-textual"> method is called on its child
                        sub-expressions before normalisation is applied if required. It is possible
                        that at each node the </textual><emphasis class="po-inline e75 e75"><textual class="po-textual">simplify</textual></emphasis><textual class="po-textual"> method may be called
                        several times after the re-writing of sub-expressions. For example, the
                        XPath </textual><code class="po-atom e76 e76"><textual class="po-textual">a/b/c</textual></code><textual class="po-textual"> is rewritten to </textual><code class="po-atom e77 e77"><textual class="po-textual">docOrder(a!b!c)</textual></code><textual class="po-textual">, where
                        docOrder is an operator that eliminates duplicates and sorts into document
                        order, and </textual><code class="po-atom e78 e78"><textual class="po-textual">!</textual></code><textual class="po-textual"> is a simple mapping operator which evaluates
                            </textual><code class="po-atom e79 e79"><textual class="po-textual">c</textual></code><textual class="po-textual"> once for each item in </textual><code class="po-atom e80 e80"><textual class="po-textual">b</textual></code><textual class="po-textual">, which in turn is
                        evaluated once for each item in </textual><code class="po-atom e81 e81"><textual class="po-textual">a</textual></code><textual class="po-textual">.</textual></para></listitem><listitem class="po-container e82 e82"><para class="po-block e83 e83"><emphasis class="po-inline e84 e84"><textual class="po-textual">Type Check</textual></emphasis><textual class="po-textual">. As we traverse the expression tree each
                        sub-expression node is type checked. Here checks are performed on the
                        operands of the expression, whether the static types of the operands are
                        known to be subtypes of the required type. [</textual><xref class="po-milestone e85 e85" linkend="Kay2006b"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]
                        details several possible outcomes in the process: The static type is a
                        subtype of the required type, then no further check is required, or some
                        instances only are instances of the required type, here a node is inserted
                        in the tree to indicate run-time type check required. The other possiblility
                        is that the static type and the required type are disjoint, therefore Saxon
                        generates a type error at compile time. Saxon also performs atomization
                        conversions, such as casting of untypedAtomic values. It also removes any
                        redundant conversions, such as casts written by the user. </textual></para></listitem><listitem class="po-container e86 e86"><para class="po-block e87 e87"><emphasis class="po-inline e88 e88"><textual class="po-textual">Expression Rewriting (Optimization)</textual></emphasis><textual class="po-textual">. The optimizing
                        of XSLT stylesheets, XQuery and XPath expressions is a well studied area,
                        which has provided implementations significant performance gains. In [</textual><xref class="po-milestone e89 e89" linkend="Kay2007"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] and [</textual><xref class="po-milestone e90 e90" linkend="Snelson2011"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] there is a
                        detailed study of the main optimization techniques, some of which are used
                        in Saxon. The rewrite of expressions is achieved in the
                            </textual><emphasis class="po-inline e91 e91"><textual class="po-textual">optimize</textual></emphasis><textual class="po-textual"> method, requiring a third pass of the
                        expression tree. Saxon performs join optimization (familar in database
                        languages), by replacing predicate expressions with key indexes. There are
                        other techniques such as function inlining and the optimization of tail
                        recursion, which is familar in functional programming languages. This is
                        another area where Saxon differentiates the commercial product from the free
                        open-source product: many of the more advanced optimizations are available
                        in the Enterprise Edition only.</textual></para></listitem></orderedlist></para><para class="po-block e92 e92"><textual class="po-textual">Each of these phases adds information to the tree. The most obvious information is the
            inferred static type of each expression, but there are many other properties that play
            an equally important role: for example the dependencies of an expression on variables or
            on the dynamic context, and properties of node-sets such as whether they are known to be
            sorted and whether they can contain duplicates. </textual></para></section><section class="po-hcontainer e93 e93"><title class="po-block e94 e94"><textual class="po-textual">Bytecode Generation</textual></title><para class="po-block e95 e95"><textual class="po-textual">We now discuss a new Java bytecode generation feature in Saxon, which we consider as a
            fourth step in the optimization processes discussed in Section 2. It directly replaces
            the java source code generation feature provided in Saxon up to version 9.3. Here we are
            now generating the Java bytecode directly when compiling a query after it has been
            optimized. Our approach is different to that in XSLTC because we are generating bytecode
            selectively for expressions that are considered to have potential performance
            improvements, so that interpreted code and compiled code interact freely. The fact that
            compiled code exists only transiently in memory means that it can refer to data
            structures on the expression tree, rather than regenerating them at initialization time.
            In the longer term, this architecture also leaves the door open to just-in-time
            compilation (or hotspot compilation) based on observed execution patterns at
            run-time.</textual></para><para class="po-block e96 e96"><textual class="po-textual">There are a number of Java class manipulation tools available (see </textual><xref class="po-milestone e97 e97" linkend="Bruneton2002"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">). One of the most widely used of these tools is BCEL [</textual><xref class="po-milestone e98 e98" linkend="Dahm1999"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, </textual><xref class="po-milestone e99 e99" linkend="Bruneton2002"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. In this tool the class
            modification is achieved in a three part process: The bytecode representing the class is
            deserialized into a constructed class structure in memory, with a object created for
            each node, right down to the bytecode instructions. This structure is then manipulated
            in the second phase. The third phase is to serialize the modified object structure into
            a new byte array. </textual></para><para class="po-block e100 e100"><textual class="po-textual">We chose instead to use the ASM [</textual><xref class="po-milestone e101 e101" linkend="Bruneton2002"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] framework library
            tool to generate bytecode for queries. ASM [</textual><xref class="po-milestone e102 e102" linkend="Bruneton2002"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] claims to be
            smaller and to give better performance than other tools. Where BCEL builds a DOM-like
            tree representation of the code, ASM works using a series of SAX-like streaming passes
            over it. There are other Java class manipulation tools which we only mention here such
            as SERP, JIOE: these are described in [</textual><xref class="po-milestone e103 e103" linkend="Bruneton2002"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. We have not done
            any experimental anaylsis of the Java class manipulation tools nor is there scope in
            this paper to provide an anaysis of these tools. Nevertheless, we have chosen the ASM
            library based upon [</textual><xref class="po-milestone e104 e104" linkend="Bruneton2002"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], due to the simplicity of the tool
            and our requirement which only relied upon a small part of the library to dynamically
            generate bytecode in the runtime of queries.</textual></para><para class="po-block e105 e105"><textual class="po-textual">The bytecode generation process has as input an AST, optimized to a greater or lesser
            extent in earlier phases depending on the Saxon product that is used. The top-level
            expression in each function or XSLT template is compiled into an equivalent Java
            bytecode class. We call this a </textual><emphasis class="po-inline e106 e106"><textual class="po-textual">CompiledExpression</textual></emphasis><textual class="po-textual">: it is
            constructed as we traverse the AST and can be evaluated at runtime. If the expression
            cannot be compiled, perhaps because it uses unusual language constructs, it is simply
            interpreted instead: but its subexpressions can still be compiled. The structure of the
                </textual><emphasis class="po-inline e107 e107"><textual class="po-textual">CompiledExpression</textual></emphasis><textual class="po-textual"> is as follows: Firstly we generate static
            variables which have been initialised. As mentioned above, we are generating transient
            bytecode that works interchangably with interpreted code. The static variables in the
            generated code contain references to data on the expression tree: either whole
            expressions, or helper classes such as node tests, comparators, converters, and the
            like. For example, the </textual><emphasis class="po-inline e108 e108"><textual class="po-textual">NodeTest</textual></emphasis><textual class="po-textual"> object, which provides XSLT pattern
            matching, acts as a predicate in axis steps, and also acts as an item type for type
            matching, is stored as a static variable available for use in the bytecode generated. </textual></para><para class="po-block e109 e109"><textual class="po-textual">As discussed in [</textual><xref class="po-milestone e110 e110" linkend="Kay2009"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] and [</textual><xref class="po-milestone e111 e111" linkend="Kay2010"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], Saxon can
            execute internally in both </textual><emphasis class="po-inline e112 e112"><textual class="po-textual">pull</textual></emphasis><textual class="po-textual"> and </textual><emphasis class="po-inline e113 e113"><textual class="po-textual">push</textual></emphasis><textual class="po-textual"> mode.
            In pull mode, an expression iterates over the data supplied by its child expressions;
            child expressions therefore implement an </textual><emphasis class="po-inline e114 e114" role="ital"><textual class="po-textual">iterate()</textual></emphasis><textual class="po-textual">
            method which delivers results incrementally to the caller. In push mode, an expression
            writes SAX-like events to an output destination (a </textual><emphasis class="po-inline e115 e115" role="ital"><textual class="po-textual">Receiver</textual></emphasis><textual class="po-textual">). Choosing between pull and push mode can make a substantial
            difference to performance: during development, when we have observed situations where
            compiled code was outperformed by interpreted code, it was generally because the
            interpreter was making better decisions on when to pull and when to push. The compiled
            code therefore needs to work in both modes, so each
                </textual><emphasis class="po-inline e116 e116"><textual class="po-textual">CompiledExpression</textual></emphasis><textual class="po-textual"> has two methods: an
                </textual><emphasis class="po-inline e117 e117"><textual class="po-textual">iterate</textual></emphasis><textual class="po-textual"> method to deliver results to its caller, and a
                </textual><emphasis class="po-inline e118 e118"><textual class="po-textual">process</textual></emphasis><textual class="po-textual"> method to write events to a Receiver. A third method,
                </textual><emphasis class="po-inline e119 e119" role="ital"><textual class="po-textual">evaluateItem()</textual></emphasis><textual class="po-textual">, is provided for single-shot
            evaluation of expressions that always return a singleton result. Of course in many cases
            these methods will share common logic.</textual></para><section class="po-hcontainer e120 e120"><title class="po-block e121 e121"><textual class="po-textual">Architecture of Java bytecode generator</textual></title><para class="po-block e122 e122"><textual class="po-textual">The </textual><emphasis class="po-inline e123 e123"><textual class="po-textual">ExpressionCompiler</textual></emphasis><textual class="po-textual"> is an abstract class which represents
                the compiler (that is, Java bytecode generator) for a particular kind of expression
                on the expression tree. The </textual><emphasis class="po-inline e124 e124"><textual class="po-textual">ExpressionCompiler</textual></emphasis><textual class="po-textual"> classes are used
                to build the </textual><emphasis class="po-inline e125 e125"><textual class="po-textual">CompiledExpression</textual></emphasis><textual class="po-textual"> class in bytecode, traversing
                the expression tree in depth-first manner: there is a one-to-one correspondence
                between the classes implementing the expression on the expression tree and the
                compiler object used to generate Java code fragments</textual><footnote class="po-popup e126 e126"><para class="po-block e127 e127"><textual class="po-textual">It would have been possible to use the same class for both purposes: This
                        is a rare example of a distortion to the design caused by Saxon's need to
                        divide open-source from proprietary code.</textual></para></footnote><textual class="po-textual">. The following methods are supplied to compile expressions; exactly one
                of them is called, depending on the context in which the expression appears:
                </textual><programlisting class="po-block e128 e128" xml:space="preserve"><textual class="po-textual">compileToItem    - Generate bytecode to evaluate the expression as an Item
compileToIterator - Generate bytecode to evaluate the expression as an Iterator.
compileToBoolean  - Generate bytecode to evaluate the expression as a boolean.
compileToPush     - Generate bytecode to evaluate the expression in push mode.
compileToLoop     - Generate bytecode to evaluate the expression in such a way that
                the supplied loop body argument is executed once for each Item. 
compileToPrimitive - Generate bytecode to evaluate the expression as a plain Java value 
                     (e.g. int, double, String). This method must only be called if the 
                     target type of the expression is known  statically.</textual></programlisting></para><para class="po-block e129 e129"><textual class="po-textual">Within each kind of expression one or more of the methods above is implemented.
                For example, the </textual><emphasis class="po-inline e130 e130" role="ital"><textual class="po-textual">exists()</textual></emphasis><textual class="po-textual"> function delivers a
                boolean value so we implement the </textual><emphasis class="po-inline e131 e131" role="ital"><textual class="po-textual">compileToBoolean</textual></emphasis><textual class="po-textual">
                method. To understand why compiled code is sometimes faster than interpreted code,
                it is useful to examine this example in some detail. Essentially, compiled code will
                only be faster than the interpreter if decisions can be made at compile-time than
                would otherwise be made at execution time. There are many cases where this is simply
                not possible: for example, code that is dominated by string-to-number conversion
                will gain no speed-up from compilation, because the actual code executed is
                identical whether it is compiled or interpreted. Making decisions at compile time is
                only possible where the information needed to make those decisions is present in the
                expression tree. For example, for the </textual><emphasis class="po-inline e132 e132" role="ital"><textual class="po-textual">exists()</textual></emphasis><textual class="po-textual">
                function we compare its </textual><emphasis class="po-inline e133 e133" role="ital"><textual class="po-textual">compileToBoolean</textual></emphasis><textual class="po-textual"> method to
                the interpreted code and the Java source generation below. The simple query
                    </textual><code class="po-atom e134 e134"><textual class="po-textual">exists(.)</textual></code><textual class="po-textual"> generates the following bytecode in push mode (simplified
                only to remove diagnostic information used by the debugger):</textual></para><programlisting class="po-block e135 e135" xml:space="preserve"><textual class="po-textual">
 public process(Lnet/sf/saxon/expr/XPathContext;)V
   L0
    // Get the Receiver to which output will be sent
    ALOAD 1    // the XPathContext object
    INVOKEINTERFACE net/sf/saxon/expr/XPathContext.getReceiver ()Lnet/sf/saxon/event/SequenceReceiver;
    ASTORE 2   // local variable holding the current Receiver
    ALOAD 2
   L1
   L2
    // Get the context item (evaluate ".")
    ALOAD 1    // the XPathContext object
    INVOKEINTERFACE net/sf/saxon/expr/XPathContext.getContextItem ()Lnet/sf/saxon/om/Item;
    DUP
    // Generate an error if no context item is defined
    IFNONNULL L3
    NEW net/sf/saxon/trans/XPathException
    DUP
    LDC "Context item for '.' is undefined"
    LDC "XPDY0002"
    INVOKESPECIAL net/sf/saxon/trans/XPathException.&lt;init&gt; (Ljava/lang/String;Ljava/lang/String;)V
    DUP
    GETSTATIC CE_main_671511612.nContextItemExpression0 : Lnet/sf/saxon/expr/ContextItemExpression;
    INVOKEVIRTUAL javax/xml/transform/TransformerException.setLocator (Ljavax/xml/transform/SourceLocator;)V
    ATHROW
    // Load "true" (1) or "false" (0) depending on whether the value is null
   L3
    IFNULL L4_returnFalse
    ICONST_1    //Load true (1)
    GOTO L5
   L4_returnFalse
    ICONST_0    //Load false (0)
   L5_endExists
    // Convert the result to a Saxon BooleanValue object and send it to the Receiver
    INVOKESTATIC net/sf/saxon/value/BooleanValue.get (Z)Lnet/sf/saxon/value/BooleanValue;
    INVOKEVIRTUAL net/sf/saxon/event/SequenceReceiver.append (Lnet/sf/saxon/om/Item;)V
    RETURN
}</textual></programlisting><para class="po-block e136 e136"><textual class="po-textual">It is interesting to compare this with the java source code generated for the same
                query </textual><code class="po-atom e137 e137"><textual class="po-textual">exists(.)</textual></code><textual class="po-textual"> using Saxon 9.3:
                </textual><programlisting class="po-block e138 e138" xml:space="preserve"><textual class="po-textual">public void process(final XPathContext context) throws XPathException {
    SequenceReceiver out = context.getReceiver();
    if (context.getContextItem() == null) {
        dynamicError("The context item is undefined", "XPDY0002", context);
    }
    final boolean b0 = (context.getContextItem() != null);
    out.append(BooleanValue.get(b0), 0, NodeInfo.ALL_NAMESPACES);
}</textual></programlisting><textual class="po-textual">The
                logic is very similar, and in fact the bytecode generated when this Java source code
                is compiled is very similar too (just fractionally less efficient because of the
                unnecessary boolean variable </textual><emphasis class="po-inline e139 e139"><textual class="po-textual">b0</textual></emphasis><textual class="po-textual">). See the bytecode of the Java
                source code in </textual><xref class="po-milestone e140 e140" linkend="appendix1"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, which can be compared with the generated
                bytcode above. Thus for a typical query, the new bytecode generation feature does
                not provide noticeable performance benefits over the generated java source from
                Saxon 9.3. However from a usability point-of-view, the advantage is that there is no
                need to compile and run the java program source code, which makes all the difference
                for a typical user.</textual></para><para class="po-block e141 e141"><textual class="po-textual">It's also worth noting that the logic in Saxon to generate the bytecode is not
                significantly more complex than the logic that was used to generate Java bytecode.
                All the complexity is in the ASM library. Debugging the logic when it is incorrect
                can be a little harder however (diagnostics are not ASM's strongest feature). </textual></para><para class="po-block e142 e142"><textual class="po-textual"> </textual></para></section></section><section class="po-hcontainer e143 e143"><title class="po-block e144 e144"><textual class="po-textual">Experimental Evaluation</textual></title><para class="po-block e145 e145"><textual class="po-textual">In this section we draw comparisons of the running time performance between
            interpreted code and generated bytecode. An important aim is to compare the impact of
            code generation with the impact of high-level rewrite optimizations: to this end we run
            with four configurations, both features being switched on or off. (In the released
            product, neither feature will be available in the open source Saxon-HE, and by default
            both will be enabled in Saxon-EE).</textual></para><section class="po-hcontainer e146 e146"><title class="po-block e147 e147"><textual class="po-textual">Setup</textual></title><para class="po-block e148 e148"><textual class="po-textual">We used Saxon 9.3.0.4 as the baseline. The test machine was a Intel Core i5
                processor 430M laptop with 4GB memory, 2.26Ghz CPU and 3MB L3 cache, running Ubuntu
                10.04LTS Linux. The compiler was Sun/Oracle Java 1.6.0.2. The experiments are based
                on the XMark benchmark [</textual><xref class="po-milestone e149 e149" linkend="XMark"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">]. We use the XMark XQuery queries
                numbered q1 to q20, and synthetically generate several XML data files from [</textual><xref class="po-milestone e150 e150" linkend="XMark"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">], these being of sizes in the range 1MB to 64MB.</textual></para><section class="po-hcontainer e151 e151"><title class="po-block e152 e152"><textual class="po-textual">Running Times</textual></title><para class="po-block e153 e153"><textual class="po-textual">The 20 XMark queries are run repeatedly up to 1000 times or until 30 seconds
                    have elapsed, and we record the average time spent to complete the runs, using
                    the system clock in Java. [</textual><xref class="po-milestone e154 e154" linkend="appendix3"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">] shows the complete
                    running times. We show these for Saxon-HE, Saxon-Bytecode, Saxon-EE and
                    Saxon-EE-Bytecode (that is, with weak optimization and no code generation; with
                    weak optimization plus code generation, with strong optimization and no code
                    generation, and with strong optimization followed by code generation). We
                    compare the running times of the Saxon-EE product for the interpreted code and
                    bytecode. We found on average over all files that bytecode generation gave
                    between 14% and 27% improvement.</textual></para><figure class="po-container e155 e155" xml:id="Figure1"><title class="po-block e156 e156"><textual class="po-textual">Scalability test. Running time performance for different file sizes on
                        query 10</textual></title><mediaobject class="po-container e157 e157"><imageobject class="po-container e158 e158"><imagedata class="po-meta e159 e159" fileref="../../../vol7/graphics/Delpratt01/Delpratt01-001.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e160 e160"><para class="po-block e161 e161"><textual class="po-textual">Scalability test: For Saxon-HE, Saxon-EE and Saxon-EE-Bytecode the
                            timing results of running the XMark benchmark query 10 on XMark
                            generated data files of sizes 2MB, 4MB, 8MB, 16MB, 32MB and 64MB. For
                            Saxon-HE the running time for the 64MB data file is omitted as it goes
                            off the graph.</textual></para></caption></figure><para class="po-block e162 e162"><textual class="po-textual">In </textual><xref class="po-milestone e163 e163" linkend="Figure1"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, we show a graph of the scalability of running
                    the query 10 on the XMark data files of sizes ranging from 2MB to 64MB with
                    Saxon-HE, Saxon-EE and Saxon-EE-Bytecode. In Saxon-EE and Saxon-EE-bytecode the
                    timing results show a linear growth as files become larger in size. For Saxon-HE
                    we observe a quadratic growth: this shows up the absence of join optimization in
                    the Saxon-HE product.</textual></para><para class="po-block e164 e164"><textual class="po-textual">In </textual><xref class="po-milestone e165 e165" linkend="Figure2"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and in </textual><xref class="po-milestone e166 e166" linkend="Table3"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> in </textual><xref class="po-milestone e167 e167" linkend="appendix3"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> we observe that for certain queries the performance of
                    bytecode generation is well above average. Queries 8, 10, 11 and 12 gave
                    improvements between 35% and 50%. We compare the Saxon-EE products with the
                    feature of Java code generation (Saxon-EE-JavaGen, featured in Saxon 9.3), the
                    interpreted code and bytecode. Again we see an overall improvement over the
                    intepreted code, but we observe similar results for Java code generation and
                    bytecode generation, the difference being approximately 10% on average over all
                    queries. </textual></para></section><section class="po-hcontainer e168 e168"><title class="po-block e169 e169"><textual class="po-textual">Effect of Optimization Rewrites</textual></title><para class="po-block e170 e170"><textual class="po-textual">Comparison of the timings for different data sizes shows that with weak
                    optimization, queries 8, 9, 10, 11 and 12 have performance that is quadratic in
                    the data size; with strong optimization, only query 11 is quadratic. This is
                    because queries 8, 9, 10 and 12 are equijoins, whereas query 11 is a
                    non-equijoin which the Saxon optimizer cannot handle well.</textual></para><para class="po-block e171 e171"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></para><para class="po-block e172 e172"><textual class="po-textual">
                    </textual><figure class="po-container e173 e173" xml:id="Figure2"><title class="po-block e174 e174"><textual class="po-textual">XQuery Queries Running Times (10MB data file)</textual></title><mediaobject class="po-container e175 e175"><imageobject class="po-container e176 e176"><imagedata class="po-meta e177 e177" fileref="../../../vol7/graphics/Delpratt01/Delpratt01-002.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e178 e178"><para class="po-block e179 e179"><textual class="po-textual">For Saxon-EE-JavaGen (Java Generation in Saxon 9.3), Saxon-EE
                                and Saxon-EE-Bytecode the timing results of running XMark benchmark
                                query 7, 8, 9, 10, 11 and 12 on a 10MB XMark generated data
                                file.</textual></para></caption></figure></para></section></section></section><section class="po-hcontainer e180 e180"><title class="po-block e181 e181"><textual class="po-textual">Using Hand-written Code as a Benchmark</textual></title><para class="po-block e182 e182"><textual class="po-textual">In the previous sections we've concentrated on comparing the performance of compiled
            queries and stylesheets with the same queries and stylesheets run under the interpreter.
            But there's another technique we have found useful, which is to compare the performance
            of a compiled query with hand-written Java code performing the same task. The
            performance of the hand-written code sets a target to aim for, and provides a measure of
            how much room for improvement is available.</textual></para><para class="po-block e183 e183"><textual class="po-textual">The results show great variation between different queries, which is useful
            information in itself. Here we'll consider two simple queries.</textual></para><para class="po-block e184 e184"><textual class="po-textual">The first computes the average income of buyers recorded in the XMark dataset: we're
            running the query
            </textual><programlisting class="po-block e185 e185" xml:space="preserve"><textual class="po-textual">avg(//profile/@income)</textual></programlisting><textual class="po-textual"> against the
            10Mb version of the dataset. </textual></para><para class="po-block e186 e186"><textual class="po-textual">The Saxon interpreter runs this in an average of 792ms. Currently, when compiling to
            bytecode, the improvement is quite modest: average time is 768ms.</textual></para><para class="po-block e187 e187"><textual class="po-textual">The same query coded in Java looks like this:
            </textual><programlisting class="po-block e188 e188" xml:space="preserve"><textual class="po-textual">NodeInfo root = doc.getUnderlyingNode();
AxisIterator descendants = root.iterateAxis
                      (net.sf.saxon.om.Axis.DESCENDANT, 
                       new NameTest(Type.ELEMENT, profileNC, pool));
NodeInfo profile;
double total = 0;
int count = 0;
while ((profile = descendants.next()) != null) {
    String income = Navigator.getAttributeValue(profile, "", "income");
    if (income != null) {
        total += Double.valueOf(income);
        count++;
    }
}</textual></programlisting></para><para class="po-block e189 e189"><textual class="po-textual">The execution time for this code is 690ms. So we see that the interpreter is already
            almost as fast as the hand-written Java code. On the assumption that generated bytecode
            will rarely be better than hand-written Java code, there is little headroom available
            for the code generator to make a significant impact. It's easy to see why this should be
            the case: the query is spending nearly all its time (a) searching the descendant axis
            for </textual><emphasis class="po-inline e190 e190" role="ital"><textual class="po-textual">&lt;profile&gt;</textual></emphasis><textual class="po-textual"> elements, and (b) converting
            attribute values from strings to numbers. These two operations are done by library
            routines that execute exactly the same code whether it is run under the XQuery
            interpreter, the XQuery code generator, or the hand-written Java code. Both routines
            have been carefully tuned over the years and there is little scope for improvement;
            neither is doing any work that doesn't absolutely need to be done.</textual></para><para class="po-block e191 e191"><textual class="po-textual">Our second query is rather different. This one doesn't in fact process any XML, so one
            could argue that it is atypical; but as a fragment within a larger query it is code that
            one might well encounter:
            </textual><programlisting class="po-block e192 e192" xml:space="preserve"><textual class="po-textual">sum(for $i in 1 to $p return xs:double($i)*xs:double($i))</textual></programlisting><textual class="po-textual">
            Here, with $p set to 100000, the XQuery interpreter executes the query in 29.4ms. The
            equivalent hand-written Java code is
            </textual><programlisting class="po-block e193 e193" xml:space="preserve"><textual class="po-textual">double j = 0;
for (int i=1; i&lt;=100000; i++) {
    j += (double)i * (double)i;
}</textual></programlisting><textual class="po-textual">and
            this executes much faster, in just 1.2ms. So this time there is a lot more headroom, a
            lot more scope for the code generator to make a difference. Our first version of the
            code generator in fact made no difference at all to the execution time of this query (a
            mere 1% improvement, which is within the range of experimental error). It's not
            difficult to see why: the generated code was essentially an inlined version of the same
            instructions that the interpreter was executing, except for a very small amount of
            control logic to walk the expression tree. Comparing this with the hand-written code in
            this case shows us that we can do a lot better. There is no reason in principle why the
            XQuery code should not run just as fast as the Java code. We're not quite there yet, but
            we have improved it to around 12ms. One technique that proved useful in achieving this
            was to write a Java program that executed the same logic as the XQuery-generated
            bytecode, and to measure the effect of making a variety of improvements to it: this
            exercise showed where it would be worthwhile to invest effort. The two areas that
            account for the improvement are: </textual><orderedlist class="po-table e194 e194" numeration="loweralpha"><listitem class="po-container e195 e195"><para class="po-block e196 e196"><textual class="po-textual">Removal of unnecessary boxing and unboxing operations. Saxon generally
                        wraps simple values such as integers, strings, and booleans in a wrapper
                        (IntegerValue, StringValue, and BooleanValue, all subclasses of AtomicValue)
                        so they can all be manipulated using polymorphic methods. This means that
                        multiplying two doubles to produce another double involves not only the
                        multiplication, but two unboxing steps and one boxing step. Eliminating
                        these operations accounted for around half the improvement.</textual></para></listitem><listitem class="po-container e197 e197"><para class="po-block e198 e198"><textual class="po-textual">Removal of unnecessary mapping iterators. The way this query is executed
                        in the interpreter is to create an iterator over the integers 1 to 100000;
                        the results of this iterator are piped into a mapping iterator which applies
                        a mapping function to each value, this being the expression </textual><emphasis class="po-inline e199 e199" role="ital"><textual class="po-textual">xs:double($i)*xs:double($i);</textual></emphasis><textual class="po-textual"> and the resulting
                        doubles are then piped to the sum() function, which reads through the
                        iterator and totals the values. Inverting this structure to a loop where a
                        running total is incremented in the body of the loop, as in the hand-written
                        Java solution, accounts for the other half of the improvement.</textual></para></listitem></orderedlist></para><para class="po-block e200 e200"><textual class="po-textual">The lessons from this exercise are firstly, that there are some execution paths where
            it is very hard to improve performance because it is already very close to optimal; but
            that there are other operations that still leave much room for improvement, and one good
            way to identify this is to compare the system-generated code with hand-written Java code
            that performs the same task.</textual></para></section><section class="po-hcontainer e201 e201"><title class="po-block e202 e202"><textual class="po-textual">Conclusion</textual></title><para class="po-block e203 e203"><textual class="po-textual">The purpose of this paper was to study the performance benefits that can be achieved
            by adding a code-generation phase to an XSLT or XQuery processor. To do so, we examined
            these side-by-side with the benefits achieved by high level optimization rewrites. The
            two techniques are orthogonal to each other, in that one can do either or both, but it
            is interesting to analyze which delivers better improvements in relation to the
            cost.</textual></para><para class="po-block e204 e204"><textual class="po-textual">In the best case (or the worst case, depending on how you look at it), optimization
            rewrites can turn a query with quadratic performance into one with linear performance.
            This is something code generation can never aspire to. This therefore vindicates the
            approach that has been taken in Saxon of putting aside work on code generation until the
            high-level optimizer had achieved a sufficient level of maturity.</textual></para><para class="po-block e205 e205"><textual class="po-textual">The conclusion of our study is that compiled code can be expected to run about 25%
            faster than code executed under an optimal interpreter, but the improvements can be
            greater (up to 50% in our case) when the interpreter is less than optimal or when the
            individual expressions on the expression tree are performing tasks such as arithmetic
            operations or numeric comparisons whose execution time is small in comparison to the
            overhead of the control logic for invoking them.</textual></para><para class="po-block e206 e206"><textual class="po-textual">For Saxon, the extra 25% is well worth achieving, since there are many users with
            demanding workloads, and since the business model for the product relies on the
            development being funded by revenue from the small number of users with the most
            demanding requirements. For other products, the trade-off might be different: in
            particular the message from this study is that code-generation is something you should
            do only when all other opportunities for performance improvement have been
            exhausted.</textual></para></section><appendix class="po-hcontainer e207 e207" xml:id="appendix1"><title class="po-block e208 e208"><textual class="po-textual">Bytecode of generated Java source code</textual></title><para class="po-block e209 e209"><textual class="po-textual">Using Saxon 9.3.0.4 generated Java code for the simple query </textual><code class="po-atom e210 e210"><textual class="po-textual">exists(.)</textual></code><textual class="po-textual"> we
            show its byte code using the tool </textual><emphasis class="po-inline e211 e211"><textual class="po-textual">javap</textual></emphasis><textual class="po-textual"> with option
                </textual><emphasis class="po-inline e212 e212"><textual class="po-textual">-c</textual></emphasis><textual class="po-textual">:
            </textual><programlisting class="po-block e213 e213" xml:space="preserve"><textual class="po-textual"> public void process(net.sf.saxon.expr.XPathContext)   throws net.sf.saxon.trans.XPathException;
  Code:
   0:	aload_1
   1:	invokeinterface	#2,  1; //InterfaceMethod net/sf/saxon/expr/XPathContext.getReceiver:()Lnet/sf/saxon/event/SequenceReceiver;
   6:	astore_2
   7:	aload_1
   8:	invokeinterface	#3,  1; //InterfaceMethod net/sf/saxon/expr/XPathContext.getContextItem:()Lnet/sf/saxon/om/Item;
   13:	ifnonnull	25
   16:	aload_0
   17:	ldc	#4; //String The context item is undefined
   19:	ldc	#5; //String XPDY0002
   21:	aload_1
   22:	invokevirtual	#6; //Method dynamicError:(Ljava/lang/String;Ljava/lang/String;Lnet/sf/saxon/expr/XPathContext;)V
   25:	aload_1
   26:	invokeinterface	#3,  1; //InterfaceMethod net/sf/saxon/expr/XPathContext.getContextItem:()Lnet/sf/saxon/om/Item;
   31:	ifnull	38
   34:	iconst_1
   35:	goto	39
   38:	iconst_0
   39:	istore_3
   40:	aload_2
   41:	iload_3
   42:	invokestatic	#7; //Method net/sf/saxon/value/BooleanValue.get:(Z)Lnet/sf/saxon/value/BooleanValue;
   45:	iconst_0
   46:	iconst_2
   47:	invokevirtual	#8; //Method net/sf/saxon/event/SequenceReceiver.append:(Lnet/sf/saxon/om/Item;II)V
   50:	return</textual></programlisting><textual class="po-textual">
        </textual></para></appendix><appendix class="po-hcontainer e214 e214" xml:id="appendix3"><title class="po-block e215 e215"><textual class="po-textual">Running times of the 20 XMark XQuery queries</textual></title><para class="po-block e216 e216"><textual class="po-textual">The following three tables show running times of the 20 XMark XQuery queries. Each
            query is executed 1000 or until 30 seconds have elapsed, whichever comes first. The
            average is time reported in micro-seconds. We show results for Saxon-HE (no
            optimization), Saxon-Bytecode (no optimization, with bytecode generation), Saxon-EE
            (with optimization), Saxon-EE-JavaCode (with optimization and java source code
            generation) and Saxon-EE-Bytecode (with optimization and bytecode generation). We also
            show the Saxon-EE-Bytecode speedup as percentages with respect to Saxon-EE times. The
            fastest Saxon configuration for each result is set in bold font.</textual><table border="1" cellpadding="10" class="po-container e217 e217" xml:id="Table1"><caption class="po-container e218 e218"><para class="po-block e219 e219"><textual class="po-textual">Running Times, with 1MB data file</textual></para></caption><thead class="po-container e220 e220"><tr class="po-table e221 e221" valign="top"><th class="po-field e222 e222"><textual class="po-textual">Query</textual></th><th class="po-field e223 e223"><textual class="po-textual">Saxon-HE</textual></th><th class="po-field e224 e224"><textual class="po-textual">Saxon-Bytecode</textual></th><th class="po-field e225 e225"><textual class="po-textual">Saxon-EE</textual></th><th class="po-field e226 e226"><textual class="po-textual">Saxon-EE-Bytecode</textual></th><th class="po-field e227 e227"><textual class="po-textual">Bytecode speedup (%)</textual></th></tr></thead><tbody class="po-table e228 e228"><tr class="po-table e229 e229"><td class="po-block e230 e230"><textual class="po-textual">q1</textual></td><td class="po-block e231 e231"><textual class="po-textual">0.363</textual></td><td class="po-block e232 e232"><textual class="po-textual">0.394</textual></td><td class="po-block e233 e233"><textual class="po-textual">0.095</textual></td><td class="po-block e234 e234"><emphasis class="po-inline e235 e235" role="bold"><textual class="po-textual">0.080</textual></emphasis></td><td class="po-block e236 e236"><textual class="po-textual">NEG</textual></td></tr><tr class="po-table e237 e237"><td class="po-block e238 e238"><textual class="po-textual">q2</textual></td><td class="po-block e239 e239"><textual class="po-textual">0.456</textual></td><td class="po-block e240 e240"><textual class="po-textual">0.452</textual></td><td class="po-block e241 e241"><textual class="po-textual">0.473</textual></td><td class="po-block e242 e242"><emphasis class="po-inline e243 e243" role="bold"><textual class="po-textual">0.432</textual></emphasis></td><td class="po-block e244 e244"><textual class="po-textual">9%</textual></td></tr><tr class="po-table e245 e245"><td class="po-block e246 e246"><textual class="po-textual">q3</textual></td><td class="po-block e247 e247"><textual class="po-textual">0.547</textual></td><td class="po-block e248 e248"><textual class="po-textual">0.450</textual></td><td class="po-block e249 e249"><textual class="po-textual">0.606</textual></td><td class="po-block e250 e250"><emphasis class="po-inline e251 e251" role="bold"><textual class="po-textual">0.416</textual></emphasis></td><td class="po-block e252 e252"><textual class="po-textual">31%</textual></td></tr><tr class="po-table e253 e253"><td class="po-block e254 e254"><textual class="po-textual">q4</textual></td><td class="po-block e255 e255"><textual class="po-textual">0.308</textual></td><td class="po-block e256 e256"><emphasis class="po-inline e257 e257" role="bold"><textual class="po-textual">0.296</textual></emphasis></td><td class="po-block e258 e258"><textual class="po-textual">0.443</textual></td><td class="po-block e259 e259"><textual class="po-textual">0.380</textual></td><td class="po-block e260 e260"><textual class="po-textual">14%</textual></td></tr><tr class="po-table e261 e261"><td class="po-block e262 e262"><textual class="po-textual">q5</textual></td><td class="po-block e263 e263"><textual class="po-textual">0.183</textual></td><td class="po-block e264 e264"><emphasis class="po-inline e265 e265" role="bold"><textual class="po-textual">0.127</textual></emphasis></td><td class="po-block e266 e266"><textual class="po-textual">0.176</textual></td><td class="po-block e267 e267"><textual class="po-textual">0.144</textual></td><td class="po-block e268 e268"><textual class="po-textual">18%</textual></td></tr><tr class="po-table e269 e269"><td class="po-block e270 e270"><textual class="po-textual">q6</textual></td><td class="po-block e271 e271"><textual class="po-textual">0.181</textual></td><td class="po-block e272 e272"><textual class="po-textual">0.208</textual></td><td class="po-block e273 e273"><textual class="po-textual">0.177</textual></td><td class="po-block e274 e274"><emphasis class="po-inline e275 e275" role="bold"><textual class="po-textual">0.166</textual></emphasis></td><td class="po-block e276 e276"><textual class="po-textual">6%</textual></td></tr><tr class="po-table e277 e277"><td class="po-block e278 e278"><textual class="po-textual">q7</textual></td><td class="po-block e279 e279"><textual class="po-textual">0.773</textual></td><td class="po-block e280 e280"><textual class="po-textual">0.717</textual></td><td class="po-block e281 e281"><textual class="po-textual">0.773</textual></td><td class="po-block e282 e282"><emphasis class="po-inline e283 e283" role="bold"><textual class="po-textual">0.626</textual></emphasis></td><td class="po-block e284 e284"><textual class="po-textual">19%</textual></td></tr><tr class="po-table e285 e285"><td class="po-block e286 e286"><textual class="po-textual">q8</textual></td><td class="po-block e287 e287"><textual class="po-textual">15.468</textual></td><td class="po-block e288 e288"><textual class="po-textual">12.630</textual></td><td class="po-block e289 e289"><textual class="po-textual">0.491</textual></td><td class="po-block e290 e290"><emphasis class="po-inline e291 e291" role="bold"><textual class="po-textual">0.458</textual></emphasis></td><td class="po-block e292 e292"><textual class="po-textual">7%</textual></td></tr><tr class="po-table e293 e293"><td class="po-block e294 e294"><textual class="po-textual">q9</textual></td><td class="po-block e295 e295"><textual class="po-textual">19.401</textual></td><td class="po-block e296 e296"><textual class="po-textual">15.833</textual></td><td class="po-block e297 e297"><textual class="po-textual">1.313</textual></td><td class="po-block e298 e298"><emphasis class="po-inline e299 e299" role="bold"><textual class="po-textual">1.058</textual></emphasis></td><td class="po-block e300 e300"><textual class="po-textual">19%</textual></td></tr><tr class="po-table e301 e301"><td class="po-block e302 e302"><textual class="po-textual">q10</textual></td><td class="po-block e303 e303"><textual class="po-textual">4.639</textual></td><td class="po-block e304 e304"><textual class="po-textual">4.128</textual></td><td class="po-block e305 e305"><textual class="po-textual">4.180</textual></td><td class="po-block e306 e306"><emphasis class="po-inline e307 e307" role="bold"><textual class="po-textual">2.329</textual></emphasis></td><td class="po-block e308 e308"><textual class="po-textual">44%</textual></td></tr><tr class="po-table e309 e309"><td class="po-block e310 e310"><textual class="po-textual">q11</textual></td><td class="po-block e311 e311"><textual class="po-textual">7.688</textual></td><td class="po-block e312 e312"><textual class="po-textual">5.984</textual></td><td class="po-block e313 e313"><textual class="po-textual">7.533</textual></td><td class="po-block e314 e314"><emphasis class="po-inline e315 e315" role="bold"><textual class="po-textual">4.957</textual></emphasis></td><td class="po-block e316 e316"><textual class="po-textual">34%</textual></td></tr><tr class="po-table e317 e317"><td class="po-block e318 e318"><textual class="po-textual">q12</textual></td><td class="po-block e319 e319"><textual class="po-textual">2.926</textual></td><td class="po-block e320 e320"><textual class="po-textual">2.226</textual></td><td class="po-block e321 e321"><textual class="po-textual">2.918</textual></td><td class="po-block e322 e322"><emphasis class="po-inline e323 e323" role="bold"><textual class="po-textual">1.812</textual></emphasis></td><td class="po-block e324 e324"><textual class="po-textual">38%</textual></td></tr><tr class="po-table e325 e325"><td class="po-block e326 e326"><textual class="po-textual">q13</textual></td><td class="po-block e327 e327"><textual class="po-textual">0.138</textual></td><td class="po-block e328 e328"><emphasis class="po-inline e329 e329" role="bold"><textual class="po-textual">0.137</textual></emphasis></td><td class="po-block e330 e330"><textual class="po-textual">0.146</textual></td><td class="po-block e331 e331"><textual class="po-textual">0.152</textual></td><td class="po-block e332 e332"><textual class="po-textual">-4%</textual></td></tr><tr class="po-table e333 e333"><td class="po-block e334 e334"><textual class="po-textual">q14</textual></td><td class="po-block e335 e335"><textual class="po-textual">1.740</textual></td><td class="po-block e336 e336"><textual class="po-textual">1.710</textual></td><td class="po-block e337 e337"><textual class="po-textual">1.698</textual></td><td class="po-block e338 e338"><emphasis class="po-inline e339 e339" role="bold"><textual class="po-textual">1.654</textual></emphasis></td><td class="po-block e340 e340"><textual class="po-textual">3%</textual></td></tr><tr class="po-table e341 e341"><td class="po-block e342 e342"><textual class="po-textual">q15</textual></td><td class="po-block e343 e343"><emphasis class="po-inline e344 e344" role="bold"><textual class="po-textual">0.108</textual></emphasis></td><td class="po-block e345 e345"><textual class="po-textual">0.149</textual></td><td class="po-block e346 e346"><textual class="po-textual">0.123</textual></td><td class="po-block e347 e347"><textual class="po-textual">0.170</textual></td><td class="po-block e348 e348"><textual class="po-textual">-39%</textual></td></tr><tr class="po-table e349 e349"><td class="po-block e350 e350"><textual class="po-textual">q16</textual></td><td class="po-block e351 e351"><textual class="po-textual">0.162</textual></td><td class="po-block e352 e352"><emphasis class="po-inline e353 e353" role="bold"><textual class="po-textual">0.161</textual></emphasis></td><td class="po-block e354 e354"><textual class="po-textual">0.262</textual></td><td class="po-block e355 e355"><textual class="po-textual">0.274</textual></td><td class="po-block e356 e356"><textual class="po-textual">-5%</textual></td></tr><tr class="po-table e357 e357"><td class="po-block e358 e358"><textual class="po-textual">q17</textual></td><td class="po-block e359 e359"><textual class="po-textual">0.175</textual></td><td class="po-block e360 e360"><textual class="po-textual">0.140</textual></td><td class="po-block e361 e361"><textual class="po-textual">0.176</textual></td><td class="po-block e362 e362"><emphasis class="po-inline e363 e363" role="bold"><textual class="po-textual">0.160</textual></emphasis></td><td class="po-block e364 e364"><textual class="po-textual">9%</textual></td></tr><tr class="po-table e365 e365"><td class="po-block e366 e366"><textual class="po-textual">q18</textual></td><td class="po-block e367 e367"><textual class="po-textual">0.343</textual></td><td class="po-block e368 e368"><textual class="po-textual">0.303</textual></td><td class="po-block e369 e369"><textual class="po-textual">0.231</textual></td><td class="po-block e370 e370"><emphasis class="po-inline e371 e371" role="bold"><textual class="po-textual">0.219</textual></emphasis></td><td class="po-block e372 e372"><textual class="po-textual">5%</textual></td></tr><tr class="po-table e373 e373"><td class="po-block e374 e374"><textual class="po-textual">q19</textual></td><td class="po-block e375 e375"><textual class="po-textual">1.774</textual></td><td class="po-block e376 e376"><textual class="po-textual">1.549</textual></td><td class="po-block e377 e377"><textual class="po-textual">1.633</textual></td><td class="po-block e378 e378"><emphasis class="po-inline e379 e379" role="bold"><textual class="po-textual">1.483</textual></emphasis></td><td class="po-block e380 e380"><textual class="po-textual">9%</textual></td></tr><tr class="po-table e381 e381"><td class="po-block e382 e382"><textual class="po-textual">q20</textual></td><td class="po-block e383 e383"><emphasis class="po-inline e384 e384" role="bold"><textual class="po-textual">0.371</textual></emphasis></td><td class="po-block e385 e385"><textual class="po-textual">0.403</textual></td><td class="po-block e386 e386"><textual class="po-textual">0.454</textual></td><td class="po-block e387 e387"><textual class="po-textual">0.452</textual></td><td class="po-block e388 e388"><textual class="po-textual">NEG</textual></td></tr></tbody></table><textual class="po-textual">
            </textual><table border="border" cellpadding="10" class="po-container e389 e389" xml:id="Table2"><caption class="po-container e390 e390"><para class="po-block e391 e391"><textual class="po-textual">Running Times, with 4MB data file</textual></para></caption><thead class="po-container e392 e392"><tr class="po-table e393 e393"><th class="po-field e394 e394"><textual class="po-textual">Query</textual></th><th class="po-field e395 e395"><textual class="po-textual">Saxon-HE</textual></th><th class="po-field e396 e396"><textual class="po-textual">Saxon-Bytecode</textual></th><th class="po-field e397 e397"><textual class="po-textual">Saxon-EE</textual></th><th class="po-field e398 e398"><textual class="po-textual">Saxon-EE-Bytecode</textual></th><th class="po-field e399 e399"><textual class="po-textual">Bytecode speedup (%)</textual></th></tr></thead><tbody class="po-table e400 e400"><tr class="po-table e401 e401"><td class="po-block e402 e402"><textual class="po-textual">q1</textual></td><td class="po-block e403 e403"><textual class="po-textual">0.210</textual></td><td class="po-block e404 e404"><textual class="po-textual">0.209</textual></td><td class="po-block e405 e405"><emphasis class="po-inline e406 e406" role="bold"><textual class="po-textual">0.011</textual></emphasis></td><td class="po-block e407 e407"><textual class="po-textual">0.012</textual></td><td class="po-block e408 e408"><textual class="po-textual">-7%</textual></td></tr><tr class="po-table e409 e409"><td class="po-block e410 e410"><textual class="po-textual">q2</textual></td><td class="po-block e411 e411"><textual class="po-textual">0.408</textual></td><td class="po-block e412 e412"><emphasis class="po-inline e413 e413" role="bold"><textual class="po-textual">0.329</textual></emphasis></td><td class="po-block e414 e414"><textual class="po-textual">0.416</textual></td><td class="po-block e415 e415"><textual class="po-textual">0.417</textual></td><td class="po-block e416 e416"><textual class="po-textual">NEG</textual></td></tr><tr class="po-table e417 e417"><td class="po-block e418 e418"><textual class="po-textual">q3</textual></td><td class="po-block e419 e419"><textual class="po-textual">1.143</textual></td><td class="po-block e420 e420"><emphasis class="po-inline e421 e421" role="bold"><textual class="po-textual">0.845</textual></emphasis></td><td class="po-block e422 e422"><textual class="po-textual">1.238</textual></td><td class="po-block e423 e423"><textual class="po-textual">0.962</textual></td><td class="po-block e424 e424"><textual class="po-textual">22%</textual></td></tr><tr class="po-table e425 e425"><td class="po-block e426 e426"><textual class="po-textual">q4</textual></td><td class="po-block e427 e427"><textual class="po-textual">1.005</textual></td><td class="po-block e428 e428"><textual class="po-textual">0.926</textual></td><td class="po-block e429 e429"><textual class="po-textual">1.257</textual></td><td class="po-block e430 e430"><emphasis class="po-inline e431 e431" role="bold"><textual class="po-textual">0.922</textual></emphasis></td><td class="po-block e432 e432"><textual class="po-textual">27%</textual></td></tr><tr class="po-table e433 e433"><td class="po-block e434 e434"><textual class="po-textual">q5</textual></td><td class="po-block e435 e435"><textual class="po-textual">0.418</textual></td><td class="po-block e436 e436"><emphasis class="po-inline e437 e437" role="bold"><textual class="po-textual">0.268</textual></emphasis></td><td class="po-block e438 e438"><textual class="po-textual">0.428</textual></td><td class="po-block e439 e439"><textual class="po-textual">0.305</textual></td><td class="po-block e440 e440"><textual class="po-textual">29%</textual></td></tr><tr class="po-table e441 e441"><td class="po-block e442 e442"><textual class="po-textual">q6</textual></td><td class="po-block e443 e443"><textual class="po-textual">0.371</textual></td><td class="po-block e444 e444"><textual class="po-textual">0.362</textual></td><td class="po-block e445 e445"><textual class="po-textual">0.369</textual></td><td class="po-block e446 e446"><emphasis class="po-inline e447 e447" role="bold"><textual class="po-textual">0.306</textual></emphasis></td><td class="po-block e448 e448"><textual class="po-textual">17%</textual></td></tr><tr class="po-table e449 e449"><td class="po-block e450 e450"><textual class="po-textual">q7</textual></td><td class="po-block e451 e451"><textual class="po-textual">2.930</textual></td><td class="po-block e452 e452"><textual class="po-textual">2.908</textual></td><td class="po-block e453 e453"><textual class="po-textual">2.941</textual></td><td class="po-block e454 e454"><emphasis class="po-inline e455 e455" role="bold"><textual class="po-textual">2.354</textual></emphasis></td><td class="po-block e456 e456"><textual class="po-textual">20%</textual></td></tr><tr class="po-table e457 e457"><td class="po-block e458 e458"><textual class="po-textual">q8</textual></td><td class="po-block e459 e459"><textual class="po-textual">293.398</textual></td><td class="po-block e460 e460"><textual class="po-textual">207.416</textual></td><td class="po-block e461 e461"><textual class="po-textual">1.605</textual></td><td class="po-block e462 e462"><emphasis class="po-inline e463 e463" role="bold"><textual class="po-textual">1.107</textual></emphasis></td><td class="po-block e464 e464"><textual class="po-textual">31%</textual></td></tr><tr class="po-table e465 e465"><td class="po-block e466 e466"><textual class="po-textual">q9</textual></td><td class="po-block e467 e467"><textual class="po-textual">333.601</textual></td><td class="po-block e468 e468"><textual class="po-textual">257.565</textual></td><td class="po-block e469 e469"><textual class="po-textual">2.992</textual></td><td class="po-block e470 e470"><emphasis class="po-inline e471 e471" role="bold"><textual class="po-textual">2.750</textual></emphasis></td><td class="po-block e472 e472"><textual class="po-textual">8%</textual></td></tr><tr class="po-table e473 e473"><td class="po-block e474 e474"><textual class="po-textual">q10</textual></td><td class="po-block e475 e475"><textual class="po-textual">52.349</textual></td><td class="po-block e476 e476"><textual class="po-textual">41.815</textual></td><td class="po-block e477 e477"><textual class="po-textual">19.142</textual></td><td class="po-block e478 e478"><emphasis class="po-inline e479 e479" role="bold"><textual class="po-textual">9.514</textual></emphasis></td><td class="po-block e480 e480"><textual class="po-textual">50%</textual></td></tr><tr class="po-table e481 e481"><td class="po-block e482 e482"><textual class="po-textual">q11</textual></td><td class="po-block e483 e483"><textual class="po-textual">119.141</textual></td><td class="po-block e484 e484"><textual class="po-textual">90.013</textual></td><td class="po-block e485 e485"><textual class="po-textual">118.535</textual></td><td class="po-block e486 e486"><emphasis class="po-inline e487 e487" role="bold"><textual class="po-textual">71.100</textual></emphasis></td><td class="po-block e488 e488"><textual class="po-textual">39%</textual></td></tr><tr class="po-table e489 e489"><td class="po-block e490 e490"><textual class="po-textual">q12</textual></td><td class="po-block e491 e491"><textual class="po-textual">37.280</textual></td><td class="po-block e492 e492"><textual class="po-textual">26.328</textual></td><td class="po-block e493 e493"><textual class="po-textual">37.029</textual></td><td class="po-block e494 e494"><emphasis class="po-inline e495 e495" role="bold"><textual class="po-textual">20.050</textual></emphasis></td><td class="po-block e496 e496"><textual class="po-textual">46%</textual></td></tr><tr class="po-table e497 e497"><td class="po-block e498 e498"><textual class="po-textual">q13</textual></td><td class="po-block e499 e499"><textual class="po-textual">0.254</textual></td><td class="po-block e500 e500"><emphasis class="po-inline e501 e501" role="bold"><textual class="po-textual">0.216</textual></emphasis></td><td class="po-block e502 e502"><textual class="po-textual">0.262</textual></td><td class="po-block e503 e503"><textual class="po-textual">0.261</textual></td><td class="po-block e504 e504"><textual class="po-textual">NEG</textual></td></tr><tr class="po-table e505 e505"><td class="po-block e506 e506"><textual class="po-textual">q14</textual></td><td class="po-block e507 e507"><textual class="po-textual">6.531</textual></td><td class="po-block e508 e508"><textual class="po-textual">6.181</textual></td><td class="po-block e509 e509"><textual class="po-textual">6.489</textual></td><td class="po-block e510 e510"><emphasis class="po-inline e511 e511" role="bold"><textual class="po-textual">6.011</textual></emphasis></td><td class="po-block e512 e512"><textual class="po-textual">7%</textual></td></tr><tr class="po-table e513 e513"><td class="po-block e514 e514"><textual class="po-textual">q15</textual></td><td class="po-block e515 e515"><textual class="po-textual">0.325</textual></td><td class="po-block e516 e516"><emphasis class="po-inline e517 e517" role="bold"><textual class="po-textual">0.294</textual></emphasis></td><td class="po-block e518 e518"><textual class="po-textual">0.382</textual></td><td class="po-block e519 e519"><textual class="po-textual">0.434</textual></td><td class="po-block e520 e520"><textual class="po-textual">-14%</textual></td></tr><tr class="po-table e521 e521"><td class="po-block e522 e522"><textual class="po-textual">q16</textual></td><td class="po-block e523 e523"><textual class="po-textual">0.536</textual></td><td class="po-block e524 e524"><emphasis class="po-inline e525 e525" role="bold"><textual class="po-textual">0.453</textual></emphasis></td><td class="po-block e526 e526"><textual class="po-textual">0.597</textual></td><td class="po-block e527 e527"><textual class="po-textual">0.627</textual></td><td class="po-block e528 e528"><textual class="po-textual">-5%</textual></td></tr><tr class="po-table e529 e529"><td class="po-block e530 e530"><textual class="po-textual">q17</textual></td><td class="po-block e531 e531"><textual class="po-textual">0.632</textual></td><td class="po-block e532 e532"><emphasis class="po-inline e533 e533" role="bold"><textual class="po-textual">0.501</textual></emphasis></td><td class="po-block e534 e534"><textual class="po-textual">0.700</textual></td><td class="po-block e535 e535"><textual class="po-textual">0.537</textual></td><td class="po-block e536 e536"><textual class="po-textual">23%</textual></td></tr><tr class="po-table e537 e537"><td class="po-block e538 e538"><textual class="po-textual">q18</textual></td><td class="po-block e539 e539"><textual class="po-textual">0.692</textual></td><td class="po-block e540 e540"><textual class="po-textual">0.601</textual></td><td class="po-block e541 e541"><textual class="po-textual">0.577</textual></td><td class="po-block e542 e542"><emphasis class="po-inline e543 e543" role="bold"><textual class="po-textual">0.517</textual></emphasis></td><td class="po-block e544 e544"><textual class="po-textual">10%</textual></td></tr><tr class="po-table e545 e545"><td class="po-block e546 e546"><textual class="po-textual">q19</textual></td><td class="po-block e547 e547"><textual class="po-textual">4.613</textual></td><td class="po-block e548 e548"><textual class="po-textual">4.164</textual></td><td class="po-block e549 e549"><textual class="po-textual">4.517</textual></td><td class="po-block e550 e550"><emphasis class="po-inline e551 e551" role="bold"><textual class="po-textual">3.638</textual></emphasis></td><td class="po-block e552 e552"><textual class="po-textual">19%</textual></td></tr><tr class="po-table e553 e553"><td class="po-block e554 e554"><textual class="po-textual">q20</textual></td><td class="po-block e555 e555"><textual class="po-textual">1.428</textual></td><td class="po-block e556 e556"><emphasis class="po-inline e557 e557" role="bold"><textual class="po-textual">1.397</textual></emphasis></td><td class="po-block e558 e558"><textual class="po-textual">1.689</textual></td><td class="po-block e559 e559"><textual class="po-textual">1.449</textual></td><td class="po-block e560 e560"><textual class="po-textual">14%</textual></td></tr></tbody></table><textual class="po-textual">
            </textual><table border="border" cellpadding="10" class="po-container e561 e561" xml:id="Table3"><caption class="po-container e562 e562"><para class="po-block e563 e563"><textual class="po-textual">Running Times, with 10MB data file</textual></para></caption><thead class="po-container e564 e564"><tr class="po-table e565 e565"><th class="po-field e566 e566"><textual class="po-textual">Query</textual></th><th class="po-field e567 e567"><textual class="po-textual">Saxon-HE</textual></th><th class="po-field e568 e568"><textual class="po-textual">Saxon-Bytecode</textual></th><th class="po-field e569 e569"><textual class="po-textual">Saxon-EE</textual></th><th class="po-field e570 e570"><textual class="po-textual">Saxon-EE-Bytecode</textual></th><th class="po-field e571 e571"><textual class="po-textual">Bytecode speedup (%)</textual></th></tr></thead><tbody class="po-table e572 e572"><tr class="po-table e573 e573"><td class="po-block e574 e574"><textual class="po-textual">q1</textual></td><td class="po-block e575 e575"><textual class="po-textual">0.597</textual></td><td class="po-block e576 e576"><textual class="po-textual">0.519</textual></td><td class="po-block e577 e577"><emphasis class="po-inline e578 e578" role="bold"><textual class="po-textual">0.010</textual></emphasis></td><td class="po-block e579 e579"><textual class="po-textual">0.015</textual></td><td class="po-block e580 e580"><textual class="po-textual">NEG</textual></td></tr><tr class="po-table e581 e581"><td class="po-block e582 e582"><textual class="po-textual">q2</textual></td><td class="po-block e583 e583"><textual class="po-textual">1.067</textual></td><td class="po-block e584 e584"><emphasis class="po-inline e585 e585" role="bold"><textual class="po-textual">0.820</textual></emphasis></td><td class="po-block e586 e586"><textual class="po-textual">1.130</textual></td><td class="po-block e587 e587"><textual class="po-textual">0.880</textual></td><td class="po-block e588 e588"><textual class="po-textual">22%</textual></td></tr><tr class="po-table e589 e589"><td class="po-block e590 e590"><textual class="po-textual">q3</textual></td><td class="po-block e591 e591"><textual class="po-textual">3.415</textual></td><td class="po-block e592 e592"><emphasis class="po-inline e593 e593" role="bold"><textual class="po-textual">2.505</textual></emphasis></td><td class="po-block e594 e594"><textual class="po-textual">3.63</textual></td><td class="po-block e595 e595"><textual class="po-textual">2.54</textual></td><td class="po-block e596 e596"><textual class="po-textual">30%</textual></td></tr><tr class="po-table e597 e597"><td class="po-block e598 e598"><textual class="po-textual">q4</textual></td><td class="po-block e599 e599"><textual class="po-textual">2.8824</textual></td><td class="po-block e600 e600"><textual class="po-textual">2.5606</textual></td><td class="po-block e601 e601"><textual class="po-textual">3.66</textual></td><td class="po-block e602 e602"><emphasis class="po-inline e603 e603" role="bold"><textual class="po-textual">2.43</textual></emphasis></td><td class="po-block e604 e604"><textual class="po-textual">34%</textual></td></tr><tr class="po-table e605 e605"><td class="po-block e606 e606"><textual class="po-textual">q5</textual></td><td class="po-block e607 e607"><textual class="po-textual">1.0686</textual></td><td class="po-block e608 e608"><emphasis class="po-inline e609 e609" role="bold"><textual class="po-textual">0.6742</textual></emphasis></td><td class="po-block e610 e610"><textual class="po-textual">1.08</textual></td><td class="po-block e611 e611"><textual class="po-textual">0.76</textual></td><td class="po-block e612 e612"><textual class="po-textual">30%</textual></td></tr><tr class="po-table e613 e613"><td class="po-block e614 e614"><textual class="po-textual">q6</textual></td><td class="po-block e615 e615"><textual class="po-textual">0.9080</textual></td><td class="po-block e616 e616"><textual class="po-textual">0.8893</textual></td><td class="po-block e617 e617"><textual class="po-textual">0.90</textual></td><td class="po-block e618 e618"><emphasis class="po-inline e619 e619" role="bold"><textual class="po-textual">0.76</textual></emphasis></td><td class="po-block e620 e620"><textual class="po-textual">16%</textual></td></tr><tr class="po-table e621 e621"><td class="po-block e622 e622"><textual class="po-textual">q7</textual></td><td class="po-block e623 e623"><textual class="po-textual">7.487</textual></td><td class="po-block e624 e624"><textual class="po-textual">7.403</textual></td><td class="po-block e625 e625"><textual class="po-textual">7.55</textual></td><td class="po-block e626 e626"><emphasis class="po-inline e627 e627" role="bold"><textual class="po-textual">6.03</textual></emphasis></td><td class="po-block e628 e628"><textual class="po-textual">20%</textual></td></tr><tr class="po-table e629 e629"><td class="po-block e630 e630"><textual class="po-textual">q8</textual></td><td class="po-block e631 e631"><textual class="po-textual">1725.13</textual></td><td class="po-block e632 e632"><textual class="po-textual">1295.78</textual></td><td class="po-block e633 e633"><textual class="po-textual">5.00</textual></td><td class="po-block e634 e634"><emphasis class="po-inline e635 e635" role="bold"><textual class="po-textual">3.26</textual></emphasis></td><td class="po-block e636 e636"><textual class="po-textual">35%</textual></td></tr><tr class="po-table e637 e637"><td class="po-block e638 e638"><textual class="po-textual">q9</textual></td><td class="po-block e639 e639"><textual class="po-textual">2081.03</textual></td><td class="po-block e640 e640"><textual class="po-textual">1534.66</textual></td><td class="po-block e641 e641"><textual class="po-textual">10.1</textual></td><td class="po-block e642 e642"><emphasis class="po-inline e643 e643" role="bold"><textual class="po-textual">8.168</textual></emphasis></td><td class="po-block e644 e644"><textual class="po-textual">19%</textual></td></tr><tr class="po-table e645 e645"><td class="po-block e646 e646"><textual class="po-textual">q10</textual></td><td class="po-block e647 e647"><textual class="po-textual">325.35</textual></td><td class="po-block e648 e648"><textual class="po-textual">276.57</textual></td><td class="po-block e649 e649"><textual class="po-textual">49.74</textual></td><td class="po-block e650 e650"><emphasis class="po-inline e651 e651" role="bold"><textual class="po-textual">25.16</textual></emphasis></td><td class="po-block e652 e652"><textual class="po-textual">49%</textual></td></tr><tr class="po-table e653 e653"><td class="po-block e654 e654"><textual class="po-textual">q11</textual></td><td class="po-block e655 e655"><textual class="po-textual">701.79</textual></td><td class="po-block e656 e656"><textual class="po-textual">539.59</textual></td><td class="po-block e657 e657"><textual class="po-textual">708.45</textual></td><td class="po-block e658 e658"><emphasis class="po-inline e659 e659" role="bold"><textual class="po-textual">421.38</textual></emphasis></td><td class="po-block e660 e660"><textual class="po-textual">41%</textual></td></tr><tr class="po-table e661 e661"><td class="po-block e662 e662"><textual class="po-textual">q12</textual></td><td class="po-block e663 e663"><textual class="po-textual">228.34</textual></td><td class="po-block e664 e664"><textual class="po-textual">162.37</textual></td><td class="po-block e665 e665"><textual class="po-textual">228.38</textual></td><td class="po-block e666 e666"><emphasis class="po-inline e667 e667" role="bold"><textual class="po-textual">124.48</textual></emphasis></td><td class="po-block e668 e668"><textual class="po-textual">45%</textual></td></tr><tr class="po-table e669 e669"><td class="po-block e670 e670"><textual class="po-textual">q13</textual></td><td class="po-block e671 e671"><textual class="po-textual">0.66</textual></td><td class="po-block e672 e672"><emphasis class="po-inline e673 e673" role="bold"><textual class="po-textual">0.58</textual></emphasis></td><td class="po-block e674 e674"><textual class="po-textual">0.70</textual></td><td class="po-block e675 e675"><textual class="po-textual">0.59</textual></td><td class="po-block e676 e676"><textual class="po-textual">16%</textual></td></tr><tr class="po-table e677 e677"><td class="po-block e678 e678"><textual class="po-textual">q14</textual></td><td class="po-block e679 e679"><textual class="po-textual">15.57</textual></td><td class="po-block e680 e680"><textual class="po-textual">15.23</textual></td><td class="po-block e681 e681"><textual class="po-textual">16.03</textual></td><td class="po-block e682 e682"><emphasis class="po-inline e683 e683" role="bold"><textual class="po-textual">14.73</textual></emphasis></td><td class="po-block e684 e684"><textual class="po-textual">8%</textual></td></tr><tr class="po-table e685 e685"><td class="po-block e686 e686"><textual class="po-textual">q15</textual></td><td class="po-block e687 e687"><textual class="po-textual">0.77</textual></td><td class="po-block e688 e688"><emphasis class="po-inline e689 e689" role="bold"><textual class="po-textual">0.72</textual></emphasis></td><td class="po-block e690 e690"><textual class="po-textual">0.94</textual></td><td class="po-block e691 e691"><textual class="po-textual">1.05</textual></td><td class="po-block e692 e692"><textual class="po-textual">-12%</textual></td></tr><tr class="po-table e693 e693"><td class="po-block e694 e694"><textual class="po-textual">q16</textual></td><td class="po-block e695 e695"><textual class="po-textual">1.28</textual></td><td class="po-block e696 e696"><emphasis class="po-inline e697 e697" role="bold"><textual class="po-textual">1.11</textual></emphasis></td><td class="po-block e698 e698"><textual class="po-textual">1.50</textual></td><td class="po-block e699 e699"><textual class="po-textual">1.39</textual></td><td class="po-block e700 e700"><textual class="po-textual">7%</textual></td></tr><tr class="po-table e701 e701"><td class="po-block e702 e702"><textual class="po-textual">q17</textual></td><td class="po-block e703 e703"><textual class="po-textual">1.59</textual></td><td class="po-block e704 e704"><emphasis class="po-inline e705 e705" role="bold"><textual class="po-textual">1.26</textual></emphasis></td><td class="po-block e706 e706"><textual class="po-textual">1.77</textual></td><td class="po-block e707 e707"><textual class="po-textual">1.27</textual></td><td class="po-block e708 e708"><textual class="po-textual">28%</textual></td></tr><tr class="po-table e709 e709"><td class="po-block e710 e710"><textual class="po-textual">q18</textual></td><td class="po-block e711 e711"><textual class="po-textual">1.86</textual></td><td class="po-block e712 e712"><textual class="po-textual">1.62</textual></td><td class="po-block e713 e713"><textual class="po-textual">1.57</textual></td><td class="po-block e714 e714"><emphasis class="po-inline e715 e715" role="bold"><textual class="po-textual">1.29</textual></emphasis></td><td class="po-block e716 e716"><textual class="po-textual">18%</textual></td></tr><tr class="po-table e717 e717"><td class="po-block e718 e718"><textual class="po-textual">q19</textual></td><td class="po-block e719 e719"><textual class="po-textual">12.85</textual></td><td class="po-block e720 e720"><textual class="po-textual">12.12</textual></td><td class="po-block e721 e721"><textual class="po-textual">12.64</textual></td><td class="po-block e722 e722"><emphasis class="po-inline e723 e723" role="bold"><textual class="po-textual">10.90</textual></emphasis></td><td class="po-block e724 e724"><textual class="po-textual">14%</textual></td></tr><tr class="po-table e725 e725"><td class="po-block e726 e726"><textual class="po-textual">q20</textual></td><td class="po-block e727 e727"><textual class="po-textual">5.32</textual></td><td class="po-block e728 e728"><emphasis class="po-inline e729 e729" role="bold"><textual class="po-textual">3.64</textual></emphasis></td><td class="po-block e730 e730"><textual class="po-textual">5.92</textual></td><td class="po-block e731 e731"><textual class="po-textual">3.74</textual></td><td class="po-block e732 e732"><textual class="po-textual">37%</textual></td></tr></tbody></table><textual class="po-textual">
        </textual></para></appendix><bibliography class="po-hcontainer e733 e733"><title class="po-block e734 e734"><textual class="po-textual">References</textual></title><bibliomixed class="po-block e735 e735" xml:id="Bruneton2002" xreflabel="Bruneton2002"><textual class="po-textual">E. Bruneton et al. ASM: A code
            manipulation tool to implement adaptable systems. In Proceedings </textual><emphasis class="po-inline e736 e736"><textual class="po-textual">Adaptable and
                extensible component systems</textual></emphasis><textual class="po-textual">, November 2002, Grenoble, France. </textual><link class="po-inline e737 e737" xlink:actuate="onRequest" xlink:href="http://asm.ow2.org/current/asm-eng.pdf" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://asm.ow2.org/current/asm-eng.pdf</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e738 e738" xml:id="Dahm1999" xreflabel="Dahm1999"><textual class="po-textual">Dahmm, Markus. Byte Code Engineering.
            1999. doi: </textual><biblioid class="po-atom e739 doi e739"><textual class="po-textual">10.1.1.103.8299</textual></biblioid><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e740 e740" xml:id="DataPower" xreflabel="DataPower"><textual class="po-textual">WebSphere DataPower SOA Appliances.
            </textual><link class="po-inline e741 e741" xlink:actuate="onRequest" xlink:href="http://www-01.ibm.com/software/integration/datapower/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www-01.ibm.com/software/integration/datapower/</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e742 e742" xml:id="Kay1999" xreflabel="Kay1999"><textual class="po-textual">Kay, Michael. SAXON 4.2 - An XSL Compiler.
            23 April 1999. </textual><link class="po-inline e743 e743" xlink:actuate="onRequest" xlink:href="http://xml.coverpages.org/saxon42Ann.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://xml.coverpages.org/saxon42Ann.html</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e744 e744" xml:id="Kay2005" xreflabel="Kay2005"><textual class="po-textual">Kay, Michael. Saxon: Anatomy of an XSLT
            processor. April 2005. </textual><link class="po-inline e745 e745" xlink:actuate="onRequest" xlink:href="http://www.ibm.com/developerworks/library/x-xslt2/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.ibm.com/developerworks/library/x-xslt2/</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e746 e746" xml:id="Kay2006a" xreflabel="Kay2006a"><textual class="po-textual">Kay, Michael. Experiments with
            Compilation, 24 July 2006. </textual><link class="po-inline e747 e747" xlink:actuate="onRequest" xlink:href="http://saxonica.blogharbor.com/blog/archives/2006/7/24/2157486.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://saxonica.blogharbor.com/blog/archives/2006/7/24/2157486.html</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e748 e748" xml:id="Kay2006b" xreflabel="Kay2006b"><textual class="po-textual">Kay, Michael. Optimization in XSLT and
            XQuery. In Proceeding </textual><emphasis class="po-inline e749 e749"><textual class="po-textual">XMLPrague 2006&gt;</textual></emphasis><textual class="po-textual">, June 2006, Prague, Czech
            Republic. </textual><link class="po-inline e750 e750" xlink:actuate="onRequest" xlink:href="http://www.xmlprague.cz/2006/images/xmlprague2006.pdf" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.xmlprague.cz/2006/images/xmlprague2006.pdf</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e751 e751" xml:id="Kay2006c" xreflabel="Kay2006c"><textual class="po-textual">Kay, Michael. First compiled XMark
            results. 6 November 2006. </textual><link class="po-inline e752 e752" xlink:actuate="onRequest" xlink:href="http://saxonica.blogharbor.com/blog/_archives/2006/11/6/2477675.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://saxonica.blogharbor.com/blog/_archives/2006/11/6/2477675.html</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e753 e753" xml:id="Kay2007" xreflabel="Kay2007"><textual class="po-textual">Kay, Michael. Writing an XSLT Optimizer in
            XSLT. In Proceeding </textual><emphasis class="po-inline e754 e754"><textual class="po-textual">Extreme Markup Languages 2007</textual></emphasis><textual class="po-textual">, 2007, Montreal,
            Canada. </textual><link class="po-inline e755 e755" xlink:actuate="onRequest" xlink:href="http://conferences.idealliance.org/extreme/html/2007/Kay01/EML2007Kay01.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://conferences.idealliance.org/extreme/html/2007/Kay01/EML2007Kay01.html</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e756 e756" xml:id="Kay2008" xreflabel="Kay2008"><textual class="po-textual">Kay, Michael. Ten Reasons Why Saxon XQuery
            is Fast. In the </textual><emphasis class="po-inline e757 e757"><textual class="po-textual">IEEE Data Engineering Bulletin</textual></emphasis><textual class="po-textual">, December 2008.
            </textual><link class="po-inline e758 e758" xlink:actuate="onRequest" xlink:href="http://sites.computer.org/debull/A08dec/saxonica.pdf" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://sites.computer.org/debull/A08dec/saxonica.pdf</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e759 e759" xml:id="Kay2009" xreflabel="Kay2009"><textual class="po-textual">Kay, Michael. You Pull, Iâll Push: on the
            Polarity of Pipelines </textual><emphasis class="po-inline e760 e760"><textual class="po-textual">Balisage: The Markup Conference 2009</textual></emphasis><textual class="po-textual">, Aug
            11-14, 2009, MontrÃ©al, Canada. doi:</textual><biblioid class="po-atom e761 doi e761"><textual class="po-textual">10.4242/BalisageVol3.Kay01</textual></biblioid><textual class="po-textual">. </textual><link class="po-inline e762 e762" xlink:actuate="onRequest" xlink:href="http://www.balisage.net/Proceedings/vol3/html/Kay01/BalisageVol3-Kay01.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.balisage.net/Proceedings/vol3/html/Kay01/BalisageVol3-Kay01.html</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e763 e763" xml:id="Kay2010" xreflabel="Kay2010"><textual class="po-textual">Kay, Michael. A Streaming XSLT Processor.
            In Proceeding Balisage: The Markup Conference 2010, August 3-6, 2010. Montreal, Canada.
            doi: </textual><biblioid class="po-atom e764 doi e764"><textual class="po-textual">10.4242/BalisageVol5.Kay01</textual></biblioid><textual class="po-textual">. </textual><link class="po-inline e765 e765" xlink:actuate="onRequest" xlink:href="http://www.balisage.net/Proceedings/vol5/html/Kay01/BalisageVol5-Kay01.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.balisage.net/Proceedings/vol5/html/Kay01/BalisageVol5-Kay01.html</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e766 e766" xml:id="Snelson2011" xreflabel="Snelson2011"><textual class="po-textual">Snelson, John. Declarative XQuery
            Rewrites for Profit or Pleasure. An optimization meta language for implementers and
            users alike. In Proceeding </textual><emphasis class="po-inline e767 e767"><textual class="po-textual">XMLPrague 2011</textual></emphasis><textual class="po-textual">, March 2011, Prague,
            Czech Republic. </textual><link class="po-inline e768 e768" xlink:actuate="onRequest" xlink:href="http://www.xmlprague.cz/2011/files/xmlprague-2011-proceedings.pdf" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.xmlprague.cz/2011/files/xmlprague-2011-proceedings.pdf</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e769 e769" xml:id="XMark" xreflabel="XMark"><textual class="po-textual">XMark - XML Benchmark Project. </textual><link class="po-inline e770 e770" xlink:actuate="onRequest" xlink:href="http://www.xml-benchmark.org/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.xml-benchmark.org/</textual></link><textual class="po-textual">
        </textual></bibliomixed><bibliomixed class="po-block e771 e771" xml:id="XSLTC" xreflabel="XSLTC"><textual class="po-textual">XSLTC, a part of Xalan-J. </textual><emphasis class="po-inline e772 e772"><textual class="po-textual">The Apache
            XML Project</textual></emphasis><textual class="po-textual">. </textual><link class="po-inline e773 e773" xlink:actuate="onRequest" xlink:href="http://xml.apache.org/xalan-j/xsltc/index.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://xml.apache.org/xalan-j/xsltc/index.html</textual></link><textual class="po-textual">
        </textual></bibliomixed></bibliography></article></classedDocument>