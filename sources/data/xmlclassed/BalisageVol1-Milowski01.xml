<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.2"><title class="po-block e1 e1"><textual class="po-textual">Using Atom Categorization to Build Dynamic Applications</textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">Balisage: The Markup Conference 2008</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 12 - 15, 2008</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual">Atom feeds provide the ability to categorize both the feed and its
      entries. This categorization provides a simple and easy way for feed authors
      to associated terms and semantics to their feed contents. By using this
      categorization, authors can keep their information organized while
      re-purposing them to build dynamic web applications.</textual></para></abstract><author class="po-record e8 e8"><personname class="po-record e9 e9"><firstname class="po-field e10 e10"><textual class="po-textual">R.</textual></firstname><othername class="po-field e11 e11"><textual class="po-textual">Alexander</textual></othername><surname class="po-field e12 e12"><textual class="po-textual">Milowski</textual></surname></personname><personblurb class="po-container e13 e13"><para class="po-block e14 e14"><textual class="po-textual">A long-time markup and web geek.</textual></para></personblurb><affiliation class="po-record e15 e15"><orgname class="po-block e16 e16"><textual class="po-textual">Appolux, Inc.</textual></orgname></affiliation><email class="po-field e17 e17"><textual class="po-textual">alex@milowski.com</textual></email></author><legalnotice class="po-container e18 e18"><para class="po-block e19 e19"><textual class="po-textual">Copyright Â© 2008 R. Alexander Milowski</textual></para></legalnotice></info><section class="po-hcontainer e20 e20"><title class="po-block e21 e21"><textual class="po-textual">Lists, Stacks, and Piles</textual></title><para class="po-block e22 e22"><textual class="po-textual">If you could see my desk at home or my office, you'd probably find
    it a horrific disorganized disaster with post-it notes on the desktop and
    monitor, stacks of papers and other items, and giant pile at one end. On
    the other hand, I see it as disorganized ordered mess. I know where to
    find what I need and there is a system of lists, stacks, and piles.</textual></para><para class="po-block e23 e23"><textual class="po-textual">The post-it notes contain lists of things I need to do, information
    from "recent queries", reminders on one sort or another, and they are all
    ordered and carefully placed on my desk as to their importance. In
    relation to these lists, I have stacks of bills, papers, and other urgent items
    that need to be filed, where each stack has its purpose
    or category. Finally, I have giant pile of things that were
    formally in stacks. For some reason or another, they've expired but need
    to be filed. Someday I'll get around to that filing and make that giant
    pile not so giant anymore.</textual></para><para class="po-block e24 e24"><textual class="po-textual">It shouldn't surprise you to find that my computers are similarly
    organized. It is easy to recognize the stacks of documents shuttered into
    folders by their relationship to each other or my stacks of photos or
    videos from my camera. My desktop has become a giant "pile of things
    downloaded" overtime and the whole computer is somewhat of a giant pile of
    information I've retained.</textual></para><para class="po-block e25 e25"><textual class="po-textual">I've come to realized that this isn't going to change. What I need
    is for software and applications to adjust themselves to my way of storing
    information. Not finding what I needed and discovering the usefulness of
    Atom feeds, I created the open-source atomojo </textual><xref class="po-milestone e26 e26" linkend="atomojo"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> project to serve my "disorganized ordered
    mess" nature and store my information.</textual></para><para class="po-block e27 e27"><textual class="po-textual">What I discovered was that even though I'm a software developer and
    work with things are often tightly controlled and highly structured, much
    of the information I produce or interact with--media, information bits,
    documents of all kinds--tends to be loosely organized into "stacks" rather
    than tightly controlled "lists". This is especially true when it comes to
    media coming from personal interactions, family, vacations and other
    things not related to business.</textual></para><para class="po-block e28 e28"><textual class="po-textual">In fact, I'd say that the immense popularity of web search and the
    introduction of desktop search trends well with the idea that people
    generate stacks and piles of information that are loosely grouped
    together. I'd go even further to say that a "list" is a rare thing and can
    be hard to develop.</textual></para><para class="po-block e29 e29"><textual class="po-textual">Let's then face the fact that people don't produce </textual><quote class="po-inline e30 e30"><textual class="po-textual">lists</textual></quote><textual class="po-textual">
    as much as they produce </textual><quote class="po-inline e31 e31"><textual class="po-textual">stacks</textual></quote><textual class="po-textual"> and </textual><quote class="po-inline e32 e32"><textual class="po-textual">piles</textual></quote><textual class="po-textual">.  Producing organized and
    structured information takes time and so we just shove our media, documents, and other
    information into the nearest stack (or pile) that looks appropriate. We do
    that with a slightly dishonest hope that we'll come back to it later and
    "get organized."</textual></para><para class="po-block e33 e33"><textual class="po-textual">In the end, this information should be the basis for the
    applications and communications that we share with others on the Internet.
    It could drive our websites, our picture galleries, and our commerce
    engines if we only had a way to get it organized. Thus, my messy desk led
    me to believe that if I got organized I could build better dynamic
    applications.</textual></para></section><section class="po-hcontainer e34 e34"><title class="po-block e35 e35"><textual class="po-textual">Getting Organized with Atom Feeds</textual></title><para class="po-block e36 e36"><textual class="po-textual">Atom feeds are like stacks of objects. There is an order to the
    stack from the first entry to the last. You often have to sort through the
    entries from first to last to find what you want. But the feed has a
    purpose and so there is a loose relationship between each entry.</textual></para><para class="po-block e37 e37"><textual class="po-textual">While certain information resources have processable content, many
    others are not so easily searched. That is, an image is difficult to
    search against without human interaction unless there are annotations. As
    a result, the metadata encoded in the feed entry is very
    important.</textual></para><para class="po-block e38 e38"><textual class="po-textual">With the recent invention of the Atom Publishing Protocol
    (AtomPub) </textual><xref class="po-milestone e39 e39" linkend="apprfc"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, creation and manipulation
    of both entries and their associated metadata is relatively easy. As such,
    rather than shoving that picture from your last vacation into the nearest
    folder, you can tuck it away nicely into a Atom feed. The consequence is
    the natural next step is to author some metadata.</textual></para><para class="po-block e40 e40"><textual class="po-textual">Entries have a rich vocabulary with which you can annotate your
    resources. Just by looking at the entry you can learn about the author,
    titles, summaries, and many other aspects. This enhances the
    ability to retrieve that object later.</textual></para><section class="po-hcontainer e41 e41"><title class="po-block e42 e42"><textual class="po-textual">Term Categorization in Atom</textual></title><para class="po-block e43 e43"><textual class="po-textual">One of the interesting parts of the Atom vocabulary is the
      </textual><code class="po-atom e44 e44"><textual class="po-textual">category</textual></code><textual class="po-textual"> element associated with both feeds and entries.
      This element has two important attributes called
      </textual><quote class="po-inline e45 e45"><code class="po-atom e46 e46"><textual class="po-textual">scheme</textual></code></quote><textual class="po-textual"> and
      </textual><quote class="po-inline e47 e47"><code class="po-atom e48 e48"><textual class="po-textual">term</textual></code></quote><textual class="po-textual">. The </textual><code class="po-atom e49 e49"><textual class="po-textual">scheme</textual></code><textual class="po-textual"> attribute is
      an URI value that </textual><quote class="po-inline e50 e50"><textual class="po-textual">qualifies</textual></quote><textual class="po-textual"> or </textual><quote class="po-inline e51 e51"><textual class="po-textual">scopes</textual></quote><textual class="po-textual"> the </textual><code class="po-atom e52 e52"><textual class="po-textual">term</textual></code><textual class="po-textual">
      attribute's value. The element itself can contain any content--text or
      elements--but none is defined by the Atom Syndication Format </textual><xref class="po-milestone e53 e53" linkend="atomrfc"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><para class="po-block e54 e54"><textual class="po-textual">If you concatenate the </textual><code class="po-atom e55 e55"><textual class="po-textual">scheme</textual></code><textual class="po-textual"> and </textual><code class="po-atom e56 e56"><textual class="po-textual">term</textual></code><textual class="po-textual">
      attribute values and assume a default for when the </textual><code class="po-atom e57 e57"><textual class="po-textual">scheme</textual></code><textual class="po-textual">
      attribute is omitted, the result is a URI. This
      value can be interpreted as a leaf term in some unnamed ontology
      that labels the entry or feed with that term. As the
      </textual><code class="po-atom e58 e58"><textual class="po-textual">category</textual></code><textual class="po-textual"> element may contain content, a value can be
      associated with the term.</textual></para><para class="po-block e59 e59"><textual class="po-textual">This interpretation means that for each </textual><code class="po-atom e60 e60"><textual class="po-textual">category</textual></code><textual class="po-textual">
      element you get a RDF </textual><xref class="po-milestone e61 e61" linkend="rdf"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> triple. This
      triple is constructed such that the subject is the entry or feed,
      the predicate is the term URI, and the object is the value of the
      element. When the </textual><code class="po-atom e62 e62"><textual class="po-textual">category</textual></code><textual class="po-textual"> element is empty, the value
      defaults to </textual><code class="po-atom e63 e63"><textual class="po-textual">rdf:nil</textual></code><textual class="po-textual">.</textual></para></section><section class="po-hcontainer e64 e64"><title class="po-block e65 e65"><textual class="po-textual">Graphical Models for Terms</textual></title><para class="po-block e66 e66"><textual class="po-textual">Each feed generates a simple graphical model using the unique
      </textual><code class="po-atom e67 e67"><textual class="po-textual">id</textual></code><textual class="po-textual"> element values to represent the subjects in the triples.
      For example, given the feed in </textual><xref class="po-milestone e68 e68" linkend="feed-example"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">,
      the graph in </textual><xref class="po-milestone e69 e69" linkend="graph-example"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> is generated using
      edge labels:</textual></para><itemizedlist class="po-table e70 e70"><listitem class="po-container e71 e71"><para class="po-block e72 e72"><textual class="po-textual">E: http://www.atomojo.org/O/type/entry</textual></para></listitem><listitem class="po-container e73 e73"><para class="po-block e74 e74"><textual class="po-textual">pets: http://www.atomojo.org/O/keywords/pets</textual></para></listitem><listitem class="po-container e75 e75"><para class="po-block e76 e76"><textual class="po-textual">kind: http://www.atomojo.org/O/keywords/kind</textual></para></listitem><listitem class="po-container e77 e77"><para class="po-block e78 e78"><textual class="po-textual">breed: http://www.atomojo.org/O/keywords/breed</textual></para></listitem><listitem class="po-container e79 e79"><para class="po-block e80 e80"><textual class="po-textual">color: http://www.atomojo.org/O/keywords/color</textual></para></listitem><listitem class="po-container e81 e81"><para class="po-block e82 e82"><textual class="po-textual">name: http://www.atomojo.org/O/keywords/name</textual></para></listitem></itemizedlist><figure class="po-container e83 e83" xml:id="feed-example"><title class="po-block e84 e84"><textual class="po-textual">Example Feed</textual></title><programlisting class="po-block e85 e85" xml:space="preserve"><textual class="po-textual">
&lt;feed xmlns='http://www.w3.org/2005/Atom'&gt;
&lt;title&gt;Pets&lt;/title&gt; &lt;id&gt;id:feed:1&lt;/id&gt;
&lt;updated&gt;2008-07-10T15:45:26-07:00&lt;/updated&gt;
&lt;category term='pets'/&gt;

&lt;entry&gt;
&lt;title&gt;My Cat&lt;/title&gt;
&lt;id&gt;id:entry:1&lt;/id&gt;
&lt;updated&gt;2008-07-10T15:45:26-07:00&lt;/updated&gt;
&lt;category term='pet'/&gt;
&lt;category term='kind'&gt;cat&lt;/category&gt;
&lt;category term='color'&gt;tan/tiger&lt;/category&gt;
&lt;category term='name'&gt;bruno&lt;/category&gt;
&lt;content type='image/png' src='bruno.png'/&gt;
&lt;/entry&gt;

&lt;entry&gt;
&lt;title&gt;My Dog&lt;/title&gt;
&lt;id&gt;id:entry:2&lt;/id&gt;
&lt;updated&gt;2008-07-10T15:40:17-07:00&lt;/updated&gt;
&lt;category term='pet'/&gt;
&lt;category term='kind'&gt;dog&lt;/category&gt;
&lt;category term='breed'&gt;siberian husky&lt;/category&gt;
&lt;category term='color'&gt;white&lt;/category&gt;
&lt;category term='name'&gt;hudson&lt;/category&gt;
&lt;content type='image/png' src='hudson.png'/&gt;
&lt;/entry&gt;

&lt;/feed&gt;
</textual></programlisting></figure><figure class="po-container e86 e86" xml:id="graph-example"><title class="po-block e87 e87"><textual class="po-textual">Feed Graphical Model</textual></title><mediaobject class="po-container e88 e88"><imageobject class="po-container e89 e89"><imagedata class="po-meta e90 e90" fileref="../../../vol1/graphics/Milowski01/Milowski01-001.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure></section><section class="po-hcontainer e91 e91"><title class="po-block e92 e92"><textual class="po-textual">Querying to Build Lists</textual></title><para class="po-block e93 e93"><textual class="po-textual">Being able to query your feeds becomes very important after enough
      content as been collected. That is, your feeds start to look a lot like
      an unorganized </textual><quote class="po-inline e94 e94"><textual class="po-textual">pile</textual></quote><textual class="po-textual">. Past a certain number, keeping track of just where
      something can be found gets to be very difficult.</textual></para><para class="po-block e95 e95"><textual class="po-textual">While the Atom vocabulary provides many interesting elements (e.g.
      title) by which you might search, the entry and feed categorization
      provide a fine-grained set of information on which a query can be
      performed. Simple queries can be used to retrieve entries from feeds
      simply by pulling those entries who have certain terms.</textual></para><para class="po-block e96 e96"><textual class="po-textual">We'd like a query that can:</textual></para><itemizedlist class="po-table e97 e97"><listitem class="po-container e98 e98"><para class="po-block e99 e99"><textual class="po-textual">provide a set of terms for the basis of the query,</textual></para></listitem><listitem class="po-container e100 e100"><para class="po-block e101 e101"><textual class="po-textual">allow comparison of any values associated with those
          terms,</textual></para></listitem><listitem class="po-container e102 e102"><para class="po-block e103 e103"><textual class="po-textual">return the query result as a "reconstituted" feed.</textual></para></listitem></itemizedlist><para class="po-block e104 e104"><textual class="po-textual">Fortunately, SPARQL </textual><xref class="po-milestone e105 e105" linkend="sparql"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> has
      recently become a W3C recommendation and we can use this to query our
      </textual><quote class="po-inline e106 e106"><textual class="po-textual">pile</textual></quote><textual class="po-textual"> of feeds.</textual></para><para class="po-block e107 e107"><textual class="po-textual">For example, if we want to retrieve the feed with the keyword
      </textual><quote class="po-inline e108 e108"><code class="po-atom e109 e109"><textual class="po-textual">pets</textual></code></quote><textual class="po-textual">, we could query on the term
      </textual><code class="po-atom e110 e110"><textual class="po-textual">http://www.atomojo.org/O/keywords/pets</textual></code><textual class="po-textual"> as shown in </textual><xref class="po-milestone e111 e111" linkend="petsfeed"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><figure class="po-container e112 e112" xml:id="petsfeed"><title class="po-block e113 e113"><textual class="po-textual">Retrieve the pets feed</textual></title><programlisting class="po-block e114 e114" xml:space="preserve"><textual class="po-textual">
PREFIX k: &lt;http://www.atomojo.org/O/keyword/&gt;
SELECT ?e WHERE { ?e k:pets () . }
</textual></programlisting></figure><para class="po-block e115 e115"><textual class="po-textual">Similarly, we could restrict the query to return all pet entries
      as in </textual><xref class="po-milestone e116 e116" linkend="allpets"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><figure class="po-container e117 e117" xml:id="allpets"><title class="po-block e118 e118"><textual class="po-textual">Retrieve all pets entries</textual></title><programlisting class="po-block e119 e119" xml:space="preserve"><textual class="po-textual">
PREFIX k: &lt;http://www.atomojo.org/O/keyword/&gt;
PREFIX t: &lt;http://www.atomojo.org/O/type/&gt;
SELECT ?e WHERE { ?e t:entry (); k:pet () . }
</textual></programlisting></figure><para class="po-block e120 e120"><textual class="po-textual">If we want to search by value, we could find the pet named
      'hudson' as in </textual><xref class="po-milestone e121 e121" linkend="findhudson"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><figure class="po-container e122 e122" xml:id="findhudson"><title class="po-block e123 e123"><textual class="po-textual">Find Hudson</textual></title><programlisting class="po-block e124 e124" xml:space="preserve"><textual class="po-textual">
PREFIX k: &lt;http://www.atomojo.org/O/keyword/&gt;
SELECT ?e WHERE { ?e k:pet () ; k:name "hudson" .}
</textual></programlisting></figure><para class="po-block e125 e125"><textual class="po-textual">As a query language, SPARQL is sufficiently powerful to express
      many types of queries. If the graphical model of the feeds is extended
      to include properties from the atom feed vocabulary, queries can be
      formulated that mix categorization with the feed structure (e.g. find
      all pet entries whose title contains a certain word).</textual></para><para class="po-block e126 e126"><textual class="po-textual">Since we are interested in feeds and entries, the real use of the
      query is to </textual><quote class="po-inline e127 e127"><textual class="po-textual">reconstitute</textual></quote><textual class="po-textual"> the result into a feed. This can be done by
      a simple process using these rules:</textual></para><orderedlist class="po-table e128 e128"><listitem class="po-container e129 e129"><para class="po-block e130 e130"><textual class="po-textual">For each matching feed, return an entry that summarizes the
          feed, its categorization, and a single link of relation </textual><quote class="po-inline e131 e131"><code class="po-atom e132 e132"><textual class="po-textual">related</textual></code></quote><textual class="po-textual">
          that points to the feed's resource URI.</textual></para></listitem><listitem class="po-container e133 e133"><para class="po-block e134 e134"><textual class="po-textual">For each matching entry, return the entry with the
          </textual><code class="po-atom e135 e135"><textual class="po-textual">xml:base</textual></code><textual class="po-textual"> attribute set such that the link relations are
          preserved.</textual></para></listitem></orderedlist><para class="po-block e136 e136"><textual class="po-textual">As a result of this process, the query result is just another feed
      that can be consumed by any Atom-enabled client.</textual></para></section></section><section class="po-hcontainer e137 e137"><title class="po-block e138 e138"><textual class="po-textual">Building Applications from Atom Feeds</textual></title><section class="po-hcontainer e139 e139"><title class="po-block e140 e140"><textual class="po-textual">Architecture Overview</textual></title><para class="po-block e141 e141"><textual class="po-textual">With our ability to annotate and query arbitrary content as feed
      entries, we can now describe a dynamic application architecture show in
       </textual><xref class="po-milestone e142 e142" linkend="architecture"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> that is based on atomojo's AtomPub and
      SPARQL abilities. On the far left is the application author who is
      responsible for loading content and configuring the application. On the
      far right is the end user of the application who is using a
      browser-based application presented by the system. In the middle is the
      web application server and atomojo server instances.</textual></para><figure class="po-container e143 e143" xml:id="architecture"><title class="po-block e144 e144"><textual class="po-textual">Atomojo-based Architecture</textual></title><mediaobject class="po-container e145 e145"><imageobject class="po-container e146 e146"><imagedata class="po-meta e147 e147" fileref="../../../vol1/graphics/Milowski01/Milowski01-002.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e148 e148"><textual class="po-textual">The author's responsibility is not only to provide the content
      from </textual><quote class="po-inline e149 e149"><textual class="po-textual">the pile</textual></quote><textual class="po-textual"> and appropriate annotations, but also to provide
      </textual><quote class="po-inline e150 e150"><textual class="po-textual">instructions</textual></quote><textual class="po-textual"> through the same means. These instructions provide
      content layouts, rules for content organization, web content such as
      javascript code or CSS stylesheets, and even service components. While
      some of this content is the domain of a web programmer, much of it is
      just simple entries with categorizations as to how to build resources on
      the web application server.</textual></para><para class="po-block e151 e151"><textual class="po-textual">The web application server performs several tasks:</textual></para><itemizedlist class="po-table e152 e152"><listitem class="po-container e153 e153"><para class="po-block e154 e154"><textual class="po-textual">provides content proxies from the atomojo server to deliver
          content to the browser,</textual></para></listitem><listitem class="po-container e155 e155"><para class="po-block e156 e156"><textual class="po-textual">loads and configures layouts for web pages that are to be
          built from atom feeds,</textual></para></listitem><listitem class="po-container e157 e157"><para class="po-block e158 e158"><textual class="po-textual">loads and configures resources that are SPARQL queries to the
          atomojo server,</textual></para></listitem><listitem class="po-container e159 e159"><para class="po-block e160 e160"><textual class="po-textual">loads custom application components for specialized
          services.</textual></para></listitem></itemizedlist><para class="po-block e161 e161"><textual class="po-textual">The configuration information is retrieved from the atomojo server
      by a series of SPARQL queries. These queries allow the configuration
      information to be stored anywhere the author prefers.</textual></para></section><section class="po-hcontainer e162 e162"><title class="po-block e163 e163"><textual class="po-textual">An Example</textual></title><para class="po-block e164 e164"><textual class="po-textual">When the web application server periodically updates itself, it
      performs a set of queries against the atomojo server to retrieve
      configuration information. For example, to find all the layouts, the
      server uses the
      query shown in </textual><xref class="po-milestone e165 e165" linkend="layouts"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.  This query
      returns a set of entries that are the instructions for how each feeds is
      processed to produce a web page.</textual></para><figure class="po-container e166 e166" xml:id="layouts"><title class="po-block e167 e167"><textual class="po-textual">Query for All Layouts</textual></title><programlisting class="po-block e168 e168" xml:space="preserve"><textual class="po-textual">
PREFIX www: &lt;http://www.atomojo.org/O/www/configuration/&gt;
SELECT ?e WHERE { ?e www:layout () . }
</textual></programlisting></figure><para class="po-block e169 e169"><textual class="po-textual">A typical layout entry is a media resource entry that contains a
      script (e.g. XSLT) for transforming the feed on the server into
      appropriate web content. While the
      transformation as shown in </textual><xref class="po-milestone e170 e170" linkend="layout2html"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> produces HTML, nothing precludes generation of images or other
      non-XML media types.</textual></para><figure class="po-container e171 e171" xml:id="layout2html"><title class="po-block e172 e172"><textual class="po-textual">A Layout Entry</textual></title><programlisting class="po-block e173 e173" xml:space="preserve"><textual class="po-textual">
&lt;entry xmlns='http://www.w3.org/2005/Atom'&gt;
&lt;title&gt;Default Layout&lt;/title&gt;
&lt;id&gt;urn:uuid:18e4d0870ee46-4ff5-8895-bdd0ee0fb226&lt;/id&gt;
&lt;published&gt;2008-07-18T11:22:06-07:00&lt;/published&gt;
&lt;updated&gt;2008-07-18T11:42:06-07:00&lt;/update&gt;
&lt;category scheme='http://www.atomojo.org/O/www/configuration/'
          term='layout'/&gt;
&lt;category scheme='http://www.atomojo.org/O/www/configuration/layout/'
          term='media-type'&gt;text/html&lt;/category&gt;
&lt;content src='default-layout.xsl' type='application/xslt+xml'/&gt;
&lt;/entry&gt;
</textual></programlisting></figure><para class="po-block e174 e174"><textual class="po-textual">The layouts are used by internal or custom components where the
      choice of layout is based on a
      number of matching criteria. These layout rules can be restricted to
      match by resource path or require that the feed being rendered to have
      certain terms (i.e. category elements).  This allows the author to select
      the layout based on categorization rather than location in the atomojo
      server.</textual></para><para class="po-block e175 e175"><textual class="po-textual">This approach has been used to configure the proxies, layouts,
      queries to the server, and application components as shown in
      </textual><xref class="po-milestone e176 e176" linkend="configuration"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.</textual></para><figure class="po-container e177 e177" xml:id="configuration"><title class="po-block e178 e178"><textual class="po-textual">A Configuration Feed</textual></title><programlisting class="po-block e179 e179" xml:space="preserve"><textual class="po-textual">
&lt;feed xmlns:app="http://www.w3.org/2007/app" xmlns="http://www.w3.org/2005/Atom" xml:base="./"&gt;
&lt;id&gt;urn:uuid:9a1ecf4e-2495-4a42-9b53-37b25dff731e&lt;/id&gt;
&lt;updated&gt;2008-07-17T14:38:20-07:00&lt;/updated&gt;
&lt;title&gt;Configuration&lt;/title&gt;
&lt;author&gt;&lt;name&gt;Alex Milowski&lt;/name&gt;&lt;/author&gt;
&lt;link href="" rel="edit"/&gt;
&lt;category scheme="http://www.atomojo.org/O/type/feed/" term="hidden"/&gt;
&lt;link href="" rel="self"/&gt;

&lt;entry&gt;
&lt;title type="text"&gt;default-layout.xsl&lt;/title&gt;
&lt;id&gt;urn:uuid:18e4d087-ee46-4ff5-8895-bdd0ee0fb226&lt;/id&gt;
&lt;published&gt;2008-07-18T11:22:09-07:00&lt;/published&gt;
&lt;updated&gt;2008-07-18T11:22:09-07:00&lt;/updated&gt;
&lt;app:edited&gt;2008-07-18T12:01:59-07:00&lt;/app:edited&gt;
&lt;link href="./_/18e4d087-ee46-4ff5-8895-bdd0ee0fb226" rel="edit"/&gt;
&lt;content type="application/xslt+xml" src="default-layout.xsl"/&gt;
&lt;category scheme="http://www.atomojo.org/O/www/configuration/"
          term="layout"/&gt;
&lt;category scheme="http://www.atomojo.org/O/www/configuration/layout/"
          term="media-type"&gt;text/html&lt;/category&gt;
&lt;link href="default-layout.xsl" rel="edit-media"/&gt;
&lt;/entry&gt;

&lt;entry&gt;
&lt;published&gt;2008-07-17T14:43:17-07:00&lt;/published&gt;
&lt;app:edited&gt;2008-07-17T17:44:55-07:00&lt;/app:edited&gt;
&lt;updated&gt;2008-07-17T14:43:17-07:00&lt;/updated&gt;
&lt;id&gt;urn:uuid:f080d0ee-a1b2-4012-a916-b0d915ea2cc4&lt;/id&gt;
&lt;title type="text"&gt;Proxy&lt;/title&gt;
&lt;author&gt;&lt;name&gt;Alex Milowski&lt;/name&gt;&lt;/author&gt;
&lt;link href="./_/f080d0ee-a1b2-4012-a916-b0d915ea2cc4" rel="edit"/&gt;
&lt;category scheme="http://www.atomojo.org/O/www/configuration/"
          term="application"/&gt;
&lt;category scheme="http://www.atomojo.org/O/www/configuration/application/"
          term="match"/&gt;
&lt;category scheme="http://www.atomojo.org/O/www/configuration/application/"
          term="proxy"&gt;resources&lt;/category&gt;
&lt;/entry&gt;

&lt;entry&gt;
&lt;published&gt;2008-07-17T17:38:11-07:00&lt;/published&gt;
&lt;app:edited&gt;2008-07-17T17:44:24-07:00&lt;/app:edited&gt;
&lt;updated&gt;2008-07-17T17:38:11-07:00&lt;/updated&gt;
&lt;id&gt;urn:uuid:115b3132-4a9f-432d-bf7d-e366803d286e&lt;/id&gt;
&lt;title type="text"&gt;Index&lt;/title&gt;
&lt;author&gt;&lt;name&gt;Alex Milowski&lt;/name&gt;&lt;/author&gt;
&lt;link href="./_/115b3132-4a9f-432d-bf7d-e366803d286e" rel="edit"/&gt;
&lt;category scheme="http://www.atomojo.org/O/www/configuration/"
          term="application"/&gt;
&lt;category scheme="http://www.atomojo.org/O/www/configuration/application/"
          term="class"&gt;org.atomojo.www.util.script.IndexApplication&lt;/category&gt;
&lt;category scheme="http://www.atomojo.org/O/www/configuration/application/"
          term="match"&gt;/{path}/&lt;/category&gt;
&lt;category scheme="http://www.atomojo.org/O/www/configuration/application/"
          term="match"&gt;/&lt;/category&gt;
&lt;category scheme="http://www.atomojo.org/O/www/configuration/application/match/"
          term="mode"&gt;exact&lt;/category&gt;
&lt;/entry&gt;

&lt;entry&gt;
&lt;published&gt;2008-07-18T13:28:51-07:00&lt;/published&gt;
&lt;app:edited&gt;2008-07-18T13:28:51-07:00&lt;/app:edited&gt;
&lt;updated&gt;2008-07-18T13:28:51-07:00&lt;/updated&gt;
&lt;id&gt;urn:uuid:01ababd0-9c16-4f0f-a4a9-ffecfdecdaf3&lt;/id&gt;
&lt;title type="text"&gt;Software Index&lt;/title&gt;
&lt;author&gt;&lt;name&gt;Alex Milowski&lt;/name&gt;&lt;/author&gt;
&lt;category scheme="http://www.atomojo.org/O/www/configuration/"
          term="application"/&gt;
&lt;category scheme="http://www.atomojo.org/O/www/configuration/application/"
          term="class"&gt;org.atomojo.www.util.script.IndexApplication&lt;/category&gt;
&lt;category scheme="http://www.atomojo.org/O/www/configuration/application/"
          term="match"&gt;/software/&lt;/category&gt;
&lt;category scheme="http://www.atomojo.org/O/www/configuration/application/match/"
          term="mode"&gt;exact&lt;/category&gt;
&lt;category scheme="http://www.atomojo.org/O/www/configuration/application/"
          term="resource"&gt;software&lt;/category&gt;
&lt;link href="./_/01ababd0-9c16-4f0f-a4a9-ffecfdecdaf3" rel="edit"/&gt;
&lt;/entry&gt;

&lt;entry&gt;
&lt;published&gt;2008-07-18T13:26:49-07:00&lt;/published&gt;
&lt;app:edited&gt;2008-07-18T13:26:49-07:00&lt;/app:edited&gt;
&lt;updated&gt;2008-07-18T13:26:49-07:00&lt;/updated&gt;
&lt;id&gt;urn:uuid:3b5319ba-2e8b-4b66-94bc-ecf01bac77f8&lt;/id&gt;
&lt;title type="text"&gt;Software Resource&lt;/title&gt;
&lt;author&gt;&lt;name&gt;Alex Milowski&lt;/name&gt;&lt;/author&gt;
&lt;link href="./_/3b5319ba-2e8b-4b66-94bc-ecf01bac77f8" rel="edit"/&gt;
&lt;category scheme="http://www.atomojo.org/O/www/configuration/"
          term="resource"/&gt;
&lt;category scheme="http://www.atomojo.org/O/www/configuration/resource/"
          term="name"&gt;software&lt;/category&gt;
&lt;category scheme="http://www.atomojo.org/O/www/configuration/resource/"
          term="relation"&gt;terms&lt;/category&gt;
&lt;category scheme="http://www.atomojo.org/O/www/configuration/resource/"
          term="media-type"&gt;application/sparql-query&lt;/category&gt;
&lt;category scheme="http://www.atomojo.org/O/www/configuration/resource/"
          term="query"&gt;
PREFIX k: &amp;lt;http://ww.atomojo.org/O/keyword/&amp;gt;
PREFIX t: &amp;lt;http://www.atomojo.org/O/type/&amp;gt;
SELECT ?e WHERE { ?e t:feed (); k:software () }
&lt;/category&gt;
&lt;/entry&gt;
&lt;/feed&gt;
</textual></programlisting></figure><para class="po-block e180 e180"><textual class="po-textual">In </textual><xref class="po-milestone e181 e181" linkend="configuration"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, the first entry
      is the layout, the second entry is a proxy for content, and the third is
      an application component that comes packaged with atomojo. This
      component is used to create </textual><quote class="po-inline e182 e182"><textual class="po-textual">index pages</textual></quote><textual class="po-textual"> from feeds using the layouts and is typically
      mapped to </textual><quote class="po-inline e183 e183"><textual class="po-textual">index</textual></quote><textual class="po-textual"> resources (e.g. ends with a forward slash). These
      mappings are shown in the </textual><quote class="po-inline e184 e184"><code class="po-atom e185 e185"><textual class="po-textual">match</textual></code></quote><textual class="po-textual"> terms in the entries.</textual></para><para class="po-block e186 e186"><textual class="po-textual">The last two entries are slightly different. Their purpose is to
      use the query facilities of the atomojo server to find all </textual><quote class="po-inline e187 e187"><textual class="po-textual">software</textual></quote><textual class="po-textual">
      projects on the web site and then present a listing. They do this by
      associating a query to a resource that is then called by another </textual><quote class="po-inline e188 e188"><textual class="po-textual">index</textual></quote><textual class="po-textual">
      component.</textual></para><para class="po-block e189 e189"><textual class="po-textual">The last entry defines a query against the atomojo server for
      retrieving all those feeds that have a keyword of </textual><quote class="po-inline e190 e190"><code class="po-atom e191 e191"><textual class="po-textual">software</textual></code></quote><textual class="po-textual">. That
      resource is used by the index component defined by the preceding entry.
      These two entries together configure an index page at </textual><quote class="po-inline e192 e192"><code class="po-atom e193 e193"><textual class="po-textual">/software/</textual></code></quote><textual class="po-textual"> on
      the web site.</textual></para></section></section><section class="po-hcontainer e194 e194"><title class="po-block e195 e195"><textual class="po-textual">Conclusion</textual></title><para class="po-block e196 e196"><textual class="po-textual">In </textual><xref class="po-milestone e197 e197" linkend="configuration"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> in the last
    section, the last two entries achieved finding resources in our </textual><quote class="po-inline e198 e198"><textual class="po-textual">pile of
    information</textual></quote><textual class="po-textual">. An author can now put information about software in any feed
    they choose  and, as long as it is
    annotated with a category element with a term value of </textual><quote class="po-inline e199 e199"><code class="po-atom e200 e200"><textual class="po-textual">software</textual></code></quote><textual class="po-textual">, it will
    show up on that software index page.</textual></para><para class="po-block e201 e201"><textual class="po-textual">This is not remarkable. Plenty of software system exists that allow
    authored keywords to produce index information and then allow people to
    browse that information. What is interesting here is that we're using
    categorization and terms.</textual></para><para class="po-block e202 e202"><textual class="po-textual">Any categorization--both formal and informal--can now be used to
    annotate information stored in the feeds. The annotations are not limited
    to keywords. Also, the combination of different terms and values can be
    used to create a very specific set of informaiton.</textual></para><para class="po-block e203 e203"><textual class="po-textual">Similarly, the queries are not limited to simple retrieval
    exercises.  The SPARQL queries can perform complex union and intersection
    operations as well as filtering on term values.  As such, very specific
    data sets can be retrieved from the atomojo server.</textual></para><para class="po-block e204 e204"><textual class="po-textual">As time goes by, queries can be developed to use whatever categorization
    evolves from the authors.  These queries can be used to
    re-purpose that original content without much, if any, change to the
    feed metadata.  The resulting feeds can then be associated with a web resource
    independent of how the author chose to organize the original entries and
    feeds. That is, I can create a disorganized pile of information and keep
    my website organized.</textual></para></section><bibliography class="po-hcontainer e205 e205"><title class="po-block e206 e206"><textual class="po-textual">Bibliography</textual></title><bibliomixed class="po-block e207 e207" xml:id="atomojo"><textual class="po-textual">Milowski, R. "Atomojo" 2008
    </textual><link class="po-inline e208 e208" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://code.google.com/p/atomojo/</textual></link></bibliomixed><bibliomixed class="po-block e209 e209" xml:id="atomrfc"><textual class="po-textual">Nottingham, M. and Sayre R., "RFC 4287: The
    Atom Syndication Format", December 2005
    </textual><link class="po-inline e210 e210" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.ietf.org/rfc/rfc4287.txt</textual></link></bibliomixed><bibliomixed class="po-block e211 e211" xml:id="apprfc"><textual class="po-textual">Gregorio, J. and de hOra, B. "RFC 5023: The
    Atom Publishing Protocol", October 2007
    </textual><link class="po-inline e212 e212" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.ietf.org/rfc/rfc5023.txt</textual></link></bibliomixed><bibliomixed class="po-block e213 e213" xml:id="sparql"><textual class="po-textual">Prud'hommeaux, E. and Seaborne, A. "SPARQL
    Query Language for RDF", January 2008
    </textual><link class="po-inline e214 e214" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/rdf-sparql-query/</textual></link></bibliomixed><bibliomixed class="po-block e215 e215" xml:id="rdf"><textual class="po-textual">Hayes, P. "RDF Semantics", February 2004
    </textual><link class="po-inline e216 e216" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/rdf-mt/</textual></link></bibliomixed></bibliography></article></classedDocument>