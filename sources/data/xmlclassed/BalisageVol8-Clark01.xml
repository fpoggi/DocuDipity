<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.3"><title class="po-block e1 e1"><textual class="po-textual">Meta-stylesheets: Exploring the Provenance of XSL Transformations</textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">Balisage: The Markup Conference 2012</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 7 - 10, 2012</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual">When documents are transformed with XSLT, what methods can be used to understand and record those transformations? Though they aren't specifically meant for provenance capture, existing tools and informal practices can be used to manually piece together the provenance of XSLTs. However, a meta-stylesheet approach has the potential to generate provenance information by creating a copy of XSLT stylesheets with provenance-specific instructions. This method is currently being implemented, using the strategies and workflows detailed here. Even with the complications and limitations of the method, XSLT itself enables a surprising amount of provenance capture.</textual></para></abstract><author class="po-record e8 e8"><personname class="po-record e9 e9"><firstname class="po-field e10 e10"><textual class="po-textual">Ashley</textual></firstname><surname class="po-field e11 e11"><textual class="po-textual">Clark</textual></surname></personname><personblurb class="po-container e12 e12"><para class="po-block e13 e13"><textual class="po-textual">Ashley Clark recently received her M.S. from the Graduate School of Library and Information Science at the University of Illinois at Urbana-Champaign, where she specialized in data curation and worked as a research assistant and hourly academic. Her interests include data curation and data provenance in the humanities.</textual></para></personblurb></author><legalnotice class="po-container e14 e14"><para class="po-block e15 e15"><textual class="po-textual">Copyright Â© 2012 by the author. Used with permission.</textual></para></legalnotice></info><section class="po-hcontainer e16 e16"><title class="po-block e17 e17"><textual class="po-textual">Introduction</textual></title><para class="po-block e18 e18"><textual class="po-textual">Provenance records are records for trust and authenticity, records to prove that the object is what it is claimed to be. Provenance has its roots in the archival world, where the goal is to see objects survive with minimal weathering as they pass from one caretaker to the next (</textual><xref class="po-milestone e19 e19" linkend="sweeney08"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">). Similarly, data provenance answers the question "How did this come to be here, in this state?", and it does so by identifying the agents, transformation events, and other artifacts associated with that object.</textual></para><para class="po-block e20 e20"><textual class="po-textual">Computer usage is so prevalent in humanities and sciences research that it is all but guaranteed that data will be changed in some way during its lifetime. This has the advantage that tools can automatically generate provenance information, recording important details about the transformation process. Later, a provenance record of this sort may be used for error-checking, to independently reproduce a result, or simply for results verification (</textual><xref class="po-milestone e21 e21" linkend="kusteretal11"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">). Few e-humanities software tools offer provenance capabilities, likely due to time constraints and a lack of common practice. However, one reason may be in terms of nomenclature. Humanities research often involves documents, and humanists may bristle to think of their documents as the 'data' part of data provenance (</textual><xref class="po-milestone e22 e22" linkend="fear11"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).</textual><footnote class="po-popup e23 e23"><para class="po-block e24 e24"><textual class="po-textual">See </textual><xref class="po-milestone e25 e25" linkend="babeu11"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> for an in-depth look at digital humanists and the challenges of creating "ecosystems" to suit their needs.</textual></para></footnote></para><para class="po-block e26 e26"><textual class="po-textual">Still, more and more documents are becoming - or are born as - data, thanks to mark-up languages (</textual><xref class="po-milestone e27 e27" linkend="bunemankhannatan00"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">). XSLT is one possible step in document transformation, and as such, is subject to the same provenance needs as other processes. XSL transformations can be examined and, with a little effort, used to generate provenance information about the creation of documents. The goal of this project is to examine methods of gathering provenance information about XSL transformations, and to explore the possibilities of automatically generating such records.</textual></para></section><section class="po-hcontainer e28 e28"><title class="po-block e29 e29"><textual class="po-textual">Provenance terminology</textual></title><para class="po-block e30 e30"><textual class="po-textual">A handful of provenance ontologies exist, and each identifies three basic classes of provenance: information about processes, or transformation events; about agents, or the people (or software) which catalyze or carry out the event; and artifacts, or 'things' which may be acted on, generated by, or otherwise associated with a transformation event. The below figure gives the terminology of two such ontologies, the Open Provenance Model (</textual><xref class="po-milestone e31 e31" linkend="moreau10"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) and the W3C PROV-O (</textual><xref class="po-milestone e32 e32" linkend="belhajjame12"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">). </textual><figure class="po-container e33 e33"><title class="po-block e34 e34"><textual class="po-textual">Provenance classes of OPM and W3C PROV-O</textual></title><table class="po-container e35 e35"><thead class="po-container e36 e36"><tr class="po-table e37 e37"><td class="po-block e38 e38"><textual class="po-textual">Ontology</textual></td><td class="po-block e39 e39"><textual class="po-textual">'Thing'</textual></td><td class="po-block e40 e40"><textual class="po-textual">Transformation Event</textual></td><td class="po-block e41 e41"><textual class="po-textual">Person/Software</textual></td></tr></thead><tbody class="po-table e42 e42"><tr class="po-table e43 e43"><td class="po-block e44 e44"><emphasis class="po-inline e45 e45"><textual class="po-textual">Open Provenance Model (OPM)</textual></emphasis></td><td class="po-block e46 e46"><emphasis class="po-inline e47 e47"><textual class="po-textual">Artifact</textual></emphasis></td><td class="po-block e48 e48"><emphasis class="po-inline e49 e49"><textual class="po-textual">Process</textual></emphasis></td><td class="po-block e50 e50"><emphasis class="po-inline e51 e51"><textual class="po-textual">Agent</textual></emphasis></td></tr><tr class="po-table e52 e52"><td class="po-block e53 e53"><textual class="po-textual">W3C PROV</textual></td><td class="po-block e54 e54"><textual class="po-textual">Entity</textual></td><td class="po-block e55 e55"><textual class="po-textual">Action</textual></td><td class="po-block e56 e56"><textual class="po-textual">Agent</textual></td></tr></tbody></table></figure></para><para class="po-block e57 e57"><textual class="po-textual">My first attempts at provenance documentation were founded on the XML binding of OPM. OPM was designed primarily to capture information about scientific data workflows, and loosely fit the information needed to document XSLT provenance. Current work makes use of the Open Provenance Model Vocabulary, a modified version of OPM which includes a module for XSLT provenance (</textual><xref class="po-milestone e58 e58" linkend="zhao10"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">). As such, this paper makes use of OPM and OPMV XSLT module terminology.</textual><footnote class="po-popup e59 e59"><para class="po-block e60 e60"><textual class="po-textual">Currently a work in progress, the W3C PROV is an attempt at a provenance ontology general enough to be used for many fields, but flexible enough to handle the specific provenance needs of any organization or community. Once completed, it will likely prove more useful than OPM for provenance markup. For example, OPM has no versioning capabilities, while PROV does.</textual></para></footnote></para></section><section class="po-hcontainer e61 e61"><title class="po-block e62 e62"><textual class="po-textual">What can we glean from an XSL transformation?</textual></title><para class="po-block e63 e63"><textual class="po-textual">Gathering XSLT provenance information is already possible through a number of methods. The simplest method (though not necessarily the easiest for understanding) is to simply examine the artifacts associated with an XSL transformation - mainly the input, output, and stylesheets involved in the transformation. In particular, comments left on a stylesheet could reveal the author agent's identity, thought process, and understanding of what the XSLT code does or is supposed to do. One might be able to determine the templates' firing order, but the process may just as well be laborious in terms of piecing together provenance.</textual></para><para class="po-block e64 e64"><textual class="po-textual">A better method is to use a debugger to step through a transformation, which grants an in-depth look at the way an output document is constructed from input and stylesheet. Parameter and variable values may also be shown, which may explain choices made by the XSLT processor. This step-through method is aimed for human understanding, but no record of the steps is available for consultation. Provenance information would be easier to identify with this method as opposed to the first, but it would still have to be documented by hand.</textual></para><para class="po-block e65 e65"><textual class="po-textual">In contrast, the Saxon processor has a trace function</textual><footnote class="po-popup e66 e66"><para class="po-block e67 e67"><textual class="po-textual">Append "-T" when transforming via Java platform.</textual></para></footnote><textual class="po-textual"> which provides a tree view of the steps within an XSL transformation. It shows what input nodes are matched to templates, and includes the file name and line numbers of each processed node. The trace log cannot reference the specific elements in the output that came into existence due to any one transformation step. Instead, one must infer the structure of the output from the steps taken. Still, when used as a roadmap to examining the input documents and stylesheets, the trace log is explicit and exact in its references - a good representation of the transformation which created the output, so long as one has access to the files referenced.</textual><figure class="po-container e68 e68"><title class="po-block e69 e69"><textual class="po-textual">Sample Saxon trace output (with other error output removed)</textual></title><programlisting class="po-block e70 e70" xml:space="preserve"><textual class="po-textual">&lt;trace saxon-version="9.4.0.3" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
 &lt;source node="/" line="0" file="test1.xml"&gt;
  &lt;xsl:template match="/" line="16" module="testRegStylesheet.xsl"&gt;
   &lt;LRE name="html" line="17" module="testRegStylesheet.xsl"&gt;
    &lt;LRE name="head" line="18" module="testRegStylesheet.xsl"&gt;
     &lt;LRE name="title" line="19" module="testRegStylesheet.xsl"&gt;
      &lt;xsl:text line="19" module="testRegStylesheet.xsl"&gt;
      &lt;/xsl:text&gt;
     &lt;/LRE&gt;
    &lt;/LRE&gt;
    &lt;xsl:apply-templates line="21" module="testRegStylesheet.xsl"&gt;
     &lt;source node="/test/compute[1]" line="3" file="test1.xml"&gt;
      &lt;xsl:template match="compute" line="26" module="testRegStylesheet.xsl"&gt;
       &lt;LRE name="body" line="27" module="testRegStylesheet.xsl"&gt;
        &lt;xsl:apply-templates line="28" module="testRegStylesheet.xsl"&gt;
         &lt;source node="/test/compute[1]/message[1]" line="3" file="test1.xml"&gt;
          &lt;xsl:template match="message" line="33" module="testRegStylesheet.xsl"&gt;
           &lt;xsl:call-template line="34" module="testRegStylesheet.xsl"&gt;
            &lt;xsl:value-of line="36" module="testRegStylesheet.xsl"&gt;
            &lt;/xsl:value-of&gt;
            &lt;xsl:template name="summon" line="42" module="testRegStylesheet.xsl"&gt;
             &lt;xsl:param name="sayeth" line="43" module="testRegStylesheet.xsl"&gt;
             &lt;/xsl:param&gt;
             &lt;LRE name="b" line="44" module="testRegStylesheet.xsl"&gt;
              &lt;xsl:text line="45" module="testRegStylesheet.xsl"&gt;
              &lt;/xsl:text&gt;
              &lt;xsl:value-of line="46" module="testRegStylesheet.xsl"&gt;
              &lt;/xsl:value-of&gt;
              &lt;xsl:text line="47" module="testRegStylesheet.xsl"&gt;
              &lt;/xsl:text&gt;
              &lt;xsl:value-of line="48" module="testRegStylesheet.xsl"&gt;
              &lt;/xsl:value-of&gt;
             &lt;/LRE&gt;
            &lt;/xsl:template&gt;
           &lt;/xsl:call-template&gt;
          &lt;/xsl:template&gt;
         &lt;/source&gt;&lt;!-- /test/compute[1]/message[1] --&gt;
        &lt;/xsl:apply-templates&gt;
       &lt;/LRE&gt;
      &lt;/xsl:template&gt;
     &lt;/source&gt;&lt;!-- /test/compute[1] --&gt;
    &lt;/xsl:apply-templates&gt;
   &lt;/LRE&gt;
  &lt;/xsl:template&gt;
 &lt;/source&gt;&lt;!-- / --&gt;
&lt;/trace&gt;</textual></programlisting></figure></para><para class="po-block e71 e71"><textual class="po-textual">XSLT itself also provides the capability to capture some provenance information, through functions such as </textual><code class="po-atom e72 e72"><textual class="po-textual">system-property()</textual></code><textual class="po-textual"> and </textual><code class="po-atom e73 e73"><textual class="po-textual">base-uri()</textual></code><textual class="po-textual">. With these functions, the output of a stylesheet could include information on the XSLT version used; the processor agent which controlled the XSL transformation; and the file names of an input document and the primary stylesheet. However, the use of this method is dependent on those who created or who maintain the stylesheet.</textual><footnote class="po-popup e74 e74"><para class="po-block e75 e75"><textual class="po-textual">Read: those who likely already know the files and processor being used, and who may not see the use in including such information.</textual></para></footnote></para><para class="po-block e76 e76"><textual class="po-textual">The oXygen XML Editor has a documentation generation tool for XSLT stylesheets. The tool creates a log giving information about the stylesheet and children of the </textual><code class="po-atom e77 e77"><textual class="po-textual">xsl:stylesheet</textual></code><textual class="po-textual"> node (most notably, templates). Interestingly enough, the documentation tool also assumes that if a node has a comment placed immediately before it, then the comment is documentation for the contents of that node. While this assumption could be wrong, it certainly rewards those who provide descriptions of stylesheets and templates through comments. It is worth noting that the documentation tool may not contain any provenance information at all, since it only describes the stylesheet artifact and does not guarantee any references to agents, process instances, or other artifacts. On the other hand, the documentation is an excellent example of the types of information that should be included when a provenance record references a stylesheet or template artifact.</textual></para><para class="po-block e78 e78"><textual class="po-textual">What kinds of information, then, can we find about an XSL transformation? </textual><itemizedlist class="po-table e79 e79"><listitem class="po-container e80 e80"><para class="po-block e81 e81"><textual class="po-textual">XSLT version</textual></para></listitem><listitem class="po-container e82 e82"><para class="po-block e83 e83"><textual class="po-textual">XSLT processor name, version, vendor</textual></para></listitem><listitem class="po-container e84 e84"><para class="po-block e85 e85"><textual class="po-textual">input document URI</textual></para></listitem><listitem class="po-container e86 e86"><para class="po-block e87 e87"><textual class="po-textual">stylesheet URI</textual></para></listitem><listitem class="po-container e88 e88"><para class="po-block e89 e89"><textual class="po-textual">template matches or calls</textual></para></listitem><listitem class="po-container e90 e90"><para class="po-block e91 e91"><textual class="po-textual">literal result element (LRE) insertion</textual></para></listitem><listitem class="po-container e92 e92"><para class="po-block e93 e93"><textual class="po-textual">input node transformation steps</textual></para></listitem><listitem class="po-container e94 e94"><para class="po-block e95 e95"><textual class="po-textual">authorship (dependent on programmer)</textual></para></listitem><listitem class="po-container e96 e96"><para class="po-block e97 e97"><textual class="po-textual">copyright information (dependent on programmer)</textual></para></listitem><listitem class="po-container e98 e98"><para class="po-block e99 e99"><textual class="po-textual">explanation of coding choices (dependent on programmer)</textual></para></listitem></itemizedlist><textual class="po-textual">Although we have a number of methods for piecing together the provenance of an XSL transformation, there are a number of limitations, the foremost of which is the fact that these methods offer only a portion of the provenance information available for XSLT processes. To gather all of the above information would require using each method and manually piecing together the results to form comprehensive provenance documentation. A general provenance tool for XSLT should include as much of this information as possible, recording it during XSLT processes at a user's behest.</textual></para></section><section class="po-hcontainer e100 e100"><title class="po-block e101 e101"><textual class="po-textual">The meta-stylesheet method</textual></title><section class="po-hcontainer e102 e102"><title class="po-block e103 e103"><textual class="po-textual">Assumptions and approach</textual></title><para class="po-block e104 e104"><textual class="po-textual">When I started looking at XSLT provenance, I hoped to find a method that would be: </textual><orderedlist class="po-table e105 e105"><listitem class="po-container e106 e106"><para class="po-block e107 e107"><textual class="po-textual">comprehensive, combining as many types of the above provenance information as possible; </textual></para></listitem><listitem class="po-container e108 e108"><para class="po-block e109 e109"><textual class="po-textual">easy to use - either fitting right into existing workflows, or able to be run and used with minimum fuss; and</textual></para></listitem><listitem class="po-container e110 e110"><para class="po-block e111 e111"><textual class="po-textual">in a format built for shareable provenance.</textual></para></listitem></orderedlist><textual class="po-textual">I also hoped for a method that would be reliant on neither a specific type of XSLT processor (as helpful as the Saxon trace has been), nor on a specific program such as oXygen.</textual></para><para class="po-block e112 e112"><textual class="po-textual">Wendell Piez suggested a possible solution - to build a "meta-stylesheet." The meta-stylesheet will take stylesheet A as input, and output a stylesheet B, which in turn will approximate the XSLT processes of running stylesheet A with the same input document. Instead of the output expected from stylesheet A, the "meta'd" transformation scenario will output an OPMV-based RDF graph, providing provenance information on multiple levels of granularity. Currently, only two levels of provenance are captured: first, the file-level transformation process; second, the firing of templates as they are matched or called.</textual></para></section><section class="po-hcontainer e113 e113"><title class="po-block e114 e114"><textual class="po-textual">A workflow for provenance reporting</textual></title><para class="po-block e115 e115"><textual class="po-textual">The steps of the XSLT provenance workflow are currently as follows: </textual><orderedlist class="po-table e116 e116"><listitem class="po-container e117 e117"><para class="po-block e118 e118"><textual class="po-textual">Use the meta-stylesheet to create stylesheet B (for generating provenance) and, optionally, stylesheet C (for assigning </textual><code class="po-atom e119 e119"><textual class="po-textual">rdf:ID</textual></code><textual class="po-textual">s to template code)</textual></para></listitem><listitem class="po-container e120 e120"><para class="po-block e121 e121"><textual class="po-textual">Use stylesheet A or C</textual><footnote class="po-popup e122 e122"><para class="po-block e123 e123"><textual class="po-textual">Since A and C have the same output, I refer to "A" when talking about the characteristics of both, and "C" when specifically talking about stylesheet C.</textual></para></footnote><textual class="po-textual"> and input.xml to create output.xml</textual><footnote class="po-popup e124 e124"><para class="po-block e125 e125"><textual class="po-textual">The input and output can, of course, be in formats other than XML.</textual></para></footnote><textual class="po-textual">.</textual></para></listitem><listitem class="po-container e126 e126"><para class="po-block e127 e127"><textual class="po-textual">Use stylesheet B on input.xml to create an OPMV RDF graph representing the provenance of step 2.</textual></para></listitem></orderedlist></para><para class="po-block e128 e128"><figure class="po-container e129 e129"><title class="po-block e130 e130"><textual class="po-textual">An overview of the meta-stylesheet method</textual></title><mediaobject class="po-container e131 e131"><imageobject class="po-container e132 e132"><imagedata class="po-meta e133 e133" fileref="../../../vol8/graphics/Clark01/Clark01-001.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><textual class="po-textual">The workflow is meant to capture the provenance of step 2, on two levels of granularity: file-level and template-level. The file-level XSL transformation process references the input document, as well as the stylesheet(s) used. The process is controlled by the XSLT processor, and generates an output document. As with the Saxon trace, this method can only give the provenance information of the transformation process which created the output.xml.</textual><figure class="po-container e134 e134"><title class="po-block e135 e135"><textual class="po-textual">Provenance at the file level</textual></title><mediaobject class="po-container e136 e136"><imageobject class="po-container e137 e137"><imagedata class="po-meta e138 e138" fileref="../../../vol8/graphics/Clark01/Clark01-002.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><figure class="po-container e139 e139"><title class="po-block e140 e140"><textual class="po-textual">Sample file-level provenance documentation (provenance.rdf)</textual></title><programlisting class="po-block e141 e141" xml:space="preserve"><textual class="po-textual">&lt;!-- Provenance for the transformation of file:/C:/Users/Ashley/Desktop/global_001/input.xml 
using stylesheetC.xsl: --&gt;
&lt;xslt:Stylesheet rdf:about="stylesheetC.xsl"&gt;
    &lt;xslt:version&gt;1.0&lt;/xslt:version&gt;
&lt;/xslt:Stylesheet&gt;
&lt;xslt:Processor rdf:ID="proc01"&gt;
    &lt;xslt:vendor rdf:resource="http://www.saxonica.com/"/&gt;
    &lt;xslt:productName&gt;SAXON&lt;/xslt:productName&gt;
    &lt;xslt:productVersion&gt;PE 9.3.0.5&lt;/xslt:productVersion&gt;
&lt;/xslt:Processor&gt;
&lt;xslt:Binding rdf:ID="alpha"&gt;
    &lt;xslt:value&gt;Y&lt;/xslt:value&gt;
&lt;/xslt:Binding&gt;
&lt;xslt:Transformation rdf:ID="overall"&gt;
    &lt;xslt:source rdf:resource="file:/C:/Users/Ashley/Desktop/global_001/input.xml"/&gt;
    &lt;xslt:stylesheet rdf:resource="stylesheetC.xsl"/&gt;
    &lt;xslt:processor rdf:resource="#proc01"/&gt;
    &lt;xslt:binding rdf:resource="#alpha"/&gt;
&lt;/xslt:Transformation&gt;</textual></programlisting></figure></para><para class="po-block e142 e142"><textual class="po-textual">Like the overall transformation process, template-level provenance heavily uses the XSLT module for OPMV. Here, each </textual><code class="po-atom e143 e143"><textual class="po-textual">xslt:Transformation</textual></code><textual class="po-textual"> points to an </textual><code class="po-atom e144 e144"><textual class="po-textual">xslt:Template</textual></code><textual class="po-textual"> artifact, which could be of either subtype </textual><code class="po-atom e145 e145"><textual class="po-textual">xslt:MatchedTemplate</textual></code><textual class="po-textual"> or </textual><code class="po-atom e146 e146"><textual class="po-textual">xslt:NamedTemplate</textual></code><textual class="po-textual">. The edge between the two is </textual><code class="po-atom e147 e147"><textual class="po-textual">xslt:used</textual></code><textual class="po-textual">. If the template firing was triggered by </textual><code class="po-atom e148 e148"><textual class="po-textual">xsl:apply-templates</textual></code><textual class="po-textual">, then it also contains a reference to the source node to which the template was matched. Any template, and thus any transformation, might contain parameters or variables, and thus, bindings. Unlike stylesheet bindings, a template parameter of the same name - but different </textual><code class="po-atom e149 e149"><textual class="po-textual">rdf:ID</textual></code><textual class="po-textual">! - can carry a different value every time the template is run. </textual><figure class="po-container e150 e150"><title class="po-block e151 e151"><textual class="po-textual">Provenance at the template level</textual></title><mediaobject class="po-container e152 e152"><imageobject class="po-container e153 e153"><imagedata class="po-meta e154 e154" fileref="../../../vol8/graphics/Clark01/Clark01-003.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><figure class="po-container e155 e155"><title class="po-block e156 e156"><textual class="po-textual">Sample template-level provenance documentation (provenance.rdf)</textual></title><programlisting class="po-block e157 e157" xml:space="preserve"><textual class="po-textual">&lt;!-- Template-level provenance: --&gt;
&lt;xslt:Template rdf:about="stylesheetC.xsl#art_t1"&gt;
    &lt;rdfs:label&gt;mode='#default', match='/', name=''&lt;/rdfs:label&gt;
    &lt;rdfs:comment&gt;&amp;lt;xsl:template match='/'&amp;gt;
    &amp;lt;html&amp;gt;
        &amp;lt;head&amp;gt;
            &amp;lt;meta http-equiv='Content-Type' content='text/html; charset=UTF-8'&amp;gt;&amp;lt;/meta&amp;gt;
            &amp;lt;title&amp;gt;Provenance&amp;lt;/title&amp;gt;
        &amp;lt;/head&amp;gt;
        &amp;lt;xsl:apply-templates&amp;gt;&amp;lt;/xsl:apply-templates&amp;gt;
    &amp;lt;/html&amp;gt;
&amp;lt;/xsl:template&amp;gt;&lt;/rdfs:comment&gt;
    &lt;opmv:wasEncodedBy rdf:resource="stylesheetC.xsl"/&gt;
&lt;/xslt:Template&gt;
&lt;xslt:Template rdf:about="stylesheetC.xsl#art_t2"&gt;
    &lt;rdfs:label&gt;mode='#default', match='compute', name=''&lt;/rdfs:label&gt;
    &lt;rdfs:comment&gt;&amp;lt;xsl:template match='compute'&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;xsl:apply-templates&amp;gt;&amp;lt;/xsl:apply-templates&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/xsl:template&amp;gt;&lt;/rdfs:comment&gt;
    &lt;opmv:wasEncodedBy rdf:resource="stylesheetC.xsl"/&gt;
&lt;/xslt:Template&gt;
&lt;xslt:Transformation rdf:ID="pr_d1-1"&gt;
    &lt;rdfs:label&gt;Template art_t1 applied&lt;/rdfs:label&gt;
    &lt;xslt:source rdf:resource="file:/C:/Users/Ashley/Desktop/global_001/input.xml#"/&gt;
    &lt;xslt:used&gt;
        &lt;xslt:MatchedTemplate rdf:about="stylesheetC.xsl#art_t1"/&gt;
    &lt;/xslt:used&gt;
    &lt;xslt:processor rdf:resource="#proc01"/&gt;
    &lt;opmv:wasTriggeredBy rdf:resource="#overall"/&gt;
&lt;/xslt:Transformation&gt;
&lt;xslt:Transformation rdf:ID="pr_d1e3-2"&gt;
    &lt;rdfs:label xmlns=""&gt;Template art_t2 applied&lt;/rdfs:label&gt;
    &lt;xslt:source
        rdf:resource="file:/C:/Users/Ashley/Desktop/global_001/input.xml#/test[1]/compute[1]"/&gt;
    &lt;xslt:used&gt;
        &lt;xslt:MatchedTemplate rdf:about="stylesheetC.xsl#art_t2"/&gt;
    &lt;/xslt:used&gt;
    &lt;xslt:processor rdf:resource="#proc01"/&gt;
    &lt;opmv:wasTriggeredBy rdf:resource="#pr_d1-1"/&gt;
&lt;/xslt:Transformation&gt;</textual></programlisting></figure></para></section><section class="po-hcontainer e158 e158"><title class="po-block e159 e159"><textual class="po-textual">Layering code for provenance</textual></title><para class="po-block e160 e160"><textual class="po-textual">The job of stylesheet B is to carry the same structure as stylesheet A, so that for any input document, an XSLT processor will choose the same transformation step for either stylesheet. However, the structure needed to accurately mirror stylesheet A depends on the granularity expectations. If stylesheet B only needs to capture file-level granularity, the XSLT code only requires information about the input document artifact and the processor agent. On the other hand, template-level granularity would require stylesheet B to maintain the same templates with the same attributes and the same template calls or matches. Currently, the stylesheet B keeps only those elements from stylesheet A which are essential to the structure of the stylesheet (such as </textual><code class="po-atom e161 e161"><textual class="po-textual">xsl:template</textual></code><textual class="po-textual">), or which are needed to determine parameter or variable bindings. The more provenance required, the more stylesheet B will come to resemble stylesheet A. However, stylesheet B keeps this structure only to accurately represent the process of obtaining output.xml in step 2.</textual><footnote class="po-popup e162 e162"><para class="po-block e163 e163"><textual class="po-textual">As provenance becomes increasingly fine-grained, other elements will be left in as well.</textual></para></footnote></para><para class="po-block e164 e164"><textual class="po-textual">The meta-stylesheet is simply a means to create stylesheet B. The meta-stylesheet passes the OPMV base structures to the meta'd stylesheet. The stylesheet artifact, and template artifacts must be generated at this step. The meta-stylesheet also sets up the XSLT code for the transformation processes and artifacts which must be generated when stylesheet B is used with input, so as to accurately represent the transformation at step 2.</textual></para><para class="po-block e165 e165"><textual class="po-textual">As an example, the next figure shows a simple comment taken from the beginning of the provenance output. The two figures after that show the XSLT code needed to generate that comment. The meta-stylesheet must layer </textual><code class="po-atom e166 e166"><textual class="po-textual">xsl:comment</textual></code><textual class="po-textual"> within an </textual><code class="po-atom e167 e167"><textual class="po-textual">xsl:element</textual></code><textual class="po-textual"> so that the comment appears in provenance.rdf and not stylesheet B. The meta-stylesheet also passes the name of stylesheet A to stylesheet B, since stylesheet B otherwise would have no knowledge of the parallel stylesheet. Stylesheet B, however, must find the </textual><code class="po-atom e168 e168"><textual class="po-textual">base-uri()</textual></code><textual class="po-textual"> of the input document and generate the comment for provenance.rdf.</textual></para><figure class="po-container e169 e169"><title class="po-block e170 e170"><textual class="po-textual">Selection from provenance.rdf</textual></title><programlisting class="po-block e171 e171" xml:space="preserve"><textual class="po-textual">&lt;!-- Provenance for the transformation of file:/C:/Users/Ashley/Desktop/global_001/input.xml 
using stylesheetC.xsl: --&gt;</textual></programlisting></figure><figure class="po-container e172 e172"><title class="po-block e173 e173"><textual class="po-textual">Selection from stylesheet B.xsl</textual></title><programlisting class="po-block e174 e174" xml:space="preserve"><textual class="po-textual">&lt;xsl:comment&gt; Provenance for the transformation of &lt;xsl:value-of select="base-uri()"/&gt; 
using stylesheetC.xsl: &lt;/xsl:comment&gt;</textual></programlisting></figure><figure class="po-container e175 e175"><title class="po-block e176 e176"><textual class="po-textual">Selection from the meta-stylesheet (metaRDF.xsl)</textual></title><programlisting class="po-block e177 e177" xml:space="preserve"><textual class="po-textual">&lt;xsl:element name="xsl:comment"&gt;
    &lt;xsl:text&gt; Provenance for the transformation of &lt;/xsl:text&gt;
    &lt;xsl:element name="xsl:value-of"&gt;
        &lt;xsl:attribute name="select"&gt;base-uri()&lt;/xsl:attribute&gt;
    &lt;/xsl:element&gt;
    &lt;xsl:text&gt; using &lt;/xsl:text&gt;
    &lt;xsl:value-of select="$regularStylesheet"/&gt;
    &lt;xsl:text&gt;: &lt;/xsl:text&gt;
&lt;/xsl:element&gt;</textual></programlisting></figure><para class="po-block e178 e178"><textual class="po-textual">Essentially, the meta-stylesheet has knowledge of stylesheet A; the version of XSLT and the files it uses; and the number of and identifying information regarding the templates. The stylesheet B will be able to grab information about the input document, the specifics of an individual transformation, and the XSLT processor. The meta-stylesheet sets up stylesheet B to take that kind of information and funnel it into the provenance output.</textual></para></section><section class="po-hcontainer e179 e179"><title class="po-block e180 e180"><textual class="po-textual">Requirements for a meta-stylesheet</textual></title><para class="po-block e181 e181"><textual class="po-textual">Before it does anything else, the meta-stylesheet matches the root of its input and creates an copy of stylesheet A, only with </textual><code class="po-atom e182 e182"><textual class="po-textual">rdf:ID</textual></code><textual class="po-textual">s attached to the templates. "Stylesheet C" is unnecessary for the provenance workflow above, but it may be useful for linking relevant template code to the provenance template artifacts.</textual></para><para class="po-block e183 e183"><textual class="po-textual">After stylesheet C is taken care of, the meta-stylesheet starts on stylesheet B. However, stylesheet A might fall into one of three categories: </textual><itemizedlist class="po-table e184 e184"><listitem class="po-container e185 e185"><para class="po-block e186 e186"><textual class="po-textual">there is no template matching root (default template rules apply); </textual></para></listitem><listitem class="po-container e187 e187"><para class="po-block e188 e188"><textual class="po-textual">there is a template which matches root and only root; </textual></para></listitem><listitem class="po-container e189 e189"><para class="po-block e190 e190"><textual class="po-textual">or, there is a template which matches root as well as other nodes.</textual></para></listitem></itemizedlist><textual class="po-textual">Since the meta-stylesheet must keep the structure of stylesheet A as well as preparing for eventual RDF/XML output, the </textual><code class="po-atom e191 e191"><textual class="po-textual">rdf:Graph</textual></code><textual class="po-textual"> container element must be carefully placed. In the first case, a root template is created. In the second case, stylesheet A's root template can be reduced to provenance-ready structure, but with the template node's descendants wrapped in the </textual><code class="po-atom e192 e192"><textual class="po-textual">rdf:Graph</textual></code><textual class="po-textual">. The third case is slightly more difficult. The original template must have the root node stripped from </textual><code class="po-atom e193 e193"><textual class="po-textual">@match</textual></code><textual class="po-textual"> before it can be copied forward into stylesheet B, and a new template created to match only root, with the same instructions wrapped in the </textual><code class="po-atom e194 e194"><textual class="po-textual">rdf:Graph</textual></code><textual class="po-textual">. It's also worth noting that each template in stylesheet B will be prepared with an </textual><code class="po-atom e195 e195"><textual class="po-textual">rdf:about</textual></code><textual class="po-textual"> with a link to a template in stylesheet C. In the third case, both template artifacts derived from the original will point to the same template in stylesheet C. </textual></para><para class="po-block e196 e196"><textual class="po-textual">Placing the root element is also important because there is no better place to record the file-level provenance. When the processor matches the root node to any template (or built-in rule, as the case may be), the stylesheet and input file artifacts are already known, as are the processor agent and stylesheet-level parameters and variables.</textual><figure class="po-container e197 e197"><title class="po-block e198 e198"><textual class="po-textual">Code for the overall transformation process (metaRDF.xsl)</textual></title><programlisting class="po-block e199 e199" xml:space="preserve"><textual class="po-textual">&lt;!-- Set up the xslt:Transformation for $regularStylesheet and its input. --&gt;
&lt;xslt:Transformation rdf:ID="overall"&gt;
    &lt;xslt:source&gt;
        &lt;xsl:element name="xsl:attribute"&gt;
            &lt;xsl:attribute name="name"&gt;rdf:resource&lt;/xsl:attribute&gt;
            &lt;xsl:element name="xsl:value-of"&gt;
                &lt;xsl:attribute name="select"&gt;base-uri()&lt;/xsl:attribute&gt;
            &lt;/xsl:element&gt;
        &lt;/xsl:element&gt;
    &lt;/xslt:source&gt;
    &lt;xslt:stylesheet&gt;
        &lt;xsl:attribute name="rdf:resource"&gt;
            &lt;xsl:value-of select="$regularStylesheet"/&gt;
        &lt;/xsl:attribute&gt;
    &lt;/xslt:stylesheet&gt;
    &lt;xslt:processor&gt;
        &lt;xsl:attribute name="rdf:resource"&gt;
            &lt;xsl:text&gt;#proc01&lt;/xsl:text&gt;
        &lt;/xsl:attribute&gt;
    &lt;/xslt:processor&gt;
    &lt;xsl:for-each select="/(xsl:transform | xsl:stylesheet)/xsl:param"&gt;
        &lt;xslt:binding&gt;
            &lt;xsl:attribute name="rdf:resource"&gt;
                &lt;xsl:text&gt;#&lt;/xsl:text&gt;
                &lt;xsl:value-of select="@name"/&gt;
            &lt;/xsl:attribute&gt;
        &lt;/xslt:binding&gt;
    &lt;/xsl:for-each&gt;
&lt;/xslt:Transformation&gt;</textual></programlisting></figure><textual class="po-textual">The template artifacts can be generated here by using </textual><code class="po-atom e200 e200"><textual class="po-textual">xsl:for-each</textual></code><textual class="po-textual">, so long as one is willing to accept that template artifacts may be listed that are not referenced in any transformation.</textual></para><para class="po-block e201 e201"><textual class="po-textual">The processes for templates firing should be generated during the transformation of stylesheet B, thus guaranteeing a chain of template-level processes. A template-level process is triggered by another process - either the file-level process, or by an </textual><code class="po-atom e202 e202"><textual class="po-textual">xsl:apply-templates</textual></code><textual class="po-textual"> or </textual><code class="po-atom e203 e203"><textual class="po-textual">xsl:call-template</textual></code><textual class="po-textual"> during another template's firing. If a template is called or matched, OPMV contains two Template subclasses - </textual><code class="po-atom e204 e204"><textual class="po-textual">xslt:MatchedTemplate</textual></code><textual class="po-textual"> and </textual><code class="po-atom e205 e205"><textual class="po-textual">xslt:CalledTemplate</textual></code><textual class="po-textual">. For a process to correctly reference the use of a template artifact, the meta-stylesheet must set up stylesheet B to pass along information about the 'parent' template. I used tunneled parameters to accomplish this - each template in stylesheet B gains two parameters, called 'provTemplate' and 'provTrigger'. 'provTemplate' identifies the XSLT instruction which initiated the current template process, and 'provTrigger' passes along the identifier for the 'parent' template. The meta-stylesheet must assign </textual><code class="po-atom e206 e206"><textual class="po-textual">xsl:with-param</textual></code><textual class="po-textual"> instructions to each </textual><code class="po-atom e207 e207"><textual class="po-textual">xsl:apply-templates</textual></code><textual class="po-textual"> and </textual><code class="po-atom e208 e208"><textual class="po-textual">xsl:call-template</textual></code><textual class="po-textual">.</textual><figure class="po-container e209 e209"><title class="po-block e210 e210"><textual class="po-textual">Code to track template parentage with xsl:call-template (metaRDF.xsl)</textual></title><programlisting class="po-block e211 e211" xml:space="preserve"><textual class="po-textual">&lt;xsl:template match="xsl:call-template"&gt;
    &lt;xsl:copy&gt;
        &lt;xsl:copy-of select="@*"/&gt;
        &lt;xsl:element name="xsl:with-param"&gt;
            &lt;xsl:attribute name="name"&gt;provTemplate&lt;/xsl:attribute&gt;
            &lt;xsl:attribute name="tunnel"&gt;yes&lt;/xsl:attribute&gt;
            &lt;xsl:text&gt;called&lt;/xsl:text&gt;
        &lt;/xsl:element&gt;
        &lt;xsl:element name="xsl:with-param"&gt;
            &lt;xsl:attribute name="name"&gt;provTrigger&lt;/xsl:attribute&gt;
            &lt;xsl:attribute name="tunnel"&gt;yes&lt;/xsl:attribute&gt;
            &lt;xsl:element name="xsl:value-of"&gt;
                &lt;xsl:element name="xsl:text"&gt;#pr_&lt;/xsl:element&gt;
                &lt;xsl:element name="xsl:value-of"&gt;
                    &lt;xsl:attribute name="select"&gt;generate-id()&lt;/xsl:attribute&gt;
                &lt;/xsl:element&gt;
                &lt;xsl:element name="xsl:text"&gt;-&lt;/xsl:element&gt;
                &lt;xsl:number count="xsl:template" level="any"/&gt;
            &lt;/xsl:element&gt;
        &lt;/xsl:element&gt;
        &lt;xsl:apply-templates/&gt;
    &lt;/xsl:copy&gt;
&lt;/xsl:template&gt;</textual></programlisting></figure></para></section></section><section class="po-hcontainer e212 e212"><title class="po-block e213 e213"><textual class="po-textual">Future work</textual></title><para class="po-block e214 e214"><textual class="po-textual">The meta-stylesheet has been successfully created, and it can provide file- and template-level provenance documentation for XSL transformations, as shown in the examples above. Still, there are a number of questions still left to explore regarding the meta-stylesheet method and XSLT provenance documentation. For example, how much provenance collection is too much? Further work can be done to include finer levels of granularity, but it probably isn't necessary to document every XSLT instruction. What about coarser granularity? If XSLTs are used in a workflow, what kinds of provenance documentation can be generated, and what should it look like?</textual></para><para class="po-block e215 e215"><textual class="po-textual">Unfortunately, the meta-stylesheet method does not entirely fulfill the assumptions listed previously, especially in ease of use. No matter what version of XSLT is used by stylesheet A, both the meta-stylesheet and stylesheet B currently require the use of an XSLT 2.0 processor. This certainly limits the number of processors able to make use of this method without fuss. Further, the meta-stylesheet has only undergone testing using the Saxon HE and PE processors shipped with oXygen. More testing is needed to ensure that the approach works in broader contexts, with other tools and XSLT 2.0 processors.</textual></para><para class="po-block e216 e216"><textual class="po-textual">But the biggest problem with this approach is the meta-stylesheet's inability to say anything concrete about the output of stylesheet A. Neither the meta-stylesheet nor stylesheet B has knowledge of the actual contents of output.xml, although a good estimation can probably be made by modifying the structure of stylesheet B. It is unclear whether this is a beneficial side-effect (as in workflows where intermediate outputs may not be available) or something that should be fixed.</textual></para><para class="po-block e217 e217"><textual class="po-textual">Besides attempting to solve these questions, I continue to test the meta-stylesheet against a greater number of input stylesheets, and to include other types of provenance information, such as the template descriptions given by the oXygen Editor. Even at this date, this project shows that an impressive amount of provenance information can be generated with just XSLT.</textual></para></section><section class="po-hcontainer e218 e218"><title class="po-block e219 e219"><textual class="po-textual">Acknowledgements</textual></title><para class="po-block e220 e220"><textual class="po-textual">Many, many thanks to Wendell Piez for coming up with the idea for a meta-stylesheet, as well as providing guidance and technical help along the way. Thanks also to Allen Renear, Megan Senseney, and my colleagues at CIRSS for their advice and unflagging support.</textual></para><para class="po-block e221 e221"><textual class="po-textual">This project was supported by DCEP-H, an initiative to extend the Data Curation Education Program to the humanities. Funded by IMLS Grant RE-05-08-0062-08, DCEP-H was based at the Center for Informatics Research in Science and Scholarship at the University of Illinois at Urbana-Champaign.</textual></para></section><bibliography class="po-hcontainer e222 e222"><title class="po-block e223 e223"><textual class="po-textual">Bibliography</textual></title><bibliomixed class="po-block e224 e224" xml:id="babeu11" xreflabel="Babeu, 2011"><textual class="po-textual">Babeu, A. (2011). "Rome wasn't digitized in a day": Building a cyberinfrastructure for digital classics. Washington, D.C.: Council on Library and Information Resources. Accessed at </textual><link class="po-inline e225 e225" xlink:actuate="onRequest" xlink:href="http://www.clir.org/pubs/reports/pub150/pub150.pdf" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.clir.org/pubs/reports/pub150/pub150.pdf</textual></link></bibliomixed><bibliomixed class="po-block e226 e226" xml:id="belhajjame12" xreflabel="Belhajjame et al., 2012"><textual class="po-textual">Belhajjame, K., Deus, H., Garijo, D., Klyne, G., Missier, P., Soiland-Reyes, S., Zednik, S. (2012). PROV Model Primer, W3C Working Draft 03 May 2012. Accessed at </textual><link class="po-inline e227 e227" xlink:actuate="onRequest" xlink:href="http://www.w3.org/TR/2012/WD-prov-primer-20120503/" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.w3.org/TR/2012/WD-prov-primer-20120503/</textual></link></bibliomixed><bibliomixed class="po-block e228 e228" xml:id="bunemankhannatan00" xreflabel="Buneman, Khanna, &amp; Tan, 2000"><textual class="po-textual">Buneman, P., Khanna, S., &amp; Tan, W. (2000). Data provenance: Some basic issues. In Kapoor, S., &amp; Prasad, S (Eds.), </textual><emphasis class="po-inline e229 e229" role="ital"><textual class="po-textual">Lecture Notes in Computer Science : Vol. 1974. FST TCS 2000: Foundations of Software Technology and Theoretical Computer Science</textual></emphasis><textual class="po-textual"> (pp. 87-93). Berlin, Germany: Springer. doi:</textual><biblioid class="po-atom e230 doi e230"><textual class="po-textual">10.1007/3-540-44450-5_6</textual></biblioid></bibliomixed><bibliomixed class="po-block e231 e231" xml:id="fear11" xreflabel="Fear, 2011"><textual class="po-textual">Fear, K. (2011). "You made it, you take care of it": Data management as personal information management. </textual><emphasis class="po-inline e232 e232" role="ital"><textual class="po-textual">The International Journal of Digital Curation,</textual></emphasis><textual class="po-textual"> 6(2), 53-77. Accessed at </textual><link class="po-inline e233 e233" xlink:actuate="onRequest" xlink:href="http://www.ijdc.net/index.php/ijdc/article/view/183/250" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.ijdc.net/index.php/ijdc/article/view/183/250</textual></link></bibliomixed><bibliomixed class="po-block e234 e234" xml:id="kusteretal11" xreflabel="KÃ¼ster, Ludwig, Al-Hajj, &amp; Selig, 2011"><textual class="po-textual">KÃ¼ster, M., Ludwig, C., Al-Hajj, Y. &amp; Selig, T. (2011). TextGrid provenance tools for digital humanities ecosystems. </textual><emphasis class="po-inline e235 e235" role="ital"><textual class="po-textual">Proceedings of the 5th IEEE International Conference on Digital Ecosystems and Technologies 2011</textual></emphasis><textual class="po-textual">. (pp. 317-323). Daejeon, Korea: IEEE. doi:</textual><biblioid class="po-atom e236 doi e236"><textual class="po-textual">10.1109/DEST.2011.5936615</textual></biblioid></bibliomixed><bibliomixed class="po-block e237 e237" xml:id="moreau10" xreflabel="Moreau et al., 2010"><textual class="po-textual">Moreau, L., Clifford, B., Freire, J., Futrelle, J., Gil, Y., Groth, P., ..., Van den Bussche, J. (2010). The Open Provenance Model core specification (v1.1). Accessed at </textual><link class="po-inline e238 e238" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://eprints.ecs.soton.ac.uk/21449/</textual></link></bibliomixed><bibliomixed class="po-block e239 e239" xml:id="sweeney08" xreflabel="Sweeney, 2008"><textual class="po-textual">Sweeney, S. (2008). The ambiguous origins of the archival principle of "provenance". </textual><emphasis class="po-inline e240 e240" role="ital"><textual class="po-textual">Libraries &amp; the Cultural Record</textual></emphasis><textual class="po-textual"> 43(2), 193-213. University of Texas Press. doi:</textual><biblioid class="po-atom e241 doi e241"><textual class="po-textual">10.1353/lac.0.0017</textual></biblioid></bibliomixed><bibliomixed class="po-block e242 e242" xml:id="zhao10" xreflabel="Zhao, 2010"><textual class="po-textual">Zhao, Jun. (2010). Open Provenance Model Vocabulary specification. Accessed at </textual><link class="po-inline e243 e243" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://purl.org/net/opmv/ns-20101006</textual></link><textual class="po-textual">.</textual></bibliomixed></bibliography></article></classedDocument>