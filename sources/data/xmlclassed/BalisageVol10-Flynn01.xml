<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.3"><title class="po-block e1 e1"><textual class="po-textual">Markup to generate markup to generate markup</textual></title><subtitle class="po-block e2 e2"><textual class="po-textual">Using XML to create and maintain LaTeX packages and
    classes</textual></subtitle><info class="po-record e3 e3"><confgroup class="po-record e4 e4"><conftitle class="po-field e5 e5"><textual class="po-textual">Balisage: The Markup Conference 2013</textual></conftitle><confdates class="po-field e6 e6"><textual class="po-textual">August 6 - 9, 2013</textual></confdates></confgroup><abstract class="po-container e7 e7"><para class="po-block e8 e8"><textual class="po-textual">This paper presents an experiment in using DocBook5 to
	mark up and maintain LaTeX classes and packages in the
	literate-programming style, using XSLT2 to generate the
	standard format of distribution files suitable for the CTAN
	repository. It identifies several benefits in automation and
	reusability of code; a number of areas where a customisation
	layer for DocBook would be useful; and a few unresolved
	restrictions that package and class authors or maintainers
	would need to be aware of when editing XML.</textual></para></abstract><author class="po-record e9 e9"><personname class="po-record e10 e10"><firstname class="po-field e11 e11"><textual class="po-textual">Peter</textual></firstname><surname class="po-field e12 e12"><textual class="po-textual">Flynn</textual></surname></personname><personblurb class="po-container e13 e13"><para class="po-block e14 e14"><textual class="po-textual">Peter Flynn runs the Electronic Publishing Group in IT
	  Services at University College Cork. He is a graduate of the
	  London College of Printing and the University of
	  Westminster. He worked for the Printing and Publishing
	  Industry Training Board and for United Information Services
	  as IT consultant before joining UCC as Project Manager for
	  academic and research computing. In 1990 he installed
	  Ireland's first Web server and since then has been
	  concentrating on electronic publishing support. He was
	  Secretary of the TeX Users Group, and a member of the IETF
	  Working Group on HTML and the W3C XML SIG, and he has
	  published books on HTML, SGML/XML, and LaTeX. Peter is
	  editor of the XML FAQ and an irregular contributor to
	  conferences and journals in electronic publishing and
	  Humanities computing. He is currently completing a part-time
	  PhD in user interfaces with the Human Factors Research Group
	  in UCC. He maintains a technical blog at
	  http://blogs.silmaril.ie/peter</textual></para></personblurb></author><legalnotice class="po-container e15 e15"><para class="po-block e16 e16"><textual class="po-textual">Article copyright © 2013 by Silmaril Consultants.</textual></para><para class="po-block e17 e17"><textual class="po-textual">Application code copyright © 2013 by Peter Flynn, released under the terms of the LaTeX Project Public License.</textual></para></legalnotice></info><section class="po-hcontainer e18 e18"><title class="po-block e19 e19"><textual class="po-textual">Background</textual></title><para class="po-block e20 e20"><textual class="po-textual">The LaTeX document preparation system provides a framework
      of commands (markup) for the TeX typesetting program, designed
      to shield the writer from the need to know the internal
      programming required to format a document (</textual><xref class="po-milestone e21 e21" linkend="Lamport1986"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, </textual><xref class="po-milestone e22 e22" linkend="Lamport1994"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">). It has been in widespread use in
      scientific, technical, and academic publishing since 1986, and
      more recently has experienced growth in the Humanities and in
      general publishing (</textual><xref class="po-milestone e23 e23" linkend="Boggio2006"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, </textual><xref class="po-milestone e24 e24" linkend="Ubuntu2012"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).</textual></para><para class="po-block e25 e25"><textual class="po-textual">LaTeX relies for its extensibility on a library of over
      4,000 style packages and document classes, which provide additional
      markup functionality, layouts, typography, and variant behaviour. The
      </textual><code class="po-atom e26 e26"><textual class="po-textual">ltxdoc</textual></code><textual class="po-textual"> document class supplies features for maintaining
      these packages and classes in a literate programming style using
      interleaved code and annotation with end-user documentation in a
      single-file wrapper. The syntax to achieve this, however, is
      complex, as documentation must be shielded from interpretation
      as code, and vice versa.</textual></para><section class="po-hcontainer e27 e27"><title class="po-block e28 e28"><textual class="po-textual">Packages and Classes</textual></title><para class="po-block e29 e29"><textual class="po-textual">A </textual><quote class="po-inline e30 e30"><textual class="po-textual">document class</textual></quote><textual class="po-textual"> is a collection of macros
	providing both formatting and markup for a specific class of
	documents, such as the articles for a particular journal, the
	books by a particular publisher, the theses for a particular
	university, or any of over 400 other types of document. It is
	broadly equivalent to a DTD or Schema, although without
	prescription, and with formatting specifications embedded. The default
	document classes (report, book, article, and letter) are
	stylistically minimalist but provide sufficient markup for
	draft purposes.</textual></para><para class="po-block e31 e31"><textual class="po-textual">A </textual><quote class="po-inline e32 e32"><textual class="po-textual">style package</textual></quote><textual class="po-textual"> is a collection of macros
	providing a specific variant on formatting, such as hyperlinks
	in a PDF, the styling of footnotes or references, the use of
	additional typefaces, or any of over 3,600 other typographic
	or markup possibilities. There is no direct equivalent in the
	XML field, but a package can be regarded as broadly equivalent
	to a CSS or XSLT2 fragment, implementing a particular
	formatting requirement.</textual></para><para class="po-block e33 e33"><textual class="po-textual">Document classes and packages are typically distributed as
	DocTeX (</textual><code class="po-atom e34 e34"><textual class="po-textual">.dtx</textual></code><textual class="po-textual">) files, which contain the LaTeX
	code implementing the features, interleaved with annotation
	in a literate programming manner, plus user documentation
	about how to use the additional markup provided (</textual><xref class="po-milestone e35 e35" linkend="Carlisle2007"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">). An installer (</textual><code class="po-atom e36 e36"><textual class="po-textual">.ins</textual></code><textual class="po-textual">)
	file uses LaTeX to extract the code as a class
	(</textual><code class="po-atom e37 e37"><textual class="po-textual">.cls</textual></code><textual class="po-textual">) or style package (</textual><code class="po-atom e38 e38"><textual class="po-textual">.sty</textual></code><textual class="po-textual">) file
	from the </textual><code class="po-atom e39 e39"><textual class="po-textual">.dtx</textual></code><textual class="po-textual"> file, and LaTeX can then be run
	on the </textual><code class="po-atom e40 e40"><textual class="po-textual">.dtx</textual></code><textual class="po-textual"> file directly to produce both user
	documentation and code annotation.</textual><footnote class="po-popup e41 e41"><para class="po-block e42 e42"><textual class="po-textual">A few older packages are still distributed as raw
	    </textual><code class="po-atom e43 e43"><textual class="po-textual">.cls</textual></code><textual class="po-textual"> or </textual><code class="po-atom e44 e44"><textual class="po-textual">.sty</textual></code><textual class="po-textual"> files with
	    documentation in comments.</textual></para></footnote></para><para class="po-block e45 e45"><textual class="po-textual">This method has proved a very reliable and
	compact means of distribution, but at the cost of some
	additional complexity in the construction of the master
	</textual><code class="po-atom e46 e46"><textual class="po-textual">.dtx</textual></code><textual class="po-textual"> file:</textual></para><itemizedlist class="po-table e47 e47"><listitem class="po-container e48 e48"><para class="po-block e49 e49"><textual class="po-textual">documentation and annotation must be armored against
	    extraction as code by prefixing each line with
	    percent-space (</textual><code class="po-atom e50 e50"><textual class="po-textual">%␣</textual></code><textual class="po-textual">);</textual></para></listitem><listitem class="po-container e51 e51"><para class="po-block e52 e52"><textual class="po-textual">macro code must be identified for extraction by
	    prefixing the </textual><code class="po-atom e53 e53"><textual class="po-textual">\begin</textual></code><textual class="po-textual"> and </textual><code class="po-atom e54 e54"><textual class="po-textual">\end</textual></code><textual class="po-textual">
	    commands (equivalent to start and end tags) with percent
	    and exactly four spaces (</textual><code class="po-atom e55 e55"><textual class="po-textual">%␣␣␣␣</textual></code><textual class="po-textual">);</textual></para></listitem><listitem class="po-container e56 e56"><para class="po-block e57 e57"><textual class="po-textual">the regular comment character (</textual><code class="po-atom e58 e58"><textual class="po-textual">%</textual></code><textual class="po-textual">) must 
	    therefore be treated specially in some circumstances (doubled
	    or tripled);</textual></para></listitem><listitem class="po-container e59 e59"><para class="po-block e60 e60"><textual class="po-textual">there are special tags (in pointy brackets!) like
	    </textual><code class="po-atom e61 e61"><textual class="po-textual">%&lt;*driver&gt;</textual></code><textual class="po-textual"> and
	    </textual><code class="po-atom e62 e62"><textual class="po-textual">%&lt;/driver&gt;</textual></code><textual class="po-textual"> to identify certain
	    sections or lines of the file that need extracting or
	    ignoring in certain circumstances.</textual></para></listitem></itemizedlist><para class="po-block e63 e63"><textual class="po-textual">Against this must be set the advantages of robustness once
	constructed; the availability of all LaTeX facilities for
	writing and formatting the documentation; some added
	document-management features (version control,
	change-recording, checksumming, indexing of commands used in
	the code, etc), and the extensive supporting documentation
	(</textual><xref class="po-milestone e64 e64" linkend="LaTeX2006"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, </textual><xref class="po-milestone e65 e65" linkend="Mittelbach2004"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">,
	</textual><xref class="po-milestone e66 e66" linkend="Lehmann2011"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).</textual></para></section><section class="po-hcontainer e67 e67"><title class="po-block e68 e68"><textual class="po-textual">Automation requirement</textual></title><para class="po-block e69 e69"><textual class="po-textual">In 2005, I undertook to create a new thesis document class
	in my university which would implement stricter controls on
	the content and sequence of front matter (title page, legal,
	table of contents, declaration of originality, etc), and
	particularly on the naming and identity of schools,
	departments and research centers, and the bibliographic
	reference format used by each. Many users had become
	accustomed to designing their own title page, and to the
	re-wording of the names of their unit to suit their own
	perceptions or requirements. In some cases this involved
	inventing entirely new department names or descriptions of
	their degrees, which conflicted with the university's
	statutory requirements. While the new class would initially
	only affect the title page and preliminaries of a thesis, this
	is exactly where the Library catalog staff look for the
	metadata (in the case of electronic submissions, the PDF
	metadata is also required to provide the same
	information).</textual></para><para class="po-block e70 e70"><textual class="po-textual">The data on course names and codes, the abbreviations and
	full titles of degrees, and the official names of departments
	and centers were all available from the institutional
	database, but were subject to annual change, as there were
	complex and overlapping administrative and pedagogical
	requirements to be satisfied. This data needed to be converted
	to the parameter syntax used by LaTeX on an ongoing basis to
	make it usable as selectable options by users, so a more
	robust and programmatic solution was needed to automate the
	process. The data was already available in a consistent XML
	format, so XML and XSLT2 were obvious candidates for the task.
	As a long-time user of XML for documentation, I felt it would
	be an advantage from the maintenance point of view to use the
	same syntax and method for writing the documentation, and this
	led to the experiment in using DocBook and generating the
	</textual><code class="po-atom e71 e71"><textual class="po-textual">.dtx</textual></code><textual class="po-textual"> file with XSLT2.</textual></para><para class="po-block e72 e72"><textual class="po-textual">Beyond the title page and the settings for margins and
	type size, the remainder of a student's thesis document would
	be largely unaffected, as LaTeX's </textual><code class="po-atom e73 e73"><textual class="po-textual">report</textual></code><textual class="po-textual">
	document class and existing packages already provided all the
	facilities needed. However, it had become clear from local
	LaTeX training sessions that some requirements of thesis
	writing would benefit from more automation, and that better
	use could be made of the layout specifications, which were,
	and remain, relatively lax (</textual><xref class="po-milestone e74 e74" linkend="Flynn2012"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">), so
	the decision was taken to experiment with using DocBook for
	the whole project.</textual></para></section></section><section class="po-hcontainer e75 e75"><title class="po-block e76 e76"><textual class="po-textual">Implementation</textual></title><para class="po-block e77 e77"><textual class="po-textual">The use of XSLT2 to generate XML from XML is standard
      practice, and its use to generate LaTeX from XML is also
      well-established. However, in this case, the resulting LaTeX
      (</textual><code class="po-atom e78 e78"><textual class="po-textual">.dtx</textual></code><textual class="po-textual">) was going to be used to generate more
      LaTeX code (the </textual><code class="po-atom e79 e79"><textual class="po-textual">.cls</textual></code><textual class="po-textual"> document), which itself
      would generate ancillary LaTeX files (Table of Contents,
      Index, etc) as well as the student's thesis final PDF.</textual></para><section class="po-hcontainer e80 e80"><title class="po-block e81 e81"><textual class="po-textual">Metadata</textual></title><para class="po-block e82 e82"><textual class="po-textual">A </textual><code class="po-atom e83 e83"><textual class="po-textual">.dtx</textual></code><textual class="po-textual"> file is made up of a number of
      well-defined sections:</textual></para><orderedlist class="po-table e84 e84"><listitem class="po-container e85 e85"><para class="po-block e86 e86"><textual class="po-textual">an initialization block;</textual></para></listitem><listitem class="po-container e87 e87"><para class="po-block e88 e88"><textual class="po-textual">the LaTeX Preamble for the documentation;</textual></para></listitem><listitem class="po-container e89 e89"><para class="po-block e90 e90"><textual class="po-textual">a character checksum table;</textual></para></listitem><listitem class="po-container e91 e91"><para class="po-block e92 e92"><textual class="po-textual">a change history;</textual></para></listitem><listitem class="po-container e93 e93"><para class="po-block e94 e94"><textual class="po-textual">an indexing control block;</textual></para></listitem><listitem class="po-container e95 e95"><para class="po-block e96 e96"><textual class="po-textual">the user documentation;</textual></para></listitem><listitem class="po-container e97 e97"><para class="po-block e98 e98"><textual class="po-textual">the annotated code;</textual></para></listitem><listitem class="po-container e99 e99"><para class="po-block e100 e100"><textual class="po-textual">any ancillary files to be distributed with the class
	  or package.</textual></para></listitem></orderedlist><para class="po-block e101 e101"><textual class="po-textual">The design of a DocBook document does not of course align
	directly with this, but there is provision in one form or
	another for most of it, and XSLT2 can easily vary the order of
	processing. The initial metadata (mostly effectivities) is
	stored in the </textual><code class="po-atom e102 e102"><textual class="po-textual">book</textual></code><textual class="po-textual"> root element start-tag:</textual></para><programlisting class="po-block e103 e103" xml:space="preserve"><textual class="po-textual">
&lt;book xml:id="uccthesis" version="1" revision="03" xml:lang="en"
  xml:base="ucc" remap="a4paper,12pt" arch="class" audience="lppl"
  condition="2009/09/24" conformance="LaTeX2e" os="all"
  security="2070" userlevel="cls" vendor="UCC" status="beta"&gt;</textual></programlisting><itemizedlist class="po-table e104 e104"><listitem class="po-container e105 e105"><para class="po-block e106 e106"><textual class="po-textual">The </textual><code class="po-atom e107 e107"><textual class="po-textual">xml:base</textual></code><textual class="po-textual"> specifies the ultimate
	  destination directory within TeX's installation tree;</textual></para></listitem><listitem class="po-container e108 e108"><para class="po-block e109 e109"><textual class="po-textual">The </textual><code class="po-atom e110 e110"><textual class="po-textual">remap</textual></code><textual class="po-textual"> attribute is [ab]used to hold 
	    document-class options for LaTeX so that the target
	    document format can be switched between US Letter and ISO
	    A4, and the base font size changed.</textual></para></listitem><listitem class="po-container e111 e111"><para class="po-block e112 e112"><textual class="po-textual">The </textual><code class="po-atom e113 e113"><textual class="po-textual">audience</textual></code><textual class="po-textual"> attribute is used to select
	    a boilerplate license document (here, the LaTeX Project
	    Public License).</textual></para></listitem><listitem class="po-container e114 e114"><para class="po-block e115 e115"><textual class="po-textual">The </textual><code class="po-atom e116 e116"><textual class="po-textual">security</textual></code><textual class="po-textual"> attribute holds a checksum
	    which is validated during LaTeX processing, and which
	    must be updated after changes to the code (or set to 0 to
	    disable it).</textual></para></listitem><listitem class="po-container e117 e117"><para class="po-block e118 e118"><textual class="po-textual">The </textual><code class="po-atom e119 e119"><textual class="po-textual">conformance</textual></code><textual class="po-textual"> and
	    </textual><code class="po-atom e120 e120"><textual class="po-textual">condition</textual></code><textual class="po-textual"> attributes hold the version and
	    date of LaTeX required.</textual></para></listitem></itemizedlist><para class="po-block e121 e121"><textual class="po-textual">The </textual><code class="po-atom e122 e122"><textual class="po-textual">info/cover</textual></code><textual class="po-textual"> element type was used to hold
	the document management data, principally the metadata, the
	lists of packages required by both the documentation and the
	class or package file itself; a file list for the manifest;
	and any setup commands for the documentation. The title,
	author, contact details, Abstract/Summary, and revision
	history are in the </textual><code class="po-atom e123 e123"><textual class="po-textual">info</textual></code><textual class="po-textual"> container in the
	conventional manner.</textual></para><para class="po-block e124 e124"><textual class="po-textual">Working from the DocTeX and </textual><code class="po-atom e125 e125"><textual class="po-textual">ltxdoc</textual></code><textual class="po-textual">
	specifications, with existing classes as examples, it was then
	possible to construct the </textual><code class="po-atom e126 e126"><textual class="po-textual">.dtx</textual></code><textual class="po-textual"> initialization
	block as a literal result template, using the ID and
	version values from the </textual><code class="po-atom e127 e127"><textual class="po-textual">book</textual></code><textual class="po-textual"> element's
	attributes. The preliminary LaTeX comments and the ‘driver’
	block are shielded from processing by a conditional which
	always evaluates to false:</textual></para><programlisting class="po-block e128 e128" xml:space="preserve"><textual class="po-textual">
% \iffalse meta-comment
%
% Extracted from uccthesis.xml
[...licensing and descriptive comment...]
% \fi
% \iffalse
%&lt;*driver&gt;
\ProvidesFile{uccthesis.dtx}
%&lt;/driver&gt;
%&lt;class&gt;\NeedsTeXFormat{LaTeX2e}[2009/09/24]
%&lt;class&gt;\ProvidesClass{uccthesis}[2012/12/18 v1.03 Typesetting a UCC thesis with LaTeX]
...
% \fi</textual></programlisting></section><section class="po-hcontainer e129 e129" xml:id="codedoc"><title class="po-block e130 e130"><textual class="po-textual">Annotated code</textual></title><para class="po-block e131 e131"><textual class="po-textual">The annotated code is stored in </textual><code class="po-atom e132 e132"><textual class="po-textual">chapter</textual></code><textual class="po-textual">
	elements in a </textual><code class="po-atom e133 e133"><textual class="po-textual">part</textual></code><textual class="po-textual"> element with an ID of
	</textual><code class="po-atom e134 e134"><textual class="po-textual">code</textual></code><textual class="po-textual">. These can be subdivided into sections and
	subsections according to the modularity and complexity of the
	code. The annotations get output as part of the formatted
	documentation: the code gets extracted to the class or package
	file. The </textual><code class="po-atom e135 e135"><textual class="po-textual">ltxdoc</textual></code><textual class="po-textual"> package uses LaTeX
	</textual><code class="po-atom e136 e136"><textual class="po-textual">\section</textual></code><textual class="po-textual">s as its top level, so a DocBook chapter
	is mapped in the XSLT to a LaTeX section, a
	</textual><code class="po-atom e137 e137"><textual class="po-textual">sect1</textual></code><textual class="po-textual"> to a </textual><code class="po-atom e138 e138"><textual class="po-textual">\subsection</textual></code><textual class="po-textual"> and so
	on.</textual></para><section class="po-hcontainer e139 e139"><title class="po-block e140 e140"><textual class="po-textual">Options</textual></title><para class="po-block e141 e141"><textual class="po-textual">The </textual><code class="po-atom e142 e142"><textual class="po-textual">.dtx</textual></code><textual class="po-textual"> format requires any user-selectable
	  options for the class or package to be declared and activated
	  </textual><emphasis class="po-inline e143 e143"><textual class="po-textual">before</textual></emphasis><textual class="po-textual"> any requisite style or utility
	  packages are loaded, so the first chapter would typically
	  contain the option code.</textual></para><para class="po-block e144 e144"><textual class="po-textual">The large number of special-purpose definitions needed
	  for the departmental controls in the UCC Thesis class were
	  stored in </textual><code class="po-atom e145 e145"><textual class="po-textual">methodsynopsis</textual></code><textual class="po-textual"> elements in external
	  file entities per Faculty. This is probably the most blatant
	  piece of tag abuse, but the structure seemed to offer an
	  acceptable way to store the data transformed from the
	  administrative system's export format:</textual></para><programlisting class="po-block e146 e146" xml:space="preserve"><textual class="po-textual">
&lt;methodsynopsis xml:id="physio" arch="med"&gt;
  &lt;methodname&gt;Vancouver&lt;/methodname&gt;
  &lt;methodparam&gt;
    &lt;parameter role="department" remap="Department of"&gt;Physiology&lt;/parameter&gt;
    &lt;initializer&gt;vancouver&lt;/initializer&gt;
  &lt;/methodparam&gt;
&lt;/methodsynopsis&gt;</textual></programlisting><itemizedlist class="po-table e147 e147"><listitem class="po-container e148 e148"><para class="po-block e149 e149"><textual class="po-textual">each department gets an ID value which becomes the
	      departmental class option entered by the student
	      (</textual><code class="po-atom e150 e150"><textual class="po-textual">physio</textual></code><textual class="po-textual">);</textual></para></listitem><listitem class="po-container e151 e151"><para class="po-block e152 e152"><textual class="po-textual">the school to which the department belongs
	      (</textual><code class="po-atom e153 e153"><textual class="po-textual">med</textual></code><textual class="po-textual">) is stored in the </textual><code class="po-atom e154 e154"><textual class="po-textual">arch</textual></code><textual class="po-textual">
	      attribute;</textual></para></listitem><listitem class="po-container e155 e155"><para class="po-block e156 e156"><textual class="po-textual">the method name becomes the printable name of the
	      bibliographic format required
	      (</textual><code class="po-atom e157 e157"><textual class="po-textual">Vancouver</textual></code><textual class="po-textual">);</textual></para></listitem><listitem class="po-container e158 e158"><para class="po-block e159 e159"><textual class="po-textual">the method parameters hold the type of
	      organisational unit (</textual><code class="po-atom e160 e160"><textual class="po-textual">department</textual></code><textual class="po-textual">), the
	      prefix for printing on the title page (</textual><code class="po-atom e161 e161"><textual class="po-textual">Department
		of</textual></code><textual class="po-textual">), and the actual name of the organisational
	      unit (</textual><code class="po-atom e162 e162"><textual class="po-textual">Physiology</textual></code><textual class="po-textual">);</textual></para></listitem><listitem class="po-container e163 e163"><para class="po-block e164 e164"><textual class="po-textual">the initializer element is used for name of the
	      BibTeX style for this discipline
	      (</textual><code class="po-atom e165 e165"><textual class="po-textual">vancouver</textual></code><textual class="po-textual">).</textual></para></listitem></itemizedlist><para class="po-block e166 e166"><textual class="po-textual">The XSLT transforms these to package options which define
	  the official name of the department and fix the
	  bibliographic format in that discipline. These are output
	  before the annotated code itself starts, as described
	  above.</textual></para><programlisting class="po-block e167 e167" xml:space="preserve"><textual class="po-textual">
%␣␣␣␣\begin{macrocode}
\DeclareOption{physio}{%
  \department{Physiology}
  \@usebib{vancouver}{Vancouver}{}
}
%␣␣␣␣\end{macrocode}</textual></programlisting></section><section class="po-hcontainer e168 e168"><title class="po-block e169 e169"><textual class="po-textual">Package specification</textual></title><para class="po-block e170 e170"><textual class="po-textual">Classes and packages, as well as documentation, often
	  use frequently-occurring sets of utility and style packages,
	  with commonly-used setup commands before and after package
	  invocation. To avoid class and package authors having to
	  retype similar blocks of code for every class or package
	  they create, an ancillary file </textual><code class="po-atom e171 e171"><textual class="po-textual">prepost.xml</textual></code><textual class="po-textual">
	  stores an author's package preferences. The two lists of
	  packages (for the documentation, and for the class or
	  package itself) are therefore given in an XML structure
	  rather than just typed in LaTeX format as code, so that
	  preferences can be looked up and implemented. We used
	  segmented lists in </textual><code class="po-atom e172 e172"><textual class="po-textual">constraintdef</textual></code><textual class="po-textual"> elements
	  in the </textual><code class="po-atom e173 e173"><textual class="po-textual">info/cover</textual></code><textual class="po-textual"> to do this.</textual></para><programlisting class="po-block e174 e174" xml:space="preserve"><textual class="po-textual">
&lt;info&gt;
  &lt;cover&gt;
    &lt;constraintdef xml:id="clspackages" linkend="options"&gt;
      &lt;segmentedlist&gt;
        &lt;segtitle&gt;Packages needed for this class&lt;/segtitle&gt;
        &lt;seglistitem&gt;
          &lt;seg&gt;fix-cm&lt;/seg&gt;
        &lt;/seglistitem&gt;
        &lt;seglistitem&gt;
          &lt;seg role="textwidth=159mm,textheight=229mm"&gt;geometry&lt;/seg&gt;
        &lt;/seglistitem&gt;
        &lt;seglistitem&gt;
          &lt;seg&gt;graphicx&lt;/seg&gt;
        &lt;/seglistitem&gt;
        [...]
      &lt;/segmentedlist&gt;
    &lt;/constraintdef&gt;
    [...]
  &lt;/cover&gt;
&lt;/info&gt;</textual></programlisting><para class="po-block e175 e175"><textual class="po-textual">Each </textual><code class="po-atom e176 e176"><textual class="po-textual">seglistitem</textual></code><textual class="po-textual"> specifies a package
	  required in the </textual><code class="po-atom e177 e177"><textual class="po-textual">seg</textual></code><textual class="po-textual"> element. The
	  </textual><code class="po-atom e178 e178"><textual class="po-textual">role</textual></code><textual class="po-textual"> attribute holds any package options
	  needed.</textual><footnote class="po-popup e179 e179"><para class="po-block e180 e180"><textual class="po-textual">In review, it was suggested that reversing this and
	      placing the package name in the </textual><code class="po-atom e181 e181"><textual class="po-textual">role</textual></code><textual class="po-textual">
	      attribute and the options in the element content would
	      be more natural. This would not be hard to
	      change.</textual></para></footnote><textual class="po-textual"> A similar construct is used with an ID of
	  </textual><code class="po-atom e182 e182"><textual class="po-textual">docpackages</textual></code><textual class="po-textual"> for any packages required for the
	  documentation.</textual></para><para class="po-block e183 e183"><textual class="po-textual">The </textual><code class="po-atom e184 e184"><textual class="po-textual">linkend</textual></code><textual class="po-textual"> attribute specifies the ID of a
	  chapter or section in the annotated code after which the
	  package loading commands are to be output.</textual></para><programlisting class="po-block e185 e185" xml:space="preserve"><textual class="po-textual">
\usepackage{fix-cm}
\usepackage[textwidth=159mm,textheight=229mm]{geometry}
\usepackage{graphicx}
...
</textual></programlisting></section><section class="po-hcontainer e186 e186"><title class="po-block e187 e187"><textual class="po-textual">Modular code</textual></title><para class="po-block e188 e188"><textual class="po-textual">Code can be given in </textual><code class="po-atom e189 e189"><textual class="po-textual">programlisting</textual></code><textual class="po-textual">
	  elements interspersed with </textual><code class="po-atom e190 e190"><textual class="po-textual">para</textual></code><textual class="po-textual"> and other
	  documentary elements of annotation. The amount of annotation
	  and frequency of interruption is unrestricted: the
	  </textual><code class="po-atom e191 e191"><textual class="po-textual">ltxdoc</textual></code><textual class="po-textual"> extraction process simply stitches
	  together all the code and outputs it; and the documentation
	  formatting treats the code as verbatim blocks (line-numbered
	  for convenience).</textual></para><para class="po-block e192 e192"><textual class="po-textual">However, the </textual><quote class="po-inline e193 e193"><textual class="po-textual">literate-programming</textual></quote><textual class="po-textual"> format
	  for the uses </textual><code class="po-atom e194 e194"><textual class="po-textual">annotation</textual></code><textual class="po-textual"> elements to define the
	  LaTeX commands and environments being provided. The
	  </textual><code class="po-atom e195 e195"><textual class="po-textual">role</textual></code><textual class="po-textual"> attribute defines the class of object
	  being annotated, and the </textual><code class="po-atom e196 e196"><textual class="po-textual">xreflabel</textual></code><textual class="po-textual"> attribute
	  gives its name. Each such </textual><code class="po-atom e197 e197"><textual class="po-textual">annotation</textual></code><textual class="po-textual"> element
	  can contain paragraphs, lists, etc, plus the
	  </textual><code class="po-atom e198 e198"><textual class="po-textual">programlisting</textual></code><textual class="po-textual"> code, broken into whatever
	  granularity is needed to explain what is being done.</textual></para><programlisting class="po-block e199 e199" xml:space="preserve"><textual class="po-textual">
  &lt;annotation role="environment" xreflabel="epigraph"&gt;
    &lt;para&gt;Define an environment for Epigraphs. These would normally go immediately after the
      &lt;command&gt;chapter&lt;/command&gt; command. This is basically the &lt;envar&gt;quotation&lt;/envar&gt;
      environment modified, but it has to allow for &lt;emphasis&gt;either&lt;/emphasis&gt; manual
      &lt;emphasis&gt;or&lt;/emphasis&gt; automated citation (because it may just be a phrase needing 
      no citation), whereas a normal quotation &lt;emphasis&gt;must&lt;/emphasis&gt; be cited. It 
      therefore has &lt;emphasis&gt;two&lt;/emphasis&gt; arguments, described below:&lt;/para&gt;
    &lt;remark version="0.92" revision="2011-05-31"&gt;Added Epigraphs.&lt;/remark&gt;
    &lt;programlisting&gt;
\newenvironment{epigraph}[2][\relax]{%
    &lt;/programlisting&gt;
    &lt;para&gt;Record the argument values now, because they are needed in the end of the 
      environment, so they have to pass across the group boundary. The compulsory 
      argument is for a &amp;BiBTeX; citation key, so that a proper citation can be 
      formatted; the optional argument is for when a pre-formed, 
      &lt;wordasword&gt;full&lt;/wordasword&gt; (actually often simpler, non-rigorous) citation
      is wanted.&lt;/para&gt;
    &lt;programlisting&gt;
  \gdef\@fullcite{#1}%
  \gdef\@quotcite{#2}%
    &lt;/programlisting&gt;
 ...
  &lt;/annotation&gt;</textual></programlisting><para class="po-block e200 e200"><textual class="po-textual">The </textual><code class="po-atom e201 e201"><textual class="po-textual">remark</textual></code><textual class="po-textual"> element is used for noting
	  updates: these get extracted to the revision history. The
	  annotations are output using the armored </textual><code class="po-atom e202 e202"><textual class="po-textual">ltxdoc</textual></code><textual class="po-textual">
	  code; the actual lines of code from the
	  </textual><code class="po-atom e203 e203"><textual class="po-textual">programlisting</textual></code><textual class="po-textual"> elements are output
	  </textual><emphasis class="po-inline e204 e204"><textual class="po-textual">un</textual></emphasis><textual class="po-textual">armored for extraction. This results
	  in LaTeX code in the </textual><code class="po-atom e205 e205"><textual class="po-textual">.dtx</textual></code><textual class="po-textual"> as shown
	  below:</textual></para><programlisting class="po-block e206 e206" xml:space="preserve"><textual class="po-textual">
% \begin{environment}{epigraph}
% Define an environment for Epigraphs. These would normally go immediate after the
% \DescribeMacro{\chapter}\verb`\chapter` command. This is basically the
% \DescribeEnv{quotation}\texttt{quotation} environment modified, but it has to 
% allow for \emph{either} manual \emph{or} automated citation (because it may 
% just be a phrase needing no citation), whereas a normal quotation \emph{must} be 
% cited. It therefore has \emph{two} arguments, described below:\par
% \changes{v0.92}{2011/05/31}{Added Epigraphs.}
%    \begin{macrocode}
\newenvironment{epigraph}[2][\relax]{%
%    \end{macrocode}
% Record the argument values now, because they are needed in the end of the environment, 
% so they have to pass across the group boundary. The compulsory argument is for a 
% \BibTeX{} citation key, so that a proper citation can be formatted; the optional 
% argument is for when a pre-formed, `full' (actually often simpler, non-rigorous) 
% citation is wanted.\par
%    \begin{macrocode}
  \gdef\@fullcite{#1}%
  \gdef\@quotcite{#2}%
%    \end{macrocode}
...
% \end{environment}</textual></programlisting><para class="po-block e207 e207"><textual class="po-textual">The formatted result in the documentation PDF is shown
	  in </textual><xref class="po-milestone e208 e208" linkend="epigraph"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, where the marginal
	  annotation of the commands being documented can be
	  seen.</textual></para><figure class="po-container e209 e209" xml:id="epigraph"><mediaobject class="po-container e210 e210"><imageobject class="po-container e211 e211"><imagedata class="po-meta e212 e212" fileref="../../../vol10/graphics/Flynn01/Flynn01-001.png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e213 e213"><textual class="po-textual">The </textual><code class="po-atom e214 e214"><textual class="po-textual">ltxdoc</textual></code><textual class="po-textual"> package provides only two
	  documentary environments for annotated code:
	  </textual><code class="po-atom e215 e215"><textual class="po-textual">macro</textual></code><textual class="po-textual"> and </textual><code class="po-atom e216 e216"><textual class="po-textual">environment</textual></code><textual class="po-textual">. The
	  </textual><code class="po-atom e217 e217"><textual class="po-textual">dox</textual></code><textual class="po-textual"> utility package has been  used to provide
	  additional environments for other declarations such as
	  counters, classes, options, templates, etc.</textual></para></section></section><section class="po-hcontainer e218 e218" xml:id="userdoc"><title class="po-block e219 e219"><textual class="po-textual">User documentation</textual></title><para class="po-block e220 e220"><textual class="po-textual">User documentation is similarly stored in a
	</textual><code class="po-atom e221 e221"><textual class="po-textual">part</textual></code><textual class="po-textual"> element, this time with the ID of
	</textual><code class="po-atom e222 e222"><textual class="po-textual">doc</textual></code><textual class="po-textual">. In the </textual><code class="po-atom e223 e223"><textual class="po-textual">.dtx</textual></code><textual class="po-textual"> file, the user
	documentation starts with an </textual><emphasis class="po-inline e224 e224"><textual class="po-textual">un</textual></emphasis><textual class="po-textual">armored
	LaTeX Preamble where settings and packages needed for
	formatting the documentation are specified, followed by a
	self-reference to the same </textual><code class="po-atom e225 e225"><textual class="po-textual">.dtx</textual></code><textual class="po-textual"> file in place of
	the actual text. This enables LaTeX to read the Preamble and
	then switch to armored mode to input the same document to
	process the armored documentation at high speed (doing it all
	in a single pass would entail a more computationally-intensive
	process).</textual></para><section class="po-hcontainer e226 e226"><title class="po-block e227 e227"><textual class="po-textual">Preamble</textual></title><para class="po-block e228 e228"><textual class="po-textual">Using the </textual><code class="po-atom e229 e229"><textual class="po-textual">remap</textual></code><textual class="po-textual"> attribute from the
	  </textual><code class="po-atom e230 e230"><textual class="po-textual">book</textual></code><textual class="po-textual"> root element shown earlier (for any
	  changes to the </textual><code class="po-atom e231 e231"><textual class="po-textual">ltxdoc</textual></code><textual class="po-textual"> options) we can now
	  output the start of the documentation and add the
	  </textual><code class="po-atom e232 e232"><textual class="po-textual">\usepackage</textual></code><textual class="po-textual"> commands for the packages
	  specified. These are given in exactly the same way as those
	  for the code (above), stored in a separate
	  </textual><code class="po-atom e233 e233"><textual class="po-textual">constraindef</textual></code><textual class="po-textual"> element, and they use the same
	  </textual><code class="po-atom e234 e234"><textual class="po-textual">prepost.xml</textual></code><textual class="po-textual"> lookup mechanism for commonly-used
	  options.</textual></para><para class="po-block e235 e235"><textual class="po-textual">Unlike with the code, however, this mechanism is largely
	  automated for documentation. This provides for a
	  configurable basic set of packages (defined in
	  </textual><code class="po-atom e236 e236"><textual class="po-textual">prepost.xml</textual></code><textual class="po-textual">) as well as the detection of
	  packages required for specific formatting choices in the
	  documentation. For example, using a compact list in the
	  documentation (the </textual><code class="po-atom e237 e237"><textual class="po-textual">spacing="compact"</textual></code><textual class="po-textual"> attribute
	  on a list container) will automatically ensure that the
	  relevant package (</textual><code class="po-atom e238 e238"><textual class="po-textual">enumitem</textual></code><textual class="po-textual">, in this case) is
	  included in the </textual><code class="po-atom e239 e239"><textual class="po-textual">.dtx</textual></code><textual class="po-textual"> file without the author
	  needing to take any action (and removing it, should compact
	  lists cease to be used).</textual></para><programlisting class="po-block e240 e240" xml:space="preserve"><textual class="po-textual">
%&lt;*driver&gt;
\documentclass[a4paper,12pt]{ltxdoc}
\usepackage[utf8x]{inputenc}
\usepackage[T1]{fontenc}
\usepackage[textwidth=159mm,textheight=229mm]{geometry}
\usepackage{graphicx}
\usepackage{fancyvrb}
[...]</textual></programlisting><para class="po-block e241 e241"><textual class="po-textual">Some additional </textual><code class="po-atom e242 e242"><textual class="po-textual">ltxdoc</textual></code><textual class="po-textual"> commands are added
	  to control the behaviour of the documentation
	  cross-referencing and indexing. The </textual><code class="po-atom e243 e243"><textual class="po-textual">\DocInput</textual></code><textual class="po-textual">
	  command then makes the </textual><code class="po-atom e244 e244"><textual class="po-textual">.dtx</textual></code><textual class="po-textual"> file input itself
	  as described earlier.</textual></para><programlisting class="po-block e245 e245" xml:space="preserve"><textual class="po-textual">
[...]
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
\raggedright
\DocInput{uccthesis.dtx}
\end{document}
%&lt;/driver&gt;</textual></programlisting><para class="po-block e246 e246"><textual class="po-textual">This </textual><quote class="po-inline e247 e247"><textual class="po-textual">driver</textual></quote><textual class="po-textual"> block is followed by three
	  blocks not illustrated here:</textual></para><itemizedlist class="po-table e248 e248"><listitem class="po-container e249 e249"><para class="po-block e250 e250"><textual class="po-textual">a character checksum table as a protection against
	      file corruption in data transfer (output in a literal
	      result template in the XSLT2 program);</textual></para></listitem><listitem class="po-container e251 e251"><para class="po-block e252 e252"><textual class="po-textual">a list of </textual><code class="po-atom e253 e253"><textual class="po-textual">\changes</textual></code><textual class="po-textual"> commands for the
	      Change History (taken from the DocBook
	      </textual><code class="po-atom e254 e254"><textual class="po-textual">revisionhistory</textual></code><textual class="po-textual"> and </textual><code class="po-atom e255 e255"><textual class="po-textual">remark</textual></code><textual class="po-textual">
	      elements);</textual></para></listitem><listitem class="po-container e256 e256"><para class="po-block e257 e257"><textual class="po-textual">and a standard block of hard-coded
	      </textual><code class="po-atom e258 e258"><textual class="po-textual">\DoNotIndex</textual></code><textual class="po-textual"> commands to prevent
	      </textual><code class="po-atom e259 e259"><textual class="po-textual">ltxdoc</textual></code><textual class="po-textual"> indexing non-relevant internal
	      LaTeX commands.</textual></para></listitem></itemizedlist></section><section class="po-hcontainer e260 e260"><title class="po-block e261 e261"><textual class="po-textual">Armoring the text</textual></title><para class="po-block e262 e262"><textual class="po-textual">After all this automated Preamble we can output the
	  </textual><code class="po-atom e263 e263"><textual class="po-textual">\title</textual></code><textual class="po-textual"> and </textual><code class="po-atom e264 e264"><textual class="po-textual">\author</textual></code><textual class="po-textual">, an Abstract or
	  Summary, and then the chapters or sections of documentation
	  text. These are all standard DocBook, handled with XSLT2
	  templates in the conventional manner, with the exception of
	  adding the </textual><code class="po-atom e265 e265"><textual class="po-textual">%␣</textual></code><textual class="po-textual"> armor.</textual></para><para class="po-block e266 e266"><textual class="po-textual">The armoring means that
	  </textual><code class="po-atom e267 e267"><textual class="po-textual">&lt;sect1&gt;&lt;title&gt;Introduction&lt;/title&gt;...</textual></code><textual class="po-textual"> 
	  is output as </textual><code class="po-atom e268 e268"><textual class="po-textual">%␣\subsection{Introduction}</textual></code><textual class="po-textual"> (as
	  noted above, the hierarchy is offset by one level to
	  accommodate </textual><code class="po-atom e269 e269"><textual class="po-textual">ltxdoc</textual></code><textual class="po-textual">'s default format). All text
	  nodes are handed to a </textual><code class="po-atom e270 e270"><textual class="po-textual">text()</textual></code><textual class="po-textual"> template which
	  passes the content through a recursive named template
	  filter, honoring hard-coded newlines but adding the
	  </textual><code class="po-atom e271 e271"><textual class="po-textual">%␣</textual></code><textual class="po-textual"> prefix. The template also handles TeX
	  special characters in filenames and other literals,
	  detecting a </textual><code class="po-atom e272 e272"><textual class="po-textual">parent::programlisting</textual></code><textual class="po-textual"> (where
	  armoring is not required). It also removes any leading
	  white-space after a newline (inserted by Emacs'
	  </textual><emphasis class="po-inline e273 e273"><textual class="po-textual">psgml-mode</textual></emphasis><textual class="po-textual">'s pretty-printing). The
	  final token output is always a newline, so that we can start
	  any element which occurs in element content with the
	  armour.</textual></para><para class="po-block e274 e274"><textual class="po-textual">Verbatim code in </textual><code class="po-atom e275 e275"><textual class="po-textual">programlisting</textual></code><textual class="po-textual"> examples
	  presented a special case: not only must the code itself
	  </textual><emphasis class="po-inline e276 e276"><textual class="po-textual">not</textual></emphasis><textual class="po-textual"> be armored, the processor must
	  be able to escape from the armored text mode, otherwise the
	  verbatim material itself would still contain leading
	  </textual><code class="po-atom e277 e277"><textual class="po-textual">%</textual></code><textual class="po-textual"> signs.</textual></para><programlisting class="po-block e278 e278" xml:space="preserve"><textual class="po-textual">
&lt;variablelist&gt;
  &lt;varlistentry&gt;
    &lt;term&gt;&lt;envar&gt;dedication&lt;/envar&gt;&lt;/term&gt;
    &lt;listitem&gt;
      &lt;para&gt;The &lt;envar&gt;dedication&lt;/envar&gt;
	environment is for you to add a dedication.&lt;/para&gt;
      &lt;programlisting annotations="dedication" language="LaTeX"&gt;
\begin{dedication}
...
\end{dedication}
      &lt;/programlisting&gt;
    &lt;/listitem&gt;
  &lt;/varlistentry&gt;
[...]</textual></programlisting><para class="po-block e279 e279"><textual class="po-textual">This is done by escaping the
	  </textual><code class="po-atom e280 e280"><textual class="po-textual">%&lt;*ignore&gt;</textual></code><textual class="po-textual"> tag separately with the
	  same </textual><code class="po-atom e281 e281"><textual class="po-textual">\iffalse...\fi</textual></code><textual class="po-textual"> method seen earlier (the
	  same is done for the end-tag). Between them comes the
	  </textual><emphasis class="po-inline e282 e282"><textual class="po-textual">unarmored</textual></emphasis><textual class="po-textual"> verbatim content (formatted
	  here with the </textual><code class="po-atom e283 e283"><textual class="po-textual">listings</textual></code><textual class="po-textual"> package, which automates
	  per-language colored pretty-printing of the code).</textual></para><programlisting class="po-block e284 e284" xml:space="preserve"><textual class="po-textual">
% \item[Dedication:] The \texttt{dedication} 
% environment is for you to add a dedication. 
% \iffalse 
%&lt;*ignore&gt; 
% \fi
\begin{lstlisting}[language={[LaTeX]TeX},emph={dedication}]
\begin{dedication}
 ... 
\end{dedication} 
\end{lstlisting} 
% \iffalse 
%&lt;/ignore&gt; 
% \fi</textual></programlisting><para class="po-block e285 e285"><textual class="po-textual">This results in formatting like this (minus the color,
	  and using this conference's default
	  </textual><code class="po-atom e286 e286"><textual class="po-textual">variablelist</textual></code><textual class="po-textual"> layout):</textual></para><blockquote class="po-container e287 e287"><variablelist class="po-table e288 e288"><varlistentry class="po-record e289 e289"><term class="po-block e290 e290"><textual class="po-textual">Dedication:</textual></term><listitem class="po-container e291 e291"><para class="po-block e292 e292"><textual class="po-textual">The </textual><code class="po-atom e293 e293"><textual class="po-textual">dedication</textual></code><textual class="po-textual"> environment is for you
		  to add a dedication.</textual></para><programlisting class="po-block e294 e294" xml:space="preserve"><textual class="po-textual">
\begin{</textual><emphasis class="po-inline e295 e295"><textual class="po-textual">dedication</textual></emphasis><textual class="po-textual">} 
 ...
\end{</textual><emphasis class="po-inline e296 e296"><textual class="po-textual">dedication</textual></emphasis><textual class="po-textual">}
		</textual></programlisting></listitem></varlistentry></variablelist></blockquote><para class="po-block e297 e297"><textual class="po-textual">A bibliography, if one is used, is output in a similar
	  manner to the verbatim code mentioned above, using the
	  </textual><code class="po-atom e298 e298"><textual class="po-textual">%&lt;*ignore&gt;</textual></code><textual class="po-textual"> tags and the
	  </textual><code class="po-atom e299 e299"><textual class="po-textual">VerbatimOut</textual></code><textual class="po-textual"> environment from the
	  </textual><code class="po-atom e300 e300"><textual class="po-textual">fancyvrb</textual></code><textual class="po-textual"> package. When LaTeX is run on the
	  </textual><code class="po-atom e301 e301"><textual class="po-textual">.dtx</textual></code><textual class="po-textual"> file, this extracts the bibliographic
	  content to an external (</textual><code class="po-atom e302 e302"><textual class="po-textual">.bib</textual></code><textual class="po-textual">) file so that it
	  on a subsequent pass it can be reprocessed with BibTeX or
	  </textual><emphasis class="po-inline e303 e303"><textual class="po-textual">biblatex</textual></emphasis><textual class="po-textual"> to recreate its own
	  bibliography.</textual></para></section><section class="po-hcontainer e304 e304"><title class="po-block e305 e305"><textual class="po-textual">Inlines</textual></title><para class="po-block e306 e306"><textual class="po-textual">A number of elements in mixed content are used to
	  identify terms and values for indexing. The
	  </textual><code class="po-atom e307 e307"><textual class="po-textual">envar</textual></code><textual class="po-textual"> element type is used to identify a
	  LaTeX environment name; </textual><code class="po-atom e308 e308"><textual class="po-textual">classname</textual></code><textual class="po-textual"> for a
	  document class name, </textual><code class="po-atom e309 e309"><textual class="po-textual">package</textual></code><textual class="po-textual"> for a package
	  name, and </textual><code class="po-atom e310 e310"><textual class="po-textual">option</textual></code><textual class="po-textual"> for an option.</textual></para><para class="po-block e311 e311"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></para></section></section></section><section class="po-hcontainer e312 e312"><title class="po-block e313 e313"><textual class="po-textual">Automation</textual></title><para class="po-block e314 e314"><textual class="po-textual">The advantages of literate programming (</textual><xref class="po-milestone e315 e315" linkend="Knuth1992"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) — modular construction, hermetic
      testability, debugging tools, interspersed documentation, even
      pretty-printing — are well known (</textual><xref class="po-milestone e316 e316" linkend="Thompson2000"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) and well-criticised (static
      representation; lack of folding structures, version control,
      alternate views of variables). In itself, literate programming
      does not solve any specific requirement for automation (although
      modularity may contribute to this). In developing this method, one
      of the objectives was to remove as much as possible the tedious
      and repetitive typing that program development and documentation
      writing engenders.</textual></para><section class="po-hcontainer e317 e317"><title class="po-block e318 e318"><textual class="po-textual">Development from pilot to production</textual></title><para class="po-block e319 e319"><textual class="po-textual">The original thesis document class was successfully
	implemented, and the XML-based system as described is used to
	maintain it. The 50 or so class options specifying department
	and degree are used to simplify and rationalize the setup for
	the department name, title-page layout, and style of
	references, while the class itself presets the rest of the
	formatting; see </textual><xref class="po-milestone e320 e320" linkend="setup"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).</textual></para><figure class="po-container e321 e321" xml:id="setup"><title class="po-block e322 e322"><textual class="po-textual">Thesis set-up</textual></title><informaltable class="po-container e323 e323"><tr class="po-table e324 e324"><td class="po-block e325 e325"><textual class="po-textual">
	      </textual><programlisting class="po-block e326 e326" xml:space="preserve"><textual class="po-textual">
\documentclass[history,phd]{uccthesis}
\begin{document}
\title{The Application of XML to the Lexicography 
       of Old, Middle and Early Modern Irish}
\author{Julianne Nyhan}
\qualifications{BA}
\professor{Prof Dermot Keogh}
\supervisor{Prof Donnchadh Ó Corráin}
\date{June 2005}
\maketitle
... 
\end{document}</textual></programlisting><textual class="po-textual">
	    </textual></td><td class="po-block e327 e327"><textual class="po-textual">
	      </textual><mediaobject class="po-container e328 e328"><imageobject class="po-container e329 e329"><imagedata class="po-meta e330 e330" fileref="../../../vol10/graphics/Flynn01/Flynn01-002.png" format="png" width="75%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><textual class="po-textual">
	    </textual></td></tr></informaltable></figure><para class="po-block e331 e331"><textual class="po-textual">However, that class was a pilot: the result is that this
	XML-based mechanism is usable for the creation and maintenance
	of almost any LaTeX class or package. The system is used for
	all the author's classes and packages, and has significantly
	reduced development time on a new class or package. In the
	development of additional classes or packages in a series or
	suite (such as occurs in corporate use) the reduction is
	greater because of the ease and reliability with which modules
	of code can be included (as entities or XIncludes). The reuse
	of imported data specifications also has an important place in
	industrial documentation, where sets of part numbers or known
	production components need to be pre-specified, and the system
	has now been adapted twice to use this method.</textual></para></section><section class="po-hcontainer e332 e332"><title class="po-block e333 e333"><textual class="po-textual">Markup load</textual></title><para class="po-block e334 e334"><textual class="po-textual">Many of the templates in the XSLT2 program make decisions
	about the markup they should emit according to the content of
	the element type they match. As an example, a
	</textual><code class="po-atom e335 e335"><textual class="po-textual">firstterm</textual></code><textual class="po-textual"> element type can be made to identify
	from its position if it is indeed the first occurrence, and if
	so, to add a bold LaTeX </textual><code class="po-atom e336 e336"><textual class="po-textual">\index</textual></code><textual class="po-textual"> entry rather
	than a plain one. The careful author can add an attribute to
	suppress this behaviour in cases where a first or early
	occurrence may be used </textual><emphasis class="po-inline e337 e337"><textual class="po-textual">en passant</textual></emphasis><textual class="po-textual">.</textual></para><para class="po-block e338 e338"><textual class="po-textual">In a more complex environment, such as a footnote or the
	</textual><code class="po-atom e339 e339"><textual class="po-textual">term</textual></code><textual class="po-textual"> element of a </textual><code class="po-atom e340 e340"><textual class="po-textual">variablelist</textual></code><textual class="po-textual">
	containing code requiring a monospace font and LaTeX's
	verbatim formatting, the template will choose not to use
	LaTeX's </textual><code class="po-atom e341 e341"><textual class="po-textual">\verb</textual></code><textual class="po-textual"> command because of its fragility
	inside other markup, and to use </textual><code class="po-atom e342 e342"><textual class="po-textual">\texttt</textual></code><textual class="po-textual"> (simple
	monospace) instead, or even </textual><code class="po-atom e343 e343"><textual class="po-textual">\url</textual></code><textual class="po-textual">, according to
	content. This is something which would otherwise require the author to
	remember that certain special characters cause LaTeX
	problems when treated verbatim.</textual></para><para class="po-block e344 e344"><textual class="po-textual">Cross-references which cannot be automated by LaTeX's
	otherwise excellent </textual><code class="po-atom e345 e345"><textual class="po-textual">varioref</textual></code><textual class="po-textual"> package (such as
	references to an unnumbered list item, where by definition no reference
	number exists) are pre-empted in the XSLT2 code and the reference
	switches to the </textual><code class="po-atom e346 e346"><textual class="po-textual">fmtcount</textual></code><textual class="po-textual"> package, which phrases
	a counter value as a spelled-out ordinal: </textual><quote class="po-inline e347 e347"><textual class="po-textual">see the third
	  item in the list on p.42</textual></quote><textual class="po-textual">.</textual></para><para class="po-block e348 e348"><textual class="po-textual">The objective in all these cases is to relieve class and
	package authors of the need to work manually around LaTeX's
	oddities and allow them to write unhindered, for example,  by
	the need to remember that such-and-such a reference was to a
	table, or a figure, or a subsubsubsection, or a call-out; and
	to have the reference auto-adjust its semantics if the target
	element type gets changed.</textual></para><para class="po-block e349 e349"><textual class="po-textual">As an example of the use of markup, the formatted
	annotation output (code documentation) usually requires a
	wider left margin than the user documentation because code
	fragments are identified by a marginal note showing the
	LaTeX command name. In order to accommodate the widest name
	used, a new value for the margin is calculated in the XSLT2
	program, using the longest value of the various commands
	explained in the annotations. This ensures that an
	unexpectedly long command name will not extend beyond the
	left-hand edge of the page. This calculation, straightforward
	in XSLT2, would be computationally challenging in LaTeX and
	would need to be written to use the second pass of the
	document normally associated with LaTeX tables of content
	and cross-references. This calculation can therefore be done
	first, before processing the content of the </textual><code class="po-atom e350 e350"><textual class="po-textual">part</textual></code><textual class="po-textual">
	element for annotated code.</textual></para><para class="po-block e351 e351"><textual class="po-textual">The use of XML also makes it straightforward to query the
	document structure for control purposes. For example, using
	standard command-line tools such as the LTxml toolkit
	provides, a list of macros and environments defined can be
	extracted, or a list made of the packages used:</textual></para><programlisting class="po-block e352 e352" xml:space="preserve"><textual class="po-textual">
$ lxprintf -e annotation "%s (%s)\n" @xreflabel @role uccthesis.xml | sort
ackname (macro)
acknowledgements (environment)
author (macro)
bibliography (macro)
bibname (macro)
cjk (option)
dedication (environment)
department (macro)
draft (environment)
epigraph (environment)
...
$ lxprintf -e \
'constraintdef[@xml:id="clspackages"]/segmentedlist/seglistitem' \
"%s\n" seg uccthesis.xml
inputenc
fontenc
geometry
lmodern
url
graphicx
array
calc
soul
textcomp
ucccrest
setspace
float
$
</textual></programlisting></section><section class="po-hcontainer e353 e353" xml:id="tagabuse"><title class="po-block e354 e354"><textual class="po-textual">Tag abuse</textual></title><para class="po-block e355 e355"><textual class="po-textual">We said earlier in </textual><xref class="po-milestone e356 e356" linkend="codedoc"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> that some
	element types have been used for purposes not envisaged by
	DocBook, and that part of this experiment was to identify what
	the nature of these use cases in class and package maintenance
	was likely to be. As there are areas of DocBook into which the
	present author has never had need to stray, suggestions are
	welcomed for element types with a better fit. A future task is
	to write an RNG specialist modification layer for the DocBook
	schema to create some additional element types to avoid the
	current level of abuse.</textual></para><variablelist class="po-table e357 e357"><varlistentry class="po-record e358 e358"><term class="po-block e359 e359"><code class="po-atom e360 e360"><textual class="po-textual">exceptionname</textual></code></term><listitem class="po-container e361 e361"><para class="po-block e362 e362"><textual class="po-textual">Used to hold keywords of RFC 2119:1997 (</textual><xref class="po-milestone e363 e363" linkend="Bradner1997"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">) for direction on requirement or
	    optionality. Formatted as small caps.</textual></para></listitem></varlistentry><varlistentry class="po-record e364 e364"><term class="po-block e365 e365"><code class="po-atom e366 e366"><textual class="po-textual">methodsynopsis</textual></code></term><listitem class="po-container e367 e367"><para class="po-block e368 e368"><textual class="po-textual">Holds the structured data for the naming departments
	    and degrees (here; extensible to other structured data).</textual></para></listitem></varlistentry><varlistentry class="po-record e369 e369"><term class="po-block e370 e370"><code class="po-atom e371 e371"><textual class="po-textual">entry</textual></code></term><listitem class="po-container e372 e372"><para class="po-block e373 e373"><textual class="po-textual">In a table, the attributes </textual><code class="po-atom e374 e374"><textual class="po-textual">wordsize</textual></code><textual class="po-textual">,
	    </textual><code class="po-atom e375 e375"><textual class="po-textual">charoff</textual></code><textual class="po-textual">, </textual><code class="po-atom e376 e376"><textual class="po-textual">char</textual></code><textual class="po-textual">, and
	    </textual><code class="po-atom e377 e377"><textual class="po-textual">morerows</textual></code><textual class="po-textual"> are used to hold dimensions required
	    for LaTeX to format a multi-row column containing a large
	    vertical brace.</textual></para></listitem></varlistentry><varlistentry class="po-record e378 e378"><term class="po-block e379 e379"><code class="po-atom e380 e380"><textual class="po-textual">classname</textual></code><textual class="po-textual">, </textual><code class="po-atom e381 e381"><textual class="po-textual">package</textual></code><textual class="po-textual">,
	  </textual><code class="po-atom e382 e382"><textual class="po-textual">option</textual></code><textual class="po-textual">, </textual><code class="po-atom e383 e383"><textual class="po-textual">envar</textual></code></term><listitem class="po-container e384 e384"><para class="po-block e385 e385"><textual class="po-textual">These are used to identify LaTeX class, package,
	    option, and environment names or values.</textual></para></listitem></varlistentry><varlistentry class="po-record e386 e386"><term class="po-block e387 e387"><code class="po-atom e388 e388"><textual class="po-textual">annotation</textual></code></term><listitem class="po-container e389 e389"><para class="po-block e390 e390"><textual class="po-textual">Used as the container for modules or fragments of
	      annotated code. In the </textual><code class="po-atom e391 e391"><textual class="po-textual">info/cover</textual></code><textual class="po-textual"> element,
	      this is used for the wording of the Notice which goes in
	      the Preamble of the </textual><code class="po-atom e392 e392"><textual class="po-textual">.ins file.</textual></code></para></listitem></varlistentry><varlistentry class="po-record e393 e393"><term class="po-block e394 e394"><code class="po-atom e395 e395"><textual class="po-textual">cover</textual></code></term><listitem class="po-container e396 e396"><para class="po-block e397 e397"><textual class="po-textual">Holds the setup specifications for packages.</textual></para></listitem></varlistentry><varlistentry class="po-record e398 e398"><term class="po-block e399 e399"><code class="po-atom e400 e400"><textual class="po-textual">constraintdef</textual></code></term><listitem class="po-container e401 e401"><para class="po-block e402 e402"><textual class="po-textual">Holds the structured lists of packages needed for
	    documentation and for the class or package being written.</textual></para></listitem></varlistentry><varlistentry class="po-record e403 e403"><term class="po-block e404 e404"><code class="po-atom e405 e405"><textual class="po-textual">procedure</textual></code></term><listitem class="po-container e406 e406"><para class="po-block e407 e407"><textual class="po-textual">Used in the </textual><code class="po-atom e408 e408"><textual class="po-textual">prepost.xml</textual></code><textual class="po-textual"> file to store
	      the default settings for frequently-used packages with
	      any ancillary commands needed before and after package
	      load.</textual></para></listitem></varlistentry><varlistentry class="po-record e409 e409"><term class="po-block e410 e410"><code class="po-atom e411 e411"><textual class="po-textual">cmdsynopsis</textual></code></term><listitem class="po-container e412 e412"><para class="po-block e413 e413"><textual class="po-textual">Within a </textual><code class="po-atom e414 e414"><textual class="po-textual">constraintdef</textual></code><textual class="po-textual"> in a
	      </textual><code class="po-atom e415 e415"><textual class="po-textual">procedure/step</textual></code><textual class="po-textual">, holds commands which need
	      to be ouput before (or after) a command.</textual></para></listitem></varlistentry><varlistentry class="po-record e416 e416"><term class="po-block e417 e417"><code class="po-atom e418 e418"><textual class="po-textual">type</textual></code></term><listitem class="po-container e419 e419"><para class="po-block e420 e420"><textual class="po-textual">In documentation, marks a span for which special
	      typographical treatment is needed. The role attribute
	      must be set to </textual><code class="po-atom e421 e421"><textual class="po-textual">font</textual></code><textual class="po-textual"> and the remap attribute
	      must be set to the NFSS2e three-character
	      fontname code.</textual></para></listitem></varlistentry></variablelist><para class="po-block e422 e422"><textual class="po-textual">At the moment, the XSLT also generates a shell script file
	which can be used to build the relevant LaTeX distribution
	package (a specially-formed zip file). This needs to be
	replaced by a parameterised Makefile, using the
	</textual><code class="po-atom e423 e423"><textual class="po-textual">latexmk</textual></code><textual class="po-textual"> script.</textual></para></section></section><section class="po-hcontainer e424 e424"><title class="po-block e425 e425"><textual class="po-textual">Conclusions</textual></title><para class="po-block e426 e426"><textual class="po-textual">The experience of this experiment has been fourfold:</textual></para><orderedlist class="po-table e427 e427"><listitem class="po-container e428 e428"><para class="po-block e429 e429"><textual class="po-textual">It is certainly possible to use XML to define and
	  maintain LaTeX document class and package data and
	  documentation, and to use XSLT2 to create the distribution
	  files. In conjunction with a small shell script or Makefile
	  and a suitable repository mechanism (eg Subversion, GIT,
	  etc), a fairly complete process can be defined for
	  versioning and production of LaTeX document classes and
	  packages.</textual></para></listitem><listitem class="po-container e430 e430"><para class="po-block e431 e431"><textual class="po-textual">The benefits of reusability appear only when using this
	  method for handling a number of classes or packages, where
	  there is some re-use of commonly-occurring constructs
	  (macros, environments, utilities, etc), or where the class
	  or package is part of a series sharing common attributes.</textual></para></listitem><listitem class="po-container e432 e432"><para class="po-block e433 e433"><textual class="po-textual">It does require significant knowledge of XML and
	  DocBook, regardless of the editor being used (it may be
	  assumed that a class or package author is already
	  well-skilled in the use of LaTeX).</textual></para></listitem><listitem class="po-container e434 e434"><para class="po-block e435 e435"><textual class="po-textual">It does save time and effort when actually writing the
	  documentation, as there is no need to consider the various
	  forms of escapement and armoring required by the
	  </textual><code class="po-atom e436 e436"><textual class="po-textual">.dtx</textual></code><textual class="po-textual"> file format, or the need to invoke
	  particular packages when certain facilities are used.</textual></para></listitem></orderedlist><para class="po-block e437 e437"><textual class="po-textual">The system has provisionally been called
      </textual><quote class="po-inline e438 e438"><textual class="po-textual">ClassPack</textual></quote><textual class="po-textual">, and is available on CTAN
      (Comprehensive TeX Archive Network) under the LaTeX Project
      Public License. At the moment there are substantial remnants of
      earlier code which need tidying up, and the mechanism for
      handling structured data for formal naming needs to be
      generalized.</textual></para></section><bibliography class="po-hcontainer e439 e439"><title class="po-block e440 e440"><textual class="po-textual">References</textual></title><bibliomixed class="po-block e441 e441" xml:id="Lamport1986"><textual class="po-textual">Lamport, Leslie.
      </textual><emphasis class="po-inline e442 e442"><textual class="po-textual">LaTeX: A Document Preparation
	System.</textual></emphasis><textual class="po-textual"> Addison-Wesley, 1986, 1st Ed.,
      0-201-15790-X. </textual><link class="po-inline e443 e443" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.amazon.com/Latex-Document-Preparation-System-Users/dp/020115790X</textual></link></bibliomixed><bibliomixed class="po-block e444 e444" xml:id="Lamport1994"><textual class="po-textual">Lamport, Leslie.
      </textual><emphasis class="po-inline e445 e445"><textual class="po-textual">LaTeX: A Document Preparation
	System.</textual></emphasis><textual class="po-textual"> Addison-Wesley, 1994, 2nd Ed.,
      978-0201529838. </textual><link class="po-inline e446 e446" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.amazon.com/LaTeX-Document-Preparation-System-2nd/dp/0201529831</textual></link></bibliomixed><bibliomixed class="po-block e447 e447" xml:id="Boggio2006"><textual class="po-textual">Boggio-Togna, Gianfranco.
      </textual><quote class="po-inline e448 e448"><textual class="po-textual">Technica: Typesetting for the humanities.</textual></quote><textual class="po-textual"> LaTeX
      package, November 2006. In CTAN,
      </textual><link class="po-inline e449 e449" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://mirrors.ctan.org/macros/latex/contrib/technica/Technica.pdf</textual></link></bibliomixed><bibliomixed class="po-block e450 e450" xml:id="Ubuntu2012"><textual class="po-textual">Ubuntu Core Developers.
      </textual><quote class="po-inline e451 e451"><textual class="po-textual">TeX Live: LaTeX support for the humanities.</textual></quote><textual class="po-textual">
      Debian package, June 2012. In Ubuntu repositories,
      </textual><link class="po-inline e452 e452" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://packages.ubuntu.com/raring/texlive-humanities</textual></link></bibliomixed><bibliomixed class="po-block e453 e453" xml:id="Carlisle2007"><textual class="po-textual">Carlisle, David. </textual><quote class="po-inline e454 e454"><textual class="po-textual">ltxdoc:
	Documentation support.</textual></quote><textual class="po-textual"> LaTeX
      package, November 2007. In CTAN,
      </textual><link class="po-inline e455 e455" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://ctan.org/pkg/ltxdoc</textual></link></bibliomixed><bibliomixed class="po-block e456 e456" xml:id="Lehmann2011"><textual class="po-textual">Lehmann, Philipp. </textual><quote class="po-inline e457 e457"><textual class="po-textual">ltxdockit:
	Class for documented LaTeX macro files.</textual></quote><textual class="po-textual"> LaTeX
      package, March 2011. In CTAN,
      </textual><link class="po-inline e458 e458" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://ctan.org/pkg/ltxdockit</textual></link></bibliomixed><bibliomixed class="po-block e459 e459" xml:id="LaTeX2006"><textual class="po-textual">The LaTeX3
    Project. </textual><quote class="po-inline e460 e460"><textual class="po-textual">LaTeX2ε for class and package
    writers.</textual></quote><textual class="po-textual"> LaTeX Project documentation, February 2006. In
    CTAN,
    </textual><link class="po-inline e461 e461" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://mirrors.ctan.org/macros/latex/doc/clsguide.pdf</textual></link></bibliomixed><bibliomixed class="po-block e462 e462" xml:id="Mittelbach2004"><textual class="po-textual">Mittelbach Frank; Goossens
      Michel; Braams, Johannes; Carlisle, David; Rowley, Chris.
      </textual><emphasis class="po-inline e463 e463"><textual class="po-textual">The LaTeX Companion.</textual></emphasis><textual class="po-textual"> Addison-Wesley, May
      2004, 2nd Ed., 978-0201362992.
      </textual><link class="po-inline e464 e464" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.amazon.com/LaTeX-Companion-Techniques-Computer-Typesetting/dp/0201362996</textual></link></bibliomixed><bibliomixed class="po-block e465 e465" xml:id="Bradner1997"><textual class="po-textual">Bradner, Scott. </textual><quote class="po-inline e466 e466"><textual class="po-textual">Key words
	for use in RFCs to Indicate Requirement Levels.</textual></quote><textual class="po-textual"> RFC
      2119, Internet Engineering Task Force, Fremont, CA, March 1997
      </textual><link class="po-inline e467 e467" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.ietf.org/rfc/rfc2119.txt</textual></link></bibliomixed><bibliomixed class="po-block e468 e468" xml:id="Flynn2012"><textual class="po-textual">Flynn, Peter. </textual><quote class="po-inline e469 e469"><textual class="po-textual">A university
	thesis class: Automation and its pitfalls.</textual></quote><textual class="po-textual"> Presented
      at TeX Users Group Conference 2012, Boston, MA, July 16–18,
      2012. In TUGboat, 33:2, 2012, pp172–177.
      </textual><link class="po-inline e470 e470" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">https://www.tug.org/members/TUGboat/tb33-2/tb104flynn.pdf</textual></link></bibliomixed><bibliomixed class="po-block e471 e471" xml:id="Knuth1992"><textual class="po-textual">Knuth, Donald E. </textual><quote class="po-inline e472 e472"><textual class="po-textual">Literate
	Programming.</textual></quote><textual class="po-textual"> Center for the Study of Language and
      Information, Stanford, CA (CSLI Lecture Notes, no.27) 1992,
      0937073806, See
      </textual><link class="po-inline e473 e473" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www-cs-faculty.stanford.edu/~uno/lp.html</textual></link></bibliomixed><bibliomixed class="po-block e474 e474" xml:id="Thompson2000"><textual class="po-textual">Thompson, David B. </textual><quote class="po-inline e475 e475"><textual class="po-textual">The
    Literate Programming FAQ.</textual></quote><textual class="po-textual"> San Gabriel, CA, March 2000. </textual><link class="po-inline e476 e476" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.literateprogramming.com/lpfaq.pdf</textual></link></bibliomixed></bibliography></article></classedDocument>