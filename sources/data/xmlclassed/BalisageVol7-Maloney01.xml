<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.3"><title class="po-block e1 e1"><textual class="po-textual">JATSPack and JATSPAN, a packaging format and infrastructure for the NLM/NISO
    Journal Archiving Tag Suite (JATS)</textual></title><info class="po-record e2 e2"><confgroup class="po-record e3 e3"><conftitle class="po-field e4 e4"><textual class="po-textual">Balisage: The Markup Conference 2011</textual></conftitle><confdates class="po-field e5 e5"><textual class="po-textual">August 2 - 5, 2011</textual></confdates></confgroup><abstract class="po-container e6 e6"><para class="po-block e7 e7"><textual class="po-textual">The NISO Journal Archiving Tag Suite (JATS, formerly known as ‘the NLM DTD’) is a 
        common format used in
        publication of scientific literature. JATSPack, a proposal based on the new </textual><link class="po-inline e8 e8" xlink:actuate="onRequest" xlink:href="http://www.expath.org/modules/pkg/" xlink:show="new" xlink:type="simple"><textual class="po-textual">EXPath Packaging System</textual></link><textual class="po-textual">,
        provides a way to package schema customizations and software 
        libraries associated with any of the JATS schemas, thus making it easier for developers 
        to distribute JATS-related resources and easier for users to acquire, install, and use them. 
        </textual><link class="po-inline e9 e9" xlink:actuate="onRequest" xlink:href="http://jatspan.org/" xlink:show="new" xlink:type="simple"><textual class="po-textual">JATSPAN</textual></link><textual class="po-textual"> (the JATSPack Archive Network) is
        a website allowing users to share and collaborate on JATSPacks. A client-side command
        line tool, </textual><code class="po-atom e10 e10"><textual class="po-textual">jatspan</textual></code><textual class="po-textual">, interacts with the site and eases the task of 
        maintaining local repositories of JATSPacks. </textual></para></abstract><author class="po-record e11 e11"><personname class="po-record e12 e12"><firstname class="po-field e13 e13"><textual class="po-textual">Chris</textual></firstname><surname class="po-field e14 e14"><textual class="po-textual">Maloney</textual></surname></personname><personblurb class="po-container e15 e15"><para class="po-block e16 e16"><textual class="po-textual">Chris Maloney works as a contractor for NLM/NCBI, on the PubMed Central and Bookshelf
          projects.</textual></para></personblurb><affiliation class="po-record e17 e17"><orgname class="po-block e18 e18"><textual class="po-textual">NCBI / NLM / NIH (Contractor)</textual></orgname></affiliation></author><legalnotice class="po-container e19 e19"><para class="po-block e20 e20"><textual class="po-textual">
        The Author's contribution to this Work was done as part of his official duties as 
        an NIH employee and is a Work of the United States Government. Therefore, copyright 
        may not be established in the United States. 17 U.S.C. § 105. 
        If Publisher intends to disseminate the Work outside the U.S., Publisher may secure 
        copyright to the extent authorized under the domestic laws of the relevant country, 
        subject to a paid-up, nonexclusive, irrevocable worldwide license to the United 
        States in such copyrighted work to reproduce, prepare derivative works, distribute 
        copies to the public and perform publicly and display publicly the work, and to 
        permit others to do so.
      </textual></para></legalnotice></info><section class="po-hcontainer e21 e21" xml:id="background"><title class="po-block e22 e22"><textual class="po-textual">Background</textual></title><para class="po-block e23 e23"><textual class="po-textual"> "JATS", the </textual><link class="po-inline e24 e24" xlink:actuate="onRequest" xlink:href="http://jats.nlm.nih.gov/" xlink:show="new" xlink:type="simple"><textual class="po-textual">Journal Article Tag Suite</textual></link><textual class="po-textual">,
      is a relatively new name given to the </textual><link class="po-inline e25 e25" xlink:actuate="onRequest" xlink:href="http://dtd.nlm.nih.gov/" xlink:show="new" xlink:type="simple"><textual class="po-textual">NLM Journal
        Archiving and Interchange Tag Suite</textual></link><textual class="po-textual">, which is a set of XML schemas used in the
      publishing of scientific literature. These schemas originated initially to meet the needs of
        </textual><link class="po-inline e26 e26" xlink:actuate="onRequest" xlink:href="http://www.ncbi.nlm.nih.gov/pmc/" xlink:show="new" xlink:type="simple"><textual class="po-textual">PubMed Central</textual></link><textual class="po-textual">, for archiving and
      presenting journals and articles, and have grown to become widely used 
      throughout the scientific publishing industry. </textual></para><para class="po-block e27 e27"><textual class="po-textual"> JATS was recently released as a </textual><link class="po-inline e28 e28" xlink:actuate="onRequest" xlink:href="http://www.niso.org/apps/group_public/download.php/6135/z39-96-dsftu-final.pdf" xlink:show="new" xlink:type="simple"><textual class="po-textual">NISO standard for trial use</textual></link><textual class="po-textual">. The JATS schemas are downloadable from the NLM site,
      and come in several flavors</textual><footnote class="po-popup e29 e29" xml:id="foot-flavors"><para class="po-block e30 e30"><textual class="po-textual">
        "Flavor" is my term, which I haven't heard used anywhere else.  I will use it throughout
        this paper to describe one of the main categories of JATS.   One "flavor" roughly corresponds
        to one top-level DTD file, which might itself have several versions.  In a detailed accounting,
        there are currently seven flavors:
        </textual><variablelist class="po-table e31 e31"><varlistentry class="po-record e32 e32"><term class="po-block e33 e33"><textual class="po-textual">archiving</textual></term><listitem class="po-container e34 e34"><para class="po-block e35 e35"><textual class="po-textual">Archiving and Interchange Tag Set - green</textual></para></listitem></varlistentry><varlistentry class="po-record e36 e36"><term class="po-block e37 e37"><textual class="po-textual">archive-oasis</textual></term><listitem class="po-container e38 e38"><para class="po-block e39 e39"><textual class="po-textual">Same as archiving but with the OASIS table model</textual></para></listitem></varlistentry><varlistentry class="po-record e40 e40"><term class="po-block e41 e41"><textual class="po-textual">authoring</textual></term><listitem class="po-container e42 e42"><para class="po-block e43 e43"><textual class="po-textual">Article Authoring Tag Set - pumpkin</textual></para></listitem></varlistentry><varlistentry class="po-record e44 e44"><term class="po-block e45 e45"><textual class="po-textual">books</textual></term><listitem class="po-container e46 e46"><para class="po-block e47 e47"><textual class="po-textual">NCBI Book Tag Set - purple</textual></para></listitem></varlistentry><varlistentry class="po-record e48 e48"><term class="po-block e49 e49"><textual class="po-textual">historical</textual></term><listitem class="po-container e50 e50"><para class="po-block e51 e51"><textual class="po-textual">A historical version of the books DTD</textual></para></listitem></varlistentry><varlistentry class="po-record e52 e52"><term class="po-block e53 e53"><textual class="po-textual">publishing</textual></term><listitem class="po-container e54 e54"><para class="po-block e55 e55"><textual class="po-textual">Journal Publishing Tag Set - blue</textual></para></listitem></varlistentry><varlistentry class="po-record e56 e56"><term class="po-block e57 e57"><textual class="po-textual">publishing-oasis</textual></term><listitem class="po-container e58 e58"><para class="po-block e59 e59"><textual class="po-textual">Same as publishing but with the OASIS table model</textual></para></listitem></varlistentry></variablelist><textual class="po-textual">
        </textual></para><para class="po-block e60 e60"><textual class="po-textual">
          This is somewhat complicated by the fact that the NISO standard versions of JATS
          use a different version numbering scheme, and so should also be considered
          separate flavors, even though they are really just newer versions of the existing
          NLM DTDs.
        </textual></para></footnote><textual class="po-textual">, which have different semantics and use cases. These
      include Archiving and Interchange (green), Journal Publishing (blue), and Article
      Authoring (pumpkin). They also come in three different formats: DTD, W3C Schema, and Relax NG.
      Most publishers who use the JATS choose to use the DTD format (</textual><xref class="po-milestone e61 e61" linkend="C"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">). 
      Although they are still
      often referred to as the "NLM DTDs", this paper will use the terms "JATS" and "JATS schemas", to
      be clear that: A) the standard is now NISO, and is no longer specifically issued by
      the NLM; and B) it is not just DTDs, but also other schema formats.  One unfortunate aspect of
      the JATS acronym is that the tag suite is not limited to Journal Articles, but can be used for
      other types of documents (books, for example).
    </textual></para></section><section class="po-hcontainer e62 e62" xml:id="intro"><title class="po-block e63 e63"><textual class="po-textual">Introduction</textual></title><para class="po-block e64 e64"><textual class="po-textual"> This paper describes JATSPack, which is a packaging format based on the new </textual><link class="po-inline e65 e65" xlink:actuate="onRequest" xlink:href="http://www.expath.org/modules/pkg/" xlink:show="new" xlink:type="simple"><textual class="po-textual">EXPath Packaging System specification</textual></link><textual class="po-textual">.
      JATSPack provides a well-defined way of packaging customizations and libraries associated with
      any of the JATS schema. JATSPacks are bundled packages of catalog files, schema,
      documentation, code, and sample files, all with a coherent purpose. The JATSPack format was
      primarily designed to facilitate the exchange and reuse of JATS customizations, but it could
      also be used to package and transfer code libraries — for example, XSLT transformations to
      translate JATS to/from some other format. JATSPack can be thought of as a format for 
      plugin modules, with each
      plugin providing a bundle of new functionality which can be easily installed into an XML 
      toolset. </textual></para><note class="po-container e66 e66"><para class="po-block e67 e67"><textual class="po-textual">
        JATSPack and JATSPAN are not part of the NLM/NISO JATS.  
        JATSPack is a proposed specification that is completely independent of the tag suite.
        JATSPAN is a non-commercial web site with no affiliation with 
        </textual><link class="po-inline e68 e68" xlink:actuate="onRequest" xlink:href="http://www.nlm.nih.gov/" xlink:show="new" xlink:type="simple"><textual class="po-textual">NLM</textual></link><textual class="po-textual"> or 
        </textual><link class="po-inline e69 e69" xlink:actuate="onRequest" xlink:href="http://www.niso.org/" xlink:show="new" xlink:type="simple"><textual class="po-textual">NISO</textual></link><textual class="po-textual">.
      </textual></para></note><para class="po-block e70 e70"><textual class="po-textual"> JATSPack specifies a directory structure and a package descriptor file format.
      The package descriptor file, similar to a manifest file in other packaging formats,
      describes the contents, metadata about the included resources, and the dependencies of the 
      pack. </textual></para><para class="po-block e71 e71"><textual class="po-textual"> Establishing this format will facilitate the automatic installation and
      maintenance of libraries and of schema extensions, which should allow easier reuse and
      interchange of the schema themselves.  This, in turn, should allow for easier interchange 
      of JATS document instances.  
    </textual></para><para class="po-block e72 e72"><textual class="po-textual"> </textual><link class="po-inline e73 e73" xlink:actuate="onRequest" xlink:href="http://jatspan.org/" xlink:show="new" xlink:type="simple"><textual class="po-textual">JATSPAN</textual></link><textual class="po-textual">, the JATSPack Archive Network, 
      is a website similar in
      concept to the very successful </textual><link class="po-inline e74 e74" xlink:actuate="onRequest" xlink:href="http://www.cpan.org/" xlink:show="new" xlink:type="simple"><textual class="po-textual">CPAN</textual></link><textual class="po-textual"> 
      (Comprehensive Perl Archive
      Network). Its main purpose is to allow users to share and collaborate on JATSPacks. 
      Authors can upload their customizations or libraries, and can search for and 
      download JATSPacks produced by
      others.  Every JATSPack can be downloaded in one of two formats.  The contents are 
      exactly the same, but the download files differ in their filename extension:  a .xar file, 
      which is the extension used by the EXPath Packaging System, or as a .zip file, so that the
      package can be used stand-alone, without any special infrastructure.
    </textual></para><para class="po-block e75 e75"><textual class="po-textual">
      Providing a centralized repository like this will make it easier to discover
      packs that might be relevant to one's needs, as well as making it easier to install and manage
      them on the local system. </textual></para><para class="po-block e76 e76"><textual class="po-textual"> Associated with JATSPAN is a command-line client, </textual><code class="po-atom e77 e77"><textual class="po-textual">jatspan</textual></code><textual class="po-textual"> (lowercase),
      which runs on a user's machine and
      maintains a local on-disk repository. </textual><code class="po-atom e78 e78"><textual class="po-textual">jatspan</textual></code><textual class="po-textual"> has a
      simple interface and lets users look up and install packages from JATSPAN. One benefit
      to this architecture is that dependencies between packs can be resolved automatically. For
      example, if users want to install packs that depend on others, they don't have to
      figure out where to go to get these, and then, perhaps, be frustrated by different
      directory structures and installation requirements. Instead, the dependency packs are
      found, downloaded, and installed automatically. </textual></para><para class="po-block e79 e79"><textual class="po-textual"> The software and the baseline set of data files for these are being developed in the 
      </textual><link class="po-inline e80 e80" xlink:actuate="onRequest" xlink:href="https://sourceforge.net/projects/jatspan/" xlink:show="new" xlink:type="simple"><textual class="po-textual">"jatspan" open source project on
        SourceForge</textual></link><textual class="po-textual">. </textual></para></section><section class="po-hcontainer e81 e81" xml:id="why"><title class="po-block e82 e82"><textual class="po-textual">Use Cases</textual></title><para class="po-block e83 e83"><textual class="po-textual"> The following are a few examples of use cases that these specifications are designed to
      address. </textual></para><section class="po-hcontainer e84 e84" xml:id="why-1"><title class="po-block e85 e85"><textual class="po-textual">A publisher installs support for a third-party JATS customization</textual></title><para class="po-block e86 e86"><textual class="po-textual"> Suppose a publisher wants to integrate support for document instances that conform to
        some customization of JATS that was not developed in-house. Very often, document instances,
        if they even have a document type declaration (doctype decl) at all, 
        do not include an absolute
        system identifier (a URI) to reference the DTD.  
        So, at a minimum, either an OASIS catalog entry must be
        added to a local catalog file to cross reference the formal public identifier 
        (FPI) to the DTD served somewhere on the Internet, or the DTD
        must be downloaded and installed on the local filesystem, and the XML processors be made
        aware of it. This is not especially difficult, but does require a certain level of expertise
        and coordination of system resources. </textual></para><para class="po-block e87 e87"><textual class="po-textual"> If the customization were packaged in the JATSPack format, then the
        necessary setup would be more automated. It would be as easy as identifying the desired
        pack and using the </textual><code class="po-atom e88 e88"><textual class="po-textual">jatspan</textual></code><textual class="po-textual"> utility to install it in the local repository. 
        The </textual><code class="po-atom e89 e89"><textual class="po-textual">jatspan</textual></code><textual class="po-textual">
        utility automatically updates the local OASIS catalog file with a </textual><code class="po-atom e90 e90"><textual class="po-textual">&lt;nextCatalog&gt;</textual></code><textual class="po-textual">
        entry to
        point to the new JATSPack. So </textual><emphasis class="po-inline e91 e91" role="ital"><textual class="po-textual">any tool</textual></emphasis><textual class="po-textual"> that is able to use 
        OASIS catalogs to resolve
        identifiers would automatically get access to the new schema files without any additional
        work.</textual></para><para class="po-block e92 e92"><textual class="po-textual">
        The important point here is that, because of the way the JATSPack format incorporates 
        OASIS catalog files, this system can be used with any XML processing tool, not just ones
        that are JATSPack-aware.  This is tested and works right now for both 
        </textual><link class="po-inline e93 e93" xlink:actuate="onRequest" xlink:href="http://www.oxygenxml.com/" xlink:show="new" xlink:type="simple"><textual class="po-textual">the oXygen XML editor</textual></link><textual class="po-textual"> and the 
        </textual><link class="po-inline e94 e94" xlink:actuate="onRequest" xlink:href="http://xmlsoft.org/" xlink:show="new" xlink:type="simple"><textual class="po-textual">libxml2 library</textual></link><textual class="po-textual">.</textual></para><para class="po-block e95 e95"><textual class="po-textual">
        This use case is described in more detail in the </textual><link class="po-inline e96 e96" linkend="taxpub" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">TaxPub 
        example</textual></link><textual class="po-textual">, below. </textual></para></section><section class="po-hcontainer e97 e97" xml:id="why-2"><title class="po-block e98 e98"><textual class="po-textual">A developer writes a new translator, and shares it with others</textual></title><para class="po-block e99 e99"><textual class="po-textual"> In this use-case, suppose that a developer that has written a
        transformation from JATS into a new file format. It could be someone who did it for fun or,
        perhaps, a company has a vested interest in promoting the file format.
        For whatever reason, let's say that they want to share it with others and try to
        get others to adopt it and integrate it into their systems.
      </textual></para><para class="po-block e100 e100"><textual class="po-textual"> 
        Right now, there is no standard way to
        present this transformation library to the world. Typically, the library would be presented
        for download on the developer's website, as a Zip file, with a README file that includes
        instructions for unpacking and installation.  The actual details of packaging the
        library, finding a place to put it, and letting others know about it, involve a lot of
        detailed decisions.  Each individual step is not difficult, but taken together, they
        present a barrier to this kind of sharing of code libraries.
      </textual></para><para class="po-block e101 e101"><textual class="po-textual"> 
        All this is ripe for standardization.  Indeed, this is the main </textual><emphasis class="po-inline e102 e102" role="ital"><textual class="po-textual">raison d'etre</textual></emphasis><textual class="po-textual">
        for the EXPath Packaging specification.        
        The transformation languages in which these
        are usually written, XSLT, XQuery, and XProc, are mature enough that they can be written in
        a portable, system-independent way. 
        The JATSPack format is specified and JATSPAN provides many examples, which reduces the
        burden of making decisions about how exactly to package the bundle.
        JATSPAN provides a publically-accessible place to upload packages, so developers
        don't have to find places on their own websites for them.
        If a library were created as a JATSPack, and were put
        on JATSPAN, it would be easier for potential users to discover and install. 
        If this
        library had dependencies on others, then those others would not have to be bundled with
        this package. The
        </textual><code class="po-atom e103 e103"><textual class="po-textual">jatspan</textual></code><textual class="po-textual"> client program would take care of resolving these dependencies automatically. </textual></para><para class="po-block e104 e104"><textual class="po-textual"> This use case is discussed in more detail in the 
        </textual><link class="po-inline e105 e105" linkend="epub-transformation" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">EPub Transforms example</textual></link><textual class="po-textual">, below. </textual></para></section><section class="po-hcontainer e106 e106" xml:id="why-3"><title class="po-block e107 e107"><textual class="po-textual">A publisher evaluates JATS for the first time</textual></title><para class="po-block e108 e108"><textual class="po-textual">
        A publisher or a developer who is introduced to the JATS for the first time
        can be a bit overwhelmed.  To be sure, JATS is extremely well documented,
        as one can readily see by browsing the 
        </textual><link class="po-inline e109 e109" xlink:actuate="onRequest" xlink:href="http://dtd.nlm.nih.gov/" xlink:show="new" xlink:type="simple"><textual class="po-textual">NLM web site</textual></link><textual class="po-textual">.
        Yet the fact that JATS have been in use for a long time, and that there are
        now many different branches (flavors) and versions, can make them seem,
        to someone who is not familiar with them, complicated.
      </textual></para><para class="po-block e110 e110"><textual class="po-textual">
        Someone who wants to evaluate the suitability of JATS for their particular
        needs might want to be able to quickly set up a system that can process
        any JATS instance document, regardless of what flavor or version that instance
        document conforms to.  This is difficult to do, because each flavor and each
        version of the JATS is distributed as a separate, flattened Zip file which 
        includes the bundled version of all of the files needed for that particular
        set.  For example, the </textual><link class="po-inline e111 e111" xlink:actuate="onRequest" xlink:href="ftp://ftp.ncbi.nih.gov/pub/archive_dtd/books/2.3/book-dtd-2.3.zip" xlink:show="new" xlink:type="simple"><textual class="po-textual">books 
          2.3 DTD Zip file</textual></link><textual class="po-textual"> includes all of the
        books-specific modules, as well as all of the shared modules, and even
        the xhtml and mathml2 library modules.
      </textual></para><para class="po-block e112 e112"><textual class="po-textual">
        For each flavor/version of interest, it is necessary to download and extract
        the Zip file, and then manually tweak the provided OASIS catalog file for 
        that set, and then point your XML tool set to use that catalog
        file.  
        Because there are so many different tag set bundles, it would be quite
        time-consuming to configure a system that is able to use them all.
        This is not seen as a problem, because this is not the primary 
        use-case that the NLM site is designed to serve.  
        They provide stand-alone bundles specifically so that a user who
        is interested in only, for example, Publishing 2.3, can download that version
        and not be confused by all of the others (Jeff Beck, personal communication,
        3/22/2011).
      </textual></para><para class="po-block e113 e113"><textual class="po-textual">
        But if someone is interested in configuring a system that can
        understand and process any JATS instance document; either for the purposes
        of evaluating JATS, or so that they can exchange documents with other
        organizations, it would be quite difficult.
      </textual></para><para class="po-block e114 e114"><textual class="po-textual">
        To address this use case, and to provide a basis for the JATSPack 
        architecture, I have repackaged all of the JATS DTD modules as JATSPacks, 
        put them into a single bundle, and made the
        repackaged versions available on JATSPAN.  
        This base bundle is (optionally) installed automatically when you first
        run the </textual><code class="po-atom e115 e115"><textual class="po-textual">jatspan</textual></code><textual class="po-textual"> client utility, as part of its setting up the
        JATSPack repository.
        See </textual><link class="po-inline e116 e116" linkend="base-jatspacks" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">
          Existing JATS DTDs are available as JATSPacks</textual></link><textual class="po-textual"> below for details.
      </textual></para></section><section class="po-hcontainer e117 e117" xml:id="why-4"><title class="po-block e118 e118"><textual class="po-textual">A publisher develops a new JATS customization</textual></title><para class="po-block e119 e119"><textual class="po-textual"> Let's say that a publisher has a need to customize the JATS, in order to include
        domain-specific data within the source documents in their database. This is actually the
        primary use-case that JATSPack was designed to address, and this is the complement of
        </textual><link class="po-inline e120 e120" linkend="why-1" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">the first use case</textual></link><textual class="po-textual"> described above.  That use case 
        described customizations from the user's perspective, and this use case describes them
        from the author's perspective.
      </textual></para><para class="po-block e121 e121"><textual class="po-textual">
        There are a number of concerns that
        tend to make people reluctant to define customizations.  Among the most prominent of these
        is that a customization to the JATS might make their
        documents less portable.  This use case is discussed in detail in the
        </textual><link class="po-inline e122 e122" linkend="custcomp" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">Customizations and Compatibility</textual></link><textual class="po-textual"> section, below.
      </textual></para></section></section><section class="po-hcontainer e123 e123" xml:id="jatspack"><title class="po-block e124 e124"><textual class="po-textual">JATSPack</textual></title><section class="po-hcontainer e125 e125" xml:id="whence"><title class="po-block e126 e126"><textual class="po-textual">EXPath Packaging - the basis for the JATSPack format</textual></title><para class="po-block e127 e127"><textual class="po-textual"> JATSPack is an extension of the 
        </textual><link class="po-inline e128 e128" xlink:actuate="onRequest" xlink:href="http://www.expath.org/modules/pkg/" xlink:show="new" xlink:type="simple"><textual class="po-textual">EXPath 
          Packaging System</textual></link><textual class="po-textual"> (hereinafter EXPath-pkg, written by Florent Georges).
        EXPath-pkg is a simple, concise format for the packaging of files of various core
        XML technologies, including XML Schema, Relax NG, Schematron, NVDL, XSLT, XQuery, and 
        XProc (</textual><xref class="po-milestone e129 e129" linkend="T"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).
        It also provides a flexible extension mechanism which is exploited by JATSPack to define
        additional file types, and other requirements specific to its needs. </textual></para><para class="po-block e130 e130"><textual class="po-textual"> As defined by EXPath-pkg, a package is a set of files that fulfill a common purpose.
        Each package has a globally unique name (which is a URI) and an abbreviated name (hereafter
        referred to as </textual><emphasis class="po-inline e131 e131" role="bital"><textual class="po-textual">abbrev</textual></emphasis><textual class="po-textual">), an NCName. 
        </textual><emphasis class="po-inline e132 e132" role="bital"><textual class="po-textual">Abbrev</textual></emphasis><textual class="po-textual"> values are case-insensitive, and, by convention,
        all lowercase. A component is one file within a package, and can be one of several different
        types. </textual></para><para class="po-block e133 e133"><textual class="po-textual"> A package includes a package descriptor (similar to a JAR manifest file) which lists
        the package contents and top-level metadata about the package. This metadata includes the
        URI name, </textual><emphasis class="po-inline e134 e134" role="bital"><textual class="po-textual">abbrev</textual></emphasis><textual class="po-textual">, version number, and a list of dependencies. 
        Finally, all the files of a
        package are arranged in a specified directory structure, and used to create a Zip file, which
        by convention is given a name based on the </textual><emphasis class="po-inline e135 e135" role="bital"><textual class="po-textual">abbrev</textual></emphasis><textual class="po-textual">, the version number,
        and a ".xar" extension. </textual></para><para class="po-block e136 e136"><textual class="po-textual"> EXPath-pkg is an emerging standard which is already supported by several tools,
        including the eXist and Qizx XML databases, the Saxon XSLT and XQuery processor and the
        Calabash XProc processor. (Support in Saxon and Calabash is via third-party plugins.) It is
        also implemented as an open-source Java library, hosted as the
        </textual><link class="po-inline e137 e137" xlink:actuate="onRequest" xlink:href="http://code.google.com/p/expath-pkg/" xlink:show="new" xlink:type="simple"><textual class="po-textual">expath-pkg</textual></link><textual class="po-textual"> project
        on Google Code. </textual></para><para class="po-block e138 e138"><textual class="po-textual"> The goal of JATSPack is to be a forward-compatible extension of EXPath-pkg</textual><footnote class="po-popup e139 e139"><para class="po-block e140 e140"><textual class="po-textual"> At the time of this writing, there are a few areas of incompatibility between
        the JATSPack format and EXPath-pkg.  Effort is underway to reconcile these.
        The specific incompatibilities are called out in footnotes which follow.</textual></para></footnote><textual class="po-textual">, 
        meaning that any system that
        is capable of deploying EXPath packages will be able to deploy JATSPacks (although 
        not all of the features of JATSPacks would be fully exploited). Note that, in fact, both
        EXPath packages and JATSPacks are forward-compatible extensions of 
        simple Zip files, meaning that
        JATSPacks could be used by anyone, without any special infrastructure at all, just by
        unzipping them onto the local filesystem. </textual></para><para class="po-block e141 e141"><textual class="po-textual"> JATSPack extends EXPath-pkg as follows.
        </textual><orderedlist class="po-table e142 e142"><listitem class="po-container e143 e143"><para class="po-block e144 e144"><textual class="po-textual">
              JATSPack-specific extensions to the package
              descriptor file. This will include the ability to record the author, 
              release date, and other
              metadata.  See </textual><link class="po-inline e145 e145" linkend="jatspack-structure" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">Overall structure of 
                JATSPacks</textual></link><textual class="po-textual">, below, for more information about this.
            </textual></para></listitem><listitem class="po-container e146 e146"><para class="po-block e147 e147"><textual class="po-textual">
              Addition of the OASIS catalog file type.
              See </textual><link class="po-inline e148 e148" linkend="jatspack-cat" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">OASIS Catalog files</textual></link><textual class="po-textual">, below.
            </textual></para></listitem><listitem class="po-container e149 e149"><para class="po-block e150 e150"><textual class="po-textual">
              Addition of documentation file types. See  
              </textual><link class="po-inline e151 e151" linkend="doc" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">Documentation</textual></link><textual class="po-textual">, 
              below. 
            </textual></para></listitem><listitem class="po-container e152 e152"><para class="po-block e153 e153"><textual class="po-textual">
              Sample instances documents. If the pack includes a schema
              customization, then it should include a set of sample documents.
              See </textual><link class="po-inline e154 e154" linkend="samples" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">Sample files and automated tests</textual></link><textual class="po-textual">,
              below.
            </textual></para></listitem><listitem class="po-container e155 e155"><para class="po-block e156 e156"><textual class="po-textual">
              More specific directory
              structure. EXPath-pkg is very loose about the directory structure of 
              files within the main
              package directory. JATSPack specifies this structure more explicitly. 
            </textual></para></listitem><listitem class="po-container e157 e157"><para class="po-block e158 e158"><textual class="po-textual">
              Requirement for two-part </textual><emphasis class="po-inline e159 e159" role="bital"><textual class="po-textual">abbrev</textual></emphasis><textual class="po-textual">s</textual><footnote class="po-popup e160 e160"><para class="po-block e161 e161"><textual class="po-textual">JATSPack two-part abbreviations are incompatible with the existing
                EXPath-pkg format.</textual></para></footnote><textual class="po-textual">.   Currently, EXPath-pkg </textual><emphasis class="po-inline e162 e162" role="bital"><textual class="po-textual">abbrev</textual></emphasis><textual class="po-textual">s
              are simple NCNames.  In JATSPack, they are two NCNames separated by a slash.  
              For example, "nlmjats/archiving".              
            </textual></para></listitem></orderedlist><textual class="po-textual">
      </textual></para><para class="po-block e163 e163"><textual class="po-textual">
        Another source of
        inspiration for the JATSPack format was the 
        </textual><link class="po-inline e164 e164" xlink:actuate="onRequest" xlink:href="http://www.tei-c.org/Guidelines/Customization/odds.xml" xlink:show="new" xlink:type="simple"><textual class="po-textual">One 
          Document Does it all</textual></link><textual class="po-textual"> (ODD) format of TEI.
        The ODD has very clean structure, which encourages literate programming (documentation
        and code in the same source document), examples of usage, clear separation of concerns, and
        best of all, encapsulation of all the relevant data into a single document with a
        standardized structure (</textual><xref class="po-milestone e165 e165" linkend="I"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">). 
        The JATSPack format strives to be similar to ODD, and could even be
        thought of as encapsulating the library or customization in one document, 
        if one expands the
        definition of "document" to include "Zip file" (which is quite reasonable). </textual></para></section><section class="po-hcontainer e166 e166" xml:id="jatspack-structure"><title class="po-block e167 e167"><textual class="po-textual">Overall structure of JATSPacks</textual><footnote class="po-popup e168 e168"><para class="po-block e169 e169"><textual class="po-textual">As described above, some of the 
        requirements for the JATSPack format derive from the fact that it is an extension 
        of EXPath-pkg, and some are JATSPack-specific.</textual></para></footnote></title><para class="po-block e170 e170"><textual class="po-textual"> As already mentioned, every JATSPack must have an 
        </textual><emphasis class="po-inline e171 e171" role="bital"><textual class="po-textual">abbrev</textual></emphasis><textual class="po-textual"> and a version number.  In JATSPack, in order
        to help ensure that the abbreviated names will be unique, they are composed of
        two parts, each of which is an NCName (by convention, all lowercase, and the underscore 
        character should not be used in either part).  
        These are separated by a forward slash in the package descriptor file, for example,
        "nlmjats/archiving". </textual></para><para class="po-block e172 e172"><textual class="po-textual">
        The name of the package file is specified to be
        </textual><emphasis class="po-inline e173 e173" role="bital"><textual class="po-textual">abbrev</textual></emphasis><textual class="po-textual">-</textual><emphasis class="po-inline e174 e174" role="bital"><textual class="po-textual">ver</textual></emphasis><textual class="po-textual">.xar. 
        When the two part </textual><emphasis class="po-inline e175 e175" role="bital"><textual class="po-textual">abbrev</textual></emphasis><textual class="po-textual"> is used in the package
        filename, the forward slash is translated into an underscore.  For example,
        "nlmjats_archiving-1.0.xar".
        The actual low-level format of the file is that of a
        Zip file, and the directory structure within that archive is as shown here</textual><footnote class="po-popup e176 e176"><para class="po-block e177 e177"><textual class="po-textual">The internal directory structure of JATSPack differs from that specified
          for EXPath-pkg, and is another area of incompatibility.  The main difference is the
          location of the package descriptor file, which is in the root directory for
          EXPath-pkg packages.  In JATSPack, it was moved to the package's content directory.
          This way, it is possible to unzip the packages directly onto the filesystem, without requiring any
          shuffling of the file locations.</textual></para></footnote><textual class="po-textual">. </textual></para><programlisting class="po-block e178 e178" xml:space="preserve"><textual class="po-textual">[root]
    </textual><emphasis class="po-inline e179 e179" role="bital"><textual class="po-textual">abbrev-1</textual></emphasis><textual class="po-textual">/
        </textual><emphasis class="po-inline e180 e180" role="bital"><textual class="po-textual">abbrev-2</textual></emphasis><textual class="po-textual">/
            README.txt (optional)
            expath-pkg.xml
            catalog.xml
            dtd/
            rng/
            rnc/
            xsd/
            xslt/
            xquery/
            xproc/
            doc/
            samples/
            resources/
            test/</textual></programlisting><para class="po-block e181 e181"><textual class="po-textual"> At the top two levels are directories corresponding to the two parts of the
        </textual><emphasis class="po-inline e182 e182" role="bital"><textual class="po-textual">abbrev</textual></emphasis><textual class="po-textual">.
        Within the package contents directory are the EXPath-pkg descriptor file expath-pkg.xml, 
        and optionally a README.txt file.  Also in this
        directory are an OASIS catalog file and one
        subdirectory for each of the main file types of the package. </textual></para><para class="po-block e183 e183"><textual class="po-textual"> The expath-pkg.xml file format is described in </textual><xref class="po-milestone e184 e184" linkend="T"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. Extensions to the file format, as
        allowed by the extension mechanism, allow us to include metadata specific to JATSPacks.
        The 'jp' namespace prefix is used for this. 
      </textual></para><para class="po-block e185 e185"><textual class="po-textual">The following is an example of what the package descriptor file would look like
        for a hypothetical customization of
        the base Archiving and Interchange Tag Set, version 3.0, designed to add elements
        and attributes to describe filesystems</textual><footnote class="po-popup e186 e186"><para class="po-block e187 e187"><textual class="po-textual">Note that the conventions for the abbreviated names have yet to be worked out.</textual></para></footnote><textual class="po-textual">.  </textual></para><programlisting class="po-block e188 e188" xml:space="preserve"><textual class="po-textual">&lt;package xmlns="http://expath.org/ns/pkg"
         xmlns:jp='http://jatspack.org/ns/jatspacks'
         xmlns:dc="http://purl.org/dc/elements/1.1/"
         xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
         abbrev='sys/archiving-3.0-filesystem'
         name='http://jatspan.org/jatspacks/sys/archiving-3.0-filesystem'
         version='0.1'
         spec='1.0'
         jp:spec='0.1'&gt;
            
  &lt;title&gt;Filesystem customization of JATS Archiving 3.0&lt;/title&gt;
  &lt;dependency package='http://jatspan.org/jatspacks/nlmjats/archiving'
              semver='3.0'/&gt;
            
  &lt;rdf:Description&gt;
    &lt;dc:creator&gt;Chris Maloney&lt;/dc:contributor&gt;
    &lt;dc:date&gt;2011-04-04&lt;/dc:date&gt;
    &lt;dc:description&gt;
      This customization of the Archiving and Interchange Tag Set, version 3.0,
      adds filesystem-related elements and attributes, for describing computer
      filesystems within instance documents.
    &lt;/dc:description&gt;
    &lt;dc:language&gt;en&lt;/dc:language&gt;
    &lt;dc:rights&gt;This work is in the public domain.&lt;/dc:rights&gt;
  &lt;/rdf:Description&gt;
            
  &lt;!-- Package contents.  --&gt;
  &lt;jp:catalog&gt;
    &lt;file&gt;catalog.xml&lt;/file&gt;
  &lt;/jp:catalog&gt;
  &lt;xslt&gt;
    &lt;import-uri&gt;http://jatspan.org/ns/jatspacks/filesystem/to-archiving.xsl&lt;/import-uri&gt;
    &lt;file&gt;xslt/to-archiving.xsl&lt;/file&gt;
  &lt;/xslt&gt;
&lt;/package&gt;</textual></programlisting><para class="po-block e189 e189"><textual class="po-textual"> The top-level </textual><code class="po-atom e190 e190"><textual class="po-textual">&lt;package&gt;</textual></code><textual class="po-textual"> element includes 
        attributes that give the </textual><emphasis class="po-inline e191 e191" role="bital"><textual class="po-textual">abbrev</textual></emphasis><textual class="po-textual">,
        the package name (a URI), and the version of this package. 
        The </textual><code class="po-atom e192 e192"><textual class="po-textual">@spec</textual></code><textual class="po-textual"> attribute indicates the version of EXPath-pkg
        that this package descriptor conforms to. The </textual><code class="po-atom e193 e193"><textual class="po-textual">&lt;title&gt;</textual></code><textual class="po-textual"> element 
        gives a human-readable title of the package. </textual></para><para class="po-block e194 e194"><textual class="po-textual"> The </textual><code class="po-atom e195 e195"><textual class="po-textual">@jp:spec</textual></code><textual class="po-textual"> attribute is a JATSPack extension to the 
        EXPath-pkg package file format.  This attribute is required for all JATSPacks, 
        and its value gives the version of the JATSPack specification that this
        package conforms to.
      </textual></para><para class="po-block e196 e196"><textual class="po-textual">
        Another JATSPack extension is the addition of the 
        </textual><code class="po-atom e197 e197"><textual class="po-textual">&lt;rdf:Description&gt;</textual></code><textual class="po-textual"> metadata section, which uses the XML
        vocabulary defined by </textual><link class="po-inline e198 e198" xlink:actuate="onRequest" xlink:href="http://dublincore.org/" xlink:show="new" xlink:type="simple"><textual class="po-textual">the Dublin Core
        Metadata Initiative</textual></link><textual class="po-textual"> (DCMI) to allow authors to describe the package
        in more detail.
      </textual></para><para class="po-block e199 e199"><textual class="po-textual"> EXPath-pkg allows zero-to-many </textual><code class="po-atom e200 e200"><textual class="po-textual">&lt;dependency&gt;</textual></code><textual class="po-textual"> elements, 
        each of which indicates a
        dependency of this package. In this example, we see that the 
        </textual><emphasis class="po-inline e201 e201" role="bital"><textual class="po-textual">filesystem</textual></emphasis><textual class="po-textual"> package depends on
        the JATS Archiving 3.0 base JATSPack. </textual></para><para class="po-block e202 e202"><textual class="po-textual"> The </textual><code class="po-atom e203 e203"><textual class="po-textual">&lt;jp:catalog&gt;</textual></code><textual class="po-textual"> element specifies the location of the 
        OASIS catalog file that
        accompanies this package. Finally, the </textual><code class="po-atom e204 e204"><textual class="po-textual">&lt;xslt&gt;</textual></code><textual class="po-textual"> element 
        specifies the location of an
        XSLT module, and the URI which is used to import it from other modules. </textual></para></section><section class="po-hcontainer e205 e205" xml:id="jatspack-cat"><title class="po-block e206 e206"><textual class="po-textual">OASIS Catalog files</textual></title><para class="po-block e207 e207"><textual class="po-textual"> Note that there are no individual entries in the package descriptor for the top-level
        DTD files of this </textual><emphasis class="po-inline e208 e208" role="bital"><textual class="po-textual">filesystem</textual></emphasis><textual class="po-textual">
        customization.  That's because these DTD modules are specified in the OASIS catalog 
        file, and,
        following the principle of </textual><link class="po-inline e209 e209" xlink:actuate="onRequest" xlink:href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself" xlink:show="new" xlink:type="simple"><textual class="po-textual">DRY</textual></link><textual class="po-textual">,
        are not duplicated in the 
        descriptor. Resolution of public identifiers (FPIs) and system identifiers (URIs) to 
        DTD modules within 
        this package is delegated to the catalog file mechanism. </textual></para><para class="po-block e210 e210"><textual class="po-textual"> An elided view of the OASIS catalog file accompanying this package is the following. </textual></para><programlisting class="po-block e211 e211" xml:space="preserve"><textual class="po-textual">&lt;catalog xmlns="urn:oasis:names:tc:entity:xmlns:xml:catalog"
         prefer='public'&gt;
  &lt;public publicId="-//JATSPAN//DTD Filesystem Archiving 0.1//EN"
          uri="dtd/filesystem.dtd"/&gt;
  ...
&lt;/catalog&gt;</textual></programlisting><para class="po-block e212 e212"><textual class="po-textual"> This catalog file uses the </textual><code class="po-atom e213 e213"><textual class="po-textual">@uri</textual></code><textual class="po-textual"> attribute with a relative URI value
        to specify the location of the main DTD included
        with this package. An important point here is that there is nothing special about this
        catalog file. It is usable by any system that can read OASIS catalog files, and does not
        depend on those systems' understanding the JATSPack format. </textual></para></section></section><section class="po-hcontainer e214 e214" xml:id="what"><title class="po-block e215 e215"><textual class="po-textual">Examples</textual></title><section class="po-hcontainer e216 e216" xml:id="base-jatspacks"><title class="po-block e217 e217"><textual class="po-textual">Existing JATS DTDs, and selected Relax NGs, are available as JATSPacks</textual></title><para class="po-block e218 e218"><textual class="po-textual"> The existing set of 34 complete DTDs of the JATS, as downloadable from the NLM
        </textual><link class="po-inline e219 e219" xlink:actuate="onRequest" xlink:href="ftp://ftp.ncbi.nih.gov/pub/archive_dtd/" xlink:show="new" xlink:type="simple"><textual class="po-textual">archive_dtd</textual></link><textual class="po-textual"> and 
        </textual><link class="po-inline e220 e220" xlink:actuate="onRequest" xlink:href="ftp://ftp.ncbi.nih.gov/pub/jats/" xlink:show="new" xlink:type="simple"><textual class="po-textual">jats</textual></link><textual class="po-textual"> FTP sites, has been 
        repackaged as JATSPacks.  In addition, the latest NISO trial versions of the 
        Relax NG schemas have been included in those JATSPacks.  (The older NLM JATS versions
        of the JATSPacks only include the DTDs.)  These can all be downloaded
        from JATSPAN as a single bundle. 
        The DTDs include all seven flavors, and
        up to seven versions of each, going all the way back to version 1.0, and all the
        way up to the recently released NISO trial versions. 
      </textual></para><para class="po-block e221 e221"><textual class="po-textual"> 
        As described in the use case "</textual><link class="po-inline e222 e222" linkend="why-3" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">A publisher evaluates JATS for the first time</textual></link><textual class="po-textual">"
        above, each DTD version on the NLM FTP site is downloadable as a single Zip file which 
        includes all of the
        files required for that version, including all the core files that the version
        depends on.  As mentioned, this is very suitable for, for example,
        a publisher or author who is interested in configuring a system
        capable of dealing with a specific flavor and version (for example, Article
        Authoring 3.0) of JATS.
        Unfortunately, however, this method of distribution makes it difficult to implement a 
        single system that's capable of processing instance documents that conform to
        </textual><emphasis class="po-inline e223 e223" role="ital"><textual class="po-textual">any</textual></emphasis><textual class="po-textual"> of the many different versions of JATS. </textual></para><para class="po-block e224 e224"><textual class="po-textual"> 
        Because each Zip file on the FTP site is a complete set of all of the files needed by
        an instance of the DTD, among the complete set of all flavors and versions, there is a lot
        of duplication of files. 
        This leads to some ambiguity when many of these sets coexist on the
        same system at the same time. If the same public identifier is used in multiple catalog 
        files on the
        system, and point to document instances which are not identical, 
        it is difficult for someone
        configuring the system to sort out whether the differences are substantive, and if so,
        which is the canonical instance. </textual></para><para class="po-block e225 e225"><textual class="po-textual"> The JATSPack base bundle eliminates this redundancy, factors shared modules out into a
        </textual><emphasis class="po-inline e226 e226" role="bital"><textual class="po-textual">core</textual></emphasis><textual class="po-textual"> package, and cleans up a few inconsistencies. 
        The result is a well-defined directory
        structure, with well documented dependencies. Each individual package comes with an OASIS
        catalog file that only has entries for the file in that particular module.  A top-level
        catalog file is provided that uses the </textual><code class="po-atom e227 e227"><textual class="po-textual">&lt;nextCatalog&gt;</textual></code><textual class="po-textual"> 
        element to include all of the others. </textual></para><para class="po-block e228 e228"><textual class="po-textual"> These JATSPack versions of the schema are 100% compatible with those on the NLM site, and
        because of this, the JATSPack versions of the NISO DTDs are fully compliant implementations of
        the NISO standard</textual><footnote class="po-popup e229 e229"><para class="po-block e230 e230"><textual class="po-textual"> When doing this work, I faced a question, and reached a conclusion, which
          might be controversial.
            Because I moved files into a different directory structure,
            but I wanted them to remain usable by systems without OASIS catalog files, 
            using the relative system identifiers, I had to change these identifiers in the 
            modules that reference the moved files. I also made other minor edits to reconcile 
            cases where, for example, two different instances of a document were referred to by 
            the same public identifier (FPI). I made these changes, 
            without changing the FPIs, for those files that 
            were changed. I think this is the right decision, for the following reason. The 
            significance of an FPI is that any tool that resolves it correctly will get 
            identical results. The FPI specifies a </textual><emphasis class="po-inline e231 e231"><textual class="po-textual">logical resource</textual></emphasis><textual class="po-textual"> –- a
            DTD or an external parsed entity — not a </textual><emphasis class="po-inline e232 e232"><textual class="po-textual">specific byte 
            sequence</textual></emphasis><textual class="po-textual">. With this change, the resolution of any given FPI will still 
            result in the exact same entity replacement text,
            when all of the sub-entities are correctly resolved.  </textual></para></footnote><textual class="po-textual">. 
      </textual></para><para class="po-block e233 e233"><textual class="po-textual">
        The Relax NG Zip files downloadable from the NLM site do not include OASIS catalog files,
        and so to include these files in the JATSPacks, it was necessary to create entries
        for them.  This is discussed in more 
        detail in </textual><link class="po-inline e234 e234" linkend="namespaces-relaxng" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">Namespaces and Relax NG</textual></link><textual class="po-textual">, below.
      </textual></para></section><section class="po-hcontainer e235 e235" xml:id="preview-stylesheets"><title class="po-block e236 e236"><textual class="po-textual">Journal Publishing 3.0 Preview Stylesheets as a JATSPack</textual></title><para class="po-block e237 e237"><textual class="po-textual"> These are a set of preview stylesheets for the
        Publishing tag set, version 3.0, that are available for download from the 
        </textual><link class="po-inline e238 e238" xlink:actuate="onRequest" xlink:href="http://dtd.nlm.nih.gov/tools/tools.html]" xlink:show="new" xlink:type="simple"><textual class="po-textual">NLM website</textual></link><textual class="po-textual">. 
        They are authored by Wendell Piez, and are described very nicely in 
        </textual><xref class="po-milestone e239 e239" linkend="P"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, from the 
        </textual><link class="po-inline e240 e240" xlink:actuate="onRequest" xlink:href="http://www.ncbi.nlm.nih.gov/books/NBK47104/" xlink:show="new" xlink:type="simple"><textual class="po-textual">Proceedings of
          JATS-Con, 2010</textual></link><textual class="po-textual">. </textual></para><para class="po-block e241 e241"><textual class="po-textual"> These were repackaged into the JATSPack format. This was very straightforward, and
        involved the following steps: </textual></para><orderedlist class="po-table e242 e242"><listitem class="po-container e243 e243"><para class="po-block e244 e244"><textual class="po-textual">
            Assigning an </textual><emphasis class="po-inline e245 e245" role="bital"><textual class="po-textual">abbrev</textual></emphasis><textual class="po-textual">: 
            "html/publishing-3.0-preview"; a name, which is a URI:
            "http://jatspan.org/jatspacks/html/publishing-3.0-preview", and a version: "1.0".
          </textual></para></listitem><listitem class="po-container e246 e246"><para class="po-block e247 e247"><textual class="po-textual">
            Creating the requisite directory structure. 
          </textual></para></listitem><listitem class="po-container e248 e248"><para class="po-block e249 e249"><textual class="po-textual">
            Moving files around. The files in this library comprise 14
            XSLT files, nine files of documentation, a CSS resource, and a readme.txt file. 
          </textual></para></listitem><listitem class="po-container e250 e250"><para class="po-block e251 e251"><textual class="po-textual">
            Reimplementation of all of the shell stylesheets as individual steps defined within a single
            XProc pipeline. At the top level of the preview stylesheets are seven "shell" XSLT files,
            which are basically pipelines. One of the seven should be used depending on choices of
            citation style, desired output format, and content filtering (print only). Unfortunately,
            these shell stylesheets use Saxon-specific extensions and depend on one of the non-free
            versions of Saxon. It makes sense to implement these as an XProc pipeline, with three
            parameters for the choices described above. 
          </textual></para></listitem><listitem class="po-container e252 e252"><para class="po-block e253 e253"><textual class="po-textual">
            Writing the package descriptor file. This
            involved assigning absolute import URIs to the outward-facing XProc and XSLT modules. 
          </textual></para></listitem><listitem class="po-container e254 e254"><para class="po-block e255 e255"><textual class="po-textual">
            Zipping it into the file html_publishing-3.0-preview-1.0.xar, and uploading it to JATSPAN. 
          </textual></para></listitem></orderedlist><para class="po-block e256 e256"><textual class="po-textual">      
        By itself, repackaging this library in this way could
        not be considered an improvement over the current deployment of this tool,
        as a Zip file.
        However, there are a few advantages. Since this package is on JATSPAN, it can be searched
        for and discovered on JATSPAN. The documentation can be browsed by anyone from the JATSPAN
        site, without downloading and extracting the package. Anyone using the </textual><code class="po-atom e257 e257"><textual class="po-textual">jatspan</textual></code><textual class="po-textual"> client
        utility could install it automatically with the following simple command. 
        </textual><programlisting class="po-block e258 e258" xml:space="preserve"><textual class="po-textual">jatspan install html/publishing-3.0-preview</textual></programlisting><textual class="po-textual">
        Anyone with an EXPath-pkg enabled system would have instant
        programmatic access to the XProc stylesheets and XSLT modules, through their import URIs.
        Normally this would require some integration effort, but with JATSPack, it is automatic. 
      </textual></para><para class="po-block e259 e259"><textual class="po-textual"> Furthermore, there are no disadvantages to packaging this way. The JATSPAN site allows
        anyone to download this package as a .zip file (exactly the same file as the .xar, but with
        a different extension), which can then be unzipped on the filesystem and used just as easily
        as before. </textual></para><para class="po-block e260 e260"><textual class="po-textual"> Another advantage is that other JATSPacks, written by other authors, could
        declare a dependency on this package.  This would simplify the installation and
        integration of those later packages.  And this point makes a good segue to the next example.
      </textual></para></section><section class="po-hcontainer e261 e261" xml:id="epub-transformation"><title class="po-block e262 e262"><textual class="po-textual">EPub Transformation</textual></title><para class="po-block e263 e263"><textual class="po-textual"> At the JATS-Con last year, Laura Kelly gave 
        an excellent presentation
        on the EPUB format and a set of
        transformations for converting JATS documents into EPUB (</textual><xref class="po-milestone e264 e264" linkend="AD"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).
      </textual></para><para class="po-block e265 e265"><textual class="po-textual"> She wrote the transformations in standards-conforming, system independent, XSLT 2.0 and
        XProc. The effort to repackage this as a JATSPack was quite minimal, and involved basically
        the same steps as above. The </textual><emphasis class="po-inline e266 e266" role="bital"><textual class="po-textual">abbrev</textual></emphasis><textual class="po-textual"> assigned to this JATSPack is 
        "epub/jats-to-epub". </textual></para><para class="po-block e267 e267"><textual class="po-textual"> This set of transformations uses the preview stylesheets described above. The original
        Zip file distribution of this library includes a copy of the XSLT files from the preview
        stylesheets that are used. 
        In the JATSPack, those have been removed, and replaced with a
        dependency declaration in the package descriptor file.  The advantage of this is
      that users can avoid having two copies of the same library (the preview stylesheets)
      on their system at the same time.  In this simple example, it would not be
      a big problem.  But the problem of multiple copies of the same resources
      can get severe as the number of packages and libraries increases.</textual></para></section><section class="po-hcontainer e268 e268" xml:id="accessible-tables"><title class="po-block e269 e269"><textual class="po-textual">Accessible Tables Stylesheet</textual></title><para class="po-block e270 e270"><textual class="po-textual"> The next example is not a JATSPack at all; it is an EXPath-pkg.
        My colleague Martin Latterner wrote a very nice XSLT stylesheet which takes as
        input an XHTML table. The stylesheet computes, for each table cell, which horizontal and
        vertical headers correspond to that cell. The stylesheet then adds classes to the cells and
        headers to explicitly encode the associations. </textual></para><para class="po-block e271 e271"><textual class="po-textual"> This is necessary so as to properly code tables for compliance with Section 508 of the
        U.S. Rehabilitation Act of 1973, providing for accessibility to the disabled, in particular
        the visually impaired. With tables marked up like this, screen readers can assist visually
        impaired users by reading, for any given table cell, the headers associated with that cell.
        </textual><xref class="po-milestone e272 e272" linkend="atable"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> illustrates the result of this transformation.
      </textual></para><figure class="po-container e273 e273" xml:id="atable"><title class="po-block e274 e274"><textual class="po-textual">Accessible Table Illustration</textual></title><mediaobject class="po-container e275 e275"><imageobject class="po-container e276 e276"><imagedata class="po-meta e277 e277" fileref="../../../vol7/graphics/Maloney01/Maloney01-001.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e278 e278"><para class="po-block e279 e279"><textual class="po-textual">Example of a table marked up with accessibility classes.
          The data cell pointed to by the mouse pointer (the blue cell) has several header cells 
          associated with it.  Those header cells are highlighted in red.</textual></para></caption></figure><para class="po-block e280 e280"><textual class="po-textual"> Given that tables can have very complicated structures, with multiple 
        </textual><code class="po-atom e281 e281"><textual class="po-textual">@colspan</textual></code><textual class="po-textual"> and
        </textual><code class="po-atom e282 e282"><textual class="po-textual">@rowspan</textual></code><textual class="po-textual"> cells in different places, this is not a trivial algorithm. 
        </textual></para><para class="po-block e283 e283"><textual class="po-textual"> In addition to the XSLT, Martin also wrote a JavaScript module for testing. The
        JavaScript reacts to mouseover events, and causes the current cell and its associated 
        header cells to be highlighted with a different background color, as shown in 
        </textual><xref class="po-milestone e284 e284" linkend="atable"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.
      </textual></para><para class="po-block e285 e285"><textual class="po-textual"> This stylesheet provides a very specific bit of functionality,
        and is something that other users could benefit from, so it is suitable for
        packaging and putting on a public repository.
        However, since it operates on XHTML tables, and is not JATS specific, it is more
        appropriate to package it as an EXPath-pkg and to put it on </textual><link class="po-inline e286 e286" xlink:actuate="onRequest" xlink:href="http://cxan.org/" xlink:show="new" xlink:type="simple"><textual class="po-textual">CXAN</textual></link><textual class="po-textual"> 
        (the Comprehensive XML Archive Network), 
        so that is what we did. </textual></para><para class="po-block e287 e287"><textual class="po-textual"> The reason this is included as an example in this paper is to illustrate the 
        important fact that JATSPack systems are backwards-compatible with EXPath-pkg. 
        Any system set up to use JATSPacks will also be able to install and use any of the 
        EXPath-pkgs on CXAN. </textual></para><para class="po-block e288 e288"><textual class="po-textual"> To use this particular accessible tables stylesheet, one would install the EXPath-pkg,
        and then simply import the stylesheet using the import URI defined in the package
        descriptor. It could be wrapped in an XProc step, or the template could be invoked directly
        from another stylesheet. </textual></para></section><section class="po-hcontainer e289 e289" xml:id="taxpub"><title class="po-block e290 e290"><textual class="po-textual">TaxPub</textual></title><para class="po-block e291 e291"><textual class="po-textual"> TaxPub is a customization of JATS in DTD form, which was described
        in a paper presented at last year's JATS-Con (</textual><xref class="po-milestone e292 e292" linkend="D"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).
        The extension
        allows for the encoding of literature of biological taxonomy, and in particular, taxonomy
        treatments, which are blocks of well-structured markup with very specific semantics. It is
        maintained as 
        </textual><link class="po-inline e293 e293" xlink:actuate="onRequest" xlink:href="https://sourceforge.net/projects/taxpub/" xlink:show="new" xlink:type="simple"><textual class="po-textual">an
          open-source project on SourceForge</textual></link><textual class="po-textual">, with 
        </textual><link class="po-inline e294 e294" xlink:actuate="onRequest" xlink:href="http://taxpub.sourceforge.net/taxpub-doc/" xlink:show="new" xlink:type="simple"><textual class="po-textual">documentation</textual></link><textual class="po-textual"> on the
        project home page. </textual></para><para class="po-block e295 e295"><textual class="po-textual"> The TaxPub customization comprises a set of DTD files, which defines a set of
        new element names with a "tp:" pseudo-namespace-prefix (e.g. "tp:taxon-treatment"). </textual></para><para class="po-block e296 e296"><textual class="po-textual"> This has been repackaged as a JATSPack and put on the JATSPAN website. The following is
        a summary of the steps involved: </textual></para><para class="po-block e297 e297"><textual class="po-textual">
        </textual><orderedlist class="po-table e298 e298"><listitem class="po-container e299 e299"><para class="po-block e300 e300"><textual class="po-textual">
              Assigned a unique </textual><emphasis class="po-inline e301 e301" role="bital"><textual class="po-textual">abbrev</textual></emphasis><textual class="po-textual">: "taxpub/schema",
              and version:  "0.1".
            </textual></para></listitem><listitem class="po-container e302 e302"><para class="po-block e303 e303"><textual class="po-textual"> Created the specified directory structure:
              </textual><programlisting class="po-block e304 e304" xml:space="preserve"><textual class="po-textual">taxpub/
    schema/
        0.1/
            dtd/
            doc/
            samples/</textual></programlisting><textual class="po-textual">
            </textual></para></listitem><listitem class="po-container e305 e305"><para class="po-block e306 e306"><textual class="po-textual"> Moved the TaxPub DTD-specific .dtd and .ent files into the dtd directory. There
              are five of these.
            </textual></para></listitem><listitem class="po-container e307 e307"><para class="po-block e308 e308"><textual class="po-textual"> Removed the no-namespace-prefix versions of the DTD. These have been deprecated.
            </textual></para></listitem><listitem class="po-container e309 e309"><para class="po-block e310 e310"><textual class="po-textual"> Fixed the relative system identifiers in each of the TaxPub modules so that they
              reflect the fixed directory structure of a JATSPack installation. This is similar to
              what was done for the base JATS modules. It is not strictly necessary, but has the
              benefit that the same modules can be used on systems that don't support OASIS catalog
              files. </textual></para></listitem><listitem class="po-container e311 e311"><para class="po-block e312 e312"><textual class="po-textual"> Fixed the DOCTYPE declarations of the sample files. As downloaded, the included
              sample files' DOCTYPE declarations did not use formal public identifiers (FPIs), 
              and used only relative system
              identifiers. For example:
              </textual><programlisting class="po-block e313 e313" xml:space="preserve"><textual class="po-textual">&lt;!DOCTYPE article SYSTEM "../tax-treatment-NS0.dtd"&gt;</textual></programlisting><textual class="po-textual">
              These were changed to use FPIs, and the relative system identifier was changed to
              reflect the new directory structure.  For example:
              </textual><programlisting class="po-block e314 e314" xml:space="preserve"><textual class="po-textual">&lt;!DOCTYPE book PUBLIC
      "-//TaxonX//DTD Taxonomic Treatment Publishing DTD v0 20100105//EN"
      "../dtd/tax-treatment-NS0.dtd"&gt;</textual></programlisting><textual class="po-textual">
              This allows these sample files to be used in the automated tests. They also now serve
              as examples of the proper DOCTYPE declaration to use for instance documents of these
              types. If it is desired that documents of this type be easily exchangeable between
              systems, then it is crucial that document instances be properly self-identifying.
            </textual></para></listitem><listitem class="po-container e315 e315"><para class="po-block e316 e316"><textual class="po-textual"> Created a catalog.xml file in the base "taxpub" directory. This cross references
              each of the defined FPIs in this customization to it's correct module in the
              package. For example:
              </textual><programlisting class="po-block e317 e317" xml:space="preserve"><textual class="po-textual">&lt;catalog xmlns="urn:oasis:names:tc:entity:xmlns:xml:catalog"
         prefer='public'&gt;
  &lt;public publicId="-//TaxonX//DTD Taxonomic Treatment Publishing DTD v0 20100105//EN"
          uri="dtd/tax-treatment-NS0.dtd"/&gt;
  ...
&lt;/catalog</textual></programlisting><textual class="po-textual">
            </textual></para></listitem><listitem class="po-container e318 e318"><para class="po-block e319 e319"><textual class="po-textual"> Moved the documentation into the docs directory. </textual></para></listitem><listitem class="po-container e320 e320"><para class="po-block e321 e321"><textual class="po-textual"> Created a new README.txt file, adapted from the existing one, and adding a bit of
              information about the new structure. </textual></para></listitem><listitem class="po-container e322 e322"><para class="po-block e323 e323"><textual class="po-textual"> Zipped the result, gave it the name 
              </textual><emphasis class="po-inline e324 e324" role="bold"><textual class="po-textual">taxpub_schema-0.1.xar</textual></emphasis><textual class="po-textual">, and then uploaded it to the
              JATSPAN website. </textual></para></listitem></orderedlist><textual class="po-textual">
      </textual></para><para class="po-block e325 e325"><textual class="po-textual"> To see the advantages of this packaging format, let's consider a very specific
        use-case. Suppose that I am a user who works with the oXygen XML editor, and 
        I find that I have a need to read, edit and validate TaxPub files. </textual></para><para class="po-block e326 e326"><textual class="po-textual"> If TaxPub were not packaged in a JATSPack, the process of adding support to oXygen
        would not be difficult, but would require a little bit of expertise and some time. I would
        have to download the Zip file, unpack it, and read the README file to see if there are any
        specific instructions I needed to worry about. Then I would find a place for it to reside on
        my filesystem and move the files there. The tricky bit is then to set up oXygen to
        understand the public identifer, and have it retrieve the correct DTD. I could either add an entry to my
        own personal catalog file (if I have one), add it to oXygen's master catalog file,
        or set up a "document type association" inside oXygen. </textual></para><para class="po-block e327 e327"><textual class="po-textual">
        Now let's suppose instead that I will use the JATSPack version of TaxPub.  
        Of course, there is a bit of
        up-front configuration required, to set up a JATSPAN repository and point
        oXygen to it.  But that is a one-time operation, which then allows me instant access
        to any number of JATSPacks.  Also, this one-time setup is 
        actually quite trivial, and easier than installing the support for the single TaxPub
        document type as described above.  The setup involves two steps: 
        </textual><orderedlist class="po-table e328 e328"><listitem class="po-container e329 e329"><para class="po-block e330 e330"><textual class="po-textual"> Installing the JATSPAN software, and running it for the first time.
              This establishes a JATSPAN repository on the local filesystem. </textual></para></listitem><listitem class="po-container e331 e331"><para class="po-block e332 e332"><textual class="po-textual"> Telling oXygen where to find the master catalog file of the JATSPAN repository,
              by adding an entry in the "XML Catalog" preferences box. Note that 
              </textual><emphasis class="po-inline e333 e333" role="ital"><textual class="po-textual">any</textual></emphasis><textual class="po-textual"> tool that is
              able to use OASIS catalog files could be pointed to this JATSPAN master catalog
              file, and would have the automatic ability to reference all of the schema files
              of all of the installed JATSPacks. </textual></para></listitem></orderedlist><textual class="po-textual">
      </textual></para><para class="po-block e334 e334"><textual class="po-textual"> After the initial setup is done, to install support for TaxPub as a JATSPack, 
        I need to enter one command:
        </textual><programlisting class="po-block e335 e335" xml:space="preserve"><textual class="po-textual">jatspan install taxpub/schema</textual></programlisting><textual class="po-textual">
      </textual></para><para class="po-block e336 e336"><textual class="po-textual"> That is it — everything else is done automatically. When the TaxPub JATSPack is
        downloaded, a </textual><code class="po-atom e337 e337"><textual class="po-textual">&lt;nextCatalog&gt;</textual></code><textual class="po-textual"> entry is added to the JATSPAN repository master catalog
        file, so oXygen instantly resolves any public identifiers defined by TaxPub. After entering the above
        command, I can validate and process TaxPub documents in oXygen. </textual></para></section></section><section class="po-hcontainer e338 e338" xml:id="custcomp"><title class="po-block e339 e339"><textual class="po-textual">Customizations and Compatibility</textual></title><para class="po-block e340 e340"><textual class="po-textual"> The original motivation for developing 
      the JATSPack specification was to devise a means to package schema
      customizations together with software libraries that allow users to transform documents to and
      from the new schema. This is still, perhaps, the primary use-case. </textual></para><para class="po-block e341 e341"><textual class="po-textual"> There is an ongoing sea change in the way that scientific research is published and
      presented. The lines between traditional definitions of media types, such as journal articles,
      books, wikis, blog posts, presentations, etc., are continually getting blurred 
      (</textual><xref class="po-milestone e342 e342" linkend="G"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">). This implies
      that the number of different types of content included with scientific publications is growing
      rapidly. Often it is most appropriate to include disparate types of data with the original
      source documents, and that means either customizing the JATS schema, or providing some other
      means of including it, such as (for example) using the flexible 
      </textual><link class="po-inline e343 e343" xlink:actuate="onRequest" xlink:href="http://jats.nlm.nih.gov/archiving/tag-library/0.4/n-6pe0.html" xlink:show="new" xlink:type="simple"><code class="po-atom e344 e344"><textual class="po-textual">&lt;named-content&gt;</textual></code></link><textual class="po-textual">
      elements, and adding appropriate layer validation. </textual></para><para class="po-block e345 e345"><textual class="po-textual"> The TaxPub example illustrates that the JATSPack/JATSPAN infrastructure can facilitate
      interchange of documents and data between organizations. A common theme overheard at last
      year's JATS-Con was that often, individual publishers' versions of their JATS DTDs
      are not interchangeable. In other words, PMC's version of JATS is not the same as
      Highwire's, even if they nominally use the same flavor and version of the tag
      suite. With a small amount of up-front work to resolve discrepancies and repackage
      customizations, this interchange problem can be helped, if not solved. </textual></para><para class="po-block e346 e346"><textual class="po-textual"> The TaxPub example also serves to illustrate that the cost of doing compatible 
      customizations need not be high. This can lead to easier reuse of existing XML 
      vocabularies. The XML
      landscape is vast, and vocabularies have been defined for wide array of specialized 
      topic domains — biological taxonomy is just one example. 
      As mentioned previously, and as TaxPub illustrates, often it is very
      appropriate and beneficial to mix markup from other vocabularies directly into 
      the instance documents. If the customization is deployed as a JATSPack, then one 
      could make the customization without having to worry quite so much about breaking
      compatibility with existing systems, and the ability to exchange documents. </textual></para><para class="po-block e347 e347"><textual class="po-textual"> But often one wants to do more with a document than just validate it, and that 
      is where the true power of EXPath-pkg, and by extension JATSPack, lies. 
      Customizations can also be packaged
      with software libraries in XProc, XQuery, and XSLT, that allow users to transform documents to
      and from the new schema. This would facilitate making forwards-compatible schema
      customizations. </textual></para><para class="po-block e348 e348"><textual class="po-textual">
      First, let's review what is meant by backwards and forwards compatibility, in the
      context of document schemas.  For this, I highly recommend  
      </textual><xref class="po-milestone e349 e349" linkend="M"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.  In a nutshell, backwards compatibility means that existing 
      (version A) documents can be used by new XML processing systems, and forwards 
      compatibility means that newer documents (version B) can be
      used by existing processing systems.
    </textual></para><para class="po-block e350 e350"><textual class="po-textual"> A very successful model of forwards compatibility, that we are
      all familiar with, is the "must ignore" pattern of extensibility of HTML. 
      This stipulates that HTML renderers must ignore any tags that they don't understand. In
      effect, this is a forwards-compatibility extension substitution rule. It allows future
      designers to customize the HTML schema, adding elements and attributes, while being able to
      predict how document instances in the new schema will be processed by old systems. The "must
      ignore" rule is one substitution rule, but it is very limited. If designers could include a
      set of transformations with the new schema, then those designers could define their own
      substitution rules. </textual></para><section class="po-hcontainer e351 e351" xml:id="taxpub-rocks"><title class="po-block e352 e352"><textual class="po-textual">TaxPub as an example of customization</textual></title><para class="po-block e353 e353"><textual class="po-textual"> TaxPub serves as a good example of this type of customization. It includes many new
        elements that deal specifically with taxonomy treatments, and thus introduces
        the problem of forwards compatibility:
      </textual></para><para class="po-block e354 e354"><textual class="po-textual">
        </textual><blockquote class="po-container e355 e355"><para class="po-block e356 e356"><textual class="po-textual">
            TaxPub, as an
            extension, provides semantics beyond what is available in the base DTD through creating
            newly named elements - thus lending itself to domain-specific application. However, TaxPub
            instances may not be easily processed by applications already familiar with the Publishing
            DTD.
          </textual></para><attribution class="po-block e357 e357"><xref class="po-milestone e358 e358" linkend="D"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref></attribution></blockquote><textual class="po-textual">
      </textual></para><para class="po-block e359 e359"><textual class="po-textual"> 
        This problem could be addressed by writing a set of XSLT stylesheets and including them
        with the TaxPub JATSPack. These stylesheets would transform the new elements into
        plain-old-JATS. This would make it easier for third-party systems to install meaningful and
        useful support for TaxPub documents. Unlike the "must ignore" rule, the substitution rules
        written in XSLT could provide for richer markup in the result document, displaying the new
        content in visually distinctive ways, and perhaps even preserving the semantic content by
        means of special attribute keywords (for example). </textual></para><para class="po-block e360 e360"><textual class="po-textual"> Designing a customization that is both forwards and backwards compatible, and
        compatible with other already-existing schema, is not trivial. 
        With the JATSPack format, and a set of examples and detailed how-to 
        instructions, some of the work required can be made
        easier.</textual></para></section><section class="po-hcontainer e361 e361" xml:id="style-rocks"><title class="po-block e362 e362"><textual class="po-textual">Style checkers</textual></title><para class="po-block e363 e363"><textual class="po-textual"> The definition of "customization" can be
        broad. A customization does not necessarily include a new DTD (or Relax NG or XSD schema).
        Customizations are often implemented as the addition of layered validation implemented
        in, for example, Schematron, that imposes a set of style rules that are more specific to a
        particular organization's use of the JATS. Sometimes these validation rules are coded
        simply as XSLT stylesheets that are applied to instance documents, and return a predefined
        report format. </textual></para><para class="po-block e364 e364"><textual class="po-textual"> According to </textual><xref class="po-milestone e365 e365" linkend="A"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, the results of a survey of publishers indicated that,
        "Half of the respondents said that they impose rules other than schema validation on their
        content." </textual></para><para class="po-block e366 e366"><textual class="po-textual"> Since JATSPack supports Schematron, XSLT, and other formats, there is no reason that
        these sorts of style checkers couldn't also be packaged as JATSPacks and made available
        to third parties. Since JATSPack/JATSPAN imposes rules on versioning and the uniqueness
        of identifiers, it can help to safeguard against incompatibilities that can result 
        from ad-hoc sharing of these sorts of libraries. </textual></para></section><section class="po-hcontainer e367 e367" xml:id="namespaces-relaxng"><title class="po-block e368 e368"><textual class="po-textual">Namespaces and Relax NG</textual></title><para class="po-block e369 e369"><textual class="po-textual"> JATSPack can also ease the migration away from DTDs and 
        towards Relax NG for JATS schema. There are several reasons why this 
        is desirable. DTDs do not properly support XML namespaces, and so hamper
        interoperability. Using namespaces will allow third parties to create customizations without
        having to worry so much about name clashes that can result from mixing vocabularies. 
      </textual></para><blockquote class="po-container e370 e370"><para class="po-block e371 e371"><textual class="po-textual">
        "The major design point of XML namespaces is to allow decentralized extensions." </textual></para><attribution class="po-block e372 e372"><xref class="po-milestone e373 e373" linkend="M"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref></attribution></blockquote><para class="po-block e374 e374"><textual class="po-textual"> That decentralized customizations and extensions occur is a fact.
        I don't think anyone would argue that 
        decentralized customizations is a bad thing, or should be prohibited (even
        if that were possible).
        Yet, an inherent problem is that
        they can be difficult to manage and control. 
        The JATSPAN infrastructure is designed to adapt to
        this decentralization, while at the same time providing specifications and imposing
        requirements, such that the proliferation of new schema doesn't become a problem.
        It does this by requiring that the formal public identifiers (FPIs) and URIs used to identify resources are 
        well defined and unique, and also by virtue of its fixed directory structure, ensuring
        that separate individual JATSPacks fit together on the same system without clashing.
      </textual></para><para class="po-block e375 e375"><textual class="po-textual"> Invoking the TaxPub customization as an example again, in the paper given at JATS-Con
        last year, the author describes some of the inherent difficulty of working with DTDs:
      </textual></para><blockquote class="po-container e376 e376"><para class="po-block e377 e377"><textual class="po-textual">
          The lack of robust namespace support in DTD removed the option of importing external
          schemas into TaxPub. This would make synchronization less onerous, for example, were it
          decided to include Darwin Core elements in TaxPub. It also would enable the inclusion of XML
          data in TaxPub instances themselves rather than on linking to them as external documents. 
        </textual></para><attribution class="po-block e378 e378"><xref class="po-milestone e379 e379" linkend="D"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref></attribution></blockquote><para class="po-block e380 e380"><textual class="po-textual">
        There are other reasons for recommending the use of Relax NG over DTDs, and an 
        entire paper could be written on just that topic.
      </textual></para><para class="po-block e381 e381"><textual class="po-textual">
        However, there are two problems that must be overcome before Relax NG schemas 
        can be used easily for JATS documents.  
        The first is the lack of URI names for these
        Relax NG resources, and the second is that there is no standard way for documents to
        identify the Relax NG schema to which they conform.
      </textual></para><para class="po-block e382 e382"><textual class="po-textual">
        The first problem, the lack of URI names, is inherent in the current JATS 
        infrastructure.  Relax NG schema are identified by URIs,
        and not FPIs.  In other words, URIs are used as the names of 
        these resources, and there is no other name.  That this is a problem was 
        eloquently described by Norman Walsh in his blog post from 2004 titled,
        "On the Web, My Name
        is 266 North Pleasant Street" (</textual><xref class="po-milestone e383 e383" linkend="AB"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">).  The current 
        </textual><link class="po-inline e384 e384" xlink:actuate="onRequest" xlink:href="http://www.w3.org/2001/tag/2003/webarch-20031128/" xlink:show="new" xlink:type="simple"><textual class="po-textual">recommendations
        of the W3C</textual></link><textual class="po-textual"> lead inexorably to the choice that new resources, such
        as Relax NG files, should be identified by absolute, canonical, persistent,
        and stable HTTP URIs.
      </textual></para><para class="po-block e385 e385"><textual class="po-textual">
        NLM has declined to issue such URIs for these resources.  They are worried about
        the potential for excessive server traffic driven by automated tools that
        process these URIs, similar to </textual><link class="po-inline e386 e386" xlink:actuate="onRequest" xlink:href="http://www.w3.org/blog/systeam/2008/02/08/w3c_s_excessive_dtd_traffic/" xlink:show="new" xlink:type="simple"><textual class="po-textual">the 
          experience of the W3C</textual></link><textual class="po-textual">.
      </textual></para><para class="po-block e387 e387"><textual class="po-textual">
        Without these URI identifiers, the Relax NG schema cannot be referenced in the
        instance documents in a clear, unambiguous way.  And as mentioned before, 
        crucial to interchange of document instances is that they identify themselves.  
      </textual></para><para class="po-block e388 e388"><textual class="po-textual">
        With the JATSPack/JATSPAN architecture, I have attempted to address this problem
        in the following ways.
      </textual></para><itemizedlist class="po-table e389 e389"><listitem class="po-container e390 e390"><para class="po-block e391 e391"><textual class="po-textual">
            First of all, JATSPack, since it is based on EXPath-pkg, supports the 
            inclusion of Relax NG XML and compact-notation files.  These should reside
            in the "rng" and "rnc" subdirectories of the package root, respectively.
          </textual></para></listitem><listitem class="po-container e392 e392"><para class="po-block e393 e393"><textual class="po-textual">
            Every JATSPack is assigned a name, which is an absolute URI.  This includes
            the base JATS packages.  For these, I assigned HTTP URI names that use the
            "jatspan.org" domain.  For example, the JATSPack implementation of the NISO 
            trial version of the Article Authoring schema, version 0.4, has the name
            "http://jatspan.org/jatspacks/nisojats/articleauthoring/0.4".
          </textual></para></listitem><listitem class="po-container e394 e394"><para class="po-block e395 e395"><textual class="po-textual">
            The OASIS catalog files included with each JATSPack includes a 
            </textual><code class="po-atom e396 e396"><textual class="po-textual">&lt;rewriteURI&gt;</textual></code><textual class="po-textual"> entry which allows the identification of
            any resource within the JATSPack by using an absolute URI starting with
            the URI of the JATSPack.
          </textual></para></listitem><listitem class="po-container e397 e397"><para class="po-block e398 e398"><textual class="po-textual">
            This provides a </textual><emphasis class="po-inline e399 e399"><textual class="po-textual">de facto</textual></emphasis><textual class="po-textual"> canonical absolute URI
            name for each of these resources.
          </textual></para></listitem><listitem class="po-container e400 e400"><para class="po-block e401 e401"><textual class="po-textual">
            JATSPAN may serve these resources from these absolute URIs, but may not.
            That decision is TBD.
          </textual></para></listitem><listitem class="po-container e402 e402"><para class="po-block e403 e403"><textual class="po-textual">
            Regardless, that URI can be safely used to identify these resources
            within instance documents.
          </textual></para></listitem></itemizedlist><para class="po-block e404 e404"><textual class="po-textual">
        An example should make this clear.  The </textual><link class="po-inline e405 e405" xlink:actuate="onRequest" xlink:href="http://jats.nlm.nih.gov/articleauthoring/" xlink:show="new" xlink:type="simple"><textual class="po-textual">NISO-JATS 
          0.4 version of the Article Authoring</textual></link><textual class="po-textual"> Relax NG schema is
        downloadable from the </textual><link class="po-inline e406 e406" xlink:actuate="onRequest" xlink:href="ftp://ftp.ncbi.nlm.nih.gov/pub/jats/articleauthoring/0.4/" xlink:show="new" xlink:type="simple"><textual class="po-textual">NLM FTP
          site</textual></link><textual class="po-textual">.  The Zip file does not include an OASIS catalog file.  The schema
        resource itself does not have a canonical URI name.
      </textual></para><para class="po-block e407 e407"><textual class="po-textual">
        While repackaging this as a JATSPack, I assigned a URI name to this package 
        of "http://jatspan.org/jatspacks/nisojats/articleauthoring/0.4".  I added the following
        </textual><code class="po-atom e408 e408"><textual class="po-textual">&lt;rewriteURI&gt;</textual></code><textual class="po-textual"> entry to the OASIS catalog
        file for this package.
        </textual><programlisting class="po-block e409 e409" xml:space="preserve"><textual class="po-textual">&lt;rewriteURI uriStartString="http://jatspan.org/jatspacks/nisojats/articleauthoring/0.4/"
            rewritePrefix="/"/&gt;</textual></programlisting><textual class="po-textual">
      </textual></para><para class="po-block e410 e410"><textual class="po-textual">
        In effect, this assigns a URI name to the master Relax NG schema
        file of this package, and that name is
        "http://jatspan.org/jatspacks/nisojats/articleauthoring/0.4/rng/JATS-articleauthoring0.rng".
        Please feel free to use this name in any context, to refer to this resource.
        As mentioned above, JATSPAN might serve this resource at that URL, but might not;
        it is not guaranteed.
      </textual></para><para class="po-block e411 e411"><textual class="po-textual">
        The second problem is that there is no standard, agreed upon way for instance
        documents to identify themselves as conforming to a particular Relax NG 
        schema.  The philosophy behind this fact is that schema validation should
        be a separate process that is not specified by the instance documents.  In
        other words, the idea is that the system, and not the document, should
        decide what schema to apply, and that for a given document, any of a number
        of schema might be applied, depending on the context.
      </textual></para><para class="po-block e412 e412"><textual class="po-textual">
        This is a nice theory, but in practice it has impeded the adoption of 
        Relax NG in this particular domain.
      </textual></para><para class="po-block e413 e413"><textual class="po-textual">
        The oXygen XML editor defines a processing instruction (PI) that can be used
        within an instance document.  For example, given the URI described above,
        an instance documents could now use this PI to identify itself as a document
        conforming to this Relax NG schema:
        </textual><programlisting class="po-block e414 e414" xml:space="preserve"><textual class="po-textual">&lt;?oxygen RNGSchema="http://jatspan.org/jatspacks/niso-authoring/0.4/rng/JATS-articleauthoring0.rng" 
         type="xml"?&gt;</textual></programlisting><textual class="po-textual">
      </textual></para><para class="po-block e415 e415"><textual class="po-textual">
        This is very processor-specific, and therefore is not a good general solution.
      </textual></para><para class="po-block e416 e416"><textual class="po-textual">
        Perhaps the most straightforward way of making the association is by using
        a namespace on the root node of the document.  But the immediate problem
        with this is that the NISO-JATS Relax NG schemas will fail if any non-null
        namespace is given on the root node of any document.
      </textual></para><para class="po-block e417 e417"><textual class="po-textual">
        Solving this particular problem is out of the scope of this paper, but I
        would like to suggest that the Relax NG schema files delivered with JATS 
        be modified to specify a canonical namespace for each of the document types.
        Failing that, this could always be done as an independent customization, in
        a separate JATSPack.
      </textual></para></section></section><section class="po-hcontainer e418 e418" xml:id="more"><title class="po-block e419 e419"><textual class="po-textual">More JATSPack features and recommendations</textual></title><section class="po-hcontainer e420 e420" xml:id="doc"><title class="po-block e421 e421"><textual class="po-textual">Documentation</textual></title><para class="po-block e422 e422"><textual class="po-textual"> It is recommended that each JATSPack includes documentation, including structured
        documentation of any schema extensions. The exact format of this documentation is
        TBD, but the goal is that it should seamlessly integrate with existing JATS
        documentation. That is, the documentation should simply "plug in" to the documentation
        provided by the JATSPacks that come before it in the dependency tree. For example,
        hyperlinks to element or attribute descriptions, between the documentation for the various
        packs and between packs and the base JATS documentation, should resolve correctly. This
        aspect of the format is still under exploration. </textual></para></section><section class="po-hcontainer e423 e423" xml:id="code"><title class="po-block e424 e424"><textual class="po-textual">Code libraries in XSLT, XQuery, and XProc</textual></title><para class="po-block e425 e425"><textual class="po-textual"> JATSPacks can include library functions that pull out specific data from instance
        documents, so that the data is easily accessible from any JATSPack-enabled system. This is a
        way to provide different "views" on instance documents that could be appropriate for
        different purposes. JATSPacks that import and customize others could also extend the library
        functions defined in the imported packages. This is analogous to the object-oriented
        programming paradyme of creating a derived class from a parent class, and overriding or
        extending certain methods. </textual></para><para class="po-block e426 e426"><textual class="po-textual"> As described above under "Customizations and Compatibility", in order to facilitate
        interchange of document instances, authors of JATSPacks that customize the schema are 
        encouraged to provide a stylesheet for conversion to and from the "standard JATS". </textual></para><para class="po-block e427 e427"><textual class="po-textual"> Also, for these customization JATSPacks, authors are encouraged to supply XSLT
        stylesheets that import and extend the Journal Publishing Preview Stylesheets. In this way,
        a complete preview stylesheet for the new JATS customization would be available for use,
        instantly upon installation of the new JATSPack. If the stylesheet which converts to
        "standard JATS" is provided, then the implementation of this preview stylesheet is trivial
        — it is just the baseline preview stylesheet applied to the output of the "standard JATS"
        stylesheet. </textual></para></section><section class="po-hcontainer e428 e428" xml:id="samples"><title class="po-block e429 e429"><textual class="po-textual">Sample files and automated tests</textual></title><para class="po-block e430 e430"><textual class="po-textual"> In order to enable interchange of documents and of the software that processes them,
        instance documents must be self-identifying. Among the recommendations for proper JATSPacks
        which supply DTD customizations, sample files should be included which have the appropriate
        DOCTYPE declaration for that customization, which use the correct formal public identifer 
        (FPI). The </textual><code class="po-atom e431 e431"><textual class="po-textual">jatspan</textual></code><textual class="po-textual"> client
        utility, when installing a new JATSPack, performs automatic tests, which include validation
        of each of the sample files. In addition to validating them in place, this step includes a
        test in which each sample file is copied to a separate temporary directory and then
        validated. This ensures that the FPI is used to resolve the DTD, not the system identifier,
        and guarantees that instance documents modeled after the JATSPack sample files can be
        exchanged between different systems. </textual></para><para class="po-block e432 e432"><textual class="po-textual"> Additionally, any type of JATSPack can include its own predefined test in the form of
        an XQuery function which returns a boolean true (pass) or false (fail). Since all of the
        resources inside a JATSPack are addressable by using URIs relative to the "name" URI of the
        JATSPack itself (given in the package descriptor), these test could operate on the included
        sample files, to verify the integrity of the package as a whole, and that the software
        library operates correctly on the target system. </textual></para></section></section><section class="po-hcontainer e433 e433" xml:id="jatspan"><title class="po-block e434 e434"><textual class="po-textual">JATSPAN</textual></title><para class="po-block e435 e435"><textual class="po-textual"> As mentioned in the introduction, JATSPAN is a website at 
      </textual><link class="po-inline e436 e436" xlink:actuate="onRequest" xlink:href="http://jatspan.org/" xlink:show="new" xlink:type="simple"><textual class="po-textual">jatspan.org</textual></link><textual class="po-textual">, and is based on the 
      concept of the </textual><link class="po-inline e437 e437" xlink:actuate="onRequest" xlink:href="http://cpan.org/" xlink:show="new" xlink:type="simple"><textual class="po-textual">CPAN</textual></link><textual class="po-textual"> website,
      providing a place where users can upload and share JATSPacks. </textual></para><para class="po-block e438 e438"><textual class="po-textual"> There are three complementary, interlocking faces of the JATSPAN site. 
      </textual><orderedlist class="po-table e439 e439"><listitem class="po-container e440 e440"><para class="po-block e441 e441"><textual class="po-textual">A repository of JATSPacks, and a website allowing users to upload and 
            download from that repository.</textual></para></listitem><listitem class="po-container e442 e442"><para class="po-block e443 e443"><textual class="po-textual">A client application </textual><code class="po-atom e444 e444"><textual class="po-textual">jatspan</textual></code><textual class="po-textual">, which enables users to 
            maintain a local installation of JATSPacks.</textual></para></listitem><listitem class="po-container e445 e445"><para class="po-block e446 e446"><textual class="po-textual">A set of RESTful web services (these are envisioned for the future).</textual></para></listitem></orderedlist><textual class="po-textual">
    </textual></para><para class="po-block e447 e447"><textual class="po-textual"> The initial implementation of this site is in Perl, and is being developed 
      on the </textual><link class="po-inline e448 e448" xlink:actuate="onRequest" xlink:href="https://sourceforge.net/projects/jatspan/" xlink:show="new" xlink:type="simple"><textual class="po-textual">jatspan 
        open-source project</textual></link><textual class="po-textual"> on
      SourceForge. </textual></para><para class="po-block e449 e449"><textual class="po-textual"> The "phase 2" implementation of JATSPAN will copy the Servlex/eXist architecture 
      of the CXAN site as described in </textual><xref class="po-milestone e450 e450" linkend="S"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.
      </textual></para><section class="po-hcontainer e451 e451" xml:id="jatspan-web"><title class="po-block e452 e452"><textual class="po-textual">jatspan.org web site</textual></title><para class="po-block e453 e453"><textual class="po-textual"> Here is a list of some of the features of the JATSPAN website: </textual><itemizedlist class="po-table e454 e454"><listitem class="po-container e455 e455"><para class="po-block e456 e456"><textual class="po-textual"> Anyone can browse the list of JATSPacks, see their descriptions (which are
              extracted automatically from the package descriptors) and download those of interest.
              JATSPacks can be downloaded in one of two forms (that differ only in the filename
              extension): XAR files (which have the .xar extension) or Zip files (which have the
              .zip extension). </textual></para></listitem><listitem class="po-container e457 e457"><para class="po-block e458 e458"><textual class="po-textual"> Users can also browse the JATSPack documentation on the JATSPAN site, without
              having to download the package. </textual></para></listitem><listitem class="po-container e459 e459"><para class="po-block e460 e460"><textual class="po-textual"> Authors of JATSPacks can use the JATSPAN site to check that their preferred
              </textual><emphasis class="po-inline e461 e461" role="bital"><textual class="po-textual">abbrev</textual></emphasis><textual class="po-textual"> is not already in use. </textual></para></listitem><listitem class="po-container e462 e462"><para class="po-block e463 e463"><textual class="po-textual"> Registered users can upload JATSPacks. These are unpacked on the server,
              automatically checked for consistency (for example, that the package descriptor file
              is valid) and instantly made available to other users for browsing and download.
            </textual></para></listitem><listitem class="po-container e464 e464"><para class="po-block e465 e465"><textual class="po-textual"> The site automatically runs the automated document-generation tools XSLStyle and
              xqDoc over the XSLT and XQuery JATSPack components, respectively, and makes the
              generated documentation instantly available on the site. </textual></para></listitem></itemizedlist><textual class="po-textual">
      </textual></para><para class="po-block e466 e466"><textual class="po-textual"> The site, in its alpha incarnation, is implemented as a set of Perl CGI scripts
        based on the </textual><link class="po-inline e467 e467" xlink:actuate="onRequest" xlink:href="http://www.catalystframework.org/" xlink:show="new" xlink:type="simple"><textual class="po-textual">Catalyst web
        framework</textual></link><textual class="po-textual">.
      </textual></para></section><section class="po-hcontainer e468 e468" xml:id="jatspan-client"><title class="po-block e469 e469"><textual class="po-textual">jatspan client program</textual></title><para class="po-block e470 e470"><textual class="po-textual"> I would like emphasize again that JATSPacks are usable on any system without any
        special infrastructure. Downloading the package as a Zip file and extracting it to the local
        filesystem could be done exactly the way it is done now, and the included schema,
        documentation, and library files are just as usable. </textual></para><para class="po-block e471 e471"><textual class="po-textual"> However, there are additional advantages to setting up a local repository and using the
        </textual><code class="po-atom e472 e472"><textual class="po-textual">jatspan</textual></code><textual class="po-textual"> client program to manage it. 
        The </textual><code class="po-atom e473 e473"><textual class="po-textual">jatspan</textual></code><textual class="po-textual"> client is a simple program that users can download 
        and install. The interface is through the command line, and it is 
        implemented as a Perl script.
      </textual></para><para class="po-block e474 e474"><textual class="po-textual"> When it is run for the first time, it will ask for a location to create the local
        </textual><code class="po-atom e475 e475"><textual class="po-textual">jatspan</textual></code><textual class="po-textual"> repository. This is a directory on the local filesystem, which is the root directory
        to which downloaded JATSPacks are extracted. The client program then creates this directory
        and writes a </textual><code class="po-atom e476 e476"><textual class="po-textual">jatspan</textual></code><textual class="po-textual"> master OASIS catalog file to it, as well as performing 
        a few other setup tasks. </textual></para><para class="po-block e477 e477"><textual class="po-textual"> The master OASIS catalog file can be used by tools, such as oXygen, to resolve
        identifiers defined within JATSPacks. These XML tools should be set up to point to this
        catalog file. As described above, this only needs to be done once, and from that point on,
        those tools will be able to resolve any identifiers defined by any JATSPack that is
        installed on the local system. </textual></para><para class="po-block e478 e478"><textual class="po-textual"> Also as part of setup, the user can choose whether or not to download and install the
        repackaged base JATS bundle, described in
        </textual><link class="po-inline e479 e479" linkend="base-jatspacks" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">Existing JATS DTDs are available as JATSPacks</textual></link><textual class="po-textual"> above. 
        The advantage to choosing to install it is
        that all of the flavors and versions of JATS will then be available immediately. 
        But it is
        also possible to use the system without installing the base JATSPacks. 
        Because of the system of
        resolving dependencies automatically, the required base JATS DTD files will be available as
        soon as the first JATSPack is installed.  In other words, they could also be installed
        one-by-one, as the need arises. </textual></para><para class="po-block e480 e480"><textual class="po-textual"> After setup, the client can install any desired JATSPack by entering the command
        </textual><programlisting class="po-block e481 e481" xml:space="preserve"><textual class="po-textual">jatspan install </textual><emphasis class="po-inline e482 e482" role="bital"><textual class="po-textual">abbrev</textual></emphasis></programlisting><textual class="po-textual"> 
        This will install the
        latest version of the JATSPack indicated, along with all of its dependencies. It will also
        update the master catalog file with </textual><code class="po-atom e483 e483"><textual class="po-textual">&lt;nextCatalog&gt;</textual></code><textual class="po-textual"> entries, 
        pointing to the catalog
        file provided with each new installed JATSPack. </textual></para><para class="po-block e484 e484"><textual class="po-textual"> As an implementation detail, note that the JATSPAN server uses many of the same Perl
        functions as the </textual><code class="po-atom e485 e485"><textual class="po-textual">jatspan</textual></code><textual class="po-textual"> client, to perform many of the same sorts of tasks. 
        For example,
        when a user uploads a JATSPack to the server, the server "installs" this JATSPack in its
        repository, in a manner quite complementary to the operation performed when users download
        JATSPacks to their client machine.  
      </textual></para></section><section class="po-hcontainer e486 e486" xml:id="future-possibilities"><title class="po-block e487 e487"><textual class="po-textual">Future possibilities</textual></title><para class="po-block e488 e488"><textual class="po-textual"> The next-phase implementation of JATSPAN will copy the Servlex/eXist architecture of
        the CXAN site as described in </textual><xref class="po-milestone e489 e489" linkend="S"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">.
        Besides the obvious
        advantage that this is a more flexible architecture, it can take advantage of the XML
        resources that the site is designed to serve, it can also provide a model for how to set up
        a flexible, extensible XML processing toolchain for organizations that need to develop one.
        This architecture is dubbed the JATSPack Application Framework, or JATSPAF. The following
        figure shows the relationships among all of these entities. </textual></para><figure class="po-container e490 e490" xml:id="fig-relationships"><title class="po-block e491 e491"><textual class="po-textual">Relationships among software and systems</textual></title><mediaobject class="po-container e492 e492"><imageobject class="po-container e493 e493"><imagedata class="po-meta e494 e494" fileref="../../../vol7/graphics/Maloney01/Maloney01-002.png" format="png"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject><caption class="po-container e495 e495"><para class="po-block e496 e496"><textual class="po-textual">The architecture for the JATSPack / JATSPAN systems borrows heavily
          from the work already done by Florent Georges.</textual></para></caption></figure><para class="po-block e497 e497"><textual class="po-textual"> The following is a list of features that could be implemented in a future release of
        the JATSPAN website, that would enhance its usefulness. These are listed primarily to
        illustrate the benefits that this architecture and this infrastructure could provide.
        </textual><itemizedlist class="po-table e498 e498"><listitem class="po-container e499 e499"><para class="po-block e500 e500"><textual class="po-textual"> Faceted search on uploaded JATSPacks, with facets defined for element and
              attribute names, authors, dependencies, documentation, etc. When JATSPAN is
              implemented in eXist, this is a logical next step. </textual></para></listitem><listitem class="po-container e501 e501"><para class="po-block e502 e502"><textual class="po-textual"> JATSPacks could be usable directly off of JATSPAN, without installing them to a
              local machine. This would involve pointing an XML tool at the master OASIS catalog
              file on JATSPAN, which includes </textual><code class="po-atom e503 e503"><textual class="po-textual">&lt;nextCatalog&gt;</textual></code><textual class="po-textual"> entries for all 
              of the JATSPacks
              uploaded to date. This would allow users to run tests and use a JATSPack without
              installing it locally, for evaluation purposes, in the same way that they now can
              browse the JATSPack documentation before downloading the package. </textual></para></listitem><listitem class="po-container e504 e504"><para class="po-block e505 e505"><textual class="po-textual"> JATSPAN could provide instance document tools, such as a validator and document
              previewer. This would let anybody upload a document that purports to conform to any of
              the JATS schema (including any customized version implemented as a JATSPack), and 
              validate it and/or preview it. These are similar to the services
              provided by the PMC </textual><link class="po-inline e506 e506" xlink:actuate="onRequest" xlink:href="http://www.pubmedcentral.nih.gov/utils/style_checker/stylechecker.cgi" xlink:show="new" xlink:type="simple"><textual class="po-textual">style 
              checker</textual></link><textual class="po-textual"> and </textual><link class="po-inline e507 e507" xlink:actuate="onRequest" xlink:href="http://www.pubmedcentral.nih.gov/utils/pv/" xlink:show="new" xlink:type="simple"><textual class="po-textual">article
              previewer</textual></link><textual class="po-textual">.   </textual></para></listitem><listitem class="po-container e508 e508"><para class="po-block e509 e509"><textual class="po-textual"> JATSPAN can be configured to do more thorough checking of uploaded JATSPacks. For
              example, when a new pack is uploaded, checking that system ids and public ids are
              unique, and that resources identified by system ids and/or public ids are not changed
              (it could issue warnings if they are). Also verifying that there are no circular
              dependencies. </textual></para></listitem><listitem class="po-container e510 e510"><para class="po-block e511 e511"><textual class="po-textual"> JATSPAN could implement RSS feeds, allowing users to subscribe to see when new
              JATSPacks, or new versions of JATSPacks of interest, are uploaded, for example.
            </textual></para></listitem><listitem class="po-container e512 e512"><para class="po-block e513 e513"><textual class="po-textual"> JATSPAN could be configured with a discussion forum, or an issue tracker, such
              that users could comment on, rate ("like"), or issue trouble tickets about uploaded
              JATSPacks. </textual></para></listitem><listitem class="po-container e514 e514"><para class="po-block e515 e515"><textual class="po-textual"> A "Roma for JATS" could be developed and served from JATSPAN. 
              </textual><link class="po-inline e516 e516" xlink:actuate="onRequest" xlink:href="http://www.tei-c.org/Roma/" xlink:show="new" xlink:type="simple"><textual class="po-textual">Roma</textual></link><textual class="po-textual"> is a web-based GUI tool
              for building customizations to the TEI schema. The output of the "Roma for JATS" would
              be a complete JATSPack. </textual></para></listitem></itemizedlist><textual class="po-textual">
      </textual></para></section></section><section class="po-hcontainer e517 e517" xml:id="conclusions"><title class="po-block e518 e518"><textual class="po-textual">Conclusions</textual></title><para class="po-block e519 e519"><textual class="po-textual"> Throughout this paper, I have touted the potential benefits of the JATSPack format
      and the JATSPAN site.  These benefits include:
    </textual></para><itemizedlist class="po-table e520 e520"><listitem class="po-container e521 e521"><para class="po-block e522 e522"><textual class="po-textual"> making it easier to deploy 
          systems that support a wide variety of XML formats;</textual></para></listitem><listitem class="po-container e523 e523"><para class="po-block e524 e524"><textual class="po-textual"> facilitating the creation, 
          distribution, and maintenance of schema customizations and libraries of code that
          would be associated with them;</textual></para></listitem><listitem class="po-container e525 e525"><para class="po-block e526 e526"><textual class="po-textual"> allowing developers to easily exchange these customizations and libraries; and 
        thereby</textual></para></listitem><listitem class="po-container e527 e527"><para class="po-block e528 e528"><textual class="po-textual"> facilitating the exchange of scientific documents and data, while preserving their
          rich semantic content. </textual></para></listitem></itemizedlist><para class="po-block e529 e529"><textual class="po-textual">    
      To fully realize the possible benefits, much more work would
      be required.  However, I
      believe that establishing this specification and web site is a good step in the
      right direction.
    </textual></para><para class="po-block e530 e530"><textual class="po-textual">
      One of the goals of this proposal is to help publishers and digital repositories 
      to produce XML systems that are more open.  Sharing of schema customizations and
      libraries would reduce the amount of duplicated
      effort that is expended when adapting systems to different XML document types.  
      In order to acheive this goal,
      this format will have to obtain some measure of support within the publishing
      community.  
      The challenge lies in persuading
      systems architects that this format would benefit them,
      so that they will expend the effort to adapt their systems to support it.
      By providing a "starter set" of JATSPacks, as described in the examples section,
      I hope that I've shown that:  A) creating JATSPacks is easy, and B) sharing JATSPacks
      will benefit everybody.
    </textual></para><para class="po-block e531 e531"><textual class="po-textual">
      Of course, there is nothing inherently JATS-specific in the JATSPack format.  
      The ways in which JATSPack extends EXPath-pkg, as described
      </textual><link class="po-inline e532 e532" linkend="whence" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">above</textual></link><textual class="po-textual">, are primarily to add schema of various formats, 
      sample documents, documentation, and OASIS catalog files.  It would be nice if
      these extensions could be rolled into the EXPath-pkg specification itself.  That might
      eventually obviate the need for the JATSPAN website; it could be merged with CXAN.
      Whether that would help or hurt the cause of getting the format adopted is
      anybody's guess.
    </textual></para><para class="po-block e533 e533"><textual class="po-textual">
      Comments, suggestions, and help are all very welcome.  Please visit the 
      </textual><link class="po-inline e534 e534" xlink:actuate="onRequest" xlink:href="http://sourceforge.net/projects/jatspan/" xlink:show="new" xlink:type="simple"><textual class="po-textual">project page on
      Sourceforge</textual></link><textual class="po-textual">.
    </textual></para></section><section class="po-hcontainer e535 e535" xml:id="shouts"><title class="po-block e536 e536"><textual class="po-textual">Acknowledgements</textual></title><para class="po-block e537 e537"><textual class="po-textual">
      I would like to thank Kim Tryka, Florent Georges, Abe Becker, and Rebecca Orris
      for valuable feedback on this paper.  Also, thanks to the anonymous reviewers who provided
      useful suggestions.
    </textual></para><para class="po-block e538 e538"><textual class="po-textual">
      This research was supported in part by the Intramural Research Program of the NIH, 
      National Library of Medicine. 
    </textual></para><para class="po-block e539 e539"><textual class="po-textual">
      I'd also like to thank you, the reader.  If you've gotten this far, and are even reading
      the acknowledgements, that is quite impressive!  As a small lagniappe, here is a nice 
      Unicode snowman for you:
      </textual><link class="po-inline e540 e540" xlink:actuate="onRequest" xlink:href="http://unicodesnowmanforyou.com/" xlink:show="new" xlink:type="simple"><textual class="po-textual">☃</textual></link><textual class="po-textual">!
    </textual></para></section><bibliography class="po-hcontainer e541 e541"><title class="po-block e542 e542"><textual class="po-textual">Bibliography</textual></title><bibliomixed class="po-block e543 e543" xml:id="A" xreflabel="Beck 2010"><textual class="po-textual">
      Beck, Jeff. (2010). 
      </textual><emphasis class="po-inline e544 e544" role="ital"><textual class="po-textual">Are We There Yet? An introduction to the first Journal Article Tag Suite Conference</textual></emphasis><textual class="po-textual">
      [Presentation slides].
      </textual><link class="po-inline e545 e545" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://jats.nlm.nih.gov/jats-con/program/2010/presentations/beck.pptx</textual></link><textual class="po-textual"> 
    </textual></bibliomixed><bibliomixed class="po-block e546 e546" xml:id="I" xreflabel="Lou Burnard et al 2005"><textual class="po-textual">
      Burnard, Lou, &amp; Rahtz, Sebastian. (2005).
      </textual><emphasis class="po-inline e547 e547" role="ital"><textual class="po-textual">One Document Does It All</textual></emphasis><textual class="po-textual">
      [Presentation slides].
      </textual><link class="po-inline e548 e548" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.tei-c.org/Talks/2005/Sofia/odds.pdf</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e549 e549" xml:id="D" xreflabel="Catapano 2010"><textual class="po-textual">
      Catapano, Terry. (2010).
      TaxPub: An Extension of the 
      NLM/NCBI Journal Publishing DTD for Taxonomic Descriptions.
      </textual><emphasis class="po-inline e550 e550" role="ital"><textual class="po-textual">Proceedings of the Journal Article Tag Suite Conference.</textual></emphasis><textual class="po-textual">
      </textual><link class="po-inline e551 e551" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.ncbi.nlm.nih.gov/books/NBK47081/</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e552 e552" xml:id="T" xreflabel="Georges 2010"><textual class="po-textual">
      Georges, Florent. (2010).
      </textual><emphasis class="po-inline e553 e553" role="ital"><textual class="po-textual">Packaging System, EXPath 
      Candidate Module 11 November 2010</textual></emphasis><textual class="po-textual">
      [Specification].
      </textual><link class="po-inline e554 e554" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://expath.org/spec/pkg/20101111</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e555 e555" xml:id="S" xreflabel="Georges 2011"><textual class="po-textual">
      Georges, Florent. (2011).
      CXAN: a case-study for Servlex, an XML web framework.
      </textual><emphasis class="po-inline e556 e556" role="ital"><textual class="po-textual">XML Prague 2011 Conference Proceedings.</textual></emphasis><textual class="po-textual">
      </textual><link class="po-inline e557 e557" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.xmlprague.cz/2011/files/xmlprague-2011-proceedings.pdf</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e558 e558" xml:id="AD" xreflabel="Kelly 2010"><textual class="po-textual">
      Kelly, Laura. (2010).
      JATS to EPUB: Unraveling the Mystery.
      </textual><emphasis class="po-inline e559 e559" role="ital"><textual class="po-textual">Proceedings of the Journal Article Tag Suite Conference.</textual></emphasis><textual class="po-textual">
      </textual><link class="po-inline e560 e560" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.ncbi.nlm.nih.gov/books/NBK47314/</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e561 e561" xml:id="M" xreflabel="Orchard 2004"><textual class="po-textual">
      Orchard, David. (2004, October).
      Extensibility, XML Vocabularies, and XML Schema.
      </textual><emphasis class="po-inline e562 e562" role="ital"><textual class="po-textual">XML.com</textual></emphasis><textual class="po-textual">.
      </textual><link class="po-inline e563 e563" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.xml.com/pub/a/2004/10/27/extend.html</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e564 e564" xml:id="G" xreflabel="Owens 2010"><textual class="po-textual">
      Owens, Evan. (2010).
      The Evolving Information Ecostructure of Publishing.
      </textual><emphasis class="po-inline e565 e565" role="ital"><textual class="po-textual">Journal Article Tag Suite Conference.</textual></emphasis><textual class="po-textual">
      [Presentation].
      </textual><link class="po-inline e566 e566" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://videocast.nih.gov/summary.asp?Live=9729&amp;start=18474</textual></link><textual class="po-textual"> (video);
      </textual><link class="po-inline e567 e567" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://jats.nlm.nih.gov/jats-con/program/2010/presentations/owens.pptx</textual></link><textual class="po-textual"> (slides).
    </textual></bibliomixed><bibliomixed class="po-block e568 e568" xml:id="P" xreflabel="Piez 2010"><textual class="po-textual">
      Piez, Wendell. (2010).
      Fitting the Journal Publishing 3.0 Preview Stylesheets to 
      Your Needs: Capabilities and Customizations.
      </textual><emphasis class="po-inline e569 e569" role="ital"><textual class="po-textual">Proceedings of the Journal Article Tag Suite Conference.</textual></emphasis><textual class="po-textual">
      </textual><link class="po-inline e570 e570" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.ncbi.nlm.nih.gov/books/NBK47104/</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e571 e571" xml:id="C" xreflabel="Rosenblum 2010"><textual class="po-textual">
      Rosenblum, Bruce. (2010). 
      NLM Journal Publishing DTD Flexibility: How and Why Applications of the NLM DTD Vary
      Based on Publisher-Specific Requirements.
      </textual><emphasis class="po-inline e572 e572" role="ital"><textual class="po-textual">Proceedings of the Journal Article Tag Suite Conference.</textual></emphasis><textual class="po-textual">
      </textual><link class="po-inline e573 e573" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.ncbi.nlm.nih.gov/books/NBK47101/</textual></link><textual class="po-textual">
    </textual></bibliomixed><bibliomixed class="po-block e574 e574" xml:id="AB" xreflabel="Walsh 2004"><textual class="po-textual">
      Walsh, Norman. (2004, March).
      </textual><emphasis class="po-inline e575 e575" role="ital"><textual class="po-textual">On the Web, My Name is 266 North Pleasant Street</textual></emphasis><textual class="po-textual">
      [Blog post].
      </textual><link class="po-inline e576 e576" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://norman.walsh.name/2004/03/03/266NorthPleasant</textual></link><textual class="po-textual">      
    </textual></bibliomixed></bibliography></article></classedDocument>