<?xml version="1.0" encoding="UTF-8" standalone="no"?><classedDocument><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="po-hcontainer e0 e0" version="5.0-subset Balisage-1.2"><title class="po-block e1 e1"><textual class="po-textual">Prying Apart Semantics and Implementation</textual></title><subtitle class="po-block e2 e2"><textual class="po-textual">Generating XML Schemata directly from ontologically sound conceptual models</textual></subtitle><info class="po-record e3 e3"><confgroup class="po-record e4 e4"><conftitle class="po-field e5 e5"><textual class="po-textual">Balisage: The Markup Conference 2009</textual></conftitle><confdates class="po-field e6 e6"><textual class="po-textual">August 11 - 14, 2009</textual></confdates></confgroup><abstract class="po-container e7 e7"><para class="po-block e8 e8"><textual class="po-textual">Central to interoperability is a shared conceptualization of the domain or
                universe of discourse (UoD). A conceptual model (CM) documents this shared
                understanding between people in a formal language, augmenting prose but neutral of
                later implementation decisions. Having such an explicit layer has benefits for
                enhanced interoperability, higher quality implementations, reuse and mapping, and as
                such is recognized as desirable by many modeling frameworks. In this paper, we
                describe our motivation and efforts to date, to use the ontologically well founded
                profile of the Unified Modeling Language (UML) proposed in </textual><xref class="po-milestone e9 e9" linkend="Guizzardi-2005"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> to create such models. Relevant subsets of a CM form
                the basis for physical data models (PDM) targeting specific technologies, in this
                case the generation of Extensible Markup Language (XML) schemata represented in the
                World Wide Web Consortium (W3C) Schema Language (XSD). These physical data models
                are annotated by a developer, with a set of encoding directives. These encoding
                directives and the custom developed software that interprets them to map concepts in
                the CM to their expression in an XSD, are our principle contribution. The CM
                language, the XSD encoding annotations, and the software are briefly
                described.</textual></para></abstract><author class="po-record e10 e10"><personname class="po-record e11 e11"><firstname class="po-field e12 e12"><textual class="po-textual">Bruce</textual></firstname><othername class="po-field e13 e13"><textual class="po-textual">Todd</textual></othername><surname class="po-field e14 e14"><textual class="po-textual">Bauman</textual></surname></personname><personblurb class="po-container e15 e15"><para class="po-block e16 e16"><textual class="po-textual">Mr. Bauman's first introduction to markup was in the early 1990's where he
                    oversaw the tagging of foreign language dictionaries in compliance with the Text
                    Encoding Initiative (TEI) standards and led a development team that produced
                    multi-lingual retrieval tool for those dictionaries based on the Standard
                    Generalized Markup Language (SGML) . Mr. Bauman became interested in using SGML
                    and then XML to solve entrenched interoperability problems. This led him to look
                    seriously at information / data modeling and now ontology for answers to
                    interoperabilities' persistent questions. Twelve years later he has yet to solve
                    those entrenched problems (this is really hard).</textual></para><para class="po-block e17 e17"><textual class="po-textual">Mr. Bauman has been attending [off and on] the Balisage series of conferences
                    since the HyTime days, and has watched XML grow up over its 11 year history. </textual></para><para class="po-block e18 e18"><textual class="po-textual">Mr. Bauman holds a BS in Computer Engineering and an MS in Computer
                    Science.</textual></para></personblurb><email class="po-field e19 e19"><textual class="po-textual">btbauma@earthlink.net</textual></email><affiliation class="po-record e20 e20"><jobtitle class="po-field e21 e21"><textual class="po-textual">System Engineer</textual></jobtitle><orgname class="po-block e22 e22"><textual class="po-textual">U.S. Department of Defense</textual></orgname></affiliation></author><legalnotice class="po-container e23 e23"><para class="po-block e24 e24"><textual class="po-textual">Copyright Â© 2009 by the author.  Used with
                permission.</textual></para></legalnotice><keywordset class="po-table e25 e25" role="author"><keyword class="po-field e26 e26"><textual class="po-textual">Conceptual Modeling</textual></keyword><keyword class="po-field e27 e27"><textual class="po-textual">Ontology</textual></keyword><keyword class="po-field e28 e28"><textual class="po-textual">UML</textual></keyword><keyword class="po-field e29 e29"><textual class="po-textual">XML Schema</textual></keyword></keywordset></info><section class="po-hcontainer e30 e30"><title class="po-block e31 e31"><textual class="po-textual">Introduction</textual></title><para class="po-block e32 e32"><textual class="po-textual">Schemata in the World Wide Web Consortium's (W3C) Extensible Markup Language (XML)
            Schema language (XSD), Relax Next Generation (RNG), Structured Query Language (SQL) Data
            Definition Language (DDL), Resource Description Framework Schema (RDFS), or Web Ontology
            Language (OWL)) are typically created directly. A basic text editor can be used,
            although more likely today it will be with a design tool that uses visual symbols with a
            more or less bijective mapping to the constructs in the chosen implementation language.
            Various profiles of the Unified Modeling Language (UML) class diagrams have been
            proposed as a visualization for XSD design </textual><xref class="po-milestone e33 e33" linkend="Bernauer-2004"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">; various forms
            of Entity Relationship Diagrams (ERD)'s are the preferred choice for relational database
            (SQL DDL) design. And then there are the numerous languages specific to a given vendors
            tool.</textual></para><para class="po-block e34 e34"><textual class="po-textual">As useful as these visual design languages are, they are first, representations of a
            design in a specific implementation language, and only secondarily do they reflect the
            semantics of a Universe of Discourse (UoD) or domain.</textual><footnote class="po-popup e35 e35" xml:id="DescriptionOrDesign"><para class="po-block e36 e36"><textual class="po-textual">Surprisingly the claim that these visual languages represent an
                    implementation, and do not directly model the UoD is controversial in some
                    communities of practitioners. A well written, and thorough treatment of this
                    topic in the data modeling community can be found in </textual><xref class="po-milestone e37 e37" linkend="Simsion-2007"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref></para></footnote><textual class="po-textual"> Or as stated in the introduction to </textual><xref class="po-milestone e38 e38" linkend="Guizzardi-2005"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> pages 7
            - 8.</textual><blockquote class="po-container e39 e39"><para class="po-block e40 e40"><textual class="po-textual">Nowadays, many languages exist that are used for the purpose of creating
                    representations of real-world conceptualizations. These languages are sometimes
                    named domain modeling languages (e.g., LINGO), ontology representation languages
                    (e.g., OWL), semantic data modeling languages (e.g., ER), among other terms. ...
                    Although these languages are employed in practice for conceptual modeling, they
                    are not designed with the specific purpose of being truthful to reality. For
                    instance, LINGO (Falbo &amp; Menezes &amp; Rocha, 1998; Falbo &amp; Guizzardi
                    &amp; Duarte, 2002) was designed with the specific objective of achieving a
                    positive trade-off between expression power of the language and the ability to
                    facilitate bridging the gap between the conceptual and implementation levels.
                    This preoccupation also seems to be present in Peter Chen's original proposal
                    for ER diagrams (Chen, 1976). OWL (Horrocks &amp; Patel-Schneider &amp; van
                    Harmelen, 2003) has been designed with the main purpose of achieving
                    computational efficiency in an automatic reasoning process. Some other
                    languages, such as Z (Spivey, 1988) and CC Technique (Dijkman &amp; Ferreira
                    Pires &amp; Joosten, 2001), take advantage of the simplicity of the well-defined
                    mathematical framework of set theory. Finally, some of the languages used
                    nowadays for conceptual modeling were created for different purposes, the most
                    notorious example being the UML (OMG, 2003c), which initially focused on
                    software design.</textual></para></blockquote><textual class="po-textual">Designs reflect hard engineering trade-offs, starting with the initial
            choice of an implementation language which will have only limited abilities to express
            the full richness of the UoD, and ending with the numerous design choices made (e.g.,
            denormalization, implementing relationships, by reference, vs. by value, collapsing
            generalization hierarchies). This intertwining of implementation design and semantics
            with semantics taking a back seat, means that no formal model representing just the
            semantics remains. The sole guardian of pure semantics is the informal prose, in the
            text box labeled </textual><emphasis class="po-inline e41 e41"><textual class="po-textual">Description</textual></emphasis><textual class="po-textual">.</textual></para><para class="po-block e42 e42"><textual class="po-textual">The use of prose to capture semantics is of course essential, the target audience that
            needs to fully account for semantics are people, and natural language with all its
            richness, complexity, and nuance is essential. The challenge of course with relying only
            on words is their ambiguity. Although formally the interplay of words with meaning is
            studied in fields such as linguistics, semiotics, phenomenology, communication theory
            etc., Humpty Dumpty sums up the problem rather well. </textual></para><para class="po-block e43 e43"><textual class="po-textual">
            </textual><blockquote class="po-container e44 e44"><para class="po-block e45 e45"><quote class="po-inline e46 e46"><textual class="po-textual">When I use a word,</textual></quote><textual class="po-textual"> Humpty Dumpty said, in a rather scornful
                        tone, </textual><quote class="po-inline e47 e47"><textual class="po-textual">it means just what I choose it to mean, neither more nor less.</textual></quote><textual class="po-textual">
                    </textual><quote class="po-inline e48 e48"><textual class="po-textual">The question is,</textual></quote><textual class="po-textual"> said Alice, </textual><quote class="po-inline e49 e49"><textual class="po-textual">whether you can make words
                    mean so many different things.</textual></quote><textual class="po-textual">
                    </textual><quote class="po-inline e50 e50"><textual class="po-textual">The question is,</textual></quote><textual class="po-textual"> said Humpty Dumpty, </textual><quote class="po-inline e51 e51"><textual class="po-textual">which is to be master - that's all.</textual></quote><textual class="po-textual"> Alice was too much puzzled to say anything; so after a minute Humpty Dumpty began again.
                        </textual><quote class="po-inline e52 e52"><textual class="po-textual">They've a temper, some of them - particularly verbs: they're the
                        proudest - adjectives you can do anything with, but not verbs - however, I
                        can manage the whole lot of them! Impenetrability! that's what I say!</textual></quote><textual class="po-textual"> 
                            </textual><citation class="po-atom e53 e53"><textual class="po-textual">Lewis Carroll, Through the Looking
                    Glass</textual></citation></para></blockquote><textual class="po-textual">
        </textual></para><para class="po-block e54 e54"><textual class="po-textual">The lack of a separate design neutral, but formal accounting of semantics has several
            drawbacks. The first, is that ultimately for two or more systems to interoperate they
            must share a compatible understanding of the UoD, they needn't necessarily share the
            same design. This task of determining, and ultimately documenting via a mapping,
            compatibility, or recognizing when and where it is not possible is made more difficult.
            Second, when people negotiate to decide on a common language for sharing information,
            the discussion can / will often stray between discussing differences in meaning, and
            differences in design. Its helpful in resolving disagreements to know which of the two
            classes of discussion one is having. Third, it is perfectly reasonable, desirable, and
            necessary to implement the same UoD in multiple implementation languages and/or in
            multiple designs. Capturing explicitly a model of the UoD allows it to be reused. This
            is even more beneficial if the domain is highly complex and/or technical and modeling it
            correctly is expensive, time consuming and difficult.</textual></para><para class="po-block e55 e55"><textual class="po-textual">A solution, is to create a conceptual model (CM). A model that formally represent
            those aspects of the UoD that are deemed relevant for a particular purpose, (e.g., the
            static structural aspects of a domain essential to the development of information
            models), but that is neutral of physical design decisions. Then from that model produce
            though a semi-automated mapping process logical / physical level models, from which,
            because of their isomorphism to a targeted schema language, a schema can be
            automatically produced.</textual></para><para class="po-block e56 e56"><textual class="po-textual">The idea is hardly new.</textual><quote class="po-inline e57 e57"><textual class="po-textual">The issue is essentially one of implementation
                independence - the goal (or assumption) that the conceptual data model be
                independent of the implementation language. This view dates at least from Chen
                (1976), is the basis of the conceptualization principle in the ANSI/SPARC
                    framework </textual><xref class="po-milestone e58 e58" linkend="ISO-TR9007"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, and has been frequently re-stated ...
                This ideal does not appear to be achieved in practice</textual></quote><textual class="po-textual"> (</textual><xref class="po-milestone e59 e59" linkend="Simsion-2007"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, p. 51). Nor is the idea unique to the data modeling
            community from which the above quote originates. The Model Driven Architecture (MDA) of
            the Object Management Group (OMG) has the concepts of the Platform Independent Model
            (PIM) and Platform Specific Model (PSM) </textual><xref class="po-milestone e60 e60" linkend="OMG-MDA"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. The recognition of the
            need for conceptual models to back up XML schema design is also old, dating back to the
            beginning of XML, and XML's predecessor, Standardized Generalized Markup language
                (SGML).</textual><footnote class="po-popup e61 e61" xml:id="XML-Survey"><para class="po-block e62 e62"><textual class="po-textual">A survey of some of the conceptual modeling proposals that have been made for
                    XML can be found in </textual><xref class="po-milestone e63 e63" linkend="NeÄaskÃ½-2006"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref></para></footnote></para><para class="po-block e64 e64"><textual class="po-textual">The proposal outlined in the sections that follow is also in one sense nothing new.
            Its strength is not in the idea that a conceptual model is useful, but in what modeling
            language has been pressed into service. The conceptual modeling language outlined below,
            is a subset of that proposed by Giancarlo Guizzardi, principally in </textual><xref class="po-milestone e65 e65" linkend="Guizzardi-2005"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> . In his 2005 work, a foundational ontology in later
            works referred to as the Unified Foundational Ontology (UFO), designed to capture
            agreements about the semantics of a UoD by people and for people, visualized using a
            profile of UML 2.0 is defined. We have changed, only trivially his proposal based on
            some ideas from data modeling </textual><xref class="po-milestone e66 e66" linkend="Simsion-2005"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and other sources both to
            simplify the language, and make it more familiar to people with a data modeling
            background. The UFO builds upon cross disciplinary knowledge as well as research in
            formal ontology [as applied to computer science] that has occurred in the last fifteen
            years.</textual></para><para class="po-block e67 e67"><textual class="po-textual">From a conceptual model based on this language, multiple physical data models (PDM)
            which subset, and / or extend, the larger conceptual model are generated. A PDM is then
            annotated by a designer with a set of encoding options that specify how the concepts in
            the CM should be represented in the XSD. We have chosen the initial set of encoding
            options based on internal experience with creating UML to XML schema mappings since
            2000-2001 much like those surveyed in </textual><xref class="po-milestone e68 e68" linkend="Bernauer-2004"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. Software written
            in Extensible Stylesheet Transformations (XSLT) version 2.0 is the primary mechanism by
            which the annotated physical data models are compiled into XML schemata. </textual><xref class="po-milestone e69 e69" linkend="CM-PDM"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> show an overview of the complete process.</textual></para><figure class="po-container e70 e70" xml:id="CM-PDM"><title class="po-block e71 e71"><textual class="po-textual">Model Development Process</textual></title><mediaobject class="po-container e72 e72"><imageobject class="po-container e73 e73"><imagedata class="po-meta e74 e74" fileref="../../../vol3/graphics/Bauman01/Bauman01-001.jpg" format="jpg" width="125%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><para class="po-block e75 e75"><textual class="po-textual">In the following sections, our requirements for a CM modeling language are explained,
            followed by a brief outline of the ontologically well founded language we have selected.
            This is followed by an example physical data model, that has been annotated with XSD
            encoding directives. How those directives drive the compilation of that PDM into an XSD
            is explained. The software implementation in Sybase Power Designer (a commercial data
            modeling / enterprise architecture tool), and in particular the implementation of the
            XSLT code that generates an XML schema from it, is touched on briefly. This is followed
            by a section on further work, and conclusions. Appendix A contains a more complete
            account of the XSD encoding options available.</textual></para></section><section class="po-hcontainer e76 e76"><title class="po-block e77 e77"><textual class="po-textual">Semantics</textual></title><subtitle class="po-block e78 e78"><textual class="po-textual">An Ontologically based Conceptual Modeling Language</textual></subtitle><para class="po-block e79 e79"><textual class="po-textual">
            </textual><blockquote class="po-container e80 e80"><para class="po-block e81 e81"><textual class="po-textual">All models are wrong, some are useful. </textual><citation class="po-atom e82 e82"><textual class="po-textual">George Box</textual></citation></para></blockquote><textual class="po-textual">
        </textual></para><para class="po-block e83 e83"><textual class="po-textual">This frequently repeated quote represents a very pragmatic definition of what makes a
            good model and it is the position adopted here for both models, and by extension
            modeling languages and the meta-models / ontologies that they are based on. As such, no
            claims are made that the modeling language briefly introduced below, the foundational
            ontology it is based on, or the models that are described with it, have any lock on a
            single, absolute truth. Instead, the language has been chosen / customized because we
            believe it can meet the following pragmatic requirements</textual><footnote class="po-popup e84 e84" xml:id="Modeling-Language"><para class="po-block e85 e85"><textual class="po-textual">As opposed to those aspects of a modeling language that should always be
                    generally true. Guizzardi explores this in chapter 2 of </textual><xref class="po-milestone e86 e86" linkend="Guizzardi-2005"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. An informal description of desirable properties
                    of a model can be found at
                        </textual><link class="po-inline e87 e87" xlink:actuate="onRequest" xlink:show="new" xlink:type="simple"><textual class="po-textual">http://www.idiagram.com/ideas/models.html</textual></link></para></footnote><textual class="po-textual">: </textual><orderedlist class="po-table e88 e88" xml:id="Requirements"><title class="po-block e89 e89"><textual class="po-textual">Modeling Language Requirements</textual></title><listitem class="po-container e90 e90" xml:id="Req-Communication"><para class="po-block e91 e91"><textual class="po-textual">Document an agreement between people, to a reasonable level of
                        specificity,</textual><footnote class="po-popup e92 e92" xml:id="Model-Specificity"><para class="po-block e93 e93"><textual class="po-textual">The phrase </textual><emphasis class="po-inline e94 e94"><textual class="po-textual">reasonable level of specificity</textual></emphasis><textual class="po-textual"> is
                                simply an acknowledgement that no formal modeling language can
                                capture all of the nuance of a concept necessary for human
                                understanding. Prose is still essential. Instead the requirement is
                                that the modeling language at least convey enough information so
                                that all the people who read [and understand it] find themselves on
                                the same street, if not in the same house.</textual></para></footnote><textual class="po-textual"> those aspects of a UoD or domain that are relevant for the
                        design of information/data models, but without committing to a specific
                        implementation language.</textual></para></listitem><listitem class="po-container e95 e95" xml:id="Req-Design"><para class="po-block e96 e96"><textual class="po-textual">Support through human directed action, and to the greatest extent
                        possible, the automatic generation of designs and schemata encoded as XSDs
                        appropriate for information exchange .</textual></para></listitem><listitem class="po-container e97 e97" xml:id="Req-DDL"><para class="po-block e98 e98"><textual class="po-textual">Similarly support the generation of designs and schemata encoded as SQL
                        DDL appropriate for relational data bases.</textual><footnote class="po-popup e99 e99" xml:id="DDL"><para class="po-block e100 e100"><textual class="po-textual">Although this is a requirement, it has not yet been proven.
                                Because of the extensive expertise of the team that worked on this
                                project in relational database design, it does seem quite likely
                                that this will work when we get around to creating the necessary
                                software.</textual></para></footnote></para></listitem><listitem class="po-container e101 e101" xml:id="Req-OWL"><para class="po-block e102 e102"><textual class="po-textual">If possible, support the generation of designs and schemata encoded in OWL
                        Description Logic (DL).</textual><footnote class="po-popup e103 e103" xml:id="OWL-DL"><para class="po-block e104 e104"><textual class="po-textual">Once again, this has yet to be proven. An initial assessment as to
                                the feasibility of this is promising. It would potentially require
                                the adoption of additional constructs defined in the UFO. The rules
                                (and resulting code) to map it into OWL DL would likely be easier
                                then the rules / code currently in place to generate an XML schema.
                                This is due to the very direct mapping between the constructs in the
                                conceptual modeling language and OWL DL, and to the fact that
                                relationship encoding in RDF is prescribed, where as in general XML
                                the variability in how relationships are encoded is considerable.
                            </textual></para></footnote></para></listitem><listitem class="po-container e105 e105" xml:id="Req-Approchable"><para class="po-block e106 e106"><textual class="po-textual">Be reasonably approachable by personnel trained in traditional logical
                        data modeling using ERD notations.</textual><footnote class="po-popup e107 e107" xml:id="Approachable"><para class="po-block e108 e108"><textual class="po-textual">This requirement is driven by the practical resource constraints
                                of being able to find people with the correct skill set for creating
                                conceptual models for information systems.</textual></para></footnote></para></listitem><listitem class="po-container e109 e109" xml:id="Req-Construct"><para class="po-block e110 e110"><textual class="po-textual">Reduce the level of construct variability, to support the development of
                        models in a distributed environment.</textual><footnote class="po-popup e111 e111" xml:id="Construct-Variability"><para class="po-block e112 e112"><textual class="po-textual">Construct variability, defined in </textual><xref class="po-milestone e113 e113" linkend="Verelst-2004"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">,
                                is the use of different modeling constructs (e.g., attribute vs.
                                entity) to represent the same real-world concept.</textual></para></footnote></para></listitem><listitem class="po-container e114 e114" xml:id="Req-Horizontal-Vertical"><para class="po-block e115 e115"><textual class="po-textual">Accommodate both vertical and horizontal variability, to support the
                        integration of multiple different perspectives of the same concept within an
                            enterprise.</textual><footnote class="po-popup e116 e116" xml:id="Vertical-Horizontal-Variability"><para class="po-block e117 e117"><textual class="po-textual">Horizontal and vertical variability is defined in </textual><xref class="po-milestone e118 e118" linkend="Verelst-2004"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. Vertical variability is the use of
                                different levels of generalization / abstraction to conceptualize
                                the same UoD. Horizontal variability is the use of different
                                categorizations at the same level of generalization / abstraction.
                            </textual></para></footnote></para></listitem></orderedlist></para><para class="po-block e119 e119"><textual class="po-textual">After attempting to adapt unsuccessfully both standard UML and ERD notations to meet
            the above requirements, the realization through both experience and subsequent
            examination of the literature (e.g., </textual><xref class="po-milestone e120 e120" linkend="Simsion-2007"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> ), was that both
            languages, and the informal ontologies that they are based on, were too biased for
            design in a specific technology. This led us to examine how formal ontology</textual><footnote class="po-popup e121 e121" xml:id="Other-Disciplines"><para class="po-block e122 e122"><textual class="po-textual">Ontology is not the sole discipline that can shed light on conceptual
                    modeling. Epistemology, phenomonology, semiotcs, linguistics, cognitive
                    psychology, and communication theory are but a few that have something to add,
                    and are indeed used in Guizzardi's work.</textual></para></footnote><textual class="po-textual"> could be employed, not in the computer science sense of producing a specific
            artifact, expressed typically in a formal logic variant, but in the philosophical sense.</textual><blockquote class="po-container e123 e123"><para class="po-block e124 e124"><textual class="po-textual">... Formal Ontology deals with formal ontological structures (e.g., theory of
                    parts, theory of wholes, types and instantiation, identity, dependence, unity),
                    i.e., with formal aspects of objects irrespective of their particular nature.
                    The unfolding of Formal Ontology as a philosophical discipline aims at
                    developing a system of general categories and their ties, which can be used in
                    the development of scientific theories and domain-specific common sense theories
                    of reality (</textual><xref class="po-milestone e125 e125" linkend="Guizzardi-2005"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, p. 5).</textual></para></blockquote></para><para class="po-block e126 e126"><textual class="po-textual">In the end we settled on the formal foundational ontology, and its representation in
            UML defined in Guizzardi's 2005 PhD thesis </textual><xref class="po-milestone e127 e127" linkend="Guizzardi-2005"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and
            subsequent research papers </textual><xref class="po-milestone e128 e128" linkend="Guizzardi-2006a"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">
            </textual><xref class="po-milestone e129 e129" linkend="Guizzardi-2006b"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">
            </textual><xref class="po-milestone e130 e130" linkend="Guizzardi-2007"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">
            </textual><xref class="po-milestone e131 e131" linkend="Guizzardi-2008"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> to name just a few, that define the Unified
            Foundational Ontology (UFO). Some small changes in terminology were made to make the UFO
            more approachable to classically trained ERD modelers. Its also important to point out
            that no claim is being made that the UFO is the only upper level ontology that will meet
            the requirements outlined above. What is being claimed is that the selection and
            explicit recognition of a formal upper level ontology as the basis for domain ontologies
            / models is essential to give those models the precise semantic underpinning needed to
            enable interoperability. What follows is a necessarily brief introduction to UFO and its
            representation in UML.</textual></para><para class="po-block e132 e132"><textual class="po-textual">This ontology / language is used to facilitate communication between people, although
            admittedly it is not something that a person, without training will fully grasp.
                </textual><quote class="po-inline e133 e133"><textual class="po-textual">[The ontology ] aims at capturing the ontological distinctions underlying
                human cognition and common sense.</textual><xref class="po-milestone e134 e134" linkend="Guizzardi-2005"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref></quote><textual class="po-textual"> The
            ontology is the basis for recording one, (among many possible) conceptualizations of the
            real-world, defining what is a valid state of that world. As such, the language symbols
            designate real-world objects, and not information structures as is the case is the PDMs
            derived from it. Optionality on attributes and relationships is strongly 
            discouraged</textual><footnote class="po-popup e135 e135" xml:id="Merelogical-Optionality"><para class="po-block e136 e136"><textual class="po-textual">Optionality is fine on whole-part relations, where optional parts are a
                    perfectly reasonable thing.</textual></para></footnote><textual class="po-textual">, </textual><quote class="po-inline e137 e137"><textual class="po-textual">... from an ontological standpoint, there is no such a thing as an
                optional property and, hence, the representation of optional cardinality leads to
                unsound models (in the technical sense of chapter 2), with undesirable consequences
                in terms of clarity</textual></quote><textual class="po-textual"> (</textual><xref class="po-milestone e138 e138" linkend="Guizzardi-2005"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, p. 139).</textual></para><section class="po-hcontainer e139 e139"><title class="po-block e140 e140"><textual class="po-textual">Endurant Types</textual></title><para class="po-block e141 e141"><textual class="po-textual">Like many upper level 'common sense' ontologies the first level distinction is
                between endurants and events, or things that exist </textual><emphasis class="po-inline e142 e142"><textual class="po-textual">in time</textual></emphasis><textual class="po-textual">, and
                maintain their identity, and things that exist </textual><emphasis class="po-inline e143 e143"><textual class="po-textual">of time</textual></emphasis><textual class="po-textual">. Unlike
                in the UFO, and in particular UFO-B, in our subset the concept of an event is not
                further specialized. Endurants are. Endurants (e.g., kind, category, role,
                associative) are specialized based on three basic criteria:</textual><itemizedlist class="po-table e144 e144"><listitem class="po-container e145 e145"><para class="po-block e146 e146"><textual class="po-textual">Existential independence: Is the concept existentially independent,
                            dependent on exactly one other concept, or dependent on two or more
                            other concepts? Existentially dependent concepts, are those that if they
                            are not seen in, or inhered in another object, don't exist.</textual></para></listitem><listitem class="po-container e147 e147"><para class="po-block e148 e148"><textual class="po-textual">Single principle of identity: Does the concept convey a unified
                            principle of identity? (e.g, all instances of the type have a common way
                            in which they are identified; and thus, instances can be counted
                            directly).</textual></para></listitem><listitem class="po-container e149 e149"><para class="po-block e150 e150"><textual class="po-textual">Rigidity: Is each instance of a type always of that type? (i.e., the
                            instance - type relationship is rigid), or is it only sometimes
                            (typically within some period of time), associated with a type (i.e.
                            anti-rigid)?</textual></para></listitem></itemizedlist><textual class="po-textual">This leads to the following breakdown:</textual><table class="po-container e151 e151" frame="void"><caption class="po-container e152 e152"><para class="po-block e153 e153"><textual class="po-textual">Endurant Types</textual></para></caption><thead class="po-container e154 e154"><tr class="po-table e155 e155"><th class="po-field e156 e156"><textual class="po-textual">Name</textual></th><th class="po-field e157 e157"><textual class="po-textual">Independent</textual></th><th class="po-field e158 e158"><textual class="po-textual">Identity</textual></th><th class="po-field e159 e159"><textual class="po-textual">Rigid</textual></th><th class="po-field e160 e160"><textual class="po-textual">Description</textual></th></tr></thead><tbody class="po-table e161 e161"><tr class="po-table e162 e162"><td class="po-block e163 e163"><textual class="po-textual">kind</textual></td><td align="center" class="po-block e164 e164"><textual class="po-textual">+</textual></td><td align="center" class="po-block e165 e165"><textual class="po-textual">+</textual></td><td align="center" class="po-block e166 e166"><textual class="po-textual">+</textual></td><td class="po-block e167 e167"><quote class="po-inline e168 e168"><textual class="po-textual">A Â«kindÂ» represents a substance sortal whose instances are
                                    functional complexes. Examples include instances of Natural
                                    Kinds (such as Person, Dog, Tree) and of artifacts (Chair, Car,
                                    Television).</textual></quote><textual class="po-textual"> (</textual><xref class="po-milestone e169 e169" linkend="Guizzardi-2005"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, p.
                                317)</textual></td></tr><tr class="po-table e170 e170"><td class="po-block e171 e171"><textual class="po-textual">role</textual></td><td align="center" class="po-block e172 e172"><textual class="po-textual">+</textual></td><td align="center" class="po-block e173 e173"><textual class="po-textual">+</textual></td><td align="center" class="po-block e174 e174"><textual class="po-textual">-</textual></td><td class="po-block e175 e175"><quote class="po-inline e176 e176"><textual class="po-textual">A Â«roleÂ» represents a phased-sortal role, i.e. anti-rigid and
                                    relationally dependent universal. For instance, the role student
                                    is played by an instance of the kind Person.</textual></quote><textual class="po-textual"> (</textual><xref class="po-milestone e177 e177" linkend="Guizzardi-2005"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, p. 319)</textual></td></tr><tr class="po-table e178 e178"><td class="po-block e179 e179"><textual class="po-textual">category</textual></td><td align="center" class="po-block e180 e180"><textual class="po-textual">+</textual></td><td align="center" class="po-block e181 e181"><textual class="po-textual">-</textual></td><td align="center" class="po-block e182 e182"><textual class="po-textual">+</textual></td><td class="po-block e183 e183"><quote class="po-inline e184 e184"><textual class="po-textual">A Â«categoryÂ» represents a rigid and relationally independent
                                    mixin, i.e., a dispersive universal that aggregates essential
                                    properties which are common to different substance sortals. For
                                    example, the category RationalEntity as a generalization of
                                    Person and IntelligentAgent.</textual></quote><textual class="po-textual"> (</textual><xref class="po-milestone e185 e185" linkend="Guizzardi-2005"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, p. 319)</textual></td></tr><tr class="po-table e186 e186"><td class="po-block e187 e187"><textual class="po-textual">role category</textual></td><td align="center" class="po-block e188 e188"><textual class="po-textual">+</textual></td><td align="center" class="po-block e189 e189"><textual class="po-textual">-</textual></td><td align="center" class="po-block e190 e190"><textual class="po-textual">-</textual></td><td class="po-block e191 e191"><quote class="po-inline e192 e192"><textual class="po-textual">A Â«role categoryÂ» represents an anti-rigid and externally
                                    dependent nonsortal, i.e., a dispersive universal that
                                    aggregates properties which are common to different roles. In
                                    includes formal roles such as whole and part, and initiator and
                                    responder.</textual></quote><textual class="po-textual"> (</textual><xref class="po-milestone e193 e193" linkend="Guizzardi-2005"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, p. 320)
                                Examples include resource, asset, communicant.</textual></td></tr><tr class="po-table e194 e194"><td class="po-block e195 e195"><textual class="po-textual">dependent</textual></td><td align="center" class="po-block e196 e196"><textual class="po-textual">- (1)</textual></td><td align="center" class="po-block e197 e197"><textual class="po-textual">+</textual></td><td align="center" class="po-block e198 e198"><textual class="po-textual">+</textual></td><td class="po-block e199 e199"><quote class="po-inline e200 e200"><textual class="po-textual">A &lt;dependentÂ» universal is an intrinsic moment universal.
                                    Every instance of dependent universal is existentially dependent
                                    of exactly one entity. Examples include skills, thoughts,
                                    beliefs, intentions, symptoms, private goals.</textual></quote><textual class="po-textual"> (</textual><xref class="po-milestone e201 e201" linkend="Guizzardi-2005"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, p. 335)</textual></td></tr><tr class="po-table e202 e202"><td class="po-block e203 e203"><textual class="po-textual">associative</textual></td><td align="center" class="po-block e204 e204"><textual class="po-textual">- (2 or more)</textual></td><td align="center" class="po-block e205 e205"><textual class="po-textual">+</textual></td><td align="center" class="po-block e206 e206"><textual class="po-textual">+</textual></td><td class="po-block e207 e207"><quote class="po-inline e208 e208"><textual class="po-textual">Every instance of an &lt;&lt;associative&gt;&gt; universal is
                                    existentially dependent of at least two distinct entities.
                                    Associative's are the instantiation of relational properties
                                    such as marriages, kisses, handshakes, commitments, and
                                    purchases.</textual></quote><textual class="po-textual"> (</textual><xref class="po-milestone e209 e209" linkend="Guizzardi-2005"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, p.
                                335)</textual></td></tr></tbody></table></para></section><section class="po-hcontainer e210 e210"><title class="po-block e211 e211"><textual class="po-textual">Attributes and Datatypes.</textual></title><para class="po-block e212 e212"><textual class="po-textual">[Model] attributes are used exclusively to represent simple existentially
                dependent concepts such as height, weight, color, a social security number, that can
                be mapped directly to single or multi-dimensional value spaces as represented by
                data types.</textual><footnote class="po-popup e213 e213" xml:id="Attribute-Usage"><para class="po-block e214 e214"><textual class="po-textual">It is hoped that the strict definition of what it is to be an attribute,
                        will reduce the construct variability that is often present in models where
                        attributes are used to represent both simple properties and
                        relationships.</textual></para></footnote></para><para class="po-block e215 e215"><textual class="po-textual">Our treatment of datatypes doesn't vary from that found in xsd:schema and other
                languages and so is not elaborated on here. A discussion on the ontological
                foundations of data types as they relate to quality structures, and quale can be
                found in </textual><xref class="po-milestone e216 e216" linkend="Guizzardi-2006a"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> or the work it is based on
                </textual><citation class="po-atom e217 e217"><textual class="po-textual">GÃ¤rdenfors, P. "Conceptual Spaces: the Geometry of Thought", MIT
                    Press, Cambridge, USA, 2000.</textual></citation><table class="po-container e218 e218" frame="void"><caption class="po-container e219 e219"><para class="po-block e220 e220"><textual class="po-textual">Data Types</textual></para></caption><thead class="po-container e221 e221"><tr class="po-table e222 e222"><th class="po-field e223 e223"><textual class="po-textual">Datatype</textual></th><th class="po-field e224 e224"><textual class="po-textual">Description</textual></th></tr></thead><tbody class="po-table e225 e225"><tr class="po-table e226 e226"><td class="po-block e227 e227"><textual class="po-textual">primitive</textual></td><td class="po-block e228 e228"><textual class="po-textual">The value space defined by a set of built in data types. (e.g.,
                                string, float, integer, octets, boolean, data time, date,
                                time).</textual></td></tr><tr class="po-table e229 e229"><td class="po-block e230 e230"><textual class="po-textual">domain</textual></td><td class="po-block e231 e231"><textual class="po-textual">A value space based on a primitive type constrained by range /
                                length / pattern restrictions.</textual></td></tr><tr class="po-table e232 e232"><td class="po-block e233 e233"><textual class="po-textual">enum</textual></td><td class="po-block e234 e234"><textual class="po-textual">A value space based on a primitive type constrained by enumerating
                                its possible values.</textual></td></tr><tr class="po-table e235 e235"><td class="po-block e236 e236"><textual class="po-textual">struct</textual></td><td class="po-block e237 e237"><textual class="po-textual">A multidimensional value space (e.g., color as hue, saturation,
                                intensity).</textual></td></tr><tr class="po-table e238 e238"><td class="po-block e239 e239"><textual class="po-textual">union</textual></td><td class="po-block e240 e240"><textual class="po-textual">A value space formed by the union of 2 or more other data
                                types.</textual></td></tr></tbody></table></para></section><section class="po-hcontainer e241 e241"><title class="po-block e242 e242"><textual class="po-textual">Association</textual></title><para class="po-block e243 e243"><textual class="po-textual">The representation of associations is the one part of the meta-model that deviates
                somewhat from that defined in </textual><xref class="po-milestone e244 e244" linkend="Guizzardi-2005"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. Guizzardi specifies
                a number of association types, often specific to the pairs of endurant types being
                related. The position taken here is that a simpler characterization that collapses
                many of the UFO association types into the three types of identifying,
                non-identifying, and aggregation/composition (whole-part) is sufficient. Identifying
                and non-identifying relations are an important distinction made in ERD modeling,
                between those associations linking entities with a shared identity, and those that
                are not. The concepts that do not have independent existence (e.g., dependent,
                associative) must be tied through identifying relations to concepts that do, and can
                thus provide identity to them. Concepts that are independent are tied together with
                non-identifying relations.</textual></para><para class="po-block e245 e245"><textual class="po-textual">A special form of non-identifying relation is the whole-part (meronymic) relation.
                Like UFO, and UML, we define the relationships of aggregation, and composition, and
                adopt UFO's semantics to clarify the ambiguous treatment of them in UML.</textual><footnote class="po-popup e246 e246" xml:id="Aggregation-Ambiguity"><para class="po-block e247 e247"><quote class="po-inline e248 e248"><textual class="po-textual">In the pre-UML days, people were usually rather vague on what was
                            aggregation and what was association. Whether vague or not, they were
                            always inconsistent with everyone else. As a result, many modelers think
                            that aggregation is important, although for different reasons. So the
                            UML included aggregation, but with hardly any semantics. </textual></quote><textual class="po-textual"> (</textual><xref class="po-milestone e249 e249" linkend="Fowler-2000"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> , p. 85)</textual></para></footnote><textual class="po-textual">. Specifically we have adopted the following additional constraints that
                are defined in UFO.</textual><table class="po-container e250 e250" frame="void"><caption class="po-container e251 e251"><para class="po-block e252 e252"><textual class="po-textual">Whole - Part Instance Constraints</textual></para></caption><thead class="po-container e253 e253"><tr class="po-table e254 e254"><th class="po-field e255 e255"><textual class="po-textual">Name</textual></th><th class="po-field e256 e256"><textual class="po-textual">Description</textual></th><th class="po-field e257 e257"><textual class="po-textual">Note</textual></th><th class="po-field e258 e258"><textual class="po-textual">Example</textual></th></tr></thead><tbody class="po-table e259 e259"><tr class="po-table e260 e260"><td class="po-block e261 e261"><textual class="po-textual">shareable</textual></td><td class="po-block e262 e262"><textual class="po-textual">Indicates whether an instance of a part can locally be shared by
                                more then one instance of a whole.</textual></td><td class="po-block e263 e263"><textual class="po-textual">Shareable is represented as UML aggregation (i.e. an open diamond on
                                the whole side of the association). Non-sharable is represented as
                                UML composition (e.g., a closed diamond on the whole side of the
                                association).</textual></td><td class="po-block e264 e264"><textual class="po-textual">The whole / part relationship between a research group and a
                                researcher is locally sharable, meaning that an instance of a
                                researcher can belong to more then one research group.</textual></td></tr><tr class="po-table e265 e265"><td class="po-block e266 e266"><textual class="po-textual">inseparable</textual></td><td class="po-block e267 e267"><textual class="po-textual">Indicates that the instance of the part is dependent on the instance
                                of a whole (i.e. if the instance of the part is removed from the
                                instance of its whole, it ceases to exist).</textual></td><td class="po-block e268 e268"><textual class="po-textual">Represented with the UML constraint {inseparable} on the
                                association.</textual></td><td class="po-block e269 e269"><textual class="po-textual">The relation between a human body and its brain is inseparable
                                (assuming the nonexistence of brain transplants), meaning that if a
                                brain is separated from a body, it ceases to exist.</textual></td></tr><tr class="po-table e270 e270"><td class="po-block e271 e271"><textual class="po-textual">essential</textual></td><td class="po-block e272 e272"><textual class="po-textual">Indicates that the instance of the whole is dependent on the
                                instance of the part (i.e. if the instance of the part is removed
                                form the instance of its whole, the whole ceases to exist.)</textual></td><td class="po-block e273 e273"><textual class="po-textual">Represented with the UML constraint {essential} on the
                                association.</textual></td><td class="po-block e274 e274"><textual class="po-textual">The relation between a human body and its brain is essential,
                                meaning that if a brain is separated from a body, the body ceases to
                                exist.</textual></td></tr></tbody></table></para></section><section class="po-hcontainer e275 e275"><title class="po-block e276 e276"><textual class="po-textual">Generalization</textual></title><para class="po-block e277 e277"><textual class="po-textual">Generalization relations are supported between classes, associations, and
                attributes. Generalization between concepts that have a single principle of
                identity, the so called sortals (e.g., kind, role, dependent, associative), and
                those that do not, the so called non-sortals or mixin (e.g., category, role
                category) is treated differently. A concept with identity can only get that identity
                from a single source, and thus only single inheritance is allowed in this context.
                Multiple inheritance is supported between the non-sortals, or between the sortals
                and non-sortals. A solid generalization line (UML generalization) is used for
                generalization between sortals and sortals and between non-sortals and non-sortals.
                A dashed line (UML realization) represents the generalization relation between a
                sortal 'realization' of a non-sortal.</textual></para><para class="po-block e278 e278"><textual class="po-textual">The presence of constructs such as the non-sortals, and the fact that the sortals,
                can use multiple inheritance to relate to them, supports the representation of
                multiple overlapping categorization schemes necessary to reconcile horizontal
                variability. The broad support of generalization between all model concepts (e.g.,
                attributes and associations) supports the need for vertical variability.</textual></para></section><section class="po-hcontainer e279 e279"><title class="po-block e280 e280"><textual class="po-textual">Example</textual></title><para class="po-block e281 e281"><textual class="po-textual">The simple model example below demonstrates some of the model constructs described
                above, and will be used as the source for describing the XML encoding options below. </textual></para><figure class="po-container e282 e282" xml:id="Sample-Model"><title class="po-block e283 e283"><textual class="po-textual">Sample Model</textual></title><mediaobject class="po-container e284 e284"><imageobject class="po-container e285 e285"><imagedata class="po-meta e286 e286" fileref="../../../vol3/graphics/Bauman01/Bauman01-002.jpg" format="jpg" width="125%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure></section><section class="po-hcontainer e287 e287" xml:id="Constraint-Example"><title class="po-block e288 e288"><textual class="po-textual">Conclusion</textual></title><para class="po-block e289 e289"><textual class="po-textual">There are numerous other constraints implemented in
                UFO and its expression in UML that are not touched upon here. For example the
                pattern for explicitly dealing with &lt;&lt;role&gt;&gt; brings uniformity to the
                expression of a very common concept, that is only informally dealt with in common
                modeling languages like UML and ERD. As another example an anti-rigid type cannot be
                a supertype to a rigid type. These rules together create restrictions on how
                concepts can be related to each other, reducing the likelihood that skilled modelers
                will produce unsound models, and increasing the likelihood that they will use model
                constructs in similar ways (i.e. construct variability will be reduced). These
                additional constraints unfortunately do not make the creation of good models any
                less challenging intellectually, a challenge that will be brought up again later in
                the conclusion.</textual></para></section></section><section class="po-hcontainer e290 e290"><title class="po-block e291 e291"><textual class="po-textual">Design</textual></title><subtitle class="po-block e292 e292"><textual class="po-textual">XML Schema Encoding Annotations</textual></subtitle><para class="po-block e293 e293"><textual class="po-textual">The design phase that ends with the ability to automatically generate an XSD starts by
            creating a copy of some subset of the larger conceptual model. During this generation
            phase the target implementation language is selected, in this case the target language
            is a W3C XML schema. This subset copy, called a physical data model (PDM) is then
            modified in two ways. First, additional diagrams may be added to tell a story customized
            to specific perspective that a customer has over a UoD. Second, the physical model is
            changed. Anything can be changed including the addition or deletion of modeling
            constructs as needed. The more common changes include renaming concepts to reflect
            preferences by a customer.</textual><footnote class="po-popup e294 e294" xml:id="Name-Changes"><para class="po-block e295 e295"><textual class="po-textual">Name changes are typically necessary to accommodate local conventions in
                    terminology, and local syntactic naming standards. In a conceptual model names
                    are chosen for clarity, and can be long, and will not necessarily agree with
                    jargon spoken by a specific community.</textual></para></footnote><textual class="po-textual">, selecting which attributes will function as keys, changing the navigability
            on associations, and the selection of specific XSD encoding options.</textual></para><para class="po-block e296 e296"><textual class="po-textual">Both properties defined by UML 2.0 (e.g., association end navigability) and additional
            properties added as extensions to base UML are used. Some model properties apply
            globally to the entire model, and thus affect the entire XSD being generated (e.g., the
            namespace of the XSD), others apply to the encoding of a specific modeling construct
            (e.g., class, attribute). In some cases the same property can appear both globally and
            locally. If so, precedence is given to the local value. Most encoding options have
            default values (e.g., [UML] attributes get encoded as xsd:element). If an encoding style
            is being used see </textual><xref class="po-milestone e297 e297" linkend="Appendix-A"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, whole sets of encoding options plus
            built in logic that keys off of the semantic constructs in the model get enabled. Thus a
            default XSD can be produced with minimal effort. Yet fine grained control can also be
            exercised by setting individual encoding properties if desired. </textual></para><para class="po-block e298 e298"><textual class="po-textual">A complete enumeration and explanation of all of the available encoding options is
            beyond the current scope. A brief summary of the most common options is contained in
                </textual><xref class="po-milestone e299 e299" linkend="Appendix-A"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. Below, a subset of the example model introduced above
            is used to explain how one set of encoding options produces an XSD.</textual></para><section class="po-hcontainer e300 e300"><title class="po-block e301 e301"><textual class="po-textual">Example</textual></title><figure class="po-container e302 e302"><title class="po-block e303 e303"><textual class="po-textual">Physical Design</textual></title><mediaobject class="po-container e304 e304"><imageobject class="po-container e305 e305"><imagedata class="po-meta e306 e306" fileref="../../../vol3/graphics/Bauman01/Bauman01-003.jpg" format="jpg" width="125%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure><figure class="po-container e307 e307"><title class="po-block e308 e308"><textual class="po-textual">XML Sample</textual></title><programlisting class="po-block e309 e309" xml:space="preserve"><textual class="po-textual">&lt;ComputerSystem name="Zulu"&gt;
    &lt;CPU-Signature&gt;Intel(R)Pentium(R) M&lt;/CPU-Signature&gt;
    &lt;Hardware&gt;
        &lt;ComputerMaker&gt;Dell&lt;/ComputerMaker&gt;
        &lt;SerialNum&gt;12345&lt;/SerialNum&gt;
    &lt;/Hardware&gt;
&lt;/ComputerSystem&gt;</textual></programlisting></figure><figure class="po-container e310 e310"><title class="po-block e311 e311"><textual class="po-textual">W3C XML Schema</textual></title><programlisting class="po-block e312 e312" xml:space="preserve"><textual class="po-textual">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;xsd:element name="ComputerSytem" type="ComputerSystem"/&gt;

    &lt;xsd:complexType name="ComputerSystem"&gt;
        &lt;xsd:sequence&gt;
            &lt;xsd:group maxOccurs="unbounded" ref="CPU"/&gt;
            &lt;xsd:element name="Hardware" type="Hardware"/&gt;
        &lt;/xsd:sequence&gt;
        &lt;xsd:attribute name="name" use="required" type="xsd:string"/&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:group name="CPU"&gt;
        &lt;xsd:sequence&gt;
            &lt;xsd:element name="CPUSignature" type="xsd:string"/&gt;
        &lt;/xsd:sequence&gt;
    &lt;/xsd:group&gt;

    &lt;xsd:complexType name="Hardware"&gt;
        &lt;xsd:group ref="ManufacturedItem"/&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:group name="ManufacturedItem"&gt;
        &lt;xsd:sequence&gt;
            &lt;xsd:element name="ComputerMaker" type="xsd:string"/&gt;
            &lt;xsd:element name="SerialNum" type="xsd:string"/&gt;
        &lt;/xsd:sequence&gt;
    &lt;/xsd:group&gt;

    &lt;xsd:complexType name="Manufacturer"&gt;
        &lt;xsd:complexContent&gt;
            &lt;xsd:extension base="Organization"/&gt;
        &lt;/xsd:complexContent&gt;

    &lt;/xsd:complexType&gt;
    &lt;xsd:complexType name="Organization"&gt;
        &lt;xsd:sequence&gt;
            &lt;xsd:element name="Name" type="xsd:string"/&gt;
            &lt;xsd:element name="Size" type="organizationSizeEnum"/&gt;
        &lt;/xsd:sequence&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:simpleType name="organizationSizeEnum"&gt;
        &lt;xsd:restriction base="xsd:string"&gt;
            &lt;xsd:enumeration value="small"/&gt;
            &lt;xsd:enumeration value="medium"/&gt;
            &lt;xsd:enumeration value="large"/&gt;
        &lt;/xsd:restriction&gt;
    &lt;/xsd:simpleType&gt;
&lt;/xsd:schema&gt;
</textual></programlisting></figure><para class="po-block e313 e313"><textual class="po-textual">Starting left to right; bottom to top:</textual><orderedlist class="po-table e314 e314"><listitem class="po-container e315 e315"><para class="po-block e316 e316"><emphasis class="po-inline e317 e317"><textual class="po-textual">&lt;&lt;kind&gt;&gt; CPU</textual></emphasis><textual class="po-textual"> is created as an
                                </textual><code class="po-atom e318 e318"><textual class="po-textual">xsd:group</textual></code><textual class="po-textual">. By default an</textual><code class="po-atom e319 e319"><textual class="po-textual"> xsd:complexType</textual></code><textual class="po-textual">
                            is generated for all of the sortal types, but because an inbound
                            association has explicitly been set to encode 'asGroupRef', a group is
                            created. Encoding of classes is driven by defaults for its particular
                            type (e.g., &lt;&lt;kind&gt;&gt;, &lt;&lt;category&gt;&gt;) and /or by the schema
                            structures necessary to honor the needs of inbound relationships. This
                            means that any single class could cause the generation of
                                </textual><code class="po-atom e320 e320"><textual class="po-textual">xsd:complexType</textual></code><textual class="po-textual">, </textual><code class="po-atom e321 e321"><textual class="po-textual">xsd:group</textual></code><textual class="po-textual"> and
                                </textual><code class="po-atom e322 e322"><textual class="po-textual">xsd:attributeGroup</textual></code><textual class="po-textual"> structures.</textual></para><para class="po-block e323 e323"><textual class="po-textual">Attribute </textual><emphasis class="po-inline e324 e324"><textual class="po-textual">signature</textual></emphasis><textual class="po-textual"> is created as an
                                </textual><code class="po-atom e325 e325"><textual class="po-textual">xsd:element</textual></code><textual class="po-textual"> within the </textual><code class="po-atom e326 e326"><textual class="po-textual">xsd:group</textual></code><textual class="po-textual">. By
                            default [UML] attributes get represented as </textual><code class="po-atom e327 e327"><textual class="po-textual">xsd:element</textual></code><textual class="po-textual">.
                            The name created for the element is "CPUSignature" based on the default
                            setting for a global default that controls the name syntax applied to
                            the creation of XML elements. In this case because of the group
                            reference, a name is chosen that appends the class name to the attribute
                            name so as to not lose needed context when the created XML element is
                            referenced from 'ComputerSystem'.</textual></para></listitem><listitem class="po-container e328 e328"><para class="po-block e329 e329"><textual class="po-textual">&lt;&lt;kind&gt;&gt; </textual><emphasis class="po-inline e330 e330"><textual class="po-textual">ComputerSystem</textual></emphasis><textual class="po-textual"> is created as an
                                </textual><code class="po-atom e331 e331"><textual class="po-textual">xsd:complexType</textual></code><textual class="po-textual">, and as a global
                                </textual><code class="po-atom e332 e332"><textual class="po-textual">xsd:element</textual></code><textual class="po-textual"> declaration. The UML visibility property on
                            a class controls whether a global complex type and element (visibility =
                            'public'), a global element with an anonymous complex type (visibility =
                            'protected'), or just a complex type (visibility = 'private') is
                            created.</textual></para><para class="po-block e333 e333"><textual class="po-textual">Attribute</textual><emphasis class="po-inline e334 e334"><textual class="po-textual"> name</textual></emphasis><textual class="po-textual"> is encoded as an
                                </textual><code class="po-atom e335 e335"><textual class="po-textual">xsd:attribute</textual></code><textual class="po-textual"> based on the encoding="asAttribute"
                            setting attached to it. </textual></para><para class="po-block e336 e336"><textual class="po-textual">An </textual><code class="po-atom e337 e337"><textual class="po-textual">xsd:group ref=""</textual></code><textual class="po-textual"> with a </textual><code class="po-atom e338 e338"><textual class="po-textual">maxOccurs</textual></code><textual class="po-textual"> set to
                                </textual><code class="po-atom e339 e339"><textual class="po-textual">unbounded</textual></code><textual class="po-textual"> to the group </textual><emphasis class="po-inline e340 e340"><textual class="po-textual">CPU</textual></emphasis><textual class="po-textual"> is
                            created based on the encoding option set for the navigable outbound
                            relation to it. </textual></para><para class="po-block e341 e341"><textual class="po-textual">Finally an </textual><code class="po-atom e342 e342"><textual class="po-textual">xsd:element</textual></code><textual class="po-textual"> reference is created to represent
                            the outbound relation to </textual><emphasis class="po-inline e343 e343"><textual class="po-textual">Hardware</textual></emphasis><textual class="po-textual">. The
                                </textual><code class="po-atom e344 e344"><textual class="po-textual">xsd:element</textual></code><textual class="po-textual"> reference construct is used for two
                            reasons. Broadly, the encoding of relationships takes two forms, by
                            value, and by reference, with multiple by reference styles to choose
                            from. By reference encodings require keys (one or more attributes whose
                            values can be uniquely used to identify a single instance of the
                            targeted class) to reference the construct. Because no keys are
                            available a by value encoding is used. Because the visibility property
                            of </textual><emphasis class="po-inline e345 e345"><textual class="po-textual">Hardware</textual></emphasis><textual class="po-textual"> is public, a </textual><code class="po-atom e346 e346"><textual class="po-textual">xsd:element
                                ref=""</textual></code><textual class="po-textual"> is used.</textual></para></listitem><listitem class="po-container e347 e347"><para class="po-block e348 e348"><textual class="po-textual">&lt;&lt;kind&gt;&gt; </textual><emphasis class="po-inline e349 e349"><textual class="po-textual">Hardware</textual></emphasis><textual class="po-textual"> is created as a global
                                </textual><code class="po-atom e350 e350"><textual class="po-textual">xsd:complexType</textual></code><textual class="po-textual"> and </textual><code class="po-atom e351 e351"><textual class="po-textual">xsd:element</textual></code><textual class="po-textual">.</textual></para><para class="po-block e352 e352"><textual class="po-textual">An </textual><code class="po-atom e353 e353"><textual class="po-textual">xsd:group ref=""</textual></code><textual class="po-textual"> is created to represent the
                            realization relationship to </textual><emphasis class="po-inline e354 e354"><textual class="po-textual">ManuracturedItem</textual></emphasis><textual class="po-textual">. An
                                </textual><code class="po-atom e355 e355"><textual class="po-textual">xsd:group</textual></code><textual class="po-textual"> reference is used because the default
                            encoding for </textual><emphasis class="po-inline e356 e356"><textual class="po-textual">ManufacturedItem</textual></emphasis><textual class="po-textual"> as a
                            &lt;&lt;category&gt;&gt; is </textual><code class="po-atom e357 e357"><textual class="po-textual">xsd:group</textual></code><textual class="po-textual">.</textual></para></listitem><listitem class="po-container e358 e358"><para class="po-block e359 e359"><textual class="po-textual">&lt;&lt;category&gt;&gt; </textual><emphasis class="po-inline e360 e360"><textual class="po-textual">ManufactureredItem</textual></emphasis><textual class="po-textual"> is by
                            default encoded as an </textual><code class="po-atom e361 e361"><textual class="po-textual">xsd:group</textual></code><textual class="po-textual">. The mixin / non-sortal
                            class types of &lt;&lt;category&gt;&gt; and &lt;&lt;role category&gt;&gt; can be
                            used to cross-categorize the sortal class types. As such its quite
                            possible that a sortal will have generalization relations (represented
                            as UML realization visually) to many of them; effectively allowing for
                            multiple inheritance. Because of this group / group referencing is used
                            by default.</textual></para><para class="po-block e362 e362"><textual class="po-textual">Attribute </textual><emphasis class="po-inline e363 e363"><textual class="po-textual">serialNum</textual></emphasis><textual class="po-textual"> is created as an xsd:element
                            by default. </textual></para><para class="po-block e364 e364"><textual class="po-textual">The outbound association </textual><emphasis class="po-inline e365 e365"><textual class="po-textual">manufacturedBy</textual></emphasis><textual class="po-textual"> gets
                            encoded as an </textual><code class="po-atom e366 e366"><textual class="po-textual">xsd:element</textual></code><textual class="po-textual"> called Manufacturer with a
                            datatype of string and whose value represents the key of the class
                                </textual><emphasis class="po-inline e367 e367"><textual class="po-textual">Organization</textual></emphasis><textual class="po-textual">. The key of
                                </textual><emphasis class="po-inline e368 e368"><textual class="po-textual">Organization</textual></emphasis><textual class="po-textual"> is the [UML] attribute
                                </textual><emphasis class="po-inline e369 e369"><textual class="po-textual">name</textual></emphasis><textual class="po-textual"> as indicated by the &lt;&lt;PK&gt;&gt;
                            stereotype. The reason this construct is created to represent the
                            relationship </textual><emphasis class="po-inline e370 e370"><textual class="po-textual">manufacturedBy</textual></emphasis><textual class="po-textual"> is as follows: By a
                            settable default, associations to classes that have available keys use
                            those key(s) to implement a relationship by reference. If there is only
                            a single key, the name of the class being pointed at is used to name the
                            relationship.</textual></para></listitem><listitem class="po-container e371 e371"><para class="po-block e372 e372"><textual class="po-textual">&lt;&lt;role&gt;&gt; </textual><emphasis class="po-inline e373 e373"><textual class="po-textual">Manufacturer</textual></emphasis><textual class="po-textual"> is by default encoded
                            as a global </textual><code class="po-atom e374 e374"><textual class="po-textual">xsd:complexType</textual></code><textual class="po-textual"> and </textual><code class="po-atom e375 e375"><textual class="po-textual">xsd:element</textual></code><textual class="po-textual">.
                            Because it has a generalization relation to another sortal type, and
                            there can be only once such generalization relation present per the
                            modeling language constraints, complex type extension can safely be used
                            to implement it. Because the default setting is to generate substitution
                            groups, one is created for </textual><emphasis class="po-inline e376 e376"><textual class="po-textual">Manufacturer</textual></emphasis><textual class="po-textual"> and
                            Organization.</textual></para></listitem><listitem class="po-container e377 e377"><para class="po-block e378 e378"><textual class="po-textual">&lt;&lt;kind&gt;&gt; </textual><emphasis class="po-inline e379 e379"><textual class="po-textual">Organization</textual></emphasis><textual class="po-textual"> is by default encoded
                            as a global </textual><code class="po-atom e380 e380"><textual class="po-textual">xsd:complexType</textual></code><textual class="po-textual"> and
                            </textual><code class="po-atom e381 e381"><textual class="po-textual">xsd:element</textual></code><textual class="po-textual">.</textual></para><para class="po-block e382 e382"><textual class="po-textual">Attribute </textual><emphasis class="po-inline e383 e383"><textual class="po-textual">name</textual></emphasis><textual class="po-textual"> is by default encoded as an
                                </textual><code class="po-atom e384 e384"><textual class="po-textual">xsd:element</textual></code><textual class="po-textual">.</textual></para></listitem></orderedlist></para></section><section class="po-hcontainer e385 e385"><title class="po-block e386 e386"><textual class="po-textual">Conclusion</textual></title><para class="po-block e387 e387"><textual class="po-textual">By no means does the set of encoding options available exercise every last corner
                of the W3C XML schema specification, but they do allow, especially when used in
                combination, for a surprising variability in encoding choices. New options are added
                as they are needed, and thus far, elegant solutions to generate a given encoding
                choice have always been possible without requiring that the models be changed in any
                way other than with the addition of new encoding annotations. In essence the
                implementation level decisions are effectively segregated and do not perturb the
                semantic representation.</textual></para></section></section><section class="po-hcontainer e388 e388"><title class="po-block e389 e389"><textual class="po-textual">Software</textual></title><para class="po-block e390 e390"><textual class="po-textual">The creation and maintenance of multiple layers of models and the subsequent
            generation of XSDs would not be feasible without the correct tooling. The modeling tool
            we use is Sybase Power Designer; a market leading tool in traditional [relational] data
            modeling. It was selected for a variety of reasons, not the least of which is its
            extensive ability to be customized, and ability to generate / merge / compare / track
            the relations between multiple models. It has been customized to support and enforce the
            rules of the conceptual modeling language outlined above. This has involved extending
            the meta-model that underlies Power Designer with additional [extended] properties,
            modifying the forms displayed under certain menus, and writing additional trigger code
            to enforce the rules of the conceptual modeling language (e.g., </textual><xref class="po-milestone e391 e391" linkend="Constraint-Example"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">). The code that create the XSD has been implemented
            outside of Power Designer to avoid coupling it to a particular vendor's product.</textual></para><para class="po-block e392 e392"><textual class="po-textual">The architecture for this XSD complier, called unimaginatively
                </textual><emphasis class="po-inline e393 e393"><textual class="po-textual">Model2XSD</textual></emphasis><textual class="po-textual"> is shown below </textual><xref class="po-milestone e394 e394" linkend="XML2XSD"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. A
            relatively simple routine written inside Power Designer in visual basic script
            serializes the model as XML based on a custom designed markup language.</textual><footnote class="po-popup e395 e395" xml:id="XMI"><para class="po-block e396 e396"><textual class="po-textual">The XML Metamodel Interchange (XMI) format was briefly considered as a choice
                    for the serialization of the model. It does in fact have all of the needed
                    information. It was not chosen because its structure, optimized to exchange
                    [complete] models between modeling tools, is not ideal for creating clean XSLT
                    code for transformation into an XSD. In addition, the benefits of using a
                    standard tool-neutral serialization of a UML model are partially obviated by the
                    inconsistent and limited implementation of the standard in some modeling tools.
                    That said, the use of XMI is something that will be considered the future. An
                    appropriate XSLT 2.0 function library could be used to hide the complexities of
                    the XMI format.</textual></para></footnote><textual class="po-textual"> An XSLT 2.0 pipeline is then called to compile the XML into an XSD. The XSLT
            program consists of several processing stages and supporting libraries of functions and
            configuration files. The </textual><emphasis class="po-inline e397 e397"><textual class="po-textual">Model2XSD-Preprocessor</textual></emphasis><textual class="po-textual"> is used to add
            additional constructs to the serialized model file if needed based on selected encoding
            options. The </textual><emphasis class="po-inline e398 e398"><textual class="po-textual">Model2XSD-Processor</textual></emphasis><textual class="po-textual"> creates the XSD. Finally the
                </textual><emphasis class="po-inline e399 e399"><textual class="po-textual">Model2XSD-Postprocessor</textual></emphasis><textual class="po-textual">, optionally, does certain XSD clean-up
            activities that can simplify the resultant schema.</textual><footnote class="po-popup e400 e400" xml:id="XSD-Cleanup"><para class="po-block e401 e401"><textual class="po-textual">An example of such clean-up is the removal of any</textual><code class="po-atom e402 e402"><textual class="po-textual"> xsd:group</textual></code><textual class="po-textual"> or
                        </textual><code class="po-atom e403 e403"><textual class="po-textual">xsd:attributeGroup</textual></code><textual class="po-textual"> structures that are only referenced once, by
                    collapsing them within their referent.</textual></para></footnote><textual class="po-textual"> All of these pieces of code are backed up by two function libraries,
                </textual><code class="po-atom e404 e404"><textual class="po-textual">Model-Utility</textual></code><textual class="po-textual"> primarily contains functions that navigate the physical
            model as represented in XML (e.g., getting a concept's supertype, all its subtypes,
            etc.). This library does not contain any functions specific to the generation of an XSD
            and thus could be reused in other generation tasks.</textual><code class="po-atom e405 e405"><textual class="po-textual">Model2XSD-Utility</textual></code><textual class="po-textual">"
            contains functions specific to the generation of XSD files.</textual></para><figure class="po-container e406 e406" xml:id="XML2XSD"><title class="po-block e407 e407"><textual class="po-textual">Model2XSD Process Flow</textual></title><mediaobject class="po-container e408 e408"><imageobject class="po-container e409 e409"><imagedata class="po-meta e410 e410" fileref="../../../vol3/graphics/Bauman01/Bauman01-004.jpg" format="jpg" width="100%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></mediaobject></figure></section><section class="po-hcontainer e411 e411"><title class="po-block e412 e412"><textual class="po-textual">Further Work</textual></title><para class="po-block e413 e413"><textual class="po-textual">Our application of the techniques outlined above is in its infancy. As we continue to
            gain experience, refinements in both the conceptual modeling language, the encoding
            rules for XSD, and the software support for all of the above are inevitable. It is
            possible that we will see the benefit of adopting more of the UFO, or possibly less. As
            we develop more XSDs we will undoubtedly have requirements for incrementally adding to
            our tool box of encoding annotations. It is a testament to the strength of the
            conceptual modeling language that thus far we have been able to algorithmically generate
            any necessary encoding we need. </textual></para><para class="po-block e414 e414"><textual class="po-textual">In roughly priority order these are the current areas of interest we are
            pursuing:</textual></para><itemizedlist class="po-table e415 e415"><listitem class="po-container e416 e416"><para class="po-block e417 e417"><textual class="po-textual">The processes and tooling needed to support the maintenance, change
                    management, and synchronization between a set of related models (conceptual,
                    physical,) and schemata (XSD) that are expected to evolve on independent time
                    lines, with differing constraints (e.g., the physical models and resultant XSD
                    files will be subject to pressures to maintain backwards and/or forward
                    compatibility for some period of time) and likely to be changed by independent
                    groups.</textual></para></listitem><listitem class="po-container e418 e418"><para class="po-block e419 e419"><textual class="po-textual">Work on how the physical data models are visually represented. As these models
                    are based on the conceptual model, but lead to an XSD, a tension naturally
                    arises as to how they should be visualized. Should the visualization reflect its
                    semantic roots in the CM, or the structure of the resultant XSD? And how do all
                    of the XSD specific encoding directives get represented visually? Currently many
                    are not, which makes it needlessly difficult to make the leap from model to XSD.
                    Our hope is that we can keep the physical data model visualization more closely
                    aligned with its conceptual roots, and through graphical overlays show the XSD
                    encoding annotations, but this remains to be seen.</textual></para></listitem><listitem class="po-container e420 e420"><para class="po-block e421 e421"><textual class="po-textual">Create code that automatically adds documentation into the generated XSDs that
                    reflect semantic distinctions present in the conceptual model that are
                    intentionally excluded from the resultant XSD. This occurs, for example, when an
                    XSD is generated that has collapsed what are multiple subclasses in the CM into
                    a superclass. All of the attributes and relations present in the sub-classes
                    become optional in the super. It's not that there is a fundamental change in the
                    conceptualization of the domain when this is done, it's much more likely that
                    the enforcement of a set of constraints is being moved from the schema to
                    software. It should be possible to generate additional documentation and embed
                    it into the XSD to make note of these relevant rules.</textual></para></listitem><listitem class="po-container e422 e422"><para class="po-block e423 e423"><textual class="po-textual">Prototype the software needed to generate other implementations (e.g., DDL,
                    OWL).</textual></para></listitem><listitem class="po-container e424 e424"><para class="po-block e425 e425"><textual class="po-textual">Explore whether, when different physical designs all originating from
                    overlapping parts of the same conceptual model are created, it is possible to at
                    least partially automatically create the needed XSLT code that would be required
                    to translate between them.</textual></para></listitem></itemizedlist></section><section class="po-hcontainer e426 e426"><title class="po-block e427 e427"><textual class="po-textual">Conclusion</textual></title><para class="po-block e428 e428"><textual class="po-textual">The adoption of a multi-layered model development process consisting of one (or a
            small number of) conceptual models as the basis for potentially many physical
            implementation models; the selection / customization of the UFO visually represented as
            UML class diagrams, as a conceptual modeling language; the design of rules for compiling
            these models into an XSD; and the implementation of all of the above using Sybase Power
            Designer and XSLT is all still relatively new. We have only recently started exercising
            this methodology fully to deliver products (XSDs) to internal customers. We are still
            learning, and further customizing our techniques and their implementation in software.
            So far our experience with using these techniques is anecdotal. It is both sobering and
            promising...</textual></para><section class="po-hcontainer e429 e429"><title class="po-block e430 e430"><textual class="po-textual">Challenges</textual></title><para class="po-block e431 e431"><quote class="po-inline e432 e432"><textual class="po-textual">... the short story is that good design involves hard thinking. And that
                    means itâs just hard</textual></quote><textual class="po-textual"> </textual><xref class="po-milestone e433 e433" linkend="Sperberg-McQueen-2008"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. Although the quantification of what is
                    </textual><quote class="po-inline e434 e434"><textual class="po-textual">good design</textual></quote><textual class="po-textual">, is an interesting challenge in and of itself, it is
                indeed very hard, both to do, and often to justify taking the time to do. On the one
                hand the conceptual modeling language outlined above, with its more restrictive
                rules can aid a good modeler in coming up with better, more sound models. The whole
                methodology with its emphasis on semantics can lead to higher quality XSDs, at least
                in the sense that they are semantically well grounded. But the bar for creating good
                models is still high if not higher. To create a truly good design all the way from
                creating a conceptual model to creating a good physical design takes quite a rare
                skill set. </textual><quote class="po-inline e435 e435"><textual class="po-textual">Design activities require distinct skills - and arguably certain
                    personal characteristics.</textual></quote><textual class="po-textual"> (</textual><xref class="po-milestone e436 e436" linkend="Simsion-2007"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, p. 8)
                Detailed knowledge of the domain being modeled, detailed knowledge about how best to
                conceptualize a domain, in particular knowing what level of abstraction to use, and
                recognizing how to separate out, and deal with some of the orthogonal concerns that
                creep in</textual><footnote class="po-popup e437 e437" xml:id="Orthogonal"><para class="po-block e438 e438"><textual class="po-textual">Its quite challenging to keep straight all of the orthogonal concerns,
                        some subset of which much all come together in the final physical design,
                        but which should be thought about and modeled separately at the conceptual
                        level. For example, for any given information structure in a PDM, the
                        following different concerns might need to be addressed in addition to the
                        real-world object that the information structure is describing. How is
                        temporal change of that object's properties handled; how is the provenance
                        of the information (e.g., origin, trustworthiness) recorded; how is system
                        related metadata (e.g., who created it, when it will be deleted, access
                        control, versioning) represented, etc.</textual></para></footnote><textual class="po-textual">, how to effectively represent and communicate that conceptualization in
                a modeling language, and how best to represent it in a chosen technology are all
                needed. Of course these skills can be split across several individuals, but that
                splitting leads to its own challenges. Finding, or training people to do this work
                well is difficult </textual><quote class="po-inline e439 e439"><textual class="po-textual">Data modeling is notoriously difficult to learn and
                    teach.</textual></quote><textual class="po-textual"> (</textual><xref class="po-milestone e440 e440" linkend="Simsion-2007"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> , p.8)</textual></para><para class="po-block e441 e441"><textual class="po-textual">And then there is the problem of finding the time to do this work. It is hoped
                that the techniques outlined above, specifically meeting requirements </textual><xref class="po-milestone e442 e442" linkend="Req-Communication"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and </textual><xref class="po-milestone e443 e443" linkend="Req-Design"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> will lead to
                greater reuse possibilities, and thus allow for the quick repackaging of already
                done hard work. None the less, creating high quality, semantically well-founded
                designs takes time, and time is a precious resource in many projects, whose use must
                be justified.</textual></para><para class="po-block e444 e444"><textual class="po-textual">Any group of systems that are information focused, and need to share that
                information either through exchange or a shared data store, get coupled to the
                information designs that underpin them. If these systems need to have a deep
                understanding of the semantics behind the information (i.e., software is directly
                creating, modifying, taking action on what the information means vs. just storing /
                presenting it and leaving the heavy semantic lifting to people), the coupling is
                tight, and changing the information design very expensive. So too is creating a deep
                semantic mapping between different, typically underspecified designs, or conversely
                recognizing that they can't be mapped. This expense leads to the conclusion that in
                many cases the up-front investment in good design is well worth it.</textual></para><para class="po-block e445 e445"><textual class="po-textual">Finally there is the lack of adequate tool support. We have taken an industry
                leading data modeling tool and augmented it to support ontology development leading
                to an XML schema. It has required a reasonable amount of customization. Even with
                these customizations there are many things that we would like the tool to do that it
                can't. Nor are we aware of any tool that has the full feature set we need to truly
                create and maintain requirements models mapped to implementation neutral conceptual
                models coupled with implementation specific design models from which XSD, DDL, and
                OWL can be generated, and to do so on a large enterprise wide scale.</textual></para></section><section class="po-hcontainer e446 e446"><title class="po-block e447 e447"><textual class="po-textual">Accomplishments</textual></title><para class="po-block e448 e448"><textual class="po-textual"> Looking back at the requirements we set out for ourselves </textual><xref class="po-milestone e449 e449" linkend="Requirements"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">:</textual><itemizedlist class="po-table e450 e450"><listitem class="po-container e451 e451"><para class="po-block e452 e452"><textual class="po-textual">The selected modeling language is helping our internal team
                            communicate and reach agreement on conceptualisations of the UoD(</textual><xref class="po-milestone e453 e453" linkend="Req-Communication"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. It is also helping us to clarify our
                            prose descriptions of a UoD. Unlink ERD and UML in practice, where the
                            visualization reflects the implementation, conceptual models based on
                            UFO reflect the semantics, and these semantics should be mirrored in the
                                prose.</textual><footnote class="po-popup e454 e454" xml:id="Saying-it-twice"><para class="po-block e455 e455"><textual class="po-textual">Sperberg-McQueen touches on the desirability of </textual><quote class="po-inline e456 e456"><textual class="po-textual">You
                                        have to say everything twice</textual></quote><textual class="po-textual"> in </textual><xref class="po-milestone e457 e457" linkend="Sperberg-McQueen-2008"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. The longer term goal of
                                    this work is to say things many times, in prose, in the
                                    conceptual modeling language, and in designs for XSD, DDL, and
                                    OWL.</textual></para></footnote><textual class="po-textual"> On many occasions we have created model concepts, then
                            written their prose definitions and found that the model and the prose
                            contradict each other. When this happens this points to a fundamental
                            problem and either the prose or the model has to be changed.</textual></para></listitem><listitem class="po-container e458 e458"><para class="po-block e459 e459"><textual class="po-textual"> The semantic richness, precision, and design neutrality of the
                            conceptual modeling language, coupled with the flexibility of the XSD
                            encoding rules, and the fact that implementation models are kept
                            distinct from, but tied to, the conceptual model grant great flexibility
                            in creating XSDs well tailored to a customers need </textual><xref class="po-milestone e460 e460" linkend="Req-Design"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">. This flexibility has been exercised twice,
                            when our team was tasked with creating a conceptual model reverse
                                engineered</textual><footnote class="po-popup e461 e461" xml:id="Reverse-Engineering"><para class="po-block e462 e462"><textual class="po-textual">This reverse engineering is necessarily manual. The mapping
                                    between a given implementation back up to a conceptual model is
                                    many to one. This is unlike a mapping between a schema language
                                    and a simple visualization of it, as is typically implemented in
                                    tools today.</textual></para></footnote><textual class="po-textual"> from existing format specifications and then
                            forward-engineer back to a new XSD with very specific encoding
                            constraints.</textual></para></listitem><listitem class="po-container e463 e463"><para class="po-block e464 e464"><textual class="po-textual">Support of using the same conceptual models to support designs in
                            other implementation languages </textual><xref class="po-milestone e465 e465" linkend="Req-DDL"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, </textual><xref class="po-milestone e466 e466" linkend="Req-OWL"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">, is promising, but unproven at this point. If it
                            were proven it would both re-enforce that the conceptual modeling
                            language is indeed largely independent of implementation design biases,
                            and add to the business case of investing in the development of models
                            that could be more widely reused.</textual></para></listitem><listitem class="po-container e467 e467"><para class="po-block e468 e468"><textual class="po-textual">Early evidence does support the claim that construct variability </textual><xref class="po-milestone e469 e469" linkend="Req-Construct"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> is reduced, primarily in the use of
                            attributes, and for representing roles.</textual></para></listitem><listitem class="po-container e470 e470"><para class="po-block e471 e471"><textual class="po-textual">Likewise, early experience is that the conceptual modeling language is
                            better at documenting horizontal and vertical variability </textual><xref class="po-milestone e472 e472" linkend="Req-Horizontal-Vertical"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual"> and representing how different
                            choices relate to one another. Representing this variability in the same
                            conceptual model, however does complicate the resulting models and their
                            presentation visually.</textual></para></listitem><listitem class="po-container e473 e473"><para class="po-block e474 e474"><textual class="po-textual">An additional benefit that was not directly sought is that the code
                            that generates the XSD files partially mitigates the need for the
                            modelers using it to fully grasp all of syntactic and grammatical
                            nuances of the XSD language.</textual></para></listitem></itemizedlist></para></section></section><appendix class="po-hcontainer e475 e475" xml:id="Appendix-A"><title class="po-block e476 e476"><textual class="po-textual">Physical Encoding Options</textual></title><para class="po-block e477 e477"><textual class="po-textual">This section describes some of the more commonly used encoding options available to
            map from a XSD PDM to an actual XSD. It is by no means a complete accounting of the many
            encoding options available, nor how they can be used together to create a large variety
            of different schema structures.</textual></para><para class="po-block e478 e478"><textual class="po-textual">The information in this section is largely presented as a series of tables. Two basic
            table structures exist, the first describes model properties present in the model that
            affect the XSD. The origin field in this table contains two values, "Build In" or
            "Extended" that reflect whether the property is part of UML and thus is built in to a
            UML tool, or whether it is an extended property that we have added. The second table
            type focuses in particular on an extended property called 'encoding' that drives much
            how the schema will look. Included in this table are example XSD fragments and XML
            fragments that reflect the behaviour of the various encoding options.</textual></para><section class="po-hcontainer e479 e479"><title class="po-block e480 e480"><textual class="po-textual">General Encoding Rules</textual></title><para class="po-block e481 e481"><textual class="po-textual">This section describes some of the model properties and encoding options available
                that affect the entire schema or are common across many model concepts.</textual></para><section class="po-hcontainer e482 e482"><title class="po-block e483 e483"><textual class="po-textual">Model Level Properties</textual></title><para class="po-block e484 e484"><textual class="po-textual">Model level properties are set once per model (and thus XSD file) and have
                    global effects. They are as follows:</textual><table class="po-container e485 e485" frame="void"><caption class="po-container e486 e486"><para class="po-block e487 e487"><textual class="po-textual">Model Level Encoding</textual></para></caption><thead class="po-container e488 e488"><tr class="po-table e489 e489"><th class="po-field e490 e490"><textual class="po-textual">Property</textual></th><th class="po-field e491 e491"><textual class="po-textual">Origin</textual></th><th class="po-field e492 e492"><textual class="po-textual">Description</textual></th><th class="po-field e493 e493"><textual class="po-textual">Use</textual></th><th class="po-field e494 e494"><textual class="po-textual">Note</textual></th></tr></thead><tbody class="po-table e495 e495"><tr class="po-table e496 e496"><td class="po-block e497 e497"><textual class="po-textual">Target Namespace and Namespace Prefix</textual></td><td class="po-block e498 e498"><textual class="po-textual">Extended</textual></td><td class="po-block e499 e499"><textual class="po-textual">The target namespace and namespace prefix of the generated
                                    XSD.</textual></td><td class="po-block e500 e500"><textual class="po-textual">Used to set the targetNamespace information of the XSD.</textual></td><td class="po-block e501 e501"><textual class="po-textual">When one physical model references a concept in another, needed
                                    namespace declarations, namespace prefixing and
                                        </textual><code class="po-atom e502 e502"><textual class="po-textual">xsd:import</textual></code><textual class="po-textual"> statements are generated
                                    automatically if the concept is in another namespace. Otherwise,
                                    needed </textual><code class="po-atom e503 e503"><textual class="po-textual">xsd:include</textual></code><textual class="po-textual"> statements are generated.</textual></td></tr><tr class="po-table e504 e504"><td class="po-block e505 e505"><textual class="po-textual">Prune Group</textual></td><td class="po-block e506 e506"><textual class="po-textual">Extended</textual></td><td class="po-block e507 e507"><textual class="po-textual">A boolean controlling whether </textual><code class="po-atom e508 e508"><textual class="po-textual">xsd:group</textual></code><textual class="po-textual"> and
                                        </textual><code class="po-atom e509 e509"><textual class="po-textual">xsd:attributeGroup</textual></code><textual class="po-textual"> structures referenced only
                                    once will be eliminated from the XSD with their elements /
                                    attributes collapsed into the referencing concept.</textual></td><td class="po-block e510 e510"><textual class="po-textual">Used to create schema's that have the minimal number of group /
                                    attribute groups defined.</textual></td><td class="po-block e511 e511"><textual class="po-textual">Default is true.</textual></td></tr><tr class="po-table e512 e512"><td class="po-block e513 e513"><textual class="po-textual">Encoding Style</textual></td><td class="po-block e514 e514"><textual class="po-textual">Extended</textual></td><td class="po-block e515 e515"><textual class="po-textual">Selects which encoding style to use. An encoding style effects a
                                    whole set of different encoding options to produce schema's of a
                                    particular style.</textual></td><td class="po-block e516 e516"><textual class="po-textual">An encoding style, is analogous to the scene modes on digital
                                    cameras. It allows one to select a whole set of other encoding
                                    options that together with some additional programming logic
                                    that wraps them, create schemata in a particular style.</textual></td><td class="po-block e517 e517"><textual class="po-textual">Default is the internal style used on our team.</textual></td></tr><tr class="po-table e518 e518"><td class="po-block e519 e519"><textual class="po-textual">[Default] Association Encoding</textual></td><td class="po-block e520 e520"><textual class="po-textual">Extended</textual></td><td class="po-block e521 e521"><textual class="po-textual">Selects which association end encoding to use by default.</textual></td><td class="po-block e522 e522"><textual class="po-textual">Controls the default association end encoding that will
                                        occur. </textual><xref class="po-milestone e523 e523" linkend="Association-End-Encoding"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref></td><td class="po-block e524 e524"><textual class="po-textual">Default is 'asElement'.</textual></td></tr><tr class="po-table e525 e525"><td class="po-block e526 e526"><textual class="po-textual">[Default] Name Encodings (e.g., for XSD attributes, elements,
                                    types and groups.</textual></td><td class="po-block e527 e527"><textual class="po-textual">Extended</textual></td><td class="po-block e528 e528"><textual class="po-textual">Selects the default name encoding for all schema
                                    constructs.</textual></td><td class="po-block e529 e529"><textual class="po-textual">See </textual><xref class="po-milestone e530 e530" linkend="Name-Encoding"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref></td><td class="po-block e531 e531"><textual class="po-textual">Default is 'leadingUpperCase' for XML elements, 'leading
                                    Lowercase' for XML attributes and 'preserve' for XSD
                                    simpletypes, complex types and groups.</textual></td></tr></tbody></table></para></section><section class="po-hcontainer e532 e532"><title class="po-block e533 e533"><textual class="po-textual">Name Encoding</textual></title><para class="po-block e534 e534"><textual class="po-textual">The generated names of XSD declarations are controlled by many settings.
                    Defaults at the model level can be set, and overridden as needed on an
                    individual concept. Any given name consists of two parts, a prefix and a root.
                    The root is always the name of the concept. The prefix depends on what type of
                    concept it is, as described below. Many more styles are available then described
                    here. In addition, more complex naming rules are applied in certain association
                    encoding situations where foreign keys are being generated, and/or where a group
                    reference is effectively merging two concepts together. These rules
                    automatically start adding additional context to the generated names so that for
                    example, a primary key called 'identifier' in the target class of an
                    association, doesn't simply remain 'identifier' when it becomes a foreign key in
                    the source class, where it could potentially clash with an existing 'identifier'
                    attribute.</textual></para><para class="po-block e535 e535"><textual class="po-textual">
                    </textual><table class="po-container e536 e536" frame="void" xml:id="Prefix-Root"><caption class="po-container e537 e537"><para class="po-block e538 e538"><textual class="po-textual">Prefix and Root Sources</textual></para></caption><thead class="po-container e539 e539"><tr class="po-table e540 e540"><th class="po-field e541 e541"><textual class="po-textual">Concept</textual></th><th class="po-field e542 e542"><textual class="po-textual">Prefix</textual></th></tr></thead><tbody class="po-table e543 e543"><tr class="po-table e544 e544"><td class="po-block e545 e545"><textual class="po-textual">Class, Domain, Enumeration, Structure, Union </textual></td><td class="po-block e546 e546"><textual class="po-textual">Model Code</textual></td></tr><tr class="po-table e547 e547"><td class="po-block e548 e548"><textual class="po-textual">Attribute</textual></td><td class="po-block e549 e549"><textual class="po-textual">Class Code</textual></td></tr><tr class="po-table e550 e550"><td class="po-block e551 e551"><textual class="po-textual">Association</textual></td><td class="po-block e552 e552"><textual class="po-textual">Association End Class Codes</textual></td></tr></tbody></table><textual class="po-textual">
                    </textual><table class="po-container e553 e553" frame="void" xml:id="Name-Encoding"><caption class="po-container e554 e554"><para class="po-block e555 e555"><textual class="po-textual">Name Encoding Options</textual><inlinemediaobject class="po-null e556 e556"><imageobject class="po-container e557 e557"><imagedata class="po-meta e558 e558" fileref="../../../vol3/graphics/Bauman01/Bauman01-005.jpg" format="jpg" width="50%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></inlinemediaobject></para></caption><thead class="po-container e559 e559"><tr class="po-table e560 e560"><th class="po-field e561 e561"><textual class="po-textual">Name Encoding</textual></th><th class="po-field e562 e562"><textual class="po-textual">Concept</textual></th><th class="po-field e563 e563"><textual class="po-textual">Prefix</textual></th><th class="po-field e564 e564"><textual class="po-textual">Root</textual></th><th class="po-field e565 e565"><textual class="po-textual">Final XSD Name</textual></th></tr></thead><tbody class="po-table e566 e566"><tr class="po-table e567 e567"><td class="po-block e568 e568" rowspan="3"><textual class="po-textual">leadingUpperCase</textual></td><td class="po-block e569 e569"><textual class="po-textual">Class</textual></td><td class="po-block e570 e570"><textual class="po-textual">N/A</textual></td><td class="po-block e571 e571"><textual class="po-textual">ComputerSystem</textual></td><td class="po-block e572 e572"><textual class="po-textual">ComputerSystem</textual></td></tr><tr class="po-table e573 e573"><td class="po-block e574 e574"><textual class="po-textual">Attribute</textual></td><td class="po-block e575 e575"><textual class="po-textual">N/A</textual></td><td class="po-block e576 e576"><textual class="po-textual">name</textual></td><td class="po-block e577 e577"><textual class="po-textual">Name</textual></td></tr><tr class="po-table e578 e578"><td class="po-block e579 e579"><textual class="po-textual">Association</textual></td><td class="po-block e580 e580"><textual class="po-textual">N/A</textual></td><td class="po-block e581 e581"><textual class="po-textual">has</textual></td><td class="po-block e582 e582"><textual class="po-textual">Has</textual></td></tr><tr class="po-table e583 e583"><td class="po-block e584 e584" rowspan="3"><textual class="po-textual">lowerCamelCase</textual></td><td class="po-block e585 e585"><textual class="po-textual">Class</textual></td><td class="po-block e586 e586"><textual class="po-textual">Computer</textual></td><td class="po-block e587 e587"><textual class="po-textual">ComputerSystem</textual></td><td class="po-block e588 e588"><textual class="po-textual">computerComputerSystem</textual></td></tr><tr class="po-table e589 e589"><td class="po-block e590 e590"><textual class="po-textual">Attribute</textual></td><td class="po-block e591 e591"><textual class="po-textual">ComputerSystem</textual></td><td class="po-block e592 e592"><textual class="po-textual">name</textual></td><td class="po-block e593 e593"><textual class="po-textual">computerSystemName</textual></td></tr><tr class="po-table e594 e594"><td class="po-block e595 e595"><textual class="po-textual">Association</textual></td><td class="po-block e596 e596"><textual class="po-textual">ComputerSystem CPU</textual></td><td class="po-block e597 e597"><textual class="po-textual">has</textual></td><td class="po-block e598 e598"><textual class="po-textual">computerSystemHasCPU</textual></td></tr><tr class="po-table e599 e599"><td class="po-block e600 e600" rowspan="3"><textual class="po-textual">lowerCaseConcatenate</textual></td><td class="po-block e601 e601"><textual class="po-textual">Class</textual></td><td class="po-block e602 e602"><textual class="po-textual">Computer</textual></td><td class="po-block e603 e603"><textual class="po-textual">ComputerSystem</textual></td><td class="po-block e604 e604"><textual class="po-textual">computer-computerSystem</textual></td></tr><tr class="po-table e605 e605"><td class="po-block e606 e606"><textual class="po-textual">Attribute</textual></td><td class="po-block e607 e607"><textual class="po-textual">ComputerSystem</textual></td><td class="po-block e608 e608"><textual class="po-textual">name</textual></td><td class="po-block e609 e609"><textual class="po-textual">computerSystem-name</textual></td></tr><tr class="po-table e610 e610"><td class="po-block e611 e611"><textual class="po-textual">Association</textual></td><td class="po-block e612 e612"><textual class="po-textual">ComputerSystem CPU</textual></td><td class="po-block e613 e613"><textual class="po-textual">has</textual></td><td class="po-block e614 e614"><textual class="po-textual">comuterSystem-has-CPU</textual></td></tr><tr class="po-table e615 e615"><td class="po-block e616 e616" rowspan="3"><textual class="po-textual">Preserve</textual></td><td class="po-block e617 e617"><textual class="po-textual">Class</textual></td><td class="po-block e618 e618"><textual class="po-textual">N/A</textual></td><td class="po-block e619 e619"><textual class="po-textual">ComputerSystem</textual></td><td class="po-block e620 e620"><textual class="po-textual">ComputerSystem</textual></td></tr><tr class="po-table e621 e621"><td class="po-block e622 e622"><textual class="po-textual">Attribute</textual></td><td class="po-block e623 e623"><textual class="po-textual">N/A</textual></td><td class="po-block e624 e624"><textual class="po-textual">name</textual></td><td class="po-block e625 e625"><textual class="po-textual">name</textual></td></tr><tr class="po-table e626 e626"><td class="po-block e627 e627"><textual class="po-textual">Association</textual></td><td class="po-block e628 e628"><textual class="po-textual">N/A</textual></td><td class="po-block e629 e629"><textual class="po-textual">has</textual></td><td class="po-block e630 e630"><textual class="po-textual">has</textual></td></tr></tbody></table><textual class="po-textual">
                </textual></para></section><section class="po-hcontainer e631 e631"><title class="po-block e632 e632"><textual class="po-textual">Multiplicity Encoding</textual></title><para class="po-block e633 e633"><textual class="po-textual">Both [model] attributes and associations have multiplicity encoding
                    parameters. They get mapped to minOccurs and maxOccurs in an XSD in the obvious
                    way. When a multiplicity greater then one is combined with an encoding that will
                    result in an [XML] attribute, a list structure is automatically created for that
                    attribute. If the creation of list content for an element is required, instead
                    of the default behaviour to simply allow the element to repeat, an extended
                    property called multiplicityEncoding can be explicitly set to the value
                    'asList'.</textual></para></section><section class="po-hcontainer e634 e634"><title class="po-block e635 e635"><textual class="po-textual">Documentation</textual></title><para class="po-block e636 e636"><textual class="po-textual">XSD's produced can optionally included embedded annotations. These annotations
                    are extensive, taking advantage of the definitions embedded in every concept in
                    the model, as well as automatically generated boiler plate definitions created
                    when new XSD constructs are generated (e.g., the creation of foreign key
                    structures representing associations, See </textual><xref class="po-milestone e637 e637" linkend="Association-End-Encoding"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref><textual class="po-textual">). Additional code is available to take
                    definitions and represent them in a tab delimited form for a tabular
                    presentation as well as conversion to an alternative XML representation used to
                    load a searchable web based data element dictionary tool.</textual></para></section></section><section class="po-hcontainer e638 e638"><title class="po-block e639 e639"><textual class="po-textual">Class Encoding</textual></title><para class="po-block e640 e640"><textual class="po-textual">This section describes the common properties and encoding options used to
                represent classes (e.g., kind, role, category) in a schema.</textual></para><para class="po-block e641 e641"><textual class="po-textual">
                </textual><table class="po-container e642 e642" frame="void"><caption class="po-container e643 e643"><para class="po-block e644 e644"><textual class="po-textual">Relevant Properties</textual></para></caption><thead class="po-container e645 e645"><tr class="po-table e646 e646"><th class="po-field e647 e647"><textual class="po-textual">Property</textual></th><th class="po-field e648 e648"><textual class="po-textual">Origin</textual></th><th class="po-field e649 e649"><textual class="po-textual">Description</textual></th><th class="po-field e650 e650"><textual class="po-textual">Use</textual></th><th class="po-field e651 e651"><textual class="po-textual">Note</textual></th></tr></thead><tbody class="po-table e652 e652"><tr class="po-table e653 e653"><td class="po-block e654 e654"><textual class="po-textual">code</textual></td><td class="po-block e655 e655"><textual class="po-textual">Built In</textual></td><td class="po-block e656 e656"><textual class="po-textual">The implementation name of the class.</textual></td><td class="po-block e657 e657"><textual class="po-textual">Used as the name for the generated schema construct subject to any
                                name encoding rules in effect.</textual></td><td class="po-block e658 e658"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e659 e659"><td class="po-block e660 e660" rowspan="4"><textual class="po-textual">visibility</textual></td><td class="po-block e661 e661" rowspan="4"><textual class="po-textual">Built In</textual></td><td class="po-block e662 e662" rowspan="4"><textual class="po-textual">The visibility of the class.</textual></td><td class="po-block e663 e663"><textual class="po-textual">When a global xsd:complexType will be generated the visibility
                                property will have the following effect.</textual></td><td class="po-block e664 e664"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e665 e665"><td class="po-block e666 e666"><textual class="po-textual">public - a global element and a global xsd:complexType are
                                generated.</textual></td></tr><tr class="po-table e667 e667"><td class="po-block e668 e668"><textual class="po-textual">protected - a global element containing an anonymous xsd:complexType
                                is created.</textual></td><td class="po-block e669 e669"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e670 e670"><td class="po-block e671 e671"><textual class="po-textual">private - only a global xsd:complexType is created.</textual></td><td class="po-block e672 e672"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e673 e673"><td class="po-block e674 e674"><textual class="po-textual">skip</textual></td><td class="po-block e675 e675"><textual class="po-textual">Extended</textual></td><td class="po-block e676 e676"><textual class="po-textual">Directs a class to not be encoded. All of its properties will be
                                merged with its subtype if it exists or its supertype it the
                                generalization relation is set to be navigable in that direction.
                                See </textual><xref class="po-milestone e677 e677" linkend="Generalization-Encoding"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref></td><td class="po-block e678 e678"><textual class="po-textual">This is very useful if a relationship needs to be encoded, but its
                                target class does not need to, or if one wants to collapse
                                generalization hierarchies.</textual></td><td class="po-block e679 e679"><textual class="po-textual">In initial prototyping efforts, the encoding option to not encode is
                                used quite widely.</textual></td></tr></tbody></table><textual class="po-textual">
                </textual><table class="po-container e680 e680" frame="void"><caption class="po-container e681 e681"><para class="po-block e682 e682"><textual class="po-textual">Class Encodings</textual></para></caption><thead class="po-container e683 e683"><tr class="po-table e684 e684"><th class="po-field e685 e685"><textual class="po-textual">Default Encoding for Class type</textual></th><th class="po-field e686 e686"><textual class="po-textual">Example</textual></th><th class="po-field e687 e687"><textual class="po-textual">Description</textual></th><th class="po-field e688 e688"><textual class="po-textual">XSD Fragment</textual></th><th class="po-field e689 e689"><textual class="po-textual">XML</textual></th></tr></thead><tbody class="po-table e690 e690"><tr class="po-table e691 e691"><td class="po-block e692 e692"><textual class="po-textual">
                                </textual><itemizedlist class="po-table e693 e693"><listitem class="po-container e694 e694"><para class="po-block e695 e695"><textual class="po-textual">&lt;&lt;kind&gt;&gt;</textual></para></listitem><listitem class="po-container e696 e696"><para class="po-block e697 e697"><textual class="po-textual">&lt;&lt;event&gt;&gt;</textual></para></listitem><listitem class="po-container e698 e698"><para class="po-block e699 e699"><textual class="po-textual">&lt;&lt;role&gt;&gt;</textual></para></listitem><listitem class="po-container e700 e700"><para class="po-block e701 e701"><textual class="po-textual">&lt;&lt;dependent&gt;&gt;</textual></para></listitem><listitem class="po-container e702 e702"><para class="po-block e703 e703"><textual class="po-textual">&lt;&lt;associative&gt;&gt;</textual></para></listitem></itemizedlist><textual class="po-textual">
                            </textual></td><td align="center" class="po-block e704 e704" valign="middle"><textual class="po-textual">
                                </textual><inlinemediaobject class="po-null e705 e705"><imageobject class="po-container e706 e706"><imagedata class="po-meta e707 e707" fileref="../../../vol3/graphics/Bauman01/Bauman01-006.jpg" format="jpg" width="150%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></inlinemediaobject><textual class="po-textual">
                            </textual></td><td class="po-block e708 e708"><textual class="po-textual">
                                </textual><para class="po-block e709 e709"><textual class="po-textual">By default, a complex type is generated. A group can also be
                                    generated if required by an inbound relationship. </textual></para><textual class="po-textual">
                            </textual></td><td align="center" class="po-block e710 e710"><textual class="po-textual">
                                </textual><programlisting class="po-block e711 e711" xml:space="preserve"><textual class="po-textual">&lt;xsd:complexType name="Manufacturer"&gt; ...</textual></programlisting><textual class="po-textual">
                            </textual></td><td class="po-block e712 e712"><textual class="po-textual">
                                </textual><programlisting class="po-block e713 e713" xml:space="preserve"><textual class="po-textual">&lt;Manufacturer/&gt;</textual></programlisting><textual class="po-textual">
                            </textual></td></tr><tr class="po-table e714 e714"><td class="po-block e715 e715"><textual class="po-textual">
                                </textual><itemizedlist class="po-table e716 e716"><listitem class="po-container e717 e717"><para class="po-block e718 e718"><textual class="po-textual">&lt;&lt;category&gt;&gt;</textual></para></listitem><listitem class="po-container e719 e719"><para class="po-block e720 e720"><textual class="po-textual">&lt;&lt;role category&gt;&gt;</textual></para></listitem></itemizedlist><textual class="po-textual">
                            </textual></td><td align="center" class="po-block e721 e721" valign="middle"><textual class="po-textual">
                                </textual><inlinemediaobject class="po-null e722 e722"><imageobject class="po-container e723 e723"><imagedata class="po-meta e724 e724" fileref="../../../vol3/graphics/Bauman01/Bauman01-007.jpg" format="jpg" width="150%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></inlinemediaobject><textual class="po-textual">
                            </textual></td><td class="po-block e725 e725"><textual class="po-textual">
                                </textual><para class="po-block e726 e726"><textual class="po-textual">By default, a group is generated. A complex type can also be
                                    generated if required by an inbound relationship.</textual></para><textual class="po-textual">
                            </textual></td><td align="center" class="po-block e727 e727"><textual class="po-textual">
                                </textual><programlisting class="po-block e728 e728" xml:space="preserve"><textual class="po-textual">&lt;xsd:group name="ManufactureredItem&gt; ...
and / or
&lt;xsd:attributeGroup name="ManufacturedItem"&gt; ...</textual></programlisting><textual class="po-textual">
                            </textual></td><td class="po-block e729 e729"><textual class="po-textual">
                                </textual><programlisting class="po-block e730 e730" xml:space="preserve"><textual class="po-textual">N/A</textual></programlisting><textual class="po-textual">
                            </textual></td></tr></tbody></table><textual class="po-textual">
            </textual></para></section><section class="po-hcontainer e731 e731"><title class="po-block e732 e732"><textual class="po-textual">Datatype Encoding</textual></title><para class="po-block e733 e733"><textual class="po-textual">This section describes the common properties and encoding options used to
                represent datatypes (e.g., primitive, domain, enum) in a schema.</textual></para><para class="po-block e734 e734"><textual class="po-textual">
                </textual><table class="po-container e735 e735" frame="void"><caption class="po-container e736 e736"><para class="po-block e737 e737"><textual class="po-textual">Relevant Properties</textual></para></caption><thead class="po-container e738 e738"><tr class="po-table e739 e739"><th class="po-field e740 e740"><textual class="po-textual">Property</textual></th><th class="po-field e741 e741"><textual class="po-textual">Origin</textual></th><th class="po-field e742 e742"><textual class="po-textual">Description</textual></th><th class="po-field e743 e743"><textual class="po-textual">Use</textual></th><th class="po-field e744 e744"><textual class="po-textual">Note</textual></th></tr></thead><tbody class="po-table e745 e745"><tr class="po-table e746 e746"><td class="po-block e747 e747"><textual class="po-textual">code</textual></td><td class="po-block e748 e748"><textual class="po-textual">Built In</textual></td><td class="po-block e749 e749"><textual class="po-textual">The implementation name of the class.</textual></td><td class="po-block e750 e750"><textual class="po-textual">Used as the name for the generated schema construct subject to any
                                name encoding rules in effect.</textual></td><td class="po-block e751 e751"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr></tbody></table><textual class="po-textual">
                </textual><table class="po-container e752 e752" frame="void"><caption class="po-container e753 e753"><para class="po-block e754 e754"><textual class="po-textual">Datatype Encodings</textual></para></caption><thead class="po-container e755 e755"><tr class="po-table e756 e756"><th class="po-field e757 e757"><textual class="po-textual">Datatype Type</textual></th><th class="po-field e758 e758"><textual class="po-textual">Example</textual></th><th class="po-field e759 e759"><textual class="po-textual">Description</textual></th><th class="po-field e760 e760"><textual class="po-textual">XSD Fragment</textual></th></tr></thead><tbody class="po-table e761 e761"><tr class="po-table e762 e762"><td class="po-block e763 e763"><textual class="po-textual">
                                </textual><para class="po-block e764 e764"><textual class="po-textual">&lt;&lt;primitive&gt;&gt;</textual></para><textual class="po-textual">
                            </textual></td><td align="center" class="po-block e765 e765" valign="middle"><textual class="po-textual">
                                </textual><para class="po-block e766 e766"><textual class="po-textual">No graphic symbol</textual></para><textual class="po-textual">
                            </textual></td><td class="po-block e767 e767"><textual class="po-textual">
                                </textual><para class="po-block e768 e768"><textual class="po-textual">Mapped via a datatype mapping file to the appropriate built in
                                    schema simple type.</textual><textual class="po-textual">
                                  </textual><footnote class="po-popup e769 e769" xml:id="mapping"><para class="po-block e770 e770"><textual class="po-textual">
                                            </textual><table class="po-container e771 e771" frame="void"><caption class="po-container e772 e772"><para class="po-block e773 e773"><textual class="po-textual">Primitive Type Map</textual></para></caption><thead class="po-container e774 e774"><tr class="po-table e775 e775"><th class="po-field e776 e776"><textual class="po-textual">Conceptual Model</textual></th><th class="po-field e777 e777"><textual class="po-textual">XSD</textual></th></tr></thead><tbody class="po-table e778 e778"><tr class="po-table e779 e779"><td class="po-block e780 e780"><textual class="po-textual">
                                                  </textual><para class="po-block e781 e781"><textual class="po-textual">string</textual></para><textual class="po-textual">
                                                  </textual></td><td class="po-block e782 e782"><textual class="po-textual">
                                                  </textual><para class="po-block e783 e783"><textual class="po-textual">xsd:string</textual></para><textual class="po-textual">
                                                  </textual></td></tr><tr class="po-table e784 e784"><td class="po-block e785 e785"><textual class="po-textual">
                                                  </textual><para class="po-block e786 e786"><textual class="po-textual">float</textual></para><textual class="po-textual">
                                                  </textual></td><td class="po-block e787 e787"><textual class="po-textual">
                                                  </textual><para class="po-block e788 e788"><textual class="po-textual">xsd:float</textual></para><textual class="po-textual">
                                                  </textual></td></tr><tr class="po-table e789 e789"><td class="po-block e790 e790"><textual class="po-textual">
                                                  </textual><para class="po-block e791 e791"><textual class="po-textual">integer</textual></para><textual class="po-textual">
                                                  </textual></td><td class="po-block e792 e792"><textual class="po-textual">
                                                  </textual><para class="po-block e793 e793"><textual class="po-textual">xsd:integer</textual></para><textual class="po-textual">
                                                  </textual></td></tr><tr class="po-table e794 e794"><td class="po-block e795 e795"><textual class="po-textual">
                                                  </textual><para class="po-block e796 e796"><textual class="po-textual">date time</textual></para><textual class="po-textual">
                                                  </textual></td><td class="po-block e797 e797"><textual class="po-textual">
                                                  </textual><para class="po-block e798 e798"><textual class="po-textual">xsd:dateTime</textual></para><textual class="po-textual">
                                                  </textual></td></tr><tr class="po-table e799 e799"><td class="po-block e800 e800"><textual class="po-textual">
                                                  </textual><para class="po-block e801 e801"><textual class="po-textual">date</textual></para><textual class="po-textual">
                                                  </textual></td><td class="po-block e802 e802"><textual class="po-textual">
                                                  </textual><para class="po-block e803 e803"><textual class="po-textual">xsd:date</textual></para><textual class="po-textual">
                                                  </textual></td></tr><tr class="po-table e804 e804"><td class="po-block e805 e805"><textual class="po-textual">
                                                  </textual><para class="po-block e806 e806"><textual class="po-textual">time</textual></para><textual class="po-textual">
                                                  </textual></td><td class="po-block e807 e807"><textual class="po-textual">
                                                  </textual><para class="po-block e808 e808"><textual class="po-textual">xsd:time</textual></para><textual class="po-textual">
                                                  </textual></td></tr><tr class="po-table e809 e809"><td class="po-block e810 e810"><textual class="po-textual">
                                                  </textual><para class="po-block e811 e811"><textual class="po-textual">boolean</textual></para><textual class="po-textual">
                                                  </textual></td><td class="po-block e812 e812"><textual class="po-textual">
                                                  </textual><para class="po-block e813 e813"><textual class="po-textual">xsd:boolean</textual></para><textual class="po-textual">
                                                  </textual></td></tr><tr class="po-table e814 e814"><td class="po-block e815 e815"><textual class="po-textual">
                                                  </textual><para class="po-block e816 e816"><textual class="po-textual">octets</textual></para><textual class="po-textual">
                                                  </textual></td><td class="po-block e817 e817"><textual class="po-textual">
                                                  </textual><para class="po-block e818 e818"><textual class="po-textual">xsd:base64Binary</textual></para><textual class="po-textual">
                                                  </textual></td></tr></tbody></table><textual class="po-textual">
                                        </textual></para></footnote></para><textual class="po-textual">
                            </textual></td><td class="po-block e819 e819"><textual class="po-textual">
                                </textual><para class="po-block e820 e820"><textual class="po-textual">N/A</textual></para><textual class="po-textual">
                            </textual></td></tr><tr class="po-table e821 e821"><td class="po-block e822 e822"><textual class="po-textual">
                                </textual><para class="po-block e823 e823"><textual class="po-textual">&lt;&lt;domain&gt;&gt;</textual></para><textual class="po-textual">
                            </textual></td><td align="center" class="po-block e824 e824" valign="middle"><textual class="po-textual">
                                </textual><inlinemediaobject class="po-null e825 e825"><imageobject class="po-container e826 e826"><imagedata class="po-meta e827 e827" fileref="../../../vol3/graphics/Bauman01/Bauman01-008.jpg" format="jpg" width="150%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></inlinemediaobject><textual class="po-textual">
                            </textual></td><td class="po-block e828 e828"><textual class="po-textual">
                                </textual><para class="po-block e829 e829"><textual class="po-textual">Either mapped via a mapping table to an appropriate built in
                                    schema simple type, or a simple type with the appropriate facets
                                    is created.</textual><footnote class="po-popup e830 e830" xml:id="base"><para class="po-block e831 e831"><textual class="po-textual">The primitive type on which the user defined data type
                                            is a restriction of, is recorded directly as a property
                                            in the modeling tool. If a user defined datatype is a
                                            restriction of another user defined datatype, it is
                                            represented as a generalization relation.</textual></para></footnote></para><textual class="po-textual">
                            </textual></td><td class="po-block e832 e832"><textual class="po-textual">
                                </textual><programlisting class="po-block e833 e833" xml:space="preserve"><textual class="po-textual">&lt;xsd:simpleType name="uuid"&gt;
    &lt;xsd:restriction base="xsd:string"&gt;
        &lt;xsd:pattern value="[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}"/&gt;
    &lt;/xsd:restriction&gt;
&lt;/xsd:simpleType&gt;</textual></programlisting><textual class="po-textual">
                            </textual></td></tr><tr class="po-table e834 e834"><td class="po-block e835 e835"><textual class="po-textual">
                                </textual><para class="po-block e836 e836"><textual class="po-textual">&lt;&lt;enum&gt;&gt;</textual></para><textual class="po-textual">
                            </textual></td><td align="center" class="po-block e837 e837" valign="middle"><textual class="po-textual">
                                </textual><inlinemediaobject class="po-null e838 e838"><imageobject class="po-container e839 e839"><imagedata class="po-meta e840 e840" fileref="../../../vol3/graphics/Bauman01/Bauman01-009.jpg" format="jpg" width="150%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></inlinemediaobject><textual class="po-textual">
                            </textual></td><td class="po-block e841 e841"><textual class="po-textual">
                                </textual><para class="po-block e842 e842"><textual class="po-textual">A simple type with enumerated facets is created.</textual><xref class="po-milestone e843 e843" linkend="base"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref></para><textual class="po-textual">
                            </textual></td><td class="po-block e844 e844"><textual class="po-textual">
                                </textual><programlisting class="po-block e845 e845" xml:space="preserve"><textual class="po-textual">&lt;xsd:simpleType name="colorEnum"&gt;
    &lt;xsd:restriction base="xsd:string"&gt;
        &lt;xsd:enumeration value="red"/&gt;
        &lt;xsd:enumeration value="yellow"/&gt;
        &lt;xsd:enumeration value="blue"/&gt;
        &lt;xsd:enumeration value="green"/&gt;
    &lt;/xsd:restriction&gt;
&lt;/xsd:simpleType&gt;</textual></programlisting><textual class="po-textual">
                            </textual></td></tr><tr class="po-table e846 e846"><td class="po-block e847 e847"><textual class="po-textual">
                                </textual><para class="po-block e848 e848"><textual class="po-textual">&lt;&lt;struct&gt;&gt;</textual></para><textual class="po-textual">
                            </textual></td><td align="center" class="po-block e849 e849" valign="middle"><textual class="po-textual">
                                </textual><inlinemediaobject class="po-null e850 e850"><imageobject class="po-container e851 e851"><imagedata class="po-meta e852 e852" fileref="../../../vol3/graphics/Bauman01/Bauman01-010.jpg" format="jpg" width="150%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></inlinemediaobject><textual class="po-textual">
                            </textual></td><td class="po-block e853 e853"><textual class="po-textual">
                                </textual><para class="po-block e854 e854"><textual class="po-textual">Processed as would be a class encoding as a complexType with
                                    the following exception; If the attributes of the structure are
                                    all set to encode "asValue", a simple list type is created (see
                                    example).</textual></para><textual class="po-textual">
                            </textual></td><td class="po-block e855 e855"><textual class="po-textual">
                                </textual><programlisting class="po-block e856 e856" xml:space="preserve"><textual class="po-textual">&lt;xsd:simpleType name="rgbColorStruct"&gt;
    &lt;xsd:list itemType="xsd:integer"/&gt;
&lt;/xsd:simpleType&gt;</textual></programlisting><textual class="po-textual">
                            </textual></td></tr><tr class="po-table e857 e857"><td class="po-block e858 e858"><textual class="po-textual">
                                </textual><para class="po-block e859 e859"><textual class="po-textual">&lt;&lt;union&gt;&gt;</textual></para><textual class="po-textual">
                            </textual></td><td align="center" class="po-block e860 e860" valign="middle"><textual class="po-textual">
                                </textual><inlinemediaobject class="po-null e861 e861"><imageobject class="po-container e862 e862"><imagedata class="po-meta e863 e863" fileref="../../../vol3/graphics/Bauman01/Bauman01-011.jpg" format="jpg" width="150%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></inlinemediaobject><textual class="po-textual">
                            </textual></td><td class="po-block e864 e864"><textual class="po-textual">
                                </textual><para class="po-block e865 e865"><textual class="po-textual">A simple union type that unions together the set of unique
                                    datatypes present.</textual></para><textual class="po-textual">
                            </textual></td><td class="po-block e866 e866"><textual class="po-textual">
                                </textual><programlisting class="po-block e867 e867" xml:space="preserve"><textual class="po-textual">&lt;xsd:simpleType name="colorUnion"&gt;
    &lt;xsd:union memberTypes="rgbColorStruct colorEnum"/&gt;
&lt;/xsd:simpleType&gt;</textual></programlisting><textual class="po-textual">
                            </textual></td></tr></tbody></table><textual class="po-textual">
            </textual></para></section><section class="po-hcontainer e868 e868"><title class="po-block e869 e869"><textual class="po-textual">Attribute Encoding</textual></title><para class="po-block e870 e870"><textual class="po-textual">
                </textual><inlinemediaobject class="po-null e871 e871"><imageobject class="po-container e872 e872"><imagedata class="po-meta e873 e873" fileref="../../../vol3/graphics/Bauman01/Bauman01-012.jpg" format="jpg" width="20%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></inlinemediaobject><textual class="po-textual">
                </textual><table class="po-container e874 e874" frame="void"><caption class="po-container e875 e875"><para class="po-block e876 e876"><textual class="po-textual">Relevant Properties</textual></para></caption><thead class="po-container e877 e877"><tr class="po-table e878 e878"><th class="po-field e879 e879"><textual class="po-textual">Property</textual></th><th class="po-field e880 e880"><textual class="po-textual">Origin</textual></th><th class="po-field e881 e881"><textual class="po-textual">Description</textual></th><th class="po-field e882 e882"><textual class="po-textual">Use</textual></th><th class="po-field e883 e883"><textual class="po-textual">Note</textual></th></tr></thead><tbody class="po-table e884 e884"><tr class="po-table e885 e885"><td class="po-block e886 e886"><textual class="po-textual">code</textual></td><td class="po-block e887 e887"><textual class="po-textual">Built In</textual></td><td class="po-block e888 e888"><textual class="po-textual">The implementation name of the attribute.</textual></td><td class="po-block e889 e889"><textual class="po-textual">Used as the name for the generated schema construct subject to any
                                name encoding rules in effect.</textual></td><td class="po-block e890 e890"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e891 e891"><td class="po-block e892 e892"><textual class="po-textual">encoding</textual></td><td class="po-block e893 e893"><textual class="po-textual">Extended</textual></td><td class="po-block e894 e894"><textual class="po-textual">Controls how an attribute will be encoded. See </textual><xref class="po-milestone e895 e895" linkend="Attribute-Encoding"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref></td><td class="po-block e896 e896"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e897 e897"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e898 e898"><td class="po-block e899 e899"><textual class="po-textual">skip</textual></td><td class="po-block e900 e900"><textual class="po-textual">Extended</textual></td><td class="po-block e901 e901"><textual class="po-textual">Directs an attribute to not be encoded.</textual></td><td class="po-block e902 e902"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e903 e903"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr></tbody></table><table class="po-container e904 e904" frame="void" xml:id="Attribute-Encoding"><caption class="po-container e905 e905"><para class="po-block e906 e906"><textual class="po-textual">Attribute Encodings</textual></para></caption><thead class="po-container e907 e907"><tr class="po-table e908 e908"><th class="po-field e909 e909"><textual class="po-textual">Encoding</textual></th><th class="po-field e910 e910"><textual class="po-textual">Description</textual></th><th class="po-field e911 e911"><textual class="po-textual">XSD Fragment</textual></th><th class="po-field e912 e912"><textual class="po-textual">XML Example</textual></th></tr></thead><tbody class="po-table e913 e913"><tr class="po-table e914 e914"><td class="po-block e915 e915"><textual class="po-textual">asAttribute</textual></td><td class="po-block e916 e916"><textual class="po-textual">
                                </textual><para class="po-block e917 e917"><textual class="po-textual">The model attribute is represented as an XML attribute within
                                    a complex type.</textual></para><textual class="po-textual">
                            </textual></td><td class="po-block e918 e918"><textual class="po-textual">
                                </textual><programlisting class="po-block e919 e919" xml:space="preserve"><textual class="po-textual">&lt;xsd:complexType name="CPU"&gt;
    &lt;xsd:attribute name="signature" type="xsd:string"/&gt;
&lt;/xsd:complexType&gt;</textual></programlisting><textual class="po-textual">
                            </textual></td><td class="po-block e920 e920"><textual class="po-textual">
                                </textual><programlisting class="po-block e921 e921" xml:space="preserve"><textual class="po-textual">&lt;CPU signature="Intel(R) Pentium(R) M"/&gt;</textual></programlisting><textual class="po-textual">
                            </textual></td></tr><tr class="po-table e922 e922"><td class="po-block e923 e923"><textual class="po-textual">asElement</textual></td><td class="po-block e924 e924"><textual class="po-textual">
                                </textual><para class="po-block e925 e925"><textual class="po-textual">The model attribute is represented as an XML element within
                                    the complex type.</textual></para><textual class="po-textual">
                            </textual></td><td class="po-block e926 e926"><textual class="po-textual">
                                </textual><programlisting class="po-block e927 e927" xml:space="preserve"><textual class="po-textual">&lt;xsd:complexType name="CPU"&gt;
    &lt;xsd:sequence&gt;
        &lt;xsd:element name="Signature" type="xsd:string"/&gt;
    &lt;/xsd:sequence&gt;
&lt;/xsd:complexType&gt;</textual></programlisting><textual class="po-textual">
                            </textual></td><td class="po-block e928 e928"><textual class="po-textual">
                                </textual><programlisting class="po-block e929 e929" xml:space="preserve"><textual class="po-textual">&lt;CPU&gt;
    &lt;Signature&gt;Intel(R) Pentium(R) M&lt;/Signature&gt;
&lt;/CPU&gt;</textual></programlisting><textual class="po-textual">
                            </textual></td></tr><tr class="po-table e930 e930"><td class="po-block e931 e931"><textual class="po-textual">asValue</textual></td><td class="po-block e932 e932"><textual class="po-textual">
                                </textual><para class="po-block e933 e933"><textual class="po-textual">The value of the model attribute is represented as a simple
                                    content value within the complex type.</textual></para><textual class="po-textual">
                            </textual></td><td class="po-block e934 e934"><textual class="po-textual">
                                </textual><programlisting class="po-block e935 e935" xml:space="preserve"><textual class="po-textual">&lt;xsd:complexType name="CPU"&gt;
    &lt;xsd:simpleContent&gt;
        &lt;xsd:extension base="xsd:string"/&gt;
    &lt;/xsd:simpleContent&gt;
&lt;/xsd:complexType&gt;</textual></programlisting><textual class="po-textual">
                            </textual></td><td class="po-block e936 e936"><textual class="po-textual">
                                </textual><programlisting class="po-block e937 e937" xml:space="preserve"><textual class="po-textual">&lt;CPU&gt;Intel(R) Pentium(R) M&lt;/CPU&gt;</textual></programlisting><textual class="po-textual">
                            </textual></td></tr></tbody></table><table class="po-container e938 e938" frame="void"><caption class="po-container e939 e939"><para class="po-block e940 e940"><textual class="po-textual">Attribute Encoding Combinations and there affect on the XSD</textual></para></caption><thead class="po-container e941 e941"><tr class="po-table e942 e942"><th align="center" class="po-field e943 e943"><textual class="po-textual">asAttribute</textual></th><th class="po-field e944 e944"><textual class="po-textual">AsElement</textual></th><th class="po-field e945 e945"><textual class="po-textual">asValue</textual></th><th class="po-field e946 e946"><textual class="po-textual">XSD Construct Created</textual></th></tr></thead><tbody class="po-table e947 e947"><tr class="po-table e948 e948"><td align="center" class="po-block e949 e949"><textual class="po-textual">+</textual></td><td align="center" class="po-block e950 e950"><textual class="po-textual">-</textual></td><td align="center" class="po-block e951 e951"><textual class="po-textual">-</textual></td><td align="center" class="po-block e952 e952"><textual class="po-textual">
                                </textual><para class="po-block e953 e953"><textual class="po-textual">A complex type with attributes.</textual></para><textual class="po-textual">
                            </textual></td></tr><tr class="po-table e954 e954"><td align="center" class="po-block e955 e955"><textual class="po-textual">-</textual></td><td align="center" class="po-block e956 e956"><textual class="po-textual">+</textual></td><td align="center" class="po-block e957 e957"><textual class="po-textual">-</textual></td><td align="center" class="po-block e958 e958"><textual class="po-textual">
                                </textual><para class="po-block e959 e959"><textual class="po-textual">A complex type with complex element content.</textual></para><textual class="po-textual">
                            </textual></td></tr><tr class="po-table e960 e960"><td align="center" class="po-block e961 e961"><textual class="po-textual">-</textual></td><td align="center" class="po-block e962 e962"><textual class="po-textual">-</textual></td><td align="center" class="po-block e963 e963"><textual class="po-textual">+</textual></td><td align="center" class="po-block e964 e964"><textual class="po-textual">
                                </textual><para class="po-block e965 e965"><textual class="po-textual">A complex type with simple content.</textual></para><textual class="po-textual">
                            </textual></td></tr><tr class="po-table e966 e966"><td align="center" class="po-block e967 e967"><textual class="po-textual">+</textual></td><td align="center" class="po-block e968 e968"><textual class="po-textual">+</textual></td><td align="center" class="po-block e969 e969"><textual class="po-textual">-</textual></td><td align="center" class="po-block e970 e970"><textual class="po-textual">
                                </textual><para class="po-block e971 e971"><textual class="po-textual">A complex with complex element and attribute content.</textual></para><textual class="po-textual">
                            </textual></td></tr><tr class="po-table e972 e972"><td align="center" class="po-block e973 e973"><textual class="po-textual">+</textual></td><td align="center" class="po-block e974 e974"><textual class="po-textual">-</textual></td><td align="center" class="po-block e975 e975"><textual class="po-textual">+</textual></td><td align="center" class="po-block e976 e976"><textual class="po-textual">
                                </textual><para class="po-block e977 e977"><textual class="po-textual">A complex type with attributes and simple content.</textual></para><textual class="po-textual">
                            </textual></td></tr><tr class="po-table e978 e978"><td align="center" class="po-block e979 e979"><textual class="po-textual">-</textual></td><td align="center" class="po-block e980 e980"><textual class="po-textual">+</textual></td><td align="center" class="po-block e981 e981"><textual class="po-textual">+</textual></td><td align="center" class="po-block e982 e982"><textual class="po-textual">
                                </textual><para class="po-block e983 e983"><textual class="po-textual">A complex type with complex element and mixed content.</textual></para><textual class="po-textual">
                            </textual></td></tr><tr class="po-table e984 e984"><td align="center" class="po-block e985 e985"><textual class="po-textual">+</textual></td><td align="center" class="po-block e986 e986"><textual class="po-textual">+</textual></td><td align="center" class="po-block e987 e987"><textual class="po-textual">+</textual></td><td align="center" class="po-block e988 e988"><textual class="po-textual">
                                </textual><para class="po-block e989 e989"><textual class="po-textual">A complex type with complex element, attribute and mixed
                                    content.</textual></para><textual class="po-textual">
                            </textual></td></tr></tbody></table></para></section><section class="po-hcontainer e990 e990"><title class="po-block e991 e991"><textual class="po-textual">Relationship Encoding</textual></title><section class="po-hcontainer e992 e992"><title class="po-block e993 e993"><textual class="po-textual">Association Encoding</textual></title><para class="po-block e994 e994"><textual class="po-textual">This section describes the common properties and encoding options used to
                    represent association relationships in a schema.</textual></para><para class="po-block e995 e995"><textual class="po-textual">
                    </textual><inlinemediaobject class="po-null e996 e996"><imageobject class="po-container e997 e997"><imagedata class="po-meta e998 e998" fileref="../../../vol3/graphics/Bauman01/Bauman01-013.jpg" format="jpg" width="50%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></inlinemediaobject><textual class="po-textual">
                    </textual><note class="po-container e999 e999"><para class="po-block e1000 e1000"><textual class="po-textual">In the example above the association encoded is called
                            'manufacturedBy' with a source class of 'ManufacturedItem' and a target
                            class of 'Manufacturer'. The label 'computerMaker' is a UML role applied
                            to the 'Manufacturer' side of the association.</textual></para></note></para><section class="po-hcontainer e1001 e1001"><title class="po-block e1002 e1002"><textual class="po-textual">Association End</textual></title><para class="po-block e1003 e1003"><textual class="po-textual">Association End encodings create structures that get embedded in a source
                        class and point to a target class through a variety of means that can be
                        grossly categorized as the by value options (asNested, asGroupRef) that
                        directly represent all of the target class within the source class, and the
                        by reference options that rely on primary keys in the target class to point
                        from source to target.</textual></para><para class="po-block e1004 e1004"><textual class="po-textual">
                        </textual><table class="po-container e1005 e1005" frame="void"><caption class="po-container e1006 e1006"><para class="po-block e1007 e1007"><textual class="po-textual">Relevant Properties</textual></para></caption><thead class="po-container e1008 e1008"><tr class="po-table e1009 e1009"><th class="po-field e1010 e1010"><textual class="po-textual">Property</textual></th><th class="po-field e1011 e1011"><textual class="po-textual">Origin</textual></th><th class="po-field e1012 e1012"><textual class="po-textual">Description</textual></th><th class="po-field e1013 e1013"><textual class="po-textual">Use</textual></th><th class="po-field e1014 e1014"><textual class="po-textual">Note</textual></th></tr></thead><tbody class="po-table e1015 e1015"><tr class="po-table e1016 e1016"><td class="po-block e1017 e1017"><textual class="po-textual">roleA/B code</textual></td><td class="po-block e1018 e1018"><textual class="po-textual">Built In</textual></td><td class="po-block e1019 e1019"><textual class="po-textual">The implementation name of the RoleA / RoleB association
                                        end.</textual></td><td class="po-block e1020 e1020"><textual class="po-textual">Used as the name for the generated schema construct subject
                                        to any name encoding rules in effect.</textual></td><td class="po-block e1021 e1021"><textual class="po-textual">If there is no RoleA / RoleB code set, then the 'code' of
                                        the target class is used.</textual></td></tr><tr class="po-table e1022 e1022"><td class="po-block e1023 e1023"><textual class="po-textual">roleA/B navigability</textual></td><td class="po-block e1024 e1024"><textual class="po-textual">Built In</textual></td><td class="po-block e1025 e1025"><textual class="po-textual">Represents which direction(s) an association can be
                                        transversed.</textual></td><td class="po-block e1026 e1026"><textual class="po-textual">Used to control whether the association is encoded. For
                                        every navigable end pointing to a 'target' class, a
                                        construct in the source class will be generated to implement
                                        the association in that direction.</textual></td></tr><tr class="po-table e1027 e1027"><td class="po-block e1028 e1028"><textual class="po-textual">roleA/B encoding</textual></td><td class="po-block e1029 e1029"><textual class="po-textual">Extended</textual></td><td class="po-block e1030 e1030"><textual class="po-textual">Controls how an association end will be encoded. See </textual><xref class="po-milestone e1031 e1031" linkend="Association-Encoding"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref></td><td class="po-block e1032 e1032"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1033 e1033"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr></tbody></table><textual class="po-textual">
                        </textual><table class="po-container e1034 e1034" frame="void" xml:id="Association-End-Encoding"><caption class="po-container e1035 e1035"><para class="po-block e1036 e1036"><textual class="po-textual">Association End Encodings</textual></para></caption><thead class="po-container e1037 e1037"><tr class="po-table e1038 e1038"><th class="po-field e1039 e1039"><textual class="po-textual">Encoding</textual></th><th class="po-field e1040 e1040"><textual class="po-textual">Description</textual></th><th class="po-field e1041 e1041"><textual class="po-textual">XSD Fragment</textual></th><th class="po-field e1042 e1042"><textual class="po-textual">XML Example</textual></th></tr></thead><tbody class="po-table e1043 e1043"><tr class="po-table e1044 e1044"><td class="po-block e1045 e1045"><textual class="po-textual">asAttribute</textual></td><td class="po-block e1046 e1046"><textual class="po-textual">Keys of the target class are represented as attributes in
                                        the source class.</textual></td><td class="po-block e1047 e1047"><textual class="po-textual">
                                        </textual><programlisting class="po-block e1048 e1048" xml:space="preserve"><textual class="po-textual">&lt;xsd:group name="ManufacturedItem"&gt;
    &lt;xsd:sequence&gt;
        &lt;xsd:element name="SerialNum" type="xsd:string"/&gt;
    &lt;/xsd:sequence&gt;
&lt;/xsd:group&gt;

&lt;xsd:attributeGroup name="ManufacturedItem"&gt;
     &lt;xsd:attribute name="computerMaker" use="required" type="Manufacturer"/&gt;
&lt;/xsd:attributeGroup&gt;

&lt;xsd:complexType name="Hardware"&gt;
    &lt;xsd:sequence&gt;
        &lt;xsd:group ref="ManufacturedItem"/&gt;
    &lt;/xsd:sequence&gt;
    &lt;xsd:attributeGroup ref="ManufacturedItem"/&gt;
&lt;/xsd:complexType&gt;</textual></programlisting><textual class="po-textual">
                                    </textual></td><td class="po-block e1049 e1049"><textual class="po-textual">
                                        </textual><programlisting class="po-block e1050 e1050" xml:space="preserve"><textual class="po-textual">&lt;Hardware computerMaker="Dell"&gt;
    &lt;SerialNum&gt;1234&lt;/SerialNum&gt;
&lt;/Hardware&gt;</textual></programlisting><textual class="po-textual">
                                    </textual></td></tr><tr class="po-table e1051 e1051"><td class="po-block e1052 e1052"><textual class="po-textual">asElement</textual></td><td class="po-block e1053 e1053"><textual class="po-textual">Keys of the target class are represented as elements in the
                                        source class.</textual></td><td class="po-block e1054 e1054"><textual class="po-textual">
                                        </textual><programlisting class="po-block e1055 e1055" xml:space="preserve"><textual class="po-textual">&lt;xsd:group name="ManufacturedItem"&gt;
    &lt;xsd:sequence&gt;
        &lt;xsd:element name="ComputerMaker" type="xsd:string"/&gt;
        &lt;xsd:element name="SerialNum" type="xsd:string"/&gt;
    &lt;/xsd:sequence&gt;
&lt;/xsd:group&gt;

&lt;xsd:complexType name="Hardware"&gt;
    &lt;xsd:sequence&gt;
        &lt;xsd:group ref="ManufacturedItem"/&gt;
    &lt;/xsd:sequence&gt;
&lt;/xsd:complexType&gt;</textual></programlisting><textual class="po-textual">
                                    </textual></td><td class="po-block e1056 e1056"><textual class="po-textual">
                                        </textual><programlisting class="po-block e1057 e1057" xml:space="preserve"><textual class="po-textual">&lt;Hardware&gt;
    &lt;ComputerMaker&gt;Dell&lt;/ComputerMaker&gt;
    &lt;SerialNum&gt;1234&lt;/SerialNum&gt;
&lt;/Hardware&gt;</textual></programlisting><textual class="po-textual">
                                    </textual></td></tr><tr class="po-table e1058 e1058"><td class="po-block e1059 e1059"><textual class="po-textual">asElementKey</textual></td><td class="po-block e1060 e1060"><textual class="po-textual">An element representing the relationship is created. Keys of
                                        the target class are represented as attributes on it.</textual></td><td class="po-block e1061 e1061"><textual class="po-textual">
                                        </textual><programlisting class="po-block e1062 e1062" xml:space="preserve"><textual class="po-textual">&lt;xsd:group name="ManufacturedItem"&gt;
    &lt;xsd:sequence&gt;
        &lt;xsd:element name="ComputerMaker"&gt;
             &lt;xsd:complexType&gt;
                 &lt;xsd:attribute name="name" use="required" type="xsd:string"/&gt;
             &lt;/xsd:complexType&gt;
        &lt;/xsd:element&gt;
        &lt;xsd:element name="SerialNum" type="xsd:string"/&gt;
    &lt;/xsd:sequence&gt;
&lt;/xsd:group&gt;

&lt;xsd:complexType name="Hardware"&gt;
    &lt;xsd:sequence&gt;
        &lt;xsd:group ref="ManufacturedItem"/&gt;
    &lt;/xsd:sequence&gt;
&lt;/xsd:complexType&gt;</textual></programlisting><textual class="po-textual">
                                    </textual></td><td class="po-block e1063 e1063"><textual class="po-textual">
                                        </textual><programlisting class="po-block e1064 e1064" xml:space="preserve"><textual class="po-textual">&lt;Hardware&gt;
    &lt;ComputerMaker name="Dell"/&gt;
    &lt;SerialNum&gt;1234&lt;/SerialNum&gt;
&lt;/Hardware&gt;</textual></programlisting><textual class="po-textual">
                                    </textual></td></tr><tr class="po-table e1065 e1065"><td class="po-block e1066 e1066"><textual class="po-textual">asElementNestedKey</textual></td><td class="po-block e1067 e1067"><textual class="po-textual">An element representing the relationship is created. Keys of
                                        the target class are represented as elements within it.</textual></td><td class="po-block e1068 e1068"><textual class="po-textual">
                                        </textual><programlisting class="po-block e1069 e1069" xml:space="preserve"><textual class="po-textual">&lt;xsd:group name="ManufacturedItem"&gt;
    &lt;xsd:sequence&gt;
        &lt;xsd:element name="ComputerMaker"&gt;
             &lt;xsd:complexType&gt;
                &lt;xsd:sequence&gt;
                    &lt;xsd:element name="name" type="xsd:string"/&gt;
                &lt;/xsd:sequence&gt;
             &lt;/xsd:complexType&gt;
        &lt;/xsd:element&gt;
        &lt;xsd:element name="SerialNum" type="xsd:string"/&gt;
    &lt;/xsd:sequence&gt;
&lt;/xsd:group&gt;

&lt;xsd:complexType name="Hardware"&gt;
    &lt;xsd:sequence&gt;
        &lt;xsd:group ref="ManufacturedItem"/&gt;
    &lt;/xsd:sequence&gt;
&lt;/xsd:complexType&gt;</textual></programlisting><textual class="po-textual">
                                    </textual></td><td class="po-block e1070 e1070"><textual class="po-textual">
                                        </textual><programlisting class="po-block e1071 e1071" xml:space="preserve"><textual class="po-textual">&lt;Hardware&gt;
    &lt;ComputerMaker&gt;
        &lt;Name&gt;Dell&lt;/Name&gt;
    &lt;/ComputerMaker&gt;
    &lt;SerialNum&gt;1234&lt;/SerialNum&gt;
&lt;/Hardware&gt;</textual></programlisting><textual class="po-textual">
                                    </textual></td></tr><tr class="po-table e1072 e1072"><td class="po-block e1073 e1073"><textual class="po-textual">asGroupRef</textual></td><td class="po-block e1074 e1074"><textual class="po-textual">A group reference is created to the target class.</textual></td><td class="po-block e1075 e1075"><textual class="po-textual">
                                        </textual><programlisting class="po-block e1076 e1076" xml:space="preserve"><textual class="po-textual">&lt;xsd:group name="ManufacturedItem"&gt;
    &lt;xsd:sequence&gt;
        &lt;xsd:group ref="Manufacturer"/&gt;
        &lt;xsd:element name="SerialNum" type="xsd:string"/&gt;
    &lt;/xsd:sequence&gt;
&lt;/xsd:group&gt;

&lt;xsd:complexType name="Hardware"&gt;
    &lt;xsd:sequence&gt;
        &lt;xsd:group ref="ManufacturedItem"/&gt;
    &lt;/xsd:sequence&gt;
&lt;/xsd:complexType&gt;</textual></programlisting><textual class="po-textual">
                                    </textual></td><td class="po-block e1077 e1077"><textual class="po-textual">
                                        </textual><programlisting class="po-block e1078 e1078" xml:space="preserve"><textual class="po-textual">&lt;Hardware&gt;
    &lt;ManufacturerName&gt;Dell&lt;/ManufacturerName&gt;
    &lt;ManufacturerSize&gt;large&lt;/ManufacturerSize&gt;
    &lt;SerialNum&gt;1234&lt;/SerialNum&gt;
&lt;/Hardware&gt;</textual></programlisting><footnote class="po-popup e1079 e1079" xml:id="upperCamelCase"><para class="po-block e1080 e1080"><textual class="po-textual">The element names are created by selecting a name
                                                encoding option that combines an attributes name
                                                with its class name.</textual></para></footnote><textual class="po-textual">
                                    </textual></td></tr><tr class="po-table e1081 e1081"><td class="po-block e1082 e1082"><textual class="po-textual">
                                        </textual><para class="po-block e1083 e1083"><textual class="po-textual">asNested</textual></para><textual class="po-textual">
                                    </textual></td><td class="po-block e1084 e1084"><textual class="po-textual">The target class is directly nested within the source
                                        class.</textual></td><td class="po-block e1085 e1085"><textual class="po-textual">
                                        </textual><programlisting class="po-block e1086 e1086" xml:space="preserve"><textual class="po-textual">&lt;xsd:group name="ManufacturedItem"&gt;
    &lt;xsd:sequence&gt;
        &lt;xsd:element name="ComputerMaker" type="Manufacturer"/&gt;
        &lt;xsd:element name="SerialNum" type="xsd:string"/&gt;
    &lt;/xsd:sequence&gt;
&lt;/xsd:group&gt;

&lt;xsd:complexType name="Hardware"&gt;
    &lt;xsd:sequence&gt;
        &lt;xsd:group ref="ManufacturedItem"/&gt;
    &lt;/xsd:sequence&gt;
&lt;/xsd:complexType&gt;</textual></programlisting><textual class="po-textual">
                                    </textual></td><td class="po-block e1087 e1087"><textual class="po-textual">
                                        </textual><programlisting class="po-block e1088 e1088" xml:space="preserve"><textual class="po-textual">&lt;Hardware&gt;
    &lt;ComputerMaker&gt;
        &lt;Name&gt;Dell&lt;/Name&gt;
        &lt;Size&gt;Large&lt;/Size&gt;
    &lt;/ComputerMaker&gt;
    &lt;SerialNum&gt;1234&lt;/SerialNum&gt;
&lt;/Hardware&gt;</textual></programlisting><textual class="po-textual">
                                    </textual></td></tr><tr class="po-table e1089 e1089"><td class="po-block e1090 e1090"><textual class="po-textual">asXlink</textual></td><td class="po-block e1091 e1091"><textual class="po-textual">An element representing the relationship is created. An
                                        attribute group reference is created to bring in link simple
                                        link attributes.</textual></td><td class="po-block e1092 e1092"><textual class="po-textual">
                                        </textual><programlisting class="po-block e1093 e1093" xml:space="preserve"><textual class="po-textual">&lt;xsd:group name="ManufacturedItem"&gt;
    &lt;xsd:sequence&gt;
        &lt;xsd:element name="ComputerMaker"&gt;
            &lt;xsd:complexType&gt;
                &lt;xsd:attributeGroup ref="xlink:XlinkSimple"/&gt;
            &lt;/xsd:complexType&gt;
        &lt;/xsd:element&gt;
    &lt;xsd:element name="SerialNum" type="xsd:string"/&gt;
    &lt;/xsd:sequence&gt;
&lt;/xsd:group&gt;

&lt;xsd:complexType name="Hardware"&gt;
    &lt;xsd:sequence&gt;
        &lt;xsd:group ref="ManufacturedItem"/&gt;
    &lt;/xsd:sequence&gt;
&lt;/xsd:complexType&gt;</textual></programlisting><textual class="po-textual">
                                    </textual></td><td class="po-block e1094 e1094"><textual class="po-textual">
                                        </textual><programlisting class="po-block e1095 e1095" xml:space="preserve"><textual class="po-textual">&lt;Hardware&gt;
    &lt;ComputerMaker xlink:href="Dell"/&gt;
    &lt;SerialNum&gt;1234&lt;/SerialNum&gt;
&lt;/Hardware&gt;</textual></programlisting><textual class="po-textual">
                                    </textual></td></tr></tbody></table><textual class="po-textual">
                    </textual></para></section><section class="po-hcontainer e1096 e1096"><title class="po-block e1097 e1097"><textual class="po-textual">Association Encoding</textual></title><para class="po-block e1098 e1098"><textual class="po-textual">Association encodings create structures that directly represent the
                        association as either an independent global complexType, or as an additional
                        layer within an association end encoding. Directly representing an
                        association is less common then representing then using the association end
                        encodings.</textual></para><table class="po-container e1099 e1099" frame="void"><caption class="po-container e1100 e1100"><para class="po-block e1101 e1101"><textual class="po-textual">Relevant Properties</textual></para></caption><thead class="po-container e1102 e1102"><tr class="po-table e1103 e1103"><th class="po-field e1104 e1104"><textual class="po-textual">Property</textual></th><th class="po-field e1105 e1105"><textual class="po-textual">Origin</textual></th><th class="po-field e1106 e1106"><textual class="po-textual">Description</textual></th><th class="po-field e1107 e1107"><textual class="po-textual">Use</textual></th><th class="po-field e1108 e1108"><textual class="po-textual">Note</textual></th></tr></thead><tbody class="po-table e1109 e1109"><tr class="po-table e1110 e1110"><td class="po-block e1111 e1111"><textual class="po-textual">code</textual></td><td class="po-block e1112 e1112"><textual class="po-textual">Built In</textual></td><td class="po-block e1113 e1113"><textual class="po-textual">The implementation name of the association.</textual></td><td class="po-block e1114 e1114"><textual class="po-textual">Used as the name for the generated schema construct subject to
                                    any name encoding rules in effect.</textual></td><td class="po-block e1115 e1115"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e1116 e1116"><td class="po-block e1117 e1117" rowspan="4"><textual class="po-textual">visibility</textual></td><td class="po-block e1118 e1118" rowspan="4"><textual class="po-textual">Extended</textual></td><td class="po-block e1119 e1119" rowspan="4"><textual class="po-textual">The visibility of the association.</textual></td><td class="po-block e1120 e1120"><textual class="po-textual">When a global xsd:complexType will be generated the visibility
                                    property will have the following effect.</textual></td><td class="po-block e1121 e1121"><textual class="po-textual">This only has an effect if encoding = 'asComplexType'.</textual></td></tr><tr class="po-table e1122 e1122"><td class="po-block e1123 e1123"><textual class="po-textual">public - a global element and a global xsd:complexType are
                                    generated.</textual></td></tr><tr class="po-table e1124 e1124"><td class="po-block e1125 e1125"><textual class="po-textual">protected - a global element containing an anonymous
                                    xsd:complexType is created.</textual></td><td class="po-block e1126 e1126"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e1127 e1127"><td class="po-block e1128 e1128"><textual class="po-textual">private - only a global xsd:complexType is created.</textual></td><td class="po-block e1129 e1129"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e1130 e1130"><td class="po-block e1131 e1131"><textual class="po-textual">encoding</textual></td><td class="po-block e1132 e1132"><textual class="po-textual">Extended</textual></td><td class="po-block e1133 e1133"><textual class="po-textual">Controls how an association will be encoded. See </textual><xref class="po-milestone e1134 e1134" linkend="Association-Encoding"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></xref></td><td class="po-block e1135 e1135"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td><td class="po-block e1136 e1136"><textual class="po-textual">By default associations are not explicitly encoded as global
                                    type declarations. Instead association-end encodings create
                                    needed structures directly in the source class.</textual></td></tr></tbody></table><table class="po-container e1137 e1137" frame="void" xml:id="Association-Encoding"><caption class="po-container e1138 e1138"><para class="po-block e1139 e1139"><textual class="po-textual">Association Encodings</textual></para></caption><thead class="po-container e1140 e1140"><tr class="po-table e1141 e1141"><th class="po-field e1142 e1142"><textual class="po-textual">Encoding</textual></th><th class="po-field e1143 e1143"><textual class="po-textual">Description</textual></th><th class="po-field e1144 e1144"><textual class="po-textual">XSD Fragment</textual></th><th class="po-field e1145 e1145"><textual class="po-textual">XML Example</textual></th></tr></thead><tbody class="po-table e1146 e1146"><tr class="po-table e1147 e1147"><td class="po-block e1148 e1148"><textual class="po-textual">
                                    </textual><para class="po-block e1149 e1149"><textual class="po-textual">asNested</textual></para><textual class="po-textual">
                                </textual></td><td class="po-block e1150 e1150"><textual class="po-textual">The association is explicitly represented as an additional
                                    nested layer within association end encodings. The association
                                    end encoding used is 'asElement'.</textual></td><td class="po-block e1151 e1151"><textual class="po-textual">
                                    </textual><programlisting class="po-block e1152 e1152" xml:space="preserve"><textual class="po-textual">&lt;xsd:group name="ManufacturedItem"&gt;
    &lt;xsd:sequence&gt;
        &lt;xsd:element name="ManufacturedBy"&gt;
            &lt;xsd:complexType&gt;
                &lt;xsd:sequence&gt;
                    &lt;xsd:element name="ComputerMaker" type="xsd:string"/&gt;
                &lt;/xsd:sequence&gt;
            &lt;/xsd:complexType&gt;
        &lt;/xsd:element&gt;
        &lt;xsd:element name="SerialNum" type="xsd:string"/&gt;
    &lt;/xsd:sequence&gt;
&lt;/xsd:group&gt;

&lt;xsd:complexType name="Hardware"&gt;
    &lt;xsd:sequence&gt;
        &lt;xsd:group ref="ManufacturedItem"/&gt;
    &lt;/xsd:sequence&gt;
&lt;/xsd:complexType&gt;</textual></programlisting><textual class="po-textual">
                                </textual></td><td class="po-block e1153 e1153"><textual class="po-textual">
                                    </textual><programlisting class="po-block e1154 e1154" xml:space="preserve"><textual class="po-textual">&lt;Hardware&gt;
    &lt;ManufacturedBy&gt;
        &lt;ComputerMaker&gt;Dell&lt;/ComputerMaker&gt;
    &lt;/ManufacturedBy&gt;
    &lt;SerialNum&gt;1234&lt;/SerialNum&gt;
&lt;/Hardware&gt;</textual></programlisting><textual class="po-textual">
                                </textual></td></tr><tr class="po-table e1155 e1155"><td class="po-block e1156 e1156"><textual class="po-textual">asComplexType</textual></td><td class="po-block e1157 e1157"><textual class="po-textual">The association is explicitly represented as a global complex
                                    types. The association end encodings point out from the
                                    relationship to the target classes. The association end encoding
                                    used is 'asElement'. With this example, this encoding option
                                    makes no sense, as only one of the association ends encoded is
                                    navigable.</textual></td><td class="po-block e1158 e1158"><textual class="po-textual">
                                    </textual><programlisting class="po-block e1159 e1159" xml:space="preserve"><textual class="po-textual">&lt;xsd:complexType name="ManufacturedBy"&gt;
    &lt;xsd:sequence&gt;
        &lt;xsd:element name="ComputerMaker" type="xsd:string"/&gt;
    &lt;/xsd:sequence&gt;
&lt;/xsd:complexType&gt;</textual></programlisting><textual class="po-textual">
                                </textual></td><td class="po-block e1160 e1160"><textual class="po-textual">
                                    </textual><programlisting class="po-block e1161 e1161" xml:space="preserve"><textual class="po-textual">&lt;ManufacturedBy&gt;
    &lt;ComputerMaker&gt;Dell&lt;/ComputerMaker&gt;
&lt;/ManufacturedBy&gt;</textual></programlisting><textual class="po-textual">
                                </textual></td></tr></tbody></table></section><section class="po-hcontainer e1162 e1162"><title class="po-block e1163 e1163"><textual class="po-textual">Associations ending at a Mixin (e.g., category, roleCategory).</textual></title><para class="po-block e1164 e1164"><textual class="po-textual">Associations whose target class is a non-sortal (i.e. a mixin) can be
                        encoded as any other target class, however by default a mixin is encoded by
                        creating an xsd:choice group that encodes the relationship to the mixin as
                        if the association were drawn directly to each of the subclasses that the
                        mxin subsumes. In essence a relationship to a category results in an
                        encoding as if the relationship were drawn directly to each of the members
                        of the category.</textual></para></section></section><section class="po-hcontainer e1165 e1165" xml:id="Generalization-Encoding"><title class="po-block e1166 e1166"><textual class="po-textual">Generalization Encodings</textual></title><para class="po-block e1167 e1167"><textual class="po-textual">This section describes the common properties and encoding options used to
                    represent generalization / realization relations in a schema.</textual></para><para class="po-block e1168 e1168"><textual class="po-textual">
                    </textual><inlinemediaobject class="po-null e1169 e1169"><imageobject class="po-container e1170 e1170"><imagedata class="po-meta e1171 e1171" fileref="../../../vol3/graphics/Bauman01/Bauman01-014.jpg" format="jpg" width="50%"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></imagedata></imageobject></inlinemediaobject><textual class="po-textual">
                    </textual><table class="po-container e1172 e1172" frame="void"><caption class="po-container e1173 e1173"><para class="po-block e1174 e1174"><textual class="po-textual">Relevant Properties</textual></para></caption><thead class="po-container e1175 e1175"><tr class="po-table e1176 e1176"><th class="po-field e1177 e1177"><textual class="po-textual">Property</textual></th><th class="po-field e1178 e1178"><textual class="po-textual">Origin</textual></th><th class="po-field e1179 e1179"><textual class="po-textual">Description</textual></th><th class="po-field e1180 e1180"><textual class="po-textual">Use</textual></th><th class="po-field e1181 e1181"><textual class="po-textual">Note</textual></th></tr></thead><tbody class="po-table e1182 e1182"><tr class="po-table e1183 e1183"><td class="po-block e1184 e1184"><textual class="po-textual">code</textual></td><td class="po-block e1185 e1185"><textual class="po-textual">Built In</textual></td><td class="po-block e1186 e1186"><textual class="po-textual">The implementation name of the class.</textual></td><td class="po-block e1187 e1187"><textual class="po-textual">Used as the name for the generated schema construct subject to
                                    any name encoding rules in effect.</textual></td><td class="po-block e1188 e1188"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr><tr class="po-table e1189 e1189"><td class="po-block e1190 e1190"><textual class="po-textual">encoding</textual></td><td class="po-block e1191 e1191"><textual class="po-textual">Extended</textual></td><td class="po-block e1192 e1192"><textual class="po-textual">Controls how a generalization will be encoded.</textual></td><td class="po-block e1193 e1193"><textual class="po-textual">By default generalization relations between sortals are encoded
                                    using </textual><code class="po-atom e1194 e1194"><textual class="po-textual">xsd:extension</textual></code><textual class="po-textual"> and generalization relations
                                    between sortals and non-sortals, or between non-sortals and
                                    non-sortals as </textual><code class="po-atom e1195 e1195"><textual class="po-textual">xsd:group</textual></code><textual class="po-textual"> and / or
                                        </textual><code class="po-atom e1196 e1196"><textual class="po-textual">xsd:attributeGroup</textual></code><textual class="po-textual"> references.</textual></td></tr><tr class="po-table e1197 e1197"><td class="po-block e1198 e1198"><textual class="po-textual">navigability</textual></td><td class="po-block e1199 e1199"><textual class="po-textual">Extended</textual></td><td class="po-block e1200 e1200"><textual class="po-textual">Represents which direction(s) a generalization can be
                                    transversed (e.g., subtype to supertype, or supertype to
                                    subtype).</textual></td><td class="po-block e1201 e1201"><textual class="po-textual">Normally generalizations encode with the supertype navigable
                                    from the subtype as indicated by the arrow head in the UML
                                    representation. Occasionally its useful to navigate in the other
                                    direction to implement a collapsing of a set of subtypes into
                                    their common supertype.</textual></td><td class="po-block e1202 e1202"><textual class="po-textual">Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao Pippo! Ciao</textual></td></tr></tbody></table><table class="po-container e1203 e1203" frame="void"><caption class="po-container e1204 e1204"><para class="po-block e1205 e1205"><textual class="po-textual">Generalization Encodings</textual></para></caption><thead class="po-container e1206 e1206"><tr class="po-table e1207 e1207"><th class="po-field e1208 e1208"><textual class="po-textual">Encoding</textual></th><th class="po-field e1209 e1209"><textual class="po-textual">Navigability</textual></th><th class="po-field e1210 e1210"><textual class="po-textual">Description</textual></th><th class="po-field e1211 e1211"><textual class="po-textual">XSD Fragement</textual></th><th class="po-field e1212 e1212"><textual class="po-textual">XML Example</textual></th></tr></thead><tbody class="po-table e1213 e1213"><tr class="po-table e1214 e1214"><td class="po-block e1215 e1215"><textual class="po-textual">asExtension</textual></td><td class="po-block e1216 e1216"><textual class="po-textual">Subtype to Supertype</textual></td><td class="po-block e1217 e1217"><textual class="po-textual">A complexType is created for 'Printer', 'BWPrinter', and
                                    'ColorPrinter' with the later two extending the first.</textual></td><td class="po-block e1218 e1218"><textual class="po-textual">
                                    </textual><programlisting class="po-block e1219 e1219" xml:space="preserve"><textual class="po-textual">&lt;xsd:complexType name="ColorPrinter"&gt;
    &lt;xsd:complexContent&gt;
        &lt;xsd:extension base="Printer"&gt;
            &lt;xsd:sequence&gt;
                &lt;xsd:element name="colorLevel" type="xsd:positiveInteger"/&gt;
            &lt;/xsd:sequence&gt;
        &lt;/xsd:extension&gt;
    &lt;/xsd:complexContent&gt;
&lt;/xsd:complexType&gt;</textual></programlisting><textual class="po-textual">
                                </textual></td><td class="po-block e1220 e1220"><textual class="po-textual">
                                    </textual><programlisting class="po-block e1221 e1221" xml:space="preserve"><textual class="po-textual">&lt;ColorPrinter type="ColorPrinter"&gt;
    &lt;Name&gt;ColorPrinter1&lt;/Name&gt;
    &lt;ColorLevel&gt;8&lt;/ColorLevel&gt;
&lt;/ColorPrinter&gt;</textual></programlisting><textual class="po-textual">
                                </textual></td></tr><tr class="po-table e1222 e1222"><td class="po-block e1223 e1223"><textual class="po-textual">asGroupRef</textual></td><td class="po-block e1224 e1224"><textual class="po-textual">Subtype to Supertype</textual></td><td class="po-block e1225 e1225"><textual class="po-textual">A complexType is created for 'BWPrinter' and 'ColorPrinter".
                                    Both a group and attributeGroup are created as needed depending
                                    on the encoding of the attributes in the 'Printer' class. These
                                    groups are referenced by 'BWPrinter' and 'ColorPrinter'.</textual></td><td class="po-block e1226 e1226"><textual class="po-textual">
                                    </textual><programlisting class="po-block e1227 e1227" xml:space="preserve"><textual class="po-textual">&lt;xsd:complexType name="ColorPrinter"&gt;
    &lt;xsd:sequence&gt;
        &lt;xsd:group ref="Printer"/&gt;
        &lt;xsd:element name="ColorLevel" type="xsd:positiveInteger"/&gt;
    &lt;/xsd:sequence&gt;
    &lt;xsd:attributeGroup ref="Printer"/&gt;
&lt;/xsd:complexType&gt;</textual></programlisting><textual class="po-textual">
                                </textual></td><td class="po-block e1228 e1228"><textual class="po-textual">
                                    </textual><programlisting class="po-block e1229 e1229" xml:space="preserve"><textual class="po-textual">&lt;ColorPrinter type="ColorPrinter"&gt;
    &lt;Name&gt;ColorPrinter1&lt;/Name&gt;
    &lt;ColorLevel&gt;8&lt;/ColorLevel&gt;
&lt;/ColorPrinter&gt;</textual></programlisting><textual class="po-textual">
                                </textual></td></tr><tr class="po-table e1230 e1230"><td class="po-block e1231 e1231"><textual class="po-textual">asNested</textual></td><td class="po-block e1232 e1232"><textual class="po-textual">Supertype to Subtype</textual></td><td class="po-block e1233 e1233"><textual class="po-textual">A complexType is created for 'Printer', 'BWPrinter' and
                                    'ColorPrinter' with the first directly including the latter two.
                                    An optional choice group reflects the choice between these two
                                    mutually exclusive subtypes.</textual></td><td class="po-block e1234 e1234"><textual class="po-textual">
                                    </textual><programlisting class="po-block e1235 e1235" xml:space="preserve"><textual class="po-textual">&lt;xsd:complexType name="Printer"&gt;
    &lt;xsd:sequence&gt;
        &lt;xsd:element name="Name" type="xsd:string"/&gt;
        &lt;xsd:choice minOccurs="0"&gt;
            &lt;xsd:element name="BWPrinter" type="BWPrinter"/&gt;
            &lt;xsd:element name="ColorPrinter" type="ColorPrinter"/&gt;
        &lt;/xsd:choice&gt;
    &lt;/xsd:sequence&gt;
    &lt;xsd:attribute name="type" use="required" type="xsd:string"/&gt;
&lt;/xsd:complexType&gt;</textual></programlisting><textual class="po-textual">
                                </textual></td><td class="po-block e1236 e1236"><textual class="po-textual">
                                    </textual><programlisting class="po-block e1237 e1237" xml:space="preserve"><textual class="po-textual">&lt;Printer type="ColorPrinter"&gt;
    &lt;Name&gt;ColorPrinter1&lt;/Name&gt;
    &lt;ColorPrinter&gt;
        &lt;ColorLevel&gt;8&lt;/ColorLevel&gt;
    &lt;/ColorPrinter&gt;
&lt;/Printer&gt;</textual></programlisting><textual class="po-textual">
                                </textual></td></tr><tr class="po-table e1238 e1238"><td class="po-block e1239 e1239"><textual class="po-textual">asGroupRef</textual></td><td class="po-block e1240 e1240"><textual class="po-textual">Supertype to Subtype</textual></td><td class="po-block e1241 e1241"><textual class="po-textual">A complexType is created for 'Printer'. Both a group and / or
                                    attributeGroup are created as needed for each of 'BWPrinter' and
                                    'ColorPrinter' depending on the encoding of the attributes in
                                    each of them. An optional choice group reflects the choice
                                    between these two mutually exclusive subtypes. </textual></td><td class="po-block e1242 e1242"><textual class="po-textual">
                                    </textual><programlisting class="po-block e1243 e1243" xml:space="preserve"><textual class="po-textual">&lt;xsd:complexType name="Printer"&gt;
    &lt;xsd:sequence&gt;
        &lt;xsd:element name="Name" type="xsd:string"/&gt;
        &lt;xsd:choice minOccurs="0"&gt;
            &lt;xsd:group ref="BWPrinter"/&gt;
            &lt;xsd:group ref="ColorPrinter"/&gt;
        &lt;/xsd:choice&gt;
    &lt;/xsd:sequence&gt;
    &lt;xsd:attribute name="type" use="required" type="xsd:string"/&gt;
&lt;/xsd:complexType&gt;</textual></programlisting><textual class="po-textual">
                                </textual></td><td class="po-block e1244 e1244"><textual class="po-textual">
                                    </textual><programlisting class="po-block e1245 e1245" xml:space="preserve"><textual class="po-textual">&lt;Printer type="ColorPrinter"&gt;
    &lt;Name&gt;ColorPrinter1&lt;/Name&gt;
    &lt;ColorLevel&gt;8&lt;/ColorLevel&gt;
&lt;/Printer&gt;</textual></programlisting><textual class="po-textual">
                                </textual></td></tr></tbody></table></para></section></section></appendix><bibliography class="po-hcontainer e1246 e1246"><title class="po-block e1247 e1247"><textual class="po-textual">References</textual></title><bibliomixed class="po-block e1248 e1248" xml:id="Bernauer-2004"><textual class="po-textual">Bernauer, Martin, Gerti Kappel, Gerhard Kramler, </textual><quote class="po-inline e1249 e1249"><textual class="po-textual">
                </textual><link class="po-inline e1250 e1250" xlink:actuate="onRequest" xlink:href="http://www.big.tuwien.ac.at/research/publications/2004/0304.pdf" xlink:show="new" xlink:type="simple"><textual class="po-textual">Representing XML Schema in UML - A Comparison of Approaches</textual></link><textual class="po-textual">
            </textual></quote><textual class="po-textual">, Technical Report, 2004.</textual></bibliomixed><bibliomixed class="po-block e1251 e1251" xml:id="Fowler-2000"><textual class="po-textual">Fowler, Martin, Kendall Scott, </textual><emphasis class="po-inline e1252 e1252"><textual class="po-textual">UML Distilled -
                Second Edition</textual></emphasis><textual class="po-textual">, Addison-Wesley, 2000.</textual></bibliomixed><bibliomixed class="po-block e1253 e1253" xml:id="Guizzardi-2005"><textual class="po-textual">Guizzardi, Giancarlo, </textual><emphasis class="po-inline e1254 e1254"><textual class="po-textual">
                </textual><link class="po-inline e1255 e1255" xlink:actuate="onRequest" xlink:href="https://doc.telin.nl/dsweb/Get/Document-55835/Ontological%20Foundations%20for%20Structural%20Conceptual%20Models.pdf" xlink:show="new" xlink:type="simple"><textual class="po-textual">Ontological Foundations for Structural Conceptual Models</textual></link><textual class="po-textual">
            </textual></emphasis><textual class="po-textual">, Ph.D. Thesis, University of Twente, The Netherlands, 2005.</textual></bibliomixed><bibliomixed class="po-block e1256 e1256" xml:id="Guizzardi-2006a"><textual class="po-textual">Guizzardi, Giancarlo, 
                </textual><link class="po-inline e1257 e1257" xlink:actuate="onRequest" xlink:href="http://www.loa-cnr.it/Guizzardi/SELMAS-CR.pdf" xlink:show="new" xlink:type="simple"><textual class="po-textual">"Agent Roles, Qua
                    Individuals and The Counting Problem"</textual></link><textual class="po-textual">
                doi:</textual><biblioid class="po-atom e1258 doi e1258"><textual class="po-textual">10.1007/11738817_9</textual></biblioid><textual class="po-textual">
            , Software Engineering of Multi-Agent Systems, vol. IV, P. Giorgini, A.Garcia,
            C. Lucena, R. Choren (eds.), Springer-Verlag, 2006.</textual></bibliomixed><bibliomixed class="po-block e1259 e1259" xml:id="Guizzardi-2006b"><textual class="po-textual">Guizzardi, Giancarlo.; C. Masolo.; S.Borgo, 
                </textual><link class="po-inline e1260 e1260" xlink:actuate="onRequest" xlink:href="http://www.loa-cnr.it/Papers/ER2006CR.pdf" xlink:show="new" xlink:type="simple"><textual class="po-textual">"In the Defense of a
                    Trope-Based Ontology for Conceptual Modeling: An Example with the Foundations of
                    Attributes, Weak Entities and Datatypes"</textual></link><textual class="po-textual">
                doi:</textual><biblioid class="po-atom e1261 doi e1261"><textual class="po-textual">10.1007/11901181_10</textual></biblioid><textual class="po-textual">
            , 25th International Conference on Conceptual Modeling (ERâ2006), Arizona, USA,
            2006.</textual></bibliomixed><bibliomixed class="po-block e1262 e1262" xml:id="Guizzardi-2007"><textual class="po-textual">Guizzardi, Giancarlo. 
                </textual><link class="po-inline e1263 e1263" xlink:actuate="onRequest" xlink:href="http://www.loa-cnr.it/Guizzardi/CAISE-CR-2007.pdf" xlink:show="new" xlink:type="simple"><emphasis class="po-inline e1264 e1264"><textual class="po-textual">Modal Aspects
                    of Object Types and Part-Whole Relations and the de re/de dicto
                    distinction</textual></emphasis></link><textual class="po-textual">
                doi:</textual><biblioid class="po-atom e1265 doi e1265"><textual class="po-textual">10.1007/978-3-540-72988-4_2</textual></biblioid><textual class="po-textual">
            , 19th International Conference on Advanced Information Systems Engineering
            (CAISEâ07), Trondheim, 2007, Lecture Notes in Computer Science 4495,
            Springer-Verlag.</textual></bibliomixed><bibliomixed class="po-block e1266 e1266" xml:id="Guizzardi-2008"><textual class="po-textual">Guizzardi, Giancarlo, Gerd Wagner, 
                </textual><link class="po-inline e1267 e1267" xlink:actuate="onRequest" xlink:href="http://www.inf.ufes.br/~gguizzardi/ER2008-CR-GuizzardiWagner.pdf" xlink:show="new" xlink:type="simple"><textual class="po-textual">"What's in a Relationship: An Ontological Analysis"</textual></link><textual class="po-textual">
                doi:</textual><biblioid class="po-atom e1268 doi e1268"><textual class="po-textual">10.1007/978-3-540-87877-3_8</textual></biblioid><textual class="po-textual">
            , 27th International Conference on Conceptual Modeling (ER'2008), Barcelona,
            Spain, Lecture Notes in Computer Science. , v.5231, p.83 - 97, 2008.</textual></bibliomixed><bibliomixed class="po-block e1269 e1269" xml:id="ISO-TR9007"><textual class="po-textual">ISO/TR9007:1987(E) Information processing systems -
            Concepts and terminology for the conceptual schema and information base,
            1987.</textual></bibliomixed><bibliomixed class="po-block e1270 e1270" xml:id="NeÄaskÃ½-2006"><textual class="po-textual">NeÄaskÃ½, Martin, </textual><quote class="po-inline e1271 e1271"><textual class="po-textual">
                </textual><link class="po-inline e1272 e1272" xlink:actuate="onRequest" xlink:href="http://ftp.informatik.rwth-aachen.de/Publications/CEUR-WS/Vol-176/paper7.pdf" xlink:show="new" xlink:type="simple"><textual class="po-textual">Conceptual Modeling for XML: A Survey</textual></link><textual class="po-textual">
            </textual></quote><textual class="po-textual">, Proceedings of the Dateso 2006 Annual International Workshop on DAtabases,
            TExts, Specifications and Objects, Desna, Czech Republic, April 26-28,
            2006.</textual></bibliomixed><bibliomixed class="po-block e1273 e1273" xml:id="OMG-MDA"><textual class="po-textual">OMG. </textual><emphasis class="po-inline e1274 e1274"><textual class="po-textual">
                </textual><link class="po-inline e1275 e1275" xlink:actuate="onRequest" xlink:href="http://www.omg.org/cgi-bin/doc?omg/03-06-01" xlink:show="new" xlink:type="simple"><textual class="po-textual">MDA Guide Version
                    1.0.1</textual></link><textual class="po-textual">
            </textual></emphasis><textual class="po-textual"> OMG Document omg.2003-06-01, 2003.</textual></bibliomixed><bibliomixed class="po-block e1276 e1276" xml:id="Simsion-2005"><textual class="po-textual">Simsion, Graeme, Grahm Witt </textual><emphasis class="po-inline e1277 e1277"><textual class="po-textual">Data Modeling
                Essentials, Analysis, Design and Innovation</textual></emphasis><textual class="po-textual">, Third Edition, Morgan
            Kaufmann Publishers, 2005. </textual></bibliomixed><bibliomixed class="po-block e1278 e1278" xml:id="Simsion-2007"><textual class="po-textual">Simsion, Graeme, </textual><emphasis class="po-inline e1279 e1279"><textual class="po-textual">Data Modeling Theory and
                Practice</textual></emphasis><textual class="po-textual">, Technics Publications, LLC, U.S.A, 2007.</textual></bibliomixed><bibliomixed class="po-block e1280 e1280" xml:id="Sperberg-McQueen-2008"><textual class="po-textual">Sperberg-McQueen, C. M. </textual><quote class="po-inline e1281 e1281"><textual class="po-textual">
                </textual><link class="po-inline e1282 e1282" xlink:actuate="onRequest" xlink:href="http://www.balisage.net/Proceedings/vol1/html/Sperberg-McQueen02/BalisageVol1-Sperberg-McQueen02.html" xlink:show="new" xlink:type="simple"><textual class="po-textual">But wait, there's more!</textual></link><textual class="po-textual">
            </textual></quote><textual class="po-textual"> doi:</textual><biblioid class="po-atom e1283 doi e1283"><textual class="po-textual">10.4242/BalisageVol1.Sperberg-McQueen02</textual></biblioid><textual class="po-textual">, Presented at Balisage: The Markup Conference, 12 - 15 August 2008. In
            Proceedings of Balisage: The Markup Conference (2008).</textual></bibliomixed><bibliomixed class="po-block e1284 e1284" xml:id="Verelst-2004"><textual class="po-textual">Verelst, J. </textual><quote class="po-inline e1285 e1285"><textual class="po-textual">Variability in Conceptual
                Modeling</textual></quote><textual class="po-textual">, University of Antwerp, 2004.</textual></bibliomixed></bibliography></article></classedDocument>